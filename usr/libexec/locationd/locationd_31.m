BOOL sub_101573EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL result;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  uint64_t v20;
  long long *v21;
  long long *v22;
  long long *v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  BOOL v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  unsigned char v54[32];
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  unsigned char v59[32];
  unsigned char v60[32];
  unsigned char v61[32];
  unsigned char v62[32];
  unsigned char v63[32];

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 88) < *(double *)(a1 + 8))
      {
        v47 = *(_OWORD *)(a1 + 32);
        v53 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)v59 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v59[16] = *(_OWORD *)(a1 + 80);
        v35 = *(_OWORD *)a1;
        v41 = *(_OWORD *)(a1 + 16);
        v6 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 16) = v6;
        v8 = *(_OWORD *)(a2 - 48);
        v7 = *(_OWORD *)(a2 - 32);
        v9 = *(_OWORD *)(a2 - 64);
        *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 - 20);
        *(_OWORD *)(a1 + 48) = v8;
        *(_OWORD *)(a1 + 64) = v7;
        *(_OWORD *)(a1 + 32) = v9;
        *(_OWORD *)(a2 - 64) = v47;
        *(_OWORD *)(a2 - 48) = v53;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v59;
        *(_OWORD *)(a2 - 20) = *(_OWORD *)&v59[12];
        *(_OWORD *)(a2 - 96) = v35;
        *(_OWORD *)(a2 - 80) = v41;
      }
      return result;
    case 3uLL:
      sub_100C82F60(a1, a1 + 96, a2 - 96);
      return 1;
    case 4uLL:
      sub_100C8354C(a1, a1 + 96, a1 + 192, a2 - 96);
      return 1;
    case 5uLL:
      v21 = (long long *)(a1 + 96);
      v22 = (long long *)(a1 + 192);
      v23 = (long long *)(a1 + 288);
      sub_100C8354C(a1, a1 + 96, a1 + 192, a1 + 288);
      if (*(double *)(a2 - 88) >= *(double *)(a1 + 296)) {
        return 1;
      }
      v49 = *(_OWORD *)(a1 + 320);
      v55 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)v60 = *(_OWORD *)(a1 + 352);
      *(_OWORD *)&v60[16] = *(_OWORD *)(a1 + 368);
      v37 = *v23;
      v43 = *(_OWORD *)(a1 + 304);
      v24 = *(_OWORD *)(a2 - 80);
      *v23 = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 304) = v24;
      v26 = *(_OWORD *)(a2 - 48);
      v25 = *(_OWORD *)(a2 - 32);
      v27 = *(_OWORD *)(a2 - 64);
      *(_OWORD *)(a1 + 364) = *(_OWORD *)(a2 - 20);
      *(_OWORD *)(a1 + 336) = v26;
      *(_OWORD *)(a1 + 352) = v25;
      *(_OWORD *)(a1 + 320) = v27;
      *(_OWORD *)(a2 - 64) = v49;
      *(_OWORD *)(a2 - 48) = v55;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v60;
      *(_OWORD *)(a2 - 20) = *(_OWORD *)&v60[12];
      *(_OWORD *)(a2 - 96) = v37;
      *(_OWORD *)(a2 - 80) = v43;
      if (*(double *)(a1 + 296) >= *(double *)(a1 + 200)) {
        return 1;
      }
      v50 = *(_OWORD *)(a1 + 224);
      v56 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)v61 = *(_OWORD *)(a1 + 256);
      *(_OWORD *)&v61[16] = *(_OWORD *)(a1 + 272);
      v38 = *v22;
      v44 = *(_OWORD *)(a1 + 208);
      v28 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 240) = v28;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 268) = *(_OWORD *)(a1 + 364);
      v29 = *(_OWORD *)(a1 + 304);
      *v22 = *v23;
      *(_OWORD *)(a1 + 208) = v29;
      *v23 = v38;
      *(_OWORD *)(a1 + 304) = v44;
      *(_OWORD *)(a1 + 364) = *(_OWORD *)&v61[12];
      v30 = *(double *)(a1 + 200) < *(double *)(a1 + 104);
      *(_OWORD *)(a1 + 336) = v56;
      *(_OWORD *)(a1 + 352) = *(_OWORD *)v61;
      *(_OWORD *)(a1 + 320) = v50;
      if (!v30) {
        return 1;
      }
      v51 = *(_OWORD *)(a1 + 128);
      v57 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)v62 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)&v62[16] = *(_OWORD *)(a1 + 176);
      v39 = *v21;
      v45 = *(_OWORD *)(a1 + 112);
      v31 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 224);
      *(_OWORD *)(a1 + 144) = v31;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 172) = *(_OWORD *)(a1 + 268);
      v32 = *(_OWORD *)(a1 + 208);
      *v21 = *v22;
      *(_OWORD *)(a1 + 112) = v32;
      *v22 = v39;
      *(_OWORD *)(a1 + 208) = v45;
      *(_OWORD *)(a1 + 268) = *(_OWORD *)&v62[12];
      v30 = *(double *)(a1 + 104) < *(double *)(a1 + 8);
      *(_OWORD *)(a1 + 240) = v57;
      *(_OWORD *)(a1 + 256) = *(_OWORD *)v62;
      *(_OWORD *)(a1 + 224) = v51;
      if (!v30) {
        return 1;
      }
      v52 = *(_OWORD *)(a1 + 32);
      v58 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)v63 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)&v63[16] = *(_OWORD *)(a1 + 80);
      v40 = *(_OWORD *)a1;
      v46 = *(_OWORD *)(a1 + 16);
      v33 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(a1 + 48) = v33;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 76) = *(_OWORD *)(a1 + 172);
      v34 = *(_OWORD *)(a1 + 112);
      *(_OWORD *)a1 = *v21;
      *(_OWORD *)(a1 + 16) = v34;
      *v21 = v40;
      *(_OWORD *)(a1 + 112) = v46;
      *(_OWORD *)(a1 + 172) = *(_OWORD *)&v63[12];
      result = 1;
      *(_OWORD *)(a1 + 144) = v58;
      *(_OWORD *)(a1 + 160) = *(_OWORD *)v63;
      *(_OWORD *)(a1 + 128) = v52;
      return result;
    default:
      v10 = a1 + 192;
      sub_100C82F60(a1, a1 + 96, a1 + 192);
      v11 = a1 + 288;
      if (a1 + 288 == a2) {
        return 1;
      }
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(double *)(v11 + 8);
    if (v14 < *(double *)(v10 + 8))
    {
      v15 = *(void *)v11;
      v48 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)v54 = *(_OWORD *)(v11 + 64);
      *(_OWORD *)&v54[16] = *(_OWORD *)(v11 + 80);
      v16 = v12;
      v36 = *(_OWORD *)(v11 + 16);
      v42 = *(_OWORD *)(v11 + 32);
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_OWORD *)(a1 + v16 + 240);
        *(_OWORD *)(v17 + 320) = *(_OWORD *)(a1 + v16 + 224);
        *(_OWORD *)(v17 + 336) = v18;
        *(_OWORD *)(v17 + 352) = *(_OWORD *)(a1 + v16 + 256);
        v19 = *(_OWORD *)(a1 + v16 + 208);
        *(_OWORD *)(v17 + 288) = *(_OWORD *)(a1 + v16 + 192);
        *(_OWORD *)(v17 + 304) = v19;
        *(_OWORD *)(a1 + v16 + 364) = *(_OWORD *)(a1 + v16 + 268);
        if (v16 == -192) {
          break;
        }
        v16 -= 96;
        if (v14 >= *(double *)(v17 + 104))
        {
          v20 = a1 + v16 + 288;
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      *(void *)v20 = v15;
      *(double *)(v20 + 8) = v14;
      *(_OWORD *)(v20 + 48) = v48;
      *(_OWORD *)(v20 + 64) = *(_OWORD *)v54;
      *(_OWORD *)(v20 + 76) = *(_OWORD *)&v54[12];
      ++v13;
      *(_OWORD *)(v20 + 16) = v36;
      *(_OWORD *)(v20 + 32) = v42;
      if (v13 == 8) {
        return v11 + 96 == a2;
      }
    }
    v10 = v11;
    v12 += 96;
    v11 += 96;
    if (v11 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1015742E8(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = sub_1011C08D4(a1, a2, a3, a4, a5, a6);
  *(void *)uint64_t v7 = off_10232DC68;
  *(void *)(v7 + 184) = 0;
  *(_WORD *)(v7 + 192) = 0;
  v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonBackgroundActivitySession(ctor) #clbas", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232DCF0);
  }
  v9 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 16);
    *(_DWORD *)buf = 68289794;
    int v16 = 0;
    __int16 v17 = 2082;
    v18 = "";
    __int16 v19 = 2082;
    v20 = "activity";
    __int16 v21 = 2114;
    uint64_t v22 = v10;
    __int16 v23 = 2050;
    uint64_t v24 = a1;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLDaemonBackgroundActivitySession(ctor) #clbas\", \"event\":%{public, location:escape_only}s, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x30u);
  }
  uint64_t v11 = *(void *)(a1 + 24);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1015744F0;
  v13[3] = &unk_1022BF730;
  v13[4] = a1;
  sub_1007B39D0(v11, (uint64_t)v13);
  *(unsigned char *)(a1 + 193) = sub_1011C0EB4(a1);
  sub_1015747B8(a1);
  os_activity_scope_leave(&state);
  return a1;
}

void sub_1015744C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  sub_1015757E0(v16, 0);
  sub_1011C0F50(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1015744F0(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(const void *))(*(void *)a2 + 24))(a2) != 3) {
    return 0;
  }
  uint64_t result = (uint64_t)[*(id *)(v3 + 16) isEqual:sub_10014D19C((uint64_t)a2)];
  if (result)
  {
    uint64_t v6 = *(void *)(v3 + 184);
    *(void *)(v3 + 184) = v5[23];
    v5[23] = v6;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_10232DD10);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24))(a2);
      uint64_t v9 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v8;
      __int16 v19 = 2114;
      uint64_t v20 = v9;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_10232DD10);
      }
    }
    uint64_t v10 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v11 = (*(uint64_t (**)(const void *))(*(void *)a2 + 24))(a2);
      uint64_t v12 = *(void *)(v3 + 16);
      int v13 = 68289794;
      int v14 = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 1026;
      int v18 = v11;
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2050;
      uint64_t v22 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas consumeMatchingButterfly", "{\"msg%{public}.0s\":\"#clbas consumeMatchingButterfly\", \"dicType\":%{public}d, \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v13, 0x2Cu);
    }
    return 1;
  }
  return result;
}

void sub_1015747B8(uint64_t a1)
{
  if (sub_1011C38AC(a1))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232DCF0);
    }
    v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v26 = 2082;
      v27 = "";
      __int16 v28 = 2114;
      uint64_t v29 = v3;
      __int16 v30 = 2050;
      uint64_t v31 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas trying WIU #AutoPrompt-ing\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232DCF0);
      }
    }
    v4 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v5 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v26 = 2082;
      v27 = "";
      __int16 v28 = 2114;
      uint64_t v29 = v5;
      __int16 v30 = 2050;
      uint64_t v31 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas trying WIU #AutoPrompt-ing", "{\"msg%{public}.0s\":\"#clbas trying WIU #AutoPrompt-ing\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
    sub_1011C3A24(a1);
  }
  sub_1011C3B0C((id *)a1);
  int v6 = *(unsigned __int8 *)(a1 + 192);
  if ([*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:786448]
    && ([*(id *)(a1 + 40) inUseLevelIsAtLeast:4] & 1) != 0
    || *(unsigned char *)(a1 + 193))
  {
    uint64_t v7 = *(void *)(a1 + 184);
    *(unsigned char *)(a1 + 192) = 1;
    *(unsigned char *)(a1 + 48) = 0;
    if (!v7)
    {
      [*(id *)(a1 + 40) transientAwareRegistrationResult];
      [objc_msgSend(*(id *)(a1 + 32), "silo") queue];
      operator new();
    }
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232DCF0);
    }
    int v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v26 = 2082;
      v27 = "";
      __int16 v28 = 2114;
      uint64_t v29 = v9;
      __int16 v30 = 2050;
      uint64_t v31 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas skip BlueBar assertions, already active\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232DCF0);
      }
    }
    uint64_t v10 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v11 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v26 = 2082;
      v27 = "";
      __int16 v28 = 2114;
      uint64_t v29 = v11;
      __int16 v30 = 2050;
      uint64_t v31 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas skip BlueBar assertions, already active", "{\"msg%{public}.0s\":\"#clbas skip BlueBar assertions, already active\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    sub_1015757E0((uint64_t *)(a1 + 184), 0);
    sub_1015757E0((uint64_t *)(a1 + 184), 0);
    *(unsigned char *)(a1 + 192) = 0;
    *(unsigned char *)(a1 + 48) = 1;
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232DCF0);
    }
    uint64_t v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v26 = 2082;
      v27 = "";
      __int16 v28 = 2114;
      uint64_t v29 = v13;
      __int16 v30 = 2050;
      uint64_t v31 = a1;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas BlueBar assertions released. Session marked inactive\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232DCF0);
      }
    }
    int v14 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      uint64_t v15 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v26 = 2082;
      v27 = "";
      __int16 v28 = 2114;
      uint64_t v29 = v15;
      __int16 v30 = 2050;
      uint64_t v31 = a1;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas BlueBar assertions released. Session marked inactive", "{\"msg%{public}.0s\":\"#clbas BlueBar assertions released. Session marked inactive\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
    int v16 = *(unsigned __int8 *)(a1 + 192);
    if (v6 != v16)
    {
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232DCF0);
      }
      __int16 v17 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 16);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v26 = 2082;
        v27 = "";
        __int16 v28 = 2114;
        uint64_t v29 = v18;
        __int16 v30 = 2050;
        uint64_t v31 = a1;
        __int16 v32 = 1026;
        v33[0] = v6;
        LOWORD(v33[1]) = 1026;
        *(_DWORD *)((char *)&v33[1] + 2) = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas active state changed. persist for #dic rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"wasActive\":%{public}hhd, \"isActive\":%{public}hhd}", buf, 0x32u);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_10232DCF0);
        }
      }
      __int16 v19 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v20 = *(void *)(a1 + 16);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v26 = 2082;
        v27 = "";
        __int16 v28 = 2114;
        uint64_t v29 = v20;
        __int16 v30 = 2050;
        uint64_t v31 = a1;
        __int16 v32 = 1026;
        v33[0] = v6;
        LOWORD(v33[1]) = 1026;
        *(_DWORD *)((char *)&v33[1] + 2) = v16;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas active state changed. persist for #dic rehydration", "{\"msg%{public}.0s\":\"#clbas active state changed. persist for #dic rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"wasActive\":%{public}hhd, \"isActive\":%{public}hhd}", buf, 0x32u);
      }
      sub_100134750(buf, (char *)[+[NSString stringWithFormat:@"%p", a1] UTF8String]);
      uint64_t v22 = *(void *)(a1 + 16);
      uint64_t v21 = *(void *)(a1 + 24);
      unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
      uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
      sub_1007A4ED4(v21, v22, (uint64_t *)buf, v23, v24, 1);
      if (SBYTE3(v29) < 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_1011C3CD8(a1);
  }
}

void sub_1015750DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t sub_101575124(void *a1)
{
  *a1 = off_10232DC68;
  sub_1011C2B50();
  sub_1015757E0(a1 + 23, 0);

  return sub_1011C0F50((uint64_t)a1);
}

void sub_101575190(void *a1)
{
  sub_101575124(a1);

  operator delete();
}

void sub_1015751C8(uint64_t a1, CLConnectionMessage **a2)
{
  v4 = (void *)CLConnectionMessage::name(*a2);
  int v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 44)
    {
LABEL_7:
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232DCF0);
      }
      int v6 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 16);
        uint64_t v8 = CLConnectionMessage::name(*a2);
        uint64_t v9 = *(char *)(v8 + 23) >= 0 ? v8 : *(void *)v8;
        int v16 = 68289794;
        int v17 = 0;
        __int16 v18 = 2082;
        __int16 v19 = "";
        __int16 v20 = 2114;
        uint64_t v21 = v7;
        __int16 v22 = 2050;
        uint64_t v23 = a1;
        __int16 v24 = 2082;
        uint64_t v25 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #clbas received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x30u);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_10232DCF0);
        }
      }
      uint64_t v10 = qword_102419528;
      if (os_signpost_enabled((os_log_t)qword_102419528))
      {
        uint64_t v11 = *(void *)(a1 + 16);
        uint64_t v12 = CLConnectionMessage::name(*a2);
        if (*(char *)(v12 + 23) >= 0) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = *(void *)v12;
        }
        int v16 = 68289794;
        int v17 = 0;
        __int16 v18 = 2082;
        __int16 v19 = "";
        __int16 v20 = 2114;
        uint64_t v21 = v11;
        __int16 v22 = 2050;
        uint64_t v23 = a1;
        __int16 v24 = 2082;
        uint64_t v25 = v13;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning #clbas received unhandled message", "{\"msg%{public}.0s\":\"#Warning #clbas received unhandled message\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x30u);
      }
      return;
    }
    v4 = (void *)*v4;
  }
  else if (v5 != 44)
  {
    goto LABEL_7;
  }
  if (memcmp(v4, "kCLConnectionMessageDestroyUponDisconnection", 0x2CuLL)) {
    goto LABEL_7;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232DCF0);
  }
  int v14 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    int v16 = 68289538;
    int v17 = 0;
    __int16 v18 = 2082;
    __int16 v19 = "";
    __int16 v20 = 2114;
    uint64_t v21 = v15;
    __int16 v22 = 2050;
    uint64_t v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas setting destroyUponDisconnection as True\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v16, 0x26u);
  }
  *(unsigned char *)(a1 + 48) = 1;
}

uint64_t sub_1015754B4()
{
  return 3;
}

uint64_t sub_1015754BC()
{
  return 12311;
}

void sub_1015754C4(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232DCF0);
  }
  v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v3;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232DCF0);
    }
  }
  v4 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    uint64_t v5 = *(void *)(a1 + 16);
    int v6 = 68289538;
    int v7 = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v5;
    __int16 v12 = 2050;
    uint64_t v13 = a1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas authContext has changed", "{\"msg%{public}.0s\":\"#clbas authContext has changed\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", (uint8_t *)&v6, 0x26u);
  }
  sub_1015747B8(a1);
}

uint64_t sub_101575674(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

NSDictionary *sub_10157567C(uint64_t a1)
{
  v4[0] = @"SessionActive";
  v2 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 192)];
  v4[1] = @"SDKAtLeast2024";
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:2];
}

uint64_t sub_101575720(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192)) {
    return 0;
  }
  unsigned __int8 v3 = [*(id *)(a1 + 40) diagnosticMask];
  if ((int)[*(id *)(a1 + 40) inUseLevel] >= 4) {
    uint64_t v1 = v3 & 3;
  }
  else {
    uint64_t v1 = v3 & 3 | 0x10;
  }
  if ([*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:16]
    && [*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:0x40000]
    && [*(id *)(a1 + 40) inUseLevelIsAtLeast:4])
  {
    v1 |= 0x1000uLL;
  }
  if (([*(id *)(a1 + 40) isAuthorizedForServiceTypeMask:0x100000] & 1) == 0
    && [*(id *)(a1 + 40) transientAwareRegistrationResult] == 4)
  {
    return v1 | 0x1000;
  }
  return v1;
}

uint64_t sub_1015757E0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101576134(result);
    operator delete();
  }
  return result;
}

void sub_101575830(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_101575860(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_101575890(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  *a1 = sub_1007E033C(a5);
  id v8 = [objc_alloc((Class)STActivityAttribution) initWithAttributedEntity:[objc_alloc((Class)STAttributedEntity) initWithExecutableIdentity:[objc_alloc((Class)STExecutableIdentity) initWithApplicationBundleIdentifier:[a2 bundleId]]]];
  id v9 = objc_alloc((Class)STBackgroundActivitiesStatusDomainBackgroundActivityAttribution);
  a1[1] = (uint64_t)[v9 initWithBackgroundActivityIdentifier:STBackgroundActivityIdentifierBackgroundLocation activityAttribution:v8 showsWhenForeground:0];
  sub_101575A64((uint64_t)a1, 1);
  sub_100134750(&__p, "DaemonBackgroundActivitySession");
  sub_100018728(a5, (uint64_t)a2, &__p, 4, v11);
  operator new();
}

void sub_1015759F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

id sub_101575A64(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232DCF0);
  }
  uint64_t v5 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = v4;
    __int16 v18 = 1026;
    int v19 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas publishAttribution\", \"ActivityAttribution\":\"%{public}p\", \"publish\":%{public}hhd}", buf, 0x22u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232DCF0);
    }
  }
  int v6 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    *(_DWORD *)buf = 68289538;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2050;
    uint64_t v17 = v4;
    __int16 v18 = 1026;
    int v19 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas publishAttribution", "{\"msg%{public}.0s\":\"#clbas publishAttribution\", \"ActivityAttribution\":\"%{public}p\", \"publish\":%{public}hhd}", buf, 0x22u);
  }
  int v7 = *(void **)a1;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_101575CB0;
  v10[3] = &unk_10232DD38;
  char v11 = a2;
  v10[4] = v4;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_101575F9C;
  v9[3] = &unk_10229FED8;
  v9[4] = v4;
  return [v7 updateVolatileData:v10 completion:v9];
}

id sub_101575CB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40))
  {
    [a2 addAttribution:v5];
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232DCF0);
    }
    int v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [[objc_msgSend(*(id *)(a1 + 32), "debugDescription") UTF8String];
      uint64_t v16 = 68289282;
      *(_WORD *)uint64_t v17 = 2082;
      *(void *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2082;
      *(void *)&v17[12] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution added\", \"ActivityAttribution\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232DCF0);
      }
    }
    id v8 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      id v9 = [[objc_msgSend(*(id *)(a1 + 32), "debugDescription") UTF8String];
      uint64_t v16 = 68289282;
      *(_WORD *)uint64_t v17 = 2082;
      *(void *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2082;
      *(void *)&v17[12] = v9;
      __int16 v10 = "#clbas BackgroundActivityAttribution added";
      char v11 = "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution added\", \"ActivityAttribution\":%{public, locat"
            "ion:escape_only}s}";
LABEL_16:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v10, v11, (uint8_t *)&v16, 0x1Cu);
    }
  }
  else
  {
    [a2 removeAttribution:v5];
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232DCF0);
    }
    __int16 v12 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [[objc_msgSend(*(id *)(a1 + 32), "debugDescription") UTF8String];
      uint64_t v16 = 68289282;
      *(_WORD *)uint64_t v17 = 2082;
      *(void *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2082;
      *(void *)&v17[12] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution removed\", \"ActivityAttribution\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232DCF0);
      }
    }
    id v8 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      id v14 = [[objc_msgSend(*(id *)(a1 + 32), "debugDescription") UTF8String];
      uint64_t v16 = 68289282;
      *(_WORD *)uint64_t v17 = 2082;
      *(void *)&v17[2] = "";
      *(_WORD *)&v17[10] = 2082;
      *(void *)&v17[12] = v14;
      __int16 v10 = "#clbas BackgroundActivityAttribution removed";
      char v11 = "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution removed\", \"ActivityAttribution\":%{public, loc"
            "ation:escape_only}s}";
      goto LABEL_16;
    }
  }
  return [a3 setUserInitiated:1 v16, *(_OWORD *)v17, *(void *)&v17[16]];
}

void sub_101575F9C(uint64_t a1)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10232DCF0);
  }
  v2 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [[objc_msgSend(*(id *)(a1 + 32), "debugDescription") UTF8String];
    int v6 = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    id v9 = "";
    __int16 v10 = 2082;
    id v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution completed\", \"ActivityAttribution\":%{public, location:escape_only}s}", (uint8_t *)&v6, 0x1Cu);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232DCF0);
    }
  }
  uint64_t v4 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528))
  {
    id v5 = [[objc_msgSend(*(id *)(a1 + 32), "debugDescription") UTF8String];
    int v6 = 68289282;
    int v7 = 0;
    __int16 v8 = 2082;
    id v9 = "";
    __int16 v10 = 2082;
    id v11 = v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#clbas BackgroundActivityAttribution completed", "{\"msg%{public}.0s\":\"#clbas BackgroundActivityAttribution completed\", \"ActivityAttribution\":%{public, location:escape_only}s}", (uint8_t *)&v6, 0x1Cu);
  }
}

uint64_t sub_101576134(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  sub_10017FD18((uint64_t *)(a1 + 16), 0);
  sub_10017FD18((uint64_t *)(a1 + 16), 0);
  sub_10017FD18((uint64_t *)(a1 + 16), 0);
  return a1;
}

uint64_t sub_10157619C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    *a2 = off_10232DDC8;
    a2[1] = result;
    a2[3] = a2;
  }
  else
  {
    uint64_t v2 = sub_101ABC2AC();
    return sub_1015761D8(v2);
  }
  return result;
}

void sub_1015761D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_100F42980(a1 + 8, a3);
  *(void *)(a1 + 40) = 0;
  sub_1000E23EC((unsigned char *)(a1 + 48), (uint64_t)&byte_10248AB18);
  *(unsigned char *)(a1 + 144) = 0;
  sub_1001AE6FC();
}

void sub_1015762FC(_Unwind_Exception *a1)
{
  if (*(unsigned char *)(v2 + 136) && *(char *)(v2 + 79) < 0) {
    operator delete(*(void **)(v2 + 56));
  }
  uint64_t v4 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1002F8A04(v1);
  _Unwind_Resume(a1);
}

void sub_10157636C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10157619C(a3, v5);
  sub_1015761D8(a1, a2, (uint64_t)v5);
}

void sub_1015763EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002F8A04((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10157640C(int a1, int *a2, unsigned __int8 *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232DD78);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiServiceClient::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232DD78);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiServiceClient::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10157684C((uint64_t)a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015765D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015765F8(uint64_t a1)
{
  [*(id *)(*(void *)(a1 + 40) + 16) unregister:*(void *)(*(void *)(a1 + 40) + 8) forNotification:1];
  [*(id *)(*(void *)(a1 + 40) + 16) unregister:*(void *)(*(void *)(a1 + 40) + 8) forNotification:6];
  [*(id *)(*(void *)(a1 + 40) + 16) unregister:*(void *)(*(void *)(a1 + 40) + 8) forNotification:7];
  if (*(unsigned char *)(a1 + 136) && *(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_1002F8A04((void *)(a1 + 8));
  return a1;
}

id sub_1015766A4(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == 1)
  {
    a1 = sub_101ABC418();
    goto LABEL_8;
  }
  if (v2 == 6)
  {
LABEL_8:
    a1 = sub_101ABC57C(a1);
    goto LABEL_9;
  }
  if (v2 == 7)
  {
LABEL_9:
    uint64_t v7 = sub_101ABC6E0(a1);
    return (id)sub_1015766FC(v7);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v4 = *(void **)(v3 + 16);

  return [v4 register:v5 forNotification:registrationInfo:];
}

id sub_1015766FC(uint64_t a1, int *a2)
{
  int v2 = *a2;
  if (*a2 == 1)
  {
    a1 = sub_101ABC844();
    goto LABEL_8;
  }
  if (v2 == 6)
  {
LABEL_8:
    a1 = sub_101ABC9A8(a1);
    goto LABEL_9;
  }
  if (v2 == 7)
  {
LABEL_9:
    uint64_t v7 = sub_101ABCB0C(a1);
    return (id)sub_101576750(v7);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v4 = *(void **)(v3 + 16);

  return [v4 unregister:v5 forNotification:];
}

BOOL sub_101576750(uint64_t a1)
{
  return *(unsigned char *)(a1 + 136) && *(_DWORD *)(a1 + 88) > 0;
}

uint64_t sub_101576770(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 113);
}

unsigned char *sub_101576778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 136) && *(int *)(a1 + 88) > 0)
  {
    *(void *)a2 = *(void *)(a1 + 48);
    uint64_t result = (unsigned char *)(a2 + 8);
    if (*(char *)(a1 + 79) < 0)
    {
      uint64_t result = sub_1000DC48C(result, *(void **)(a1 + 56), *(void *)(a1 + 64));
    }
    else
    {
      *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 56);
      *(void *)(a2 + 24) = *(void *)(a1 + 72);
    }
    long long v7 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 48) = v7;
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 112);
    uint64_t v6 = *(void *)(a1 + 128);
  }
  else
  {
    *(void *)a2 = qword_10248AB78;
    uint64_t result = (unsigned char *)(a2 + 8);
    if (byte_10248AB80[23] < 0)
    {
      uint64_t result = sub_1000DC48C(result, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
    }
    else
    {
      *(_OWORD *)uint64_t result = *(_OWORD *)byte_10248AB80;
      *(void *)(a2 + 24) = *(void *)&byte_10248AB80[16];
    }
    long long v5 = xmmword_10248ABA8;
    *(_OWORD *)(a2 + 32) = xmmword_10248AB98;
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = xmmword_10248ABB8;
    uint64_t v6 = qword_10248ABC8;
  }
  *(void *)(a2 + 80) = v6;
  return result;
}

void sub_10157684C(uint64_t a1, int a2, int *a3, unsigned __int8 *a4)
{
  if ((*a3 - 6) >= 2)
  {
    if (*a3 == 1)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232DD98);
      }
      char v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        int v12 = *a3;
        int v13 = *(unsigned __int8 *)(a1 + 144);
        int v14 = *a4;
        *(_DWORD *)buf = 67109632;
        int v20 = v12;
        LOWORD(__p) = 1024;
        *(_DWORD *)((char *)&__p + 2) = v13;
        HIWORD(__p) = 1024;
        int v22 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "notification, %d, kNotificationPower, fIsWifiPowered, %d, data.power, %d", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232DD98);
        }
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiServiceClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      *(unsigned char *)(a1 + 144) = *a4;
    }
  }
  else
  {
    if (a4[96]) {
      BOOL v8 = *((_DWORD *)a4 + 12) <= 0;
    }
    else {
      BOOL v8 = 1;
    }
    int v9 = !v8;
    if (*(unsigned char *)(a1 + 136)) {
      BOOL v10 = *(_DWORD *)(a1 + 88) > 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232DD98);
    }
    uint64_t v15 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      int v16 = *a3;
      *(_DWORD *)buf = 67240704;
      int v20 = v16;
      LOWORD(__p) = 1026;
      *(_DWORD *)((char *)&__p + 2) = v10;
      HIWORD(__p) = 1026;
      int v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "notification, %{public}d, kNotificationLinkStatus/Roam, wasAssociated, %{public}d, isAssociated, %{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232DD98);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiServiceClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    sub_100D55690((uint64_t)(a4 + 8), (uint64_t)buf);
    sub_1000E2DB0(a1 + 48, (uint64_t)buf);
    if (v24 && v23 < 0) {
      operator delete(__p);
    }
  }
  if (*(void *)(a1 + 32)) {
    sub_101576C78(a1 + 8, a2);
  }
}

void sub_101576C6C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101576C78(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_101576CCC(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_101576CFC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101576D2C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101576D60()
{
}

void *sub_101576D74(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10232DDC8;
  result[1] = v3;
  return result;
}

uint64_t sub_101576DBC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10232DDC8;
  a2[1] = v2;
  return result;
}

uint64_t sub_101576DE8(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), *a2);
}

uint64_t sub_101576E14(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101576E54()
{
}

uint64_t sub_101576E60()
{
  qword_10248D820 = 0;
  return __cxa_atexit((void (*)(void *))sub_101576198, &unk_10248D808, (void *)&_mh_execute_header);
}

uint64_t sub_101576E88(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_101577060(a1, "CLStepCountRecorderDb", a2, (uint64_t)__p, 1, 2.56);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_10232DEE8;
  *(void *)(a1 + 72) = off_10232DFB0;
  *(void *)(a1 + 480) = off_10232E000;
  sub_100F03BA0((void *)(a1 + 488), 0, 0);
  sub_100F03BA0((void *)(a1 + 504), 0, 0);
  *(_WORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(void *)(a1 + 544) = -1;
  *(_DWORD *)(a1 + 552) = -1;
  *(void *)(a1 + 560) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(void *)(a1 + 584) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 596) = xmmword_101E10AB0;
  *(void *)(a1 + 612) = 0;
  LODWORD(__p[0]) = 8500;
  sub_101A21DA8((unsigned __int8 *)(a1 + 620), "StepCounterAnalyticsEpochTrigger", __p, 0);
  *(_WORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 716) = 0;
  *(_OWORD *)(a1 + 684) = 0u;
  *(_OWORD *)(a1 + 700) = 0u;
  (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return a1;
}

void sub_101577030(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10157750C(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_101577060(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  int v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  *int v12 = &off_1022B2C68;
  *(void *)a1 = off_10232E0F0;
  *(void *)(a1 + 72) = off_10232E198;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_10232E0F0;
  *(void *)(a1 + 72) = off_10232E198;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 400) = 12000;
  *(void *)(a1 + 408) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 416));
  *(void *)(a1 + 416) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_101577470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1006AA34C(v29);
  sub_1011F8AE0(v28);
  *uint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_101577504()
{
}

void *sub_10157750C(void *a1)
{
  *a1 = off_10232E0F0;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_10232E198;
  a1[51] = off_1022B2C20;
  sub_1003BE1F8(a1 + 52);
  sub_1006AA34C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1015775CC(void *a1)
{
  *a1 = off_10232DEE8;
  a1[9] = off_10232DFB0;
  a1[60] = off_10232E000;
  sub_10157766C((uint64_t)a1, 0, 0);

  return sub_10157750C(a1);
}

void sub_10157766C(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0) == (a3 != 0))
  {

    *(void *)(a1 + 536) = a2;
    char v6 = *(const void **)(a1 + 528);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 528) = _Block_copy(a3);
    }
  }
  else
  {
    uint64_t v7 = sub_101ABCC70();
    sub_1015776E4(v7);
  }
}

void *sub_1015776E8(uint64_t a1)
{
  return sub_1015775CC((void *)(a1 - 72));
}

void *sub_1015776F0(uint64_t a1)
{
  return sub_1015775CC((void *)(a1 - 480));
}

void sub_1015776F8(void *a1)
{
  sub_1015775CC(a1);

  operator delete();
}

void sub_101577730(uint64_t a1)
{
  sub_1015775CC((void *)(a1 - 72));

  operator delete();
}

void sub_10157776C(uint64_t a1)
{
  sub_1015775CC((void *)(a1 - 480));

  operator delete();
}

void sub_1015777A8(uint64_t a1)
{
  if (sub_10014C3C0(*(void *)(a1 + 80)))
  {
    sub_1015779BC(a1);
    sub_1005F7B0C(*(void *)(a1 + 80), "StepCountHistory", (const char **)&qword_1024888B0, (const std::string::value_type **)&qword_102488C70, 0);
    *(void *)(a1 + 488) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"INSERT INTO StepCountHistory (startTime, timestamp, count, distance, rawdistance, floorsAscended, floorsDescended, pace, activeTime, firstStepTime, pushCount, workoutType, elevationAscended, elevationDescended, distanceSource, currentCadence, distanceMobility, pedometerArmConstrainedState) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(void *)(a1 + 496) = v2;
    if (!sub_100F03BA8((void *)(a1 + 488))) {
      sub_1005FAC94(*(void *)(a1 + 80));
    }
    *(void *)(a1 + 504) = sub_100601D1C(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StepCountHistory ORDER BY startTime DESC LIMIT 1");
    *(void *)(a1 + 512) = v3;
    *(_DWORD *)(a1 + 132) = sub_101578130(a1);
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v4 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      long long v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLStepCountRecorderDb::prepareSQLStatements()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_1015779BC(uint64_t a1)
{
  if (sub_1005F93E4(*(void *)(a1 + 80), "StepCountHistory"))
  {
    int v4 = "distance";
    int v5 = 5;
    __int16 v6 = 0;
    char v7 = 0;
    char v8 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "StepCountHistory", (uint64_t)"distance", (uint64_t)&v4);
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10232E0C0);
  }
  uint64_t v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "StepCountHistory table doesn't even exist", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_101578080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a24);
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  sub_101A129A8((uint64_t)&a66);
  _Unwind_Resume(a1);
}

uint64_t sub_101578130(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM StepCountHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_1015781EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101578228(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232E1D8);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232E1D8);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      int v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLStepCountEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    int v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    int v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        BOOL v10 = __p;
      }
      else {
        BOOL v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      char v11 = v21;
    }
    else {
      char v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    int v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      int v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_101579454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

void sub_1015797B4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  *(void *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  uint64_t v38 = a1 + 112;
  (*(void (**)(void))(*(void *)(a1 + 112) + 16))();
  if (a4 <= a5)
  {
    if (!sub_10157A3E0(a1, a2) || !sub_10157A3E0(a1, a2)) {
      goto LABEL_40;
    }
    double v16 = 0.0;
    double v17 = 0.0;
    if (0.0 - 0.0 > 0.000001)
    {
      double v17 = (a4 - 0.0) / (0.0 - 0.0);
      double v16 = (a5 - 0.0) / (0.0 - 0.0);
    }
    LODWORD(v14) = 0;
    LODWORD(v15) = 0;
    LODWORD(v13) = 0;
    LODWORD(v12) = 0;
    if (a2 != 1)
    {
      uint64_t v18 = (uint64_t)((double)0 + v17 * ((double)0 - (double)0));
      uint64_t v19 = (uint64_t)((double)v14 + v17 * ((double)v15 - (double)v14));
      uint64_t v20 = (uint64_t)((double)0 + v16 * ((double)0 - (double)0));
      double v21 = (double)v13 + v16 * ((double)v12 - (double)v13);
      uint64_t v22 = (uint64_t)v21;
      if (v20 < v18 || v22 < v19 || v20 < v18)
      {
        uint64_t v36 = (uint64_t)((double)v14 + v17 * ((double)v15 - (double)v14));
        uint64_t v37 = (uint64_t)((double)0 + v17 * ((double)0 - (double)0));
        uint64_t v35 = (uint64_t)((double)0 + v16 * ((double)0 - (double)0));
        uint64_t v34 = (uint64_t)v21;
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E0C0);
        }
        uint64_t v31 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68295938;
          *(_DWORD *)v40 = 0;
          *(_WORD *)&v40[4] = 2082;
          *(void *)&v40[6] = "";
          *(_WORD *)&v40[14] = 2050;
          *(double *)&v40[16] = a4;
          __int16 v41 = 2050;
          double v42 = a5;
          __int16 v43 = 2050;
          double v44 = 0.0;
          __int16 v45 = 2050;
          double v46 = 0.0;
          __int16 v47 = 1026;
          *(_DWORD *)v48 = 0;
          *(_WORD *)&v48[4] = 1026;
          *(_DWORD *)&v48[6] = 0;
          uint64_t v49 = 0x402000000000402;
          int v50 = 0;
          __int16 v51 = 1026;
          int v52 = 0;
          __int16 v53 = 1026;
          int v54 = 0;
          __int16 v55 = 2050;
          uint64_t v56 = 0;
          __int16 v57 = 2050;
          uint64_t v58 = 0;
          __int16 v59 = 1026;
          int v60 = 0;
          __int16 v61 = 1026;
          int v62 = 0;
          __int16 v63 = 1026;
          int v64 = 0;
          __int16 v65 = 1026;
          int v66 = 0;
          __int16 v67 = 1026;
          int v68 = 0;
          __int16 v69 = 1026;
          int v70 = 0;
          __int16 v71 = 2050;
          uint64_t v72 = v37;
          __int16 v73 = 2050;
          uint64_t v74 = v35;
          __int16 v75 = 2050;
          uint64_t v76 = v36;
          __int16 v77 = 2050;
          uint64_t v78 = v34;
          __int16 v79 = 2050;
          uint64_t v80 = v37;
          __int16 v81 = 2050;
          uint64_t v82 = v35;
          __int16 v83 = 2050;
          uint64_t v84 = v37;
          __int16 v85 = 2050;
          uint64_t v86 = v35;
          __int16 v87 = 1026;
          int v88 = a2;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Steps were found to be non monotonically increasing\", \"startTime\":\"%{public}.6f\", \"endTime\":\"%{public}.6f\", \"startLeft.startTime\":\"%{public}.6f\", \"startRight.startTime\":\"%{public}.6f\", \"startLeft.count\":%{public}u, \"startRight.count\":%{public}u, \"startLeft.floorsAscended\":%{public}u, \"startRight.floorsAscended\":%{public}u, \"startLeft.floorsDescended\":%{public}u, \"startRight.floorsDescended\":%{public}u, \"endLeft.startTime\":\"%{public}.6f\", \"endRight.startTime\":\"%{public}.6f\", \"endLeft.count\":%{public}u, \"endRight.count\":%{public}u, \"endLeft.floorsAscended\":%{public}u, \"endRight.floorsAscended\":%{public}u, \"endLeft.floorsDescended\":%{public}u, \"endRight.floorsDescended\":%{public}u, \"startCount\":%{public}ld, \"endCount\":%{public}ld, \"startPushCount\":%{public}ld, \"endPushCount\":%{public}ld, \"startFloorAscended\":%{public}ld, \"endFloorAscended\":%{public}ld, \"startFloorDescended\":%{public}ld, \"endFloorDescended\":%{public}ld, \"queryTimeType\":%{public}d}", buf, 0xECu);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_10232E0C0);
          }
        }
        uint64_t v32 = qword_102419038;
        if (!os_signpost_enabled((os_log_t)qword_102419038)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 68295938;
        *(_DWORD *)v40 = 0;
        *(_WORD *)&v40[4] = 2082;
        *(void *)&v40[6] = "";
        *(_WORD *)&v40[14] = 2050;
        *(double *)&v40[16] = a4;
        __int16 v41 = 2050;
        double v42 = a5;
        __int16 v43 = 2050;
        double v44 = 0.0;
        __int16 v45 = 2050;
        double v46 = 0.0;
        __int16 v47 = 1026;
        *(_DWORD *)v48 = 0;
        *(_WORD *)&v48[4] = 1026;
        *(_DWORD *)&v48[6] = 0;
        uint64_t v49 = 0x402000000000402;
        int v50 = 0;
        __int16 v51 = 1026;
        int v52 = 0;
        __int16 v53 = 1026;
        int v54 = 0;
        __int16 v55 = 2050;
        uint64_t v56 = 0;
        __int16 v57 = 2050;
        uint64_t v58 = 0;
        __int16 v59 = 1026;
        int v60 = 0;
        __int16 v61 = 1026;
        int v62 = 0;
        __int16 v63 = 1026;
        int v64 = 0;
        __int16 v65 = 1026;
        int v66 = 0;
        __int16 v67 = 1026;
        int v68 = 0;
        __int16 v69 = 1026;
        int v70 = 0;
        __int16 v71 = 2050;
        uint64_t v72 = v37;
        __int16 v73 = 2050;
        uint64_t v74 = v35;
        __int16 v75 = 2050;
        uint64_t v76 = v36;
        __int16 v77 = 2050;
        uint64_t v78 = v34;
        __int16 v79 = 2050;
        uint64_t v80 = v37;
        __int16 v81 = 2050;
        uint64_t v82 = v35;
        __int16 v83 = 2050;
        uint64_t v84 = v37;
        __int16 v85 = 2050;
        uint64_t v86 = v35;
        __int16 v87 = 1026;
        int v88 = a2;
        v27 = "Steps were found to be non monotonically increasing";
        uint64_t v28 = "{\"msg%{public}.0s\":\"Steps were found to be non monotonically increasing\", \"startTime\":\"%{public}.6f"
              "\", \"endTime\":\"%{public}.6f\", \"startLeft.startTime\":\"%{public}.6f\", \"startRight.startTime\":\"%{p"
              "ublic}.6f\", \"startLeft.count\":%{public}u, \"startRight.count\":%{public}u, \"startLeft.floorsAscended\""
              ":%{public}u, \"startRight.floorsAscended\":%{public}u, \"startLeft.floorsDescended\":%{public}u, \"startRi"
              "ght.floorsDescended\":%{public}u, \"endLeft.startTime\":\"%{public}.6f\", \"endRight.startTime\":\"%{publi"
              "c}.6f\", \"endLeft.count\":%{public}u, \"endRight.count\":%{public}u, \"endLeft.floorsAscended\":%{public}"
              "u, \"endRight.floorsAscended\":%{public}u, \"endLeft.floorsDescended\":%{public}u, \"endRight.floorsDescen"
              "ded\":%{public}u, \"startCount\":%{public}ld, \"endCount\":%{public}ld, \"startPushCount\":%{public}ld, \""
              "endPushCount\":%{public}ld, \"startFloorAscended\":%{public}ld, \"endFloorAscended\":%{public}ld, \"startF"
              "loorDescended\":%{public}ld, \"endFloorDescended\":%{public}ld, \"queryTimeType\":%{public}d}";
        uint64_t v29 = v32;
        uint32_t v30 = 236;
      }
      else
      {
        double v23 = v17 * (0.0 - 0.0) + 0.0;
        double v24 = v16 * (0.0 - 0.0) + 0.0;
        if (v24 - v23 >= 0.0)
        {
          *(_DWORD *)a3 = (int)((double)v20 - (double)v18);
          *(double *)(a3 + 8) = v24 - v23;
          *(double *)(a3 + 16) = v24 - v23;
          *(double *)(a3 + 24) = v16 * (0.0 - 0.0) + 0.0 - (v17 * (0.0 - 0.0) + 0.0);
          *(_DWORD *)(a3 + 32) = (int)((double)v20 - (double)v18);
          *(_DWORD *)(a3 + 36) = (int)((double)v20 - (double)v18);
          *(double *)(a3 + 40) = v24 - v23;
          *(_DWORD *)(a3 + 48) = (int)((double)v22 - (double)v19);
          goto LABEL_40;
        }
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E0C0);
        }
        uint64_t v25 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 68290562;
          *(_DWORD *)v40 = 0;
          *(_WORD *)&v40[4] = 2082;
          *(void *)&v40[6] = "";
          *(_WORD *)&v40[14] = 2050;
          *(double *)&v40[16] = v23;
          __int16 v41 = 2050;
          double v42 = v24;
          __int16 v43 = 2050;
          double v44 = v23;
          __int16 v45 = 2050;
          double v46 = v24;
          __int16 v47 = 2050;
          *(double *)v48 = v23;
          *(_WORD *)&v48[8] = 2050;
          uint64_t v49 = *(void *)&v24;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Invalid delta distance and time.\", \"startDistance\":\"%{public}f\", \"endDistance\":\"%{public}f\", \"startRawDistance\":\"%{public}f\", \"endRawDistance\":\"%{public}f\", \"startActiveTime\":\"%{public}f\", \"endActiveTime\":\"%{public}f\"}", buf, 0x4Eu);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_10232E0C0);
          }
        }
        uint64_t v26 = qword_102419038;
        if (!os_signpost_enabled((os_log_t)qword_102419038)) {
          goto LABEL_40;
        }
        *(_DWORD *)buf = 68290562;
        *(_DWORD *)v40 = 0;
        *(_WORD *)&v40[4] = 2082;
        *(void *)&v40[6] = "";
        *(_WORD *)&v40[14] = 2050;
        *(double *)&v40[16] = v23;
        __int16 v41 = 2050;
        double v42 = v24;
        __int16 v43 = 2050;
        double v44 = v23;
        __int16 v45 = 2050;
        double v46 = v24;
        __int16 v47 = 2050;
        *(double *)v48 = v23;
        *(_WORD *)&v48[8] = 2050;
        uint64_t v49 = *(void *)&v24;
        v27 = "Invalid delta distance and time.";
        uint64_t v28 = "{\"msg%{public}.0s\":\"Invalid delta distance and time.\", \"startDistance\":\"%{public}f\", \"endDistance"
              "\":\"%{public}f\", \"startRawDistance\":\"%{public}f\", \"endRawDistance\":\"%{public}f\", \"startActiveTi"
              "me\":\"%{public}f\", \"endActiveTime\":\"%{public}f\"}";
        uint64_t v29 = v26;
        uint32_t v30 = 78;
      }
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v27, v28, buf, v30);
      goto LABEL_40;
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    v33 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning First step time invalid.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLStepDistance CLStepCountRecorderDb::queryStepCount(CFAbsoluteTime, CFAbsoluteTime, QueryTimeType) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    BOOL v10 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349568;
      *(double *)v40 = a4;
      *(_WORD *)&v40[8] = 2050;
      *(double *)&v40[10] = a5;
      *(_WORD *)&v40[18] = 1026;
      *(_DWORD *)&v40[20] = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assumption failed: startTime (%{public}f) was found to be newer than endTime (%{public}f), queryTimeType %{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLStepDistance CLStepCountRecorderDb::queryStepCount(CFAbsoluteTime, CFAbsoluteTime, QueryTimeType) const", "%s\n", v11);
      if (v11 != (char *)buf) {
LABEL_10:
      }
        free(v11);
    }
  }
LABEL_40:
  (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
}

void sub_10157A3A8(_Unwind_Exception *a1)
{
}

uint64_t sub_10157A3E0(uint64_t a1, int a2)
{
  if (sub_100082064(a1 + 72))
  {
    int v4 = "startTime";
    if (a2 == 1 && (sub_1000A16E8() & 2) != 0) {
      int v4 = "firstStepTime";
    }
    sub_100134750(&v20, v4);
    sub_10010F274((uint64_t)&v18);
    sub_10010F274((uint64_t)&v16);
    int v5 = sub_100132EFC(&v19, (uint64_t)"SELECT * FROM StepCountHistory WHERE ", 37);
    if ((v22 & 0x80u) == 0) {
      long long v6 = &v20;
    }
    else {
      long long v6 = v20;
    }
    if ((v22 & 0x80u) == 0) {
      uint64_t v7 = v22;
    }
    else {
      uint64_t v7 = v21;
    }
    size_t v8 = sub_100132EFC(v5, (uint64_t)v6, v7);
    sub_100132EFC(v8, (uint64_t)" >= ? ORDER BY startTime ASC LIMIT 1", 36);
    int v9 = sub_100132EFC(&v17, (uint64_t)"SELECT * FROM StepCountHistory WHERE ", 37);
    if ((v22 & 0x80u) == 0) {
      BOOL v10 = &v20;
    }
    else {
      BOOL v10 = v20;
    }
    if ((v22 & 0x80u) == 0) {
      uint64_t v11 = v22;
    }
    else {
      uint64_t v11 = v21;
    }
    unint64_t v12 = sub_100132EFC(v9, (uint64_t)v10, v11);
    sub_100132EFC(v12, (uint64_t)" <= ? ORDER BY startTime DESC LIMIT 1", 37);
    uint64_t v13 = *(void *)(a1 + 80);
    std::stringbuf::str();
    if (v24 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(v13, (uint64_t)p_p);
  }
  return 0;
}

void sub_10157AB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  sub_101A129A8((uint64_t)&a14);
  sub_101A129A8((uint64_t)&a49);
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10157AC58(uint64_t a1)
{
  [+[CMPedometerData maxPedometerEntries](CMPedometerData, "maxPedometerEntries") intValue];
  (*(void (**)(void))(*(void *)(a1 + 112) + 16))();
  if (sub_100082064(a1 + 72))
  {
    if (sub_1005F93E8(*(void *)(a1 + 80))) {
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StepCountHistory WHERE id >= ? ORDER BY id ASC LIMIT ?");
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v4 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning DB UUID un-initialized", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    uint64_t v3 = 103;
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    uint64_t v2 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "StepCountHistory not accessible", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    uint64_t v3 = 109;
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return v3;
}

void sub_10157BAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  sub_1019DB560((uint64_t)&a62);
  _Unwind_Resume(a1);
}

uint64_t sub_10157BB60(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  long long v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  uint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v7, 1);
  size_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  int v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v9, 3);
  BOOL v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v10, 4);
  uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v11, 5);
  unint64_t v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 56) = sqlite3_column_int(v12, 6);
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 60) = sqlite3_column_int(v13, 7);
  unint64_t v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v14, 8);
  unint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v15, 9);
  uint64_t v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v16, 10);
  uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 88) = sqlite3_column_int(v17, 11);
  uint64_t v18 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 92) = sqlite3_column_int(v18, 12);
  uint64_t v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 96) = sqlite3_column_int(v19, 13);
  uint64_t v20 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 100) = sqlite3_column_int(v20, 14);
  uint64_t v21 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(unsigned char *)(a2 + 105) = sqlite3_column_int(v21, 15);
  unsigned __int8 v22 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 112) = sqlite3_column_double(v22, 16);
  double v23 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v23, 17);
  char v24 = (sqlite3_stmt *)sub_10014D19C(*a1);
  char v25 = sqlite3_column_int(v24, 18);
  uint64_t result = 0;
  *(unsigned char *)(a2 + 104) = v25;
  return result;
}

uint64_t sub_10157BD34(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v8 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100082064(v4)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StepCountHistory WHERE startTime BETWEEN ? and ? ORDER BY startTime ASC");
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10232E0C0);
  }
  int v5 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "StepCountHistory not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLStepCountRecorderDb::queryStepCountInTimeRange(CFAbsoluteTime, CFAbsoluteTime, std::vector<CLStepCountEntry> &) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  return 109;
}

void sub_10157C20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10157C274(uint64_t a1)
{
  return sub_10157BD34(a1 - 480);
}

uint64_t sub_10157C27C(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3)) {
    uint64_t v4 = sub_1005F93E8(*(void *)(a1 + 80));
  }
  else {
    uint64_t v4 = 0;
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v4;
}

void sub_10157C338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10157C34C(unsigned __int8 *a1, int a2)
{
  a1[680] = 1;
  int v3 = a1[592];
  uint64_t v4 = qword_102419030;
  a1[681] = v3 != a2;
  if (v3 == a2)
  {
    if (v4 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      int v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "setPushCounting, fEnablePushCounting already set to %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountRecorderDb::setPushCounting(BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    if (v4 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v9 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = a1[592];
      *(_DWORD *)buf = 67109376;
      int v13 = v10;
      __int16 v14 = 1024;
      int v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setPushCounting, fEnablePushCounting changing from %d to %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountRecorderDb::setPushCounting(BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    a1[592] = a2;
    return sub_10157C684((uint64_t)a1);
  }
  return result;
}

double sub_10157C684(uint64_t a1)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10232E0C0);
  }
  uint64_t v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLStepCountRecorderDb::resetCurrentCount called", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountRecorderDb::resetCurrentCount()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  double result = NAN;
  *(void *)(a1 + 544) = -1;
  *(_DWORD *)(a1 + 552) = -1;
  *(void *)(a1 + 560) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 600) = -1;
  return result;
}

uint64_t sub_10157C83C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 596) = a2;
  return result;
}

uint64_t sub_10157C844(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM StepCountHistory");
  }
  return result;
}

void sub_10157C8F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10157C910(uint64_t a1)
{
  return sub_10157C844(a1 - 72);
}

uint64_t sub_10157C918(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM StepCountHistory WHERE startTime > ?");
  }
  return result;
}

void sub_10157CB7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10157CBC0(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE StepCountHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_10157CDE4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10157CE28(uint64_t a1, long long *a2, int a3)
{
  if (sub_100082064(a1 + 72))
  {
    long long v6 = a2[9];
    long long v75 = a2[8];
    long long v76 = v6;
    long long v77 = a2[10];
    long long v7 = a2[5];
    long long v71 = a2[4];
    long long v72 = v7;
    long long v8 = a2[7];
    long long v73 = a2[6];
    long long v74 = v8;
    long long v9 = a2[1];
    long long v67 = *a2;
    long long v68 = v9;
    long long v10 = a2[3];
    long long v69 = a2[2];
    long long v70 = v10;
    unsigned int v66 = 0;
    double v65 = 0.0;
    uint64_t v64 = 0;
    uint64_t v63 = 0;
    uint64_t v62 = 0;
    uint64_t v61 = 0;
    uint64_t v60 = 0;
    int v59 = 0;
    if (!a3)
    {
LABEL_16:
      if (*(unsigned char *)(a1 + 592)) {
        *(void *)&long long v72 = 0;
      }
      sub_10157D97C(a1, (uint64_t)&v67);
      sub_100082068((void *)(a1 + 488), buf);
      uint64_t v19 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
      if (sub_100055D58(v19, 1, *((double *)&v67 + 1)))
      {
        uint64_t v20 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
        if (sub_100055D58(v20, 2, *(double *)&v67))
        {
          uint64_t v21 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
          if (sub_10014D1A4(v21, 3, SDWORD2(v68)))
          {
            unsigned __int8 v22 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
            if (sub_100055D58(v22, 4, *(double *)&v69))
            {
              double v23 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
              if (sub_100055D58(v23, 5, *((double *)&v69 + 1)))
              {
                char v24 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                if (sub_100055B20(v24, 6, v71))
                {
                  char v25 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                  if (sub_100055B20(v25, 7, SDWORD1(v71)))
                  {
                    uint64_t v26 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                    double v27 = *((double *)&v71 + 1);
                    if (*(unsigned char *)(a1 + 592)) {
                      double v27 = 0.0;
                    }
                    if (sub_100055D58(v26, 8, v27))
                    {
                      uint64_t v28 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                      if (sub_100055D58(v28, 9, *((double *)&v72 + 1)))
                      {
                        uint64_t v29 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                        if (sub_100055D58(v29, 10, *(double *)&v68))
                        {
                          uint32_t v30 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                          if (sub_100055B20(v30, 11, v76))
                          {
                            uint64_t v31 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                            if (sub_100055B20(v31, 12, *(_DWORD *)(a1 + 596)))
                            {
                              uint64_t v32 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                              if (sub_100055B20(v32, 13, SHIDWORD(v76)))
                              {
                                v33 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                                if (sub_100055B20(v33, 14, v77))
                                {
                                  uint64_t v34 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                                  if (sub_10014D1A4(v34, 15, BYTE6(v77)))
                                  {
                                    uint64_t v35 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                                    if (sub_100055D58(v35, 16, *(double *)&v72))
                                    {
                                      uint64_t v36 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                                      if (sub_100055D58(v36, 17, *(double *)&v70))
                                      {
                                        uint64_t v37 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                                        if (sub_10014D1A4(v37, 18, BYTE8(v76)))
                                        {
                                          uint64_t v38 = *(void *)(a1 + 80);
                                          v39 = (sqlite3_stmt *)sub_10014D19C(*(uint64_t *)buf);
                                          sub_10001FEB0(v38, v39);
                                          ++*(_DWORD *)(a1 + 132);
                                          if (a3)
                                          {
                                            if (*(void *)(a1 + 528))
                                            {
                                              LODWORD(v73) = sub_1006037D0(*(void *)(a1 + 80));
                                              *((void *)&v73 + 1) = sub_1005F93E8(*(void *)(a1 + 80));
                                              DWORD1(v76) = *(_DWORD *)(a1 + 596);
                                              v40 = *(void **)(a1 + 536);
                                              if (v40)
                                              {
                                                v46[0] = _NSConcreteStackBlock;
                                                v46[1] = 3221225472;
                                                long long v54 = v74;
                                                long long v55 = v75;
                                                long long v56 = v76;
                                                long long v57 = v77;
                                                long long v50 = v70;
                                                long long v51 = v71;
                                                long long v52 = v72;
                                                long long v53 = v73;
                                                long long v47 = v67;
                                                long long v48 = v68;
                                                v46[2] = sub_10157DD8C;
                                                v46[3] = &unk_10232E020;
                                                v46[4] = a1;
                                                long long v49 = v69;
                                                [v40 async:v46];
                                              }
                                              else
                                              {
                                                (*(void (**)(void))(*(void *)(a1 + 528) + 16))();
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v45 = *(void *)buf;
      *(void *)buf = 0;
      if (v45) {
        (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
      }
      return;
    }
    long long v11 = a2[9];
    v58[8] = a2[8];
    v58[9] = v11;
    v58[10] = a2[10];
    long long v12 = a2[5];
    v58[4] = a2[4];
    v58[5] = v12;
    long long v13 = a2[7];
    v58[6] = a2[6];
    v58[7] = v13;
    long long v14 = a2[1];
    v58[0] = *a2;
    v58[1] = v14;
    long long v15 = a2[3];
    v58[2] = a2[2];
    v58[3] = v15;
    unsigned int v16 = sub_10157D71C(a1, (uint64_t)v58, &v66, &v65, (double *)&v64, (double *)&v63, (_DWORD *)&v62 + 1, (int *)&v62, (double *)&v61, (_DWORD *)&v60 + 1, &v60, &v59);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    uint64_t v17 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v66;
      __int16 v83 = 2048;
      double v84 = v65;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLStepCountRecorderDb::insertRecordUL,toAbsoluteEntry,absoluteCount,%d,absoluteCalibratedDistance,%lf", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      int v78 = 67109376;
      unsigned int v79 = v66;
      __int16 v80 = 2048;
      double v81 = v65;
      __int16 v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLStepCountRecorderDb::insertRecordUL(const CLStepCountEntry &, BOOL)", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
    if (!v16) {
      goto LABEL_15;
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    uint64_t v18 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#Warning toAbsoluteEntry returned %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      int v78 = 67109120;
      unsigned int v79 = v16;
      double v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLStepCountRecorderDb::insertRecordUL(const CLStepCountEntry &, BOOL)", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
    if (v16 != 2)
    {
LABEL_15:
      DWORD2(v68) = v66;
      *(double *)&long long v69 = v65;
      *((void *)&v69 + 1) = v64;
      *(void *)&long long v70 = v63;
      *(void *)&long long v71 = __PAIR64__(v62, HIDWORD(v62));
      *((void *)&v72 + 1) = v61;
      LODWORD(v76) = HIDWORD(v60);
      HIDWORD(v76) = v60;
      LODWORD(v77) = v59;
      goto LABEL_16;
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    __int16 v41 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Database inaccessible for insertRecordUL", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      LOWORD(v67) = 0;
      double v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLStepCountRecorderDb::insertRecordUL(const CLStepCountEntry &, BOOL)", "%s\n", v42);
      if (v42 != (char *)buf) {
        free(v42);
      }
    }
  }
}

void sub_10157D6F8(_Unwind_Exception *a1)
{
  unint64_t v2 = STACK[0x370];
  STACK[0x370] = 0;
  if (v2) {
    sub_101A5DB04();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10157D71C(uint64_t a1, uint64_t a2, unsigned int *a3, double *a4, double *a5, double *a6, _DWORD *a7, int *a8, double *a9, _DWORD *a10, _DWORD *a11, _DWORD *a12)
{
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v42 = 0u;
  int v41 = 0;
  uint64_t result = sub_10157F578(a1, *(_DWORD *)(a2 + 24), &v41, &v42);
  if (result == 2) {
    return result;
  }
  int v21 = v41 + *(_DWORD *)(a2 + 24);
  int v22 = *(unsigned __int8 *)(a1 + 592);
  unsigned int v23 = DWORD2(v43);
  int v24 = v51;
  unsigned int v25 = v21 - v51;
  int v26 = v21 - DWORD2(v43);
  if (*(unsigned char *)(a1 + 592)) {
    unsigned int v25 = DWORD2(v43);
  }
  *a3 = v25;
  if (!v22) {
    int v26 = v24;
  }
  *a10 = v26;
  unsigned int v27 = *a3;
  if (!(*a3 | v26))
  {
    *a4 = 0.0;
    *a5 = 0.0;
    *a6 = 0.0;
    *a7 = 0;
    *(_DWORD *)(a1 + 548) = 0;
    *a8 = 0;
    *(_DWORD *)(a1 + 552) = 0;
    *a9 = 0.0;
    *(void *)(a1 + 560) = 0;
    *a11 = 0;
    *(_DWORD *)(a1 + 600) = 0;
    *a12 = 0;
    *(_DWORD *)(a1 + 604) = 0;
    return result;
  }
  if (v22)
  {
    uint64_t v28 = a12;
    uint64_t v29 = v45;
    *a5 = *((double *)&v44 + 1);
  }
  else
  {
    double v30 = *((double *)&v44 + 1);
    if (v27 > v23) {
      double v30 = *((double *)&v44 + 1) + *(double *)(a2 + 40);
    }
    *a5 = v30;
    uint64_t v29 = v45;
    uint64_t v28 = a12;
    if (v27 >= v23)
    {
      *a6 = *(double *)&v45 + *(double *)(a2 + 48);
      double v31 = *(double *)&v44 + *(double *)(a2 + 32);
      goto LABEL_14;
    }
  }
  *(void *)a6 = v29;
  double v31 = *(double *)&v44;
LABEL_14:
  *a4 = v31;
  long long v32 = *(_OWORD *)(a2 + 144);
  v40[8] = *(_OWORD *)(a2 + 128);
  v40[9] = v32;
  v40[10] = *(_OWORD *)(a2 + 160);
  long long v33 = *(_OWORD *)(a2 + 80);
  v40[4] = *(_OWORD *)(a2 + 64);
  v40[5] = v33;
  long long v34 = *(_OWORD *)(a2 + 112);
  v40[6] = *(_OWORD *)(a2 + 96);
  v40[7] = v34;
  long long v35 = *(_OWORD *)(a2 + 16);
  v40[0] = *(_OWORD *)a2;
  v40[1] = v35;
  long long v36 = *(_OWORD *)(a2 + 48);
  v40[2] = *(_OWORD *)(a2 + 32);
  v40[3] = v36;
  v39[8] = v50;
  v39[9] = v51;
  v39[10] = v52;
  v39[4] = v46;
  v39[5] = v47;
  v39[6] = v48;
  v39[7] = v49;
  v39[0] = v42;
  v39[1] = v43;
  v39[2] = v44;
  v39[3] = v45;
  sub_10157FEE8(a1, (uint64_t)v40, (uint64_t)v39);
  if (*(unsigned char *)(a1 + 592))
  {
    int v37 = DWORD1(v46);
    *a7 = v46;
    double v38 = *((double *)&v47 + 1);
  }
  else
  {
    *a7 = *(_DWORD *)(a1 + 572) + *(_DWORD *)(a2 + 64);
    int v37 = *(_DWORD *)(a1 + 576) + *(_DWORD *)(a2 + 68);
    double v38 = *(double *)(a2 + 88) + *(double *)(a1 + 584);
  }
  uint64_t result = 0;
  *a8 = v37;
  *a9 = v38;
  *a11 = *(_DWORD *)(a1 + 608) + *(_DWORD *)(a2 + 156);
  *uint64_t v28 = *(_DWORD *)(a1 + 612) + *(_DWORD *)(a2 + 160);
  return result;
}

double sub_10157D97C(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 684);
  unsigned int v4 = *(_DWORD *)(a2 + 24);
  if (v3 >= 1 && v4 >= v3)
  {
    int v6 = v4 - v3;
    double v7 = *(double *)(a2 + 32) - *(double *)(a1 + 688);
    double v8 = *(double *)(a1 + 712);
    double v9 = *(double *)(a2 + 88);
    double v10 = *(double *)(a1 + 696);
    double v12 = *(double *)(a2 + 8);
    double v11 = *(double *)(a2 + 16);
    double v13 = *(double *)(a1 + 704);
    int v14 = *(unsigned __int8 *)(a2 + 152);
    *(_DWORD *)(a1 + 632) += v4 - v3;
    if (*(unsigned char *)(a1 + 680) && !*(unsigned char *)(a1 + 681))
    {
      ++*(_DWORD *)(a1 + 636);
      *(_DWORD *)(a1 + 640) += v6;
    }
    *(_WORD *)(a1 + 680) = 0;
    BOOL v16 = v7 > 0.0 && v4 == v3;
    if (v16 && v14 == 1)
    {
      ++*(_DWORD *)(a1 + 644);
    }
    else if (v16 && v14 != 1)
    {
      ++*(_DWORD *)(a1 + 648);
    }
    double v19 = v9 - v10;
    if (v4 == v3 && v19 > 0.0) {
      ++*(_DWORD *)(a1 + 652);
    }
    double v20 = (double)v6;
    if (v6 >= 1)
    {
      double v21 = v7 / v20;
      if (v21 < 0.01) {
        ++*(_DWORD *)(a1 + 656);
      }
      if (v21 > 2.0) {
        ++*(_DWORD *)(a1 + 660);
      }
    }
    if (v20 / v19 > 20.0) {
      ++*(_DWORD *)(a1 + 664);
    }
    if (v6 >= 21 && v12 - v8 < 3.0) {
      ++*(_DWORD *)(a1 + 668);
    }
    if (v6 >= 1 && v11 == 0.0) {
      ++*(_DWORD *)(a1 + 672);
    }
    if (v4 == v3 && v11 - v13 > 0.0)
    {
      ++*(_DWORD *)(a1 + 676);
      unsigned int v4 = v3;
    }
  }
  *(_DWORD *)(a1 + 684) = v4;
  *(void *)(a1 + 688) = *(void *)(a2 + 32);
  *(void *)(a1 + 696) = *(void *)(a2 + 88);
  *(void *)(a1 + 704) = *(void *)(a2 + 16);
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 712) = result;
  HIDWORD(v23) = -1030792151 * *(_DWORD *)(a1 + 616);
  LODWORD(v23) = HIDWORD(v23);
  if ((v23 >> 1) <= 0x51EB851)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v24 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(a1 + 616);
      int v26 = *(_DWORD *)(a1 + 632);
      int v27 = *(_DWORD *)(a1 + 636);
      int v28 = *(_DWORD *)(a1 + 640);
      *(_DWORD *)buf = 67109888;
      int v32 = v25;
      __int16 v33 = 1024;
      int v34 = v26;
      __int16 v35 = 1024;
      int v36 = v27;
      __int16 v37 = 1024;
      int v38 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "fCA_runningNumEpochs: %d, countStepCountFailures log, fCA_numSteps: %d, fCA_droppedStepsOccurence: %d, fCA_recNumSteps: %d.", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      double v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountRecorderDb::countStepCountFailures(const CLStepCountEntry &)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  unsigned int v29 = *(_DWORD *)(a1 + 616) + 1;
  *(_DWORD *)(a1 + 616) = v29;
  if (v29 > *(_DWORD *)(a1 + 624))
  {
    sub_101580B9C((_DWORD *)a1);
    double result = 0.0;
    *(_OWORD *)(a1 + 648) = 0u;
    *(_OWORD *)(a1 + 664) = 0u;
    *(_OWORD *)(a1 + 632) = 0u;
    *(_DWORD *)(a1 + 616) = 0;
  }
  return result;
}

uint64_t sub_10157DD8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 528);
  long long v2 = *(_OWORD *)(a1 + 152);
  long long v3 = *(_OWORD *)(a1 + 184);
  v8[8] = *(_OWORD *)(a1 + 168);
  v8[9] = v3;
  v8[10] = *(_OWORD *)(a1 + 200);
  long long v4 = *(_OWORD *)(a1 + 88);
  long long v5 = *(_OWORD *)(a1 + 120);
  v8[4] = *(_OWORD *)(a1 + 104);
  v8[5] = v5;
  v8[6] = *(_OWORD *)(a1 + 136);
  v8[7] = v2;
  long long v6 = *(_OWORD *)(a1 + 56);
  v8[2] = *(_OWORD *)(a1 + 72);
  v8[3] = v4;
  v8[0] = *(_OWORD *)(a1 + 40);
  v8[1] = v6;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v8);
}

uint64_t sub_10157DE08(uint64_t a1, uint64_t a2)
{
  if (!sub_100082064(a1 + 72)) {
    return 2;
  }
  sub_100082068((void *)(a1 + 504), &v25);
  uint64_t v4 = sub_10157BB60(&v25, (uint64_t)&v11);
  if (!v4)
  {
    *(int8x16_t *)a2 = vextq_s8(v12, v12, 8uLL);
    uint64_t v5 = v20;
    *(void *)(a2 + 16) = v19;
    *(_OWORD *)(a2 + 32) = v14;
    uint64_t v6 = v16;
    *(void *)(a2 + 48) = v15;
    uint64_t v7 = v17;
    uint64_t v8 = v18;
    *(void *)(a2 + 64) = v6;
    *(void *)(a2 + 72) = v7;
    *(_DWORD *)(a2 + 96) = v11;
    *(_DWORD *)(a2 + 24) = v13;
    *(void *)(a2 + 144) = v5;
    *(void *)(a2 + 156) = v21;
    *(unsigned char *)(a2 + 152) = v22;
    *(unsigned char *)(a2 + 166) = v23;
    *(void *)(a2 + 80) = v24;
    *(void *)(a2 + 88) = v8;
  }
  uint64_t v9 = v25;
  uint64_t v25 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return v4;
}

void sub_10157DEFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10157DF18(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StepCountHistory ORDER BY startTime ASC LIMIT 1");
  }
  return 2;
}

void sub_10157E020(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10157E038(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(double *)(a3 + 8) - *(double *)(a2 + 8) > 1.0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)result + 120))(result, a3, 1);
  }
  return result;
}

uint64_t sub_10157E080(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v8 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100082064(v4))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    uint64_t v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "StepCountRecorderDb: running aggregateRecords", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StepCountHistory ORDER BY startTime ASC");
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 24))(v8);
  return -1;
}

void sub_10157EE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,uint64_t a49,char a50)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_10157EF58(char **a1, long long *a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 >= v4)
  {
    int v13 = *a1;
    unint64_t v14 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - *a1) >> 3);
    unint64_t v15 = v14 + 1;
    if (v14 + 1 > 0x222222222222222) {
      sub_1001D7FD4();
    }
    unint64_t v16 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v4 - (void)v13) >> 3);
    if (2 * v16 > v15) {
      unint64_t v15 = 2 * v16;
    }
    if (v16 >= 0x111111111111111) {
      unint64_t v17 = 0x222222222222222;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      if (v17 > 0x222222222222222) {
        sub_1001D7FA0();
      }
      uint64_t v18 = (char *)operator new(120 * v17);
    }
    else
    {
      uint64_t v18 = 0;
    }
    long long v19 = a2[5];
    uint64_t v20 = &v18[120 * v14];
    *((_OWORD *)v20 + 4) = a2[4];
    *((_OWORD *)v20 + 5) = v19;
    *((_OWORD *)v20 + 6) = a2[6];
    *((void *)v20 + 14) = *((void *)a2 + 14);
    long long v21 = a2[1];
    *(_OWORD *)uint64_t v20 = *a2;
    *((_OWORD *)v20 + 1) = v21;
    long long v22 = a2[2];
    long long v23 = a2[3];
    int8x16_t v12 = v20 + 120;
    *((_OWORD *)v20 + 2) = v22;
    *((_OWORD *)v20 + 3) = v23;
    if (v5 != v13)
    {
      do
      {
        long long v24 = *(_OWORD *)(v5 - 120);
        long long v25 = *(_OWORD *)(v5 - 104);
        long long v26 = *(_OWORD *)(v5 - 88);
        *(_OWORD *)(v20 - 72) = *(_OWORD *)(v5 - 72);
        *(_OWORD *)(v20 - 88) = v26;
        *(_OWORD *)(v20 - 104) = v25;
        *(_OWORD *)(v20 - 120) = v24;
        long long v27 = *(_OWORD *)(v5 - 56);
        long long v28 = *(_OWORD *)(v5 - 40);
        long long v29 = *(_OWORD *)(v5 - 24);
        *((void *)v20 - 1) = *((void *)v5 - 1);
        *(_OWORD *)(v20 - 24) = v29;
        *(_OWORD *)(v20 - 40) = v28;
        *(_OWORD *)(v20 - 56) = v27;
        v20 -= 120;
        v5 -= 120;
      }
      while (v5 != v13);
      uint64_t v5 = *a1;
    }
    *a1 = v20;
    a1[1] = v12;
    a1[2] = &v18[120 * v17];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[3];
    *((_OWORD *)v5 + 2) = a2[2];
    *((_OWORD *)v5 + 3) = v8;
    *(_OWORD *)uint64_t v5 = v6;
    *((_OWORD *)v5 + 1) = v7;
    long long v9 = a2[4];
    long long v10 = a2[5];
    long long v11 = a2[6];
    *((void *)v5 + 14) = *((void *)a2 + 14);
    *((_OWORD *)v5 + 5) = v10;
    *((_OWORD *)v5 + 6) = v11;
    *((_OWORD *)v5 + 4) = v9;
    int8x16_t v12 = v5 + 120;
  }
  a1[1] = v12;
}

uint64_t sub_10157F0F4(uint64_t a1)
{
  return sub_10157E080(a1 - 72);
}

uint64_t sub_10157F0FC(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  sub_1015797B4(a1, 0, (uint64_t)v4, a2, a3);
  return LODWORD(v4[0]);
}

uint64_t sub_10157F138(uint64_t a1, double a2, double a3)
{
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  sub_1015797B4(a1 - 480, 0, (uint64_t)v4, a2, a3);
  return LODWORD(v4[0]);
}

uint64_t sub_10157F178(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v6 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (sub_100082064(v4)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM StepCountHistory ORDER BY startTime ASC");
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 24))(v6);
}

void sub_10157F4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_10157F4FC(uint64_t a1)
{
  uint64_t v1 = (_WORD *)(a1 + 112);
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  v1[204] = 257;
  return (*(uint64_t (**)(_WORD *))(*(void *)v1 + 24))(v1);
}

uint64_t sub_10157F578(uint64_t a1, unsigned int a2, _DWORD *a3, _OWORD *a4)
{
  if (a2 == -1)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    long long v8 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "currentCount passed to getCountOffset is invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      LOWORD(v43) = 0;
      v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v43 = 0u;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)a1 + 104))(a1, &v43);
  if (v9)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    long long v10 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v61 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Call to getMostRecentRecordUL failed, returning %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      int v54 = 67109120;
      int v55 = v9;
      int v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    int v11 = 0;
  }
  else
  {
    int v11 = v52 + DWORD2(v44);
  }
  if (*(unsigned char *)(a1 + 520))
  {
    *(_DWORD *)(a1 + 568) = -a2;
    *(unsigned char *)(a1 + 520) = 0;
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int8x16_t v12 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(a1 + 544);
      int v14 = *(_DWORD *)(a1 + 568);
      *(_DWORD *)buf = 67109632;
      int v61 = v13;
      __int16 v62 = 1024;
      unsigned int v63 = a2;
      __int16 v64 = 1024;
      int v65 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Reset requested.  Counts (prev: %d cur:%d). New fOffset (%d).", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      int v37 = *(_DWORD *)(a1 + 544);
      int v38 = *(_DWORD *)(a1 + 568);
      int v54 = 67109632;
      int v55 = v37;
      __int16 v56 = 1024;
      unsigned int v57 = a2;
      __int16 v58 = 1024;
      int v59 = v38;
      v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
  }
  if (v9 != 2)
  {
    unsigned int v15 = *(_DWORD *)(a1 + 544);
    if (v15 == -1)
    {
      *(_DWORD *)(a1 + 568) = v11 - a2;
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      long long v19 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *(_DWORD *)(a1 + 544);
        int v21 = *(_DWORD *)(a1 + 568);
        *(_DWORD *)buf = 67109632;
        int v61 = v20;
        __int16 v62 = 1024;
        unsigned int v63 = a2;
        __int16 v64 = 1024;
        int v65 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Reset current step count.  Counts (prev: %d cur:%d). New fOffset (%d).", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 == -1)
        {
LABEL_38:
          int v22 = *(_DWORD *)(a1 + 544);
          int v23 = *(_DWORD *)(a1 + 568);
          int v54 = 67109632;
          int v55 = v22;
          __int16 v56 = 1024;
          unsigned int v57 = a2;
          __int16 v58 = 1024;
          int v59 = v23;
          long long v24 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n");
LABEL_39:
          if (v24 != buf) {
            free(v24);
          }
          goto LABEL_49;
        }
LABEL_65:
        dispatch_once(&qword_102419030, &stru_10232E0C0);
        goto LABEL_38;
      }
    }
    else if (a2 > 0x63 || a2 >= v15)
    {
      BOOL v25 = a2 >= v15;
      unsigned int v26 = a2 - v15;
      if (!v25 || v26 >= 0x65)
      {
        *(_DWORD *)(a1 + 568) = v11 - a2;
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E0C0);
        }
        long long v27 = qword_102419038;
        if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
        {
          int v28 = *(_DWORD *)(a1 + 544);
          int v29 = *(_DWORD *)(a1 + 568);
          *(_DWORD *)buf = 67240704;
          int v61 = v28;
          __int16 v62 = 1026;
          unsigned int v63 = a2;
          __int16 v64 = 1026;
          int v65 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "An error in step counts is highly likely.  Treating current count as new 0.  Count (prev: %{public}d cur:%{public}d). New fOffset (%{public}d).", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419030 != -1) {
            dispatch_once(&qword_102419030, &stru_10232E0C0);
          }
          int v41 = *(_DWORD *)(a1 + 544);
          int v42 = *(_DWORD *)(a1 + 568);
          int v54 = 67240704;
          int v55 = v41;
          __int16 v56 = 1026;
          unsigned int v57 = a2;
          __int16 v58 = 1026;
          int v59 = v42;
          long long v24 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)", "%s\n");
          goto LABEL_39;
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 568) = v11 - a2;
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      unint64_t v16 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = *(_DWORD *)(a1 + 544);
        int v18 = *(_DWORD *)(a1 + 568);
        *(_DWORD *)buf = 67109632;
        int v61 = v17;
        __int16 v62 = 1024;
        unsigned int v63 = a2;
        __int16 v64 = 1024;
        int v65 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Oscar restart detected.  Count (prev: %d cur:%d). New fOffset (%d).", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 == -1) {
          goto LABEL_38;
        }
        goto LABEL_65;
      }
    }
  }
LABEL_49:
  *a3 = *(_DWORD *)(a1 + 568);
  *(_DWORD *)(a1 + 544) = a2;
  long long v30 = v52;
  a4[8] = v51;
  a4[9] = v30;
  a4[10] = v53;
  long long v31 = v48;
  a4[4] = v47;
  a4[5] = v31;
  long long v32 = v50;
  a4[6] = v49;
  a4[7] = v32;
  long long v33 = v44;
  *a4 = v43;
  a4[1] = v33;
  long long v34 = v46;
  a4[2] = v45;
  a4[3] = v34;
  return v9;
}

uint64_t sub_10157FEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (int32x2_t *)(a1 + 548);
  if (*(unsigned char *)(a1 + 521))
  {
    *(int32x2_t *)(a1 + 572) = vneg_s32(*(int32x2_t *)(a2 + 64));
    *(double *)(a1 + 584) = -*(double *)(a2 + 88);
    *(unsigned char *)(a1 + 521) = 0;
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    long long v7 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *(_DWORD *)(a1 + 572);
      int v9 = *(_DWORD *)(a1 + 576);
      uint64_t v10 = *(void *)(a1 + 584);
      *(_DWORD *)buf = 67109632;
      int v48 = v8;
      __int16 v49 = 1024;
      int v50 = v9;
      __int16 v51 = 2048;
      uint64_t v52 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Reset requested.  New offset (%d, %d, %f).", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      long long v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
    *(int32x2_t *)(a1 + 608) = vneg_s32(*(int32x2_t *)(a2 + 156));
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v11 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(_DWORD *)(a1 + 608);
      int v13 = *(_DWORD *)(a1 + 612);
      *(_DWORD *)buf = 67109376;
      int v48 = v12;
      __int16 v49 = 1024;
      int v50 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Reset requested.  New elevation offset (%d, %d).", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      long long v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
  }
  unsigned int v14 = v6->i32[0];
  if (v6->i32[0] == -1
    || (unsigned __int32 v15 = *(_DWORD *)(a1 + 552), v15 == -1)
    || (double v16 = *(double *)(a1 + 560), v16 == 1.79769313e308))
  {
    v6[3] = vsub_s32(*(int32x2_t *)(a3 + 64), *(int32x2_t *)(a2 + 64));
    *(double *)(a1 + 584) = *(double *)(a3 + 88) - *(double *)(a2 + 88);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v17 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      int v18 = *(_DWORD *)(a1 + 572);
      int v19 = *(_DWORD *)(a1 + 576);
      uint64_t v20 = *(void *)(a1 + 584);
      *(_DWORD *)buf = 67109632;
      int v48 = v18;
      __int16 v49 = 1024;
      int v50 = v19;
      __int16 v51 = 2048;
      uint64_t v52 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Locationd restart detected.  New offset (%d, %d, %f).", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      long long v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
    *(int32x2_t *)(a1 + 608) = vsub_s32(*(int32x2_t *)(a3 + 156), *(int32x2_t *)(a2 + 156));
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v21 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      int v22 = *(_DWORD *)(a1 + 608);
      int v23 = *(_DWORD *)(a1 + 612);
      *(_DWORD *)buf = 67109376;
      int v48 = v22;
      __int16 v49 = 1024;
      int v50 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Locationd restart detected.  New elevation offset (%d, %d).", buf, 0xEu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_25;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419030 == -1) {
      goto LABEL_68;
    }
LABEL_83:
    dispatch_once(&qword_102419030, &stru_10232E0C0);
LABEL_68:
    int v42 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n");
LABEL_69:
    if (v42 != buf) {
      free(v42);
    }
    goto LABEL_25;
  }
  int32x2_t v25 = *(int32x2_t *)(a2 + 64);
  BOOL v26 = v25.i32[0] >= v14 || v25.i32[0] >= 0x14u;
  if (v26
    && (v25.i32[1] < v15 ? (v27 = v25.i32[1] >= 0x14u) : (v27 = 1), v27 && (double v28 = *(double *)(a2 + 88), v28 >= v16)))
  {
    BOOL v26 = v25.i32[0] >= v14;
    unsigned int v36 = v25.i32[0] - v14;
    if (!v26 || v36 > 0x14 || (BOOL v26 = v25.i32[1] >= v15, v37 = v25.i32[1] - v15, !v26) || v37 >= 0x15)
    {
      v6[3] = vsub_s32(*(int32x2_t *)(a3 + 64), v25);
      *(double *)(a1 + 584) = *(double *)(a3 + 88) - v28;
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      int v38 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_FAULT))
      {
        int v39 = *(_DWORD *)(a1 + 572);
        int v40 = *(_DWORD *)(a1 + 576);
        uint64_t v41 = *(void *)(a1 + 584);
        *(_DWORD *)buf = 67240704;
        int v48 = v39;
        __int16 v49 = 1026;
        int v50 = v40;
        __int16 v51 = 2050;
        uint64_t v52 = v41;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "An error in floor counts is highly likely.  Treating current count as new 0.  New offset (%{public}d, %{public}d, %{public}f).", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E0C0);
        }
        int v42 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n");
        goto LABEL_69;
      }
    }
  }
  else
  {
    v6[3] = vsub_s32(*(int32x2_t *)(a3 + 64), v25);
    *(double *)(a1 + 584) = *(double *)(a3 + 88) - *(double *)(a2 + 88);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v29 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      int v30 = *(_DWORD *)(a1 + 572);
      int v31 = *(_DWORD *)(a1 + 576);
      uint64_t v32 = *(void *)(a1 + 584);
      *(_DWORD *)buf = 67109632;
      int v48 = v30;
      __int16 v49 = 1024;
      int v50 = v31;
      __int16 v51 = 2048;
      uint64_t v52 = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Oscar restart detected.  New offset (%d, %d, %f).", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      long long v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "ActivityCode CLStepCountRecorderDb::getFloorsElevationAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)", "%s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
    *(int32x2_t *)(a1 + 608) = vsub_s32(*(int32x2_t *)(a3 + 156), *(int32x2_t *)(a2 + 156));
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    long long v33 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *(_DWORD *)(a1 + 608);
      int v35 = *(_DWORD *)(a1 + 612);
      *(_DWORD *)buf = 67109376;
      int v48 = v34;
      __int16 v49 = 1024;
      int v50 = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Oscar restart detected.  New elevation offset (%d, %d).", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 == -1) {
        goto LABEL_68;
      }
      goto LABEL_83;
    }
  }
LABEL_25:
  *uint64_t v6 = *(int32x2_t *)(a2 + 64);
  *(void *)(a1 + 560) = *(void *)(a2 + 88);
  *(void *)(a1 + 600) = *(void *)(a2 + 156);
  return 0;
}

uint64_t sub_101580A94(void *a1, void *a2)
{
  uint64_t v5 = a1 + 14;
  uint64_t v4 = a1[14];
  int v9 = a1 + 14;
  (*(void (**)(void *))(v4 + 16))(a1 + 14);
  __int16 v10 = 256;
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = (*(uint64_t (**)(void *, _OWORD *))(*a1 + 176))(a1, v8);
  if (!v6) {
    *a2 = *((void *)&v8[0] + 1);
  }
  (*(void (**)(void *))(*v5 + 24))(v5);
  return v6;
}

void sub_101580B88(_Unwind_Exception *a1)
{
  sub_1019DB560(v1 - 56);
  _Unwind_Resume(a1);
}

void sub_101580B9C(_DWORD *a1)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10232E0C0);
  }
  uint64_t v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Attempt to send core anaytics from StepCountRecorderDb", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountRecorderDb::sendAnalytics()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10232E0C0);
  }
  uint64_t v3 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    int v4 = a1[158];
    int v5 = a1[166];
    int v6 = a1[168];
    int v7 = a1[169];
    int v8 = a1[163];
    int v9 = a1[162];
    int v10 = a1[161];
    int v11 = a1[167];
    int v12 = a1[165];
    int v13 = a1[164];
    int v14 = a1[159];
    int v15 = a1[160];
    *(_DWORD *)buf = 67111936;
    int v21 = v4;
    __int16 v22 = 1024;
    int v23 = v5;
    __int16 v24 = 1024;
    int v25 = v6;
    __int16 v26 = 1024;
    int v27 = v7;
    __int16 v28 = 1024;
    int v29 = v8;
    __int16 v30 = 1024;
    int v31 = v9;
    __int16 v32 = 1024;
    int v33 = v10;
    __int16 v34 = 1024;
    int v35 = v11;
    __int16 v36 = 1024;
    int v37 = v12;
    __int16 v38 = 1024;
    int v39 = v13;
    __int16 v40 = 1024;
    int v41 = v14;
    __int16 v42 = 1024;
    int v43 = v15;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Step Counter Core Analytics: %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountRecorderDb::sendAnalytics()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (objc_opt_class()
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    AnalyticsSendEventLazy();
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E0C0);
    }
    double v16 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "StepCountRecorderDb: Not authorized to submit analytics without IHA", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E0C0);
      }
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountRecorderDb::sendAnalytics()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
}

NSDictionary *sub_101581130(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = @"binNumSteps";
  v4[0] = +[NSNumber numberWithInt:(int)(round((double)*(int *)(v1 + 632) / 1000.0) * 1000.0)];
  v3[1] = @"countCadenceEstimateHigh";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 664)];
  v3[2] = @"countFirstStepTimeNotUpdated";
  void v4[2] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 672)];
  v3[3] = @"countFirstStepTimeUpdatedUnexpectedly";
  _OWORD v4[3] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 676)];
  v3[4] = @"countNonZeroActiveTimeWithZeroCounts";
  v4[4] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 652)];
  v3[5] = @"countNonZeroDistWithZeroCountsNoStroller";
  v4[5] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 648)];
  v3[6] = @"countNonZeroDistWithZeroCountsStroller";
  v4[6] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 644)];
  v3[7] = @"countStepCountJumpsUnexpectedly";
  v4[7] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 668)];
  v3[8] = @"countStepEstimateHigh";
  v4[8] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 660)];
  v3[9] = @"countStepEstimateLow";
  v4[9] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 656)];
  v3[10] = @"droppedStepsOccurence";
  v4[10] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 636)];
  v3[11] = @"recNumSteps";
  v4[11] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 640)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:12];
}

uint64_t sub_10158130C(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    int v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        int v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          int v5 = __p;
        }
        else {
          int v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        int v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          int v9 = __p;
        }
        else {
          int v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101ABCDFC(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1015817C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_101581840(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_101582FB0(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_10232E1D8);
  }
  int v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)int v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232E1D8);
    }
    int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(void *)int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232E1D8);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLStepCountEntry>::setDatabaseAccessible() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_101581FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101582004(uint64_t a1)
{
  return sub_101581840(a1 - 72);
}

void sub_10158200C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_10158203C(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101ABCF6C(v4);
    sub_1001D7FD4();
  }
  int v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    uint64_t v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    int v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1015824AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  sub_101A129A8((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_10158252C(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    int v13 = (_Unwind_Exception *)sub_101ABD0DC(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  int v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    uint64_t v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      int v7 = __p;
    }
    else {
      int v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    int v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1015828A0(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101ABD24C(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      int v5 = __p;
    }
    else {
      int v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    int v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      int v9 = __p;
    }
    else {
      int v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_101582BCC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101ABD3BC(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_101582EF0(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_101582F20(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_101582FB0(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_101583030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10158304C()
{
  qword_1024888B0 = (uint64_t)"id";
  dword_1024888B8 = 1;
  word_1024888BC = 257;
  byte_1024888C0 = 0;
  byte_1024888D8 = 0;
  qword_1024888E0 = (uint64_t)"startTime";
  dword_1024888E8 = 2;
  word_1024888EC = 0;
  byte_1024888F0 = 0;
  byte_102488908 = 0;
  qword_102488910 = (uint64_t)"timestamp";
  dword_102488918 = 2;
  word_10248891C = 0;
  byte_102488920 = 0;
  byte_102488938 = 0;
  qword_102488940 = (uint64_t)"count";
  dword_102488948 = 1;
  word_10248894C = 0;
  byte_102488950 = 0;
  byte_102488968 = 0;
  qword_102488970 = (uint64_t)"distance";
  dword_102488978 = 2;
  word_10248897C = 0;
  byte_102488980 = 0;
  byte_102488998 = 0;
  qword_1024889A0 = (uint64_t)"rawdistance";
  dword_1024889A8 = 2;
  word_1024889AC = 0;
  byte_1024889B0 = 0;
  byte_1024889C8 = 0;
  qword_1024889D0 = (uint64_t)"floorsAscended";
  dword_1024889D8 = 1;
  word_1024889DC = 0;
  byte_1024889E0 = 0;
  byte_1024889F8 = 0;
  qword_102488A00 = (uint64_t)"floorsDescended";
  dword_102488A08 = 1;
  word_102488A0C = 0;
  byte_102488A10 = 0;
  byte_102488A28 = 0;
  qword_102488A30 = (uint64_t)"pace";
  dword_102488A38 = 2;
  word_102488A3C = 0;
  byte_102488A40 = 0;
  byte_102488A58 = 0;
  qword_102488A60 = (uint64_t)"activeTime";
  dword_102488A68 = 2;
  word_102488A6C = 0;
  byte_102488A70 = 0;
  byte_102488A88 = 0;
  qword_102488A90 = (uint64_t)"firstStepTime";
  dword_102488A98 = 2;
  word_102488A9C = 0;
  byte_102488AA0 = 0;
  byte_102488AB8 = 0;
  qword_102488AC0 = (uint64_t)"pushCount";
  dword_102488AC8 = 1;
  word_102488ACC = 0;
  byte_102488AD0 = 0;
  byte_102488AE8 = 0;
  qword_102488AF0 = (uint64_t)"workoutType";
  dword_102488AF8 = 1;
  word_102488AFC = 0;
  byte_102488B00 = 0;
  byte_102488B18 = 0;
  qword_102488B20 = (uint64_t)"elevationAscended";
  dword_102488B28 = 1;
  word_102488B2C = 0;
  byte_102488B30 = 0;
  byte_102488B48 = 0;
  qword_102488B50 = (uint64_t)"elevationDescended";
  dword_102488B58 = 1;
  word_102488B5C = 0;
  byte_102488B60 = 0;
  byte_102488B78 = 0;
  qword_102488B80 = (uint64_t)"distanceSource";
  dword_102488B88 = 1;
  word_102488B8C = 0;
  byte_102488B90 = 0;
  byte_102488BA8 = 0;
  qword_102488BB0 = (uint64_t)"currentCadence";
  dword_102488BB8 = 2;
  word_102488BBC = 0;
  byte_102488BC0 = 0;
  byte_102488BD8 = 0;
  qword_102488BE0 = (uint64_t)"distanceMobility";
  dword_102488BE8 = 2;
  word_102488BEC = 0;
  byte_102488BF0 = 0;
  byte_102488C08 = 0;
  qword_102488C10 = (uint64_t)"pedometerArmConstrainedState";
  dword_102488C18 = 1;
  word_102488C1C = 0;
  byte_102488C20 = 0;
  byte_102488C38 = 0;
  qword_102488C40 = 0;
  dword_102488C48 = 5;
  word_102488C4C = 0;
  byte_102488C50 = 0;
  byte_102488C68 = 0;
  qword_102488C70 = (uint64_t)"startTime";
  *(void *)algn_102488C78 = 0;
}

void sub_10158334C(id a1)
{
  qword_102488CD8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLStepCountNotifierSilo"];
}

uint64_t sub_10158340C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10158443C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102488CF8 != -1) {
    dispatch_once(&qword_102488CF8, block);
  }
  return qword_10248D828;
}

uint64_t sub_1015836A4(uint64_t a1, uint64_t a2)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_10232E5A0);
  }
  uint64_t v4 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLStepCountNotifier::receiveWorkoutDistanceAnalyticsMessage: Data received", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_10232E5A0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountNotifier::receiveWorkoutDistanceAnalyticsMessage(NSData *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_100E6EAB4(*(std::mutex **)(a1 + 760), a2);
}

uint64_t sub_101583880(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1000D2E34(0);
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v4 + 32) + 16))();
  if (a2)
  {
    uint64_t v6 = sub_1000D2E34(0);
    v11[5] = _NSConcreteStackBlock;
    v11[6] = 3221225472;
    v11[7] = sub_101587DDC;
    v11[8] = &unk_1022A3020;
    v11[9] = a1;
    (*(void (**)(void))(*(void *)(v6 + 32) + 48))();
    uint64_t v7 = sub_1000D2E34(0);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10017A890;
    std::string v11[3] = &unk_10232E428;
    v11[4] = a1;
    return (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 32) + 40))(v7 + 32, v11, v8, v9, v10);
  }
  return result;
}

void sub_101583A70(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  double v28 = 0.0;
  int v8 = sub_101580A94(*(void **)(a1 + 128), &v28);
  double v9 = *a2;
  if (!v8)
  {
    if (v9 < v28) {
      double v9 = v28;
    }
    *a2 = v9;
  }
  *(void *)(a4 + 48) = 0;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  sub_1015797B4(*(void *)(a1 + 128), 0, a4, v9, *a3);
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10232E540);
  }
  uint64_t v10 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    double v11 = *a2;
    double v12 = *a3;
    int v13 = *(_DWORD *)a4;
    uint64_t v14 = *(void *)(a4 + 8);
    uint64_t v15 = *(void *)(a4 + 16);
    int v16 = *(_DWORD *)(a4 + 32);
    int v17 = *(_DWORD *)(a4 + 36);
    uint64_t v18 = *(void *)(a4 + 40);
    *(_DWORD *)buf = 134219776;
    double v46 = v11;
    __int16 v47 = 2048;
    double v48 = v12;
    __int16 v49 = 1024;
    int v50 = v13;
    __int16 v51 = 2048;
    uint64_t v52 = v14;
    __int16 v53 = 2048;
    uint64_t v54 = v15;
    __int16 v55 = 1024;
    int v56 = v16;
    __int16 v57 = 1024;
    int v58 = v17;
    __int16 v59 = 2048;
    uint64_t v60 = v18;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Query (%f, %f): %d, %f, %f, %d, %d, %f", buf, 0x46u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E540);
    }
    double v19 = *a2;
    double v20 = *a3;
    int v21 = *(_DWORD *)a4;
    uint64_t v22 = *(void *)(a4 + 8);
    uint64_t v23 = *(void *)(a4 + 16);
    int v24 = *(_DWORD *)(a4 + 32);
    int v25 = *(_DWORD *)(a4 + 36);
    uint64_t v26 = *(void *)(a4 + 40);
    int v29 = 134219776;
    double v30 = v19;
    __int16 v31 = 2048;
    double v32 = v20;
    __int16 v33 = 1024;
    int v34 = v21;
    __int16 v35 = 2048;
    uint64_t v36 = v22;
    __int16 v37 = 2048;
    uint64_t v38 = v23;
    __int16 v39 = 1024;
    int v40 = v24;
    __int16 v41 = 1024;
    int v42 = v25;
    __int16 v43 = 2048;
    uint64_t v44 = v26;
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLStepDistance CLStepCountNotifier::query(CFAbsoluteTime &, CFAbsoluteTime &) const", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
}

id sub_1015842DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) silo];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_101584360;
  _OWORD v4[3] = &unk_10229FED8;
  v4[4] = *(void *)(a1 + 32);
  return [v2 async:v4];
}

id sub_101584360(uint64_t a1)
{
  [objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "vendor"), "proxyForService:", @"CLNatalimetryNotifier"), "resume"];
  id v2 = [[[*(id *)(a1 + 32) universe] vendor] proxyForService:@"CLOutdoorService"];

  return [v2 resume];
}

void sub_101584408(id a1)
{
  if (sub_10016CCBC())
  {
    if (sub_100C60EC0()) {
      byte_102488CE8 = 1;
    }
  }
}

void sub_10158443C()
{
}

void sub_101584488()
{
}

void sub_1015844AC(uint64_t a1, void *a2)
{
  id v2 = (void *)sub_10158556C(a1, "CLStepCountNotifier", a2);
  void *v2 = off_10232E248;
  v2[14] = off_10232E358;
  v2[15] = off_10232E3A0;
  operator new();
}

void sub_1015852B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v18 = v12 + 838;
  uint64_t v19 = v12[839];
  v12[839] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *v18;
  uint64_t *v18 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v12[834];
  v12[834] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = v12[833];
  v12[833] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = v12[832];
  v12[832] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *v13;
  *int v13 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  sub_1010F7C18(v16);
  sub_100D3ED58(v15);
  int v25 = (std::__shared_weak_count *)v12[96];
  if (v25) {
    sub_1000DB0A0(v25);
  }
  sub_1012A937C(v14);
  sub_1012A92E0(a11);
  sub_1003B278C(a12);
  uint64_t v26 = (std::__shared_weak_count *)v12[17];
  if (v26) {
    sub_1000DB0A0(v26);
  }
  sub_1015864DC((uint64_t)v12);
  _Unwind_Resume(a1);
}

uint64_t sub_10158556C(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10232E5D0;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1015855FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_101585618(uint64_t a1, int a2, double a3)
{
  uint64_t v5 = (void **)(a1 + 144);
  sub_101586AB8(a1 + 144, a3 * 129600.0, a3 * 60.0);
  sub_101586AB8((uint64_t)v5, a3 * 259200.0, a3 * 300.0);
  if (a2)
  {
    sub_101586DCC(v5, a3 * 604800.0);
  }
}

void sub_1015856BC(uint64_t a1)
{
  int v12 = 86400;
  uint64_t v2 = sub_1000D3E78();
  sub_10006B564(v2, &v10);
  int v3 = sub_10006EF84(v10, "StepCountingAggregateTimerInterval", &v12);
  if (v11) {
    sub_1000DB0A0(v11);
  }
  if (v3) {
    uint64_t v4 = 1000000000 * v12;
  }
  else {
    uint64_t v4 = 86400000000000;
  }
  uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
  *(void *)(a1 + 6240) = v5;
  dispatch_source_set_timer(v5, 0, v4, 0xDF8475800uLL);
  char v6 = *(unsigned char *)(a1 + 6232);
  uint64_t v7 = *(NSObject **)(a1 + 6240);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_101587084;
  handler[3] = &unk_1022BBA18;
  handler[4] = a1;
  char v9 = v6;
  dispatch_source_set_event_handler(v7, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 6240));
}

void sub_1015857E8(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 - 32);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101585800(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1015884C4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015859BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015859DC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onUserInfoUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onUserInfoUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101588520(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101585B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101585BB8(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v6 = 1;
    int v3 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onActivePedStateCoprocessorData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v3, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    uint64_t v4 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v8 = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2082;
      int v12 = "activity";
      __int16 v13 = 2050;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onActivePedStateCoprocessorData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v6 = 0;
  }
  if (v6) {
    os_activity_scope_leave(&state);
  }
}

void sub_101585D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101585D70(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onActivePedStateCoprocessorDataSpectator", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onActivePedStateCoprocessorDataSpectator\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_1015887E8((_DWORD *)a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101585F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101585F44(void *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onPedometerPathStraightnessUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onPedometerPathStraightnessUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_1015888C4(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015860F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101586118(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101588BE0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015862D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015862F4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101588E5C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015864B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015864D0(uint64_t a1, uint64_t a2)
{
  return sub_1010F9720(*(void *)(a1 + 32) + 2928, a2);
}

uint64_t sub_1015864DC(uint64_t a1)
{
  *(void *)a1 = off_10232E5D0;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_101586560(void *a1)
{
  *a1 = off_10232E248;
  a1[14] = off_10232E358;
  a1[15] = off_10232E3A0;
  sub_101586990((uint64_t)a1);
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10232E540);
  }
  uint64_t v2 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLStepCountNotifier is shutting down", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E540);
    }
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLStepCountNotifier::~CLStepCountNotifier()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  uint64_t v3 = a1[839];
  a1[839] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[838];
  a1[838] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[834];
  a1[834] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[833];
  a1[833] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[832];
  a1[832] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = a1[831];
  a1[831] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  sub_1010F7C18(a1 + 366);
  sub_100D3ED58((uint64_t)(a1 + 97));
  int v9 = (std::__shared_weak_count *)a1[96];
  if (v9) {
    sub_1000DB0A0(v9);
  }
  sub_1012A937C((uint64_t)(a1 + 45));
  sub_1012A92E0((uint64_t)(a1 + 27));
  sub_1003B278C((uint64_t)(a1 + 18));
  __int16 v10 = (std::__shared_weak_count *)a1[17];
  if (v10) {
    sub_1000DB0A0(v10);
  }
  sub_1015864DC((uint64_t)a1);
  return a1;
}

void sub_1015868C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_1015868D0(uint64_t a1)
{
  return sub_101586560((void *)(a1 - 112));
}

void *sub_1015868D8(uint64_t a1)
{
  return sub_101586560((void *)(a1 - 120));
}

void sub_1015868E0(void *a1)
{
  sub_101586560(a1);

  operator delete();
}

void sub_101586918(uint64_t a1)
{
  sub_101586560((void *)(a1 - 112));

  operator delete();
}

void sub_101586954(uint64_t a1)
{
  sub_101586560((void *)(a1 - 120));

  operator delete();
}

void sub_101586990(uint64_t a1)
{
  *(unsigned char *)(a1 + 108) = 1;

  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;

  *(void *)(a1 + 6720) = 0;
  uint64_t v2 = *(NSObject **)(a1 + 6240);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 6240));
    *(void *)(a1 + 6240) = 0;
  }
  uint64_t v3 = *(void *)(a1 + 6648);
  *(void *)(a1 + 6648) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 6656);
  *(void *)(a1 + 6656) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 6664);
  *(void *)(a1 + 6664) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = sub_1000D2E34(0);
  sub_1009D26C4(v6, 7, *(void *)(a1 + 6680));
  uint64_t v7 = sub_1000D2E34(0);
  uint64_t v8 = *(void *)(a1 + 6688);

  sub_1009D26C4(v7, 9, v8);
}

void sub_101586AB8(uint64_t a1, double a2, double a3)
{
  if (a2 < 0.0 || a3 < 0.0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232E718);
    }
    uint64_t v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      double v24 = a2;
      __int16 v25 = 2050;
      double v26 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Programmer error, this rule is not valid (age: %{public}f, interval:%{public}f).", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232E718);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLStepCountEntry>::addAggregationRule(CFTimeInterval, CFTimeInterval) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else
  {
    uint64_t v6 = *(double **)a1;
    if (a2 == 0.0 && *v6 == 0.0)
    {
      v6[1] = a3;
    }
    else
    {
      unint64_t v9 = *(void *)(a1 + 8);
      if (*(double *)(v9 - 24) >= a2) {
        sub_101ABD6B0();
      }
      if (*(double *)(v9 - 16) >= a3) {
        sub_101ABD6DC();
      }
      uint64_t v10 = a1 + 16;
      unint64_t v11 = *(void *)(a1 + 16);
      if (v9 >= v11)
      {
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)v6) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_1001D7FD4();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v6) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16) {
          int v17 = (char *)sub_1000DA5D8(v10, v16);
        }
        else {
          int v17 = 0;
        }
        __int16 v18 = (double *)&v17[24 * v13];
        uint64_t v19 = &v17[24 * v16];
        double *v18 = a2;
        v18[1] = a3;
        *((unsigned char *)v18 + 16) = 0;
        __int16 v12 = (char *)(v18 + 3);
        uint64_t v21 = *(double **)a1;
        uint64_t v20 = *(double **)(a1 + 8);
        if (v20 != *(double **)a1)
        {
          do
          {
            long long v22 = *(_OWORD *)(v20 - 3);
            *((unsigned char *)v18 - 8) = *((unsigned char *)v20 - 8);
            *(_OWORD *)(v18 - 3) = v22;
            v18 -= 3;
            v20 -= 3;
          }
          while (v20 != v21);
          uint64_t v20 = *(double **)a1;
        }
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v12;
        *(void *)(a1 + 16) = v19;
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(double *)unint64_t v9 = a2;
        *(double *)(v9 + 8) = a3;
        __int16 v12 = (char *)(v9 + 24);
        *(unsigned char *)(v9 + 16) = 0;
      }
      *(void *)(a1 + 8) = v12;
    }
  }
}

void sub_101586DCC(void **a1, double a2)
{
  if (a2 >= 0.0)
  {
    uint64_t v8 = a1[2];
    uint64_t v6 = (uint64_t)(a1 + 2);
    uint64_t v7 = v8;
    unint64_t v9 = *(void *)(v6 - 8);
    if (v9 >= (unint64_t)v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (void)*a1) >> 3);
      unint64_t v12 = v11 + 1;
      if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
      if (2 * v13 > v12) {
        unint64_t v12 = 2 * v13;
      }
      if (v13 >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14) {
        unint64_t v15 = (char *)sub_1000DA5D8(v6, v14);
      }
      else {
        unint64_t v15 = 0;
      }
      unint64_t v16 = &v15[24 * v11];
      int v17 = &v15[24 * v14];
      *(double *)unint64_t v16 = a2;
      *((void *)v16 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v16[16] = 0;
      uint64_t v10 = v16 + 24;
      uint64_t v19 = (char *)*a1;
      __int16 v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          long long v20 = *(_OWORD *)(v18 - 24);
          *(v16 - 8) = *(v18 - 8);
          *(_OWORD *)(v16 - 24) = v20;
          v16 -= 24;
          v18 -= 24;
        }
        while (v18 != v19);
        __int16 v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *(double *)unint64_t v9 = a2;
      *(void *)(v9 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(unsigned char *)(v9 + 16) = 0;
      uint64_t v10 = (char *)(v9 + 24);
    }
    a1[1] = v10;
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232E718);
    }
    uint64_t v3 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232E718);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLActivityAggregator<CLStepCountEntry>::setExpirationRule(CFTimeInterval) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_101587084(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = [[CLOSTransaction alloc] initWithDescription:"CLStepCountNotifier.aggregation_timer"];
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E540);
    }
    uint64_t v4 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Aggregating records due to timer!", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E540);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountNotifier::setUpAggregateOnTimer()_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  sub_10158724C(v2 + 144);
}

uint64_t sub_10158724C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232E718);
    }
    uint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v3 = sub_1000D3E50();
      int v4 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)buf = 134218240;
      *(double *)uint64_t v21 = v3;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232E718);
      }
      sub_1000D3E50();
      int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), a1);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10232E718);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      double v7 = sub_1000D3E50();
      int v8 = *(_DWORD *)(*(void *)(a1 + 24) + 132);
      *(_DWORD *)buf = 134218240;
      *(double *)uint64_t v21 = v7;
      *(_WORD *)&v21[8] = 1024;
      int v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232E718);
      }
      sub_1000D3E50();
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    uint64_t v9 = *(void *)(a1 + 24);
    double v10 = (double)*(int *)(v9 + 132);
    if ((double)(int)sub_10158B6BC(v9, (double **)a1) * 1.2 < v10)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10232E718);
      }
      unint64_t v11 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 24);
        int v13 = *(_DWORD *)(v12 + 132);
        int v14 = sub_10158B6BC(v12, (double **)a1);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)uint64_t v21 = v13;
        *(_WORD *)&v21[4] = 1024;
        *(_DWORD *)&v21[6] = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10232E718);
        }
        sub_10158B6BC(*(void *)(a1 + 24), (double **)a1);
        uint64_t v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    return v5;
  }
  else
  {
    unint64_t v16 = *(uint64_t (**)(void))(**(void **)(a1 + 24) + 32);
    return v16();
  }
}

void sub_101587804(uint64_t a1, uint64_t a2)
{
  double v3 = *(unsigned char **)(a1 + 32);
  long long v4 = *(_OWORD *)(a2 + 144);
  __src[8] = *(_OWORD *)(a2 + 128);
  __src[9] = v4;
  __src[10] = *(_OWORD *)(a2 + 160);
  long long v5 = *(_OWORD *)(a2 + 80);
  __src[4] = *(_OWORD *)(a2 + 64);
  __src[5] = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  __src[6] = *(_OWORD *)(a2 + 96);
  __src[7] = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  __src[0] = *(_OWORD *)a2;
  __src[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  __src[2] = *(_OWORD *)(a2 + 32);
  __src[3] = v8;
  if (v3[6232])
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E540);
    }
    uint64_t v9 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a2 + 8);
      int v11 = *(_DWORD *)(a2 + 24);
      uint64_t v12 = *(void *)(a2 + 32);
      int v13 = *(_DWORD *)(a2 + 64);
      int v14 = *(_DWORD *)(a2 + 68);
      int v15 = *(_DWORD *)(a2 + 96);
      int v16 = *(_DWORD *)(a2 + 144);
      *(_DWORD *)buf = 134219520;
      uint64_t v43 = v10;
      __int16 v44 = 1024;
      int v45 = v11;
      __int16 v46 = 2048;
      uint64_t v47 = v12;
      __int16 v48 = 1024;
      int v49 = v13;
      __int16 v50 = 1024;
      int v51 = v14;
      __int16 v52 = 1024;
      int v53 = v15;
      __int16 v54 = 1024;
      int v55 = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "StepCount, %f, %d, %f, %d, %d, %d, %d", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E540);
      }
      uint64_t v19 = *(void *)(a2 + 8);
      int v20 = *(_DWORD *)(a2 + 24);
      uint64_t v21 = *(void *)(a2 + 32);
      int v22 = *(_DWORD *)(a2 + 64);
      int v23 = *(_DWORD *)(a2 + 68);
      int v24 = *(_DWORD *)(a2 + 96);
      int v25 = *(_DWORD *)(a2 + 144);
      int v28 = 134219520;
      uint64_t v29 = v19;
      __int16 v30 = 1024;
      int v31 = v20;
      __int16 v32 = 2048;
      uint64_t v33 = v21;
      __int16 v34 = 1024;
      int v35 = v22;
      __int16 v36 = 1024;
      int v37 = v23;
      __int16 v38 = 1024;
      int v39 = v24;
      __int16 v40 = 1024;
      int v41 = v25;
      double v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountNotifier::setUpdateFinishedHandler()_block_invoke", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  *(_DWORD *)buf = 0;
  (*(void (**)(unsigned char *, uint8_t *, _OWORD *, uint64_t, uint64_t, void))(*(void *)v3 + 152))(v3, buf, __src, 1, 0xFFFFFFFFLL, 0);
  memcpy(v3 + 6248, __src, 0x140uLL);
  sub_1010F87BC((uint64_t)(v3 + 2928), a2);
  __int16 v18 = objc_alloc_init(ALActivityLog);
  [(ALActivityLog *)v18 setTimestamp:*(double *)(a2 + 8)];
  [(ALActivityLog *)v18 setStepCountData:objc_alloc_init(ALCLStepCountEntry)];
  [(ALCLStepCountEntry *)[(ALActivityLog *)v18 stepCountData] setCount:*(unsigned int *)(a2 + 24)];
  [(ALCLStepCountEntry *)[(ALActivityLog *)v18 stepCountData] setDistance:*(double *)(a2 + 32)];
  [(ALCLStepCountEntry *)[(ALActivityLog *)v18 stepCountData] setFloorsAscended:*(unsigned int *)(a2 + 64)];
  [(ALCLStepCountEntry *)[(ALActivityLog *)v18 stepCountData] setFloorsDescended:*(unsigned int *)(a2 + 68)];
  [(ALCLStepCountEntry *)[(ALActivityLog *)v18 stepCountData] setPace:*(double *)(a2 + 72)];
  [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v18];
}

void *sub_101587BD0@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101587C4C(uint64_t a1, int *a2)
{
  int v3 = *a2;
  if (*a2 == 4)
  {
    uint64_t v4 = sub_1000D2E34(0);
    sub_1009D1EC4(v4, 35, *(void *)(a1 + 6696), -1.0);
  }
  else if (v3 == 2)
  {
    if (!*(unsigned char *)(a1 + 6636))
    {
      uint64_t v5 = sub_1000D2E34(0);
      sub_1009D1EC4(v5, 7, *(void *)(a1 + 6680), -1.0);
      *(unsigned char *)(a1 + 6636) = 1;
      *(_DWORD *)(a1 + 6640) = 2;
    }
  }
  else if (!v3 && *(double *)(a1 + 6248) > 0.0)
  {
    int v7 = 0;
    (*(void (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v7, a1 + 6248, 1, 0xFFFFFFFFLL, 0);
  }
  return 1;
}

uint64_t sub_101587D38(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 4)
  {
    uint64_t v4 = sub_1000D2E34(0);
    sub_1009D26C4(v4, 35, *(void *)(a1 + 6696));
  }
  else if (*a2 == 2)
  {
    if (*(unsigned char *)(a1 + 6636))
    {
      int v6 = 2;
      if (!sub_1001072EC(a1, &v6, 1))
      {
        uint64_t v3 = sub_1000D2E34(0);
        sub_1009D26C4(v3, 7, *(void *)(a1 + 6680));
        *(unsigned char *)(a1 + 6636) = 0;
        *(_DWORD *)(a1 + 6640) = 2;
      }
    }
  }
  return 1;
}

id sub_101587DDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_101587E50;
  _OWORD v4[3] = &unk_1022A3020;
  v4[4] = v1;
  return [v2 async:v4];
}

double sub_101587E50(uint64_t a1)
{
  return sub_10157C684(*(void *)(*(void *)(a1 + 32) + 128));
}

unint64_t sub_101587E5C()
{
  if (qword_10248D828) {
    return 1;
  }
  else {
    return ((unint64_t)sub_1000A16E8() >> 25) & 1;
  }
}

unint64_t sub_101587E8C()
{
  return ((unint64_t)sub_1000A16E8() >> 27) & 1;
}

unint64_t sub_101587EA8()
{
  return ((unint64_t)sub_1000A16E8() >> 37) & 1;
}

uint64_t sub_101587EC4()
{
  unint64_t v0 = sub_1000A16E8();
  if ((v0 & 0x4000000) == 0 || qword_10248D828 || (sub_1000A16E8() & 0x2000000) != 0) {
    return (v0 >> 26) & 1;
  }
  uint64_t v2 = sub_101ABD708();
  return sub_101587F08(v2);
}

void sub_101587F08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2 != 19)
  {
    if (v2 == 1)
    {
      uint64_t v3 = (double *)(a1 + 216);
      goto LABEL_8;
    }
    if (v2) {
      return;
    }
  }
  uint64_t v3 = (double *)(a1 + 216);
  if (*(void *)(a2 + 224) != 1)
  {
LABEL_8:
    double v4 = 5.0;
    double v5 = 5.0;
    goto LABEL_6;
  }
  double v4 = 150.0;
  double v5 = 150.0;
LABEL_6:
  sub_101587F54(v3, v4, v5);
}

void sub_101587F54(double *a1, double a2, double a3)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10232E560);
  }
  int v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *((void *)a1 + 12);
    uint64_t v8 = *((void *)a1 + 1);
    uint64_t v9 = *((void *)a1 + 2);
    *(_DWORD *)buf = 136316162;
    uint64_t v12 = v8;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    __int16 v15 = 2048;
    double v16 = a2;
    __int16 v17 = 2048;
    uint64_t v18 = v9;
    __int16 v19 = 2048;
    double v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Input, %s, changing behavior timeout(before), %.3f, timeout(after), %.3f, threshold(before), %.3f, threshold(after), %.3f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10232E560);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLNatalieInput<CLOdometerEntry>::modifyTimeouts(CFTimeInterval, CFTimeInterval) [Data_T = CLOdometerEntry]", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  a1[12] = a2;
  a1[2] = a3;
}

void sub_101588188(uint64_t a1)
{
  if (qword_1024191F0 != -1) {
    dispatch_once(&qword_1024191F0, &stru_10232E5A0);
  }
  uint64_t v2 = qword_1024191F8;
  if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_10232E5A0);
    }
    __int16 v10 = 0;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v3 = sub_100E6C194(*(void *)(a1 + 760));
  if (v3 && (double v4 = v3, [(NSData *)v3 length]))
  {
    id v5 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLCompanionNotifier"];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_101589A30;
    v9[3] = &unk_1022CA588;
    v9[4] = v4;
    [v5 doAsync:v9];
  }
  else
  {
    if (qword_1024191F0 != -1) {
      dispatch_once(&qword_1024191F0, &stru_10232E5A0);
    }
    int v6 = qword_1024191F8;
    if (os_log_type_enabled((os_log_t)qword_1024191F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics: No data to send", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191F0 != -1) {
        dispatch_once(&qword_1024191F0, &stru_10232E5A0);
      }
      __int16 v10 = 0;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountNotifier::sendWorkoutDistanceCoreAnalytics()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1015884C4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (!*a3)
  {
    sub_100103240();
    if (sub_100106424())
    {
      int v6 = *(std::mutex **)(a1 + 760);
      sub_100E6BEFC(v6, a4);
    }
  }
}

void sub_101588520(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 <= 5)
  {
    if (*a3 == 2)
    {
      uint64_t v9 = (long long *)(a1 + 6576);
      int v10 = *(_DWORD *)(a4 + 40);
      if (*(_DWORD *)(a1 + 6616) != v10)
      {
        sub_100103240();
        int v11 = sub_10010145C();
        unsigned int v12 = sub_10092C998(*(void *)(a1 + 6568));
        unsigned int v13 = (0x304001u >> v12) & 1;
        if (v12 > 0x15) {
          unsigned int v13 = 0;
        }
        if (!v11) {
          unsigned int v13 = 0;
        }
        if (v10) {
          int v14 = v13;
        }
        else {
          int v14 = 0;
        }
        sub_10157C34C(*(unsigned __int8 **)(a1 + 128), v14);
      }
      long long v15 = *(_OWORD *)a4;
      long long v16 = *(_OWORD *)(a4 + 16);
      long long v17 = *(_OWORD *)(a4 + 32);
      *(long long *)((char *)v9 + 44) = *(_OWORD *)(a4 + 44);
      v9[1] = v16;
      v9[2] = v17;
      long long *v9 = v15;
      uint64_t v18 = *(void **)(a1 + 200);
      long long v19 = *(_OWORD *)(a4 + 16);
      v29[0] = *(_OWORD *)a4;
      v29[1] = v19;
      v30[0] = *(_OWORD *)(a4 + 32);
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(a4 + 44);
      [v18 feedBodyMetrics:v29];
      int v20 = *(_DWORD *)(a4 + 8);
      uint64_t v21 = +[CMPedometerTableStepCadenceToStrideLength sharedInstance];
      LODWORD(v22) = v20;
      [(CMPedometerTableStepCadenceToStrideLength *)v21 setUserHeight:v22];
      sub_100D425E0(a1 + 776, v9);
      sub_1010F8740(a1 + 2928, v9);
      int v23 = *(void **)(a1 + 208);
      long long v24 = v9[1];
      v27[0] = *v9;
      v27[1] = v24;
      v28[0] = v9[2];
      *(_OWORD *)((char *)v28 + 12) = *(long long *)((char *)v9 + 44);
      [v23 feedBodyMetrics:v27];
    }
    else
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E540);
      }
      id v5 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = *a3;
        *(_DWORD *)buf = 67109120;
        int v34 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification type, %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E540);
        }
        int v25 = *a3;
        int v31 = 67109120;
        int v32 = v25;
        double v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountNotifier::onUserInfoUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
    }
  }
}

_DWORD *sub_1015887E8(_DWORD *result, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 >= 2)
  {
    int v3 = v2 != 2;
    if (result[1660] != v3)
    {
      uint64_t v4 = *(void *)(a2 + 8);
      result[1660] = v3;
      int v26 = 2;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v22 = 0u;
      uint64_t v25 = 0;
      long long v21 = 0u;
      long long v20 = 0u;
      long long v19 = 0u;
      long long v18 = 0u;
      long long v17 = 0u;
      long long v16 = 0u;
      long long v15 = 0u;
      long long v14 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      long long v6 = 0u;
      long long v7 = 0u;
      uint64_t v5 = v4;
      LODWORD(v6) = v3;
      return (_DWORD *)(*(uint64_t (**)(_DWORD *, int *, uint64_t *, uint64_t, uint64_t, void))(*(void *)result + 152))(result, &v26, &v5, 1, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

uint64_t sub_1015888C4(uint64_t a1, void *a2)
{
  *(_DWORD *)buf = 4;
  uint64_t result = sub_1001072EC(a1, (int *)buf, 1);
  if (result)
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E540);
    }
    uint64_t v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *a2;
      uint64_t v7 = a2[1];
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3];
      *(_DWORD *)buf = 134219008;
      *(void *)&uint8_t buf[4] = v6;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v7;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = v8;
      *(_WORD *)&buf[32] = 2048;
      *(void *)&buf[34] = v9;
      *(_WORD *)&buf[42] = 2048;
      *(void *)&buf[44] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "PathStraightnessMetric,timestamp,%.3f, straightness,%.3f,confidence,%.3f,startTime,%.3f,stopTime,%.3f", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E540);
      }
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      uint64_t v13 = a2[2];
      uint64_t v14 = a2[3];
      int v16 = 134219008;
      uint64_t v17 = v11;
      __int16 v18 = 2048;
      uint64_t v19 = v12;
      __int16 v20 = 2048;
      uint64_t v21 = v13;
      __int16 v22 = 2048;
      uint64_t v23 = v14;
      __int16 v24 = 2048;
      uint64_t v25 = v11;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountNotifier::onPedometerPathStraightnessUpdate(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
    int v16 = 4;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    memset(&buf[32], 0, 32);
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)buf = *(_OWORD *)a2;
    *(_OWORD *)&uint8_t buf[16] = v10;
    return (*(uint64_t (**)(uint64_t, int *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v16, buf, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_101588B58(uint64_t a1, uint64_t *a2)
{
  int8x16_t v4 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 1)), *(float64x2_t *)(a2 + 3));
  int8x16_t v12 = vextq_s8(v4, v4, 4uLL);
  float32x4_t v7 = *(float32x4_t *)(a2 + 5);
  uint64_t v5 = a2[7];
  sub_100B9BEAC((float32x4_t *)&v12, v7);
  v8[0] = v12;
  v8[1] = v7;
  uint64_t v6 = *a2;
  uint64_t v9 = v5;
  uint64_t v10 = v6;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  sub_1010F9244(a1 + 2928, (uint64_t)v8);
}

uint64_t sub_101588BE0(uint64_t result, uint64_t a2, _DWORD *a3, int *a4)
{
  if (!*a3)
  {
    uint64_t v5 = result;
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_10232E580);
    }
    uint64_t v6 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *a4;
      int v7 = a4[1];
      *(_DWORD *)buf = 67240448;
      int v11 = v7;
      __int16 v12 = 1026;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Watch orientation settings updated, crown, %{public}d, wrist, %{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_10232E580);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStepCountNotifier::onWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return sub_1010F9718(v5 + 2928, a4);
  }
  return result;
}

void sub_101588DC4(uint64_t a1, uint64_t a2)
{
  sub_100D4248C(a1 + 776, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 17);

  sub_1010F9AE8(a1 + 2928, v4, v5, v6);
}

void sub_101588E10(uint64_t a1, uint64_t a2)
{
  sub_100D4248C(a1 + 656, (uint64_t *)a2);
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 17);

  sub_1010F9AE8(a1 + 2808, v4, v5, v6);
}

void sub_101588E5C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v4 = *a3;
  if (*a3 <= 8)
  {
    if (((1 << v4) & 0x1EE) != 0)
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E540);
      }
      char v6 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_ERROR))
      {
        int v7 = *a3;
        *(_DWORD *)buf = 67240192;
        int v14 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Fitness Tracking: Invalid notification type %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E540);
        }
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLStepCountNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    else if (v4)
    {
      int v10 = *(_DWORD *)a4;
      uint64_t v11 = a1 + 2928;
      sub_1010F9D14(v11, v10);
    }
    else
    {
      int v8 = (void *)(a1 + 216);
      uint64_t v9 = (void *)(a1 + 360);
      if (*(unsigned char *)(a4 + 3))
      {
        sub_10061EDC0(v9);
        sub_10061EBE4(v8);
      }
      else
      {
        sub_10061E994(v9);
        sub_10061E780(v8);
      }
    }
  }
}

BOOL sub_101589120(uint64_t a1)
{
  uint64_t v2 = sub_10125D0BC();
  if (v2)
  {
    if (!*(void *)(a1 + 6704))
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E540);
      }
      int v3 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Initializing Device Motion dispatcher", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E540);
        }
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLStepCountNotifier::enableDeviceMotion()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      int v4 = [[CLDeviceMotionProperties alloc] initWithMode:3];
      operator new();
    }
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10232E540);
    }
    char v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Subscribing for DeviceMotion from pedometer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E540);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLStepCountNotifier::enableDeviceMotion()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t v6 = sub_10125D0BC();
    sub_10125DACC(v6, *(void *)(a1 + 6704), 0.01);
  }
  return v2 != 0;
}

void sub_1015894A0()
{
}

void sub_1015894CC(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    int v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountNotifier::onDeviceMotionData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    char v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountNotifier::onDeviceMotionData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_101588B58(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101589680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1015896A0(uint64_t a1)
{
  return sub_101589120(a1 - 112);
}

BOOL sub_1015896A8(uint64_t a1)
{
  uint64_t v2 = sub_10125D0BC();
  if (v2)
  {
    if (*(void *)(a1 + 6704))
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E540);
      }
      int v3 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unregistering device motion for pedometer", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E540);
        }
        char v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLStepCountNotifier::disableDeviceMotion()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      uint64_t v4 = sub_10125D0BC();
      sub_10125DDA0(v4, *(void *)(a1 + 6704));
    }
    else
    {
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10232E540);
      }
      char v5 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "stopActive: Device motion dispatcher not initialized, nothing to do", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10232E540);
        }
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLStepCountNotifier::disableDeviceMotion()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
  }
  return v2 != 0;
}

BOOL sub_10158998C(uint64_t a1)
{
  return sub_1015896A8(a1 - 112);
}

BOOL sub_101589994(double *a1)
{
  sub_100528B3C((uint64_t)(a1 + 27), a1[40], a1[41]);
  double v2 = a1[58];
  double v3 = a1[59];

  return sub_100B5C070((uint64_t)(a1 + 45), v2, v3);
}

BOOL sub_1015899D8(uint64_t a1)
{
  return sub_101589994((double *)(a1 - 112));
}

id sub_1015899E0(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a1 + 200);
  if (result) {
    return _[result onRunningFormMetrics:a2];
  }
  return result;
}

id sub_1015899F4(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a1 + 88);
  if (result) {
    return _[result onRunningFormMetrics:a2];
  }
  return result;
}

id sub_101589A08(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a1 + 200);
  if (result) {
    return _[result queryStrideLengthTracks:a2];
  }
  return result;
}

id sub_101589A1C(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a1 + 88);
  if (result) {
    return _[result queryStrideLengthTracks:a2];
  }
  return result;
}

id sub_101589A30(uint64_t a1, uint64_t a2)
{
  return sub_1005E26F4(300.0, a2, 37, *(void **)(a1 + 32), 300, 0, 1, 1, 0, 0);
}

uint64_t sub_101589A7C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_10232E828;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_101589B60()
{
}

void sub_101589C1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_101589C58(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232E520);
      }
      __int16 v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10232E520);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_101589EE8(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101589F9C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_101589FE4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_10158A02C(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_10158A074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_1024797D0);
}

uint64_t sub_10158A0A0(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)long long v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          __int16 v24 = (uint64_t *)v18;
        }
        else {
          __int16 v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          long long v29 = (uint64_t *)v25;
        }
        else {
          long long v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        memset(buf, 0, 320);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_10158BDE4();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_1024797D1;
        int v39 = v17;
        *(void *)&buf[0] = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        long long v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        long long v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        long long v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232E520);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    long long v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)long long v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    long long v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_10158A574(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)buf = 136446466;
      __int16 v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232E520);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_10158A7F8(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232E520);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232E520);
                }
                long long v29 = a1 + 8;
                if (a1[31] < 0) {
                  long long v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                long long v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                long long v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10158ABCC(uint64_t a1, int *a2, const void *a3)
{
  uint64_t v6 = (uint64_t *)operator new(0x158uLL);
  v6[1] = 0;
  v6[2] = 0;
  *uint64_t v6 = (uint64_t)off_10232E7B8;
  memcpy(v6 + 3, a3, 0x140uLL);
  int v10 = *a2;
  int v11 = &v10;
  int v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  BOOL v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_10158AC90(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10158ACA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_10158AD28(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    double v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232E520);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::listClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232E520);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232E520);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::listClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    BOOL v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10232E520);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232E520);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::listClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            BOOL v8 = v19;
          }
          while (!v16);
        }
        BOOL v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_10158B2D8(uint64_t a1)
{
  sub_10158BD74(a1);

  operator delete();
}

void sub_10158B310(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10158B340(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10158B370(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10158B3A0(id a1)
{
  qword_102419298 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

void sub_10158B3D0(id a1)
{
  qword_1024191F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Mobility");
}

void sub_10158B400(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10158B468(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10158B480(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_10158B4B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10158B4F4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_10158B524@<X0>(void *a1@<X8>)
{
  double v2 = operator new(0x168uLL);
  uint64_t result = sub_10158B570(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_10158B55C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10158B570(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10232E748;
  sub_100E6B780(a1 + 3);
  return a1;
}

void sub_10158B5B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10158B5CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10232E748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10158B5EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10232E748;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10158B640(uint64_t a1)
{
  double v2 = (std::mutex *)(a1 + 24);
  sub_1003B2350((void *)(a1 + 336));
  std::mutex::~mutex((std::mutex *)(a1 + 88));

  std::mutex::~mutex(v2);
}

void sub_10158B68C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10158B6BC(uint64_t a1, double **a2)
{
  int v3 = *a2;
  double v2 = a2[1];
  double v4 = (*a2)[1];
  double v5 = *(float *)(a1 + 136);
  if (v4 <= v5) {
    double v4 = *(float *)(a1 + 136);
  }
  uint64_t v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    double v8 = *v3;
    do
    {
      double v9 = *v6;
      double v10 = v6[1];
      v6 += 3;
      uint64_t v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5) {
        double v4 = *(float *)(a1 + 136);
      }
      else {
        double v4 = v10;
      }
      double v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232E788);
    }
    int v11 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232E788);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLStepCountEntry>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  return v7;
}

void sub_10158B8BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10232E7B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10158B8DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10232E7B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10158B930(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_10158BCBC((uint64_t)&v6, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10232E7F8);
    }
    int v3 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101E11023 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_18:
        int v7 = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101E11023 & 0x7FFFFFFFFFFFFFFFLL;
        double v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLStepCountNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_20:
      dispatch_once(&qword_102418F90, &stru_10232E7F8);
      goto LABEL_18;
    }
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10232E7F8);
    }
    double v4 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      id v14 = v2;
      __int16 v15 = 2048;
      uint64_t v16 = 0;
      __int16 v17 = 2080;
      unint64_t v18 = 0x8000000101E11023 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
}

void sub_10158BCBC(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023951B0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)320)
    {
      int v3 = (void *)sub_101ABD88C();
      sub_10158BD44(v3);
      return;
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  [a2 cppObjectPtr];
}

void sub_10158BD44(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_10158BD74(uint64_t a1)
{
  *(void *)a1 = &off_10232E828;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_10158BDE4()
{
}

uint64_t sub_10158BE98(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_10158BEB8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E10BB0;
      v0[3] = unk_101E10BC0;
      v0[4] = xmmword_101E10BD0;
      v0[0] = xmmword_101E10B90;
      v0[1] = unk_101E10BA0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10158BF98(_Unwind_Exception *a1)
{
}

uint64_t sub_10158BFB0()
{
  sub_100134750(qword_102488C80, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488C80, (void *)&_mh_execute_header);
  sub_100134750(qword_102488C98, "Acc800Fp");
  dword_102488CB0 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_102488C98, (void *)&_mh_execute_header);
  sub_100134750(qword_102488CB8, "DmFp");
  dword_102488CD0 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, qword_102488CB8, (void *)&_mh_execute_header);
}

void sub_10158C17C()
{
}

void sub_10158C334(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_10158C364(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  char v6 = (void *)sub_100054C14((uint64_t)a1, a2, a3, a4, a5);
  *char v6 = off_10232E870;
  v6[6] = off_1022B6DB8;
  int v7 = operator new(0x20uLL);
  v7[1] = 0;
  v7[2] = 0;
  *int v7 = off_1022B6DF0;
  *((_DWORD *)v7 + 6) = 31337;
  a1[7] = v7 + 3;
  a1[8] = v7;
  a1[11] = 0;
  a1[10] = 0;
  a1[9] = a1 + 10;
  return a1;
}

void sub_10158C410(_Unwind_Exception *a1)
{
  sub_100029A7C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10158C428(uint64_t a1)
{
  *(void *)a1 = off_10232E870;
  uint64_t v2 = a1 + 72;
  int v3 = *(void **)(a1 + 72);
  double v4 = (void *)(a1 + 80);
  if (v3 != (void *)(a1 + 80))
  {
    do
    {
      [(id)v3[5] invalidate];

      v3[5] = 0;
      double v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          char v6 = v5;
          double v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          char v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          int v3 = v6;
        }
        while (!v7);
      }
      int v3 = v6;
    }
    while (v6 != v4);
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 80));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = v4;
  sub_1000F5BB0(v2, 0);
  sub_10012E38C((void *)(a1 + 48));

  return sub_100029A7C(a1);
}

void sub_10158C510(uint64_t a1)
{
  sub_10158C428(a1);

  operator delete();
}

void *sub_10158C548@<X0>(uint64_t a1@<X8>)
{
  v5[0] = off_10232E948;
  v5[1] = sub_10158C700;
  void v5[2] = 0;
  v5[3] = v5;
  sub_100134750(v6, "kCLConnectionMessageActivityAlarmStart");
  sub_100BF9020((uint64_t)&v7, (uint64_t)v5);
  v4[0] = off_10232E9F8;
  v4[1] = sub_10158CEEC;
  void v4[2] = 0;
  _OWORD v4[3] = v4;
  sub_100134750(v8, "kCLConnectionMessageActivityAlarmAvailable");
  sub_100BF9020((uint64_t)v9, (uint64_t)v4);
  sub_10158DC9C(a1, (unsigned __int8 *)v6, 2);
  for (uint64_t i = 0; i != -14; i -= 7)
  {
    sub_100BF953C(&v9[i * 8]);
    if (SHIBYTE(v8[i + 2]) < 0) {
      operator delete((void *)v8[i]);
    }
  }
  sub_100BF953C(v4);
  return sub_100BF953C(v5);
}

void sub_10158C6A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_10158CFDC(v2 + i);
  sub_100BF953C((uint64_t *)va);
  sub_100BF953C(va1);
  _Unwind_Resume(a1);
}

void sub_10158C700(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = objc_alloc_init((Class)NSAutoreleasePool);
  double v31 = 0.0;
  uint64_t v32 = 0;
  if (+[CMActivityAlarmLocal activityAlarmAvailable])
  {
    if (sub_100D6A448((_DWORD *)&v32 + 1, &v32, &v31, a3))
    {
      if (a2)
      {
        if (qword_102419020 != -1) {
          dispatch_once(&qword_102419020, &stru_10232E918);
        }
        uint64_t v7 = qword_102419028;
        if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v32;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v31;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = HIDWORD(v32);
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Primed for activity alarm %d with duration %f (internal id %d)", buf, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419020 != -1) {
            dispatch_once(&qword_102419020, &stru_10232E918);
          }
          int v33 = 67109632;
          int v34 = v32;
          __int16 v35 = 2048;
          double v36 = v31;
          __int16 v37 = 1024;
          int v38 = HIDWORD(v32);
          int v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
        id v8 = [*(id *)(a1 + 8) silo];
        uint64_t v10 = *(void *)(a1 + 56);
        uint64_t v9 = *(std::__shared_weak_count **)(a1 + 64);
        if (v9)
        {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_1000DB0A0(v9);
        }
        __int16 v11 = [CMActivityAlarmLocal alloc];
        uint64_t v12 = v32;
        double v13 = v31;
        id v14 = [v8 queue];
        __int16 v15 = *(void **)(a1 + 24);
        if (v15)
        {
          [v15 clientName];
        }
        else
        {
          uint64_t v49 = 0;
          *(_OWORD *)std::string __p = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          *(_OWORD *)__int16 v46 = 0u;
          long long v43 = 0u;
          *(_OWORD *)int v44 = 0u;
          *(_OWORD *)int v41 = 0u;
          *(_OWORD *)char v42 = 0u;
          long long v40 = 0u;
          memset(buf, 0, sizeof(buf));
        }
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3321888768;
        _OWORD v28[2] = sub_10158D490;
        v28[3] = &unk_10232E8B8;
        v28[4] = a1;
        v28[5] = v10;
        long long v29 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        int v30 = HIDWORD(v32);
        BOOL v24 = [(CMActivityAlarmLocal *)v11 initWithTrigger:v12 duration:v14 onQueue:buf forClient:v28 withHandler:v13];
        if (SHIBYTE(v48) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v46[0]);
        }
        if (SHIBYTE(v45) < 0) {
          operator delete(v44[1]);
        }
        if (SHIBYTE(v43) < 0) {
          operator delete(v42[1]);
        }
        if (SHIBYTE(v42[0]) < 0) {
          operator delete(v41[0]);
        }
        if (SHIBYTE(v40) < 0) {
          operator delete(*(void **)&buf[24]);
        }
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        if (!*(void *)(a1 + 88)) {
          sub_10009C834(a1);
        }
        *(void *)buf = (char *)&v32 + 4;
        sub_1000FEE0C((uint64_t **)(a1 + 72), (int *)&v32 + 1, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v24;
        if (v29) {
          std::__shared_weak_count::__release_weak(v29);
        }
        if (v9) {
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 80);
        if (v17)
        {
          uint64_t v18 = a1 + 80;
          do
          {
            int v19 = *(_DWORD *)(v17 + 32);
            BOOL v20 = v19 < SHIDWORD(v32);
            if (v19 >= SHIDWORD(v32)) {
              int v21 = (uint64_t *)v17;
            }
            else {
              int v21 = (uint64_t *)(v17 + 8);
            }
            if (!v20) {
              uint64_t v18 = v17;
            }
            uint64_t v17 = *v21;
          }
          while (*v21);
          if (v18 != a1 + 80 && SHIDWORD(v32) >= *(_DWORD *)(v18 + 32))
          {
            if (qword_102419020 != -1) {
              dispatch_once(&qword_102419020, &stru_10232E918);
            }
            int v22 = qword_102419028;
            if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 67109632;
              *(_DWORD *)&uint8_t buf[4] = v32;
              *(_WORD *)&uint8_t buf[8] = 2048;
              *(double *)&buf[10] = v31;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = HIDWORD(v32);
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Invalidated activity alarm %d with duration %f (internal id %d)", buf, 0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419020 != -1) {
                dispatch_once(&qword_102419020, &stru_10232E918);
              }
              int v33 = 67109632;
              int v34 = v32;
              __int16 v35 = 2048;
              double v36 = v31;
              __int16 v37 = 1024;
              int v38 = HIDWORD(v32);
              int v27 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)", "%s\n", v27);
              if (v27 != (char *)buf) {
                free(v27);
              }
            }
            __int16 v23 = *(void **)(v18 + 40);
            [v23 invalidate];
            sub_1000F0A30((uint64_t **)(a1 + 72), (uint64_t *)v18);
            operator delete((void *)v18);

            if (!*(void *)(a1 + 88)) {
              sub_10009C834(a1);
            }
          }
        }
      }
    }
  }
  else
  {
    if (qword_102419020 != -1) {
      dispatch_once(&qword_102419020, &stru_10232E918);
    }
    uint64_t v16 = qword_102419028;
    if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning Activity alarms not available.  Requested alarm will not be listened for.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_10232E918);
      }
      LOWORD(v33) = 0;
      __int16 v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
  }
}

void sub_10158CE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  _Unwind_Resume(a1);
}

void sub_10158CEEC()
{
  id v0 = objc_alloc_init((Class)NSAutoreleasePool);
  uint64_t v1 = CMAvailable;
  uint64_t v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", +[CMActivityAlarmLocal activityAlarmAvailable]);
  +[NSDictionary dictionaryWithObjects:&v2 forKeys:&v1 count:1];
  CLConnectionMessage::sendReply();
}

void sub_10158CFB4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_1001C7F8C(exception_object);
}

uint64_t sub_10158CFDC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10158D018(uint64_t a1, int a2, void *a3)
{
  int v17 = a2;
  if (qword_102419020 != -1) {
    dispatch_once(&qword_102419020, &stru_10232E918);
  }
  id v6 = qword_102419028;
  if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    int v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "activity alarm triggered. (internal id %d)", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419020 != -1) {
      dispatch_once(&qword_102419020, &stru_10232E918);
    }
    LODWORD(v18) = 67109120;
    HIDWORD(v18) = a2;
    id v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::onActivityAlarm(int, CMActivityAlarm *, NSError *)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  uint64_t v7 = *(void *)(a1 + 80);
  if (!v7) {
    goto LABEL_16;
  }
  uint64_t v8 = a1 + 80;
  do
  {
    int v9 = *(_DWORD *)(v7 + 32);
    BOOL v10 = v9 < a2;
    if (v9 >= a2) {
      __int16 v11 = (uint64_t *)v7;
    }
    else {
      __int16 v11 = (uint64_t *)(v7 + 8);
    }
    if (!v10) {
      uint64_t v8 = v7;
    }
    uint64_t v7 = *v11;
  }
  while (*v11);
  if (v8 != a1 + 80 && *(_DWORD *)(v8 + 32) <= a2)
  {
    sub_1000E9354(buf);
    unsigned int v16 = [a3 trigger];
    [a3 duration];
    uint64_t v18 = v13;
    sub_100D6A3D0(&v17, &v16, &v18, (uint64_t)buf);
    uint64_t v18 = sub_1000E9358((uint64_t)buf);
    sub_10158D40C(a1);
    sub_10017C890(a1 + 72, &v17);

    if (!*(void *)(a1 + 88)) {
      sub_10009C834(a1);
    }
    sub_10013F3C4(buf);
  }
  else
  {
LABEL_16:
    if (qword_102419020 != -1) {
      dispatch_once(&qword_102419020, &stru_10232E918);
    }
    uint64_t v12 = qword_102419028;
    if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109120;
      int v20 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "activity alarm triggered, but invalidated.  ignoring.  (internal id %d)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_10232E918);
      }
      LODWORD(v18) = 67109120;
      HIDWORD(v18) = a2;
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::onActivityAlarm(int, CMActivityAlarm *, NSError *)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
}

void sub_10158D3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_10158D40C(uint64_t a1)
{
  sub_10048C758(&off_10232EA68, &v2);
  sub_1000E956C(a1, &v2);
  if (v3) {
    sub_1000DB0A0(v3);
  }
}

void sub_10158D478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10158D490(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v9 = 0;
  BOOL v10 = &v9;
  uint64_t v11 = 0x2020000000;
  char v12 = 0;
  int v5 = *(_DWORD *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 48);
  if (!v6 || *(void *)(v6 + 8) == -1 || (sub_10158D018(v4, v5, a2), (*((unsigned char *)v10 + 24) = 1) == 0))
  {
    if (qword_102419020 != -1) {
      dispatch_once(&qword_102419020, &stru_10232E918);
    }
    uint64_t v7 = qword_102419028;
    if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning CLDaemonClient got activity alarm callback after destruction... ignoring", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419020 != -1) {
        dispatch_once(&qword_102419020, &stru_10232E918);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityAlarmSubscription::handleRequestActivityAlarm(BOOL, const CLNameValuePair &)_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  _Block_object_dispose(&v9, 8);
}

void sub_10158D6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10158D6F0(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
}

void sub_10158D730(id a1)
{
  qword_102419028 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

__n128 sub_10158D760(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10232E948;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10158D7AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10232E948;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10158D7DC(uint64_t a1, uint64_t a2, long long *a3)
{
}

uint64_t sub_10158D7E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10158D824()
{
}

void sub_10158D830(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  sub_10158D88C(a1, a2, (CLConnectionMessage **)&v3);
  if (*((void *)&v3 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_10158D874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10158D88C(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  uint64_t v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
  CFDictionaryRef DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_10013FA80((int)v15, DictionaryOfClasses);
  BOOL v14 = 0;
  if (sub_1000D2988((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14))
  {
    uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))a1;
    uint64_t v9 = *(void *)(a1 + 8);
    BOOL v10 = (void *)(a2 + (v9 >> 1));
    if (v9) {
      uint64_t v8 = *(void (**)(void *, BOOL, uint8_t *))(*v10 + v8);
    }
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10232E9B8);
    }
    uint64_t v11 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10232E9B8);
      }
    }
    char v12 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)buf = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      int v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10013F3C4(v15);
}

void sub_10158DABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void sub_10158DAD8(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_10158DB08(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_10232E9F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10158DB54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10232E9F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10158DB84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_10158DB8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10158DBCC()
{
}

void sub_10158DBD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  int v5 = *(void (**)(void *, uint64_t *))a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)(a2 + (v6 >> 1));
  if (v6) {
    int v5 = *(void (**)(void *, uint64_t *))(*v7 + v5);
  }
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v5(v7, &v8);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_10158DC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10158DC9C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_10158DD18(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_10158DD04(_Unwind_Exception *a1)
{
  sub_100BF95C0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10158DD18(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_10158DF9C(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_10158E08C((uint64_t)v25, 0);
  return i;
}

void sub_10158DF84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10158E08C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_10158DF9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_10158E014(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_10158DFFC(_Unwind_Exception *a1)
{
  sub_10158E08C(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_10158E014(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100BF8D78((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10158E070(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10158E08C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BF9640((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_10158E0E4(uint64_t a1, unint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  sub_10158E164((void **)(a1 + 40), a2);
  return a1;
}

void sub_10158E13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 48) = v13;
    operator delete(v13);
  }
  a10 = (void **)v10;
  sub_10100BE4C(&a10);
  _Unwind_Resume(a1);
}

void sub_10158E164(void **a1, unint64_t a2)
{
  long long v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL) {
      sub_1001D7FD4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_10021D4B8(v3, a2);
    uint64_t v7 = &v6[v5];
    unint64_t v9 = &v6[72 * v8];
    uint8x8_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *(_OWORD *)(v12 - 72) = *(_OWORD *)(v10 - 72);
        long long v13 = *(_OWORD *)(v10 - 56);
        long long v14 = *(_OWORD *)(v10 - 40);
        long long v15 = *(_OWORD *)(v10 - 24);
        *((_WORD *)v12 - 4) = *((_WORD *)v10 - 4);
        *(_OWORD *)(v12 - 24) = v15;
        *(_OWORD *)(v12 - 40) = v14;
        *(_OWORD *)(v12 - 56) = v13;
        v12 -= 72;
        v10 -= 72;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_10158E264(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v8 = (uint64_t)(a1 + 5);
  unint64_t v11 = *(void *)(v8 - 16);
  if (0x8E38E38E38E38E39 * ((v10 - v9) >> 3) != v11) {
    sub_10158E39C(v8, v11);
  }
  memset(&v16[3], 0, 32);
  sub_10158E3E0(v16, a2);
  v16[4] = a3;
  v16[5] = a4;
  v16[6] = a1[4];
  unint64_t v12 = a1[1];
  if (v12 >= a1[2])
  {
    uint64_t v14 = sub_10158ECC8(a1, (uint64_t)v16);
  }
  else
  {
    sub_10158E9C4(a1[1], (uint64_t)v16);
    long long v13 = *(_OWORD *)&v16[4];
    *(void *)(v12 + 48) = v16[6];
    *(_OWORD *)(v12 + 32) = v13;
    uint64_t v14 = v12 + 56;
    a1[1] = v12 + 56;
  }
  a1[1] = v14;
  return sub_10100BFD0(v16);
}

void sub_10158E37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10100BFD0(&a9);
  _Unwind_Resume(a1);
}

void sub_10158E39C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10158E808((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 72 * a2;
  }
}

void *sub_10158E3E0(void *a1, uint64_t a2)
{
  sub_10158E9C4((uint64_t)v4, a2);
  sub_10158EA5C(v4, a1);
  sub_10100BFD0(v4);
  return a1;
}

void sub_10158E454(void *a1, int a2)
{
  unint64_t v2 = (void *)*a1;
  int v34 = (void *)a1[1];
  if ((void *)*a1 != v34)
  {
    do
    {
      unint64_t v4 = a1[4];
      unint64_t v5 = v2[6];
      if (v4 < v5) {
        v4 -= 0x71C71C71C71C71C7 * ((uint64_t)(a1[6] - a1[5]) >> 3);
      }
      unint64_t v6 = v4 - v5;
      uint64_t v7 = 5;
      if (a2) {
        uint64_t v7 = 4;
      }
      unint64_t v8 = v2[v7];
      unint64_t v36 = v8;
      while (v6 >= v8)
      {
        if (v2[5] >= v6) {
          unint64_t v9 = v6;
        }
        else {
          unint64_t v9 = v2[5];
        }
        std::string __p = 0;
        int v38 = 0;
        __int16 v39 = 0;
        if (v9)
        {
          uint64_t v10 = 0;
          unint64_t v11 = 0;
          unint64_t v12 = 0;
          unint64_t v13 = v2[6];
          uint64_t v14 = a1[5];
          do
          {
            uint64_t v15 = v14 + 72 * v13;
            if (v12 >= (_OWORD *)v39)
            {
              unint64_t v19 = v11 + 1;
              if (v11 + 1 > 0x38E38E38E38E38ELL) {
                sub_1001D7FD4();
              }
              if (0x1C71C71C71C71C72 * ((v39 - v10) >> 3) > v19) {
                unint64_t v19 = 0x1C71C71C71C71C72 * ((v39 - v10) >> 3);
              }
              if (0x8E38E38E38E38E39 * ((v39 - v10) >> 3) >= 0x1C71C71C71C71C7) {
                unint64_t v20 = 0x38E38E38E38E38ELL;
              }
              else {
                unint64_t v20 = v19;
              }
              if (v20)
              {
                size_t v21 = (char *)sub_10021D4B8((uint64_t)&v39, v20);
                uint64_t v10 = __p;
                unint64_t v12 = v38;
              }
              else
              {
                size_t v21 = 0;
              }
              int v22 = &v21[72 * v11];
              *(_OWORD *)int v22 = *(_OWORD *)v15;
              long long v23 = *(_OWORD *)(v15 + 16);
              long long v24 = *(_OWORD *)(v15 + 32);
              long long v25 = *(_OWORD *)(v15 + 48);
              *((void *)v22 + 8) = *(void *)(v15 + 64);
              *((_OWORD *)v22 + 2) = v24;
              *((_OWORD *)v22 + 3) = v25;
              *((_OWORD *)v22 + 1) = v23;
              if (v12 == (_OWORD *)v10)
              {
                int v30 = &v21[72 * v11];
              }
              else
              {
                int v26 = &v21[72 * v11];
                do
                {
                  *(_OWORD *)(v26 - 72) = *(_OWORD *)((char *)v12 - 72);
                  long long v27 = *(_OWORD *)((char *)v12 - 56);
                  long long v28 = *(_OWORD *)((char *)v12 - 40);
                  long long v29 = *(_OWORD *)((char *)v12 - 24);
                  int v30 = v26 - 72;
                  *((_WORD *)v26 - 4) = *((_WORD *)v12 - 4);
                  *(_OWORD *)(v26 - 24) = v29;
                  *(_OWORD *)(v26 - 40) = v28;
                  *(_OWORD *)(v26 - 56) = v27;
                  unint64_t v12 = (_OWORD *)((char *)v12 - 72);
                  v26 -= 72;
                }
                while (v12 != (_OWORD *)v10);
              }
              unint64_t v12 = v22 + 72;
              std::string __p = v30;
              int v38 = v22 + 72;
              __int16 v39 = &v21[72 * v20];
              if (v10)
              {
                operator delete(v10);
                uint64_t v10 = __p;
              }
              else
              {
                uint64_t v10 = v30;
              }
            }
            else
            {
              *unint64_t v12 = *(_OWORD *)v15;
              long long v16 = *(_OWORD *)(v15 + 16);
              long long v17 = *(_OWORD *)(v15 + 32);
              long long v18 = *(_OWORD *)(v15 + 48);
              *((void *)v12 + 8) = *(void *)(v15 + 64);
              v12[2] = v17;
              v12[3] = v18;
              v12[1] = v16;
              unint64_t v12 = (_OWORD *)((char *)v12 + 72);
            }
            int v38 = v12;
            uint64_t v14 = a1[5];
            unint64_t v13 = (v2[6] + 1) % (0x8E38E38E38E38E39 * ((a1[6] - v14) >> 3));
            v2[6] = v13;
            unint64_t v11 = 0x8E38E38E38E38E39 * (((char *)v12 - v10) >> 3);
          }
          while (v11 < v9);
        }
        uint64_t v31 = v2[3];
        if (!v31) {
          sub_10015E48C();
        }
        (*(void (**)(uint64_t, void **))(*(void *)v31 + 48))(v31, &__p);
        unint64_t v32 = a1[4];
        unint64_t v33 = v2[6];
        if (v32 < v33) {
          v32 -= 0x71C71C71C71C71C7 * ((uint64_t)(a1[6] - a1[5]) >> 3);
        }
        if (__p)
        {
          int v38 = __p;
          operator delete(__p);
        }
        unint64_t v6 = v32 - v33;
        unint64_t v8 = v36;
      }
      v2 += 7;
    }
    while (v2 != v34);
  }
}

void sub_10158E748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10158E76C(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1[5] + 72 * a1[4];
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(v3 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(v3 + 32) = v5;
  *(_OWORD *)(v3 + 48) = v4;
  *(_OWORD *)(v3 + 16) = v6;
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
  unint64_t v7 = 0x8E38E38E38E38E39 * ((a1[6] - a1[5]) >> 3);
  unint64_t v8 = (a1[4] + 1) % v7;
  a1[4] = v8;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (*a1 != v10)
  {
    if (v8 + 1 == v7) {
      unint64_t v11 = 0;
    }
    else {
      unint64_t v11 = v8 + 1;
    }
    do
    {
      if (*(void *)(v9 + 48) == v8) {
        *(void *)(v9 + 48) = v11;
      }
      v9 += 56;
    }
    while (v9 != v10);
  }
  sub_10158E454(a1, a3);
}

void sub_10158E808(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  unint64_t v7 = *(void **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      unint64_t v13 = &v7[9 * a2];
      do
      {
        v7[8] = 0;
        *((_OWORD *)v7 + 2) = 0uLL;
        *((_OWORD *)v7 + 3) = 0uLL;
        *(_OWORD *)unint64_t v7 = 0uLL;
        *((_OWORD *)v7 + 1) = 0uLL;
        *((_WORD *)v7 + 30) = 257;
        v7 += 9;
      }
      while (v7 != v13);
      unint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x38E38E38E38E38ELL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x1C71C71C71C71C7) {
      unint64_t v11 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)sub_10021D4B8(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v14 = &v12[72 * v8];
    uint64_t v15 = &v14[72 * a2];
    long long v16 = v14;
    do
    {
      *((void *)v16 + 8) = 0;
      *((_OWORD *)v16 + 2) = 0uLL;
      *((_OWORD *)v16 + 3) = 0uLL;
      *(_OWORD *)long long v16 = 0uLL;
      *((_OWORD *)v16 + 1) = 0uLL;
      *((_WORD *)v16 + 30) = 257;
      v16 += 72;
    }
    while (v16 != v15);
    long long v17 = &v12[72 * v11];
    unint64_t v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        long long v20 = *(_OWORD *)(v18 - 56);
        long long v21 = *(_OWORD *)(v18 - 40);
        long long v22 = *(_OWORD *)(v18 - 24);
        *((_WORD *)v14 - 4) = *((_WORD *)v18 - 4);
        *(_OWORD *)(v14 - 24) = v22;
        *(_OWORD *)(v14 - 40) = v21;
        *(_OWORD *)(v14 - 56) = v20;
        v14 -= 72;
        v18 -= 72;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t sub_10158E9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10158EA5C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10158ECBC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_10158ECC8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v19 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10017EA6C(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v15 = v10;
  long long v16 = &v10[56 * v4];
  uint64_t v17 = (uint64_t)v16;
  long long v18 = &v10[56 * v9];
  sub_10158E9C4((uint64_t)v16, a2);
  uint64_t v11 = (uint64_t)v16;
  long long v12 = *(_OWORD *)(a2 + 32);
  *((void *)v16 + 6) = *(void *)(a2 + 48);
  *(_OWORD *)(v11 + 32) = v12;
  v17 += 56;
  sub_10158EE00(a1, &v15);
  uint64_t v13 = a1[1];
  sub_10158EF34((uint64_t)&v15);
  return v13;
}

void sub_10158EDEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10158EF34((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10158EE00(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v5 == *a1)
  {
    uint64_t result = a2[1];
  }
  else
  {
    do
    {
      uint64_t result = sub_10158EEB4(v6 - 56, v5 - 56);
      long long v8 = *(_OWORD *)(v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v5 - 8);
      *(_OWORD *)(v6 - 24) = v8;
      v5 -= 56;
      uint64_t v6 = result;
    }
    while (v5 != v4);
  }
  a2[1] = result;
  uint64_t v9 = *a1;
  *a1 = result;
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10158EEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_10158EF34(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_10100BFD0((void *)(i - 56));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10158F034(id a1)
{
  qword_102488E58 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSwimNotifierSilo"];
}

uint64_t sub_10158F0F4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101591120;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102488E78 != -1) {
    dispatch_once(&qword_102488E78, block);
  }
  return qword_10248D830;
}

void sub_10158F358(id a1)
{
  sub_100103240();
  if (sub_10016CCBC())
  {
    uint64_t v1 = sub_1000D5BCC();
    if (sub_100695D60(v1))
    {
      uint64_t v2 = sub_1000D5BCC();
      if (sub_101290CD0(v2))
      {
        sub_100103240();
        if (sub_10010145C())
        {
          if ((sub_1000A16E8() & 0x40000000) != 0) {
            byte_102488E68 = 1;
          }
        }
      }
    }
  }
}

void sub_10158F4F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t sub_10158F520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_10041C868(a1 + 168, a2, (uint64_t)a3);
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  while (v5 != v6)
  {
    *(_DWORD *)(v5 + 104) -= *(_DWORD *)(v5 + 144);
    v5 += 152;
  }
  return result;
}

uint64_t sub_10158F7BC(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  sub_10041C8B8(a1 + 168, a2, (uint64_t)&v8);
  uint64_t v4 = v8;
  if (v8 == 100)
  {
    sub_100B0405C((uint64_t *)__p, (unsigned __int8 *)v10);
    long long v5 = v10[3];
    *(_OWORD *)(a3 + 32) = v10[2];
    *(_OWORD *)(a3 + 48) = v5;
    *(_OWORD *)(a3 + 64) = v10[4];
    *(void *)(a3 + 80) = v11;
    long long v6 = v10[1];
    *(_OWORD *)a3 = v10[0];
    *(_OWORD *)(a3 + 16) = v6;
    uint64_t v4 = v8;
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v4;
}

void sub_10158F870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10158F920(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_1015905F4(a1, "CLSwimNotifier", a2);
  *(void *)uint64_t v3 = off_10232EAC0;
  *(void *)(v3 + 112) = 0;
  *(unsigned char *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(void *)(v3 + 160) = 0;
  sub_100419F84(v3 + 168);
  *(_OWORD *)(a1 + 2368) = 0u;
  *(_OWORD *)(a1 + 2352) = 0u;
  *(void *)(a1 + 2392) = 0;
  *(void *)(a1 + 2408) = 0;
  *(void *)(a1 + 2400) = 0;
  *(void *)(a1 + 2413) = 0;
  *(void *)(a1 + 2424) = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 2432) = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLMotionStateMediator" forClient:@"CLSwimNotifier"];
  sub_1006A564C();
}

void sub_101590394(_Unwind_Exception *a1)
{
  uint64_t v6 = v1[301];
  v1[301] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v1[300];
  v1[300] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  unsigned int v8 = v1 + 294;
  uint64_t v9 = *v4;
  uint64_t *v4 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *v8;
  uint64_t *v8 = 0;
  if (v10)
  {
    *(void *)(v10 + 560) = off_1022C0070;
    operator delete();
  }
  sub_10041A02C(v2);
  uint64_t v11 = v1[20];
  v1[20] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v1[17];
  v1[17] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *v3;
  *uint64_t v3 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v1[14];
  v1[14] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  sub_10159109C((uint64_t)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015905F4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10232EEA8;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_101590684(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015906A0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232EC18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232EC18);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101593CFC(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10159085C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10159087C(uint64_t a1, _DWORD *a2, void *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232EC18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232EC18);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10159412C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101590A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101590A58(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232EC18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onNataliemetryUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232EC18);
    }
    unsigned int v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2082;
      long long v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onNataliemetryUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  if (*a2 == 2)
  {
    uint64_t v9 = *(void *)(a4 + 160);
    if (v9)
    {
      uint64_t v10 = (_OWORD *)(v9 + 165992);
      long long v11 = *a3;
      long long v12 = a3[1];
      long long v13 = a3[2];
      *(_OWORD *)((char *)v10 + 44) = *(long long *)((char *)a3 + 44);
      v10[1] = v12;
      v10[2] = v13;
      *uint64_t v10 = v11;
    }
  }
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_101590C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101590C54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = operator new(0x18uLL);
  long long v5 = v3 + 3;
  uint64_t v6 = (char *)(v3 + 3);
  *uint64_t v3 = v2;
  v3[1] = 0x7FEFFFFFFFFFFFFFLL;
  *((unsigned char *)v3 + 16) = 0;
  std::string __p = v3;
  sub_10041DA20(v1 + 168, &__p);
  if (__p)
  {
    long long v5 = __p;
    operator delete(__p);
  }
}

void sub_101590CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101590CE4(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232EC18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232EC18);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10159418C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101590EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101590EC0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232EC18);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unsigned int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSwimNotifier::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232EC18);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSwimNotifier::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1015944C4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10159107C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10159109C(uint64_t a1)
{
  *(void *)a1 = off_10232EEA8;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101591120()
{
}

void sub_10159116C()
{
}

uint64_t sub_101591190(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101591220;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102488E88 != -1) {
    dispatch_once(&qword_102488E88, block);
  }
  return byte_102488E80;
}

id sub_101591220(uint64_t a1)
{
  id result = [[objc_msgSend(*(id *)(a1 + 32), "vendor") isServiceEnabled:@"CLSwimNotifier"];
  byte_102488E80 = (char)result;
  return result;
}

uint64_t sub_101591250(uint64_t a1)
{
  *(void *)a1 = off_10232EAC0;

  *(void *)(a1 + 2424) = 0;
  [*(id *)(a1 + 2432) removeClient:CLISP_ME_TOKEN prepareSessionEndForSessionType:19];

  *(void *)(a1 + 2432) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v2 = *(void *)(a1 + 2408);
  *(void *)(a1 + 2408) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 2400);
  *(void *)(a1 + 2400) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2392);
  *(void *)(a1 + 2392) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 2352);
  *(void *)(a1 + 2352) = 0;
  if (v5)
  {
    *(void *)(v5 + 560) = off_1022C0070;
    operator delete();
  }
  sub_10041A02C(a1 + 168);
  uint64_t v6 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }

  return sub_10159109C(a1);
}

void sub_101591498(uint64_t a1)
{
  sub_101591250(a1);

  operator delete();
}

void sub_1015914D0(uint64_t a1)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_10232EC38);
  }
  uint64_t v2 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSwimNotifier is shutting down.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLSwimNotifier::shutdown()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_10159177C(a1);
  uint64_t v3 = *(void *)(a1 + 2392);
  *(void *)(a1 + 2392) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 2400);
  *(void *)(a1 + 2400) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 2408);
  *(void *)(a1 + 2408) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 108) = 1;
}

void sub_10159177C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2392);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:5];
  }
  if (*(unsigned char *)(a1 + 2420))
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v3 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[SwimOdom] Unregistering for odometer updates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::turnOffSwimTrackingIfNecessary()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    [*(id *)(*(void *)(a1 + 112) + 16) unregister:*(void *)(*(void *)(a1 + 112) + 8) forNotification:2];
    [*(id *)(*(void *)(a1 + 112) + 16) unregister:*(void *)(*(void *)(a1 + 112) + 8) forNotification:4];
    *(unsigned char *)(a1 + 2420) = 0;
  }
  if (*(void *)(a1 + 136))
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v4 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[LOI] Unregistering for location updates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::turnOffSwimTrackingIfNecessary()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0];
  }
  if (*(void *)(a1 + 160))
  {
    sub_1015930B4((void *)a1);
    uint64_t v5 = *(void *)(a1 + 160);
    *(void *)(a1 + 160) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v6 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Swim Controller released", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::turnOffSwimTrackingIfNecessary()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void *sub_101591BF8@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_101591C74(uint64_t a1, int *a2)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_10232EC38);
  }
  uint64_t v4 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
  {
    v12[0] = *a2;
    int v5 = v12[0];
    int v6 = sub_1001072EC(a1, v12, 1);
    *(_DWORD *)buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Added client for %d, count %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    int v8 = *a2;
    int v11 = v8;
    int v9 = sub_1001072EC(a1, &v11, 1);
    v12[0] = 67109376;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSwimNotifier::registerForNotificationInternal(const CLSwimNotifier_Type::Notification &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return 1;
}

id sub_101591E7C(uint64_t a1, uint64_t a2)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_10232EC38);
  }
  uint64_t v4 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[LOI] Calling fetchLocationsOfInterestWithinDistance", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    __int16 v9 = 0;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::getLOIsForLocation(CLLocation *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  int v5 = *(void **)(a1 + 144);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _OWORD v8[2] = sub_101592074;
  void v8[3] = &unk_1022C1658;
  v8[4] = a1;
  return [v5 fetchLocationsOfInterestWithinDistance:a2 ofLocation:v8 withReply:200.0];
}

id sub_101592074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1015920EC;
  void v6[3] = &unk_1022D6400;
  v6[5] = a2;
  v6[6] = v3;
  v6[4] = a3;
  return [v4 async:v6];
}

void sub_1015920EC(void *a1)
{
  if (a1[4])
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v2 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = a1[4];
      *(_DWORD *)buf = 138412290;
      uint64_t v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Error retrieving the RT LOIs. %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      uint64_t v4 = a1[4];
      int v19 = 138412290;
      uint64_t v20 = v4;
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSwimNotifier::getLOIsForLocation(CLLocation *)_block_invoke", "%s\n");
LABEL_10:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else if (a1[5])
  {
    uint64_t v6 = a1[6];
    id v7 = +[NSMutableArray array];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    int v8 = (void *)a1[5];
    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          [v7 addObject:[*(id *)(*((void *)&v14 + 1) + 8 * i) identifier]];
        }
        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v10);
    }
    sub_10041BAAC(v6 + 168, v7);
  }
  else
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    __int16 v13 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[LOI] Found nil locationsOfInterest", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      LOWORD(v19) = 0;
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::getLOIsForLocation(CLLocation *)_block_invoke", "%s\n");
      goto LABEL_10;
    }
  }
}

unsigned char *sub_10159248C(unsigned char *result)
{
  if (result[120])
  {
    uint64_t v1 = result;
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v2 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[LOI] Registering for location updates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::requestLocation()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return [*(id *)(*((void *)v1 + 17) + 16) register:*(void *)(*((void *)v1 + 17) + 8) forNotification:0 registrationInfo:0];
  }
  return result;
}

unsigned char *sub_10159263C(unsigned char *result, uint64_t a2)
{
  uint64_t v3 = result;
  if (!*((void *)result + 20))
  {
    if (result[2416]) {
      operator new();
    }
    if (result[2417])
    {
      if (a2 != 1) {
        operator new();
      }
      operator new();
    }
    operator new();
  }
  uint64_t v4 = *((void *)result + 299);
  if (v4) {
    id result = [*(id *)(v4 + 16) register:*(void *)(v4 + 8) forNotification:5 registrationInfo:0];
  }
  if (a2 != 1 || v3[2420])
  {
    if (!a2) {
      return sub_10159248C(v3);
    }
  }
  else
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    int v5 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[SwimOdom] Registering for odometer updates", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::turnOnSwimTrackingIfNecessary(CMSwimWorkoutLocation)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    [*(id *)(*((void *)v3 + 14) + 16) register:*(void *)(*((void *)v3 + 14) + 8) forNotification:2 registrationInfo:0];
    id result = [*(id *)(*((void *)v3 + 14) + 16) register:*(void *)(*((void *)v3 + 14) + 8) forNotification:4 registrationInfo:0];
    v3[2420] = 1;
  }
  return result;
}

void sub_101592ABC()
{
}

void sub_101592B24(void *a1)
{
  uint64_t v2 = a1[294];
  if (!v2) {
    operator new();
  }
  sub_10159335C((uint64_t)a1, (uint64_t)buf);
  sub_1012F6D6C(v2, (uint64_t)buf);
  if (!a1[295]) {
    operator new();
  }
  if (!a1[296]) {
    operator new();
  }
  if (!a1[297]) {
    operator new();
  }
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_10232EC38);
  }
  uint64_t v3 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "swim fusion setup", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::setupSensorFusion()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_101592E5C()
{
}

uint64_t sub_101592EAC(uint64_t a1, int *a2)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_10232EC38);
  }
  uint64_t v4 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
  {
    v12[0] = *a2;
    int v5 = v12[0];
    int v6 = sub_1001072EC(a1, v12, 1);
    *(_DWORD *)buf = 67109376;
    int v16 = v5;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Removed client for %d, count %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    int v8 = *a2;
    int v11 = v8;
    int v9 = sub_1001072EC(a1, &v11, 1);
    v12[0] = 67109376;
    v12[1] = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    id v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLSwimNotifier::unregisterForNotificationInternal(const CLSwimNotifier_Type::Notification &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return 1;
}

void sub_1015930B4(void *a1)
{
  if (a1[295])
  {
    uint64_t v2 = sub_100A08A84();
    sub_1009D26C4(v2, 0, a1[295]);
    uint64_t v3 = a1[295];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    a1[295] = 0;
  }
  if (a1[296])
  {
    uint64_t v4 = sub_1009EC0A8();
    sub_1009D26C4(v4, 0, a1[296]);
    uint64_t v5 = a1[296];
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    a1[296] = 0;
  }
  if (a1[297])
  {
    uint64_t v6 = sub_100A08A84();
    sub_1009D26C4(v6, 1, a1[297]);
    uint64_t v7 = a1[297];
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    a1[297] = 0;
  }
  uint64_t v8 = a1[294];
  a1[294] = 0;
  if (v8)
  {
    *(void *)(v8 + 560) = off_1022C0070;
    operator delete();
  }
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_10232EC38);
  }
  int v9 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "swim fusion teardown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    id v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::teardownSensorFusion()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_10159335C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  if ([[[objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLGyroCalibrationDatabase") syncgetBiasFit:&v5] == 1; {
  else
  }
    BOOL v3 = 0;
  if (v3)
  {
    if ((CFAbsoluteTimeGetCurrent() - v6) / 3600.0 > 0.0 && (CFAbsoluteTimeGetCurrent() - v6) / 3600.0 >= 255.0)
    {
      LOBYTE(v4) = -1;
    }
    else if ((CFAbsoluteTimeGetCurrent() - v6) / 3600.0 <= 0.0)
    {
      LOBYTE(v4) = 0;
    }
    else
    {
      int v4 = (int)((CFAbsoluteTimeGetCurrent() - v6) / 3600.0);
    }
    *(_OWORD *)a2 = v7;
    *(void *)(a2 + 16) = v8;
    *(unsigned char *)(a2 + 24) = v4;
  }
}

uint64_t sub_101593480(uint64_t a1, uint64_t a2)
{
  return sub_1015935D8(a2, a1);
}

float32x2_t *sub_101593490(uint64_t a1, uint64_t a2)
{
  return sub_101593B00(a2, a1);
}

void *sub_1015934A0(uint64_t a1, uint64_t a2)
{
  return sub_101593CC8(a2, a1);
}

uint64_t sub_1015934B0(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[20];
  if (!v3) {
    sub_101ABDB84();
  }
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t result = sub_10096AA78(v3, a2, (uint64_t)&v6);
  if (result)
  {
    v14[4] = v10;
    v14[5] = v11;
    uint64_t v15 = *(void *)&v12[0];
    v14[0] = v6;
    v14[1] = v7;
    int v14[2] = v8;
    v14[3] = v9;
    long long v18 = *(_OWORD *)((char *)&v12[1] + 12);
    long long v17 = *(_OWORD *)((char *)v12 + 12);
    uint64_t v20 = v13;
    int v19 = HIDWORD(v12[2]);
    int v16 = DWORD2(v12[0]) - v13;
    int v5 = 0;
    return (*(uint64_t (**)(void *, int *, _OWORD *, void, uint64_t, void))(*a1 + 152))(a1, &v5, v14, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_1015935D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 2352);
  if (v3)
  {
    uint64_t result = sub_1012F6B48(v3, (float32x2_t *)(a2 + 8), (double *)a2);
    if (result)
    {
      uint64_t v6 = *(void *)(a1 + 2352);
      int v7 = *(_DWORD *)(v6 + 100);
      uint64_t v15 = *(void *)(v6 + 92);
      int v16 = v7;
      sub_100CF6248(v6);
      int v17 = v8;
      int v18 = v9;
      int v19 = v10;
      float v20 = sub_100B9BC00((float *)(*(void *)(a1 + 2352) + 16));
      int v21 = v11;
      int v22 = v12;
      long long v23 = *(_OWORD *)(*(void *)(a1 + 2352) + 16);
      double v24 = *(double *)a2;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      if (*(unsigned char *)(a1 + 2418)) {
        uint64_t v13 = sub_10159369C((uint64_t *)a2);
      }
      if (*(unsigned char *)(a1 + 2419)) {
        sub_101593830(v13, (uint64_t)&v15);
      }
      return sub_1015934B0((void *)a1, (uint64_t)&v15);
    }
  }
  else
  {
    int v14 = (uint64_t *)sub_101ABDCF0();
    return sub_10159369C(v14);
  }
  return result;
}

uint64_t sub_10159369C(uint64_t *a1)
{
  int v16 = off_1022E6770;
  int v20 = *((_DWORD *)a1 + 4);
  uint64_t v2 = a1[1];
  uint64_t v18 = *a1;
  uint64_t v19 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  __int16 v21 = *((_WORD *)a1 + 10);
  char v22 = *((unsigned char *)a1 + 22);
  uint64_t v3 = sub_101282D9C();
  sub_10128431C(v3, (uint64_t)&v16);
  sub_10170140C(v13);
  sub_101726AF8((uint64_t)v13);
  v15 |= 1u;
  *(CFAbsoluteTime *)&v13[77] = Current;
  uint64_t v4 = v14;
  uint64_t v5 = *a1;
  *(unsigned char *)(v14 + 36) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = v14;
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(unsigned char *)(v14 + 36) |= 4u;
  *(_DWORD *)(v6 + 20) = v5;
  uint64_t v7 = v14;
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(unsigned char *)(v14 + 36) |= 8u;
  *(_DWORD *)(v7 + 24) = v5;
  uint64_t v8 = v14;
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(unsigned char *)(v14 + 36) |= 0x10u;
  *(_DWORD *)(v8 + 28) = v5;
  uint64_t v9 = v14;
  int v10 = *((unsigned __int16 *)a1 + 10);
  *(unsigned char *)(v14 + 36) |= 2u;
  *(_DWORD *)(v9 + 16) = v10;
  uint64_t v11 = v14;
  LOBYTE(v10) = *((unsigned char *)a1 + 22);
  *(unsigned char *)(v14 + 36) |= 0x20u;
  *(unsigned char *)(v11 + 32) = v10;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_10232EC58);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v13);
  }
  return sub_101706914((PB::Base *)v13);
}

void sub_101593818(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101593830(uint64_t a1, uint64_t a2)
{
  unint64_t v33 = off_1022E6DA0;
  uint64_t v35 = *(void *)(a2 + 56);
  float64x2_t v3 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 44));
  float64x2_t v36 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 36));
  float64x2_t v37 = v3;
  long long v4 = *(_OWORD *)(a2 + 16);
  *((void *)&v4 + 1) = *(void *)a2;
  long long v39 = v4;
  LODWORD(v3.f64[0]) = *(_DWORD *)(a2 + 8);
  int v38 = *(_DWORD *)(a2 + 12);
  int v40 = LODWORD(v3.f64[0]);
  uint64_t v42 = 0;
  int v41 = 0;
  int v43 = -16776961;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = sub_101282D9C();
  sub_10128431C(v5, (uint64_t)&v33);
  sub_10170140C(v30);
  sub_101727488((uint64_t)v30);
  v32 |= 1u;
  *(CFAbsoluteTime *)&v30[77] = Current;
  uint64_t v6 = v31;
  uint64_t v7 = *(void *)(a2 + 56);
  *(_DWORD *)(v31 + 96) |= 0x10u;
  *(void *)(v6 + 40) = v7;
  uint64_t v8 = v31;
  double v9 = *(float *)(a2 + 36);
  *(_DWORD *)(v31 + 96) |= 2u;
  *(double *)(v8 + 16) = v9;
  uint64_t v10 = v31;
  double v11 = *(float *)(a2 + 40);
  *(_DWORD *)(v31 + 96) |= 4u;
  *(double *)(v10 + 24) = v11;
  uint64_t v12 = v31;
  double v13 = *(float *)(a2 + 44);
  *(_DWORD *)(v31 + 96) |= 8u;
  *(double *)(v12 + 32) = v13;
  uint64_t v14 = v31;
  double v15 = *(float *)(a2 + 48);
  *(_DWORD *)(v31 + 96) |= 1u;
  *(double *)(v14 + 8) = v15;
  uint64_t v16 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(v31 + 96) |= 0x1000u;
  *(_DWORD *)(v16 + 76) = LODWORD(v15);
  uint64_t v17 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v31 + 96) |= 0x2000u;
  *(_DWORD *)(v17 + 80) = LODWORD(v15);
  uint64_t v18 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v31 + 96) |= 0x4000u;
  *(_DWORD *)(v18 + 84) = LODWORD(v15);
  uint64_t v19 = v31;
  LODWORD(v15) = *(_DWORD *)a2;
  *(_DWORD *)(v31 + 96) |= 0x200u;
  *(_DWORD *)(v19 + 64) = LODWORD(v15);
  uint64_t v20 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(v31 + 96) |= 0x400u;
  *(_DWORD *)(v20 + 68) = LODWORD(v15);
  uint64_t v21 = v31;
  LODWORD(v15) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(v31 + 96) |= 0x800u;
  *(_DWORD *)(v21 + 72) = LODWORD(v15);
  uint64_t v22 = v31;
  *(_DWORD *)(v31 + 96) |= 0x40u;
  *(_DWORD *)(v22 + 52) = 0;
  uint64_t v23 = v31;
  *(_DWORD *)(v31 + 96) |= 0x80u;
  *(_DWORD *)(v23 + 56) = 0;
  uint64_t v24 = v31;
  *(_DWORD *)(v31 + 96) |= 0x100u;
  *(_DWORD *)(v24 + 60) = 0;
  uint64_t v25 = v31;
  *(_DWORD *)(v31 + 96) |= 0x20u;
  *(_DWORD *)(v25 + 48) = 255;
  uint64_t v26 = v31;
  *(_DWORD *)(v31 + 96) |= 0x10000u;
  *(unsigned char *)(v26 + 92) = 0;
  uint64_t v27 = v31;
  *(_DWORD *)(v31 + 96) |= 0x20000u;
  *(unsigned char *)(v27 + 93) = 0;
  uint64_t v28 = v31;
  *(_DWORD *)(v31 + 96) |= 0x8000u;
  *(_DWORD *)(v28 + 88) = 255;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_10232EC58);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v30);
  }
  return sub_101706914((PB::Base *)v30);
}

void sub_101593AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float32x2_t *sub_101593B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 2352);
  if (v3)
  {
    if (*(unsigned char *)(a1 + 2418))
    {
      sub_101593B5C((uint64_t *)a2);
      uint64_t v3 = *(void *)(a1 + 2352);
    }
    return sub_1012F6C80(v3, (float32x2_t *)(a2 + 8), (double *)a2);
  }
  else
  {
    uint64_t v6 = (uint64_t *)sub_101ABDE5C();
    return (float32x2_t *)sub_101593B5C(v6);
  }
}

uint64_t sub_101593B5C(uint64_t *a1)
{
  uint64_t v14 = off_1022E7668;
  int v18 = *((_DWORD *)a1 + 4);
  uint64_t v2 = a1[1];
  uint64_t v16 = *a1;
  uint64_t v17 = v2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = sub_101282D9C();
  sub_10128431C(v3, (uint64_t)&v14);
  sub_10170140C(v10);
  sub_1017269D8((uint64_t)v10);
  v13 |= 1u;
  CFAbsoluteTime v12 = Current;
  sub_1016B604C(v11);
  uint64_t v4 = *(void *)(v11 + 8);
  uint64_t v5 = *a1;
  *(unsigned char *)(v4 + 32) |= 1u;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(void *)(v11 + 8);
  LODWORD(v5) = *((_DWORD *)a1 + 2);
  *(unsigned char *)(v6 + 32) |= 4u;
  *(_DWORD *)(v6 + 20) = v5;
  uint64_t v7 = *(void *)(v11 + 8);
  LODWORD(v5) = *((_DWORD *)a1 + 3);
  *(unsigned char *)(v7 + 32) |= 8u;
  *(_DWORD *)(v7 + 24) = v5;
  uint64_t v8 = *(void *)(v11 + 8);
  LODWORD(v5) = *((_DWORD *)a1 + 4);
  *(unsigned char *)(v8 + 32) |= 0x10u;
  *(_DWORD *)(v8 + 28) = v5;
  if (qword_10248AF88 != -1) {
    dispatch_once(&qword_10248AF88, &stru_10232EC58);
  }
  if (qword_10248AF90) {
    sub_1019E5150(qword_10248AF90, (uint64_t)v10);
  }
  return sub_101706914((PB::Base *)v10);
}

void sub_101593CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void *sub_101593CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 2352);
  if (v2)
  {
    float v3 = *(float *)(a2 + 8);
    return sub_1012F6D34(v2, v3);
  }
  else
  {
    uint64_t v5 = sub_101ABDFC8();
    return (void *)sub_101593CFC(v5);
  }
}

void sub_101593CFC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 5)
  {
    uint64_t v12 = *(void *)(a1 + 160);
    if (v12)
    {
      sub_10096A850(v12, a4);
    }
  }
  else if (*a3 == 2)
  {
    uint64_t v6 = *(void *)(a4 + 112);
    if (v6 == 19 && *(void *)(a4 + 16) == 1)
    {
      sub_101593FE0(a1, *(double *)(a4 + 8));
      uint64_t v6 = *(void *)(a4 + 112);
    }
    if (v6 == 19) {
      sub_10159263C((unsigned char *)a1, *(void *)(a4 + 128));
    }
    uint64_t v8 = *(void *)(a1 + 160);
    if (v8)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      if (sub_10096CA38(v8, a4, (uint64_t)buf, Current))
      {
        uint64_t v10 = *(void *)(a1 + 2352);
        unsigned int v19 = vcvtas_u32_f32(*(float *)(v10 + 552));
        uint64_t v11 = sub_100CF59A8((uint64_t)v20);
        *(_OWORD *)(v10 + 528) = v20[0];
        *(_OWORD *)(v10 + 540) = *(_OWORD *)((char *)v20 + 12);
        *(void *)&v20[0] = off_1022F8E20;
        sub_100DE73FC(v11, (uint64_t *)buf);
      }
    }
    if (!sub_10041DA28(a1 + 168)) {
      sub_10159177C(a1);
    }
  }
  else
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v14 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_FAULT))
    {
      int v15 = *a3;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Unexpected CLMotionStateMediator notification type %d received in CLSwimNotifier", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      int v16 = *a3;
      LODWORD(v20[0]) = 67109120;
      DWORD1(v20[0]) = v16;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLSwimNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

uint64_t sub_101593FE0(uint64_t result, double a2)
{
  uint64_t v2 = *(void *)(result + 160);
  if (v2)
  {
    uint64_t v4 = result;
    double Current = CFAbsoluteTimeGetCurrent();
    sub_10096CB48((uint64_t *)v2, 1, *(double *)(v2 + 712), Current, a2);
    uint64_t result = sub_10096BBA4(v2, (uint64_t)v7);
    if (result)
    {
      v14[3] = v7[3];
      v14[4] = v7[4];
      v14[5] = v7[5];
      v14[0] = v7[0];
      uint64_t v15 = v8;
      v14[1] = v7[1];
      int v14[2] = v7[2];
      long long v18 = v11;
      long long v17 = v10;
      uint64_t v20 = v13;
      int v19 = v12;
      int v16 = v9 - v13;
      int v6 = 0;
      return (*(uint64_t (**)(uint64_t, int *, _OWORD *, void, uint64_t, void))(*(void *)v4 + 152))(v4, &v6, v14, 0, 0xFFFFFFFFLL, 0);
    }
  }
  return result;
}

void sub_10159412C(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  if (*a3)
  {
    if ((*a3 - 1) < 2) {
      sub_101ABE134();
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 160);
    if (v6) {
      sub_101220734(v6 + 114712, a4);
    }
    *(void *)(a1 + 2384) = *a4;
  }
}

void sub_10159418C(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  if (*a3 == 4 || *a3 == 2)
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v8 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
    {
      int v9 = *a3;
      *(_DWORD *)buf = 67109120;
      int v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[SwimOdom] Received an odometer update of type: %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t v10 = *(void *)(a1 + 160);
    if (v10) {
      sub_10096BC20(v10, a4);
    }
  }
  else
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    long long v11 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
    {
      int v12 = *a3;
      *(_DWORD *)buf = 67109120;
      int v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[SwimOdom] Received unhandled notification, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_1015944C4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3)
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    uint64_t v5 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
    {
      int v6 = *a3;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)uint64_t v42 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Received unhandled notification, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      int v21 = *a3;
      int v31 = 67109120;
      LODWORD(v32) = v21;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 120))
  {
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_10232EC38);
    }
    int v9 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)uint64_t v42 = 0;
      *(_WORD *)&v42[4] = 2082;
      *(void *)&v42[6] = "";
      *(_WORD *)&v42[14] = 1040;
      *(_DWORD *)&v42[16] = 156;
      *(_WORD *)int v43 = 2097;
      *(void *)&v43[2] = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"[LOI] Received a location\", \"location\":%{private, location:CLClientLocation}.*P}", buf, 0x22u);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
    }
    uint64_t v10 = qword_102419008;
    if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v11 = *(void *)(a4 + 4);
      uint64_t v12 = *(void *)(a4 + 12);
      uint64_t v13 = *(void *)(a4 + 20);
      uint64_t v14 = *(void *)(a4 + 88);
      uint64_t v15 = *(void *)(a4 + 76);
      *(_DWORD *)buf = 134284545;
      *(void *)uint64_t v42 = v11;
      *(_WORD *)&v42[8] = 2049;
      *(void *)&v42[10] = v12;
      *(_WORD *)&v42[18] = 2048;
      *(void *)int v43 = v13;
      *(_WORD *)&v43[8] = 2048;
      uint64_t v44 = v14;
      __int16 v45 = 2048;
      uint64_t v46 = v15;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "[LOI] Received a location,lat: %{private}lf, long: %{private}lf, accuracy: %lf, lifespan: %lf, timestamp: %lf", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419000 != -1) {
        dispatch_once(&qword_102419000, &stru_10232EC38);
      }
      uint64_t v23 = *(void *)(a4 + 4);
      uint64_t v24 = *(void *)(a4 + 12);
      uint64_t v25 = *(void *)(a4 + 20);
      uint64_t v26 = *(void *)(a4 + 88);
      uint64_t v27 = *(void *)(a4 + 76);
      int v31 = 134284545;
      uint64_t v32 = v23;
      __int16 v33 = 2049;
      uint64_t v34 = v24;
      __int16 v35 = 2048;
      uint64_t v36 = v25;
      __int16 v37 = 2048;
      uint64_t v38 = v26;
      __int16 v39 = 2048;
      uint64_t v40 = v27;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSwimNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    if (CFAbsoluteTimeGetCurrent() < *(double *)(a4 + 76) + 60.0)
    {
      id v16 = objc_alloc((Class)CLLocation);
      long long v17 = *(_OWORD *)(a4 + 112);
      v29[6] = *(_OWORD *)(a4 + 96);
      v29[7] = v17;
      v30[0] = *(_OWORD *)(a4 + 128);
      *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(a4 + 140);
      long long v18 = *(_OWORD *)(a4 + 48);
      _OWORD v29[2] = *(_OWORD *)(a4 + 32);
      v29[3] = v18;
      long long v19 = *(_OWORD *)(a4 + 80);
      v29[4] = *(_OWORD *)(a4 + 64);
      v29[5] = v19;
      long long v20 = *(_OWORD *)(a4 + 16);
      v29[0] = *(_OWORD *)a4;
      v29[1] = v20;
      sub_101591E7C(a1, (uint64_t)[v16 initWithClientLocation:v29]);
      [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:0];
    }
  }
}

void sub_101594980()
{
}

void sub_101594A3C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_101594A78(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_10232F048;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_101594B5C(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232EC18);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        uint64_t v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v11 = (void *)*v11;
        }
        *(_DWORD *)buf = 136446466;
        long long v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10232EC18);
        }
        uint64_t v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_101594DEC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101594EA0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_101594EE8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_101594F30(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_101594F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102479898);
}

uint64_t sub_101594FA4(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          long long v29 = (uint64_t *)v25;
        }
        else {
          long long v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        uint64_t v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101597F0C();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102479899;
        int v39 = v17;
        *(void *)&buf[0] = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        int v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)&buf[0] = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)&buf[0] = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232EC18);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(void *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232EC18);
    }
    __int16 v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    uint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_101595464(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232EC18);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232EC18);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1015956E8(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232EC18);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232EC18);
                }
                long long v29 = a1 + 8;
                if (a1[31] < 0) {
                  long long v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                uint64_t v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101595ABC(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v11;
  *(_OWORD *)(a3 + 16) = v12;
  long long v13 = *(_OWORD *)(v11 + 32);
  long long v14 = *(_OWORD *)(v11 + 48);
  long long v15 = *(_OWORD *)(v11 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v11 + 64);
  *(_OWORD *)(a3 + 80) = v15;
  *(_OWORD *)(a3 + 32) = v13;
  *(_OWORD *)(a3 + 48) = v14;
  long long v16 = *(_OWORD *)(v11 + 96);
  long long v17 = *(_OWORD *)(v11 + 112);
  long long v18 = *(_OWORD *)(v11 + 128);
  *(void *)(a3 + 144) = *(void *)(v11 + 144);
  *(_OWORD *)(a3 + 112) = v17;
  *(_OWORD *)(a3 + 128) = v18;
  *(_OWORD *)(a3 + 96) = v16;
  return 1;
}

uint64_t sub_101595B44(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0xB0uLL);
  long long v7 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v6 + 120) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v6 + 136) = v7;
  *(_OWORD *)(v6 + 152) = *(_OWORD *)(a3 + 128);
  long long v8 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v6 + 56) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v6 + 72) = v8;
  long long v9 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v6 + 88) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v6 + 104) = v9;
  long long v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_10232EFD8;
  *((void *)v6 + 21) = *(void *)(a3 + 144);
  *(_OWORD *)(v6 + 40) = v10;
  int v14 = *a2;
  long long v15 = &v14;
  uint64_t v11 = sub_10044715C((uint64_t **)(a1 + 56), &v14, (uint64_t)&unk_101D0B290, &v15);
  long long v12 = (std::__shared_weak_count *)v11[9];
  v11[8] = (uint64_t *)(v6 + 24);
  v11[9] = (uint64_t *)v6;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  return 1;
}

void sub_101595C30(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101595C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_101595CDC(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232EC18);
  }
  long long v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    uint64_t v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)buf = 68289794;
    int v26 = 0;
    __int16 v27 = 2082;
    *(void *)BOOL v28 = "";
    *(_WORD *)&v28[8] = 2082;
    *(void *)&v28[10] = "activity";
    __int16 v29 = 2082;
    char v30 = v10;
    __int16 v31 = 2050;
    int v32 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  int v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      long long v17 = (uint64_t *)v12;
    }
    else {
      long long v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      int v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    char v33 = v34;
    memset(v34, 0, sizeof(v34));
    uint64_t v35 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v33);
    int v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v32) {
      sub_1000DB0A0(v32);
    }
    sub_1000F5BB0((uint64_t)&v27, *(void **)&v28[6]);
    if (v35) {
      sub_1000DB0A0(v35);
    }
    sub_1000F5BB0((uint64_t)&v33, v34[0]);
  }
  if (a4)
  {
    long long v18 = (char *)operator new(0xB0uLL);
    long long v19 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)a3;
    *(_OWORD *)(v18 + 40) = v19;
    long long v20 = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v18 + 104) = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v18 + 88) = v20;
    long long v21 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v18 + 72) = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v18 + 56) = v21;
    *(_OWORD *)(v18 + 152) = *(_OWORD *)(a3 + 128);
    long long v22 = *(_OWORD *)(a3 + 96);
    *(_OWORD *)(v18 + 136) = *(_OWORD *)(a3 + 112);
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)long long v18 = off_10232EFD8;
    *((void *)v18 + 21) = *(void *)(a3 + 144);
    *(_OWORD *)(v18 + 120) = v22;
    int v23 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v23) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v23 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v23) {
LABEL_27:
  }
    sub_1000DB0A0(v23);
LABEL_28:
  if (v14[7]) {
    sub_10159734C();
  }
  os_activity_scope_leave(&state);
}

void sub_1015962F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101596344(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232EC18);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136315138;
      long long v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232EC18);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232EC18);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      long long v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10232EC18);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        long long v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10232EC18);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                uint64_t v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)buf = 136315650;
              long long v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232EC18);
              }
              long long v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            int v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                int v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                long long v9 = v15;
              }
              while (!v16);
            }
            long long v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1015968F4(uint64_t a1)
{
  sub_101597E9C(a1);

  operator delete();
}

void sub_10159692C(uint64_t a1, int a2, void *a3)
{
  sub_1015979A4(a3);
  if (v5)
  {
    int v6 = a2;
    (*(void (**)(void, int *, uint64_t, void))(a1 + 24))(0, &v6, v5, *(void *)(a1 + 32));
  }
}

void sub_10159697C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1015969AC(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_1015969E0(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_101596A14()
{
}

void *sub_101596A28()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_10232ECA8;
  return result;
}

void sub_101596A60(uint64_t a1, void *a2)
{
  *a2 = off_10232ECA8;
}

double sub_101596A88(uint64_t a1, double **a2)
{
  uint64_t v2 = *a2;
  double result = **a2;
  double v4 = 0.0;
  while (v2 != a2[1])
  {
    double v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_101596AB4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101596AF4()
{
}

void sub_101596B04()
{
}

void *sub_101596B18()
{
  double result = operator new(0x10uLL);
  *double result = off_10232ED28;
  return result;
}

void sub_101596B50(uint64_t a1, void *a2)
{
  *a2 = off_10232ED28;
}

double sub_101596B78(uint64_t a1, double **a2)
{
  uint64_t v2 = a2[1];
  double result = **a2;
  double v4 = 0.0;
  if (*a2 != v2)
  {
    uint64_t v5 = *a2;
    do
    {
      double v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_101596BC8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101596C08()
{
}

void sub_101596C18()
{
}

void *sub_101596C2C()
{
  double result = operator new(0x10uLL);
  *double result = off_10232EDA8;
  return result;
}

void sub_101596C64(uint64_t a1, void *a2)
{
  *a2 = off_10232EDA8;
}

BOOL sub_101596C8C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_101596C9C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101596CDC()
{
}

void sub_101596CEC()
{
}

void *sub_101596D00()
{
  double result = operator new(0x10uLL);
  *double result = off_10232EE28;
  return result;
}

void sub_101596D38(uint64_t a1, void *a2)
{
  *a2 = off_10232EE28;
}

BOOL sub_101596D60(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_101596D78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101596DB8()
{
}

void *sub_101596DC4(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_10232EF88;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  int v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_101596F4C;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  int v12[2] = sub_101596F60;
  _OWORD v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_101596F24(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101596F4C(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_101596F60(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_101596F7C(uint64_t a1)
{
  sub_101597274(a1);

  operator delete();
}

id sub_101596FB4(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x18) {
    size_t v8 = 24;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(&__dst, __src, v8);
  if (a4 >= 0x19)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10232EC78);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      unint64_t v31 = 0x8000000101E11882 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v32 = 2048;
      uint64_t v33 = 24;
      __int16 v34 = 2048;
      unint64_t v35 = a4;
      __int16 v36 = 1024;
      int v37 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10232EC78);
      }
      int v22 = 136315906;
      unint64_t v23 = 0x8000000101E11882 & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v24 = 2048;
      uint64_t v25 = 24;
      __int16 v26 = 2048;
      unint64_t v27 = a4;
      __int16 v28 = 1024;
      int v29 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Sample>::dispatchData(int, const void *, size_t) [T = CLGyro::Sample]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  int v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1015972F0;
  v16[3] = &unk_1022EE9C0;
  v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst;
  uint64_t v18 = v21;
  uint64_t v19 = v10;
  return [v13 async:v16];
}

uint64_t sub_101597274(uint64_t a1)
{
  *(void *)a1 = off_10232EF88;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_1015972F0(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[9];
    return v3(a1 + 6, v4);
  }
  return result;
}

void sub_10159734C()
{
}

void sub_101597420(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      id v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          uint64_t v12 = (uint64_t *)v4;
        }
        else {
          uint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          id v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        sub_1015979A4(a3);
        (*(void (**)(void *, int *, uint64_t, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        int v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          char v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            uint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                uint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              long long v48 = v19;
              sub_101597810(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              int v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  __int16 v32 = (uint64_t *)v27;
                }
                else {
                  __int16 v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  int v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              int v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                unint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    unint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      int v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      int v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      int v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      unint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              long long v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10232EC18);
              }
              __int16 v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                uint64_t v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                int v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10232EC18);
                }
                __int16 v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                int v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_101597810(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v14) = *(_DWORD *)(*(void *)a3 + 32);
    sub_1015979A4(a4);
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)a3 + 80;
    uint64_t v12 = (uint64_t **)(*(void *)a3 + 40);
    char v15 = (int *)(*(void *)a2 + 32);
    uint64_t v13 = sub_1000EB1B8(v12, v15, (uint64_t)&unk_101D0B290, &v15);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v14, v10, v11, v13 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v14];
    }
  }
  return result;
}

void sub_101597908(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10232EFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101597928(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10232EFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101597984(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_1015979A4(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    sub_101597A40(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      sub_101597BFC(a1);
    }
  }
}

void sub_101597A40(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2)
  {
    sub_101597DE4((uint64_t)&v7, a1);
    return;
  }
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10232F018);
    }
    uint64_t v3 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101E118F0 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
  }
  else
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10232F018);
    }
    uint64_t v6 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101E118F0 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v6;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
      goto LABEL_12;
    }
  }
}

id sub_101597BFC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232F018);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101E118F0 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10232F018);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101E118F0 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

void sub_101597DE4(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_1023951C8))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)152)
    {
      uint64_t v3 = (void *)sub_101ABE314();
      sub_101597E6C(v3);
      return;
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  [a2 cppObjectPtr];
}

void sub_101597E6C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_101597E9C(uint64_t a1)
{
  *(void *)a1 = off_10232F048;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_101597F0C()
{
}

uint64_t sub_101597FE0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

BOOL sub_101598000()
{
  id v2 = *(NSObject **)(v0 + 8);
  return os_signpost_enabled(v2);
}

uint64_t sub_101598018()
{
  xmmword_102488D00 = xmmword_101E0D5F0;
  *(_OWORD *)algn_102488D10 = xmmword_101E0D600;
  xmmword_102488D20 = xmmword_101E0D610;
  unk_102488D30 = xmmword_101E0D620;
  xmmword_102488D40 = xmmword_101E0D630;
  unk_102488D50 = xmmword_101E0D640;
  xmmword_102488D60 = xmmword_101E0D650;
  *(_OWORD *)algn_102488D70 = xmmword_101E0D660;
  xmmword_102488D80 = xmmword_101E0D670;
  unk_102488D90 = xmmword_101E0D680;
  xmmword_102488DA0 = xmmword_101E0D690;
  unk_102488DB0 = xmmword_101E0D6A0;
  qword_102488DC0 = (uint64_t)off_10232ECA8;
  qword_102488DD8 = (uint64_t)&qword_102488DC0;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_102488DC0, (void *)&_mh_execute_header);
  qword_102488DE0 = (uint64_t)off_10232ED28;
  qword_102488DF8 = (uint64_t)&qword_102488DE0;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_102488DE0, (void *)&_mh_execute_header);
  qword_102488E00 = (uint64_t)off_10232EDA8;
  qword_102488E18 = (uint64_t)&qword_102488E00;
  __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_102488E00, (void *)&_mh_execute_header);
  qword_102488E20 = (uint64_t)off_10232EE28;
  qword_102488E38 = (uint64_t)&qword_102488E20;
  __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_102488E20, (void *)&_mh_execute_header);
  sub_100134750(qword_102488E40, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488E40, (void *)&_mh_execute_header);
}

void sub_1015981F4(double *a1, uint64_t a2)
{
  sub_1011B90B4(a1 + 1, a2);
  double v4 = a1[2];
  double v5 = a1[3];
  uint64_t v3 = a1 + 2;
  double v6 = v4 * v4;
  double v7 = v3[2];
  double v8 = v3[3];
  double v9 = v4 * v5;
  double v10 = v4 * v7;
  double v11 = v4 * v8;
  double v12 = v5 * v5;
  double v13 = v5 * v7;
  double v14 = v5 * v8;
  double v15 = v7 * v7;
  double v16 = v7 * v8;
  double v17 = v8 * v8;
  double v18 = v9 + v9;
  v3[6] = v6 - v12 - v15 + v17;
  v3[7] = v18 - v16 - v16;
  double v19 = v10 + v10;
  v3[8] = v14 + v19 + v14;
  v3[9] = v16 + v18 + v16;
  v3[10] = v12 - v6 - v15 + v17;
  v3[11] = v13 + v13 - v11 - v11;
  void v3[12] = v19 - v14 - v14;
  v3[13] = v11 + v13 + v13 + v11;
  v3[14] = v17 + v15 - v6 - v12;

  sub_1011BADA0(v3, v3 + 17);
}

double *sub_1015982D8(double *result)
{
  double v2 = result[1];
  double v1 = result[2];
  double v3 = result[3];
  double v4 = result[4];
  double v5 = sqrt(v1 * v1 + v2 * v2 + v3 * v3 + v4 * v4);
  if (v5 == 0.0)
  {
    result[1] = 0.0;
    result[2] = 0.0;
    double v6 = 1.0;
    result[3] = 0.0;
  }
  else
  {
    if (v5 == 1.0) {
      return result;
    }
    result[1] = v2 / v5;
    result[2] = v1 / v5;
    result[3] = v3 / v5;
    double v6 = v4 / v5;
  }
  result[4] = v6;
  return result;
}

void sub_101598340(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 48) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  sub_1015982D8((double *)(a1 + 8));
  double v5 = *(double *)(a1 + 16);
  double v6 = *(double *)(a1 + 24);
  double v7 = v5 * v5;
  double v8 = v5 * v6;
  double v9 = *(double *)(a1 + 32);
  double v10 = *(double *)(a1 + 40);
  double v11 = v5 * v9;
  double v12 = v5 * v10;
  double v13 = v6 * v6;
  double v14 = v6 * v9;
  double v15 = v6 * v10;
  double v16 = v9 * v9;
  double v17 = v9 * v10;
  double v18 = v10 * v10;
  double v19 = v8 + v8;
  *(double *)(a1 + 64) = v7 - v13 - v16 + v18;
  *(double *)(a1 + 72) = v19 - v17 - v17;
  double v20 = v11 + v11;
  *(double *)(a1 + 80) = v15 + v20 + v15;
  *(double *)(a1 + 88) = v17 + v19 + v17;
  *(double *)(a1 + 96) = v13 - v7 - v16 + v18;
  *(double *)(a1 + 104) = v14 + v14 - v12 - v12;
  *(double *)(a1 + 112) = v20 - v15 - v15;
  *(double *)(a1 + 120) = v12 + v14 + v14 + v12;
  *(double *)(a1 + 128) = v18 + v16 - v7 - v13;

  sub_1011BADA0((double *)(a1 + 16), (double *)(a1 + 152));
}

void sub_10159843C(uint64_t a1, uint64_t a2, int8x16_t a3, double a4, int8x16_t a5)
{
  sub_101598520((void *)(a1 + 8), a2, a3, a4, a5);
  double v7 = *(double *)(a1 + 16);
  double v8 = *(double *)(a1 + 24);
  double v6 = (double *)(a1 + 16);
  double v9 = v7 * v7;
  double v10 = v6[2];
  double v11 = v6[3];
  double v12 = v7 * v8;
  double v13 = v7 * v10;
  double v14 = v7 * v11;
  double v15 = v8 * v8;
  double v16 = v8 * v10;
  double v17 = v8 * v11;
  double v18 = v10 * v10;
  double v19 = v10 * v11;
  double v20 = v11 * v11;
  double v21 = v12 + v12;
  v6[6] = v9 - v15 - v18 + v20;
  void v6[7] = v21 - v19 - v19;
  double v22 = v13 + v13;
  v6[8] = v17 + v22 + v17;
  v6[9] = v19 + v21 + v19;
  v6[10] = v15 - v9 - v18 + v20;
  v6[11] = v16 + v16 - v14 - v14;
  v6[12] = v22 - v17 - v17;
  v6[13] = v14 + v16 + v16 + v14;
  v6[14] = v20 + v18 - v9 - v15;

  sub_1011BADA0(v6, v6 + 17);
}

void sub_101598520(void *a1, uint64_t a2, int8x16_t a3, double a4, int8x16_t a5)
{
  a3.i64[0] = *(void *)(a2 + 32);
  if (*(double *)a3.i64 <= -3.14159265 || *(double *)a3.i64 > 3.14159265)
  {
    a5.i64[0] = 0x400921FB54442D18;
    v7.f64[0] = NAN;
    v7.f64[1] = NAN;
    int8x16_t v19 = a5;
    int8x16_t v20 = (int8x16_t)vnegq_f64(v7);
    double v18 = *(double *)vbslq_s8(v20, a5, a3).i64;
    *(double *)a3.i64 = fmod(*(double *)a3.i64 + v18, 6.28318531);
    *(void *)&double v8 = vbslq_s8(v20, v19, a3).u64[0];
    if (*(double *)a3.i64 == 0.0) {
      *(double *)a3.i64 = v8;
    }
    else {
      *(double *)a3.i64 = *(double *)a3.i64 - v18;
    }
  }
  double v9 = a1 + 1;
  double v10 = *(double *)a3.i64 * 0.5;
  if (v10 == 0.0)
  {
    void *v9 = 0;
    a1[2] = 0;
    a1[3] = 0;
    a1[4] = 0x3FF0000000000000;
    double v11 = 0.0;
    double cosval = 1.0;
    double v13 = 0.0;
    double v14 = 0.0;
  }
  else
  {
    if (fabs(v10) >= 2.22044605e-16)
    {
      __double2 v15 = __sincos_stret(v10);
      double cosval = v15.__cosval;
      double v14 = -(*(double *)(a2 + 8) * v15.__sinval);
      *((double *)a1 + 1) = v14;
      double v13 = -(*(double *)(a2 + 16) * v15.__sinval);
      *((double *)a1 + 2) = v13;
      double v11 = -(*(double *)(a2 + 24) * v15.__sinval);
    }
    else
    {
      double v14 = -(*(double *)(a2 + 8) * v10);
      *((double *)a1 + 1) = v14;
      double v13 = -(*(double *)(a2 + 16) * v10);
      *((double *)a1 + 2) = v13;
      double v11 = -(*(double *)(a2 + 24) * v10);
      double cosval = sqrt(1.0 - (v13 * v13 + v14 * v14 + v11 * v11));
    }
    *((double *)a1 + 3) = v11;
    *((double *)a1 + 4) = cosval;
  }
  double v16 = sqrt(v13 * v13 + v14 * v14 + v11 * v11 + cosval * cosval);
  if (v16 == 0.0)
  {
    void *v9 = 0;
    a1[2] = 0;
    double v17 = 1.0;
    a1[3] = 0;
  }
  else
  {
    if (v16 == 1.0) {
      return;
    }
    *((double *)a1 + 1) = v14 / v16;
    *((double *)a1 + 2) = v13 / v16;
    *((double *)a1 + 3) = v11 / v16;
    double v17 = cosval / v16;
  }
  *((double *)a1 + 4) = v17;
}

BOOL sub_1015986BC(unsigned char *a1)
{
  uint64_t v1 = 152;
  while ((*(void *)&a1[v1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    v1 += 8;
    if (v1 == 184)
    {
      uint64_t v2 = 200;
      while ((*(void *)&a1[v2] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        v2 += 8;
        if (v2 == 224)
        {
          if (*a1) {
            return 1;
          }
          uint64_t v4 = 0;
          double v5 = a1 + 240;
          while ((*(void *)&v5[v4] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
          {
            v4 += 8;
            if (v4 == 288)
            {
              uint64_t v6 = 0;
              do
              {
                double v7 = *(double *)&v5[v6];
                BOOL result = v7 >= 0.0;
                if (v7 < 0.0) {
                  break;
                }
                BOOL v8 = v6 == 280;
                v6 += 56;
              }
              while (!v8);
              return result;
            }
          }
          return 0;
        }
      }
      return 0;
    }
  }
  return 0;
}

double sub_10159876C(uint64_t a1)
{
  *(unsigned char *)a1 = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  double result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0x3FF0000000000000;
  *(void *)(a1 + 96) = 0x3FF0000000000000;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  return result;
}

void sub_1015987D4(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    LOBYTE(v14) = 1;
    int64x2_t v15 = vdupq_n_s64(3uLL);
    long long v16 = xmmword_101DAB7F0;
    *(void *)&long long v17 = a1 + 64;
    *((void *)&v17 + 1) = a1 + 136;
    sub_1011B94AC((uint64_t)v34, &v14);
    sub_1015981F4((double *)a1, (uint64_t)v34);
    sub_101598A58(a1 + 56, (double *)(a1 + 192), (uint64_t)v34);
    *(_OWORD *)(a1 + 200) = v35;
    *(_OWORD *)(a1 + 216) = v36;
    *(float64x2_t *)(a1 + 200) = vnegq_f64(*(float64x2_t *)(a1 + 200));
    *(double *)(a1 + 216) = -*(double *)(a1 + 216);
  }
  else
  {
    BOOL v38 = off_102316AA0;
    long long v39 = *(_OWORD *)(a1 + 200);
    long long v40 = *(_OWORD *)(a1 + 216);
    LOBYTE(v14) = 1;
    int64x2_t v15 = vdupq_n_s64(3uLL);
    long long v16 = xmmword_101DAB7F0;
    *(void *)&long long v17 = a1 + 64;
    *((void *)&v17 + 1) = a1 + 136;
    sub_1011B94AC((uint64_t)v34, &v14);
    sub_1015981F4((double *)a1, (uint64_t)v34);
    sub_101598A58(a1 + 56, (double *)(a1 + 192), (uint64_t)v34);
    *(_OWORD *)(a1 + 200) = v35;
    *(_OWORD *)(a1 + 216) = v36;
    *(float64x2_t *)(a1 + 200) = vnegq_f64(*(float64x2_t *)(a1 + 200));
    *(double *)(a1 + 216) = -*(double *)(a1 + 216);
    sub_101598ABC(a1 + 56, a1 + 144, (double *)&v38, (uint64_t)v34, v2);
    LOBYTE(v9) = 1;
    int64x2_t v10 = vdupq_n_s64(6uLL);
    long long v11 = xmmword_101DAB810;
    double v12 = &v35;
    double v13 = &v37;
    sub_1011B54B0(a1 + 232, &v9, &v7);
    long long v3 = &v15;
    long long v31 = 0u;
    long long v32 = 0u;
    int64x2_t v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    double v14 = off_1023168E8;
    uint64_t v33 = 0;
    uint64_t v4 = (uint64_t *)v8[2];
    double v5 = (uint64_t *)v8[3];
    while (v4 != v5)
    {
      uint64_t v6 = *v4++;
      v3->i64[0] = v6;
      long long v3 = (int64x2_t *)((char *)v3 + 8);
    }
    sub_1011B9060(&v7);
    sub_1011B5588((uint64_t)v34, (uint64_t)&v14, (uint64_t)&v7);
    memcpy((void *)(a1 + 240), v8, 0x128uLL);
    sub_101598BE8(a1);
  }
}

double sub_101598A58@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_102316AA0;
  *(void *)(a3 + 32) = 0;
  double v3 = a2[1];
  double v4 = a2[2];
  double v5 = a2[3];
  *(float64x2_t *)(a3 + 8) = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 32), v4), *(float64x2_t *)(a1 + 8), v3), *(float64x2_t *)(a1 + 56), v5);
  double result = v4 * *(double *)(a1 + 48) + *(double *)(a1 + 24) * v3 + *(double *)(a1 + 72) * v5;
  *(double *)(a3 + 24) = result;
  return result;
}

double sub_101598ABC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, int8x16_t a5@<Q2>)
{
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(void *)(a4 + 120) = 0xBFF0000000000000;
  *(void *)(a4 + 64) = 0xBFF0000000000000;
  *(void *)a4 = off_1023168E8;
  *(void *)(a4 + 8) = 0xBFF0000000000000;
  sub_101599690((double *)a1, a2, a3, (uint64_t)v11, (int8x16_t)0, a5);
  *(_OWORD *)(a4 + 32) = v12;
  *(void *)(a4 + 48) = *(void *)v13;
  *(_OWORD *)(a4 + 80) = *(_OWORD *)&v13[8];
  *(void *)(a4 + 96) = *(void *)&v13[24];
  *(_OWORD *)(a4 + 128) = v14;
  *(void *)(a4 + 144) = v15;
  long long v7 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)double v13 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)&v13[16] = v7;
  long long v8 = *(_OWORD *)(a1 + 72);
  long long v14 = *(_OWORD *)(a1 + 56);
  long long v15 = v8;
  uint64_t v9 = 8;
  long long v12 = *(_OWORD *)(a1 + 8);
  do
  {
    *(double *)&v11[v9] = -*(double *)&v11[v9];
    v9 += 8;
  }
  while (v9 != 80);
  *(_OWORD *)(a4 + 176) = v12;
  *(void *)(a4 + 192) = *(void *)v13;
  *(_OWORD *)(a4 + 224) = *(_OWORD *)&v13[8];
  *(void *)(a4 + 240) = *(void *)&v13[24];
  *(_OWORD *)(a4 + 272) = v14;
  double result = *(double *)&v15;
  *(void *)(a4 + 288) = v15;
  return result;
}

void sub_101598BE8(uint64_t a1)
{
  uint64_t v1 = a1 + 232;
  int8x16_t v2 = (void *)(a1 + 240);
  LOBYTE(v3) = 1;
  int64x2_t v4 = vdupq_n_s64(6uLL);
  long long v5 = xmmword_101DAB810;
  uint64_t v6 = a1 + 240;
  uint64_t v7 = a1 + 528;
  uint64_t __B = (uint64_t)off_1023168E8;
  memcpy(v9, (const void *)(a1 + 240), sizeof(v9));
  sub_10159BE70((uint64_t)&__B, &v3);
  memcpy(v2, v9, 0x128uLL);
  uint64_t __B = 0x3FE0000000000000;
  sub_10159BF60(v1, (const double *)&__B);
}

double sub_101598CA4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    sub_1011B8C5C((uint64_t)&v71, a1);
    v70[5] = 0;
    v70[0] = off_1023166F8;
    double v6 = *(double *)(a2 + 32);
    double v5 = *(double *)(a2 + 40);
    double v7 = *(double *)(a2 + 16);
    double v8 = *(double *)(a2 + 24);
    *(double *)&v70[1] = v72.f64[1] * v5 + *(double *)&v73[16] * v7 - *(double *)v73 * v6 + *(double *)&v73[8] * v8;
    *(double *)&v70[2] = v5 * *(double *)v73 + *(double *)&v73[16] * v8 - *(double *)&v73[8] * v7 + v72.f64[1] * v6;
    *(double *)&v70[3] = v5 * *(double *)&v73[8] + *(double *)&v73[16] * v6 - v72.f64[1] * v8 + *(double *)v73 * v7;
    *(double *)&v70[4] = *(double *)&v73[16] * v5 - v72.f64[1] * v7 - *(double *)v73 * v8 - *(double *)&v73[8] * v6;
    sub_101598340(a1, (uint64_t)v70);
    uint64_t v9 = 0;
    __int16 v64 = off_102316AA0;
    *((void *)&v66 + 1) = 0;
    double v10 = *(double *)(a2 + 200);
    double v11 = *(double *)(a2 + 208);
    double v12 = *(double *)(a2 + 216);
    float64x2_t v65 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v75, v11), *(float64x2_t *)&v74[8], v10), v77, v12);
    *(double *)&long long v66 = v11 * v76 + *(double *)&v74[24] * v10 + v78 * v12;
    do
    {
      *(double *)&(&v64)[v9 + 1] = *(double *)&(&v64)[v9 + 1] + *(double *)&v79[v9 * 8];
      ++v9;
    }
    while (v9 != 3);
    long long v13 = v66;
    *(float64x2_t *)(a1 + 200) = v65;
    *(_OWORD *)(a1 + 216) = v13;
    sub_101599260((double *)(a1 + 144), a1 + 8, (uint64_t)v69);
    *(unsigned char *)a1 = 0;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    if (!(_BYTE)v71)
    {
      sub_1015993C4((uint64_t)&v71, a2, (uint64_t)v69, (uint64_t)&v64);
      LOBYTE(v36) = 0;
      int64x2_t v37 = vdupq_n_s64(6uLL);
      long long v38 = xmmword_101DAB810;
      long long v39 = &v65;
      long long v40 = &v68;
      sub_1011B54B0((uint64_t)&v80, &v36, v41);
      long long v61 = 0u;
      long long v62 = 0u;
      float64x2_t __B = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      BOOL v44 = off_1023168E8;
      uint64_t v63 = 0;
      long long v14 = v42;
      long long v15 = v43;
      if (v42 != v43)
      {
        p_B = &__B;
        do
        {
          float64_t v17 = *v14++;
          p_B->f64[0] = v17;
          p_B = (float64x2_t *)((char *)p_B + 8);
        }
        while (v14 != v15);
      }
      sub_1011B9060(v41);
      cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 6, 6, 6, 1.0, v65.f64, 6, __B.f64, 6, 1.0, (double *)(a1 + 240), 6);
    }
    if (!*(unsigned char *)a2)
    {
      sub_101599540((uint64_t)&v71, a2, (uint64_t)v69, (uint64_t)&v64);
      LOBYTE(v36) = 0;
      int64x2_t v37 = vdupq_n_s64(6uLL);
      long long v38 = xmmword_101DAB810;
      long long v39 = &v65;
      long long v40 = &v68;
      sub_1011B54B0(a2 + 232, &v36, v41);
      long long v61 = 0u;
      long long v62 = 0u;
      float64x2_t __B = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      BOOL v44 = off_1023168E8;
      uint64_t v63 = 0;
      long long v18 = v42;
      long long v19 = v43;
      if (v42 != v43)
      {
        long long v20 = &__B;
        do
        {
          float64_t v21 = *v18++;
          v20->f64[0] = v21;
          long long v20 = (float64x2_t *)((char *)v20 + 8);
        }
        while (v18 != v19);
      }
      sub_1011B9060(v41);
      cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 6, 6, 6, 1.0, v65.f64, 6, __B.f64, 6, 1.0, (double *)(a1 + 240), 6);
    }
    sub_101598BE8(a1);
  }
  else
  {
    long long v71 = off_102316730;
    float64x2_t v23 = *(float64x2_t *)(a1 + 64);
    *(_OWORD *)long long v73 = *(_OWORD *)(a1 + 80);
    long long v24 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)&v73[16] = *(_OWORD *)(a1 + 96);
    *(_OWORD *)long long v74 = v24;
    *(_OWORD *)&v74[16] = *(_OWORD *)(a1 + 128);
    float64x2_t v72 = v23;
    uint64_t v67 = 0;
    __int16 v64 = off_1023166F8;
    double v25 = *(double *)(a1 + 16);
    v23.f64[0] = *(float64_t *)(a1 + 24);
    double v26 = *(double *)(a2 + 32);
    *(void *)&long long v24 = *(void *)(a2 + 40);
    double v28 = *(double *)(a1 + 32);
    double v27 = *(double *)(a1 + 40);
    double v29 = *(double *)(a2 + 16);
    double v30 = *(double *)(a2 + 24);
    v65.f64[0] = v25 * *(double *)&v24 + v27 * v29 - v23.f64[0] * v26 + v28 * v30;
    v65.f64[1] = *(double *)&v24 * v23.f64[0] + v27 * v30 - v28 * v29 + v25 * v26;
    *(double *)&long long v66 = *(double *)&v24 * v28 + v27 * v26 - v25 * v30 + v23.f64[0] * v29;
    *((double *)&v66 + 1) = v27 * *(double *)&v24 - v25 * v29 - v23.f64[0] * v30 - v28 * v26;
    sub_101598340(a1, (uint64_t)&v64);
    uint64_t v31 = 0;
    double v32 = *(double *)(a2 + 200);
    double v33 = *(double *)(a2 + 208);
    double v34 = *(double *)(a2 + 216);
    *((void *)&v46 + 1) = 0;
    float64x2_t __B = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)&v73[8], v33), v72, v32), *(float64x2_t *)v74, v34);
    *(double *)&long long v46 = v33 * *(double *)&v73[24] + *(double *)v73 * v32 + *(double *)&v74[16] * v34;
    do
    {
      *(double *)&(&v44)[v31 + 1] = *(double *)&(&v44)[v31 + 1] + *(double *)(a1 + v31 * 8 + 200);
      ++v31;
    }
    while (v31 != 3);
    long long v35 = v46;
    *(float64x2_t *)(a1 + 200) = __B;
    *(_OWORD *)(a1 + 216) = v35;
    *(unsigned char *)a1 = 1;
    double result = 0.0;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 368) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 448) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
  }
  return result;
}

void sub_101599260(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_10232F070;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(void *)(a3 + 104) = 0;
  double v5 = a1[4];
  double v6 = v5 * 0.5;
  if (v5 * 0.5 == 0.0)
  {
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0uLL;
    *(_OWORD *)(a3 + 80) = 0uLL;
    *(_OWORD *)(a3 + 32) = 0uLL;
    *(_OWORD *)(a3 + 48) = 0uLL;
    *(_OWORD *)(a3 + 16) = 0uLL;
    *(void *)(a3 + 72) = 0xC000000000000000;
    *(void *)(a3 + 40) = 0xC000000000000000;
    *(void *)(a3 + 8) = 0xC000000000000000;
  }
  else
  {
    if (fabs(v6) >= 2.22044605e-16)
    {
      __double2 v10 = __sincos_stret(v6);
      double v9 = v5 / v10.__sinval;
      double v8 = -(v5 / v10.__sinval - v10.__cosval * 2.0);
      double v5 = v10.__sinval + v10.__sinval;
    }
    else
    {
      double v8 = -(v6 * v6);
      double v9 = 2.0;
    }
    double v11 = a1[1];
    double v12 = a1[2];
    double v13 = v8 * -(v12 * v11);
    *(double *)(a3 + 8) = -(v9 - -(v11 * v11) * v8);
    *(double *)(a3 + 16) = v13;
    double v14 = a1[3];
    double v15 = v8 * -(v14 * v11);
    *(double *)(a3 + 24) = v15;
    *(double *)(a3 + 32) = v13;
    double v16 = v8 * -(v14 * v12);
    *(double *)(a3 + 40) = -(v9 - -(v12 * v12) * v8);
    *(double *)(a3 + 48) = v16;
    *(double *)(a3 + 56) = v15;
    *(double *)(a3 + 64) = v16;
    *(double *)(a3 + 72) = -(v9 - -(v14 * v14) * v8);
    *(double *)(a3 + 80) = -(v11 * v5);
    *(double *)(a3 + 88) = -(v12 * v5);
    *(double *)(a3 + 96) = -(v14 * v5);
  }
  if (*(double *)(a2 + 32) < 0.0)
  {
    for (uint64_t i = 8; i != 104; i += 16)
      *(float64x2_t *)(a3 + i) = vnegq_f64(*(float64x2_t *)(a3 + i));
  }
}

double sub_1015993C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_101599E20((double *)(a2 + 8), (uint64_t)v26);
  sub_101599ED0(a1 + 8, (double *)(a1 + 144), (uint64_t)v25);
  *(void *)a4 = off_1023168E8;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(void *)(a4 + 296) = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_OWORD *)(a4 + 280) = 0u;
  sub_10159A0D8(a3, (uint64_t)v26, (uint64_t)v11);
  sub_10159A03C((uint64_t)v11, (uint64_t)v25, (uint64_t)v18);
  *(_OWORD *)(a4 + 8) = v19;
  *(void *)(a4 + 24) = v20;
  *(_OWORD *)(a4 + 56) = v21;
  *(void *)(a4 + 72) = v22;
  v8.i64[1] = *((void *)&v23 + 1);
  *(_OWORD *)(a4 + 104) = v23;
  v8.i64[0] = v24;
  *(void *)(a4 + 120) = v24;
  sub_101599690((double *)(a1 + 56), a1 + 144, (double *)(a2 + 192), (uint64_t)v11, v8, v9);
  *(_OWORD *)(a4 + 32) = v12;
  *(void *)(a4 + 48) = v13;
  *(_OWORD *)(a4 + 80) = v14;
  *(void *)(a4 + 96) = v15;
  *(_OWORD *)(a4 + 128) = v16;
  double result = v17;
  *(double *)(a4 + 144) = v17;
  *(void *)(a4 + 288) = 0x3FF0000000000000;
  *(void *)(a4 + 232) = 0x3FF0000000000000;
  *(void *)(a4 + 176) = 0x3FF0000000000000;
  return result;
}

double sub_101599540@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_101599E78((double *)(a1 + 8), (uint64_t)v22);
  sub_101599ED0(a2 + 8, (double *)(a2 + 144), (uint64_t)v21);
  *(void *)a4 = off_1023168E8;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  *(_OWORD *)(a4 + 120) = 0u;
  *(_OWORD *)(a4 + 136) = 0u;
  *(_OWORD *)(a4 + 152) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(void *)(a4 + 296) = 0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_OWORD *)(a4 + 280) = 0u;
  sub_10159A0D8(a3, (uint64_t)v22, (uint64_t)&v9);
  sub_10159A03C((uint64_t)&v9, (uint64_t)v21, (uint64_t)v14);
  *(_OWORD *)(a4 + 8) = v15;
  *(void *)(a4 + 24) = v16;
  *(_OWORD *)(a4 + 56) = v17;
  *(void *)(a4 + 72) = v18;
  *(_OWORD *)(a4 + 104) = v19;
  *(void *)(a4 + 120) = v20;
  LOBYTE(v9) = 1;
  int64x2_t v10 = vdupq_n_s64(3uLL);
  long long v11 = xmmword_101D07BB0;
  uint64_t v12 = a4 + 176;
  uint64_t v13 = a4 + 296;
  return sub_10159A17C(&v9, a1 + 56);
}

double sub_101599690@<D0>(double *a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, int8x16_t a5@<Q0>, int8x16_t a6@<Q2>)
{
  uint64_t v9 = a2 + 32;
  a5.i64[0] = *(void *)(a2 + 32);
  if (*(double *)a5.i64 <= -3.14159265 || *(double *)a5.i64 > 3.14159265)
  {
    a6.i64[0] = 0x400921FB54442D18;
    v10.f64[0] = NAN;
    v10.f64[1] = NAN;
    int8x16_t v28 = a6;
    int8x16_t v29 = (int8x16_t)vnegq_f64(v10);
    double v27 = *(double *)vbslq_s8(v29, a6, a5).i64;
    *(double *)a5.i64 = fmod(*(double *)a5.i64 + v27, 6.28318531);
    *(void *)&double v11 = vbslq_s8(v29, v28, a5).u64[0];
    if (*(double *)a5.i64 == 0.0) {
      *(double *)a5.i64 = v11;
    }
    else {
      *(double *)a5.i64 = *(double *)a5.i64 - v27;
    }
  }
  double __B = *(double *)a5.i64;
  long long v52 = off_102316730;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  double v13 = a3[2];
  double v12 = a3[3];
  double v14 = a3[1];
  *((double *)&v53 + 1) = -v12;
  *(double *)&long long v54 = v13;
  *((double *)&v54 + 1) = v12;
  *((double *)&v55 + 1) = -v14;
  *(double *)&long long v56 = -v13;
  *((double *)&v56 + 1) = v14;
  if (fabs(*(double *)a5.i64 * 0.5) >= 2.22044605e-16)
  {
    LOBYTE(v36) = 0;
    int64x2_t v37 = (int64x2_t)xmmword_101DAB7F0;
    int64x2_t v38 = vdupq_n_s64(1uLL);
    *(void *)&double v39 = v9 - 24;
    *(void *)&long long v40 = v9;
    long long v43 = 0uLL;
    long long v44 = 0uLL;
    long long v45 = 0uLL;
    long long v46 = 0uLL;
    double v47 = 0.0;
    sub_1011B9358((uint64_t *)&v43, &v36);
    sub_1011BA6E4((uint64_t)&v43, &__B);
    long long v49 = off_102316AA0;
    long long v50 = 0u;
    long long v51 = 0u;
    uint64_t v18 = (uint64_t *)*((void *)&v44 + 1);
    long long v19 = (uint64_t *)v45;
    if (*((void *)&v44 + 1) != (void)v45)
    {
      uint64_t v20 = &v50;
      do
      {
        uint64_t v21 = *v18++;
        *(void *)uint64_t v20 = v21;
        uint64_t v20 = (long long *)((char *)v20 + 8);
      }
      while (v18 != v19);
    }
    sub_1011B9060(&v43);
    LOBYTE(v36) = 0;
    int64x2_t v37 = vdupq_n_s64(3uLL);
    int64x2_t v38 = (int64x2_t)xmmword_101DAB7F0;
    *(void *)&double v39 = a1 + 1;
    *(void *)&long long v40 = a1 + 10;
    sub_1011B94AC((uint64_t)&v43, &v36);
    *((double *)&v43 + 1) = *((double *)&v43 + 1) + -1.0;
    *((double *)&v45 + 1) = *((double *)&v45 + 1) + -1.0;
    double v48 = v48 + -1.0;
    uint64_t v36 = off_102316730;
    v37.i64[0] = 0;
    double v39 = 0.0;
    long long v42 = 0u;
    v37.i64[1] = v51;
    *(double *)v38.i64 = -*((double *)&v50 + 1);
    *(double *)&v38.i64[1] = -*(double *)&v51;
    long long v40 = v50;
    double v41 = -*(double *)&v50;
    double v30 = off_102316730;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    cblas_dsyr(CblasColMajor, CblasLower, 3, 1.0, (const double *)&v50, 1, (double *)&v31, 3);
    double v22 = *((double *)&v31 + 1);
    *(double *)&long long v31 = *(double *)&v45 * *(double *)&v37.i64[1]
                    + *((double *)&v43 + 1) * *(double *)v37.i64
                    + *((double *)&v46 + 1) * *(double *)v38.i64
                    + *(double *)&v31;
    *((double *)&v31 + 1) = *((double *)&v31 + 1)
                          + *(double *)&v37.i64[1] * *((double *)&v45 + 1)
                          + *(double *)&v44 * *(double *)v37.i64
                          + v47 * *(double *)v38.i64;
    double v23 = *(double *)&v32;
    *(double *)&long long v32 = *(double *)&v32
                    + *(double *)&v37.i64[1] * *(double *)&v46
                    + *((double *)&v44 + 1) * *(double *)v37.i64
                    + v48 * *(double *)v38.i64;
    *((double *)&v32 + 1) = v22
                          + *(double *)&v45 * v39
                          + *((double *)&v43 + 1) * *(double *)&v38.i64[1]
                          + *((double *)&v46 + 1) * *(double *)&v40;
    double v24 = *((double *)&v33 + 1);
    *(double *)&long long v33 = *((double *)&v45 + 1) * v39
                    + *(double *)&v44 * *(double *)&v38.i64[1]
                    + v47 * *(double *)&v40
                    + *(double *)&v33;
    *((double *)&v33 + 1) = *(double *)&v46 * v39
                          + *((double *)&v44 + 1) * *(double *)&v38.i64[1]
                          + v48 * *(double *)&v40
                          + *((double *)&v33 + 1);
    *(double *)&long long v34 = v23
                    + *(double *)&v45 * v41
                    + *((double *)&v43 + 1) * *((double *)&v40 + 1)
                    + *((double *)&v46 + 1) * *(double *)&v42;
    *((double *)&v34 + 1) = *((double *)&v45 + 1) * v41
                          + *(double *)&v44 * *((double *)&v40 + 1)
                          + v47 * *(double *)&v42
                          + v24;
    *(double *)&long long v35 = *(double *)&v46 * v41
                    + *((double *)&v44 + 1) * *((double *)&v40 + 1)
                    + v48 * *(double *)&v42
                    + *(double *)&v35;
    double v25 = __B * __B;
    for (uint64_t i = 1; i != 10; ++i)
      *(double *)&(&v30)[i] = *(double *)&(&v30)[i] / v25;
    sub_1011B7B6C(a1, (double *)&v52, a4);
    return sub_10159BF94((double *)a4, (double *)&v30);
  }
  else
  {
    *(void *)a4 = off_102316730;
    long long v15 = v53;
    *(_OWORD *)(a4 + 24) = v54;
    long long v16 = v56;
    *(_OWORD *)(a4 + 40) = v55;
    *(_OWORD *)(a4 + 56) = v16;
    double result = *(double *)&v57;
    *(_OWORD *)(a4 + 72) = v57;
    *(_OWORD *)(a4 + 8) = v15;
  }
  return result;
}

double sub_101599ACC(uint64_t a1, double *a2, double *a3, uint64_t a4, uint64_t a5, int a6)
{
  double v12 = (double *)(a1 + 56);
  sub_101598A58(a1 + 56, a2, (uint64_t)&v63);
  *(_OWORD *)(a4 + 8) = v64;
  v13.i64[0] = v65;
  *(_OWORD *)(a4 + 24) = v65;
  if (a6)
  {
    uint64_t v63 = off_102316730;
    long long v14 = *(_OWORD *)(a1 + 64);
    long long v65 = *(_OWORD *)(a1 + 80);
    long long v15 = *(_OWORD *)(a1 + 112);
    long long v66 = *(_OWORD *)(a1 + 96);
    long long v67 = v15;
    long long v68 = *(_OWORD *)(a1 + 128);
    long long v64 = v14;
    sub_1011B7B6C(v12, a3, (uint64_t)&v57);
    int64x2_t v16 = v58;
    *(_OWORD *)(a5 + 24) = v59;
    long long v17 = v61;
    *(_OWORD *)(a5 + 40) = v60;
    *(_OWORD *)(a5 + 56) = v17;
    *(_OWORD *)(a5 + 72) = v62;
    *(int64x2_t *)(a5 + 8) = v16;
    LOBYTE(v57) = 1;
    int64x2_t v58 = vdupq_n_s64(3uLL);
    long long v59 = xmmword_101DAB7F0;
    *(void *)&long long v60 = a1 + 64;
    *((void *)&v60 + 1) = a1 + 136;
    *(double *)v13.i64 = sub_1011BA96C((double *)a5, &v57);
    if (!*(unsigned char *)a1)
    {
      sub_101599690(v12, a1 + 144, a2, (uint64_t)&v57, v13, v18);
      LOBYTE(v43) = 1;
      int64x2_t v44 = vdupq_n_s64(3uLL);
      long long v45 = xmmword_101D07BB0;
      uint64_t v46 = a1 + 240;
      uint64_t v47 = a1 + 360;
      LOBYTE(v38) = 0;
      int64x2_t v39 = v44;
      long long v40 = xmmword_101DAB7F0;
      double v41 = &v58;
      long long v42 = (char *)&v62 + 8;
      sub_1011B789C(&v43, &v38, v48);
      long long v51 = off_102316730;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v19 = v49;
      uint64_t v20 = v50;
      if (v49 != v50)
      {
        uint64_t v21 = &v52;
        do
        {
          uint64_t v22 = *v19++;
          *(void *)uint64_t v21 = v22;
          uint64_t v21 = (long long *)((char *)v21 + 8);
        }
        while (v19 != v20);
      }
      sub_1011B9060(v48);
      double v23 = *((double *)&v52 + 1);
      v13.i64[0] = v52;
      long long v24 = v59;
      int64x2_t v25 = v58;
      long long v26 = v61;
      long long v27 = v53;
      long long v28 = v60;
      double v29 = *(double *)(a5 + 16)
          + *((double *)&v52 + 1) * *(double *)&v60
          + *(double *)&v58.i64[1] * *(double *)&v52
          + *((double *)&v61 + 1) * *(double *)&v53;
      *(double *)(a5 + 8) = *((double *)&v59 + 1) * *((double *)&v52 + 1)
                          + *(double *)v58.i64 * *(double *)&v52
                          + *(double *)&v61 * *(double *)&v53
                          + *(double *)(a5 + 8);
      *(double *)(a5 + 16) = v29;
      *(double *)v13.i64 = v23 * *((double *)&v28 + 1) + *(double *)&v24 * *(double *)v13.i64;
      double v30 = *(double *)&v62;
      long long v31 = v54;
      double v32 = *(double *)(a5 + 32)
          + *((double *)&v24 + 1) * *(double *)&v54
          + *(double *)v25.i64 * *((double *)&v27 + 1)
          + *(double *)&v26 * *((double *)&v54 + 1);
      *(double *)(a5 + 24) = *(double *)(a5 + 24) + *(double *)v13.i64 + *(double *)&v62 * *(double *)&v27;
      *(double *)(a5 + 32) = v32;
      double v33 = *(double *)(a5 + 48);
      *(double *)(a5 + 40) = *(double *)&v28 * *(double *)&v31
                           + *(double *)&v25.i64[1] * *((double *)&v27 + 1)
                           + *((double *)&v26 + 1) * *((double *)&v31 + 1)
                           + *(double *)(a5 + 40);
      *(double *)(a5 + 48) = *((double *)&v28 + 1) * *(double *)&v31
                           + *(double *)&v24 * *((double *)&v27 + 1)
                           + v30 * *((double *)&v31 + 1)
                           + v33;
      double v34 = *((double *)&v55 + 1);
      v13.i64[0] = v55;
      double v35 = *(double *)&v56;
      double v36 = *(double *)&v28 * *((double *)&v55 + 1)
          + *(double *)&v25.i64[1] * *(double *)&v55
          + *((double *)&v26 + 1) * *(double *)&v56
          + *(double *)(a5 + 64);
      *(double *)(a5 + 56) = *(double *)(a5 + 56)
                           + *((double *)&v24 + 1) * *((double *)&v55 + 1)
                           + *(double *)v25.i64 * *(double *)&v55
                           + *(double *)&v26 * *(double *)&v56;
      *(double *)(a5 + 64) = v36;
      *(double *)v13.i64 = *((double *)&v28 + 1) * v34
                         + *(double *)&v24 * *(double *)v13.i64
                         + v30 * v35
                         + *(double *)(a5 + 72);
      *(void *)(a5 + 72) = v13.i64[0];
    }
  }
  return *(double *)v13.i64;
}

void sub_101599DA8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = sub_1011B8C5C(a2, a1);

  sub_1015987D4(v2);
}

double sub_101599DD8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6 = sub_1011B8C5C(a4, a1);

  return sub_101598CA4(v6, a2, a3);
}

double sub_101599E20@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = a1[3];
  double result = a1[4];
  double v5 = a1[1];
  double v4 = a1[2];
  *(void *)a2 = off_10232F228;
  *(double *)(a2 + 8) = result;
  *(double *)(a2 + 16) = v3;
  *(double *)(a2 + 24) = -v4;
  *(double *)(a2 + 32) = -v5;
  *(double *)(a2 + 40) = -v3;
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = v5;
  *(double *)(a2 + 64) = -v4;
  *(double *)(a2 + 72) = v4;
  *(double *)(a2 + 80) = -v5;
  *(double *)(a2 + 88) = result;
  *(double *)(a2 + 96) = -v3;
  *(double *)(a2 + 104) = v5;
  *(double *)(a2 + 112) = v4;
  *(double *)(a2 + 120) = v3;
  *(double *)(a2 + 128) = result;
  *(void *)(a2 + 136) = 0;
  return result;
}

double sub_101599E78@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = a1[3];
  double result = a1[4];
  double v5 = a1[1];
  double v4 = a1[2];
  *(void *)a2 = off_10232F228;
  *(double *)(a2 + 8) = result;
  *(double *)(a2 + 16) = -v3;
  *(double *)(a2 + 24) = v4;
  *(double *)(a2 + 32) = -v5;
  *(double *)(a2 + 40) = v3;
  *(double *)(a2 + 48) = result;
  *(double *)(a2 + 56) = -v5;
  *(double *)(a2 + 64) = -v4;
  *(double *)(a2 + 72) = -v4;
  *(double *)(a2 + 80) = v5;
  *(double *)(a2 + 88) = result;
  *(double *)(a2 + 96) = -v3;
  *(double *)(a2 + 104) = v5;
  *(double *)(a2 + 112) = v4;
  *(double *)(a2 + 120) = v3;
  *(double *)(a2 + 128) = result;
  *(void *)(a2 + 136) = 0;
  return result;
}

void sub_101599ED0(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_10232F3E0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(void *)(a3 + 104) = 0;
  double v5 = a2[4];
  double v6 = v5 * 0.5;
  if (v5 * 0.5 == 0.0)
  {
    *(_OWORD *)(a3 + 64) = 0uLL;
    *(_OWORD *)(a3 + 80) = 0uLL;
    *(_OWORD *)(a3 + 32) = 0uLL;
    *(_OWORD *)(a3 + 48) = 0uLL;
    *(_OWORD *)(a3 + 16) = 0uLL;
    *(void *)(a3 + 88) = 0xBFE0000000000000;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 48) = 0xBFE0000000000000;
    *(void *)(a3 + 8) = 0xBFE0000000000000;
  }
  else
  {
    if (fabs(v6) >= 2.22044605e-16)
    {
      __double2 v11 = __sincos_stret(v6);
      double v10 = v11.__sinval / v5;
      double v9 = v11.__sinval / v5 + v11.__cosval * -0.5;
      double v8 = v11.__sinval * 0.5;
    }
    else
    {
      double v8 = v5 * 0.25;
      double v9 = v8 * v8;
      double v10 = 0.5;
    }
    double v12 = a2[1];
    double v13 = a2[2];
    double v14 = v9 * (v12 * v13);
    *(double *)(a3 + 8) = -(v10 - v12 * v12 * v9);
    *(double *)(a3 + 16) = v14;
    double v15 = a2[3];
    double v16 = v9 * (v12 * v15);
    *(double *)(a3 + 24) = v16;
    *(double *)(a3 + 32) = -(v12 * v8);
    *(double *)(a3 + 40) = v14;
    *(double *)(a3 + 48) = -(v10 - v13 * v13 * v9);
    double v17 = v9 * (v13 * v15);
    *(double *)(a3 + 56) = v17;
    *(double *)(a3 + 64) = -(v13 * v8);
    *(double *)(a3 + 72) = v16;
    *(double *)(a3 + 80) = v17;
    *(double *)(a3 + 88) = -(v10 - v15 * v15 * v9);
    *(double *)(a3 + 96) = -(v15 * v8);
  }
  if (*(double *)(a1 + 32) < 0.0)
  {
    for (uint64_t i = 8; i != 104; i += 16)
      *(float64x2_t *)(a3 + i) = vnegq_f64(*(float64x2_t *)(a3 + i));
  }
}

void sub_10159A03C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_102316730;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 3, 3, 4, 1.0, (const double *)(a1 + 8), 3, (const double *)(a2 + 8), 4, 0.0, (double *)(a3 + 8), 3);
}

void sub_10159A0D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = off_10232F070;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(void *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  cblas_dgemm(CblasColMajor, CblasNoTrans, CblasNoTrans, 3, 4, 4, 1.0, (const double *)(a1 + 8), 3, (const double *)(a2 + 8), 4, 0.0, (double *)(a3 + 8), 3);
}

double sub_10159A17C(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  double v4 = (void *)a1[5];
  void *v4 = *(void *)(a2 + 8);
  v4[v2] = *(void *)(a2 + 16);
  v4[2 * v2] = *(void *)(a2 + 24);
  v4[v3] = *(void *)(a2 + 32);
  v4[v3 + v2] = *(void *)(a2 + 40);
  v4[2 * v2 + v3] = *(void *)(a2 + 48);
  v4[2 * v3] = *(void *)(a2 + 56);
  v4[2 * v3 + v2] = *(void *)(a2 + 64);
  double result = *(double *)(a2 + 72);
  *(double *)&v4[2 * v3 + 2 * v2] = result;
  return result;
}

void sub_10159A1EC(void *a1@<X0>, unsigned char *a2@<X1>, char *a3@<X8>)
{
  *a2 = 1;
  if (a1 && [a1 inertialState] && objc_msgSend(a1, "inertialCovariance"))
  {
    [a1 inertialStateInfo];
    [a1 inertialCovarianceInfo];
    unint64_t v6 = (unint64_t)[a1 inertialState].length;
    unint64_t v7 = (unint64_t)[a1 inertialCovariance].length;
    if (v67 == 21
      && (v6 & 0xFFFFFFFFFFFFFFF8) == 0xA8
      && v69 == 9
      && !v68
      && v73 == 3
      && v72 == 18
      && v71 == 3
      && v70 == 12
      && v60 == 225
      && (v7 & 0xFFFFFFFFFFFFFFF8) == 0x708
      && v62 == 3
      && !v61
      && v66 == 3
      && v65 == 12
      && v64 == 3
      && v63 == 6)
    {
      [a1 cameraPose];
      long long v23 = v8;
      long long v24 = v9;
      long long v25 = v10;
      long long v26 = v11;
      double v12 = [a1 inertialState].bytes;
      double v13 = [objc_msgSend(a1, "inertialCovariance") bytes];
      sub_1011B83D4((uint64_t)a3);
      *(_DWORD *)a3 = [a1 trackingState];
      [a1 originTimestamp];
      *((void *)a3 + 2) = v14;
      [a1 timestamp];
      *((void *)a3 + 5) = v15;
      long long v43 = 0u;
      long long v42 = 0u;
      *(void *)&v41[1] = off_1023166F8;
      uint64_t v44 = 0;
      long long v45 = off_102316730;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v51 = off_102316520;
      uint64_t v54 = 0;
      long long v55 = off_102316AA0;
      long long v56 = 0u;
      long long v57 = 0u;
      int64x2_t v58 = off_1023168E8;
      memset(v59, 0, sizeof(v59));
      LOBYTE(v41[0]) = 0;
      LOBYTE(v34) = 0;
      int64x2_t v27 = vdupq_n_s64(3uLL);
      int64x2_t v35 = v27;
      long long v36 = xmmword_101DAB7D0;
      int64x2_t v37 = v12;
      uint64_t v38 = v12 + 9;
      sub_1011B94AC((uint64_t)v39, &v34);
      sub_1015981F4(v41, (uint64_t)v39);
      long long v56 = *((_OWORD *)v12 + 9);
      *(void *)&long long v57 = v12[20];
      LOBYTE(v39[0]) = 0;
      *(int64x2_t *)((char *)v39 + 8) = v27;
      *(_OWORD *)((char *)&v39[1] + 8) = xmmword_101E11920;
      *((void *)&v39[2] + 1) = v13;
      *(void *)&v40[0] = v13 + 33;
      LOBYTE(v34) = 1;
      int64x2_t v35 = v27;
      long long v36 = xmmword_101D07BB0;
      int64x2_t v37 = v59;
      uint64_t v38 = &v59[15];
      sub_10159C084(&v34, v39);
      double __B = -1.0;
      LOBYTE(v34) = 0;
      int64x2_t v35 = v27;
      long long v36 = xmmword_101E11920;
      int64x2_t v37 = v13 + 12;
      uint64_t v38 = v13 + 45;
      memset(v39, 0, sizeof(v39));
      memset(v40, 0, 24);
      sub_1011B9358((uint64_t *)v39, &v34);
      sub_1011BA6E4((uint64_t)v39, &__B);
      LOBYTE(v28) = 1;
      int64x2_t v29 = v27;
      long long v30 = xmmword_101D07BB0;
      long long v31 = &v59[18];
      double v32 = &v59[33];
      sub_1011BA71C(&v28, (uint64_t *)v39);
      sub_1011B9060(v39);
      double __B = -1.0;
      LOBYTE(v34) = 0;
      int64x2_t v35 = v27;
      long long v36 = xmmword_101E11920;
      int64x2_t v37 = v13 + 180;
      uint64_t v38 = v13 + 213;
      memset(v39, 0, sizeof(v39));
      memset(v40, 0, 24);
      sub_1011B9358((uint64_t *)v39, &v34);
      sub_1011BA6E4((uint64_t)v39, &__B);
      LOBYTE(v28) = 1;
      int64x2_t v29 = v27;
      long long v30 = xmmword_101D07BB0;
      long long v31 = &v59[3];
      double v32 = &v59[18];
      sub_1011BA71C(&v28, (uint64_t *)v39);
      sub_1011B9060(v39);
      LOBYTE(v39[0]) = 0;
      *(int64x2_t *)((char *)v39 + 8) = v27;
      *(_OWORD *)((char *)&v39[1] + 8) = xmmword_101E11920;
      *((void *)&v39[2] + 1) = v13 + 192;
      *(void *)&v40[0] = v13 + 225;
      LOBYTE(v34) = 1;
      int64x2_t v35 = v27;
      long long v36 = xmmword_101D07BB0;
      int64x2_t v37 = &v59[21];
      uint64_t v38 = &v59[36];
      sub_10159C084(&v34, v39);
      uint64_t v16 = (uint64_t)(a3 + 592);
      *(void *)&v39[0] = off_102316730;
      *(float64x2_t *)((char *)v39 + 8) = vcvtq_f64_f32(*(float32x2_t *)&v23);
      v39[2] = vcvtq_f64_f32(*(float32x2_t *)&v24);
      *((double *)&v39[1] + 1) = *((float *)&v23 + 2);
      v40[0] = *((float *)&v24 + 2);
      *(float64x2_t *)&v40[1] = vcvtq_f64_f32(*(float32x2_t *)&v25);
      v40[3] = *((float *)&v25 + 2);
      v40[4] = 0.0;
      sub_1015981F4((double *)a3 + 74, (uint64_t)v39);
      *(float64x2_t *)((char *)v39 + 8) = vcvtq_f64_f32(*(float32x2_t *)&v26);
      *((double *)&v39[1] + 1) = *((float *)&v26 + 2);
      *(void *)&v39[2] = 0;
      *(_OWORD *)(a3 + 792) = *(_OWORD *)((char *)v39 + 8);
      *(_OWORD *)(a3 + 808) = *(_OWORD *)((char *)&v39[1] + 8);
      sub_101598CA4((uint64_t)(a3 + 592), (uint64_t)v41, 0);
      sub_1015987D4((uint64_t)(a3 + 592));
      a3[56] = LOBYTE(v41[0]);
      uint64_t v17 = (uint64_t)(a3 + 56);
      long long v18 = v43;
      *(_OWORD *)(v17 + 16) = v42;
      *(_OWORD *)(v17 + 32) = v18;
      *(void *)(v17 + 48) = v44;
      long long v19 = v49;
      *(_OWORD *)(v17 + 96) = v48;
      *(_OWORD *)(v17 + 112) = v19;
      *(_OWORD *)(v17 + 128) = v50;
      long long v20 = v47;
      *(_OWORD *)(v17 + 64) = v46;
      *(_OWORD *)(v17 + 80) = v20;
      long long v21 = v52;
      long long v22 = v53;
      *(void *)(v17 + 184) = v54;
      *(_OWORD *)(v17 + 168) = v22;
      *(_OWORD *)(v17 + 152) = v21;
      *(_OWORD *)(v17 + 216) = v57;
      *(_OWORD *)(v17 + 200) = v56;
      memcpy((void *)(v17 + 240), v59, 0x128uLL);
      sub_101598CA4(v17, v16, 1);
      *(void *)(v17 + 1080) = v12[12];
      *(void *)(v17 + 1088) = v12[13];
      *(void *)(v17 + 1096) = v12[14];
      LOBYTE(v39[0]) = 0;
      *(int64x2_t *)((char *)v39 + 8) = v27;
      *(_OWORD *)((char *)&v39[1] + 8) = xmmword_101E11920;
      *((void *)&v39[2] + 1) = v13 + 96;
      *(void *)&v40[0] = v13 + 129;
      sub_1011B7DF8(v17 + 1112, v39);
      *(unsigned char *)(v17 + 1200) = 0;
      *(unsigned char *)(v17 + 1344) = 0;
      *(unsigned char *)(v17 + 1368) = 0;
      *a2 = 0;
    }
    else
    {
      bzero(a3, 0x598uLL);
      sub_1011B83D4((uint64_t)a3);
    }
  }
  else
  {
    bzero(a3, 0x598uLL);
    sub_1011B83D4((uint64_t)a3);
  }
}

BOOL sub_10159A928(uint64_t a1)
{
  *(unsigned char *)(a1 + 1144) = 0;
  v14[9] = off_102316AA0;
  long long v15 = 0u;
  long long v16 = 0u;
  char v9 = 0;
  uint64_t v12 = 0x300000003;
  long long v11 = xmmword_101D71150;
  long long v10 = off_1022DC578;
  double v13 = v14;
  if (cnnavigation::ECEFToENU())
  {
    BOOL v1 = 0;
  }
  else
  {
    uint64_t v5 = 0x300000003;
    long long v4 = xmmword_101D71150;
    uint64_t v3 = off_1022DC578;
    unint64_t v6 = &v7;
    BOOL v1 = v9 != 0;
  }
  cnnavigation::ECEFToENUJacobian::~ECEFToENUJacobian((cnnavigation::ECEFToENUJacobian *)&v8);
  return v1;
}

void sub_10159ACC8(void *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  *a2 = 1;
  if (a1)
  {
    [a1 transform];
    [a1 covariance];
    uint64_t v6 = 0;
    uint64_t v54 = off_102316730;
    uint64_t v7 = v55;
    memset(v55, 0, sizeof(v55));
    long long v51 = off_102316AA0;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v9 = v57;
    long long v8 = v58;
    do
    {
      uint64_t v10 = 0;
      long long v11 = (long long *)&v56[32 * v6 + 144];
      long long v13 = *v11;
      long long v12 = v11[1];
      do
      {
        v32[0] = v13;
        v32[1] = v12;
        *(void *)&v7[8 * v10] = *((void *)v32 + (v10 & 3));
        ++v10;
      }
      while (v10 != 3);
      v31[0] = v9;
      v31[1] = v8;
      *((void *)&v52 + v6) = *((void *)v31 + (v6 & 3));
      ++v6;
      v7 += 24;
    }
    while (v6 != 3);
    v48[1] = off_102316AA0;
    long long v49 = 0u;
    long long v50 = 0u;
    if (cnnavigation::ECEFToLLA())
    {
      bzero((void *)a3, 0x6C0uLL);
      sub_1011B8718(a3);
    }
    else
    {
      uint64_t v14 = 0;
      long long v15 = &v45;
      memset(v46, 0, sizeof(v46));
      memset(v47, 0, sizeof(v47));
      long long v16 = (float *)v56;
      long long v45 = off_1023168E8;
      v48[0] = 0;
      do
      {
        uint64_t v17 = v16;
        for (uint64_t i = 1; i != 7; ++i)
        {
          float v19 = *v17;
          v17 += 6;
          *(double *)&v15[i] = v19;
        }
        ++v14;
        ++v16;
        v15 += 6;
      }
      while (v14 != 6);
      [a1 timestamp:sub_1011B8718(a3)];
      *(unsigned char *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = v20;
      sub_1015981F4((double *)(a3 + 24), (uint64_t)&v54);
      long long v21 = v53;
      *(_OWORD *)(a3 + 224) = v52;
      *(_OWORD *)(a3 + 240) = v21;
      LOBYTE(v40) = 1;
      int64x2_t v30 = vdupq_n_s64(3uLL);
      int64x2_t v41 = v30;
      long long v42 = xmmword_101D07BB0;
      long long v43 = (char *)&v47[1] + 8;
      uint64_t v44 = (char *)v48;
      LOBYTE(v33) = 1;
      long long v34 = (__int128)v30;
      long long v35 = xmmword_101D07BB0;
      *(void *)&long long v36 = a3 + 264;
      *((void *)&v36 + 1) = a3 + 384;
      sub_10159C084(&v33, &v40);
      LOBYTE(v40) = 1;
      int64x2_t v41 = v30;
      long long v42 = xmmword_101D07BB0;
      long long v43 = (char *)&v46[1] + 8;
      uint64_t v44 = (char *)v47;
      LOBYTE(v33) = 1;
      long long v34 = (__int128)v30;
      long long v35 = xmmword_101D07BB0;
      *(void *)&long long v36 = a3 + 408;
      *((void *)&v36 + 1) = a3 + 528;
      sub_10159C084(&v33, &v40);
      LOBYTE(v40) = 1;
      int64x2_t v41 = v30;
      long long v42 = xmmword_101D07BB0;
      long long v43 = (char *)v47;
      uint64_t v44 = (char *)&v47[7] + 8;
      LOBYTE(v33) = 1;
      long long v34 = (__int128)v30;
      long long v35 = xmmword_101D07BB0;
      *(void *)&long long v36 = a3 + 288;
      *((void *)&v36 + 1) = a3 + 408;
      sub_10159C084(&v33, &v40);
      LOBYTE(v40) = 1;
      int64x2_t v41 = v30;
      long long v42 = xmmword_101D07BB0;
      long long v43 = (char *)v46;
      uint64_t v44 = (char *)&v46[7] + 8;
      LOBYTE(v33) = 1;
      long long v34 = (__int128)v30;
      long long v35 = xmmword_101D07BB0;
      *(void *)&long long v36 = a3 + 432;
      *((void *)&v36 + 1) = a3 + 552;
      sub_10159C084(&v33, &v40);
      long long v22 = v50;
      *(_OWORD *)(a3 + 1104) = v49;
      *(_OWORD *)(a3 + 1120) = v22;
      [a1 confidence];
      *(double *)(a3 + 1136) = v23;
      *(unsigned char *)(a3 + 1144) = 0;
      sub_1011B85F8((uint64_t)&v40, 1);
      double v33 = off_102316730;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      long long v34 = xmmword_101E11930;
      long long v35 = unk_101E11940;
      long long v36 = xmmword_101E11950;
      long long v37 = unk_101E11960;
      sub_1015981F4((double *)&v40, (uint64_t)&v33);
      *(unsigned char *)(a3 + 560) = *(unsigned char *)(a3 + 24);
      long long v24 = *(_OWORD *)(a3 + 56);
      *(_OWORD *)(a3 + 576) = *(_OWORD *)(a3 + 40);
      *(_OWORD *)(a3 + 592) = v24;
      *(void *)(a3 + 608) = *(void *)(a3 + 72);
      long long v25 = *(_OWORD *)(a3 + 104);
      long long v26 = *(_OWORD *)(a3 + 136);
      *(_OWORD *)(a3 + 656) = *(_OWORD *)(a3 + 120);
      *(_OWORD *)(a3 + 672) = v26;
      *(_OWORD *)(a3 + 688) = *(_OWORD *)(a3 + 152);
      *(_OWORD *)(a3 + 624) = *(_OWORD *)(a3 + 88);
      *(_OWORD *)(a3 + 640) = v25;
      long long v27 = *(_OWORD *)(a3 + 176);
      long long v28 = *(_OWORD *)(a3 + 192);
      *(void *)(a3 + 744) = *(void *)(a3 + 208);
      *(_OWORD *)(a3 + 728) = v28;
      *(_OWORD *)(a3 + 712) = v27;
      long long v29 = *(_OWORD *)(a3 + 240);
      *(_OWORD *)(a3 + 760) = *(_OWORD *)(a3 + 224);
      *(_OWORD *)(a3 + 776) = v29;
      memcpy((void *)(a3 + 800), (const void *)(a3 + 264), 0x128uLL);
      sub_101598CA4(a3 + 560, (uint64_t)&v40, 1);
      *a2 = 0;
    }
  }
  else
  {
    bzero((void *)a3, 0x6C0uLL);
    sub_1011B8718(a3);
  }
}

void sub_10159B18C(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X8>)
{
  *a3 = 1;
  sub_1011B8A70((uint64_t)&v30);
  int v30 = *(_DWORD *)(a1 + 96);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 344);
  uint64_t v31 = *(void *)(a1 + 76);
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  uint64_t v29 = 0;
  BOOL v10 = sub_10159B3DC(*(_DWORD *)(a2 + 312), (double *)(a1 + 4), (double *)&v29, *(double *)(a1 + 28), *(double *)(a1 + 36), *(float *)(a2 + 316));
  v12.i64[0] = v29;
  double v13 = *(double *)(a1 + 36);
  if (!v10)
  {
    *(double *)v12.i64 = 0.0;
    double v13 = -1.0;
  }
  uint64_t v35 = v12.i64[0];
  double v37 = v13;
  double v14 = *(double *)(a1 + 20);
  if (v14 >= 0.0)
  {
    float64x2_t v34 = vmulq_f64(*(float64x2_t *)(a1 + 4), (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL));
    unint64_t v36 = *(void *)&v14;
    if (cnnavigation::LLAToECEF())
    {
      *(void *)(a4 + 352) = 0;
      *(_OWORD *)(a4 + 320) = 0u;
      *(_OWORD *)(a4 + 336) = 0u;
      *(_OWORD *)(a4 + 288) = 0u;
      *(_OWORD *)(a4 + 304) = 0u;
      *(_OWORD *)(a4 + 256) = 0u;
      *(_OWORD *)(a4 + 272) = 0u;
      *(_OWORD *)(a4 + 224) = 0u;
      *(_OWORD *)(a4 + 240) = 0u;
      *(_OWORD *)(a4 + 192) = 0u;
      *(_OWORD *)(a4 + 208) = 0u;
      *(_OWORD *)(a4 + 160) = 0u;
      *(_OWORD *)(a4 + 176) = 0u;
      *(_OWORD *)(a4 + 128) = 0u;
      *(_OWORD *)(a4 + 144) = 0u;
      *(_OWORD *)(a4 + 96) = 0u;
      *(_OWORD *)(a4 + 112) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      sub_1011B8A70(a4);
      return;
    }
  }
  else
  {
    float64x2_t v34 = 0uLL;
    unint64_t v36 = 0xBFF0000000000000;
  }
  double v15 = *(double *)(a1 + 68);
  __asm { FMOV            V3.2D, #-1.0 }
  if (_NF || (double v21 = *(double *)(a1 + 60), v21 < 0.0))
  {
    long long v38 = _Q3;
  }
  else
  {
    *(double *)v12.i64 = v21 * -0.0174532925 + 1.57079633;
    if (*(double *)v12.i64 <= -3.14159265 || *(double *)v12.i64 > 3.14159265)
    {
      v11.i64[0] = 0x400921FB54442D18;
      v22.f64[0] = NAN;
      v22.f64[1] = NAN;
      int8x16_t v26 = v11;
      int8x16_t v27 = (int8x16_t)vnegq_f64(v22);
      double v25 = *(double *)vbslq_s8(v27, v11, v12).i64;
      long long v28 = _Q3;
      *(double *)v12.i64 = fmod(*(double *)v12.i64 + v25, 6.28318531);
      _Q3 = v28;
      *(void *)&double v23 = vbslq_s8(v27, v26, v12).u64[0];
      if (*(double *)v12.i64 == 0.0) {
        *(double *)v12.i64 = v23;
      }
      else {
        *(double *)v12.i64 = *(double *)v12.i64 - v25;
      }
    }
    *(void *)&long long v38 = v12.i64[0];
    *((double *)&v38 + 1) = v15 * 0.0174532925;
  }
  double v24 = *(double *)(a1 + 52);
  if (v24 >= 0.0 && *(double *)(a1 + 44) >= 0.0)
  {
    *(void *)&long long v39 = *(void *)(a1 + 44);
    *((double *)&v39 + 1) = v24;
  }
  else
  {
    long long v39 = _Q3;
  }
  char v40 = 0;
  char v41 = 0;
  *a3 = 0;
  sub_1011B8F30(a4, (uint64_t)&v30);
}

BOOL sub_10159B3DC(int a1, double *a2, double *a3, double a4, double a5, float a6)
{
  *a3 = a4;
  if (a5 > 0.0)
  {
    if (a1 != -1)
    {
      *a3 = a6 + a4;
      return 1;
    }
    float v14 = 0.0;
    if (sub_10014933C(&v14, *a2, a2[1]))
    {
      *a3 = v14 + a4;
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_10232F588);
      }
      int8x16_t v11 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283521;
        double v18 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeMslToWgs84,DEM unavailable,using DMA und,%{private}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_10232F588);
        }
        int v15 = 134283521;
        double v16 = v14;
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeMslToWgs84(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      return 1;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_10232F588);
    }
    int8x16_t v12 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeMslToWgs84,DMA unavailable,Failed to convert altitude", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_10232F588);
    }
    LOWORD(v15) = 0;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeMslToWgs84(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v10);
LABEL_12:
    if (v10 != (char *)buf) {
      free(v10);
    }
    return 0;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_10232F588);
  }
  uint64_t v8 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeMslToWgs84,altitudeMsl unavailable", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_10232F588);
    }
    LOWORD(v15) = 0;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeMslToWgs84(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v10);
    goto LABEL_12;
  }
  return result;
}

void sub_10159B840(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10159B84C(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  *a2 = 1;
  sub_1011B8A70(a3);
  *(_DWORD *)a3 = 1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a1;
  *(void *)(a3 + 24) = *(void *)(a1 + 16);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 1104);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 1120);
  long long v6 = *(_OWORD *)(a1 + 776);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(a1 + 760);
  *(_OWORD *)(a3 + 96) = v6;
  if (*(unsigned char *)(a1 + 1144))
  {
    LOBYTE(v16) = 0;
    int64x2_t v17 = vdupq_n_s64(3uLL);
    long long v18 = xmmword_101D07BB0;
    uint64_t v19 = a1 + 1600;
    uint64_t v20 = a1 + 1720;
    double v7 = *(double *)(a1 + 1600);
    if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || v7 < 0.0
      || (double v8 = *(double *)(a1 + 1656), (*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      || v8 < 0.0
      || (double v9 = *(double *)(a1 + 1712), (*(void *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      || v9 < 0.0)
    {
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a3 + 112) = _Q0;
      *(unsigned char *)(a3 + 160) = 0;
    }
    else
    {
      *(double *)(a3 + 112) = sqrt(v7 + v8);
      *(double *)(a3 + 120) = sqrt(v9);
      *(unsigned char *)(a3 + 160) = 1;
      long long v10 = *(_OWORD *)(a1 + 1176);
      *(_OWORD *)(a3 + 176) = *(_OWORD *)(a1 + 1160);
      *(_OWORD *)(a3 + 192) = v10;
      *(_OWORD *)(a3 + 216) = *(_OWORD *)(a1 + 1392);
      *(_OWORD *)(a3 + 232) = *(_OWORD *)(a1 + 1408);
      sub_1011B7DF8(a3 + 248, &v16);
    }
  }
  *(unsigned char *)(a3 + 336) = 0;
  *a2 = 0;
}

BOOL sub_10159B9A8(int a1, double *a2, double *a3, double a4, double a5, float a6)
{
  *a3 = a4;
  if (a5 > 0.0)
  {
    if (a1 != -1)
    {
      *a3 = a4 - a6;
      return 1;
    }
    float v14 = 0.0;
    if (sub_10014933C(&v14, *a2, a2[1]))
    {
      *a3 = a4 - v14;
      if (qword_102419420 != -1) {
        dispatch_once(&qword_102419420, &stru_10232F588);
      }
      int8x16_t v11 = qword_102419428;
      if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134283521;
        double v18 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeWgs84ToMsl,DEM unavailable,using DMA und,%{private}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419420 != -1) {
          dispatch_once(&qword_102419420, &stru_10232F588);
        }
        int v15 = 134283521;
        double v16 = v14;
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeWgs84ToMsl(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      return 1;
    }
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_10232F588);
    }
    int8x16_t v12 = qword_102419428;
    if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeWgs84ToMsl,DMA unavailable,Failed to convert altitude", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_10232F588);
    }
    LOWORD(v15) = 0;
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeWgs84ToMsl(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v10);
LABEL_12:
    if (v10 != (char *)buf) {
      free(v10);
    }
    return 0;
  }
  if (qword_102419420 != -1) {
    dispatch_once(&qword_102419420, &stru_10232F588);
  }
  double v8 = qword_102419428;
  if (os_log_type_enabled((os_log_t)qword_102419428, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLVLFT,convertAltitudeWgs84ToMsl,altitudeWgs84 unavailable", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419420 != -1) {
      dispatch_once(&qword_102419420, &stru_10232F588);
    }
    LOWORD(v15) = 0;
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL clv::fusion::LocData::convertAltitudeWgs84ToMsl(const double, const double, const CLUndulationModelType, const float, const CLClientLocationCoordinate &, double &)", "%s\n", v10);
    goto LABEL_12;
  }
  return result;
}

void sub_10159BE0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10159BE18()
{
}

void sub_10159BE2C()
{
}

void sub_10159BE40(id a1)
{
  qword_102419428 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

void sub_10159BE70(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = a2[4];
  long long v4 = (const double *)a2[5];
  if (v3 == 6)
  {
    vDSP_vaddD((const double *)(a1 + 8), 1, v4, 1, (double *)(a1 + 8), 1, 0x24uLL);
  }
  else
  {
    uint64_t v5 = a2[3];
    if (v5 == 1)
    {
      uint64_t v6 = 8 * v3;
      for (uint64_t i = 8; i != 296; i += 48)
      {
        vDSP_vaddD((const double *)(v2 + i), 1, v4, 1, (double *)(v2 + i), 1, 6uLL);
        long long v4 = (const double *)((char *)v4 + v6);
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 8 * v3;
      uint64_t v10 = 8 * v5;
      do
      {
        int8x16_t v11 = (double *)v4;
        for (uint64_t j = 8; j != 56; j += 8)
        {
          *(double *)(v2 + j) = *(double *)(v2 + j) + *v11;
          int8x16_t v11 = (double *)((char *)v11 + v10);
        }
        ++v8;
        long long v4 = (const double *)((char *)v4 + v9);
        v2 += 48;
      }
      while (v8 != 6);
    }
  }
}

void sub_10159BF60(uint64_t a1, const double *__B)
{
}

double sub_10159BF94(double *a1, double *a2)
{
  double v2 = a1[1];
  double v3 = a1[2];
  double v4 = a1[3];
  double v5 = a1[4];
  double v6 = a1[5];
  double v7 = a1[6];
  double v8 = a1[7];
  double v9 = a1[8];
  double v10 = a1[9];
  a1[1] = v5 * a2[2] + v2 * a2[1] + v8 * a2[3];
  a1[2] = v6 * a2[2] + v3 * a2[1] + v9 * a2[3];
  a1[3] = v7 * a2[2] + v4 * a2[1] + v10 * a2[3];
  a1[4] = v5 * a2[5] + v2 * a2[4] + v8 * a2[6];
  a1[5] = v6 * a2[5] + v3 * a2[4] + v9 * a2[6];
  a1[6] = v7 * a2[5] + v4 * a2[4] + v10 * a2[6];
  a1[7] = v5 * a2[8] + v2 * a2[7] + v8 * a2[9];
  a1[8] = v6 * a2[8] + v3 * a2[7] + v9 * a2[9];
  double result = v7 * a2[8] + v4 * a2[7] + v10 * a2[9];
  a1[9] = result;
  return result;
}

void *sub_10159C084(void *result, void *a2)
{
  double v3 = result;
  uint64_t v5 = result[3];
  uint64_t v4 = result[4];
  uint64_t v7 = result[1];
  unint64_t v6 = result[2];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  if (v4 == v7)
  {
    BOOL v11 = v5 != v6 || v9 != v8;
    if (a2[4] != a2[1] && v11) {
      goto LABEL_10;
    }
  }
  else if (v5 != v6 || v9 != v8)
  {
LABEL_10:
    if (v5 == 1 && v9 == 1)
    {
      if (v6)
      {
        unint64_t v26 = 0;
        uint64_t v27 = a2[1];
        do
        {
          if (v27)
          {
            double result = memmove((void *)(v3[5] + 8 * v3[4] * v26), (const void *)(a2[5] + 8 * a2[4] * v26), 8 * v27);
            unint64_t v6 = v3[2];
          }
          ++v26;
        }
        while (v26 < v6);
      }
    }
    else if (v6)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 8 * v4;
      uint64_t v16 = 8 * v5;
      int64x2_t v17 = (void *)a2[5];
      uint64_t v18 = 8 * a2[4];
      uint64_t v19 = 8 * v9;
      do
      {
        if (v7)
        {
          uint64_t v20 = (void *)(v3[5] + v13);
          double result = v17;
          uint64_t v21 = v7;
          do
          {
            void *v20 = *result;
            uint64_t v20 = (void *)((char *)v20 + v16);
            double result = (void *)((char *)result + v19);
            --v21;
          }
          while (v21);
        }
        ++v14;
        v13 += v15;
        int64x2_t v17 = (void *)((char *)v17 + v18);
      }
      while (v14 != v6);
    }
    return result;
  }
  double v23 = (unsigned char *)a2[5];
  double v24 = (unsigned char *)a2[6];
  if (v24 != v23)
  {
    double v25 = (void *)result[5];
    return memmove(v25, v23, v24 - v23);
  }
  return result;
}

uint64_t sub_10159C1E0()
{
  sub_100134750(qword_102488E90, "[");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488E90, (void *)&_mh_execute_header);
  sub_100134750(qword_102488EA8, "]");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488EA8, (void *)&_mh_execute_header);
  sub_100134750(qword_102488EC0, " ");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488EC0, (void *)&_mh_execute_header);
  sub_100134750(qword_102488ED8, ";");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488ED8, (void *)&_mh_execute_header);
  sub_100134750(qword_102488EF0, ", ");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488EF0, (void *)&_mh_execute_header);
}

uint64_t sub_10159C2F0(uint64_t a1, uint64_t *a2)
{
  double v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1006BB1B4(a1, &v5);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  *(void *)a1 = &off_10232F5B8;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  return a1;
}

void sub_10159C378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10159C394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 80)) {
    *(unsigned char *)(a1 + 80) = 0;
  }
  if (*(unsigned char *)(a1 + 96)) {
    *(unsigned char *)(a1 + 96) = 0;
  }
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(double *)(a1 + 136) = (*(double (**)(uint64_t))(*(void *)a2 + 64))(a2);
  sub_100176CA0(v7, a3);
  uint64_t result = sub_1006BC04C(a1, a2, (uint64_t)v7);
  if (v7[32]) {
    return sub_100178B14((uint64_t)v7);
  }
  return result;
}

void sub_10159C448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a14) {
    sub_100178B14((uint64_t)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10159C464(uint64_t result)
{
  double v1 = *(double *)(result + 112);
  if (v1 > *(double *)(result + 120)) {
    *(double *)(result + 120) = v1;
  }
  if (*(unsigned char *)(result + 104) && v1 > *(double *)(result + 128)) {
    *(double *)(result + 128) = v1;
  }
  if (*(unsigned char *)(result + 80)) {
    *(unsigned char *)(result + 80) = 0;
  }
  if (*(unsigned char *)(result + 96)) {
    *(unsigned char *)(result + 96) = 0;
  }
  *(unsigned char *)(result + 104) = 0;
  *(void *)(result + 112) = 0;
  return result;
}

void *sub_10159C4B0(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v6 = [a3 type];
  if (v6 == 9)
  {
    *(unsigned char *)(a1 + 104) = 1;
LABEL_12:
    unsigned int v15 = [a3 type];
    v16[0] = &v15;
    BOOL v11 = sub_1000F3C48(a2 + 16, (int *)&v15, (uint64_t)&unk_101D0B290, v16);
    ++*((_DWORD *)v11 + 5);
    return sub_1006BB200(a1, a2, a3);
  }
  if (v6 == 8)
  {
    sub_1006BB5F8(a3);
    double v8 = v7;
    [objc_msgSend(objc_msgSend(objc_msgSend(a3, "vioEstimation"), "originTimestamp"), "cfAbsoluteTimeS");
    if (*(unsigned char *)(a1 + 80))
    {
      double v10 = *(double *)(a1 + 72);
    }
    else
    {
      *(double *)(a1 + 72) = v9;
      *(unsigned char *)(a1 + 80) = 1;
      double v10 = v9;
    }
    if (v10 != v9
      || *(unsigned char *)(a1 + 96)
      && (double v13 = v8 - *(double *)(a1 + 88),
          (*(void (**)(_DWORD **__return_ptr))(**(void **)(a1 + 56) + 128))(v16),
          uint64_t v14 = v16[12],
          sub_1000D7D80((uint64_t)&v19),
          sub_1000D7D80((uint64_t)&v18),
          sub_1000D7D80((uint64_t)&v17),
          v13 >= *(double *)&v14))
    {
      sub_10159C464(a1);
    }
    if (*(unsigned char *)(a1 + 96)) {
      *(double *)(a1 + 112) = *(double *)(a1 + 112) + v8 - *(double *)(a1 + 88);
    }
    *(double *)(a1 + 88) = v8;
    *(unsigned char *)(a1 + 96) = 1;
    goto LABEL_12;
  }
  return sub_1006BB200(a1, a2, a3);
}

float sub_10159C650(uint64_t a1)
{
  float v1 = 0.0;
  if (!*(unsigned char *)(a1 + 48) && *(void *)(a1 + 8) != *(void *)(a1 + 16) && *(double *)(a1 + 136) > 0.0)
  {
    sub_10159C464(a1);
    double v4 = *(double *)(a1 + 128);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 56) + 128))(&v9);
    float v5 = v4 * v14;
    float v6 = *(double *)(a1 + 120);
    *(float *)&double v4 = fmaxf(v5, v6);
    sub_1000D7D80((uint64_t)&v17);
    sub_1000D7D80((uint64_t)&v16);
    sub_1000D7D80((uint64_t)&v15);
    double v7 = sub_1006BB964(a1) / *(double *)(a1 + 136) + *(float *)&v4;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10232F600);
    }
    float v1 = v7;
    double v8 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = 68289283;
      __int16 v10 = 2082;
      BOOL v11 = "";
      __int16 v12 = 2049;
      double v13 = v1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Vision enabled trace score\", \"score\":\"%{private}f\"}", (uint8_t *)&v9, 0x1Cu);
    }
  }
  return v1;
}

void sub_10159C808(uint64_t a1)
{
  sub_1006BC524(a1);

  operator delete();
}

void sub_10159C840(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

double sub_10159C870(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 21) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_101E12A10;
  *(_OWORD *)(a1 + 40) = unk_101E12A20;
  *(_OWORD *)(a1 + 56) = xmmword_101E12A30;
  *(void *)&double result = 1092616192;
  *(_OWORD *)(a1 + 68) = *(long long *)((char *)&xmmword_101E12A30 + 12);
  return result;
}

__n128 sub_10159C8B4(uint64_t a1, uint64_t a2)
{
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_10232F640);
  }
  double v4 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
  {
    if (*(unsigned char *)(a1 + 21)) {
      float v5 = "update";
    }
    else {
      float v5 = "init";
    }
    *(_DWORD *)buf = 136446210;
    BOOL v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "SteadinessClassifier: Received user info (%{public}s)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232F640);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobility::WalkingSteadinessClassifier::handleUserInfoUpdate(const CLBodyMetrics &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  __n128 result = *(__n128 *)a2;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  *(__n128 *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 21) = 1;
  return result;
}

void sub_10159CAC0(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, double **a5@<X4>, double **a6@<X5>, uint64_t a7@<X8>, double a8@<D0>)
{
  *(_OWORD *)a7 = xmmword_101E12A10;
  *(_OWORD *)(a7 + 16) = unk_101E12A20;
  *(_OWORD *)(a7 + 32) = xmmword_101E12A30;
  *(_OWORD *)(a7 + 44) = *(long long *)((char *)&xmmword_101E12A30 + 12);
  *(_WORD *)(a7 + 60) = 0;
  *(unsigned char *)(a7 + 62) = 0;
  *(_OWORD *)(a7 + 144) = 0u;
  double v13 = (void *)(a7 + 144);
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 112) = 0u;
  *(_WORD *)(a7 + 128) = 0;
  *(void *)(a7 + 132) = 0;
  *(unsigned char *)(a7 + 140) = 0;
  int64x2_t v14 = vdupq_n_s64(0xFFF0000000000000);
  *(int64x2_t *)(a7 + 160) = v14;
  *(int64x2_t *)(a7 + 176) = v14;
  *(_OWORD *)(a7 + 192) = 0u;
  *(_OWORD *)(a7 + 208) = 0u;
  *(_OWORD *)(a7 + 224) = 0u;
  *(_DWORD *)(a7 + 240) = 0;
  *(int64x2_t *)(a7 + 248) = v14;
  uint64_t v15 = (double *)(a7 + 248);
  *(void *)(a7 + 264) = 0xFFF0000000000000;
  *(int64x2_t *)(a7 + 272) = v14;
  *(int64x2_t *)(a7 + 288) = v14;
  *(int64x2_t *)(a7 + 304) = v14;
  *(int64x2_t *)(a7 + 320) = v14;
  *(int64x2_t *)(a7 + 336) = v14;
  *(int64x2_t *)(a7 + 352) = v14;
  *(int64x2_t *)(a7 + 368) = v14;
  *(int64x2_t *)(a7 + 384) = v14;
  *(_OWORD *)(a7 + 400) = 0u;
  *(_OWORD *)(a7 + 416) = 0u;
  *(_OWORD *)(a7 + 432) = 0u;
  *(_DWORD *)(a7 + 448) = 0;
  *(void *)(a7 + 456) = 0xFFF0000000000000;
  *(int64x2_t *)(a7 + 464) = v14;
  *(int64x2_t *)(a7 + 480) = v14;
  *(int64x2_t *)(a7 + 496) = v14;
  *(int64x2_t *)(a7 + 512) = v14;
  *(void *)(a7 + 528) = 0xFFF0000000000000;
  *(_OWORD *)(a7 + 536) = 0u;
  *(_OWORD *)(a7 + 552) = 0u;
  *(_OWORD *)(a7 + 568) = 0u;
  *(_DWORD *)(a7 + 584) = 0;
  *(int64x2_t *)(a7 + 592) = v14;
  *(int64x2_t *)(a7 + 608) = v14;
  *(_OWORD *)(a7 + 624) = 0u;
  *(_OWORD *)(a7 + 640) = 0u;
  *(_OWORD *)(a7 + 656) = 0u;
  *(_DWORD *)(a7 + 672) = 0;
  *(void *)(a7 + 680) = 0xFFF0000000000000;
  *(int64x2_t *)(a7 + 688) = v14;
  *(int64x2_t *)(a7 + 704) = v14;
  *(int64x2_t *)(a7 + 720) = v14;
  *(int64x2_t *)(a7 + 736) = v14;
  *(int64x2_t *)(a7 + 752) = v14;
  *(int64x2_t *)(a7 + 768) = v14;
  *(int64x2_t *)(a7 + 784) = v14;
  *(int64x2_t *)(a7 + 800) = v14;
  *(int64x2_t *)(a7 + 816) = v14;
  *(int64x2_t *)(a7 + 832) = v14;
  *(int64x2_t *)(a7 + 848) = v14;
  *(int64x2_t *)(a7 + 864) = v14;
  *(int64x2_t *)(a7 + 880) = v14;
  *(int64x2_t *)(a7 + 896) = v14;
  *(void *)(a7 + 912) = 0xFFF0000000000000;
  *(unsigned char *)(a7 + 920) = 0;
  *(int64x2_t *)(a7 + 928) = v14;
  *(int64x2_t *)(a7 + 944) = v14;
  *(int64x2_t *)(a7 + 960) = v14;
  *(int64x2_t *)(a7 + 976) = v14;
  *(void *)(a7 + 992) = 0xFFF0000000000000;
  uint64_t v16 = a7 + 1000;
  *(_WORD *)(a7 + 1000) = 0;
  *(unsigned char *)(a7 + 1002) = 0;
  *(_DWORD *)(a7 + 1056) = 0;
  *(_OWORD *)(a7 + 1040) = 0u;
  *(_DWORD *)(v16 + 31) = 0;
  *(void *)(a7 + 1024) = 0;
  *(_OWORD *)(a7 + 1008) = 0u;
  *(void *)(a7 + 1112) = 0;
  *(_OWORD *)(a7 + 1096) = 0u;
  *(void *)(v16 + 85) = 0;
  *(void *)(a7 + 1072) = 0;
  *(void *)(a7 + 1064) = 0;
  *(void *)(a7 + 1080) = 0;
  *(double *)(a7 + 72) = a8;
  *(double *)(a7 + 96) = a8;
  *(unsigned char *)(a7 + 129) = a3;
  *(_DWORD *)(a7 + 1088) = a4;
  long long v17 = *(_OWORD *)(a1 + 3);
  long long v18 = *(_OWORD *)(a1 + 5);
  long long v19 = *(_OWORD *)(a1 + 7);
  *(_OWORD *)(a7 + 44) = *(_OWORD *)((char *)a1 + 68);
  *(_OWORD *)(a7 + 16) = v18;
  *(_OWORD *)(a7 + 32) = v19;
  *(_OWORD *)a7 = v17;
  double v20 = sub_101136DF0(a8);
  *(double *)(a7 + 80) = v20 + -604800.0;
  *(double *)(a7 + 88) = v20;
  if (*((unsigned char *)a1 + 21))
  {
    if (*((unsigned char *)a1 + 80) && *((float *)a1 + 11) < 18.0)
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232F640);
      }
      uint64_t v21 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
      {
        double v22 = *((float *)a1 + 11);
        *(_DWORD *)buf = 134283521;
        *(double *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#warning: Attempted a classification despite invalid user age: %{private}.1f. Exiting.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_10232F640);
        }
        double v50 = *((float *)a1 + 11);
        int v80 = 134283521;
        double v81 = v50;
        long long v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v51);
        if (v51 != (char *)buf) {
          free(v51);
        }
      }
      *(_DWORD *)(a7 + 136) |= 8u;
      *(void *)(a7 + 96) = 0;
    }
    else
    {
      float64x2_t v77 = 0;
      double v78 = 0;
      uint64_t v79 = 0;
      if ((*(uint64_t (**)(void, void, void **, double, double))(*(void *)*a1 + 24))(*a1, 0, &v77, v20 + -2592000.0, v20))
      {
        *(unsigned char *)(a7 + 1092) |= sub_10159DAB0((uint64_t)a1, &v77);
        if (v78 != v77) {
          sub_10159FD28((unint64_t)v77, v78, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v78 - (unsigned char *)v77) >> 5)), 1);
        }
        long long v74 = 0;
        float64x2_t v75 = 0;
        uint64_t v76 = 0;
        if ((*(uint64_t (**)(void, uint64_t, void **, double, double))(*(void *)*a1 + 24))(*a1, 1, &v74, v20 + -2592000.0, v20))
        {
          if (v75 != v74) {
            sub_1015A1BEC((unint64_t)v74, v75, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v75 - (unsigned char *)v74) >> 5)), 1);
          }
          *(unsigned char *)(a7 + 1092) |= sub_10159DAB0((uint64_t)a1, &v74);
          double v23 = *(double *)(a7 + 88);
          char v72 = 0;
          uint64_t v73 = 0;
          std::string __p = 0;
          double v24 = sub_1015A3458(&__p, v74, (uint64_t)v75, 0x6DB6DB6DB6DB6DB7 * (((char *)v75 - (unsigned char *)v74) >> 5));
          sub_10159E060(v23, (uint64_t)v24, a7, (unint64_t *)&__p);
          if (__p)
          {
            char v72 = __p;
            operator delete(__p);
          }
          sub_100704544((uint64_t)(a1 + 2), (uint64_t *)&v74, (uint64_t)(a1 + 3), (uint64_t *)buf, *(double *)(a7 + 88));
          memcpy(v13, buf, 0x309uLL);
          *(_OWORD *)(a7 + 104) = *(_OWORD *)(a7 + 144);
          double v25 = *(double *)(a7 + 88);
          if (!*(unsigned char *)(a7 + 920))
          {
            *(double *)(a7 + 96) = v25 + 86400.0;
            *(_DWORD *)(a7 + 132) |= 1u;
          }
          *(double *)(a7 + 976) = sub_10149E964(a5, a6, v15, v25);
          *(void *)(a7 + 984) = v26;
          *(void *)(a7 + 992) = v27;
          *(double *)(a7 + 120) = sub_100A1D340((double *)(a7 + 976), *(double *)(a7 + 112));
          if (!*((unsigned char *)a1 + 81))
          {
            if (qword_102418FA0 != -1) {
              dispatch_once(&qword_102418FA0, &stru_10232F640);
            }
            long long v28 = qword_102418FA8;
            if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "No height set, setting nextClassificationTime to the past for historical compute", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102418FA0 != -1) {
                dispatch_once(&qword_102418FA0, &stru_10232F640);
              }
              LOWORD(v80) = 0;
              char v65 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v65);
              if (v65 != (char *)buf) {
                free(v65);
              }
            }
            *(void *)(a7 + 96) = 0;
            *(_DWORD *)(a7 + 132) |= 0x20u;
          }
          double v70 = 0.0;
          if (sub_10159E194(a1, &v70, *(double *)(a7 + 72)))
          {
            *(double *)(a7 + 96) = fmax(*(double *)(a7 + 96), v70);
            *(_DWORD *)(a7 + 132) |= 0x80u;
          }
          char v67 = 0;
          char v68 = 0;
          uint64_t v69 = 0;
          uint64_t v29 = sub_1001F703C(&v67, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
          sub_10159E438((uint64_t)v29, a7, (unint64_t *)&v67);
          if (v67)
          {
            char v68 = v67;
            operator delete(v67);
          }
          sub_100F92500(a5, a6, (uint64_t *)v15, (int *)(a7 + 1096), (uint64_t)buf, *(double *)(a7 + 88), *(double *)(a7 + 120));
          long long v30 = *(_OWORD *)&buf[16];
          *(_OWORD *)(a7 + 928) = *(_OWORD *)buf;
          *(_OWORD *)(a7 + 944) = v30;
          *(_OWORD *)(a7 + 960) = *(_OWORD *)&buf[32];
          long long v31 = *(_OWORD *)(a7 + 944);
          v66[0] = *(_OWORD *)(a7 + 928);
          v66[1] = v31;
          v66[2] = *(_OWORD *)(a7 + 960);
          if (sub_100A1D20C((uint64_t)v66))
          {
            *(_DWORD *)(a7 + 132) |= 0x40u;
            *(double *)(a7 + 96) = *(double *)(a7 + 88) + 604800.0;
            if (qword_102418FA0 != -1) {
              dispatch_once(&qword_102418FA0, &stru_10232F640);
            }
            uint64_t v32 = qword_102418FA8;
            if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "SteadinessClassifier: score suppressed.", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102418FA0 != -1) {
                dispatch_once(&qword_102418FA0, &stru_10232F640);
              }
              LOWORD(v80) = 0;
              char v64 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v64);
              if (v64 != (char *)buf) {
                free(v64);
              }
            }
          }
          if (*(void *)(a7 + 132))
          {
            double v33 = *(double *)(a7 + 96);
          }
          else
          {
            *(unsigned char *)(a7 + 128) = 1;
            double v33 = *(double *)(a7 + 88) + 604800.0;
            *(double *)(a7 + 96) = v33;
          }
          if (v33 > *(double *)(a7 + 72)) {
            *(double *)(a7 + 96) = v33 + 1800.0;
          }
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_10232F640);
          }
          double v37 = qword_102418FA8;
          if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v38 = *(void *)(a7 + 80);
            uint64_t v39 = *(void *)(a7 + 88);
            uint64_t v40 = *(void *)(a7 + 112);
            uint64_t v41 = *(void *)(a7 + 120);
            int v42 = *(unsigned __int8 *)(a7 + 128);
            int v44 = *(_DWORD *)(a7 + 132);
            int v43 = *(_DWORD *)(a7 + 136);
            uint64_t v46 = *(void *)(a7 + 96);
            uint64_t v45 = *(void *)(a7 + 104);
            int v47 = *(unsigned __int8 *)(a7 + 140);
            *(_DWORD *)buf = 134351361;
            *(void *)&uint8_t buf[4] = v38;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v39;
            *(_WORD *)&buf[22] = 2049;
            *(void *)&buf[24] = v45;
            *(_WORD *)&uint8_t buf[32] = 2049;
            *(void *)&buf[34] = v40;
            *(_WORD *)&buf[42] = 2049;
            *(void *)&buf[44] = v41;
            *(_WORD *)&buf[52] = 1026;
            *(_DWORD *)&buf[54] = v42;
            *(_WORD *)&buf[58] = 1026;
            *(_DWORD *)&buf[60] = v43;
            *(_WORD *)&unsigned char buf[64] = 1026;
            *(_DWORD *)&buf[66] = v44;
            *(_WORD *)&buf[70] = 2050;
            *(void *)&buf[72] = v46;
            *(_WORD *)&buf[80] = 1026;
            *(_DWORD *)&buf[82] = v47;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "CLMobility::SteadinessResult,hkStartTime,%{public}.2f,hkEndTime,%{public}.2f,rawSteadinessScore,%{private}.2f, unadjustedScore,%{private}.2f,walkingSteadiness,%{private}.2f,writeToHealthKit,%{public}d,errorStatus,%{public}d,rejectionStatus,%{public}d,nextClassificationTime,%{public}.2f,dataSourcesUnavailable,%{public}d", buf, 0x56u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FA0 != -1) {
              dispatch_once(&qword_102418FA0, &stru_10232F640);
            }
            double v53 = *(double *)(a7 + 80);
            uint64_t v54 = *(void *)(a7 + 88);
            uint64_t v55 = *(void *)(a7 + 112);
            uint64_t v56 = *(void *)(a7 + 120);
            int v57 = *(unsigned __int8 *)(a7 + 128);
            int v59 = *(_DWORD *)(a7 + 132);
            int v58 = *(_DWORD *)(a7 + 136);
            uint64_t v61 = *(void *)(a7 + 96);
            uint64_t v60 = *(void *)(a7 + 104);
            int v62 = *(unsigned __int8 *)(a7 + 140);
            int v80 = 134351361;
            double v81 = v53;
            __int16 v82 = 2050;
            uint64_t v83 = v54;
            __int16 v84 = 2049;
            uint64_t v85 = v60;
            __int16 v86 = 2049;
            uint64_t v87 = v55;
            __int16 v88 = 2049;
            uint64_t v89 = v56;
            __int16 v90 = 1026;
            int v91 = v57;
            __int16 v92 = 1026;
            int v93 = v58;
            __int16 v94 = 1026;
            int v95 = v59;
            __int16 v96 = 2050;
            uint64_t v97 = v61;
            __int16 v98 = 1026;
            int v99 = v62;
            char v63 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v63);
            if (v63 != (char *)buf) {
              free(v63);
            }
          }
        }
        else
        {
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_10232F640);
          }
          unint64_t v36 = qword_102418FA8;
          if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102418FA0 != -1) {
              dispatch_once(&qword_102418FA0, &stru_10232F640);
            }
            LOWORD(v80) = 0;
            long long v52 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v52);
            if (v52 != (char *)buf) {
              free(v52);
            }
          }
          *(unsigned char *)(a7 + 140) = 1;
          *(_DWORD *)(a7 + 136) |= 2u;
        }
        if (v74)
        {
          float64x2_t v75 = (long long *)v74;
          operator delete(v74);
        }
      }
      else
      {
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_10232F640);
        }
        uint64_t v35 = qword_102418FA8;
        if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#warning: SteadinessClassifier unable to classify, BoutMetricsDb unavailable", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_10232F640);
          }
          LOWORD(v80) = 0;
          long long v49 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v49);
          if (v49 != (char *)buf) {
            free(v49);
          }
        }
        *(unsigned char *)(a7 + 140) = 1;
        *(_DWORD *)(a7 + 136) |= 2u;
      }
      if (v77)
      {
        double v78 = (long long *)v77;
        operator delete(v77);
      }
    }
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232F640);
    }
    float64x2_t v34 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "SteadinessClassifier unable to classify because UserInfo not set", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232F640);
      }
      LOWORD(v80) = 0;
      long long v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "WalkingSteadinessClassifier::Result CLMobility::WalkingSteadinessClassifier::classify(CFAbsoluteTime, const std::vector<HealthKitQuantitySample> &, BOOL, int, const std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitQuantitySample> &) const", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    *(unsigned char *)(a7 + 140) = 1;
    *(_DWORD *)(a7 + 136) |= 1u;
  }
}

void sub_10159DA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10159DAB0(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (*a2 == v2)
  {
    uint64_t v52 = 0;
    int v51 = 0;
    int v4 = 0;
  }
  else
  {
    int v4 = 0;
    uint64_t v52 = 0;
    int v51 = 0;
    float v5 = (_OWORD *)(a1 + 24);
    double v6 = sqrt(*(float *)(a1 + 32) / 1.70000005);
    uint64_t v7 = *a2 + 112;
    do
    {
      if (*(unsigned char *)(a1 + 81)) {
        BOOL v8 = *(unsigned char *)(v7 + 100) == 0;
      }
      else {
        BOOL v8 = 0;
      }
      if (v8)
      {
        double v9 = *(double *)v7;
        double v10 = *(double *)(v7 + 16);
        int v11 = *(_DWORD *)(v7 + 80);
        int v12 = *(_DWORD *)(v7 - 60);
        if (v12) {
          int v13 = 42;
        }
        else {
          int v13 = -1;
        }
        int v14 = v13 & v11;
        if (v11 == 32 || v14 == 0)
        {
          double v16 = (v9 + -0.109999999) * v6 + 0.109999999;
          *(double *)uint64_t v7 = v16;
          long long v17 = v5[1];
          v57[0] = *v5;
          v57[1] = v17;
          v58[0] = v5[2];
          *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)((char *)v5 + 44);
          if (sub_101137174((uint64_t)v57, 0, v16)) {
            int v18 = 0;
          }
          else {
            int v18 = 32;
          }
          *(_DWORD *)(v7 + 80) = *(_DWORD *)(v7 + 80) & 0xFFFFFFDF | v18;
          ++v4;
          int v12 = *(_DWORD *)(v7 - 60);
        }
        int v19 = *(_DWORD *)(v7 + 88);
        if (v12) {
          int v20 = 42;
        }
        else {
          int v20 = -1;
        }
        if (v19 == 32 || (v20 & v19) == 0)
        {
          double v21 = (1.0 - v6) * (0.109999999 / (v9 / v10)) + v6 * v10;
          *(double *)(v7 + 16) = v21;
          long long v22 = v5[1];
          v55[0] = *v5;
          v55[1] = v22;
          v56[0] = v5[2];
          *(_OWORD *)((char *)v56 + 12) = *(_OWORD *)((char *)v5 + 44);
          if (sub_101137174((uint64_t)v55, 2u, v21)) {
            int v23 = 0;
          }
          else {
            int v23 = 32;
          }
          *(_DWORD *)(v7 + 88) = *(_DWORD *)(v7 + 88) & 0xFFFFFFDF | v23;
          LODWORD(v52) = v52 + 1;
        }
        uint64_t v24 = *(void *)(v7 - 40);
        if (((v24 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v24 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v24 == 0x7FF0000000000000
          || (v24 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          sub_10159E678(a1, (double *)(v7 - 40), 0.0101029578, 0.989080385, -0.016843409);
        }
        uint64_t v28 = *(void *)(v7 - 32);
        if (((v28 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v28 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v28 == 0x7FF0000000000000
          || (v28 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          sub_10159E678(a1, (double *)(v7 - 32), 0.0156722755, 0.991972931, -0.026228411);
        }
        uint64_t v32 = *(void *)(v7 - 48);
        if (((v32 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
          || (v32 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000001
          || v32 == 0x7FF0000000000000
          || (v32 & 0x7FFFFFFFFFFFFFFFuLL) - 1 <= 0xFFFFFFFFFFFFELL)
        {
          sub_10159E678(a1, (double *)(v7 - 48), 0.0612694881, 0.983050659, -0.0937741748);
          ++HIDWORD(v52);
        }
      }
      if (*(unsigned char *)(a1 + 82) && *(unsigned char *)(a1 + 81) && (!*(unsigned char *)(v7 + 108) || !*(unsigned char *)(v7 + 100)))
      {
        int v36 = *(_DWORD *)(v7 + 84);
        int v37 = *(_DWORD *)(v7 - 60) ? 42 : -1;
        if (v36 == 32 || (v37 & v36) == 0)
        {
          double v38 = *(double *)(v7 + 8);
          double v39 = v38 + sub_10159E828(*(float *)(a1 + 36), *(float *)(a1 + 32));
          *(double *)(v7 + 8) = v39;
          *(_OWORD *)&v54[12] = *(_OWORD *)((char *)v5 + 44);
          long long v40 = v5[2];
          long long v41 = *v5;
          v53[1] = v5[1];
          *(_OWORD *)uint64_t v54 = v40;
          v53[0] = v41;
          if (sub_101137174((uint64_t)v53, 1u, v39)) {
            int v42 = 0;
          }
          else {
            int v42 = 32;
          }
          *(_DWORD *)(v7 + 84) = *(_DWORD *)(v7 + 84) & 0xFFFFFFDF | v42;
          ++v51;
        }
      }
      uint64_t v43 = v7 + 112;
      v7 += 224;
    }
    while (v43 != v2);
  }
  BOOL v46 = v4 <= 0 && (int)v52 <= 0 && v51 <= 0 && SHIDWORD(v52) <= 0;
  uint64_t v47 = !v46;
  if (!v46)
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232F640);
    }
    long long v48 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240960;
      int v68 = v4;
      __int16 v69 = 1026;
      int v70 = v52;
      __int16 v71 = 1026;
      int v72 = v51;
      __int16 v73 = 1026;
      int v74 = HIDWORD(v52);
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "Applied bout metrics correction (speeds=%{public}d, stepLengths=%{public}d, doubleSupportPercentages=%{public}d, entropyModelStepLengthFeatures=%{public}d)", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232F640);
      }
      int v59 = 67240960;
      int v60 = v4;
      __int16 v61 = 1026;
      int v62 = v52;
      __int16 v63 = 1026;
      int v64 = v51;
      __int16 v65 = 1026;
      int v66 = HIDWORD(v52);
      double v50 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMobility::WalkingSteadinessClassifier::correctBoutMetrics(std::vector<BoutMetrics> &) const", "%s\n", v50);
      if (v50 != (char *)buf) {
        free(v50);
      }
    }
  }
  return v47;
}

void sub_10159E060(double a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  *(void *)(a3 + 64) = 0;
  float v5 = (long long *)a4[1];
  if (v5 != (long long *)*a4)
  {
    sub_1015A40B0(*a4, v5, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)v5 - *a4) >> 5)), 1);
    double v8 = sub_101136DF0(*(double *)(*a4 + 8));
    unint64_t v9 = a4[1];
    double v10 = *(double *)(v9 - 216);
    if (v8 < v10)
    {
      int v11 = *(_DWORD *)(a3 + 64);
      int v12 = *(_DWORD *)(a3 + 68);
      unint64_t v13 = *a4;
      do
      {
        double v14 = v8;
        double v8 = v8 + 86400.0;
        if (v13 != v9)
        {
          uint64_t v15 = 0;
          unint64_t v16 = v13;
          do
          {
            double v17 = *(double *)(v16 + 8);
            if (v17 >= v14 && v17 < v8)
            {
              int v19 = *(_DWORD *)(v16 + 52) ? 42 : -1;
              if ((v19 & *(_DWORD *)(v16 + 192)) == 0) {
                ++v15;
              }
            }
            v16 += 224;
          }
          while (v16 != v9);
          if (v15 >= 4)
          {
            if (v8 > a1 + -2419200.0) {
              *(_DWORD *)(a3 + 68) = ++v12;
            }
            if (v8 > a1 + -604800.0) {
              *(_DWORD *)(a3 + 64) = ++v11;
            }
          }
        }
      }
      while (v8 < v10);
    }
  }
}

uint64_t sub_10159E194(void *a1, double *a2, double a3)
{
  int v10 = 0;
  int v13 = 0;
  long long v11 = 0u;
  memset(v12, 0, sizeof(v12));
  long long v14 = xmmword_101D813B0;
  int64x2_t v15 = vdupq_n_s64(0xFFF0000000000000);
  int64x2_t v16 = v15;
  unint64_t v17 = 0xFFF0000000000000;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  int v24 = 1071225242;
  char v25 = 0;
  int v26 = 1116213084;
  char v27 = 0;
  int v5 = (*(uint64_t (**)(void, int *))(*(void *)*a1 + 32))(*a1, &v10);
  uint64_t result = 0;
  if (v5)
  {
    double v7 = sub_101136DF0(*(double *)&v11) + 604800.0;
    if (v7 > a3)
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232F640);
      }
      double v8 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349312;
        uint64_t v33 = v11;
        __int16 v34 = 2050;
        double v35 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Insufficient time since first bout (%{public}.2f). Retrying on %{public}.2f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_10232F640);
        }
        int v28 = 134349312;
        uint64_t v29 = v11;
        __int16 v30 = 2050;
        double v31 = v7;
        unint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMobility::WalkingSteadinessClassifier::isInsufficientTimeSinceFirstBout(CFAbsoluteTime, CFAbsoluteTime &) const", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      *a2 = v7;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_10159E438(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4 = a3[1];
  if (v4 != *a3)
  {
    sub_1015A352C(*a3, v4, 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a3) >> 3)), 1);
    double v6 = *(double *)(a3[1] - 16);
    if (*(double *)(a2 + 72) < v6 + 604800.0)
    {
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232F640);
      }
      double v7 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = *(void *)(a2 + 72);
        *(_DWORD *)buf = 134349312;
        uint64_t v11 = v8;
        __int16 v12 = 2050;
        double v13 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "SteadinessClassifier unable to classify, insufficient time since previous steadiness endTime, classificationTime=%{public}.2f, previousSteadinessEndTime=%{public}.2f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_10232F640);
        }
        unint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::WalkingSteadinessClassifier::checkInsufficientTimeSinceSteadinessSample(WalkingSteadinessClassifier::Result &, std::vector<HealthKitQuantitySample>) const", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      *(_DWORD *)(a2 + 132) |= 2u;
      *(double *)(a2 + 96) = fmax(*(double *)(a2 + 96), v6 + 604800.0);
    }
  }
}

void sub_10159E678(uint64_t a1, double *a2, double a3, double a4, double a5)
{
  if (*(unsigned char *)(a1 + 81))
  {
    *a2 = *a2 * a4 + *(float *)(a1 + 32) * a3 + a5;
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232F640);
    }
    int v5 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Attempted to correct entropy model feature without height being set", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232F640);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobility::WalkingSteadinessClassifier::entropyModelFeatureHeightCorrection(double &, double, double, double) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

double sub_10159E828(double a1, double a2)
{
  double v2 = a1 / (a2 * a2);
  double v3 = 45.0;
  if (v2 <= 45.0)
  {
    if (v2 >= 15.0)
    {
      double v3 = a1 / (a2 * a2);
      return v3 * 0.265899333 + -7.14436752;
    }
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232F640);
    }
    int v5 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134283777;
      double v9 = v2;
      __int16 v10 = 2049;
      uint64_t v11 = 0x402E000000000000;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BMI below min threshold, %{private}.2f, setting it to Min threshold, %{private}.2f", buf, 0x16u);
    }
    double v3 = 15.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232F640);
    }
    unint64_t v4 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134283777;
      double v9 = v2;
      __int16 v10 = 2049;
      uint64_t v11 = 0x4046800000000000;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BMI above max threshold, %{private}.2f, setting it to Max threshold, %{private}.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 == -1)
      {
LABEL_16:
        double v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static double CLMobility::WalkingSteadinessClassifier::doubleSupportBMIBiasCorrection(double, double)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return v3 * 0.265899333 + -7.14436752;
      }
LABEL_20:
      dispatch_once(&qword_102418FA0, &stru_10232F640);
      goto LABEL_16;
    }
  }
  return v3 * 0.265899333 + -7.14436752;
}

void sub_10159EB44(unint64_t *a1@<X1>, uint64_t *a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  *(_WORD *)a5 = 0;
  *(unsigned char *)(a5 + 2) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 31) = 0;
  *(void *)(a5 + 40) = 0;
  *(void *)(a5 + 48) = 0;
  *(_DWORD *)(a5 + 56) = 0;
  *(void *)(a5 + 72) = 0;
  *(void *)(a5 + 80) = 0;
  *(void *)(a5 + 64) = 0;
  if (*a1 != a1[1])
  {
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232F640);
    }
    __int16 v12 = qword_102418FA8;
    if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_INFO))
    {
      unint64_t v13 = a1[1];
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *a1) >> 3);
      uint64_t v15 = *(void *)*a1;
      uint64_t v16 = *(void *)(v13 - 16);
      *(_DWORD *)buf = 134218496;
      *(void *)&uint8_t buf[4] = v14;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v15;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[SteadinessEvent] Evaluating %ld sample(s) from (%.2f->%.2f)", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232F640);
      }
      unint64_t v61 = a1[1];
      unint64_t v62 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v61 - *a1) >> 3);
      uint64_t v63 = *(void *)*a1;
      uint64_t v64 = *(void *)(v61 - 16);
      int v84 = 134218496;
      *(void *)uint64_t v85 = v62;
      *(_WORD *)&v85[8] = 2048;
      *(void *)&v85[10] = v63;
      *(_WORD *)&v85[18] = 2048;
      *(void *)&v85[20] = v64;
      __int16 v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v65);
      if (v65 != buf) {
        free(v65);
      }
    }
    unint64_t v17 = a1[1];
    unint64_t v18 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a1) >> 3));
    if (v17 == *a1) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v18;
    }
    sub_1015A591C(*a1, v17, v19, 1);
    unint64_t v20 = *a1;
    unint64_t v21 = a1[1];
    double v22 = *(double *)(v21 - 16);
    double v81 = 0;
    __int16 v82 = 0;
    uint64_t v83 = 0;
    for (*(void *)buf = &v81; v20 != v21; v20 += 24)
    {
      if (*(double *)(v20 + 8) >= v22 + -3628800.0 + 0.0001) {
        sub_1015A64A0((void ***)buf, (long long *)v20);
      }
    }
    sub_10159F928((double **)&v81, (uint64_t)&v77);
    double v25 = sub_10159FA10(v23, a2);
    double v26 = v24;
    if (v24 <= 0.0 || v22 >= v24 + 7862400.0 + -0.0001) {
      BOOL v27 = v22 < v25 + 2419200.0 + -0.0001 && v25 > 0.0;
    }
    else {
      BOOL v27 = 1;
    }
    *(unsigned char *)(a5 + 33) = v27;
    BOOL v28 = v22 < v25 + 7862400.0 + -0.0001 && v25 > 0.0;
    *(unsigned char *)(a5 + 32) = v28;
    double v29 = vabdd_f64(a6, v22);
    *(unsigned char *)(a5 + 34) = v29 < 1209600.0;
    BOOL v30 = *(unsigned char *)a4 && v22 - *(double *)(a4 + 8) > 16934400.0 && v78 + v79 >= 604800.0;
    BOOL v31 = 0;
    int v32 = !v27;
    if (v29 < 1209600.0 && !v28 && v32 != 0)
    {
      int v34 = v78 + v79 >= 2419200.0 || v30;
      BOOL v31 = v34 == 1 && v80 == 2;
    }
    if (v29 >= 1209600.0) {
      int v32 = 0;
    }
    if (v32 == 1 && (v79 >= 2419200.0 ? (int v37 = 1) : (int v37 = v30), v37 == 1))
    {
      BOOL v70 = 0;
      BOOL v38 = v80 == 3;
      if (v24 > 0.0 && v80 == 3)
      {
        std::string __p = 0;
        float64x2_t v75 = 0;
        uint64_t v76 = 0;
        unint64_t v39 = *a1;
        unint64_t v40 = a1[1];
        *(void *)buf = &__p;
        while (v39 != v40)
        {
          if (*(double *)(v39 + 8) >= v26) {
            sub_1015A64A0((void ***)buf, (long long *)v39);
          }
          v39 += 24;
        }
        sub_10159F928((double **)&__p, (uint64_t)&v71);
        double v51 = v71;
        BOOL v70 = v71 < 4838400.0;
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_10232F640);
        }
        uint64_t v52 = qword_102418FA8;
        if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109888;
          *(_DWORD *)&uint8_t buf[4] = v51 < 4838400.0;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = v51;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v73;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = v72;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "[SteadinessEvent] EvaluateRepeatVeryLow: isRepeatVeryLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_10232F640);
          }
          int v84 = 67109888;
          *(_DWORD *)uint64_t v85 = v51 < 4838400.0;
          *(_WORD *)&v85[4] = 2048;
          *(double *)&v85[6] = v51;
          *(_WORD *)&v85[14] = 2048;
          *(void *)&v85[16] = v73;
          *(_WORD *)&v85[24] = 2048;
          *(void *)&v85[26] = v72;
          __int16 v69 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v69);
          if (v69 != buf) {
            free(v69);
          }
        }
        if (__p)
        {
          float64x2_t v75 = __p;
          operator delete(__p);
        }
        BOOL v38 = 1;
      }
    }
    else
    {
      BOOL v38 = 0;
      BOOL v70 = 0;
    }
    if (v25 > 0.0 && v31)
    {
      std::string __p = 0;
      float64x2_t v75 = 0;
      uint64_t v76 = 0;
      unint64_t v43 = *a1;
      unint64_t v42 = a1[1];
      *(void *)buf = &__p;
      while (v43 != v42)
      {
        if (*(double *)(v43 + 8) >= v25) {
          sub_1015A64A0((void ***)buf, (long long *)v43);
        }
        v43 += 24;
      }
      sub_10159F928((double **)&__p, (uint64_t)&v71);
      double v47 = v71;
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232F640);
      }
      long long v48 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v47 < 4838400.0;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(double *)&buf[10] = v47;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v73;
        *(_WORD *)&buf[28] = 2048;
        *(void *)&buf[30] = v72;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "[SteadinessEvent] EvaluateRepeatLow: isRepeatLow,%d,durationOK,%.2f,durationVeryLow,%.2f,durationLow,%.2f", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_10232F640);
        }
        int v84 = 67109888;
        *(_DWORD *)uint64_t v85 = v47 < 4838400.0;
        *(_WORD *)&v85[4] = 2048;
        *(double *)&v85[6] = v47;
        *(_WORD *)&v85[14] = 2048;
        *(void *)&v85[16] = v73;
        *(_WORD *)&v85[24] = 2048;
        *(void *)&v85[26] = v72;
        int v68 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v68);
        if (v68 != buf) {
          free(v68);
        }
      }
      if (__p)
      {
        float64x2_t v75 = __p;
        operator delete(__p);
      }
      if (v47 < 4838400.0)
      {
        if (v30) {
          unsigned int v49 = 7;
        }
        else {
          unsigned int v49 = 3;
        }
        *(double *)(a5 + 40) = v22;
        *(double *)(a5 + 48) = v22;
        int v44 = 1;
        goto LABEL_104;
      }
    }
    else if (!v31)
    {
      if (!v38)
      {
        unsigned int v49 = 0;
        int v50 = 0;
        int v44 = 0;
        goto LABEL_105;
      }
      *(double *)(a5 + 40) = v22;
      *(double *)(a5 + 48) = v22;
      int v44 = 0;
      if (v70)
      {
        int v45 = 4;
        int v46 = 8;
      }
      else
      {
        int v45 = 2;
        int v46 = 6;
      }
      if (v30) {
        unsigned int v49 = v46;
      }
      else {
        unsigned int v49 = v45;
      }
LABEL_104:
      *(_DWORD *)(a5 + 56) = v49;
      int v50 = 1;
      *(unsigned char *)a5 = 1;
LABEL_105:
      double v53 = v77;
      double v54 = v78;
      double v55 = v78 / 3628800.0 * 100.0;
      *(double *)(a5 + 8) = v77 / 3628800.0 * 100.0;
      *(double *)(a5 + 16) = v55;
      double v56 = v79;
      double v57 = v79 / 3628800.0 * 100.0;
      *(double *)(a5 + 24) = v57;
      double v58 = v53 + v54 + v56;
      *(double *)(a5 + 64) = v58;
      *(unsigned char *)(a5 + 1) = a3;
      if (v50 && (a3 & 1) != 0)
      {
        *(unsigned char *)(a5 + 2) = 1;
        *(double *)(a5 + 72) = v25;
        *(double *)(a5 + 80) = v26;
        if (v38)
        {
          *(double *)(a5 + 80) = v22;
          double v26 = v22;
        }
        else if (v31)
        {
          *(double *)(a5 + 72) = v22;
          double v25 = v22;
        }
      }
      else
      {
        *(double *)(a5 + 72) = v25;
        *(double *)(a5 + 80) = v26;
      }
      if (qword_102418FA0 != -1) {
        dispatch_once(&qword_102418FA0, &stru_10232F640);
      }
      int v59 = qword_102418FA8;
      if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v60 = v49;
        *(_DWORD *)buf = 134548737;
        if (!v50) {
          uint64_t v60 = 0;
        }
        *(void *)&uint8_t buf[4] = v60;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)&buf[14] = v55;
        *(_WORD *)&buf[22] = 2049;
        *(double *)&buf[24] = v57;
        *(_WORD *)&uint8_t buf[32] = 2049;
        *(void *)&buf[34] = v80;
        __int16 v105 = 1025;
        BOOL v106 = v28;
        __int16 v107 = 1025;
        BOOL v108 = v27;
        __int16 v109 = 1026;
        BOOL v110 = v29 < 1209600.0;
        __int16 v111 = 1025;
        int v112 = a3;
        __int16 v113 = 1025;
        BOOL v114 = v70;
        __int16 v115 = 1025;
        int v116 = v44;
        __int16 v117 = 2049;
        double v118 = v58;
        __int16 v119 = 2049;
        double v120 = v25;
        __int16 v121 = 2049;
        double v122 = v26;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "[SteadinessEvent] steadinessEvent, %{sensitive}ld, percentLow, %{private}.2f, percentVeryLow, %{private}.2f, mostRecentClassification, %{private}ld, isBlockoutPeriodLow, %{private}d, isBlockoutPeriodVeryLow, %{private}d, isSampleRecent, %{public}d, userOnboardedNotifications, %{private}d, isRepeatVeryLow, %{private}d, isRepeatLow, %{private}d, totalValidDuration, %{private}.2f, mostRecentLowNotificationTime, %{private}.2f, mostRecentVeryLowNotificationTime, %{private}.2f", buf, 0x6Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_10232F640);
        }
        uint64_t v66 = v49;
        if (!v50) {
          uint64_t v66 = 0;
        }
        int v84 = 134548737;
        *(void *)uint64_t v85 = v66;
        *(_WORD *)&v85[8] = 2049;
        *(double *)&v85[10] = v55;
        *(_WORD *)&v85[18] = 2049;
        *(double *)&v85[20] = v57;
        *(_WORD *)&v85[28] = 2049;
        *(void *)&v85[30] = v80;
        __int16 v86 = 1025;
        BOOL v87 = v28;
        __int16 v88 = 1025;
        BOOL v89 = v27;
        __int16 v90 = 1026;
        BOOL v91 = v29 < 1209600.0;
        __int16 v92 = 1025;
        int v93 = a3;
        __int16 v94 = 1025;
        BOOL v95 = v70;
        __int16 v96 = 1025;
        int v97 = v44;
        __int16 v98 = 2049;
        double v99 = v58;
        __int16 v100 = 2049;
        double v101 = v25;
        __int16 v102 = 2049;
        double v103 = v26;
        char v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v67);
        if (v67 != buf) {
          free(v67);
        }
      }
      if (v81)
      {
        __int16 v82 = v81;
        operator delete(v81);
      }
      return;
    }
    int v44 = 0;
    if (v30) {
      unsigned int v49 = 5;
    }
    else {
      unsigned int v49 = 1;
    }
    *(double *)(a5 + 40) = v22;
    *(double *)(a5 + 48) = v22;
    goto LABEL_104;
  }
  if (qword_102418FA0 != -1) {
    dispatch_once(&qword_102418FA0, &stru_10232F640);
  }
  double v35 = qword_102418FA8;
  if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "[SteadinessEvent] No steadiness samples, no event detected", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FA0 != -1) {
      dispatch_once(&qword_102418FA0, &stru_10232F640);
    }
    LOWORD(v84) = 0;
    int v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "WalkingSteadinessClassifier::EventResult CLMobility::WalkingSteadinessClassifier::detectSteadinessEvent(std::vector<HealthKitQuantitySample> &, const std::vector<HealthKitCategorySample> &, CFAbsoluteTime, const BOOL, const HealthKitPregnancyState) const", "%s\n", v36);
    if (v36 != buf) {
      free(v36);
    }
  }
}

void sub_10159F8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_10159F928(double **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 1;
  double v3 = *a1;
  unint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    double v5 = 0.0;
    double v6 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
    do
    {
      if (sub_10111351C((uint64_t)&v13, v3[2] * 100.0))
      {
        double v10 = *v3;
        double v9 = v3[1];
        if (*v3 < v7) {
          double v10 = v7;
        }
        double v11 = v9 - v10;
        int v12 = v14;
        switch(v14)
        {
          case 1:
            double v8 = v11 + v8;
            *(double *)a2 = v8;
            break;
          case 3:
            double v6 = v11 + v6;
            *(double *)(a2 + 16) = v6;
            break;
          case 2:
            double v5 = v11 + v5;
            *(double *)(a2 + 8) = v5;
            break;
        }
        *(_DWORD *)(a2 + 24) = v12;
        double v7 = v9;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

double sub_10159FA10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*a2 == v2) {
    return 0.0;
  }
  double v4 = 0.0;
  double v5 = 0.0;
  do
  {
    switch(*(_DWORD *)(v3 + 16))
    {
      case 1:
      case 3:
        if (*(double *)(v3 + 8) > v4) {
          double v4 = *(double *)(v3 + 8);
        }
        break;
      case 2:
      case 4:
        if (*(double *)(v3 + 8) > v5) {
          double v5 = *(double *)(v3 + 8);
        }
        break;
      default:
        if (qword_102418FA0 != -1) {
          dispatch_once(&qword_102418FA0, &stru_10232F640);
        }
        double v6 = qword_102418FA8;
        if (os_log_type_enabled((os_log_t)qword_102418FA8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v7 = *(void *)(v3 + 16);
          *(_DWORD *)buf = 134545665;
          uint64_t v11 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Unexpected event type value: %{sensitive}ld", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FA0 != -1) {
            dispatch_once(&qword_102418FA0, &stru_10232F640);
          }
          double v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "std::pair<CFAbsoluteTime, CFAbsoluteTime> CLMobility::WalkingSteadinessClassifier::mostRecentLowAndVeryLowEventTimes(const std::vector<HealthKitCategorySample> &) const", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
        }
        break;
    }
    v3 += 24;
  }
  while (v3 != v2);
  return v4;
}

double sub_10159FC80@<D0>(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  double v6 = sub_101136DF0(a3);
  double v7 = sub_101136DF0(a2);
  double v8 = v7 + -31536000.0;
  *a1 = v7 + -31536000.0;
  a1[1] = a3;
  a1[2] = v7 + -31536000.0;
  a1[3] = v6;
  double result = v7 + -2592000.0;
  a1[4] = result;
  a1[5] = v6;
  a1[6] = result;
  a1[7] = v6;
  a1[8] = v8;
  a1[9] = a3;
  return result;
}

void sub_10159FCF8(id a1)
{
  qword_102418FA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Steadiness");
}

void sub_10159FD28(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
double sub_1015A0F44(long long *a1, long long *a2, long long *a3)
{
  double result = *((double *)a2 + 1);
  double v4 = *((double *)a3 + 1);
  if (result >= *((double *)a1 + 1))
  {
    if (v4 < result)
    {
      long long v96 = a2[10];
      long long v100 = a2[11];
      *(_OWORD *)v104 = a2[12];
      *(_OWORD *)&v104[16] = a2[13];
      long long v80 = a2[6];
      long long v84 = a2[7];
      long long v88 = a2[8];
      long long v92 = a2[9];
      long long v64 = a2[2];
      long long v68 = a2[3];
      long long v72 = a2[4];
      long long v76 = a2[5];
      long long v56 = *a2;
      long long v60 = a2[1];
      long long v15 = a3[1];
      *a2 = *a3;
      a2[1] = v15;
      long long v16 = a3[2];
      long long v17 = a3[3];
      long long v18 = a3[5];
      a2[4] = a3[4];
      a2[5] = v18;
      a2[2] = v16;
      a2[3] = v17;
      long long v19 = a3[6];
      long long v20 = a3[7];
      long long v21 = a3[9];
      a2[8] = a3[8];
      a2[9] = v21;
      a2[6] = v19;
      a2[7] = v20;
      long long v22 = a3[10];
      long long v23 = a3[11];
      long long v24 = a3[12];
      *(long long *)((char *)a2 + 205) = *(long long *)((char *)a3 + 205);
      a2[11] = v23;
      a2[12] = v24;
      a2[10] = v22;
      a3[10] = v96;
      a3[11] = v100;
      a3[12] = *(_OWORD *)v104;
      *(long long *)((char *)a3 + 205) = *(_OWORD *)&v104[13];
      a3[6] = v80;
      a3[7] = v84;
      a3[8] = v88;
      a3[9] = v92;
      a3[2] = v64;
      a3[3] = v68;
      a3[4] = v72;
      a3[5] = v76;
      *a3 = v56;
      a3[1] = v60;
      double result = *((double *)a2 + 1);
      if (result < *((double *)a1 + 1))
      {
        long long v97 = a1[10];
        long long v101 = a1[11];
        *(_OWORD *)long long v105 = a1[12];
        *(_OWORD *)&v105[16] = a1[13];
        long long v81 = a1[6];
        long long v85 = a1[7];
        long long v89 = a1[8];
        long long v93 = a1[9];
        long long v65 = a1[2];
        long long v69 = a1[3];
        long long v73 = a1[4];
        long long v77 = a1[5];
        long long v57 = *a1;
        long long v61 = a1[1];
        long long v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        long long v26 = a2[2];
        long long v27 = a2[3];
        long long v28 = a2[5];
        a1[4] = a2[4];
        a1[5] = v28;
        a1[2] = v26;
        a1[3] = v27;
        long long v29 = a2[6];
        long long v30 = a2[7];
        long long v31 = a2[9];
        a1[8] = a2[8];
        a1[9] = v31;
        a1[6] = v29;
        a1[7] = v30;
        long long v32 = a2[10];
        long long v33 = a2[11];
        long long v34 = a2[12];
        *(long long *)((char *)a1 + 205) = *(long long *)((char *)a2 + 205);
        a1[11] = v33;
        a1[12] = v34;
        a1[10] = v32;
        a2[10] = v97;
        a2[11] = v101;
        a2[12] = *(_OWORD *)v105;
        *(long long *)((char *)a2 + 205) = *(_OWORD *)&v105[13];
        a2[6] = v81;
        a2[7] = v85;
        a2[8] = v89;
        a2[9] = v93;
        a2[2] = v65;
        a2[3] = v69;
        a2[4] = v73;
        a2[5] = v77;
        double result = *(double *)&v57;
        *a2 = v57;
        a2[1] = v61;
      }
    }
  }
  else
  {
    if (v4 >= result)
    {
      long long v98 = a1[10];
      long long v102 = a1[11];
      *(_OWORD *)long long v106 = a1[12];
      *(_OWORD *)&v106[16] = a1[13];
      long long v82 = a1[6];
      long long v86 = a1[7];
      long long v90 = a1[8];
      long long v94 = a1[9];
      long long v66 = a1[2];
      long long v70 = a1[3];
      long long v74 = a1[4];
      long long v78 = a1[5];
      long long v58 = *a1;
      long long v62 = a1[1];
      long long v35 = a2[1];
      *a1 = *a2;
      a1[1] = v35;
      long long v36 = a2[2];
      long long v37 = a2[3];
      long long v38 = a2[5];
      a1[4] = a2[4];
      a1[5] = v38;
      a1[2] = v36;
      a1[3] = v37;
      long long v39 = a2[6];
      long long v40 = a2[7];
      long long v41 = a2[9];
      a1[8] = a2[8];
      a1[9] = v41;
      a1[6] = v39;
      a1[7] = v40;
      long long v42 = a2[10];
      long long v43 = a2[11];
      long long v44 = a2[12];
      *(long long *)((char *)a1 + 205) = *(long long *)((char *)a2 + 205);
      a1[11] = v43;
      a1[12] = v44;
      a1[10] = v42;
      a2[10] = v98;
      a2[11] = v102;
      a2[12] = *(_OWORD *)v106;
      *(long long *)((char *)a2 + 205) = *(_OWORD *)&v106[13];
      a2[6] = v82;
      a2[7] = v86;
      a2[8] = v90;
      a2[9] = v94;
      a2[2] = v66;
      a2[3] = v70;
      a2[4] = v74;
      a2[5] = v78;
      *a2 = v58;
      a2[1] = v62;
      double result = *((double *)a3 + 1);
      if (result >= *((double *)a2 + 1)) {
        return result;
      }
      long long v95 = a2[10];
      long long v99 = a2[11];
      *(_OWORD *)double v103 = a2[12];
      *(_OWORD *)&v103[16] = a2[13];
      long long v79 = a2[6];
      long long v83 = a2[7];
      long long v87 = a2[8];
      long long v91 = a2[9];
      long long v63 = a2[2];
      long long v67 = a2[3];
      long long v71 = a2[4];
      long long v75 = a2[5];
      long long v55 = *a2;
      long long v59 = a2[1];
      long long v45 = a3[1];
      *a2 = *a3;
      a2[1] = v45;
      long long v46 = a3[2];
      long long v47 = a3[3];
      long long v48 = a3[5];
      a2[4] = a3[4];
      a2[5] = v48;
      a2[2] = v46;
      a2[3] = v47;
      long long v49 = a3[6];
      long long v50 = a3[7];
      long long v51 = a3[9];
      a2[8] = a3[8];
      a2[9] = v51;
      a2[6] = v49;
      a2[7] = v50;
      long long v52 = a3[10];
      long long v53 = a3[11];
      long long v54 = a3[12];
      *(long long *)((char *)a2 + 205) = *(long long *)((char *)a3 + 205);
      a2[11] = v53;
      a2[12] = v54;
      a2[10] = v52;
    }
    else
    {
      long long v95 = a1[10];
      long long v99 = a1[11];
      *(_OWORD *)double v103 = a1[12];
      *(_OWORD *)&v103[16] = a1[13];
      long long v79 = a1[6];
      long long v83 = a1[7];
      long long v87 = a1[8];
      long long v91 = a1[9];
      long long v63 = a1[2];
      long long v67 = a1[3];
      long long v71 = a1[4];
      long long v75 = a1[5];
      long long v55 = *a1;
      long long v59 = a1[1];
      long long v5 = a3[1];
      *a1 = *a3;
      a1[1] = v5;
      long long v6 = a3[2];
      long long v7 = a3[3];
      long long v8 = a3[5];
      a1[4] = a3[4];
      a1[5] = v8;
      a1[2] = v6;
      a1[3] = v7;
      long long v9 = a3[6];
      long long v10 = a3[7];
      long long v11 = a3[9];
      a1[8] = a3[8];
      a1[9] = v11;
      a1[6] = v9;
      a1[7] = v10;
      long long v12 = a3[10];
      long long v13 = a3[11];
      long long v14 = a3[12];
      *(long long *)((char *)a1 + 205) = *(long long *)((char *)a3 + 205);
      a1[11] = v13;
      a1[12] = v14;
      a1[10] = v12;
    }
    a3[10] = v95;
    a3[11] = v99;
    a3[12] = *(_OWORD *)v103;
    *(long long *)((char *)a3 + 205) = *(_OWORD *)&v103[13];
    a3[6] = v79;
    a3[7] = v83;
    a3[8] = v87;
    a3[9] = v91;
    a3[2] = v63;
    a3[3] = v67;
    a3[4] = v71;
    a3[5] = v75;
    double result = *(double *)&v55;
    *a3 = v55;
    a3[1] = v59;
  }
  return result;
}

BOOL sub_1015A12F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 216) < *(double *)(a1 + 8))
      {
        long long v123 = *(_OWORD *)(a1 + 160);
        long long v129 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)v135 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v135[16] = *(_OWORD *)(a1 + 208);
        long long v99 = *(_OWORD *)(a1 + 96);
        long long v105 = *(_OWORD *)(a1 + 112);
        long long v111 = *(_OWORD *)(a1 + 128);
        long long v117 = *(_OWORD *)(a1 + 144);
        long long v75 = *(_OWORD *)(a1 + 32);
        long long v81 = *(_OWORD *)(a1 + 48);
        long long v87 = *(_OWORD *)(a1 + 64);
        long long v93 = *(_OWORD *)(a1 + 80);
        long long v63 = *(_OWORD *)a1;
        long long v69 = *(_OWORD *)(a1 + 16);
        long long v6 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 224);
        *(_OWORD *)(a1 + 16) = v6;
        long long v7 = *(_OWORD *)(a2 - 192);
        long long v8 = *(_OWORD *)(a2 - 176);
        long long v9 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v8;
        long long v10 = *(_OWORD *)(a2 - 128);
        long long v11 = *(_OWORD *)(a2 - 112);
        long long v12 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 144) = v12;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 112) = v11;
        long long v13 = *(_OWORD *)(a2 - 64);
        long long v14 = *(_OWORD *)(a2 - 48);
        long long v15 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a2 - 64) = v123;
        *(_OWORD *)(a2 - 48) = v129;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v135;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v135[13];
        *(_OWORD *)(a2 - 128) = v99;
        *(_OWORD *)(a2 - 112) = v105;
        *(_OWORD *)(a2 - 96) = v111;
        *(_OWORD *)(a2 - 80) = v117;
        *(_OWORD *)(a2 - 192) = v75;
        *(_OWORD *)(a2 - 176) = v81;
        *(_OWORD *)(a2 - 160) = v87;
        *(_OWORD *)(a2 - 144) = v93;
        *(_OWORD *)(a2 - 224) = v63;
        *(_OWORD *)(a2 - 208) = v69;
      }
      return result;
    case 3:
      sub_1015A0F44((long long *)a1, (long long *)(a1 + 224), (long long *)(a2 - 224));
      return 1;
    case 4:
      sub_1015A1948(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1;
    case 5:
      long long v31 = (long long *)(a1 + 224);
      long long v32 = (long long *)(a1 + 448);
      long long v33 = (long long *)(a1 + 672);
      sub_1015A1948(a1, a1 + 224, a1 + 448, a1 + 672);
      if (*(double *)(a2 - 216) >= *(double *)(a1 + 680)) {
        return 1;
      }
      long long v125 = *(_OWORD *)(a1 + 832);
      long long v131 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)v136 = *(_OWORD *)(a1 + 864);
      *(_OWORD *)&v136[16] = *(_OWORD *)(a1 + 880);
      long long v101 = *(_OWORD *)(a1 + 768);
      long long v107 = *(_OWORD *)(a1 + 784);
      long long v113 = *(_OWORD *)(a1 + 800);
      long long v119 = *(_OWORD *)(a1 + 816);
      long long v77 = *(_OWORD *)(a1 + 704);
      long long v83 = *(_OWORD *)(a1 + 720);
      long long v89 = *(_OWORD *)(a1 + 736);
      long long v95 = *(_OWORD *)(a1 + 752);
      long long v65 = *v33;
      long long v71 = *(_OWORD *)(a1 + 688);
      long long v34 = *(_OWORD *)(a2 - 208);
      long long *v33 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)(a1 + 688) = v34;
      long long v35 = *(_OWORD *)(a2 - 192);
      long long v36 = *(_OWORD *)(a2 - 176);
      long long v37 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 704) = v35;
      *(_OWORD *)(a1 + 720) = v36;
      long long v38 = *(_OWORD *)(a2 - 128);
      long long v39 = *(_OWORD *)(a2 - 112);
      long long v40 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 816) = v40;
      *(_OWORD *)(a1 + 768) = v38;
      *(_OWORD *)(a1 + 784) = v39;
      long long v41 = *(_OWORD *)(a2 - 64);
      long long v42 = *(_OWORD *)(a2 - 48);
      long long v43 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 877) = *(_OWORD *)(a2 - 19);
      *(_OWORD *)(a1 + 848) = v42;
      *(_OWORD *)(a1 + 864) = v43;
      *(_OWORD *)(a1 + 832) = v41;
      *(_OWORD *)(a2 - 64) = v125;
      *(_OWORD *)(a2 - 48) = v131;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v136;
      *(_OWORD *)(a2 - 19) = *(_OWORD *)&v136[13];
      *(_OWORD *)(a2 - 128) = v101;
      *(_OWORD *)(a2 - 112) = v107;
      *(_OWORD *)(a2 - 96) = v113;
      *(_OWORD *)(a2 - 80) = v119;
      *(_OWORD *)(a2 - 192) = v77;
      *(_OWORD *)(a2 - 176) = v83;
      *(_OWORD *)(a2 - 160) = v89;
      *(_OWORD *)(a2 - 144) = v95;
      *(_OWORD *)(a2 - 224) = v65;
      *(_OWORD *)(a2 - 208) = v71;
      if (*(double *)(a1 + 680) >= *(double *)(a1 + 456)) {
        return 1;
      }
      long long v126 = *(_OWORD *)(a1 + 608);
      long long v132 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)BOOL v137 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)&v137[16] = *(_OWORD *)(a1 + 656);
      long long v102 = *(_OWORD *)(a1 + 544);
      long long v108 = *(_OWORD *)(a1 + 560);
      long long v114 = *(_OWORD *)(a1 + 576);
      long long v120 = *(_OWORD *)(a1 + 592);
      long long v78 = *(_OWORD *)(a1 + 480);
      long long v84 = *(_OWORD *)(a1 + 496);
      long long v90 = *(_OWORD *)(a1 + 512);
      long long v96 = *(_OWORD *)(a1 + 528);
      long long v66 = *v32;
      long long v72 = *(_OWORD *)(a1 + 464);
      long long v44 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 624) = v44;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 653) = *(_OWORD *)(a1 + 877);
      long long v45 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 560) = v45;
      long long v46 = *(_OWORD *)(a1 + 816);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a1 + 592) = v46;
      long long v47 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 496) = v47;
      long long v48 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 528) = v48;
      long long v49 = *(_OWORD *)(a1 + 688);
      *long long v32 = *v33;
      *(_OWORD *)(a1 + 464) = v49;
      *(_OWORD *)(a1 + 832) = v126;
      *(_OWORD *)(a1 + 848) = v132;
      *(_OWORD *)(a1 + 864) = *(_OWORD *)v137;
      *(_OWORD *)(a1 + 877) = *(_OWORD *)&v137[13];
      *(_OWORD *)(a1 + 768) = v102;
      *(_OWORD *)(a1 + 784) = v108;
      *(_OWORD *)(a1 + 800) = v114;
      *(_OWORD *)(a1 + 816) = v120;
      *(_OWORD *)(a1 + 704) = v78;
      *(_OWORD *)(a1 + 720) = v84;
      *(_OWORD *)(a1 + 736) = v90;
      *(_OWORD *)(a1 + 752) = v96;
      BOOL v50 = *(double *)(a1 + 456) < *(double *)(a1 + 232);
      long long *v33 = v66;
      *(_OWORD *)(a1 + 688) = v72;
      if (!v50) {
        return 1;
      }
      long long v127 = *(_OWORD *)(a1 + 384);
      long long v133 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)uint64_t v138 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&v138[16] = *(_OWORD *)(a1 + 432);
      long long v103 = *(_OWORD *)(a1 + 320);
      long long v109 = *(_OWORD *)(a1 + 336);
      long long v115 = *(_OWORD *)(a1 + 352);
      long long v121 = *(_OWORD *)(a1 + 368);
      long long v79 = *(_OWORD *)(a1 + 256);
      long long v85 = *(_OWORD *)(a1 + 272);
      long long v91 = *(_OWORD *)(a1 + 288);
      long long v97 = *(_OWORD *)(a1 + 304);
      long long v67 = *v31;
      long long v73 = *(_OWORD *)(a1 + 240);
      long long v51 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 400) = v51;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 429) = *(_OWORD *)(a1 + 653);
      long long v52 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 336) = v52;
      long long v53 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 368) = v53;
      long long v54 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 272) = v54;
      long long v55 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 304) = v55;
      long long v56 = *(_OWORD *)(a1 + 464);
      *long long v31 = *v32;
      *(_OWORD *)(a1 + 240) = v56;
      *(_OWORD *)(a1 + 608) = v127;
      *(_OWORD *)(a1 + 624) = v133;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v138;
      *(_OWORD *)(a1 + 653) = *(_OWORD *)&v138[13];
      *(_OWORD *)(a1 + 544) = v103;
      *(_OWORD *)(a1 + 560) = v109;
      *(_OWORD *)(a1 + 576) = v115;
      *(_OWORD *)(a1 + 592) = v121;
      *(_OWORD *)(a1 + 480) = v79;
      *(_OWORD *)(a1 + 496) = v85;
      *(_OWORD *)(a1 + 512) = v91;
      *(_OWORD *)(a1 + 528) = v97;
      BOOL v50 = *(double *)(a1 + 232) < *(double *)(a1 + 8);
      *long long v32 = v67;
      *(_OWORD *)(a1 + 464) = v73;
      if (!v50) {
        return 1;
      }
      long long v128 = *(_OWORD *)(a1 + 160);
      long long v134 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)unint64_t v139 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v139[16] = *(_OWORD *)(a1 + 208);
      long long v104 = *(_OWORD *)(a1 + 96);
      long long v110 = *(_OWORD *)(a1 + 112);
      long long v116 = *(_OWORD *)(a1 + 128);
      long long v122 = *(_OWORD *)(a1 + 144);
      long long v80 = *(_OWORD *)(a1 + 32);
      long long v86 = *(_OWORD *)(a1 + 48);
      long long v92 = *(_OWORD *)(a1 + 64);
      long long v98 = *(_OWORD *)(a1 + 80);
      long long v68 = *(_OWORD *)a1;
      long long v74 = *(_OWORD *)(a1 + 16);
      long long v57 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 176) = v57;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 205) = *(_OWORD *)(a1 + 429);
      long long v58 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 112) = v58;
      long long v59 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 144) = v59;
      long long v60 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 48) = v60;
      long long v61 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 80) = v61;
      long long v62 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)a1 = *v31;
      *(_OWORD *)(a1 + 16) = v62;
      *(_OWORD *)(a1 + 384) = v128;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v139;
      *(_OWORD *)(a1 + 429) = *(_OWORD *)&v139[13];
      *(_OWORD *)(a1 + 320) = v104;
      *(_OWORD *)(a1 + 336) = v110;
      *(_OWORD *)(a1 + 352) = v116;
      *(_OWORD *)(a1 + 368) = v122;
      *(_OWORD *)(a1 + 256) = v80;
      *(_OWORD *)(a1 + 272) = v86;
      *(_OWORD *)(a1 + 288) = v92;
      *(_OWORD *)(a1 + 304) = v98;
      BOOL result = 1;
      *long long v31 = v68;
      *(_OWORD *)(a1 + 240) = v74;
      return result;
    default:
      uint64_t v16 = a1 + 448;
      sub_1015A0F44((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448));
      uint64_t v17 = a1 + 672;
      if (a1 + 672 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    double v20 = *(double *)(v17 + 8);
    if (v20 < *(double *)(v16 + 8))
    {
      uint64_t v21 = *(void *)v17;
      long long v124 = *(_OWORD *)(v17 + 176);
      *(_OWORD *)long long v130 = *(_OWORD *)(v17 + 192);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v17 + 208);
      long long v100 = *(_OWORD *)(v17 + 112);
      long long v106 = *(_OWORD *)(v17 + 128);
      long long v112 = *(_OWORD *)(v17 + 144);
      long long v118 = *(_OWORD *)(v17 + 160);
      long long v76 = *(_OWORD *)(v17 + 48);
      long long v82 = *(_OWORD *)(v17 + 64);
      long long v88 = *(_OWORD *)(v17 + 80);
      long long v94 = *(_OWORD *)(v17 + 96);
      uint64_t v22 = v18;
      long long v64 = *(_OWORD *)(v17 + 16);
      long long v70 = *(_OWORD *)(v17 + 32);
      while (1)
      {
        uint64_t v23 = a1 + v22;
        long long v24 = *(_OWORD *)(a1 + v22 + 624);
        *(_OWORD *)(v23 + 832) = *(_OWORD *)(a1 + v22 + 608);
        *(_OWORD *)(v23 + 848) = v24;
        *(_OWORD *)(v23 + 864) = *(_OWORD *)(a1 + v22 + 640);
        long long v25 = *(_OWORD *)(a1 + v22 + 560);
        *(_OWORD *)(v23 + 768) = *(_OWORD *)(a1 + v22 + 544);
        *(_OWORD *)(v23 + 784) = v25;
        long long v26 = *(_OWORD *)(a1 + v22 + 592);
        *(_OWORD *)(v23 + 800) = *(_OWORD *)(a1 + v22 + 576);
        *(_OWORD *)(v23 + 816) = v26;
        long long v27 = *(_OWORD *)(a1 + v22 + 496);
        *(_OWORD *)(v23 + 704) = *(_OWORD *)(a1 + v22 + 480);
        *(_OWORD *)(v23 + 720) = v27;
        long long v28 = *(_OWORD *)(a1 + v22 + 528);
        *(_OWORD *)(v23 + 736) = *(_OWORD *)(a1 + v22 + 512);
        *(_OWORD *)(v23 + 752) = v28;
        long long v29 = *(_OWORD *)(a1 + v22 + 464);
        *(_OWORD *)(v23 + 672) = *(_OWORD *)(a1 + v22 + 448);
        *(_OWORD *)(v23 + 688) = v29;
        *(_OWORD *)(a1 + v22 + 877) = *(_OWORD *)(a1 + v22 + 653);
        if (v22 == -448) {
          break;
        }
        v22 -= 224;
        if (v20 >= *(double *)(v23 + 232))
        {
          uint64_t v30 = a1 + v22 + 672;
          goto LABEL_13;
        }
      }
      uint64_t v30 = a1;
LABEL_13:
      *(void *)uint64_t v30 = v21;
      *(double *)(v30 + 8) = v20;
      *(_OWORD *)(v30 + 176) = v124;
      *(_OWORD *)(v30 + 192) = *(_OWORD *)v130;
      *(_OWORD *)(v30 + 205) = *(_OWORD *)&v130[13];
      *(_OWORD *)(v30 + 112) = v100;
      *(_OWORD *)(v30 + 128) = v106;
      *(_OWORD *)(v30 + 144) = v112;
      *(_OWORD *)(v30 + 160) = v118;
      *(_OWORD *)(v30 + 48) = v76;
      *(_OWORD *)(v30 + 64) = v82;
      *(_OWORD *)(v30 + 80) = v88;
      *(_OWORD *)(v30 + 96) = v94;
      ++v19;
      *(_OWORD *)(v30 + 16) = v64;
      *(_OWORD *)(v30 + 32) = v70;
      if (v19 == 8) {
        return v17 + 224 == a2;
      }
    }
    uint64_t v16 = v17;
    v18 += 224;
    v17 += 224;
    if (v17 == a2) {
      return 1;
    }
  }
}

double sub_1015A1948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1015A0F44((long long *)a1, (long long *)a2, (long long *)a3);
  double result = *(double *)(a4 + 8);
  if (result < *(double *)(a3 + 8))
  {
    long long v69 = *(_OWORD *)(a3 + 160);
    long long v72 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)long long v75 = *(_OWORD *)(a3 + 192);
    *(_OWORD *)&v75[16] = *(_OWORD *)(a3 + 208);
    long long v57 = *(_OWORD *)(a3 + 96);
    long long v60 = *(_OWORD *)(a3 + 112);
    long long v63 = *(_OWORD *)(a3 + 128);
    long long v66 = *(_OWORD *)(a3 + 144);
    long long v45 = *(_OWORD *)(a3 + 32);
    long long v48 = *(_OWORD *)(a3 + 48);
    long long v51 = *(_OWORD *)(a3 + 64);
    long long v54 = *(_OWORD *)(a3 + 80);
    long long v39 = *(_OWORD *)a3;
    long long v42 = *(_OWORD *)(a3 + 16);
    long long v9 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v9;
    long long v10 = *(_OWORD *)(a4 + 32);
    long long v11 = *(_OWORD *)(a4 + 48);
    long long v12 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a3 + 80) = v12;
    *(_OWORD *)(a3 + 32) = v10;
    *(_OWORD *)(a3 + 48) = v11;
    long long v13 = *(_OWORD *)(a4 + 96);
    long long v14 = *(_OWORD *)(a4 + 112);
    long long v15 = *(_OWORD *)(a4 + 144);
    *(_OWORD *)(a3 + 128) = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a3 + 144) = v15;
    *(_OWORD *)(a3 + 96) = v13;
    *(_OWORD *)(a3 + 112) = v14;
    long long v16 = *(_OWORD *)(a4 + 160);
    long long v17 = *(_OWORD *)(a4 + 176);
    long long v18 = *(_OWORD *)(a4 + 192);
    *(_OWORD *)(a3 + 205) = *(_OWORD *)(a4 + 205);
    *(_OWORD *)(a3 + 176) = v17;
    *(_OWORD *)(a3 + 192) = v18;
    *(_OWORD *)(a3 + 160) = v16;
    *(_OWORD *)(a4 + 160) = v69;
    *(_OWORD *)(a4 + 176) = v72;
    *(_OWORD *)(a4 + 192) = *(_OWORD *)v75;
    *(_OWORD *)(a4 + 205) = *(_OWORD *)&v75[13];
    *(_OWORD *)(a4 + 96) = v57;
    *(_OWORD *)(a4 + 112) = v60;
    *(_OWORD *)(a4 + 128) = v63;
    *(_OWORD *)(a4 + 144) = v66;
    *(_OWORD *)(a4 + 32) = v45;
    *(_OWORD *)(a4 + 48) = v48;
    *(_OWORD *)(a4 + 64) = v51;
    *(_OWORD *)(a4 + 80) = v54;
    *(_OWORD *)a4 = v39;
    *(_OWORD *)(a4 + 16) = v42;
    double result = *(double *)(a3 + 8);
    if (result < *(double *)(a2 + 8))
    {
      long long v70 = *(_OWORD *)(a2 + 160);
      long long v73 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)long long v76 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)&v76[16] = *(_OWORD *)(a2 + 208);
      long long v58 = *(_OWORD *)(a2 + 96);
      long long v61 = *(_OWORD *)(a2 + 112);
      long long v64 = *(_OWORD *)(a2 + 128);
      long long v67 = *(_OWORD *)(a2 + 144);
      long long v46 = *(_OWORD *)(a2 + 32);
      long long v49 = *(_OWORD *)(a2 + 48);
      long long v52 = *(_OWORD *)(a2 + 64);
      long long v55 = *(_OWORD *)(a2 + 80);
      long long v40 = *(_OWORD *)a2;
      long long v43 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v19;
      long long v20 = *(_OWORD *)(a3 + 32);
      long long v21 = *(_OWORD *)(a3 + 48);
      long long v22 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(a2 + 80) = v22;
      *(_OWORD *)(a2 + 32) = v20;
      *(_OWORD *)(a2 + 48) = v21;
      long long v23 = *(_OWORD *)(a3 + 96);
      long long v24 = *(_OWORD *)(a3 + 112);
      long long v25 = *(_OWORD *)(a3 + 144);
      *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
      *(_OWORD *)(a2 + 144) = v25;
      *(_OWORD *)(a2 + 96) = v23;
      *(_OWORD *)(a2 + 112) = v24;
      long long v26 = *(_OWORD *)(a3 + 160);
      long long v27 = *(_OWORD *)(a3 + 176);
      long long v28 = *(_OWORD *)(a3 + 192);
      *(_OWORD *)(a2 + 205) = *(_OWORD *)(a3 + 205);
      *(_OWORD *)(a2 + 176) = v27;
      *(_OWORD *)(a2 + 192) = v28;
      *(_OWORD *)(a2 + 160) = v26;
      *(_OWORD *)(a3 + 160) = v70;
      *(_OWORD *)(a3 + 176) = v73;
      *(_OWORD *)(a3 + 192) = *(_OWORD *)v76;
      *(_OWORD *)(a3 + 205) = *(_OWORD *)&v76[13];
      *(_OWORD *)(a3 + 96) = v58;
      *(_OWORD *)(a3 + 112) = v61;
      *(_OWORD *)(a3 + 128) = v64;
      *(_OWORD *)(a3 + 144) = v67;
      *(_OWORD *)(a3 + 32) = v46;
      *(_OWORD *)(a3 + 48) = v49;
      *(_OWORD *)(a3 + 64) = v52;
      *(_OWORD *)(a3 + 80) = v55;
      *(_OWORD *)a3 = v40;
      *(_OWORD *)(a3 + 16) = v43;
      double result = *(double *)(a2 + 8);
      if (result < *(double *)(a1 + 8))
      {
        long long v71 = *(_OWORD *)(a1 + 160);
        long long v74 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)long long v77 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v77[16] = *(_OWORD *)(a1 + 208);
        long long v59 = *(_OWORD *)(a1 + 96);
        long long v62 = *(_OWORD *)(a1 + 112);
        long long v65 = *(_OWORD *)(a1 + 128);
        long long v68 = *(_OWORD *)(a1 + 144);
        long long v47 = *(_OWORD *)(a1 + 32);
        long long v50 = *(_OWORD *)(a1 + 48);
        long long v53 = *(_OWORD *)(a1 + 64);
        long long v56 = *(_OWORD *)(a1 + 80);
        long long v41 = *(_OWORD *)a1;
        long long v44 = *(_OWORD *)(a1 + 16);
        long long v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        long long v30 = *(_OWORD *)(a2 + 32);
        long long v31 = *(_OWORD *)(a2 + 48);
        long long v32 = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 80) = v32;
        *(_OWORD *)(a1 + 32) = v30;
        *(_OWORD *)(a1 + 48) = v31;
        long long v33 = *(_OWORD *)(a2 + 96);
        long long v34 = *(_OWORD *)(a2 + 112);
        long long v35 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v35;
        *(_OWORD *)(a1 + 96) = v33;
        *(_OWORD *)(a1 + 112) = v34;
        long long v36 = *(_OWORD *)(a2 + 160);
        long long v37 = *(_OWORD *)(a2 + 176);
        long long v38 = *(_OWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 + 205);
        *(_OWORD *)(a1 + 176) = v37;
        *(_OWORD *)(a1 + 192) = v38;
        *(_OWORD *)(a1 + 160) = v36;
        *(_OWORD *)(a2 + 160) = v71;
        *(_OWORD *)(a2 + 176) = v74;
        *(_OWORD *)(a2 + 192) = *(_OWORD *)v77;
        *(_OWORD *)(a2 + 205) = *(_OWORD *)&v77[13];
        *(_OWORD *)(a2 + 96) = v59;
        *(_OWORD *)(a2 + 112) = v62;
        *(_OWORD *)(a2 + 128) = v65;
        *(_OWORD *)(a2 + 144) = v68;
        *(_OWORD *)(a2 + 32) = v47;
        *(_OWORD *)(a2 + 48) = v50;
        *(_OWORD *)(a2 + 64) = v53;
        *(_OWORD *)(a2 + 80) = v56;
        double result = *(double *)&v41;
        *(_OWORD *)a2 = v41;
        *(_OWORD *)(a2 + 16) = v44;
      }
    }
  }
  return result;
}

void sub_1015A1BEC(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
BOOL sub_1015A2E08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 216) < *(double *)(a1 + 8))
      {
        long long v123 = *(_OWORD *)(a1 + 160);
        long long v129 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)v135 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v135[16] = *(_OWORD *)(a1 + 208);
        long long v99 = *(_OWORD *)(a1 + 96);
        long long v105 = *(_OWORD *)(a1 + 112);
        long long v111 = *(_OWORD *)(a1 + 128);
        long long v117 = *(_OWORD *)(a1 + 144);
        long long v75 = *(_OWORD *)(a1 + 32);
        long long v81 = *(_OWORD *)(a1 + 48);
        long long v87 = *(_OWORD *)(a1 + 64);
        long long v93 = *(_OWORD *)(a1 + 80);
        long long v63 = *(_OWORD *)a1;
        long long v69 = *(_OWORD *)(a1 + 16);
        long long v6 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 224);
        *(_OWORD *)(a1 + 16) = v6;
        long long v7 = *(_OWORD *)(a2 - 192);
        long long v8 = *(_OWORD *)(a2 - 176);
        long long v9 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v8;
        long long v10 = *(_OWORD *)(a2 - 128);
        long long v11 = *(_OWORD *)(a2 - 112);
        long long v12 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 144) = v12;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 112) = v11;
        long long v13 = *(_OWORD *)(a2 - 64);
        long long v14 = *(_OWORD *)(a2 - 48);
        long long v15 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a2 - 64) = v123;
        *(_OWORD *)(a2 - 48) = v129;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v135;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v135[13];
        *(_OWORD *)(a2 - 128) = v99;
        *(_OWORD *)(a2 - 112) = v105;
        *(_OWORD *)(a2 - 96) = v111;
        *(_OWORD *)(a2 - 80) = v117;
        *(_OWORD *)(a2 - 192) = v75;
        *(_OWORD *)(a2 - 176) = v81;
        *(_OWORD *)(a2 - 160) = v87;
        *(_OWORD *)(a2 - 144) = v93;
        *(_OWORD *)(a2 - 224) = v63;
        *(_OWORD *)(a2 - 208) = v69;
      }
      return result;
    case 3:
      sub_1015A0F44((long long *)a1, (long long *)(a1 + 224), (long long *)(a2 - 224));
      return 1;
    case 4:
      sub_1015A1948(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1;
    case 5:
      double v31 = (long long *)(a1 + 224);
      unint64_t v32 = (long long *)(a1 + 448);
      long long v33 = (long long *)(a1 + 672);
      sub_1015A1948(a1, a1 + 224, a1 + 448, a1 + 672);
      if (*(double *)(a2 - 216) >= *(double *)(a1 + 680)) {
        return 1;
      }
      long long v125 = *(_OWORD *)(a1 + 832);
      long long v131 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)v136 = *(_OWORD *)(a1 + 864);
      *(_OWORD *)&v136[16] = *(_OWORD *)(a1 + 880);
      long long v101 = *(_OWORD *)(a1 + 768);
      long long v107 = *(_OWORD *)(a1 + 784);
      long long v113 = *(_OWORD *)(a1 + 800);
      long long v119 = *(_OWORD *)(a1 + 816);
      long long v77 = *(_OWORD *)(a1 + 704);
      long long v83 = *(_OWORD *)(a1 + 720);
      long long v89 = *(_OWORD *)(a1 + 736);
      long long v95 = *(_OWORD *)(a1 + 752);
      long long v65 = *v33;
      long long v71 = *(_OWORD *)(a1 + 688);
      long long v34 = *(_OWORD *)(a2 - 208);
      long long *v33 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)(a1 + 688) = v34;
      long long v35 = *(_OWORD *)(a2 - 192);
      long long v36 = *(_OWORD *)(a2 - 176);
      long long v37 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 704) = v35;
      *(_OWORD *)(a1 + 720) = v36;
      long long v38 = *(_OWORD *)(a2 - 128);
      long long v39 = *(_OWORD *)(a2 - 112);
      long long v40 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 816) = v40;
      *(_OWORD *)(a1 + 768) = v38;
      *(_OWORD *)(a1 + 784) = v39;
      long long v41 = *(_OWORD *)(a2 - 64);
      long long v42 = *(_OWORD *)(a2 - 48);
      long long v43 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 877) = *(_OWORD *)(a2 - 19);
      *(_OWORD *)(a1 + 848) = v42;
      *(_OWORD *)(a1 + 864) = v43;
      *(_OWORD *)(a1 + 832) = v41;
      *(_OWORD *)(a2 - 64) = v125;
      *(_OWORD *)(a2 - 48) = v131;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v136;
      *(_OWORD *)(a2 - 19) = *(_OWORD *)&v136[13];
      *(_OWORD *)(a2 - 128) = v101;
      *(_OWORD *)(a2 - 112) = v107;
      *(_OWORD *)(a2 - 96) = v113;
      *(_OWORD *)(a2 - 80) = v119;
      *(_OWORD *)(a2 - 192) = v77;
      *(_OWORD *)(a2 - 176) = v83;
      *(_OWORD *)(a2 - 160) = v89;
      *(_OWORD *)(a2 - 144) = v95;
      *(_OWORD *)(a2 - 224) = v65;
      *(_OWORD *)(a2 - 208) = v71;
      if (*(double *)(a1 + 680) >= *(double *)(a1 + 456)) {
        return 1;
      }
      long long v126 = *(_OWORD *)(a1 + 608);
      long long v132 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)BOOL v137 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)&v137[16] = *(_OWORD *)(a1 + 656);
      long long v102 = *(_OWORD *)(a1 + 544);
      long long v108 = *(_OWORD *)(a1 + 560);
      long long v114 = *(_OWORD *)(a1 + 576);
      long long v120 = *(_OWORD *)(a1 + 592);
      long long v78 = *(_OWORD *)(a1 + 480);
      long long v84 = *(_OWORD *)(a1 + 496);
      long long v90 = *(_OWORD *)(a1 + 512);
      long long v96 = *(_OWORD *)(a1 + 528);
      long long v66 = *v32;
      long long v72 = *(_OWORD *)(a1 + 464);
      long long v44 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 624) = v44;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 653) = *(_OWORD *)(a1 + 877);
      long long v45 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 560) = v45;
      long long v46 = *(_OWORD *)(a1 + 816);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a1 + 592) = v46;
      long long v47 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 496) = v47;
      long long v48 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 528) = v48;
      long long v49 = *(_OWORD *)(a1 + 688);
      *unint64_t v32 = *v33;
      *(_OWORD *)(a1 + 464) = v49;
      *(_OWORD *)(a1 + 832) = v126;
      *(_OWORD *)(a1 + 848) = v132;
      *(_OWORD *)(a1 + 864) = *(_OWORD *)v137;
      *(_OWORD *)(a1 + 877) = *(_OWORD *)&v137[13];
      *(_OWORD *)(a1 + 768) = v102;
      *(_OWORD *)(a1 + 784) = v108;
      *(_OWORD *)(a1 + 800) = v114;
      *(_OWORD *)(a1 + 816) = v120;
      *(_OWORD *)(a1 + 704) = v78;
      *(_OWORD *)(a1 + 720) = v84;
      *(_OWORD *)(a1 + 736) = v90;
      *(_OWORD *)(a1 + 752) = v96;
      BOOL v50 = *(double *)(a1 + 456) < *(double *)(a1 + 232);
      long long *v33 = v66;
      *(_OWORD *)(a1 + 688) = v72;
      if (!v50) {
        return 1;
      }
      long long v127 = *(_OWORD *)(a1 + 384);
      long long v133 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)uint64_t v138 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&v138[16] = *(_OWORD *)(a1 + 432);
      long long v103 = *(_OWORD *)(a1 + 320);
      long long v109 = *(_OWORD *)(a1 + 336);
      long long v115 = *(_OWORD *)(a1 + 352);
      long long v121 = *(_OWORD *)(a1 + 368);
      long long v79 = *(_OWORD *)(a1 + 256);
      long long v85 = *(_OWORD *)(a1 + 272);
      long long v91 = *(_OWORD *)(a1 + 288);
      long long v97 = *(_OWORD *)(a1 + 304);
      long long v67 = *v31;
      long long v73 = *(_OWORD *)(a1 + 240);
      long long v51 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 400) = v51;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 429) = *(_OWORD *)(a1 + 653);
      long long v52 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 336) = v52;
      long long v53 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 368) = v53;
      long long v54 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 272) = v54;
      long long v55 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 304) = v55;
      long long v56 = *(_OWORD *)(a1 + 464);
      *double v31 = *v32;
      *(_OWORD *)(a1 + 240) = v56;
      *(_OWORD *)(a1 + 608) = v127;
      *(_OWORD *)(a1 + 624) = v133;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v138;
      *(_OWORD *)(a1 + 653) = *(_OWORD *)&v138[13];
      *(_OWORD *)(a1 + 544) = v103;
      *(_OWORD *)(a1 + 560) = v109;
      *(_OWORD *)(a1 + 576) = v115;
      *(_OWORD *)(a1 + 592) = v121;
      *(_OWORD *)(a1 + 480) = v79;
      *(_OWORD *)(a1 + 496) = v85;
      *(_OWORD *)(a1 + 512) = v91;
      *(_OWORD *)(a1 + 528) = v97;
      BOOL v50 = *(double *)(a1 + 232) < *(double *)(a1 + 8);
      *unint64_t v32 = v67;
      *(_OWORD *)(a1 + 464) = v73;
      if (!v50) {
        return 1;
      }
      long long v128 = *(_OWORD *)(a1 + 160);
      long long v134 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)unint64_t v139 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v139[16] = *(_OWORD *)(a1 + 208);
      long long v104 = *(_OWORD *)(a1 + 96);
      long long v110 = *(_OWORD *)(a1 + 112);
      long long v116 = *(_OWORD *)(a1 + 128);
      long long v122 = *(_OWORD *)(a1 + 144);
      long long v80 = *(_OWORD *)(a1 + 32);
      long long v86 = *(_OWORD *)(a1 + 48);
      long long v92 = *(_OWORD *)(a1 + 64);
      long long v98 = *(_OWORD *)(a1 + 80);
      long long v68 = *(_OWORD *)a1;
      long long v74 = *(_OWORD *)(a1 + 16);
      long long v57 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 176) = v57;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 205) = *(_OWORD *)(a1 + 429);
      long long v58 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 112) = v58;
      long long v59 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 144) = v59;
      long long v60 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 48) = v60;
      long long v61 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 80) = v61;
      long long v62 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)a1 = *v31;
      *(_OWORD *)(a1 + 16) = v62;
      *(_OWORD *)(a1 + 384) = v128;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v139;
      *(_OWORD *)(a1 + 429) = *(_OWORD *)&v139[13];
      *(_OWORD *)(a1 + 320) = v104;
      *(_OWORD *)(a1 + 336) = v110;
      *(_OWORD *)(a1 + 352) = v116;
      *(_OWORD *)(a1 + 368) = v122;
      *(_OWORD *)(a1 + 256) = v80;
      *(_OWORD *)(a1 + 272) = v86;
      *(_OWORD *)(a1 + 288) = v92;
      *(_OWORD *)(a1 + 304) = v98;
      BOOL result = 1;
      *double v31 = v68;
      *(_OWORD *)(a1 + 240) = v74;
      return result;
    default:
      uint64_t v16 = a1 + 448;
      sub_1015A0F44((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448));
      uint64_t v17 = a1 + 672;
      if (a1 + 672 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    double v20 = *(double *)(v17 + 8);
    if (v20 < *(double *)(v16 + 8))
    {
      uint64_t v21 = *(void *)v17;
      long long v124 = *(_OWORD *)(v17 + 176);
      *(_OWORD *)long long v130 = *(_OWORD *)(v17 + 192);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v17 + 208);
      long long v100 = *(_OWORD *)(v17 + 112);
      long long v106 = *(_OWORD *)(v17 + 128);
      long long v112 = *(_OWORD *)(v17 + 144);
      long long v118 = *(_OWORD *)(v17 + 160);
      long long v76 = *(_OWORD *)(v17 + 48);
      long long v82 = *(_OWORD *)(v17 + 64);
      long long v88 = *(_OWORD *)(v17 + 80);
      long long v94 = *(_OWORD *)(v17 + 96);
      uint64_t v22 = v18;
      long long v64 = *(_OWORD *)(v17 + 16);
      long long v70 = *(_OWORD *)(v17 + 32);
      while (1)
      {
        uint64_t v23 = a1 + v22;
        long long v24 = *(_OWORD *)(a1 + v22 + 624);
        *(_OWORD *)(v23 + 832) = *(_OWORD *)(a1 + v22 + 608);
        *(_OWORD *)(v23 + 848) = v24;
        *(_OWORD *)(v23 + 864) = *(_OWORD *)(a1 + v22 + 640);
        long long v25 = *(_OWORD *)(a1 + v22 + 560);
        *(_OWORD *)(v23 + 768) = *(_OWORD *)(a1 + v22 + 544);
        *(_OWORD *)(v23 + 784) = v25;
        long long v26 = *(_OWORD *)(a1 + v22 + 592);
        *(_OWORD *)(v23 + 800) = *(_OWORD *)(a1 + v22 + 576);
        *(_OWORD *)(v23 + 816) = v26;
        long long v27 = *(_OWORD *)(a1 + v22 + 496);
        *(_OWORD *)(v23 + 704) = *(_OWORD *)(a1 + v22 + 480);
        *(_OWORD *)(v23 + 720) = v27;
        long long v28 = *(_OWORD *)(a1 + v22 + 528);
        *(_OWORD *)(v23 + 736) = *(_OWORD *)(a1 + v22 + 512);
        *(_OWORD *)(v23 + 752) = v28;
        long long v29 = *(_OWORD *)(a1 + v22 + 464);
        *(_OWORD *)(v23 + 672) = *(_OWORD *)(a1 + v22 + 448);
        *(_OWORD *)(v23 + 688) = v29;
        *(_OWORD *)(a1 + v22 + 877) = *(_OWORD *)(a1 + v22 + 653);
        if (v22 == -448) {
          break;
        }
        v22 -= 224;
        if (v20 >= *(double *)(v23 + 232))
        {
          uint64_t v30 = a1 + v22 + 672;
          goto LABEL_13;
        }
      }
      uint64_t v30 = a1;
LABEL_13:
      *(void *)uint64_t v30 = v21;
      *(double *)(v30 + 8) = v20;
      *(_OWORD *)(v30 + 176) = v124;
      *(_OWORD *)(v30 + 192) = *(_OWORD *)v130;
      *(_OWORD *)(v30 + 205) = *(_OWORD *)&v130[13];
      *(_OWORD *)(v30 + 112) = v100;
      *(_OWORD *)(v30 + 128) = v106;
      *(_OWORD *)(v30 + 144) = v112;
      *(_OWORD *)(v30 + 160) = v118;
      *(_OWORD *)(v30 + 48) = v76;
      *(_OWORD *)(v30 + 64) = v82;
      *(_OWORD *)(v30 + 80) = v88;
      *(_OWORD *)(v30 + 96) = v94;
      ++v19;
      *(_OWORD *)(v30 + 16) = v64;
      *(_OWORD *)(v30 + 32) = v70;
      if (v19 == 8) {
        return v17 + 224 == a2;
      }
    }
    uint64_t v16 = v17;
    v18 += 224;
    v17 += 224;
    if (v17 == a2) {
      return 1;
    }
  }
}

void *sub_1015A3458(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    BOOL result = sub_1015A34D4(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8 - 3);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1015A34B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1015A34D4(void *a1, unint64_t a2)
{
  if (a2 >= 0x124924924924925) {
    sub_1001D7FD4();
  }
  BOOL result = (char *)sub_1001F0E60((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[224 * v4];
  return result;
}

void sub_1015A352C(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 16) < *(double *)(v10 + 8))
                {
                  uint64_t v117 = *(void *)(v10 + 16);
                  long long v111 = *(_OWORD *)v10;
                  long long v49 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v49;
                  *(void *)(a2 - 8) = v117;
                  *(_OWORD *)(a2 - 24) = v111;
                }
                break;
              case 3uLL:
                sub_10119F8B4((long long *)v10, (double *)(v10 + 24), (double *)(a2 - 24));
                break;
              case 4uLL:
                sub_10119FC3C(v10, v10 + 24, v10 + 48, a2 - 24);
                break;
              case 5uLL:
                BOOL v50 = (long long *)(v10 + 24);
                long long v51 = (long long *)(v10 + 48);
                long long v52 = (long long *)(v10 + 72);
                sub_10119FC3C(v10, v10 + 24, v10 + 48, v10 + 72);
                if (*(double *)(a2 - 16) < *(double *)(v10 + 80))
                {
                  long long v53 = *v52;
                  uint64_t v54 = *(void *)(v10 + 88);
                  uint64_t v55 = *(void *)(a2 - 8);
                  *long long v52 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 88) = v55;
                  *(void *)(a2 - 8) = v54;
                  *(_OWORD *)(a2 - 24) = v53;
                  if (*(double *)(v10 + 80) < *(double *)(v10 + 56))
                  {
                    uint64_t v56 = *(void *)(v10 + 64);
                    long long v57 = *v51;
                    *long long v51 = *v52;
                    *(void *)(v10 + 64) = *(void *)(v10 + 88);
                    *long long v52 = v57;
                    *(void *)(v10 + 88) = v56;
                    if (*(double *)(v10 + 56) < *(double *)(v10 + 32))
                    {
                      uint64_t v58 = *(void *)(v10 + 40);
                      long long v59 = *v50;
                      *BOOL v50 = *v51;
                      *(void *)(v10 + 40) = *(void *)(v10 + 64);
                      *long long v51 = v59;
                      *(void *)(v10 + 64) = v58;
                      if (*(double *)(v10 + 32) < *(double *)(v10 + 8))
                      {
                        uint64_t v118 = *(void *)(v10 + 16);
                        long long v112 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v50;
                        *(void *)(v10 + 16) = *(void *)(v10 + 40);
                        *BOOL v50 = v112;
                        *(void *)(v10 + 40) = v118;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            long long v60 = (void *)(v10 + 24);
            BOOL v62 = v10 == a2 || v60 == (void *)a2;
            if (a4)
            {
              if (!v62)
              {
                uint64_t v63 = 0;
                unint64_t v64 = v10;
                do
                {
                  long long v65 = v60;
                  double v66 = *(double *)(v64 + 32);
                  if (v66 < *(double *)(v64 + 8))
                  {
                    uint64_t v67 = *v60;
                    uint64_t v68 = *(void *)(v64 + 40);
                    uint64_t v69 = v63;
                    while (1)
                    {
                      uint64_t v70 = v10 + v69;
                      *(_OWORD *)(v70 + 24) = *(_OWORD *)(v10 + v69);
                      *(void *)(v70 + 40) = *(void *)(v10 + v69 + 16);
                      if (!v69) {
                        break;
                      }
                      v69 -= 24;
                      if (v66 >= *(double *)(v70 - 16))
                      {
                        uint64_t v71 = v10 + v69 + 24;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v71 = v10;
LABEL_84:
                    *(void *)uint64_t v71 = v67;
                    *(double *)(v71 + 8) = v66;
                    *(void *)(v71 + 16) = v68;
                  }
                  long long v60 = v65 + 3;
                  v63 += 24;
                  unint64_t v64 = (unint64_t)v65;
                }
                while (v65 + 3 != (void *)a2);
              }
            }
            else if (!v62)
            {
              do
              {
                long long v102 = v60;
                double v103 = *(double *)(a1 + 32);
                if (v103 < *(double *)(a1 + 8))
                {
                  uint64_t v104 = *v60;
                  uint64_t v105 = *(void *)(a1 + 40);
                  long long v106 = (double *)v60;
                  do
                  {
                    *(_OWORD *)long long v106 = *(_OWORD *)(v106 - 3);
                    v106[2] = *(v106 - 1);
                    double v107 = *(v106 - 5);
                    v106 -= 3;
                  }
                  while (v103 < v107);
                  *(void *)long long v106 = v104;
                  v106[1] = v103;
                  *((void *)v106 + 2) = v105;
                }
                v60 += 3;
                a1 = (unint64_t)v102;
              }
              while (v102 + 3 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v72 = (v12 - 2) >> 1;
              int64_t v73 = v72;
              do
              {
                int64_t v74 = v73;
                if (v72 >= v73)
                {
                  uint64_t v75 = (2 * v73) | 1;
                  unint64_t v76 = v10 + 24 * v75;
                  if (2 * v74 + 2 < (uint64_t)v12 && *(double *)(v10 + 24 * v75 + 8) < *(double *)(v76 + 32))
                  {
                    v76 += 24;
                    uint64_t v75 = 2 * v74 + 2;
                  }
                  double v77 = *(double *)(v10 + 24 * v74 + 8);
                  if (*(double *)(v76 + 8) >= v77)
                  {
                    unint64_t v78 = v10 + 24 * v74;
                    uint64_t v79 = *(void *)v78;
                    uint64_t v80 = *(void *)(v78 + 16);
                    do
                    {
                      unint64_t v81 = v78;
                      unint64_t v78 = v76;
                      long long v82 = *(_OWORD *)v76;
                      *(void *)(v81 + 16) = *(void *)(v76 + 16);
                      *(_OWORD *)unint64_t v81 = v82;
                      if (v72 < v75) {
                        break;
                      }
                      uint64_t v83 = (2 * v75) | 1;
                      unint64_t v76 = v10 + 24 * v83;
                      uint64_t v84 = 2 * v75 + 2;
                      if (v84 < (uint64_t)v12 && *(double *)(v10 + 24 * v83 + 8) < *(double *)(v76 + 32))
                      {
                        v76 += 24;
                        uint64_t v83 = v84;
                      }
                      uint64_t v75 = v83;
                    }
                    while (*(double *)(v76 + 8) >= v77);
                    *(void *)unint64_t v78 = v79;
                    *(double *)(v78 + 8) = v77;
                    *(void *)(v78 + 16) = v80;
                  }
                }
                int64_t v73 = v74 - 1;
              }
              while (v74);
              int64_t v85 = v11 / 0x18uLL;
              do
              {
                uint64_t v86 = 0;
                uint64_t v119 = *(void *)(v10 + 16);
                long long v113 = *(_OWORD *)v10;
                unint64_t v87 = v10;
                do
                {
                  unint64_t v88 = v87;
                  uint64_t v89 = v86 + 1;
                  v87 += 24 * (v86 + 1);
                  uint64_t v90 = 2 * v86;
                  uint64_t v86 = (2 * v86) | 1;
                  int64_t v91 = v90 + 2;
                  if (v91 < v85 && *(double *)(v88 + 24 * v89 + 8) < *(double *)(v87 + 32))
                  {
                    v87 += 24;
                    uint64_t v86 = v91;
                  }
                  long long v92 = *(_OWORD *)v87;
                  *(void *)(v88 + 16) = *(void *)(v87 + 16);
                  *(_OWORD *)unint64_t v88 = v92;
                }
                while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                a2 -= 24;
                if (v87 == a2)
                {
                  *(void *)(v87 + 16) = v119;
                  *(_OWORD *)unint64_t v87 = v113;
                }
                else
                {
                  long long v93 = *(_OWORD *)a2;
                  *(void *)(v87 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)unint64_t v87 = v93;
                  *(void *)(a2 + 16) = v119;
                  *(_OWORD *)a2 = v113;
                  uint64_t v94 = v87 - v10 + 24;
                  if (v94 >= 25)
                  {
                    unint64_t v95 = (v94 / 0x18uLL - 2) >> 1;
                    double v96 = *(double *)(v87 + 8);
                    if (*(double *)(v10 + 24 * v95 + 8) < v96)
                    {
                      uint64_t v97 = *(void *)v87;
                      uint64_t v98 = *(void *)(v87 + 16);
                      do
                      {
                        unint64_t v99 = v87;
                        unint64_t v87 = v10 + 24 * v95;
                        long long v100 = *(_OWORD *)v87;
                        *(void *)(v99 + 16) = *(void *)(v87 + 16);
                        *(_OWORD *)unint64_t v99 = v100;
                        if (!v95) {
                          break;
                        }
                        unint64_t v95 = (v95 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 24 * v95 + 8) < v96);
                      *(void *)unint64_t v87 = v97;
                      *(double *)(v87 + 8) = v96;
                      *(void *)(v87 + 16) = v98;
                    }
                  }
                }
              }
              while (v85-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 24 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_10119F8B4((long long *)a1, (double *)(a1 + 24 * (v12 >> 1)), (double *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            uint64_t v16 = (double *)(a1 + 24 * v13 - 24);
            sub_10119F8B4((long long *)(a1 + 24), v16, (double *)(a2 - 48));
            uint64_t v17 = (double *)(a1 + 24 + 8 * v15);
            sub_10119F8B4((long long *)(a1 + 48), v17, (double *)(a2 - 72));
            sub_10119F8B4((long long *)v16, (double *)v14, v17);
            uint64_t v114 = *(void *)(a1 + 16);
            long long v108 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            *(void *)(v14 + 16) = v114;
            *(_OWORD *)unint64_t v14 = v108;
          }
          else
          {
            sub_10119F8B4((long long *)(a1 + 24 * (v12 >> 1)), (double *)a1, (double *)(a2 - 24));
          }
          --a3;
          if (a4) {
            break;
          }
          double v19 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 16) < v19) {
            goto LABEL_12;
          }
          if (v19 >= *(double *)(a2 - 16))
          {
            unint64_t v38 = a1 + 24;
            do
            {
              unint64_t v10 = v38;
              if (v38 >= a2) {
                break;
              }
              double v39 = *(double *)(v38 + 8);
              v38 += 24;
            }
            while (v19 >= v39);
          }
          else
          {
            unint64_t v36 = a1;
            do
            {
              unint64_t v10 = v36 + 24;
              double v37 = *(double *)(v36 + 32);
              v36 += 24;
            }
            while (v19 >= v37);
          }
          unint64_t v40 = a2;
          if (v10 < a2)
          {
            unint64_t v41 = a2;
            do
            {
              unint64_t v40 = v41 - 24;
              double v42 = *(double *)(v41 - 16);
              v41 -= 24;
            }
            while (v19 < v42);
          }
          uint64_t v43 = *(void *)a1;
          uint64_t v44 = *(void *)(a1 + 16);
          while (v10 < v40)
          {
            uint64_t v116 = *(void *)(v10 + 16);
            long long v110 = *(_OWORD *)v10;
            long long v45 = *(_OWORD *)v40;
            *(void *)(v10 + 16) = *(void *)(v40 + 16);
            *(_OWORD *)unint64_t v10 = v45;
            *(void *)(v40 + 16) = v116;
            *(_OWORD *)unint64_t v40 = v110;
            do
            {
              double v46 = *(double *)(v10 + 32);
              v10 += 24;
            }
            while (v19 >= v46);
            do
            {
              double v47 = *(double *)(v40 - 16);
              v40 -= 24;
            }
            while (v19 < v47);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v48 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v48;
          }
          a4 = 0;
          *(void *)(v10 - 24) = v43;
          *(double *)(v10 - 16) = v19;
          *(void *)(v10 - 8) = v44;
        }
        double v19 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void *)(a1 + 16);
        do
        {
          double v23 = *(double *)(a1 + v20 + 32);
          v20 += 24;
        }
        while (v23 < v19);
        unint64_t v24 = a1 + v20;
        unint64_t v25 = a2;
        if (v20 == 24)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 24;
            double v29 = *(double *)(v28 - 16);
            v28 -= 24;
            if (v29 < v19) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 24;
            double v27 = *(double *)(v25 - 16);
            v25 -= 24;
          }
          while (v27 >= v19);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v115 = *(void *)(v10 + 16);
            long long v109 = *(_OWORD *)v10;
            long long v31 = *(_OWORD *)v30;
            *(void *)(v10 + 16) = *(void *)(v30 + 16);
            *(_OWORD *)unint64_t v10 = v31;
            *(void *)(v30 + 16) = v115;
            *(_OWORD *)unint64_t v30 = v109;
            do
            {
              double v32 = *(double *)(v10 + 32);
              v10 += 24;
            }
            while (v32 < v19);
            do
            {
              double v33 = *(double *)(v30 - 16);
              v30 -= 24;
            }
            while (v33 >= v19);
          }
          while (v10 < v30);
        }
        if (v10 - 24 != a1)
        {
          long long v34 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v34;
        }
        *(void *)(v10 - 24) = v21;
        *(double *)(v10 - 16) = v19;
        *(void *)(v10 - 8) = v22;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        sub_1015A352C(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = sub_1015A3E18(a1, v10 - 24);
      if (sub_1015A3E18(v10, a2)) {
        break;
      }
      if (!v35) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 24;
    if (!v35) {
      continue;
    }
    break;
  }
}

BOOL sub_1015A3E18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      sub_10119F8B4((long long *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_10119FC3C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      double v19 = (long long *)(a1 + 24);
      uint64_t v20 = (long long *)(a1 + 48);
      uint64_t v21 = (long long *)(a1 + 72);
      sub_10119FC3C(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        uint64_t v22 = *(void *)(a1 + 88);
        long long v23 = *v21;
        uint64_t v24 = *(void *)(a2 - 8);
        *uint64_t v21 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 88) = v24;
        *(_OWORD *)(a2 - 24) = v23;
        *(void *)(a2 - 8) = v22;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          uint64_t v25 = *(void *)(a1 + 64);
          long long v26 = *v20;
          long long *v20 = *v21;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v21 = v26;
          *(void *)(a1 + 88) = v25;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            uint64_t v27 = *(void *)(a1 + 40);
            long long v28 = *v19;
            *double v19 = *v20;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            long long *v20 = v28;
            *(void *)(a1 + 64) = v27;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              uint64_t v29 = *(void *)(a1 + 16);
              long long v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *double v19 = v30;
              *(void *)(a1 + 40) = v29;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 48;
      sub_10119F8B4((long long *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = *(void *)(v10 + 16);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v13 >= *(double *)(v17 + 32))
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(void *)(v18 + 16) = v15;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

void sub_1015A40B0(unint64_t a1, long long *a2, uint64_t a3, char a4)
{
BOOL sub_1015A52CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(double *)(a2 - 216) < *(double *)(a1 + 8))
      {
        long long v123 = *(_OWORD *)(a1 + 160);
        long long v129 = *(_OWORD *)(a1 + 176);
        *(_OWORD *)v135 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v135[16] = *(_OWORD *)(a1 + 208);
        long long v99 = *(_OWORD *)(a1 + 96);
        long long v105 = *(_OWORD *)(a1 + 112);
        long long v111 = *(_OWORD *)(a1 + 128);
        long long v117 = *(_OWORD *)(a1 + 144);
        long long v75 = *(_OWORD *)(a1 + 32);
        long long v81 = *(_OWORD *)(a1 + 48);
        long long v87 = *(_OWORD *)(a1 + 64);
        long long v93 = *(_OWORD *)(a1 + 80);
        long long v63 = *(_OWORD *)a1;
        long long v69 = *(_OWORD *)(a1 + 16);
        long long v6 = *(_OWORD *)(a2 - 208);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 224);
        *(_OWORD *)(a1 + 16) = v6;
        long long v7 = *(_OWORD *)(a2 - 192);
        long long v8 = *(_OWORD *)(a2 - 176);
        long long v9 = *(_OWORD *)(a2 - 144);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 - 160);
        *(_OWORD *)(a1 + 80) = v9;
        *(_OWORD *)(a1 + 32) = v7;
        *(_OWORD *)(a1 + 48) = v8;
        long long v10 = *(_OWORD *)(a2 - 128);
        long long v11 = *(_OWORD *)(a2 - 112);
        long long v12 = *(_OWORD *)(a2 - 80);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 - 96);
        *(_OWORD *)(a1 + 144) = v12;
        *(_OWORD *)(a1 + 96) = v10;
        *(_OWORD *)(a1 + 112) = v11;
        long long v13 = *(_OWORD *)(a2 - 64);
        long long v14 = *(_OWORD *)(a2 - 48);
        long long v15 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 205) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(a1 + 176) = v14;
        *(_OWORD *)(a1 + 192) = v15;
        *(_OWORD *)(a1 + 160) = v13;
        *(_OWORD *)(a2 - 64) = v123;
        *(_OWORD *)(a2 - 48) = v129;
        *(_OWORD *)(a2 - 32) = *(_OWORD *)v135;
        *(_OWORD *)(a2 - 19) = *(_OWORD *)&v135[13];
        *(_OWORD *)(a2 - 128) = v99;
        *(_OWORD *)(a2 - 112) = v105;
        *(_OWORD *)(a2 - 96) = v111;
        *(_OWORD *)(a2 - 80) = v117;
        *(_OWORD *)(a2 - 192) = v75;
        *(_OWORD *)(a2 - 176) = v81;
        *(_OWORD *)(a2 - 160) = v87;
        *(_OWORD *)(a2 - 144) = v93;
        *(_OWORD *)(a2 - 224) = v63;
        *(_OWORD *)(a2 - 208) = v69;
      }
      return result;
    case 3:
      sub_1015A0F44((long long *)a1, (long long *)(a1 + 224), (long long *)(a2 - 224));
      return 1;
    case 4:
      sub_1015A1948(a1, a1 + 224, a1 + 448, a2 - 224);
      return 1;
    case 5:
      double v31 = (long long *)(a1 + 224);
      unint64_t v32 = (long long *)(a1 + 448);
      double v33 = (long long *)(a1 + 672);
      sub_1015A1948(a1, a1 + 224, a1 + 448, a1 + 672);
      if (*(double *)(a2 - 216) >= *(double *)(a1 + 680)) {
        return 1;
      }
      long long v125 = *(_OWORD *)(a1 + 832);
      long long v131 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)v136 = *(_OWORD *)(a1 + 864);
      *(_OWORD *)&v136[16] = *(_OWORD *)(a1 + 880);
      long long v101 = *(_OWORD *)(a1 + 768);
      long long v107 = *(_OWORD *)(a1 + 784);
      long long v113 = *(_OWORD *)(a1 + 800);
      long long v119 = *(_OWORD *)(a1 + 816);
      long long v77 = *(_OWORD *)(a1 + 704);
      long long v83 = *(_OWORD *)(a1 + 720);
      long long v89 = *(_OWORD *)(a1 + 736);
      long long v95 = *(_OWORD *)(a1 + 752);
      long long v65 = *v33;
      long long v71 = *(_OWORD *)(a1 + 688);
      long long v34 = *(_OWORD *)(a2 - 208);
      long long *v33 = *(_OWORD *)(a2 - 224);
      *(_OWORD *)(a1 + 688) = v34;
      long long v35 = *(_OWORD *)(a2 - 192);
      long long v36 = *(_OWORD *)(a2 - 176);
      long long v37 = *(_OWORD *)(a2 - 144);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 - 160);
      *(_OWORD *)(a1 + 752) = v37;
      *(_OWORD *)(a1 + 704) = v35;
      *(_OWORD *)(a1 + 720) = v36;
      long long v38 = *(_OWORD *)(a2 - 128);
      long long v39 = *(_OWORD *)(a2 - 112);
      long long v40 = *(_OWORD *)(a2 - 80);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 - 96);
      *(_OWORD *)(a1 + 816) = v40;
      *(_OWORD *)(a1 + 768) = v38;
      *(_OWORD *)(a1 + 784) = v39;
      long long v41 = *(_OWORD *)(a2 - 64);
      long long v42 = *(_OWORD *)(a2 - 48);
      long long v43 = *(_OWORD *)(a2 - 32);
      *(_OWORD *)(a1 + 877) = *(_OWORD *)(a2 - 19);
      *(_OWORD *)(a1 + 848) = v42;
      *(_OWORD *)(a1 + 864) = v43;
      *(_OWORD *)(a1 + 832) = v41;
      *(_OWORD *)(a2 - 64) = v125;
      *(_OWORD *)(a2 - 48) = v131;
      *(_OWORD *)(a2 - 32) = *(_OWORD *)v136;
      *(_OWORD *)(a2 - 19) = *(_OWORD *)&v136[13];
      *(_OWORD *)(a2 - 128) = v101;
      *(_OWORD *)(a2 - 112) = v107;
      *(_OWORD *)(a2 - 96) = v113;
      *(_OWORD *)(a2 - 80) = v119;
      *(_OWORD *)(a2 - 192) = v77;
      *(_OWORD *)(a2 - 176) = v83;
      *(_OWORD *)(a2 - 160) = v89;
      *(_OWORD *)(a2 - 144) = v95;
      *(_OWORD *)(a2 - 224) = v65;
      *(_OWORD *)(a2 - 208) = v71;
      if (*(double *)(a1 + 680) >= *(double *)(a1 + 456)) {
        return 1;
      }
      long long v126 = *(_OWORD *)(a1 + 608);
      long long v132 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)BOOL v137 = *(_OWORD *)(a1 + 640);
      *(_OWORD *)&v137[16] = *(_OWORD *)(a1 + 656);
      long long v102 = *(_OWORD *)(a1 + 544);
      long long v108 = *(_OWORD *)(a1 + 560);
      long long v114 = *(_OWORD *)(a1 + 576);
      long long v120 = *(_OWORD *)(a1 + 592);
      long long v78 = *(_OWORD *)(a1 + 480);
      long long v84 = *(_OWORD *)(a1 + 496);
      long long v90 = *(_OWORD *)(a1 + 512);
      long long v96 = *(_OWORD *)(a1 + 528);
      long long v66 = *v32;
      long long v72 = *(_OWORD *)(a1 + 464);
      long long v44 = *(_OWORD *)(a1 + 848);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 832);
      *(_OWORD *)(a1 + 624) = v44;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 864);
      *(_OWORD *)(a1 + 653) = *(_OWORD *)(a1 + 877);
      long long v45 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 544) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 560) = v45;
      long long v46 = *(_OWORD *)(a1 + 816);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 800);
      *(_OWORD *)(a1 + 592) = v46;
      long long v47 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 480) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 496) = v47;
      long long v48 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 512) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 528) = v48;
      long long v49 = *(_OWORD *)(a1 + 688);
      *unint64_t v32 = *v33;
      *(_OWORD *)(a1 + 464) = v49;
      *(_OWORD *)(a1 + 832) = v126;
      *(_OWORD *)(a1 + 848) = v132;
      *(_OWORD *)(a1 + 864) = *(_OWORD *)v137;
      *(_OWORD *)(a1 + 877) = *(_OWORD *)&v137[13];
      *(_OWORD *)(a1 + 768) = v102;
      *(_OWORD *)(a1 + 784) = v108;
      *(_OWORD *)(a1 + 800) = v114;
      *(_OWORD *)(a1 + 816) = v120;
      *(_OWORD *)(a1 + 704) = v78;
      *(_OWORD *)(a1 + 720) = v84;
      *(_OWORD *)(a1 + 736) = v90;
      *(_OWORD *)(a1 + 752) = v96;
      BOOL v50 = *(double *)(a1 + 456) < *(double *)(a1 + 232);
      long long *v33 = v66;
      *(_OWORD *)(a1 + 688) = v72;
      if (!v50) {
        return 1;
      }
      long long v127 = *(_OWORD *)(a1 + 384);
      long long v133 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)uint64_t v138 = *(_OWORD *)(a1 + 416);
      *(_OWORD *)&v138[16] = *(_OWORD *)(a1 + 432);
      long long v103 = *(_OWORD *)(a1 + 320);
      long long v109 = *(_OWORD *)(a1 + 336);
      long long v115 = *(_OWORD *)(a1 + 352);
      long long v121 = *(_OWORD *)(a1 + 368);
      long long v79 = *(_OWORD *)(a1 + 256);
      long long v85 = *(_OWORD *)(a1 + 272);
      long long v91 = *(_OWORD *)(a1 + 288);
      long long v97 = *(_OWORD *)(a1 + 304);
      long long v67 = *v31;
      long long v73 = *(_OWORD *)(a1 + 240);
      long long v51 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 400) = v51;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 429) = *(_OWORD *)(a1 + 653);
      long long v52 = *(_OWORD *)(a1 + 560);
      *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 544);
      *(_OWORD *)(a1 + 336) = v52;
      long long v53 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 368) = v53;
      long long v54 = *(_OWORD *)(a1 + 496);
      *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 480);
      *(_OWORD *)(a1 + 272) = v54;
      long long v55 = *(_OWORD *)(a1 + 528);
      *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 512);
      *(_OWORD *)(a1 + 304) = v55;
      long long v56 = *(_OWORD *)(a1 + 464);
      *double v31 = *v32;
      *(_OWORD *)(a1 + 240) = v56;
      *(_OWORD *)(a1 + 608) = v127;
      *(_OWORD *)(a1 + 624) = v133;
      *(_OWORD *)(a1 + 640) = *(_OWORD *)v138;
      *(_OWORD *)(a1 + 653) = *(_OWORD *)&v138[13];
      *(_OWORD *)(a1 + 544) = v103;
      *(_OWORD *)(a1 + 560) = v109;
      *(_OWORD *)(a1 + 576) = v115;
      *(_OWORD *)(a1 + 592) = v121;
      *(_OWORD *)(a1 + 480) = v79;
      *(_OWORD *)(a1 + 496) = v85;
      *(_OWORD *)(a1 + 512) = v91;
      *(_OWORD *)(a1 + 528) = v97;
      BOOL v50 = *(double *)(a1 + 232) < *(double *)(a1 + 8);
      *unint64_t v32 = v67;
      *(_OWORD *)(a1 + 464) = v73;
      if (!v50) {
        return 1;
      }
      long long v128 = *(_OWORD *)(a1 + 160);
      long long v134 = *(_OWORD *)(a1 + 176);
      *(_OWORD *)unint64_t v139 = *(_OWORD *)(a1 + 192);
      *(_OWORD *)&v139[16] = *(_OWORD *)(a1 + 208);
      long long v104 = *(_OWORD *)(a1 + 96);
      long long v110 = *(_OWORD *)(a1 + 112);
      long long v116 = *(_OWORD *)(a1 + 128);
      long long v122 = *(_OWORD *)(a1 + 144);
      long long v80 = *(_OWORD *)(a1 + 32);
      long long v86 = *(_OWORD *)(a1 + 48);
      long long v92 = *(_OWORD *)(a1 + 64);
      long long v98 = *(_OWORD *)(a1 + 80);
      long long v68 = *(_OWORD *)a1;
      long long v74 = *(_OWORD *)(a1 + 16);
      long long v57 = *(_OWORD *)(a1 + 400);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a1 + 384);
      *(_OWORD *)(a1 + 176) = v57;
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 416);
      *(_OWORD *)(a1 + 205) = *(_OWORD *)(a1 + 429);
      long long v58 = *(_OWORD *)(a1 + 336);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a1 + 320);
      *(_OWORD *)(a1 + 112) = v58;
      long long v59 = *(_OWORD *)(a1 + 368);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a1 + 352);
      *(_OWORD *)(a1 + 144) = v59;
      long long v60 = *(_OWORD *)(a1 + 272);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 256);
      *(_OWORD *)(a1 + 48) = v60;
      long long v61 = *(_OWORD *)(a1 + 304);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 288);
      *(_OWORD *)(a1 + 80) = v61;
      long long v62 = *(_OWORD *)(a1 + 240);
      *(_OWORD *)a1 = *v31;
      *(_OWORD *)(a1 + 16) = v62;
      *(_OWORD *)(a1 + 384) = v128;
      *(_OWORD *)(a1 + 400) = v134;
      *(_OWORD *)(a1 + 416) = *(_OWORD *)v139;
      *(_OWORD *)(a1 + 429) = *(_OWORD *)&v139[13];
      *(_OWORD *)(a1 + 320) = v104;
      *(_OWORD *)(a1 + 336) = v110;
      *(_OWORD *)(a1 + 352) = v116;
      *(_OWORD *)(a1 + 368) = v122;
      *(_OWORD *)(a1 + 256) = v80;
      *(_OWORD *)(a1 + 272) = v86;
      *(_OWORD *)(a1 + 288) = v92;
      *(_OWORD *)(a1 + 304) = v98;
      BOOL result = 1;
      *double v31 = v68;
      *(_OWORD *)(a1 + 240) = v74;
      return result;
    default:
      uint64_t v16 = a1 + 448;
      sub_1015A0F44((long long *)a1, (long long *)(a1 + 224), (long long *)(a1 + 448));
      uint64_t v17 = a1 + 672;
      if (a1 + 672 == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    double v20 = *(double *)(v17 + 8);
    if (v20 < *(double *)(v16 + 8))
    {
      uint64_t v21 = *(void *)v17;
      long long v124 = *(_OWORD *)(v17 + 176);
      *(_OWORD *)long long v130 = *(_OWORD *)(v17 + 192);
      *(_OWORD *)&v130[16] = *(_OWORD *)(v17 + 208);
      long long v100 = *(_OWORD *)(v17 + 112);
      long long v106 = *(_OWORD *)(v17 + 128);
      long long v112 = *(_OWORD *)(v17 + 144);
      long long v118 = *(_OWORD *)(v17 + 160);
      long long v76 = *(_OWORD *)(v17 + 48);
      long long v82 = *(_OWORD *)(v17 + 64);
      long long v88 = *(_OWORD *)(v17 + 80);
      long long v94 = *(_OWORD *)(v17 + 96);
      uint64_t v22 = v18;
      long long v64 = *(_OWORD *)(v17 + 16);
      long long v70 = *(_OWORD *)(v17 + 32);
      while (1)
      {
        uint64_t v23 = a1 + v22;
        long long v24 = *(_OWORD *)(a1 + v22 + 624);
        *(_OWORD *)(v23 + 832) = *(_OWORD *)(a1 + v22 + 608);
        *(_OWORD *)(v23 + 848) = v24;
        *(_OWORD *)(v23 + 864) = *(_OWORD *)(a1 + v22 + 640);
        long long v25 = *(_OWORD *)(a1 + v22 + 560);
        *(_OWORD *)(v23 + 768) = *(_OWORD *)(a1 + v22 + 544);
        *(_OWORD *)(v23 + 784) = v25;
        long long v26 = *(_OWORD *)(a1 + v22 + 592);
        *(_OWORD *)(v23 + 800) = *(_OWORD *)(a1 + v22 + 576);
        *(_OWORD *)(v23 + 816) = v26;
        long long v27 = *(_OWORD *)(a1 + v22 + 496);
        *(_OWORD *)(v23 + 704) = *(_OWORD *)(a1 + v22 + 480);
        *(_OWORD *)(v23 + 720) = v27;
        long long v28 = *(_OWORD *)(a1 + v22 + 528);
        *(_OWORD *)(v23 + 736) = *(_OWORD *)(a1 + v22 + 512);
        *(_OWORD *)(v23 + 752) = v28;
        long long v29 = *(_OWORD *)(a1 + v22 + 464);
        *(_OWORD *)(v23 + 672) = *(_OWORD *)(a1 + v22 + 448);
        *(_OWORD *)(v23 + 688) = v29;
        *(_OWORD *)(a1 + v22 + 877) = *(_OWORD *)(a1 + v22 + 653);
        if (v22 == -448) {
          break;
        }
        v22 -= 224;
        if (v20 >= *(double *)(v23 + 232))
        {
          uint64_t v30 = a1 + v22 + 672;
          goto LABEL_13;
        }
      }
      uint64_t v30 = a1;
LABEL_13:
      *(void *)uint64_t v30 = v21;
      *(double *)(v30 + 8) = v20;
      *(_OWORD *)(v30 + 176) = v124;
      *(_OWORD *)(v30 + 192) = *(_OWORD *)v130;
      *(_OWORD *)(v30 + 205) = *(_OWORD *)&v130[13];
      *(_OWORD *)(v30 + 112) = v100;
      *(_OWORD *)(v30 + 128) = v106;
      *(_OWORD *)(v30 + 144) = v112;
      *(_OWORD *)(v30 + 160) = v118;
      *(_OWORD *)(v30 + 48) = v76;
      *(_OWORD *)(v30 + 64) = v82;
      *(_OWORD *)(v30 + 80) = v88;
      *(_OWORD *)(v30 + 96) = v94;
      ++v19;
      *(_OWORD *)(v30 + 16) = v64;
      *(_OWORD *)(v30 + 32) = v70;
      if (v19 == 8) {
        return v17 + 224 == a2;
      }
    }
    uint64_t v16 = v17;
    v18 += 224;
    v17 += 224;
    if (v17 == a2) {
      return 1;
    }
  }
}

void sub_1015A591C(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if (*(double *)(a2 - 16) < *(double *)(v10 + 8))
                {
                  uint64_t v117 = *(void *)(v10 + 16);
                  long long v111 = *(_OWORD *)v10;
                  long long v49 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 16) = *(void *)(a2 - 8);
                  *(_OWORD *)unint64_t v10 = v49;
                  *(void *)(a2 - 8) = v117;
                  *(_OWORD *)(a2 - 24) = v111;
                }
                break;
              case 3uLL:
                sub_10119F8B4((long long *)v10, (double *)(v10 + 24), (double *)(a2 - 24));
                break;
              case 4uLL:
                sub_10119FC3C(v10, v10 + 24, v10 + 48, a2 - 24);
                break;
              case 5uLL:
                BOOL v50 = (long long *)(v10 + 24);
                long long v51 = (long long *)(v10 + 48);
                long long v52 = (long long *)(v10 + 72);
                sub_10119FC3C(v10, v10 + 24, v10 + 48, v10 + 72);
                if (*(double *)(a2 - 16) < *(double *)(v10 + 80))
                {
                  long long v53 = *v52;
                  uint64_t v54 = *(void *)(v10 + 88);
                  uint64_t v55 = *(void *)(a2 - 8);
                  *long long v52 = *(_OWORD *)(a2 - 24);
                  *(void *)(v10 + 88) = v55;
                  *(void *)(a2 - 8) = v54;
                  *(_OWORD *)(a2 - 24) = v53;
                  if (*(double *)(v10 + 80) < *(double *)(v10 + 56))
                  {
                    uint64_t v56 = *(void *)(v10 + 64);
                    long long v57 = *v51;
                    *long long v51 = *v52;
                    *(void *)(v10 + 64) = *(void *)(v10 + 88);
                    *long long v52 = v57;
                    *(void *)(v10 + 88) = v56;
                    if (*(double *)(v10 + 56) < *(double *)(v10 + 32))
                    {
                      uint64_t v58 = *(void *)(v10 + 40);
                      long long v59 = *v50;
                      *BOOL v50 = *v51;
                      *(void *)(v10 + 40) = *(void *)(v10 + 64);
                      *long long v51 = v59;
                      *(void *)(v10 + 64) = v58;
                      if (*(double *)(v10 + 32) < *(double *)(v10 + 8))
                      {
                        uint64_t v118 = *(void *)(v10 + 16);
                        long long v112 = *(_OWORD *)v10;
                        *(_OWORD *)unint64_t v10 = *v50;
                        *(void *)(v10 + 16) = *(void *)(v10 + 40);
                        *BOOL v50 = v112;
                        *(void *)(v10 + 40) = v118;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 575)
          {
            long long v60 = (void *)(v10 + 24);
            BOOL v62 = v10 == a2 || v60 == (void *)a2;
            if (a4)
            {
              if (!v62)
              {
                uint64_t v63 = 0;
                unint64_t v64 = v10;
                do
                {
                  long long v65 = v60;
                  double v66 = *(double *)(v64 + 32);
                  if (v66 < *(double *)(v64 + 8))
                  {
                    uint64_t v67 = *v60;
                    uint64_t v68 = *(void *)(v64 + 40);
                    uint64_t v69 = v63;
                    while (1)
                    {
                      uint64_t v70 = v10 + v69;
                      *(_OWORD *)(v70 + 24) = *(_OWORD *)(v10 + v69);
                      *(void *)(v70 + 40) = *(void *)(v10 + v69 + 16);
                      if (!v69) {
                        break;
                      }
                      v69 -= 24;
                      if (v66 >= *(double *)(v70 - 16))
                      {
                        uint64_t v71 = v10 + v69 + 24;
                        goto LABEL_84;
                      }
                    }
                    uint64_t v71 = v10;
LABEL_84:
                    *(void *)uint64_t v71 = v67;
                    *(double *)(v71 + 8) = v66;
                    *(void *)(v71 + 16) = v68;
                  }
                  long long v60 = v65 + 3;
                  v63 += 24;
                  unint64_t v64 = (unint64_t)v65;
                }
                while (v65 + 3 != (void *)a2);
              }
            }
            else if (!v62)
            {
              do
              {
                long long v102 = v60;
                double v103 = *(double *)(a1 + 32);
                if (v103 < *(double *)(a1 + 8))
                {
                  uint64_t v104 = *v60;
                  uint64_t v105 = *(void *)(a1 + 40);
                  long long v106 = (double *)v60;
                  do
                  {
                    *(_OWORD *)long long v106 = *(_OWORD *)(v106 - 3);
                    v106[2] = *(v106 - 1);
                    double v107 = *(v106 - 5);
                    v106 -= 3;
                  }
                  while (v103 < v107);
                  *(void *)long long v106 = v104;
                  v106[1] = v103;
                  *((void *)v106 + 2) = v105;
                }
                v60 += 3;
                a1 = (unint64_t)v102;
              }
              while (v102 + 3 != (void *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v72 = (v12 - 2) >> 1;
              int64_t v73 = v72;
              do
              {
                int64_t v74 = v73;
                if (v72 >= v73)
                {
                  uint64_t v75 = (2 * v73) | 1;
                  unint64_t v76 = v10 + 24 * v75;
                  if (2 * v74 + 2 < (uint64_t)v12 && *(double *)(v10 + 24 * v75 + 8) < *(double *)(v76 + 32))
                  {
                    v76 += 24;
                    uint64_t v75 = 2 * v74 + 2;
                  }
                  double v77 = *(double *)(v10 + 24 * v74 + 8);
                  if (*(double *)(v76 + 8) >= v77)
                  {
                    unint64_t v78 = v10 + 24 * v74;
                    uint64_t v79 = *(void *)v78;
                    uint64_t v80 = *(void *)(v78 + 16);
                    do
                    {
                      unint64_t v81 = v78;
                      unint64_t v78 = v76;
                      long long v82 = *(_OWORD *)v76;
                      *(void *)(v81 + 16) = *(void *)(v76 + 16);
                      *(_OWORD *)unint64_t v81 = v82;
                      if (v72 < v75) {
                        break;
                      }
                      uint64_t v83 = (2 * v75) | 1;
                      unint64_t v76 = v10 + 24 * v83;
                      uint64_t v84 = 2 * v75 + 2;
                      if (v84 < (uint64_t)v12 && *(double *)(v10 + 24 * v83 + 8) < *(double *)(v76 + 32))
                      {
                        v76 += 24;
                        uint64_t v83 = v84;
                      }
                      uint64_t v75 = v83;
                    }
                    while (*(double *)(v76 + 8) >= v77);
                    *(void *)unint64_t v78 = v79;
                    *(double *)(v78 + 8) = v77;
                    *(void *)(v78 + 16) = v80;
                  }
                }
                int64_t v73 = v74 - 1;
              }
              while (v74);
              int64_t v85 = v11 / 0x18uLL;
              do
              {
                uint64_t v86 = 0;
                uint64_t v119 = *(void *)(v10 + 16);
                long long v113 = *(_OWORD *)v10;
                unint64_t v87 = v10;
                do
                {
                  unint64_t v88 = v87;
                  uint64_t v89 = v86 + 1;
                  v87 += 24 * (v86 + 1);
                  uint64_t v90 = 2 * v86;
                  uint64_t v86 = (2 * v86) | 1;
                  int64_t v91 = v90 + 2;
                  if (v91 < v85 && *(double *)(v88 + 24 * v89 + 8) < *(double *)(v87 + 32))
                  {
                    v87 += 24;
                    uint64_t v86 = v91;
                  }
                  long long v92 = *(_OWORD *)v87;
                  *(void *)(v88 + 16) = *(void *)(v87 + 16);
                  *(_OWORD *)unint64_t v88 = v92;
                }
                while (v86 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                a2 -= 24;
                if (v87 == a2)
                {
                  *(void *)(v87 + 16) = v119;
                  *(_OWORD *)unint64_t v87 = v113;
                }
                else
                {
                  long long v93 = *(_OWORD *)a2;
                  *(void *)(v87 + 16) = *(void *)(a2 + 16);
                  *(_OWORD *)unint64_t v87 = v93;
                  *(void *)(a2 + 16) = v119;
                  *(_OWORD *)a2 = v113;
                  uint64_t v94 = v87 - v10 + 24;
                  if (v94 >= 25)
                  {
                    unint64_t v95 = (v94 / 0x18uLL - 2) >> 1;
                    double v96 = *(double *)(v87 + 8);
                    if (*(double *)(v10 + 24 * v95 + 8) < v96)
                    {
                      uint64_t v97 = *(void *)v87;
                      uint64_t v98 = *(void *)(v87 + 16);
                      do
                      {
                        unint64_t v99 = v87;
                        unint64_t v87 = v10 + 24 * v95;
                        long long v100 = *(_OWORD *)v87;
                        *(void *)(v99 + 16) = *(void *)(v87 + 16);
                        *(_OWORD *)unint64_t v99 = v100;
                        if (!v95) {
                          break;
                        }
                        unint64_t v95 = (v95 - 1) >> 1;
                      }
                      while (*(double *)(v10 + 24 * v95 + 8) < v96);
                      *(void *)unint64_t v87 = v97;
                      *(double *)(v87 + 8) = v96;
                      *(void *)(v87 + 16) = v98;
                    }
                  }
                }
              }
              while (v85-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 24 * (v12 >> 1);
          if ((unint64_t)v11 >= 0xC01)
          {
            sub_10119F8B4((long long *)a1, (double *)(a1 + 24 * (v12 >> 1)), (double *)(a2 - 24));
            uint64_t v15 = 3 * v13;
            uint64_t v16 = (double *)(a1 + 24 * v13 - 24);
            sub_10119F8B4((long long *)(a1 + 24), v16, (double *)(a2 - 48));
            uint64_t v17 = (double *)(a1 + 24 + 8 * v15);
            sub_10119F8B4((long long *)(a1 + 48), v17, (double *)(a2 - 72));
            sub_10119F8B4((long long *)v16, (double *)v14, v17);
            uint64_t v114 = *(void *)(a1 + 16);
            long long v108 = *(_OWORD *)a1;
            uint64_t v18 = *(void *)(v14 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v14;
            *(void *)(a1 + 16) = v18;
            *(void *)(v14 + 16) = v114;
            *(_OWORD *)unint64_t v14 = v108;
          }
          else
          {
            sub_10119F8B4((long long *)(a1 + 24 * (v12 >> 1)), (double *)a1, (double *)(a2 - 24));
          }
          --a3;
          if (a4) {
            break;
          }
          double v19 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 16) < v19) {
            goto LABEL_12;
          }
          if (v19 >= *(double *)(a2 - 16))
          {
            unint64_t v38 = a1 + 24;
            do
            {
              unint64_t v10 = v38;
              if (v38 >= a2) {
                break;
              }
              double v39 = *(double *)(v38 + 8);
              v38 += 24;
            }
            while (v19 >= v39);
          }
          else
          {
            unint64_t v36 = a1;
            do
            {
              unint64_t v10 = v36 + 24;
              double v37 = *(double *)(v36 + 32);
              v36 += 24;
            }
            while (v19 >= v37);
          }
          unint64_t v40 = a2;
          if (v10 < a2)
          {
            unint64_t v41 = a2;
            do
            {
              unint64_t v40 = v41 - 24;
              double v42 = *(double *)(v41 - 16);
              v41 -= 24;
            }
            while (v19 < v42);
          }
          uint64_t v43 = *(void *)a1;
          uint64_t v44 = *(void *)(a1 + 16);
          while (v10 < v40)
          {
            uint64_t v116 = *(void *)(v10 + 16);
            long long v110 = *(_OWORD *)v10;
            long long v45 = *(_OWORD *)v40;
            *(void *)(v10 + 16) = *(void *)(v40 + 16);
            *(_OWORD *)unint64_t v10 = v45;
            *(void *)(v40 + 16) = v116;
            *(_OWORD *)unint64_t v40 = v110;
            do
            {
              double v46 = *(double *)(v10 + 32);
              v10 += 24;
            }
            while (v19 >= v46);
            do
            {
              double v47 = *(double *)(v40 - 16);
              v40 -= 24;
            }
            while (v19 < v47);
          }
          BOOL v4 = v10 - 24 >= a1;
          BOOL v5 = v10 - 24 == a1;
          if (v10 - 24 != a1)
          {
            long long v48 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 16) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v48;
          }
          a4 = 0;
          *(void *)(v10 - 24) = v43;
          *(double *)(v10 - 16) = v19;
          *(void *)(v10 - 8) = v44;
        }
        double v19 = *(double *)(a1 + 8);
LABEL_12:
        uint64_t v20 = 0;
        uint64_t v21 = *(void *)a1;
        uint64_t v22 = *(void *)(a1 + 16);
        do
        {
          double v23 = *(double *)(a1 + v20 + 32);
          v20 += 24;
        }
        while (v23 < v19);
        unint64_t v24 = a1 + v20;
        unint64_t v25 = a2;
        if (v20 == 24)
        {
          unint64_t v28 = a2;
          while (v24 < v28)
          {
            unint64_t v26 = v28 - 24;
            double v29 = *(double *)(v28 - 16);
            v28 -= 24;
            if (v29 < v19) {
              goto LABEL_22;
            }
          }
          unint64_t v26 = v28;
        }
        else
        {
          do
          {
            unint64_t v26 = v25 - 24;
            double v27 = *(double *)(v25 - 16);
            v25 -= 24;
          }
          while (v27 >= v19);
        }
LABEL_22:
        unint64_t v10 = v24;
        if (v24 < v26)
        {
          unint64_t v30 = v26;
          do
          {
            uint64_t v115 = *(void *)(v10 + 16);
            long long v109 = *(_OWORD *)v10;
            long long v31 = *(_OWORD *)v30;
            *(void *)(v10 + 16) = *(void *)(v30 + 16);
            *(_OWORD *)unint64_t v10 = v31;
            *(void *)(v30 + 16) = v115;
            *(_OWORD *)unint64_t v30 = v109;
            do
            {
              double v32 = *(double *)(v10 + 32);
              v10 += 24;
            }
            while (v32 < v19);
            do
            {
              double v33 = *(double *)(v30 - 16);
              v30 -= 24;
            }
            while (v33 >= v19);
          }
          while (v10 < v30);
        }
        if (v10 - 24 != a1)
        {
          long long v34 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 16) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v34;
        }
        *(void *)(v10 - 24) = v21;
        *(double *)(v10 - 16) = v19;
        *(void *)(v10 - 8) = v22;
        if (v24 >= v26) {
          break;
        }
LABEL_33:
        sub_1015A591C(a1, v10 - 24, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = sub_1015A6208(a1, v10 - 24);
      if (sub_1015A6208(v10, a2)) {
        break;
      }
      if (!v35) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 24;
    if (!v35) {
      continue;
    }
    break;
  }
}

BOOL sub_1015A6208(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(double *)(a2 - 16) < *(double *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 16);
        long long v7 = *(_OWORD *)a1;
        uint64_t v8 = *(void *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      sub_10119F8B4((long long *)a1, (double *)(a1 + 24), (double *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_10119FC3C(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      double v19 = (long long *)(a1 + 24);
      uint64_t v20 = (long long *)(a1 + 48);
      uint64_t v21 = (long long *)(a1 + 72);
      sub_10119FC3C(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(double *)(a2 - 16) < *(double *)(a1 + 80))
      {
        uint64_t v22 = *(void *)(a1 + 88);
        long long v23 = *v21;
        uint64_t v24 = *(void *)(a2 - 8);
        *uint64_t v21 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 88) = v24;
        *(_OWORD *)(a2 - 24) = v23;
        *(void *)(a2 - 8) = v22;
        if (*(double *)(a1 + 80) < *(double *)(a1 + 56))
        {
          uint64_t v25 = *(void *)(a1 + 64);
          long long v26 = *v20;
          long long *v20 = *v21;
          *(void *)(a1 + 64) = *(void *)(a1 + 88);
          *uint64_t v21 = v26;
          *(void *)(a1 + 88) = v25;
          if (*(double *)(a1 + 56) < *(double *)(a1 + 32))
          {
            uint64_t v27 = *(void *)(a1 + 40);
            long long v28 = *v19;
            *double v19 = *v20;
            *(void *)(a1 + 40) = *(void *)(a1 + 64);
            long long *v20 = v28;
            *(void *)(a1 + 64) = v27;
            if (*(double *)(a1 + 32) < *(double *)(a1 + 8))
            {
              uint64_t v29 = *(void *)(a1 + 16);
              long long v30 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(void *)(a1 + 16) = *(void *)(a1 + 40);
              *double v19 = v30;
              *(void *)(a1 + 40) = v29;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v9 = a1 + 48;
      sub_10119F8B4((long long *)a1, (double *)(a1 + 24), (double *)(a1 + 48));
      uint64_t v10 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)(v10 + 8);
    if (v13 < *(double *)(v9 + 8))
    {
      uint64_t v14 = *(void *)v10;
      uint64_t v15 = *(void *)(v10 + 16);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(void *)(v17 + 88) = *(void *)(a1 + v16 + 64);
        if (v16 == -48) {
          break;
        }
        v16 -= 24;
        if (v13 >= *(double *)(v17 + 32))
        {
          uint64_t v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(void *)uint64_t v18 = v14;
      *(double *)(v18 + 8) = v13;
      *(void *)(v18 + 16) = v15;
      if (++v12 == 8) {
        return v10 + 24 == a2;
      }
    }
    uint64_t v9 = v10;
    v11 += 24;
    v10 += 24;
    if (v10 == a2) {
      return 1;
    }
  }
}

void ***sub_1015A64A0(void ***a1, long long *a2)
{
  uint64_t v4 = *a1;
  BOOL v5 = (char *)(*a1)[1];
  uint64_t v6 = *a1;
  uint64_t v9 = (char *)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  uint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*v4) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*v4) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      uint64_t v16 = (char *)sub_1000DA5D8(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[24 * v12];
    uint64_t v18 = &v16[24 * v15];
    long long v19 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v17 = v19;
    uint64_t v11 = v17 + 24;
    uint64_t v21 = (char *)*v4;
    uint64_t v20 = (char *)v4[1];
    if (v20 != *v4)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v17 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v17 - 24) = v22;
        v17 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      uint64_t v20 = (char *)*v4;
    }
    double *v4 = v17;
    v4[1] = v11;
    void v4[2] = v18;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    long long v10 = *a2;
    *((void *)v5 + 2) = *((void *)a2 + 2);
    *(_OWORD *)BOOL v5 = v10;
    uint64_t v11 = v5 + 24;
  }
  v4[1] = v11;
  return a1;
}

void sub_1015A65D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_1015AF628(a1 + 8, a3);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 120) = 0xFFFF;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 156) = _Q0;
  *(_OWORD *)(a1 + 172) = _Q0;
  *(_OWORD *)(a1 + 188) = _Q0;
  *(_DWORD *)(a1 + 204) = 0;
  *(void *)(a1 + 208) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(void *)(a1 + 236) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 244) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 272) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  sub_1000DBC34(a1 + 280);
  *(_WORD *)(a1 + 920) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_DWORD *)(a1 + 944) = 1;
  *(void *)(a1 + 952) = 0;
  *(void *)(a1 + 968) = 0;
  *(void *)(a1 + 960) = 0;
  *(unsigned char *)(a1 + 976) = 0;
  sub_10053C880(a1 + 984, *(void *)a1, "assist_cache", 1, 0, 0);
  *(_WORD *)(a1 + 1112) = 0;
  *(_DWORD *)(a1 + 1140) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(unsigned char *)(a1 + 1136) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,initializing CLGnssRefPosMaintenance feature", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    __int16 v19 = 0;
    unint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::CLGnssRefPosMaintenance(id<CLIntersiloUniverse>, GnssRefPosMaintenanceCallback)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (!*(void *)(a1 + 96))
  {
    *(void *)(a1 + 96) = [objc_msgSend(*(id *)a1, "silo") newTimer];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,fMaintenanceTriggerTimer timer created", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      __int16 v19 = 0;
      unint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::CLGnssRefPosMaintenance(id<CLIntersiloUniverse>, GnssRefPosMaintenanceCallback)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    uint64_t v11 = *(void **)(a1 + 96);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1015A716C;
    v18[3] = &unk_1022A3020;
    v18[4] = a1;
    [v11 setHandler:v18];
  }
  if (!*(void *)(a1 + 104))
  {
    *(void *)(a1 + 104) = [objc_msgSend(*(id *)a1, "silo") newTimer];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    unint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,fActiveSessionTimer timer created", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      __int16 v19 = 0;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::CLGnssRefPosMaintenance(id<CLIntersiloUniverse>, GnssRefPosMaintenanceCallback)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    unint64_t v13 = *(void **)(a1 + 104);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1015A7864;
    v17[3] = &unk_1022A3020;
    v17[4] = a1;
    [v13 setHandler:v17];
  }
  sub_100681630();
}

void sub_1015A6FB0(_Unwind_Exception *a1)
{
  sub_10053C950(v3);
  uint64_t v6 = (std::__shared_weak_count *)v2[101];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  uint64_t v7 = v2[11];
  v2[11] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v2[10];
  v2[10] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v2[9];
  v2[9] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v2[8];
  v2[8] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v2[7];
  v2[7] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = v2[6];
  v2[6] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *v4;
  uint64_t *v4 = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  sub_100855A70(v1);
  _Unwind_Resume(a1);
}

void sub_1015A716C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,fMaintenanceTriggerTimer timer set", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::CLGnssRefPosMaintenance(id<CLIntersiloUniverse>, GnssRefPosMaintenanceCallback)_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1015A7308(v1);
}

void sub_1015A7308(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2)
  {
    [v2 setNextFireDelay:1.79769313e308];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,periodic maintenance timer,off", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onPeriodicMaintenanceTrigger()", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  if (!*(_DWORD *)(a1 + 944))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,onPeriodicMaintenanceTrigger,LS off", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v17 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onPeriodicMaintenanceTrigger()", "%s\n");
LABEL_36:
    if (v17 != buf) {
      free(v17);
    }
    return;
  }
  if (*(_DWORD *)(a1 + 1140) == 1)
  {
    double v4 = sub_100121610(a1 + 120, a1 + 280);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    BOOL v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 1140);
      int v7 = *(_DWORD *)(a1 + 216);
      uint64_t v8 = *(void *)(a1 + 124);
      uint64_t v9 = *(void *)(a1 + 132);
      uint64_t v10 = *(void *)(a1 + 148);
      uint64_t v11 = *(void *)(a1 + 140);
      uint64_t v12 = *(void *)(a1 + 156);
      uint64_t v13 = *(void *)(a1 + 952);
      uint64_t v14 = *(void *)(a1 + 968);
      *(_DWORD *)buf = 68291587;
      int v22 = 0;
      __int16 v23 = 2082;
      uint64_t v24 = "";
      __int16 v25 = 1026;
      int v26 = v6;
      __int16 v27 = 1026;
      int v28 = v7;
      __int16 v29 = 2049;
      uint64_t v30 = v8;
      __int16 v31 = 2049;
      uint64_t v32 = v9;
      __int16 v33 = 2050;
      uint64_t v34 = v10;
      __int16 v35 = 2050;
      double v36 = v4;
      __int16 v37 = 2050;
      uint64_t v38 = v11;
      __int16 v39 = 2050;
      uint64_t v40 = v12;
      __int16 v41 = 2050;
      uint64_t v42 = v13;
      __int16 v43 = 2050;
      uint64_t v44 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,onPeriodicMaintenanceTrigger\", \"state\":%{public}d, \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"age\":\"%{public}.1f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"driveDuration\":\"%{public}.1f\", \"unknownDriveDuration\":\"%{public}.1f\"}", buf, 0x6Eu);
    }
    sub_1015AB11C(a1);
    sub_1015ACCC4(a1);
    *(_DWORD *)(a1 + 1140) = 2;
    unint64_t v15 = *(void **)(a1 + 104);
    if (v15) {
      [v15 setNextFireDelay:2.0];
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v18 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v19 = *(_DWORD *)(a1 + 1140);
    *(_DWORD *)buf = 67240192;
    int v22 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,onPeriodicMaintenanceTrigger,invalid state,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v17 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssRefPosMaintenance::onPeriodicMaintenanceTrigger()", "%s\n");
    goto LABEL_36;
  }
}

void sub_1015A7864(uint64_t a1)
{
}

void sub_1015A786C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 104);
  if (v2) {
    [v2 setNextFireDelay:1.79769313e308];
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 1140);
    *(_DWORD *)buf = 67240192;
    LODWORD(v32[0]) = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,onActiveSessionTimeout,state,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    __int16 v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onActiveSessionTimeout()", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  switch(*(_DWORD *)(a1 + 1140))
  {
    case 0:
    case 1:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      BOOL v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v6 = *(_DWORD *)(a1 + 1140);
        *(_DWORD *)buf = 67240192;
        LODWORD(v32[0]) = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,Invalid state,%{public}d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_77;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        goto LABEL_104;
      }
      goto LABEL_15;
    case 2:
      double v8 = *(double *)(a1 + 936);
      if (v8 == 0.0)
      {
        if (sub_1015ACA6C(a1))
        {
          BOOL v9 = 1;
          goto LABEL_53;
        }
LABEL_61:
        sub_1015AD01C(a1);
        uint64_t v20 = *(void **)(a1 + 104);
        if (v20) {
          [v20 setNextFireDelay:10.0];
        }
        int v21 = 3;
        goto LABEL_78;
      }
      if (v8 <= 0.0)
      {
        BOOL v9 = 0;
        if (!sub_1015ACA6C(a1)) {
          goto LABEL_64;
        }
      }
      else
      {
        double v12 = vabdd_f64(sub_10016C458(), *(double *)(a1 + 936));
        BOOL v9 = v12 > 1800.0;
        if (!sub_1015ACA6C(a1))
        {
          if (v12 > 1800.0) {
            goto LABEL_61;
          }
          BOOL v9 = 0;
LABEL_64:
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          int v22 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            double v23 = sub_100121610(a1 + 120, a1 + 280);
            int v24 = *(_DWORD *)(a1 + 216);
            BOOL v26 = v24 == 4 || v24 == 11;
            if (v23 >= 900.0) {
              BOOL v26 = 0;
            }
            *(_DWORD *)buf = 67240448;
            LODWORD(v32[0]) = v9;
            WORD2(v32[0]) = 1026;
            *(_DWORD *)((char *)v32 + 6) = v26;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,WiFi/Cell location not requested,requestWiFiCellLocation,%{public}d,isRecentWifi,%{public}d", buf, 0xEu);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_77;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          sub_100121610(a1 + 120, a1 + 280);
LABEL_97:
          int v7 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onActiveSessionTimeout()", "%s\n");
LABEL_98:
          if (v7 != buf) {
            free(v7);
          }
LABEL_77:
          sub_1015A8F8C(a1);
          int v21 = 1;
          goto LABEL_78;
        }
      }
LABEL_53:
      double v16 = sub_100121610(a1 + 120, a1 + 280);
      int v17 = *(_DWORD *)(a1 + 216);
      BOOL v19 = (v17 == 11 || v17 == 4) && v16 < 900.0;
      if (!v19 && v9) {
        goto LABEL_61;
      }
      goto LABEL_64;
    case 3:
      if (!*(unsigned char *)(a1 + 920)) {
        goto LABEL_77;
      }
      sub_1015AD468(a1);
      if (sub_1015ACA6C(a1))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        uint64_t v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,kRefPosMaintenanceStateWiFiCellRequest,Ref position warm", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_77;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_97;
        }
LABEL_105:
        dispatch_once(&qword_1024193D0, &stru_10232F680);
        goto LABEL_97;
      }
      double v13 = 0.0;
      if (*(double *)(a1 + 928) > 0.0) {
        double v13 = vabdd_f64(sub_10016C458(), *(double *)(a1 + 928));
      }
      int v14 = *(_DWORD *)(a1 + 948);
      if (!sub_100744494() || *(double *)(a1 + 928) != 0.0 && v13 <= dbl_101E12A50[v14 == 1])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        unint64_t v15 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)uint64_t v32 = v13;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,onActiveRefPosMaintenanceTimeout,GNSS not requested,ageLastGnss,%{public}.1lf", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_77;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_97;
        }
        goto LABEL_105;
      }
      if (!sub_1015AD89C(a1))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        int v28 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,onActiveRefPosMaintenanceTimeout,Error starting Gnss", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_77;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
LABEL_104:
        }
          dispatch_once(&qword_1024193D0, &stru_10232F680);
LABEL_15:
        int v7 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssRefPosMaintenance::onActiveSessionTimeout()", "%s\n");
        goto LABEL_98;
      }
      *(double *)(a1 + 928) = sub_10016C458();
      __int16 v27 = *(void **)(a1 + 104);
      if (v27) {
        [v27 setNextFireDelay:24.0];
      }
      int v21 = 4;
LABEL_78:
      *(_DWORD *)(a1 + 1140) = v21;
      return;
    case 4:
      if (*(unsigned char *)(a1 + 921))
      {
        if (sub_1015ACA6C(a1))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          uint64_t v10 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,kRefPosMaintenanceStateGnssRequest,Ref position warm", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232F680);
            }
            uint64_t v30 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onActiveSessionTimeout()", "%s\n", v30);
            if (v30 != (char *)buf) {
              free(v30);
            }
          }
        }
        sub_1015ADE18(a1);
      }
      goto LABEL_77;
    default:
      goto LABEL_77;
  }
}

void sub_1015A82B4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232F6A0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    double v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232F6A0);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      BOOL v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1015A9A20((uint64_t)a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015A8468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015A8488(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232F6A0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v12 = 1;
    BOOL v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onGnssNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232F6A0);
    }
    uint64_t v10 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onGnssNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_1015A98F4(v6, v7, v8, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015A8638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015A8658(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232F6A0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v12 = 1;
    BOOL v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onWifiLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232F6A0);
    }
    uint64_t v10 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onWifiLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_1015A96A4(v6, v7, v8, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015A8808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015A8828(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232F6A0);
  }
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
  if (v6)
  {
    char v12 = 1;
    BOOL v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onCellLocationProviderNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232F6A0);
    }
    uint64_t v10 = qword_102419588;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG);
    if (v6)
    {
      *(_DWORD *)buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      __int16 v16 = "";
      __int16 v17 = 2082;
      __int16 v18 = "activity";
      __int16 v19 = 2050;
      uint64_t v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onCellLocationProviderNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v12 = 0;
  }
  sub_1015A97D4(v6, v7, v8, a3);
  if (v12) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015A89D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015A89F8(uint64_t a1, _DWORD *a2, CLMotionActivity *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232F6A0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232F6A0);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      __int16 v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1015ABC38((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015A8BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015A8BD4(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232F6A0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232F6A0);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      __int16 v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1015ABE5C((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015A8D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015A8DB0(uint64_t a1, int *a2, int *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10232F6A0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssRefPosMaintenance::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10232F6A0);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      __int16 v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssRefPosMaintenance::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1015AA074((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1015A8F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015A8F8C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 96);
  if (v2 && *(_DWORD *)(a1 + 944))
  {
    [v2 setNextFireDelay:900.0];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,periodic maintenance timer,on", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::startPeriodicMaintenanceTimer()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t sub_1015A9138(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,CLGnssRefPosMaintenance destructor", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssRefPosMaintenance::~CLGnssRefPosMaintenance()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  uint64_t v3 = *(void **)(a1 + 96);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 96) = 0;
  }
  int v4 = *(void **)(a1 + 104);
  if (v4)
  {
    [v4 invalidate];

    *(void *)(a1 + 104) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    [*(id *)(v5 + 16) unregister:*(void *)(v5 + 8) forNotification:1];
  }
  uint64_t v6 = *(void *)(a1 + 80);
  if (v6) {
    [*(id *)(v6 + 16) unregister:*(void *)(v6 + 8) forNotification:4];
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7) {
    [*(id *)(v7 + 16) unregister:*(void *)(v7 + 8) forNotification:0];
  }
  sub_10053C950(a1 + 984);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 808);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  uint64_t v9 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  sub_100855A70((void *)(a1 + 8));
  return a1;
}

void sub_1015A94A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_1015A94B8(void *result)
{
  if (result[5])
  {
    uint64_t v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      __int16 v4 = 2082;
      uint64_t v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Registering for kNotificationLocationPrefiltered\"}", (uint8_t *)v3, 0x12u);
    }
    return [*(id *)(v1[5] + 16) register:*(void *)(v1[5] + 8) forNotification:33 registrationInfo:0];
  }
  return result;
}

void *sub_1015A95B0(void *result)
{
  if (result[5])
  {
    uint64_t v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      v3[0] = 68289026;
      v3[1] = 0;
      __int16 v4 = 2082;
      uint64_t v5 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Unregistering for kNotificationLocationPrefiltered\"}", (uint8_t *)v3, 0x12u);
    }
    return [*(id *)(v1[5] + 16) unregister:*(void *)(v1[5] + 8) forNotification:33];
  }
  return result;
}

void sub_1015A96A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a4 + 4);
    uint64_t v7 = *(void *)(a4 + 12);
    uint64_t v8 = *(void *)(a4 + 20);
    uint64_t v9 = *(void *)(a4 + 28);
    uint64_t v10 = *(void *)(a4 + 36);
    int v11 = *(_DWORD *)(a4 + 84);
    v12[0] = 68290563;
    v12[1] = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2049;
    uint64_t v16 = v6;
    __int16 v17 = 2049;
    uint64_t v18 = v7;
    __int16 v19 = 2050;
    uint64_t v20 = v8;
    __int16 v21 = 2050;
    uint64_t v22 = v9;
    __int16 v23 = 2050;
    uint64_t v24 = v10;
    __int16 v25 = 1026;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,WiFi location notification received\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\", \"conf\":%{public}d}", (uint8_t *)v12, 0x4Au);
  }
}

void sub_1015A97D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a4 + 4);
    uint64_t v7 = *(void *)(a4 + 12);
    uint64_t v8 = *(void *)(a4 + 20);
    uint64_t v9 = *(void *)(a4 + 28);
    uint64_t v10 = *(void *)(a4 + 36);
    v11[0] = 68290307;
    v11[1] = 0;
    __int16 v12 = 2082;
    __int16 v13 = "";
    __int16 v14 = 2049;
    uint64_t v15 = v6;
    __int16 v16 = 2049;
    uint64_t v17 = v7;
    __int16 v18 = 2050;
    uint64_t v19 = v8;
    __int16 v20 = 2050;
    uint64_t v21 = v9;
    __int16 v22 = 2050;
    uint64_t v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Cell location notification received\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)v11, 0x44u);
  }
}

void sub_1015A98F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a4 + 4);
    uint64_t v7 = *(void *)(a4 + 12);
    uint64_t v8 = *(void *)(a4 + 20);
    uint64_t v9 = *(void *)(a4 + 28);
    uint64_t v10 = *(void *)(a4 + 36);
    uint64_t v11 = *(void *)(a4 + 44);
    v12[0] = 68290563;
    v12[1] = 0;
    __int16 v13 = 2082;
    __int16 v14 = "";
    __int16 v15 = 2049;
    uint64_t v16 = v6;
    __int16 v17 = 2049;
    uint64_t v18 = v7;
    __int16 v19 = 2050;
    uint64_t v20 = v8;
    __int16 v21 = 2050;
    uint64_t v22 = v9;
    __int16 v23 = 2050;
    uint64_t v24 = v10;
    __int16 v25 = 2049;
    uint64_t v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,GNSS location notification received\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\", \"speed\":\"%{private}.1f\"}", (uint8_t *)v12, 0x4Eu);
  }
}

void sub_1015A9A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a4 + 96);
    uint64_t v8 = *(void *)(a4 + 4);
    uint64_t v9 = *(void *)(a4 + 12);
    uint64_t v10 = *(void *)(a4 + 20);
    uint64_t v11 = *(void *)(a4 + 28);
    uint64_t v12 = *(void *)(a4 + 36);
    *(void *)__int16 v29 = 68290563;
    *(_WORD *)&_OWORD v29[8] = 2082;
    *(void *)&v29[10] = "";
    *(_WORD *)&v29[18] = 1026;
    *(_DWORD *)&v29[20] = v7;
    *(_WORD *)&v29[24] = 2049;
    *(void *)&v29[26] = v8;
    *(_WORD *)&v29[34] = 2049;
    *(void *)&v29[36] = v9;
    *(_WORD *)&v29[44] = 2050;
    *(void *)&v29[46] = v10;
    *(_WORD *)&v29[54] = 2050;
    *(void *)&v29[56] = v11;
    *(_WORD *)&v29[64] = 2050;
    *(void *)&v29[66] = v12;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Location notification received\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"hacc\":\"%{public}.1f\", \"alt\":\"%{public}.2f\", \"vunc\":\"%{public}.1f\"}", v29, 0x4Au);
  }
  *(_DWORD *)__int16 v29 = 0xFFFF;
  *(_OWORD *)&v29[4] = 0uLL;
  *(_OWORD *)&v29[20] = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)&v29[36] = _Q0;
  *(_OWORD *)&v29[52] = _Q0;
  *(_OWORD *)&v29[68] = _Q0;
  *(_DWORD *)&v29[84] = 0;
  long long v30 = 0uLL;
  *(void *)&v29[88] = 0xBFF0000000000000;
  LODWORD(v31) = 0;
  *(void *)((char *)&v31 + 4) = 0xBFF0000000000000;
  HIDWORD(v31) = 0x7FFFFFFF;
  memset(v32, 0, 25);
  sub_1000DBC34(v33);
  long long v18 = *(_OWORD *)(a4 + 112);
  long long v30 = *(_OWORD *)(a4 + 96);
  long long v31 = v18;
  *(_OWORD *)uint64_t v32 = *(_OWORD *)(a4 + 128);
  *(_OWORD *)&v32[12] = *(_OWORD *)(a4 + 140);
  long long v19 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)&v29[32] = *(_OWORD *)(a4 + 32);
  *(_OWORD *)&v29[48] = v19;
  long long v20 = *(_OWORD *)(a4 + 80);
  *(_OWORD *)&v29[64] = *(_OWORD *)(a4 + 64);
  *(_OWORD *)&v29[80] = v20;
  long long v21 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)__int16 v29 = *(_OWORD *)a4;
  *(_OWORD *)&v29[16] = v21;
  memcpy(v22, (const void *)(a4 + 160), 0x201uLL);
  uint64_t v23 = *(void *)(a4 + 680);
  uint64_t v24 = *(std::__shared_weak_count **)(a4 + 688);
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v33[65] = v23;
  __int16 v25 = v34;
  uint64_t v34 = v24;
  if (v25) {
    sub_1000DB0A0(v25);
  }
  long long v26 = *(_OWORD *)(a4 + 776);
  long long v39 = *(_OWORD *)(a4 + 760);
  v40[0] = v26;
  *(void *)((char *)v40 + 13) = *(void *)(a4 + 789);
  long long v27 = *(_OWORD *)(a4 + 712);
  long long v35 = *(_OWORD *)(a4 + 696);
  long long v36 = v27;
  long long v28 = *(_OWORD *)(a4 + 744);
  long long v37 = *(_OWORD *)(a4 + 728);
  long long v38 = v28;
  sub_1015A9C84(a1, (uint64_t)v29);
  if (v34) {
    sub_1000DB0A0(v34);
  }
}

void sub_1015A9C6C(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

void sub_1015A9C84(uint64_t a1, uint64_t a2)
{
  if (sub_10019FB5C(a1, a2))
  {
    long long v4 = *(_OWORD *)(a2 + 112);
    v20[6] = *(_OWORD *)(a2 + 96);
    v20[7] = v4;
    v21[0] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)v21 + 12) = *(_OWORD *)(a2 + 140);
    long long v5 = *(_OWORD *)(a2 + 48);
    _OWORD v20[2] = *(_OWORD *)(a2 + 32);
    v20[3] = v5;
    long long v6 = *(_OWORD *)(a2 + 80);
    v20[4] = *(_OWORD *)(a2 + 64);
    v20[5] = v6;
    long long v7 = *(_OWORD *)(a2 + 16);
    v20[0] = *(_OWORD *)a2;
    v20[1] = v7;
    memcpy(v22, (const void *)(a2 + 160), sizeof(v22));
    uint64_t v23 = *(void *)(a2 + 680);
    uint64_t v8 = *(std::__shared_weak_count **)(a2 + 688);
    uint64_t v24 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v9 = *(_OWORD *)(a2 + 776);
    long long v29 = *(_OWORD *)(a2 + 760);
    *(_OWORD *)long long v30 = v9;
    *(void *)&v30[13] = *(void *)(a2 + 789);
    long long v10 = *(_OWORD *)(a2 + 712);
    long long v25 = *(_OWORD *)(a2 + 696);
    long long v26 = v10;
    long long v11 = *(_OWORD *)(a2 + 744);
    long long v27 = *(_OWORD *)(a2 + 728);
    long long v28 = v11;
    uint64_t v12 = *(void *)(a1 + 32);
    if (!v12) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v12 + 48))(v12, v20);
    if (v24) {
      sub_1000DB0A0(v24);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    __int16 v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v14 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 67240192;
      int v34 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,sendLocationToPositionAssistance,type %{public}d ", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      int v15 = *(_DWORD *)(a2 + 96);
      int v31 = 67240192;
      int v32 = v15;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::sendLocationToPositionAssistance(const GNSS::DaemonLocation &)", "%s\n", v16);
LABEL_24:
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    __int16 v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v18 = *(_DWORD *)(a2 + 96);
      *(_DWORD *)buf = 67240192;
      int v34 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,sendLocationToPositionAssistance,Invalid location,%{public}d ", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      int v19 = *(_DWORD *)(a2 + 96);
      int v31 = 67240192;
      int v32 = v19;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::sendLocationToPositionAssistance(const GNSS::DaemonLocation &)", "%s\n", v16);
      goto LABEL_24;
    }
  }
}

void sub_1015AA054(_Unwind_Exception *a1)
{
  if (STACK[0x2C0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2C0]);
  }
  _Unwind_Resume(a1);
}

void sub_1015AA074(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  long long v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    int v9 = *a4;
    *(_DWORD *)buf = 67109376;
    int v12 = v8;
    __int16 v13 = 1024;
    int v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,Data protection notification received,type,%d,data availability,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (!*a3)
  {
    if (*a4 == 1)
    {
      if (!*(unsigned char *)(a1 + 1112))
      {
        *(unsigned char *)(a1 + 1112) = 1;
        sub_1015AA28C(a1);
      }
    }
    else
    {
      *(unsigned char *)(a1 + 1112) = 0;
    }
  }
}

void sub_1015AA28C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,device unlocked", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    LOWORD(v11) = 0;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::handlePersistentStorageOnDeviceUnlock()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*(_DWORD *)(a1 + 944))
  {
    if (!*(unsigned char *)(a1 + 1136))
    {
      int v11 = 0xFFFF;
      uint64_t v13 = 0;
      uint64_t v12 = 0;
      long long v14 = xmmword_101D1C320;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v15 = _Q0;
      long long v16 = _Q0;
      long long v17 = _Q0;
      int v18 = 0;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v19 = 0xBFF0000000000000;
      int v22 = 0;
      unint64_t v23 = 0xBFF0000000000000;
      int v24 = 0x7FFFFFFF;
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      uint64_t v25 = 0;
      char v28 = 0;
      sub_1000DBC34(&v29);
      if (sub_1015AAB44(a1, (uint64_t)&v11))
      {
        if (!sub_1000E6DB4(a1 + 120) || *((double *)&v17 + 1) > *(double *)(a1 + 196))
        {
          sub_1015A9C84(a1, (uint64_t)&v11);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          int v8 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 67240448;
            int v36 = v20;
            __int16 v37 = 2050;
            uint64_t v38 = *((void *)&v17 + 1);
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,onDeviceUnlock,send stored reference location,type %{public}d,timestamp,%{public}.1lf ", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232F680);
            }
            int v31 = 67240448;
            int v32 = v20;
            __int16 v33 = 2050;
            uint64_t v34 = *((void *)&v17 + 1);
            long long v10 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::handlePersistentStorageOnDeviceUnlock()", "%s\n", v10);
            if (v10 != (char *)buf) {
              free(v10);
            }
          }
        }
        *(double *)(a1 + 1128) = sub_10016C458();
        *(unsigned char *)(a1 + 1136) = 1;
        if (sub_1000E6DB4(a1 + 120)) {
          sub_1015AA6BC(a1);
        }
      }
      if (v30) {
        sub_1000DB0A0(v30);
      }
    }
    sub_1015AB11C(a1);
  }
  else if (*(unsigned char *)(a1 + 1113) && sub_1015AA6BC(a1))
  {
    *(unsigned char *)(a1 + 1113) = 0;
  }
}

void sub_1015AA698(_Unwind_Exception *a1)
{
  if (STACK[0x2C0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2C0]);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1015AA6BC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 1112))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,deleteReferencePositionFromDisk, cannot access as device is locked", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::deleteReferencePositionFromDisk()", "%s\n");
LABEL_30:
    if (v5 != buf) {
      free(v5);
    }
    return 0;
  }
  uint64_t v1 = a1 + 984;
  sub_10053C9B0(a1 + 984);
  sub_1004CF7DC(v1, "CLGnssRefPosMaintenance_Latitude", 0xFFFFFFFFLL);
  sub_1004CF7DC(v1, "CLGnssRefPosMaintenance_Longitude", 0xFFFFFFFFLL);
  sub_1004CF7DC(v1, "CLGnssRefPosMaintenance_HorizontalAcc", 0xFFFFFFFFLL);
  sub_1004CF7DC(v1, "CLGnssRefPosMaintenance_Altitude", 0xFFFFFFFFLL);
  sub_1004CF7DC(v1, "CLGnssRefPosMaintenance_VerticalAcc", 0xFFFFFFFFLL);
  sub_1004CF7DC(v1, "CLGnssRefPosMaintenance_Timestamp", 0xFFFFFFFFLL);
  sub_1004CF7DC(v1, "CLGnssRefPosMaintenance_Confidence", 0xFFFFFFFFLL);
  if (sub_10053CD58(v1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,deleteReferencePositionFromDisk,deleted", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::deleteReferencePositionFromDisk()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  long long v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,deleteReferencePositionFromDisk,not deleted", buf, 2u);
  }
  BOOL v7 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v5 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGnssRefPosMaintenance::deleteReferencePositionFromDisk()", "%s\n");
    goto LABEL_30;
  }
  return result;
}

BOOL sub_1015AAB44(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 1112))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getReferencePositionFromDisk,cannot read as device is locked", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      goto LABEL_43;
    }
    goto LABEL_36;
  }
  uint64_t v4 = sub_1015AEDC8(a1, a2);
  if ((v4 & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getReferencePositionFromDisk,no ref pos data", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      goto LABEL_43;
    }
LABEL_36:
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::getReferencePositionFromDisk(GNSS::DaemonLocation &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
    return 0;
  }
  if (sub_10019FB5C(v4, a2))
  {
    if (!*(unsigned char *)(a1 + 1136))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      long long v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a2 + 76);
        int v7 = *(_DWORD *)(a2 + 96);
        uint64_t v8 = *(void *)(a2 + 20);
        *(_DWORD *)buf = 134349568;
        *(void *)unint64_t v23 = v6;
        *(_WORD *)&v23[8] = 1026;
        *(_DWORD *)&v23[10] = v7;
        __int16 v24 = 2050;
        uint64_t v25 = v8;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,getReferencePositionFromDisk,timestamp,%{public}.1lf,type,%{public}d,hunc,%{public}.lf", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::getReferencePositionFromDisk(GNSS::DaemonLocation &)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a2 + 76);
      uint64_t v11 = *(void *)(a2 + 4);
      uint64_t v12 = *(void *)(a2 + 12);
      uint64_t v13 = *(void *)(a2 + 28);
      uint64_t v14 = *(void *)(a2 + 20);
      uint64_t v15 = *(void *)(a2 + 36);
      *(_DWORD *)buf = 68290563;
      *(_DWORD *)unint64_t v23 = 0;
      *(_WORD *)&v23[4] = 2082;
      *(void *)&v23[6] = "";
      __int16 v24 = 2050;
      uint64_t v25 = v10;
      __int16 v26 = 2049;
      uint64_t v27 = v11;
      __int16 v28 = 2049;
      uint64_t v29 = v12;
      __int16 v30 = 2050;
      uint64_t v31 = v13;
      __int16 v32 = 2050;
      uint64_t v33 = v14;
      __int16 v34 = 2050;
      uint64_t v35 = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,getReferencePositionFromDisk\", \"timestamp\":\"%{public}.1f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", buf, 0x4Eu);
    }
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  unint64_t v19 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getReferencePositionFromDisk,Invalid position assistance", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_36;
    }
LABEL_43:
    dispatch_once(&qword_1024193D0, &stru_10232F680);
    goto LABEL_36;
  }
  return result;
}

void sub_1015AB11C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1112))
  {
    double v2 = sub_10016C458() - *(double *)(a1 + 1120);
    double v3 = sub_10016C458() - *(double *)(a1 + 1128);
    if (v2 >= 600.0 && v3 >= 600.0)
    {
      BOOL v4 = sub_1000E6DB4(a1 + 120)
        && *(_DWORD *)(a1 + 252) == 1
        && sub_100121610(a1 + 120, a1 + 280) < 259200.0;
      int v44 = 0xFFFF;
      *(void *)double v46 = 0;
      double v45 = 0.0;
      *(_OWORD *)&v46[8] = xmmword_101D1C320;
      __asm { FMOV            V0.2D, #-1.0 }
      long long v47 = _Q0;
      long long v48 = _Q0;
      long long v49 = _Q0;
      int v50 = 0;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      unint64_t v51 = 0xBFF0000000000000;
      unint64_t v55 = 0xBFF0000000000000;
      int v54 = 0;
      int v56 = 0x7FFFFFFF;
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v57 = 0;
      char v60 = 0;
      sub_1000DBC34(v61);
      if (sub_1015AAB44(a1, (uint64_t)&v44))
      {
        if (!v4)
        {
LABEL_34:
          if (sub_100121610((uint64_t)&v44, (uint64_t)v61) > 259200.0)
          {
            sub_1015AA6BC(a1);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232F680);
            }
            uint64_t v14 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,deleted old reference position", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_10232F680);
              }
              *(_WORD *)__int16 v30 = 0;
              uint64_t v15 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v15);
              if (v15 != buf) {
                free(v15);
              }
            }
          }
          goto LABEL_60;
        }
        if (*(double *)(a1 + 196) <= *((double *)&v49 + 1))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          uint64_t v13 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,no new position assistance", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_10232F680);
            }
            *(_WORD *)__int16 v30 = 0;
            uint64_t v29 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v29);
            if (v29 != buf) {
              free(v29);
            }
          }
          goto LABEL_34;
        }
      }
      else if (!v4)
      {
LABEL_60:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        __int16 v26 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,no valid cached reference position", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          *(_WORD *)__int16 v30 = 0;
          uint64_t v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v27);
          if (v27 != buf) {
            free(v27);
          }
        }
LABEL_65:
        if (v62) {
          sub_1000DB0A0(v62);
        }
        return;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      long long v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        *(void *)&uint8_t buf[4] = *((void *)&v49 + 1);
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v52;
        *(_WORD *)&buf[18] = 2050;
        *(void *)&buf[20] = *(void *)&v46[8];
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,currentStoredRefPos,timestamp,%{public}.1lf,type,%{public}d,hunc,%{public}.lf", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        *(_DWORD *)__int16 v30 = 134349568;
        *(void *)uint64_t v31 = *((void *)&v49 + 1);
        *(_WORD *)&v31[8] = 1026;
        *(_DWORD *)&v31[10] = v52;
        __int16 v32 = 2050;
        uint64_t v33 = *(void *)&v46[8];
        __int16 v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v28);
        if (v28 != buf) {
          free(v28);
        }
      }
      long long v17 = *(_OWORD *)(a1 + 232);
      long long v66 = *(_OWORD *)(a1 + 216);
      long long v67 = v17;
      v68[0] = *(_OWORD *)(a1 + 248);
      *(_OWORD *)((char *)v68 + 12) = *(_OWORD *)(a1 + 260);
      long long v18 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)(a1 + 152);
      long long v64 = v18;
      long long v19 = *(_OWORD *)(a1 + 200);
      *(_OWORD *)long long v65 = *(_OWORD *)(a1 + 184);
      *(_OWORD *)&v65[16] = v19;
      long long v20 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)buf = *(_OWORD *)(a1 + 120);
      *(_OWORD *)&uint8_t buf[16] = v20;
      memcpy(v69, (const void *)(a1 + 280), sizeof(v69));
      uint64_t v70 = *(void *)(a1 + 800);
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 808);
      uint64_t v71 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v22 = *(_OWORD *)(a1 + 896);
      long long v76 = *(_OWORD *)(a1 + 880);
      v77[0] = v22;
      long long v23 = *(_OWORD *)(a1 + 832);
      long long v72 = *(_OWORD *)(a1 + 816);
      long long v73 = v23;
      long long v24 = *(_OWORD *)(a1 + 864);
      long long v74 = *(_OWORD *)(a1 + 848);
      long long v75 = v24;
      *(void *)((char *)v77 + 13) = *(void *)(a1 + 909);
      if (sub_1015AEF9C(a1, (uint64_t)buf))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        uint64_t v25 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int16 v30 = 68290563;
          *(_DWORD *)uint64_t v31 = 0;
          *(_WORD *)&v31[4] = 2082;
          *(void *)&v31[6] = "";
          __int16 v32 = 2050;
          uint64_t v33 = *(void *)&v65[12];
          __int16 v34 = 2049;
          uint64_t v35 = *(void *)&buf[4];
          __int16 v36 = 2049;
          uint64_t v37 = *(void *)&buf[12];
          __int16 v38 = 2050;
          uint64_t v39 = *(void *)&buf[28];
          __int16 v40 = 2050;
          uint64_t v41 = *(void *)&buf[20];
          __int16 v42 = 2050;
          uint64_t v43 = *(void *)&buf[36];
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,storeReferencePositionToDisk,stored\", \"timestamp\":\"%{public}.1f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", v30, 0x4Eu);
        }
        *(double *)(a1 + 1120) = sub_10016C458();
      }
      if (v71) {
        sub_1000DB0A0(v71);
      }
      goto LABEL_65;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&uint8_t buf[4] = v2;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&buf[14] = v3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,not stored,timeSinceLastRefPosStorage,%{public}.1lf,timeSinceRefPosLoadFromDisk_s,%{public}.1lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      int v44 = 134349312;
      double v45 = v2;
      *(_WORD *)double v46 = 2050;
      *(double *)&v46[2] = v3;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v6);
LABEL_23:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,not storing as device is locked", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      LOWORD(v44) = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v6);
      goto LABEL_23;
    }
  }
}

void sub_1015ABBF4(_Unwind_Exception *a1)
{
  if (STACK[0x310]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x310]);
  }
  _Unwind_Resume(a1);
}

void sub_1015ABC38(uint64_t a1, uint64_t a2, _DWORD *a3, CLMotionActivity *a4)
{
  if (*a3 == 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int type = a4->type;
      *(_DWORD *)buf = 67240448;
      int v11 = type;
      __int16 v12 = 1026;
      int v13 = CLMotionActivity::isInVehicle(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,motionActivity,Type,%{public}u,isInVehicle,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      CLMotionActivity::isInVehicle(a4);
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if (a4->type)
    {
      if (CLMotionActivity::isInVehicle(a4)) {
        int v8 = 1;
      }
      else {
        int v8 = 2;
      }
      *(_DWORD *)(a1 + 948) = v8;
    }
    else
    {
      *(_DWORD *)(a1 + 948) = 0;
    }
  }
}

void sub_1015ABE5C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)buf = 67240192;
    int v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,LS Notification,type,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (*a3 == 4)
  {
    int v9 = *(_DWORD *)(a4 + 188);
    if (*(_DWORD *)(a1 + 944) == v9) {
      return;
    }
    *(_DWORD *)(a1 + 944) = v9;
    if (v9)
    {
      if (v9 == 1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        uint64_t v10 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,LS,location service enabled,starting periodic maintenance timer", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          long long v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
        *(_DWORD *)(a1 + 1140) = 1;
        sub_1015A8F8C(a1);
      }
      return;
    }
    sub_1015AC3D0(a1);
    if (!sub_1015AA6BC(a1)) {
      *(unsigned char *)(a1 + 1113) = 1;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,LS,location service disabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_36:
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
        return;
      }
LABEL_42:
      dispatch_once(&qword_1024193D0, &stru_10232F680);
      goto LABEL_36;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *a3;
      *(_DWORD *)buf = 67240192;
      int v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,#Warning,unhandled LS notification,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_36;
      }
      goto LABEL_42;
    }
  }
}

double sub_1015AC3D0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    uint64_t v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,Clearing cached refLoc and drive info\"}", (uint8_t *)v4, 0x12u);
  }
  sub_100F40DB8(a1 + 120);
  *(unsigned char *)(a1 + 976) = 0;
  *(void *)(a1 + 968) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 952) = 0u;
  return result;
}

void sub_1015AC4C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 216);
  uint64_t v5 = a1 + 120;
  long long v6 = *(_OWORD *)(a1 + 232);
  *(_OWORD *)(a2 + 96) = v4;
  *(_OWORD *)(a2 + 112) = v6;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 248);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(v5 + 140);
  long long v7 = *(_OWORD *)(a1 + 168);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(a2 + 48) = v7;
  long long v8 = *(_OWORD *)(a1 + 200);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 184);
  *(_OWORD *)(a2 + 80) = v8;
  long long v9 = *(_OWORD *)(a1 + 136);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 16) = v9;
  double v10 = sub_100121610(v5, a1 + 280);
  BOOL v11 = v10 > 1.0 && (*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
  double v12 = v10 + 0.0;
  if (!v11) {
    double v12 = 0.0;
  }
  if (v10 > 0.0) {
    double v13 = v12;
  }
  else {
    double v13 = 0.0;
  }
  if (*(unsigned char *)(a1 + 976))
  {
    double v14 = *(double *)(a1 + 952);
    double v15 = v10 * 0.5;
    if (v14 <= v10 * 0.5)
    {
      if (*(double *)(a1 + 968) <= v15)
      {
        if (v14 >= v15 || v14 <= 0.0) {
          double v16 = 8.94075;
        }
        else {
          double v16 = 17.8815;
        }
      }
      else
      {
        double v16 = 17.8815;
      }
    }
    else
    {
      double v16 = 35.763;
    }
  }
  else
  {
    double v16 = dbl_101E12A60[*(_DWORD *)(a1 + 948) < 2u];
  }
  double v18 = *(double *)(a2 + 20);
  if (v18 <= 0.0)
  {
    double v19 = *(double *)(a2 + 20);
  }
  else
  {
    double v19 = sqrt(v16 * (v13 * v13 * v16) + v18 * v18);
    *(double *)(a2 + 20) = v19;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v21 = *(unsigned __int8 *)(a1 + 976);
      *(_DWORD *)buf = 134350080;
      double v32 = v18;
      __int16 v33 = 2050;
      double v34 = v19;
      __int16 v35 = 2050;
      uint64_t v36 = *(void *)&v13;
      __int16 v37 = 2050;
      double v38 = v16;
      __int16 v39 = 1026;
      int v40 = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,Age Propagation,Unc,%{public}.1lf,PropUnc,%{public}.1lf,PropDur,%{public}.1lf,SpeedSigma,%{public}.1lf,driveHistoryUpd,%{public}d", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLDaemonLocation CLGnssRefPosMaintenance::propagateLocationToStartOfNextMaintenancePeriod()", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  unsigned int v23 = *(_DWORD *)(a1 + 948);
  if (v23 >= 2)
  {
    double v24 = 17.8815;
    if (*(unsigned char *)(a1 + 976))
    {
      if (*(double *)(a1 + 960) <= 0.0)
      {
        double v25 = 0.0;
      }
      else
      {
        double v25 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 960);
        unsigned int v23 = *(_DWORD *)(a1 + 948);
      }
      if (v23 == 2)
      {
        if (v25 > 1800.0 || *(double *)(a1 + 952) == 0.0) {
          double v24 = 8.94075;
        }
        else {
          double v24 = 17.8815;
        }
      }
    }
  }
  else
  {
    double v24 = 35.763;
  }
  if (v19 > 0.0)
  {
    double v27 = sqrt(v24 * (v24 * 810000.0) + v19 * v19);
    *(double *)(a2 + 20) = v27;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    __int16 v28 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349824;
      double v32 = v19;
      __int16 v33 = 2050;
      double v34 = v27;
      __int16 v35 = 2050;
      uint64_t v36 = 0x408C200000000000;
      __int16 v37 = 2050;
      double v38 = v24;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,Maintenance period Propagation,Unc,%{public}.1lf,PropUnc,%{public}.1lf,PropDur,%{public}.1lf,SpeedSigma,%{public}.1lf", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      __int16 v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLDaemonLocation CLGnssRefPosMaintenance::propagateLocationToStartOfNextMaintenancePeriod()", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  double v29 = *(double *)(a2 + 36);
  if (v29 > 0.0) {
    *(double *)(a2 + 36) = sqrt((v10 + 900.0) * (v10 + 900.0) + v29 * v29);
  }
  *(double *)(a2 + 76) = v10 + *(double *)(a2 + 76) + 900.0;
}

BOOL sub_1015ACA6C(uint64_t a1)
{
  uint64_t v2 = a1 + 120;
  if (!sub_1000E6DB4(a1 + 120)) {
    return 0;
  }
  double v3 = sub_100121610(v2, a1 + 280);
  sub_1015AC4C8(a1, (uint64_t)v9);
  double v4 = v10;
  BOOL v5 = v10 < 67500.0 && v3 < 7200.0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  long long v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349824;
    double v21 = v4;
    __int16 v22 = 2050;
    uint64_t v23 = v11;
    __int16 v24 = 2050;
    double v25 = v3;
    __int16 v26 = 1026;
    BOOL v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,isValidWarmPos,Propagated horizontal Unc,%{public}.1lf,Propagated vert Unc,%{public}.1lf,age,%{public}.1lf,isWarm,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    int v12 = 134349824;
    double v13 = v4;
    __int16 v14 = 2050;
    uint64_t v15 = v11;
    __int16 v16 = 2050;
    double v17 = v3;
    __int16 v18 = 1026;
    BOOL v19 = v5;
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::isCachedRefLocationWarm()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v5;
}

void sub_1015ACCC4(uint64_t a1)
{
  if (sub_100744494())
  {
    *(unsigned char *)(a1 + 976) = 0;
    *(void *)(a1 + 968) = 0;
    *(_OWORD *)(a1 + 952) = 0u;
    if (sub_100121610(a1 + 120, a1 + 280) <= 7200.0)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      long long v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a1 + 196)];
      long long v7 = +[NSDate dateWithTimeIntervalSinceReferenceDate:Current];
      id v8 = objc_alloc_init((Class)CMMotionActivityManager);
      *(void *)(a1 + 112) = v8;
      id v9 = [objc_msgSend(*(id *)a1, "silo") operationQueue];
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_1015AE2A4;
      v10[3] = &unk_10232F660;
      v10[4] = a1;
      *(double *)&_OWORD v10[5] = Current;
      [v8 queryActivityStartingFromDate:v6 toDate:v7 toQueue:v9 withHandler:v10];
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,Ref location old", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      __int16 v11 = 0;
LABEL_19:
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::getDriveHistorySinceLastCachedRefPosition()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    double v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,GNSS not used", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      __int16 v11 = 0;
      goto LABEL_19;
    }
  }
}

void sub_1015AD01C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 920))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v1 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,startWiFiCellLocationRequest,already started", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::startWiFiCellLocationRequest()", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
  }
  else
  {
    if (*(void *)(a1 + 48))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      double v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,Enabling WiFi location notification", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::startWiFiCellLocationRequest()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      [*(id *)(*(void *)(a1 + 48) + 16) register:*(void *)(*(void *)(a1 + 48) + 8) forNotification:0 registrationInfo:0];
    }
    if (*(void *)(a1 + 56))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      BOOL v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,Enabling Cell location notification", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        long long v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::startWiFiCellLocationRequest()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      [*(id *)(*(void *)(a1 + 56) + 16) register:*(void *)(*(void *)(a1 + 56) + 8) forNotification:0 registrationInfo:0];
    }
    *(double *)(a1 + 936) = sub_10016C458();
    *(unsigned char *)(a1 + 920) = 1;
    sub_1015A94B8((void *)a1);
  }
}

void sub_1015AD468(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 920))
  {
    if (*(void *)(a1 + 48))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      uint64_t v2 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,Disabling WiFi location notification", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        BOOL v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopWiFiCellLocationRequest()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
      [*(id *)(*(void *)(a1 + 48) + 16) unregister:*(void *)(*(void *)(a1 + 48) + 8) forNotification:0];
    }
    if (*(void *)(a1 + 56))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      double v3 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#GnssRefPosMaintenance,Disabling Cell location notification", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopWiFiCellLocationRequest()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      [*(id *)(*(void *)(a1 + 56) + 16) unregister:*(void *)(*(void *)(a1 + 56) + 8) forNotification:0];
    }
    *(unsigned char *)(a1 + 920) = 0;
    sub_1015A95B0((void *)a1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    double v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,stopWiFiCellLocationRequest,already stopped", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopWiFiCellLocationRequest()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

BOOL sub_1015AD89C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 921))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v1 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,startGnssOnDemand,already started", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      double v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssRefPosMaintenance::startGnssOnDemand()", "%s\n");
LABEL_22:
      if (v3 != buf) {
        free(v3);
      }
      return 0;
    }
  }
  else
  {
    if (+[CLGnssProviderAdapter isSupported]
      && *(void *)(a1 + 64))
    {
      __asm { FMOV            V0.2D, #-1.0 }
      sub_10012F770();
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    double v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,failed to start Gnss", buf, 2u);
    }
    BOOL v11 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v11)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      double v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGnssRefPosMaintenance::startGnssOnDemand()", "%s\n");
      goto LABEL_22;
    }
  }
  return result;
}

void sub_1015ADE18(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 921))
  {
    if (+[CLGnssProviderAdapter isSupported])
    {
      uint64_t v2 = *(void *)(a1 + 64);
      if (v2)
      {
        [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:0];
        *(unsigned char *)(a1 + 921) = 0;
        sub_1015A95B0((void *)a1);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        double v3 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#wigo,off,CLGnssRefPosMaintenance", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          long long v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopGnssOnDemand()", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_10232F680);
        }
        double v4 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,stopGnssOnDemand,stopped Gnss", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1)
          {
LABEL_23:
            long long v6 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::stopGnssOnDemand()", "%s\n", v6);
            if (v6 != (char *)buf) {
              free(v6);
            }
            return;
          }
LABEL_29:
          dispatch_once(&qword_1024193D0, &stru_10232F680);
          goto LABEL_23;
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    BOOL v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,stopGnssOnDemand,already stopped Gnss session", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_23;
      }
      goto LABEL_29;
    }
  }
}

uint64_t sub_1015AE1E0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  long long v8 = *(_OWORD *)(a2 + 96);
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  memcpy((void *)(a1 + 160), (const void *)(a2 + 160), 0x201uLL);
  uint64_t v11 = *(void *)(a2 + 680);
  uint64_t v12 = *(void *)(a2 + 688);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 680) = v11;
  double v13 = *(std::__shared_weak_count **)(a1 + 688);
  *(void *)(a1 + 688) = v12;
  if (v13) {
    sub_1000DB0A0(v13);
  }
  long long v14 = *(_OWORD *)(a2 + 696);
  long long v15 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 712) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 728) = v15;
  *(_OWORD *)(a1 + 696) = v14;
  long long v16 = *(_OWORD *)(a2 + 744);
  long long v17 = *(_OWORD *)(a2 + 760);
  long long v18 = *(_OWORD *)(a2 + 776);
  *(void *)(a1 + 789) = *(void *)(a2 + 789);
  *(_OWORD *)(a1 + 760) = v17;
  *(_OWORD *)(a1 + 776) = v18;
  *(_OWORD *)(a1 + 744) = v16;
  return a1;
}

void sub_1015AE2A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v15 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,error querying motion activity,%{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_24:
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssRefPosMaintenance::getDriveHistorySinceLastCachedRefPosition()_block_invoke", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
        goto LABEL_22;
      }
LABEL_30:
      dispatch_once(&qword_1024193D0, &stru_10232F680);
      goto LABEL_24;
    }
  }
  else if (a2 && [a2 count])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      id v15 = [a2 count];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,received,%{public}lu,responses for motion activity", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      [a2 count];
      double v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::getDriveHistorySinceLastCachedRefPosition()_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    sub_1015AE704(v3, a2, *(double *)(a1 + 40));
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      long long v10 = *(void **)(v3 + 196);
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 134349312;
      id v15 = v10;
      __int16 v16 = 2050;
      uint64_t v17 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,no motion activity returned for duration,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_24;
      }
      goto LABEL_30;
    }
  }
LABEL_22:
  sub_1015AEC30(v3);
}

void sub_1015AE704(uint64_t a1, void *a2, double a3)
{
  if (a2)
  {
    long long v4 = a2;
    if ([a2 count])
    {
      unsigned int v6 = [v4 count];
      long long v7 = &qword_102419000;
      long long v8 = &qword_102419000;
      uint64_t v9 = v6;
      if (v6)
      {
        unint64_t v10 = 0;
        unint64_t v11 = v6 - 1;
        double v12 = 0.0;
        double v13 = 0.0;
        uint64_t v37 = v6;
        do
        {
          id v14 = [v4 objectAtIndexedSubscript:v10];
          [objc_msgSend(v14, "startDate") timeIntervalSinceReferenceDate];
          if (v15 >= *(double *)(a1 + 196)) {
            double v16 = v15;
          }
          else {
            double v16 = *(double *)(a1 + 196);
          }
          double v17 = a3;
          if (v10 < v11)
          {
            [objc_msgSend(objc_msgSend(objc_msgSend(v4, "objectAtIndexedSubscript:", v10 + 1), "startDate"), "timeIntervalSinceReferenceDate"]
            double v17 = v18;
          }
          if (v7[122] != -1) {
            dispatch_once(&qword_1024193D0, &stru_10232F680);
          }
          BOOL v19 = v8[123];
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            unsigned int v40 = [v14 stationary];
            unsigned int v39 = [v14 walking];
            unsigned int v38 = [v14 running];
            unsigned int v20 = [v14 automotive];
            double v21 = v7;
            unsigned int v22 = [v14 cycling];
            uint64_t v23 = v4;
            uint64_t v24 = a1;
            unsigned int v25 = [v14 unknown];
            unsigned int v26 = [v14 confidence];
            *(_DWORD *)buf = 68291330;
            *(_DWORD *)__int16 v42 = 0;
            *(_WORD *)&v42[4] = 2082;
            *(void *)&v42[6] = "";
            *(_WORD *)&v42[14] = 1026;
            *(_DWORD *)&v42[16] = v40;
            LOWORD(v43) = 1026;
            *(_DWORD *)((char *)&v43 + 2) = v39;
            HIWORD(v43) = 1026;
            unsigned int v44 = v38;
            __int16 v45 = 1026;
            unsigned int v46 = v20;
            long long v8 = &qword_102419000;
            __int16 v47 = 1026;
            unsigned int v48 = v22;
            long long v7 = v21;
            uint64_t v9 = v37;
            __int16 v49 = 1026;
            unsigned int v50 = v25;
            a1 = v24;
            long long v4 = v23;
            __int16 v51 = 1026;
            unsigned int v52 = v26;
            __int16 v53 = 2050;
            double v54 = v16;
            __int16 v55 = 2050;
            double v56 = v17;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,handleMotionActivityResponse,\", \"stationary\":%{public}hhd, \"walking\":%{public}hhd, \"running\":%{public}hhd, \"automotive\":%{public}hhd, \"cycling\":%{public}hhd, \"unknown\":%{public}hhd, \"confidence\":%{public}d, \"motionStartTime\":\"%{public}.1f\", \"motionEndTime\":\"%{public}.1f\"}", buf, 0x50u);
          }
          double v27 = vabdd_f64(v17, v16);
          if (v17 <= v16) {
            double v28 = 0.0;
          }
          else {
            double v28 = v27;
          }
          if ([v14 automotive])
          {
            double v13 = v13 + v28;
            *(double *)(a1 + 960) = v17;
          }
          else
          {
            unsigned int v29 = [v14 unknown];
            double v30 = -0.0;
            if (v29) {
              double v30 = v28;
            }
            double v12 = v12 + v30;
          }
          ++v10;
        }
        while (v9 != v10);
      }
      else
      {
        double v13 = 0.0;
        double v12 = 0.0;
      }
      *(double *)(a1 + 952) = v13;
      *(double *)(a1 + 968) = v12;
      *(unsigned char *)(a1 + 976) = 1;
      if (v7[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      double v32 = v8[123];
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = *(void *)(a1 + 952);
        uint64_t v34 = *(void *)(a1 + 968);
        uint64_t v35 = *(void *)(a1 + 960);
        *(_DWORD *)buf = 134349568;
        *(void *)__int16 v42 = v33;
        *(_WORD *)&v42[8] = 2050;
        *(void *)&v42[10] = v34;
        *(_WORD *)&v42[18] = 2050;
        uint64_t v43 = v35;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,handleMotionActivityResponse,driveDur,%{public}.1lf,unKnownDriveDur,%{public}.1lf,lastDriveEndTime,%{public}.1lf", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (v7[122] != -1) {
        goto LABEL_39;
      }
      goto LABEL_40;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v31 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,handleMotionActivityResponse,No motion activities reported", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
LABEL_39:
    }
      dispatch_once(&qword_1024193D0, &stru_10232F680);
LABEL_40:
    uint64_t v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::handleMotionActivityResponse(NSArray<CMMotionActivity *> *, CFAbsoluteTime)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
}

void sub_1015AEC30(uint64_t a1)
{
  *(void *)(a1 + 112) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,releaseMotionActivityManager", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::releaseMotionActivityManager()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

uint64_t sub_1015AEDC8(uint64_t a1, uint64_t a2)
{
  sub_100F40DB8(a2);
  if (!*(unsigned char *)(a1 + 1112)) {
    return 0;
  }
  uint64_t v4 = a1 + 984;
  sub_10053C9B0(v4);
  int v12 = 0xFFFF;
  uint64_t v14 = 0;
  uint64_t v13 = 0;
  long long v15 = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  v16[0] = _Q0;
  v16[1] = _Q0;
  long long v17 = _Q0;
  int v18 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v19 = 0xBFF0000000000000;
  int v22 = 0;
  unint64_t v23 = 0xBFF0000000000000;
  int v24 = 0x7FFFFFFF;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  char v28 = 0;
  sub_1000DBC34(&v29);
  if ((sub_1000A699C(v4, "CLGnssRefPosMaintenance_Latitude", &v13) & 1) != 0
    && sub_1000A699C(v4, "CLGnssRefPosMaintenance_Longitude", &v14)
    && sub_1000A699C(v4, "CLGnssRefPosMaintenance_HorizontalAcc", &v15)
    && sub_1000A699C(v4, "CLGnssRefPosMaintenance_Altitude", (char *)&v15 + 8)
    && sub_1000A699C(v4, "CLGnssRefPosMaintenance_VerticalAcc", v16)
    && sub_1000A699C(v4, "CLGnssRefPosMaintenance_Timestamp", (char *)&v17 + 8)
    && sub_10006EF84(v4, "CLGnssRefPosMaintenance_Confidence", &v18))
  {
    uint64_t v10 = 1;
    HIDWORD(v25) = 1;
    sub_1015AE1E0(a2, (uint64_t)&v12);
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (v30) {
    sub_1000DB0A0(v30);
  }
  return v10;
}

void sub_1015AEF84(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1015AEF9C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 1112)) {
    return 0;
  }
  uint64_t v3 = a1;
  sub_1015AF1EC(a1, a2);
  v3 += 984;
  sub_10053C9B0(v3);
  sub_10016332C(v3, "CLGnssRefPosMaintenance_Latitude", (const void *)(a2 + 4));
  sub_10016332C(v3, "CLGnssRefPosMaintenance_Longitude", (const void *)(a2 + 12));
  sub_10016332C(v3, "CLGnssRefPosMaintenance_HorizontalAcc", (const void *)(a2 + 20));
  sub_10016332C(v3, "CLGnssRefPosMaintenance_Altitude", (const void *)(a2 + 28));
  sub_10016332C(v3, "CLGnssRefPosMaintenance_VerticalAcc", (const void *)(a2 + 36));
  sub_10016332C(v3, "CLGnssRefPosMaintenance_Timestamp", (const void *)(a2 + 76));
  sub_1000EA838(v3, "CLGnssRefPosMaintenance_Confidence", (const void *)(a2 + 84));
  if (sub_10053CD58(v3)) {
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10232F680);
  }
  long long v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,writeDaemonLocationToPersistentStore,not stored", buf, 2u);
  }
  BOOL v6 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGnssRefPosMaintenance::writeDaemonLocationToPersistentStore(GNSS::DaemonLocation &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

void sub_1015AF1EC(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a2 + 20);
  if (v3 > 0.0)
  {
    float64x2_t v4 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
    *(float64x2_t *)(a2 + 4) = vmulq_f64(vrndaq_f64(vdivq_f64(*(float64x2_t *)(a2 + 4), v4)), v4);
    *(double *)(a2 + 20) = sqrt(v3 * v3 + 123920211.0);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    long long v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a2 + 20);
      *(_DWORD *)buf = 134349312;
      double v15 = v3;
      __int16 v16 = 2050;
      uint64_t v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,diluteLocationPrecision,HorUnc,%{public}.1lf,LimitedPrecisionHorUnc,%{public}.1lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::diluteLocationPrecision(CLDaemonLocation &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  double v7 = *(double *)(a2 + 36);
  if (v7 > 0.0)
  {
    double v8 = *(double *)(a2 + 28);
    *(double *)(a2 + 28) = round(v8 / 500.0) * 500.0;
    *(double *)(a2 + 36) = sqrt(v7 * v7 + 250000.0);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10232F680);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = *(void *)(a2 + 28);
      uint64_t v11 = *(void *)(a2 + 36);
      *(_DWORD *)buf = 134349824;
      double v15 = v8;
      __int16 v16 = 2050;
      uint64_t v17 = v10;
      __int16 v18 = 2050;
      double v19 = v7;
      __int16 v20 = 2050;
      uint64_t v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,diluteLocationPrecision,oldAlt,%{public}.1lf,newAlt,%{public}.1lf,VertUnc,%{public}.1lf,LimitedPrecisionVertUnc,%{public}.1lf", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_10232F680);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::diluteLocationPrecision(CLDaemonLocation &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_1015AF5C8(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1015AF5F8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1015AF628(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1015AF6C0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E12AC0;
      v0[3] = unk_101E12AD0;
      v0[4] = xmmword_101E12AE0;
      v0[0] = xmmword_101E12AA0;
      v0[1] = unk_101E12AB0;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1015AF7A0(_Unwind_Exception *a1)
{
}

void sub_1015AF7B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1015AF838()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1015AF8C8(_Unwind_Exception *a1)
{
}

uint64_t sub_1015AF8E0()
{
  sub_100134750(qword_102488F08, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102488F08, (void *)&_mh_execute_header);
}

uint64_t sub_1015AF940(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = a3[1];
  if (*a3 == v7 || (uint64_t v8 = *a4, v9 = a4[1], *a4 == v9))
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10232F6C0);
    }
    __int16 v20 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = (a3[1] - *a3) >> 5;
      uint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((a4[1] - *a4) >> 3);
      *(_DWORD *)buf = 134349312;
      double v40 = *(double *)&v21;
      __int16 v41 = 2050;
      double v42 = *(double *)&v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "HRSteadyStateEstimator: Insufficient samples for HRSS estimation (numHR:%{public}lu, numWR:%{public}lu)", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_54;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 == -1) {
      goto LABEL_62;
    }
    goto LABEL_64;
  }
  double v10 = *(double *)(v7 - 24);
  if (v10 < *(double *)(v9 - 48)) {
    double v10 = *(double *)(v9 - 48);
  }
  double v11 = *(double *)(a2 + 56);
  if (v11 + 180.0 >= v10) {
    double v12 = v10;
  }
  else {
    double v12 = v11 + 180.0;
  }
  if (v11 >= v12 + -30.0) {
    double v13 = *(double *)(a2 + 56);
  }
  else {
    double v13 = v12 + -30.0;
  }
  do
  {
    double v14 = *(double *)(v8 + 8);
    BOOL v15 = v14 > v13 && v14 < v12;
    if (v15 && *(double *)(v8 + 16) > 5.0)
    {
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_10232F6C0);
      }
      __int16 v16 = qword_1024192C8;
      if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEFAULT))
      {
        double v17 = *(double *)(v8 + 8);
        double v18 = *(double *)(v8 + 16);
        *(_DWORD *)buf = 134349312;
        double v40 = v17;
        __int16 v41 = 2050;
        double v42 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "HRSteadyStateEstimator: Found METs above threshold during steady state period (startTime:%{public}f, METs:%{public}f)", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192C0 != -1) {
          dispatch_once(&qword_1024192C0, &stru_10232F6C0);
        }
        double v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHRSteadyStateEstimator::getEstimate(HRRecoveryResult &, const std::vector<HRRecoveryInputHR> &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
    }
    v8 += 56;
  }
  while (v8 != v9);
  double v23 = *(double *)(a2 + 56);
  double v24 = v23 + 120.0;
  if (v23 + 120.0 >= v12) {
    double v24 = v12;
  }
  if (v23 < v24 + -30.0) {
    double v23 = v24 + -30.0;
  }
  uint64_t v25 = *a3;
  uint64_t v26 = a3[1];
  if (*a3 == v26) {
    goto LABEL_49;
  }
  double v27 = 0.0;
  double v28 = 0.0;
  double v29 = 0.0;
  double v30 = 0.0;
  do
  {
    double v31 = *(double *)(v25 + 8);
    if (v31 > v13 && v31 < v12)
    {
      double v30 = v30 + 1.0;
      double v32 = *(double *)(v25 + 16);
    }
    else
    {
      double v32 = -0.0;
    }
    double v29 = v29 + v32;
    if (v31 > v23 && v31 < v24)
    {
      double v28 = v28 + 1.0;
      double v33 = *(double *)(v25 + 16);
    }
    else
    {
      double v33 = -0.0;
    }
    double v27 = v27 + v33;
    v25 += 32;
  }
  while (v25 != v26);
  if (v30 == 0.0)
  {
LABEL_49:
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10232F6C0);
    }
    uint64_t v34 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349312;
      double v40 = v13;
      __int16 v41 = 2050;
      double v42 = v12;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "HRSteadyStateEstimator: No HRSS estimate due to no HR samples in steady state period (start:%{public}f, end:%{public}f", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_54;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 == -1)
    {
LABEL_62:
      unsigned int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLHRSteadyStateEstimator::getEstimate(HRRecoveryResult &, const std::vector<HRRecoveryInputHR> &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
LABEL_54:
      int v35 = 7;
LABEL_55:
      uint64_t result = 0;
      *(_DWORD *)a2 = v35;
      return result;
    }
LABEL_64:
    dispatch_once(&qword_1024192C0, &stru_10232F6C0);
    goto LABEL_62;
  }
  double v37 = v29 / v30;
  if (v27 / v28 < v29 / v30) {
    double v37 = v27 / v28;
  }
  *(double *)(a2 + 72) = v37;
  if (v37 > *(double *)(a2 + 64))
  {
    int v35 = 8;
    goto LABEL_55;
  }
  return 1;
}

void sub_1015AFF50(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

float sub_1015AFF80(float a1, float a2)
{
  return fmax((a1 * 3.5 + -7.0) / 10.8 * a2, 0.0);
}

float sub_1015AFFB4(uint64_t a1)
{
  float result = *(float *)(a1 + 44);
  if (result <= 7.0) {
    return *(float *)(a1 + 16);
  }
  return result;
}

BOOL sub_1015AFFCC(float a1)
{
  return a1 <= 10.0 && a1 >= 1.0;
}

BOOL sub_1015AFFE8(unint64_t a1)
{
  return sub_1015B0008(a1) != 66;
}

uint64_t sub_1015B0008(unint64_t a1)
{
  if (a1 > 0x42) {
    return 4;
  }
  else {
    return qword_101E12AF8[a1];
  }
}

double sub_1015B0028(void *a1, __n128 *a2)
{
  sub_1015B00CC(a1, a2);
  for (uint64_t i = a1[5]; i; uint64_t i = a1[5])
  {
    unint64_t v5 = a1[4];
    if (vabdd_f64(*(double *)(*(void *)(a1[1] + ((v5 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v5), a2->n128_f64[0]) <= 60.0)break; {
    a1[4] = v5 + 1;
    }
    a1[5] = i - 1;
    sub_100096314((uint64_t)a1, 1);
  }

  return sub_1015B0158(a1);
}

__n128 sub_1015B00CC(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1015B0204(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

double sub_1015B0158(void *a1)
{
  uint64_t v1 = a1[1];
  if (a1[2] == v1)
  {
    unint64_t v2 = a1[5];
  }
  else
  {
    unint64_t v3 = a1[4];
    unint64_t v2 = a1[5];
    uint64_t v4 = (uint64_t *)(v1 + 8 * (v3 >> 8));
    uint64_t v5 = *v4;
    uint64_t v6 = *v4 + 16 * v3;
    uint64_t v7 = *(void *)(v1 + (((v2 + v3) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v2 + v3);
    if (v6 != v7)
    {
      double result = 0.0;
      do
      {
        uint64_t v9 = v6 + 16;
        if (v6 + 16 - v5 == 4096)
        {
          uint64_t v10 = v4[1];
          ++v4;
          uint64_t v5 = v10;
          uint64_t v9 = v10;
        }
        *(float *)&double result = *(float *)&result + *(float *)(v6 + 8);
        uint64_t v6 = v9;
      }
      while (v9 != v7);
      if (v2) {
        goto LABEL_8;
      }
      return 0.0;
    }
  }
  double result = 0.0;
  if (v2)
  {
LABEL_8:
    *(float *)&double result = *(float *)&result / (float)v2;
    return result;
  }
  return 0.0;
}

float sub_1015B01E8(uint64_t a1)
{
  return (double)*(unint64_t *)(a1 + 40) / 23.4375;
}

void sub_1015B0204(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      double v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unsigned int v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      double v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1015B04D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_1015B051C(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *(void *)(a2 + 4);
  float v2 = *(double *)(a2 + 168);
  int v3 = *(_DWORD *)(a2 + 12);
  float v16 = v2;
  int v17 = v3;
  int32x2_t v18 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  int v19 = *(_DWORD *)(a2 + 28);
  long long v20 = *(_OWORD *)(a2 + 40);
  int v4 = *(_DWORD *)(a2 + 60);
  int v5 = *(_DWORD *)(a2 + 124);
  int v6 = *(_DWORD *)(a2 + 128);
  int v21 = *(_DWORD *)(a2 + 56);
  int v22 = v5;
  int v23 = v4;
  int v24 = v6;
  int v25 = *(_DWORD *)(a2 + 184);
  uint64_t v26 = *(void *)(a2 + 192);
  int v7 = *(_DWORD *)(a2 + 224);
  int v27 = *(_DWORD *)(a2 + 200);
  int v28 = v7;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v8 = sub_1015B0008(*(void *)(a2 + 152));
  float v9 = 0.0;
  if (v8 == 17) {
    float v9 = 1.0;
  }
  float v29 = v9;
  v11[1] = &off_10232F6E0;
  _DWORD v11[2] = 27;
  char v12 = 1;
  uint64_t v13 = &off_10232F890;
  v11[0] = off_10232FAA0;
  int v14 = 1056964608;
  return sub_1015B061C((uint64_t)v11, (uint64_t)&v15);
}

float sub_1015B061C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_11;
  }
  unint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    double v6 = sub_1015B07FC((void *)a1, a2, v4);
    float v5 = v5 + *(float *)&v6;
    ++v4;
    unint64_t v7 = *(void *)(a1 + 16);
  }
  while (v4 < v7);
  if (!v7)
  {
LABEL_11:
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_101ABE488();
    }
    __assert_rtn("evaluateForest", "CMRandomForestXGBoostedRegression.h", 49, "false");
  }
  return v5 + *(float *)(a1 + 40);
}

uint64_t sub_1015B06C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(void *)(a1 + 16) <= a3)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_101ABE608();
    }
    __assert_rtn("findLeaf", "CMRandomForest.h", 56, "false");
  }
  unint64_t v3 = 0;
  unint64_t v4 = (void *)(*(void *)(a1 + 8) + 16 * a3);
  do
  {
    if (v3 >= v4[1])
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_101ABE588();
      }
      __assert_rtn("findLeaf", "CMRandomForest.h", 91, "false");
    }
    unint64_t v5 = *(unsigned __int16 *)(*v4 + 10 * v3 + 4);
    if (v5 >= 0x1D)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_101ABE508();
      }
      __assert_rtn("findLeaf", "CMRandomForest.h", 65, "false");
    }
    double v6 = (float *)(*v4 + 10 * v3);
    float v7 = *(float *)(a2 + 4 * v5);
    uint64_t v8 = (unsigned __int16 *)v6 + 3;
    float v10 = *v6;
    float v9 = (unsigned __int16 *)(v6 + 2);
    BOOL v11 = v7 > v10;
    if (v7 >= v10) {
      char v12 = v9;
    }
    else {
      char v12 = v8;
    }
    if (!v11) {
      float v9 = v8;
    }
    if (*(unsigned char *)(a1 + 24)) {
      float v9 = v12;
    }
    int v13 = (__int16)*v9;
    unint64_t v3 = *v9;
  }
  while ((v13 & 0x80000000) == 0);
  return (__int16)~(_WORD)v3;
}

double sub_1015B07FC(void *a1, uint64_t a2, uint64_t a3)
{
  int v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (v5 == -1) {
    return 0.0;
  }
  uint64_t v7 = a1[4];
  if (*(void *)(v7 + 16 * a3 + 8) <= (unint64_t)(unsigned __int16)v5)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
      sub_101ABE688();
    }
    __assert_rtn("evaluateTree", "CMRandomForestRegression.h", 58, "false");
  }
  LODWORD(result) = *(_DWORD *)(*(void *)(v7 + 16 * a3) + 4 * (unsigned __int16)v5);
  return result;
}

void sub_1015B08C4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t sub_1015B08E0(uint64_t a1, void *a2)
{
  *(void *)a1 = off_10232FB08;
  *(void *)(a1 + 8) = [a2 newTimer];
  uint64_t v4 = 0x40D5180000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 16), "WorkoutEffortAnalyticsTimerSnoozeIntervalSeconds", &v4, 0);
  uint64_t v4 = 0x40AC200000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 40), "WorkoutEffortAnalyticsTimerFireDelay", &v4, 0);
  [*(id *)(a1 + 8) setNextFireDelay:*(double *)(a1 + 48) interval:*(double *)(a1 + 24)];
  return a1;
}

uint64_t sub_1015B0990(uint64_t a1)
{
  *(void *)a1 = off_10232FB08;
  [*(id *)(a1 + 8) invalidate];

  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_1015B09EC(uint64_t a1)
{
  sub_1015B0990(a1);

  operator delete();
}

void sub_1015B0A24(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3321888768;
    void v5[2] = sub_1015B0C3C;
    v5[3] = &unk_10232FB20;
    sub_100ED9118((uint64_t)v6, a2);
    [*(id *)(a1 + 8) setHandler:v5];
    sub_10043C994(v6);
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FBB8);
    }
    unint64_t v3 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "AnalyticsLogger, timer unexpectedly nil when setting handler function", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLWorkoutEffortAnalyticsLogger::Timer::setHandler(OnTimerFireHandler)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_1015B0C20(_Unwind_Exception *a1)
{
  sub_10043C994(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1015B0C3C(uint64_t a1)
{
  uint64_t v1 = a1 + 32;
  double Current = CFAbsoluteTimeGetCurrent();

  return sub_10015E508(v1, Current);
}

uint64_t sub_1015B0C74(uint64_t a1, uint64_t a2)
{
  return sub_100ED9118(a1 + 32, a2 + 32);
}

void *sub_1015B0C80(uint64_t a1)
{
  return sub_10043C994((void *)(a1 + 32));
}

uint64_t sub_1015B0C88(uint64_t a1, void *a2, void *a3)
{
  *(void *)a1 = off_10232FB60;
  *(void *)(a1 + 8) = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 16) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = 0x402C000000000000;
  sub_101A1F180((unsigned __int8 *)(a1 + 24), "WorkoutEffortAnalyticsDaysToDelayAnalyticsLogging", &v9, 0);
  *(void *)(a1 + 48) = 0xBFF0000000000000;
  *(void *)(a1 + 56) = *a3;
  uint64_t v6 = a3[1];
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 3;
  *(void *)(a1 + 128) = 0;
  uint64_t v7 = *(void (****)(void, void *))(a1 + 8);
  if (v7)
  {
    v10[0] = off_10232FBE8;
    v10[1] = a1;
    v10[3] = v10;
    (**v7)(v7, v10);
    sub_10043C994(v10);
  }
  return a1;
}

void sub_1015B0DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10043C994((uint64_t *)va);
  sub_1015B4DC8(v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 64);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v2 + 16);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  _Unwind_Resume(a1);
}

void *sub_1015B0E28(void *a1)
{
  *a1 = off_10232FB60;
  sub_1015B4DC8(a1 + 9);
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

void sub_1015B0E88(void *a1)
{
  sub_1015B0E28(a1);

  operator delete();
}

void sub_1015B0EC0(uint64_t a1, double a2)
{
  if (*(_DWORD *)(a1 + 120) != 3 || *(void *)(a1 + 112))
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FBB8);
    }
    uint64_t v4 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "AnalyticsLogger, update, metrics aggregation triggered while existing query was running, progress will be lost", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      LOWORD(v19) = 0;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::update(CFAbsoluteTime)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  sub_1015B1514(a1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1))
  {
    double v5 = sub_1015B16C4(a1, a2);
    *(double *)(a1 + 48) = v5;
    signed int v6 = vcvtmd_s64_f64(v5 / 86400.0);
    int v18 = 0x7FFFFFFF;
    uint64_t v7 = sub_1000A6958();
    if (sub_10006EF84(v7, (const char *)[@"WorkoutEffortAnalyticsDayLastEventSent" UTF8String], &v18)&& v18 >= v6)
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      uint64_t v8 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 134218752;
        double v28 = a2;
        __int16 v29 = 2048;
        uint64_t v30 = v9;
        __int16 v31 = 1024;
        signed int v32 = v6;
        __int16 v33 = 1024;
        int v34 = v18;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AnalyticsLogger, update, already logged metrics, updateTime, %.2f, dayOfInterestStartTime, %.2f, dayOfInterest, %d, dayLastEventSent, %d", buf, 0x22u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        uint64_t v10 = *(void *)(a1 + 48);
        int v19 = 134218752;
        double v20 = a2;
        __int16 v21 = 2048;
        uint64_t v22 = v10;
        __int16 v23 = 1024;
        signed int v24 = v6;
        __int16 v25 = 1024;
        int v26 = v18;
LABEL_27:
        char v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::update(CFAbsoluteTime)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    else
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      int v13 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 134218752;
        double v28 = a2;
        __int16 v29 = 2048;
        uint64_t v30 = v14;
        __int16 v31 = 1024;
        signed int v32 = v6;
        __int16 v33 = 1024;
        int v34 = v18;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "AnalyticsLogger, update, attempting to log metrics for new day, updateTime, %.2f, dayOfInterestStartTime, %.2f, dayOfInterest, %d, dayLastEventSent, %d", buf, 0x22u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        uint64_t v16 = *(void *)(a1 + 48);
        int v19 = 134218752;
        double v20 = a2;
        __int16 v21 = 2048;
        uint64_t v22 = v16;
        __int16 v23 = 1024;
        signed int v24 = v6;
        __int16 v25 = 1024;
        int v26 = v18;
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::update(CFAbsoluteTime)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      *(_DWORD *)(a1 + 120) = 0;
      sub_1015B1750(a1);
    }
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FBB8);
    }
    BOOL v11 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "AnalyticsLogger, update, IHA disabled, no work needed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      LOWORD(v19) = 0;
      goto LABEL_27;
    }
  }
}

void *sub_1015B1514(uint64_t a1)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_10232FBB8);
  }
  uint64_t v2 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AnalyticsLogger, resetting query state", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FBB8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::resetQueryState()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_DWORD *)(a1 + 120) = 3;
  double result = sub_1015B5050((void *)(a1 + 72), 0, 0);
  *(void *)(a1 + 128) = 0;
  return result;
}

double sub_1015B16C4(uint64_t a1, double a2)
{
  uint64_t v4 = [+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone") secondsFromGMTForDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:")];
  return (double)(86400 * (int)((double)(int)vcvtmd_s64_f64(((double)v4 + a2) / 86400.0) - *(double *)(a1 + 32)))
       - (double)v4;
}

void sub_1015B1750(uint64_t a1)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_10232FBB8);
  }
  uint64_t v2 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
  {
    sub_1015B1F94(*(_DWORD *)(a1 + 120), &v35);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v3 = &v35;
    }
    else {
      unint64_t v3 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    unint64_t v4 = *(void *)(a1 + 112);
    if (v4 < 2) {
      unsigned int v5 = 3;
    }
    else {
      unsigned int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
    }
                     + 112 * (*(void *)(a1 + 104) % 0x24uLL)
                     + 80);
    sub_1015B1F94(v5, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315650;
    unsigned int v38 = v3;
    __int16 v39 = 2048;
    *(void *)uint64_t v40 = v4;
    *(_WORD *)&v40[8] = 2080;
    *(void *)&v40[10] = p_p;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "AnalyticsLogger, runNextPendingQuery, workoutsQueryState, %s, eventDataQueueSize, %zu, nextEventDataQueryState, %s", buf, 0x20u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FBB8);
    }
    sub_1015B1F94(*(_DWORD *)(a1 + 120), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v27 = &__p;
    }
    else {
      int v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    std::string::size_type v28 = *(void *)(a1 + 112);
    if (v28 < 2) {
      unsigned int v29 = 3;
    }
    else {
      unsigned int v29 = *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
    }
                      + 112 * (*(void *)(a1 + 104) % 0x24uLL)
                      + 80);
    sub_1015B1F94(v29, &v33);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v30 = &v33;
    }
    else {
      uint64_t v30 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    LODWORD(v35.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
    WORD2(v35.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = v28;
    HIWORD(v35.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v36 = v30;
    __int16 v31 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::runNextPendingQuery()", "%s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
  }
  if (*(_DWORD *)(a1 + 120) == 2)
  {
    if (*(void *)(a1 + 112))
    {
      unint64_t v7 = *(void *)(a1 + 104);
      uint64_t v8 = *(void *)(*(void *)(a1 + 80) + 8 * (v7 / 0x24));
      unint64_t v9 = v7 % 0x24;
      if (*(_DWORD *)(v8 + 112 * v9 + 80) == 2)
      {
        if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1))
        {
          unint64_t v10 = *(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
              + 112 * (*(void *)(a1 + 104) % 0x24uLL);
          uint64_t v11 = *(void *)(v10 + 56);
          for (uint64_t i = *(void *)(v10 + 64); v11 != i; v11 += 56)
          {
            sub_101014274(buf, (const unsigned __int8 *)v11);
            long long v13 = *(_OWORD *)(v11 + 16);
            long long v14 = *(_OWORD *)(v11 + 32);
            uint64_t v42 = *(void *)(v11 + 48);
            *(_OWORD *)&_OWORD v40[2] = v13;
            long long v41 = v14;
            unint64_t v15 = *(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
                + 112 * (*(void *)(a1 + 104) % 0x24uLL);
            BOOL v16 = *(unsigned char *)(v15 + 48) != 0;
            v35.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
            int v17 = sub_1015B6490((uint64_t **)(v15 + 88), buf, (uint64_t)&unk_101D0B290, (const unsigned __int8 **)&v35);
            int v19 = sub_1015B27D0(v18, (uint64_t)v17, v16, (uint64_t)buf, (uint64_t)(v17 + 6));
            (*(void (**)(uint64_t, NSDictionary *))(*(void *)a1 + 16))(a1, v19);
          }
          ++*(void *)(a1 + 128);
          sub_1015B2988((int64x2_t *)(a1 + 72));
          sub_1015B1750(a1);
        }
        else
        {
          if (qword_102419330 != -1) {
            dispatch_once(&qword_102419330, &stru_10232FBB8);
          }
          int v26 = qword_102419338;
          if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "AnalyticsLogger, IHA disabled, aborting sending aggregated metrics", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419330 != -1) {
              dispatch_once(&qword_102419330, &stru_10232FBB8);
            }
            LOWORD(v35.__r_.__value_.__l.__data_) = 0;
            signed int v32 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::runNextPendingQuery()", "%s\n", v32);
            if (v32 != (char *)buf) {
              free(v32);
            }
          }
          sub_1015B1514(a1);
        }
      }
      else
      {
        sub_1015B23F4(a1, v8 + 112 * v9);
      }
    }
    else
    {
      sub_1015B1514(a1);
      LODWORD(__p.__r_.__value_.__l.__data_) = vcvtmd_s64_f64(*(double *)(a1 + 48) / 86400.0);
      uint64_t v20 = sub_1000A6958();
      sub_1000EA838(v20, (const char *)[@"WorkoutEffortAnalyticsDayLastEventSent" UTF8String], &__p);
      uint64_t v21 = sub_1000A6958();
      (*(void (**)(uint64_t))(*(void *)v21 + 944))(v21);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      uint64_t v22 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v23 = *(std::string **)(a1 + 48);
        *(_DWORD *)buf = 134218240;
        unsigned int v38 = v23;
        __int16 v39 = 1024;
        *(_DWORD *)uint64_t v40 = __p.__r_.__value_.__l.__data_;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "AnalyticsLogger, successfully completed logging events for day of interest, startTime, %.2f, wholeDay, %d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        std::string::size_type v24 = *(void *)(a1 + 48);
        LODWORD(v35.__r_.__value_.__l.__data_) = 134218240;
        *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = v24;
        WORD2(v35.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[1] + 6) = __p.__r_.__value_.__l.__data_;
        __int16 v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::runNextPendingQuery()", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
    }
  }
  else
  {
    sub_1015B200C(a1);
  }
}

void sub_1015B1F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1015B1F94@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  sub_100134750(a2, "");
  if (a1 >= 4) {
    unint64_t v4 = "Unhandled query state";
  }
  else {
    unint64_t v4 = off_10232FD78[a1];
  }
  return std::string::assign(a2, v4);
}

void sub_1015B1FF0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015B200C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 120))
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FBB8);
    }
    uint64_t v2 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_FAULT))
    {
      sub_1015B1F94(*(_DWORD *)(a1 + 120), __p);
      unint64_t v3 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkouts, called in unexpected state, %s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      sub_1015B1F94(*(_DWORD *)(a1 + 120), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v12 = 136315138;
      long long v13 = p_buf;
      unsigned int v5 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::queryWorkouts()", "%s\n", (const char *)v5);
      if (v5 != __p) {
        free(v5);
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6)
    {
      *(_DWORD *)(a1 + 120) = 1;
      double v7 = *(double *)(a1 + 48);
      v10[0] = off_10232FC68;
      v10[1] = a1;
      v10[3] = v10;
      (*(void (**)(uint64_t, uint64_t, void *, double, double))(*(void *)v6 + 24))(v6, 10, v10, v7, v7 + 86399.0);
      sub_1015B67FC(v10);
    }
    else
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      uint64_t v8 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkouts, hk query wrapper object unexpectedly nil", (uint8_t *)__p, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        unint64_t v9 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::queryWorkouts()", "%s\n", (const char *)v9);
        if (v9 != __p) {
          free(v9);
        }
      }
      sub_1015B1514(a1);
    }
  }
}

void sub_1015B23D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1015B67FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1015B23F4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 80))
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FBB8);
    }
    unint64_t v3 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_FAULT))
    {
      sub_1015B1F94(*(_DWORD *)(a2 + 80), __p);
      unint64_t v4 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkoutEffort, called in unexpected state, %s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      sub_1015B1F94(*(_DWORD *)(a2 + 80), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v13 = 136315138;
      long long v14 = p_buf;
      uint64_t v6 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::queryWorkoutEffort(EventData &)", "%s\n", (const char *)v6);
      if (v6 != __p) {
        free(v6);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 56);
    if (v8)
    {
      *(_DWORD *)(a2 + 80) = 1;
      v11[0] = off_10232FCF8;
      v11[1] = a1;
      void v11[3] = v11;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v8 + 32))(v8, a2, v11);
      sub_1015B6DB0(v11);
    }
    else
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      unint64_t v9 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_FAULT))
      {
        LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkoutEffort, hk query wrapper object unexpectedly nil", (uint8_t *)__p, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        unint64_t v10 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::queryWorkoutEffort(EventData &)", "%s\n", (const char *)v10);
        if (v10 != __p) {
          free(v10);
        }
      }
      sub_1015B1514(a1);
    }
  }
}

void sub_1015B27B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1015B6DB0((uint64_t *)va);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1015B27D0(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(float *)(a5 + 56) == -1.0)
  {
    double v8 = -1.0;
  }
  else
  {
    a1 = *(double *)(a5 + 48) - *(double *)(a4 + 24);
    double v8 = a1 / 3600.0;
  }
  v11[0] = @"estimatedEffort";
  LODWORD(a1) = *(_DWORD *)(a5 + 88);
  v12[0] = +[NSNumber numberWithFloat:a1];
  v12[1] = &off_1023951E0;
  v11[1] = @"estimatedEffortPreBiasCorrection";
  _DWORD v11[2] = @"userEnteredEffort";
  LODWORD(v9) = *(_DWORD *)(a5 + 56);
  _DWORD v12[2] = +[NSNumber numberWithFloat:v9];
  void v11[3] = @"isMultisport";
  _OWORD v12[3] = +[NSNumber numberWithBool:a3];
  void v11[4] = @"swimWorkoutLocation";
  v12[4] = +[NSNumber numberWithInteger:*(void *)(a4 + 48)];
  v11[5] = @"workoutLocation";
  void v12[5] = +[NSNumber numberWithInteger:*(void *)(a4 + 40)];
  v11[6] = @"workoutType";
  v12[6] = +[NSNumber numberWithInteger:*(void *)(a4 + 32)];
  v11[7] = @"totalDuration";
  v12[7] = +[NSNumber numberWithDouble:(*(double *)(a4 + 24) - *(double *)(a4 + 16)) / 60.0];
  unsigned char v11[8] = @"timeFromWorkoutEndToUserEntry";
  v12[8] = +[NSNumber numberWithDouble:v8];
  return +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:9];
}

uint64_t sub_1015B2988(int64x2_t *a1)
{
  sub_1015B4F18((uint64_t)&a1[2].i64[1], *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x24uLL)) + 112 * (a1[2].i64[0] % 0x24uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_101D0A740);

  return sub_1011C5278((uint64_t)a1, 1);
}

void sub_1015B2A10(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  if (a2 == 100)
  {
    if (*(_DWORD *)(a1 + 120) != 1)
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      uint64_t v6 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
      {
        sub_1015B1F94(*(_DWORD *)(v3 + 120), &__p);
        double v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
           ? &__p
           : (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkouts, #warning returned to unexpected query state, %s", (uint8_t *)&buf, 0xCu);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v3 = a1;
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        sub_1015B1F94(*(_DWORD *)(a1 + 120), &buf);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v21 = 136315138;
        *(void *)&v21[4] = p_buf;
        int v17 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample> &)", "%s\n", (const char *)v17);
        if (v17 != &__p) {
          free(v17);
        }
        uint64_t v3 = a1;
      }
    }
    uint64_t v19 = v3;
    *(_DWORD *)(v3 + 120) = 2;
    uint64_t v8 = *a3;
    uint64_t v9 = a3[1];
    if (*a3 != v9)
    {
      uint64_t v20 = (void *)(v3 + 72);
      do
      {
        sub_101014274((unsigned __int8 *)&buf, (const unsigned __int8 *)v8);
        sub_101014274((unsigned __int8 *)&buf.__r_.__value_.__s.__data_[16], (const unsigned __int8 *)(v8 + 16));
        long long v10 = *(_OWORD *)(v8 + 32);
        char v27 = *(unsigned char *)(v8 + 48);
        long long v26 = v10;
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        std::string::size_type v28 = 0;
        sub_1015B49D4((unsigned __int8 *)&v28, *(void *)(v8 + 56), *(void *)(v8 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v8 + 64) - *(void *)(v8 + 56)) >> 3));
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        uint64_t v11 = qword_102419338;
        if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
        {
          sub_1015B3018((uint64_t)&buf);
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v21 = 136315138;
          *(void *)&v21[4] = p_p;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkouts, appending queue with workoutSessionSample, %s", v21, 0xCu);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_102419330 != -1) {
            dispatch_once(&qword_102419330, &stru_10232FBB8);
          }
          sub_1015B3018((uint64_t)&buf);
          int v13 = v21;
          if (v22 < 0) {
            int v13 = *(unsigned char **)v21;
          }
          int v23 = 136315138;
          std::string::size_type v24 = v13;
          long long v14 = (const char *)_os_log_send_and_compose_impl();
          if (v22 < 0)
          {
            unint64_t v15 = v14;
            operator delete(*(void **)v21);
            long long v14 = v15;
          }
          double v18 = (std::string *)v14;
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample> &)", "%s\n", v14);
          if (v18 != &__p) {
            free(v18);
          }
        }
        sub_101014274((unsigned __int8 *)&__p, (const unsigned __int8 *)&buf);
        sub_101014274((unsigned __int8 *)&__p.__r_.__value_.__s.__data_[16], (const unsigned __int8 *)&buf.__r_.__value_.__s.__data_[16]);
        long long v32 = v26;
        char v33 = v27;
        std::string v35 = 0;
        uint64_t v36 = 0;
        int v34 = 0;
        sub_1015B49D4((unsigned __int8 *)&v34, (uint64_t)v28, (uint64_t)v29, 0x6DB6DB6DB6DB6DB7 * ((v29 - (unsigned char *)v28) >> 3));
        int v37 = 0;
        v39[0] = 0;
        v39[1] = 0;
        unsigned int v38 = v39;
        sub_1015B345C(v20, (uint64_t)&__p);
        sub_1000F5BB0((uint64_t)&v38, v39[0]);
        if (v34)
        {
          std::string v35 = v34;
          operator delete(v34);
        }
        if (v28)
        {
          unsigned int v29 = v28;
          operator delete(v28);
        }
        v8 += 80;
      }
      while (v8 != v9);
    }
    sub_1015B1750(v19);
  }
  else
  {
    sub_1015B1514(a1);
  }
}

void sub_1015B2FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015B3018(uint64_t a1)
{
  sub_10048B72C((uint64_t)v23);
  uint64_t v2 = v23[0];
  *(_DWORD *)((char *)&v23[1] + *(void *)(v23[0] - 24)) = *(_DWORD *)((unsigned char *)&v23[1] + *(void *)(v23[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v23[2] + *(void *)(v2 - 24)) = 2;
  uint64_t v3 = sub_100132EFC(v23, (uint64_t)"hkBuilderId, ", 13);
  sub_101014328((const unsigned __int8 *)a1, &__p);
  if ((v22 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v5 = v22;
  }
  else {
    uint64_t v5 = v21;
  }
  uint64_t v6 = sub_100132EFC(v3, (uint64_t)p_p, v5);
  sub_100132EFC(v6, (uint64_t)", ", 2);
  if ((char)v22 < 0) {
    operator delete(__p);
  }
  double v7 = sub_100132EFC(v23, (uint64_t)"overviewId, ", 12);
  sub_101014328((const unsigned __int8 *)(a1 + 16), &__p);
  if ((v22 & 0x80u) == 0) {
    uint64_t v8 = &__p;
  }
  else {
    uint64_t v8 = __p;
  }
  if ((v22 & 0x80u) == 0) {
    uint64_t v9 = v22;
  }
  else {
    uint64_t v9 = v21;
  }
  long long v10 = sub_100132EFC(v7, (uint64_t)v8, v9);
  sub_100132EFC(v10, (uint64_t)", ", 2);
  if ((char)v22 < 0) {
    operator delete(__p);
  }
  sub_100132EFC(v23, (uint64_t)"startTime, ", 11);
  uint64_t v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)", ", 2);
  sub_100132EFC(v23, (uint64_t)"endTime, ", 9);
  int v12 = (void *)std::ostream::operator<<();
  sub_100132EFC(v12, (uint64_t)", ", 2);
  sub_100132EFC(v23, (uint64_t)"isMultisport, ", 14);
  int v13 = (void *)std::ostream::operator<<();
  sub_100132EFC(v13, (uint64_t)", ", 2);
  sub_100132EFC(v23, (uint64_t)"totalWorkoutCount, ", 19);
  std::ostream::operator<<();
  if (*(void *)(a1 + 64) != *(void *)(a1 + 56))
  {
    uint64_t v14 = 0;
    unint64_t v15 = 0;
    do
    {
      sub_100132EFC(v23, (uint64_t)", ", 2);
      sub_100132EFC(v23, (uint64_t)"workoutIdx, ", 12);
      BOOL v16 = (void *)std::ostream::operator<<();
      sub_100132EFC(v16, (uint64_t)", ", 2);
      sub_1015B4ACC((const unsigned __int8 *)(*(void *)(a1 + 56) + v14));
      if ((v22 & 0x80u) == 0) {
        int v17 = &__p;
      }
      else {
        int v17 = __p;
      }
      if ((v22 & 0x80u) == 0) {
        uint64_t v18 = v22;
      }
      else {
        uint64_t v18 = v21;
      }
      sub_100132EFC(v23, (uint64_t)v17, v18);
      if ((char)v22 < 0) {
        operator delete(__p);
      }
      ++v15;
      v14 += 56;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 64) - *(void *)(a1 + 56)) >> 3) > v15);
  }
  std::stringbuf::str();
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1015B3418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

unsigned __int8 *sub_1015B345C(void *a1, uint64_t a2)
{
  unint64_t v4 = a1 + 5;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = 36 * ((v6 - v5) >> 3) - 1;
  if (v6 == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == a1[5] + a1[4])
  {
    sub_1015B6880(a1);
    uint64_t v5 = a1[1];
    uint64_t v6 = a1[2];
  }
  if (v6 == v5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = a1[5] + a1[4];
    uint64_t v9 = *(void *)(v5 + 8 * (v8 / 0x24)) + 112 * (v8 % 0x24);
  }
  double result = sub_1015B6B98((uint64_t)v4, v9, a2);
  ++*v4;
  return result;
}

uint64_t sub_1015B3528(uint64_t a1)
{
  sub_1000F5BB0(a1 + 88, *(void **)(a1 + 96));
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1015B3568(uint64_t a1, int a2, void *a3)
{
  if (*(void *)(a1 + 112))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    unint64_t v5 = *(void *)(a1 + 104);
    unint64_t v6 = v5 / 0x24;
    uint64_t v7 = *(void *)(v4 + 8 * (v5 / 0x24));
    unint64_t v8 = v5 % 0x24;
    if (*(_DWORD *)(v7 + 112 * v8 + 80) == 1)
    {
      *(void *)&v35[8] = 0;
      *(void *)&v35[16] = 0;
      *(void *)std::string v35 = &v35[8];
      if (a2 == 100) {
        char v10 = sub_1015B3D9C(a1, (uint64_t)v35, *(void *)(v4 + 8 * v6) + 112 * v8, a3);
      }
      else {
        char v10 = 0;
      }
      unint64_t v15 = *(void *)(a1 + 128);
      if ((v10 & 1) != 0 || v15 < 2)
      {
        if (v15 > 1) {
          char v19 = 1;
        }
        else {
          char v19 = v10;
        }
        if ((v19 & 1) == 0)
        {
          if (qword_102419330 != -1) {
            dispatch_once(&qword_102419330, &stru_10232FBB8);
          }
          unsigned __int8 v22 = qword_102419338;
          if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
          {
            __p.__r_.__value_.__r.__words[0] = 67109376;
            LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = a2;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkoutEffort, failed but no events were sent yet so try again later, matchSuccess, %d, error, %d", (uint8_t *)&__p, 0xEu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&__p, 0x65CuLL);
            if (qword_102419330 != -1) {
              dispatch_once(&qword_102419330, &stru_10232FBB8);
            }
            buf.__r_.__value_.__r.__words[0] = 67109376;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = a2;
            __int16 v31 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &)", "%s\n", (const char *)v31);
            if (v31 != &__p) {
              free(v31);
            }
          }
          sub_1015B1514(a1);
          goto LABEL_45;
        }
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        uint64_t v20 = qword_102419338;
        if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
        {
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkoutEffort, succeeded adding matched scores to front of queue", (uint8_t *)&__p, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_102419330 != -1) {
            dispatch_once(&qword_102419330, &stru_10232FBB8);
          }
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          uint64_t v30 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &)", "%s\n", (const char *)v30);
          if (v30 != &__p) {
            free(v30);
          }
        }
        unint64_t v21 = *(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
            + 112 * (*(void *)(a1 + 104) % 0x24uLL);
        *(_DWORD *)(v21 + 80) = 2;
        if ((unsigned char *)(v21 + 88) != v35) {
          sub_1015B6E34((uint64_t **)(v21 + 88), *(void **)v35, &v35[8]);
        }
      }
      else
      {
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        BOOL v16 = qword_102419338;
        if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
        {
          std::string::size_type v17 = *(void *)(a1 + 128);
          uint64_t v18 = *(void *)(a1 + 112);
          __p.__r_.__value_.__r.__words[0] = 67109888;
          LOWORD(__p.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 2) = a2;
          HIWORD(__p.__r_.__value_.__r.__words[1]) = 2048;
          __p.__r_.__value_.__r.__words[2] = v17;
          __int16 v37 = 2048;
          uint64_t v38 = v18;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "AnalyticsLogger, queryWorkoutEffort, failed trying to log remaining workouts, matchSuccess, %d, error, %d, countSent, %zu, countRemaining, %zu", (uint8_t *)&__p, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_102419330 != -1) {
            dispatch_once(&qword_102419330, &stru_10232FBB8);
          }
          std::string::size_type v27 = *(void *)(a1 + 128);
          uint64_t v28 = *(void *)(a1 + 112);
          buf.__r_.__value_.__r.__words[0] = 67109888;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = a2;
          HIWORD(buf.__r_.__value_.__r.__words[1]) = 2048;
          buf.__r_.__value_.__r.__words[2] = v27;
          __int16 v33 = 2048;
          uint64_t v34 = v28;
          unsigned int v29 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &)", "%s\n", (const char *)v29);
          if (v29 != &__p) {
            free(v29);
          }
        }
        sub_1015B2988((int64x2_t *)(a1 + 72));
      }
      sub_1015B1750(a1);
LABEL_45:
      sub_1000F5BB0((uint64_t)v35, *(void **)&v35[8]);
      return;
    }
  }
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_10232FBB8);
  }
  uint64_t v11 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_FAULT))
  {
    std::string::size_type v12 = *(void *)(a1 + 112);
    unsigned int v13 = v12 < 2
        ? 3
        : *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
                    + 112 * (*(void *)(a1 + 104) % 0x24uLL)
                    + 80);
    sub_1015B1F94(v13, &__p);
    uint64_t v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 134218242;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v12;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "AnalyticsLogger, queryWorkoutEffort, returned to unexpected event data queue state, size, %zu, nextEventQueryState, %s", (uint8_t *)&buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FBB8);
    }
    unint64_t v23 = *(void *)(a1 + 112);
    if (v23 < 2) {
      unsigned int v24 = 3;
    }
    else {
      unsigned int v24 = *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 8 * (*(void *)(a1 + 104) / 0x24uLL))
    }
                      + 112 * (*(void *)(a1 + 104) % 0x24uLL)
                      + 80);
    sub_1015B1F94(v24, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string v35 = 134218242;
    *(void *)&v35[4] = v23;
    *(_WORD *)&v35[12] = 2080;
    *(void *)&v35[14] = p_buf;
    long long v26 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutEffortAnalyticsLogger::handleWorkoutEffortQueryResults(CMError, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &)", "%s\n", (const char *)v26);
    if (v26 != &__p) {
      free(v26);
    }
  }
  sub_1015B1514(a1);
}

void sub_1015B3D6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18)
{
}

uint64_t sub_1015B3D9C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v6 = (void *)(a2 + 8);
  sub_1000F5BB0(a2, *(void **)(a2 + 8));
  *(void *)a2 = v6;
  *(void *)(a2 + 16) = 0;
  *unint64_t v6 = 0;
  uint64_t v7 = *(void *)(a3 + 56);
  uint64_t v8 = *(void *)(a3 + 64);
  if (v7 != v8)
  {
    __asm { FMOV            V0.2D, #-1.0 }
    long long v63 = _Q0;
    do
    {
      sub_101014274((unsigned __int8 *)&v80, (const unsigned __int8 *)v7);
      long long v14 = *(_OWORD *)(v7 + 16);
      long long v15 = *(_OWORD *)(v7 + 32);
      *(void *)&long long v83 = *(void *)(v7 + 48);
      long long v81 = v14;
      long long v82 = v15;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v71 = 0u;
      sub_10101424C((unsigned __int8 *)__p);
      sub_10101424C((unsigned __int8 *)&v71);
      long long v72 = v63;
      *(void *)&long long v73 = 0xBFF0000000000000;
      DWORD2(v73) = -1082130432;
      long long v74 = v63;
      *(void *)&long long v75 = 0xBFF0000000000000;
      DWORD2(v75) = -1082130432;
      *(void *)std::string buf = &v80;
      BOOL v16 = sub_1015B6490((uint64_t **)a2, (const unsigned __int8 *)&v80, (uint64_t)&unk_101D0B290, (const unsigned __int8 **)buf);
      long long v17 = v73;
      long long v19 = v74;
      long long v18 = v75;
      *((_OWORD *)v16 + 5) = v72;
      *((_OWORD *)v16 + 6) = v17;
      *((_OWORD *)v16 + 7) = v19;
      *((_OWORD *)v16 + 8) = v18;
      long long v20 = v71;
      v7 += 56;
      *((_OWORD *)v16 + 3) = *(_OWORD *)__p;
      *((_OWORD *)v16 + 4) = v20;
    }
    while (v7 != v8);
  }
  unint64_t v21 = (_OWORD *)*a4;
  unsigned __int8 v22 = (_OWORD *)a4[1];
  if (v22 == (_OWORD *)*a4) {
    goto LABEL_47;
  }
  do
  {
    sub_101014274((unsigned __int8 *)&v80, (const unsigned __int8 *)v21);
    sub_101014274((unsigned __int8 *)&v81, (const unsigned __int8 *)v21 + 16);
    long long v23 = v21[2];
    long long v24 = v21[3];
    long long v25 = v21[4];
    *(_OWORD *)&v84[12] = *(_OWORD *)((char *)v21 + 76);
    long long v83 = v24;
    *(_OWORD *)uint64_t v84 = v25;
    long long v82 = v23;
    if (sub_101014308((const unsigned __int8 *)&v80, (const unsigned __int8 *)a3))
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      uint64_t v42 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_ERROR))
      {
        sub_101014328((const unsigned __int8 *)a3, __p);
        int v43 = SBYTE7(v71);
        unsigned int v44 = (void **)__p[0];
        sub_101014328((const unsigned __int8 *)&v80, buf);
        uint64_t v45 = __p;
        if (v43 < 0) {
          uint64_t v45 = v44;
        }
        if (v79 >= 0) {
          unint64_t v46 = buf;
        }
        else {
          unint64_t v46 = *(uint8_t **)buf;
        }
        *(_DWORD *)long long v64 = 136315394;
        *(void *)&v64[4] = v45;
        *(_WORD *)&v64[12] = 2080;
        *(void *)&v64[14] = v46;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "AnalyticsLogger, at least one effort set returned did not match expectedHkBuilderId, %s, foundHkBuilderId, %s", v64, 0x16u);
        if (v79 < 0) {
          operator delete(*(void **)buf);
        }
        if (SBYTE7(v71) < 0) {
          operator delete(__p[0]);
        }
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_43;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      sub_101014328((const unsigned __int8 *)a3, buf);
      int v58 = v79;
      uint64_t v59 = *(uint8_t **)buf;
      sub_101014328((const unsigned __int8 *)&v80, v64);
      char v60 = buf;
      if (v58 < 0) {
        char v60 = v59;
      }
      if (v65 >= 0) {
        long long v61 = v64;
      }
      else {
        long long v61 = *(unsigned char **)v64;
      }
      int v66 = 136315394;
      long long v67 = v60;
      __int16 v68 = 2080;
      uint64_t v69 = v61;
      uint64_t v57 = (char *)_os_log_send_and_compose_impl();
      if (v65 < 0) {
        operator delete(*(void **)v64);
      }
      if (v79 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &) const", "%s\n", v57);
      if (v57 == (char *)__p) {
        goto LABEL_43;
      }
LABEL_76:
      free(v57);
      goto LABEL_43;
    }
    v21 += 6;
  }
  while (v21 != v22);
  long long v26 = (_OWORD *)*a4;
  if (!*(unsigned char *)(a3 + 48))
  {
    sub_10101429C((unsigned __int8 *)__p, "00000000-0000-0000-0000-000000000000");
    if (sub_1010142E8((const unsigned __int8 *)v26 + 16, (const unsigned __int8 *)__p))
    {
      uint64_t v47 = *(void **)(a3 + 56);
      if (*(void **)(a3 + 64) != v47)
      {
        unsigned int v48 = (_OWORD *)*a4;
        __p[0] = v47;
        uint64_t v49 = sub_1015B6490((uint64_t **)a2, (const unsigned __int8 *)v47, (uint64_t)&unk_101D0B290, (const unsigned __int8 **)__p);
        long long v50 = v48[1];
        *((_OWORD *)v49 + 3) = *v48;
        *((_OWORD *)v49 + 4) = v50;
        long long v51 = v48[2];
        long long v52 = v48[3];
        long long v53 = v48[5];
        *((_OWORD *)v49 + 7) = v48[4];
        *((_OWORD *)v49 + 8) = v53;
        *((_OWORD *)v49 + 5) = v51;
        *((_OWORD *)v49 + 6) = v52;
LABEL_47:
        char v28 = 1;
        return v28 & 1;
      }
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      double v56 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "AnalyticsLogger, non-multisport workout did not have an associated workout activity as expected", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 0))
      {
LABEL_43:
        char v28 = 0;
        return v28 & 1;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419330 == -1) {
        goto LABEL_62;
      }
    }
    else
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      long long v55 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "AnalyticsLogger, non-multisport workout did not associate effort as expected", (uint8_t *)__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_43;
      }
      bzero(__p, 0x65CuLL);
      if (qword_102419330 == -1)
      {
LABEL_62:
        LOWORD(v80) = 0;
        uint64_t v57 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &) const", "%s\n", v57);
        if (v57 == (char *)__p) {
          goto LABEL_43;
        }
        goto LABEL_76;
      }
    }
    dispatch_once(&qword_102419330, &stru_10232FBB8);
    goto LABEL_62;
  }
  std::string::size_type v27 = (_OWORD *)a4[1];
  if (v26 == v27) {
    goto LABEL_47;
  }
  char v28 = 1;
  do
  {
    sub_101014274((unsigned __int8 *)&v80, (const unsigned __int8 *)v26);
    sub_101014274((unsigned __int8 *)&v81, (const unsigned __int8 *)v26 + 16);
    long long v29 = v26[2];
    long long v30 = v26[3];
    long long v31 = v26[4];
    *(_OWORD *)&v84[12] = *(_OWORD *)((char *)v26 + 76);
    long long v83 = v30;
    *(_OWORD *)uint64_t v84 = v31;
    long long v82 = v29;
    sub_10101429C((unsigned __int8 *)__p, "00000000-0000-0000-0000-000000000000");
    if (!sub_1010142E8((const unsigned __int8 *)&v81, (const unsigned __int8 *)__p))
    {
      uint64_t v32 = sub_1015B70EC(a2, (const unsigned __int8 *)&v81);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FBB8);
      }
      __int16 v33 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
      {
        sub_101014328((const unsigned __int8 *)&v81, __p);
        uint64_t v34 = __p;
        if (SBYTE7(v71) < 0) {
          uint64_t v34 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v32 != 0;
        __int16 v77 = 2080;
        unint64_t v78 = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "AnalyticsLogger, checking for effort score associated sessionId match in workout activities, isMatch, %d, effortScoreSessionId, %s", buf, 0x12u);
        if (SBYTE7(v71) < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_10232FBB8);
        }
        sub_101014328((const unsigned __int8 *)&v81, buf);
        uint64_t v40 = buf;
        if (v79 < 0) {
          uint64_t v40 = *(uint8_t **)buf;
        }
        *(_DWORD *)long long v64 = 67109378;
        *(_DWORD *)&v64[4] = v32 != 0;
        *(_WORD *)&v64[8] = 2080;
        *(void *)&v64[10] = v40;
        long long v41 = (char *)_os_log_send_and_compose_impl();
        if (v79 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutEffortAnalyticsLogger::createMatchedWorkoutEffortMapForWorkoutSession(WorkoutEffortMap &, const CLWorkoutEffortHealthKitQueryInterface::WorkoutSessionSample &, const std::vector<CLWorkoutEffortHealthKitQueryInterface::EffortScoreSet> &) const", "%s\n", v41);
        if (v41 != (char *)__p) {
          free(v41);
        }
      }
      __p[0] = &v81;
      std::string v35 = sub_1015B6490((uint64_t **)a2, (const unsigned __int8 *)&v81, (uint64_t)&unk_101D0B290, (const unsigned __int8 **)__p);
      v28 &= v32 != 0;
      long long v36 = v83;
      long long v38 = *(_OWORD *)v84;
      long long v37 = *(_OWORD *)&v84[16];
      *((_OWORD *)v35 + 5) = v82;
      *((_OWORD *)v35 + 6) = v36;
      *((_OWORD *)v35 + 7) = v38;
      *((_OWORD *)v35 + 8) = v37;
      long long v39 = v81;
      *((_OWORD *)v35 + 3) = v80;
      *((_OWORD *)v35 + 4) = v39;
    }
    v26 += 6;
  }
  while (v26 != v27);
  return v28 & 1;
}

void sub_1015B4710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 201) < 0) {
    operator delete(*(void **)(v28 - 224));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015B4748(uint64_t a1, uint64_t a2)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_10232FBB8);
  }
  uint64_t v3 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "AnalyticsLogger, sending analytics, %@", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FBB8);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWorkoutEffortAnalyticsLogger::sendAnalytics(NSDictionary * _Nonnull) const", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return AnalyticsSendEventLazy();
}

uint64_t sub_1015B494C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

id sub_1015B4954()
{
  id result = (id)objc_opt_class();
  if (result)
  {
    id v1 = +[MCProfileConnection sharedConnection];
    return [v1 isHealthDataSubmissionAllowed];
  }
  return result;
}

void sub_1015B49A4(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

unsigned __int8 *sub_1015B49D4(unsigned __int8 *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_1002F41E0(result, a4);
    return sub_1015B4A44(v6, a2, a3);
  }
  return result;
}

void sub_1015B4A28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1015B4A44(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *((void *)result + 1);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      id result = sub_101014274((unsigned __int8 *)(v4 + v7), (const unsigned __int8 *)(a2 + v7));
      long long v8 = *(_OWORD *)(a2 + v7 + 16);
      long long v9 = *(_OWORD *)(a2 + v7 + 32);
      *((void *)result + 6) = *(void *)(a2 + v7 + 48);
      *((_OWORD *)result + 1) = v8;
      *((_OWORD *)result + 2) = v9;
      v7 += 56;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *((void *)v3 + 1) = v4;
  return result;
}

void sub_1015B4AC4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1015B4ACC(const unsigned __int8 *a1)
{
  sub_10048B72C((uint64_t)v14);
  uint64_t v2 = v14[0];
  *(_DWORD *)((char *)&v14[1] + *(void *)(v14[0] - 24)) = *(_DWORD *)((unsigned char *)&v14[1] + *(void *)(v14[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v14[2] + *(void *)(v2 - 24)) = 2;
  uint64_t v3 = sub_100132EFC(v14, (uint64_t)"sessionId, ", 11);
  sub_101014328(a1, __p);
  if ((v13 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v5 = v13;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  unint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
  sub_100132EFC(v6, (uint64_t)", ", 2);
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100132EFC(v14, (uint64_t)"startTime, ", 11);
  uint64_t v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)", ", 2);
  sub_100132EFC(v14, (uint64_t)"endTime, ", 9);
  long long v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)", ", 2);
  sub_100132EFC(v14, (uint64_t)"workoutType, ", 13);
  long long v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)", ", 2);
  sub_100132EFC(v14, (uint64_t)"workoutLocationType, ", 21);
  char v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)", ", 2);
  sub_100132EFC(v14, (uint64_t)"swimWorkoutLocation, ", 21);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1015B4D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_1015B4DC8(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  uint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    uint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    unint64_t v6 = &v3[v5 / 0x24];
    uint64_t v7 = (uint64_t)*v6 + 112 * (v5 % 0x24);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x24] + 112 * ((a1[5] + v5) % 0x24);
    if (v7 != v8)
    {
      do
      {
        sub_1015B4F18((uint64_t)v2, v7);
        v7 += 112;
        if (v7 - (void)*v6 == 4032)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v3 = (void **)a1[1];
      uint64_t v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 18;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 36;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    unsigned __int8 v13 = *v3++;
    operator delete(v13);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_1015B4F18(uint64_t a1, uint64_t a2)
{
  sub_1000F5BB0(a2 + 88, *(void **)(a2 + 96));
  uint64_t v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }
}

void sub_1015B4F70()
{
}

void *sub_1015B4F84(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = off_10232FBE8;
  result[1] = v3;
  return result;
}

uint64_t sub_1015B4FCC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10232FBE8;
  a2[1] = v2;
  return result;
}

void sub_1015B4FF8(uint64_t a1, double *a2)
{
}

uint64_t sub_1015B5004(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1015B5044()
{
}

void *sub_1015B5050(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1[5];
  if (v5 >= a3)
  {
    unint64_t v11 = a1[4];
    uint64_t v12 = a1[1];
    unsigned __int8 v13 = (uint64_t *)(v12 + 8 * (v11 / 0x24));
    if (a1[2] == v12) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = *v13 + 112 * (v11 % 0x24);
    }
    sub_1015B54FC(a2, a2 + 112 * a3, v13, v14, v16);
    return (void *)sub_1015B5318((uint64_t)a1, (void *)v16[1], v16[2]);
  }
  else
  {
    uint64_t v6 = a2 + 112 * v5;
    unint64_t v7 = a1[4];
    uint64_t v8 = a1[1];
    uint64_t v9 = (uint64_t *)(v8 + 8 * (v7 / 0x24));
    if (a1[2] == v8) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = *v9 + 112 * (v7 % 0x24);
    }
    sub_1015B54FC(a2, v6, v9, v10, v16);
    return sub_1015B5170(a1, v6, a3 - a1[5]);
  }
}

void *sub_1015B5170(void *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = a1 + 5;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  uint64_t v8 = 36 * ((v7 - v6) >> 3) - 1;
  if (v7 == v6) {
    uint64_t v8 = 0;
  }
  unint64_t v9 = a1[5] + a1[4];
  unint64_t v10 = v8 - v9;
  if (a3 > v10)
  {
    sub_1015B5894(a1, a3 - v10);
    uint64_t v6 = a1[1];
    uint64_t v7 = a1[2];
    unint64_t v9 = a1[4] + a1[5];
  }
  uint64_t v12 = (void *)(v6 + 8 * (v9 / 0x24));
  if (v7 == v6) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *v12 + 112 * (v9 % 0x24);
  }
  long long v20 = (void *)(v6 + 8 * (v9 / 0x24));
  unint64_t v21 = v13;
  id result = sub_1015B5E4C(&v20, a3);
  uint64_t v15 = v21;
  if (v13 != v21)
  {
    BOOL v16 = v20;
    do
    {
      if (v12 == v16) {
        uint64_t v17 = v15;
      }
      else {
        uint64_t v17 = *v12 + 4032;
      }
      if (v13 == v17)
      {
        uint64_t v17 = v13;
      }
      else
      {
        uint64_t v18 = 0;
        do
        {
          id result = sub_1015B5F00((uint64_t)v5, v13 + v18, a2 + v18);
          v18 += 112;
        }
        while (v13 + v18 != v17);
        a2 += v18;
      }
      *v5 += 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v17 - v13) >> 4);
      if (v12 == v16) {
        break;
      }
      unint64_t v19 = v12[1];
      ++v12;
      unint64_t v13 = v19;
    }
    while (v19 != v15);
  }
  return result;
}

void sub_1015B52F4(_Unwind_Exception *a1)
{
  *v1 += 0x6DB6DB6DB6DB6DB7 * (v2 >> 4);
  _Unwind_Resume(a1);
}

uint64_t sub_1015B5318(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  uint64_t v4 = (void *)(result + 40);
  unint64_t v5 = *(void *)(result + 32);
  unint64_t v6 = v5 + *(void *)(result + 40);
  uint64_t v7 = *(void *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  unint64_t v9 = (void *)(v7 + 8 * (v6 / 0x24));
  if (v8 == v7) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *v9 + 112 * (v6 % 0x24);
  }
  if (v10 != a3)
  {
    uint64_t v11 = (a3 - *a2) >> 4;
    uint64_t v12 = 36 * (v9 - a2) + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - *v9) >> 4) - 0x6DB6DB6DB6DB6DB7 * v11;
    if (v12 >= 1)
    {
      unint64_t v13 = (void *)(v7 + 8 * (v5 / 0x24));
      if (v8 == v7) {
        unint64_t v14 = 0;
      }
      else {
        unint64_t v14 = *v13 + 112 * (v5 % 0x24);
      }
      if (a3 == v14) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = 36 * (a2 - v13) + 0x6DB6DB6DB6DB6DB7 * v11 - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v14 - *v13) >> 4);
      }
      unint64_t v19 = v13;
      unint64_t v20 = v14;
      sub_1015B5E4C(&v19, v15);
      uint64_t v16 = v20;
      if (v20 != v10)
      {
        uint64_t v17 = v19;
        do
        {
          sub_1015B4F18((uint64_t)v4, v16);
          v16 += 112;
          if (v16 - *v17 == 4032)
          {
            uint64_t v18 = v17[1];
            ++v17;
            uint64_t v16 = v18;
          }
        }
        while (v16 != v10);
      }
      *v4 -= v12;
      do
        id result = sub_1015B6418(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_1015B54FC(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  unint64_t v5 = a3;
  uint64_t v6 = a1;
  if (a1 == a2)
  {
    uint64_t v8 = a1;
  }
  else
  {
    uint64_t v8 = a2;
    unint64_t v5 = a3 + 1;
    uint64_t v9 = *a3;
    while (1)
    {
      uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v9 - a4 + 4032) >> 4);
      if (0x6DB6DB6DB6DB6DB7 * ((v8 - v6) >> 4) < v10) {
        uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v6) >> 4);
      }
      uint64_t v11 = sub_1015B55E4((uint64_t)&v14, v6, v6 + 112 * v10, a4);
      if (v11 == v8) {
        break;
      }
      uint64_t v6 = v11;
      uint64_t v13 = *v5++;
      uint64_t v9 = v13;
      a4 = v13;
    }
    a4 = v12;
    if (*(v5 - 1) + 4032 == v12) {
      a4 = *v5;
    }
    else {
      --v5;
    }
  }
  *a5 = v8;
  a5[1] = (uint64_t)v5;
  a5[2] = a4;
}

uint64_t sub_1015B55E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = a4 + v7;
    uint64_t v9 = a2 + v7;
    long long v10 = *(_OWORD *)(a2 + v7);
    long long v11 = *(_OWORD *)(a2 + v7 + 16);
    long long v12 = *(_OWORD *)(a2 + v7 + 32);
    *(unsigned char *)(v8 + 48) = *(unsigned char *)(a2 + v7 + 48);
    *(_OWORD *)(v8 + 16) = v11;
    *(_OWORD *)(v8 + 32) = v12;
    *(_OWORD *)uint64_t v8 = v10;
    if (a2 != a4)
    {
      sub_1015B56C0((unsigned __int8 **)(v8 + 56), *(void *)(v9 + 56), *(void *)(v9 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v9 + 64) - *(void *)(v9 + 56)) >> 3));
      *(_DWORD *)(v8 + 80) = *(_DWORD *)(v9 + 80);
      sub_1015B6E34((uint64_t **)(v8 + 88), *(void **)(v9 + 88), (void *)(a2 + 96 + v7));
    }
    v7 += 112;
  }
  while (a2 + v7 != v6);
  return v6;
}

unsigned __int8 *sub_1015B56C0(unsigned __int8 **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v8 = (uint64_t)a1[2];
  id result = *a1;
  if (0x6DB6DB6DB6DB6DB7 * ((v8 - (uint64_t)result) >> 3) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x492492492492492) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v12 = 0x492492492492492;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_1002F41E0(a1, v12);
    uint64_t v13 = (unsigned __int8 *)a1;
    uint64_t v14 = v6;
    a3 = v5;
LABEL_21:
    return sub_1015B4A44(v13, v14, a3);
  }
  uint64_t v15 = a1[1];
  if (0x6DB6DB6DB6DB6DB7 * ((v15 - result) >> 3) < a4)
  {
    uint64_t v14 = a2 + 8 * ((v15 - result) >> 3);
    if (v15 != result)
    {
      uint64_t v16 = 8 * ((v15 - result) >> 3);
      do
      {
        long long v17 = *(_OWORD *)v6;
        long long v18 = *(_OWORD *)(v6 + 16);
        long long v19 = *(_OWORD *)(v6 + 32);
        *((void *)result + 6) = *(void *)(v6 + 48);
        *((_OWORD *)result + 1) = v18;
        *((_OWORD *)result + 2) = v19;
        *(_OWORD *)id result = v17;
        result += 56;
        v6 += 56;
        v16 -= 56;
      }
      while (v16);
    }
    uint64_t v13 = (unsigned __int8 *)a1;
    goto LABEL_21;
  }
  if (a2 == a3)
  {
    unint64_t v20 = result;
  }
  else
  {
    unint64_t v20 = result;
    do
    {
      long long v21 = *(_OWORD *)v6;
      long long v22 = *(_OWORD *)(v6 + 16);
      long long v23 = *(_OWORD *)(v6 + 32);
      *((void *)result + 6) = *(void *)(v6 + 48);
      *((_OWORD *)result + 1) = v22;
      *((_OWORD *)result + 2) = v23;
      *(_OWORD *)id result = v21;
      result += 56;
      v6 += 56;
      v20 += 56;
    }
    while (v6 != a3);
  }
  a1[1] = v20;
  return result;
}

void sub_1015B5894(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0x24) {
    unint64_t v6 = v5 / 0x24 + 1;
  }
  else {
    unint64_t v6 = v5 / 0x24;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0x24) {
    unint64_t v8 = v7 / 0x24;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0x24)
  {
    for (a1[4] = v7 - 36 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      long long v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          long long v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            std::string v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)std::string v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          long long v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          long long v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          std::string::size_type v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFC0uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFC0uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 35;
          }
          else {
            uint64_t v64 = 36;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - 36 * v8;
      if (v8)
      {
        int v66 = (char *)a1[2];
        do
        {
          long long v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          __int16 v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              char v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              long long v81 = &v79[8 * (v78 >> 2)];
              long long v82 = (uint64_t *)a1[1];
              int v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                int v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                int64_t v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)int64_t v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              unint64_t v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                int v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              long long v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                int v66 = (char *)a1[1];
              }
              __int16 v77 = &v66[-8 * (v74 >> 1)];
              int v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)int v66 = v69;
          int v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      int64_t v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = -36 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        unint64_t v88 = operator new(0xFC0uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        long long v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              long long v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              double v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          long long v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1015B5DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1015B5E4C(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = (void *)*result;
    unint64_t v3 = a2 + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(result[1] - *(void *)*result) >> 4);
    if ((uint64_t)v3 < 1)
    {
      unint64_t v5 = 35 - v3;
      unint64_t v6 = &v2[-(v5 / 0x24)];
      *id result = v6;
      unint64_t v4 = *v6 + 112 * (36 * (v5 / 0x24) - v5) + 3920;
    }
    else
    {
      *id result = &v2[v3 / 0x24];
      unint64_t v4 = v2[v3 / 0x24] + 112 * (v3 % 0x24);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t *sub_1015B5F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101014274((unsigned __int8 *)a2, (const unsigned __int8 *)a3);
  sub_101014274((unsigned __int8 *)(a2 + 16), (const unsigned __int8 *)(a3 + 16));
  long long v5 = *(_OWORD *)(a3 + 32);
  char v6 = *(unsigned char *)(a3 + 48);
  *(void *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 32) = v5;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  sub_1015B49D4((unsigned __int8 *)(a2 + 56), *(void *)(a3 + 56), *(void *)(a3 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a3 + 64) - *(void *)(a3 + 56)) >> 3));
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  return sub_1015B5FB8((uint64_t *)(a2 + 88), (const unsigned __int8 **)(a3 + 88));
}

void sub_1015B5F9C(_Unwind_Exception *exception_object)
{
  unint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 64) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1015B5FB8(uint64_t *a1, const unsigned __int8 **a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1015B6010(a1, *a2, a2 + 1);
  return a1;
}

void sub_1015B5FF8(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1015B6010(uint64_t *result, const unsigned __int8 *a2, const unsigned __int8 **a3)
{
  if (a2 != (const unsigned __int8 *)a3)
  {
    unint64_t v4 = a2;
    long long v5 = (uint64_t **)result;
    char v6 = result + 1;
    do
    {
      id result = sub_1015B609C(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      unint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = (const unsigned __int8 **)v7;
          unint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (const unsigned __int8 **)*((void *)v4 + 2);
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const unsigned __int8 *)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const unsigned __int8 *)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1015B609C(uint64_t **a1, uint64_t *a2, const unsigned __int8 *a3, uint64_t a4)
{
  char v6 = (uint64_t **)sub_1015B6120(a1, a2, &v10, &v9, a3);
  id result = *v6;
  if (!*v6)
  {
    sub_1015B62B8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const unsigned __int8 *sub_1015B6120(void *a1, uint64_t *a2, const unsigned __int8 **a3, uint64_t *a4, const unsigned __int8 *a5)
{
  uint64_t v9 = (const unsigned __int8 *)(a1 + 1);
  if (a1 + 1 != a2 && !sub_1010142CC(a5, (const unsigned __int8 *)a2 + 32))
  {
    if (!sub_1010142CC((const unsigned __int8 *)a2 + 32, a5))
    {
      *a3 = (const unsigned __int8 *)a2;
      *a4 = (uint64_t)a2;
      return (const unsigned __int8 *)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (const unsigned __int8 *)a2[1];
      do
      {
        uint64_t v15 = v14;
        unint64_t v14 = *(const unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const unsigned __int8 *)a2;
      do
      {
        uint64_t v15 = (const unsigned __int8 *)*((void *)v18 + 2);
        BOOL v17 = *(void *)v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1010142CC(a5, v15 + 32)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const unsigned __int8 *)a2;
    }
    return (const unsigned __int8 *)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    unint64_t v12 = (const unsigned __int8 *)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (const unsigned __int8 *)a2;
      return (const unsigned __int8 *)a2;
    }
  }
  uint64_t v11 = (const unsigned __int8 *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      uint64_t v11 = (const unsigned __int8 *)*((void *)v11 + 1);
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      unint64_t v12 = (const unsigned __int8 *)v16[2];
      BOOL v17 = *(void *)v12 == (void)v16;
      uint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (sub_1010142CC(v12 + 32, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const unsigned __int8 *)sub_1015B6328((uint64_t)a1, a3, a5);
}

uint64_t sub_1015B62B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  char v6 = operator new(0x90uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_1015B63BC((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1015B6310(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void *sub_1015B6328(uint64_t a1, void *a2, const unsigned __int8 *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        unint64_t v8 = (const unsigned __int8 *)(v4 + 32);
        if (!sub_1010142CC(a3, (const unsigned __int8 *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_1010142CC(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_1015B63BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_101014274((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  sub_101014274(v4 + 16, (const unsigned __int8 *)(a2 + 16));
  sub_101014274((unsigned __int8 *)(a1 + 32), (const unsigned __int8 *)(a2 + 32));
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 48) = v5;
  return a1;
}

uint64_t sub_1015B6418(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 36 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x24) {
    a2 = 1;
  }
  if (v5 < 0x48) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *sub_1015B6490(uint64_t **a1, const unsigned __int8 *a2, uint64_t a3, const unsigned __int8 **a4)
{
  long long v6 = (uint64_t **)sub_1015B6328((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_1015B6528((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_1015B6528@<X0>(uint64_t a1@<X0>, const unsigned __int8 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x90uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_1015B6598((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1015B6580(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1015B6598(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v3 = sub_101014274((unsigned __int8 *)a1, a2);
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  uint64_t v4 = v3 + 32;
  *((_OWORD *)v3 + 1) = 0u;
  sub_10101424C(v3 + 16);
  sub_10101424C(v4);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 48) = _Q0;
  *(void *)(a1 + 64) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_OWORD *)(a1 + 80) = _Q0;
  *(void *)(a1 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 104) = -1082130432;
  return a1;
}

void sub_1015B660C()
{
}

void *sub_1015B6620(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10232FC68;
  result[1] = v3;
  return result;
}

uint64_t sub_1015B6668(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10232FC68;
  a2[1] = v2;
  return result;
}

void sub_1015B6694(uint64_t a1, int *a2, long long *a3)
{
  int v3 = *a2;
  long long v4 = *a3;
  uint64_t v5 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  sub_1015B2A10(*(void *)(a1 + 8), v3, (uint64_t *)&v4);
  long long v6 = (void **)&v4;
  sub_1015B6758(&v6);
}

void sub_1015B66F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1015B6758(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1015B670C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1015B674C()
{
}

void sub_1015B6758(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1015B67AC((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_1015B67AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 80)
  {
    long long v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *sub_1015B67FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1015B6880(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x24;
  unint64_t v4 = v2 - 36;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    long long v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      std::string v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        int64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)int64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      std::string v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  sub_1000DA434(&v54, &v53);
  std::string::size_type v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1015B6B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1015B6B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101014274((unsigned __int8 *)a2, (const unsigned __int8 *)a3);
  uint64_t result = sub_101014274((unsigned __int8 *)(a2 + 16), (const unsigned __int8 *)(a3 + 16));
  long long v6 = *(_OWORD *)(a3 + 32);
  *(unsigned char *)(a2 + 48) = *(unsigned char *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = v6;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 56) = 0;
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a3 + 80);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  int v7 = (void *)(a3 + 96);
  uint64_t v8 = *(void *)(a3 + 96);
  *(void *)(a2 + 96) = v8;
  uint64_t v9 = a2 + 96;
  uint64_t v10 = *(void *)(a3 + 104);
  *(void *)(a2 + 104) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a3 + 88) = v7;
    *int v7 = 0;
    *(void *)(a3 + 104) = 0;
  }
  else
  {
    *(void *)(a2 + 88) = v9;
  }
  return result;
}

void sub_1015B6C48()
{
}

void *sub_1015B6C5C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_10232FCF8;
  result[1] = v3;
  return result;
}

uint64_t sub_1015B6CA4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_10232FCF8;
  a2[1] = v2;
  return result;
}

void sub_1015B6CD0(uint64_t a1, int *a2, long long *a3)
{
  int v3 = *a2;
  long long v5 = *a3;
  unint64_t v4 = (void *)v5;
  uint64_t v6 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  sub_1015B3568(*(void *)(a1 + 8), v3, &v5);
  if (v4)
  {
    operator delete(v4);
  }
}

void sub_1015B6D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if ((void)a9) {
    operator delete((void *)a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015B6D64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1015B6DA4()
{
}

void *sub_1015B6DB0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t **sub_1015B6E34(uint64_t **result, void *a2, void *a3)
{
  long long v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v18 = result;
    uint64_t v19 = v8;
    int64_t v20 = v8;
    if (v8)
    {
      uint64_t v19 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_OWORD *)v8 + 2) = *((_OWORD *)v9 + 2);
          long long v10 = *((_OWORD *)v9 + 8);
          long long v12 = *((_OWORD *)v9 + 5);
          long long v11 = *((_OWORD *)v9 + 6);
          *((_OWORD *)v8 + 7) = *((_OWORD *)v9 + 7);
          *((_OWORD *)v8 + 8) = v10;
          *((_OWORD *)v8 + 5) = v12;
          *((_OWORD *)v8 + 6) = v11;
          long long v13 = *((_OWORD *)v9 + 4);
          *((_OWORD *)v8 + 3) = *((_OWORD *)v9 + 3);
          *((_OWORD *)v8 + 4) = v13;
          sub_1015B6FB0(v5, (uint64_t)v8);
          uint64_t v8 = v19;
          int64_t v20 = v19;
          if (v19) {
            uint64_t v19 = sub_1002FABD8((uint64_t)v19);
          }
          BOOL v14 = (void *)v9[1];
          if (v14)
          {
            do
            {
              a2 = v14;
              BOOL v14 = (void *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v15 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v15);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_1002FAC2C((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1015B7038((uint64_t)v5, (uint64_t)(a2 + 4));
      uint64_t v16 = (void *)a2[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)a2[2];
          BOOL v15 = *v17 == (void)a2;
          a2 = v17;
        }
        while (!v15);
      }
      a2 = v17;
    }
    while (v17 != a3);
  }
  return result;
}

void sub_1015B6F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FAC2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015B6FB0(uint64_t **a1, uint64_t a2)
{
  long long v5 = a1 + 1;
  unint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v5 = (uint64_t **)v4;
        if (!sub_1010142CC((const unsigned __int8 *)(a2 + 32), (const unsigned __int8 *)v4 + 32)) {
          break;
        }
        unint64_t v4 = *v5;
        uint64_t v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = v5[1];
    }
    while (v4);
    uint64_t v6 = v5 + 1;
  }
  else
  {
    uint64_t v6 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

uint64_t *sub_1015B7038(uint64_t a1, uint64_t a2)
{
  sub_1015B62B8(a1, a2, (uint64_t)&v8);
  unint64_t v4 = (uint64_t **)(a1 + 8);
  int v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    long long v5 = (const unsigned __int8 *)(v8 + 4);
    do
    {
      while (1)
      {
        unint64_t v4 = (uint64_t **)v3;
        if (!sub_1010142CC(v5, (const unsigned __int8 *)v3 + 32)) {
          break;
        }
        int v3 = *v4;
        uint64_t v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      int v3 = v4[1];
    }
    while (v3);
    uint64_t v6 = v4 + 1;
  }
  else
  {
    uint64_t v6 = (uint64_t **)(a1 + 8);
  }
LABEL_9:
  sub_1000EDF90((uint64_t **)a1, (uint64_t)v4, v6, v8);
  return v8;
}

void sub_1015B70D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015B70EC(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(const unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((sub_1010142CC(a2, v2 + 32) & 1) == 0)
      {
        if (!sub_1010142CC(v2 + 32, a2)) {
          return v4;
        }
        v2 += 8;
      }
      uint64_t v2 = *(const unsigned __int8 **)v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_1015B7158(uint64_t a1, char a2, int a3)
{
  if (byte_102488F37 >= 0) {
    uint64_t v6 = (char *)&qword_102488F20;
  }
  else {
    uint64_t v6 = (char *)qword_102488F20;
  }
  sub_100134750(__p, "");
  sub_1015B76C4(a1, v6, a3, (uint64_t)__p, 1, 30.0);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_10232FDA8;
  *(void *)(a1 + 72) = off_10232FE60;
  sub_100F03BA0((void *)(a1 + 408), 0, 0);
  *(unsigned char *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  uint64_t v7 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 464) = 0u;
  uint64_t v8 = (void **)(a1 + 456);
  (*(void (**)(uint64_t))(v7 + 16))(a1 + 112);
  sub_100134750(__p, "ExertionRatingSessionSummary");
  sub_1015B7B9C(a1, (uint64_t *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (a2)
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    uint64_t v9 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, bias corrector enabled, initializing new DB", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutEffortSessionSummaryDb::CLWorkoutEffortSessionSummaryDb(BOOL, BOOL)", "%s\n", v13);
      if (v13 != (char *)__p) {
        free(v13);
      }
    }
    std::string::operator=((std::string *)(a1 + 432), (const std::string *)&qword_102488F20);
    *(unsigned char *)(a1 + 424) = 1;
    sub_1015B7FF0(a1, (std::string::size_type *)__p);
    if (*(char *)(a1 + 479) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = *(_OWORD *)__p;
    *(void *)(a1 + 472) = v16;
    (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    long long v10 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortSessionSummary, bias corrector disabled, will purge db if exists", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      BOOL v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutEffortSessionSummaryDb::CLWorkoutEffortSessionSummaryDb(BOOL, BOOL)", "%s\n", v14);
      if (v14 != (char *)__p) {
        free(v14);
      }
    }
    if (byte_102488F37 >= 0) {
      long long v11 = (char *)&qword_102488F20;
    }
    else {
      long long v11 = (char *)qword_102488F20;
    }
    sub_100134750(__p, v11);
    sub_1015B7B9C(a1, (uint64_t *)__p);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    *(unsigned char *)(a1 + 424) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1015B7618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_1019DB560((uint64_t)&a12);
  if (*(char *)(v20 + 479) < 0) {
    operator delete(*v22);
  }
  if (*(char *)(v20 + 455) < 0) {
    operator delete(*v21);
  }
  sub_1015B8358((void *)v20);
  _Unwind_Resume(a1);
}

uint64_t sub_1015B76C4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  long long v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  *long long v12 = off_1022ADB08;
  *(void *)a1 = off_102330190;
  *(void *)(a1 + 72) = off_102330238;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102330190;
  *(void *)(a1 + 72) = off_102330238;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  *(void *)(a1 + 272) = 0xBFF0000000000000;
  *(void *)(a1 + 280) = 66;
  *(_OWORD *)(a1 + 288) = xmmword_101E17C10;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 312) = _D0;
  *(_DWORD *)(a1 + 320) = -1082130432;
  *(_DWORD *)(a1 + 328) = 12000;
  *(void *)(a1 + 336) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 344));
  *(void *)(a1 + 344) = off_1022ADB08;
  uint64_t v18 = *(void *)(a1 + 112);
  uint64_t v22 = a1 + 112;
  (*(void (**)(uint64_t))(v18 + 16))(a1 + 112);
  __int16 v23 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v21 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1015B7B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_1015BFFE4(v29);
  sub_1011F8AE0(v28);
  *unint64_t v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1015B7B94()
{
}

void sub_1015B7B9C(uint64_t a1, uint64_t *a2)
{
  if ((sub_100082064(a1 + 72) & 1) == 0)
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    uint64_t v8 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, DB not accessible", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419330 == -1)
    {
LABEL_39:
      long long v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortSessionSummaryDb::deleteTableIfPresent(const std::string &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
      return;
    }
LABEL_41:
    dispatch_once(&qword_102419330, &stru_10232FEF0);
    goto LABEL_39;
  }
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  if (sub_1005F93E4(*(void *)(a1 + 80), v4))
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    long long v5 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string buf = 136315138;
      BOOL v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortSessionSummaryDb, Dropping the old table - %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      long long v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortSessionSummaryDb::deleteTableIfPresent(const std::string &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = (uint64_t *)*a2;
    }
    sub_100603138(*(void *)(a1 + 80), v7);
    sub_100028FB4(*(void *)(a1 + 80));
    return;
  }
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_10232FEF0);
  }
  uint64_t v9 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0) {
      long long v10 = a2;
    }
    else {
      long long v10 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    BOOL v14 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummaryDb, %s table not present", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 == -1) {
      goto LABEL_39;
    }
    goto LABEL_41;
  }
}

void sub_1015B7FF0(uint64_t a1@<X0>, std::string::size_type *a2@<X8>)
{
  sub_100134750(a2, "SELECT ");
  uint64_t v3 = 0;
  uint64_t v4 = a2 + 1;
  do
  {
    long long v5 = (&off_10232FF10)[v3];
    if (v5)
    {
      if (*((char *)a2 + 23) >= 0) {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v6 = a2[1];
      }
      size_t v7 = strlen((&off_10232FF10)[v3]);
      sub_1001110E4((uint64_t)&v26, v6 + v7);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = &v26;
      }
      else {
        uint64_t v8 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      if (v6)
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v9 = a2;
        }
        else {
          uint64_t v9 = (const void *)*a2;
        }
        memmove(v8, v9, v6);
      }
      long long v10 = (char *)v8 + v6;
      if (v7) {
        memmove(v10, v5, v7);
      }
      v10[v7] = 0;
      long long v11 = std::string::append(&v26, ", ");
      std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
      *(void *)std::string __p = v11->__r_.__value_.__l.__size_;
      *(void *)&__p[7] = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
      char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (*((char *)a2 + 23) < 0) {
        operator delete((void *)*a2);
      }
      *a2 = v12;
      void *v4 = *(void *)__p;
      *(std::string::size_type *)((char *)a2 + 15) = *(void *)&__p[7];
      *((unsigned char *)a2 + 23) = v13;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
    }
    v3 += 6;
  }
  while (v3 != 78);
  if (*((char *)a2 + 23) < 0)
  {
    BOOL v15 = (uint64_t *)*a2;
    uint64_t v14 = a2[1] - 1;
    a2[1] = v14;
  }
  else
  {
    uint64_t v14 = *((unsigned __int8 *)a2 + 23) - 1;
    *((unsigned char *)a2 + 23) = v14 & 0x7F;
    BOOL v15 = (uint64_t *)a2;
  }
  *((unsigned char *)v15 + v14) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t v17 = (uint64_t *)*a2;
    uint64_t v16 = a2[1] - 1;
    a2[1] = v16;
  }
  else
  {
    uint64_t v16 = *((unsigned __int8 *)a2 + 23) - 1;
    *((unsigned char *)a2 + 23) = v16 & 0x7F;
    uint64_t v17 = (uint64_t *)a2;
  }
  *((unsigned char *)v17 + v16) = 0;
  if (*((char *)a2 + 23) >= 0) {
    size_t v18 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v18 = a2[1];
  }
  sub_1001110E4((uint64_t)&v26, v18 + 6);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = &v26;
  }
  else {
    uint64_t v19 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v20 = a2;
    }
    else {
      uint64_t v20 = (const void *)*a2;
    }
    memmove(v19, v20, v18);
  }
  strcpy((char *)v19 + v18, " from ");
  (*(void (**)(unsigned char *__return_ptr))(*(void *)a1 + 64))(__p);
  if (v28 >= 0) {
    uint64_t v21 = __p;
  }
  else {
    uint64_t v21 = *(const std::string::value_type **)__p;
  }
  uint64_t v22 = std::string::append(&v26, v21);
  std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
  v29[0] = v22->__r_.__value_.__l.__size_;
  *(void *)((char *)v29 + 7) = *(std::string::size_type *)((char *)&v22->__r_.__value_.__r.__words[1] + 7);
  char v24 = HIBYTE(v22->__r_.__value_.__r.__words[2]);
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)a2 + 23) < 0) {
    operator delete((void *)*a2);
  }
  *a2 = v23;
  void *v4 = v29[0];
  *(std::string::size_type *)((char *)a2 + 15) = *(void *)((char *)v29 + 7);
  *((unsigned char *)a2 + 23) = v24;
  if (v28 < 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1015B8304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1015B8358(void *a1)
{
  *a1 = off_102330190;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102330238;
  a1[42] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 43);
  sub_1015BFFE4(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1015B8418(uint64_t a1)
{
  *(void *)a1 = off_10232FDA8;
  *(void *)(a1 + 72) = off_10232FE60;
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }

  return sub_1015B8358((void *)a1);
}

void *sub_1015B84AC(uint64_t a1)
{
  return sub_1015B8418(a1 - 72);
}

void sub_1015B84B4(uint64_t a1)
{
  sub_1015B8418(a1);

  operator delete();
}

void sub_1015B84EC(uint64_t a1)
{
  sub_1015B8418(a1 - 72);

  operator delete();
}

uint64_t sub_1015B8528(uint64_t a1, uint64_t a2, double a3)
{
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v7 = a1 + 112;
    uint64_t v6 = *(void *)(a1 + 112);
    *(void *)std::string buf = a1 + 112;
    (*(void (**)(uint64_t))(v6 + 16))(a1 + 112);
    __int16 v20 = 256;
    if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
    {
      sub_10002B640(*(void *)(a1 + 80));
      sub_100082068((void *)(a1 + 408), &v18);
      if (sub_10014D19C(v18)
        && (uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(v18), sub_100055D58(v8, 1, a3 - *(double *)(*(void *)(a2 + 8) - 24))))
      {
        uint64_t v9 = *(void *)(a1 + 80);
        long long v10 = (sqlite3_stmt *)sub_10014D19C(v18);
        sub_10001FEB0(v9, v10);
        uint64_t v11 = (*(int (**)(uint64_t))(*(void *)a1 + 152))(a1);
      }
      else
      {
        uint64_t v11 = -1;
      }
      sub_100028FB4(*(void *)(a1 + 80));
      uint64_t v13 = *(void *)(a1 + 80);
      if (*(uint64_t *)(v13 + 88) <= 0) {
        uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v14 = *(void *)(v13 + 88);
      }
      sub_10003CC68(v13, v14);
      uint64_t v15 = v18;
      uint64_t v18 = 0;
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      }
    }
    else
    {
      uint64_t v11 = -1;
    }
    (*(void (**)(uint64_t))(*(void *)v7 + 24))(v7);
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    std::string::size_type v12 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      LOWORD(v18) = 0;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "long CLWorkoutEffortSessionSummaryDb::aggregateRecords(const CLAggregationRules &, CFAbsoluteTime)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    return -1;
  }
  return v11;
}

void sub_1015B8840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015B8888(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 424))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    return sub_1015B8528(a1, a2, Current);
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    uint64_t v6 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual long CLWorkoutEffortSessionSummaryDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return -1;
  }
}

uint64_t sub_1015B8A6C(uint64_t a1, uint64_t a2)
{
  return sub_1015B8888(a1 - 72, a2);
}

uint64_t sub_1015B8A74(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v3 = a1 + 112;
    uint64_t v2 = *(void *)(a1 + 112);
    uint64_t v4 = a1 + 72;
    uint64_t v15 = a1 + 112;
    (*(void (**)(uint64_t))(v2 + 16))(a1 + 112);
    __int16 v16 = 256;
    if (sub_100082064(v4))
    {
      sub_10010F274((uint64_t)buf);
      long long v5 = sub_100132EFC(&v18, (uint64_t)"SELECT COUNT(*) FROM ", 21);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 64))(__p, a1);
      if ((v14 & 0x80u) == 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      if ((v14 & 0x80u) == 0) {
        uint64_t v7 = v14;
      }
      else {
        uint64_t v7 = (uint64_t)__p[1];
      }
      sub_100132EFC(v5, (uint64_t)v6, v7);
      if ((char)v14 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = *(void *)(a1 + 80);
      std::stringbuf::str();
      if ((v14 & 0x80u) == 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      sub_10014D518(v8, (uint64_t)v9);
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    long long v10 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      LOWORD(v15) = 0;
      std::string::size_type v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLWorkoutEffortSessionSummaryDb::getNumberOfRecords() const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void sub_1015B8EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  sub_101A129A8((uint64_t)&a22);
  sub_1019DB560((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1015B8F88(uint64_t a1)
{
  return sub_1015B8A74(a1 - 72);
}

void sub_1015B8F90(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 424))
  {
    sub_1015B915C(a1, a2);
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    uint64_t v2 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, Workout Effort DB is not enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortSessionSummaryDb::insertRecord(const CLWorkoutEffortSessionSummaryDbRow &)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

uint64_t sub_1015B915C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1 + 112;
  uint64_t v4 = *(void *)(a1 + 112);
  uint64_t v6 = a1 + 72;
  *(void *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  __int16 v20 = 256;
  v19[0] = *(double *)(a2 + 40);
  if (sub_10018360C(v6, v19))
  {
    if (sub_100082064(v6))
    {
      (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(unsigned char *)(a1 + 128))
    {
      std::string::size_type v12 = (void *)(a1 + 176);
      unint64_t v13 = *(void *)(a1 + 216);
      if (v13 > *(int *)(a1 + 328))
      {
        ++*(void *)(a1 + 208);
        *(void *)(a1 + 216) = v13 - 1;
        sub_1015C01F4(a1 + 176, 1);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102330278);
        }
        unsigned __int8 v14 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102330278);
          }
          uint64_t v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v18);
          if (v18 != (char *)buf) {
            free(v18);
          }
        }
      }
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_102330298);
      }
      uint64_t v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Buffer was added to since db was inaccesible.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_102330298);
        }
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      __n128 v7 = sub_1015C011C(v12, (long long *)a2);
    }
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102330278);
    }
    uint64_t v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      *(_DWORD *)std::string buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      char v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      char v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102330278);
      }
    }
    long long v10 = qword_102418FD8;
    if (os_signpost_enabled((os_log_t)qword_102418FD8))
    {
      uint64_t v11 = (void *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      char v24 = "";
      __int16 v25 = 1026;
      int v26 = (int)v19[0];
      __int16 v27 = 2082;
      char v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(void *)v5 + 24))(v5, v7);
}

void sub_1015B96A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015B96CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  if (sub_10014D19C(*a1))
  {
    uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
    *(void *)a2 = sqlite3_column_int64(v6, 0);
    __n128 v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
    *(double *)(a2 + 40) = sqlite3_column_double(v7, 1);
    uint64_t v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
    *(double *)(a2 + 48) = sqlite3_column_double(v8, 2);
    uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
    long long v10 = sqlite3_column_text(v9, 3);
    uuid_parse((const char *)v10, (unsigned __int8 *)(a2 + 8));
    uint64_t v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
    std::string::size_type v12 = sqlite3_column_text(v11, 4);
    uuid_parse((const char *)v12, (unsigned __int8 *)(a2 + 24));
    unint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
    *(void *)(a2 + 56) = sqlite3_column_int(v13, 5);
    unsigned __int8 v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
    *(void *)(a2 + 64) = sqlite3_column_int(v14, 6);
    uint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
    *(void *)(a2 + 72) = sqlite3_column_int(v15, 7);
    __int16 v16 = (sqlite3_stmt *)sub_10014D19C(*a1);
    *(double *)(a2 + 80) = sqlite3_column_double(v16, 8);
    uint64_t v17 = (sqlite3_stmt *)sub_10014D19C(*a1);
    float v18 = sqlite3_column_double(v17, 9);
    *(float *)(a2 + 88) = v18;
    uint64_t v19 = (sqlite3_stmt *)sub_10014D19C(*a1);
    float v20 = sqlite3_column_double(v19, 10);
    *(float *)(a2 + 92) = v20;
    uint64_t v21 = (sqlite3_stmt *)sub_10014D19C(*a1);
    double v22 = sqlite3_column_double(v21, 11);
    uint64_t result = 0;
    *(float *)&double v22 = v22;
    *(_DWORD *)(a2 + 96) = LODWORD(v22);
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    char v24 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Null statement passed", buf, 2u);
    }
    BOOL v25 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v25)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      int v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void formatFromStatement(const CLSqliteScopedStatement &, CLWorkoutEffortSessionSummaryDbRow &)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1015B99B8(uint64_t result, void *a2)
{
  if (*(unsigned char *)(result + 424))
  {
    uint64_t v3 = result;
    uint64_t v5 = result + 112;
    uint64_t v4 = *(void *)(result + 112);
    uint64_t v6 = result + 72;
    uint64_t v13 = result + 112;
    (*(void (**)(uint64_t))(v4 + 16))(result + 112);
    __int16 v14 = 256;
    if (sub_100082064(v6))
    {
      a2[1] = *a2;
      if (*(char *)(v3 + 479) >= 0) {
        size_t v7 = *(unsigned __int8 *)(v3 + 479);
      }
      else {
        size_t v7 = *(void *)(v3 + 464);
      }
      uint64_t v8 = __p;
      sub_1001110E4((uint64_t)__p, v7 + 24);
      if (v12 < 0) {
        uint64_t v8 = (void **)__p[0];
      }
      if (v7)
      {
        if (*(char *)(v3 + 479) >= 0) {
          uint64_t v9 = (const void *)(v3 + 456);
        }
        else {
          uint64_t v9 = *(const void **)(v3 + 456);
        }
        memmove(v8, v9, v7);
      }
      strcpy((char *)v8 + v7, " ORDER BY start_time ASC");
      if (v12 >= 0) {
        long long v10 = __p;
      }
      else {
        long long v10 = (void **)__p[0];
      }
      sub_10014D518(*(void *)(v3 + 80), (uint64_t)v10);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  return result;
}

void sub_1015B9D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1015B9DEC(uint64_t a1, long long **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = *(void **)(a3 + 16);
    while (1)
    {
      if (*(void **)(a3 + 8) == v5)
      {
        BOOL v7 = 1;
      }
      else
      {
        uint64_t v6 = *(void **)(a3 + 8);
        while (*v6 != *((void *)v4 + 7))
        {
          if (++v6 == v5)
          {
            uint64_t v6 = *(void **)(a3 + 16);
            break;
          }
        }
        BOOL v7 = v6 != v5;
      }
      if (*((double *)v4 + 6) - *((double *)v4 + 5) < *(double *)a3 || !v7) {
        break;
      }
      uint64_t v4 = (long long *)((char *)v4 + 104);
      if (v4 == v3) {
        return;
      }
    }
    if (v4 != v3)
    {
      uint64_t v9 = (long long *)((char *)v4 + 104);
      if ((long long *)((char *)v4 + 104) == v3)
      {
        long long v10 = v4;
      }
      else
      {
        long long v10 = v4;
        do
        {
          uint64_t v11 = v9;
          uint64_t v13 = *(void **)(a3 + 8);
          char v12 = *(void **)(a3 + 16);
          if (v13 == v12)
          {
            BOOL v14 = 1;
          }
          else
          {
            while (*v13 != *((void *)v4 + 20))
            {
              if (++v13 == v12)
              {
                uint64_t v13 = *(void **)(a3 + 16);
                break;
              }
            }
            BOOL v14 = v13 != v12;
          }
          if (*((double *)v4 + 19) - *((double *)v4 + 18) >= *(double *)a3 && v14)
          {
            long long v16 = *v11;
            long long v17 = v11[2];
            v10[1] = v11[1];
            v10[2] = v17;
            *long long v10 = v16;
            long long v18 = v11[3];
            long long v19 = v11[4];
            long long v20 = v11[5];
            *((_DWORD *)v10 + 24) = *((_DWORD *)v11 + 24);
            void v10[4] = v19;
            _OWORD v10[5] = v20;
            v10[3] = v18;
            long long v10 = (long long *)((char *)v10 + 104);
          }
          uint64_t v9 = (long long *)((char *)v11 + 104);
          uint64_t v4 = v11;
        }
        while ((long long *)((char *)v11 + 104) != v3);
        uint64_t v3 = a2[1];
      }
      if (v10 != v3) {
        a2[1] = v10;
      }
    }
  }
}

uint64_t sub_1015B9F6C(unsigned char *a1, unsigned int a2, uint64_t a3, char **a4)
{
  if (a1[424] && (sub_100082064(a1 + 72) & 1) != 0)
  {
    a4[1] = *a4;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v8 = (*(uint64_t (**)(unsigned char *, void **))(*(void *)a1 + 40))(a1, &v57);
    sub_1015B9DEC(v8, (long long **)&v57, a3);
    int v9 = 0;
    long long v10 = v58;
    v56[0] = 0;
    v56[1] = 0;
    long long v55 = v56;
    while (1)
    {
      if (v10 == v57)
      {
LABEL_30:
        uint64_t v39 = *a4;
        uint64_t v40 = a4[1];
        unint64_t v41 = (unint64_t)(v40 - 104);
        if (*a4 != v40 && v41 > (unint64_t)v39)
        {
          unint64_t v43 = (unint64_t)(v39 + 104);
          do
          {
            long long v61 = *(_OWORD *)(v43 - 56);
            long long v62 = *(_OWORD *)(v43 - 40);
            long long v63 = *(_OWORD *)(v43 - 24);
            uint64_t v64 = *(void *)(v43 - 8);
            out[0] = *(_OWORD *)(v43 - 104);
            out[1] = *(_OWORD *)(v43 - 88);
            out[2] = *(_OWORD *)(v43 - 72);
            long long v45 = *(_OWORD *)(v41 + 16);
            long long v44 = *(_OWORD *)(v41 + 32);
            *(_OWORD *)(v43 - 104) = *(_OWORD *)v41;
            *(_OWORD *)(v43 - 88) = v45;
            *(_OWORD *)(v43 - 72) = v44;
            long long v47 = *(_OWORD *)(v41 + 64);
            long long v46 = *(_OWORD *)(v41 + 80);
            int v48 = *(_DWORD *)(v41 + 96);
            *(_OWORD *)(v43 - 56) = *(_OWORD *)(v41 + 48);
            *(_DWORD *)(v43 - 8) = v48;
            *(_OWORD *)(v43 - 24) = v46;
            *(_OWORD *)(v43 - 40) = v47;
            *(_OWORD *)(v41 + 32) = out[2];
            *(_OWORD *)(v41 + 16) = out[1];
            *(_OWORD *)unint64_t v41 = out[0];
            *(_DWORD *)(v41 + 96) = v64;
            *(_OWORD *)(v41 + 80) = v63;
            *(_OWORD *)(v41 + 64) = v62;
            *(_OWORD *)(v41 + 48) = v61;
            v41 -= 104;
            BOOL v49 = v43 >= v41;
            v43 += 104;
          }
          while (!v49);
        }
        sub_1000DB264((uint64_t)&v55, v56[0]);
        if (v57)
        {
          uint64_t v58 = (const unsigned __int8 *)v57;
          operator delete(v57);
        }
        return 100;
      }
      memset(out, 0, 37);
      uuid_unparse(v10 - 96, (char *)out);
      sub_100134750(__p, (char *)out);
      if (sub_100040D3C((uint64_t)&v55, (const void **)__p)) {
        goto LABEL_9;
      }
      if (++v9 <= a2) {
        break;
      }
      char v11 = 0;
LABEL_26:
      if (v54 < 0)
      {
        operator delete(__p[0]);
        if ((v11 & 1) == 0) {
          goto LABEL_30;
        }
      }
      else if ((v11 & 1) == 0)
      {
        goto LABEL_30;
      }
    }
    sub_10010702C((uint64_t **)&v55, (const void **)__p, (uint64_t)__p);
LABEL_9:
    v10 -= 104;
    unint64_t v12 = (unint64_t)a4[1];
    unint64_t v13 = (unint64_t)a4[2];
    if (v12 >= v13)
    {
      uint64_t v20 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v12 - (void)*a4) >> 3);
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) > 0x276276276276276) {
        sub_1001D7FD4();
      }
      unint64_t v22 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v13 - (void)*a4) >> 3);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x13B13B13B13B13BLL) {
        unint64_t v23 = 0x276276276276276;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23) {
        char v24 = (char *)sub_100644404((uint64_t)(a4 + 2), v23);
      }
      else {
        char v24 = 0;
      }
      BOOL v25 = &v24[104 * v20];
      long long v26 = *(_OWORD *)v10;
      long long v27 = *((_OWORD *)v10 + 2);
      *((_OWORD *)v25 + 1) = *((_OWORD *)v10 + 1);
      *((_OWORD *)v25 + 2) = v27;
      *(_OWORD *)BOOL v25 = v26;
      long long v28 = *((_OWORD *)v10 + 3);
      long long v29 = *((_OWORD *)v10 + 4);
      long long v30 = *((_OWORD *)v10 + 5);
      *((void *)v25 + 12) = *((void *)v10 + 12);
      *((_OWORD *)v25 + 4) = v29;
      *((_OWORD *)v25 + 5) = v30;
      *((_OWORD *)v25 + 3) = v28;
      long long v32 = *a4;
      long long v31 = a4[1];
      unint64_t v33 = v25;
      if (v31 != *a4)
      {
        do
        {
          long long v34 = *(_OWORD *)(v31 - 104);
          long long v35 = *(_OWORD *)(v31 - 88);
          *(_OWORD *)(v33 - 72) = *(_OWORD *)(v31 - 72);
          *(_OWORD *)(v33 - 88) = v35;
          *(_OWORD *)(v33 - 104) = v34;
          long long v36 = *(_OWORD *)(v31 - 56);
          long long v37 = *(_OWORD *)(v31 - 40);
          long long v38 = *(_OWORD *)(v31 - 24);
          *((_DWORD *)v33 - 2) = *((_DWORD *)v31 - 2);
          *(_OWORD *)(v33 - 24) = v38;
          *(_OWORD *)(v33 - 40) = v37;
          *(_OWORD *)(v33 - 56) = v36;
          v33 -= 104;
          v31 -= 104;
        }
        while (v31 != v32);
        long long v31 = *a4;
      }
      long long v19 = v25 + 104;
      *a4 = v33;
      a4[1] = v25 + 104;
      a4[2] = &v24[104 * v23];
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      long long v14 = *(_OWORD *)v10;
      long long v15 = *((_OWORD *)v10 + 2);
      *(_OWORD *)(v12 + 16) = *((_OWORD *)v10 + 1);
      *(_OWORD *)(v12 + 32) = v15;
      *(_OWORD *)unint64_t v12 = v14;
      long long v16 = *((_OWORD *)v10 + 3);
      long long v17 = *((_OWORD *)v10 + 4);
      long long v18 = *((_OWORD *)v10 + 5);
      *(void *)(v12 + 96) = *((void *)v10 + 12);
      *(_OWORD *)(v12 + 64) = v17;
      *(_OWORD *)(v12 + 80) = v18;
      *(_OWORD *)(v12 + 48) = v16;
      long long v19 = (char *)(v12 + 104);
    }
    a4[1] = v19;
    char v11 = 1;
    goto LABEL_26;
  }
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_10232FEF0);
  }
  long long v51 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(out[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, DB not enabled or accessible", (uint8_t *)out, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(out, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    LOWORD(v57) = 0;
    uint64_t v52 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CMError CLWorkoutEffortSessionSummaryDb::getLastNSessions(unsigned int, const CLWorkoutEffortSessionSummaryDb::QueryRules &, std::vector<CLWorkoutEffortSessionSummaryDbRow> &) const", "%s\n", v52);
    if (v52 != (char *)out) {
      free(v52);
    }
  }
  return 109;
}

void sub_1015BA488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015BA4E0(uint64_t result)
{
  if (*(unsigned char *)(result + 424))
  {
    uint64_t v1 = (void *)result;
    uint64_t result = sub_10014C3C0(*(void *)(result + 80));
    if (result)
    {
      sub_1015BA7E4((uint64_t)v1);
      uint64_t v2 = v1[10];
      (*(void (**)(void **__return_ptr, void *))(*v1 + 64))(__p, v1);
      if (v15[0] >= 0) {
        uint64_t v3 = (char *)__p;
      }
      else {
        uint64_t v3 = (char *)__p[0];
      }
      sub_1005F7B0C(v2, v3, (const char **)&off_10232FF10, (const std::string::value_type **)&off_1024798A0, 0);
      if (SHIBYTE(v15[0]) < 0) {
        operator delete(__p[0]);
      }
      sub_10010F274((uint64_t)__p);
      uint64_t v4 = sub_100132EFC(v15, (uint64_t)"DELETE FROM ", 12);
      uint64_t v5 = v12;
      (*(void (**)(void **__return_ptr, void *))(*v1 + 64))(v12, v1);
      if (v13 < 0) {
        uint64_t v5 = (void **)v12[0];
      }
      size_t v6 = strlen((const char *)v5);
      BOOL v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
      sub_100132EFC(v7, (uint64_t)" WHERE start_time < ?", 21);
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      uint64_t v8 = v1[10];
      std::stringbuf::str();
      if (v13 >= 0) {
        int v9 = v12;
      }
      else {
        int v9 = (void **)v12[0];
      }
      v1[51] = sub_100601D1C(v8, (uint64_t)v9);
      v1[52] = v10;
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      *(void **)((char *)__p
      v15[0] = v11;
      if (v16 < 0) {
        operator delete((void *)v15[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      return std::ios::~ios();
    }
  }
  return result;
}

void sub_1015BA794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1015BA7E4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v2 = *(void *)(a1 + 80);
    (*(void (**)(void **__return_ptr))(*(void *)a1 + 64))(__p);
    if (v9 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    int v4 = sub_1005F93E4(v2, v3);
    int v5 = v4;
    if (v9 < 0)
    {
      operator delete(__p[0]);
      if (!v5) {
        return;
      }
    }
    else if (!v4)
    {
      return;
    }
    uint64_t v10 = "workout_type";
    int v11 = 5;
    __int16 v12 = 0;
    char v13 = 0;
    char v14 = 0;
    uint64_t v6 = *(void *)(a1 + 80);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 64))(__p, a1);
    if (v9 >= 0) {
      BOOL v7 = __p;
    }
    else {
      BOOL v7 = (void **)__p[0];
    }
    sub_1005FEC4C(v6, (const char *)v7, (uint64_t)"workout_type", (uint64_t)&v10);
  }
}

void sub_1015BAF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1015BB00C(uint64_t result)
{
  if (*(unsigned char *)(result + 424))
  {
    uint64_t v1 = (void *)result;
    uint64_t v3 = result + 112;
    uint64_t v2 = *(void *)(result + 112);
    uint64_t v4 = result + 72;
    v13[33] = (void *)(result + 112);
    (*(void (**)(uint64_t))(v2 + 16))(result + 112);
    __int16 v14 = 256;
    if (sub_100082064(v4))
    {
      sub_10010F274((uint64_t)&v12);
      int v5 = sub_100132EFC(v13, (uint64_t)"DELETE FROM ", 12);
      uint64_t v6 = __p;
      (*(void (**)(void **__return_ptr, void *))(*v1 + 64))(__p, v1);
      if (v11 < 0) {
        uint64_t v6 = (void **)__p[0];
      }
      size_t v7 = strlen((const char *)v6);
      sub_100132EFC(v5, (uint64_t)v6, v7);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = v1[10];
      std::stringbuf::str();
      if (v11 >= 0) {
        char v9 = __p;
      }
      else {
        char v9 = (void **)__p[0];
      }
      sub_10014D518(v8, (uint64_t)v9);
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }
  return result;
}

void sub_1015BB314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a16);
  sub_1019DB560(v16 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_1015BB378(uint64_t a1)
{
  return sub_1015BB00C(a1 - 72);
}

void sub_1015BB388(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 424))
  {
    memset(out, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a2 + 8), out);
    if (sub_100082064(a1 + 72))
    {
      memset(__s, 0, 37);
      uuid_unparse((const unsigned __int8 *)(a2 + 24), __s);
      sub_10010F274((uint64_t)v17);
      uint64_t v4 = sub_100132EFC((uint64_t *)((char *)&v19 + 2), (uint64_t)"INSERT INTO ", 12);
      int v5 = __p;
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 64))(__p, a1);
      if (v27 < 0) {
        int v5 = *(const char **)__p;
      }
      size_t v6 = strlen(v5);
      size_t v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
      sub_100132EFC(v7, (uint64_t)"(start_time, end_time, session_id, overview_id, workout_type, workout_location, swim_location, hr_max, estimated_workout_effort, estimated_workout_effort_pre_bias_correction, user_effort_response) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", 237);
      if (SHIBYTE(v27) < 0) {
        operator delete(*(void **)__p);
      }
      uint64_t v8 = *(void *)(a1 + 80);
      std::stringbuf::str();
      if (v27 >= 0) {
        char v9 = __p;
      }
      else {
        char v9 = *(unsigned char **)__p;
      }
      sub_10014D518(v8, (uint64_t)v9);
    }
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    uint64_t v12 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a2 + 40);
      uint64_t v14 = *(void *)(a2 + 48);
      *(_DWORD *)std::string __p = 134349570;
      *(void *)&__p[4] = v13;
      __int16 v25 = 2050;
      uint64_t v26 = v14;
      __int16 v27 = 2082;
      long long v28 = out;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLWorkoutEffortSessionSummary, database isn't available for entry with startTime, %{public}f, endTime, %{public}f, sessionId, %{public}s", __p, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    uint64_t v15 = *(void *)(a2 + 40);
    uint64_t v16 = *(void *)(a2 + 48);
    v17[0] = 134349570;
    *(void *)&v17[1] = v15;
    __int16 v18 = 2050;
    uint64_t v19 = v16;
    __int16 v20 = 2082;
    unint64_t v21 = out;
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLWorkoutEffortSessionSummaryDb::insertRecordUL(const CLWorkoutEffortSessionSummaryDbRow &, BOOL)", "%s\n", v11);
LABEL_28:
    if (v11 != __p) {
      free(v11);
    }
    return;
  }
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_10232FEF0);
  }
  uint64_t v10 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string __p = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled", __p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    LOWORD(v17[0]) = 0;
    char v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWorkoutEffortSessionSummaryDb::insertRecordUL(const CLWorkoutEffortSessionSummaryDbRow &, BOOL)", "%s\n", v11);
    goto LABEL_28;
  }
}

void sub_1015BBB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015BBBF4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_1015BBC1C()
{
  return 0;
}

uint64_t sub_1015BBC24(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 424))
  {
    if (sub_100082064(a1 + 72))
    {
      if (*(char *)(a1 + 479) >= 0) {
        size_t v2 = *(unsigned __int8 *)(a1 + 479);
      }
      else {
        size_t v2 = *(void *)(a1 + 464);
      }
      uint64_t v3 = __p;
      sub_1001110E4((uint64_t)__p, v2 + 25);
      if (v10 < 0) {
        uint64_t v3 = (void **)__p[0];
      }
      if (v2)
      {
        if (*(char *)(a1 + 479) >= 0) {
          uint64_t v4 = (const void *)(a1 + 456);
        }
        else {
          uint64_t v4 = *(const void **)(a1 + 456);
        }
        memmove(v3, v4, v2);
      }
      strcpy((char *)v3 + v2, " ORDER BY id DESC LIMIT 1");
      if (v10 >= 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      sub_10014D518(*(void *)(a1 + 80), (uint64_t)v5);
    }
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    size_t v6 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled", (uint8_t *)__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLActivityDB::ActivityCode CLWorkoutEffortSessionSummaryDb::getMostRecentRecordUL(CLWorkoutEffortSessionSummaryDbRow &) const", "%s\n", v8);
      if (v8 != (char *)__p) {
        free(v8);
      }
    }
  }
  return 2;
}

void sub_1015BBECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    sub_101A5DB04();
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015BBF04(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102330278);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102330278);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      uint64_t v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    uint64_t v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    size_t v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    char v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        char v10 = __p;
      }
      else {
        char v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      char v11 = v21;
    }
    else {
      char v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    uint64_t v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      uint64_t v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1015BD130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1015BD490(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 424))
  {
    uint64_t v5 = a1 + 112;
    uint64_t v4 = *(void *)(a1 + 112);
    uint64_t v6 = a1 + 72;
    uint64_t v18 = a1 + 112;
    (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
    __int16 v19 = 256;
    if (sub_100082064(v6))
    {
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)(a2 + 8), out);
      sub_10010F274((uint64_t)buf);
      size_t v7 = sub_100132EFC(&v22, (uint64_t)"UPDATE ", 7);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 64))(__p, a1);
      if ((v17 & 0x80u) == 0) {
        size_t v8 = __p;
      }
      else {
        size_t v8 = (void **)__p[0];
      }
      if ((v17 & 0x80u) == 0) {
        uint64_t v9 = v17;
      }
      else {
        uint64_t v9 = (uint64_t)__p[1];
      }
      char v10 = sub_100132EFC(v7, (uint64_t)v8, v9);
      sub_100132EFC(v10, (uint64_t)" SET user_effort_response = ? where session_id = ?;", 51);
      if ((char)v17 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v11 = *(void *)(a1 + 80);
      std::stringbuf::str();
      if ((v17 & 0x80u) == 0) {
        std::string::size_type v12 = __p;
      }
      else {
        std::string::size_type v12 = (void **)__p[0];
      }
      sub_10014D518(v11, (uint64_t)v12);
    }
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_10232FEF0);
    }
    uint64_t v13 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortSessionSummary, WorkoutEffort DB is not enabled", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_10232FEF0);
      }
      *(_WORD *)out = 0;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutEffortSessionSummaryDb::updateUserEnteredWorkoutEffort(const CLWorkoutEffortSessionSummaryDbRow)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  return 0;
}

void sub_1015BD984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a28);
  sub_1019DB560((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_1015BD9F8()
{
}

uint64_t sub_1015BDA00(void *a1)
{
  size_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101ABE708(v2);
    __break(1u);
  }
  uint64_t v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    uint64_t v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v13, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = v13;
    }
    else {
      uint64_t v4 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)v13[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      size_t v8 = v13;
    }
    else {
      size_t v8 = (void **)v13[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1015BDF14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v5 - 193) < 0) {
    operator delete(*(void **)(v5 - 216));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015BDF9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1015C059C(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102330278);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    __int16 v14 = 2082;
    char v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102330278);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102330278);
      }
      char v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1015BE72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1015BE760@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[455] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 54), *((void *)result + 55));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 27);
  *(void *)(a2 + 16) = *((void *)result + 56);
  return result;
}

__n128 sub_1015BE78C(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  long long v4 = a3[2];
  *(_OWORD *)(a2 + 16) = a3[1];
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)a2 = v3;
  __n128 result = (__n128)a3[3];
  long long v6 = a3[4];
  long long v7 = a3[5];
  *(_DWORD *)(a2 + 96) = *((_DWORD *)a3 + 24);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 80) = v7;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t sub_1015BE7B8(uint64_t a1)
{
  return sub_1015BDF9C(a1 - 72);
}

char *sub_1015BE7C0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[383] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 45), *((void *)result + 46));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 360);
  *(void *)(a2 + 16) = *((void *)result + 47);
  return result;
}

void sub_1015BE7EC(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t sub_1015BE81C(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101ABE878(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    long long v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      long long v7 = v15;
    }
    else {
      long long v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1015BECEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1015BED74(uint64_t a1, long long *a2, char a3)
{
  v37[0] = (id)os_transaction_create();
  v37[1] = 0;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v37);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  __asm { FMOV            V0.2D, #-1.0 }
  long long v47 = _Q0;
  long long v48 = xmmword_101E17C20;
  uint64_t v49 = 2;
  __asm { FMOV            V0.2S, #-1.0 }
  uint64_t v50 = _Q0;
  int v51 = -1082130432;
  int v11 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 104))(a1, v46);
  if (v11 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v11)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102330278);
      }
      __int16 v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102330278);
        }
        LOWORD(v38) = 0;
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
      goto LABEL_43;
    }
    double v12 = *((double *)a2 + 5);
    double v13 = *(double *)&v47;
    double v14 = v12 - *(double *)&v47;
    if (v12 - *(double *)&v47 < 0.0) {
      double v14 = -(v12 - *(double *)&v47);
    }
    if (v14 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102330278);
      }
      char v15 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *((void *)a2 + 5);
        *(_DWORD *)std::string buf = 134349312;
        double v43 = *(double *)&v47;
        __int16 v44 = 2050;
        uint64_t v45 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102330278);
        }
        uint64_t v31 = *((void *)a2 + 5);
        int v38 = 134349312;
        double v39 = *(double *)&v47;
        __int16 v40 = 2050;
        uint64_t v41 = v31;
        long long v32 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v32);
        if (v32 != (char *)buf) {
          free(v32);
        }
      }
      CLWriteStackshot();
      double v12 = *((double *)a2 + 5);
      double v13 = *(double *)&v47;
    }
    if (v12 < v13)
    {
      if (v13 - v12 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102330278);
        }
        unsigned __int8 v17 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v18 = *((double *)a2 + 5);
          *(_DWORD *)std::string buf = 134217984;
          double v43 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102330278);
          }
          double v33 = *((double *)a2 + 5);
          int v38 = 134217984;
          double v39 = v33;
          long long v34 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v34);
          if (v34 != (char *)buf) {
            free(v34);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v21 = v12 - v13;
      double v22 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v36 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102330278);
        double v22 = v36;
      }
      double v23 = v21 - v22;
      char v24 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v43 = v23;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102330278);
        }
        int v38 = 134217984;
        double v39 = v23;
        long long v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLWorkoutEffort::SessionSummary, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLWorkoutEffort::SessionSummary, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v23);
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t, long long *))(*(void *)a1 + 144))(a1, v46, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v25 = *a2;
  long long v26 = a2[2];
  *(_OWORD *)(a1 + 240) = a2[1];
  *(_OWORD *)(a1 + 256) = v26;
  *(_OWORD *)(a1 + 224) = v25;
  long long v27 = a2[3];
  long long v28 = a2[4];
  long long v29 = a2[5];
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 288) = v28;
  *(_OWORD *)(a1 + 304) = v29;
  *(_OWORD *)(a1 + 272) = v27;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v37);
}

void sub_1015BF5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015BF5F0(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101ABE9E8(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  double v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    long long v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      long long v7 = __p;
    }
    else {
      long long v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    uint64_t v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      int v11 = __p;
    }
    else {
      int v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1015BF964(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    int v11 = (_Unwind_Exception *)sub_101ABEB58(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    long long v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1015BFC90(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    int v11 = (_Unwind_Exception *)sub_101ABECC8(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    long long v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_1015BFFB4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1015BFFE4(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 19;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 39;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

uint64_t sub_1015C008C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

__n128 sub_1015C011C(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 39 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1015C0284(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x27)) + 104 * (v7 % 0x27);
  long long v9 = *a2;
  long long v10 = a2[2];
  *(_OWORD *)(v8 + 16) = a2[1];
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)unint64_t v8 = v9;
  __n128 result = (__n128)a2[3];
  long long v12 = a2[4];
  long long v13 = a2[5];
  *(void *)(v8 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(v8 + 64) = v12;
  *(_OWORD *)(v8 + 80) = v13;
  *(__n128 *)(v8 + 48) = result;
  ++a1[5];
  return result;
}

uint64_t sub_1015C01F4(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x27) {
    a2 = 1;
  }
  if (v2 < 0x4E) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 39;
  }
  return v4 ^ 1u;
}

void sub_1015C0254(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1015C0284(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x27;
  unint64_t v4 = v2 - 39;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000DA54C(v5, v33);
      long long v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      int v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFD8uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFD8uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      long long v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      long long v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      double v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFD8uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  long long v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1015C0550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1015C059C(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1015C061C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1015C0638()
{
  sub_100134750(&qword_102488F20, "WorkoutEffortSessionSummary");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102488F20, (void *)&_mh_execute_header);
}

float sub_1015C0698(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *(void *)(a2 + 4);
  float v3 = *(double *)(a2 + 168);
  int v4 = *(_DWORD *)(a2 + 12);
  float v29 = v3;
  int v30 = v4;
  int32x2_t v31 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  int v32 = *(_DWORD *)(a2 + 28);
  long long v33 = *(_OWORD *)(a2 + 40);
  int v5 = *(_DWORD *)(a2 + 60);
  int v6 = *(_DWORD *)(a2 + 124);
  int v7 = *(_DWORD *)(a2 + 128);
  int v34 = *(_DWORD *)(a2 + 56);
  int v35 = v6;
  int v36 = v5;
  int v37 = v7;
  int v38 = *(_DWORD *)(a2 + 184);
  uint64_t v39 = *(void *)(a2 + 192);
  int v8 = *(_DWORD *)(a2 + 224);
  int v40 = *(_DWORD *)(a2 + 200);
  int v41 = v8;
  float v9 = 0.0;
  if (sub_1015B0008(*(void *)(a2 + 152)) == 5) {
    float v10 = 1.0;
  }
  else {
    float v10 = 0.0;
  }
  float v23 = v10;
  if (sub_1015B0008(*(void *)(a2 + 152)) == 7) {
    float v11 = 1.0;
  }
  else {
    float v11 = 0.0;
  }
  float v22 = v11;
  if (sub_1015B0008(*(void *)(a2 + 152)) == 9) {
    float v12 = 1.0;
  }
  else {
    float v12 = 0.0;
  }
  if (sub_1015B0008(*(void *)(a2 + 152)) == 11) {
    float v13 = 1.0;
  }
  else {
    float v13 = 0.0;
  }
  if (sub_1015B0008(*(void *)(a2 + 152)) == 12) {
    float v14 = 1.0;
  }
  else {
    float v14 = 0.0;
  }
  if (sub_1015B0008(*(void *)(a2 + 152)) == 18) {
    float v15 = 1.0;
  }
  else {
    float v15 = 0.0;
  }
  if (sub_1015B0008(*(void *)(a2 + 152)) == 19) {
    float v16 = 1.0;
  }
  else {
    float v16 = 0.0;
  }
  if (sub_1015B0008(*(void *)(a2 + 152)) == 14) {
    float v17 = 1.0;
  }
  else {
    float v17 = 0.0;
  }
  if (sub_1015B0008(*(void *)(a2 + 152)) == 22) {
    float v9 = 1.0;
  }
  uint64_t v18 = (float *)operator new(0x24uLL);
  float *v18 = v23;
  v18[1] = v22;
  v18[2] = v12;
  v18[3] = v13;
  v18[4] = v14;
  void v18[5] = v15;
  v18[6] = v16;
  v18[7] = v17;
  unsigned char v18[8] = v9;
  long long v19 = *((_OWORD *)v18 + 1);
  long long v42 = *(_OWORD *)v18;
  long long v43 = v19;
  int v44 = *((_DWORD *)v18 + 8);
  v24[1] = &off_1023302B8;
  v24[2] = 29;
  char v25 = 1;
  uint64_t v26 = &off_102330488;
  v24[0] = off_10232FAA0;
  int v27 = 1056964608;
  float v20 = sub_1015B061C((uint64_t)v24, (uint64_t)&v28);
  operator delete(v18);
  return v20;
}

void sub_1015C088C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1015C08A0(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 == v10)
  {
    unint64_t v13 = 0;
    float v14 = 0.0;
  }
  else
  {
    unint64_t v13 = 0;
    float v14 = 0.0;
    do
    {
      float v15 = a1 - *(double *)(v11 + 40);
      if (v15 >= 2592000.0) {
        break;
      }
      if (*(void *)(v11 + 56) == a4)
      {
        float v16 = *(float *)(v11 + 96);
        if (a4 != 19 || *(void *)(v11 + 72) == a6)
        {
          if (*(float *)(v11 + 92) == -1.0) {
            float v17 = *(float *)(v11 + 88);
          }
          else {
            float v17 = *(float *)(v11 + 92);
          }
          BOOL v18 = sub_1015AFFCC(v17);
          BOOL v19 = sub_1015AFFCC(v16);
          if (v18 && v19)
          {
            if ((float)(v16 - v17) <= 2.0) {
              float v21 = v16 - v17;
            }
            else {
              float v21 = 2.0;
            }
            if ((float)(v16 - v17) >= -2.0) {
              float v22 = v21;
            }
            else {
              float v22 = -2.0;
            }
            float v14 = v14 + v22;
            ++v13;
          }
          if (v13 > 9) {
            break;
          }
          uint64_t v10 = a3[1];
        }
      }
      v11 += 104;
    }
    while (v11 != v10);
  }
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_102330698);
  }
  float v23 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = 0x4EC4EC4EC4EC4EC5 * ((a3[1] - *a3) >> 3);
    if (v13) {
      double v25 = (float)(v14 / (float)v13);
    }
    else {
      double v25 = 0.0;
    }
    *(_DWORD *)std::string buf = 134219264;
    uint64_t v28 = v24;
    __int16 v29 = 1024;
    int v30 = a4;
    __int16 v31 = 1024;
    int v32 = a5;
    __int16 v33 = 1024;
    int v34 = a6;
    __int16 v35 = 2048;
    double v36 = v25;
    __int16 v37 = 2048;
    unint64_t v38 = v13;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "BiasCorrector, numHistoricalData, %zu, workoutType, %d, workoutLocation, %d, swimLocation, %d avgDelta, %f, countMatch, %zu", buf, 0x32u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102330698);
    }
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLWorkoutEffortBiasCorrector::computeAvgUserBiasForWorkoutTypeCorrection(const CFAbsoluteTime, const std::vector<CLWorkoutEffort::SessionSummary> &, const CMWorkoutType, const CMWorkoutLocationType, const CMSwimWorkoutLocation) const", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
}

uint64_t sub_1015C0C3C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)a1 = a2;
  *(double *)(a1 + 8) = a6;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = a5;
  sub_1015C08A0(a6, a1, a2, a3, a4, a5);
  *(_DWORD *)(a1 + 40) = v7;
  return a1;
}

void sub_1015C0C78(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  long long v4 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 20) = *(_DWORD *)(a3 + 16);
  if (**(void **)a1 != *(void *)(*(void *)a1 + 8))
  {
    float v7 = sub_1015C0EFC((uint64_t)a1, (uint64_t)a2, (uint64_t)a2);
    float v9 = a1[10];
    int v8 = a1 + 10;
    float v10 = v9;
    float v11 = -2.0;
    if (v9 >= -2.0)
    {
      float v12 = (float *)&unk_101E1DC4C;
      if (v10 <= 2.0) {
        float v12 = v8;
      }
      float v11 = *v12;
    }
    float v13 = v11 + a2[4];
    *(float *)(a3 + 16) = v13;
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102330698);
    }
    float v14 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      double v15 = a2[4];
      double v16 = *v8;
      *(_DWORD *)std::string buf = 134218752;
      double v19 = v15;
      __int16 v20 = 2048;
      double v21 = v13;
      __int16 v22 = 2048;
      double v23 = v16;
      __int16 v24 = 2048;
      double v25 = v7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BiasCorrector, rawScore, %f, correctedScore, %f, avgUserBias, %f, recentHighEffortBonus, %f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_102330698);
      }
      float v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortBiasCorrector::correctBias(const CLWorkoutEffort::Result &) const", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

float sub_1015C0EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)a1 + 8);
  if (**(void **)a1 == v3) {
    return 0.0;
  }
  double v5 = *(double *)(v3 - 56);
  float v6 = *(float *)(v3 - 12);
  float v7 = *(float *)(a3 + 16);
  double v8 = v5 - *(double *)a3;
  if (v8 < 0.0) {
    double v8 = 0.0;
  }
  float v9 = 0.0;
  if (v8 < 14400.0)
  {
    float v10 = v8 / -14400.0 + 1.0;
    float v11 = (float)(v6 - v7) * v10;
    float v12 = 2.0;
    if (v11 <= 2.0) {
      float v12 = v11;
    }
    if (v11 >= 0.0) {
      float v9 = v12;
    }
    else {
      float v9 = 0.0;
    }
  }
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_102330698);
  }
  float v13 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    double v14 = *(double *)a3;
    *(_DWORD *)std::string buf = 134219008;
    double v18 = v9;
    __int16 v19 = 2048;
    double v20 = v6;
    __int16 v21 = 2048;
    double v22 = v7;
    __int16 v23 = 2048;
    double v24 = v5;
    __int16 v25 = 2048;
    double v26 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BiasCorrector, recentHighEffortBonus, %f, lastScore, %f, currentScore, %f, lastEndTime, %f, currentStartTime, %f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102330698);
    }
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "float CLWorkoutEffortBiasCorrector::computeRecentHighEffortBiasCorrection(const std::vector<CLWorkoutEffort::SessionSummary> &, const CLWorkoutEffort::Result &) const", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return v9;
}

void sub_1015C11A4(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

float sub_1015C11D4(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *(void *)(a2 + 4);
  float v2 = *(double *)(a2 + 168);
  int v3 = *(_DWORD *)(a2 + 12);
  float v16 = v2;
  int v17 = v3;
  int32x2_t v18 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  int v19 = *(_DWORD *)(a2 + 28);
  long long v20 = *(_OWORD *)(a2 + 40);
  int v4 = *(_DWORD *)(a2 + 60);
  int v5 = *(_DWORD *)(a2 + 124);
  int v6 = *(_DWORD *)(a2 + 128);
  int v21 = *(_DWORD *)(a2 + 56);
  int v22 = v5;
  int v23 = v4;
  int v24 = v6;
  int v25 = *(_DWORD *)(a2 + 184);
  uint64_t v26 = *(void *)(a2 + 192);
  int v7 = *(_DWORD *)(a2 + 224);
  int v27 = *(_DWORD *)(a2 + 200);
  int v28 = v7;
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v8 = sub_1015B0008(*(void *)(a2 + 152));
  float v9 = 0.0;
  if (v8 == 4) {
    float v9 = 1.0;
  }
  float v29 = v9;
  v11[1] = &off_1023306B8;
  _DWORD v11[2] = 50;
  char v12 = 1;
  float v13 = &off_1023309D8;
  v11[0] = off_10232FAA0;
  int v14 = 1056964608;
  return sub_1015B061C((uint64_t)v11, (uint64_t)&v15);
}

void *sub_1015C12D4(uint64_t a1, const void *a2)
{
  __n128 result = memcpy((void *)(a1 + 64), a2, 0x590uLL);
  *(unsigned char *)(a1 + 1489) = 1;
  return result;
}

__n128 sub_1015C1308(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  *(unsigned char *)(a1 + 1488) = 1;
  return result;
}

__n128 sub_1015C132C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!*(unsigned char *)(a1 + 1488))
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102330D38);
    }
    long long v4 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "WorkoutEffortInputCollector, no valid body metrics detected", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_102330D38);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const CLBodyMetrics CLWorkoutEffortInputCollector::getBodyMetrics()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  __n128 result = *(__n128 *)(a1 + 44);
  *(__n128 *)(a2 + 44) = result;
  return result;
}

BOOL sub_1015C14E4(unsigned char *a1)
{
  return a1[1488] && a1[56] && a1[57] && a1[58] != 0;
}

double sub_1015C1514@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 1489)
    && *(unsigned char *)(a1 + 1488)
    && *(unsigned char *)(a1 + 56)
    && *(unsigned char *)(a1 + 57)
    && *(unsigned char *)(a1 + 58))
  {
    float32x2_t v2 = vcvt_f32_f64(*(float64x2_t *)(a1 + 1448));
    *(void *)a2 = *(void *)(a1 + 80);
    *(float32x2_t *)(a2 + 8) = v2;
    *(void *)(a2 + 16) = *(void *)(a1 + 1440);
    long long v3 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 40) = v3;
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 32);
    long long v4 = *(_OWORD *)(a1 + 44);
    *(_OWORD *)(a2 + 68) = v4;
    *(_DWORD *)(a2 + 84) = *(_DWORD *)(a1 + 424);
  }
  else
  {
    *(void *)&long long v4 = 0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(void *)a2 = 0xBFF0000000000000;
    *(void *)(a2 + 16) = 0xBFF0000000000000;
  }
  return *(double *)&v4;
}

void sub_1015C15A8(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

float sub_1015C15D8(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *(void *)(a2 + 4);
  float v3 = *(double *)(a2 + 168);
  int v4 = *(_DWORD *)(a2 + 12);
  float v20 = v3;
  int v21 = v4;
  int32x2_t v22 = vrev64_s32(*(int32x2_t *)(a2 + 20));
  int v23 = *(_DWORD *)(a2 + 28);
  long long v24 = *(_OWORD *)(a2 + 40);
  int v5 = *(_DWORD *)(a2 + 60);
  int v6 = *(_DWORD *)(a2 + 124);
  int v7 = *(_DWORD *)(a2 + 128);
  int v25 = *(_DWORD *)(a2 + 56);
  int v26 = v6;
  int v27 = v5;
  int v28 = v7;
  int v29 = *(_DWORD *)(a2 + 184);
  uint64_t v30 = *(void *)(a2 + 192);
  int v8 = *(_DWORD *)(a2 + 224);
  int v31 = *(_DWORD *)(a2 + 200);
  int v32 = v8;
  float v9 = 0.0;
  if (sub_1015B0008(*(void *)(a2 + 152)) == 15) {
    float v10 = 1.0;
  }
  else {
    float v10 = 0.0;
  }
  if (sub_1015B0008(*(void *)(a2 + 152)) == 16) {
    float v11 = 1.0;
  }
  else {
    float v11 = 0.0;
  }
  if (sub_1015B0008(*(void *)(a2 + 152)) == 24) {
    float v9 = 1.0;
  }
  char v12 = (float *)operator new(0xCuLL);
  *char v12 = v10;
  v12[1] = v11;
  _DWORD v12[2] = v9;
  uint64_t v35 = 0;
  uint64_t v37 = 0;
  uint64_t v36 = 0;
  uint64_t v33 = *(void *)v12;
  int v34 = *((_DWORD *)v12 + 2);
  v15[1] = &off_102330D58;
  v15[2] = 50;
  char v16 = 1;
  int v17 = &off_102331078;
  v15[0] = off_10232FAA0;
  int v18 = 1056964608;
  float v13 = sub_1015B061C((uint64_t)v15, (uint64_t)&v19);
  operator delete(v12);
  return v13;
}

void sub_1015C1744(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1015C1760(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a1 + 16) != 1
      || uuid_compare((const unsigned __int8 *)(a1 + 120), (const unsigned __int8 *)(a2 + 64)) != 0;
}

BOOL sub_1015C179C(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a1 + 16) != 1
      || uuid_compare((const unsigned __int8 *)(a1 + 120), (const unsigned __int8 *)(a2 + 64)) != 0;
}

BOOL sub_1015C17DC(void *a1, void *a2)
{
  return a2[14] != a1[21] || a2[15] != a1[22] || a2[16] != a1[23];
}

uint64_t sub_1015C1818(uint64_t a1, uint64_t a2)
{
  int v3 = sub_1015C1EC8(a1, (long long *)a2);

  return sub_1015C2998(v3, (unsigned __int8 *)(a2 + 64));
}

uint64_t sub_1015C1850(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 208);
  long long v22 = *(_OWORD *)(a2 + 192);
  long long v23 = v2;
  uint64_t v24 = *(void *)(a2 + 224);
  long long v3 = *(_OWORD *)(a2 + 144);
  long long v18 = *(_OWORD *)(a2 + 128);
  long long v19 = v3;
  long long v4 = *(_OWORD *)(a2 + 176);
  long long v20 = *(_OWORD *)(a2 + 160);
  long long v21 = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v14 = *(_OWORD *)(a2 + 64);
  long long v15 = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  long long v16 = *(_OWORD *)(a2 + 96);
  long long v17 = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)a2;
  long long v11 = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v12 = *(_OWORD *)(a2 + 32);
  long long v13 = v8;
  *(void *)&long long v11 = 16;
  return sub_1015C1EC8(a1, &v10);
}

uint64_t sub_1015C18F0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 208);
  long long v22 = *(_OWORD *)(a2 + 192);
  long long v23 = v2;
  uint64_t v24 = *(void *)(a2 + 224);
  long long v3 = *(_OWORD *)(a2 + 144);
  long long v18 = *(_OWORD *)(a2 + 128);
  long long v19 = v3;
  long long v4 = *(_OWORD *)(a2 + 176);
  long long v20 = *(_OWORD *)(a2 + 160);
  long long v21 = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v14 = *(_OWORD *)(a2 + 64);
  long long v15 = v5;
  long long v6 = *(_OWORD *)(a2 + 112);
  long long v16 = *(_OWORD *)(a2 + 96);
  long long v17 = v6;
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)a2;
  long long v11 = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v12 = *(_OWORD *)(a2 + 32);
  long long v13 = v8;
  *(void *)&long long v11 = 17;
  return sub_1015C1EC8(a1, &v10);
}

void sub_1015C1990(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a1 + 232);
  long long v5 = *(_OWORD *)(a1 + 264);
  long long v23 = *(_OWORD *)(a1 + 248);
  long long v24 = v5;
  uint64_t v25 = *(void *)(a1 + 280);
  long long v6 = *(_OWORD *)(a1 + 168);
  long long v7 = *(_OWORD *)(a1 + 200);
  long long v19 = *(_OWORD *)(a1 + 184);
  long long v20 = v7;
  long long v21 = *(_OWORD *)(a1 + 216);
  long long v22 = v4;
  long long v8 = *(_OWORD *)(a1 + 104);
  long long v9 = *(_OWORD *)(a1 + 136);
  long long v15 = *(_OWORD *)(a1 + 120);
  long long v16 = v9;
  long long v17 = *(_OWORD *)(a1 + 152);
  long long v18 = v6;
  long long v10 = *(_OWORD *)(a1 + 72);
  long long v11 = *(_OWORD *)(a1 + 56);
  long long v12 = v10;
  long long v13 = *(_OWORD *)(a1 + 88);
  long long v14 = v8;
  *(void *)&long long v12 = 10;
  *((void *)&v12 + 1) = v2;
  *((void *)&v11 + 1) = v3;
  sub_1015C1EC8(a1, &v11);
  sub_1015C27FC();
}

void sub_1015C1A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 8);
  long long v4 = *(_OWORD *)(a1 + 232);
  long long v5 = *(_OWORD *)(a1 + 264);
  long long v23 = *(_OWORD *)(a1 + 248);
  long long v24 = v5;
  uint64_t v25 = *(void *)(a1 + 280);
  long long v6 = *(_OWORD *)(a1 + 168);
  long long v7 = *(_OWORD *)(a1 + 200);
  long long v19 = *(_OWORD *)(a1 + 184);
  long long v20 = v7;
  long long v21 = *(_OWORD *)(a1 + 216);
  long long v22 = v4;
  long long v8 = *(_OWORD *)(a1 + 104);
  long long v9 = *(_OWORD *)(a1 + 136);
  long long v15 = *(_OWORD *)(a1 + 120);
  long long v16 = v9;
  long long v17 = *(_OWORD *)(a1 + 152);
  long long v18 = v6;
  long long v10 = *(_OWORD *)(a1 + 72);
  long long v11 = *(_OWORD *)(a1 + 56);
  long long v12 = v10;
  long long v13 = *(_OWORD *)(a1 + 88);
  long long v14 = v8;
  *(void *)&long long v12 = 1;
  *((void *)&v12 + 1) = v2;
  *((void *)&v11 + 1) = v3;
  sub_1015C1EC8(a1, &v11);
  sub_1015C27FC();
}

uint64_t sub_1015C1B38(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1023313D8;
  *(void *)(a1 + 8) = 9;
  *(_WORD *)(a1 + 16) = 512;
  sub_10090326C(a1 + 24, a2);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 273) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  return a1;
}

uint64_t sub_1015C1BC0(uint64_t result, long long *a2)
{
  switch(*((void *)a2 + 2))
  {
    case 8:
      long long v2 = a2[13];
      long long v71 = a2[12];
      long long v72 = v2;
      uint64_t v73 = *((void *)a2 + 28);
      long long v3 = a2[9];
      long long v67 = a2[8];
      long long v68 = v3;
      long long v4 = a2[11];
      long long v69 = a2[10];
      long long v70 = v4;
      long long v5 = a2[5];
      long long v63 = a2[4];
      long long v64 = v5;
      long long v6 = a2[7];
      long long v65 = a2[6];
      long long v66 = v6;
      long long v7 = a2[1];
      long long v59 = *a2;
      long long v60 = v7;
      long long v8 = a2[3];
      long long v61 = a2[2];
      long long v62 = v8;
      int v9 = 6;
      goto LABEL_10;
    case 9:
      long long v10 = a2[13];
      long long v71 = a2[12];
      long long v72 = v10;
      uint64_t v73 = *((void *)a2 + 28);
      long long v11 = a2[9];
      long long v67 = a2[8];
      long long v68 = v11;
      long long v12 = a2[11];
      long long v69 = a2[10];
      long long v70 = v12;
      long long v13 = a2[5];
      long long v63 = a2[4];
      long long v64 = v13;
      long long v14 = a2[7];
      long long v65 = a2[6];
      long long v66 = v14;
      long long v15 = a2[1];
      long long v59 = *a2;
      long long v60 = v15;
      long long v16 = a2[3];
      long long v61 = a2[2];
      long long v62 = v16;
      int v9 = 7;
      goto LABEL_10;
    case 0xALL:
      long long v17 = a2[13];
      long long v71 = a2[12];
      long long v72 = v17;
      uint64_t v73 = *((void *)a2 + 28);
      long long v18 = a2[9];
      long long v67 = a2[8];
      long long v68 = v18;
      long long v19 = a2[11];
      long long v69 = a2[10];
      long long v70 = v19;
      long long v20 = a2[5];
      long long v63 = a2[4];
      long long v64 = v20;
      long long v21 = a2[7];
      long long v65 = a2[6];
      long long v66 = v21;
      long long v22 = a2[1];
      long long v59 = *a2;
      long long v60 = v22;
      long long v23 = a2[3];
      long long v61 = a2[2];
      long long v62 = v23;
      int v9 = 8;
      goto LABEL_10;
    case 0xDLL:
      long long v24 = a2[13];
      long long v71 = a2[12];
      long long v72 = v24;
      uint64_t v73 = *((void *)a2 + 28);
      long long v25 = a2[9];
      long long v67 = a2[8];
      long long v68 = v25;
      long long v26 = a2[11];
      long long v69 = a2[10];
      long long v70 = v26;
      long long v27 = a2[5];
      long long v63 = a2[4];
      long long v64 = v27;
      long long v28 = a2[7];
      long long v65 = a2[6];
      long long v66 = v28;
      long long v29 = a2[1];
      long long v59 = *a2;
      long long v60 = v29;
      long long v30 = a2[3];
      long long v61 = a2[2];
      long long v62 = v30;
      int v9 = 1;
      goto LABEL_10;
    case 0xELL:
      long long v31 = a2[13];
      long long v71 = a2[12];
      long long v72 = v31;
      uint64_t v73 = *((void *)a2 + 28);
      long long v32 = a2[9];
      long long v67 = a2[8];
      long long v68 = v32;
      long long v33 = a2[11];
      long long v69 = a2[10];
      long long v70 = v33;
      long long v34 = a2[5];
      long long v63 = a2[4];
      long long v64 = v34;
      long long v35 = a2[7];
      long long v65 = a2[6];
      long long v66 = v35;
      long long v36 = a2[1];
      long long v59 = *a2;
      long long v60 = v36;
      long long v37 = a2[3];
      long long v61 = a2[2];
      long long v62 = v37;
      int v9 = 5;
      goto LABEL_10;
    case 0xFLL:
      long long v38 = a2[13];
      long long v71 = a2[12];
      long long v72 = v38;
      uint64_t v73 = *((void *)a2 + 28);
      long long v39 = a2[9];
      long long v67 = a2[8];
      long long v68 = v39;
      long long v40 = a2[11];
      long long v69 = a2[10];
      long long v70 = v40;
      long long v41 = a2[5];
      long long v63 = a2[4];
      long long v64 = v41;
      long long v42 = a2[7];
      long long v65 = a2[6];
      long long v66 = v42;
      long long v43 = a2[1];
      long long v59 = *a2;
      long long v60 = v43;
      long long v44 = a2[3];
      long long v61 = a2[2];
      long long v62 = v44;
      int v9 = 2;
      goto LABEL_10;
    case 0x10:
      long long v45 = a2[13];
      long long v71 = a2[12];
      long long v72 = v45;
      uint64_t v73 = *((void *)a2 + 28);
      long long v46 = a2[9];
      long long v67 = a2[8];
      long long v68 = v46;
      long long v47 = a2[11];
      long long v69 = a2[10];
      long long v70 = v47;
      long long v48 = a2[5];
      long long v63 = a2[4];
      long long v64 = v48;
      long long v49 = a2[7];
      long long v65 = a2[6];
      long long v66 = v49;
      long long v50 = a2[1];
      long long v59 = *a2;
      long long v60 = v50;
      long long v51 = a2[3];
      long long v61 = a2[2];
      long long v62 = v51;
      int v9 = 3;
      goto LABEL_10;
    case 0x11:
      long long v52 = a2[13];
      long long v71 = a2[12];
      long long v72 = v52;
      uint64_t v73 = *((void *)a2 + 28);
      long long v53 = a2[9];
      long long v67 = a2[8];
      long long v68 = v53;
      long long v54 = a2[11];
      long long v69 = a2[10];
      long long v70 = v54;
      long long v55 = a2[5];
      long long v63 = a2[4];
      long long v64 = v55;
      long long v56 = a2[7];
      long long v65 = a2[6];
      long long v66 = v56;
      long long v57 = a2[1];
      long long v59 = *a2;
      long long v60 = v57;
      long long v58 = a2[3];
      long long v61 = a2[2];
      long long v62 = v58;
      int v9 = 4;
LABEL_10:
      __n128 result = sub_1001A34E0(result, v9, (uint64_t)&v59);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1015C1EC8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  *(_OWORD *)(a1 + 88) = a2[2];
  *(_OWORD *)(a1 + 72) = v3;
  *(_OWORD *)(a1 + 56) = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 152) = a2[6];
  *(_OWORD *)(a1 + 136) = v6;
  *(_OWORD *)(a1 + 120) = v5;
  *(_OWORD *)(a1 + 104) = v4;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_OWORD *)(a1 + 216) = a2[10];
  *(_OWORD *)(a1 + 200) = v9;
  *(_OWORD *)(a1 + 184) = v8;
  *(_OWORD *)(a1 + 168) = v7;
  long long v10 = a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(void *)(a1 + 280) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 264) = v12;
  *(_OWORD *)(a1 + 248) = v11;
  *(_OWORD *)(a1 + 232) = v10;
  uint64_t v13 = *(void *)(a1 + 48);
  if (!v13) {
    sub_10015E48C();
  }
  long long v14 = *(uint64_t (**)(void))(*(void *)v13 + 48);

  return v14();
}

uint64_t sub_1015C1F7C(uint64_t a1, int a2, double a3)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314B0);
  }
  long long v6 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 168);
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v7;
    LOWORD(v17) = 1024;
    *(_DWORD *)((char *)&v17 + 2) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, #Warning, prepareSessionEnd type mismatch, trackingWorkoutType, %d, prepareSessionEndWorkoutType, %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314B0);
    }
    long long v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortWorkoutStateTracker::prepareSessionEnd(CMWorkoutType, CFAbsoluteTime)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  *(void *)std::string buf = *(void *)(a1 + 56);
  double v17 = a3;
  uint64_t v18 = 15;
  double v19 = a3;
  long long v8 = *(_OWORD *)(a1 + 232);
  long long v9 = *(_OWORD *)(a1 + 264);
  long long v30 = *(_OWORD *)(a1 + 248);
  long long v31 = v9;
  uint64_t v32 = *(void *)(a1 + 280);
  long long v10 = *(_OWORD *)(a1 + 168);
  long long v11 = *(_OWORD *)(a1 + 200);
  long long v26 = *(_OWORD *)(a1 + 184);
  long long v27 = v11;
  long long v28 = *(_OWORD *)(a1 + 216);
  long long v29 = v8;
  long long v12 = *(_OWORD *)(a1 + 104);
  long long v13 = *(_OWORD *)(a1 + 136);
  long long v22 = *(_OWORD *)(a1 + 120);
  long long v23 = v13;
  long long v24 = *(_OWORD *)(a1 + 152);
  long long v25 = v10;
  long long v20 = *(_OWORD *)(a1 + 88);
  long long v21 = v12;
  return sub_1001A34E0(a1, 2, (uint64_t)buf);
}

BOOL sub_1015C21D0(uint64_t a1, const unsigned __int8 *a2)
{
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  uint64_t v3 = *(void *)sub_1000A6958();
  uint64_t v4 = (*(uint64_t (**)(void))(v3 + 936))();
  if (!sub_1015C25A0(v4, uu) || uuid_is_null(uu)) {
    return 0;
  }
  memset(v17, 0, sizeof(v17));
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  uuid_unparse(a2, out);
  int v7 = uuid_compare(a2, uu);
  BOOL v5 = v7 == 0;
  if (v7)
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314B0);
    }
    long long v8 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      long long v13 = v17;
      __int16 v14 = 2080;
      long long v15 = out;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "CLWorkoutEffortWorkoutStateTracker, different sessionId found in cache, clearing value, cachedSessionId, %s, currentSessionId, %s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314B0);
      }
      long long v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWorkoutEffortWorkoutStateTracker::evaluateDidRecoverFromCrash(unsigned char *) const", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_1015C27FC();
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314B0);
    }
    long long v9 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315138;
      long long v13 = out;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, inferring crash recovery, saved session id found, %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314B0);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutEffortWorkoutStateTracker::evaluateDidRecoverFromCrash(unsigned char *) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return v5;
}

BOOL sub_1015C25A0(uint64_t a1, unsigned __int8 *a2)
{
  memset(&__p, 0, sizeof(__p));
  uint64_t v3 = sub_1000A6958();
  if (sub_1004D1284(v3, "WorkoutEffortSessionId", &__p))
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314B0);
    }
    uint64_t v4 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      long long v15 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, retrieving session id, %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314B0);
      }
      long long v9 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      int v12 = 136315138;
      long long v13 = v9;
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutEffortWorkoutStateTracker::getSessionIdFromCache(uuid_t &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v6 = &__p;
    }
    else {
      long long v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    BOOL v7 = uuid_parse((const char *)v6, a2) == 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_1015C27D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1015C27FC()
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314B0);
  }
  uint64_t v0 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, clearing session id from daemon cache.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314B0);
    }
    long long v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortWorkoutStateTracker::clearSessionIdInCache() const", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  uint64_t v1 = sub_1000A6958();
  sub_1004CF7DC(v1, "WorkoutEffortSessionId", 0xFFFFFFFFLL);
}

uint64_t sub_1015C2998(int a1, unsigned __int8 *uu)
{
  memset(out, 0, 37);
  uuid_unparse(uu, out);
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314B0);
  }
  long long v2 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    long long v8 = out;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutEffortWorkoutStateTracker, saving session id to daemon cache, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314B0);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortWorkoutStateTracker::saveSessionIdInCache(const uuid_t &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  uint64_t v3 = sub_1000A6958();
  sub_1004D34AC(v3, "WorkoutEffortSessionId", out);
  uint64_t v4 = *(void *)sub_1000A6958();
  return (*(uint64_t (**)(void))(v4 + 944))();
}

void sub_1015C2BA8(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t sub_1015C2BD8(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 208);
  v16[8] = *(_OWORD *)(a2 + 192);
  v16[9] = v3;
  uint64_t v17 = *(void *)(a2 + 224);
  long long v4 = *(_OWORD *)(a2 + 144);
  v16[4] = *(_OWORD *)(a2 + 128);
  v16[5] = v4;
  long long v5 = *(_OWORD *)(a2 + 176);
  void v16[6] = *(_OWORD *)(a2 + 160);
  void v16[7] = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  v16[0] = *(_OWORD *)(a2 + 64);
  v16[1] = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  _OWORD v16[2] = *(_OWORD *)(a2 + 96);
  uint64_t v16[3] = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v12 = *(_OWORD *)a2;
  long long v13 = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v14 = *(_OWORD *)(a2 + 32);
  long long v15 = v9;
  *(void *)&long long v13 = 0;
  sub_1015C1EC8(a1, &v12);
  BOOL v10 = sub_1015C21D0(a1, (const unsigned __int8 *)v16);
  *(unsigned char *)(a1 + 288) = v10;
  return sub_1015C2998(v10, (unsigned __int8 *)v16);
}

uint64_t sub_1015C2CA0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 232);
  long long v5 = *(_OWORD *)(a1 + 264);
  long long v38 = *(_OWORD *)(a1 + 248);
  long long v39 = v5;
  uint64_t v40 = *(void *)(a1 + 280);
  long long v6 = *(_OWORD *)(a1 + 168);
  long long v7 = *(_OWORD *)(a1 + 200);
  long long v34 = *(_OWORD *)(a1 + 184);
  long long v35 = v7;
  long long v36 = *(_OWORD *)(a1 + 216);
  long long v37 = v4;
  long long v8 = *(_OWORD *)(a1 + 104);
  long long v9 = *(_OWORD *)(a1 + 136);
  long long v30 = *(_OWORD *)(a1 + 120);
  long long v31 = v9;
  long long v32 = *(_OWORD *)(a1 + 152);
  long long v33 = v6;
  long long v10 = *(_OWORD *)(a1 + 72);
  long long v26 = *(_OWORD *)(a1 + 56);
  long long v27 = v10;
  long long v28 = *(_OWORD *)(a1 + 88);
  long long v29 = v8;
  *(void *)&long long v27 = 1;
  *((void *)&v27 + 1) = *(void *)(a2 + 24);
  *((void *)&v26 + 1) = *((void *)&v27 + 1);
  sub_1015C1EC8(a1, &v26);
  long long v11 = *(_OWORD *)(a2 + 208);
  v24[8] = *(_OWORD *)(a2 + 192);
  v24[9] = v11;
  uint64_t v25 = *(void *)(a2 + 224);
  long long v12 = *(_OWORD *)(a2 + 144);
  v24[4] = *(_OWORD *)(a2 + 128);
  v24[5] = v12;
  long long v13 = *(_OWORD *)(a2 + 176);
  v24[6] = *(_OWORD *)(a2 + 160);
  v24[7] = v13;
  long long v14 = *(_OWORD *)(a2 + 80);
  v24[0] = *(_OWORD *)(a2 + 64);
  v24[1] = v14;
  long long v15 = *(_OWORD *)(a2 + 112);
  v24[2] = *(_OWORD *)(a2 + 96);
  void v24[3] = v15;
  long long v16 = *(_OWORD *)(a2 + 16);
  long long v20 = *(_OWORD *)a2;
  long long v21 = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  long long v22 = *(_OWORD *)(a2 + 32);
  long long v23 = v17;
  *(void *)&long long v21 = 0;
  sub_1015C1EC8(a1, &v20);
  BOOL v18 = sub_1015C21D0(a1, (const unsigned __int8 *)v24);
  *(unsigned char *)(a1 + 288) = v18;
  return sub_1015C2998(v18, (unsigned __int8 *)v24);
}

void sub_1015C2DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2;
  long long v3 = sub_101A1F180((unsigned __int8 *)a1, "WorkoutEffortDurationThresholdForEstimateSave", &qword_101E30E20, 0);
  v10[0] = 1;
  sub_10006ACBC(v3 + 24, "ShouldWriteWorkoutEffortToHealthKit", v10, 0);
  *(unsigned char *)(a1 + 27) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_101E30E28;
  *(_OWORD *)(a1 + 48) = unk_101E30E38;
  *(_OWORD *)(a1 + 64) = xmmword_101E30E48;
  *(_OWORD *)(a1 + 76) = *(long long *)((char *)&xmmword_101E30E48 + 12);
  bzero((void *)(a1 + 96), 0x592uLL);
  *(void *)(a1 + 1528) = 0;
  *(_DWORD *)(a1 + 1536) = 4;
  *(void *)(a1 + 1544) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 1552) = _Q0;
  __asm { FMOV            V8.2S, #-1.0 }
  *(void *)(a1 + 1568) = _D8;
  *(_WORD *)(a1 + 1576) = 1;
  operator new();
}

void sub_1015C300C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  long long v14 = (std::__shared_weak_count *)v12[289];
  if (v14) {
    sub_1000DB0A0(v14);
  }
  long long v15 = (std::__shared_weak_count *)v12[287];
  if (v15) {
    sub_1000DB0A0(v15);
  }
  long long v16 = (void *)v12[270];
  if (v16)
  {
    v12[271] = (uint64_t)v16;
    operator delete(v16);
  }
  uint64_t v17 = v12[236];
  v12[236] = 0;
  if (v17) {
    operator delete();
  }
  sub_1006A79C8(v12 + 202);
  uint64_t v18 = v12[198];
  v12[198] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v12[193];
  v12[193] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  sub_101380198(v12 + 191, 0);
  _Unwind_Resume(a1);
}

void sub_1015C3140()
{
}

void sub_1015C3148()
{
}

void sub_1015C31EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  operator delete();
}

uint64_t sub_1015C322C(uint64_t result)
{
  *(unsigned char *)(result + 27) = 1;
  return result;
}

uint64_t sub_1015C3238(uint64_t result)
{
  *(unsigned char *)(result + 27) = 0;
  return result;
}

void sub_1015C3240(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 1608) == 1)
  {
    uint64_t v4 = a1 + 1904;
    uint64_t v5 = a1 + 32;
    v6.n128_f64[0] = sub_1015C1514(a1 + 32, (uint64_t)v16);
    sub_1015C7FE8((__n128 *)v4, (unint64_t *)v16, (__n128 *)v15, v6);
    uint64_t v7 = *(void *)(a1 + 1528);
    if (v7)
    {
      sub_1015C1514(v5, (uint64_t)v15);
      sub_1015CAB60(v7, (unint64_t *)v15, (uint64_t)v16);
      sub_1015C9014((int *)(a1 + 1536), (uint64_t)v16, v15);
    }
    long long v8 = *(_OWORD *)(a1 + 1568);
    *(_OWORD *)long long v16 = *(_OWORD *)(a1 + 1552);
    *(_OWORD *)&v16[16] = v8;
    if (*(unsigned char *)(a1 + 1897))
    {
      long long v9 = *(float **)(a1 + 1888);
      if (v9)
      {
        sub_1015C0C78(v9, (float *)v16, (uint64_t)v15);
        *(_OWORD *)long long v16 = *(_OWORD *)v15;
        *(_OWORD *)&_OWORD v16[10] = *(_OWORD *)&v15[10];
      }
    }
    *(double *)&v16[8] = a2;
    v16[24] = 1;
    uint64_t v10 = sub_1015C3370(a1, (uint64_t)v16);
    uint64_t v11 = *(void *)(a1 + 1528);
    if (v11)
    {
      long long v12 = *(_OWORD *)(v4 + 16);
      *(_OWORD *)long long v15 = *(_OWORD *)v4;
      *(_OWORD *)&uint8_t v15[16] = v12;
      long long v13 = *(_OWORD *)(a1 + 1568);
      v14[0] = *(_OWORD *)(a1 + 1552);
      v14[1] = v13;
      sub_1015C3CA0(v10, (uint64_t)v15, (uint64_t)v14, (uint64_t)v16, v11 + 472, 0);
    }
  }
}

uint64_t sub_1015C3370(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 1584))
  {
    double v4 = *(double *)a2;
    double v5 = *(double *)(a2 + 8);
    double v6 = v5 - *(double *)a2;
    double v7 = *(double *)(a1 + 8);
    long long v8 = (const unsigned __int8 *)(a1 + 1712);
    uint64_t v44 = *(void *)(a1 + 1872);
    if (*(unsigned char *)(a1 + 25) && *(unsigned char *)(a1 + 27))
    {
      BOOL v9 = sub_1015C14E4((unsigned char *)(a1 + 32));
      if (v44) {
        BOOL v10 = 0;
      }
      else {
        BOOL v10 = v9;
      }
      BOOL v11 = v4 <= v5 && v10;
    }
    else
    {
      BOOL v11 = 0;
    }
    if (*(unsigned char *)(a2 + 25)) {
      BOOL v12 = v6 < v7;
    }
    else {
      BOOL v12 = 1;
    }
    BOOL v16 = !v12 && *(unsigned char *)(a1 + 1880) == 0;
    if (*(unsigned char *)(a2 + 24)) {
      int v17 = 1;
    }
    else {
      int v17 = v16;
    }
    uint64_t v14 = v11 & v17;
    memset(out, 0, 37);
    memset(v45, 0, 37);
    uuid_unparse((const unsigned __int8 *)(a1 + 1728), out);
    uuid_unparse(v8, v45);
    if (*(unsigned char *)(a2 + 24))
    {
      if (!v16) {
        *(_DWORD *)(a2 + 16) = 0;
      }
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      uint64_t v18 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
      {
        BOOL v41 = v16;
        BOOL v39 = v11;
        double v19 = *(float *)(a2 + 16);
        int v20 = *(unsigned __int8 *)(a2 + 24);
        double v22 = *(double *)a2;
        uint64_t v21 = *(void *)(a2 + 8);
        if (*(unsigned char *)(a1 + 25)) {
          int v37 = *(unsigned __int8 *)(a1 + 27);
        }
        else {
          int v37 = 0;
        }
        BOOL v28 = sub_1015C14E4((unsigned char *)(a1 + 32));
        int v29 = *(unsigned __int8 *)(a2 + 25);
        int v30 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)std::string buf = 67112962;
        int v48 = v14;
        __int16 v49 = 2048;
        double v50 = v19;
        __int16 v51 = 1024;
        int v52 = v20;
        __int16 v53 = 2048;
        double v54 = v22;
        __int16 v55 = 2048;
        uint64_t v56 = v21;
        __int16 v57 = 2080;
        long long v58 = v45;
        __int16 v59 = 2080;
        long long v60 = out;
        __int16 v61 = 1024;
        BOOL v62 = v39;
        __int16 v63 = 1024;
        BOOL v64 = v41;
        __int16 v65 = 1024;
        int v66 = v37;
        __int16 v67 = 1024;
        BOOL v68 = v28;
        __int16 v69 = 1024;
        BOOL v70 = v44 == 0;
        __int16 v71 = 1024;
        BOOL v72 = v4 <= v5;
        __int16 v73 = 1024;
        int v74 = v29;
        __int16 v75 = 1024;
        BOOL v76 = v6 >= v7;
        __int16 v77 = 1024;
        int v78 = v30;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, endTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmSet, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d", buf, 0x76u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_1023314F8);
        }
        long long v43 = v8;
        unsigned int v36 = v14;
        goto LABEL_57;
      }
    }
    else
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      long long v23 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v42 = v16;
        BOOL v40 = v11;
        double v24 = *(float *)(a2 + 16);
        int v25 = *(unsigned __int8 *)(a2 + 24);
        double v27 = *(double *)a2;
        uint64_t v26 = *(void *)(a2 + 8);
        if (*(unsigned char *)(a1 + 25)) {
          int v38 = *(unsigned __int8 *)(a1 + 27);
        }
        else {
          int v38 = 0;
        }
        BOOL v31 = sub_1015C14E4((unsigned char *)(a1 + 32));
        int v32 = *(unsigned __int8 *)(a2 + 25);
        int v33 = *(unsigned __int8 *)(a1 + 1880);
        *(_DWORD *)std::string buf = 67112962;
        int v48 = v14;
        __int16 v49 = 2048;
        double v50 = v24;
        __int16 v51 = 1024;
        int v52 = v25;
        __int16 v53 = 2048;
        double v54 = v27;
        __int16 v55 = 2048;
        uint64_t v56 = v26;
        __int16 v57 = 2080;
        long long v58 = v45;
        __int16 v59 = 2080;
        long long v60 = out;
        __int16 v61 = 1024;
        BOOL v62 = v40;
        __int16 v63 = 1024;
        BOOL v64 = v42;
        __int16 v65 = 1024;
        int v66 = v38;
        __int16 v67 = 1024;
        BOOL v68 = v31;
        __int16 v69 = 1024;
        BOOL v70 = v44 == 0;
        __int16 v71 = 1024;
        BOOL v72 = v4 <= v5;
        __int16 v73 = 1024;
        int v74 = v32;
        __int16 v75 = 1024;
        BOOL v76 = v6 >= v7;
        __int16 v77 = 1024;
        int v78 = v33;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "WorkoutEffortManager, attemptWriteToHealthKit, didWrite, %d, score, %.2f, isTransient, %d, startTime, %.2f, endTime, %.2f, sessionId, %s, overviewId, %s, meetsTransientReqs, %d, meetsSaveReqs, %d, hkWriteAllowed, %d, bmSet, %d, isNormalMode, %d, isNonNegDuration, %d, isValidEstimate, %d, isSufficientDuration, %d, didRecoverFromCrash, %d", buf, 0x76u);
      }
      if (sub_10013D1A0(115, 2))
      {
        unsigned int v36 = v14;
        long long v43 = v8;
        bzero(buf, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_1023314F8);
        }
LABEL_57:
        sub_1015C14E4((unsigned char *)(a1 + 32));
        long long v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutEffortManager::attemptWriteToHealthKit(CLWorkoutEffort::Result &) const", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
        long long v8 = v43;
        uint64_t v14 = v36;
        if (!v36) {
          return v14;
        }
LABEL_53:
        (*(void (**)(void, uint64_t, const unsigned __int8 *))(**(void **)(a1 + 1584) + 16))(*(void *)(a1 + 1584), a2, v8);
        return v14;
      }
    }
    if (!v14) {
      return v14;
    }
    goto LABEL_53;
  }
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314F8);
  }
  long long v13 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "WorkoutEffortManager, attemptWriteToHealthKit, fHealthKitWriter unexpectedly nil", buf, 2u);
  }
  uint64_t v14 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    long long v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWorkoutEffortManager::attemptWriteToHealthKit(CLWorkoutEffort::Result &) const", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
    return 0;
  }
  return v14;
}

void sub_1015C3CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a6)
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    long long v8 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
    {
      sub_100134750(v82, "baseResult");
      sub_1015C57FC(a2, (uint64_t)v82);
      if (v87 >= 0) {
        BOOL v9 = v84;
      }
      else {
        BOOL v9 = *(unsigned char **)v84;
      }
      sub_100134750(v80, "xgbResult");
      BOOL v10 = v102;
      sub_1015C57FC(a3, (uint64_t)v80);
      if (v105 < 0) {
        BOOL v10 = *(unsigned char **)v102;
      }
      sub_100134750(v78, "finalBiasCorrectedResult");
      sub_1015C57FC(a4, (uint64_t)v78);
      int v11 = v101;
      BOOL v12 = *(unsigned char **)v98;
      sub_1015C5BD4();
      long long v13 = v98;
      if (v11 < 0) {
        long long v13 = v12;
      }
      if (v77 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v92 = 2080;
      long long v93 = v10;
      __int16 v94 = 2080;
      unint64_t v95 = v13;
      __int16 v96 = 2080;
      uint64_t v97 = v14;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WorkoutEffort ML features at session end, %s, %s, %s, %s", buf, 0x2Au);
      if (v77 < 0) {
        operator delete(__p[0]);
      }
      if (v101 < 0) {
        operator delete(*(void **)v98);
      }
      if (v79 < 0) {
        operator delete(v78[0]);
      }
      if (v105 < 0) {
        operator delete(*(void **)v102);
      }
      if (v81 < 0) {
        operator delete(v80[0]);
      }
      if (SHIBYTE(v87) < 0) {
        operator delete(*(void **)v84);
      }
      if (v83 < 0) {
        operator delete(v82[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      sub_100134750(v74, "baseResult");
      sub_1015C57FC(a2, (uint64_t)v74);
      if (v105 >= 0) {
        int v37 = v102;
      }
      else {
        int v37 = *(unsigned char **)v102;
      }
      sub_100134750(v72, "xgbResult");
      sub_1015C57FC(a3, (uint64_t)v72);
      if (v101 >= 0) {
        int v38 = v98;
      }
      else {
        int v38 = *(unsigned char **)v98;
      }
      sub_100134750(v70, "finalBiasCorrectedResult");
      sub_1015C57FC(a4, (uint64_t)v70);
      int v39 = v77;
      BOOL v40 = (void **)__p[0];
      sub_1015C5BD4();
      BOOL v41 = __p;
      if (v39 < 0) {
        BOOL v41 = v40;
      }
      if (v69 >= 0) {
        BOOL v42 = v68;
      }
      else {
        BOOL v42 = (void **)v68[0];
      }
      *(_DWORD *)uint64_t v84 = 136315906;
      *(void *)&v84[4] = v37;
      __int16 v85 = 2080;
      uint64_t v86 = v38;
      __int16 v87 = 2080;
      unint64_t v88 = v41;
      __int16 v89 = 2080;
      long long v90 = v42;
      long long v43 = (char *)_os_log_send_and_compose_impl();
      if (v69 < 0) {
        operator delete(v68[0]);
      }
      if (v77 < 0) {
        operator delete(__p[0]);
      }
      if (v71 < 0) {
        operator delete(v70[0]);
      }
      if (v101 < 0) {
        operator delete(*(void **)v98);
      }
      if (v73 < 0) {
        operator delete(v72[0]);
      }
      if (v105 < 0) {
        operator delete(*(void **)v102);
      }
      if (v75 < 0) {
        operator delete(v74[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const", "%s\n", v43);
      if (v43 != buf) {
        free(v43);
      }
    }
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    long long v15 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
    {
      sub_1015C5E44();
      int v16 = SHIBYTE(v94);
      int v17 = *(unsigned char **)buf;
      sub_1015C64F0();
      uint64_t v18 = buf;
      if (v16 < 0) {
        uint64_t v18 = v17;
      }
      if (v87 >= 0) {
        double v19 = v84;
      }
      else {
        double v19 = *(unsigned char **)v84;
      }
      *(_DWORD *)long long v102 = 136315394;
      *(void *)&v102[4] = v18;
      __int16 v103 = 2080;
      uint64_t v104 = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "WorkoutEffort ML features at session end, %s, %s", v102, 0x16u);
      if (SHIBYTE(v87) < 0) {
        operator delete(*(void **)v84);
      }
      if (SHIBYTE(v94) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      sub_1015C5E44();
      int v20 = SHIBYTE(v87);
      uint64_t v21 = *(unsigned char **)v84;
      sub_1015C64F0();
      double v22 = v84;
      if (v20 < 0) {
        double v22 = v21;
      }
      if (v105 >= 0) {
        long long v23 = v102;
      }
      else {
        long long v23 = *(unsigned char **)v102;
      }
      *(_DWORD *)uint64_t v98 = 136315394;
      *(void *)&v98[4] = v22;
      __int16 v99 = 2080;
      long long v100 = v23;
      double v24 = (char *)_os_log_send_and_compose_impl();
      if (v105 < 0) {
        operator delete(*(void **)v102);
      }
      if (SHIBYTE(v87) < 0) {
        operator delete(*(void **)v84);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const", "%s\n", v24);
LABEL_167:
      if (v24 != buf) {
        free(v24);
      }
    }
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    int v25 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
    {
      sub_100134750(v66, "baseResult");
      sub_1015C57FC(a2, (uint64_t)v66);
      if (v87 >= 0) {
        uint64_t v26 = v84;
      }
      else {
        uint64_t v26 = *(unsigned char **)v84;
      }
      sub_100134750(v64, "xgbResult");
      double v27 = v102;
      sub_1015C57FC(a3, (uint64_t)v64);
      if (v105 < 0) {
        double v27 = *(unsigned char **)v102;
      }
      sub_100134750(v62, "finalBiasCorrectedResult");
      sub_1015C57FC(a4, (uint64_t)v62);
      int v28 = v101;
      int v29 = *(unsigned char **)v98;
      sub_1015C5BD4();
      int v30 = v98;
      if (v28 < 0) {
        int v30 = v29;
      }
      if (v77 >= 0) {
        BOOL v31 = __p;
      }
      else {
        BOOL v31 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = v26;
      __int16 v92 = 2080;
      long long v93 = v27;
      __int16 v94 = 2080;
      unint64_t v95 = v30;
      __int16 v96 = 2080;
      uint64_t v97 = v31;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "WorkoutEffort ML features update, %s, %s, %s, %s", buf, 0x2Au);
      if (v77 < 0) {
        operator delete(__p[0]);
      }
      if (v101 < 0) {
        operator delete(*(void **)v98);
      }
      if (v63 < 0) {
        operator delete(v62[0]);
      }
      if (v105 < 0) {
        operator delete(*(void **)v102);
      }
      if (v65 < 0) {
        operator delete(v64[0]);
      }
      if (SHIBYTE(v87) < 0) {
        operator delete(*(void **)v84);
      }
      if (v67 < 0) {
        operator delete(v66[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      sub_100134750(v60, "baseResult");
      sub_1015C57FC(a2, (uint64_t)v60);
      if (v105 >= 0) {
        uint64_t v44 = v102;
      }
      else {
        uint64_t v44 = *(unsigned char **)v102;
      }
      sub_100134750(v58, "xgbResult");
      sub_1015C57FC(a3, (uint64_t)v58);
      if (v101 >= 0) {
        long long v45 = v98;
      }
      else {
        long long v45 = *(unsigned char **)v98;
      }
      sub_100134750(v56, "finalBiasCorrectedResult");
      sub_1015C57FC(a4, (uint64_t)v56);
      int v46 = v77;
      long long v47 = (void **)__p[0];
      sub_1015C5BD4();
      int v48 = __p;
      if (v46 < 0) {
        int v48 = v47;
      }
      if (v69 >= 0) {
        __int16 v49 = v68;
      }
      else {
        __int16 v49 = (void **)v68[0];
      }
      *(_DWORD *)uint64_t v84 = 136315906;
      *(void *)&v84[4] = v44;
      __int16 v85 = 2080;
      uint64_t v86 = v45;
      __int16 v87 = 2080;
      unint64_t v88 = v48;
      __int16 v89 = 2080;
      long long v90 = v49;
      double v50 = (char *)_os_log_send_and_compose_impl();
      if (v69 < 0) {
        operator delete(v68[0]);
      }
      if (v77 < 0) {
        operator delete(__p[0]);
      }
      if (v57 < 0) {
        operator delete(v56[0]);
      }
      if (v101 < 0) {
        operator delete(*(void **)v98);
      }
      if (v59 < 0) {
        operator delete(v58[0]);
      }
      if (v105 < 0) {
        operator delete(*(void **)v102);
      }
      if (v61 < 0) {
        operator delete(v60[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const", "%s\n", v50);
      if (v50 != buf) {
        free(v50);
      }
    }
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    int v32 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
    {
      sub_1015C5E44();
      int v33 = SHIBYTE(v94);
      long long v34 = *(unsigned char **)buf;
      sub_1015C64F0();
      long long v35 = buf;
      if (v33 < 0) {
        long long v35 = v34;
      }
      if (v87 >= 0) {
        unsigned int v36 = v84;
      }
      else {
        unsigned int v36 = *(unsigned char **)v84;
      }
      *(_DWORD *)long long v102 = 136315394;
      *(void *)&v102[4] = v35;
      __int16 v103 = 2080;
      uint64_t v104 = v36;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "WorkoutEffort ML features update, %s, %s", v102, 0x16u);
      if (SHIBYTE(v87) < 0) {
        operator delete(*(void **)v84);
      }
      if (SHIBYTE(v94) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      sub_1015C5E44();
      int v51 = SHIBYTE(v87);
      int v52 = *(unsigned char **)v84;
      sub_1015C64F0();
      __int16 v53 = v84;
      if (v51 < 0) {
        __int16 v53 = v52;
      }
      if (v105 >= 0) {
        double v54 = v102;
      }
      else {
        double v54 = *(unsigned char **)v102;
      }
      *(_DWORD *)uint64_t v98 = 136315394;
      *(void *)&v98[4] = v53;
      __int16 v99 = 2080;
      long long v100 = v54;
      double v24 = (char *)_os_log_send_and_compose_impl();
      if (v105 < 0) {
        operator delete(*(void **)v102);
      }
      if (SHIBYTE(v87) < 0) {
        operator delete(*(void **)v84);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::logFeaturesAndResults(const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::Result &, const CLWorkoutEffort::MLFeatures &, BOOL) const", "%s\n", v24);
      goto LABEL_167;
    }
  }
}

void sub_1015C4954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (*(char *)(v57 - 137) < 0) {
    operator delete(*(void **)(v57 - 160));
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v57 - 105) < 0) {
    operator delete(*(void **)(v57 - 128));
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(a1);
}

void sub_1015C4BC4(uint64_t a1, double *a2)
{
  sub_1015C12D4(a1 + 32, a2);
  double v4 = a2[2];

  sub_1015C3240(a1, v4);
}

double sub_1015C4C08(uint64_t a1, uint64_t a2)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314F8);
  }
  double v4 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Feeding Body metrics, estimating HR max,min and vo2Max", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(void *)&double result = sub_1015C1308(a1 + 32, a2).n128_u64[0];
  return result;
}

uint64_t sub_1015C4DAC(uint64_t a1, long long *a2)
{
  return sub_1015C1BC0(a1 + 1592, a2);
}

void sub_1015C4DB4(uint64_t a1, uint64_t a2)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314F8);
  }
  double v4 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)a2;
    double v6 = *(double *)(a2 + 8);
    if (v6 == 1.79769313e308) {
      double v6 = -1.0;
    }
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    uint64_t v9 = *(void *)(a2 + 112);
    uint64_t v10 = *(void *)(a2 + 120);
    uint64_t v11 = *(void *)(a2 + 128);
    *(_DWORD *)std::string buf = 134219520;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v5;
    __int16 v21 = 2048;
    double v22 = v6;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 1024;
    int v26 = v9;
    __int16 v27 = 1024;
    int v28 = v10;
    __int16 v29 = 1024;
    int v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WorkoutEffortManager, respondToWorkoutEvent, eventTime, %f, startTime, %f, endTime, %f, eventType, %d, workoutType, %d, locationType, %d, genericWorkoutLabel ,%d", buf, 0x38u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::respondToWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  uint64_t v12 = *(void *)(a2 + 16);
  switch(v12)
  {
    case 9:
      uint64_t v13 = *(void *)(a1 + 1528);
      if (v13) {
        sub_1015CA420(v13, (uint64_t *)a2);
      }
      break;
    case 10:
      sub_1015C572C(a1, *(double *)(a2 + 24));
      break;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return;
    case 16:
      uint64_t v14 = *(double **)(a1 + 1528);
      if (v14) {
        sub_1015CA428(v14, *(double *)(a2 + 24));
      }
      break;
    case 17:
      long long v15 = *(double **)(a1 + 1528);
      if (v15) {
        sub_1015CA444(v15, *(double *)(a2 + 24));
      }
      break;
    default:
      if (v12 == 1)
      {
        sub_1015C546C(a1, *(double *)(a2 + 8));
      }
      else if (!v12)
      {
        sub_1015C50F4(a1, *(double *)a2);
      }
      return;
  }
}

void sub_1015C50F4(uint64_t a1, double a2)
{
  sub_1015C9460(a1 + 1536, a2);
  sub_1015C132C(a1 + 32, (uint64_t)&__p);
  operator new();
}

void sub_1015C5424()
{
}

void sub_1015C546C(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 1528);
  if (v4) {
    sub_1015C9014((int *)(a1 + 1536), v4 + 472, buf);
  }
  long long v5 = *(_OWORD *)(a1 + 1568);
  *(_OWORD *)int v16 = *(_OWORD *)(a1 + 1552);
  *(_OWORD *)&v16[16] = v5;
  if (*(unsigned char *)(a1 + 1897))
  {
    double v6 = *(float **)(a1 + 1888);
    if (v6)
    {
      sub_1015C0C78(v6, (float *)v16, (uint64_t)buf);
      *(_OWORD *)int v16 = *(_OWORD *)buf;
      *(_OWORD *)&_OWORD v16[10] = *(_OWORD *)&buf[10];
    }
  }
  *(double *)&v16[8] = a2;
  v16[24] = 0;
  uint64_t v7 = sub_1015C3370(a1, (uint64_t)v16);
  if (*(void *)(a1 + 2152))
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    uint64_t v8 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortManager, onWorkoutStop, sending score to clients", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      LOWORD(v15[0]) = 0;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::onWorkoutStop(CFAbsoluteTime)", "%s\n", v14);
      if (v14 != buf) {
        free(v14);
      }
    }
    uint64_t v7 = (*(uint64_t (**)(void, unsigned char *))(**(void **)(a1 + 2152) + 16))(*(void *)(a1 + 2152), v16);
  }
  uint64_t v9 = (_OWORD *)(a1 + 1552);
  uint64_t v10 = *(void *)(a1 + 1528);
  if (v10)
  {
    long long v11 = *(_OWORD *)(a1 + 1920);
    *(_OWORD *)std::string buf = *(_OWORD *)(a1 + 1904);
    *(_OWORD *)&uint8_t buf[16] = v11;
    long long v12 = *(_OWORD *)(a1 + 1568);
    v15[0] = *v9;
    v15[1] = v12;
    sub_1015C3CA0(v7, (uint64_t)buf, (uint64_t)v15, (uint64_t)v16, v10 + 472, 1);
    if (!*(unsigned char *)(a1 + 1897)) {
      goto LABEL_18;
    }
    sub_1015C6DF4(a1, *(void *)(a1 + 1528) + 472);
  }
  if (*(unsigned char *)(a1 + 1897))
  {
    long long v13 = *(_OWORD *)(a1 + 1568);
    *(_OWORD *)std::string buf = *v9;
    *(_OWORD *)&uint8_t buf[16] = v13;
    sub_1015C6FB4(a1, (uint64_t)buf);
    sub_1015C71B8(a1);
    sub_1015C7358((void *)a1);
  }
LABEL_18:
  sub_1015C572C(a1, a2);
}

double sub_1015C572C(uint64_t a1, double a2)
{
  sub_101380198((uint64_t *)(a1 + 1528), 0);
  sub_1015C9460(a1 + 1536, a2);
  sub_1015C84F0(a1 + 1904, a2);
  uint64_t v4 = *(void *)(a1 + 1888);
  *(void *)(a1 + 1888) = 0;
  if (v4) {
    operator delete();
  }
  *(void *)(a1 + 2216) = 0;
  *(_OWORD *)(a1 + 2184) = 0u;
  *(_OWORD *)(a1 + 2200) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 2224) = _Q0;
  *(_OWORD *)(a1 + 2240) = xmmword_101E17C20;
  *(void *)(a1 + 2256) = 2;
  *(void *)(a1 + 2264) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 2272) = result;
  *(_DWORD *)(a1 + 2280) = -1082130432;
  return result;
}

uint64_t sub_1015C57DC(uint64_t a1, int a2, double a3)
{
  return 1;
}

uint64_t sub_1015C57FC(uint64_t a1, uint64_t a2)
{
  sub_10048B72C((uint64_t)v39);
  uint64_t v3 = v39[0];
  *(_DWORD *)((char *)&v39[1] + *(void *)(v39[0] - 24)) = *(_DWORD *)((unsigned char *)&v39[1] + *(void *)(v39[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v39[2] + *(void *)(v3 - 24)) = 2;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a2 + 23)) {
      goto LABEL_3;
    }
LABEL_6:
    sub_100134750(&v37, "");
    goto LABEL_8;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v4 = std::string::append((std::string *)a2, "_");
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1000DC48C(&v37, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    std::string::size_type v38 = v4->__r_.__value_.__r.__words[2];
    long long v37 = v5;
  }
LABEL_8:
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v37;
  unint64_t v6 = v38;
  *(void *)(a2 + 16) = v38;
  uint64_t v7 = HIBYTE(v6);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = *(void *)a2;
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  uint64_t v10 = sub_100132EFC(v39, v8, v9);
  sub_100132EFC(v10, (uint64_t)"isValid, ", 9);
  long long v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)", ", 2);
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = *(void *)a2;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  long long v15 = sub_100132EFC(v39, v13, v14);
  sub_100132EFC(v15, (uint64_t)"startTime, ", 11);
  int v16 = (void *)std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)", ", 2);
  int v17 = *(char *)(a2 + 23);
  if (v17 >= 0) {
    uint64_t v18 = a2;
  }
  else {
    uint64_t v18 = *(void *)a2;
  }
  if (v17 >= 0) {
    uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v19 = *(void *)(a2 + 8);
  }
  uint64_t v20 = sub_100132EFC(v39, v18, v19);
  sub_100132EFC(v20, (uint64_t)"endTime, ", 9);
  __int16 v21 = (void *)std::ostream::operator<<();
  sub_100132EFC(v21, (uint64_t)", ", 2);
  int v22 = *(char *)(a2 + 23);
  if (v22 >= 0) {
    uint64_t v23 = a2;
  }
  else {
    uint64_t v23 = *(void *)a2;
  }
  if (v22 >= 0) {
    uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v24 = *(void *)(a2 + 8);
  }
  __int16 v25 = sub_100132EFC(v39, v23, v24);
  sub_100132EFC(v25, (uint64_t)"score, ", 7);
  int v26 = (void *)std::ostream::operator<<();
  sub_100132EFC(v26, (uint64_t)", ", 2);
  int v27 = *(char *)(a2 + 23);
  if (v27 >= 0) {
    uint64_t v28 = a2;
  }
  else {
    uint64_t v28 = *(void *)a2;
  }
  if (v27 >= 0) {
    uint64_t v29 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v29 = *(void *)(a2 + 8);
  }
  int v30 = sub_100132EFC(v39, v28, v29);
  sub_100132EFC(v30, (uint64_t)"scorePreBiasCorrection, ", 24);
  BOOL v31 = (void *)std::ostream::operator<<();
  sub_100132EFC(v31, (uint64_t)", ", 2);
  int v32 = *(char *)(a2 + 23);
  if (v32 >= 0) {
    uint64_t v33 = a2;
  }
  else {
    uint64_t v33 = *(void *)a2;
  }
  if (v32 >= 0) {
    uint64_t v34 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v34 = *(void *)(a2 + 8);
  }
  long long v35 = sub_100132EFC(v39, v33, v34);
  sub_100132EFC(v35, (uint64_t)"isTransient, ", 13);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v40 < 0) {
    operator delete((void *)v39[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1015C5BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C5BD4()
{
  sub_10048B72C((uint64_t)v6);
  uint64_t v0 = v6[0];
  *(_DWORD *)((char *)&v6[1] + *(void *)(v6[0] - 24)) = *(_DWORD *)((unsigned char *)&v6[1] + *(void *)(v6[0] - 24)) & 0xFFFFFEFB | 4;
  *(void *)((char *)&v6[2] + *(void *)(v0 - 24)) = 2;
  sub_100132EFC(v6, (uint64_t)"startTime, ", 11);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", ", 2);
  sub_100132EFC(v6, (uint64_t)"endTime, ", 9);
  long long v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", ", 2);
  sub_100132EFC(v6, (uint64_t)"workoutType, ", 13);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", ", 2);
  sub_100132EFC(v6, (uint64_t)"sessionDurationActiveMinutes, ", 30);
  uint64_t v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)", ", 2);
  sub_100132EFC(v6, (uint64_t)"sessionDurationTotalMinutes, ", 29);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1015C5E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C5E44()
{
  sub_10048B72C((uint64_t)v31);
  *(_DWORD *)((char *)&v31[1] + *(void *)(v31[0] - 24)) = *(_DWORD *)((unsigned char *)&v31[1] + *(void *)(v31[0] - 24)) & 0xFFFFFEFB | 4;
  sub_100132EFC(v31, (uint64_t)"hrByHrMaxMax, ", 14);
  uint64_t v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrByHrMaxMin, ", 14);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrByHrMaxStd, ", 14);
  long long v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrByHrMaxAvg, ", 14);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrByHrMaxRange, ", 16);
  uint64_t v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"fractionSessionWithHrAvailable, ", 32);
  long long v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"observedHrMax, ", 15);
  unint64_t v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove83Time, ", 15);
  char v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove90Time, ", 15);
  uint64_t v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove93Time, ", 15);
  uint64_t v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove93o5Time, ", 17);
  uint64_t v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove94Time, ", 15);
  long long v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove94o5Time, ", 17);
  int v12 = (void *)std::ostream::operator<<();
  sub_100132EFC(v12, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove95Time, ", 15);
  uint64_t v13 = (void *)std::ostream::operator<<();
  sub_100132EFC(v13, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove95o5Time, ", 17);
  uint64_t v14 = (void *)std::ostream::operator<<();
  sub_100132EFC(v14, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove96Time, ", 15);
  long long v15 = (void *)std::ostream::operator<<();
  sub_100132EFC(v15, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove97Time, ", 15);
  int v16 = (void *)std::ostream::operator<<();
  sub_100132EFC(v16, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove98Time, ", 15);
  int v17 = (void *)std::ostream::operator<<();
  sub_100132EFC(v17, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove99Time, ", 15);
  uint64_t v18 = (void *)std::ostream::operator<<();
  sub_100132EFC(v18, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove100Time, ", 16);
  uint64_t v19 = (void *)std::ostream::operator<<();
  sub_100132EFC(v19, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove101Time, ", 16);
  uint64_t v20 = (void *)std::ostream::operator<<();
  sub_100132EFC(v20, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove102Time, ", 16);
  __int16 v21 = (void *)std::ostream::operator<<();
  sub_100132EFC(v21, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove103Time, ", 16);
  int v22 = (void *)std::ostream::operator<<();
  sub_100132EFC(v22, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove104Time, ", 16);
  uint64_t v23 = (void *)std::ostream::operator<<();
  sub_100132EFC(v23, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove83Ratio, ", 16);
  uint64_t v24 = (void *)std::ostream::operator<<();
  sub_100132EFC(v24, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove90Ratio, ", 16);
  __int16 v25 = (void *)std::ostream::operator<<();
  sub_100132EFC(v25, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"hrAbove93Ratio, ", 16);
  int v26 = (void *)std::ostream::operator<<();
  sub_100132EFC(v26, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"activityWalkingRatio, ", 22);
  int v27 = (void *)std::ostream::operator<<();
  sub_100132EFC(v27, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"activityRunningRatio, ", 22);
  uint64_t v28 = (void *)std::ostream::operator<<();
  sub_100132EFC(v28, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"activityCyclingRatio, ", 22);
  uint64_t v29 = (void *)std::ostream::operator<<();
  sub_100132EFC(v29, (uint64_t)", ", 2);
  sub_100132EFC(v31, (uint64_t)"activityOtherRatio, ", 20);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v32 < 0) {
    operator delete((void *)v31[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1015C64DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C64F0()
{
  sub_10048B72C((uint64_t)v5);
  *(_DWORD *)((char *)&v5[1] + *(void *)(v5[0] - 24)) = *(_DWORD *)((unsigned char *)&v5[1] + *(void *)(v5[0] - 24)) & 0xFFFFFEFB | 4;
  sub_100132EFC(v5, (uint64_t)"estimatedEffortBLHRMax, ", 24);
  uint64_t v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", ", 2);
  sub_100132EFC(v5, (uint64_t)"estimatedEffortBLHRMin, ", 24);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", ", 2);
  sub_100132EFC(v5, (uint64_t)"estimatedEffortBLHRAvg, ", 24);
  long long v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", ", 2);
  sub_100132EFC(v5, (uint64_t)"estimatedEffortBLHRStd, ", 24);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", ", 2);
  std::stringbuf::str();
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1015C66F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1015C6708()
{
  sub_10048B72C((uint64_t)v2);
  *(_DWORD *)((char *)&v2[1] + *(void *)(v2[0] - 24)) = *(_DWORD *)((unsigned char *)&v2[1] + *(void *)(v2[0] - 24)) & 0xFFFFFEFB | 4;
  sub_100132EFC(v2, (uint64_t)"vo2Max, ", 8);
  uint64_t v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", ", 2);
  sub_100132EFC(v2, (uint64_t)"hrMax, ", 7);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (v3 < 0) {
    operator delete((void *)v2[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1015C68A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10048B8C4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1015C68B8(uint64_t a1)
{
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  uint64_t v2 = *(void *)(a1 + 2160);
  if (v2 != *(void *)(a1 + 2168)) {
    *(void *)(a1 + 2168) = v2;
  }
  int v3 = sub_1015B9F6C(*(unsigned char **)(a1 + 2304), 0x1Eu, (uint64_t)__p, (char **)(a1 + 2160));
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314F8);
  }
  uint64_t v4 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 2168) - *(void *)(a1 + 2160)) >> 3);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got %zu historical records from db", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    uint64_t v7 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*(void *)(a1 + 2168) - *(void *)(a1 + 2160)) >> 3);
    int v12 = 134217984;
    uint64_t v13 = v7;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::prepareHistoricalSessionData()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (v3 != 100)
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    char v6 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v15) = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Reteriving historical session from db failed with error : %u", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      int v12 = 67109120;
      LODWORD(v13) = v3;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutEffortManager::prepareHistoricalSessionData()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  if (__p[1])
  {
    *(void **)&long long v11 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_1015C6C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1015C6C5C(void *result)
{
  if (result[286])
  {
    uint64_t v1 = result;
    uint64_t v2 = result[270];
    if (result[271] != v2)
    {
      unint64_t v3 = 0;
      uint64_t v4 = 8;
      do
      {
        memset(out, 0, 37);
        uuid_unparse((const unsigned __int8 *)(v2 + v4), out);
        [objc_alloc((Class)NSUUID) initWithUUIDString:+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", out, 4)];
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v1[286] + 16))(v1[286]);
        ++v3;
        uint64_t v2 = v1[270];
        v4 += 104;
      }
      while (0x4EC4EC4EC4EC4EC5 * ((v1[271] - v2) >> 3) > v3);
    }
  }
  return result;
}

void sub_1015C6DF4(uint64_t a1, uint64_t a2)
{
  *(double *)(a1 + 2264) = *(float *)(a2 + 36);
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314F8);
  }
  unint64_t v3 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = *(void *)(a1 + 2264);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "WorkoutEffortManager, updating session summary with ML features, hrMax, %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::updateSessionMLFeatures(const CLWorkoutEffort::MLFeatures &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1015C6FB4(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 2272) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 2224) = *(_OWORD *)a2;
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314F8);
  }
  unint64_t v3 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    double v4 = *(float *)(a1 + 2272);
    uint64_t v5 = *(void *)(a1 + 2224);
    uint64_t v6 = *(void *)(a1 + 2232);
    *(_DWORD *)std::string buf = 134218496;
    double v9 = v4;
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "updateSessionEstimatedEffort %f, %f, %f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::updateSessionEstimatedEffort(const CLWorkoutEffort::Result &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_1015C71B8(uint64_t a1)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314F8);
  }
  uint64_t v2 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Inserting current session info in DB", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    unint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::writeCurrentSessionToDb()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1015B8F90(*(void *)(a1 + 2304), a1 + 2184);
}

void sub_1015C7358(void *a1)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023314F8);
  }
  uint64_t v2 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Updating user response in db", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    LOWORD(v16[0]) = 0;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::updateUserResponseInDb()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  unint64_t v3 = (_OWORD *)a1[270];
  for (i = (_OWORD *)a1[271]; v3 != i; unint64_t v3 = (_OWORD *)((char *)v3 + 104))
  {
    long long v5 = *v3;
    long long v6 = v3[2];
    v16[1] = v3[1];
    _OWORD v16[2] = v6;
    v16[0] = v5;
    long long v7 = v3[3];
    long long v8 = v3[4];
    long long v9 = v3[5];
    uint64_t v17 = *((void *)v3 + 12);
    v16[4] = v8;
    v16[5] = v9;
    uint64_t v16[3] = v7;
    uint64_t v10 = a1[288];
    memmove(__dst, v3, 0x68uLL);
    if ((sub_1015BD490(v10, (uint64_t)__dst) & 1) == 0)
    {
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)v16 + 8, out);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      uint64_t v11 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v19 = out;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to update user response for session %s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_1023314F8);
        }
        __int16 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutEffortManager::updateUserResponseInDb()", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
  }
}

void sub_1015C76D8(uint64_t a1, int a2, double a3, double a4, double a5)
{
  if (a2 == 100)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    long long v8 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "WorkoutEffortManager, Got healthkit user response callback for workout", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::queryHealthKitForUserResponse()_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    float v9 = a5;
    *(float *)(*(void *)(v7 + 2160) + 104 * *(int *)(a1 + 48) + 96) = v9;
  }
  else
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023314F8);
    }
    uint64_t v11 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 138412546;
      uint64_t v16 = v12;
      __int16 v17 = 1024;
      int v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WorkoutEffortManager, Failed HKQuery for workout %@, with error %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023314F8);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortManager::queryHealthKitForUserResponse()_block_invoke", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_1015C7A04(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

void *sub_1015C7A34@<X0>(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x1F8uLL);
  double result = sub_1015C7A90(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1015C7A7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1015C7A90(void *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102331528;
  sub_1015B8414(a1 + 3, *a2, 0);
  return a1;
}

void sub_1015C7AE0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1015C7AF4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102331528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1015C7B14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102331528;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1015C7B68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 16))();
}

void sub_1015C7B94()
{
}

void *sub_1015C7BA8(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102331578;
  result[1] = v3;
  return result;
}

uint64_t sub_1015C7BF0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102331578;
  a2[1] = v2;
  return result;
}

void sub_1015C7C1C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1015C7C24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1015C7C64()
{
}

void *sub_1015C7C70@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x28uLL);
  double result = sub_1015C7CCC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1015C7CB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1015C7CCC(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1023315F8;
  sub_1015CACB4(a1 + 3, *a2);
  return a1;
}

void sub_1015C7D18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1015C7D2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023315F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1015C7D4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023315F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1015C7DA0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_1015C7DC8@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  double v4 = operator new(0x58uLL);
  double result = sub_1015C7E24(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1015C7E10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1015C7E24(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102331648;
  sub_1015B098C(a1 + 3, *a2);
  return a1;
}

void sub_1015C7E70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1015C7E84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102331648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1015C7EA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102331648;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1015C7EF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t sub_1015C7F20(uint64_t a1, uint64_t a2)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  __asm { FMOV            V1.2S, #-1.0 }
  *(void *)(a1 + 16) = _D1;
  *(_WORD *)(a1 + 24) = 1;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(void *)(a1 + 32) = off_102331760;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 88) = _Q0;
  *(void *)(a1 + 80) = off_1023317B8;
  sub_1015C9904(a1 + 128, 1, 1, 0.1, 1.2, 0.7);
  *(void *)(a1 + 240) = a2;
  return a1;
}

void sub_1015C7FE8(__n128 *a1@<X0>, unint64_t *a2@<X1>, __n128 *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7 = (uint64_t)&a1[2];
  sub_1015C9698((uint64_t)&a1[2], a2, a4);
  __n128 v8 = v29;
  v8.n128_f32[0] = v30;
  if (v30 > 10.0) {
    v8.n128_f32[0] = 10.0;
  }
  if (v8.n128_f32[0] >= 1.0) {
    float v9 = v8.n128_f32[0];
  }
  else {
    float v9 = 1.0;
  }
  sub_1015C9698((uint64_t)&a1[5], a2, v8);
  a1[9].n128_u32[2] = v28;
  sub_1015C9960((uint64_t)&a1[8], (float *)a2);
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_102331688);
  }
  uint64_t v10 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v11 = *a2;
    sub_1015C9820(v7, (uint64_t)a2);
    double v13 = v12;
    float v14 = sub_1015C98B8((uint64_t)&a1[5], (uint64_t)a2);
    double v15 = a1[11].n128_f32[0];
    double v16 = a1[11].n128_f32[1];
    *(_DWORD *)std::string buf = 134219264;
    unint64_t v34 = v11;
    __int16 v35 = 2048;
    *(double *)unsigned int v36 = v13;
    *(_WORD *)&v36[8] = 2048;
    *(double *)&v36[10] = v14;
    *(_WORD *)&v36[18] = 2048;
    *(double *)&v36[20] = v27;
    *(_WORD *)&v36[28] = 2048;
    *(double *)&v36[30] = v15;
    *(_WORD *)&v36[38] = 2048;
    double v37 = v16;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "WorkoutEffortEstimator update model details, startTime, %f, estimateScoreBloodLactateHR, %f, estimateScoreBaseHR, %f, estimateScoreACDepletionHR, %f, amountDepletedHR, %f, acDepletionRegressionFloorHR, %f", buf, 0x3Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102331688);
    }
    sub_1015C9820(v7, (uint64_t)a2);
    sub_1015C98B8((uint64_t)&a1[5], (uint64_t)a2);
    __int16 v25 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortBasePhysiogicalEstimator::update(const CLWorkoutEffort::Input &)", "%s\n", v25);
    if (v25 != (char *)buf) {
      free(v25);
    }
  }
  *a1 = v29;
  a1[1].n128_f32[0] = v9;
  a1[1].n128_u32[1] = v31;
  a1[1].n128_u16[4] = v32;
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_102331688);
  }
  __int16 v17 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
  {
    unint64_t v18 = *a2;
    int v19 = a1[1].n128_u8[9];
    unint64_t v20 = a1->n128_u64[0];
    uint64_t v21 = a1->n128_i64[1];
    double v22 = a1[1].n128_f32[0];
    uint64_t v23 = *(void *)(a1[15].n128_u64[0] + 168);
    *(_DWORD *)std::string buf = 134219264;
    unint64_t v34 = v18;
    __int16 v35 = 1024;
    *(_DWORD *)unsigned int v36 = v19;
    *(_WORD *)&v36[4] = 2048;
    *(void *)&v36[6] = v20;
    *(_WORD *)&v36[14] = 2048;
    *(void *)&v36[16] = v21;
    *(_WORD *)&v36[24] = 2048;
    *(double *)&v36[26] = v22;
    *(_WORD *)&v36[34] = 1024;
    *(_DWORD *)&v36[36] = v23;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "WorkoutEffortEstimatorBase update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workoutType, %d", buf, 0x36u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102331688);
    }
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortBasePhysiogicalEstimator::update(const CLWorkoutEffort::Input &)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  __n128 v24 = a1[1];
  *a3 = *a1;
  a3[1] = v24;
}

void sub_1015C84F0(uint64_t a1, double a2)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_102331688);
  }
  double v4 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WorkoutEffortEstimator reset, startTime, %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102331688);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortBasePhysiogicalEstimator::reset(CFAbsoluteTime)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1015C9810(a1 + 32, a2);
  sub_1015C9810(a1 + 80, a2);
  sub_1015C9E40(a1 + 128, a2);
}

void sub_1015C86CC(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

std::string *sub_1015C86FC@<X0>(unsigned int a1@<W0>, std::string *a2@<X8>)
{
  double result = (std::string *)sub_100134750(a2, "");
  if (a1 < 5) {
    return std::string::assign(a2, off_1023316C8[a1]);
  }
  return result;
}

void sub_1015C874C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_1015C8768(_DWORD *result, uint64_t a2)
{
  if (a2 > 16)
  {
    if (a2 != 24)
    {
      if (a2 == 17)
      {
        unsigned int v2 = 2;
        goto LABEL_10;
      }
      goto LABEL_9;
    }
LABEL_8:
    unsigned int v2 = 1;
    goto LABEL_10;
  }
  if ((unint64_t)(a2 - 15) < 2) {
    goto LABEL_8;
  }
  if (a2 == 4)
  {
    unsigned int v2 = 3;
    goto LABEL_10;
  }
LABEL_9:
  unsigned int v2 = 0;
LABEL_10:
  if (v2 != *result)
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023316A8);
    }
    uint64_t v3 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
    {
      sub_1015C86FC(v2, __p);
      double v4 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? __p
         : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLWorkoutEffortEstimator, selecting %s model", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023316A8);
      }
      sub_1015C86FC(v2, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v8 = 136315138;
      float v9 = p_buf;
      long long v6 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortEstimator::updateModelType(const CMWorkoutType)", "%s\n", (const char *)v6);
      if (v6 != __p) {
        free(v6);
      }
    }
    switch(v2)
    {
      case 1u:
        operator new();
      case 2u:
        operator new();
      case 3u:
        operator new();
      default:
        operator new();
    }
  }
  return result;
}

float sub_1015C8B20(uint64_t a1, float a2, double a3, double a4, int32x4_t a5)
{
  float v5 = a2;
  a5.i64[0] = *(void *)(a1 + 64);
  v6.i32[0] = *(_DWORD *)(a1 + 56);
  v6.i32[1] = *(_DWORD *)(a1 + 52);
  int8x16_t v7 = *(int8x16_t *)(a1 + 72);
  v6.i32[2] = *(_DWORD *)(a1 + 60);
  v6.i32[3] = a5.i32[0];
  float32x4_t v8 = *(float32x4_t *)(a1 + 88);
  if (((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_f32(v6, (float32x4_t)xmmword_101E31070), (int16x8_t)vcgeq_f32((float32x4_t)vextq_s8((int8x16_t)vzip1q_s32((int32x4_t)v7, a5), v7, 0xCuLL), (float32x4_t)xmmword_101E31060)))) & 1) != 0|| (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgeq_f32(v8, (float32x4_t)xmmword_101E31080), (int8x16_t)xmmword_101E31090)) & 0xF) != 0|| (*(float *)&v7.i32[3] < 1655.0 ? (BOOL v9 = *(float *)(a1 + 104) < 720.0) : (BOOL v9 = 0), !v9 || *(float *)(a1 + 108) >= 600.0))&& *(float *)(a1 + 120) >= 0.25)
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023316A8);
    }
    uint64_t v10 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortEstimator, overriding ML output based on higher rule set", buf, 2u);
    }
    float v5 = 9.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 == -1)
      {
LABEL_37:
        double v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static float CLWorkoutEffortEstimator::overrideEstimateWithRules(const CLWorkoutEffort::CalorieFeatures &, float)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
        return v5;
      }
LABEL_43:
      dispatch_once(&qword_102419330, &stru_1023316A8);
      goto LABEL_37;
    }
  }
  else
  {
    v11.i32[1] = *(_DWORD *)(a1 + 60);
    v11.i64[1] = *(void *)(a1 + 64);
    v11.i32[0] = *(_DWORD *)(a1 + 52);
    if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgeq_f32(v11, (float32x4_t)xmmword_101E310B0), (int16x8_t)vcgeq_f32((float32x4_t)v7, (float32x4_t)xmmword_101E310A0)))) & 1) != 0|| *(float *)(a1 + 56) >= 2120.0|| v8.f32[0] >= 695.0|| v8.f32[1] >= 600.0)
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023316A8);
      }
      double v13 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortEstimator, overriding ML output based on rule set", buf, 2u);
      }
      float v5 = 8.0;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419330 == -1) {
          goto LABEL_37;
        }
        goto LABEL_43;
      }
    }
    else if (a2 > 8.0)
    {
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023316A8);
      }
      float v12 = qword_102419338;
      if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortEstimator, overriding ML output based on estimate upper limit", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419330 != -1) {
          dispatch_once(&qword_102419330, &stru_1023316A8);
        }
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static float CLWorkoutEffortEstimator::overrideEstimateWithRules(const CLWorkoutEffort::CalorieFeatures &, float)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      if (v5 >= 1.0) {
        return 8.0;
      }
      else {
        return 1.0;
      }
    }
  }
  return v5;
}

__n128 sub_1015C9014@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 136);
  float v5 = a1 + 4;
  if (!*(unsigned char *)a2)
  {
LABEL_22:
    *((unsigned char *)a1 + 41) = 0;
    goto LABEL_23;
  }
  if (!sub_1015AFFE8(*(void *)(a2 + 152)))
  {
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023316A8);
    }
    uint64_t v23 = qword_102419338;
    if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v24 = *(void *)(a2 + 152);
      *(_DWORD *)std::string buf = 67109120;
      LODWORD(v29) = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLWorkoutEffortEstimator, did not pass isSupported check, workoutType, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419330 != -1) {
        dispatch_once(&qword_102419330, &stru_1023316A8);
      }
      float v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortEstimator::estimate(const CLWorkoutEffort::MLFeatures &)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    goto LABEL_22;
  }
  sub_1015C8768(a1, *(void *)(a2 + 152));
  float v7 = (*(float (**)(void, uint64_t))(**((void **)a1 + 1) + 16))(*((void *)a1 + 1), a2);
  float v11 = sub_1015C8B20(a2 + 12, v7, v8, v9, v10);
  float v12 = 9.0;
  if (v11 <= 9.0) {
    float v12 = v11;
  }
  if (v11 >= 1.0) {
    float v13 = v12;
  }
  else {
    float v13 = 1.0;
  }
  *((float *)a1 + 8) = v13;
  *((unsigned char *)a1 + 41) = 1;
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023316A8);
  }
  float v14 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_INFO))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int v16 = *((unsigned __int8 *)a1 + 41);
    uint64_t v17 = *((void *)a1 + 2);
    uint64_t v18 = *((void *)a1 + 3);
    double v19 = *((float *)a1 + 8);
    uint64_t v20 = *(void *)(a2 + 152);
    int v21 = *a1;
    *(_DWORD *)std::string buf = 134219520;
    CFAbsoluteTime v29 = Current;
    __int16 v30 = 1024;
    int v31 = v16;
    __int16 v32 = 2048;
    uint64_t v33 = v17;
    __int16 v34 = 2048;
    uint64_t v35 = v18;
    __int16 v36 = 2048;
    double v37 = v19;
    __int16 v38 = 1024;
    int v39 = v20;
    __int16 v40 = 1024;
    int v41 = v21;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "WorkoutEffortEstimatorXgb update, updateStartTime, %f, isValid, %d, startTime, %f, endTime, %f, score, %f, workoutType, %d, modelType, %d", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023316A8);
    }
    CFAbsoluteTimeGetCurrent();
    double v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutEffort::Result CLWorkoutEffortEstimator::estimate(const CLWorkoutEffort::MLFeatures &)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
LABEL_23:
  __n128 result = *(__n128 *)v5;
  long long v26 = *((_OWORD *)v5 + 1);
  *a3 = *(_OWORD *)v5;
  a3[1] = v26;
  return result;
}

uint64_t sub_1015C9460(uint64_t a1, double a2)
{
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_1023316A8);
  }
  double v4 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134217984;
    double v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WorkoutEffortEstimator reset, startTime, %f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_1023316A8);
    }
    float v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortEstimator::reset(CFAbsoluteTime)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 16) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 32) = _Q0;
  *(_WORD *)(a1 + 40) = 1;
  uint64_t result = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  *(_DWORD *)a1 = 4;
  return result;
}

void sub_1015C9668(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

uint64_t sub_1015C9698(uint64_t a1, unint64_t *a2, __n128 a3)
{
  a3.n128_u64[0] = *a2;
  if (*(double *)a2 != -1.0)
  {
    if (*(double *)(a1 + 8) == -1.0) {
      (*(void (**)(uint64_t, double))(*(void *)a1 + 32))(a1, a3.n128_f64[0]);
    }
    a3.n128_f32[0] = (*(float (**)(uint64_t, unint64_t *, __n128))(*(void *)a1 + 40))(a1, a2, a3);
    *(void *)(a1 + 16) = *a2;
    a3.n128_f32[0] = a3.n128_f32[0] + *(float *)(a1 + 24);
    *(_DWORD *)(a1 + 24) = a3.n128_u32[0];
    ++*(void *)(a1 + 32);
    *(unsigned char *)(a1 + 40) = 1;
  }
  float v5 = *(uint64_t (**)(uint64_t, __n128))(*(void *)a1 + 24);

  return v5(a1, a3);
}

uint64_t sub_1015C97A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = *(void *)(result + 32);
  float v3 = -1.0;
  if (v2) {
    float v3 = *(float *)(result + 24) / (float)v2;
  }
  double v4 = *(double *)(result + 16) + 2.56;
  *(void *)a2 = *(void *)(result + 8);
  *(double *)(a2 + 8) = v4;
  *(float *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = -1082130432;
  *(unsigned char *)(a2 + 24) = 1;
  BOOL v5 = v3 != -1.0 && *(unsigned char *)(result + 40) != 0;
  *(unsigned char *)(a2 + 25) = v5;
  return result;
}

uint64_t sub_1015C9810(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a2;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

void sub_1015C9820(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 8) / *(float *)(a2 + 52);
  if (v2 >= 0.3 && v2 >= 0.7) {
    powf(v2, 5.233);
  }
}

float sub_1015C98B8(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a2 + 8) / *(float *)(a2 + 52);
  float v3 = (float)(v2 * 17.4) + -0.8553;
  BOOL v4 = v2 < 0.3;
  float result = 6.0;
  if (v4) {
    float v3 = 6.0;
  }
  if (v3 >= 6.0) {
    float result = v3;
  }
  if (result > 20.0) {
    return 20.0;
  }
  return result;
}

double sub_1015C9904(uint64_t a1, char a2, char a3, float a4, float a5, float a6)
{
  *(void *)a1 = off_102331700;
  *(float *)(a1 + 8) = a4;
  *(float *)(a1 + 12) = a5;
  *(unsigned char *)(a1 + 16) = a2;
  *(unsigned char *)(a1 + 17) = a3;
  *(float *)(a1 + 20) = a6;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = _Q0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 96) = result;
  *(_WORD *)(a1 + 104) = 1;
  return result;
}

uint64_t sub_1015C9960(uint64_t a1, float *a2)
{
  if (*(double *)a2 != -1.0)
  {
    if (*(double *)(a1 + 80) == -1.0) {
      (*(void (**)(uint64_t, double))(*(void *)a1 + 32))(a1, *(double *)a2);
    }
    sub_1015C9B40(a1, a2);
    float v4 = *(float *)(a1 + 20);
    float v5 = *(float *)(a1 + 48);
    float v7 = *(float *)(a1 + 8);
    float v6 = *(float *)(a1 + 12);
    if (v6 > v5) {
      float v6 = *(float *)(a1 + 48);
    }
    if (v7 >= v6) {
      float v6 = *(float *)(a1 + 8);
    }
    float v8 = powf(fmaxf(v6, 0.0), (float)(v4 * 5.376) + -2.238);
    if (v5 >= v7)
    {
      float v11 = *(float *)(a1 + 64);
      float v12 = *(float *)(a1 + 52);
      if (v11 >= v12)
      {
        float v15 = *(float *)(a1 + 68);
        float v16 = fminf(fmaxf((float)((float)(v4 * 4.378) + 10.56) + (float)((float)((float)(v4 * 7.032) + -2.842) * v8), 6.0), 20.0)- v15;
        if (v16 > 0.2) {
          float v16 = 0.2;
        }
        float v14 = v15 + fmaxf(v16, 0.0);
        *(float *)(a1 + 68) = v14;
      }
      else
      {
        float v13 = v12 - v11;
        if ((float)(v12 - v11) > 0.2) {
          float v13 = 0.2;
        }
        float v14 = v11 + fmaxf(v13, 0.0);
        *(float *)(a1 + 64) = v14;
      }
      *(float *)(a1 + 96) = v14;
    }
    else
    {
      float v9 = *(float *)(a1 + 24) + *(float *)(a1 + 60);
      float v10 = *(float *)(a1 + 52);
      if (v9 >= v10) {
        float v9 = *(float *)(a1 + 52);
      }
      *(float *)(a1 + 96) = v9;
      *(float *)(a1 + 64) = v9;
      *(float *)(a1 + 68) = v10;
    }
    *(void *)(a1 + 88) = *(void *)a2;
    *(unsigned char *)(a1 + 105) = 1;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 24);

  return v17(a1);
}

float sub_1015C9B40(uint64_t a1, float *a2)
{
  float v4 = *(float *)(a1 + 20);
  *(float *)(a1 + 44) = v4;
  float v5 = sub_1015AFFB4((uint64_t)(a2 + 6));
  float v6 = sub_1015AFF80(v4 * v5, a2[9]);
  *(float *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 36) = 1062501089;
  float v7 = (float)(v6 * 60.0) / 0.95;
  *(float *)(a1 + 40) = v7;
  float v8 = sub_1015C9C50(a1, a2, v6, 0.83, v7) + *(float *)(a1 + 28);
  *(float *)(a1 + 28) = v8;
  float v9 = *(float *)(a1 + 44);
  float v10 = v8 / *(float *)(a1 + 40);
  float v11 = *(float *)(a1 + 8);
  if (v10 >= *(float *)(a1 + 12)) {
    float v10 = *(float *)(a1 + 12);
  }
  *(float *)(a1 + 48) = fmaxf(v10, 0.0);
  float result = fminf(fmaxf((float)((float)(v9 * 4.378) + 10.56)+ (float)((float)((float)(v9 * 7.032) + -2.842) * powf(fmaxf(v11, 0.0), (float)(v9 * 5.376) + -2.238)), 6.0), 20.0);
  *(float *)(a1 + 52) = result;
  return result;
}

float sub_1015C9C50(uint64_t a1, float *a2, float a3, float a4, float a5)
{
  float v10 = a2[13];
  if (*(unsigned char *)(a1 + 17))
  {
    float v11 = 65.0;
    if (a2[12] <= 65.0) {
      float v11 = a2[12];
    }
    float v12 = (v10 - a2[2]) / (v10 - v11);
    float v13 = sub_101141BD8(v12, a2[11]) * 1.01;
    float v14 = v13 * sub_1015AFFB4((uint64_t)(a2 + 6));
  }
  else
  {
    float v14 = 0.0;
  }
  float v15 = sub_1015AFF80(v14, a2[9]);
  if (*(unsigned char *)(a1 + 16))
  {
    BOOL v16 = a2[3] < 0.3 || (float)(a2[2] / v10) < a4;
    float v17 = 0.0;
    if (!v16) {
      float v17 = 1.0;
    }
  }
  else
  {
    float v17 = 1.0;
  }
  if (v14 > 2.2 && (!*(unsigned char *)(a1 + 17) || a2[3] > 0.3))
  {
    float v18 = *(float *)(a1 + 56) + 2.56;
    *(float *)(a1 + 56) = v18;
    if (v18 >= 1200.0) {
      *(float *)(a1 + 60) = fminf((float)((float)(v18 + -1200.0) * 0.02336) / 60.0, 3.0);
    }
  }
  float v19 = 0.0;
  if (v15 <= a3 || v17 <= 0.0)
  {
    *(_DWORD *)(a1 + 72) = 0;
  }
  else
  {
    int v20 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)(a1 + 72) = v20 + 1;
    if (v20 >= 5)
    {
      float v21 = fmaxf(v15 - a3, 0.0) * 2.56;
      if ((float)(a5 * 0.002) < v21) {
        float v21 = a5 * 0.002;
      }
      return v21 * v17;
    }
  }
  return v19;
}

__n128 sub_1015C9E34@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 96);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

double sub_1015C9E40(uint64_t a1, double a2)
{
  *(double *)(a1 + 80) = a2;
  *(double *)(a1 + 88) = a2;
  *(void *)(a1 + 96) = 0xBF80000000000000;
  *(_WORD *)(a1 + 104) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

void sub_1015C9E70()
{
}

void sub_1015C9E84()
{
}

void *sub_1015C9E98(void *result)
{
  *double result = off_102331828;
  return result;
}

void sub_1015C9EBC()
{
}

uint64_t sub_1015C9ED4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)a1 = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v18 = _Q0;
  *(_OWORD *)(a1 + 32) = _Q0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 24) = off_1023317B8;
  sub_1015C9904(a1 + 72, 1, 1, 0.1, 1.2, 0.7);
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = v18;
  *(void *)(a1 + 184) = off_102331760;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(unsigned char *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 476) = xmmword_101E311F0;
  *(_OWORD *)(a1 + 492) = xmmword_101E31200;
  *(_DWORD *)(a1 + 508) = -1082130432;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = v18;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a1 + 656) = _Q0;
  *(_DWORD *)(a1 + 672) = -1082130432;
  *(void *)(a1 + 680) = 0xBFF0000000000000;
  *(void *)(a1 + 688) = 0xBFF0000000000000;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 696) = _Q0;
  *(_WORD *)(a1 + 704) = 1;
  *(_DWORD *)(a1 + 712) = 0;
  *(unsigned char *)(a1 + 720) = 0;
  float v12 = sub_1015AFFB4(a3);
  int v13 = *(_DWORD *)(a3 + 28);
  *(float *)(a1 + 476) = v12;
  *(_DWORD *)(a1 + 480) = v13;
  sub_1015CA230(v14, a2, (uint64_t *)(a1 + 608));
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_102331850);
  }
  float v15 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WorkoutEffortFeatureGenerator startSession, updating bodyMetrics and hrMax", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102331850);
    }
    float v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLWorkoutEffortFeatureGenerator::CLWorkoutEffortFeatureGenerator(const CLMotionStateMediator_Type::WorkoutEvent &, const CLBodyMetrics &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  return a1;
}

void sub_1015CA20C(_Unwind_Exception *a1)
{
  sub_1000D80C4((void *)(v1 + 424));
  sub_1000D80C4((void *)(v1 + 376));
  _Unwind_Resume(a1);
}

void sub_1015CA230(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[14];
  uint64_t v6 = a2[16];
  *a3 = *a2;
  a3[1] = v4;
  a3[2] = v5;
  a3[3] = v6;
  a3[4] = 0;
  a3[5] = 0;
  if (qword_102419330 != -1) {
    dispatch_once(&qword_102419330, &stru_102331850);
  }
  float v7 = qword_102419338;
  if (os_log_type_enabled((os_log_t)qword_102419338, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *a3;
    uint64_t v9 = a3[2];
    *(_DWORD *)std::string buf = 134218240;
    uint64_t v12 = v8;
    __int16 v13 = 2048;
    uint64_t v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WorkoutEffortFeatureGenerator, updating sessionFeatures startTime, %f,workoutType,%ld", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419330 != -1) {
      dispatch_once(&qword_102419330, &stru_102331850);
    }
    float v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutEffortFeatureGenerator::updateSessionFeatures(const CLMotionStateMediator_Type::WorkoutEvent &, CLWorkoutEffort::SessionFeatures &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

void sub_1015CA420(uint64_t a1, uint64_t *a2)
{
}

double *sub_1015CA428(double *result, double a2)
{
  if (*result == -1.0) {
    *double result = a2;
  }
  return result;
}

double sub_1015CA444(double *a1, double result)
{
  if (*a1 != -1.0)
  {
    double result = result - *a1 + a1[1];
    a1[1] = result;
    *a1 = -1.0;
  }
  return result;
}

float32x4_t sub_1015CA470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 20) + 1;
  *(_DWORD *)(a1 + 20) = v6;
  float v7 = *(float *)(a2 + 8);
  double v8 = *(float *)(a2 + 12);
  if (v8 > 0.39 && v7 >= 40.0 && v7 <= 220.0)
  {
    ++*(_DWORD *)(a1 + 16);
    v60.n128_u64[0] = *(void *)a2;
    v60.n128_f32[2] = v7;
    double v11 = sub_1015B0028((void *)(a1 + 376), &v60);
    float v12 = *(float *)&v11;
    if (sub_1015B01E8(a1 + 376) >= 0.5)
    {
      float v13 = *(float *)(a3 + 24);
      if (v13 >= v12) {
        float v14 = *(float *)(a3 + 24);
      }
      else {
        float v14 = v12;
      }
      if (v13 == -1.0) {
        float v15 = v12;
      }
      else {
        float v15 = v14;
      }
      *(float *)(a3 + 24) = v15;
      float v16 = v12 / *(float *)(a1 + 480);
      float v17 = *(float *)(a1 + 352);
      unint64_t v18 = *(void *)(a1 + 344);
      *(void *)(a1 + 344) = v18 + 1;
      float v19 = (float)(v18 + 1);
      float v20 = v17 + (float)((float)(v16 - v17) / v19);
      *(float *)(a1 + 352) = v20;
      float v21 = *(float *)(a1 + 356) + (float)((float)(v16 - v17) * (float)(v16 - v20));
      *(float *)(a1 + 356) = v21;
      float v22 = *(float *)(a3 + 4);
      if (*(float *)a3 >= v16) {
        float v23 = *(float *)a3;
      }
      else {
        float v23 = v16;
      }
      if (*(float *)a3 == -1.0) {
        float v24 = v16;
      }
      else {
        float v24 = v23;
      }
      if (v16 >= v22) {
        float v25 = *(float *)(a3 + 4);
      }
      else {
        float v25 = v16;
      }
      if (v22 == -1.0) {
        float v26 = v16;
      }
      else {
        float v26 = v25;
      }
      *(float *)a3 = v24;
      *(float *)(a3 + 4) = v26;
      *(float *)(a3 + 12) = v20;
      unint64_t v27 = 0;
      if (v18 + 1 >= 2) {
        *(float *)&unint64_t v27 = v21 / (float)v18;
      }
      *(float *)(a3 + 8) = sqrtf(*(float *)&v27);
      *(float *)(a3 + 16) = v24 - v26;
      double v8 = v16;
      if (v16 >= 0.9)
      {
        float v28 = *(float *)(a1 + 288);
        float v29 = v16 - v28;
        uint64_t v30 = *(void *)(a1 + 280) + 1;
        *(void *)(a1 + 280) = v30;
        float v31 = v28 + (float)((float)(v16 - v28) / (float)(unint64_t)v30);
        *(float *)(a1 + 288) = v31;
        LODWORD(v27) = *(_DWORD *)(a1 + 292);
        *(float *)(a1 + 292) = *(float *)&v27 + (float)(v29 * (float)(v16 - v31));
      }
      if (v8 >= 0.83)
      {
        float v32 = *(float *)(a1 + 272);
        float v33 = v16 - v32;
        uint64_t v34 = *(void *)(a1 + 264) + 1;
        *(void *)(a1 + 264) = v34;
        float v35 = v32 + (float)((float)(v16 - v32) / (float)(unint64_t)v34);
        *(float *)(a1 + 272) = v35;
        LODWORD(v27) = *(_DWORD *)(a1 + 276);
        *(float *)(a1 + 276) = *(float *)&v27 + (float)(v33 * (float)(v16 - v35));
      }
      if (v16 >= 1.0)
      {
        float v36 = *(float *)(a1 + 304);
        float v37 = v16 - v36;
        uint64_t v38 = *(void *)(a1 + 296) + 1;
        *(void *)(a1 + 296) = v38;
        *(float *)&unint64_t v27 = (float)(v16 - v36) / (float)(unint64_t)v38;
        float v39 = v36 + *(float *)&v27;
        *(float *)(a1 + 304) = v39;
        *(float *)(a1 + 308) = *(float *)(a1 + 308) + (float)(v37 * (float)(v16 - v39));
      }
      if (v8 >= 0.93) {
        ++*(_WORD *)(a1 + 312);
      }
      if (v8 >= 0.935) {
        ++*(_WORD *)(a1 + 314);
      }
      if (v8 >= 0.94) {
        ++*(_WORD *)(a1 + 316);
      }
      if (v8 >= 0.945) {
        ++*(_WORD *)(a1 + 318);
      }
      if (v8 >= 0.95) {
        ++*(_WORD *)(a1 + 320);
      }
      if (v8 >= 0.955) {
        ++*(_WORD *)(a1 + 322);
      }
      if (v8 >= 0.96) {
        ++*(_WORD *)(a1 + 324);
      }
      if (v8 >= 0.97) {
        ++*(_WORD *)(a1 + 326);
      }
      if (v8 >= 0.98) {
        ++*(_WORD *)(a1 + 328);
      }
      if (v8 >= 0.99) {
        ++*(_WORD *)(a1 + 330);
      }
      if (v8 >= 1.01) {
        ++*(_WORD *)(a1 + 332);
      }
      if (v8 >= 1.02) {
        ++*(_WORD *)(a1 + 334);
      }
      if (v8 >= 1.03) {
        ++*(_WORD *)(a1 + 336);
      }
      if (v8 >= 1.04) {
        ++*(_WORD *)(a1 + 338);
      }
      unint64_t v40 = *(void *)(a1 + 280);
      float v41 = (float)*(unint64_t *)(a1 + 264);
      v42.i64[0] = *(void *)(a1 + 264);
      v42.i64[1] = v40;
      unsigned int v43 = *(unsigned __int16 *)(a1 + 312);
      v44.f64[0] = (double)v43;
      LOWORD(v27) = *(_WORD *)(a1 + 314);
      v44.f64[1] = (double)v27;
      float64x2_t v45 = (float64x2_t)vdupq_n_s64(0x40047AE147AE147BuLL);
      v46.f64[0] = (double)*(unint64_t *)(a1 + 296);
      *(float32x4_t *)(a3 + 44) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v42), v45)), vmulq_f64(v44, v45));
      uint32x4_t v47 = vmovl_u16(*(uint16x4_t *)(a1 + 316));
      v48.i64[0] = v47.u32[0];
      v48.i64[1] = v47.u32[1];
      float64x2_t v49 = vcvtq_f64_u64(v48);
      v48.i64[0] = v47.u32[2];
      v48.i64[1] = v47.u32[3];
      *(float32x4_t *)(a3 + 60) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v49, v45)), vmulq_f64(vcvtq_f64_u64(v48), v45));
      uint32x4_t v50 = vmovl_u16(*(uint16x4_t *)(a1 + 324));
      v48.i64[0] = v50.u32[0];
      v48.i64[1] = v50.u32[1];
      float64x2_t v51 = vcvtq_f64_u64(v48);
      v48.i64[0] = v50.u32[2];
      v48.i64[1] = v50.u32[3];
      float64x2_t v52 = vmulq_f64(vcvtq_f64_u64(v48), v45);
      float64x2_t v53 = (float64x2_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v51, v45)), v52);
      *(float64x2_t *)(a3 + 76) = v53;
      LOWORD(v52.f64[0]) = *(_WORD *)(a1 + 332);
      v52.f64[0] = (double)*(unint64_t *)&v52.f64[0];
      LOWORD(v53.f64[0]) = *(_WORD *)(a1 + 334);
      v53.f64[0] = (double)*(unint64_t *)&v53.f64[0];
      v46.f64[1] = v52.f64[0];
      LOWORD(v52.f64[0]) = *(_WORD *)(a1 + 336);
      v53.f64[1] = (double)*(unint64_t *)&v52.f64[0];
      float64x2_t v54 = vmulq_f64(v53, v45);
      *(float32x4_t *)(a3 + 92) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v46, v45)), v54);
      LOWORD(v54.f64[0]) = *(_WORD *)(a1 + 338);
      *(float *)v54.f64 = (double)*(unint64_t *)&v54.f64[0] * 2.56;
      *(_DWORD *)(a3 + 108) = LODWORD(v54.f64[0]);
      *(float *)(a3 + 112) = v41 / v19;
      *(float *)(a3 + 116) = (float)v40 / v19;
      *(float *)(a3 + 120) = (float)v43 / v19;
    }
    unsigned int v6 = *(_DWORD *)(a1 + 20);
  }
  *(float *)&double v8 = (float)v6;
  *(float *)(a3 + 20) = (float)*(unsigned int *)(a1 + 16) / (float)v6;
  int v55 = *(_DWORD *)(a2 + 84);
  uint64_t v56 = (void *)(a1 + 248);
  uint64_t v57 = (void *)(a1 + 256);
  if (v55 == 4) {
    uint64_t v57 = (void *)(a1 + 232);
  }
  if (v55 != 6) {
    uint64_t v56 = v57;
  }
  if (v55 == 8) {
    long long v58 = (void *)(a1 + 240);
  }
  else {
    long long v58 = v56;
  }
  ++*v58;
  float32x4_t result = vdivq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)(a1 + 232))), vcvtq_f64_u64(*(uint64x2_t *)(a1 + 248))), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v8, 0));
  *(float32x4_t *)(a3 + 28) = result;
  return result;
}

float sub_1015CA9BC(uint64_t a1, unint64_t *a2, uint64_t a3, __n128 a4)
{
  sub_1015C9698(a1 + 24, a2, a4);
  *(_DWORD *)(a1 + 96) = v9;
  sub_1015C9960(a1 + 72, (float *)a2);
  *(_OWORD *)a3 = *(_OWORD *)v8;
  *(_OWORD *)(a3 + 10) = *(_OWORD *)&v8[10];
  float result = *(float *)(a1 + 120);
  *(float *)(a3 + 32) = result;
  return result;
}

void sub_1015CAA30(uint64_t a1, uint64_t a2, float *a3)
{
  float v3 = *(float *)(a2 + 8);
  if (*(float *)(a2 + 12) > 0.39 && v3 >= 40.0 && v3 <= 220.0)
  {
    sub_1015C9820(a1 + 184, a2);
    v22.n128_u64[0] = *(void *)a2;
    v22.n128_u32[2] = v9;
    double v10 = sub_1015B0028((void *)(a1 + 424), &v22);
    float v11 = *(float *)&v10;
    if (sub_1015B01E8(a1 + 424) >= 0.5)
    {
      float v12 = *(float *)(a1 + 368);
      unint64_t v13 = *(void *)(a1 + 360);
      *(void *)(a1 + 360) = v13 + 1;
      float v14 = v12 + (float)((float)(v11 - v12) / (float)(v13 + 1));
      *(float *)(a1 + 368) = v14;
      float v15 = *(float *)(a1 + 372) + (float)((float)(v11 - v12) * (float)(v11 - v14));
      *(float *)(a1 + 372) = v15;
      float v16 = a3[1];
      if (*a3 >= v11) {
        float v17 = *a3;
      }
      else {
        float v17 = v11;
      }
      if (*a3 == -1.0) {
        float v18 = v11;
      }
      else {
        float v18 = v17;
      }
      if (v11 >= v16) {
        float v19 = a3[1];
      }
      else {
        float v19 = v11;
      }
      if (v16 == -1.0) {
        float v20 = v11;
      }
      else {
        float v20 = v19;
      }
      *a3 = v18;
      a3[1] = v20;
      a3[2] = v14;
      float v21 = 0.0;
      if (v13 + 1 >= 2) {
        float v21 = v15 / (float)v13;
      }
      a3[3] = sqrtf(v21);
      a3[4] = v18 - v20;
    }
  }
}

__n128 sub_1015CAB60@<Q0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = *(double *)a2;
  if (*(double *)a2 == -1.0) {
    goto LABEL_7;
  }
  *(double *)(a1 + 616) = v5;
  double v7 = (v5 - *(double *)(a1 + 608)) / 60.0;
  *(double *)(a1 + 640) = v7;
  double v8 = v5 + *(double *)(a1 + 8) - *(double *)a1;
  double v9 = *(double *)a1 == -1.0 ? *(double *)(a1 + 8) : v8;
  *(double *)(a1 + 648) = v7 - v9 / 60.0;
  sub_1015CA470(a1, (uint64_t)a2, a1 + 484);
  sub_1015CAA30(a1, (uint64_t)a2, (float *)(a1 + 656));
  sub_1015CA9BC(a1, a2, a1 + 680, v10);
  if (*(double *)a2 < *(double *)(a1 + 608) || *(float *)(a1 + 504) < 0.5) {
LABEL_7:
  }
    char v11 = 0;
  else {
    char v11 = 1;
  }
  *(unsigned char *)(a1 + 472) = v11;
  *(void *)(a3 + 240) = *(void *)(a1 + 712);
  long long v12 = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(a3 + 192) = *(_OWORD *)(a1 + 664);
  *(_OWORD *)(a3 + 208) = v12;
  *(_OWORD *)(a3 + 224) = *(_OWORD *)(a1 + 696);
  long long v13 = *(_OWORD *)(a1 + 616);
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(a1 + 600);
  *(_OWORD *)(a3 + 144) = v13;
  long long v14 = *(_OWORD *)(a1 + 648);
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(a1 + 632);
  *(_OWORD *)(a3 + 176) = v14;
  long long v15 = *(_OWORD *)(a1 + 552);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 536);
  *(_OWORD *)(a3 + 80) = v15;
  long long v16 = *(_OWORD *)(a1 + 584);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 568);
  *(_OWORD *)(a3 + 112) = v16;
  long long v17 = *(_OWORD *)(a1 + 488);
  *(_OWORD *)a3 = *(_OWORD *)(a1 + 472);
  *(_OWORD *)(a3 + 16) = v17;
  __n128 result = *(__n128 *)(a1 + 504);
  long long v19 = *(_OWORD *)(a1 + 520);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v19;
  return result;
}

void sub_1015CAC84(id a1)
{
  qword_102419338 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WorkoutEffort");
}

void *sub_1015CACB4(void *result, uint64_t a2)
{
  *__n128 result = off_102331880;
  result[1] = a2;
  return result;
}

void sub_1015CACD8()
{
}

uint64_t sub_1015CAD5C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_100346AD4(v0, qword_102488F40);
  sub_10034696C(v0, (uint64_t)qword_102488F40);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1015CADD8@<X0>(uint64_t a1@<X8>)
{
  return sub_1015CAE00(a1, &byte_10248AB18);
}

uint64_t sub_1015CAE04@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0x90))();
  *a2 = result;
  return result;
}

uint64_t sub_1015CAE60(uint64_t a1, void **a2)
{
  float v2 = *(uint64_t (**)(uint64_t))((swift_isaMask & **a2) + 0x98);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1015CAEC4()
{
  return swift_retain();
}

uint64_t sub_1015CAF10(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*sub_1015CAF64())()
{
  return j_j__swift_endAccess;
}

id sub_1015CAFC0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CLAONSenseWiFiService()) init];
  qword_10248D838 = (uint64_t)result;
  return result;
}

id sub_1015CAFF4()
{
  return [objc_allocWithZone(v0) init];
}

uint64_t *sub_1015CB020()
{
  if (qword_102488F58 != -1) {
    swift_once();
  }
  return &qword_10248D838;
}

id sub_1015CB06C()
{
  if (qword_102488F58 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_10248D838;

  return v0;
}

uint64_t sub_1015CB124()
{
  return 0;
}

uint64_t sub_1015CB130@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xA8))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1015CB18C(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **a2) + 0xB0);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1015CB204()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1015CB25C(uint64_t a1, uint64_t a2)
{
  double v5 = (void *)(v2 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1015CB2BC())()
{
  return j__swift_endAccess;
}

uint64_t sub_1015CB31C@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & **a1) + 0xC0))();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v5;
    *(void *)(result + 24) = v6;
    double v7 = sub_1015CD60C;
  }
  else
  {
    double v7 = 0;
  }
  *a2 = v7;
  a2[1] = result;
  return result;
}

uint64_t sub_1015CB3BC(uint64_t *a1, void **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_1015CD5D4;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  double v7 = *(uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))((swift_isaMask & **a2) + 0xC8);
  sub_1015CB4E0(v3);
  return v7(v6, v5);
}

uint64_t sub_1015CB484()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback);
  swift_beginAccess();
  uint64_t v2 = *v1;
  sub_1015CB4E0(*v1);
  return v2;
}

uint64_t sub_1015CB4E0(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1015CB4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback);
  swift_beginAccess();
  uint64_t v6 = *v5;
  uint64_t *v5 = a1;
  v5[1] = a2;
  return sub_1015CB550(v6);
}

uint64_t sub_1015CB550(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t (*sub_1015CB560())()
{
  return j_j__swift_endAccess;
}

void sub_1015CB5DC(uint64_t a1)
{
  uint64_t v2 = v1;
  if (qword_102488F38 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10034696C(v4, (uint64_t)qword_102488F40);
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "AONSense,onALFWiFiNotification,count,%ld,done,%{BOOL}d", (uint8_t *)v7, 0x12u);
    swift_slowDealloc();

    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      return;
    }
  }
  else
  {

    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(a1 + 16);
    if (!v8) {
      return;
    }
  }
  double v9 = *(void (**)(uint64_t))((swift_isaMask & *v2) + 0xE8);
  uint64_t v10 = *(void *)(type metadata accessor for ALWiFiNotification() - 8);
  uint64_t v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  uint64_t v12 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  do
  {
    v9(v11);
    v11 += v12;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease();
}

void sub_1015CB808(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ALWiFiScanSingleAccessPoint();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v115 = v2;
  uint64_t v116 = v3;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ALWiFiNotification();
  uint64_t v102 = *(void *)(v6 - 8);
  uint64_t v103 = v6;
  __chkstk_darwin(v6);
  char v101 = (char *)v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v100 - v9;
  uint64_t v11 = sub_1003469A4(&qword_1024798C8);
  __chkstk_darwin(v11 - 8);
  long long v13 = (char *)v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ALTimeStamp();
  uint64_t v105 = *(void *)(v14 - 8);
  uint64_t v106 = v14;
  __chkstk_darwin(v14);
  uint64_t v104 = (char *)v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1003469A4(&qword_1024798D0);
  __chkstk_darwin(v16 - 8);
  float v18 = (char *)v100 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ALWiFiScanResult();
  uint64_t v110 = *(void *)(v19 - 8);
  uint64_t v111 = v19;
  __chkstk_darwin(v19);
  float v21 = (char *)v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  long long v108 = (char *)v100 - v23;
  uint64_t v117 = a1;
  ALWiFiNotification.scanResult.getter();
  uint64_t v25 = v110;
  uint64_t v24 = v111;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v18, 1, v111) == 1)
  {
    sub_100346B8C((uint64_t)v18, &qword_1024798D0);
    if (qword_102488F38 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10034696C(v26, (uint64_t)qword_102488F40);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      float v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)float v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "AONSense,onEachNotfication,ScanResult,nil,return", v29, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v108, v18, v24);
    ALWiFiNotification.timestamp.getter();
    uint64_t v31 = v105;
    uint64_t v30 = v106;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v13, 1, v106) == 1)
    {
      sub_100346B8C((uint64_t)v13, &qword_1024798C8);
      if (qword_102488F38 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10034696C(v32, (uint64_t)qword_102488F40);
      float v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        float v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)float v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "AONSense,onEachNotfication,timestamp,nil,return", v35, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v110 + 8))(v108, v111);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v104, v13, v30);
      double v36 = COERCE_DOUBLE(ALTimeStamp.cfAbsoluteTimeSec.getter());
      if (v37) {
        double v38 = 0.0;
      }
      else {
        double v38 = v36;
      }
      double Current = CFAbsoluteTimeGetCurrent();
      if (qword_102488F38 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      v100[2] = sub_10034696C(v40, (uint64_t)qword_102488F40);
      sub_10010145C();
      sub_10010145C();
      sub_10010145C();
      sub_10010145C();
      (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v21, v108, v111);
      float v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        unsigned int v43 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unsigned int v43 = 68158720;
        LODWORD(v121[0]) = 2;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v43[8] = 0;
        v43[9] = 8;
        v121[0] = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v43[18] = 16;
        v43[19] = 4;
        LODWORD(v121[0]) = 3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v43[24] = 0;
        v43[25] = 8;
        v121[0] = Current - v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v43[34] = 0;
        v43[35] = 8;
        double v44 = *(double *)(ALWiFiScanResult.accessPoints.getter() + 16);
        swift_bridgeObjectRelease();
        v100[0] = *(void *)(v110 + 8);
        ((void (*)(char *, uint64_t))v100[0])(v21, v111);
        v121[0] = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "AONSense,onEachNotfication,ScanResult,time,%.*f,age,%.*f,aps,%ld", v43, 0x2Cu);
        swift_slowDealloc();
      }
      else
      {
        v100[0] = *(void *)(v110 + 8);
        ((void (*)(char *, uint64_t))v100[0])(v21, v111);
      }

      long long v123 = 0u;
      long long v124 = 0u;
      long long v122 = 0u;
      memset(v121, 0, sizeof(v121));
      sub_1015CD184((uint64_t)v121);
      BYTE8(v124) = ALWiFiNotification.simulated.getter() & 1;
      BYTE9(v124) = ALWiFiNotification.available.getter() & 1;
      uint64_t v45 = ALWiFiNotification.associatedMac.getter();
      if (v46)
      {
        long long v58 = Logger.logObject.getter();
        os_log_type_t v59 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v58, v59))
        {
          __n128 v60 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)__n128 v60 = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, v59, "AONSense,associatedState,nil", v60, 2u);
          swift_slowDealloc();
        }

        sub_1015CAE00(v120, &byte_10248AB18);
        uint64_t v61 = (uint64_t)v107 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        swift_beginAccess();
        uint64_t v62 = sub_100D546EC(v61);
        sub_1015CD1A8(v62, (uint64_t)v120);
        sub_100D546EC((uint64_t)v120);
        swift_endAccess();
      }
      else
      {
        uint64_t v47 = v45;
        uint64_t v48 = (uint64_t)v107 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        swift_beginAccess();
        sub_1015CAE00(v120, v48);
        BOOL v49 = sub_1015CD2E0(v120, v47);
        sub_100D546EC((uint64_t)v120);
        if (!v49)
        {
          uint64_t v51 = nullsub_41(v47, v50);
          sub_1015CD330((uint64_t)v120, v51);
          sub_1015CD2D4((uint64_t)v120, 1);
          swift_beginAccess();
          sub_1015CD2DC(v48, (uint64_t)v120);
          swift_endAccess();
          (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v10, v117, v103);
          float64x2_t v52 = Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v52, v53))
          {
            float64x2_t v54 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)float64x2_t v54 = 134283521;
            uint64_t v55 = ALWiFiNotification.associatedMac.getter();
            if (v56) {
              uint64_t v57 = 0;
            }
            else {
              uint64_t v57 = v55;
            }
            (*(void (**)(char *, uint64_t))(v102 + 8))(v10, v103);
            *(void *)&long long v118 = v57;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v52, v53, "AONSense,associatedState,update,%{private}llx", v54, 0xCu);
            swift_slowDealloc();
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v102 + 8))(v10, v103);
          }

          sub_100D54728((uint64_t)v120);
        }
      }
      *((double *)&v122 + 1) = v38;
      uint64_t v63 = ALWiFiScanResult.accessPoints.getter();
      v100[1] = v63;
      uint64_t v64 = *(void *)(v63 + 16);
      if (v64)
      {
        long long v109 = (char *)v107 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        uint64_t v65 = v115;
        int v66 = *(void (**)(char *, unint64_t, uint64_t))(v116 + 16);
        long long v113 = (uint64_t *)&v123;
        uint64_t v114 = v66;
        unint64_t v67 = v63 + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80));
        uint64_t v112 = *(void *)(v116 + 72);
        v116 += 16;
        BOOL v68 = (void (**)(char *, uint64_t))(v116 - 8);
        do
        {
          v114(v5, v67, v65);
          uint64_t v69 = ALWiFiScanSingleAccessPoint.ageSec.getter();
          uint64_t v70 = ALWiFiScanSingleAccessPoint.mac.getter();
          if (v71) {
            uint64_t v70 = 0;
          }
          uint64_t v72 = nullsub_41(v70, v71);
          if ((v69 & (unint64_t)&_mh_execute_header) != 0) {
            double v73 = 0.0;
          }
          else {
            double v73 = *(float *)&v69;
          }
          long long v118 = 0uLL;
          uint64_t v119 = 0;
          sub_1015CD1FC(&v118);
          uint64_t v74 = ALWiFiScanSingleAccessPoint.rssidB.getter();
          if ((v74 & (unint64_t)&_mh_execute_header) != 0) {
            int v75 = 0;
          }
          else {
            int v75 = v74;
          }
          uint64_t v76 = ALWiFiScanSingleAccessPoint.channel.getter();
          if ((v76 & (unint64_t)&_mh_execute_header) != 0) {
            int v77 = 0;
          }
          else {
            int v77 = v76;
          }
          char v78 = ALWiFiScanSingleAccessPoint.isAph.getter();
          char v79 = ALWiFiScanSingleAccessPoint.isMoving.getter();
          sub_1015CD208((uint64_t)v120, v72, &v118, v75, 0, v77, v78 & 1, v79 & 1, v73, v38 - v73);
          *(void *)&long long v118 = sub_1000D8908((uint64_t)v120);
          uint64_t v80 = sub_1000D8908((uint64_t)&v118);
          uint64_t v81 = ALWiFiNotification.associatedMac.getter();
          if ((v82 & 1) == 0 && v80 == v81)
          {
            sub_1015CD2D4((uint64_t)v120, 1);
            uint64_t v83 = (uint64_t)v109;
            swift_beginAccess();
            sub_1015CD2DC(v83, (uint64_t)v120);
            swift_endAccess();
          }
          double v84 = CFAbsoluteTimeGetCurrent();
          sub_1015CD248((uint64_t)v120, v84);
          sub_1015CD250(v113, (uint64_t)v120);
          uint64_t v65 = v115;
          sub_100D54728((uint64_t)v120);
          (*v68)(v5, v65);
          v67 += v112;
          --v64;
        }
        while (v64);
      }
      swift_bridgeObjectRelease();
      ALWiFiNotification.associatedMac.getter();
      if ((v85 & 1) == 0)
      {
        uint64_t v86 = (char *)v107 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
        swift_beginAccess();
        sub_1015CAE00(v120, v86);
        LOBYTE(v86) = sub_1015CD2B4((uint64_t)v120);
        sub_100D546EC((uint64_t)v120);
        if ((v86 & 1) == 0)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v101, v117, v103);
          __int16 v87 = Logger.logObject.getter();
          os_log_type_t v88 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v87, v88))
          {
            __int16 v89 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)__int16 v89 = 134283521;
            uint64_t v90 = ALWiFiNotification.associatedMac.getter();
            if (v91) {
              uint64_t v92 = 0;
            }
            else {
              uint64_t v92 = v90;
            }
            (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v103);
            v120[0] = v92;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v87, v88, "The associatedState NOT set though associatedMac is valid %{private}llx", v89, 0xCu);
            swift_slowDealloc();
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v102 + 8))(v101, v103);
          }
        }
      }
      long long v93 = (char *)v107 + OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState;
      swift_beginAccess();
      uint64_t v94 = sub_100D546EC((uint64_t)&v121[1]);
      sub_1015CAE00(v94, v93);
      unint64_t v95 = Logger.logObject.getter();
      os_log_type_t v96 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v97 = 134217984;
        swift_beginAccess();
        *(void *)&long long v118 = sub_1015CD290(&v123);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "AONSense,onEachNotfication,data.scan.size,%ld", v97, 0xCu);
        swift_slowDealloc();
      }

      uint64_t v98 = (void (*)(id))(*(uint64_t (**)(void))((swift_isaMask & *v107) + 0xC0))();
      if (v98)
      {
        id v99 = [objc_allocWithZone((Class)CLAONSenseWiFiNotification) init];
        swift_beginAccess();
        [v99 setData:v121];
        v98(v99);
        sub_1015CB550((uint64_t)v98);
      }
      (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v106);
      ((void (*)(char *, uint64_t))v100[0])(v108, v111);
      sub_100570A18((uint64_t)v121);
    }
  }
}

void sub_1015CC780(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __break(1u);
    JUMPOUT(0x1015CC788);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1015CC814@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v4 = ALWiFiScanSingleAccessPoint.ageSec.getter();
  uint64_t v5 = ALWiFiScanSingleAccessPoint.mac.getter();
  if (v6) {
    uint64_t v5 = 0;
  }
  uint64_t v7 = nullsub_41(v5, v6);
  if ((v4 & (unint64_t)&_mh_execute_header) != 0) {
    double v8 = 0.0;
  }
  else {
    double v8 = *(float *)&v4;
  }
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  sub_1015CD1FC(&v16);
  uint64_t v9 = ALWiFiScanSingleAccessPoint.rssidB.getter();
  if ((v9 & (unint64_t)&_mh_execute_header) != 0) {
    int v10 = 0;
  }
  else {
    int v10 = v9;
  }
  uint64_t v11 = ALWiFiScanSingleAccessPoint.channel.getter();
  if ((v11 & (unint64_t)&_mh_execute_header) != 0) {
    int v12 = 0;
  }
  else {
    int v12 = v11;
  }
  char v13 = ALWiFiScanSingleAccessPoint.isAph.getter();
  char v14 = ALWiFiScanSingleAccessPoint.isMoving.getter();
  return sub_1015CD208(a1, v7, &v16, v10, 0, v12, v13 & 1, v14 & 1, v8, a2 - v8);
}

uint64_t sub_1015CC8F0(void *a1)
{
  uint64_t v2 = sub_1003469A4(&qword_1024798E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ALResultOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  char v8 = 0;
  sub_1015CCE78(a1);
  return sub_100346B8C((uint64_t)v4, &qword_1024798E0);
}

uint64_t sub_1015CCB58(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1003469A4(&qword_1024798E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  int v10 = *(void (**)(uint64_t, uint64_t))((swift_isaMask & *v3) + 0xC8);
  swift_retain();
  v10(a2, a3);
  uint64_t v11 = type metadata accessor for ALResultOptions();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v13[12] = 1;
  sub_1015CCE78(a1);
  return sub_100346B8C((uint64_t)v9, &qword_1024798E0);
}

uint64_t sub_1015CCE78(void *a1)
{
  uint64_t v3 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x90);
  uint64_t v4 = v3();
  if (!v4)
  {
    type metadata accessor for ALFWiFiScanResultsRequester();
    swift_allocObject();
    id v5 = a1;
    uint64_t v4 = ALFWiFiScanResultsRequester.init(queue:)();
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x98))(v4);
  uint64_t result = ((uint64_t (*)(uint64_t))v3)(v6);
  if (result)
  {
    *(void *)(swift_allocObject() + 16) = v1;
    uint64_t v8 = v1;
    dispatch thunk of ALFWiFiScanResultsRequester.register(callback:intervalSec:)();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1015CCFC4()
{
  sub_1015CAE00(&v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_associatedState], &byte_10248AB18);
  *(void *)&v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_requester] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService_desc];
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC10CLAONSense21CLAONSenseWiFiService__callback];
  uint64_t v3 = (objc_class *)type metadata accessor for CLAONSenseWiFiService();
  *(void *)uint64_t v2 = 0;
  *((void *)v2 + 1) = 0;
  v5.receiver = v0;
  v5.super_class = v3;
  return [super init];
}

id sub_1015CD0D8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CLAONSenseWiFiService();
  return [super dealloc];
}

double sub_1015CD184(uint64_t a1)
{
  *(_WORD *)a1 = -256;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  return result;
}

__n128 sub_1015CD1A8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    *(void *)a1 = *(void *)a2;
    long long v2 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v2;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    __n128 result = *(__n128 *)(a2 + 32);
    long long v4 = *(_OWORD *)(a2 + 48);
    long long v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 48) = v4;
    *(_OWORD *)(a1 + 64) = v5;
    *(__n128 *)(a1 + 32) = result;
    *(unsigned char *)(a1 + 88) = 1;
  }
  return result;
}

void *sub_1015CD1FC(void *result)
{
  *__n128 result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t sub_1015CD208(uint64_t result, uint64_t a2, long long *a3, int a4, int a5, int a6, char a7, char a8, double a9, double a10)
{
  *(void *)__n128 result = a2;
  long long v10 = *a3;
  *(void *)(result + 24) = *((void *)a3 + 2);
  *(_OWORD *)(result + 8) = v10;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  *(_DWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 36) = a5;
  *(_DWORD *)(result + 40) = a6;
  *(double *)(result + 48) = a9;
  *(double *)(result + 56) = a10;
  *(unsigned char *)(result + 64) = a7;
  *(unsigned char *)(result + 65) = a8;
  *(_DWORD *)(result + 68) = 0;
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  return result;
}

uint64_t sub_1015CD248(uint64_t result, double a2)
{
  *(double *)(result + 80) = a2;
  return result;
}

uint64_t sub_1015CD250(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_1001F8D14(a1, a2);
  }
  else
  {
    sub_1001F8C88((uint64_t)a1, a2);
    uint64_t result = v3 + 88;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1015CD290(void *a1)
{
  return 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 3);
}

BOOL sub_1015CD2B4(uint64_t a1)
{
  return *(unsigned char *)(a1 + 88) && *(_DWORD *)(a1 + 40) > 0;
}

uint64_t sub_1015CD2D4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 72) = a2;
  return result;
}

BOOL sub_1015CD2E0(uint64_t *a1, uint64_t a2)
{
  if (!*((unsigned char *)a1 + 88)) {
    return 0;
  }
  uint64_t v3 = *a1;
  return sub_1000D8908((uint64_t)&v3) == a2;
}

uint64_t sub_1015CD330(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 9999;
  *(unsigned char *)(result + 72) = 0;
  *(void *)(result + 80) = 0;
  return result;
}

uint64_t type metadata accessor for CLAONSenseWiFiService()
{
  return self;
}

void type metadata accessor for CLWifiService_Type(uint64_t a1)
{
}

uint64_t sub_1015CD384(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_1015CD3BC(uint64_t a1, uint64_t a2)
{
  return sub_1015CAE00(a1, a2);
}

uint64_t sub_1015CD3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100D546EC(a1);
  return sub_1015CAE00(v3, a2);
}

uint64_t sub_1015CD408(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t sub_1015CD43C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100D546EC(a1);
  sub_1015CD1A8(v4, a2);
  sub_100D546EC(a2);
  return a1;
}

uint64_t sub_1015CD478(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1015CD498(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

void type metadata accessor for CLWifiService_Type.AssociationState(uint64_t a1)
{
}

void sub_1015CD4F0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1015CD538()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1015CD570()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_1015CD59C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1015CD5D4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_1015CD60C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_1015CD638()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1015CD670()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xE0))();
}

void sub_1015CD710(id a1)
{
  uint64_t v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    uint64_t v2 = v1;
    if (CFEqual(v1, kCFBooleanTrue)) {
      byte_102488F60 = 1;
    }
    CFRelease(v2);
  }
}

void sub_1015CD7C8(id a1)
{
  uint64_t v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    uint64_t v2 = v1;
    if (CFEqual(v1, @"iPhone")) {
      byte_102488F70 = 1;
    }
    CFRelease(v2);
  }
}

void sub_1015CD88C(id a1)
{
  uint64_t v1 = (const void *)_CFCopyServerVersionDictionary();
  if (v1 || (uint64_t v1 = (const void *)_CFCopySystemVersionDictionary()) != 0)
  {
    CFRelease(v1);
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v1, _kCFSystemVersionProductNameKey);
    char v3 = (const void *)_kCFSystemVersionProductVersionKey;
    CFStringRef v4 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v1, _kCFSystemVersionProductVersionKey);
    CFStringRef v5 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v1, v3);
    if (!Value || (CFTypeID v6 = CFGetTypeID(Value), v6 != CFStringGetTypeID())) {
      CFStringRef Value = @"<name>";
    }
    if (!v4 || (CFTypeID v7 = CFGetTypeID(v4), v7 != CFStringGetTypeID())) {
      CFStringRef v4 = @"<version>";
    }
    CFTypeID v8 = CFGetTypeID(v5);
    if (v8 != CFStringGetTypeID()) {
      CFStringRef v5 = @"<build>";
    }
    CFStringRef v9 = (const __CFString *)[objc_alloc((Class)NSString) initWithFormat:@"%@%@/%@", Value, v4, v5];
  }
  else
  {
    CFStringRef v9 = @"<null>";
  }
  qword_102488F80 = (uint64_t)v9;
}

void sub_1015CD9FC(id a1)
{
  size_t v2 = 128;
  if (sysctlbyname("hw.model", v3, &v2, 0, 0)) {
    CFStringRef v1 = @"<unknown>";
  }
  else {
    CFStringRef v1 = (const __CFString *)[objc_alloc((Class)NSString) initWithCString:v3 encoding:4];
  }
  qword_102488F90 = (uint64_t)v1;
}

id sub_1015CDD04(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onStopActiveLocationRequestTimerExpiry];
}

void sub_1015CE248(uint64_t a1, void *a2, void *a3)
{
  CFTypeID v6 = +[NSDate date];
  if (a3)
  {
    id v7 = [a3 domain];
    if ([v7 isEqualToString:kCLErrorDomainPrivate] && objc_msgSend(a3, "code") == (id)5)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102331BA8);
      }
      CFTypeID v8 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        id buf = (id)68289282;
        __int16 v35 = 2082;
        double v36 = "";
        __int16 v37 = 2114;
        double v38 = (const char *)a3;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate is disabled\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
      [*(id *)(a1 + 32) fetchCurrentLocationWithHandler:*(void *)(a1 + 56)];
      goto LABEL_23;
    }
    id v9 = [a3 domain];
    if ([v9 isEqualToString:RTErrorDomain])
    {
      if ([a3 code] == (id)5)
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102331BA8);
        }
        long long v10 = qword_102419398;
        if (!os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_30;
        }
        id buf = (id)68289282;
        __int16 v35 = 2082;
        double v36 = "";
        __int16 v37 = 2114;
        double v38 = (const char *)a3;
        uint64_t v11 = "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, location is not available, request "
              "new locations\", \"error\":%{public, location:escape_only}@}";
        goto LABEL_29;
      }
      if ([a3 code] == (id)6)
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102331BA8);
        }
        long long v10 = qword_102419398;
        if (!os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_30;
        }
        id buf = (id)68289282;
        __int16 v35 = 2082;
        double v36 = "";
        __int16 v37 = 2114;
        double v38 = (const char *)a3;
        uint64_t v11 = "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, location estimation failed, request"
              " new locations\", \"error\":%{public, location:escape_only}@}";
LABEL_29:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&buf, 0x1Cu);
        goto LABEL_30;
      }
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102331BA8);
      }
      uint64_t v26 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
      {
        id buf = (id)68289282;
        __int16 v35 = 2082;
        double v36 = "";
        __int16 v37 = 2114;
        double v38 = (const char *)a3;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, error occurred.\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102331BA8);
        }
      }
      unint64_t v27 = qword_102419398;
      if (os_signpost_enabled((os_log_t)qword_102419398))
      {
        id buf = (id)68289282;
        __int16 v35 = 2082;
        double v36 = "";
        __int16 v37 = 2114;
        double v38 = (const char *)a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #location fetchEstimatedLocationAtDate, error occurred.", "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, error occurred.\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102331BA8);
      }
      int v12 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
      {
        id buf = (id)68289282;
        __int16 v35 = 2082;
        double v36 = "";
        __int16 v37 = 2114;
        double v38 = (const char *)a3;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, error occurred.\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102331BA8);
        }
      }
      char v13 = qword_102419398;
      if (os_signpost_enabled((os_log_t)qword_102419398))
      {
        id buf = (id)68289282;
        __int16 v35 = 2082;
        double v36 = "";
        __int16 v37 = 2114;
        double v38 = (const char *)a3;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #location fetchEstimatedLocationAtDate, error occurred.", "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, error occurred.\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_23:
    [*(id *)(a1 + 32) sendEstimatedLocationMetricsAtFirstAttemptForEstimatedLocation:0 estimationError:a3 timeOfInterest:*(void *)(a1 + 40) referenceTime:*(void *)(a1 + 48) responseTime:v6];
    return;
  }
LABEL_30:
  if (a2 && ([a2 horizontalAccuracy], v14 < 15.0))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331BA8);
    }
    uint64_t v15 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      long long v16 = [(NSString *)+[NSDateFormatter localizedStringFromDate:*(void *)(a1 + 40) dateStyle:1 timeStyle:4] UTF8String];
      [a2 coordinate];
      double v18 = v17;
      [a2 coordinate];
      double v20 = v19;
      [a2 horizontalAccuracy];
      uint64_t v22 = v21;
      uint64_t v23 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", [a2 timestamp], 1, 4), "UTF8String");
      id buf = (id)68290307;
      __int16 v35 = 2082;
      double v36 = "";
      __int16 v37 = 2082;
      double v38 = v16;
      __int16 v39 = 1025;
      int v40 = (int)v18;
      __int16 v41 = 1025;
      int v42 = (int)v20;
      __int16 v43 = 2050;
      uint64_t v44 = v22;
      __int16 v45 = 2082;
      char v46 = v23;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, an estimated location\", \"date\":%{public, location:escape_only}s, \"lat\":%{private}d, \"lon\":%{private}d, \"accuracy\":\"%{public}f\", \"loc.date\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x3Cu);
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    [*(id *)(a1 + 32) sendEstimatedLocationMetricsAtFirstAttemptForEstimatedLocation:a2 estimationError:0 timeOfInterest:*(void *)(a1 + 40) referenceTime:*(void *)(a1 + 48) responseTime:v6];
  }
  else
  {
    objc_initWeak(&buf, *(id *)(a1 + 32));
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    _OWORD v28[2] = sub_1015CE9D8;
    v28[3] = &unk_102331B60;
    objc_copyWeak(&v33, &buf);
    uint64_t v25 = *(void *)(a1 + 48);
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v31 = a2;
    uint64_t v32 = v24;
    long long v29 = *(_OWORD *)(a1 + 32);
    uint64_t v30 = v25;
    [(id)v29 fetchCurrentLocationWithHandler:v28];
    objc_destroyWeak(&v33);
    objc_destroyWeak(&buf);
  }
}

void sub_1015CE9B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1015CE9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (objc_loadWeak((id *)(a1 + 72)))
  {
    CFTypeID v6 = +[NSDate date];
    if (a2)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102331BA8);
      }
      id v7 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        uint64_t buf = 68289026;
        __int16 v12 = 2082;
        char v13 = "";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate new location arrives\"}", (uint8_t *)&buf, 0x12u);
      }
      [*(id *)(*(void *)(a1 + 32) + 16) fetchEstimatedLocationAtDate:withReply:];
    }
    else
    {
      id v9 = v6;
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
      [*(id *)(a1 + 32) sendEstimatedLocationMetricsAfterLocationScanWithFirstEstimatedLocation:0 newLocation:0 secondEstimatedLocation:0 error:a3 timeOfInterest:*(void *)(a1 + 40) referenceTime:*(void *)(a1 + 48) responseTime:v9];
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102331BA8);
      }
      long long v10 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        uint64_t buf = 68289026;
        __int16 v12 = 2082;
        char v13 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate no location arrives\"}", (uint8_t *)&buf, 0x12u);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 64);
    NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
    CFStringRef v15 = @"DurianLocationMonitor is invalidated";
    (*(void (**)(uint64_t, void, NSError *))(v8 + 16))(v8, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 1, +[NSDictionary dictionaryWithObjects:&v15 forKeys:&v14 count:1]));
  }
}

id sub_1015CEC90(uint64_t a1, void *a2, const char *a3)
{
  CFTypeID v6 = +[NSDate date];
  if (a3)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331BA8);
    }
    id v7 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v29 = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2114;
      id v33 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate with fresh locations\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  if (a2)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331BA8);
    }
    uint64_t v8 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      id v9 = [(NSString *)+[NSDateFormatter localizedStringFromDate:*(void *)(a1 + 32) dateStyle:1 timeStyle:4] UTF8String];
      [a2 coordinate];
      int v11 = (int)v10;
      [a2 coordinate];
      int v13 = (int)v12;
      [a2 horizontalAccuracy];
      uint64_t v15 = v14;
      long long v16 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", [a2 timestamp], 1, 4), "UTF8String");
      *(_DWORD *)uint64_t buf = 68290307;
      int v29 = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      id v33 = v9;
      __int16 v34 = 1025;
      int v35 = v11;
      __int16 v36 = 1025;
      int v37 = v13;
      __int16 v38 = 2050;
      uint64_t v39 = v15;
      __int16 v40 = 2082;
      __int16 v41 = v16;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate, an estimated location with fresh locations\", \"date\":%{public, location:escape_only}s, \"lat\":%{private}d, \"lon\":%{private}d, \"accuracy\":\"%{public}f\", \"loc.date\":%{public, location:escape_only}s}", buf, 0x3Cu);
    }
    double v17 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331BA8);
    }
    double v18 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      double v19 = [(NSString *)+[NSDateFormatter localizedStringFromDate:*(void *)(a1 + 32) dateStyle:1 timeStyle:4] UTF8String];
      [*(id *)(a1 + 40) coordinate];
      int v21 = (int)v20;
      [*(id *)(a1 + 40) coordinate];
      int v23 = (int)v22;
      [*(id *)(a1 + 40) horizontalAccuracy];
      uint64_t v25 = v24;
      uint64_t v26 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", [*(id *)(a1 + 40) timestamp], 1, 4), "UTF8String");
      *(_DWORD *)uint64_t buf = 68290307;
      int v29 = 0;
      __int16 v30 = 2082;
      uint64_t v31 = "";
      __int16 v32 = 2082;
      id v33 = v19;
      __int16 v34 = 1025;
      int v35 = v21;
      __int16 v36 = 1025;
      int v37 = v23;
      __int16 v38 = 2050;
      uint64_t v39 = v25;
      __int16 v40 = 2082;
      __int16 v41 = v26;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #location fetchEstimatedLocationAtDate with fresh locations\", \"date\":%{public, location:escape_only}s, \"lat\":%{private}d, \"lon\":%{private}d, \"accuracy\":\"%{public}f\", \"loc.date\":%{public, location:escape_only}s}", buf, 0x3Cu);
    }
    double v17 = *(void (**)(void))(*(void *)(a1 + 72) + 16);
  }
  v17();
  return [*(id *)(a1 + 48) sendEstimatedLocationMetricsAfterLocationScanWithFirstEstimatedLocation:*(void *)(a1 + 56) newLocation:*(void *)(a1 + 40) secondEstimatedLocation:a2 error:a3 timeOfInterest:*(void *)(a1 + 32) referenceTime:*(void *)(a1 + 64) responseTime:v6];
}

void sub_1015D01B8(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1015D2B9C(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1015D3DE8(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1015D3EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1015D4170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_1000A7B4C(&a16);
  sub_10013F3C4(&a12);
  _Unwind_Resume(a1);
}

void sub_1015D43A8(_Unwind_Exception *a1)
{
  sub_10013F3C4(v1);
  _Unwind_Resume(a1);
}

void sub_1015D4868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

id sub_1015D48AC(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 onDataProtectionNotification:*a2 data:*a3];
}

void sub_1015D647C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
}

void sub_1015D6A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a16;
  sub_1000A7B4C(&a21);
  sub_10013F3C4(&a19);
  _Unwind_Resume(a1);
}

void sub_1015D6DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1015D73B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a16;
  sub_1000A7B4C(&a21);
  sub_10013F3C4(&a19);
  _Unwind_Resume(a1);
}

id sub_1015D75AC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onAnalyticsTimerFired:*(void *)(*(void *)(a1 + 32) + 48)];
}

id sub_1015D7D1C(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  v7[2] = sub_1015D7DC8;
  v7[3] = &unk_102331C10;
  v7[4] = a2;
  long long v8 = v5;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  return [v4 async:v7];
}

uint64_t sub_1015D7DC8(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331C58);
  }
  size_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    id v4 = [[objc_msgSend(*(id *)(a1 + 32), "type") UTF8String];
    *(_DWORD *)uint64_t buf = 68289539;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 2049;
    uint64_t v17 = v3;
    __int16 v18 = 2081;
    id v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#rwl, send item metrics\", \"index\":%{private}ld, \"beaconType\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  long long v5 = *(void **)(a1 + 32);
  if (v5)
  {
    id v6 = [v5 type];
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331C58);
    }
    id v6 = (id)SPBeaconTypeNone;
    id v7 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#rwl, send metrics, unable to retrieve beacon information\"}", buf, 0x12u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102331C58);
      }
    }
    long long v8 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#rwl, send metrics, unable to retrieve beacon information", "{\"msg%{public}.0s\":\"#rwl, send metrics, unable to retrieve beacon information\"}", buf, 0x12u);
    }
  }
  v11[0] = [NSNumber numberWithInteger:objc_msgSend(*(id *)(a1 + 40), "decimateInteger:", *(void *)(a1 + 64), @"DurationBinned")];
  v10[1] = @"TransitsBinned";
  v11[1] = [NSNumber numberWithInteger:objc_msgSend(*(id *)(a1 + 40), "decimateInteger:", objc_msgSend(*(id *)(a1 + 48), "deviceJourneyCount"))];
  _DWORD v11[2] = @"Work";
  v10[2] = @"LOIType";
  v10[3] = @"ModelType";
  void v11[3] = @"Commute";
  void v11[4] = v6;
  void v10[4] = @"ItemType";
  _OWORD v10[5] = @"Priority";
  [*(id *)(a1 + 40) decimateDoulbe:*(double *)(a1 + 72)];
  v11[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  void v10[6] = @"PriorityBinned";
  v11[6] = +[NSNumber numberWithInteger:*(void *)(a1 + 80)];
  v10[7] = @"ParityRate";
  [*(id *)(a1 + 40) decimateDoulbe:*(double *)(a1 + 88)];
  v11[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:8];
  return AnalyticsSendEvent();
}

void sub_1015D81C4(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_1015D8308(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _checkAudioStreamState];
}

id sub_1015D8ACC(uint64_t a1, unsigned int *a2, long long *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  return [a4 _onDaemonStatusNotification:v4 data:&v6];
}

void sub_1015D8B0C(uint64_t a1, unsigned int *a2, __int16 *a3, void *a4)
{
  uint64_t v6 = *a2;
  __int16 v7 = *a3;
  sub_1000E23EC(v8, (uint64_t)(a3 + 4));
  uint64_t v12 = *((void *)a3 + 13);
  memset(v13, 0, 24);
  sub_1000DA6E8(v13, *((void *)a3 + 14), *((void *)a3 + 15), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a3 + 15) - *((void *)a3 + 14)) >> 3));
  v13[3] = *((void *)a3 + 17);
  [a4 _onWifiServiceNotification:v6 data:&v7];
  __int16 v14 = (void **)v13;
  sub_1000D7F78(&v14);
  if (v11)
  {
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_1015D8BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
}

id sub_1015D8C08(uint64_t a1, unsigned int *a2, void *a3, void *a4)
{
  return _[a4 _onDataProtectionNotification:*a2 data:*a3];
}

id sub_1015D8C1C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _checkAudioStreamState];
}

void sub_1015D8C28(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = *a2;
  v7[0] = *(unsigned char *)a3;
  sub_100997A7C((uint64_t)&v8, a3 + 8);
  uint64_t v15 = *(void *)(a3 + 112);
  int v16 = *(_DWORD *)(a3 + 120);
  [a4 _onBluetoothServiceNotification:v6 data:v7];
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
}

void sub_1015D8CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1015D99B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = [objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "silo") queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1015D9A50;
  block[3] = &unk_10229FF28;
  block[4] = a3;
  void block[5] = a2;
  block[6] = *(void *)(a1 + 32);
  dispatch_async(v6, block);
}

void sub_1015D9A50(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331CA0);
    }
    size_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void **)(a1 + 32);
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2114;
      id v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #system fail to fetch visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102331CA0);
      }
    }
    uint64_t v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      long long v5 = *(void **)(a1 + 32);
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2114;
      id v16 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #system fail to fetch visits", "{\"msg%{public}.0s\":\"#durian #system fail to fetch visits\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
    }
  }
  else
  {
    id v6 = [*(id *)(a1 + 40) firstObject];
    if (v6)
    {
      __int16 v7 = v6;
      if ([v6 entry])
      {
        -[NSDate timeIntervalSinceDate:](+[NSDate now](NSDate, "now"), "timeIntervalSinceDate:", [v7 entry]);
        if (v8 > 0.0)
        {
          if ([v7 location])
          {
            id v9 = [objc_alloc((Class)CLVisit) initWithVisit:v7];
            if (qword_102419390 != -1) {
              dispatch_once(&qword_102419390, &stru_102331CA0);
            }
            char v10 = qword_102419398;
            if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
            {
              int v11 = 68289283;
              int v12 = 0;
              __int16 v13 = 2082;
              char v14 = "";
              __int16 v15 = 2113;
              id v16 = v9;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #system fetched most recent visit\", \"visit\":%{private, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
            }
            [objc_msgSend(*(id *)(a1 + 48), "delegate") updateSystemLoiType:[objc_msgSend(objc_msgSend(v9, "_placeInference"), "userType")] isEntry:[objc_msgSend(v9, "hasDepartureDate") ^ 1]];
          }
        }
      }
    }
  }
}

id sub_1015DA00C(uint64_t a1)
{
  [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  size_t v2 = *(void **)(a1 + 32);

  return _[v2 onVehicleStateNotification];
}

void sub_1015DA138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1015DA150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331CA0);
  }
  double v8 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 134349568;
    uint64_t v13 = a2;
    __int16 v14 = 2050;
    uint64_t v15 = a3;
    __int16 v16 = 2050;
    uint64_t v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#durian received vehicle state notification - state %{public}lu; hints %{public}lu; operator state %{public}lu",
      buf,
      0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331CA0);
    }
    char v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLDurianSystemMonitor onVehicleStateNotification]_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a3 == 16) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331CA0);
    }
    id v9 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#durian attempting to call into durian service to handle vehicular state", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102331CA0);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CLDurianSystemMonitor onVehicleStateNotification]_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    [objc_msgSend(*(id *)(a1 + 32), "delegate") onVehicularState];
  }
}

void sub_1015DA5D0(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1015DA6FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_1015DA824(float a1)
{
  double v1 = a1;
  if (a1 <= 997.05) {
    return 0;
  }
  if (v1 <= 1991.55) {
    return 1;
  }
  if (a1 <= 3978.0) {
    return 2;
  }
  if (a1 <= 7981.5) {
    return 3;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331CE0);
  }
  size_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    int v5 = 68289283;
    int v6 = 0;
    __int16 v7 = 2082;
    double v8 = "";
    __int16 v9 = 2049;
    double v10 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian invalid Slope Mode Threshold raw value\", \"rawValue\":\"%{private}f\"}", (uint8_t *)&v5, 0x1Cu);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331CE0);
    }
  }
  uint64_t v3 = qword_102419398;
  uint64_t result = os_signpost_enabled((os_log_t)qword_102419398);
  if (result)
  {
    int v5 = 68289283;
    int v6 = 0;
    __int16 v7 = 2082;
    double v8 = "";
    __int16 v9 = 2049;
    double v10 = v1;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian invalid Slope Mode Threshold raw value", "{\"msg%{public}.0s\":\"#durian invalid Slope Mode Threshold raw value\", \"rawValue\":\"%{private}f\"}", (uint8_t *)&v5, 0x1Cu);
    return 0;
  }
  return result;
}

uint64_t sub_1015DAA10(float a1)
{
  return (int)(a1 / dbl_101E31330[sub_1015DA824(a1)]);
}

void sub_1015DAA4C(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1015DACF0(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_1015DADD8(uint64_t a1, void *a2)
{
  id v7 = +[RBSProcessPredicate predicateMatchingBundleIdentifier:@"com.apple.findmy"];
  [a2 setPredicates:[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1)];
  id v4 = objc_alloc_init((Class)RBSProcessStateDescriptor);
  [v4 setValues:1];
  [a2 setStateDescriptor:v4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1015DAEF0;
  void v6[3] = &unk_102318448;
  void v6[4] = *(void *)(a1 + 32);
  return [a2 setUpdateHandler:v6];
}

void sub_1015DAEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(NSObject **)(v4 + 16);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1015DAF68;
  void v6[3] = &unk_1022C6138;
  void v6[4] = v4;
  void v6[5] = a2;
  v6[6] = a4;
  void v6[7] = a3;
  dispatch_async(v5, v6);
}

id sub_1015DAF68(uint64_t a1)
{
  return _[*(id *)(a1 + 32) processMonitor:*(void *)(a1 + 40) didProvideUpdate:*(void *)(a1 + 48) forProcessHandle:*(void *)(a1 + 56)];
}

void sub_1015DB114(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

CFStringRef sub_1015DB144(int a1)
{
  CFStringRef v1 = @"<Invalid>";
  if (a1 == 2) {
    CFStringRef v1 = @"Secondary";
  }
  if (a1 == 1) {
    return @"Primary";
  }
  else {
    return v1;
  }
}

CFStringRef sub_1015DB170(unsigned int a1)
{
  if (a1 > 2) {
    return @"<Invalid>";
  }
  else {
    return off_102331EF8[(char)a1];
  }
}

void sub_1015DB598(id a1)
{
  qword_102488FA0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLDurianServiceSilo"];
}

void sub_1015DB618(id a1)
{
  if (!objc_opt_class())
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331ED8);
    }
    size_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "DurianService: not supported on this platform because Accounts.framework is not present", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_23;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419390 == -1) {
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  if (!objc_opt_class())
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102331ED8);
    }
    uint64_t v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "DurianService: not supported on this platform because AppSupport.framework is not present", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_23;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419390 == -1) {
      goto LABEL_26;
    }
    goto LABEL_28;
  }
  if (objc_opt_class()) {
    return;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  CFStringRef v1 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "DurianService: not supported on this platform because SPOwner.framework is not present", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 == -1)
    {
LABEL_26:
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "+[CLDurianService isSupported]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
      goto LABEL_23;
    }
LABEL_28:
    dispatch_once(&qword_102419390, &stru_102331ED8);
    goto LABEL_26;
  }
LABEL_23:
  byte_102488FB0 = 1;
}

id sub_1015DC220(uint64_t a1)
{
  return _[*(id *)(a1 + 32) findMyAppDidBackgroundOrExit];
}

id sub_1015DC228(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  size_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    int v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#hawkeye #firmwareUpdate stopping UARP Packet Capture - by user\"}", (uint8_t *)v4, 0x12u);
  }
  id result = (id)+[CLDurianSettings uarpPacketCaptureEnabled];
  if (result) {
    return [*(id *)(*(void *)(a1 + 32) + 64) stopPacketCapture];
  }
  return result;
}

void sub_1015EAAAC(id a1, BOOL a2)
{
  if (!a2)
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_1015F23F4(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
}

void sub_1015EB084(id a1, BOOL a2)
{
  if (!a2)
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_1015F23F4(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
}

void sub_1015EBFC0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 160), 8);
  _Unwind_Resume(a1);
}

void *sub_1015EC01C(void *result, uint64_t a2, uint64_t a3)
{
  if (result[4] == a3)
  {
    uint64_t v4 = result;
    [*(id *)(*(void *)(result[6] + 8) + 40) addObject:a2];
    id v5 = [*(id *)(v4[5] + 80) objectForKey:a2];
    return [v5 cancel];
  }
  return result;
}

void sub_1015EC35C(id a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  uint64_t v1 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    __int16 v3 = 2082;
    uint64_t v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian fetched beacons after first unlock\"}", (uint8_t *)v2, 0x12u);
  }
}

id sub_1015ED884(uint64_t a1, void *a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289283;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2113;
    id v15 = [[[objc_msgSend(objc_msgSend(a2, "uuid"), "description") substringToIndex:8];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #hawkeye starting serial number task\", \"item\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  id v5 = [a2 createFetchAISSerialNumberTask];
  if (v5) {
    return [*(id *)(a1 + 32) performTask:v5 forClient:*(void *)(a1 + 40) onDevice:a2];
  }
  id v7 = objc_alloc((Class)NSError);
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Not supported for this device type";
  return [*(id *)(a1 + 40) didFetchHawkeyeSerialNumberFromDevice:*(void *)(a1 + 48) serialNumber:[NSData data] error:[v7 init]];
}

id sub_1015EDB94(uint64_t a1, void *a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289283;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2113;
    id v15 = [[[objc_msgSend(objc_msgSend(a2, "uuid"), "description") substringToIndex:8];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #hawkeye starting current primary key task\", \"item\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  id v5 = [a2 createFetchCurrentPrimaryKeyTask];
  if (v5) {
    return [*(id *)(a1 + 32) performTask:v5 forClient:*(void *)(a1 + 40) onDevice:a2];
  }
  id v7 = objc_alloc((Class)NSError);
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Not supported for this device type";
  return [*(id *)(a1 + 40) didFetchHawkeyeSerialNumberFromDevice:*(void *)(a1 + 48) serialNumber:[NSData data] error:[v7 init]];
}

id sub_1015EDEB4(void *a1, void *a2)
{
  id v4 = [a2 createFetchiCloudIdentifierTask];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 performTask:v5 forClient:v7 onDevice:a2];
  }
  else
  {
    id v9 = objc_alloc((Class)NSError);
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    CFStringRef v11 = @"Not supported for this device type";
    return [((id)a1[5]) didFetchHawkeyeiCloudIdentifierFromDevice:a1[6] iCloudIdentifier:[+[NSData data](NSData, "data")] error:[v9 init]];
  }
}

void sub_1015EF850(id a1, BOOL a2)
{
  if (!a2)
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_1015F2430(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
}

void sub_1015EF888(id a1, BOOL a2)
{
  if (!a2)
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_1015F2430(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
}

id sub_1015EFA30(uint64_t a1)
{
  BOOL v2 = *(void **)(a1 + 32);
  id v3 = +[CLDurianTask sendUARPMessageTaskWithPayload:*(void *)(a1 + 40)];
  id v4 = [*(id *)(*(void *)(a1 + 32) + 16) deviceWithUUID:[*(id *)(a1 + 48) uuid]];

  return [v2 performTask:v3 forClient:0 onDevice:v4];
}

void sub_1015F00D8(id a1, BOOL a2)
{
  if (!a2)
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_1015F2430(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
}

id sub_1015F1404(uint64_t a1, void *a2)
{
  id v4 = [a2 createFetchAISAccessoryCategoryTask];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  uint64_t v5 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2113;
    id v15 = [[[objc_msgSend(objc_msgSend(a2, "uuid"), "description") substringToIndex:8];
    __int16 v16 = 2114;
    id v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting accessory category task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4) {
    return [*(id *)(a1 + 32) performTask:v4 forClient:*(void *)(a1 + 40) onDevice:a2];
  }
  id v7 = objc_alloc((Class)NSError);
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Not supported for this device type";
  return [*(id *)(a1 + 40) didFetchAISAccessoryCategoryFromDevice:*(void *)(a1 + 48) accessoryCategory:0 error:[[v7 init] initWithDomain:kCLErrorDomainPrivate code:6 userInfo:[[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)]]];
}

id sub_1015F187C(uint64_t a1, void *a2)
{
  id v4 = [a2 createFetchAISNetworkIdTask];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  uint64_t v5 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2113;
    id v15 = [[[objc_msgSend(objc_msgSend(a2, "uuid"), "description") substringToIndex:8];
    __int16 v16 = 2114;
    id v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting network id task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4) {
    return [*(id *)(a1 + 32) performTask:v4 forClient:*(void *)(a1 + 40) onDevice:a2];
  }
  id v7 = objc_alloc((Class)NSError);
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Not supported for this device type";
  return [*(id *)(a1 + 40) didFetchAISNetworkIDFromDevice:*(void *)(a1 + 48) networkID:0 error:[v7 init]];
}

id sub_1015F1ADC(uint64_t a1, void *a2)
{
  id v4 = [a2 createFetchAISFirmwareVersionTask];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  uint64_t v5 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2113;
    id v15 = [[[objc_msgSend(objc_msgSend(a2, "uuid"), "description") substringToIndex:8];
    __int16 v16 = 2114;
    id v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting firmware version task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4) {
    return [*(id *)(a1 + 32) performTask:v4 forClient:*(void *)(a1 + 40) onDevice:a2];
  }
  id v7 = objc_alloc((Class)NSError);
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Not supported for this device type";
  return [*(id *)(a1 + 40) didFetchAISFirmwareVersionFromDevice:*(void *)(a1 + 48) firmwareVersion:0 error:[v7 init]];
}

id sub_1015F1D3C(uint64_t a1, void *a2)
{
  id v4 = [a2 createFetchAISBatteryTypeTask];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  uint64_t v5 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2113;
    id v15 = [[[objc_msgSend(objc_msgSend(a2, "uuid"), "description") substringToIndex:8];
    __int16 v16 = 2114;
    id v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting battery type task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4) {
    return [*(id *)(a1 + 32) performTask:v4 forClient:*(void *)(a1 + 40) onDevice:a2];
  }
  id v7 = objc_alloc((Class)NSError);
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Not supported for this device type";
  return [*(id *)(a1 + 40) didFetchAISBatteryTypeFromDevice:*(void *)(a1 + 48) batteryType:0 error:[v7 init]];
}

id sub_1015F1F9C(uint64_t a1, void *a2)
{
  id v4 = [a2 createFetchAISBatteryLevelTask];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  uint64_t v5 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2113;
    id v15 = [[[objc_msgSend(objc_msgSend(a2, "uuid"), "description") substringToIndex:8];
    __int16 v16 = 2114;
    id v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting battery level task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4) {
    return [*(id *)(a1 + 32) performTask:v4 forClient:*(void *)(a1 + 40) onDevice:a2];
  }
  id v7 = objc_alloc((Class)NSError);
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Not supported for this device type";
  return [*(id *)(a1 + 40) didFetchAISBatteryLevelFromDevice:*(void *)(a1 + 48) batteryLevel:0 error:[v7 init]];
}

id sub_1015F21FC(uint64_t a1, void *a2)
{
  id v4 = [a2 createFetchAISSerialNumberTask];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102331ED8);
  }
  uint64_t v5 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289539;
    int v11 = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2113;
    id v15 = [[[objc_msgSend(objc_msgSend(a2, "uuid"), "description") substringToIndex:8];
    __int16 v16 = 2114;
    id v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #posh starting serial number task\", \"item\":%{private, location:escape_only}@, \"task\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  if (v4) {
    return [*(id *)(a1 + 32) performTask:v4 forClient:*(void *)(a1 + 40) onDevice:a2];
  }
  id v7 = objc_alloc((Class)NSError);
  NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
  CFStringRef v9 = @"Not supported for this device type";
  return [*(id *)(a1 + 40) didFetchAISSerialNumberFromDevice:*(void *)(a1 + 48) serialNumber:0 error:[[v7 init] initWithDomain:kCLErrorDomainPrivate code:6 userInfo:+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1)]];
}

void sub_1015F23A8(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1015F23D8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_1015F23F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1015F2430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

id sub_1015F39A4(uint64_t a1, void *a2)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id result = [a2 countByEnumeratingWithState:&v16 objects:v26 count:16];
  if (result)
  {
    id v6 = result;
    uint64_t v7 = *(void *)v17;
    *(void *)&long long v5 = 68289282;
    long long v15 = v5;
    do
    {
      NSErrorUserInfoKey v8 = 0;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(a2);
        }
        uint64_t v9 = *(void **)(*((void *)&v16 + 1) + 8 * (void)v8);
        NSErrorUserInfoKey v10 = +[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", [a2 objectForKeyedSubscript:v9, v15]);
        if (v10)
        {
          [*(id *)(a1 + 32) _sendFirmwareAsset:[v9 intValue] assetData:v10];
        }
        else
        {
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_102331F50);
          }
          int v11 = qword_102419398;
          if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
          {
            id v12 = [*(id *)(a1 + 32) _firmwareAssetTypeToString:[v9 intValue]];
            *(_DWORD *)uint64_t buf = v15;
            int v21 = 0;
            __int16 v22 = 2082;
            int v23 = "";
            __int16 v24 = 2082;
            id v25 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian FWUpdate - could not find asset on filesystem. Expected?\", \"assetType\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (qword_102419390 != -1) {
              dispatch_once(&qword_102419390, &stru_102331F50);
            }
          }
          uint64_t v13 = qword_102419398;
          if (os_signpost_enabled((os_log_t)qword_102419398))
          {
            id v14 = [*(id *)(a1 + 32) _firmwareAssetTypeToString:[v9 intValue]];
            *(_DWORD *)uint64_t buf = v15;
            int v21 = 0;
            __int16 v22 = 2082;
            int v23 = "";
            __int16 v24 = 2082;
            id v25 = v14;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian FWUpdate - could not find asset on filesystem. Expected?", "{\"msg%{public}.0s\":\"#durian FWUpdate - could not find asset on filesystem. Expected?\", \"assetType\":%{public, location:escape_only}s}", buf, 0x1Cu);
          }
        }
        NSErrorUserInfoKey v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id result = [a2 countByEnumeratingWithState:&v16 objects:v26 count:16];
      id v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_1015F47BC(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_1015F49EC(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) delegate];

  return [v1 maintenanceTimerFiredWithInterval:-1.0];
}

id sub_1015F4FA0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) releaseMaintenancePowerAssertionWithId:*(unsigned int *)(a1 + 40)];
}

void sub_1015F5354(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_1015F60F0(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

uint64_t sub_1015F6798(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

NSDictionary *sub_1015F6F5C(uint64_t a1)
{
  v3[0] = @"duration";
  v4[0] = +[NSNumber numberWithDouble:*(double *)(a1 + 40)];
  v3[1] = @"durationBin";
  v4[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  _DWORD v3[2] = @"durians";
  _DWORD v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) devices]);
  v3[3] = @"leashable";
  _OWORD v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) leashable]);
  v3[4] = @"coex";
  void v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) coex]);
  v3[5] = @"discovery";
  void v4[5] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 32) neededDiscovery]);
  v3[6] = @"tbm";
  v4[6] = +[NSNumber numberWithDouble:*(double *)(a1 + 48)];
  v3[7] = @"tbmBin";
  v4[7] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  v3[8] = @"assertion";
  [*(id *)(a1 + 32) assertionDuration];
  v4[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v3[9] = @"productName";
  v4[9] = [*(id *)(a1 + 32) deviceTypes];
  v3[10] = @"nearowner";
  v4[10] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  v3[11] = @"nearownerPct";
  v4[11] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 68)];
  void v3[12] = @"connectattempt";
  void v4[12] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 72)];
  v3[13] = @"connectattemptPct";
  v4[13] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 76)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:14];
}

NSDictionary *sub_1015F7C24(uint64_t a1)
{
  v3[0] = @"outcome";
  v3[1] = @"doneCategory";
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 80), @"outcome", @"doneCategory", @"maintainers"];
  v3[3] = @"duration";
  id v6 = +[NSNumber numberWithDouble:*(double *)(a1 + 64)];
  v3[4] = @"durationBin";
  uint64_t v7 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 84)];
  v3[5] = @"coex";
  NSErrorUserInfoKey v8 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 48) coex]);
  v3[6] = @"productName";
  id v9 = [*(id *)(a1 + 56) accessoryTypeName];
  v3[7] = @"heleConnect";
  NSErrorUserInfoKey v10 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 88)];
  v3[8] = @"lastAdvBin";
  int v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 92)];
  v3[9] = @"lastGroupMaint";
  id v12 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 96)];
  v3[10] = @"lastClassicBin";
  uint64_t v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 100)];
  v3[11] = @"loiType";
  id v14 = [*(id *)(a1 + 48) loiType];
  void v3[12] = @"proactiveAttempts";
  long long v15 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", [*(id *)(a1 + 56) numProactiveAttempts]);
  v3[13] = @"proactiveConnects";
  long long v16 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", [*(id *)(a1 + 56) numProactiveConnects]);
  void v3[14] = @"leashable";
  long long v17 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 104)];
  v3[15] = @"lastObservation";
  long long v18 = +[NSNumber numberWithInt:(int)*(double *)(a1 + 72)];
  return +[NSDictionary dictionaryWithObjects:&v4 forKeys:v3 count:16];
}

NSDictionary *sub_1015F8920(uint64_t a1)
{
  v2[1] = @"proactive";
  v3[0] = &off_102395420;
  v2[0] = @"premature";
  v3[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 32)];
  return +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
}

NSDictionary *sub_1015F8D44(uint64_t a1)
{
  v5[0] = @"lastObservation";
  v6[0] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 40)];
  v5[1] = @"numberMaterials";
  v6[1] = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
  void v5[2] = @"isDrift";
  BOOL v2 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 56)];
  v5[3] = @"deviceType";
  uint64_t v3 = *(void *)(a1 + 32);
  v6[2] = v2;
  void v6[3] = v3;
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:4];
}

NSDictionary *sub_1015F8FCC(uint64_t a1)
{
  v3[0] = @"lastObservation";
  v4[0] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 48)];
  v3[1] = @"numberBTConnectionAttempts";
  v4[1] = +[NSNumber numberWithUnsignedInteger:*(void *)(a1 + 56)];
  void v3[2] = @"connectionReason";
  v3[3] = @"deviceType";
  long long v5 = *(_OWORD *)(a1 + 32);
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

NSDictionary *sub_1015F9248(uint64_t a1)
{
  v3[0] = @"lastObservation";
  v4[0] = +[NSNumber numberWithInt:(int)*(double *)(a1 + 48)];
  v3[1] = @"driftMaterial";
  v4[1] = +[NSNumber numberWithInt:*(unsigned char *)(a1 + 56) == 0];
  void v3[2] = @"connectionReason";
  v3[3] = @"deviceType";
  long long v5 = *(_OWORD *)(a1 + 32);
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:4];
}

NSDictionary *sub_1015F946C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v3 = @"firmwareVersion";
  uint64_t v4 = v1;
  return +[NSDictionary dictionaryWithObjects:&v4 forKeys:&v3 count:1];
}

NSDictionary *sub_1015F9838(uint64_t a1)
{
  v14[0] = @"BOMAccelCount";
  v15[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) utAccelCount]);
  v14[1] = @"BOMSoundCount";
  v15[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) bomSoundCount]);
  _OWORD v14[2] = @"bootR1Time";
  [*(id *)(a1 + 32) bootR1Time];
  _OWORD v15[2] = +[NSNumber numberWithInt:(int)v2];
  void v14[3] = @"dualConnectionLeashedTime";
  [*(id *)(a1 + 32) dualLeashedTime];
  void v15[3] = +[NSNumber numberWithInt:(int)v3];
  v14[4] = @"dualConnectionTime";
  [*(id *)(a1 + 32) dualConnTime];
  v15[4] = +[NSNumber numberWithInt:(int)v4];
  v14[5] = @"leashedTime";
  [*(id *)(a1 + 32) leashedTime];
  v15[5] = +[NSNumber numberWithInt:(int)v5];
  _OWORD v14[6] = @"multiLeashedTime";
  [*(id *)(a1 + 32) multiLeashedTime];
  v15[6] = +[NSNumber numberWithInt:(int)v6];
  v14[7] = @"multiTime";
  [*(id *)(a1 + 32) multiTimeV2];
  v15[7] = +[NSNumber numberWithInt:(int)v7];
  unsigned char v14[8] = @"nearOwnerTime";
  [*(id *)(a1 + 32) nearOwnerTimeV2];
  v15[8] = +[NSNumber numberWithInt:(int)v8];
  v14[9] = @"ownerPlaySoundLongCount";
  v15[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) ownerLongSoundCount]);
  void v14[10] = @"ownerPlaySoundShortCount";
  v15[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) ownerShortSoundCount]);
  void v14[11] = @"pairedDeviceFirmwareVersion";
  v14[12] = @"pairedDeviceID";
  long long v16 = *(_OWORD *)(a1 + 40);
  v14[13] = @"playSoundLongUTCount";
  long long v17 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) utLongSoundCount]);
  v14[14] = @"playSoundShortUTCount";
  long long v18 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) utShortSoundCount]);
  v14[15] = @"rangingTime";
  [*(id *)(a1 + 32) rangingTime];
  long long v19 = +[NSNumber numberWithInt:(int)v9];
  v14[16] = @"singleConnectionTime";
  [*(id *)(a1 + 32) singleConnTime];
  double v20 = +[NSNumber numberWithInt:(int)v10];
  v14[17] = @"wildTime";
  [*(id *)(a1 + 32) wildTime];
  int v21 = +[NSNumber numberWithInt:(int)v11];
  v14[18] = @"observationDurationFW";
  [*(id *)(a1 + 32) lastClear];
  __int16 v22 = +[NSNumber numberWithInt:(int)v12];
  return +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:19];
}

void sub_1015FA444(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

CFStringRef sub_1015FA474(int a1)
{
  if (a1 > 767)
  {
    if (a1 <= 771)
    {
      if (a1 == 768) {
        return @"Posh Start Sound";
      }
      if (a1 == 769) {
        return @"Posh Stop Sound";
      }
    }
    else
    {
      switch(a1)
      {
        case 772:
          return @"Posh Non-Owner Start Aggressive Advertising";
        case 794:
          return @"Posh Non-Owner Start Playing Short Sound";
        case 1028:
          return @"Posh Fetch Serial Number";
      }
    }
LABEL_24:
    if (a1 <= 766)
    {
      if (a1 <= 0x2FE)
      {
        switch(a1)
        {
          case 512:
            CFStringRef result = @"Start Sound";
            break;
          case 513:
LABEL_93:
            CFStringRef result = @"Stop Sound";
            break;
          case 514:
            CFStringRef result = @"Persistent Connection Status";
            break;
          case 515:
            CFStringRef result = @"Nearby Timeout";
            break;
          case 516:
LABEL_94:
            CFStringRef result = @"Unpair";
            break;
          case 517:
            CFStringRef result = @"Configure Separated State";
            break;
          case 518:
            CFStringRef result = @"Latch Separated Key";
            break;
          case 519:
LABEL_95:
            CFStringRef result = @"Set Max Connections";
            break;
          case 520:
            CFStringRef result = @"Set UTC";
            break;
          case 521:
LABEL_96:
            CFStringRef result = @"Get Multi Status";
            break;
          case 522:
LABEL_97:
            CFStringRef result = @"Unknown";
            break;
          case 523:
            CFStringRef result = @"Command Response";
            break;
          case 524:
            CFStringRef result = @"Multi Status Response";
            break;
          case 525:
            CFStringRef result = @"Sound Complete";
            break;
          case 526:
            CFStringRef result = @"Latch Wild Key";
            break;
          case 527:
            CFStringRef result = @"Start AggAdv";
            break;
          case 528:
            CFStringRef result = @"Stop AggAdv";
            break;
          case 529:
            CFStringRef result = @"Fetch TxPower";
            break;
          case 530:
            CFStringRef result = @"TxPower Response";
            break;
          case 531:
            CFStringRef result = @"Start Short Sound";
            break;
          case 532:
            CFStringRef result = @"AggAdv Complete";
            break;
          case 533:
            CFStringRef result = @"Fetch ProductData";
            break;
          case 534:
            CFStringRef result = @"Fetch ManufacturerName";
            break;
          case 535:
            CFStringRef result = @"Fetch ModelName";
            break;
          case 536:
            CFStringRef result = @"Fetch AccessoryCategory";
            break;
          case 537:
            CFStringRef result = @"Fetch AccessoryCapabilities";
            break;
          case 538:
            CFStringRef result = @"Fetch FirmwareVersion";
            break;
          case 539:
            CFStringRef result = @"Fetch FindMyVersion";
            break;
          case 540:
            CFStringRef result = @"Fetch BatteryType";
            break;
          case 541:
            CFStringRef result = @"Fetch BatteryLevel";
            break;
          case 542:
            CFStringRef result = @"ProductData Response";
            break;
          case 543:
            CFStringRef result = @"ManufacturerName Response";
            break;
          case 544:
            CFStringRef result = @"ModelName Response";
            break;
          case 545:
            CFStringRef result = @"AccessoryCategory Response";
            break;
          case 546:
            CFStringRef result = @"AccessoryCapabilities Response";
            break;
          case 547:
            CFStringRef result = @"FirmwareVersion Response";
            break;
          case 548:
            CFStringRef result = @"FindMyVersion Response";
            break;
          case 549:
            CFStringRef result = @"BatteryType Response";
            break;
          case 550:
            CFStringRef result = @"BatteryLevel Response";
            break;
          case 551:
            CFStringRef result = @"Get GroupStatus";
            break;
          case 552:
            CFStringRef result = @"GroupStatus Response";
            break;
          default:
            JUMPOUT(0);
        }
      }
      else
      {
        CFStringRef result = @"Acknowledge";
        switch(a1)
        {
          case 0:
            return result;
          case 1:
            CFStringRef result = @"Rose Init";
            break;
          case 2:
            CFStringRef result = @"Rose Ready";
            break;
          case 3:
            CFStringRef result = @"Rose Start Ranging";
            break;
          case 4:
            CFStringRef result = @"Rose Ranging Complete";
            break;
          case 5:
          case 9:
          case 16:
          case 17:
          case 20:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 33:
          case 35:
          case 41:
          case 44:
            goto LABEL_97;
          case 6:
            CFStringRef result = @"Rose Stop";
            break;
          case 7:
            CFStringRef result = @"Get Firmware Version";
            break;
          case 8:
            goto LABEL_93;
          case 10:
            CFStringRef result = @"Leashing";
            break;
          case 11:
            goto LABEL_95;
          case 12:
            goto LABEL_96;
          case 13:
            CFStringRef result = @"Set Obfuscated Identifier";
            break;
          case 14:
            CFStringRef result = @"Set Mutex";
            break;
          case 15:
            CFStringRef result = @"Set Near Owner Timeout";
            break;
          case 18:
            CFStringRef result = @"Get Firmware Version (Deprecated)";
            break;
          case 19:
            goto LABEL_94;
          case 21:
            CFStringRef result = @"Rose Set Paramaters";
            break;
          case 22:
            CFStringRef result = @"Rose Stop Ranging";
            break;
          case 23:
            CFStringRef result = @"Get User Stats v2";
            break;
          case 24:
            CFStringRef result = @"Get User Stats (Deprecated)";
            break;
          case 25:
            CFStringRef result = @"Get User Stats v1";
            break;
          case 32:
            CFStringRef result = @"Abort FWDL";
            break;
          case 34:
            CFStringRef result = @"Rose Error";
            break;
          case 36:
            CFStringRef result = @"Rose P2P Timestamp";
            break;
          case 37:
            CFStringRef result = @"Rose Debug P2P Timestamp";
            break;
          case 38:
            CFStringRef result = @"Set Tag Type";
            break;
          case 39:
            CFStringRef result = @"Get Battery Status";
            break;
          case 40:
            CFStringRef result = @"Play Sound Sequence";
            break;
          case 42:
            CFStringRef result = @"Set Wild Mode Configuration";
            break;
          case 43:
            CFStringRef result = @"Roll Wild Key";
            break;
          case 45:
            CFStringRef result = @"Set Absolute Wild Mode Configuration";
            break;
          default:
            switch(a1)
            {
              case 174:
                CFStringRef result = @"Fetch Current Key Index";
                break;
              case 175:
                CFStringRef result = @"Play Unauthorized Sound";
                break;
              case 177:
                CFStringRef result = @"Set Key Rotation Timeout";
                break;
              case 180:
                CFStringRef result = @"Dump Logs";
                break;
              case 181:
                CFStringRef result = @"Check Crashes";
                break;
              case 185:
                CFStringRef result = @"Induce Crash";
                break;
              case 195:
                CFStringRef result = @"Enable/Disable UT PlaySound Rate Limit";
                break;
              case 197:
                CFStringRef result = @"Set Central Reference Time";
                break;
              case 199:
                CFStringRef result = @"Set Accelerometeter Slope Mode Configuration";
                break;
              case 200:
                CFStringRef result = @"Set Accelerometer Orientation Mode Configuration";
                break;
              case 201:
                CFStringRef result = @"Get Accelerometer Slope Mode Configuration";
                break;
              case 202:
                CFStringRef result = @"Get Accelerometer Orientation Mode Configuration";
                break;
              case 203:
                CFStringRef result = @"Get Accelerometer Mode";
                break;
              case 209:
                CFStringRef result = @"Fetch ProductData AIS";
                break;
              case 210:
                CFStringRef result = @"Fetch ManufacturerName AIS";
                break;
              case 211:
                CFStringRef result = @"Fetch ModelName AIS";
                break;
              case 212:
                CFStringRef result = @"Fetch ModelColorCode AIS";
                break;
              case 213:
                CFStringRef result = @"Fetch AccessoryCategory AIS";
                break;
              case 214:
                CFStringRef result = @"Fetch AccessoryCapabilities AIS";
                break;
              case 215:
                CFStringRef result = @"Fetch FirmwareVersion AIS";
                break;
              case 216:
                CFStringRef result = @"Fetch FindMyVersion AIS";
                break;
              case 217:
                CFStringRef result = @"Fetch BatteryTyp AIS";
                break;
              case 218:
                CFStringRef result = @"Fetch BatteryLevel AIS";
                break;
              case 219:
                CFStringRef result = @"Send UARP message to accessory";
                break;
              case 220:
                CFStringRef result = @"Stop Unauthorized Sound";
                break;
              case 221:
                CFStringRef result = @"Fetch TX Power";
                break;
              default:
                goto LABEL_97;
            }
            break;
        }
      }
    }
    else if (a1 <= 1791)
    {
      switch(a1)
      {
        case 767:
          CFStringRef result = @"NACK Response";
          break;
        case 768:
        case 769:
          goto LABEL_97;
        case 770:
          CFStringRef result = @"Non-Owner Command Response";
          break;
        case 771:
          CFStringRef result = @"Non-Owner Sound Complete";
          break;
        case 772:
          CFStringRef result = @"Non-Owner Start Aggressive Advertising";
          break;
        case 773:
          CFStringRef result = @"Non-Owner TxPower";
          break;
        case 774:
          CFStringRef result = @"Non-Owner Product Data";
          break;
        case 775:
          CFStringRef result = @"Non-Owner Manufacturer Name";
          break;
        case 776:
          CFStringRef result = @"Non-Owner Model Name";
          break;
        case 777:
          CFStringRef result = @"Non-Owner Accessory Category";
          break;
        case 778:
          CFStringRef result = @"Non-Owner Accessory Capabilities";
          break;
        case 779:
          CFStringRef result = @"Non-Owner Firmware Version";
          break;
        case 780:
          CFStringRef result = @"Non-Owner FindMy Vesion";
          break;
        case 781:
          CFStringRef result = @"Non-Owner Battery Type";
          break;
        case 782:
          CFStringRef result = @"Non-Owner Battery Level";
          break;
        default:
          switch(a1)
          {
            case 1024:
              CFStringRef result = @"Get Current Primary Key";
              break;
            case 1025:
              CFStringRef result = @"Get iCloud Identifier";
              break;
            case 1026:
              CFStringRef result = @"Get Current Primary Key Response";
              break;
            case 1027:
              CFStringRef result = @"Get iCloud Identifier Response";
              break;
            case 1028:
              CFStringRef result = @"Get Serial Number";
              break;
            case 1029:
              CFStringRef result = @"Get Serial Number Response";
              break;
            case 1030:
              CFStringRef result = @"Paired Owner Command Response";
              break;
            default:
              switch(a1)
              {
                case 1280:
                  CFStringRef result = @"Key Rotation";
                  break;
                case 1281:
                  CFStringRef result = @"Retrieve Logs";
                  break;
                case 1282:
                  CFStringRef result = @"Log Response";
                  break;
                case 1283:
                  CFStringRef result = @"Debug Command Response";
                  break;
                case 1284:
                  CFStringRef result = @"Reset";
                  break;
                case 1285:
                  CFStringRef result = @"UT Motion Config";
                  break;
                default:
                  goto LABEL_97;
              }
              break;
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 2048:
          CFStringRef result = @"Non-Owner Ranging Command Response";
          break;
        case 2049:
          CFStringRef result = @"Non-Owner Ranging Init";
          break;
        case 2050:
          CFStringRef result = @"Non-Owner Ranging Configure";
          break;
        case 2051:
          CFStringRef result = @"Non-Owner Ranging Start";
          break;
        case 2052:
          CFStringRef result = @"Non-Owner Ranging Stop";
          break;
        case 2053:
          CFStringRef result = @"Non-Owner Ranging Deinit";
          break;
        case 2054:
          CFStringRef result = @"Non-Owner Ranging Init Response";
          break;
        case 2055:
          CFStringRef result = @"Non-Owner Ranging Configure Response";
          break;
        case 2056:
          CFStringRef result = @"Non-Owner Ranging Complete";
          break;
        case 2057:
          CFStringRef result = @"Non-Owner Ranging Timestamps";
          break;
        case 2058:
          CFStringRef result = @"Non-Owner Ranging Error";
          break;
        case 2059:
          CFStringRef result = @"Non-Owner Ranging Deinit Complete";
          break;
        case 2060:
          CFStringRef result = @"Non-Owner Ranging Motion";
          break;
        case 2061:
          CFStringRef result = @"Play Unauthorized Short Sound";
          break;
        case 2062:
          CFStringRef result = @"Play Unauthorized Short Sound Completed";
          break;
        default:
          switch(a1)
          {
            case 1792:
              CFStringRef result = @"Ranging Command Response";
              break;
            case 1793:
              CFStringRef result = @"Ranging Init";
              break;
            case 1794:
              CFStringRef result = @"Ranging Configure";
              break;
            case 1795:
              CFStringRef result = @"Ranging Start";
              break;
            case 1796:
              CFStringRef result = @"Ranging Stop";
              break;
            case 1797:
              CFStringRef result = @"Ranging Deinit";
              break;
            case 1798:
              CFStringRef result = @"Ranging Init Response";
              break;
            case 1799:
              CFStringRef result = @"Ranging Configure Response";
              break;
            case 1800:
              CFStringRef result = @"Ranging Complete";
              break;
            case 1801:
              CFStringRef result = @"Ranging Timestamps";
              break;
            case 1802:
              CFStringRef result = @"Ranging Error";
              break;
            case 1803:
              CFStringRef result = @"Ranging Deinit Complete";
              break;
            case 1804:
              CFStringRef result = @"Ranging Motion";
              break;
            default:
              goto LABEL_97;
          }
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 3:
        CFStringRef result = @"Posh Fetch Product Data";
        break;
      case 4:
        CFStringRef result = @"Posh Fetch Manufacturer Name";
        break;
      case 5:
        CFStringRef result = @"Posh Fetch Model Name";
        break;
      case 6:
        CFStringRef result = @"Posh Fetch Accessory Category";
        break;
      case 7:
        CFStringRef result = @"Posh Fetch Protocol Implementation ";
        break;
      case 8:
        CFStringRef result = @"Posh Fetch Accessory Capabilities";
        break;
      case 9:
        CFStringRef result = @"Posh Fetch Network Id";
        break;
      case 10:
        CFStringRef result = @"Posh Fetch Firmware Version ";
        break;
      case 11:
        CFStringRef result = @"Posh Fetch Battery Type";
        break;
      case 12:
        CFStringRef result = @"Posh Fetch Battery Level";
        break;
      default:
        goto LABEL_24;
    }
  }
  return result;
}

id sub_1015FD4FC(uint64_t a1, void *a2, uint64_t a3)
{
  [*(id *)(a1 + 32) appendFormat:@"<Core %u: ", [a2 unsignedIntValue]];
  [*(id *)(a1 + 32) appendString:[objc_alloc((Class)NSString) initWithData:a3 encoding:1]];
  double v5 = *(void **)(a1 + 32);

  return [v5 appendString:@">, "];
}

void sub_10160793C(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_101607BCC(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[9];
  v12[8] = a3[8];
  void v12[9] = v5;
  long long v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  long long v7 = a3[5];
  v12[4] = a3[4];
  void v12[5] = v7;
  long long v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  long long v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  long long v10 = a3[3];
  _DWORD v12[2] = a3[2];
  _OWORD v12[3] = v10;
  return [a4 onCompanionNotification:v4 data:v12];
}

void sub_101607FE4(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_101612FBC(uint64_t a1, void *a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332198);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 296), "description") substringToIndex:8];
    uint64_t v8 = 68289539;
    *(_WORD *)long long v9 = 2082;
    *(void *)&v9[2] = "";
    *(_WORD *)&v9[10] = 2113;
    *(void *)&v9[12] = v5;
    __int16 v10 = 2114;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #connection latency received callback\", \"item\":%{private, location:escape_only}@, \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x26u);
  }
  if (a2)
  {
    if ([a2 code] == (id)45)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332198);
      }
      long long v6 = qword_102419398;
      if (!os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      uint64_t v8 = 68289026;
      *(_WORD *)long long v9 = 2082;
      *(void *)&v9[2] = "";
      long long v7 = "{\"msg%{public}.0s\":\"#durian #connection latency already updated\"}";
    }
    else
    {
      if ([a2 code] != (id)46) {
        return;
      }
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332198);
      }
      long long v6 = qword_102419398;
      if (!os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      uint64_t v8 = 68289026;
      *(_WORD *)long long v9 = 2082;
      *(void *)&v9[2] = "";
      long long v7 = "{\"msg%{public}.0s\":\"#durian #connection latency different than requested\"}";
    }
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v8, 0x12u);
LABEL_17:
    [*(id *)(a1 + 32) clearLatencyTimeoutAndCancel:1, v8, *(_OWORD *)v9];
  }
}

id sub_1016135E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 208)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = *(void *)(v2 + 216) != 0;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332198);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 296), "description") substringToIndex:8];
    *(_DWORD *)uint64_t buf = 68289539;
    int v15 = 0;
    __int16 v16 = 2082;
    long long v17 = "";
    __int16 v18 = 2113;
    id v19 = v5;
    __int16 v20 = 1026;
    BOOL v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #latency timedout\", \"item\":%{private, location:escape_only}@, \"disconnect\":%{public}hhd}", buf, 0x22u);
  }
  long long v6 = *(unsigned char **)(a1 + 32);
  if (v6[224])
  {
    id v7 = objc_alloc((Class)NSError);
    uint64_t v8 = kCLErrorDomainPrivate;
    NSErrorUserInfoKey v12 = NSLocalizedDescriptionKey;
    CFStringRef v13 = sub_101640864(0xAuLL);
    long long v9 = +[NSDictionary dictionaryWithObjects:&v13 forKeys:&v12 count:1];
    id v10 = [v7 initWithDomain:v8 code:10 userInfo:v9, v12];
    [objc_msgSend(*(id *)(a1 + 32), "delegate") device:didPrepareForRangingWithError:*(void *)(a1 + 32) v10];

    long long v6 = *(unsigned char **)(a1 + 32);
  }
  if (v3)
  {
    [v6 setDisconnectionReason:@"LatencyTimeout"];
    [objc_msgSend(*(id *)(a1 + 32), "delegate") requestDisconnectionForDevice:*(void *)(a1 + 32)];
    long long v6 = *(unsigned char **)(a1 + 32);
  }
  return [v6 clearLatencyTimeoutAndCancel:0];
}

id sub_1016149E8(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332198);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 296), "description") substringToIndex:8];
    id v4 = [[[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "identifier") description] substringToIndex:8];
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 520);
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    id v10 = "";
    __int16 v11 = 2113;
    id v12 = v3;
    __int16 v13 = 2113;
    id v14 = v4;
    __int16 v15 = 2113;
    uint64_t v16 = v5;
    __int16 v17 = 2113;
    uint64_t v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian preempted task timed out\", \"item\":%{private, location:escape_only}@, \"periph\":%{private, location:escape_only}@, \"task\":%{private, location:escape_only}@, \"activetask\":%{private, location:escape_only}@}", (uint8_t *)v8, 0x3Au);
  }
  [*(id *)(a1 + 32) transitionToState:4 event:11 task:[*(id *)(a1 + 32) activeTask]];
  [*(id *)(*(void *)(a1 + 32) + 512) device:*(void *)(a1 + 32) didFailToCompleteTask:*(void *)(a1 + 40) withError:10 andDisconnect:1];
  [*(id *)(*(void *)(a1 + 32) + 64) removeObject:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) cancelTimeoutForTask:*(void *)(a1 + 40) dictionary:*(void *)(*(void *)(a1 + 32) + 80)];
  [*(id *)(a1 + 32) failAllTasksWithError:10];
  [*(id *)(a1 + 40) complete];
  return [*(id *)(a1 + 32) logTaskCounts:@"preemptedtimedout"];
}

id sub_101614C48(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332198);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [[objc_msgSend(*(id *)(*(void *)(a1 + 32) + 296), "description") substringToIndex:8];
    id v4 = [[[*(id *)(*(void *)(a1 + 32) + 24) identifier] description] substringToIndex:8];
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 520);
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    id v10 = "";
    __int16 v11 = 2113;
    id v12 = v3;
    __int16 v13 = 2113;
    id v14 = v4;
    __int16 v15 = 2113;
    uint64_t v16 = v5;
    __int16 v17 = 2113;
    uint64_t v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian task timed out\", \"item\":%{private, location:escape_only}@, \"periph\":%{private, location:escape_only}@, \"task\":%{private, location:escape_only}@, \"activetask\":%{private, location:escape_only}@}", (uint8_t *)v8, 0x3Au);
  }
  [*(id *)(a1 + 32) transitionToState:4 event:11 task:[*(id *)(a1 + 32) activeTask]];
  [*(id *)(*(void *)(a1 + 32) + 512) device:*(void *)(a1 + 32) didFailToCompleteTask:*(void *)(a1 + 40) withError:10 andDisconnect:1];
  [*(id *)(a1 + 32) failAllTasksWithError:10];
  return [*(id *)(a1 + 32) completeCurrentTask];
}

void sub_10161D514(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_10161D57C(uint64_t a1)
{
  if (qword_102419390 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      [objc_msgSend(*(id *)(a1 + 296), "description") substringToIndex:8];
      sub_10161D544();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian no timeout to cancel\", \"item\":%{private, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332198);
      }
    }
    id v3 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      [objc_msgSend(*(id *)(a1 + 296), "description") substringToIndex:8];
      sub_10161D544();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian no timeout to cancel", "{\"msg%{public}.0s\":\"#durian no timeout to cancel\", \"item\":%{private, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332198);
      }
    }
    id v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      [objc_msgSend(*(id *)(a1 + 296), "description") substringToIndex:8];
      sub_10161D544();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#durian no timeout to cancel\", \"item\":%{private, location:escape_only}@, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_102419390, &stru_102332198);
  }
}

void sub_10161DC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  objc_destroyWeak(v31);
  objc_destroyWeak(v30);
  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10161DC84(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));

  return [Weak recreateKeyReconciler];
}

id sub_10161DCB0(uint64_t a1)
{
  if (qword_102419570 != -1) {
    dispatch_once(&qword_102419570, &stru_102332350);
  }
  uint64_t v2 = qword_102419578;
  if (os_log_type_enabled((os_log_t)qword_102419578, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    __int16 v6 = 2082;
    id v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerReconciler: got first unlock\"}", (uint8_t *)v5, 0x12u);
  }
  id v3 = (id *)(a1 + 32);
  [objc_loadWeak(v3) recreateKeyReconciler];
  return [objc_loadWeak(v3) fetchAllUnknownBeaconsWithCompletion:&stru_102332278];
}

void sub_10161DDB0(id a1)
{
  if (qword_102419570 != -1) {
    dispatch_once(&qword_102419570, &stru_102332350);
  }
  uint64_t v1 = qword_102419578;
  if (os_log_type_enabled((os_log_t)qword_102419578, OS_LOG_TYPE_DEBUG))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    __int16 v3 = 2082;
    id v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLAvengerReconciler: refetched unknown beacon due to first unlock\"}", (uint8_t *)v2, 0x12u);
  }
}

void sub_10161DE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(NSObject **)(v3 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10161DF00;
  block[3] = &unk_10229FF28;
  block[4] = a2;
  void block[5] = a3;
  block[6] = v3;
  dispatch_async(v4, block);
}

id sub_10161DF00(uint64_t a1)
{
  if (qword_102419570 != -1) {
    dispatch_once(&qword_102419570, &stru_102332350);
  }
  uint64_t v2 = qword_102419578;
  if (os_log_type_enabled((os_log_t)qword_102419578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    v6[0] = 68289539;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2113;
    uint64_t v10 = v3;
    __int16 v11 = 2113;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerReconciler: created reconciler\", \"reconciler\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)v6, 0x26u);
  }
  id result = *(id *)(a1 + 32);
  *(void *)(*(void *)(a1 + 48) + 24) = result;
  return result;
}

id sub_10161E004(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));

  return [Weak fetchAllUnknownBeaconsWithCompletion:&stru_1023322C0];
}

void sub_10161E170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10161E1E8;
  block[3] = &unk_10229FF28;
  block[4] = a2;
  void block[5] = a3;
  block[6] = v3;
  dispatch_async(v4, block);
}

id sub_10161E1E8(uint64_t a1)
{
  if (qword_102419570 != -1) {
    dispatch_once(&qword_102419570, &stru_102332350);
  }
  uint64_t v2 = qword_102419578;
  if (os_log_type_enabled((os_log_t)qword_102419578, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    v6[0] = 68289539;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2113;
    uint64_t v10 = v3;
    __int16 v11 = 2113;
    uint64_t v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLAvengerReconciler: created reconciler\", \"reconciler\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)v6, 0x26u);
  }

  id result = *(id *)(a1 + 32);
  *(void *)(*(void *)(a1 + 48) + 24) = result;
  return result;
}

void sub_10161E514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10161E538(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10161E5E4;
  block[3] = &unk_102332308;
  objc_copyWeak(&v7, (id *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 40);
  block[4] = a2;
  void block[5] = v5;
  dispatch_async(v4, block);
  objc_destroyWeak(&v7);
}

uint64_t sub_10161E5E4(uint64_t a1)
{
  [objc_loadWeak((id *)(a1 + 48)) didFetchUnknownBeacons:*(void *)(a1 + 32)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_10161E81C(id a1)
{
  qword_102419578 = (uint64_t)os_log_create("com.apple.locationd.Core", "AvengerScanner");
}

void sub_10161E84C(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

CFStringRef sub_10161E9DC(unsigned int a1)
{
  if (a1 > 2) {
    return @"<Invalid>";
  }
  else {
    return off_102332730[(char)a1];
  }
}

void sub_10161F268(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 264);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10161F2DC;
  _OWORD v4[3] = &unk_10229FEB0;
  void v4[4] = v2;
  void v4[5] = a2;
  dispatch_async(v3, v4);
}

id sub_10161F2DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) didUpdatePersistentConnectionList:*(void *)(a1 + 40)];
}

id sub_10161F2E8(uint64_t a1)
{
  id v2 = [[+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration") countryCode];
  uint64_t v3 = *(void **)(a1 + 32);

  return _[v3 onGeoCountryConfigurationChanged:v2];
}

id sub_10161F330(uint64_t a1)
{
  return _[*(id *)(a1 + 32) restartActiveConnectionAttempts];
}

void sub_1016200B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101620128;
  block[3] = &unk_10229FF28;
  block[4] = a2;
  void block[5] = a3;
  void block[6] = v3;
  dispatch_async(v4, block);
}

void sub_101620128(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  id v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v8 = 68289282;
    int v9 = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian simplebeacon difference\", \"diff\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
  }
  if (*(void *)(a1 + 40))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102332710);
    }
    uint64_t v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian simplebeacon difference error\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332710);
      }
    }
    __int16 v6 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 68289282;
      int v9 = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian simplebeacon difference error", "{\"msg%{public}.0s\":\"#durian simplebeacon difference error\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v8, 0x1Cu);
    }
  }
  else
  {
    [*(id *)(a1 + 48) didReceiveBeaconDifference:*(void *)(a1 + 32)];
  }
}

void sub_101620354(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(v3 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1016203CC;
  block[3] = &unk_1022DC050;
  char v6 = a2;
  block[4] = a3;
  void block[5] = v3;
  dispatch_async(v4, block);
}

void sub_1016203CC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48) && !*(void *)(a1 + 32))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102332710);
    }
    __int16 v11 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian simplebeacon completion\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102332710);
    }
    id v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      int v3 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v4 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 1026;
      int v18 = v3;
      __int16 v19 = 2114;
      uint64_t v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian simplebeacon completion error\", \"success\":%{public}d, \"error\":%{public, location:escape_only}@}", buf, 0x22u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332710);
      }
    }
    uint64_t v5 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      int v6 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      uint64_t v16 = "";
      __int16 v17 = 1026;
      int v18 = v6;
      __int16 v19 = 2114;
      uint64_t v20 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian simplebeacon completion error", "{\"msg%{public}.0s\":\"#durian simplebeacon completion error\", \"success\":%{public}d, \"error\":%{public, location:escape_only}@}", buf, 0x22u);
    }
    dispatch_time_t v8 = dispatch_time(0, 60000000000);
    uint64_t v9 = *(void *)(a1 + 40);
    __int16 v10 = *(NSObject **)(v9 + 264);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10162068C;
    block[3] = &unk_10229FED8;
    block[4] = v9;
    dispatch_after(v8, v10, block);
  }
}

id sub_10162068C(uint64_t a1)
{
  return [*(id *)(a1 + 32) hydrateBeacons];
}

id sub_101620694(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchAllUnknownBeaconsWithCompletion:&stru_102332428];
}

uint64_t sub_1016207E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10162093C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(NSObject **)(v2 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1016209BC;
  block[3] = &unk_1022F5FB0;
  block[4] = v2;
  void block[5] = a2;
  void block[6] = *(void *)(a1 + 40);
  dispatch_async(v3, block);
}

uint64_t sub_1016209BC(uint64_t a1)
{
  [*(id *)(a1 + 32) didFetchUnknownBeacons:*(void *)(a1 + 40)];
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);

  return v2();
}

id sub_101620B40(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_101620BB4;
  v3[3] = &unk_1022D7BF0;
  uint64_t v1 = *(void **)(a1 + 32);
  void v3[4] = *(void *)(a1 + 40);
  return [v1 fetchAllUnknownBeaconsWithCompletion:v3];
}

uint64_t sub_101620BB4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_101621E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

id sub_101621EAC(uint64_t a1, void *a2, unsigned char *a3)
{
  id result = [objc_msgSend(a2, "identifier") isEqual:objc_msgSend(*(id *)(a1 + 32), "uuid")];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

void sub_101623CC4(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_101623D40;
  v2[3] = &unk_1022B30F8;
  long long v3 = *(_OWORD *)(a1 + 40);
  dispatch_async(v1, v2);
}

uint64_t sub_101623D40(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_101623E30(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 264);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  _DWORD v2[2] = sub_101623EAC;
  v2[3] = &unk_1022B30F8;
  long long v3 = *(_OWORD *)(a1 + 40);
  dispatch_async(v1, v2);
}

uint64_t sub_101623EAC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

int64_t sub_101624728(id a1, CLDurianDevice *a2, CLDurianDevice *a3)
{
  unint64_t v5 = [(CLDurianDevice *)a2 lastReconciliationTime];
  if (v5 < [(CLDurianDevice *)a3 lastReconciliationTime]
    && [(CLDurianDevice *)a2 lastReconciliationTime])
  {
    return -1;
  }
  unint64_t v7 = [(CLDurianDevice *)a2 lastReconciliationTime];
  return v7 > [(CLDurianDevice *)a3 lastReconciliationTime]
      || [(CLDurianDevice *)a2 lastReconciliationTime] == 0;
}

id sub_101624A24(uint64_t a1)
{
  return _[*(id *)(a1 + 32) recheckDevicesAfterDiscovery];
}

id sub_101627010(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateConnectionStateForDevice:*(void *)(a1 + 40)];
}

void sub_101627D00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(NSObject **)(v2 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101627D88;
  block[3] = &unk_1022DD4D0;
  block[4] = v2;
  void block[5] = a2;
  long long v5 = *(_OWORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  dispatch_async(v3, block);
}

id sub_101627D88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) didFetchBeaconGroup:*(void *)(a1 + 40) connectedDeviceAddress:*(void *)(a1 + 48) device:*(void *)(a1 + 56) state:*(void *)(a1 + 64)];
}

id sub_101629B00(uint64_t a1)
{
  return _[*(id *)(a1 + 32) performProactiveMaintenanceOnDevice:*(void *)(a1 + 40)];
}

id sub_10162C0C0(id *a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  uint64_t v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [[[a1[4] uuid] description] substringToIndex:8];
    id v4 = [[[a1[5] identifier] description] substringToIndex:8];
    v6[0] = 68289539;
    v6[1] = 0;
    __int16 v7 = 2082;
    dispatch_time_t v8 = "";
    __int16 v9 = 2113;
    id v10 = v3;
    __int16 v11 = 2113;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #connection peripheral timed out\", \"item\":%{private, location:escape_only}@, \"periph\":%{private, location:escape_only}@}", (uint8_t *)v6, 0x26u);
  }
  [a1[6] failedToConnectToPossiblePeripheral:a1[5] withErrorCode:-1];
  return [*((id *)a1[6] + 28) removeObjectForKey:a1[5]];
}

id sub_10162C4F0(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 232) = 2;
  return [*(id *)(a1 + 32) completeTokenFetchForDevice:*(void *)(a1 + 40)];
}

id sub_10162CAD0(uint64_t a1)
{
  return [*(id *)(a1 + 32) connectToDevice:*(void *)(a1 + 40) withPeripheral:*(void *)(a1 + 48) forcedTimeout:0];
}

void sub_10162E568(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102332710);
    }
    uint64_t v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [[[*(id *)(a1 + 32) uuid] description] substringToIndex:8];
      [a2 coordinate];
      int v7 = (int)v6;
      [a2 coordinate];
      int v9 = (int)v8;
      [a2 horizontalAccuracy];
      uint64_t v11 = v10;
      id v12 = [(NSString *)+[NSDateFormatter localizedStringFromDate:*(void *)(a1 + 40) dateStyle:1 timeStyle:4] UTF8String];
      int v19 = 68290563;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2113;
      id v24 = v5;
      __int16 v25 = 1025;
      int v26 = v7;
      __int16 v27 = 1025;
      int v28 = v9;
      __int16 v29 = 2050;
      uint64_t v30 = v11;
      __int16 v31 = 2082;
      __int16 v32 = v12;
      __int16 v33 = 2082;
      __int16 v34 = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", [a2 timestamp], 1, 4), "UTF8String");
      uint64_t v13 = "{\"msg%{public}.0s\":\"#durian leash break last location updated\", \"item\":%{private, location:escape_only"
            "}@, \"lat\":%{private}d, \"lat\":%{private}d, \"accuracy\":\"%{public}f\", \"date\":%{public, location:escap"
            "e_only}s, \"loc.date\":%{public, location:escape_only}s}";
      int v14 = v4;
      uint32_t v15 = 70;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v19, v15);
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102332710);
    }
    uint64_t v16 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
      int v19 = 68289283;
      int v20 = 0;
      __int16 v21 = 2082;
      __int16 v22 = "";
      __int16 v23 = 2113;
      id v24 = v17;
      uint64_t v13 = "{\"msg%{public}.0s\":\"#durian leash break last location update\", \"item\":%{private, location:escape_only}@}";
      int v14 = v16;
      uint32_t v15 = 28;
      goto LABEL_10;
    }
  }
  int v18 = *(void **)(*(void *)(a1 + 48) + 64);
  if (v18 != a2)
  {

    *(void *)(*(void *)(a1 + 48) + 64) = a2;
  }
}

id sub_10162E874(uint64_t a1)
{
  uint64_t v1 = *(id **)(a1 + 32);
  id v2 = [v1[21] objectForKeyedSubscript:*(void *)(a1 + 40)];

  return [v1 completeTokenFetchForDevice:v2];
}

id sub_10162EF5C(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  id v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [[[*(id *)(a1 + 32) uuid] description] substringToIndex:8];
    id v4 = [[[[*(id *)(a1 + 32) activePeripheral] identifier] description] substringToIndex:8];
    if ([*(id *)(a1 + 32) isConnected]) {
      id v5 = "YES";
    }
    else {
      id v5 = "NO";
    }
    if ([*(id *)(a1 + 32) isTaskQueueEmpty]) {
      double v6 = "YES";
    }
    else {
      double v6 = "NO";
    }
    unsigned int v7 = [*(id *)(a1 + 32) pendingDisconnect];
    LODWORD(v21) = 68290307;
    if (v7) {
      double v8 = "YES";
    }
    else {
      double v8 = "NO";
    }
    HIDWORD(v21) = 0;
    __int16 v22 = 2082;
    __int16 v23 = "";
    __int16 v24 = 2113;
    id v25 = v3;
    __int16 v26 = 2113;
    id v27 = v4;
    __int16 v28 = 2082;
    __int16 v29 = v5;
    __int16 v30 = 2082;
    __int16 v31 = v6;
    __int16 v32 = 2082;
    __int16 v33 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop backstop timed out, evaluating disconnection\", \"item\":%{private, location:escape_only}@, \"periph\":%{private, location:escape_only}@, \"isConnected\":%{public, location:escape_only}s, \"isTaskQueueEmpty\":%{public, location:escape_only}s, \"pendingDisconnect\":%{public, location:escape_only}s}", (uint8_t *)&v21, 0x44u);
  }
  int v9 = *(void **)(a1 + 32);
  if (v9)
  {
    if ([v9 pendingDisconnect])
    {
      if ([*(id *)(a1 + 32) isConnected])
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102332710);
        }
        uint64_t v10 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
        {
          id v11 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
          uint64_t v21 = 68289283;
          __int16 v22 = 2082;
          __int16 v23 = "";
          __int16 v24 = 2113;
          id v25 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop commanding disconnection backstop\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
        }
        [*(id *)(*(void *)(a1 + 40) + 240) submitUnexpectedMissingBeaconMetrics:*(void *)(a1 + 32) disconnected:1 v21];
        [*(id *)(a1 + 32) setDisconnectionReason:@"UnexpectedMissingBeacon"];
        [*(id *)(a1 + 40) requestDisconnectionForDevice:*(void *)(a1 + 32)];
      }
      else
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102332710);
        }
        int v18 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
        {
          id v19 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
          uint64_t v21 = 68289283;
          __int16 v22 = 2082;
          __int16 v23 = "";
          __int16 v24 = 2113;
          id v25 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop device already disconnected\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
        }
        [*(id *)(*(void *)(a1 + 40) + 168) removeObjectForKey:*(void *)(a1 + 48), v21];
      }
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332710);
      }
      uint64_t v16 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        id v17 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
        uint64_t v21 = 68289283;
        __int16 v22 = 2082;
        __int16 v23 = "";
        __int16 v24 = 2113;
        id v25 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop pending disconnection cancelled\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
      }
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102332710);
    }
    id v12 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      id v13 = [[[*(id *)(a1 + 32) uuid] description] substringToIndex:8];
      uint64_t v21 = 68289283;
      __int16 v22 = 2082;
      __int16 v23 = "";
      __int16 v24 = 2113;
      id v25 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #disconnectbackstop device is non-existent, nothing to disconnect\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332710);
      }
    }
    int v14 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      id v15 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
      uint64_t v21 = 68289283;
      __int16 v22 = 2082;
      __int16 v23 = "";
      __int16 v24 = 2113;
      id v25 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #disconnectbackstop device is non-existent, nothing to disconnect", "{\"msg%{public}.0s\":\"#durian #disconnectbackstop device is non-existent, nothing to disconnect\", \"item\":%{private, location:escape_only}@}", (uint8_t *)&v21, 0x1Cu);
    }
  }
  return [*(id *)(*(void *)(a1 + 40) + 248) removeObjectForKey:*(void *)(a1 + 48), v21];
}

id sub_10162FEA0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) handleKeyFetchTimeoutForDevice:*(void *)(a1 + 40)];
}

void sub_101630DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101630E40;
  block[3] = &unk_102332550;
  long long v5 = *(_OWORD *)(a1 + 40);
  uint64_t v6 = a2;
  uint64_t v7 = v2;
  uint64_t v8 = *(void *)(a1 + 56);
  dispatch_async(v3, block);
}

id sub_101630E40(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  [*(id *)(a1 + 40) intervalSinceLastSearchPartyKeyObservation];
  +[CLDurianMetricManager submitKeyFetchEvent:numberMaterials:isDrift:deviceType:](CLDurianMetricManager, "submitKeyFetchEvent:numberMaterials:isDrift:deviceType:", [*(id *)(a1 + 48) count], 1, [*(id *)(a1 + 40) prettyBeaconType], v2);
  id v3 = *(void **)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);

  return [v3 didFetchConnectionMaterial:v5 criteria:v4 forDevice:v6 error:0];
}

void sub_101630ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 264);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101630F5C;
  block[3] = &unk_102332550;
  long long v5 = *(_OWORD *)(a1 + 40);
  uint64_t v6 = a2;
  uint64_t v7 = v2;
  uint64_t v8 = *(void *)(a1 + 56);
  dispatch_async(v3, block);
}

id sub_101630F5C(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  [*(id *)(a1 + 40) intervalSinceLastSearchPartyKeyObservation];
  [CLDurianMetricManager submitKeyFetchEvent:[*(id *)(a1 + 48) count] numberMaterials:0 isDrift:objc_msgSend(*(id *)(a1 + 40), "prettyBeaconType") deviceType:v2];
  id v3 = *(void **)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);

  return [v3 didFetchConnectionMaterial:v5 criteria:v4 forDevice:v6 error:0];
}

id sub_101630FF0(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  double v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);

  return [v2 handleTokenFetchForDevice:v3 onCondition:v4];
}

void sub_1016311E8(uint64_t a1, uint64_t a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10163126C;
  _OWORD v4[3] = &unk_1022C6138;
  long long v5 = *(_OWORD *)(a1 + 32);
  double v2 = *(NSObject **)(v5 + 264);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v6 = a2;
  uint64_t v7 = v3;
  dispatch_async(v2, v4);
}

id sub_10163126C(uint64_t a1)
{
  [*(id *)(a1 + 32) cancelTokenFetchTimeoutForDevice:*(void *)(a1 + 40)];
  [*(id *)(a1 + 40) intervalSinceLastSearchPartyKeyObservation];
  [CLDurianMetricManager submitKeyFetchEvent:[*(id *)(a1 + 48) count] numberMaterials:0 isDrift:objc_msgSend(*(id *)(a1 + 40), "prettyBeaconType") deviceType:v2];
  [*(id *)(a1 + 32) didFetchConnectionMaterial:*(void *)(a1 + 48) criteria:*(void *)(a1 + 56) forDevice:*(void *)(a1 + 40) error:0];
  id result = [*(id *)(*(void *)(a1 + 32) + 160) containsObject:[*(id *)(a1 + 40) uuid]];
  if ((result & 1) == 0)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    return [v4 completeTokenFetchForDevice:v5];
  }
  return result;
}

void sub_10163133C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(*(void *)(a1 + 32) + 160) containsObject:[*(id *)(a1 + 40) uuid]];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  uint64_t v3 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [[[*(id *)(a1 + 40) uuid] description] substringToIndex:8];
    v5[0] = 68289539;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2113;
    id v9 = v4;
    __int16 v10 = 1026;
    unsigned int v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #connection new criteria\", \"item\":%{private, location:escape_only}@, \"maint\":%{public}hhd}", (uint8_t *)v5, 0x22u);
  }
  if (v2) {
    [*(id *)(a1 + 32) completeTokenFetchForDevice:*(void *)(a1 + 40)];
  }
}

void sub_101632D40(uint64_t a1, int a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2113;
    id v12 = v5;
    __int16 v13 = 2114;
    uint64_t v14 = v6;
    __int16 v15 = 2049;
    uint64_t v16 = v7;
    __int16 v17 = 1025;
    int v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian set current wild key index\", \"item\":%{private, location:escape_only}@, \"event\":%{public, location:escape_only}@, \"index\":%{private}lu, \"success\":%{private}hhd}", (uint8_t *)v8, 0x36u);
  }
}

void sub_101632F24(uint64_t a1, int a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
    uint64_t v6 = *(void *)(a1 + 40);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2113;
    id v11 = v5;
    __int16 v12 = 2049;
    uint64_t v13 = v6;
    __int16 v14 = 1025;
    int v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian set key roll interval\", \"item\":%{private, location:escape_only}@, \"interval\":%{private}lu, \"success\":%{private}hhd}", (uint8_t *)v7, 0x2Cu);
  }
}

void sub_101633118(uint64_t a1, int a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v8 = *(void *)(a1 + 40);
    id v9 = [*(id *)(a1 + 32) uuid];
    v10[0] = 68290563;
    v10[1] = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2113;
    id v14 = v5;
    __int16 v15 = 2049;
    uint64_t v16 = v8;
    __int16 v17 = 2049;
    uint64_t v18 = v6;
    __int16 v19 = 2049;
    uint64_t v20 = v7;
    __int16 v21 = 2113;
    id v22 = v9;
    __int16 v23 = 1025;
    int v24 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian set wild configuration\", \"item\":%{private, location:escape_only}@, \"base\":%{private}lu, \"interval\":%{private}lu, \"fallback\":%{private}lu, \"deviceId\":%{private, location:escape_only}@, \"success\":%{private}hhd}", (uint8_t *)v10, 0x4Au);
  }
}

void sub_101633340(uint64_t a1, int a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2113;
    id v12 = v5;
    __int16 v13 = 2049;
    uint64_t v14 = v6;
    __int16 v15 = 2113;
    uint64_t v16 = v7;
    __int16 v17 = 1025;
    int v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian set alignment uncertainty\", \"item\":%{private, location:escape_only}@, \"uncertainty\":\"%{private}f\", \"completionDate\":%{private, location:escape_only}@, \"success\":%{private}hhd}", (uint8_t *)v8, 0x36u);
  }
}

void sub_101633520(uint64_t a1, uint64_t a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [[[objc_msgSend(*(id *)(a1 + 32), "uuid") description] substringToIndex:8];
    uint64_t v6 = *(void *)(a1 + 40);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2113;
    id v11 = v5;
    __int16 v12 = 2050;
    uint64_t v13 = v6;
    __int16 v14 = 2114;
    uint64_t v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian updated battery status\", \"item\":%{private, location:escape_only}@, \"batteryStatus\":%{public}ld, \"error\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x30u);
  }
}

void sub_101633834(uint64_t a1, uint64_t a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  id v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [[[*(id *)(a1 + 32) uuid] description] substringToIndex:8];
    uint64_t v6 = *(void *)(a1 + 40);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2113;
    id v11 = v5;
    __int16 v12 = 2113;
    uint64_t v13 = v6;
    __int16 v14 = 2113;
    uint64_t v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian updated beacon state\", \"item\":%{private, location:escape_only}@, \"state\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x30u);
  }
}

id sub_101633BC0(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(*(void *)(a1 + 32) + 240) submitBeaconLocationMetric:a2 type:*(void *)(a1 + 48) timestampAdjusted:*(unsigned __int8 *)(a1 + 56) forDevice:*(void *)(a1 + 40)];
}

uint64_t sub_101633FD0(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102332710);
    }
    uint64_t v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [[objc_msgSend(*(id *)(a1 + 32), "description") substringToIndex:8];
      uint64_t v6 = *(void *)(a1 + 72);
      uint64_t v7 = [(NSString *)+[NSDateFormatter localizedStringFromDate:*(void *)(a1 + 40) dateStyle:1 timeStyle:4] UTF8String];
      __int16 v8 = [(NSString *)+[NSDateFormatter localizedStringFromDate:*(void *)(a1 + 48) dateStyle:1 timeStyle:4] UTF8String];
      [a2 coordinate];
      int v10 = (int)v9;
      [a2 coordinate];
      int v12 = (int)v11;
      [a2 horizontalAccuracy];
      uint64_t v23 = 68291075;
      *(_WORD *)int v24 = 2082;
      *(void *)&v24[2] = "";
      *(_WORD *)&_OWORD v24[10] = 2113;
      *(void *)&v24[12] = v5;
      *(_WORD *)&v24[20] = 2050;
      *(void *)&v24[22] = v6;
      *(_WORD *)&v24[30] = 2082;
      id v25 = v7;
      LOWORD(v26) = 2082;
      *(void *)((char *)&v26 + 2) = v8;
      WORD5(v26) = 1025;
      HIDWORD(v26) = v10;
      LOWORD(v27) = 1025;
      *(_DWORD *)((char *)&v27 + 2) = v12;
      HIWORD(v27) = 2050;
      uint64_t v28 = v13;
      LOWORD(v29) = 2082;
      *(void *)((char *)&v29 + 2) = -[NSString UTF8String](+[NSDateFormatter localizedStringFromDate:dateStyle:timeStyle:](NSDateFormatter, "localizedStringFromDate:dateStyle:timeStyle:", [a2 timestamp], 1, 4), "UTF8String");
      __int16 v14 = "{\"msg%{public}.0s\":\"#durian sendObservationForDevice includeLocation, YES, \", \"item\":%{private, locati"
            "on:escape_only}@, \"type\":%{public}ld, \"date\":%{public, location:escape_only}s, \"adjustedDate\":%{public"
            ", location:escape_only}s, \"lat\":%{private}d, \"lon\":%{private}d, \"accuracy\":\"%{public}f\", \"loc.date\""
            ":%{public, location:escape_only}s}";
      uint64_t v15 = v4;
      uint32_t v16 = 90;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v23, v16);
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_102332710);
    }
    uint64_t v17 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = [[objc_msgSend(*(id *)(a1 + 32), "description") substringToIndex:8];
      uint64_t v19 = *(void *)(a1 + 72);
      uint64_t v20 = [(NSString *)+[NSDateFormatter localizedStringFromDate:*(void *)(a1 + 40) dateStyle:1 timeStyle:4] UTF8String];
      __int16 v21 = [(NSString *)+[NSDateFormatter localizedStringFromDate:*(void *)(a1 + 48) dateStyle:1 timeStyle:4] UTF8String];
      uint64_t v23 = 68290051;
      *(_WORD *)int v24 = 2082;
      *(void *)&v24[2] = "";
      *(_WORD *)&_OWORD v24[10] = 2113;
      *(void *)&v24[12] = v18;
      *(_WORD *)&v24[20] = 2050;
      *(void *)&v24[22] = v19;
      *(_WORD *)&v24[30] = 2082;
      id v25 = v20;
      LOWORD(v26) = 2082;
      *(void *)((char *)&v26 + 2) = v21;
      __int16 v14 = "{\"msg%{public}.0s\":\"#durian sendObservationForDevice includeLocation, YES, location is nil.\", \"item\":%"
            "{private, location:escape_only}@, \"type\":%{public}ld, \"date\":%{public, location:escape_only}s, \"adjuste"
            "dDate\":%{public, location:escape_only}s}";
      uint64_t v15 = v17;
      uint32_t v16 = 58;
      goto LABEL_10;
    }
  }
  [*(id *)(a1 + 56) sendObservationForIdentifier:*(void *)(a1 + 32) type:*(void *)(a1 + 72) date:*(void *)(a1 + 40) location:a2 v23 v24 v25 v26 v27 v28 v29];
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, a2);
  }
  return result;
}

void sub_1016345E8(uint64_t a1, uint64_t a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [[objc_msgSend(*(id *)(a1 + 32), "description") substringToIndex:8];
    uint64_t v6 = *(void *)(a1 + 40);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    double v9 = "";
    __int16 v10 = 2113;
    id v11 = v5;
    __int16 v12 = 2113;
    uint64_t v13 = v6;
    __int16 v14 = 2113;
    uint64_t v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian updated beacon observation\", \"item\":%{private, location:escape_only}@, \"observation\":%{private, location:escape_only}@, \"error\":%{private, location:escape_only}@}", (uint8_t *)v7, 0x30u);
  }
}

void sub_1016347A0(id a1, NSSet *a2)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = [(NSSet *)a2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(a2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8 * i);
        if ([objc_msgSend(objc_msgSend(objc_msgSend(v7, "owner"), "destination"), "isEqualToString:", @"owner@localhost")][CLDurianMetricManager submitFirmwareVersionsForOwnedTag:firmwareVersion:](CLDurianMetricManager, "submitFirmwareVersionsForOwnedTag:firmwareVersion:", objc_msgSend(v7, "identifier"), objc_msgSend(v7, "systemVersion")) {
      }
        }
      id v4 = [(NSSet *)a2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
}

id sub_101634CC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) sendObservationForIdentifier:_NSConcreteStackBlock type:3221225472 date:sub_101634D44 locationDate:&unk_1023326D0 includeLocation:*(void *)(a1 + 40) locationHandler:*(void *)(a1 + 56)];
}

void sub_101634D44(uint64_t a1)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_102332710);
  }
  unsigned int v2 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    id v3 = [[objc_msgSend(*(id *)(a1 + 32), "description") substringToIndex:8];
    uint64_t v4 = *(void *)(a1 + 40);
    v5[0] = 68289539;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2113;
    id v9 = v3;
    __int16 v10 = 2050;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #companion updating companion connection event\", \"item\":%{private, location:escape_only}@, \"type\":%{public}ld}", (uint8_t *)v5, 0x26u);
  }
}

void sub_101635118(id a1)
{
  CFStringRef v1 = (const __CFString *)MGCopyAnswer();
  if (v1)
  {
    CFStringRef v2 = v1;
    if (CFEqual(v1, @"KH"))
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332710);
      }
      id v3 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        v4[0] = 68289026;
        v4[1] = 0;
        __int16 v5 = 2082;
        __int16 v6 = "";
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian - DeviceSKU is Korea\"}", (uint8_t *)v4, 0x12u);
      }
      byte_102488FC0 = 1;
    }
    CFRelease(v2);
  }
}

void sub_101635230(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

id sub_101635564(uint64_t a1)
{
  [*(id *)(a1 + 32) initializeClientRequestsViewsWithZeroValues:*(void *)(*(void *)(a1 + 32) + 56)];
  CFStringRef v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[7];
  uint64_t v4 = +[NSString stringWithUTF8String:"StartMonitor"];

  return [v2 submitClientRequestsEvent:&off_102395468 client:v3 scanType:v4];
}

const char *sub_101635924(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

id sub_101636860(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 16));

  return [Weak onAggressiveScanEnded];
}

void sub_101636E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_101636E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v5 = (id *)(a1 + 32);
  __int16 v6 = [objc_loadWeak((id *)(a1 + 32)) queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_101636F20;
  block[3] = &unk_1023327A8;
  objc_copyWeak(&v8, v5);
  void block[4] = a2;
  void block[5] = a3;
  dispatch_async(v6, block);
  objc_destroyWeak(&v8);
}

id sub_101636F20(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(a1 + 48));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);

  return _[Weak scanCompletedWithError:v3 totalRXTime:v4];
}

id sub_101636F5C(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 16));

  return [Weak onAggressiveScanStarted];
}

id sub_101636F8C(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 16));

  return _[Weak onNotOptedInBOMScanEnded];
}

id sub_1016373B8(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 16));

  return [Weak onAdvertisementBufferEmptied];
}

uint64_t sub_101637728(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

id sub_1016379FC(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 16));

  return [Weak onAggressiveScanEnded];
}

id sub_101637A2C(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 16));

  return _[Weak onUpdatedPowerState];
}

uint64_t sub_101638AD0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_101638D6C(id a1)
{
  qword_102419578 = (uint64_t)os_log_create("com.apple.locationd.Core", "AvengerScanner");
}

void sub_10163C050(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_10163DA98(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_10163E234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10163E68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10163E6B0(uint64_t a1, void *a2)
{
  id Weak = objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    if (a2)
    {
      __int16 v5 = Weak;
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332878);
      }
      __int16 v6 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        id v7 = [a2 identifier];
        uint64_t v8 = *(void *)(a1 + 40);
        int v13 = 68290051;
        __int16 v15 = 2082;
        int v14 = 0;
        uint32_t v16 = "";
        __int16 v17 = 2113;
        id v18 = v7;
        __int16 v19 = 2049;
        uint64_t v20 = v8;
        __int16 v21 = 2113;
        id v22 = [v5 lastObservedBeacon];
        __int16 v23 = 2049;
        id v24 = [v5 lastObservedType];
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#durian #companion notify connection update of companion device\", \"identifier\":%{private, location:escape_only}@, \"observedType\":%{private}ld, \"lastObservedIdentifier\":%{private, location:escape_only}@, \"lastObservedType\":%{private}ld}", (uint8_t *)&v13, 0x3Au);
      }
      id v9 = [v5 lastObservedBeacon];
      if (v9 == [a2 identifier] && objc_msgSend(v5, "lastObservedType") == *(id *)(a1 + 40))
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102332878);
        }
        __int16 v10 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
        {
          int v13 = 68289026;
          int v14 = 0;
          __int16 v15 = 2082;
          uint32_t v16 = "";
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #companion duplicated connection update of companion device\"}", (uint8_t *)&v13, 0x12u);
        }
      }
      else if ([v5 lastObservedType] == (id)1 && *(void *)(a1 + 40) == 2)
      {
        [objc_msgSend(objc_msgSend(v5, "deviceObservationDelegate"), "onObservationForDeviceWithIdentifier:type:date:", objc_msgSend(a2, "identifier"), 3, +[NSDate date](NSDate, "date"));
      }
      [v5 setLastObservedBeacon:[[objc_msgSend(objc_msgSend(a2, "identifier"), "copy") copy] autorelease]];
      [v5 setLastObservedType:*(void *)(a1 + 40)];
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_102332878);
      }
      uint64_t v11 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
      {
        int v13 = 68289026;
        int v14 = 0;
        __int16 v15 = 2082;
        uint32_t v16 = "";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian #companion received nil beacon but got companion notification, ignoring\"}", (uint8_t *)&v13, 0x12u);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_102332878);
        }
      }
      __int16 v12 = qword_102419398;
      if (os_signpost_enabled((os_log_t)qword_102419398))
      {
        int v13 = 68289026;
        int v14 = 0;
        __int16 v15 = 2082;
        uint32_t v16 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #companion received nil beacon but got companion notification, ignoring", "{\"msg%{public}.0s\":\"#durian #companion received nil beacon but got companion notification, ignoring\"}", (uint8_t *)&v13, 0x12u);
      }
    }
  }
}

void sub_10163EA98(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_10163F544(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_10163F7B8(void *a1, char *a2)
{
  if (qword_102488FE0
    && (os_unfair_lock_lock((os_unfair_lock_t)&unk_102488FE8),
        int v4 = CFDictionaryContainsValue((CFDictionaryRef)qword_102488FE0, a1),
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_102488FE8),
        v4))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023328D8);
    }
    __int16 v5 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289283;
      int v20 = 0;
      __int16 v21 = 2082;
      id v22 = "";
      __int16 v23 = 2113;
      id v24 = [[[objc_msgSend(objc_msgSend(a1, "uuid"), "description") substringToIndex:8];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian skipping crash alert display, alert already pending\", \"item\":%{private, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    __int16 v6 = a2 - 1;
    if ((unint64_t)(a2 - 1) > 3)
    {
      CFStringRef v8 = @"Crash logs were discovered on %@.";
      CFStringRef v7 = @"Durian Crash Logs Found";
    }
    else
    {
      CFStringRef v7 = off_102332938[(void)v6];
      CFStringRef v8 = off_102332958[(void)v6];
    }
    id v9 = objc_alloc_init((Class)NSMutableDictionary);
    [v9 setObject:v7 forKeyedSubscript:kCFUserNotificationAlertHeaderKey];
    [v9 setObject:@"File a Radar" forKeyedSubscript:kCFUserNotificationDefaultButtonTitleKey];
    [v9 setObject:@"Dismiss" forKeyedSubscript:kCFUserNotificationAlternateButtonTitleKey];
    if (objc_msgSend(objc_msgSend(a1, "beacon"), "name")) {
      [v9 setObject:+[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v8, @"%@", 0, [objc_msgSend(objc_msgSend(a1, "beacon"), "name")]) forKeyedSubscript];
    }
    __int16 v10 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, 0, (CFDictionaryRef)v9);

    if (v10)
    {
      CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v10, (CFUserNotificationCallBack)sub_10163FD4C, 0);
      if (RunLoopSource)
      {
        __int16 v12 = RunLoopSource;
        os_unfair_lock_lock((os_unfair_lock_t)&unk_102488FE8);
        int v13 = (__CFDictionary *)qword_102488FE0;
        if (!qword_102488FE0)
        {
          qword_102488FE0 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, 0);
          qword_102488FF0 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, 0);
          int v13 = (__CFDictionary *)qword_102488FE0;
        }
        CFDictionaryAddValue(v13, v10, a1);
        CFDictionaryAddValue((CFMutableDictionaryRef)qword_102488FF0, v10, a2);
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_102488FE8);
        int v14 = (__CFRunLoop *)sub_1001C2710();
        CFRunLoopAddSource(v14, v12, kCFRunLoopCommonModes);
        CFRelease(v12);
      }
      else
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1023328D8);
        }
        __int16 v17 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v20 = 0;
          __int16 v21 = 2082;
          id v22 = "";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian Could not create runloop source for Durian crash log detected user notification\"}", buf, 0x12u);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1023328D8);
          }
        }
        id v18 = qword_102419398;
        if (os_signpost_enabled((os_log_t)qword_102419398))
        {
          *(_DWORD *)uint64_t buf = 68289026;
          int v20 = 0;
          __int16 v21 = 2082;
          id v22 = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian Could not create runloop source for Durian crash log detected user notification", "{\"msg%{public}.0s\":\"#durian Could not create runloop source for Durian crash log detected user notification\"}", buf, 0x12u);
        }
        CFRelease(v10);
      }
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023328D8);
      }
      __int16 v15 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v20 = 0;
        __int16 v21 = 2082;
        id v22 = "";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian Could not create client Durian crash log detected user notification\"}", buf, 0x12u);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1023328D8);
        }
      }
      uint32_t v16 = qword_102419398;
      if (os_signpost_enabled((os_log_t)qword_102419398))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v20 = 0;
        __int16 v21 = 2082;
        id v22 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian Could not create client Durian crash log detected user notification", "{\"msg%{public}.0s\":\"#durian Could not create client Durian crash log detected user notification\"}", buf, 0x12u);
      }
    }
  }
}

void sub_10163FD4C(const void *a1, char a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_102488FE8);
  CFStringRef Value = (void *)CFDictionaryGetValue((CFDictionaryRef)qword_102488FE0, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102488FE8);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_102488FE8);
  __int16 v5 = (char *)CFDictionaryGetValue((CFDictionaryRef)qword_102488FF0, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102488FE8);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_102488FE8);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_102488FE0, a1);
  CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_102488FF0, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102488FE8);
  if ((a2 & 3) == 0)
  {
    id v6 = [@"tap-to-radar://new" mutableCopy];
    [v6 appendString:@"?Classification=Crash%2FHang%2FData%20Loss"];
    [v6 appendString:@"&ComponentID=989467&ComponentName=B389%20SW&ComponentVersion=App"];
    if ((unint64_t)(v5 - 1) > 3) {
      CFStringRef v7 = @"Crash logs found";
    }
    else {
      CFStringRef v7 = off_102332978[(void)(v5 - 1)];
    }
    [v6 appendString:-[NSString stringByAddingPercentEncodingWithAllowedCharacters:](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"&Title=[B389] %@ on %@", v7, [objc_msgSend(objc_msgSend(Value, "beacon"), "name") stringByAddingPercentEncodingWithAllowedCharacters:](+[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")))]);
    [v6 appendFormat:@"&Description=%@", -[NSString stringByAddingPercentEncodingWithAllowedCharacters:](+[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@ were found on %@ (%@)", v7, objc_msgSend(objc_msgSend(Value, "beacon"), "name"), objc_msgSend(Value, "uuid")), "stringByAddingPercentEncodingWithAllowedCharacters:", +[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet"))];
    CFStringRef v8 = +[NSURL URLWithString:v6];

    id v9 = +[LSApplicationWorkspace defaultWorkspace];
    [v9 openURL:v8 configuration:0 completionHandler:&stru_1023328F8];
  }
}

void sub_10163FF70(uint64_t a1)
{
  if (+[CLDurianPlatform isInternalInstall])
  {
    if (byte_102488FD0 == 1)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023328D8);
      }
      CFStringRef v2 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v19 = 0;
        __int16 v20 = 2082;
        __int16 v21 = "";
        uint64_t v3 = "{\"msg%{public}.0s\":\"#durian skipping surfacing beacon change popup, popup pending user interaction has a"
             "lready been surfaced; once dismissed a new popup will be displayed when appropriate\"}";
LABEL_29:
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, buf, 0x12u);
        return;
      }
      return;
    }
    unsigned __int8 v4 = +[CLDurianSettings allowBeaconsChangedPopup];
    int v5 = +[CLDurianSettings beaconsChangedPopupBackoff];
    double Current = CFAbsoluteTimeGetCurrent();
    if ((v4 & 1) == 0)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023328D8);
      }
      CFStringRef v2 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v19 = 0;
        __int16 v20 = 2082;
        __int16 v21 = "";
        uint64_t v3 = "{\"msg%{public}.0s\":\"#durian skipping surfacing beacon change popup, popup default set to no\"}";
        goto LABEL_29;
      }
      return;
    }
    if (vabdd_f64(Current, *(double *)&qword_102479E00) <= (double)v5)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023328D8);
      }
      CFStringRef v2 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v19 = 0;
        __int16 v20 = 2082;
        __int16 v21 = "";
        uint64_t v3 = "{\"msg%{public}.0s\":\"#durian skipping surfacing beacon change popup, not enough time passed since last in"
             "teraction with surfaced popup\"}";
        goto LABEL_29;
      }
      return;
    }
    byte_102488FD0 = 1;
    if (a1 == 1) {
      CFStringRef v7 = @"%lu of your Find My accessories has been removed. Have you recently unpaired any accessories or been removed from a shared accessory?";
    }
    else {
      CFStringRef v7 = @"%lu of your Find My accessories have been removed. Have you recently unpaired any accessories or been removed from a shared accessory?";
    }
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    [v8 setObject:@"Find My Accessory List Changed" forKeyedSubscript:kCFUserNotificationAlertHeaderKey];
    [v8 setObject:@"No - File a Radar" forKeyedSubscript:kCFUserNotificationDefaultButtonTitleKey];
    [v8 setObject:@"Yes" forKeyedSubscript:kCFUserNotificationAlternateButtonTitleKey];
    [v8 setObject:+[NSString stringWithValidatedFormat:validFormatSpecifiers:error:](NSString, "stringWithValidatedFormat:validFormatSpecifiers:error:", v7, @"%lu", 0, a1) forKeyedSubscript:kCFUserNotificationAlertMessageKey];
    CFUserNotificationRef v9 = CFUserNotificationCreate(kCFAllocatorDefault, 30.0, 0, 0, (CFDictionaryRef)v8);

    if (!v9)
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023328D8);
      }
      int v13 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v19 = 0;
        __int16 v20 = 2082;
        __int16 v21 = "";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian could not create client durian beacon list changed user notification\"}", buf, 0x12u);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1023328D8);
        }
      }
      int v14 = qword_102419398;
      if (!os_signpost_enabled((os_log_t)qword_102419398)) {
        return;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v15 = "#durian could not create client durian beacon list changed user notification";
      uint32_t v16 = "{\"msg%{public}.0s\":\"#durian could not create client durian beacon list changed user notification\"}";
LABEL_45:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v15, v16, buf, 0x12u);
      return;
    }
    CFRetain(v9);
    CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v9, (CFUserNotificationCallBack)sub_1016405A8, 0);
    if (RunLoopSource)
    {
      uint64_t v11 = RunLoopSource;
      __int16 v12 = (__CFRunLoop *)sub_1001C2710();
      CFRunLoopAddSource(v12, v11, kCFRunLoopCommonModes);
      CFRelease(v11);
      CFRelease(v9);
      return;
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023328D8);
    }
    __int16 v17 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian could not create runloop source for durian beacon list updated user notification\"}", buf, 0x12u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023328D8);
      }
    }
    int v14 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      __int16 v15 = "#durian could not create runloop source for durian beacon list updated user notification";
      uint32_t v16 = "{\"msg%{public}.0s\":\"#durian could not create runloop source for durian beacon list updated user notification\"}";
      goto LABEL_45;
    }
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023328D8);
    }
    CFStringRef v2 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v19 = 0;
      __int16 v20 = 2082;
      __int16 v21 = "";
      uint64_t v3 = "{\"msg%{public}.0s\":\"#durian skipping surfacing beacon change popup\"}";
      goto LABEL_29;
    }
  }
}

void sub_1016405A8(uint64_t a1, char a2)
{
  if ((a2 & 3) != 0)
  {
    if ((a2 & 3) == 1)
    {
      qword_102479E00 = CFAbsoluteTimeGetCurrent();
      byte_102488FD0 = 0;
      sub_101640C58(1);
    }
  }
  else
  {
    qword_102479E00 = CFAbsoluteTimeGetCurrent();
    byte_102488FD0 = 0;
    sub_101640C58(0);
    id v2 = [@"tap-to-radar://new" mutableCopy];
    [v2 appendString:@"?Title=Beacon%20List%20Change%20Detected"];
    [v2 appendString:@"&Classification=Other%20Bug"];
    [v2 appendString:@"&ComponentID=996130&ComponentName=Proximity&ComponentVersion=B389"];
    [v2 appendString:@"&Reproducibility=I%20Didn't%20Try"];
    [v2 appendFormat:@"&Description=%@", [@"Did you intend to remove any accessories from Find My, or were you recently removed from any shared items? Is there any other context around your recent usage of Find My or your Find My accessories that you can provide?" stringByAddingPercentEncodingWithAllowedCharacters:+[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")]];
    uint64_t v3 = +[NSURL URLWithString:v2];

    id v4 = +[LSApplicationWorkspace defaultWorkspace];
    [v4 openURL:v3 configuration:0 completionHandler:&stru_102332918];
  }
}

NSString *sub_101640700(void *a1)
{
  if ([a1 length] != (id)6) {
    return 0;
  }
  id v2 = (unsigned __int8 *)[a1 bytes];
  return +[NSString stringWithFormat:@"%02X:%02X:%02X:%02X:%02X:%02X", *v2, v2[1], v2[2], v2[3], v2[4], v2[5]];
}

NSString *sub_101640780(void *a1)
{
  if ((unint64_t)[a1 length] < 0x10) {
    return 0;
  }
  uint64_t v3 = (unsigned __int8 *)[a1 bytes];
  return +[NSString stringWithFormat:@"%02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X", *v3, v3[1], v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], v3[9], v3[10], v3[11], v3[12], v3[13], v3[14], v3[15]];
}

uint64_t sub_10164083C()
{
  mach_continuous_time();

  return TMConvertTicksToSeconds();
}

CFStringRef sub_101640864(unint64_t a1)
{
  if (a1 > 0x65) {
    return @"Unknown";
  }
  else {
    return off_102332998[a1];
  }
}

uint64_t sub_101640888()
{
  if (qword_102488FD8 != -1) {
    dispatch_once(&qword_102488FD8, &stru_1023328B8);
  }
  return byte_102488FD1;
}

void sub_1016408CC(id a1)
{
  CFBooleanRef v1 = (const __CFBoolean *)MGCopyAnswer();
  if (v1)
  {
    CFBooleanRef v2 = v1;
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID() && CFBooleanGetValue(v2) == 1) {
      byte_102488FD1 = 1;
    }
    CFRelease(v2);
  }
}

uint64_t sub_101640950()
{
  return _os_feature_enabled_impl();
}

void sub_101640AB8(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void sub_101640AE8(id a1, NSDictionary *a2, NSError *a3)
{
  if (a3)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023328D8);
    }
    CFTypeID v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      id v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian crash detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023328D8);
      }
    }
    id v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      id v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian crash detection failed to open Tap To Radar", "{\"msg%{public}.0s\":\"#durian crash detection failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

uint64_t sub_101640C58(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  [v2 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a1) forKeyedSubscript:@"userResponse"];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1023328D8);
  }
  CFTypeID v3 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    __int16 v7 = "";
    __int16 v8 = 2114;
    id v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #metrics send beacon list change event\", \"eventData\":%{public, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
  }
  return AnalyticsSendEvent();
}

void sub_101640D84(id a1, NSDictionary *a2, NSError *a3)
{
  if (a3)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1023328D8);
    }
    CFTypeID v3 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#durian beacon list changed failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1023328D8);
      }
    }
    id v4 = qword_102419398;
    if (os_signpost_enabled((os_log_t)qword_102419398))
    {
      int v5 = 68289026;
      int v6 = 0;
      __int16 v7 = 2082;
      __int16 v8 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian beacon list changed failed to open Tap To Radar", "{\"msg%{public}.0s\":\"#durian beacon list changed failed to open Tap To Radar\"}", (uint8_t *)&v5, 0x12u);
    }
  }
}

uint64_t sub_101640EF4(uint64_t result)
{
  *(void *)uint64_t result = &off_102332CD8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_101640F1C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_101640F54(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102332CD8;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 32) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 28) = v5;
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 16) = v6;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return result;
      }
LABEL_12:
      float result = *(float *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = v3 | 8;
      *(float *)(a1 + 24) = result;
      return result;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 20) = v7;
  if ((*(unsigned char *)(a2 + 32) & 8) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_10164100C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cyclingState", *(_DWORD *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cyclingStateSummary", *(_DWORD *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "distanceTraveledOverTimeWindow", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "motionType", *(_DWORD *)(a1 + 28));
  if (*(unsigned char *)(a1 + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
LABEL_7:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016410F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v20++;
                  char v48 = *(unsigned char *)(v21 + v47);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_87:
                unint64_t v2 = v47 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_88:
              *(void *)(a1 + 8) = v24;
              goto LABEL_104;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_104;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 16) = v37;
              goto LABEL_104;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_104:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_104;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101641674(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 4u);
    if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5, 5u);
}

void *sub_101641738(void *result)
{
  *uint64_t result = &off_102332D10;
  *(void *)((char *)result + 156) = 0;
  return result;
}

void sub_101641760(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_101641798(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102332D10;
  *(void *)(a1 + 156) = 0;
  uint64_t v2 = *(void *)(a2 + 156);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v3 = 1;
    *(void *)(a1 + 156) = 1;
    *(void *)(a1 + 8) = v4;
    uint64_t v2 = *(void *)(a2 + 156);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4uLL;
    *(void *)(a1 + 156) = v3;
    *(void *)(a1 + 24) = v5;
    uint64_t v2 = *(void *)(a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2uLL;
    *(void *)(a1 + 156) = v3;
    *(void *)(a1 + 16) = v6;
    uint64_t v2 = *(void *)(a2 + 156);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_44;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_10:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_11:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_12:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_14:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  v3 |= 0x10uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 36) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_15:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_16:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(v4) = *(_DWORD *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 124) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_18:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  LODWORD(v4) = *(_DWORD *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 132) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  LODWORD(v4) = *(_DWORD *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 140) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  LODWORD(v4) = *(_DWORD *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 136) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v7 = *(_DWORD *)(a2 + 48);
  v3 |= 0x80uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 48) = v7;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_22:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  LODWORD(v4) = *(_DWORD *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 128) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  char v8 = *(unsigned char *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(void *)(a1 + 156) = v3;
  *(unsigned char *)(a1 + 152) = v8;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  int v9 = *(_DWORD *)(a2 + 148);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 148) = v9;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  LODWORD(v4) = *(_DWORD *)(a2 + 144);
  v3 |= 0x80000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 144) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x400) == 0)
  {
LABEL_26:
    if ((v2 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x800uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  char v10 = *(unsigned char *)(a2 + 153);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 156) = v3;
  *(unsigned char *)(a1 + 153) = v10;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_30:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  LODWORD(v4) = *(_DWORD *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 112) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_31:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }
LABEL_67:
  LODWORD(v4) = *(_DWORD *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 116) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_33:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }
LABEL_69:
  char v11 = *(unsigned char *)(a2 + 155);
  v3 |= 0x1000000000uLL;
  *(void *)(a1 + 156) = v3;
  *(unsigned char *)(a1 + 155) = v11;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_35:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_71;
  }
LABEL_70:
  LODWORD(v4) = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 100) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_36:
    if ((v2 & 0x200) == 0) {
      goto LABEL_37;
    }
    goto LABEL_72;
  }
LABEL_71:
  int v12 = *(_DWORD *)(a2 + 120);
  v3 |= 0x2000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 120) = v12;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_37:
    if ((v2 & 0x100) == 0) {
      goto LABEL_38;
    }
    goto LABEL_73;
  }
LABEL_72:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_38:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_74;
  }
LABEL_73:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_39:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_75;
  }
LABEL_74:
  char v13 = *(unsigned char *)(a2 + 154);
  v3 |= 0x800000000uLL;
  *(void *)(a1 + 156) = v3;
  *(unsigned char *)(a1 + 154) = v13;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_40:
    if ((v2 & 8) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_76;
  }
LABEL_75:
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  if ((*(void *)(a2 + 156) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_76:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 156) = v3 | 8;
  *(_DWORD *)(a1 + 32) = v4;
  return *(float *)&v4;
}

uint64_t sub_101641BD0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 156);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "angleChangePreImpact", *(float *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "crown", *(_DWORD *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "crownVariance", *(float *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "isFall", *(unsigned char *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "isNearFall", *(unsigned char *)(a1 + 153));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "maxAbsX", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "maxAbsY", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "maxAbsZ", *(float *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "maxJerkVM", *(float *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 92));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "minInertialZHighFreq", *(float *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "multiPeakAccelPathLengthWithPeak", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "multiPeakPathLengthDecorrelation", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "multiPeakPathLengthDelaySpread", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "multiPeakPathLengthHarmonicMean", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 2) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 2) == 0)
  {
LABEL_28:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "peakTimestamp", *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v5 & 4) == 0) {
      goto LABEL_31;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "swingAngle", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "timeto3rdZC", *(float *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "type", *(_DWORD *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_77:
  PB::TextFormatter::format(this, "withinCyclingImpactThresholds", *(unsigned char *)(a1 + 154));
  if ((*(void *)(a1 + 156) & 0x1000000000) != 0) {
LABEL_38:
  }
    PB::TextFormatter::format(this, "withinHardThresholds", *(unsigned char *)(a1 + 155));
LABEL_39:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016420B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(void *)(a1 + 156) |= 1uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_196;
            case 2u:
              *(void *)(a1 + 156) |= 4uLL;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_206;
                  }
                  unint64_t v61 = v21++;
                  char v62 = *(unsigned char *)(v22 + v61);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_205:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_206;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_205;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_206;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_206:
              *(void *)(a1 + 24) = v25;
              goto LABEL_197;
            case 3u:
              *(void *)(a1 + 156) |= 2uLL;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_211;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_210:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_211;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_210;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_211;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_211:
              *(void *)(a1 + 16) = v31;
              goto LABEL_197;
            case 4u:
              *(void *)(a1 + 156) |= 0x40uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 5u:
              *(void *)(a1 + 156) |= 0x20uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 6u:
              *(void *)(a1 + 156) |= 0x20000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 7u:
              *(void *)(a1 + 156) |= 0x2000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 8u:
              *(void *)(a1 + 156) |= 0x10000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 9u:
              *(void *)(a1 + 156) |= 0x80000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xAu:
              *(void *)(a1 + 156) |= 0x10uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xBu:
              *(void *)(a1 + 156) |= 0x8000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xCu:
              *(void *)(a1 + 156) |= 0x4000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xDu:
              *(void *)(a1 + 156) |= 0x4000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xEu:
              *(void *)(a1 + 156) |= 0x10000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0xFu:
              *(void *)(a1 + 156) |= 0x40000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x10u:
              *(void *)(a1 + 156) |= 0x20000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x11u:
              *(void *)(a1 + 156) |= 0x80uLL;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_216;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_215:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_216;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_215;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_216;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_216:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_197;
            case 0x12u:
              *(void *)(a1 + 156) |= 0x8000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x13u:
              *(void *)(a1 + 156) |= 0x200000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 152) = v40;
              goto LABEL_197;
            case 0x14u:
              *(void *)(a1 + 156) |= (unint64_t)&_mh_execute_header;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_221;
                  }
                  unint64_t v73 = v41++;
                  char v74 = *(unsigned char *)(v42 + v73);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_220:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_221;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_220;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_221;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_221:
              *(_DWORD *)(a1 + 148) = v45;
              goto LABEL_197;
            case 0x15u:
              *(void *)(a1 + 156) |= 0x80000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x16u:
              *(void *)(a1 + 156) |= 0x400uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x17u:
              *(void *)(a1 + 156) |= 0x800uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x18u:
              *(void *)(a1 + 156) |= 0x1000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x19u:
              *(void *)(a1 + 156) |= 0x400000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 153) = v48;
              goto LABEL_197;
            case 0x1Au:
              *(void *)(a1 + 156) |= 0x800000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Bu:
              *(void *)(a1 + 156) |= 0x400000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Cu:
              *(void *)(a1 + 156) |= 0x1000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Du:
              *(void *)(a1 + 156) |= 0x200000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x1Eu:
              *(void *)(a1 + 156) |= 0x1000000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *(unsigned char *)(a1 + 155) = v50;
              goto LABEL_197;
            case 0x1Fu:
              *(void *)(a1 + 156) |= 0x100000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x20u:
              *(void *)(a1 + 156) |= 0x2000000uLL;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_226;
                  }
                  unint64_t v77 = v51++;
                  char v78 = *(unsigned char *)(v52 + v77);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_225:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_226;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_225;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_226;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_226:
              *(_DWORD *)(a1 + 120) = v55;
LABEL_197:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x21u:
              *(void *)(a1 + 156) |= 0x200uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x22u:
              *(void *)(a1 + 156) |= 0x100uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x23u:
              *(void *)(a1 + 156) |= 0x800000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v58 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v57 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v58 = v57 != 0;
              }
              *(unsigned char *)(a1 + 154) = v58;
              goto LABEL_197;
            case 0x24u:
              *(void *)(a1 + 156) |= 0x40000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_150;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_195;
            case 0x25u:
              *(void *)(a1 + 156) |= 8uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_195:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_196:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_150:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_197;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_197;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101642EC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 156);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    uint64_t v4 = *(void *)(v3 + 156);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_41;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 2u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 4u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 5u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 6u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 7u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 8u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 9u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xAu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0xBu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0xCu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0xDu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0xEu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0xFu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 0x10u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 0x11u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x12u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 152), 0x13u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 0x14u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144), 0x15u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_23:
    if ((v4 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x16u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0x17u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0x18u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 153), 0x19u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_28:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 155), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0x20u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x100) == 0) {
      goto LABEL_35;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x21u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_35:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0x22u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_37;
    }
LABEL_74:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0x24u);
    if ((*(void *)(v3 + 156) & 8) == 0) {
      return result;
    }
    goto LABEL_75;
  }
LABEL_73:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 154), 0x23u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) != 0) {
    goto LABEL_74;
  }
LABEL_37:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_75:
  float v5 = *(float *)(v3 + 32);

  return PB::Writer::write(this, v5, 0x25u);
}

uint64_t sub_101643304(uint64_t result)
{
  *(void *)uint64_t result = &off_102332D48;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10164332C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101643364(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_102332D48;
  *(_DWORD *)(result + 20) = 0;
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 20) = 1;
    *(void *)(result + 8) = v3;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 20) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*(unsigned char *)(a2 + 20) & 2) != 0)
  {
LABEL_5:
    char v4 = *(unsigned char *)(a2 + 16);
    *(unsigned char *)(result + 20) = v2;
    *(unsigned char *)(result + 16) = v4;
  }
  return result;
}

uint64_t sub_1016433C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroOn", *(unsigned char *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 8));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101643444(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          BOOL v28 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v28 = v27 != 0;
        }
        *(unsigned char *)(a1 + 16) = v28;
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v3)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v25 = 0;
          if (v3 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v32 = v21++;
            char v33 = *(unsigned char *)(v22 + v32);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_47;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v25 = 0;
          }
LABEL_47:
          unint64_t v2 = v32 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_48:
        *(void *)(a1 + 8) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016436C8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(this, v5, 2u);
  }
  return result;
}

uint64_t sub_101643734(uint64_t result)
{
  *(void *)uint64_t result = &off_102332D80;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10164375C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101643794(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_102332D80;
  *(_DWORD *)(result + 52) = 0;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    __int16 v3 = 2;
    *(_WORD *)(result + 52) = 2;
    *(void *)(result + 16) = v4;
    __int16 v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_WORD *)(result + 52) = v3;
    *(void *)(result + 24) = v5;
    __int16 v2 = *(_WORD *)(a2 + 52);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 52) = v3;
    *(void *)(result + 8) = v6;
    __int16 v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 8) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 8) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 52) = v3;
  *(_DWORD *)(result + 32) = v7;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v8 = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_WORD *)(result + 52) = v3;
  *(_DWORD *)(result + 40) = v8;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *(_DWORD *)(a2 + 36);
  v3 |= 0x10u;
  *(_WORD *)(result + 52) = v3;
  *(_DWORD *)(result + 36) = v9;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x1000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  char v10 = *(unsigned char *)(a2 + 50);
  v3 |= 0x1000u;
  *(_WORD *)(result + 52) = v3;
  *(unsigned char *)(result + 50) = v10;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  char v11 = *(unsigned char *)(a2 + 44);
  v3 |= 0x40u;
  *(_WORD *)(result + 52) = v3;
  *(unsigned char *)(result + 44) = v11;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  char v12 = *(unsigned char *)(a2 + 45);
  v3 |= 0x80u;
  *(_WORD *)(result + 52) = v3;
  *(unsigned char *)(result + 45) = v12;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  char v13 = *(unsigned char *)(a2 + 46);
  v3 |= 0x100u;
  *(_WORD *)(result + 52) = v3;
  *(unsigned char *)(result + 46) = v13;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v14 = *(unsigned char *)(a2 + 47);
  v3 |= 0x200u;
  *(_WORD *)(result + 52) = v3;
  *(unsigned char *)(result + 47) = v14;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_28:
    char v16 = *(unsigned char *)(a2 + 49);
    *(_WORD *)(result + 52) = v3 | 0x800;
    *(unsigned char *)(result + 49) = v16;
    return result;
  }
LABEL_27:
  char v15 = *(unsigned char *)(a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(result + 52) = v3;
  *(unsigned char *)(result + 48) = v15;
  if ((*(_WORD *)(a2 + 52) & 0x800) != 0) {
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_10164392C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "consideredAlert", *(unsigned char *)(a1 + 44));
    __int16 v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "consideredRecovery", *(unsigned char *)(a1 + 45));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "consideredSOS", *(unsigned char *)(a1 + 46));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "droppedAlert", *(unsigned char *)(a1 + 47));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "droppedRecovery", *(unsigned char *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "droppedSOS", *(unsigned char *)(a1 + 49));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "fallTime", *(void *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "impactOperatingMode", *(_DWORD *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x1000) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isOtherStateMachineProcessingNearbyImpact", *(unsigned char *)(a1 + 50));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "refereeCyclingStateDecision", *(_DWORD *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "refereeOperatingMode", *(_DWORD *)(a1 + 40));
  if ((*(_WORD *)(a1 + 52) & 4) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 24));
LABEL_15:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101643B10(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 52) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_151;
            case 2u:
              *(_WORD *)(a1 + 52) |= 4u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_130;
                  }
                  unint64_t v67 = v20++;
                  char v68 = *(unsigned char *)(v21 + v67);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
LABEL_129:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
                goto LABEL_129;
              }
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v2 = v20 + 1;
                *((void *)this + 1) = v20 + 1;
                char v25 = *(unsigned char *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_130;
                }
                v22 += 7;
                unint64_t v20 = v2;
                BOOL v14 = v23++ > 8;
              }
              while (!v14);
              uint64_t v24 = 0;
LABEL_130:
              *(void *)(a1 + 24) = v24;
              goto LABEL_151;
            case 3u:
              *(_WORD *)(a1 + 52) |= 1u;
              unint64_t v26 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v27 = *(void *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v30 = 0;
                if (v2 <= v26) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    uint64_t v30 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  unint64_t v71 = v26++;
                  char v72 = *(unsigned char *)(v27 + v71);
                  *((void *)this + 1) = v26;
                  v30 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v30 = 0;
LABEL_134:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_135;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v30 = 0;
                }
                goto LABEL_134;
              }
              char v28 = 0;
              unsigned int v29 = 0;
              uint64_t v30 = 0;
              do
              {
                unint64_t v2 = v26 + 1;
                *((void *)this + 1) = v26 + 1;
                char v31 = *(unsigned char *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_135;
                }
                v28 += 7;
                unint64_t v26 = v2;
                BOOL v14 = v29++ > 8;
              }
              while (!v14);
              uint64_t v30 = 0;
LABEL_135:
              *(void *)(a1 + 8) = v30;
              goto LABEL_151;
            case 4u:
              *(_WORD *)(a1 + 52) |= 8u;
              unint64_t v32 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v33 = *(void *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v36 = 0;
                if (v2 <= v32) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_140;
                  }
                  unint64_t v75 = v32++;
                  char v76 = *(unsigned char *)(v33 + v75);
                  *((void *)this + 1) = v32;
                  v36 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_139:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_140;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v36) = 0;
                }
                goto LABEL_139;
              }
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v36 = 0;
              do
              {
                unint64_t v2 = v32 + 1;
                *((void *)this + 1) = v32 + 1;
                char v37 = *(unsigned char *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0) {
                  goto LABEL_140;
                }
                v34 += 7;
                unint64_t v32 = v2;
                BOOL v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_140:
              *(_DWORD *)(a1 + 32) = v36;
              goto LABEL_151;
            case 5u:
              *(_WORD *)(a1 + 52) |= 0x20u;
              unint64_t v38 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v39 = *(void *)this;
              if (v38 > 0xFFFFFFFFFFFFFFF5 || v38 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v42 = 0;
                if (v2 <= v38) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v38)
                  {
                    LODWORD(v42) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v79 = v38++;
                  char v80 = *(unsigned char *)(v39 + v79);
                  *((void *)this + 1) = v38;
                  v42 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v42) = 0;
LABEL_144:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v42) = 0;
                }
                goto LABEL_144;
              }
              char v40 = 0;
              unsigned int v41 = 0;
              uint64_t v42 = 0;
              do
              {
                unint64_t v2 = v38 + 1;
                *((void *)this + 1) = v38 + 1;
                char v43 = *(unsigned char *)(v39 + v38);
                v42 |= (unint64_t)(v43 & 0x7F) << v40;
                if ((v43 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v40 += 7;
                unint64_t v38 = v2;
                BOOL v14 = v41++ > 8;
              }
              while (!v14);
              LODWORD(v42) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 40) = v42;
              goto LABEL_151;
            case 6u:
              *(_WORD *)(a1 + 52) |= 0x10u;
              unint64_t v44 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v45 = *(void *)this;
              if (v44 > 0xFFFFFFFFFFFFFFF5 || v44 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v48 = 0;
                if (v2 <= v44) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v44)
                  {
                    LODWORD(v48) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v83 = v44++;
                  char v84 = *(unsigned char *)(v45 + v83);
                  *((void *)this + 1) = v44;
                  v48 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v48) = 0;
LABEL_149:
                    unint64_t v2 = v83 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v48) = 0;
                }
                goto LABEL_149;
              }
              char v46 = 0;
              unsigned int v47 = 0;
              uint64_t v48 = 0;
              do
              {
                unint64_t v2 = v44 + 1;
                *((void *)this + 1) = v44 + 1;
                char v49 = *(unsigned char *)(v45 + v44);
                v48 |= (unint64_t)(v49 & 0x7F) << v46;
                if ((v49 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v46 += 7;
                unint64_t v44 = v2;
                BOOL v14 = v47++ > 8;
              }
              while (!v14);
              LODWORD(v48) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 36) = v48;
LABEL_151:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 7u:
              *(_WORD *)(a1 + 52) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v51 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v50 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v51 = v50 != 0;
              }
              *(unsigned char *)(a1 + 50) = v51;
              goto LABEL_151;
            case 0xBu:
              *(_WORD *)(a1 + 52) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v54 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v53 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v54 = v53 != 0;
              }
              *(unsigned char *)(a1 + 44) = v54;
              goto LABEL_151;
            case 0xCu:
              *(_WORD *)(a1 + 52) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v56 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v55 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v56 = v55 != 0;
              }
              *(unsigned char *)(a1 + 45) = v56;
              goto LABEL_151;
            case 0xDu:
              *(_WORD *)(a1 + 52) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v58 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v57 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v58 = v57 != 0;
              }
              *(unsigned char *)(a1 + 46) = v58;
              goto LABEL_151;
            case 0x15u:
              *(_WORD *)(a1 + 52) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v60 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v59 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v60 = v59 != 0;
              }
              *(unsigned char *)(a1 + 47) = v60;
              goto LABEL_151;
            case 0x16u:
              *(_WORD *)(a1 + 52) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v62 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v61 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v62 = v61 != 0;
              }
              *(unsigned char *)(a1 + 48) = v62;
              goto LABEL_151;
            case 0x17u:
              *(_WORD *)(a1 + 52) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v64 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v63 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v64 = v63 != 0;
              }
              *(unsigned char *)(a1 + 49) = v64;
              goto LABEL_151;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_151;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016443A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 52);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 2u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 3u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 6u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 50), 7u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 44), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 45), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 46), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 48), 0x16u);
    if ((*(_WORD *)(v3 + 52) & 0x800) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 47), 0x15u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x800) == 0) {
    return result;
  }
LABEL_27:
  char v5 = *(unsigned char *)(v3 + 49);

  return PB::Writer::write(this, v5, 0x17u);
}

void *sub_101644548(void *result)
{
  *uint64_t result = &off_102332DB8;
  *(void *)((char *)result + 364) = 0;
  return result;
}

void sub_101644574(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_1016445AC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102332DB8;
  unint64_t v2 = (uint64_t *)(a1 + 364);
  *(void *)(a1 + 364) = 0;
  uint64_t v3 = (uint64_t *)(a2 + 364);
  uint64_t v4 = *(void *)(a2 + 364);
  if ((v4 & 0x40000000) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 248);
    uint64_t v5 = 0x40000000;
    uint64_t *v2 = 0x40000000;
    *(void *)(a1 + 248) = v6;
    uint64_t v4 = *v3;
    if ((*v3 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  if ((v4 & 0x80000000) != 0)
  {
LABEL_5:
    uint64_t v7 = *(void *)(a2 + 256);
    v5 |= 0x80000000uLL;
    uint64_t *v2 = v5;
    *(void *)(a1 + 256) = v7;
    uint64_t v4 = *v3;
  }
LABEL_6:
  if ((v4 & 0x80000) != 0)
  {
    uint64_t v8 = *(void *)(a2 + 160);
    v5 |= 0x80000uLL;
    uint64_t *v2 = v5;
    *(void *)(a1 + 160) = v8;
    uint64_t v4 = *v3;
    if ((*v3 & 0x100000) == 0)
    {
LABEL_8:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_52;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(a2 + 168);
  v5 |= 0x100000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 168) = v9;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v10 = *(void *)(a2 + 176);
  v5 |= 0x200000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 176) = v10;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v11 = *(void *)(a2 + 320);
  v5 |= 0x8000000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 320) = v11;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v12 = *(void *)(a2 + 344);
  v5 |= 0x40000000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 344) = v12;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v13 = *(void *)(a2 + 328);
  v5 |= 0x10000000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 328) = v13;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v14 = *(void *)(a2 + 336);
  v5 |= 0x20000000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 336) = v14;
  uint64_t v4 = *v3;
  if ((*v3 & 0x80000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t v15 = *(void *)(a2 + 352);
  v5 |= 0x80000000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 352) = v15;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v16 = *(_DWORD *)(a2 + 360);
  v5 |= 0x100000000000uLL;
  uint64_t *v2 = v5;
  *(_DWORD *)(a1 + 360) = v16;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v17 = *(void *)(a2 + 200);
  v5 |= 0x1000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 200) = v17;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t v18 = *(void *)(a2 + 224);
  v5 |= 0x8000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 224) = v18;
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t v19 = *(void *)(a2 + 208);
  v5 |= 0x2000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 208) = v19;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t v20 = *(void *)(a2 + 216);
  v5 |= 0x4000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 216) = v20;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t v21 = *(void *)(a2 + 184);
  v5 |= 0x400000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 184) = v21;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20) == 0) {
      goto LABEL_22;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t v22 = *(void *)(a2 + 192);
  v5 |= 0x800000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 192) = v22;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t v23 = *(void *)(a2 + 48);
  v5 |= 0x20uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 48) = v23;
  uint64_t v4 = *v3;
  if ((*v3 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t v24 = *(void *)(a2 + 32);
  v5 |= 8uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 32) = v24;
  uint64_t v4 = *v3;
  if ((*v3 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x40) == 0) {
      goto LABEL_25;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t v25 = *(void *)(a2 + 8);
  v5 |= 1uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 8) = v25;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t v26 = *(void *)(a2 + 56);
  v5 |= 0x40uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 56) = v26;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v27 = *(void *)(a2 + 72);
  v5 |= 0x100uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 72) = v27;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10) == 0)
  {
LABEL_27:
    if ((v4 & 0x200) == 0) {
      goto LABEL_28;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t v28 = *(void *)(a2 + 40);
  v5 |= 0x10uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 40) = v28;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200) == 0)
  {
LABEL_28:
    if ((v4 & 0x400) == 0) {
      goto LABEL_29;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t v29 = *(void *)(a2 + 80);
  v5 |= 0x200uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 80) = v29;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400) == 0)
  {
LABEL_29:
    if ((v4 & 0x800) == 0) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t v30 = *(void *)(a2 + 88);
  v5 |= 0x400uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 88) = v30;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t v31 = *(void *)(a2 + 96);
  v5 |= 0x800uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 96) = v31;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 2) == 0) {
      goto LABEL_32;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t v32 = *(void *)(a2 + 120);
  v5 |= 0x4000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 120) = v32;
  uint64_t v4 = *v3;
  if ((*v3 & 2) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t v33 = *(void *)(a2 + 16);
  v5 |= 2uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 16) = v33;
  uint64_t v4 = *v3;
  if ((*v3 & 0x8000) == 0)
  {
LABEL_33:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t v34 = *(void *)(a2 + 128);
  v5 |= 0x8000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 128) = v34;
  uint64_t v4 = *v3;
  if ((*v3 & 0x800000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t v35 = *(void *)(a2 + 288);
  v5 |= 0x800000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 288) = v35;
  uint64_t v4 = *v3;
  if ((*v3 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t v36 = *(void *)(a2 + 280);
  v5 |= 0x400000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 280) = v36;
  uint64_t v4 = *v3;
  if ((*v3 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t v37 = *(void *)(a2 + 272);
  v5 |= 0x200000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 272) = v37;
  uint64_t v4 = *v3;
  if ((*v3 & 0x100000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t v38 = *(void *)(a2 + 264);
  v5 |= (unint64_t)&_mh_execute_header;
  uint64_t *v2 = v5;
  *(void *)(a1 + 264) = v38;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t v39 = *(void *)(a2 + 240);
  v5 |= 0x20000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 240) = v39;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t v40 = *(void *)(a2 + 232);
  v5 |= 0x10000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 232) = v40;
  uint64_t v4 = *v3;
  if ((*v3 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t v41 = *(void *)(a2 + 112);
  v5 |= 0x2000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 112) = v41;
  uint64_t v4 = *v3;
  if ((*v3 & 0x10000) == 0)
  {
LABEL_41:
    if ((v4 & 4) == 0) {
      goto LABEL_42;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t v42 = *(void *)(a2 + 136);
  v5 |= 0x10000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 136) = v42;
  uint64_t v4 = *v3;
  if ((*v3 & 4) == 0)
  {
LABEL_42:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t v43 = *(void *)(a2 + 24);
  v5 |= 4uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 24) = v43;
  uint64_t v4 = *v3;
  if ((*v3 & 0x40000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t v44 = *(void *)(a2 + 152);
  v5 |= 0x40000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 152) = v44;
  uint64_t v4 = *v3;
  if ((*v3 & 0x20000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80) == 0) {
      goto LABEL_45;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t v45 = *(void *)(a2 + 144);
  v5 |= 0x20000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 144) = v45;
  uint64_t v4 = *v3;
  if ((*v3 & 0x80) == 0)
  {
LABEL_45:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t v46 = *(void *)(a2 + 64);
  v5 |= 0x80uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 64) = v46;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000) == 0)
  {
LABEL_46:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t v47 = *(void *)(a2 + 104);
  v5 |= 0x1000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 104) = v47;
  uint64_t v4 = *v3;
  if ((*v3 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t v48 = *(void *)(a2 + 312);
  v5 |= 0x4000000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 312) = v48;
  uint64_t v4 = *v3;
  if ((*v3 & 0x1000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x2000000000) == 0) {
      return result;
    }
LABEL_92:
    double result = *(double *)(a2 + 304);
    uint64_t *v2 = v5 | 0x2000000000;
    *(double *)(a1 + 304) = result;
    return result;
  }
LABEL_91:
  uint64_t v49 = *(void *)(a2 + 296);
  v5 |= 0x1000000000uLL;
  uint64_t *v2 = v5;
  *(void *)(a1 + 296) = v49;
  if ((*v3 & 0x2000000000) != 0) {
    goto LABEL_92;
  }
  return result;
}

uint64_t sub_101644ACC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = (uint64_t *)(a1 + 364);
  uint64_t v6 = *(void *)(a1 + 364);
  if (v6)
  {
    PB::TextFormatter::format(this, "alertCanceledBecauseOfAbsenceOfQuiessence", *(void *)(a1 + 8));
    uint64_t v6 = *v5;
    if ((*v5 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_52;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "alertCanceledBecauseOfActive", *(void *)(a1 + 16));
  uint64_t v6 = *v5;
  if ((*v5 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfChargerState", *(void *)(a1 + 24));
  uint64_t v6 = *v5;
  if ((*v5 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfCyclingPostImpact", *(void *)(a1 + 32));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfDecimatedLowFrequencyFFT", *(void *)(a1 + 40));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfDistanceTraveledPostImpact", *(void *)(a1 + 48));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfHighFrequencyFFT", *(void *)(a1 + 56));
  uint64_t v6 = *v5;
  if ((*v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfLockedNoMotionPre", *(void *)(a1 + 64));
  uint64_t v6 = *v5;
  if ((*v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfLowFrequencyFFT", *(void *)(a1 + 72));
  uint64_t v6 = *v5;
  if ((*v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfNumberOfPeaksFFT", *(void *)(a1 + 80));
  uint64_t v6 = *v5;
  if ((*v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v6 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfOffBody", *(void *)(a1 + 88));
  uint64_t v6 = *v5;
  if ((*v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfRepetitiveMotion", *(void *)(a1 + 96));
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfRetraction", *(void *)(a1 + 104));
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfSimilarPeaks", *(void *)(a1 + 112));
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfStand", *(void *)(a1 + 120));
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v6 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfSteps", *(void *)(a1 + 128));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v6 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristState", *(void *)(a1 + 136));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v6 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristStatePost", *(void *)(a1 + 144));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v6 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "alertCanceledBecauseOfWristStatePre", *(void *)(a1 + 152));
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v6 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "fallStatsDispatchResetOnAccelSensorTime", *(void *)(a1 + 160));
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "fallStatsDispatchRestoredOnAccelSensorTime", *(void *)(a1 + 168));
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "hkWorkoutId", *(void *)(a1 + 176));
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v6 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "impactCanceledBecauseOfExistingAlert", *(void *)(a1 + 184));
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v6 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfCyclingImpactThresholds", *(void *)(a1 + 192));
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v6 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMaxAccelNormThreshold", *(void *)(a1 + 200));
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v6 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfMultiPeaks", *(void *)(a1 + 208));
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v6 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfNaiveBayesClassifier", *(void *)(a1 + 216));
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "impactNotConsideredBecauseOfOtherHardThresholds", *(void *)(a1 + 224));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v6 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "leavingImpactBecauseOfNewImpactNewImpact", *(void *)(a1 + 232));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v6 & 0x100000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "leavingImpactBecauseOfNewImpactOldImpact", *(void *)(a1 + 240));
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000000) == 0)
  {
LABEL_32:
    if ((v6 & 0x40000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 360));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "skippedFallStatsSensorTime", *(void *)(a1 + 248));
  uint64_t v6 = *v5;
  if ((*v5 & 0x80000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "skippedGyroSensorTime", *(void *)(a1 + 256));
  uint64_t v6 = *v5;
  if ((*v5 & 0x100000000) == 0)
  {
LABEL_35:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfAbsenceOfLongLie", *(void *)(a1 + 264));
  uint64_t v6 = *v5;
  if ((*v5 & 0x200000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x400000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfActive", *(void *)(a1 + 272));
  uint64_t v6 = *v5;
  if ((*v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfStand", *(void *)(a1 + 280));
  uint64_t v6 = *v5;
  if ((*v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "sosCanceledBecauseOfSteps", *(void *)(a1 + 288));
  uint64_t v6 = *v5;
  if ((*v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "sosConsideredFallTimestamp", *(void *)(a1 + 296));
  uint64_t v6 = *v5;
  if ((*v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x4000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "sosConsideredIOSTime", *(double *)(a1 + 304));
  uint64_t v6 = *v5;
  if ((*v5 & 0x4000000000) == 0)
  {
LABEL_41:
    if ((v6 & 0x8000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "sosConsideredSensorTime", *(void *)(a1 + 312));
  uint64_t v6 = *v5;
  if ((*v5 & 0x8000000000) == 0)
  {
LABEL_42:
    if ((v6 & 0x10000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "workoutId", *(void *)(a1 + 320));
  uint64_t v6 = *v5;
  if ((*v5 & 0x10000000000) == 0)
  {
LABEL_43:
    if ((v6 & 0x20000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "workoutTransitionPause", *(void *)(a1 + 328));
  uint64_t v6 = *v5;
  if ((*v5 & 0x20000000000) == 0)
  {
LABEL_44:
    if ((v6 & 0x40000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "workoutTransitionResume", *(void *)(a1 + 336));
  uint64_t v6 = *v5;
  if ((*v5 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v6 & 0x80000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_93:
  PB::TextFormatter::format(this, "workoutTransitionStart", *(void *)(a1 + 344));
  if ((*v5 & 0x80000000000) != 0) {
LABEL_46:
  }
    PB::TextFormatter::format(this, "workoutTransitionStop", *(void *)(a1 + 352));
LABEL_47:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016450BC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void *)(a1 + 364);
    while (1)
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v10 = 0;
      unsigned int v11 = 0;
      unint64_t v12 = 0;
      while (1)
      {
        unint64_t v13 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v14 = *(unsigned char *)(v9 + v2);
        v12 |= (unint64_t)(v14 & 0x7F) << v10;
        if ((v14 & 0x80) == 0) {
          break;
        }
        v10 += 7;
        unint64_t v2 = v13;
        BOOL v15 = v11++ > 8;
        if (v15) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v12 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v12 >> 3))
      {
        case 1u:
          *v8 |= 0x40000000uLL;
          unint64_t v21 = *((void *)this + 1);
          unint64_t v22 = *((void *)this + 2);
          uint64_t v23 = *(void *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
          {
            char v375 = 0;
            unsigned int v376 = 0;
            uint64_t v26 = 0;
            if (v22 <= v21) {
              unint64_t v22 = *((void *)this + 1);
            }
            do
            {
              if (v22 == v21)
              {
                uint64_t v26 = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_648;
              }
              unint64_t v377 = v21 + 1;
              char v378 = *(unsigned char *)(v23 + v21);
              *((void *)this + 1) = v377;
              v26 |= (unint64_t)(v378 & 0x7F) << v375;
              if ((v378 & 0x80) == 0)
              {
                if (*((unsigned char *)this + 24)) {
                  uint64_t v26 = 0;
                }
                goto LABEL_648;
              }
              v375 += 7;
              unint64_t v21 = v377;
              BOOL v15 = v376++ > 8;
            }
            while (!v15);
LABEL_342:
            uint64_t v26 = 0;
          }
          else
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            while (1)
            {
              unint64_t v27 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                break;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v15 = v25++ > 8;
              if (v15) {
                goto LABEL_342;
              }
            }
          }
LABEL_648:
          *(void *)(a1 + 248) = v26;
          goto LABEL_821;
        case 2u:
          *v8 |= 0x80000000uLL;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_652;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v15 = v33++ > 8;
            }
            while (!v15);
LABEL_349:
            uint64_t v34 = 0;
            goto LABEL_652;
          }
          char v379 = 0;
          unsigned int v380 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v381 = v29 + 1;
              char v382 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v381;
              v34 |= (unint64_t)(v382 & 0x7F) << v379;
              if (v382 < 0)
              {
                v379 += 7;
                unint64_t v29 = v381;
                BOOL v15 = v380++ > 8;
                if (v15) {
                  goto LABEL_349;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_652:
          *(void *)(a1 + 256) = v34;
          goto LABEL_821;
        case 0x15u:
          *v8 |= 0x80000uLL;
          unint64_t v38 = *((void *)this + 1);
          unint64_t v39 = *((void *)this + 2);
          uint64_t v40 = *(void *)this;
          if (v38 <= 0xFFFFFFFFFFFFFFF5 && v38 + 10 <= v39)
          {
            char v41 = 0;
            unsigned int v42 = 0;
            uint64_t v43 = 0;
            do
            {
              unint64_t v44 = v38 + 1;
              *((void *)this + 1) = v38 + 1;
              char v45 = *(unsigned char *)(v40 + v38);
              v43 |= (unint64_t)(v45 & 0x7F) << v41;
              if ((v45 & 0x80) == 0) {
                goto LABEL_656;
              }
              v41 += 7;
              unint64_t v38 = v44;
              BOOL v15 = v42++ > 8;
            }
            while (!v15);
LABEL_356:
            uint64_t v43 = 0;
            goto LABEL_656;
          }
          char v383 = 0;
          unsigned int v384 = 0;
          uint64_t v43 = 0;
          if (v39 <= v38) {
            unint64_t v39 = *((void *)this + 1);
          }
          while (2)
          {
            if (v39 == v38)
            {
              uint64_t v43 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v385 = v38 + 1;
              char v386 = *(unsigned char *)(v40 + v38);
              *((void *)this + 1) = v385;
              v43 |= (unint64_t)(v386 & 0x7F) << v383;
              if (v386 < 0)
              {
                v383 += 7;
                unint64_t v38 = v385;
                BOOL v15 = v384++ > 8;
                if (v15) {
                  goto LABEL_356;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v43 = 0;
              }
            }
            break;
          }
LABEL_656:
          *(void *)(a1 + 160) = v43;
          goto LABEL_821;
        case 0x16u:
          *v8 |= 0x100000uLL;
          unint64_t v46 = *((void *)this + 1);
          unint64_t v47 = *((void *)this + 2);
          uint64_t v48 = *(void *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v51 = 0;
            do
            {
              unint64_t v52 = v46 + 1;
              *((void *)this + 1) = v46 + 1;
              char v53 = *(unsigned char *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_660;
              }
              v49 += 7;
              unint64_t v46 = v52;
              BOOL v15 = v50++ > 8;
            }
            while (!v15);
LABEL_363:
            uint64_t v51 = 0;
            goto LABEL_660;
          }
          char v387 = 0;
          unsigned int v388 = 0;
          uint64_t v51 = 0;
          if (v47 <= v46) {
            unint64_t v47 = *((void *)this + 1);
          }
          while (2)
          {
            if (v47 == v46)
            {
              uint64_t v51 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v389 = v46 + 1;
              char v390 = *(unsigned char *)(v48 + v46);
              *((void *)this + 1) = v389;
              v51 |= (unint64_t)(v390 & 0x7F) << v387;
              if (v390 < 0)
              {
                v387 += 7;
                unint64_t v46 = v389;
                BOOL v15 = v388++ > 8;
                if (v15) {
                  goto LABEL_363;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v51 = 0;
              }
            }
            break;
          }
LABEL_660:
          *(void *)(a1 + 168) = v51;
          goto LABEL_821;
        case 0x2Cu:
          *v8 |= 0x200000uLL;
          unint64_t v54 = *((void *)this + 1);
          unint64_t v55 = *((void *)this + 2);
          uint64_t v56 = *(void *)this;
          if (v54 <= 0xFFFFFFFFFFFFFFF5 && v54 + 10 <= v55)
          {
            char v57 = 0;
            unsigned int v58 = 0;
            uint64_t v59 = 0;
            do
            {
              unint64_t v60 = v54 + 1;
              *((void *)this + 1) = v54 + 1;
              char v61 = *(unsigned char *)(v56 + v54);
              v59 |= (unint64_t)(v61 & 0x7F) << v57;
              if ((v61 & 0x80) == 0) {
                goto LABEL_664;
              }
              v57 += 7;
              unint64_t v54 = v60;
              BOOL v15 = v58++ > 8;
            }
            while (!v15);
LABEL_370:
            uint64_t v59 = 0;
            goto LABEL_664;
          }
          char v391 = 0;
          unsigned int v392 = 0;
          uint64_t v59 = 0;
          if (v55 <= v54) {
            unint64_t v55 = *((void *)this + 1);
          }
          while (2)
          {
            if (v55 == v54)
            {
              uint64_t v59 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v393 = v54 + 1;
              char v394 = *(unsigned char *)(v56 + v54);
              *((void *)this + 1) = v393;
              v59 |= (unint64_t)(v394 & 0x7F) << v391;
              if (v394 < 0)
              {
                v391 += 7;
                unint64_t v54 = v393;
                BOOL v15 = v392++ > 8;
                if (v15) {
                  goto LABEL_370;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v59 = 0;
              }
            }
            break;
          }
LABEL_664:
          *(void *)(a1 + 176) = v59;
          goto LABEL_821;
        case 0x2Du:
          *v8 |= 0x8000000000uLL;
          unint64_t v62 = *((void *)this + 1);
          unint64_t v63 = *((void *)this + 2);
          uint64_t v64 = *(void *)this;
          if (v62 <= 0xFFFFFFFFFFFFFFF5 && v62 + 10 <= v63)
          {
            char v65 = 0;
            unsigned int v66 = 0;
            uint64_t v67 = 0;
            do
            {
              unint64_t v68 = v62 + 1;
              *((void *)this + 1) = v62 + 1;
              char v69 = *(unsigned char *)(v64 + v62);
              v67 |= (unint64_t)(v69 & 0x7F) << v65;
              if ((v69 & 0x80) == 0) {
                goto LABEL_668;
              }
              v65 += 7;
              unint64_t v62 = v68;
              BOOL v15 = v66++ > 8;
            }
            while (!v15);
LABEL_377:
            uint64_t v67 = 0;
            goto LABEL_668;
          }
          char v395 = 0;
          unsigned int v396 = 0;
          uint64_t v67 = 0;
          if (v63 <= v62) {
            unint64_t v63 = *((void *)this + 1);
          }
          while (2)
          {
            if (v63 == v62)
            {
              uint64_t v67 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v397 = v62 + 1;
              char v398 = *(unsigned char *)(v64 + v62);
              *((void *)this + 1) = v397;
              v67 |= (unint64_t)(v398 & 0x7F) << v395;
              if (v398 < 0)
              {
                v395 += 7;
                unint64_t v62 = v397;
                BOOL v15 = v396++ > 8;
                if (v15) {
                  goto LABEL_377;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v67 = 0;
              }
            }
            break;
          }
LABEL_668:
          *(void *)(a1 + 320) = v67;
          goto LABEL_821;
        case 0x2Eu:
          *v8 |= 0x40000000000uLL;
          unint64_t v70 = *((void *)this + 1);
          unint64_t v71 = *((void *)this + 2);
          uint64_t v72 = *(void *)this;
          if (v70 <= 0xFFFFFFFFFFFFFFF5 && v70 + 10 <= v71)
          {
            char v73 = 0;
            unsigned int v74 = 0;
            uint64_t v75 = 0;
            do
            {
              unint64_t v76 = v70 + 1;
              *((void *)this + 1) = v70 + 1;
              char v77 = *(unsigned char *)(v72 + v70);
              v75 |= (unint64_t)(v77 & 0x7F) << v73;
              if ((v77 & 0x80) == 0) {
                goto LABEL_672;
              }
              v73 += 7;
              unint64_t v70 = v76;
              BOOL v15 = v74++ > 8;
            }
            while (!v15);
LABEL_384:
            uint64_t v75 = 0;
            goto LABEL_672;
          }
          char v399 = 0;
          unsigned int v400 = 0;
          uint64_t v75 = 0;
          if (v71 <= v70) {
            unint64_t v71 = *((void *)this + 1);
          }
          while (2)
          {
            if (v71 == v70)
            {
              uint64_t v75 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v401 = v70 + 1;
              char v402 = *(unsigned char *)(v72 + v70);
              *((void *)this + 1) = v401;
              v75 |= (unint64_t)(v402 & 0x7F) << v399;
              if (v402 < 0)
              {
                v399 += 7;
                unint64_t v70 = v401;
                BOOL v15 = v400++ > 8;
                if (v15) {
                  goto LABEL_384;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v75 = 0;
              }
            }
            break;
          }
LABEL_672:
          *(void *)(a1 + 344) = v75;
          goto LABEL_821;
        case 0x2Fu:
          *v8 |= 0x10000000000uLL;
          unint64_t v78 = *((void *)this + 1);
          unint64_t v79 = *((void *)this + 2);
          uint64_t v80 = *(void *)this;
          if (v78 <= 0xFFFFFFFFFFFFFFF5 && v78 + 10 <= v79)
          {
            char v81 = 0;
            unsigned int v82 = 0;
            uint64_t v83 = 0;
            do
            {
              unint64_t v84 = v78 + 1;
              *((void *)this + 1) = v78 + 1;
              char v85 = *(unsigned char *)(v80 + v78);
              v83 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0) {
                goto LABEL_676;
              }
              v81 += 7;
              unint64_t v78 = v84;
              BOOL v15 = v82++ > 8;
            }
            while (!v15);
LABEL_391:
            uint64_t v83 = 0;
            goto LABEL_676;
          }
          char v403 = 0;
          unsigned int v404 = 0;
          uint64_t v83 = 0;
          if (v79 <= v78) {
            unint64_t v79 = *((void *)this + 1);
          }
          while (2)
          {
            if (v79 == v78)
            {
              uint64_t v83 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v405 = v78 + 1;
              char v406 = *(unsigned char *)(v80 + v78);
              *((void *)this + 1) = v405;
              v83 |= (unint64_t)(v406 & 0x7F) << v403;
              if (v406 < 0)
              {
                v403 += 7;
                unint64_t v78 = v405;
                BOOL v15 = v404++ > 8;
                if (v15) {
                  goto LABEL_391;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v83 = 0;
              }
            }
            break;
          }
LABEL_676:
          *(void *)(a1 + 328) = v83;
          goto LABEL_821;
        case 0x30u:
          *v8 |= 0x20000000000uLL;
          unint64_t v86 = *((void *)this + 1);
          unint64_t v87 = *((void *)this + 2);
          uint64_t v88 = *(void *)this;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            char v89 = 0;
            unsigned int v90 = 0;
            uint64_t v91 = 0;
            do
            {
              unint64_t v92 = v86 + 1;
              *((void *)this + 1) = v86 + 1;
              char v93 = *(unsigned char *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0) {
                goto LABEL_680;
              }
              v89 += 7;
              unint64_t v86 = v92;
              BOOL v15 = v90++ > 8;
            }
            while (!v15);
LABEL_398:
            uint64_t v91 = 0;
            goto LABEL_680;
          }
          char v407 = 0;
          unsigned int v408 = 0;
          uint64_t v91 = 0;
          if (v87 <= v86) {
            unint64_t v87 = *((void *)this + 1);
          }
          while (2)
          {
            if (v87 == v86)
            {
              uint64_t v91 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v409 = v86 + 1;
              char v410 = *(unsigned char *)(v88 + v86);
              *((void *)this + 1) = v409;
              v91 |= (unint64_t)(v410 & 0x7F) << v407;
              if (v410 < 0)
              {
                v407 += 7;
                unint64_t v86 = v409;
                BOOL v15 = v408++ > 8;
                if (v15) {
                  goto LABEL_398;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v91 = 0;
              }
            }
            break;
          }
LABEL_680:
          *(void *)(a1 + 336) = v91;
          goto LABEL_821;
        case 0x31u:
          *v8 |= 0x80000000000uLL;
          unint64_t v94 = *((void *)this + 1);
          unint64_t v95 = *((void *)this + 2);
          uint64_t v96 = *(void *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v99 = 0;
            do
            {
              unint64_t v100 = v94 + 1;
              *((void *)this + 1) = v94 + 1;
              char v101 = *(unsigned char *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_684;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v15 = v98++ > 8;
            }
            while (!v15);
LABEL_405:
            uint64_t v99 = 0;
            goto LABEL_684;
          }
          char v411 = 0;
          unsigned int v412 = 0;
          uint64_t v99 = 0;
          if (v95 <= v94) {
            unint64_t v95 = *((void *)this + 1);
          }
          while (2)
          {
            if (v95 == v94)
            {
              uint64_t v99 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v413 = v94 + 1;
              char v414 = *(unsigned char *)(v96 + v94);
              *((void *)this + 1) = v413;
              v99 |= (unint64_t)(v414 & 0x7F) << v411;
              if (v414 < 0)
              {
                v411 += 7;
                unint64_t v94 = v413;
                BOOL v15 = v412++ > 8;
                if (v15) {
                  goto LABEL_405;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v99 = 0;
              }
            }
            break;
          }
LABEL_684:
          *(void *)(a1 + 352) = v99;
          goto LABEL_821;
        case 0x32u:
          *v8 |= 0x100000000000uLL;
          unint64_t v102 = *((void *)this + 1);
          unint64_t v103 = *((void *)this + 2);
          uint64_t v104 = *(void *)this;
          if (v102 <= 0xFFFFFFFFFFFFFFF5 && v102 + 10 <= v103)
          {
            char v105 = 0;
            unsigned int v106 = 0;
            uint64_t v107 = 0;
            do
            {
              unint64_t v108 = v102 + 1;
              *((void *)this + 1) = v102 + 1;
              char v109 = *(unsigned char *)(v104 + v102);
              v107 |= (unint64_t)(v109 & 0x7F) << v105;
              if ((v109 & 0x80) == 0) {
                goto LABEL_688;
              }
              v105 += 7;
              unint64_t v102 = v108;
              BOOL v15 = v106++ > 8;
            }
            while (!v15);
LABEL_412:
            LODWORD(v107) = 0;
            goto LABEL_688;
          }
          char v415 = 0;
          unsigned int v416 = 0;
          uint64_t v107 = 0;
          if (v103 <= v102) {
            unint64_t v103 = *((void *)this + 1);
          }
          while (2)
          {
            if (v103 == v102)
            {
              LODWORD(v107) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v417 = v102 + 1;
              char v418 = *(unsigned char *)(v104 + v102);
              *((void *)this + 1) = v417;
              v107 |= (unint64_t)(v418 & 0x7F) << v415;
              if (v418 < 0)
              {
                v415 += 7;
                unint64_t v102 = v417;
                BOOL v15 = v416++ > 8;
                if (v15) {
                  goto LABEL_412;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v107) = 0;
              }
            }
            break;
          }
LABEL_688:
          *(_DWORD *)(a1 + 360) = v107;
          goto LABEL_821;
        case 0x33u:
          *v8 |= 0x1000000uLL;
          unint64_t v110 = *((void *)this + 1);
          unint64_t v111 = *((void *)this + 2);
          uint64_t v112 = *(void *)this;
          if (v110 <= 0xFFFFFFFFFFFFFFF5 && v110 + 10 <= v111)
          {
            char v113 = 0;
            unsigned int v114 = 0;
            uint64_t v115 = 0;
            do
            {
              unint64_t v116 = v110 + 1;
              *((void *)this + 1) = v110 + 1;
              char v117 = *(unsigned char *)(v112 + v110);
              v115 |= (unint64_t)(v117 & 0x7F) << v113;
              if ((v117 & 0x80) == 0) {
                goto LABEL_692;
              }
              v113 += 7;
              unint64_t v110 = v116;
              BOOL v15 = v114++ > 8;
            }
            while (!v15);
LABEL_419:
            uint64_t v115 = 0;
            goto LABEL_692;
          }
          char v419 = 0;
          unsigned int v420 = 0;
          uint64_t v115 = 0;
          if (v111 <= v110) {
            unint64_t v111 = *((void *)this + 1);
          }
          while (2)
          {
            if (v111 == v110)
            {
              uint64_t v115 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v421 = v110 + 1;
              char v422 = *(unsigned char *)(v112 + v110);
              *((void *)this + 1) = v421;
              v115 |= (unint64_t)(v422 & 0x7F) << v419;
              if (v422 < 0)
              {
                v419 += 7;
                unint64_t v110 = v421;
                BOOL v15 = v420++ > 8;
                if (v15) {
                  goto LABEL_419;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v115 = 0;
              }
            }
            break;
          }
LABEL_692:
          *(void *)(a1 + 200) = v115;
          goto LABEL_821;
        case 0x34u:
          *v8 |= 0x8000000uLL;
          unint64_t v118 = *((void *)this + 1);
          unint64_t v119 = *((void *)this + 2);
          uint64_t v120 = *(void *)this;
          if (v118 <= 0xFFFFFFFFFFFFFFF5 && v118 + 10 <= v119)
          {
            char v121 = 0;
            unsigned int v122 = 0;
            uint64_t v123 = 0;
            do
            {
              unint64_t v124 = v118 + 1;
              *((void *)this + 1) = v118 + 1;
              char v125 = *(unsigned char *)(v120 + v118);
              v123 |= (unint64_t)(v125 & 0x7F) << v121;
              if ((v125 & 0x80) == 0) {
                goto LABEL_696;
              }
              v121 += 7;
              unint64_t v118 = v124;
              BOOL v15 = v122++ > 8;
            }
            while (!v15);
LABEL_426:
            uint64_t v123 = 0;
            goto LABEL_696;
          }
          char v423 = 0;
          unsigned int v424 = 0;
          uint64_t v123 = 0;
          if (v119 <= v118) {
            unint64_t v119 = *((void *)this + 1);
          }
          while (2)
          {
            if (v119 == v118)
            {
              uint64_t v123 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v425 = v118 + 1;
              char v426 = *(unsigned char *)(v120 + v118);
              *((void *)this + 1) = v425;
              v123 |= (unint64_t)(v426 & 0x7F) << v423;
              if (v426 < 0)
              {
                v423 += 7;
                unint64_t v118 = v425;
                BOOL v15 = v424++ > 8;
                if (v15) {
                  goto LABEL_426;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v123 = 0;
              }
            }
            break;
          }
LABEL_696:
          *(void *)(a1 + 224) = v123;
          goto LABEL_821;
        case 0x35u:
          *v8 |= 0x2000000uLL;
          unint64_t v126 = *((void *)this + 1);
          unint64_t v127 = *((void *)this + 2);
          uint64_t v128 = *(void *)this;
          if (v126 <= 0xFFFFFFFFFFFFFFF5 && v126 + 10 <= v127)
          {
            char v129 = 0;
            unsigned int v130 = 0;
            uint64_t v131 = 0;
            do
            {
              unint64_t v132 = v126 + 1;
              *((void *)this + 1) = v126 + 1;
              char v133 = *(unsigned char *)(v128 + v126);
              v131 |= (unint64_t)(v133 & 0x7F) << v129;
              if ((v133 & 0x80) == 0) {
                goto LABEL_700;
              }
              v129 += 7;
              unint64_t v126 = v132;
              BOOL v15 = v130++ > 8;
            }
            while (!v15);
LABEL_433:
            uint64_t v131 = 0;
            goto LABEL_700;
          }
          char v427 = 0;
          unsigned int v428 = 0;
          uint64_t v131 = 0;
          if (v127 <= v126) {
            unint64_t v127 = *((void *)this + 1);
          }
          while (2)
          {
            if (v127 == v126)
            {
              uint64_t v131 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v429 = v126 + 1;
              char v430 = *(unsigned char *)(v128 + v126);
              *((void *)this + 1) = v429;
              v131 |= (unint64_t)(v430 & 0x7F) << v427;
              if (v430 < 0)
              {
                v427 += 7;
                unint64_t v126 = v429;
                BOOL v15 = v428++ > 8;
                if (v15) {
                  goto LABEL_433;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v131 = 0;
              }
            }
            break;
          }
LABEL_700:
          *(void *)(a1 + 208) = v131;
          goto LABEL_821;
        case 0x36u:
          *v8 |= 0x4000000uLL;
          unint64_t v134 = *((void *)this + 1);
          unint64_t v135 = *((void *)this + 2);
          uint64_t v136 = *(void *)this;
          if (v134 <= 0xFFFFFFFFFFFFFFF5 && v134 + 10 <= v135)
          {
            char v137 = 0;
            unsigned int v138 = 0;
            uint64_t v139 = 0;
            do
            {
              unint64_t v140 = v134 + 1;
              *((void *)this + 1) = v134 + 1;
              char v141 = *(unsigned char *)(v136 + v134);
              v139 |= (unint64_t)(v141 & 0x7F) << v137;
              if ((v141 & 0x80) == 0) {
                goto LABEL_704;
              }
              v137 += 7;
              unint64_t v134 = v140;
              BOOL v15 = v138++ > 8;
            }
            while (!v15);
LABEL_440:
            uint64_t v139 = 0;
            goto LABEL_704;
          }
          char v431 = 0;
          unsigned int v432 = 0;
          uint64_t v139 = 0;
          if (v135 <= v134) {
            unint64_t v135 = *((void *)this + 1);
          }
          while (2)
          {
            if (v135 == v134)
            {
              uint64_t v139 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v433 = v134 + 1;
              char v434 = *(unsigned char *)(v136 + v134);
              *((void *)this + 1) = v433;
              v139 |= (unint64_t)(v434 & 0x7F) << v431;
              if (v434 < 0)
              {
                v431 += 7;
                unint64_t v134 = v433;
                BOOL v15 = v432++ > 8;
                if (v15) {
                  goto LABEL_440;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v139 = 0;
              }
            }
            break;
          }
LABEL_704:
          *(void *)(a1 + 216) = v139;
          goto LABEL_821;
        case 0x37u:
          *v8 |= 0x400000uLL;
          unint64_t v142 = *((void *)this + 1);
          unint64_t v143 = *((void *)this + 2);
          uint64_t v144 = *(void *)this;
          if (v142 <= 0xFFFFFFFFFFFFFFF5 && v142 + 10 <= v143)
          {
            char v145 = 0;
            unsigned int v146 = 0;
            uint64_t v147 = 0;
            do
            {
              unint64_t v148 = v142 + 1;
              *((void *)this + 1) = v142 + 1;
              char v149 = *(unsigned char *)(v144 + v142);
              v147 |= (unint64_t)(v149 & 0x7F) << v145;
              if ((v149 & 0x80) == 0) {
                goto LABEL_708;
              }
              v145 += 7;
              unint64_t v142 = v148;
              BOOL v15 = v146++ > 8;
            }
            while (!v15);
LABEL_447:
            uint64_t v147 = 0;
            goto LABEL_708;
          }
          char v435 = 0;
          unsigned int v436 = 0;
          uint64_t v147 = 0;
          if (v143 <= v142) {
            unint64_t v143 = *((void *)this + 1);
          }
          while (2)
          {
            if (v143 == v142)
            {
              uint64_t v147 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v437 = v142 + 1;
              char v438 = *(unsigned char *)(v144 + v142);
              *((void *)this + 1) = v437;
              v147 |= (unint64_t)(v438 & 0x7F) << v435;
              if (v438 < 0)
              {
                v435 += 7;
                unint64_t v142 = v437;
                BOOL v15 = v436++ > 8;
                if (v15) {
                  goto LABEL_447;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v147 = 0;
              }
            }
            break;
          }
LABEL_708:
          *(void *)(a1 + 184) = v147;
          goto LABEL_821;
        case 0x38u:
          *v8 |= 0x800000uLL;
          unint64_t v150 = *((void *)this + 1);
          unint64_t v151 = *((void *)this + 2);
          uint64_t v152 = *(void *)this;
          if (v150 <= 0xFFFFFFFFFFFFFFF5 && v150 + 10 <= v151)
          {
            char v153 = 0;
            unsigned int v154 = 0;
            uint64_t v155 = 0;
            do
            {
              unint64_t v156 = v150 + 1;
              *((void *)this + 1) = v150 + 1;
              char v157 = *(unsigned char *)(v152 + v150);
              v155 |= (unint64_t)(v157 & 0x7F) << v153;
              if ((v157 & 0x80) == 0) {
                goto LABEL_712;
              }
              v153 += 7;
              unint64_t v150 = v156;
              BOOL v15 = v154++ > 8;
            }
            while (!v15);
LABEL_454:
            uint64_t v155 = 0;
            goto LABEL_712;
          }
          char v439 = 0;
          unsigned int v440 = 0;
          uint64_t v155 = 0;
          if (v151 <= v150) {
            unint64_t v151 = *((void *)this + 1);
          }
          while (2)
          {
            if (v151 == v150)
            {
              uint64_t v155 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v441 = v150 + 1;
              char v442 = *(unsigned char *)(v152 + v150);
              *((void *)this + 1) = v441;
              v155 |= (unint64_t)(v442 & 0x7F) << v439;
              if (v442 < 0)
              {
                v439 += 7;
                unint64_t v150 = v441;
                BOOL v15 = v440++ > 8;
                if (v15) {
                  goto LABEL_454;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v155 = 0;
              }
            }
            break;
          }
LABEL_712:
          *(void *)(a1 + 192) = v155;
          goto LABEL_821;
        case 0x3Bu:
          *v8 |= 0x20uLL;
          unint64_t v158 = *((void *)this + 1);
          unint64_t v159 = *((void *)this + 2);
          uint64_t v160 = *(void *)this;
          if (v158 <= 0xFFFFFFFFFFFFFFF5 && v158 + 10 <= v159)
          {
            char v161 = 0;
            unsigned int v162 = 0;
            uint64_t v163 = 0;
            do
            {
              unint64_t v164 = v158 + 1;
              *((void *)this + 1) = v158 + 1;
              char v165 = *(unsigned char *)(v160 + v158);
              v163 |= (unint64_t)(v165 & 0x7F) << v161;
              if ((v165 & 0x80) == 0) {
                goto LABEL_716;
              }
              v161 += 7;
              unint64_t v158 = v164;
              BOOL v15 = v162++ > 8;
            }
            while (!v15);
LABEL_461:
            uint64_t v163 = 0;
            goto LABEL_716;
          }
          char v443 = 0;
          unsigned int v444 = 0;
          uint64_t v163 = 0;
          if (v159 <= v158) {
            unint64_t v159 = *((void *)this + 1);
          }
          while (2)
          {
            if (v159 == v158)
            {
              uint64_t v163 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v445 = v158 + 1;
              char v446 = *(unsigned char *)(v160 + v158);
              *((void *)this + 1) = v445;
              v163 |= (unint64_t)(v446 & 0x7F) << v443;
              if (v446 < 0)
              {
                v443 += 7;
                unint64_t v158 = v445;
                BOOL v15 = v444++ > 8;
                if (v15) {
                  goto LABEL_461;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v163 = 0;
              }
            }
            break;
          }
LABEL_716:
          *(void *)(a1 + 48) = v163;
          goto LABEL_821;
        case 0x3Cu:
          *v8 |= 8uLL;
          unint64_t v166 = *((void *)this + 1);
          unint64_t v167 = *((void *)this + 2);
          uint64_t v168 = *(void *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v171 = 0;
            do
            {
              unint64_t v172 = v166 + 1;
              *((void *)this + 1) = v166 + 1;
              char v173 = *(unsigned char *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0) {
                goto LABEL_720;
              }
              v169 += 7;
              unint64_t v166 = v172;
              BOOL v15 = v170++ > 8;
            }
            while (!v15);
LABEL_468:
            uint64_t v171 = 0;
            goto LABEL_720;
          }
          char v447 = 0;
          unsigned int v448 = 0;
          uint64_t v171 = 0;
          if (v167 <= v166) {
            unint64_t v167 = *((void *)this + 1);
          }
          while (2)
          {
            if (v167 == v166)
            {
              uint64_t v171 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v449 = v166 + 1;
              char v450 = *(unsigned char *)(v168 + v166);
              *((void *)this + 1) = v449;
              v171 |= (unint64_t)(v450 & 0x7F) << v447;
              if (v450 < 0)
              {
                v447 += 7;
                unint64_t v166 = v449;
                BOOL v15 = v448++ > 8;
                if (v15) {
                  goto LABEL_468;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v171 = 0;
              }
            }
            break;
          }
LABEL_720:
          *(void *)(a1 + 32) = v171;
          goto LABEL_821;
        case 0x3Du:
          *v8 |= 1uLL;
          unint64_t v174 = *((void *)this + 1);
          unint64_t v175 = *((void *)this + 2);
          uint64_t v176 = *(void *)this;
          if (v174 <= 0xFFFFFFFFFFFFFFF5 && v174 + 10 <= v175)
          {
            char v177 = 0;
            unsigned int v178 = 0;
            uint64_t v179 = 0;
            do
            {
              unint64_t v180 = v174 + 1;
              *((void *)this + 1) = v174 + 1;
              char v181 = *(unsigned char *)(v176 + v174);
              v179 |= (unint64_t)(v181 & 0x7F) << v177;
              if ((v181 & 0x80) == 0) {
                goto LABEL_724;
              }
              v177 += 7;
              unint64_t v174 = v180;
              BOOL v15 = v178++ > 8;
            }
            while (!v15);
LABEL_475:
            uint64_t v179 = 0;
            goto LABEL_724;
          }
          char v451 = 0;
          unsigned int v452 = 0;
          uint64_t v179 = 0;
          if (v175 <= v174) {
            unint64_t v175 = *((void *)this + 1);
          }
          while (2)
          {
            if (v175 == v174)
            {
              uint64_t v179 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v453 = v174 + 1;
              char v454 = *(unsigned char *)(v176 + v174);
              *((void *)this + 1) = v453;
              v179 |= (unint64_t)(v454 & 0x7F) << v451;
              if (v454 < 0)
              {
                v451 += 7;
                unint64_t v174 = v453;
                BOOL v15 = v452++ > 8;
                if (v15) {
                  goto LABEL_475;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v179 = 0;
              }
            }
            break;
          }
LABEL_724:
          *(void *)(a1 + 8) = v179;
          goto LABEL_821;
        case 0x3Eu:
          *v8 |= 0x40uLL;
          unint64_t v182 = *((void *)this + 1);
          unint64_t v183 = *((void *)this + 2);
          uint64_t v184 = *(void *)this;
          if (v182 <= 0xFFFFFFFFFFFFFFF5 && v182 + 10 <= v183)
          {
            char v185 = 0;
            unsigned int v186 = 0;
            uint64_t v187 = 0;
            do
            {
              unint64_t v188 = v182 + 1;
              *((void *)this + 1) = v182 + 1;
              char v189 = *(unsigned char *)(v184 + v182);
              v187 |= (unint64_t)(v189 & 0x7F) << v185;
              if ((v189 & 0x80) == 0) {
                goto LABEL_728;
              }
              v185 += 7;
              unint64_t v182 = v188;
              BOOL v15 = v186++ > 8;
            }
            while (!v15);
LABEL_482:
            uint64_t v187 = 0;
            goto LABEL_728;
          }
          char v455 = 0;
          unsigned int v456 = 0;
          uint64_t v187 = 0;
          if (v183 <= v182) {
            unint64_t v183 = *((void *)this + 1);
          }
          while (2)
          {
            if (v183 == v182)
            {
              uint64_t v187 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v457 = v182 + 1;
              char v458 = *(unsigned char *)(v184 + v182);
              *((void *)this + 1) = v457;
              v187 |= (unint64_t)(v458 & 0x7F) << v455;
              if (v458 < 0)
              {
                v455 += 7;
                unint64_t v182 = v457;
                BOOL v15 = v456++ > 8;
                if (v15) {
                  goto LABEL_482;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v187 = 0;
              }
            }
            break;
          }
LABEL_728:
          *(void *)(a1 + 56) = v187;
          goto LABEL_821;
        case 0x3Fu:
          *v8 |= 0x100uLL;
          unint64_t v190 = *((void *)this + 1);
          unint64_t v191 = *((void *)this + 2);
          uint64_t v192 = *(void *)this;
          if (v190 <= 0xFFFFFFFFFFFFFFF5 && v190 + 10 <= v191)
          {
            char v193 = 0;
            unsigned int v194 = 0;
            uint64_t v195 = 0;
            do
            {
              unint64_t v196 = v190 + 1;
              *((void *)this + 1) = v190 + 1;
              char v197 = *(unsigned char *)(v192 + v190);
              v195 |= (unint64_t)(v197 & 0x7F) << v193;
              if ((v197 & 0x80) == 0) {
                goto LABEL_732;
              }
              v193 += 7;
              unint64_t v190 = v196;
              BOOL v15 = v194++ > 8;
            }
            while (!v15);
LABEL_489:
            uint64_t v195 = 0;
            goto LABEL_732;
          }
          char v459 = 0;
          unsigned int v460 = 0;
          uint64_t v195 = 0;
          if (v191 <= v190) {
            unint64_t v191 = *((void *)this + 1);
          }
          while (2)
          {
            if (v191 == v190)
            {
              uint64_t v195 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v461 = v190 + 1;
              char v462 = *(unsigned char *)(v192 + v190);
              *((void *)this + 1) = v461;
              v195 |= (unint64_t)(v462 & 0x7F) << v459;
              if (v462 < 0)
              {
                v459 += 7;
                unint64_t v190 = v461;
                BOOL v15 = v460++ > 8;
                if (v15) {
                  goto LABEL_489;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v195 = 0;
              }
            }
            break;
          }
LABEL_732:
          *(void *)(a1 + 72) = v195;
          goto LABEL_821;
        case 0x40u:
          *v8 |= 0x10uLL;
          unint64_t v198 = *((void *)this + 1);
          unint64_t v199 = *((void *)this + 2);
          uint64_t v200 = *(void *)this;
          if (v198 <= 0xFFFFFFFFFFFFFFF5 && v198 + 10 <= v199)
          {
            char v201 = 0;
            unsigned int v202 = 0;
            uint64_t v203 = 0;
            do
            {
              unint64_t v204 = v198 + 1;
              *((void *)this + 1) = v198 + 1;
              char v205 = *(unsigned char *)(v200 + v198);
              v203 |= (unint64_t)(v205 & 0x7F) << v201;
              if ((v205 & 0x80) == 0) {
                goto LABEL_736;
              }
              v201 += 7;
              unint64_t v198 = v204;
              BOOL v15 = v202++ > 8;
            }
            while (!v15);
LABEL_496:
            uint64_t v203 = 0;
            goto LABEL_736;
          }
          char v463 = 0;
          unsigned int v464 = 0;
          uint64_t v203 = 0;
          if (v199 <= v198) {
            unint64_t v199 = *((void *)this + 1);
          }
          while (2)
          {
            if (v199 == v198)
            {
              uint64_t v203 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v465 = v198 + 1;
              char v466 = *(unsigned char *)(v200 + v198);
              *((void *)this + 1) = v465;
              v203 |= (unint64_t)(v466 & 0x7F) << v463;
              if (v466 < 0)
              {
                v463 += 7;
                unint64_t v198 = v465;
                BOOL v15 = v464++ > 8;
                if (v15) {
                  goto LABEL_496;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v203 = 0;
              }
            }
            break;
          }
LABEL_736:
          *(void *)(a1 + 40) = v203;
          goto LABEL_821;
        case 0x41u:
          *v8 |= 0x200uLL;
          unint64_t v206 = *((void *)this + 1);
          unint64_t v207 = *((void *)this + 2);
          uint64_t v208 = *(void *)this;
          if (v206 <= 0xFFFFFFFFFFFFFFF5 && v206 + 10 <= v207)
          {
            char v209 = 0;
            unsigned int v210 = 0;
            uint64_t v211 = 0;
            do
            {
              unint64_t v212 = v206 + 1;
              *((void *)this + 1) = v206 + 1;
              char v213 = *(unsigned char *)(v208 + v206);
              v211 |= (unint64_t)(v213 & 0x7F) << v209;
              if ((v213 & 0x80) == 0) {
                goto LABEL_740;
              }
              v209 += 7;
              unint64_t v206 = v212;
              BOOL v15 = v210++ > 8;
            }
            while (!v15);
LABEL_503:
            uint64_t v211 = 0;
            goto LABEL_740;
          }
          char v467 = 0;
          unsigned int v468 = 0;
          uint64_t v211 = 0;
          if (v207 <= v206) {
            unint64_t v207 = *((void *)this + 1);
          }
          while (2)
          {
            if (v207 == v206)
            {
              uint64_t v211 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v469 = v206 + 1;
              char v470 = *(unsigned char *)(v208 + v206);
              *((void *)this + 1) = v469;
              v211 |= (unint64_t)(v470 & 0x7F) << v467;
              if (v470 < 0)
              {
                v467 += 7;
                unint64_t v206 = v469;
                BOOL v15 = v468++ > 8;
                if (v15) {
                  goto LABEL_503;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v211 = 0;
              }
            }
            break;
          }
LABEL_740:
          *(void *)(a1 + 80) = v211;
          goto LABEL_821;
        case 0x42u:
          *v8 |= 0x400uLL;
          unint64_t v214 = *((void *)this + 1);
          unint64_t v215 = *((void *)this + 2);
          uint64_t v216 = *(void *)this;
          if (v214 <= 0xFFFFFFFFFFFFFFF5 && v214 + 10 <= v215)
          {
            char v217 = 0;
            unsigned int v218 = 0;
            uint64_t v219 = 0;
            do
            {
              unint64_t v220 = v214 + 1;
              *((void *)this + 1) = v214 + 1;
              char v221 = *(unsigned char *)(v216 + v214);
              v219 |= (unint64_t)(v221 & 0x7F) << v217;
              if ((v221 & 0x80) == 0) {
                goto LABEL_744;
              }
              v217 += 7;
              unint64_t v214 = v220;
              BOOL v15 = v218++ > 8;
            }
            while (!v15);
LABEL_510:
            uint64_t v219 = 0;
            goto LABEL_744;
          }
          char v471 = 0;
          unsigned int v472 = 0;
          uint64_t v219 = 0;
          if (v215 <= v214) {
            unint64_t v215 = *((void *)this + 1);
          }
          while (2)
          {
            if (v215 == v214)
            {
              uint64_t v219 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v473 = v214 + 1;
              char v474 = *(unsigned char *)(v216 + v214);
              *((void *)this + 1) = v473;
              v219 |= (unint64_t)(v474 & 0x7F) << v471;
              if (v474 < 0)
              {
                v471 += 7;
                unint64_t v214 = v473;
                BOOL v15 = v472++ > 8;
                if (v15) {
                  goto LABEL_510;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v219 = 0;
              }
            }
            break;
          }
LABEL_744:
          *(void *)(a1 + 88) = v219;
          goto LABEL_821;
        case 0x43u:
          *v8 |= 0x800uLL;
          unint64_t v222 = *((void *)this + 1);
          unint64_t v223 = *((void *)this + 2);
          uint64_t v224 = *(void *)this;
          if (v222 <= 0xFFFFFFFFFFFFFFF5 && v222 + 10 <= v223)
          {
            char v225 = 0;
            unsigned int v226 = 0;
            uint64_t v227 = 0;
            do
            {
              unint64_t v228 = v222 + 1;
              *((void *)this + 1) = v222 + 1;
              char v229 = *(unsigned char *)(v224 + v222);
              v227 |= (unint64_t)(v229 & 0x7F) << v225;
              if ((v229 & 0x80) == 0) {
                goto LABEL_748;
              }
              v225 += 7;
              unint64_t v222 = v228;
              BOOL v15 = v226++ > 8;
            }
            while (!v15);
LABEL_517:
            uint64_t v227 = 0;
            goto LABEL_748;
          }
          char v475 = 0;
          unsigned int v476 = 0;
          uint64_t v227 = 0;
          if (v223 <= v222) {
            unint64_t v223 = *((void *)this + 1);
          }
          while (2)
          {
            if (v223 == v222)
            {
              uint64_t v227 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v477 = v222 + 1;
              char v478 = *(unsigned char *)(v224 + v222);
              *((void *)this + 1) = v477;
              v227 |= (unint64_t)(v478 & 0x7F) << v475;
              if (v478 < 0)
              {
                v475 += 7;
                unint64_t v222 = v477;
                BOOL v15 = v476++ > 8;
                if (v15) {
                  goto LABEL_517;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v227 = 0;
              }
            }
            break;
          }
LABEL_748:
          *(void *)(a1 + 96) = v227;
          goto LABEL_821;
        case 0x44u:
          *v8 |= 0x4000uLL;
          unint64_t v230 = *((void *)this + 1);
          unint64_t v231 = *((void *)this + 2);
          uint64_t v232 = *(void *)this;
          if (v230 <= 0xFFFFFFFFFFFFFFF5 && v230 + 10 <= v231)
          {
            char v233 = 0;
            unsigned int v234 = 0;
            uint64_t v235 = 0;
            do
            {
              unint64_t v236 = v230 + 1;
              *((void *)this + 1) = v230 + 1;
              char v237 = *(unsigned char *)(v232 + v230);
              v235 |= (unint64_t)(v237 & 0x7F) << v233;
              if ((v237 & 0x80) == 0) {
                goto LABEL_752;
              }
              v233 += 7;
              unint64_t v230 = v236;
              BOOL v15 = v234++ > 8;
            }
            while (!v15);
LABEL_524:
            uint64_t v235 = 0;
            goto LABEL_752;
          }
          char v479 = 0;
          unsigned int v480 = 0;
          uint64_t v235 = 0;
          if (v231 <= v230) {
            unint64_t v231 = *((void *)this + 1);
          }
          while (2)
          {
            if (v231 == v230)
            {
              uint64_t v235 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v481 = v230 + 1;
              char v482 = *(unsigned char *)(v232 + v230);
              *((void *)this + 1) = v481;
              v235 |= (unint64_t)(v482 & 0x7F) << v479;
              if (v482 < 0)
              {
                v479 += 7;
                unint64_t v230 = v481;
                BOOL v15 = v480++ > 8;
                if (v15) {
                  goto LABEL_524;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v235 = 0;
              }
            }
            break;
          }
LABEL_752:
          *(void *)(a1 + 120) = v235;
          goto LABEL_821;
        case 0x45u:
          *v8 |= 2uLL;
          unint64_t v238 = *((void *)this + 1);
          unint64_t v239 = *((void *)this + 2);
          uint64_t v240 = *(void *)this;
          if (v238 <= 0xFFFFFFFFFFFFFFF5 && v238 + 10 <= v239)
          {
            char v241 = 0;
            unsigned int v242 = 0;
            uint64_t v243 = 0;
            do
            {
              unint64_t v244 = v238 + 1;
              *((void *)this + 1) = v238 + 1;
              char v245 = *(unsigned char *)(v240 + v238);
              v243 |= (unint64_t)(v245 & 0x7F) << v241;
              if ((v245 & 0x80) == 0) {
                goto LABEL_756;
              }
              v241 += 7;
              unint64_t v238 = v244;
              BOOL v15 = v242++ > 8;
            }
            while (!v15);
LABEL_531:
            uint64_t v243 = 0;
            goto LABEL_756;
          }
          char v483 = 0;
          unsigned int v484 = 0;
          uint64_t v243 = 0;
          if (v239 <= v238) {
            unint64_t v239 = *((void *)this + 1);
          }
          while (2)
          {
            if (v239 == v238)
            {
              uint64_t v243 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v485 = v238 + 1;
              char v486 = *(unsigned char *)(v240 + v238);
              *((void *)this + 1) = v485;
              v243 |= (unint64_t)(v486 & 0x7F) << v483;
              if (v486 < 0)
              {
                v483 += 7;
                unint64_t v238 = v485;
                BOOL v15 = v484++ > 8;
                if (v15) {
                  goto LABEL_531;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v243 = 0;
              }
            }
            break;
          }
LABEL_756:
          *(void *)(a1 + 16) = v243;
          goto LABEL_821;
        case 0x46u:
          *v8 |= 0x8000uLL;
          unint64_t v246 = *((void *)this + 1);
          unint64_t v247 = *((void *)this + 2);
          uint64_t v248 = *(void *)this;
          if (v246 <= 0xFFFFFFFFFFFFFFF5 && v246 + 10 <= v247)
          {
            char v249 = 0;
            unsigned int v250 = 0;
            uint64_t v251 = 0;
            do
            {
              unint64_t v252 = v246 + 1;
              *((void *)this + 1) = v246 + 1;
              char v253 = *(unsigned char *)(v248 + v246);
              v251 |= (unint64_t)(v253 & 0x7F) << v249;
              if ((v253 & 0x80) == 0) {
                goto LABEL_760;
              }
              v249 += 7;
              unint64_t v246 = v252;
              BOOL v15 = v250++ > 8;
            }
            while (!v15);
LABEL_538:
            uint64_t v251 = 0;
            goto LABEL_760;
          }
          char v487 = 0;
          unsigned int v488 = 0;
          uint64_t v251 = 0;
          if (v247 <= v246) {
            unint64_t v247 = *((void *)this + 1);
          }
          while (2)
          {
            if (v247 == v246)
            {
              uint64_t v251 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v489 = v246 + 1;
              char v490 = *(unsigned char *)(v248 + v246);
              *((void *)this + 1) = v489;
              v251 |= (unint64_t)(v490 & 0x7F) << v487;
              if (v490 < 0)
              {
                v487 += 7;
                unint64_t v246 = v489;
                BOOL v15 = v488++ > 8;
                if (v15) {
                  goto LABEL_538;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v251 = 0;
              }
            }
            break;
          }
LABEL_760:
          *(void *)(a1 + 128) = v251;
          goto LABEL_821;
        case 0x47u:
          *v8 |= 0x800000000uLL;
          unint64_t v254 = *((void *)this + 1);
          unint64_t v255 = *((void *)this + 2);
          uint64_t v256 = *(void *)this;
          if (v254 <= 0xFFFFFFFFFFFFFFF5 && v254 + 10 <= v255)
          {
            char v257 = 0;
            unsigned int v258 = 0;
            uint64_t v259 = 0;
            do
            {
              unint64_t v260 = v254 + 1;
              *((void *)this + 1) = v254 + 1;
              char v261 = *(unsigned char *)(v256 + v254);
              v259 |= (unint64_t)(v261 & 0x7F) << v257;
              if ((v261 & 0x80) == 0) {
                goto LABEL_764;
              }
              v257 += 7;
              unint64_t v254 = v260;
              BOOL v15 = v258++ > 8;
            }
            while (!v15);
LABEL_545:
            uint64_t v259 = 0;
            goto LABEL_764;
          }
          char v491 = 0;
          unsigned int v492 = 0;
          uint64_t v259 = 0;
          if (v255 <= v254) {
            unint64_t v255 = *((void *)this + 1);
          }
          while (2)
          {
            if (v255 == v254)
            {
              uint64_t v259 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v493 = v254 + 1;
              char v494 = *(unsigned char *)(v256 + v254);
              *((void *)this + 1) = v493;
              v259 |= (unint64_t)(v494 & 0x7F) << v491;
              if (v494 < 0)
              {
                v491 += 7;
                unint64_t v254 = v493;
                BOOL v15 = v492++ > 8;
                if (v15) {
                  goto LABEL_545;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v259 = 0;
              }
            }
            break;
          }
LABEL_764:
          *(void *)(a1 + 288) = v259;
          goto LABEL_821;
        case 0x48u:
          *v8 |= 0x400000000uLL;
          unint64_t v262 = *((void *)this + 1);
          unint64_t v263 = *((void *)this + 2);
          uint64_t v264 = *(void *)this;
          if (v262 <= 0xFFFFFFFFFFFFFFF5 && v262 + 10 <= v263)
          {
            char v265 = 0;
            unsigned int v266 = 0;
            uint64_t v267 = 0;
            do
            {
              unint64_t v268 = v262 + 1;
              *((void *)this + 1) = v262 + 1;
              char v269 = *(unsigned char *)(v264 + v262);
              v267 |= (unint64_t)(v269 & 0x7F) << v265;
              if ((v269 & 0x80) == 0) {
                goto LABEL_768;
              }
              v265 += 7;
              unint64_t v262 = v268;
              BOOL v15 = v266++ > 8;
            }
            while (!v15);
LABEL_552:
            uint64_t v267 = 0;
            goto LABEL_768;
          }
          char v495 = 0;
          unsigned int v496 = 0;
          uint64_t v267 = 0;
          if (v263 <= v262) {
            unint64_t v263 = *((void *)this + 1);
          }
          while (2)
          {
            if (v263 == v262)
            {
              uint64_t v267 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v497 = v262 + 1;
              char v498 = *(unsigned char *)(v264 + v262);
              *((void *)this + 1) = v497;
              v267 |= (unint64_t)(v498 & 0x7F) << v495;
              if (v498 < 0)
              {
                v495 += 7;
                unint64_t v262 = v497;
                BOOL v15 = v496++ > 8;
                if (v15) {
                  goto LABEL_552;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v267 = 0;
              }
            }
            break;
          }
LABEL_768:
          *(void *)(a1 + 280) = v267;
          goto LABEL_821;
        case 0x49u:
          *v8 |= 0x200000000uLL;
          unint64_t v270 = *((void *)this + 1);
          unint64_t v271 = *((void *)this + 2);
          uint64_t v272 = *(void *)this;
          if (v270 <= 0xFFFFFFFFFFFFFFF5 && v270 + 10 <= v271)
          {
            char v273 = 0;
            unsigned int v274 = 0;
            uint64_t v275 = 0;
            do
            {
              unint64_t v276 = v270 + 1;
              *((void *)this + 1) = v270 + 1;
              char v277 = *(unsigned char *)(v272 + v270);
              v275 |= (unint64_t)(v277 & 0x7F) << v273;
              if ((v277 & 0x80) == 0) {
                goto LABEL_772;
              }
              v273 += 7;
              unint64_t v270 = v276;
              BOOL v15 = v274++ > 8;
            }
            while (!v15);
LABEL_559:
            uint64_t v275 = 0;
            goto LABEL_772;
          }
          char v499 = 0;
          unsigned int v500 = 0;
          uint64_t v275 = 0;
          if (v271 <= v270) {
            unint64_t v271 = *((void *)this + 1);
          }
          while (2)
          {
            if (v271 == v270)
            {
              uint64_t v275 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v501 = v270 + 1;
              char v502 = *(unsigned char *)(v272 + v270);
              *((void *)this + 1) = v501;
              v275 |= (unint64_t)(v502 & 0x7F) << v499;
              if (v502 < 0)
              {
                v499 += 7;
                unint64_t v270 = v501;
                BOOL v15 = v500++ > 8;
                if (v15) {
                  goto LABEL_559;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v275 = 0;
              }
            }
            break;
          }
LABEL_772:
          *(void *)(a1 + 272) = v275;
          goto LABEL_821;
        case 0x4Au:
          *v8 |= (unint64_t)&_mh_execute_header;
          unint64_t v278 = *((void *)this + 1);
          unint64_t v279 = *((void *)this + 2);
          uint64_t v280 = *(void *)this;
          if (v278 <= 0xFFFFFFFFFFFFFFF5 && v278 + 10 <= v279)
          {
            char v281 = 0;
            unsigned int v282 = 0;
            uint64_t v283 = 0;
            do
            {
              unint64_t v284 = v278 + 1;
              *((void *)this + 1) = v278 + 1;
              char v285 = *(unsigned char *)(v280 + v278);
              v283 |= (unint64_t)(v285 & 0x7F) << v281;
              if ((v285 & 0x80) == 0) {
                goto LABEL_776;
              }
              v281 += 7;
              unint64_t v278 = v284;
              BOOL v15 = v282++ > 8;
            }
            while (!v15);
LABEL_566:
            uint64_t v283 = 0;
            goto LABEL_776;
          }
          char v503 = 0;
          unsigned int v504 = 0;
          uint64_t v283 = 0;
          if (v279 <= v278) {
            unint64_t v279 = *((void *)this + 1);
          }
          while (2)
          {
            if (v279 == v278)
            {
              uint64_t v283 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v505 = v278 + 1;
              char v506 = *(unsigned char *)(v280 + v278);
              *((void *)this + 1) = v505;
              v283 |= (unint64_t)(v506 & 0x7F) << v503;
              if (v506 < 0)
              {
                v503 += 7;
                unint64_t v278 = v505;
                BOOL v15 = v504++ > 8;
                if (v15) {
                  goto LABEL_566;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v283 = 0;
              }
            }
            break;
          }
LABEL_776:
          *(void *)(a1 + 264) = v283;
          goto LABEL_821;
        case 0x51u:
          *v8 |= 0x20000000uLL;
          unint64_t v286 = *((void *)this + 1);
          unint64_t v287 = *((void *)this + 2);
          uint64_t v288 = *(void *)this;
          if (v286 <= 0xFFFFFFFFFFFFFFF5 && v286 + 10 <= v287)
          {
            char v289 = 0;
            unsigned int v290 = 0;
            uint64_t v291 = 0;
            do
            {
              unint64_t v292 = v286 + 1;
              *((void *)this + 1) = v286 + 1;
              char v293 = *(unsigned char *)(v288 + v286);
              v291 |= (unint64_t)(v293 & 0x7F) << v289;
              if ((v293 & 0x80) == 0) {
                goto LABEL_780;
              }
              v289 += 7;
              unint64_t v286 = v292;
              BOOL v15 = v290++ > 8;
            }
            while (!v15);
LABEL_573:
            uint64_t v291 = 0;
            goto LABEL_780;
          }
          char v507 = 0;
          unsigned int v508 = 0;
          uint64_t v291 = 0;
          if (v287 <= v286) {
            unint64_t v287 = *((void *)this + 1);
          }
          while (2)
          {
            if (v287 == v286)
            {
              uint64_t v291 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v509 = v286 + 1;
              char v510 = *(unsigned char *)(v288 + v286);
              *((void *)this + 1) = v509;
              v291 |= (unint64_t)(v510 & 0x7F) << v507;
              if (v510 < 0)
              {
                v507 += 7;
                unint64_t v286 = v509;
                BOOL v15 = v508++ > 8;
                if (v15) {
                  goto LABEL_573;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v291 = 0;
              }
            }
            break;
          }
LABEL_780:
          *(void *)(a1 + 240) = v291;
          goto LABEL_821;
        case 0x52u:
          *v8 |= 0x10000000uLL;
          unint64_t v294 = *((void *)this + 1);
          unint64_t v295 = *((void *)this + 2);
          uint64_t v296 = *(void *)this;
          if (v294 <= 0xFFFFFFFFFFFFFFF5 && v294 + 10 <= v295)
          {
            char v297 = 0;
            unsigned int v298 = 0;
            uint64_t v299 = 0;
            do
            {
              unint64_t v300 = v294 + 1;
              *((void *)this + 1) = v294 + 1;
              char v301 = *(unsigned char *)(v296 + v294);
              v299 |= (unint64_t)(v301 & 0x7F) << v297;
              if ((v301 & 0x80) == 0) {
                goto LABEL_784;
              }
              v297 += 7;
              unint64_t v294 = v300;
              BOOL v15 = v298++ > 8;
            }
            while (!v15);
LABEL_580:
            uint64_t v299 = 0;
            goto LABEL_784;
          }
          char v511 = 0;
          unsigned int v512 = 0;
          uint64_t v299 = 0;
          if (v295 <= v294) {
            unint64_t v295 = *((void *)this + 1);
          }
          while (2)
          {
            if (v295 == v294)
            {
              uint64_t v299 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v513 = v294 + 1;
              char v514 = *(unsigned char *)(v296 + v294);
              *((void *)this + 1) = v513;
              v299 |= (unint64_t)(v514 & 0x7F) << v511;
              if (v514 < 0)
              {
                v511 += 7;
                unint64_t v294 = v513;
                BOOL v15 = v512++ > 8;
                if (v15) {
                  goto LABEL_580;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v299 = 0;
              }
            }
            break;
          }
LABEL_784:
          *(void *)(a1 + 232) = v299;
          goto LABEL_821;
        case 0x53u:
          *v8 |= 0x2000uLL;
          unint64_t v302 = *((void *)this + 1);
          unint64_t v303 = *((void *)this + 2);
          uint64_t v304 = *(void *)this;
          if (v302 <= 0xFFFFFFFFFFFFFFF5 && v302 + 10 <= v303)
          {
            char v305 = 0;
            unsigned int v306 = 0;
            uint64_t v307 = 0;
            do
            {
              unint64_t v308 = v302 + 1;
              *((void *)this + 1) = v302 + 1;
              char v309 = *(unsigned char *)(v304 + v302);
              v307 |= (unint64_t)(v309 & 0x7F) << v305;
              if ((v309 & 0x80) == 0) {
                goto LABEL_788;
              }
              v305 += 7;
              unint64_t v302 = v308;
              BOOL v15 = v306++ > 8;
            }
            while (!v15);
LABEL_587:
            uint64_t v307 = 0;
            goto LABEL_788;
          }
          char v515 = 0;
          unsigned int v516 = 0;
          uint64_t v307 = 0;
          if (v303 <= v302) {
            unint64_t v303 = *((void *)this + 1);
          }
          while (2)
          {
            if (v303 == v302)
            {
              uint64_t v307 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v517 = v302 + 1;
              char v518 = *(unsigned char *)(v304 + v302);
              *((void *)this + 1) = v517;
              v307 |= (unint64_t)(v518 & 0x7F) << v515;
              if (v518 < 0)
              {
                v515 += 7;
                unint64_t v302 = v517;
                BOOL v15 = v516++ > 8;
                if (v15) {
                  goto LABEL_587;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v307 = 0;
              }
            }
            break;
          }
LABEL_788:
          *(void *)(a1 + 112) = v307;
          goto LABEL_821;
        case 0x54u:
          *v8 |= 0x10000uLL;
          unint64_t v310 = *((void *)this + 1);
          unint64_t v311 = *((void *)this + 2);
          uint64_t v312 = *(void *)this;
          if (v310 <= 0xFFFFFFFFFFFFFFF5 && v310 + 10 <= v311)
          {
            char v313 = 0;
            unsigned int v314 = 0;
            uint64_t v315 = 0;
            do
            {
              unint64_t v316 = v310 + 1;
              *((void *)this + 1) = v310 + 1;
              char v317 = *(unsigned char *)(v312 + v310);
              v315 |= (unint64_t)(v317 & 0x7F) << v313;
              if ((v317 & 0x80) == 0) {
                goto LABEL_792;
              }
              v313 += 7;
              unint64_t v310 = v316;
              BOOL v15 = v314++ > 8;
            }
            while (!v15);
LABEL_594:
            uint64_t v315 = 0;
            goto LABEL_792;
          }
          char v519 = 0;
          unsigned int v520 = 0;
          uint64_t v315 = 0;
          if (v311 <= v310) {
            unint64_t v311 = *((void *)this + 1);
          }
          while (2)
          {
            if (v311 == v310)
            {
              uint64_t v315 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v521 = v310 + 1;
              char v522 = *(unsigned char *)(v312 + v310);
              *((void *)this + 1) = v521;
              v315 |= (unint64_t)(v522 & 0x7F) << v519;
              if (v522 < 0)
              {
                v519 += 7;
                unint64_t v310 = v521;
                BOOL v15 = v520++ > 8;
                if (v15) {
                  goto LABEL_594;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v315 = 0;
              }
            }
            break;
          }
LABEL_792:
          *(void *)(a1 + 136) = v315;
          goto LABEL_821;
        case 0x55u:
          *v8 |= 4uLL;
          unint64_t v318 = *((void *)this + 1);
          unint64_t v319 = *((void *)this + 2);
          uint64_t v320 = *(void *)this;
          if (v318 <= 0xFFFFFFFFFFFFFFF5 && v318 + 10 <= v319)
          {
            char v321 = 0;
            unsigned int v322 = 0;
            uint64_t v323 = 0;
            do
            {
              unint64_t v324 = v318 + 1;
              *((void *)this + 1) = v318 + 1;
              char v325 = *(unsigned char *)(v320 + v318);
              v323 |= (unint64_t)(v325 & 0x7F) << v321;
              if ((v325 & 0x80) == 0) {
                goto LABEL_796;
              }
              v321 += 7;
              unint64_t v318 = v324;
              BOOL v15 = v322++ > 8;
            }
            while (!v15);
LABEL_601:
            uint64_t v323 = 0;
            goto LABEL_796;
          }
          char v523 = 0;
          unsigned int v524 = 0;
          uint64_t v323 = 0;
          if (v319 <= v318) {
            unint64_t v319 = *((void *)this + 1);
          }
          while (2)
          {
            if (v319 == v318)
            {
              uint64_t v323 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v525 = v318 + 1;
              char v526 = *(unsigned char *)(v320 + v318);
              *((void *)this + 1) = v525;
              v323 |= (unint64_t)(v526 & 0x7F) << v523;
              if (v526 < 0)
              {
                v523 += 7;
                unint64_t v318 = v525;
                BOOL v15 = v524++ > 8;
                if (v15) {
                  goto LABEL_601;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v323 = 0;
              }
            }
            break;
          }
LABEL_796:
          *(void *)(a1 + 24) = v323;
          goto LABEL_821;
        case 0x56u:
          *v8 |= 0x40000uLL;
          unint64_t v326 = *((void *)this + 1);
          unint64_t v327 = *((void *)this + 2);
          uint64_t v328 = *(void *)this;
          if (v326 <= 0xFFFFFFFFFFFFFFF5 && v326 + 10 <= v327)
          {
            char v329 = 0;
            unsigned int v330 = 0;
            uint64_t v331 = 0;
            do
            {
              unint64_t v332 = v326 + 1;
              *((void *)this + 1) = v326 + 1;
              char v333 = *(unsigned char *)(v328 + v326);
              v331 |= (unint64_t)(v333 & 0x7F) << v329;
              if ((v333 & 0x80) == 0) {
                goto LABEL_800;
              }
              v329 += 7;
              unint64_t v326 = v332;
              BOOL v15 = v330++ > 8;
            }
            while (!v15);
LABEL_608:
            uint64_t v331 = 0;
            goto LABEL_800;
          }
          char v527 = 0;
          unsigned int v528 = 0;
          uint64_t v331 = 0;
          if (v327 <= v326) {
            unint64_t v327 = *((void *)this + 1);
          }
          while (2)
          {
            if (v327 == v326)
            {
              uint64_t v331 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v529 = v326 + 1;
              char v530 = *(unsigned char *)(v328 + v326);
              *((void *)this + 1) = v529;
              v331 |= (unint64_t)(v530 & 0x7F) << v527;
              if (v530 < 0)
              {
                v527 += 7;
                unint64_t v326 = v529;
                BOOL v15 = v528++ > 8;
                if (v15) {
                  goto LABEL_608;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v331 = 0;
              }
            }
            break;
          }
LABEL_800:
          *(void *)(a1 + 152) = v331;
          goto LABEL_821;
        case 0x57u:
          *v8 |= 0x20000uLL;
          unint64_t v334 = *((void *)this + 1);
          unint64_t v335 = *((void *)this + 2);
          uint64_t v336 = *(void *)this;
          if (v334 <= 0xFFFFFFFFFFFFFFF5 && v334 + 10 <= v335)
          {
            char v337 = 0;
            unsigned int v338 = 0;
            uint64_t v339 = 0;
            do
            {
              unint64_t v340 = v334 + 1;
              *((void *)this + 1) = v334 + 1;
              char v341 = *(unsigned char *)(v336 + v334);
              v339 |= (unint64_t)(v341 & 0x7F) << v337;
              if ((v341 & 0x80) == 0) {
                goto LABEL_804;
              }
              v337 += 7;
              unint64_t v334 = v340;
              BOOL v15 = v338++ > 8;
            }
            while (!v15);
LABEL_615:
            uint64_t v339 = 0;
            goto LABEL_804;
          }
          char v531 = 0;
          unsigned int v532 = 0;
          uint64_t v339 = 0;
          if (v335 <= v334) {
            unint64_t v335 = *((void *)this + 1);
          }
          while (2)
          {
            if (v335 == v334)
            {
              uint64_t v339 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v533 = v334 + 1;
              char v534 = *(unsigned char *)(v336 + v334);
              *((void *)this + 1) = v533;
              v339 |= (unint64_t)(v534 & 0x7F) << v531;
              if (v534 < 0)
              {
                v531 += 7;
                unint64_t v334 = v533;
                BOOL v15 = v532++ > 8;
                if (v15) {
                  goto LABEL_615;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v339 = 0;
              }
            }
            break;
          }
LABEL_804:
          *(void *)(a1 + 144) = v339;
          goto LABEL_821;
        case 0x58u:
          *v8 |= 0x80uLL;
          unint64_t v342 = *((void *)this + 1);
          unint64_t v343 = *((void *)this + 2);
          uint64_t v344 = *(void *)this;
          if (v342 <= 0xFFFFFFFFFFFFFFF5 && v342 + 10 <= v343)
          {
            char v345 = 0;
            unsigned int v346 = 0;
            uint64_t v347 = 0;
            do
            {
              unint64_t v348 = v342 + 1;
              *((void *)this + 1) = v342 + 1;
              char v349 = *(unsigned char *)(v344 + v342);
              v347 |= (unint64_t)(v349 & 0x7F) << v345;
              if ((v349 & 0x80) == 0) {
                goto LABEL_808;
              }
              v345 += 7;
              unint64_t v342 = v348;
              BOOL v15 = v346++ > 8;
            }
            while (!v15);
LABEL_622:
            uint64_t v347 = 0;
            goto LABEL_808;
          }
          char v535 = 0;
          unsigned int v536 = 0;
          uint64_t v347 = 0;
          if (v343 <= v342) {
            unint64_t v343 = *((void *)this + 1);
          }
          while (2)
          {
            if (v343 == v342)
            {
              uint64_t v347 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v537 = v342 + 1;
              char v538 = *(unsigned char *)(v344 + v342);
              *((void *)this + 1) = v537;
              v347 |= (unint64_t)(v538 & 0x7F) << v535;
              if (v538 < 0)
              {
                v535 += 7;
                unint64_t v342 = v537;
                BOOL v15 = v536++ > 8;
                if (v15) {
                  goto LABEL_622;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v347 = 0;
              }
            }
            break;
          }
LABEL_808:
          *(void *)(a1 + 64) = v347;
          goto LABEL_821;
        case 0x59u:
          *v8 |= 0x1000uLL;
          unint64_t v350 = *((void *)this + 1);
          unint64_t v351 = *((void *)this + 2);
          uint64_t v352 = *(void *)this;
          if (v350 <= 0xFFFFFFFFFFFFFFF5 && v350 + 10 <= v351)
          {
            char v353 = 0;
            unsigned int v354 = 0;
            uint64_t v355 = 0;
            do
            {
              unint64_t v356 = v350 + 1;
              *((void *)this + 1) = v350 + 1;
              char v357 = *(unsigned char *)(v352 + v350);
              v355 |= (unint64_t)(v357 & 0x7F) << v353;
              if ((v357 & 0x80) == 0) {
                goto LABEL_812;
              }
              v353 += 7;
              unint64_t v350 = v356;
              BOOL v15 = v354++ > 8;
            }
            while (!v15);
LABEL_629:
            uint64_t v355 = 0;
            goto LABEL_812;
          }
          char v539 = 0;
          unsigned int v540 = 0;
          uint64_t v355 = 0;
          if (v351 <= v350) {
            unint64_t v351 = *((void *)this + 1);
          }
          while (2)
          {
            if (v351 == v350)
            {
              uint64_t v355 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v541 = v350 + 1;
              char v542 = *(unsigned char *)(v352 + v350);
              *((void *)this + 1) = v541;
              v355 |= (unint64_t)(v542 & 0x7F) << v539;
              if (v542 < 0)
              {
                v539 += 7;
                unint64_t v350 = v541;
                BOOL v15 = v540++ > 8;
                if (v15) {
                  goto LABEL_629;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v355 = 0;
              }
            }
            break;
          }
LABEL_812:
          *(void *)(a1 + 104) = v355;
          goto LABEL_821;
        case 0x64u:
          *v8 |= 0x4000000000uLL;
          unint64_t v358 = *((void *)this + 1);
          unint64_t v359 = *((void *)this + 2);
          uint64_t v360 = *(void *)this;
          if (v358 <= 0xFFFFFFFFFFFFFFF5 && v358 + 10 <= v359)
          {
            char v361 = 0;
            unsigned int v362 = 0;
            uint64_t v363 = 0;
            do
            {
              unint64_t v364 = v358 + 1;
              *((void *)this + 1) = v358 + 1;
              char v365 = *(unsigned char *)(v360 + v358);
              v363 |= (unint64_t)(v365 & 0x7F) << v361;
              if ((v365 & 0x80) == 0) {
                goto LABEL_816;
              }
              v361 += 7;
              unint64_t v358 = v364;
              BOOL v15 = v362++ > 8;
            }
            while (!v15);
LABEL_636:
            uint64_t v363 = 0;
            goto LABEL_816;
          }
          char v543 = 0;
          unsigned int v544 = 0;
          uint64_t v363 = 0;
          if (v359 <= v358) {
            unint64_t v359 = *((void *)this + 1);
          }
          while (2)
          {
            if (v359 == v358)
            {
              uint64_t v363 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v545 = v358 + 1;
              char v546 = *(unsigned char *)(v360 + v358);
              *((void *)this + 1) = v545;
              v363 |= (unint64_t)(v546 & 0x7F) << v543;
              if (v546 < 0)
              {
                v543 += 7;
                unint64_t v358 = v545;
                BOOL v15 = v544++ > 8;
                if (v15) {
                  goto LABEL_636;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v363 = 0;
              }
            }
            break;
          }
LABEL_816:
          *(void *)(a1 + 312) = v363;
          goto LABEL_821;
        case 0x65u:
          *v8 |= 0x1000000000uLL;
          unint64_t v366 = *((void *)this + 1);
          unint64_t v367 = *((void *)this + 2);
          uint64_t v368 = *(void *)this;
          if (v366 <= 0xFFFFFFFFFFFFFFF5 && v366 + 10 <= v367)
          {
            char v369 = 0;
            unsigned int v370 = 0;
            uint64_t v371 = 0;
            do
            {
              unint64_t v372 = v366 + 1;
              *((void *)this + 1) = v366 + 1;
              char v373 = *(unsigned char *)(v368 + v366);
              v371 |= (unint64_t)(v373 & 0x7F) << v369;
              if ((v373 & 0x80) == 0) {
                goto LABEL_820;
              }
              v369 += 7;
              unint64_t v366 = v372;
              BOOL v15 = v370++ > 8;
            }
            while (!v15);
LABEL_643:
            uint64_t v371 = 0;
            goto LABEL_820;
          }
          char v547 = 0;
          unsigned int v548 = 0;
          uint64_t v371 = 0;
          if (v367 <= v366) {
            unint64_t v367 = *((void *)this + 1);
          }
          break;
        case 0x66u:
          *v8 |= 0x2000000000uLL;
          unint64_t v374 = *((void *)this + 1);
          if (v374 <= 0xFFFFFFFFFFFFFFF7 && v374 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 304) = *(void *)(*(void *)this + v374);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_821;
        default:
          uint64_t result = PB::Reader::skip(this, v12 >> 3, v12 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_821;
      }
      while (1)
      {
        if (v367 == v366)
        {
          uint64_t v371 = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_820;
        }
        unint64_t v549 = v366 + 1;
        char v550 = *(unsigned char *)(v368 + v366);
        *((void *)this + 1) = v549;
        v371 |= (unint64_t)(v550 & 0x7F) << v547;
        if ((v550 & 0x80) == 0) {
          break;
        }
        v547 += 7;
        unint64_t v366 = v549;
        BOOL v15 = v548++ > 8;
        if (v15) {
          goto LABEL_643;
        }
      }
      if (*((unsigned char *)this + 24)) {
        uint64_t v371 = 0;
      }
LABEL_820:
      *(void *)(a1 + 296) = v371;
LABEL_821:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v12 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v9 + v2);
      *((void *)this + 1) = v18;
      v12 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v12 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101647BF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = (uint64_t *)(result + 364);
  uint64_t v5 = *(void *)(result + 364);
  if ((v5 & 0x40000000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 248), 1u);
    uint64_t v5 = *v4;
    if ((*v4 & 0x80000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((v5 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 256), 2u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 160), 0x15u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 168), 0x16u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 176), 0x2Cu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000000) == 0)
  {
LABEL_7:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 320), 0x2Du);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 344), 0x2Eu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 328), 0x2Fu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 336), 0x30u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 352), 0x31u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 360), 0x32u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 200), 0x33u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 224), 0x34u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 208), 0x35u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 216), 0x36u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 184), 0x37u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 192), 0x38u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v5 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0x3Bu);
  uint64_t v5 = *v4;
  if ((*v4 & 8) == 0)
  {
LABEL_20:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0x3Cu);
  uint64_t v5 = *v4;
  if ((*v4 & 1) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0x3Du);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 0x3Eu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100) == 0)
  {
LABEL_23:
    if ((v5 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 72), 0x3Fu);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v5 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0x40u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v5 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 80), 0x41u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400) == 0)
  {
LABEL_26:
    if ((v5 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 88), 0x42u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 96), 0x43u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v5 & 2) == 0) {
      goto LABEL_29;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 120), 0x44u);
  uint64_t v5 = *v4;
  if ((*v4 & 2) == 0)
  {
LABEL_29:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 0x45u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x8000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 128), 0x46u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 288), 0x47u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x400000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 280), 0x48u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 272), 0x49u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 264), 0x4Au);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 240), 0x51u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 232), 0x52u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x2000) == 0)
  {
LABEL_37:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 112), 0x53u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x10000) == 0)
  {
LABEL_38:
    if ((v5 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 136), 0x54u);
  uint64_t v5 = *v4;
  if ((*v4 & 4) == 0)
  {
LABEL_39:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x55u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x40000) == 0)
  {
LABEL_40:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 152), 0x56u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x20000) == 0)
  {
LABEL_41:
    if ((v5 & 0x80) == 0) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 144), 0x57u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x80) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 64), 0x58u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000) == 0)
  {
LABEL_43:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 104), 0x59u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x4000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_45;
    }
LABEL_90:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 296), 0x65u);
    if ((*v4 & 0x2000000000) == 0) {
      return result;
    }
    goto LABEL_91;
  }
LABEL_89:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 312), 0x64u);
  uint64_t v5 = *v4;
  if ((*v4 & 0x1000000000) != 0) {
    goto LABEL_90;
  }
LABEL_45:
  if ((v5 & 0x2000000000) == 0) {
    return result;
  }
LABEL_91:
  double v6 = *(double *)(v3 + 304);

  return PB::Writer::write(this, v6, 0x66u);
}

void *sub_101648128(void *result)
{
  *uint64_t result = &off_102332DF0;
  *(void *)((char *)result + 156) = 0;
  return result;
}

void sub_101648150(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101648188(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102332DF0;
  *(void *)(a1 + 156) = 0;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    uint64_t v3 = 4;
    *(void *)(a1 + 156) = 4;
    *(double *)(a1 + 24) = result;
    uint64_t v2 = *(void *)(a2 + 156);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 32);
    v3 |= 8uLL;
    *(void *)(a1 + 156) = v3;
    *(void *)(a1 + 32) = v5;
    uint64_t v2 = *(void *)(a2 + 156);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2uLL;
    *(void *)(a1 + 156) = v3;
    *(void *)(a1 + 16) = v6;
    uint64_t v2 = *(void *)(a2 + 156);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x200) == 0) {
        goto LABEL_9;
      }
      goto LABEL_43;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(result) = *(_DWORD *)(a2 + 64);
  v3 |= 0x400uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 64) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200) == 0)
  {
LABEL_9:
    if ((v2 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(result) = *(_DWORD *)(a2 + 60);
  v3 |= 0x200uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 60) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100) == 0)
  {
LABEL_10:
    if ((v2 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(result) = *(_DWORD *)(a2 + 56);
  v3 |= 0x100uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 56) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800) == 0)
  {
LABEL_11:
    if ((v2 & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  int v7 = *(_DWORD *)(a2 + 68);
  v3 |= 0x800uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 68) = v7;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  int v8 = *(_DWORD *)(a2 + 148);
  v3 |= 0x80000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 148) = v8;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x1000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  int v9 = *(_DWORD *)(a2 + 72);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 72) = v9;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  LODWORD(result) = *(_DWORD *)(a2 + 136);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 136) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  LODWORD(result) = *(_DWORD *)(a2 + 140);
  v3 |= 0x20000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 140) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  LODWORD(result) = *(_DWORD *)(a2 + 132);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 132) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x40000) == 0)
  {
LABEL_17:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  int v10 = *(_DWORD *)(a2 + 96);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 96) = v10;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x4000) == 0)
  {
LABEL_18:
    if ((v2 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  LODWORD(result) = *(_DWORD *)(a2 + 80);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 80) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  int v11 = *(_DWORD *)(a2 + 44);
  v3 |= 0x20uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 44) = v11;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  char v12 = *(unsigned char *)(a2 + 154);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 156) = v3;
  *(unsigned char *)(a1 + 154) = v12;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v2 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  char v13 = *(unsigned char *)(a2 + 153);
  v3 |= 0x200000000uLL;
  *(void *)(a1 + 156) = v3;
  *(unsigned char *)(a1 + 153) = v13;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80) == 0)
  {
LABEL_22:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  int v14 = *(_DWORD *)(a2 + 52);
  v3 |= 0x80uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 52) = v14;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  int v15 = *(_DWORD *)(a2 + 144);
  v3 |= 0x40000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 144) = v15;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  int v16 = *(_DWORD *)(a2 + 124);
  v3 |= 0x2000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 124) = v16;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_25:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  char v17 = *(unsigned char *)(a2 + 155);
  v3 |= 0x800000000uLL;
  *(void *)(a1 + 156) = v3;
  *(unsigned char *)(a1 + 155) = v17;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_26:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v18 = *(unsigned char *)(a2 + 152);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(a1 + 156) = v3;
  *(unsigned char *)(a1 + 152) = v18;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x20000) == 0)
  {
LABEL_27:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  int v19 = *(_DWORD *)(a2 + 92);
  v3 |= 0x20000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 92) = v19;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x200000) == 0)
  {
LABEL_28:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  int v20 = *(_DWORD *)(a2 + 108);
  v3 |= 0x200000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 108) = v20;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x400000) == 0)
  {
LABEL_29:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  int v21 = *(_DWORD *)(a2 + 112);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 112) = v21;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x80000) == 0)
  {
LABEL_30:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  int v22 = *(_DWORD *)(a2 + 100);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 100) = v22;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x8000) == 0)
  {
LABEL_31:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }
LABEL_65:
  int v23 = *(_DWORD *)(a2 + 84);
  v3 |= 0x8000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 84) = v23;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x800000) == 0)
  {
LABEL_32:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_67;
  }
LABEL_66:
  LODWORD(result) = *(_DWORD *)(a2 + 116);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 116) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x100000) == 0)
  {
LABEL_33:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_68;
  }
LABEL_67:
  int v24 = *(_DWORD *)(a2 + 104);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 104) = v24;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_69;
  }
LABEL_68:
  LODWORD(result) = *(_DWORD *)(a2 + 128);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 128) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x10) == 0) {
      goto LABEL_36;
    }
    goto LABEL_70;
  }
LABEL_69:
  int v25 = *(_DWORD *)(a2 + 120);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 120) = v25;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10) == 0)
  {
LABEL_36:
    if ((v2 & 0x40) == 0) {
      goto LABEL_37;
    }
    goto LABEL_71;
  }
LABEL_70:
  int v26 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 40) = v26;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x40) == 0)
  {
LABEL_37:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_72;
  }
LABEL_71:
  LODWORD(result) = *(_DWORD *)(a2 + 48);
  v3 |= 0x40uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 48) = LODWORD(result);
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x10000) == 0)
  {
LABEL_38:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_73;
  }
LABEL_72:
  int v27 = *(_DWORD *)(a2 + 88);
  v3 |= 0x10000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 88) = v27;
  uint64_t v2 = *(void *)(a2 + 156);
  if ((v2 & 0x2000) == 0)
  {
LABEL_39:
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_74:
    double result = *(double *)(a2 + 8);
    *(void *)(a1 + 156) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
LABEL_73:
  int v28 = *(_DWORD *)(a2 + 76);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 156) = v3;
  *(_DWORD *)(a1 + 76) = v28;
  if (*(void *)(a2 + 156)) {
    goto LABEL_74;
  }
  return result;
}

uint64_t sub_1016485A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "conisderedSOS", *(_DWORD *)(a1 + 40));
    uint64_t v5 = *(void *)(a1 + 156);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x100000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaSteps", *(_DWORD *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "didCancelSOS", *(unsigned char *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "distanceTraveled", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "fallAlertUndelayedTimestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "fallTime", *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "fromState", *(_DWORD *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "isActive", *(unsigned char *)(a1 + 153));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "isStand", *(unsigned char *)(a1 + 154));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "maxNumQuiescentBins", *(_DWORD *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "maxNumStaticBins", *(_DWORD *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "nominalQuiescentThreshold", *(_DWORD *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "numActiveBins", *(_DWORD *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "numCyclingEpochs", *(_DWORD *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "numNonzeroStepEpochs", *(_DWORD *)(a1 + 92));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "numPeaks", *(_DWORD *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x80000) == 0)
  {
LABEL_23:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "numQuiescentBins", *(_DWORD *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x100000) == 0)
  {
LABEL_24:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "numSharpPeaks", *(_DWORD *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x200000) == 0)
  {
LABEL_25:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "numStandBins", *(_DWORD *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x400000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "numStaticBins", *(_DWORD *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "onBodyFeature", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 8) == 0) {
      goto LABEL_30;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "quiescentThreshold", *(_DWORD *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 8) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "sensorTime", *(void *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "sentFallAlert", *(unsigned char *)(a1 + 155));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "sharpPeaksDelaySpread", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 156);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
LABEL_75:
  PB::TextFormatter::format(this, "toState", *(_DWORD *)(a1 + 144));
  if ((*(void *)(a1 + 156) & 0x80000000) != 0) {
LABEL_37:
  }
    PB::TextFormatter::format(this, "totalNumStaticBins", *(_DWORD *)(a1 + 148));
LABEL_38:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101648A68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 156) |= 4uLL;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v20);
          goto LABEL_364;
        case 2u:
          *(void *)(a1 + 156) |= 8uLL;
          unint64_t v22 = *((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
          uint64_t v24 = *(void *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)this + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_368;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v14 = v26++ > 8;
            }
            while (!v14);
LABEL_221:
            uint64_t v27 = 0;
            goto LABEL_368;
          }
          char v211 = 0;
          unsigned int v212 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)this + 1);
          }
          while (2)
          {
            if (v23 == v22)
            {
              uint64_t v27 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v213 = v22 + 1;
              char v214 = *(unsigned char *)(v24 + v22);
              *((void *)this + 1) = v213;
              v27 |= (unint64_t)(v214 & 0x7F) << v211;
              if (v214 < 0)
              {
                v211 += 7;
                unint64_t v22 = v213;
                BOOL v14 = v212++ > 8;
                if (v14) {
                  goto LABEL_221;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v27 = 0;
              }
            }
            break;
          }
LABEL_368:
          *(void *)(a1 + 32) = v27;
          goto LABEL_210;
        case 3u:
          *(void *)(a1 + 156) |= 2uLL;
          unint64_t v30 = *((void *)this + 1);
          unint64_t v31 = *((void *)this + 2);
          uint64_t v32 = *(void *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            do
            {
              unint64_t v36 = v30 + 1;
              *((void *)this + 1) = v30 + 1;
              char v37 = *(unsigned char *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0) {
                goto LABEL_372;
              }
              v33 += 7;
              unint64_t v30 = v36;
              BOOL v14 = v34++ > 8;
            }
            while (!v14);
LABEL_228:
            uint64_t v35 = 0;
            goto LABEL_372;
          }
          char v215 = 0;
          unsigned int v216 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)this + 1);
          }
          while (2)
          {
            if (v31 == v30)
            {
              uint64_t v35 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v217 = v30 + 1;
              char v218 = *(unsigned char *)(v32 + v30);
              *((void *)this + 1) = v217;
              v35 |= (unint64_t)(v218 & 0x7F) << v215;
              if (v218 < 0)
              {
                v215 += 7;
                unint64_t v30 = v217;
                BOOL v14 = v216++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v35 = 0;
              }
            }
            break;
          }
LABEL_372:
          *(void *)(a1 + 16) = v35;
          goto LABEL_210;
        case 4u:
          *(void *)(a1 + 156) |= 0x400uLL;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_191;
        case 5u:
          *(void *)(a1 + 156) |= 0x200uLL;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_191;
        case 6u:
          *(void *)(a1 + 156) |= 0x100uLL;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_191;
        case 7u:
          *(void *)(a1 + 156) |= 0x800uLL;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_376;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v46) = 0;
            goto LABEL_376;
          }
          char v219 = 0;
          unsigned int v220 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v221 = v41 + 1;
              char v222 = *(unsigned char *)(v43 + v41);
              *((void *)this + 1) = v221;
              v46 |= (unint64_t)(v222 & 0x7F) << v219;
              if (v222 < 0)
              {
                v219 += 7;
                unint64_t v41 = v221;
                BOOL v14 = v220++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_376:
          *(_DWORD *)(a1 + 68) = v46;
          goto LABEL_210;
        case 8u:
          *(void *)(a1 + 156) |= 0x80000000uLL;
          unint64_t v49 = *((void *)this + 1);
          unint64_t v50 = *((void *)this + 2);
          uint64_t v51 = *(void *)this;
          if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
          {
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v54 = 0;
            do
            {
              unint64_t v55 = v49 + 1;
              *((void *)this + 1) = v49 + 1;
              char v56 = *(unsigned char *)(v51 + v49);
              v54 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0) {
                goto LABEL_380;
              }
              v52 += 7;
              unint64_t v49 = v55;
              BOOL v14 = v53++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v54) = 0;
            goto LABEL_380;
          }
          char v223 = 0;
          unsigned int v224 = 0;
          uint64_t v54 = 0;
          if (v50 <= v49) {
            unint64_t v50 = *((void *)this + 1);
          }
          while (2)
          {
            if (v50 == v49)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v225 = v49 + 1;
              char v226 = *(unsigned char *)(v51 + v49);
              *((void *)this + 1) = v225;
              v54 |= (unint64_t)(v226 & 0x7F) << v223;
              if (v226 < 0)
              {
                v223 += 7;
                unint64_t v49 = v225;
                BOOL v14 = v224++ > 8;
                if (v14) {
                  goto LABEL_242;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v54) = 0;
              }
            }
            break;
          }
LABEL_380:
          *(_DWORD *)(a1 + 148) = v54;
          goto LABEL_210;
        case 9u:
          *(void *)(a1 + 156) |= 0x1000uLL;
          unint64_t v57 = *((void *)this + 1);
          unint64_t v58 = *((void *)this + 2);
          uint64_t v59 = *(void *)this;
          if (v57 <= 0xFFFFFFFFFFFFFFF5 && v57 + 10 <= v58)
          {
            char v60 = 0;
            unsigned int v61 = 0;
            uint64_t v62 = 0;
            do
            {
              unint64_t v63 = v57 + 1;
              *((void *)this + 1) = v57 + 1;
              char v64 = *(unsigned char *)(v59 + v57);
              v62 |= (unint64_t)(v64 & 0x7F) << v60;
              if ((v64 & 0x80) == 0) {
                goto LABEL_384;
              }
              v60 += 7;
              unint64_t v57 = v63;
              BOOL v14 = v61++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v62) = 0;
            goto LABEL_384;
          }
          char v227 = 0;
          unsigned int v228 = 0;
          uint64_t v62 = 0;
          if (v58 <= v57) {
            unint64_t v58 = *((void *)this + 1);
          }
          while (2)
          {
            if (v58 == v57)
            {
              LODWORD(v62) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v229 = v57 + 1;
              char v230 = *(unsigned char *)(v59 + v57);
              *((void *)this + 1) = v229;
              v62 |= (unint64_t)(v230 & 0x7F) << v227;
              if (v230 < 0)
              {
                v227 += 7;
                unint64_t v57 = v229;
                BOOL v14 = v228++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v62) = 0;
              }
            }
            break;
          }
LABEL_384:
          *(_DWORD *)(a1 + 72) = v62;
          goto LABEL_210;
        case 0xAu:
          *(void *)(a1 + 156) |= 0x10000000uLL;
          unint64_t v65 = *((void *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v65);
          goto LABEL_191;
        case 0xBu:
          *(void *)(a1 + 156) |= 0x20000000uLL;
          unint64_t v66 = *((void *)this + 1);
          if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v66);
          goto LABEL_191;
        case 0xCu:
          *(void *)(a1 + 156) |= 0x8000000uLL;
          unint64_t v67 = *((void *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v67);
          goto LABEL_191;
        case 0xDu:
          *(void *)(a1 + 156) |= 0x40000uLL;
          unint64_t v68 = *((void *)this + 1);
          unint64_t v69 = *((void *)this + 2);
          uint64_t v70 = *(void *)this;
          if (v68 <= 0xFFFFFFFFFFFFFFF5 && v68 + 10 <= v69)
          {
            char v71 = 0;
            unsigned int v72 = 0;
            uint64_t v73 = 0;
            do
            {
              unint64_t v74 = v68 + 1;
              *((void *)this + 1) = v68 + 1;
              char v75 = *(unsigned char *)(v70 + v68);
              v73 |= (unint64_t)(v75 & 0x7F) << v71;
              if ((v75 & 0x80) == 0) {
                goto LABEL_388;
              }
              v71 += 7;
              unint64_t v68 = v74;
              BOOL v14 = v72++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v73) = 0;
            goto LABEL_388;
          }
          char v231 = 0;
          unsigned int v232 = 0;
          uint64_t v73 = 0;
          if (v69 <= v68) {
            unint64_t v69 = *((void *)this + 1);
          }
          while (2)
          {
            if (v69 == v68)
            {
              LODWORD(v73) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v233 = v68 + 1;
              char v234 = *(unsigned char *)(v70 + v68);
              *((void *)this + 1) = v233;
              v73 |= (unint64_t)(v234 & 0x7F) << v231;
              if (v234 < 0)
              {
                v231 += 7;
                unint64_t v68 = v233;
                BOOL v14 = v232++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v73) = 0;
              }
            }
            break;
          }
LABEL_388:
          *(_DWORD *)(a1 + 96) = v73;
          goto LABEL_210;
        case 0xEu:
          *(void *)(a1 + 156) |= 0x4000uLL;
          unint64_t v76 = *((void *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFFBLL || v76 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v76);
          goto LABEL_191;
        case 0xFu:
          *(void *)(a1 + 156) |= 0x20uLL;
          unint64_t v77 = *((void *)this + 1);
          unint64_t v78 = *((void *)this + 2);
          uint64_t v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_392;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v82) = 0;
            goto LABEL_392;
          }
          char v235 = 0;
          unsigned int v236 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v237 = v77 + 1;
              char v238 = *(unsigned char *)(v79 + v77);
              *((void *)this + 1) = v237;
              v82 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                unint64_t v77 = v237;
                BOOL v14 = v236++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_392:
          *(_DWORD *)(a1 + 44) = v82;
          goto LABEL_210;
        case 0x10u:
          *(void *)(a1 + 156) |= 0x400000000uLL;
          unint64_t v85 = *((void *)this + 1);
          if (v85 >= *((void *)this + 2))
          {
            BOOL v88 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v86 = v85 + 1;
            int v87 = *(unsigned __int8 *)(*(void *)this + v85);
            *((void *)this + 1) = v86;
            BOOL v88 = v87 != 0;
          }
          *(unsigned char *)(a1 + 154) = v88;
          goto LABEL_210;
        case 0x11u:
          *(void *)(a1 + 156) |= 0x200000000uLL;
          unint64_t v89 = *((void *)this + 1);
          if (v89 >= *((void *)this + 2))
          {
            BOOL v92 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v90 = v89 + 1;
            int v91 = *(unsigned __int8 *)(*(void *)this + v89);
            *((void *)this + 1) = v90;
            BOOL v92 = v91 != 0;
          }
          *(unsigned char *)(a1 + 153) = v92;
          goto LABEL_210;
        case 0x12u:
          *(void *)(a1 + 156) |= 0x80uLL;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_396;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v98) = 0;
            goto LABEL_396;
          }
          char v239 = 0;
          unsigned int v240 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v241 = v93 + 1;
              char v242 = *(unsigned char *)(v95 + v93);
              *((void *)this + 1) = v241;
              v98 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                unint64_t v93 = v241;
                BOOL v14 = v240++ > 8;
                if (v14) {
                  goto LABEL_274;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 52) = v98;
          goto LABEL_210;
        case 0x13u:
          *(void *)(a1 + 156) |= 0x40000000uLL;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(unsigned char *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_400;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v106) = 0;
            goto LABEL_400;
          }
          char v243 = 0;
          unsigned int v244 = 0;
          uint64_t v106 = 0;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v245 = v101 + 1;
              char v246 = *(unsigned char *)(v103 + v101);
              *((void *)this + 1) = v245;
              v106 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                unint64_t v101 = v245;
                BOOL v14 = v244++ > 8;
                if (v14) {
                  goto LABEL_281;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 144) = v106;
          goto LABEL_210;
        case 0x14u:
          *(void *)(a1 + 156) |= 0x2000000uLL;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_404;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v114) = 0;
            goto LABEL_404;
          }
          char v247 = 0;
          unsigned int v248 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v249 = v109 + 1;
              char v250 = *(unsigned char *)(v111 + v109);
              *((void *)this + 1) = v249;
              v114 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                unint64_t v109 = v249;
                BOOL v14 = v248++ > 8;
                if (v14) {
                  goto LABEL_288;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 124) = v114;
          goto LABEL_210;
        case 0x15u:
          *(void *)(a1 + 156) |= 0x800000000uLL;
          unint64_t v117 = *((void *)this + 1);
          if (v117 >= *((void *)this + 2))
          {
            BOOL v120 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v118 = v117 + 1;
            int v119 = *(unsigned __int8 *)(*(void *)this + v117);
            *((void *)this + 1) = v118;
            BOOL v120 = v119 != 0;
          }
          *(unsigned char *)(a1 + 155) = v120;
          goto LABEL_210;
        case 0x16u:
          *(void *)(a1 + 156) |= (unint64_t)&_mh_execute_header;
          unint64_t v121 = *((void *)this + 1);
          if (v121 >= *((void *)this + 2))
          {
            BOOL v124 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v122 = v121 + 1;
            int v123 = *(unsigned __int8 *)(*(void *)this + v121);
            *((void *)this + 1) = v122;
            BOOL v124 = v123 != 0;
          }
          *(unsigned char *)(a1 + 152) = v124;
          goto LABEL_210;
        case 0x17u:
          *(void *)(a1 + 156) |= 0x20000uLL;
          unint64_t v125 = *((void *)this + 1);
          unint64_t v126 = *((void *)this + 2);
          uint64_t v127 = *(void *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)this + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_408;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v130) = 0;
            goto LABEL_408;
          }
          char v251 = 0;
          unsigned int v252 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)this + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v253 = v125 + 1;
              char v254 = *(unsigned char *)(v127 + v125);
              *((void *)this + 1) = v253;
              v130 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                unint64_t v125 = v253;
                BOOL v14 = v252++ > 8;
                if (v14) {
                  goto LABEL_299;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 92) = v130;
          goto LABEL_210;
        case 0x18u:
          *(void *)(a1 + 156) |= 0x200000uLL;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_412;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v138) = 0;
            goto LABEL_412;
          }
          char v255 = 0;
          unsigned int v256 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v257 = v133 + 1;
              char v258 = *(unsigned char *)(v135 + v133);
              *((void *)this + 1) = v257;
              v138 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                unint64_t v133 = v257;
                BOOL v14 = v256++ > 8;
                if (v14) {
                  goto LABEL_306;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v138) = 0;
              }
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 108) = v138;
          goto LABEL_210;
        case 0x19u:
          *(void *)(a1 + 156) |= 0x400000uLL;
          unint64_t v141 = *((void *)this + 1);
          unint64_t v142 = *((void *)this + 2);
          uint64_t v143 = *(void *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)this + 1) = v141 + 1;
              char v148 = *(unsigned char *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_416;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v146) = 0;
            goto LABEL_416;
          }
          char v259 = 0;
          unsigned int v260 = 0;
          uint64_t v146 = 0;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)this + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v261 = v141 + 1;
              char v262 = *(unsigned char *)(v143 + v141);
              *((void *)this + 1) = v261;
              v146 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                unint64_t v141 = v261;
                BOOL v14 = v260++ > 8;
                if (v14) {
                  goto LABEL_313;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v146) = 0;
              }
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 112) = v146;
          goto LABEL_210;
        case 0x1Au:
          *(void *)(a1 + 156) |= 0x80000uLL;
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          uint64_t v151 = *(void *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)this + 1) = v149 + 1;
              char v156 = *(unsigned char *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_420;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v154) = 0;
            goto LABEL_420;
          }
          char v263 = 0;
          unsigned int v264 = 0;
          uint64_t v154 = 0;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)this + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v265 = v149 + 1;
              char v266 = *(unsigned char *)(v151 + v149);
              *((void *)this + 1) = v265;
              v154 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                unint64_t v149 = v265;
                BOOL v14 = v264++ > 8;
                if (v14) {
                  goto LABEL_320;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v154) = 0;
              }
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 100) = v154;
          goto LABEL_210;
        case 0x1Bu:
          *(void *)(a1 + 156) |= 0x8000uLL;
          unint64_t v157 = *((void *)this + 1);
          unint64_t v158 = *((void *)this + 2);
          uint64_t v159 = *(void *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v162 = 0;
            do
            {
              unint64_t v163 = v157 + 1;
              *((void *)this + 1) = v157 + 1;
              char v164 = *(unsigned char *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0) {
                goto LABEL_424;
              }
              v160 += 7;
              unint64_t v157 = v163;
              BOOL v14 = v161++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v162) = 0;
            goto LABEL_424;
          }
          char v267 = 0;
          unsigned int v268 = 0;
          uint64_t v162 = 0;
          if (v158 <= v157) {
            unint64_t v158 = *((void *)this + 1);
          }
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v269 = v157 + 1;
              char v270 = *(unsigned char *)(v159 + v157);
              *((void *)this + 1) = v269;
              v162 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                unint64_t v157 = v269;
                BOOL v14 = v268++ > 8;
                if (v14) {
                  goto LABEL_327;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v162) = 0;
              }
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 84) = v162;
          goto LABEL_210;
        case 0x1Cu:
          *(void *)(a1 + 156) |= 0x800000uLL;
          unint64_t v165 = *((void *)this + 1);
          if (v165 > 0xFFFFFFFFFFFFFFFBLL || v165 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v165);
          goto LABEL_191;
        case 0x1Du:
          *(void *)(a1 + 156) |= 0x100000uLL;
          unint64_t v166 = *((void *)this + 1);
          unint64_t v167 = *((void *)this + 2);
          uint64_t v168 = *(void *)this;
          if (v166 <= 0xFFFFFFFFFFFFFFF5 && v166 + 10 <= v167)
          {
            char v169 = 0;
            unsigned int v170 = 0;
            uint64_t v171 = 0;
            do
            {
              unint64_t v172 = v166 + 1;
              *((void *)this + 1) = v166 + 1;
              char v173 = *(unsigned char *)(v168 + v166);
              v171 |= (unint64_t)(v173 & 0x7F) << v169;
              if ((v173 & 0x80) == 0) {
                goto LABEL_428;
              }
              v169 += 7;
              unint64_t v166 = v172;
              BOOL v14 = v170++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v171) = 0;
            goto LABEL_428;
          }
          char v271 = 0;
          unsigned int v272 = 0;
          uint64_t v171 = 0;
          if (v167 <= v166) {
            unint64_t v167 = *((void *)this + 1);
          }
          while (2)
          {
            if (v167 == v166)
            {
              LODWORD(v171) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v273 = v166 + 1;
              char v274 = *(unsigned char *)(v168 + v166);
              *((void *)this + 1) = v273;
              v171 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                unint64_t v166 = v273;
                BOOL v14 = v272++ > 8;
                if (v14) {
                  goto LABEL_334;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v171) = 0;
              }
            }
            break;
          }
LABEL_428:
          *(_DWORD *)(a1 + 104) = v171;
          goto LABEL_210;
        case 0x1Eu:
          *(void *)(a1 + 156) |= 0x4000000uLL;
          unint64_t v174 = *((void *)this + 1);
          if (v174 > 0xFFFFFFFFFFFFFFFBLL || v174 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v174);
          goto LABEL_191;
        case 0x1Fu:
          *(void *)(a1 + 156) |= 0x1000000uLL;
          unint64_t v175 = *((void *)this + 1);
          unint64_t v176 = *((void *)this + 2);
          uint64_t v177 = *(void *)this;
          if (v175 <= 0xFFFFFFFFFFFFFFF5 && v175 + 10 <= v176)
          {
            char v178 = 0;
            unsigned int v179 = 0;
            uint64_t v180 = 0;
            do
            {
              unint64_t v181 = v175 + 1;
              *((void *)this + 1) = v175 + 1;
              char v182 = *(unsigned char *)(v177 + v175);
              v180 |= (unint64_t)(v182 & 0x7F) << v178;
              if ((v182 & 0x80) == 0) {
                goto LABEL_432;
              }
              v178 += 7;
              unint64_t v175 = v181;
              BOOL v14 = v179++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v180) = 0;
            goto LABEL_432;
          }
          char v275 = 0;
          unsigned int v276 = 0;
          uint64_t v180 = 0;
          if (v176 <= v175) {
            unint64_t v176 = *((void *)this + 1);
          }
          while (2)
          {
            if (v176 == v175)
            {
              LODWORD(v180) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v277 = v175 + 1;
              char v278 = *(unsigned char *)(v177 + v175);
              *((void *)this + 1) = v277;
              v180 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                unint64_t v175 = v277;
                BOOL v14 = v276++ > 8;
                if (v14) {
                  goto LABEL_341;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v180) = 0;
              }
            }
            break;
          }
LABEL_432:
          *(_DWORD *)(a1 + 120) = v180;
          goto LABEL_210;
        case 0x20u:
          *(void *)(a1 + 156) |= 0x10uLL;
          unint64_t v183 = *((void *)this + 1);
          unint64_t v184 = *((void *)this + 2);
          uint64_t v185 = *(void *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            char v186 = 0;
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            do
            {
              unint64_t v189 = v183 + 1;
              *((void *)this + 1) = v183 + 1;
              char v190 = *(unsigned char *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0) {
                goto LABEL_436;
              }
              v186 += 7;
              unint64_t v183 = v189;
              BOOL v14 = v187++ > 8;
            }
            while (!v14);
LABEL_348:
            LODWORD(v188) = 0;
            goto LABEL_436;
          }
          char v279 = 0;
          unsigned int v280 = 0;
          uint64_t v188 = 0;
          if (v184 <= v183) {
            unint64_t v184 = *((void *)this + 1);
          }
          while (2)
          {
            if (v184 == v183)
            {
              LODWORD(v188) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v281 = v183 + 1;
              char v282 = *(unsigned char *)(v185 + v183);
              *((void *)this + 1) = v281;
              v188 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                unint64_t v183 = v281;
                BOOL v14 = v280++ > 8;
                if (v14) {
                  goto LABEL_348;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v188) = 0;
              }
            }
            break;
          }
LABEL_436:
          *(_DWORD *)(a1 + 40) = v188;
          goto LABEL_210;
        case 0x21u:
          *(void *)(a1 + 156) |= 0x40uLL;
          unint64_t v191 = *((void *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((void *)this + 2)) {
            goto LABEL_209;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v191);
LABEL_191:
          uint64_t v192 = *((void *)this + 1) + 4;
          goto LABEL_192;
        case 0x22u:
          *(void *)(a1 + 156) |= 0x10000uLL;
          unint64_t v193 = *((void *)this + 1);
          unint64_t v194 = *((void *)this + 2);
          uint64_t v195 = *(void *)this;
          if (v193 <= 0xFFFFFFFFFFFFFFF5 && v193 + 10 <= v194)
          {
            char v196 = 0;
            unsigned int v197 = 0;
            uint64_t v198 = 0;
            do
            {
              unint64_t v199 = v193 + 1;
              *((void *)this + 1) = v193 + 1;
              char v200 = *(unsigned char *)(v195 + v193);
              v198 |= (unint64_t)(v200 & 0x7F) << v196;
              if ((v200 & 0x80) == 0) {
                goto LABEL_440;
              }
              v196 += 7;
              unint64_t v193 = v199;
              BOOL v14 = v197++ > 8;
            }
            while (!v14);
LABEL_355:
            LODWORD(v198) = 0;
            goto LABEL_440;
          }
          char v283 = 0;
          unsigned int v284 = 0;
          uint64_t v198 = 0;
          if (v194 <= v193) {
            unint64_t v194 = *((void *)this + 1);
          }
          while (2)
          {
            if (v194 == v193)
            {
              LODWORD(v198) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v285 = v193 + 1;
              char v286 = *(unsigned char *)(v195 + v193);
              *((void *)this + 1) = v285;
              v198 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                unint64_t v193 = v285;
                BOOL v14 = v284++ > 8;
                if (v14) {
                  goto LABEL_355;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v198) = 0;
              }
            }
            break;
          }
LABEL_440:
          *(_DWORD *)(a1 + 88) = v198;
          goto LABEL_210;
        case 0x23u:
          *(void *)(a1 + 156) |= 0x2000uLL;
          unint64_t v201 = *((void *)this + 1);
          unint64_t v202 = *((void *)this + 2);
          uint64_t v203 = *(void *)this;
          if (v201 <= 0xFFFFFFFFFFFFFFF5 && v201 + 10 <= v202)
          {
            char v204 = 0;
            unsigned int v205 = 0;
            uint64_t v206 = 0;
            do
            {
              unint64_t v207 = v201 + 1;
              *((void *)this + 1) = v201 + 1;
              char v208 = *(unsigned char *)(v203 + v201);
              v206 |= (unint64_t)(v208 & 0x7F) << v204;
              if ((v208 & 0x80) == 0) {
                goto LABEL_444;
              }
              v204 += 7;
              unint64_t v201 = v207;
              BOOL v14 = v205++ > 8;
            }
            while (!v14);
LABEL_362:
            LODWORD(v206) = 0;
            goto LABEL_444;
          }
          char v287 = 0;
          unsigned int v288 = 0;
          uint64_t v206 = 0;
          if (v202 <= v201) {
            unint64_t v202 = *((void *)this + 1);
          }
          break;
        case 0x24u:
          *(void *)(a1 + 156) |= 1uLL;
          unint64_t v209 = *((void *)this + 1);
          if (v209 <= 0xFFFFFFFFFFFFFFF7 && v209 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v209);
LABEL_364:
            uint64_t v192 = *((void *)this + 1) + 8;
LABEL_192:
            *((void *)this + 1) = v192;
          }
          else
          {
LABEL_209:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_210;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_210;
      }
      while (1)
      {
        if (v202 == v201)
        {
          LODWORD(v206) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_444;
        }
        unint64_t v289 = v201 + 1;
        char v290 = *(unsigned char *)(v203 + v201);
        *((void *)this + 1) = v289;
        v206 |= (unint64_t)(v290 & 0x7F) << v287;
        if ((v290 & 0x80) == 0) {
          break;
        }
        v287 += 7;
        unint64_t v201 = v289;
        BOOL v14 = v288++ > 8;
        if (v14) {
          goto LABEL_362;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v206) = 0;
      }
LABEL_444:
      *(_DWORD *)(a1 + 76) = v206;
LABEL_210:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10164A25C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 156);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    uint64_t v4 = *(void *)(v3 + 156);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_40;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 2u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 4u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 5u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 6u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 7u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 8u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 9u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 0xAu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0xBu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0xCu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 96), 0xDu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0xEu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 44), 0xFu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 154), 0x10u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 153), 0x11u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0x12u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 144), 0x13u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 124), 0x14u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 155), 0x15u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 152), 0x16u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 92), 0x17u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x200000) == 0)
  {
LABEL_25:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 108), 0x18u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x400000) == 0)
  {
LABEL_26:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 112), 0x19u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x80000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 84), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x800000) == 0)
  {
LABEL_29:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x100000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 104), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10) == 0)
  {
LABEL_33:
    if ((v4 & 0x40) == 0) {
      goto LABEL_34;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 0x20u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x40) == 0)
  {
LABEL_34:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0x21u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x10000) == 0)
  {
LABEL_35:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_36;
    }
LABEL_72:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0x23u);
    if ((*(void *)(v3 + 156) & 1) == 0) {
      return result;
    }
    goto LABEL_73;
  }
LABEL_71:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 88), 0x22u);
  uint64_t v4 = *(void *)(v3 + 156);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_72;
  }
LABEL_36:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_73:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5, 0x24u);
}

double sub_10164A684(uint64_t a1)
{
  *(void *)a1 = &off_102332E28;
  *(_DWORD *)(a1 + 396) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 216) = 0;
  return result;
}

void sub_10164A6E4(PB::Base *this)
{
  *(void *)this = &off_102332E28;
  unint64_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  double v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 13);
  if (v6)
  {
    *((void *)this + 14) = v6;
    operator delete(v6);
  }
  int v7 = (void *)*((void *)this + 10);
  if (v7)
  {
    *((void *)this + 11) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    *((void *)this + 8) = v8;
    operator delete(v8);
  }
  char v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)*((void *)this + 1);
  if (v10)
  {
    *((void *)this + 2) = v10;
    operator delete(v10);
  }

  PB::Base::~Base(this);
}

void sub_10164A7C8(PB::Base *a1)
{
  sub_10164A6E4(a1);

  operator delete();
}

uint64_t sub_10164A800(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 56) = 0u;
  double v5 = (char *)(a1 + 56);
  *(_OWORD *)(a1 + 104) = 0u;
  uint64_t v6 = (char *)(a1 + 104);
  *(_OWORD *)(a1 + 152) = 0u;
  int v7 = (char *)(a1 + 152);
  *(_OWORD *)(a1 + 200) = 0u;
  uint64_t v8 = (char *)(a1 + 200);
  *(void *)a1 = &off_102332E28;
  *(_DWORD *)(a1 + 396) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 216) = 0;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x80000) != 0)
  {
    uint64_t v11 = *(void *)(a2 + 376);
    int v10 = 0x80000;
    *(_DWORD *)(a1 + 396) = 0x80000;
    *(void *)(a1 + 376) = v11;
    int v9 = *(_DWORD *)(a2 + 396);
    if ((v9 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v10 = 0;
  if ((v9 & 0x1000000) != 0)
  {
LABEL_5:
    char v12 = *(unsigned char *)(a2 + 388);
    v10 |= 0x1000000u;
    *(_DWORD *)(a1 + 396) = v10;
    *(unsigned char *)(a1 + 388) = v12;
    int v9 = *(_DWORD *)(a2 + 396);
  }
LABEL_6:
  if (v9)
  {
    uint64_t v15 = *(void *)(a2 + 224);
    v10 |= 1u;
    *(_DWORD *)(a1 + 396) = v10;
    *(void *)(a1 + 224) = v15;
    int v9 = *(_DWORD *)(a2 + 396);
    if ((v9 & 0x40000) == 0)
    {
LABEL_8:
      if ((v9 & 2) == 0) {
        goto LABEL_9;
      }
      goto LABEL_42;
    }
  }
  else if ((v9 & 0x40000) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v16 = *(void *)(a2 + 368);
  v10 |= 0x40000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 368) = v16;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 2) == 0)
  {
LABEL_9:
    if ((v9 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t v17 = *(void *)(a2 + 232);
  v10 |= 2u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 232) = v17;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x10) == 0)
  {
LABEL_10:
    if ((v9 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t v18 = *(void *)(a2 + 256);
  v10 |= 0x10u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 256) = v18;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x20) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t v19 = *(void *)(a2 + 264);
  v10 |= 0x20u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 264) = v19;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t v20 = *(void *)(a2 + 288);
  v10 |= 0x100u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 288) = v20;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x400) == 0)
  {
LABEL_13:
    if ((v9 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v21 = *(void *)(a2 + 304);
  v10 |= 0x400u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 304) = v21;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x200) == 0)
  {
LABEL_14:
    if ((v9 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t v22 = *(void *)(a2 + 296);
  v10 |= 0x200u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 296) = v22;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x80) == 0)
  {
LABEL_15:
    if ((v9 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t v23 = *(void *)(a2 + 280);
  v10 |= 0x80u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 280) = v23;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x40) == 0)
  {
LABEL_16:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t v24 = *(void *)(a2 + 272);
  v10 |= 0x40u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 272) = v24;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x1000) == 0)
  {
LABEL_17:
    if ((v9 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t v25 = *(void *)(a2 + 320);
  v10 |= 0x1000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 320) = v25;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x800) == 0)
  {
LABEL_18:
    if ((v9 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t v26 = *(void *)(a2 + 312);
  v10 |= 0x800u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 312) = v26;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x20000) == 0)
  {
LABEL_19:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t v27 = *(void *)(a2 + 360);
  v10 |= 0x20000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 360) = v27;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x10000) == 0)
  {
LABEL_20:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t v28 = *(void *)(a2 + 352);
  v10 |= 0x10000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 352) = v28;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x8000) == 0)
  {
LABEL_21:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t v29 = *(void *)(a2 + 344);
  v10 |= 0x8000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 344) = v29;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x4000) == 0)
  {
LABEL_22:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t v30 = *(void *)(a2 + 336);
  v10 |= 0x4000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 336) = v30;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x2000) == 0)
  {
LABEL_23:
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t v31 = *(void *)(a2 + 328);
  v10 |= 0x2000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 328) = v31;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x80000000) == 0)
  {
LABEL_24:
    if ((v9 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  char v32 = *(unsigned char *)(a2 + 395);
  v10 |= 0x80000000;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 395) = v32;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 4) == 0)
  {
LABEL_25:
    if ((v9 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t v33 = *(void *)(a2 + 240);
  v10 |= 4u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 240) = v33;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 8) == 0)
  {
LABEL_26:
    if ((v9 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t v34 = *(void *)(a2 + 248);
  v10 |= 8u;
  *(_DWORD *)(a1 + 396) = v10;
  *(void *)(a1 + 248) = v34;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x100000) == 0)
  {
LABEL_27:
    if ((v9 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  char v35 = *(unsigned char *)(a2 + 384);
  v10 |= 0x100000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 384) = v35;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x400000) == 0)
  {
LABEL_28:
    if ((v9 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  char v36 = *(unsigned char *)(a2 + 386);
  v10 |= 0x400000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 386) = v36;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v9 & 0x200000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  char v37 = *(unsigned char *)(a2 + 394);
  v10 |= 0x40000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 394) = v37;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x200000) == 0)
  {
LABEL_30:
    if ((v9 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_64;
  }
LABEL_63:
  char v38 = *(unsigned char *)(a2 + 385);
  v10 |= 0x200000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 385) = v38;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x800000) == 0)
  {
LABEL_31:
    if ((v9 & 0x10000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_65;
  }
LABEL_64:
  char v39 = *(unsigned char *)(a2 + 387);
  v10 |= 0x800000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 387) = v39;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_32:
    if ((v9 & 0x8000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_66;
  }
LABEL_65:
  char v40 = *(unsigned char *)(a2 + 392);
  v10 |= 0x10000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 392) = v40;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x8000000) == 0)
  {
LABEL_33:
    if ((v9 & 0x20000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_67;
  }
LABEL_66:
  char v41 = *(unsigned char *)(a2 + 391);
  v10 |= 0x8000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 391) = v41;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x20000000) == 0)
  {
LABEL_34:
    if ((v9 & 0x2000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_68;
  }
LABEL_67:
  char v42 = *(unsigned char *)(a2 + 393);
  v10 |= 0x20000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 393) = v42;
  int v9 = *(_DWORD *)(a2 + 396);
  if ((v9 & 0x2000000) == 0)
  {
LABEL_35:
    if ((v9 & 0x4000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_68:
  char v43 = *(unsigned char *)(a2 + 389);
  v10 |= 0x2000000u;
  *(_DWORD *)(a1 + 396) = v10;
  *(unsigned char *)(a1 + 389) = v43;
  if ((*(_DWORD *)(a2 + 396) & 0x4000000) != 0)
  {
LABEL_36:
    char v13 = *(unsigned char *)(a2 + 390);
    *(_DWORD *)(a1 + 396) = v10 | 0x4000000;
    *(unsigned char *)(a1 + 390) = v13;
  }
LABEL_37:
  if (a1 != a2)
  {
    sub_1002DD194((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
    sub_1002DD194(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
    sub_1002DD194(v5, *(char **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
    sub_1002DD194(v6, *(char **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
    sub_1002DD194((char *)(a1 + 80), *(char **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
    sub_1002DD194((char *)(a1 + 128), *(char **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
    sub_1002DD194((char *)(a1 + 176), *(char **)(a2 + 176), *(void *)(a2 + 184), (uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 3);
    sub_1002DD194(v7, *(char **)(a2 + 152), *(void *)(a2 + 160), (uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3);
    sub_1002DD194(v8, *(char **)(a2 + 200), *(void *)(a2 + 208), (uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 3);
  }
  return a1;
}

uint64_t sub_10164ACF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 396);
  if (v5)
  {
    PB::TextFormatter::format(this, "absoluteTimestampOfImpact", *(double *)(a1 + 224));
    int v5 = *(_DWORD *)(a1 + 396);
    if ((v5 & 0x100000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_62;
    }
  }
  else if ((v5 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "anyOffWristAfterImpact", *(unsigned char *)(a1 + 384));
  int v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "aopTimestampOfImpact", *(void *)(a1 + 232));
  int v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 0x200000) == 0)
  {
LABEL_5:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "continuousLockedBeforeImpact", *(unsigned char *)(a1 + 385));
  int v5 = *(_DWORD *)(a1 + 396);
  if ((v5 & 0x400000) == 0)
  {
LABEL_6:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_64:
  PB::TextFormatter::format(this, "continuousOffWristBeforeImpact", *(unsigned char *)(a1 + 386));
  if ((*(_DWORD *)(a1 + 396) & 0x800000) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "continuousStaticAndVerticalBeforeImpact", *(unsigned char *)(a1 + 387));
LABEL_8:
  uint64_t v6 = *(double **)(a1 + 8);
  int v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryEndimestamp", v8);
  }
  int v9 = *(double **)(a1 + 32);
  int v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryStartTimestamp", v11);
  }
  char v12 = *(double **)(a1 + 56);
  char v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(this, "coreMotionWristStateHistoryState", v14);
  }
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x1000000) != 0)
  {
    PB::TextFormatter::format(this, "gatingEnabled", *(unsigned char *)(a1 + 388));
    int v15 = *(_DWORD *)(a1 + 396);
    if ((v15 & 0x2000000) == 0)
    {
LABEL_16:
      if ((v15 & 0x4000000) == 0) {
        goto LABEL_17;
      }
      goto LABEL_68;
    }
  }
  else if ((v15 & 0x2000000) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "gatingLockedNoMotionPreImpact", *(unsigned char *)(a1 + 389));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v15 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "gatingMotionPreImpact", *(unsigned char *)(a1 + 390));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v15 & 0x10000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "gatingOffWristPostImpact", *(unsigned char *)(a1 + 391));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10000000) == 0)
  {
LABEL_19:
    if ((v15 & 0x20000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "gatingOffWristPreImpact", *(unsigned char *)(a1 + 392));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20000000) == 0)
  {
LABEL_20:
    if ((v15 & 0x40000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "gatingOnCharger", *(unsigned char *)(a1 + 393));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40000000) == 0)
  {
LABEL_21:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "hasMotionBeforeImpact", *(unsigned char *)(a1 + 394));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v15 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "lastChargerState", *(unsigned char *)(a1 + 395));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 4) == 0)
  {
LABEL_23:
    if ((v15 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "lastChargerStateDuration", *(double *)(a1 + 240));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 8) == 0)
  {
LABEL_24:
    if ((v15 & 0x10) == 0) {
      goto LABEL_25;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "lastChargerStateDurationThreshold", *(double *)(a1 + 248));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x10) == 0)
  {
LABEL_25:
    if ((v15 & 0x20) == 0) {
      goto LABEL_26;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "lastCoreMotionWristState", *(void *)(a1 + 256));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x20) == 0)
  {
LABEL_26:
    if ((v15 & 0x40) == 0) {
      goto LABEL_27;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDuration", *(double *)(a1 + 264));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x40) == 0)
  {
LABEL_27:
    if ((v15 & 0x80) == 0) {
      goto LABEL_28;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostEnd", *(double *)(a1 + 272));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x80) == 0)
  {
LABEL_28:
    if ((v15 & 0x100) == 0) {
      goto LABEL_29;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostStart", *(double *)(a1 + 280));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x100) == 0)
  {
LABEL_29:
    if ((v15 & 0x200) == 0) {
      goto LABEL_30;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPostThreshold", *(double *)(a1 + 288));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x200) == 0)
  {
LABEL_30:
    if ((v15 & 0x400) == 0) {
      goto LABEL_31;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreEnd", *(double *)(a1 + 296));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x400) == 0)
  {
LABEL_31:
    if ((v15 & 0x800) == 0) {
      goto LABEL_32;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "lastCoreMotionWristStateDurationPreStart", *(double *)(a1 + 304));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x800) == 0)
  {
LABEL_32:
    if ((v15 & 0x1000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "lastLockedStateDurationPreEnd", *(double *)(a1 + 312));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x1000) == 0)
  {
LABEL_33:
    if ((v15 & 0x2000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "lastLockedStateDurationPreStart", *(double *)(a1 + 320));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x2000) == 0)
  {
LABEL_34:
    if ((v15 & 0x4000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "lastMotionState", *(void *)(a1 + 328));
  int v15 = *(_DWORD *)(a1 + 396);
  if ((v15 & 0x4000) == 0)
  {
LABEL_35:
    if ((v15 & 0x8000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_86:
  PB::TextFormatter::format(this, "lastMotionStateEndTime", *(void *)(a1 + 336));
  if ((*(_DWORD *)(a1 + 396) & 0x8000) != 0) {
LABEL_36:
  }
    PB::TextFormatter::format(this, "lastMotionStateStartTime", *(void *)(a1 + 344));
LABEL_37:
  uint64_t v16 = *(double **)(a1 + 80);
  uint64_t v17 = *(double **)(a1 + 88);
  while (v16 != v17)
  {
    double v18 = *v16++;
    PB::TextFormatter::format(this, "lockStateHistoryEndTimestamp", v18);
  }
  uint64_t v19 = *(double **)(a1 + 104);
  uint64_t v20 = *(double **)(a1 + 112);
  while (v19 != v20)
  {
    double v21 = *v19++;
    PB::TextFormatter::format(this, "lockStateHistoryStartTimestamp", v21);
  }
  uint64_t v22 = *(double **)(a1 + 128);
  uint64_t v23 = *(double **)(a1 + 136);
  while (v22 != v23)
  {
    double v24 = *v22++;
    PB::TextFormatter::format(this, "lockStateHistoryState", v24);
  }
  int v25 = *(_DWORD *)(a1 + 396);
  if ((v25 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "motionLookbackBeforeImpactEndOfInterval", *(void *)(a1 + 352));
    int v25 = *(_DWORD *)(a1 + 396);
  }
  if ((v25 & 0x20000) != 0) {
    PB::TextFormatter::format(this, "motionLookbackBeforeImpactStartOfInterval", *(void *)(a1 + 360));
  }
  uint64_t v26 = *(double **)(a1 + 152);
  uint64_t v27 = *(double **)(a1 + 160);
  while (v26 != v27)
  {
    double v28 = *v26++;
    PB::TextFormatter::format(this, "motionStateHistoryEndTimestamp", v28);
  }
  uint64_t v29 = *(double **)(a1 + 176);
  uint64_t v30 = *(double **)(a1 + 184);
  while (v29 != v30)
  {
    double v31 = *v29++;
    PB::TextFormatter::format(this, "motionStateHistoryStartTimestamp", v31);
  }
  char v32 = *(double **)(a1 + 200);
  uint64_t v33 = *(double **)(a1 + 208);
  while (v32 != v33)
  {
    double v34 = *v32++;
    PB::TextFormatter::format(this, "motionStateHistoryState", v34);
  }
  int v35 = *(_DWORD *)(a1 + 396);
  if ((v35 & 0x40000) != 0)
  {
    PB::TextFormatter::format(this, "relativeTimestampToImpact", *(double *)(a1 + 368));
    int v35 = *(_DWORD *)(a1 + 396);
  }
  if ((v35 & 0x80000) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(void *)(a1 + 376));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_10164B2C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v413 = a1 + 216;
    char v414 = (void **)(a1 + 152);
    char v415 = (void **)(a1 + 200);
    double v8 = (void **)(a1 + 176);
    uint64_t v411 = a1 + 192;
    uint64_t v412 = a1 + 168;
    int v9 = (void **)(a1 + 128);
    int v10 = (void **)(a1 + 80);
    uint64_t v409 = a1 + 96;
    uint64_t v410 = a1 + 144;
    double v11 = (void **)(a1 + 104);
    char v12 = (void **)(a1 + 56);
    uint64_t v407 = a1 + 72;
    uint64_t v408 = a1 + 120;
    char v13 = (void **)(a1 + 8);
    double v14 = (void **)(a1 + 32);
    uint64_t v405 = a1 + 48;
    uint64_t v406 = a1 + 24;
    while (1)
    {
      uint64_t v15 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v16 = 0;
      unsigned int v17 = 0;
      unint64_t v18 = 0;
      while (1)
      {
        unint64_t v19 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v20 = *(unsigned char *)(v15 + v2);
        v18 |= (unint64_t)(v20 & 0x7F) << v16;
        if ((v20 & 0x80) == 0) {
          break;
        }
        v16 += 7;
        unint64_t v2 = v19;
        BOOL v21 = v17++ > 8;
        if (v21) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v27 = v18 & 7;
      if (v27 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v28 = v18 >> 3;
      switch((v18 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 396) |= 0x80000u;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_541;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v21 = v33++ > 8;
            }
            while (!v21);
LABEL_385:
            uint64_t v34 = 0;
            goto LABEL_541;
          }
          char v298 = 0;
          unsigned int v299 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v300 = v29 + 1;
              char v301 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v300;
              v34 |= (unint64_t)(v301 & 0x7F) << v298;
              if (v301 < 0)
              {
                v298 += 7;
                unint64_t v29 = v300;
                BOOL v21 = v299++ > 8;
                if (v21) {
                  goto LABEL_385;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_541:
          *(void *)(a1 + 376) = v34;
          goto LABEL_631;
        case 2u:
          *(_DWORD *)(a1 + 396) |= 0x1000000u;
          unint64_t v167 = *((void *)this + 1);
          if (v167 >= *((void *)this + 2))
          {
            BOOL v170 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v168 = v167 + 1;
            int v169 = *(unsigned __int8 *)(*(void *)this + v167);
            *((void *)this + 1) = v168;
            BOOL v170 = v169 != 0;
          }
          *(unsigned char *)(a1 + 388) = v170;
          goto LABEL_631;
        case 3u:
          *(_DWORD *)(a1 + 396) |= 1u;
          unint64_t v171 = *((void *)this + 1);
          if (v171 > 0xFFFFFFFFFFFFFFF7 || v171 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 224) = *(void *)(*(void *)this + v171);
          goto LABEL_630;
        case 4u:
          *(_DWORD *)(a1 + 396) |= 0x40000u;
          unint64_t v172 = *((void *)this + 1);
          if (v172 > 0xFFFFFFFFFFFFFFF7 || v172 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 368) = *(void *)(*(void *)this + v172);
          goto LABEL_630;
        case 5u:
          *(_DWORD *)(a1 + 396) |= 2u;
          unint64_t v173 = *((void *)this + 1);
          unint64_t v174 = *((void *)this + 2);
          uint64_t v175 = *(void *)this;
          if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
          {
            char v176 = 0;
            unsigned int v177 = 0;
            uint64_t v178 = 0;
            do
            {
              unint64_t v179 = v173 + 1;
              *((void *)this + 1) = v173 + 1;
              char v180 = *(unsigned char *)(v175 + v173);
              v178 |= (unint64_t)(v180 & 0x7F) << v176;
              if ((v180 & 0x80) == 0) {
                goto LABEL_544;
              }
              v176 += 7;
              unint64_t v173 = v179;
              BOOL v21 = v177++ > 8;
            }
            while (!v21);
LABEL_394:
            uint64_t v178 = 0;
            goto LABEL_544;
          }
          char v302 = 0;
          unsigned int v303 = 0;
          uint64_t v178 = 0;
          if (v174 <= v173) {
            unint64_t v174 = *((void *)this + 1);
          }
          while (2)
          {
            if (v174 == v173)
            {
              uint64_t v178 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v304 = v173 + 1;
              char v305 = *(unsigned char *)(v175 + v173);
              *((void *)this + 1) = v304;
              v178 |= (unint64_t)(v305 & 0x7F) << v302;
              if (v305 < 0)
              {
                v302 += 7;
                unint64_t v173 = v304;
                BOOL v21 = v303++ > 8;
                if (v21) {
                  goto LABEL_394;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v178 = 0;
              }
            }
            break;
          }
LABEL_544:
          *(void *)(a1 + 232) = v178;
          goto LABEL_631;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x23u:
        case 0x24u:
        case 0x25u:
        case 0x26u:
        case 0x27u:
        case 0x28u:
        case 0x2Cu:
        case 0x2Du:
        case 0x2Eu:
        case 0x2Fu:
        case 0x30u:
        case 0x31u:
        case 0x32u:
LABEL_58:
          if ((PB::Reader::skip(this, v28, v27, 0) & 1) == 0) {
            return 0;
          }
          goto LABEL_631;
        case 0x15u:
          *(_DWORD *)(a1 + 396) |= 0x10u;
          unint64_t v181 = *((void *)this + 1);
          unint64_t v182 = *((void *)this + 2);
          uint64_t v183 = *(void *)this;
          if (v181 <= 0xFFFFFFFFFFFFFFF5 && v181 + 10 <= v182)
          {
            char v184 = 0;
            unsigned int v185 = 0;
            uint64_t v186 = 0;
            do
            {
              unint64_t v187 = v181 + 1;
              *((void *)this + 1) = v181 + 1;
              char v188 = *(unsigned char *)(v183 + v181);
              v186 |= (unint64_t)(v188 & 0x7F) << v184;
              if ((v188 & 0x80) == 0) {
                goto LABEL_547;
              }
              v184 += 7;
              unint64_t v181 = v187;
              BOOL v21 = v185++ > 8;
            }
            while (!v21);
LABEL_401:
            uint64_t v186 = 0;
            goto LABEL_547;
          }
          char v306 = 0;
          unsigned int v307 = 0;
          uint64_t v186 = 0;
          if (v182 <= v181) {
            unint64_t v182 = *((void *)this + 1);
          }
          while (2)
          {
            if (v182 == v181)
            {
              uint64_t v186 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v308 = v181 + 1;
              char v309 = *(unsigned char *)(v183 + v181);
              *((void *)this + 1) = v308;
              v186 |= (unint64_t)(v309 & 0x7F) << v306;
              if (v309 < 0)
              {
                v306 += 7;
                unint64_t v181 = v308;
                BOOL v21 = v307++ > 8;
                if (v21) {
                  goto LABEL_401;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v186 = 0;
              }
            }
            break;
          }
LABEL_547:
          *(void *)(a1 + 256) = v186;
          goto LABEL_631;
        case 0x16u:
          *(_DWORD *)(a1 + 396) |= 0x20u;
          unint64_t v189 = *((void *)this + 1);
          if (v189 > 0xFFFFFFFFFFFFFFF7 || v189 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 264) = *(void *)(*(void *)this + v189);
          goto LABEL_630;
        case 0x17u:
          *(_DWORD *)(a1 + 396) |= 0x100u;
          unint64_t v190 = *((void *)this + 1);
          if (v190 > 0xFFFFFFFFFFFFFFF7 || v190 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 288) = *(void *)(*(void *)this + v190);
          goto LABEL_630;
        case 0x18u:
          *(_DWORD *)(a1 + 396) |= 0x400u;
          unint64_t v191 = *((void *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFF7 || v191 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 304) = *(void *)(*(void *)this + v191);
          goto LABEL_630;
        case 0x19u:
          *(_DWORD *)(a1 + 396) |= 0x200u;
          unint64_t v192 = *((void *)this + 1);
          if (v192 > 0xFFFFFFFFFFFFFFF7 || v192 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 296) = *(void *)(*(void *)this + v192);
          goto LABEL_630;
        case 0x1Au:
          *(_DWORD *)(a1 + 396) |= 0x80u;
          unint64_t v193 = *((void *)this + 1);
          if (v193 > 0xFFFFFFFFFFFFFFF7 || v193 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 280) = *(void *)(*(void *)this + v193);
          goto LABEL_630;
        case 0x1Bu:
          *(_DWORD *)(a1 + 396) |= 0x40u;
          unint64_t v194 = *((void *)this + 1);
          if (v194 > 0xFFFFFFFFFFFFFFF7 || v194 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 272) = *(void *)(*(void *)this + v194);
          goto LABEL_630;
        case 0x1Cu:
          *(_DWORD *)(a1 + 396) |= 0x1000u;
          unint64_t v195 = *((void *)this + 1);
          if (v195 > 0xFFFFFFFFFFFFFFF7 || v195 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 320) = *(void *)(*(void *)this + v195);
          goto LABEL_630;
        case 0x1Du:
          *(_DWORD *)(a1 + 396) |= 0x800u;
          unint64_t v196 = *((void *)this + 1);
          if (v196 > 0xFFFFFFFFFFFFFFF7 || v196 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 312) = *(void *)(*(void *)this + v196);
          goto LABEL_630;
        case 0x1Eu:
          *(_DWORD *)(a1 + 396) |= 0x20000u;
          unint64_t v197 = *((void *)this + 1);
          unint64_t v198 = *((void *)this + 2);
          uint64_t v199 = *(void *)this;
          if (v197 <= 0xFFFFFFFFFFFFFFF5 && v197 + 10 <= v198)
          {
            char v200 = 0;
            unsigned int v201 = 0;
            uint64_t v202 = 0;
            do
            {
              unint64_t v203 = v197 + 1;
              *((void *)this + 1) = v197 + 1;
              char v204 = *(unsigned char *)(v199 + v197);
              v202 |= (unint64_t)(v204 & 0x7F) << v200;
              if ((v204 & 0x80) == 0) {
                goto LABEL_550;
              }
              v200 += 7;
              unint64_t v197 = v203;
              BOOL v21 = v201++ > 8;
            }
            while (!v21);
LABEL_408:
            uint64_t v202 = 0;
            goto LABEL_550;
          }
          char v310 = 0;
          unsigned int v311 = 0;
          uint64_t v202 = 0;
          if (v198 <= v197) {
            unint64_t v198 = *((void *)this + 1);
          }
          while (2)
          {
            if (v198 == v197)
            {
              uint64_t v202 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v312 = v197 + 1;
              char v313 = *(unsigned char *)(v199 + v197);
              *((void *)this + 1) = v312;
              v202 |= (unint64_t)(v313 & 0x7F) << v310;
              if (v313 < 0)
              {
                v310 += 7;
                unint64_t v197 = v312;
                BOOL v21 = v311++ > 8;
                if (v21) {
                  goto LABEL_408;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v202 = 0;
              }
            }
            break;
          }
LABEL_550:
          *(void *)(a1 + 360) = v202;
          goto LABEL_631;
        case 0x1Fu:
          *(_DWORD *)(a1 + 396) |= 0x10000u;
          unint64_t v205 = *((void *)this + 1);
          unint64_t v206 = *((void *)this + 2);
          uint64_t v207 = *(void *)this;
          if (v205 <= 0xFFFFFFFFFFFFFFF5 && v205 + 10 <= v206)
          {
            char v208 = 0;
            unsigned int v209 = 0;
            uint64_t v210 = 0;
            do
            {
              unint64_t v211 = v205 + 1;
              *((void *)this + 1) = v205 + 1;
              char v212 = *(unsigned char *)(v207 + v205);
              v210 |= (unint64_t)(v212 & 0x7F) << v208;
              if ((v212 & 0x80) == 0) {
                goto LABEL_553;
              }
              v208 += 7;
              unint64_t v205 = v211;
              BOOL v21 = v209++ > 8;
            }
            while (!v21);
LABEL_415:
            uint64_t v210 = 0;
            goto LABEL_553;
          }
          char v314 = 0;
          unsigned int v315 = 0;
          uint64_t v210 = 0;
          if (v206 <= v205) {
            unint64_t v206 = *((void *)this + 1);
          }
          while (2)
          {
            if (v206 == v205)
            {
              uint64_t v210 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v316 = v205 + 1;
              char v317 = *(unsigned char *)(v207 + v205);
              *((void *)this + 1) = v316;
              v210 |= (unint64_t)(v317 & 0x7F) << v314;
              if (v317 < 0)
              {
                v314 += 7;
                unint64_t v205 = v316;
                BOOL v21 = v315++ > 8;
                if (v21) {
                  goto LABEL_415;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v210 = 0;
              }
            }
            break;
          }
LABEL_553:
          *(void *)(a1 + 352) = v210;
          goto LABEL_631;
        case 0x20u:
          *(_DWORD *)(a1 + 396) |= 0x8000u;
          unint64_t v213 = *((void *)this + 1);
          unint64_t v214 = *((void *)this + 2);
          uint64_t v215 = *(void *)this;
          if (v213 <= 0xFFFFFFFFFFFFFFF5 && v213 + 10 <= v214)
          {
            char v216 = 0;
            unsigned int v217 = 0;
            uint64_t v218 = 0;
            do
            {
              unint64_t v219 = v213 + 1;
              *((void *)this + 1) = v213 + 1;
              char v220 = *(unsigned char *)(v215 + v213);
              v218 |= (unint64_t)(v220 & 0x7F) << v216;
              if ((v220 & 0x80) == 0) {
                goto LABEL_556;
              }
              v216 += 7;
              unint64_t v213 = v219;
              BOOL v21 = v217++ > 8;
            }
            while (!v21);
LABEL_422:
            uint64_t v218 = 0;
            goto LABEL_556;
          }
          char v318 = 0;
          unsigned int v319 = 0;
          uint64_t v218 = 0;
          if (v214 <= v213) {
            unint64_t v214 = *((void *)this + 1);
          }
          while (2)
          {
            if (v214 == v213)
            {
              uint64_t v218 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v320 = v213 + 1;
              char v321 = *(unsigned char *)(v215 + v213);
              *((void *)this + 1) = v320;
              v218 |= (unint64_t)(v321 & 0x7F) << v318;
              if (v321 < 0)
              {
                v318 += 7;
                unint64_t v213 = v320;
                BOOL v21 = v319++ > 8;
                if (v21) {
                  goto LABEL_422;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v218 = 0;
              }
            }
            break;
          }
LABEL_556:
          *(void *)(a1 + 344) = v218;
          goto LABEL_631;
        case 0x21u:
          *(_DWORD *)(a1 + 396) |= 0x4000u;
          unint64_t v221 = *((void *)this + 1);
          unint64_t v222 = *((void *)this + 2);
          uint64_t v223 = *(void *)this;
          if (v221 <= 0xFFFFFFFFFFFFFFF5 && v221 + 10 <= v222)
          {
            char v224 = 0;
            unsigned int v225 = 0;
            uint64_t v226 = 0;
            do
            {
              unint64_t v227 = v221 + 1;
              *((void *)this + 1) = v221 + 1;
              char v228 = *(unsigned char *)(v223 + v221);
              v226 |= (unint64_t)(v228 & 0x7F) << v224;
              if ((v228 & 0x80) == 0) {
                goto LABEL_559;
              }
              v224 += 7;
              unint64_t v221 = v227;
              BOOL v21 = v225++ > 8;
            }
            while (!v21);
LABEL_429:
            uint64_t v226 = 0;
            goto LABEL_559;
          }
          char v322 = 0;
          unsigned int v323 = 0;
          uint64_t v226 = 0;
          if (v222 <= v221) {
            unint64_t v222 = *((void *)this + 1);
          }
          while (2)
          {
            if (v222 == v221)
            {
              uint64_t v226 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v324 = v221 + 1;
              char v325 = *(unsigned char *)(v223 + v221);
              *((void *)this + 1) = v324;
              v226 |= (unint64_t)(v325 & 0x7F) << v322;
              if (v325 < 0)
              {
                v322 += 7;
                unint64_t v221 = v324;
                BOOL v21 = v323++ > 8;
                if (v21) {
                  goto LABEL_429;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v226 = 0;
              }
            }
            break;
          }
LABEL_559:
          *(void *)(a1 + 336) = v226;
          goto LABEL_631;
        case 0x22u:
          *(_DWORD *)(a1 + 396) |= 0x2000u;
          unint64_t v229 = *((void *)this + 1);
          unint64_t v230 = *((void *)this + 2);
          uint64_t v231 = *(void *)this;
          if (v229 <= 0xFFFFFFFFFFFFFFF5 && v229 + 10 <= v230)
          {
            char v232 = 0;
            unsigned int v233 = 0;
            uint64_t v234 = 0;
            do
            {
              unint64_t v235 = v229 + 1;
              *((void *)this + 1) = v229 + 1;
              char v236 = *(unsigned char *)(v231 + v229);
              v234 |= (unint64_t)(v236 & 0x7F) << v232;
              if ((v236 & 0x80) == 0) {
                goto LABEL_562;
              }
              v232 += 7;
              unint64_t v229 = v235;
              BOOL v21 = v233++ > 8;
            }
            while (!v21);
LABEL_436:
            uint64_t v234 = 0;
            goto LABEL_562;
          }
          char v326 = 0;
          unsigned int v327 = 0;
          uint64_t v234 = 0;
          if (v230 <= v229) {
            unint64_t v230 = *((void *)this + 1);
          }
          while (2)
          {
            if (v230 == v229)
            {
              uint64_t v234 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v328 = v229 + 1;
              char v329 = *(unsigned char *)(v231 + v229);
              *((void *)this + 1) = v328;
              v234 |= (unint64_t)(v329 & 0x7F) << v326;
              if (v329 < 0)
              {
                v326 += 7;
                unint64_t v229 = v328;
                BOOL v21 = v327++ > 8;
                if (v21) {
                  goto LABEL_436;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v234 = 0;
              }
            }
            break;
          }
LABEL_562:
          *(void *)(a1 + 328) = v234;
          goto LABEL_631;
        case 0x29u:
          *(_DWORD *)(a1 + 396) |= 0x80000000;
          unint64_t v237 = *((void *)this + 1);
          if (v237 >= *((void *)this + 2))
          {
            BOOL v240 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v238 = v237 + 1;
            int v239 = *(unsigned __int8 *)(*(void *)this + v237);
            *((void *)this + 1) = v238;
            BOOL v240 = v239 != 0;
          }
          *(unsigned char *)(a1 + 395) = v240;
          goto LABEL_631;
        case 0x2Au:
          *(_DWORD *)(a1 + 396) |= 4u;
          unint64_t v241 = *((void *)this + 1);
          if (v241 > 0xFFFFFFFFFFFFFFF7 || v241 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 240) = *(void *)(*(void *)this + v241);
          goto LABEL_630;
        case 0x2Bu:
          *(_DWORD *)(a1 + 396) |= 8u;
          unint64_t v242 = *((void *)this + 1);
          if (v242 > 0xFFFFFFFFFFFFFFF7 || v242 + 8 > *((void *)this + 2)) {
            goto LABEL_628;
          }
          *(void *)(a1 + 248) = *(void *)(*(void *)this + v242);
          goto LABEL_630;
        case 0x33u:
          *(_DWORD *)(a1 + 396) |= 0x100000u;
          unint64_t v243 = *((void *)this + 1);
          if (v243 >= *((void *)this + 2))
          {
            BOOL v246 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v244 = v243 + 1;
            int v245 = *(unsigned __int8 *)(*(void *)this + v243);
            *((void *)this + 1) = v244;
            BOOL v246 = v245 != 0;
          }
          *(unsigned char *)(a1 + 384) = v246;
          goto LABEL_631;
        case 0x34u:
          *(_DWORD *)(a1 + 396) |= 0x400000u;
          unint64_t v247 = *((void *)this + 1);
          if (v247 >= *((void *)this + 2))
          {
            BOOL v250 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v248 = v247 + 1;
            int v249 = *(unsigned __int8 *)(*(void *)this + v247);
            *((void *)this + 1) = v248;
            BOOL v250 = v249 != 0;
          }
          *(unsigned char *)(a1 + 386) = v250;
          goto LABEL_631;
        case 0x35u:
          *(_DWORD *)(a1 + 396) |= 0x40000000u;
          unint64_t v251 = *((void *)this + 1);
          if (v251 >= *((void *)this + 2))
          {
            BOOL v254 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v252 = v251 + 1;
            int v253 = *(unsigned __int8 *)(*(void *)this + v251);
            *((void *)this + 1) = v252;
            BOOL v254 = v253 != 0;
          }
          *(unsigned char *)(a1 + 394) = v254;
          goto LABEL_631;
        case 0x36u:
          *(_DWORD *)(a1 + 396) |= 0x200000u;
          unint64_t v255 = *((void *)this + 1);
          if (v255 >= *((void *)this + 2))
          {
            BOOL v258 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v256 = v255 + 1;
            int v257 = *(unsigned __int8 *)(*(void *)this + v255);
            *((void *)this + 1) = v256;
            BOOL v258 = v257 != 0;
          }
          *(unsigned char *)(a1 + 385) = v258;
          goto LABEL_631;
        case 0x37u:
          *(_DWORD *)(a1 + 396) |= 0x800000u;
          unint64_t v259 = *((void *)this + 1);
          if (v259 >= *((void *)this + 2))
          {
            BOOL v262 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v260 = v259 + 1;
            int v261 = *(unsigned __int8 *)(*(void *)this + v259);
            *((void *)this + 1) = v260;
            BOOL v262 = v261 != 0;
          }
          *(unsigned char *)(a1 + 387) = v262;
          goto LABEL_631;
        default:
          switch((int)v28)
          {
            case 151:
              if (v27 != 2)
              {
                unsigned int v280 = *(char **)(a1 + 40);
                unint64_t v279 = *(void *)(a1 + 48);
                if ((unint64_t)v280 >= v279)
                {
                  unsigned int v330 = (char *)*v14;
                  uint64_t v331 = (v280 - (unsigned char *)*v14) >> 3;
                  unint64_t v332 = v331 + 1;
                  if ((unint64_t)(v331 + 1) >> 61) {
LABEL_641:
                  }
                    sub_1001D7FD4();
                  uint64_t v333 = v279 - (void)v330;
                  if (v333 >> 2 > v332) {
                    unint64_t v332 = v333 >> 2;
                  }
                  if ((unint64_t)v333 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v334 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v334 = v332;
                  }
                  if (v334)
                  {
                    unint64_t v335 = (char *)sub_1000DA54C(v405, v334);
                    unsigned int v330 = *(char **)(a1 + 32);
                    unsigned int v280 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    unint64_t v335 = 0;
                  }
                  unsigned int v384 = &v335[8 * v331];
                  *(void *)unsigned int v384 = 0;
                  unint64_t v281 = v384 + 8;
                  while (v280 != v330)
                  {
                    uint64_t v385 = *((void *)v280 - 1);
                    v280 -= 8;
                    *((void *)v384 - 1) = v385;
                    v384 -= 8;
                  }
                  *(void *)(a1 + 32) = v384;
                  *(void *)(a1 + 40) = v281;
                  *(void *)(a1 + 48) = &v335[8 * v334];
                  if (v330) {
                    operator delete(v330);
                  }
                }
                else
                {
                  *(void *)unsigned int v280 = 0;
                  unint64_t v281 = v280 + 8;
                }
                *(void *)(a1 + 40) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v37 = *((void *)this + 1);
              unint64_t v38 = *((void *)this + 2);
              while (v37 < v38 && !*((unsigned char *)this + 24))
              {
                char v40 = *(char **)(a1 + 40);
                unint64_t v39 = *(void *)(a1 + 48);
                if ((unint64_t)v40 >= v39)
                {
                  char v42 = (char *)*v14;
                  uint64_t v43 = (v40 - (unsigned char *)*v14) >> 3;
                  unint64_t v44 = v43 + 1;
                  if ((unint64_t)(v43 + 1) >> 61) {
                    goto LABEL_641;
                  }
                  uint64_t v45 = v39 - (void)v42;
                  if (v45 >> 2 > v44) {
                    unint64_t v44 = v45 >> 2;
                  }
                  if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v46 = v44;
                  }
                  if (v46)
                  {
                    unint64_t v47 = (char *)sub_1000DA54C(v405, v46);
                    char v42 = *(char **)(a1 + 32);
                    char v40 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    unint64_t v47 = 0;
                  }
                  char v48 = &v47[8 * v43];
                  *(void *)char v48 = 0;
                  char v41 = v48 + 8;
                  while (v40 != v42)
                  {
                    uint64_t v49 = *((void *)v40 - 1);
                    v40 -= 8;
                    *((void *)v48 - 1) = v49;
                    v48 -= 8;
                  }
                  *(void *)(a1 + 32) = v48;
                  *(void *)(a1 + 40) = v41;
                  *(void *)(a1 + 48) = &v47[8 * v46];
                  if (v42) {
                    operator delete(v42);
                  }
                }
                else
                {
                  *(void *)char v40 = 0;
                  char v41 = v40 + 8;
                }
                *(void *)(a1 + 40) = v41;
                unint64_t v50 = *((void *)this + 1);
                if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v41 - 1) = *(void *)(*(void *)this + v50);
                unint64_t v38 = *((void *)this + 2);
                unint64_t v37 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v37;
              }
              goto LABEL_253;
            case 152:
              if (v27 != 2)
              {
                char v283 = *(char **)(a1 + 16);
                unint64_t v282 = *(void *)(a1 + 24);
                if ((unint64_t)v283 >= v282)
                {
                  uint64_t v336 = (char *)*v13;
                  uint64_t v337 = (v283 - (unsigned char *)*v13) >> 3;
                  unint64_t v338 = v337 + 1;
                  if ((unint64_t)(v337 + 1) >> 61) {
LABEL_642:
                  }
                    sub_1001D7FD4();
                  uint64_t v339 = v282 - (void)v336;
                  if (v339 >> 2 > v338) {
                    unint64_t v338 = v339 >> 2;
                  }
                  if ((unint64_t)v339 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v340 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v340 = v338;
                  }
                  if (v340)
                  {
                    char v341 = (char *)sub_1000DA54C(v406, v340);
                    uint64_t v336 = *(char **)(a1 + 8);
                    char v283 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    char v341 = 0;
                  }
                  char v386 = &v341[8 * v337];
                  *(void *)char v386 = 0;
                  unint64_t v281 = v386 + 8;
                  while (v283 != v336)
                  {
                    uint64_t v387 = *((void *)v283 - 1);
                    v283 -= 8;
                    *((void *)v386 - 1) = v387;
                    v386 -= 8;
                  }
                  *(void *)(a1 + 8) = v386;
                  *(void *)(a1 + 16) = v281;
                  *(void *)(a1 + 24) = &v341[8 * v340];
                  if (v336) {
                    operator delete(v336);
                  }
                }
                else
                {
                  *(void *)char v283 = 0;
                  unint64_t v281 = v283 + 8;
                }
                *(void *)(a1 + 16) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v55 = *((void *)this + 1);
              unint64_t v56 = *((void *)this + 2);
              while (v55 < v56 && !*((unsigned char *)this + 24))
              {
                unint64_t v58 = *(char **)(a1 + 16);
                unint64_t v57 = *(void *)(a1 + 24);
                if ((unint64_t)v58 >= v57)
                {
                  char v60 = (char *)*v13;
                  uint64_t v61 = (v58 - (unsigned char *)*v13) >> 3;
                  unint64_t v62 = v61 + 1;
                  if ((unint64_t)(v61 + 1) >> 61) {
                    goto LABEL_642;
                  }
                  uint64_t v63 = v57 - (void)v60;
                  if (v63 >> 2 > v62) {
                    unint64_t v62 = v63 >> 2;
                  }
                  if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v64 = v62;
                  }
                  if (v64)
                  {
                    unint64_t v65 = (char *)sub_1000DA54C(v406, v64);
                    char v60 = *(char **)(a1 + 8);
                    unint64_t v58 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    unint64_t v65 = 0;
                  }
                  unint64_t v66 = &v65[8 * v61];
                  *(void *)unint64_t v66 = 0;
                  uint64_t v59 = v66 + 8;
                  while (v58 != v60)
                  {
                    uint64_t v67 = *((void *)v58 - 1);
                    v58 -= 8;
                    *((void *)v66 - 1) = v67;
                    v66 -= 8;
                  }
                  *(void *)(a1 + 8) = v66;
                  *(void *)(a1 + 16) = v59;
                  *(void *)(a1 + 24) = &v65[8 * v64];
                  if (v60) {
                    operator delete(v60);
                  }
                }
                else
                {
                  *(void *)unint64_t v58 = 0;
                  uint64_t v59 = v58 + 8;
                }
                *(void *)(a1 + 16) = v59;
                unint64_t v68 = *((void *)this + 1);
                if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v59 - 1) = *(void *)(*(void *)this + v68);
                unint64_t v56 = *((void *)this + 2);
                unint64_t v55 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v55;
              }
              goto LABEL_253;
            case 153:
              if (v27 != 2)
              {
                unint64_t v285 = *(char **)(a1 + 64);
                unint64_t v284 = *(void *)(a1 + 72);
                if ((unint64_t)v285 >= v284)
                {
                  unint64_t v342 = (char *)*v12;
                  uint64_t v343 = (v285 - (unsigned char *)*v12) >> 3;
                  unint64_t v344 = v343 + 1;
                  if ((unint64_t)(v343 + 1) >> 61) {
LABEL_643:
                  }
                    sub_1001D7FD4();
                  uint64_t v345 = v284 - (void)v342;
                  if (v345 >> 2 > v344) {
                    unint64_t v344 = v345 >> 2;
                  }
                  if ((unint64_t)v345 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v346 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v346 = v344;
                  }
                  if (v346)
                  {
                    uint64_t v347 = (char *)sub_1000DA54C(v407, v346);
                    unint64_t v342 = *(char **)(a1 + 56);
                    unint64_t v285 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    uint64_t v347 = 0;
                  }
                  unsigned int v388 = &v347[8 * v343];
                  *(void *)unsigned int v388 = 0;
                  unint64_t v281 = v388 + 8;
                  while (v285 != v342)
                  {
                    uint64_t v389 = *((void *)v285 - 1);
                    v285 -= 8;
                    *((void *)v388 - 1) = v389;
                    v388 -= 8;
                  }
                  *(void *)(a1 + 56) = v388;
                  *(void *)(a1 + 64) = v281;
                  *(void *)(a1 + 72) = &v347[8 * v346];
                  if (v342) {
                    operator delete(v342);
                  }
                }
                else
                {
                  *(void *)unint64_t v285 = 0;
                  unint64_t v281 = v285 + 8;
                }
                *(void *)(a1 + 64) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v69 = *((void *)this + 1);
              unint64_t v70 = *((void *)this + 2);
              while (v69 < v70 && !*((unsigned char *)this + 24))
              {
                unsigned int v72 = *(char **)(a1 + 64);
                unint64_t v71 = *(void *)(a1 + 72);
                if ((unint64_t)v72 >= v71)
                {
                  unint64_t v74 = (char *)*v12;
                  uint64_t v75 = (v72 - (unsigned char *)*v12) >> 3;
                  unint64_t v76 = v75 + 1;
                  if ((unint64_t)(v75 + 1) >> 61) {
                    goto LABEL_643;
                  }
                  uint64_t v77 = v71 - (void)v74;
                  if (v77 >> 2 > v76) {
                    unint64_t v76 = v77 >> 2;
                  }
                  if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v78 = v76;
                  }
                  if (v78)
                  {
                    uint64_t v79 = (char *)sub_1000DA54C(v407, v78);
                    unint64_t v74 = *(char **)(a1 + 56);
                    unsigned int v72 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    uint64_t v79 = 0;
                  }
                  char v80 = &v79[8 * v75];
                  *(void *)char v80 = 0;
                  uint64_t v73 = v80 + 8;
                  while (v72 != v74)
                  {
                    uint64_t v81 = *((void *)v72 - 1);
                    v72 -= 8;
                    *((void *)v80 - 1) = v81;
                    v80 -= 8;
                  }
                  *(void *)(a1 + 56) = v80;
                  *(void *)(a1 + 64) = v73;
                  *(void *)(a1 + 72) = &v79[8 * v78];
                  if (v74) {
                    operator delete(v74);
                  }
                }
                else
                {
                  *(void *)unsigned int v72 = 0;
                  uint64_t v73 = v72 + 8;
                }
                *(void *)(a1 + 64) = v73;
                unint64_t v82 = *((void *)this + 1);
                if (v82 > 0xFFFFFFFFFFFFFFF7 || v82 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v73 - 1) = *(void *)(*(void *)this + v82);
                unint64_t v70 = *((void *)this + 2);
                unint64_t v69 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v69;
              }
              goto LABEL_253;
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
              goto LABEL_58;
            case 161:
              if (v27 != 2)
              {
                char v287 = *(char **)(a1 + 112);
                unint64_t v286 = *(void *)(a1 + 120);
                if ((unint64_t)v287 >= v286)
                {
                  unint64_t v348 = (char *)*v11;
                  uint64_t v349 = (v287 - (unsigned char *)*v11) >> 3;
                  unint64_t v350 = v349 + 1;
                  if ((unint64_t)(v349 + 1) >> 61) {
LABEL_644:
                  }
                    sub_1001D7FD4();
                  uint64_t v351 = v286 - (void)v348;
                  if (v351 >> 2 > v350) {
                    unint64_t v350 = v351 >> 2;
                  }
                  if ((unint64_t)v351 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v352 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v352 = v350;
                  }
                  if (v352)
                  {
                    char v353 = (char *)sub_1000DA54C(v408, v352);
                    unint64_t v348 = *(char **)(a1 + 104);
                    char v287 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    char v353 = 0;
                  }
                  char v390 = &v353[8 * v349];
                  *(void *)char v390 = 0;
                  unint64_t v281 = v390 + 8;
                  while (v287 != v348)
                  {
                    uint64_t v391 = *((void *)v287 - 1);
                    v287 -= 8;
                    *((void *)v390 - 1) = v391;
                    v390 -= 8;
                  }
                  *(void *)(a1 + 104) = v390;
                  *(void *)(a1 + 112) = v281;
                  *(void *)(a1 + 120) = &v353[8 * v352];
                  if (v348) {
                    operator delete(v348);
                  }
                }
                else
                {
                  *(void *)char v287 = 0;
                  unint64_t v281 = v287 + 8;
                }
                *(void *)(a1 + 112) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v83 = *((void *)this + 1);
              unint64_t v84 = *((void *)this + 2);
              while (v83 < v84 && !*((unsigned char *)this + 24))
              {
                unint64_t v86 = *(char **)(a1 + 112);
                unint64_t v85 = *(void *)(a1 + 120);
                if ((unint64_t)v86 >= v85)
                {
                  BOOL v88 = (char *)*v11;
                  uint64_t v89 = (v86 - (unsigned char *)*v11) >> 3;
                  unint64_t v90 = v89 + 1;
                  if ((unint64_t)(v89 + 1) >> 61) {
                    goto LABEL_644;
                  }
                  uint64_t v91 = v85 - (void)v88;
                  if (v91 >> 2 > v90) {
                    unint64_t v90 = v91 >> 2;
                  }
                  if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v92 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v92 = v90;
                  }
                  if (v92)
                  {
                    unint64_t v93 = (char *)sub_1000DA54C(v408, v92);
                    BOOL v88 = *(char **)(a1 + 104);
                    unint64_t v86 = *(char **)(a1 + 112);
                  }
                  else
                  {
                    unint64_t v93 = 0;
                  }
                  unint64_t v94 = &v93[8 * v89];
                  *(void *)unint64_t v94 = 0;
                  int v87 = v94 + 8;
                  while (v86 != v88)
                  {
                    uint64_t v95 = *((void *)v86 - 1);
                    v86 -= 8;
                    *((void *)v94 - 1) = v95;
                    v94 -= 8;
                  }
                  *(void *)(a1 + 104) = v94;
                  *(void *)(a1 + 112) = v87;
                  *(void *)(a1 + 120) = &v93[8 * v92];
                  if (v88) {
                    operator delete(v88);
                  }
                }
                else
                {
                  *(void *)unint64_t v86 = 0;
                  int v87 = v86 + 8;
                }
                *(void *)(a1 + 112) = v87;
                unint64_t v96 = *((void *)this + 1);
                if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v87 - 1) = *(void *)(*(void *)this + v96);
                unint64_t v84 = *((void *)this + 2);
                unint64_t v83 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v83;
              }
              goto LABEL_253;
            case 162:
              if (v27 != 2)
              {
                unint64_t v289 = *(char **)(a1 + 88);
                unint64_t v288 = *(void *)(a1 + 96);
                if ((unint64_t)v289 >= v288)
                {
                  unsigned int v354 = (char *)*v10;
                  uint64_t v355 = (v289 - (unsigned char *)*v10) >> 3;
                  unint64_t v356 = v355 + 1;
                  if ((unint64_t)(v355 + 1) >> 61) {
LABEL_645:
                  }
                    sub_1001D7FD4();
                  uint64_t v357 = v288 - (void)v354;
                  if (v357 >> 2 > v356) {
                    unint64_t v356 = v357 >> 2;
                  }
                  if ((unint64_t)v357 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v358 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v358 = v356;
                  }
                  if (v358)
                  {
                    unint64_t v359 = (char *)sub_1000DA54C(v409, v358);
                    unsigned int v354 = *(char **)(a1 + 80);
                    unint64_t v289 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    unint64_t v359 = 0;
                  }
                  unsigned int v392 = &v359[8 * v355];
                  *(void *)unsigned int v392 = 0;
                  unint64_t v281 = v392 + 8;
                  while (v289 != v354)
                  {
                    uint64_t v393 = *((void *)v289 - 1);
                    v289 -= 8;
                    *((void *)v392 - 1) = v393;
                    v392 -= 8;
                  }
                  *(void *)(a1 + 80) = v392;
                  *(void *)(a1 + 88) = v281;
                  *(void *)(a1 + 96) = &v359[8 * v358];
                  if (v354) {
                    operator delete(v354);
                  }
                }
                else
                {
                  *(void *)unint64_t v289 = 0;
                  unint64_t v281 = v289 + 8;
                }
                *(void *)(a1 + 88) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v97 = *((void *)this + 1);
              unint64_t v98 = *((void *)this + 2);
              while (v97 < v98 && !*((unsigned char *)this + 24))
              {
                char v100 = *(char **)(a1 + 88);
                unint64_t v99 = *(void *)(a1 + 96);
                if ((unint64_t)v100 >= v99)
                {
                  unint64_t v102 = (char *)*v10;
                  uint64_t v103 = (v100 - (unsigned char *)*v10) >> 3;
                  unint64_t v104 = v103 + 1;
                  if ((unint64_t)(v103 + 1) >> 61) {
                    goto LABEL_645;
                  }
                  uint64_t v105 = v99 - (void)v102;
                  if (v105 >> 2 > v104) {
                    unint64_t v104 = v105 >> 2;
                  }
                  if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v106 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v106 = v104;
                  }
                  if (v106)
                  {
                    unint64_t v107 = (char *)sub_1000DA54C(v409, v106);
                    unint64_t v102 = *(char **)(a1 + 80);
                    char v100 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    unint64_t v107 = 0;
                  }
                  char v108 = &v107[8 * v103];
                  *(void *)char v108 = 0;
                  unint64_t v101 = v108 + 8;
                  while (v100 != v102)
                  {
                    uint64_t v109 = *((void *)v100 - 1);
                    v100 -= 8;
                    *((void *)v108 - 1) = v109;
                    v108 -= 8;
                  }
                  *(void *)(a1 + 80) = v108;
                  *(void *)(a1 + 88) = v101;
                  *(void *)(a1 + 96) = &v107[8 * v106];
                  if (v102) {
                    operator delete(v102);
                  }
                }
                else
                {
                  *(void *)char v100 = 0;
                  unint64_t v101 = v100 + 8;
                }
                *(void *)(a1 + 88) = v101;
                unint64_t v110 = *((void *)this + 1);
                if (v110 > 0xFFFFFFFFFFFFFFF7 || v110 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v101 - 1) = *(void *)(*(void *)this + v110);
                unint64_t v98 = *((void *)this + 2);
                unint64_t v97 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v97;
              }
              goto LABEL_253;
            case 163:
              if (v27 != 2)
              {
                uint64_t v291 = *(char **)(a1 + 136);
                unint64_t v290 = *(void *)(a1 + 144);
                if ((unint64_t)v291 >= v290)
                {
                  uint64_t v360 = (char *)*v9;
                  uint64_t v361 = (v291 - (unsigned char *)*v9) >> 3;
                  unint64_t v362 = v361 + 1;
                  if ((unint64_t)(v361 + 1) >> 61) {
LABEL_646:
                  }
                    sub_1001D7FD4();
                  uint64_t v363 = v290 - (void)v360;
                  if (v363 >> 2 > v362) {
                    unint64_t v362 = v363 >> 2;
                  }
                  if ((unint64_t)v363 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v364 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v364 = v362;
                  }
                  if (v364)
                  {
                    char v365 = (char *)sub_1000DA54C(v410, v364);
                    uint64_t v360 = *(char **)(a1 + 128);
                    uint64_t v291 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    char v365 = 0;
                  }
                  char v394 = &v365[8 * v361];
                  *(void *)char v394 = 0;
                  unint64_t v281 = v394 + 8;
                  while (v291 != v360)
                  {
                    uint64_t v395 = *((void *)v291 - 1);
                    v291 -= 8;
                    *((void *)v394 - 1) = v395;
                    v394 -= 8;
                  }
                  *(void *)(a1 + 128) = v394;
                  *(void *)(a1 + 136) = v281;
                  *(void *)(a1 + 144) = &v365[8 * v364];
                  if (v360) {
                    operator delete(v360);
                  }
                }
                else
                {
                  *(void *)uint64_t v291 = 0;
                  unint64_t v281 = v291 + 8;
                }
                *(void *)(a1 + 136) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v111 = *((void *)this + 1);
              unint64_t v112 = *((void *)this + 2);
              while (v111 < v112 && !*((unsigned char *)this + 24))
              {
                uint64_t v114 = *(char **)(a1 + 136);
                unint64_t v113 = *(void *)(a1 + 144);
                if ((unint64_t)v114 >= v113)
                {
                  char v116 = (char *)*v9;
                  uint64_t v117 = (v114 - (unsigned char *)*v9) >> 3;
                  unint64_t v118 = v117 + 1;
                  if ((unint64_t)(v117 + 1) >> 61) {
                    goto LABEL_646;
                  }
                  uint64_t v119 = v113 - (void)v116;
                  if (v119 >> 2 > v118) {
                    unint64_t v118 = v119 >> 2;
                  }
                  if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v120 = v118;
                  }
                  if (v120)
                  {
                    unint64_t v121 = (char *)sub_1000DA54C(v410, v120);
                    char v116 = *(char **)(a1 + 128);
                    uint64_t v114 = *(char **)(a1 + 136);
                  }
                  else
                  {
                    unint64_t v121 = 0;
                  }
                  unint64_t v122 = &v121[8 * v117];
                  *(void *)unint64_t v122 = 0;
                  unint64_t v115 = v122 + 8;
                  while (v114 != v116)
                  {
                    uint64_t v123 = *((void *)v114 - 1);
                    v114 -= 8;
                    *((void *)v122 - 1) = v123;
                    v122 -= 8;
                  }
                  *(void *)(a1 + 128) = v122;
                  *(void *)(a1 + 136) = v115;
                  *(void *)(a1 + 144) = &v121[8 * v120];
                  if (v116) {
                    operator delete(v116);
                  }
                }
                else
                {
                  *(void *)uint64_t v114 = 0;
                  unint64_t v115 = v114 + 8;
                }
                *(void *)(a1 + 136) = v115;
                unint64_t v124 = *((void *)this + 1);
                if (v124 > 0xFFFFFFFFFFFFFFF7 || v124 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v115 - 1) = *(void *)(*(void *)this + v124);
                unint64_t v112 = *((void *)this + 2);
                unint64_t v111 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v111;
              }
              goto LABEL_253;
            case 164:
              if (v27 != 2)
              {
                char v293 = *(char **)(a1 + 184);
                unint64_t v292 = *(void *)(a1 + 192);
                if ((unint64_t)v293 >= v292)
                {
                  unint64_t v366 = (char *)*v8;
                  uint64_t v367 = (v293 - (unsigned char *)*v8) >> 3;
                  unint64_t v368 = v367 + 1;
                  if ((unint64_t)(v367 + 1) >> 61) {
LABEL_647:
                  }
                    sub_1001D7FD4();
                  uint64_t v369 = v292 - (void)v366;
                  if (v369 >> 2 > v368) {
                    unint64_t v368 = v369 >> 2;
                  }
                  if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v370 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v370 = v368;
                  }
                  if (v370)
                  {
                    uint64_t v371 = (char *)sub_1000DA54C(v411, v370);
                    unint64_t v366 = *(char **)(a1 + 176);
                    char v293 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    uint64_t v371 = 0;
                  }
                  unsigned int v396 = &v371[8 * v367];
                  *(void *)unsigned int v396 = 0;
                  unint64_t v281 = v396 + 8;
                  while (v293 != v366)
                  {
                    uint64_t v397 = *((void *)v293 - 1);
                    v293 -= 8;
                    *((void *)v396 - 1) = v397;
                    v396 -= 8;
                  }
                  *(void *)(a1 + 176) = v396;
                  *(void *)(a1 + 184) = v281;
                  *(void *)(a1 + 192) = &v371[8 * v370];
                  if (v366) {
                    operator delete(v366);
                  }
                }
                else
                {
                  *(void *)char v293 = 0;
                  unint64_t v281 = v293 + 8;
                }
                *(void *)(a1 + 184) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v125 = *((void *)this + 1);
              unint64_t v126 = *((void *)this + 2);
              while (v125 < v126 && !*((unsigned char *)this + 24))
              {
                char v128 = *(char **)(a1 + 184);
                unint64_t v127 = *(void *)(a1 + 192);
                if ((unint64_t)v128 >= v127)
                {
                  uint64_t v130 = (char *)*v8;
                  uint64_t v131 = (v128 - (unsigned char *)*v8) >> 3;
                  unint64_t v132 = v131 + 1;
                  if ((unint64_t)(v131 + 1) >> 61) {
                    goto LABEL_647;
                  }
                  uint64_t v133 = v127 - (void)v130;
                  if (v133 >> 2 > v132) {
                    unint64_t v132 = v133 >> 2;
                  }
                  if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v134 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v134 = v132;
                  }
                  if (v134)
                  {
                    uint64_t v135 = (char *)sub_1000DA54C(v411, v134);
                    uint64_t v130 = *(char **)(a1 + 176);
                    char v128 = *(char **)(a1 + 184);
                  }
                  else
                  {
                    uint64_t v135 = 0;
                  }
                  char v136 = &v135[8 * v131];
                  *(void *)char v136 = 0;
                  unsigned int v129 = v136 + 8;
                  while (v128 != v130)
                  {
                    uint64_t v137 = *((void *)v128 - 1);
                    v128 -= 8;
                    *((void *)v136 - 1) = v137;
                    v136 -= 8;
                  }
                  *(void *)(a1 + 176) = v136;
                  *(void *)(a1 + 184) = v129;
                  *(void *)(a1 + 192) = &v135[8 * v134];
                  if (v130) {
                    operator delete(v130);
                  }
                }
                else
                {
                  *(void *)char v128 = 0;
                  unsigned int v129 = v128 + 8;
                }
                *(void *)(a1 + 184) = v129;
                unint64_t v138 = *((void *)this + 1);
                if (v138 > 0xFFFFFFFFFFFFFFF7 || v138 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v129 - 1) = *(void *)(*(void *)this + v138);
                unint64_t v126 = *((void *)this + 2);
                unint64_t v125 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v125;
              }
              goto LABEL_253;
            case 165:
              if (v27 != 2)
              {
                unint64_t v295 = *(char **)(a1 + 160);
                unint64_t v294 = *(void *)(a1 + 168);
                if ((unint64_t)v295 >= v294)
                {
                  unint64_t v372 = (char *)*v414;
                  uint64_t v373 = (v295 - (unsigned char *)*v414) >> 3;
                  unint64_t v374 = v373 + 1;
                  if ((unint64_t)(v373 + 1) >> 61) {
LABEL_648:
                  }
                    sub_1001D7FD4();
                  uint64_t v375 = v294 - (void)v372;
                  if (v375 >> 2 > v374) {
                    unint64_t v374 = v375 >> 2;
                  }
                  if ((unint64_t)v375 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v376 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v376 = v374;
                  }
                  if (v376)
                  {
                    unint64_t v377 = (char *)sub_1000DA54C(v412, v376);
                    unint64_t v372 = *(char **)(a1 + 152);
                    unint64_t v295 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    unint64_t v377 = 0;
                  }
                  char v398 = &v377[8 * v373];
                  *(void *)char v398 = 0;
                  unint64_t v281 = v398 + 8;
                  while (v295 != v372)
                  {
                    uint64_t v399 = *((void *)v295 - 1);
                    v295 -= 8;
                    *((void *)v398 - 1) = v399;
                    v398 -= 8;
                  }
                  *(void *)(a1 + 152) = v398;
                  *(void *)(a1 + 160) = v281;
                  *(void *)(a1 + 168) = &v377[8 * v376];
                  if (v372) {
                    operator delete(v372);
                  }
                }
                else
                {
                  *(void *)unint64_t v295 = 0;
                  unint64_t v281 = v295 + 8;
                }
                *(void *)(a1 + 160) = v281;
                goto LABEL_626;
              }
              if (PB::Reader::placeMark()) {
                return 0;
              }
              unint64_t v139 = *((void *)this + 1);
              unint64_t v140 = *((void *)this + 2);
              while (v139 < v140 && !*((unsigned char *)this + 24))
              {
                unint64_t v142 = *(char **)(a1 + 160);
                unint64_t v141 = *(void *)(a1 + 168);
                if ((unint64_t)v142 >= v141)
                {
                  char v144 = (char *)*v414;
                  uint64_t v145 = (v142 - (unsigned char *)*v414) >> 3;
                  unint64_t v146 = v145 + 1;
                  if ((unint64_t)(v145 + 1) >> 61) {
                    goto LABEL_648;
                  }
                  uint64_t v147 = v141 - (void)v144;
                  if (v147 >> 2 > v146) {
                    unint64_t v146 = v147 >> 2;
                  }
                  if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v148 = v146;
                  }
                  if (v148)
                  {
                    unint64_t v149 = (char *)sub_1000DA54C(v412, v148);
                    char v144 = *(char **)(a1 + 152);
                    unint64_t v142 = *(char **)(a1 + 160);
                  }
                  else
                  {
                    unint64_t v149 = 0;
                  }
                  unint64_t v150 = &v149[8 * v145];
                  *(void *)unint64_t v150 = 0;
                  uint64_t v143 = v150 + 8;
                  while (v142 != v144)
                  {
                    uint64_t v151 = *((void *)v142 - 1);
                    v142 -= 8;
                    *((void *)v150 - 1) = v151;
                    v150 -= 8;
                  }
                  *(void *)(a1 + 152) = v150;
                  *(void *)(a1 + 160) = v143;
                  *(void *)(a1 + 168) = &v149[8 * v148];
                  if (v144) {
                    operator delete(v144);
                  }
                }
                else
                {
                  *(void *)unint64_t v142 = 0;
                  uint64_t v143 = v142 + 8;
                }
                *(void *)(a1 + 160) = v143;
                unint64_t v152 = *((void *)this + 1);
                if (v152 > 0xFFFFFFFFFFFFFFF7 || v152 + 8 > *((void *)this + 2)) {
                  goto LABEL_252;
                }
                *(v143 - 1) = *(void *)(*(void *)this + v152);
                unint64_t v140 = *((void *)this + 2);
                unint64_t v139 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v139;
              }
              goto LABEL_253;
            case 166:
              if (v27 == 2)
              {
                if (PB::Reader::placeMark()) {
                  return 0;
                }
                unint64_t v153 = *((void *)this + 1);
                unint64_t v154 = *((void *)this + 2);
                while (v153 < v154 && !*((unsigned char *)this + 24))
                {
                  char v156 = *(char **)(a1 + 208);
                  unint64_t v155 = *(void *)(a1 + 216);
                  if ((unint64_t)v156 >= v155)
                  {
                    unint64_t v158 = (char *)*v415;
                    uint64_t v159 = (v156 - (unsigned char *)*v415) >> 3;
                    unint64_t v160 = v159 + 1;
                    if ((unint64_t)(v159 + 1) >> 61) {
                      goto LABEL_649;
                    }
                    uint64_t v161 = v155 - (void)v158;
                    if (v161 >> 2 > v160) {
                      unint64_t v160 = v161 >> 2;
                    }
                    if ((unint64_t)v161 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v162 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v162 = v160;
                    }
                    if (v162)
                    {
                      unint64_t v163 = (char *)sub_1000DA54C(v413, v162);
                      unint64_t v158 = *(char **)(a1 + 200);
                      char v156 = *(char **)(a1 + 208);
                    }
                    else
                    {
                      unint64_t v163 = 0;
                    }
                    char v164 = &v163[8 * v159];
                    *(void *)char v164 = 0;
                    unint64_t v157 = v164 + 8;
                    while (v156 != v158)
                    {
                      uint64_t v165 = *((void *)v156 - 1);
                      v156 -= 8;
                      *((void *)v164 - 1) = v165;
                      v164 -= 8;
                    }
                    *(void *)(a1 + 200) = v164;
                    *(void *)(a1 + 208) = v157;
                    *(void *)(a1 + 216) = &v163[8 * v162];
                    if (v158) {
                      operator delete(v158);
                    }
                  }
                  else
                  {
                    *(void *)char v156 = 0;
                    unint64_t v157 = v156 + 8;
                  }
                  *(void *)(a1 + 208) = v157;
                  unint64_t v166 = *((void *)this + 1);
                  if (v166 > 0xFFFFFFFFFFFFFFF7 || v166 + 8 > *((void *)this + 2))
                  {
LABEL_252:
                    *((unsigned char *)this + 24) = 1;
                    break;
                  }
                  *(v157 - 1) = *(void *)(*(void *)this + v166);
                  unint64_t v154 = *((void *)this + 2);
                  unint64_t v153 = *((void *)this + 1) + 8;
                  *((void *)this + 1) = v153;
                }
LABEL_253:
                PB::Reader::recallMark();
              }
              else
              {
                char v297 = *(char **)(a1 + 208);
                unint64_t v296 = *(void *)(a1 + 216);
                if ((unint64_t)v297 >= v296)
                {
                  char v378 = (char *)*v415;
                  uint64_t v379 = (v297 - (unsigned char *)*v415) >> 3;
                  unint64_t v380 = v379 + 1;
                  if ((unint64_t)(v379 + 1) >> 61) {
LABEL_649:
                  }
                    sub_1001D7FD4();
                  uint64_t v381 = v296 - (void)v378;
                  if (v381 >> 2 > v380) {
                    unint64_t v380 = v381 >> 2;
                  }
                  if ((unint64_t)v381 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v382 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v382 = v380;
                  }
                  if (v382)
                  {
                    char v383 = (char *)sub_1000DA54C(v413, v382);
                    char v378 = *(char **)(a1 + 200);
                    char v297 = *(char **)(a1 + 208);
                  }
                  else
                  {
                    char v383 = 0;
                  }
                  unsigned int v400 = &v383[8 * v379];
                  *(void *)unsigned int v400 = 0;
                  unint64_t v281 = v400 + 8;
                  while (v297 != v378)
                  {
                    uint64_t v401 = *((void *)v297 - 1);
                    v297 -= 8;
                    *((void *)v400 - 1) = v401;
                    v400 -= 8;
                  }
                  *(void *)(a1 + 200) = v400;
                  *(void *)(a1 + 208) = v281;
                  *(void *)(a1 + 216) = &v383[8 * v382];
                  if (v378) {
                    operator delete(v378);
                  }
                }
                else
                {
                  *(void *)char v297 = 0;
                  unint64_t v281 = v297 + 8;
                }
                *(void *)(a1 + 208) = v281;
LABEL_626:
                unint64_t v402 = *((void *)this + 1);
                if (v402 <= 0xFFFFFFFFFFFFFFF7 && v402 + 8 <= *((void *)this + 2))
                {
                  *(v281 - 1) = *(void *)(*(void *)this + v402);
LABEL_630:
                  *((void *)this + 1) += 8;
                }
                else
                {
LABEL_628:
                  *((unsigned char *)this + 24) = 1;
                }
              }
LABEL_631:
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              break;
            default:
              switch((int)v28)
              {
                case 'e':
                  *(_DWORD *)(a1 + 396) |= 0x10000000u;
                  unint64_t v51 = *((void *)this + 1);
                  if (v51 >= *((void *)this + 2))
                  {
                    BOOL v54 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v52 = v51 + 1;
                    int v53 = *(unsigned __int8 *)(*(void *)this + v51);
                    *((void *)this + 1) = v52;
                    BOOL v54 = v53 != 0;
                  }
                  *(unsigned char *)(a1 + 392) = v54;
                  goto LABEL_631;
                case 'f':
                  *(_DWORD *)(a1 + 396) |= 0x8000000u;
                  unint64_t v263 = *((void *)this + 1);
                  if (v263 >= *((void *)this + 2))
                  {
                    BOOL v266 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v264 = v263 + 1;
                    int v265 = *(unsigned __int8 *)(*(void *)this + v263);
                    *((void *)this + 1) = v264;
                    BOOL v266 = v265 != 0;
                  }
                  *(unsigned char *)(a1 + 391) = v266;
                  goto LABEL_631;
                case 'g':
                  *(_DWORD *)(a1 + 396) |= 0x20000000u;
                  unint64_t v267 = *((void *)this + 1);
                  if (v267 >= *((void *)this + 2))
                  {
                    BOOL v270 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v268 = v267 + 1;
                    int v269 = *(unsigned __int8 *)(*(void *)this + v267);
                    *((void *)this + 1) = v268;
                    BOOL v270 = v269 != 0;
                  }
                  *(unsigned char *)(a1 + 393) = v270;
                  goto LABEL_631;
                case 'h':
                  *(_DWORD *)(a1 + 396) |= 0x2000000u;
                  unint64_t v271 = *((void *)this + 1);
                  if (v271 >= *((void *)this + 2))
                  {
                    BOOL v274 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v272 = v271 + 1;
                    int v273 = *(unsigned __int8 *)(*(void *)this + v271);
                    *((void *)this + 1) = v272;
                    BOOL v274 = v273 != 0;
                  }
                  *(unsigned char *)(a1 + 389) = v274;
                  goto LABEL_631;
                case 'i':
                  *(_DWORD *)(a1 + 396) |= 0x4000000u;
                  unint64_t v275 = *((void *)this + 1);
                  if (v275 >= *((void *)this + 2))
                  {
                    BOOL v278 = 0;
                    *((unsigned char *)this + 24) = 1;
                  }
                  else
                  {
                    unint64_t v276 = v275 + 1;
                    int v277 = *(unsigned __int8 *)(*(void *)this + v275);
                    *((void *)this + 1) = v276;
                    BOOL v278 = v277 != 0;
                  }
                  *(unsigned char *)(a1 + 390) = v278;
                  goto LABEL_631;
                default:
                  goto LABEL_58;
              }
          }
          break;
      }
    }
    char v22 = 0;
    unsigned int v23 = 0;
    unint64_t v18 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v24 = v2 + 1;
      char v25 = *(unsigned char *)(v15 + v2);
      *((void *)this + 1) = v24;
      v18 |= (unint64_t)(v25 & 0x7F) << v22;
      if ((v25 & 0x80) == 0) {
        goto LABEL_21;
      }
      v22 += 7;
      unint64_t v2 = v24;
      if (v23++ >= 9)
      {
LABEL_20:
        unint64_t v18 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10164D364(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 396);
  if ((v4 & 0x80000) != 0)
  {
    double result = PB::Writer::writeVarInt(this, *(void *)(result + 376), 1u);
    int v4 = *(_DWORD *)(v3 + 396);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_64;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 388), 2u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_65;
  }
LABEL_64:
  double result = PB::Writer::write(this, *(double *)(v3 + 224), 3u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_66;
  }
LABEL_65:
  double result = PB::Writer::write(this, *(double *)(v3 + 368), 4u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_67;
  }
LABEL_66:
  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 232), 5u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_68;
  }
LABEL_67:
  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 256), 0x15u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_69;
  }
LABEL_68:
  double result = PB::Writer::write(this, *(double *)(v3 + 264), 0x16u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_70;
  }
LABEL_69:
  double result = PB::Writer::write(this, *(double *)(v3 + 288), 0x17u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_71;
  }
LABEL_70:
  double result = PB::Writer::write(this, *(double *)(v3 + 304), 0x18u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_72;
  }
LABEL_71:
  double result = PB::Writer::write(this, *(double *)(v3 + 296), 0x19u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_73;
  }
LABEL_72:
  double result = PB::Writer::write(this, *(double *)(v3 + 280), 0x1Au);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_74;
  }
LABEL_73:
  double result = PB::Writer::write(this, *(double *)(v3 + 272), 0x1Bu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_75;
  }
LABEL_74:
  double result = PB::Writer::write(this, *(double *)(v3 + 320), 0x1Cu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_76;
  }
LABEL_75:
  double result = PB::Writer::write(this, *(double *)(v3 + 312), 0x1Du);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_77;
  }
LABEL_76:
  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 360), 0x1Eu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_78;
  }
LABEL_77:
  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 352), 0x1Fu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_79;
  }
LABEL_78:
  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 344), 0x20u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_80;
  }
LABEL_79:
  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 336), 0x21u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_81;
  }
LABEL_80:
  double result = PB::Writer::writeVarInt(this, *(void *)(v3 + 328), 0x22u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_82;
  }
LABEL_81:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 395), 0x29u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 8) == 0) {
      goto LABEL_23;
    }
    goto LABEL_83;
  }
LABEL_82:
  double result = PB::Writer::write(this, *(double *)(v3 + 240), 0x2Au);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 8) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_84;
  }
LABEL_83:
  double result = PB::Writer::write(this, *(double *)(v3 + 248), 0x2Bu);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_85;
  }
LABEL_84:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 384), 0x33u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_86;
  }
LABEL_85:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 386), 0x34u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_87;
  }
LABEL_86:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 394), 0x35u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x200000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_88;
  }
LABEL_87:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 385), 0x36u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x800000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_89;
  }
LABEL_88:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 387), 0x37u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_90;
  }
LABEL_89:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 392), 0x65u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_91;
  }
LABEL_90:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 391), 0x66u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_32;
    }
LABEL_92:
    double result = PB::Writer::write(this, *(unsigned char *)(v3 + 389), 0x68u);
    if ((*(_DWORD *)(v3 + 396) & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_91:
  double result = PB::Writer::write(this, *(unsigned char *)(v3 + 393), 0x67u);
  int v4 = *(_DWORD *)(v3 + 396);
  if ((v4 & 0x2000000) != 0) {
    goto LABEL_92;
  }
LABEL_32:
  if ((v4 & 0x4000000) != 0) {
LABEL_33:
  }
    double result = PB::Writer::write(this, *(unsigned char *)(v3 + 390), 0x69u);
LABEL_34:
  int v5 = *(double **)(v3 + 32);
  uint64_t v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7, 0x97u);
  }
  double v8 = *(double **)(v3 + 8);
  int v9 = *(double **)(v3 + 16);
  while (v8 != v9)
  {
    double v10 = *v8++;
    double result = PB::Writer::write(this, v10, 0x98u);
  }
  double v11 = *(double **)(v3 + 56);
  char v12 = *(double **)(v3 + 64);
  while (v11 != v12)
  {
    double v13 = *v11++;
    double result = PB::Writer::write(this, v13, 0x99u);
  }
  double v14 = *(double **)(v3 + 104);
  uint64_t v15 = *(double **)(v3 + 112);
  while (v14 != v15)
  {
    double v16 = *v14++;
    double result = PB::Writer::write(this, v16, 0xA1u);
  }
  unsigned int v17 = *(double **)(v3 + 80);
  unint64_t v18 = *(double **)(v3 + 88);
  while (v17 != v18)
  {
    double v19 = *v17++;
    double result = PB::Writer::write(this, v19, 0xA2u);
  }
  char v20 = *(double **)(v3 + 128);
  BOOL v21 = *(double **)(v3 + 136);
  while (v20 != v21)
  {
    double v22 = *v20++;
    double result = PB::Writer::write(this, v22, 0xA3u);
  }
  unsigned int v23 = *(double **)(v3 + 176);
  unint64_t v24 = *(double **)(v3 + 184);
  while (v23 != v24)
  {
    double v25 = *v23++;
    double result = PB::Writer::write(this, v25, 0xA4u);
  }
  uint64_t v26 = *(double **)(v3 + 152);
  int v27 = *(double **)(v3 + 160);
  while (v26 != v27)
  {
    double v28 = *v26++;
    double result = PB::Writer::write(this, v28, 0xA5u);
  }
  unint64_t v30 = *(double **)(v3 + 200);
  unint64_t v29 = *(double **)(v3 + 208);
  while (v30 != v29)
  {
    double v31 = *v30++;
    double result = PB::Writer::write(this, v31, 0xA6u);
  }
  return result;
}

uint64_t sub_10164D830(uint64_t result)
{
  *(void *)double result = &off_102332E60;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_10164D858(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_10164D890(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102332E60;
  *(_DWORD *)(a1 + 72) = 0;
  __int16 v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    __int16 v3 = 4;
    *(_WORD *)(a1 + 72) = 4;
    *(void *)(a1 + 24) = v4;
    __int16 v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 8) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(_WORD *)(a1 + 72) = v3;
    *(void *)(a1 + 32) = v5;
    __int16 v2 = *(_WORD *)(a2 + 72);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 72) = v3;
    *(void *)(a1 + 16) = v6;
    __int16 v2 = *(_WORD *)(a2 + 72);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 68);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 68) = v7;
  __int16 v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  LODWORD(v4) = *(_DWORD *)(a2 + 64);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 64) = v4;
  __int16 v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v8 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 72) = v3;
  *(void *)(a1 + 40) = v8;
  __int16 v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t v9 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 72) = v3;
  *(void *)(a1 + 48) = v9;
  __int16 v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v10 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 72) = v3;
  *(void *)(a1 + 8) = v10;
  __int16 v2 = *(_WORD *)(a2 + 72);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_22;
  }
LABEL_21:
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 72) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  if ((*(_WORD *)(a2 + 72) & 0x40) == 0) {
    return *(float *)&v4;
  }
LABEL_22:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  *(_WORD *)(a1 + 72) = v3 | 0x40;
  *(_DWORD *)(a1 + 56) = v4;
  return *(float *)&v4;
}

uint64_t sub_10164D9D4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "afterElevationMedian", *(float *)(a1 + 56));
    __int16 v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "beforeElevationMedian", *(float *)(a1 + 60));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "endTimestampOfWindow", *(void *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "impactTimestamp", *(void *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pressureTimestamp", *(void *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "rangeOfElevationInWindow", *(float *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "startTimestampOfLastInspectedWindow", *(void *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "startTimestampOfWindow", *(void *)(a1 + 48));
  if ((*(_WORD *)(a1 + 72) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 68));
LABEL_12:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164DB58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_122;
            case 2u:
              *(_WORD *)(a1 + 72) |= 8u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  unint64_t v59 = v20++;
                  char v60 = *(unsigned char *)(v21 + v59);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
LABEL_126:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
                goto LABEL_126;
              }
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v2 = v20 + 1;
                *((void *)this + 1) = v20 + 1;
                char v25 = *(unsigned char *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v22 += 7;
                unint64_t v20 = v2;
                BOOL v14 = v23++ > 8;
              }
              while (!v14);
              uint64_t v24 = 0;
LABEL_127:
              *(void *)(a1 + 32) = v24;
              goto LABEL_153;
            case 3u:
              *(_WORD *)(a1 + 72) |= 2u;
              unint64_t v26 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v27 = *(void *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v30 = 0;
                if (v2 <= v26) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    uint64_t v30 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  unint64_t v63 = v26++;
                  char v64 = *(unsigned char *)(v27 + v63);
                  *((void *)this + 1) = v26;
                  v30 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    uint64_t v30 = 0;
LABEL_131:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v30 = 0;
                }
                goto LABEL_131;
              }
              char v28 = 0;
              unsigned int v29 = 0;
              uint64_t v30 = 0;
              do
              {
                unint64_t v2 = v26 + 1;
                *((void *)this + 1) = v26 + 1;
                char v31 = *(unsigned char *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v28 += 7;
                unint64_t v26 = v2;
                BOOL v14 = v29++ > 8;
              }
              while (!v14);
              uint64_t v30 = 0;
LABEL_132:
              *(void *)(a1 + 16) = v30;
              goto LABEL_153;
            case 4u:
              *(_WORD *)(a1 + 72) |= 0x200u;
              unint64_t v32 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v33 = *(void *)this;
              if (v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v36 = 0;
                if (v2 <= v32) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v32)
                  {
                    LODWORD(v36) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v67 = v32++;
                  char v68 = *(unsigned char *)(v33 + v67);
                  *((void *)this + 1) = v32;
                  v36 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v36) = 0;
LABEL_136:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v36) = 0;
                }
                goto LABEL_136;
              }
              char v34 = 0;
              unsigned int v35 = 0;
              uint64_t v36 = 0;
              do
              {
                unint64_t v2 = v32 + 1;
                *((void *)this + 1) = v32 + 1;
                char v37 = *(unsigned char *)(v33 + v32);
                v36 |= (unint64_t)(v37 & 0x7F) << v34;
                if ((v37 & 0x80) == 0) {
                  goto LABEL_137;
                }
                v34 += 7;
                unint64_t v32 = v2;
                BOOL v14 = v35++ > 8;
              }
              while (!v14);
              LODWORD(v36) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 68) = v36;
              goto LABEL_153;
            case 0xAu:
              *(_WORD *)(a1 + 72) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_121;
            case 0xBu:
              *(_WORD *)(a1 + 72) |= 0x10u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  unint64_t v71 = v39++;
                  char v72 = *(unsigned char *)(v40 + v71);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0;
LABEL_141:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v43 = 0;
                }
                goto LABEL_141;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              uint64_t v43 = 0;
LABEL_142:
              *(void *)(a1 + 40) = v43;
              goto LABEL_153;
            case 0xCu:
              *(_WORD *)(a1 + 72) |= 0x20u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    uint64_t v49 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v75 = v45++;
                  char v76 = *(unsigned char *)(v46 + v75);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    uint64_t v49 = 0;
LABEL_146:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v49 = 0;
                }
                goto LABEL_146;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              uint64_t v49 = 0;
LABEL_147:
              *(void *)(a1 + 48) = v49;
              goto LABEL_153;
            case 0xDu:
              *(_WORD *)(a1 + 72) |= 1u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    uint64_t v55 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v79 = v51++;
                  char v80 = *(unsigned char *)(v52 + v79);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0;
LABEL_151:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v55 = 0;
                }
                goto LABEL_151;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              uint64_t v55 = 0;
LABEL_152:
              *(void *)(a1 + 8) = v55;
LABEL_153:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x14u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_121;
            case 0x15u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
LABEL_121:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_122:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_153;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_153;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10164E3A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 72);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 4u);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x14u);
    if ((*(_WORD *)(v3 + 72) & 0x40) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 0xDu);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x80) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_21:
  float v5 = *(float *)(v3 + 56);

  return PB::Writer::write(this, v5, 0x15u);
}

uint64_t sub_10164E4F4(uint64_t result)
{
  *(void *)uint64_t result = &off_102332E98;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_10164E51C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10164E554(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_102332E98;
  *(_DWORD *)(result + 80) = 0;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    __int16 v3 = 4;
    *(_WORD *)(result + 80) = 4;
    *(void *)(result + 24) = v4;
    __int16 v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(result + 80) = v3;
    *(void *)(result + 16) = v5;
    __int16 v2 = *(_WORD *)(a2 + 80);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(result + 80) = v3;
    *(void *)(result + 8) = v6;
    __int16 v2 = *(_WORD *)(a2 + 80);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x800) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 64);
  v3 |= 0x200u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 64) = v7;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x800) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  int v8 = *(_DWORD *)(a2 + 72);
  v3 |= 0x800u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 72) = v8;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  int v9 = *(_DWORD *)(a2 + 76);
  v3 |= 0x1000u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 76) = v9;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  int v10 = *(_DWORD *)(a2 + 68);
  v3 |= 0x400u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 68) = v10;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x20) == 0)
  {
LABEL_12:
    if ((v2 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  int v11 = *(_DWORD *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 48) = v11;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x40) == 0)
  {
LABEL_13:
    if ((v2 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  int v12 = *(_DWORD *)(a2 + 52);
  v3 |= 0x40u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 52) = v12;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x100) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v13 = *(_DWORD *)(a2 + 60);
  v3 |= 0x100u;
  *(_WORD *)(result + 80) = v3;
  *(_DWORD *)(result + 60) = v13;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 0x10) == 0)
  {
LABEL_15:
    if ((v2 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t v14 = *(void *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(result + 80) = v3;
  *(void *)(result + 40) = v14;
  __int16 v2 = *(_WORD *)(a2 + 80);
  if ((v2 & 8) == 0)
  {
LABEL_16:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_28:
    int v16 = *(_DWORD *)(a2 + 56);
    *(_WORD *)(result + 80) = v3 | 0x80;
    *(_DWORD *)(result + 56) = v16;
    return result;
  }
LABEL_27:
  uint64_t v15 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(result + 80) = v3;
  *(void *)(result + 32) = v15;
  if ((*(_WORD *)(a2 + 80) & 0x80) != 0) {
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_10164E6EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 80);
  if (v5)
  {
    PB::TextFormatter::format(this, "aopTsImpact", *(void *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "aopTsNow", *(void *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "aopTsSensor", *(void *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "nPeaks", *(_DWORD *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "normalizedIQR", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "repetitiveMotion", *(_DWORD *)(a1 + 60));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "repetitiveMotionEndTs", *(void *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "repetitiveMotionStartTs", *(void *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "seq", *(_DWORD *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "sumHighQPeaksInDecLowFreqFFT", *(float *)(a1 + 68));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "sumHighQPeaksInHighFreqFFT", *(float *)(a1 + 72));
  if ((*(_WORD *)(a1 + 80) & 0x1000) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "sumHighQPeaksInLowFreqFFT", *(float *)(a1 + 76));
LABEL_15:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164E8D0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 80) |= 4u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  unint64_t v77 = v20++;
                  char v78 = *(unsigned char *)(v21 + v77);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_167:
                unint64_t v2 = v77 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_168;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_168:
              *(void *)(a1 + 24) = v24;
              goto LABEL_209;
            case 2u:
              *(_WORD *)(a1 + 80) |= 2u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_173;
                  }
                  unint64_t v81 = v27++;
                  char v82 = *(unsigned char *)(v28 + v81);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_172:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_173;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_172;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_173;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_173:
              *(void *)(a1 + 16) = v31;
              goto LABEL_209;
            case 3u:
              *(_WORD *)(a1 + 80) |= 1u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  unint64_t v85 = v33++;
                  char v86 = *(unsigned char *)(v34 + v85);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_177:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_177;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_178:
              *(void *)(a1 + 8) = v37;
              goto LABEL_209;
            case 4u:
              *(_WORD *)(a1 + 80) |= 0x200u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  unint64_t v89 = v39++;
                  char v90 = *(unsigned char *)(v40 + v89);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_182:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_182;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_183:
              *(_DWORD *)(a1 + 64) = v43;
              goto LABEL_209;
            case 5u:
              *(_WORD *)(a1 + 80) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_163;
            case 6u:
              *(_WORD *)(a1 + 80) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_163;
            case 7u:
              *(_WORD *)(a1 + 80) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_163;
            case 8u:
              *(_WORD *)(a1 + 80) |= 0x20u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_188;
                  }
                  unint64_t v93 = v45++;
                  char v94 = *(unsigned char *)(v46 + v93);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_187:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_187;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_188;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_188:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_209;
            case 9u:
              *(_WORD *)(a1 + 80) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
LABEL_163:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_70:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_209;
            case 0xAu:
              *(_WORD *)(a1 + 80) |= 0x100u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_193;
                  }
                  unint64_t v97 = v51++;
                  char v98 = *(unsigned char *)(v52 + v97);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_192:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_192;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_193;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_193:
              *(_DWORD *)(a1 + 60) = v55;
              goto LABEL_209;
            case 0xBu:
              *(_WORD *)(a1 + 80) |= 0x10u;
              unint64_t v57 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v58 = *(void *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v99 = 0;
                unsigned int v100 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    uint64_t v61 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_198;
                  }
                  unint64_t v101 = v57++;
                  char v102 = *(unsigned char *)(v58 + v101);
                  *((void *)this + 1) = v57;
                  v61 |= (unint64_t)(v102 & 0x7F) << v99;
                  if ((v102 & 0x80) == 0) {
                    break;
                  }
                  v99 += 7;
                  BOOL v14 = v100++ > 8;
                  if (v14)
                  {
                    uint64_t v61 = 0;
LABEL_197:
                    unint64_t v2 = v101 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v61 = 0;
                }
                goto LABEL_197;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v2 = v57 + 1;
                *((void *)this + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_198;
                }
                v59 += 7;
                unint64_t v57 = v2;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              uint64_t v61 = 0;
LABEL_198:
              *(void *)(a1 + 40) = v61;
              goto LABEL_209;
            case 0xCu:
              *(_WORD *)(a1 + 80) |= 8u;
              unint64_t v63 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v64 = *(void *)this;
              if (v63 > 0xFFFFFFFFFFFFFFF5 || v63 + 10 > v2)
              {
                char v103 = 0;
                unsigned int v104 = 0;
                uint64_t v67 = 0;
                if (v2 <= v63) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v63)
                  {
                    uint64_t v67 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_203;
                  }
                  unint64_t v105 = v63++;
                  char v106 = *(unsigned char *)(v64 + v105);
                  *((void *)this + 1) = v63;
                  v67 |= (unint64_t)(v106 & 0x7F) << v103;
                  if ((v106 & 0x80) == 0) {
                    break;
                  }
                  v103 += 7;
                  BOOL v14 = v104++ > 8;
                  if (v14)
                  {
                    uint64_t v67 = 0;
LABEL_202:
                    unint64_t v2 = v105 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v67 = 0;
                }
                goto LABEL_202;
              }
              char v65 = 0;
              unsigned int v66 = 0;
              uint64_t v67 = 0;
              do
              {
                unint64_t v2 = v63 + 1;
                *((void *)this + 1) = v63 + 1;
                char v68 = *(unsigned char *)(v64 + v63);
                v67 |= (unint64_t)(v68 & 0x7F) << v65;
                if ((v68 & 0x80) == 0) {
                  goto LABEL_203;
                }
                v65 += 7;
                unint64_t v63 = v2;
                BOOL v14 = v66++ > 8;
              }
              while (!v14);
              uint64_t v67 = 0;
LABEL_203:
              *(void *)(a1 + 32) = v67;
              goto LABEL_209;
            case 0xDu:
              *(_WORD *)(a1 + 80) |= 0x80u;
              unint64_t v69 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v70 = *(void *)this;
              if (v69 > 0xFFFFFFFFFFFFFFF5 || v69 + 10 > v2)
              {
                char v107 = 0;
                unsigned int v108 = 0;
                uint64_t v73 = 0;
                if (v2 <= v69) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v69)
                  {
                    LODWORD(v73) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_208;
                  }
                  unint64_t v109 = v69++;
                  char v110 = *(unsigned char *)(v70 + v109);
                  *((void *)this + 1) = v69;
                  v73 |= (unint64_t)(v110 & 0x7F) << v107;
                  if ((v110 & 0x80) == 0) {
                    break;
                  }
                  v107 += 7;
                  BOOL v14 = v108++ > 8;
                  if (v14)
                  {
                    LODWORD(v73) = 0;
LABEL_207:
                    unint64_t v2 = v109 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v73) = 0;
                }
                goto LABEL_207;
              }
              char v71 = 0;
              unsigned int v72 = 0;
              uint64_t v73 = 0;
              do
              {
                unint64_t v2 = v69 + 1;
                *((void *)this + 1) = v69 + 1;
                char v74 = *(unsigned char *)(v70 + v69);
                v73 |= (unint64_t)(v74 & 0x7F) << v71;
                if ((v74 & 0x80) == 0) {
                  goto LABEL_208;
                }
                v71 += 7;
                unint64_t v69 = v2;
                BOOL v14 = v72++ > 8;
              }
              while (!v14);
              LODWORD(v73) = 0;
LABEL_208:
              *(_DWORD *)(a1 + 56) = v73;
LABEL_209:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_209;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10164F3B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 80);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 2u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 3u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 4u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 5u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 6u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 7u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 8u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 9u);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0xCu);
    if ((*(_WORD *)(v3 + 80) & 0x80) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 40), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_27:
  unsigned int v5 = *(_DWORD *)(v3 + 56);

  return PB::Writer::writeVarInt(this, v5, 0xDu);
}

void sub_10164F560(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10164F598(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_102332ED0;
  *(_DWORD *)(result + 72) = 0;
  int v2 = *(_DWORD *)(a2 + 72);
  if (v2)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(result + 72) = 1;
    *(_DWORD *)(result + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 72);
    if ((v2 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x20000) != 0)
  {
LABEL_5:
    char v5 = *(unsigned char *)(a2 + 70);
    v3 |= 0x20000u;
    *(_DWORD *)(result + 72) = v3;
    *(unsigned char *)(result + 70) = v5;
    int v2 = *(_DWORD *)(a2 + 72);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 12);
    v3 |= 2u;
    *(_DWORD *)(result + 72) = v3;
    *(_DWORD *)(result + 12) = v6;
    int v2 = *(_DWORD *)(a2 + 72);
    if ((v2 & 0x2000) == 0)
    {
LABEL_8:
      if ((v2 & 0x4000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_25;
    }
  }
  else if ((v2 & 0x2000) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 60);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 60) = v7;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x4000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v8 = *(_DWORD *)(a2 + 64);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 64) = v8;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  int v9 = *(_DWORD *)(a2 + 16);
  v3 |= 4u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 16) = v9;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x20) == 0)
  {
LABEL_11:
    if ((v2 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  int v10 = *(_DWORD *)(a2 + 28);
  v3 |= 0x20u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 28) = v10;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 8) == 0)
  {
LABEL_12:
    if ((v2 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v11 = *(_DWORD *)(a2 + 20);
  v3 |= 8u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 20) = v11;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x10) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  int v12 = *(_DWORD *)(a2 + 24);
  v3 |= 0x10u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 24) = v12;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  int v13 = *(_DWORD *)(a2 + 56);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 56) = v13;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x800) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_32;
  }
LABEL_31:
  int v14 = *(_DWORD *)(a2 + 52);
  v3 |= 0x800u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 52) = v14;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
LABEL_32:
  int v15 = *(_DWORD *)(a2 + 48);
  v3 |= 0x400u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 48) = v15;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x200) == 0)
  {
LABEL_17:
    if ((v2 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v16 = *(_DWORD *)(a2 + 44);
  v3 |= 0x200u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 44) = v16;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x40) == 0)
  {
LABEL_18:
    if ((v2 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v17 = *(_DWORD *)(a2 + 32);
  v3 |= 0x40u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 32) = v17;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x80) == 0)
  {
LABEL_19:
    if ((v2 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v18 = *(_DWORD *)(a2 + 36);
  v3 |= 0x80u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 36) = v18;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x100) == 0)
  {
LABEL_20:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v19 = *(_DWORD *)(a2 + 40);
  v3 |= 0x100u;
  *(_DWORD *)(result + 72) = v3;
  *(_DWORD *)(result + 40) = v19;
  int v2 = *(_DWORD *)(a2 + 72);
  if ((v2 & 0x10000) == 0)
  {
LABEL_21:
    if ((v2 & 0x8000) == 0) {
      return result;
    }
LABEL_38:
    char v21 = *(unsigned char *)(a2 + 68);
    *(_DWORD *)(result + 72) = v3 | 0x8000;
    *(unsigned char *)(result + 68) = v21;
    return result;
  }
LABEL_37:
  char v20 = *(unsigned char *)(a2 + 69);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 72) = v3;
  *(unsigned char *)(result + 69) = v20;
  if ((*(_DWORD *)(a2 + 72) & 0x8000) != 0) {
    goto LABEL_38;
  }
  return result;
}

uint64_t sub_10164F7B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 72);
  if (v5)
  {
    PB::TextFormatter::format(this, "crownUpDown", *(_DWORD *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "fallType", *(_DWORD *)(a1 + 12));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "impactMaxAccelNormAlertThreshold", *(float *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHeartRateThreshold", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingHighResolutionSensorDataThreshold", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "impactMaxAccelNormLoggingStatsThreshold", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isADLImpact", *(unsigned char *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "isFallDetectionFeatureEnabled", *(unsigned char *)(a1 + 69));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x20000) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "isNearFall", *(unsigned char *)(a1 + 70));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "metMinutePercentile90", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "metMinutePercentile95", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "metMinutePercentile98", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "metMinutePercentileActual", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "otherFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x800) == 0)
  {
LABEL_16:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "slipFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x1000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "tripFallPosteriorRatioDetectionThreshold", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 72);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(this, "userAgeBucket", *(_DWORD *)(a1 + 60));
  if ((*(_DWORD *)(a1 + 72) & 0x4000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "workoutType", *(_DWORD *)(a1 + 64));
LABEL_20:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10164FA3C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 72) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_131;
                  }
                  unint64_t v53 = v20++;
                  char v54 = *(unsigned char *)(v21 + v53);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_130;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_130:
                unint64_t v2 = v53 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_131;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_131:
              *(_DWORD *)(a1 + 8) = v24;
              goto LABEL_147;
            case 2u:
              *(_DWORD *)(a1 + 72) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 70) = v28;
              goto LABEL_147;
            case 3u:
              *(_DWORD *)(a1 + 72) |= 2u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_136;
                  }
                  unint64_t v57 = v29++;
                  char v58 = *(unsigned char *)(v30 + v57);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_135:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_135;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_136;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_136:
              *(_DWORD *)(a1 + 12) = v33;
              goto LABEL_147;
            case 4u:
              *(_DWORD *)(a1 + 72) |= 0x2000u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_141;
                  }
                  unint64_t v61 = v35++;
                  char v62 = *(unsigned char *)(v36 + v61);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_140:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_140;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_141;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_141:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_147;
            case 5u:
              *(_DWORD *)(a1 + 72) |= 0x4000u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v65 = v41++;
                  char v66 = *(unsigned char *)(v42 + v65);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_145:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_145;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 64) = v45;
LABEL_147:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(_DWORD *)(a1 + 72) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 7u:
              *(_DWORD *)(a1 + 72) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 8u:
              *(_DWORD *)(a1 + 72) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 9u:
              *(_DWORD *)(a1 + 72) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xAu:
              *(_DWORD *)(a1 + 72) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xBu:
              *(_DWORD *)(a1 + 72) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xCu:
              *(_DWORD *)(a1 + 72) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xDu:
              *(_DWORD *)(a1 + 72) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xEu:
              *(_DWORD *)(a1 + 72) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0xFu:
              *(_DWORD *)(a1 + 72) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_86;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 0x10u:
              *(_DWORD *)(a1 + 72) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_126:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_86:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_147;
            case 0x11u:
              *(_DWORD *)(a1 + 72) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 69) = v48;
              goto LABEL_147;
            case 0x12u:
              *(_DWORD *)(a1 + 72) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *(unsigned char *)(a1 + 68) = v50;
              goto LABEL_147;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_147;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016502F0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 72);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 72);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 70), 2u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 12), 3u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 4u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 5u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 6u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 7u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 8u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 9u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0xAu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 0xBu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0xCu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xDu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0xEu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0xFu);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 69), 0x11u);
    if ((*(_DWORD *)(v3 + 72) & 0x8000) == 0) {
      return result;
    }
    goto LABEL_37;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x10u);
  int v4 = *(_DWORD *)(v3 + 72);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x8000) == 0) {
    return result;
  }
LABEL_37:
  char v5 = *(unsigned char *)(v3 + 68);

  return PB::Writer::write(this, v5, 0x12u);
}

double sub_101650520(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &off_102332F08;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  return result;
}

void sub_101650558(PB::Base *this)
{
  *(void *)this = &off_102332F08;
  uint64_t v2 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }

  PB::Base::~Base(this);
}

void sub_10165084C(PB::Base *a1)
{
  sub_101650558(a1);

  operator delete();
}

uint64_t sub_101650884(uint64_t result, uint64_t a2)
{
  *(void *)double result = &off_102332F08;
  *(void *)(result + 8) = 0;
  *(_OWORD *)(result + 32) = 0u;
  *(void *)(result + 16) = 0;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_DWORD *)(result + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    uint64_t v2 = *(void *)(a2 + 24);
    *(unsigned char *)(result + 128) = 1;
    *(void *)(result + 24) = v2;
  }
  if (*(void *)(a2 + 88)) {
    operator new();
  }
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  if (*(void *)(a2 + 64)) {
    operator new();
  }
  if (*(void *)(a2 + 72)) {
    operator new();
  }
  if (*(void *)(a2 + 32)) {
    operator new();
  }
  if (*(void *)(a2 + 104)) {
    operator new();
  }
  if (*(void *)(a2 + 80)) {
    operator new();
  }
  if (*(void *)(a2 + 120)) {
    operator new();
  }
  if (*(void *)(a2 + 48)) {
    operator new();
  }
  if (*(void *)(a2 + 56)) {
    operator new();
  }
  if (*(void *)(a2 + 112)) {
    operator new();
  }
  if (*(void *)(a2 + 40)) {
    operator new();
  }
  if (*(void *)(a2 + 96)) {
    operator new();
  }
  return result;
}

uint64_t sub_101650E28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "accel100");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "accel800");
  }
  if (*(unsigned char *)(a1 + 128)) {
    PB::TextFormatter::format(this, "aopTimestamp", *(void *)(a1 + 24));
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "dm");
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "dmAlwaysOn");
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "fallState");
  }
  uint64_t v10 = *(void *)(a1 + 56);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, this, "fallStats");
  }
  uint64_t v11 = *(void *)(a1 + 64);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, this, "gyro100");
  }
  uint64_t v12 = *(void *)(a1 + 72);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, this, "gyro200");
  }
  uint64_t v13 = *(void *)(a1 + 80);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, this, "heartRate");
  }
  uint64_t v14 = *(void *)(a1 + 88);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, this, "meta");
  }
  uint64_t v15 = *(void *)(a1 + 96);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, this, "odometerEntry");
  }
  uint64_t v16 = *(void *)(a1 + 104);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, this, "pressure");
  }
  uint64_t v17 = *(void *)(a1 + 112);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, this, "suppressionFeatures");
  }
  uint64_t v18 = *(void *)(a1 + 120);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, this, "wristState");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101651198(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 2u:
          *(unsigned char *)(a1 + 128) |= 1u;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_60;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_56:
            uint64_t v25 = 0;
            goto LABEL_60;
          }
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          break;
        case 3u:
          operator new();
        case 4u:
          operator new();
        case 5u:
          operator new();
        case 6u:
          operator new();
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          operator new();
        case 0xAu:
          operator new();
        case 0xBu:
          operator new();
        case 0xCu:
          operator new();
        case 0xDu:
          operator new();
        case 0xEu:
          operator new();
        case 0xFu:
          operator new();
        case 0x10u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_45;
      }
      while (1)
      {
        if (v21 == v20)
        {
          uint64_t v25 = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_60;
        }
        unint64_t v32 = v20 + 1;
        char v33 = *(unsigned char *)(v22 + v20);
        *((void *)this + 1) = v32;
        v25 |= (unint64_t)(v33 & 0x7F) << v30;
        if ((v33 & 0x80) == 0) {
          break;
        }
        v30 += 7;
        unint64_t v20 = v32;
        BOOL v14 = v31++ > 8;
        if (v14) {
          goto LABEL_56;
        }
      }
      if (*((unsigned char *)this + 24)) {
        uint64_t v25 = 0;
      }
LABEL_60:
      *(void *)(a1 + 24) = v25;
LABEL_45:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1016519FC(uint64_t result)
{
  *(void *)uint64_t result = &off_102333330;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void *sub_101651A20(void *result)
{
  *uint64_t result = &off_102332F78;
  result[27] = 0;
  return result;
}

uint64_t sub_101651A44(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 128)) {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 24), 2u);
  }
  int v4 = (const PB::Base *)v3[11];
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 3u);
  }
  uint64_t v5 = (const PB::Base *)v3[1];
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5, 4u);
  }
  uint64_t v6 = (const PB::Base *)v3[2];
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 5u);
  }
  uint64_t v7 = (const PB::Base *)v3[8];
  if (v7) {
    uint64_t result = PB::Writer::writeSubmessage(this, v7, 6u);
  }
  uint64_t v8 = (const PB::Base *)v3[9];
  if (v8) {
    uint64_t result = PB::Writer::writeSubmessage(this, v8, 7u);
  }
  char v9 = (const PB::Base *)v3[4];
  if (v9) {
    uint64_t result = PB::Writer::writeSubmessage(this, v9, 8u);
  }
  unsigned int v10 = (const PB::Base *)v3[13];
  if (v10) {
    uint64_t result = PB::Writer::writeSubmessage(this, v10, 9u);
  }
  unint64_t v11 = (const PB::Base *)v3[10];
  if (v11) {
    uint64_t result = PB::Writer::writeSubmessage(this, v11, 0xAu);
  }
  unint64_t v12 = (const PB::Base *)v3[15];
  if (v12) {
    uint64_t result = PB::Writer::writeSubmessage(this, v12, 0xBu);
  }
  char v13 = (const PB::Base *)v3[6];
  if (v13) {
    uint64_t result = PB::Writer::writeSubmessage(this, v13, 0xCu);
  }
  BOOL v14 = (const PB::Base *)v3[7];
  if (v14) {
    uint64_t result = PB::Writer::writeSubmessage(this, v14, 0xDu);
  }
  char v15 = (const PB::Base *)v3[14];
  if (v15) {
    uint64_t result = PB::Writer::writeSubmessage(this, v15, 0xEu);
  }
  unsigned int v16 = (const PB::Base *)v3[5];
  if (v16) {
    uint64_t result = PB::Writer::writeSubmessage(this, v16, 0xFu);
  }
  unint64_t v17 = (const PB::Base *)v3[12];
  if (v17)
  {
    return PB::Writer::writeSubmessage(this, v17, 0x10u);
  }
  return result;
}

uint64_t sub_101651BB0(uint64_t result)
{
  if (!*(void *)(result + 88)) {
    operator new();
  }
  return result;
}

uint64_t sub_101651C5C(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_101651CEC(uint64_t result)
{
  if (!*(void *)(result + 16)) {
    operator new();
  }
  return result;
}

uint64_t sub_101651D7C(uint64_t result)
{
  if (!*(void *)(result + 64)) {
    operator new();
  }
  return result;
}

uint64_t sub_101651E28(uint64_t result)
{
  if (!*(void *)(result + 72)) {
    operator new();
  }
  return result;
}

uint64_t sub_101651ED4(uint64_t result)
{
  if (!*(void *)(result + 32)) {
    operator new();
  }
  return result;
}

uint64_t sub_101651F64(uint64_t result)
{
  if (!*(void *)(result + 104)) {
    operator new();
  }
  return result;
}

uint64_t sub_101651FF4(uint64_t result)
{
  if (!*(void *)(result + 80)) {
    operator new();
  }
  return result;
}

uint64_t sub_101652084(uint64_t result)
{
  if (!*(void *)(result + 120)) {
    operator new();
  }
  return result;
}

uint64_t sub_101652114(uint64_t result)
{
  if (!*(void *)(result + 48)) {
    operator new();
  }
  return result;
}

uint64_t sub_1016521C0(uint64_t result)
{
  if (!*(void *)(result + 56)) {
    operator new();
  }
  return result;
}

uint64_t sub_10165226C(uint64_t result)
{
  if (!*(void *)(result + 112)) {
    operator new();
  }
  return result;
}

uint64_t sub_101652318(uint64_t result)
{
  if (!*(void *)(result + 96)) {
    operator new();
  }
  return result;
}

void sub_1016523AC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_1016523E4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_102332F40;
  *(_DWORD *)(result + 48) = 0;
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(unsigned char *)(result + 48) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(unsigned char *)(a2 + 48);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*(unsigned char *)(a2 + 48))
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(unsigned char *)(result + 48) = v3;
    *(void *)(result + 8) = v5;
    char v2 = *(unsigned char *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(result + 48) = v3;
    *(_DWORD *)(result + 24) = v6;
    char v2 = *(unsigned char *)(a2 + 48);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 40);
  v3 |= 0x40u;
  *(unsigned char *)(result + 48) = v3;
  *(_DWORD *)(result + 40) = v7;
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_16;
  }
LABEL_15:
  int v8 = *(_DWORD *)(a2 + 36);
  v3 |= 0x20u;
  *(unsigned char *)(result + 48) = v3;
  *(_DWORD *)(result + 36) = v8;
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x10u;
  *(unsigned char *)(result + 48) = v3;
  *(_DWORD *)(result + 32) = v9;
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      return result;
    }
LABEL_18:
    char v11 = *(unsigned char *)(a2 + 44);
    *(unsigned char *)(result + 48) = v3 | 0x80;
    *(unsigned char *)(result + 44) = v11;
    return result;
  }
LABEL_17:
  int v10 = *(_DWORD *)(a2 + 28);
  v3 |= 8u;
  *(unsigned char *)(result + 48) = v3;
  *(_DWORD *)(result + 28) = v10;
  if ((*(unsigned char *)(a2 + 48) & 0x80) != 0) {
    goto LABEL_18;
  }
  return result;
}

uint64_t sub_1016524EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 48);
  if (v5)
  {
    PB::TextFormatter::format(this, "aopTsNow", *(void *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "aopTsSensor", *(void *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "fallAlertSentFromReferee", *(unsigned char *)(a1 + 44));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isFall", *(_DWORD *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "resolution", *(_DWORD *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "response", *(_DWORD *)(a1 + 36));
  if ((*(unsigned char *)(a1 + 48) & 0x40) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 40));
LABEL_10:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101652630(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 48) |= 2u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v67 = v20++;
                  char v68 = *(unsigned char *)(v21 + v67);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_136;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_136:
                unint64_t v3 = v67 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v3 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_137;
                  }
                  v22 += 7;
                  unint64_t v20 = v3;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_137:
              *(void *)(a1 + 16) = v24;
              goto LABEL_168;
            case 2u:
              *(unsigned char *)(a1 + 48) |= 1u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  unint64_t v71 = v27++;
                  char v72 = *(unsigned char *)(v28 + v71);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_141:
                    unint64_t v3 = v71 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_141;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v3 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v29 += 7;
                unint64_t v27 = v3;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_142:
              *(void *)(a1 + 8) = v31;
              goto LABEL_168;
            case 3u:
              *(unsigned char *)(a1 + 48) |= 4u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v75 = v33++;
                  char v76 = *(unsigned char *)(v34 + v75);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_146:
                    unint64_t v3 = v75 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_146;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_168;
            case 4u:
              *(unsigned char *)(a1 + 48) |= 0x40u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v79 = v39++;
                  char v80 = *(unsigned char *)(v40 + v79);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_151:
                    unint64_t v3 = v79 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_151;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_152:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_168;
            case 5u:
              *(unsigned char *)(a1 + 48) |= 0x20u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  unint64_t v83 = v45++;
                  char v84 = *(unsigned char *)(v46 + v83);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_156:
                    unint64_t v3 = v83 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_156;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v3 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v47 += 7;
                unint64_t v45 = v3;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 36) = v49;
              goto LABEL_168;
            case 6u:
              *(unsigned char *)(a1 + 48) |= 0x10u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v85 = 0;
                unsigned int v86 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_162;
                  }
                  unint64_t v87 = v51++;
                  char v88 = *(unsigned char *)(v52 + v87);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0) {
                    break;
                  }
                  v85 += 7;
                  BOOL v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_161:
                    unint64_t v3 = v87 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_161;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v3 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_162;
                }
                v53 += 7;
                unint64_t v51 = v3;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_162:
              *(_DWORD *)(a1 + 32) = v55;
              goto LABEL_168;
            case 7u:
              *(unsigned char *)(a1 + 48) |= 8u;
              unint64_t v57 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v58 = *(void *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v89 = 0;
                unsigned int v90 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_167;
                  }
                  unint64_t v91 = v57++;
                  char v92 = *(unsigned char *)(v58 + v91);
                  *((void *)this + 1) = v57;
                  v61 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0) {
                    break;
                  }
                  v89 += 7;
                  BOOL v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_166:
                    unint64_t v3 = v91 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v61) = 0;
                }
                goto LABEL_166;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v3 = v57 + 1;
                *((void *)this + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_167;
                }
                v59 += 7;
                unint64_t v57 = v3;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_167:
              *(_DWORD *)(a1 + 28) = v61;
LABEL_168:
              int v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *(unsigned char *)(a1 + 48) |= 0x80u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v64 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v63 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v64 = v63 != 0;
              }
              *(unsigned char *)(a1 + 44) = v64;
              goto LABEL_168;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              goto LABEL_168;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101652E78(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 48);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 4u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 5u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 7u);
    if ((*(unsigned char *)(v3 + 48) & 0x80) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 6u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_17:
  char v5 = *(unsigned char *)(v3 + 44);

  return PB::Writer::write(this, v5, 8u);
}

void sub_101652F94(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_101652FCC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102332F78;
  *(void *)(a1 + 216) = 0;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x80000000) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 144);
    uint64_t v3 = 0x80000000;
    *(void *)(a1 + 216) = 0x80000000;
    *(_DWORD *)(a1 + 144) = v4;
    uint64_t v2 = *(void *)(a2 + 216);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v3 = 0;
  if (v2)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 8);
    v3 |= 1uLL;
    *(void *)(a1 + 216) = v3;
    *(void *)(a1 + 8) = v5;
    uint64_t v2 = *(void *)(a2 + 216);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2uLL;
    *(void *)(a1 + 216) = v3;
    *(void *)(a1 + 16) = v6;
    uint64_t v2 = *(void *)(a2 + 216);
    if ((v2 & 0x20000) == 0)
    {
LABEL_8:
      if ((v2 & 0x8000000000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_56;
    }
  }
  else if ((v2 & 0x20000) == 0)
  {
    goto LABEL_8;
  }
  float result = *(float *)(a2 + 88);
  v3 |= 0x20000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 88) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x8000000000) == 0)
  {
LABEL_9:
    if ((v2 & 0x4000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_57;
  }
LABEL_56:
  float result = *(float *)(a2 + 176);
  v3 |= 0x8000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 176) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x4000000000) == 0)
  {
LABEL_10:
    if ((v2 & 0x80000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_58;
  }
LABEL_57:
  float result = *(float *)(a2 + 172);
  v3 |= 0x4000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 172) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x80000000000) == 0)
  {
LABEL_11:
    if ((v2 & 0x40000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_59;
  }
LABEL_58:
  float result = *(float *)(a2 + 192);
  v3 |= 0x80000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 192) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v2 & 0x800000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_60;
  }
LABEL_59:
  float result = *(float *)(a2 + 188);
  v3 |= 0x40000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 188) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x800000000000) == 0)
  {
LABEL_13:
    if ((v2 & 0x400000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_61;
  }
LABEL_60:
  float result = *(float *)(a2 + 208);
  v3 |= 0x800000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 208) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x400000000000) == 0)
  {
LABEL_14:
    if ((v2 & 0x10000000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_62;
  }
LABEL_61:
  float result = *(float *)(a2 + 204);
  v3 |= 0x400000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 204) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x10000000000) == 0)
  {
LABEL_15:
    if ((v2 & 0x100000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_63;
  }
LABEL_62:
  float result = *(float *)(a2 + 180);
  v3 |= 0x10000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 180) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x100000000000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_64;
  }
LABEL_63:
  float result = *(float *)(a2 + 196);
  v3 |= 0x100000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 196) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x1000000000000) == 0)
  {
LABEL_17:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_65;
  }
LABEL_64:
  float result = *(float *)(a2 + 212);
  v3 |= 0x1000000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 212) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x10000) == 0)
  {
LABEL_18:
    if ((v2 & 0x2000000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_66;
  }
LABEL_65:
  float result = *(float *)(a2 + 84);
  v3 |= 0x10000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 84) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x2000000000) == 0)
  {
LABEL_19:
    if ((v2 & 0x20000000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_67;
  }
LABEL_66:
  float result = *(float *)(a2 + 168);
  v3 |= 0x2000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 168) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x20000000000) == 0)
  {
LABEL_20:
    if ((v2 & 0x200000000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_68;
  }
LABEL_67:
  float result = *(float *)(a2 + 184);
  v3 |= 0x20000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 184) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x200000000000) == 0)
  {
LABEL_21:
    if ((v2 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_69;
  }
LABEL_68:
  float result = *(float *)(a2 + 200);
  v3 |= 0x200000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 200) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 4) == 0)
  {
LABEL_22:
    if ((v2 & 0x10) == 0) {
      goto LABEL_23;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t v8 = *(void *)(a2 + 24);
  v3 |= 4uLL;
  *(void *)(a1 + 216) = v3;
  *(void *)(a1 + 24) = v8;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x10) == 0)
  {
LABEL_23:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_71;
  }
LABEL_70:
  float result = *(float *)(a2 + 36);
  v3 |= 0x10uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 36) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x800000) == 0)
  {
LABEL_24:
    if ((v2 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_72;
  }
LABEL_71:
  float result = *(float *)(a2 + 112);
  v3 |= 0x800000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 112) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x80) == 0)
  {
LABEL_25:
    if ((v2 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_73;
  }
LABEL_72:
  float result = *(float *)(a2 + 48);
  v3 |= 0x80uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 48) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x40) == 0)
  {
LABEL_26:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_74;
  }
LABEL_73:
  float result = *(float *)(a2 + 44);
  v3 |= 0x40uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 44) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x100000) == 0)
  {
LABEL_27:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_75;
  }
LABEL_74:
  float result = *(float *)(a2 + 100);
  v3 |= 0x100000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 100) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x80000) == 0)
  {
LABEL_28:
    if ((v2 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_76;
  }
LABEL_75:
  float result = *(float *)(a2 + 96);
  v3 |= 0x80000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 96) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_77;
  }
LABEL_76:
  float result = *(float *)(a2 + 140);
  v3 |= 0x40000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 140) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x1000) == 0)
  {
LABEL_30:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_78;
  }
LABEL_77:
  int v9 = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000uLL;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 68) = v9;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x4000) == 0)
  {
LABEL_31:
    if ((v2 & 0x100000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_79;
  }
LABEL_78:
  int v10 = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000uLL;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 76) = v10;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v2 & 0x1000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }
LABEL_79:
  int v11 = *(_DWORD *)(a2 + 148);
  v3 |= (unint64_t)&_mh_execute_header;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 148) = v11;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x1000000000) == 0)
  {
LABEL_33:
    if ((v2 & 0x100) == 0) {
      goto LABEL_34;
    }
    goto LABEL_81;
  }
LABEL_80:
  int v12 = *(_DWORD *)(a2 + 164);
  v3 |= 0x1000000000uLL;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 164) = v12;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x100) == 0)
  {
LABEL_34:
    if ((v2 & 0x200000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_82;
  }
LABEL_81:
  int v13 = *(_DWORD *)(a2 + 52);
  v3 |= 0x100uLL;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 52) = v13;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v2 & 0x800) == 0) {
      goto LABEL_36;
    }
    goto LABEL_83;
  }
LABEL_82:
  float result = *(float *)(a2 + 152);
  v3 |= 0x200000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 152) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x800) == 0)
  {
LABEL_36:
    if ((v2 & 0x400) == 0) {
      goto LABEL_37;
    }
    goto LABEL_84;
  }
LABEL_83:
  float result = *(float *)(a2 + 64);
  v3 |= 0x800uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 64) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x400) == 0)
  {
LABEL_37:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_85;
  }
LABEL_84:
  float result = *(float *)(a2 + 60);
  v3 |= 0x400uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 60) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x200000) == 0)
  {
LABEL_38:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_86;
  }
LABEL_85:
  float result = *(float *)(a2 + 104);
  v3 |= 0x200000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 104) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x40000) == 0)
  {
LABEL_39:
    if ((v2 & 0x20000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_87;
  }
LABEL_86:
  float result = *(float *)(a2 + 92);
  v3 |= 0x40000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 92) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x20000000) == 0)
  {
LABEL_40:
    if ((v2 & 0x800000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_88;
  }
LABEL_87:
  float result = *(float *)(a2 + 136);
  v3 |= 0x20000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 136) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x800000000) == 0)
  {
LABEL_41:
    if ((v2 & 0x400000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_89;
  }
LABEL_88:
  float result = *(float *)(a2 + 160);
  v3 |= 0x800000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 160) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x400000000) == 0)
  {
LABEL_42:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_90;
  }
LABEL_89:
  float result = *(float *)(a2 + 156);
  v3 |= 0x400000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 156) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x8000) == 0)
  {
LABEL_43:
    if ((v2 & 0x10000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_91;
  }
LABEL_90:
  int v14 = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000uLL;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 80) = v14;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x10000000) == 0)
  {
LABEL_44:
    if ((v2 & 0x4000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_92;
  }
LABEL_91:
  float result = *(float *)(a2 + 132);
  v3 |= 0x10000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 132) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x4000000) == 0)
  {
LABEL_45:
    if ((v2 & 0x8000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_93;
  }
LABEL_92:
  float result = *(float *)(a2 + 124);
  v3 |= 0x4000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 124) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x8000000) == 0)
  {
LABEL_46:
    if ((v2 & 0x20) == 0) {
      goto LABEL_47;
    }
    goto LABEL_94;
  }
LABEL_93:
  float result = *(float *)(a2 + 128);
  v3 |= 0x8000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 128) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x20) == 0)
  {
LABEL_47:
    if ((v2 & 0x1000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_95;
  }
LABEL_94:
  float result = *(float *)(a2 + 40);
  v3 |= 0x20uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 40) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x1000000) == 0)
  {
LABEL_48:
    if ((v2 & 0x2000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_96;
  }
LABEL_95:
  float result = *(float *)(a2 + 116);
  v3 |= 0x1000000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 116) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x2000000) == 0)
  {
LABEL_49:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_97;
  }
LABEL_96:
  int v15 = *(_DWORD *)(a2 + 120);
  v3 |= 0x2000000uLL;
  *(void *)(a1 + 216) = v3;
  *(_DWORD *)(a1 + 120) = v15;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x2000) == 0)
  {
LABEL_50:
    if ((v2 & 0x200) == 0) {
      goto LABEL_51;
    }
    goto LABEL_98;
  }
LABEL_97:
  float result = *(float *)(a2 + 72);
  v3 |= 0x2000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 72) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x200) == 0)
  {
LABEL_51:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_99;
  }
LABEL_98:
  float result = *(float *)(a2 + 56);
  v3 |= 0x200uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 56) = result;
  uint64_t v2 = *(void *)(a2 + 216);
  if ((v2 & 0x400000) == 0)
  {
LABEL_52:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_100:
    float result = *(float *)(a2 + 32);
    *(void *)(a1 + 216) = v3 | 8;
    *(float *)(a1 + 32) = result;
    return result;
  }
LABEL_99:
  float result = *(float *)(a2 + 108);
  v3 |= 0x400000uLL;
  *(void *)(a1 + 216) = v3;
  *(float *)(a1 + 108) = result;
  if ((*(void *)(a2 + 216) & 8) != 0) {
    goto LABEL_100;
  }
  return result;
}

uint64_t sub_101653550(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "abruptGravityChangeAngle", *(float *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 216);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_56;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelPathLength", *(float *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "accelPathLengthWithPeak", *(float *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "angleChangePostImpact", *(float *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "angleChangePreImpact", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "aopTsNow", *(void *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "aopTsSensor", *(void *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "crown", *(_DWORD *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "crownVariance", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "extrapolatedMaxAccelNorm", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "extrapolatedMaxMinusMin", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "fallType", *(_DWORD *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "gravityVariance", *(float *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "isFall", *(_DWORD *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "isNearFall", *(_DWORD *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "jerkVectorMagMax", *(float *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "magMax", *(float *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "maxAccelNorm", *(float *)(a1 + 92));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "maxAngleChangePostImpact", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "maxAngleChangePreImpact", *(float *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "maxMinusMin", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "medianAbsGravityY", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "minInertialZ", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "minInertialZHighFreq", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "operatingMode", *(_DWORD *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "pathLengthDecorrelation", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "pathLengthDelaySpread", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 4) == 0) {
      goto LABEL_30;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "pathLengthHarmonicMean", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 4) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "peakTimestamp", *(void *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "poseAtImpact", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "posteriorRatio", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "seq", *(_DWORD *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "simulated", *(_DWORD *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "sumDeltaAngles", *(float *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "swingAngle", *(float *)(a1 + 156));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "tiltAngle", *(float *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "trialCount", *(_DWORD *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "xJerkScalarMagMax", *(float *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "xMax", *(float *)(a1 + 172));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "xMin", *(float *)(a1 + 176));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "xZCTime", *(float *)(a1 + 180));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "yJerkScalarMagMax", *(float *)(a1 + 184));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "yMax", *(float *)(a1 + 188));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "yMin", *(float *)(a1 + 192));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "yZCTime", *(float *)(a1 + 196));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "zJerkScalarMagMax", *(float *)(a1 + 200));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "zMax", *(float *)(a1 + 204));
  uint64_t v5 = *(void *)(a1 + 216);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_101:
  PB::TextFormatter::format(this, "zMin", *(float *)(a1 + 208));
  if ((*(void *)(a1 + 216) & 0x1000000000000) != 0) {
LABEL_50:
  }
    PB::TextFormatter::format(this, "zZCTime", *(float *)(a1 + 212));
LABEL_51:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101653BB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 216) |= 0x80000000uLL;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            char v147 = 0;
            unsigned int v148 = 0;
            uint64_t v25 = 0;
            if (v21 <= v20) {
              unint64_t v21 = *((void *)this + 1);
            }
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_302;
              }
              unint64_t v149 = v20 + 1;
              char v150 = *(unsigned char *)(v22 + v20);
              *((void *)this + 1) = v149;
              v25 |= (unint64_t)(v150 & 0x7F) << v147;
              if ((v150 & 0x80) == 0)
              {
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_302;
              }
              v147 += 7;
              unint64_t v20 = v149;
              BOOL v14 = v148++ > 8;
            }
            while (!v14);
LABEL_221:
            LODWORD(v25) = 0;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
              if (v14) {
                goto LABEL_221;
              }
            }
          }
LABEL_302:
          *(_DWORD *)(a1 + 144) = v25;
          goto LABEL_294;
        case 2u:
          *(void *)(a1 + 216) |= 1uLL;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_306;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            uint64_t v34 = 0;
            goto LABEL_306;
          }
          char v151 = 0;
          unsigned int v152 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              uint64_t v34 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v153 = v29 + 1;
              char v154 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v153;
              v34 |= (unint64_t)(v154 & 0x7F) << v151;
              if (v154 < 0)
              {
                v151 += 7;
                unint64_t v29 = v153;
                BOOL v14 = v152++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v34 = 0;
              }
            }
            break;
          }
LABEL_306:
          *(void *)(a1 + 8) = v34;
          goto LABEL_294;
        case 3u:
          *(void *)(a1 + 216) |= 2uLL;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_310;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            uint64_t v42 = 0;
            goto LABEL_310;
          }
          char v155 = 0;
          unsigned int v156 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              uint64_t v42 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v157 = v37 + 1;
              char v158 = *(unsigned char *)(v39 + v37);
              *((void *)this + 1) = v157;
              v42 |= (unint64_t)(v158 & 0x7F) << v155;
              if (v158 < 0)
              {
                v155 += 7;
                unint64_t v37 = v157;
                BOOL v14 = v156++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v42 = 0;
              }
            }
            break;
          }
LABEL_310:
          *(void *)(a1 + 16) = v42;
          goto LABEL_294;
        case 4u:
          *(void *)(a1 + 216) |= 0x20000uLL;
          unint64_t v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v45);
          goto LABEL_293;
        case 5u:
          *(void *)(a1 + 216) |= 0x8000000000uLL;
          unint64_t v46 = *((void *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v46);
          goto LABEL_293;
        case 6u:
          *(void *)(a1 + 216) |= 0x4000000000uLL;
          unint64_t v47 = *((void *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v47);
          goto LABEL_293;
        case 7u:
          *(void *)(a1 + 216) |= 0x80000000000uLL;
          unint64_t v48 = *((void *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v48);
          goto LABEL_293;
        case 8u:
          *(void *)(a1 + 216) |= 0x40000000000uLL;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_293;
        case 9u:
          *(void *)(a1 + 216) |= 0x800000000000uLL;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_293;
        case 0xAu:
          *(void *)(a1 + 216) |= 0x400000000000uLL;
          unint64_t v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(void *)this + v51);
          goto LABEL_293;
        case 0xBu:
          *(void *)(a1 + 216) |= 0x10000000000uLL;
          unint64_t v52 = *((void *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(void *)this + v52);
          goto LABEL_293;
        case 0xCu:
          *(void *)(a1 + 216) |= 0x100000000000uLL;
          unint64_t v53 = *((void *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v53);
          goto LABEL_293;
        case 0xDu:
          *(void *)(a1 + 216) |= 0x1000000000000uLL;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 212) = *(_DWORD *)(*(void *)this + v54);
          goto LABEL_293;
        case 0xEu:
          *(void *)(a1 + 216) |= 0x10000uLL;
          unint64_t v55 = *((void *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v55);
          goto LABEL_293;
        case 0xFu:
          *(void *)(a1 + 216) |= 0x2000000000uLL;
          unint64_t v56 = *((void *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v56);
          goto LABEL_293;
        case 0x10u:
          *(void *)(a1 + 216) |= 0x20000000000uLL;
          unint64_t v57 = *((void *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v57);
          goto LABEL_293;
        case 0x11u:
          *(void *)(a1 + 216) |= 0x200000000000uLL;
          unint64_t v58 = *((void *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(void *)this + v58);
          goto LABEL_293;
        case 0x12u:
          *(void *)(a1 + 216) |= 4uLL;
          unint64_t v59 = *((void *)this + 1);
          unint64_t v60 = *((void *)this + 2);
          uint64_t v61 = *(void *)this;
          if (v59 <= 0xFFFFFFFFFFFFFFF5 && v59 + 10 <= v60)
          {
            char v62 = 0;
            unsigned int v63 = 0;
            uint64_t v64 = 0;
            do
            {
              unint64_t v65 = v59 + 1;
              *((void *)this + 1) = v59 + 1;
              char v66 = *(unsigned char *)(v61 + v59);
              v64 |= (unint64_t)(v66 & 0x7F) << v62;
              if ((v66 & 0x80) == 0) {
                goto LABEL_314;
              }
              v62 += 7;
              unint64_t v59 = v65;
              BOOL v14 = v63++ > 8;
            }
            while (!v14);
LABEL_242:
            uint64_t v64 = 0;
            goto LABEL_314;
          }
          char v159 = 0;
          unsigned int v160 = 0;
          uint64_t v64 = 0;
          if (v60 <= v59) {
            unint64_t v60 = *((void *)this + 1);
          }
          while (2)
          {
            if (v60 == v59)
            {
              uint64_t v64 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v161 = v59 + 1;
              char v162 = *(unsigned char *)(v61 + v59);
              *((void *)this + 1) = v161;
              v64 |= (unint64_t)(v162 & 0x7F) << v159;
              if (v162 < 0)
              {
                v159 += 7;
                unint64_t v59 = v161;
                BOOL v14 = v160++ > 8;
                if (v14) {
                  goto LABEL_242;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v64 = 0;
              }
            }
            break;
          }
LABEL_314:
          *(void *)(a1 + 24) = v64;
          goto LABEL_294;
        case 0x13u:
          *(void *)(a1 + 216) |= 0x10uLL;
          unint64_t v67 = *((void *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v67);
          goto LABEL_293;
        case 0x14u:
          *(void *)(a1 + 216) |= 0x800000uLL;
          unint64_t v68 = *((void *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFFBLL || v68 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v68);
          goto LABEL_293;
        case 0x15u:
          *(void *)(a1 + 216) |= 0x80uLL;
          unint64_t v69 = *((void *)this + 1);
          if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v69);
          goto LABEL_293;
        case 0x16u:
          *(void *)(a1 + 216) |= 0x40uLL;
          unint64_t v70 = *((void *)this + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v70);
          goto LABEL_293;
        case 0x17u:
          *(void *)(a1 + 216) |= 0x100000uLL;
          unint64_t v71 = *((void *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v71);
          goto LABEL_293;
        case 0x18u:
          *(void *)(a1 + 216) |= 0x80000uLL;
          unint64_t v72 = *((void *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v72);
          goto LABEL_293;
        case 0x19u:
          *(void *)(a1 + 216) |= 0x40000000uLL;
          unint64_t v73 = *((void *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v73);
          goto LABEL_293;
        case 0x1Au:
          *(void *)(a1 + 216) |= 0x1000uLL;
          unint64_t v74 = *((void *)this + 1);
          unint64_t v75 = *((void *)this + 2);
          uint64_t v76 = *(void *)this;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v79 = 0;
            do
            {
              unint64_t v80 = v74 + 1;
              *((void *)this + 1) = v74 + 1;
              char v81 = *(unsigned char *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0) {
                goto LABEL_318;
              }
              v77 += 7;
              unint64_t v74 = v80;
              BOOL v14 = v78++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v79) = 0;
            goto LABEL_318;
          }
          char v163 = 0;
          unsigned int v164 = 0;
          uint64_t v79 = 0;
          if (v75 <= v74) {
            unint64_t v75 = *((void *)this + 1);
          }
          while (2)
          {
            if (v75 == v74)
            {
              LODWORD(v79) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v165 = v74 + 1;
              char v166 = *(unsigned char *)(v76 + v74);
              *((void *)this + 1) = v165;
              v79 |= (unint64_t)(v166 & 0x7F) << v163;
              if (v166 < 0)
              {
                v163 += 7;
                unint64_t v74 = v165;
                BOOL v14 = v164++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v79) = 0;
              }
            }
            break;
          }
LABEL_318:
          *(_DWORD *)(a1 + 68) = v79;
          goto LABEL_294;
        case 0x1Bu:
          *(void *)(a1 + 216) |= 0x4000uLL;
          unint64_t v82 = *((void *)this + 1);
          unint64_t v83 = *((void *)this + 2);
          uint64_t v84 = *(void *)this;
          if (v82 <= 0xFFFFFFFFFFFFFFF5 && v82 + 10 <= v83)
          {
            char v85 = 0;
            unsigned int v86 = 0;
            uint64_t v87 = 0;
            do
            {
              unint64_t v88 = v82 + 1;
              *((void *)this + 1) = v82 + 1;
              char v89 = *(unsigned char *)(v84 + v82);
              v87 |= (unint64_t)(v89 & 0x7F) << v85;
              if ((v89 & 0x80) == 0) {
                goto LABEL_322;
              }
              v85 += 7;
              unint64_t v82 = v88;
              BOOL v14 = v86++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v87) = 0;
            goto LABEL_322;
          }
          char v167 = 0;
          unsigned int v168 = 0;
          uint64_t v87 = 0;
          if (v83 <= v82) {
            unint64_t v83 = *((void *)this + 1);
          }
          while (2)
          {
            if (v83 == v82)
            {
              LODWORD(v87) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v169 = v82 + 1;
              char v170 = *(unsigned char *)(v84 + v82);
              *((void *)this + 1) = v169;
              v87 |= (unint64_t)(v170 & 0x7F) << v167;
              if (v170 < 0)
              {
                v167 += 7;
                unint64_t v82 = v169;
                BOOL v14 = v168++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v87) = 0;
              }
            }
            break;
          }
LABEL_322:
          *(_DWORD *)(a1 + 76) = v87;
          goto LABEL_294;
        case 0x1Cu:
          *(void *)(a1 + 216) |= (unint64_t)&_mh_execute_header;
          unint64_t v90 = *((void *)this + 1);
          unint64_t v91 = *((void *)this + 2);
          uint64_t v92 = *(void *)this;
          if (v90 <= 0xFFFFFFFFFFFFFFF5 && v90 + 10 <= v91)
          {
            char v93 = 0;
            unsigned int v94 = 0;
            uint64_t v95 = 0;
            do
            {
              unint64_t v96 = v90 + 1;
              *((void *)this + 1) = v90 + 1;
              char v97 = *(unsigned char *)(v92 + v90);
              v95 |= (unint64_t)(v97 & 0x7F) << v93;
              if ((v97 & 0x80) == 0) {
                goto LABEL_326;
              }
              v93 += 7;
              unint64_t v90 = v96;
              BOOL v14 = v94++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v95) = 0;
            goto LABEL_326;
          }
          char v171 = 0;
          unsigned int v172 = 0;
          uint64_t v95 = 0;
          if (v91 <= v90) {
            unint64_t v91 = *((void *)this + 1);
          }
          while (2)
          {
            if (v91 == v90)
            {
              LODWORD(v95) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v173 = v90 + 1;
              char v174 = *(unsigned char *)(v92 + v90);
              *((void *)this + 1) = v173;
              v95 |= (unint64_t)(v174 & 0x7F) << v171;
              if (v174 < 0)
              {
                v171 += 7;
                unint64_t v90 = v173;
                BOOL v14 = v172++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v95) = 0;
              }
            }
            break;
          }
LABEL_326:
          *(_DWORD *)(a1 + 148) = v95;
          goto LABEL_294;
        case 0x1Du:
          *(void *)(a1 + 216) |= 0x1000000000uLL;
          unint64_t v98 = *((void *)this + 1);
          unint64_t v99 = *((void *)this + 2);
          uint64_t v100 = *(void *)this;
          if (v98 <= 0xFFFFFFFFFFFFFFF5 && v98 + 10 <= v99)
          {
            char v101 = 0;
            unsigned int v102 = 0;
            uint64_t v103 = 0;
            do
            {
              unint64_t v104 = v98 + 1;
              *((void *)this + 1) = v98 + 1;
              char v105 = *(unsigned char *)(v100 + v98);
              v103 |= (unint64_t)(v105 & 0x7F) << v101;
              if ((v105 & 0x80) == 0) {
                goto LABEL_330;
              }
              v101 += 7;
              unint64_t v98 = v104;
              BOOL v14 = v102++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v103) = 0;
            goto LABEL_330;
          }
          char v175 = 0;
          unsigned int v176 = 0;
          uint64_t v103 = 0;
          if (v99 <= v98) {
            unint64_t v99 = *((void *)this + 1);
          }
          while (2)
          {
            if (v99 == v98)
            {
              LODWORD(v103) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v177 = v98 + 1;
              char v178 = *(unsigned char *)(v100 + v98);
              *((void *)this + 1) = v177;
              v103 |= (unint64_t)(v178 & 0x7F) << v175;
              if (v178 < 0)
              {
                v175 += 7;
                unint64_t v98 = v177;
                BOOL v14 = v176++ > 8;
                if (v14) {
                  goto LABEL_270;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v103) = 0;
              }
            }
            break;
          }
LABEL_330:
          *(_DWORD *)(a1 + 164) = v103;
          goto LABEL_294;
        case 0x1Eu:
          *(void *)(a1 + 216) |= 0x100uLL;
          unint64_t v106 = *((void *)this + 1);
          unint64_t v107 = *((void *)this + 2);
          uint64_t v108 = *(void *)this;
          if (v106 <= 0xFFFFFFFFFFFFFFF5 && v106 + 10 <= v107)
          {
            char v109 = 0;
            unsigned int v110 = 0;
            uint64_t v111 = 0;
            do
            {
              unint64_t v112 = v106 + 1;
              *((void *)this + 1) = v106 + 1;
              char v113 = *(unsigned char *)(v108 + v106);
              v111 |= (unint64_t)(v113 & 0x7F) << v109;
              if ((v113 & 0x80) == 0) {
                goto LABEL_334;
              }
              v109 += 7;
              unint64_t v106 = v112;
              BOOL v14 = v110++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v111) = 0;
            goto LABEL_334;
          }
          char v179 = 0;
          unsigned int v180 = 0;
          uint64_t v111 = 0;
          if (v107 <= v106) {
            unint64_t v107 = *((void *)this + 1);
          }
          while (2)
          {
            if (v107 == v106)
            {
              LODWORD(v111) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v181 = v106 + 1;
              char v182 = *(unsigned char *)(v108 + v106);
              *((void *)this + 1) = v181;
              v111 |= (unint64_t)(v182 & 0x7F) << v179;
              if (v182 < 0)
              {
                v179 += 7;
                unint64_t v106 = v181;
                BOOL v14 = v180++ > 8;
                if (v14) {
                  goto LABEL_277;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v111) = 0;
              }
            }
            break;
          }
LABEL_334:
          *(_DWORD *)(a1 + 52) = v111;
          goto LABEL_294;
        case 0x1Fu:
          *(void *)(a1 + 216) |= 0x200000000uLL;
          unint64_t v114 = *((void *)this + 1);
          if (v114 > 0xFFFFFFFFFFFFFFFBLL || v114 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v114);
          goto LABEL_293;
        case 0x20u:
          *(void *)(a1 + 216) |= 0x800uLL;
          unint64_t v115 = *((void *)this + 1);
          if (v115 > 0xFFFFFFFFFFFFFFFBLL || v115 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v115);
          goto LABEL_293;
        case 0x21u:
          *(void *)(a1 + 216) |= 0x400uLL;
          unint64_t v116 = *((void *)this + 1);
          if (v116 > 0xFFFFFFFFFFFFFFFBLL || v116 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v116);
          goto LABEL_293;
        case 0x22u:
          *(void *)(a1 + 216) |= 0x200000uLL;
          unint64_t v117 = *((void *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v117);
          goto LABEL_293;
        case 0x23u:
          *(void *)(a1 + 216) |= 0x40000uLL;
          unint64_t v118 = *((void *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v118);
          goto LABEL_293;
        case 0x24u:
          *(void *)(a1 + 216) |= 0x20000000uLL;
          unint64_t v119 = *((void *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v119);
          goto LABEL_293;
        case 0x25u:
          *(void *)(a1 + 216) |= 0x800000000uLL;
          unint64_t v120 = *((void *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v120);
          goto LABEL_293;
        case 0x26u:
          *(void *)(a1 + 216) |= 0x400000000uLL;
          unint64_t v121 = *((void *)this + 1);
          if (v121 > 0xFFFFFFFFFFFFFFFBLL || v121 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v121);
          goto LABEL_293;
        case 0x27u:
          *(void *)(a1 + 216) |= 0x8000uLL;
          unint64_t v122 = *((void *)this + 1);
          unint64_t v123 = *((void *)this + 2);
          uint64_t v124 = *(void *)this;
          if (v122 <= 0xFFFFFFFFFFFFFFF5 && v122 + 10 <= v123)
          {
            char v125 = 0;
            unsigned int v126 = 0;
            uint64_t v127 = 0;
            do
            {
              unint64_t v128 = v122 + 1;
              *((void *)this + 1) = v122 + 1;
              char v129 = *(unsigned char *)(v124 + v122);
              v127 |= (unint64_t)(v129 & 0x7F) << v125;
              if ((v129 & 0x80) == 0) {
                goto LABEL_338;
              }
              v125 += 7;
              unint64_t v122 = v128;
              BOOL v14 = v126++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v127) = 0;
            goto LABEL_338;
          }
          char v183 = 0;
          unsigned int v184 = 0;
          uint64_t v127 = 0;
          if (v123 <= v122) {
            unint64_t v123 = *((void *)this + 1);
          }
          while (2)
          {
            if (v123 == v122)
            {
              LODWORD(v127) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v185 = v122 + 1;
              char v186 = *(unsigned char *)(v124 + v122);
              *((void *)this + 1) = v185;
              v127 |= (unint64_t)(v186 & 0x7F) << v183;
              if (v186 < 0)
              {
                v183 += 7;
                unint64_t v122 = v185;
                BOOL v14 = v184++ > 8;
                if (v14) {
                  goto LABEL_284;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v127) = 0;
              }
            }
            break;
          }
LABEL_338:
          *(_DWORD *)(a1 + 80) = v127;
          goto LABEL_294;
        case 0x28u:
          *(void *)(a1 + 216) |= 0x10000000uLL;
          unint64_t v130 = *((void *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v130);
          goto LABEL_293;
        case 0x29u:
          *(void *)(a1 + 216) |= 0x4000000uLL;
          unint64_t v131 = *((void *)this + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v131);
          goto LABEL_293;
        case 0x2Au:
          *(void *)(a1 + 216) |= 0x8000000uLL;
          unint64_t v132 = *((void *)this + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v132);
          goto LABEL_293;
        case 0x2Bu:
          *(void *)(a1 + 216) |= 0x20uLL;
          unint64_t v133 = *((void *)this + 1);
          if (v133 > 0xFFFFFFFFFFFFFFFBLL || v133 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v133);
          goto LABEL_293;
        case 0x2Cu:
          *(void *)(a1 + 216) |= 0x1000000uLL;
          unint64_t v134 = *((void *)this + 1);
          if (v134 > 0xFFFFFFFFFFFFFFFBLL || v134 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v134);
          goto LABEL_293;
        case 0x2Du:
          *(void *)(a1 + 216) |= 0x2000000uLL;
          unint64_t v135 = *((void *)this + 1);
          unint64_t v136 = *((void *)this + 2);
          uint64_t v137 = *(void *)this;
          if (v135 <= 0xFFFFFFFFFFFFFFF5 && v135 + 10 <= v136)
          {
            char v138 = 0;
            unsigned int v139 = 0;
            uint64_t v140 = 0;
            do
            {
              unint64_t v141 = v135 + 1;
              *((void *)this + 1) = v135 + 1;
              char v142 = *(unsigned char *)(v137 + v135);
              v140 |= (unint64_t)(v142 & 0x7F) << v138;
              if ((v142 & 0x80) == 0) {
                goto LABEL_342;
              }
              v138 += 7;
              unint64_t v135 = v141;
              BOOL v14 = v139++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v140) = 0;
            goto LABEL_342;
          }
          char v187 = 0;
          unsigned int v188 = 0;
          uint64_t v140 = 0;
          if (v136 <= v135) {
            unint64_t v136 = *((void *)this + 1);
          }
          break;
        case 0x2Eu:
          *(void *)(a1 + 216) |= 0x2000uLL;
          unint64_t v143 = *((void *)this + 1);
          if (v143 > 0xFFFFFFFFFFFFFFFBLL || v143 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v143);
          goto LABEL_293;
        case 0x2Fu:
          *(void *)(a1 + 216) |= 0x200uLL;
          unint64_t v144 = *((void *)this + 1);
          if (v144 > 0xFFFFFFFFFFFFFFFBLL || v144 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v144);
          goto LABEL_293;
        case 0x30u:
          *(void *)(a1 + 216) |= 0x400000uLL;
          unint64_t v145 = *((void *)this + 1);
          if (v145 > 0xFFFFFFFFFFFFFFFBLL || v145 + 4 > *((void *)this + 2)) {
            goto LABEL_214;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v145);
          goto LABEL_293;
        case 0x31u:
          *(void *)(a1 + 216) |= 8uLL;
          unint64_t v146 = *((void *)this + 1);
          if (v146 <= 0xFFFFFFFFFFFFFFFBLL && v146 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v146);
LABEL_293:
            *((void *)this + 1) += 4;
          }
          else
          {
LABEL_214:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_294;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_294;
      }
      while (1)
      {
        if (v136 == v135)
        {
          LODWORD(v140) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_342;
        }
        unint64_t v189 = v135 + 1;
        char v190 = *(unsigned char *)(v137 + v135);
        *((void *)this + 1) = v189;
        v140 |= (unint64_t)(v190 & 0x7F) << v187;
        if ((v190 & 0x80) == 0) {
          break;
        }
        v187 += 7;
        unint64_t v135 = v189;
        BOOL v14 = v188++ > 8;
        if (v14) {
          goto LABEL_291;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v140) = 0;
      }
LABEL_342:
      *(_DWORD *)(a1 + 120) = v140;
LABEL_294:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165503C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 216);
  if ((v4 & 0x80000000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(result + 144), 1u);
    uint64_t v4 = *(void *)(v3 + 216);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_53;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 2u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 4u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176), 5u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172), 6u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 192), 7u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 188), 8u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 208), 9u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 204), 0xAu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 180), 0xBu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 196), 0xCu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 212), 0xDu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0xEu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168), 0xFu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 184), 0x10u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_18:
    if ((v4 & 4) == 0) {
      goto LABEL_19;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 200), 0x11u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_19:
    if ((v4 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 0x12u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 0x13u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112), 0x14u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0x15u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x16u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0x17u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x80000) == 0)
  {
LABEL_25:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x18u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140), 0x19u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000) == 0)
  {
LABEL_27:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 68), 0x1Au);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_28:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 0x1Bu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 148), 0x1Cu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x100) == 0) {
      goto LABEL_31;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 164), 0x1Du);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_31:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 0x1Eu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x800) == 0) {
      goto LABEL_33;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152), 0x1Fu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800) == 0)
  {
LABEL_33:
    if ((v4 & 0x400) == 0) {
      goto LABEL_34;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0x20u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 0x21u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_35:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0x22u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x40000) == 0)
  {
LABEL_36:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0x23u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136), 0x24u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160), 0x25u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156), 0x26u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_40:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0x27u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132), 0x28u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124), 0x29u);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x20) == 0) {
      goto LABEL_44;
    }
    goto LABEL_93;
  }
LABEL_92:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128), 0x2Au);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_44:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_94;
  }
LABEL_93:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x2Bu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_95;
  }
LABEL_94:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116), 0x2Cu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_96;
  }
LABEL_95:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 120), 0x2Du);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_47:
    if ((v4 & 0x200) == 0) {
      goto LABEL_48;
    }
    goto LABEL_97;
  }
LABEL_96:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x2Eu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_48:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_49;
    }
LABEL_98:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x30u);
    if ((*(void *)(v3 + 216) & 8) == 0) {
      return result;
    }
    goto LABEL_99;
  }
LABEL_97:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0x2Fu);
  uint64_t v4 = *(void *)(v3 + 216);
  if ((v4 & 0x400000) != 0) {
    goto LABEL_98;
  }
LABEL_49:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_99:
  float v5 = *(float *)(v3 + 32);

  return PB::Writer::write(this, v5, 0x31u);
}

uint64_t sub_1016555D0(uint64_t result)
{
  *(void *)uint64_t result = &off_102332FB0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1016555F8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101655630(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_102332FB0;
  *(_DWORD *)(result + 44) = 0;
  char v2 = *(unsigned char *)(a2 + 44);
  if ((v2 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    char v3 = 2;
    *(unsigned char *)(result + 44) = 2;
    *(void *)(result + 16) = v4;
    char v2 = *(unsigned char *)(a2 + 44);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 44) & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(unsigned char *)(result + 44) = v3;
    *(void *)(result + 24) = v5;
    char v2 = *(unsigned char *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    v3 |= 8u;
    *(unsigned char *)(result + 44) = v3;
    *(void *)(result + 32) = v6;
    char v2 = *(unsigned char *)(a2 + 44);
    if ((v2 & 1) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        return result;
      }
LABEL_12:
      int v8 = *(_DWORD *)(a2 + 40);
      *(unsigned char *)(result + 44) = v3 | 0x10;
      *(_DWORD *)(result + 40) = v8;
      return result;
    }
  }
  else if ((v2 & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(unsigned char *)(result + 44) = v3;
  *(void *)(result + 8) = v7;
  if ((*(unsigned char *)(a2 + 44) & 0x10) != 0) {
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_1016556E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if (v5)
  {
    PB::TextFormatter::format(this, "aggAccelZDelta", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "arcLength", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "curveDistance", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "firstLoftAngleDeg", *(double *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 44) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "stepResult", *(_DWORD *)(a1 + 40));
LABEL_7:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016557CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 44) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 2u:
              *(unsigned char *)(a1 + 44) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 3u:
              *(unsigned char *)(a1 + 44) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_51;
            case 4u:
              *(unsigned char *)(a1 + 44) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_51:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_57;
            case 5u:
              *(unsigned char *)(a1 + 44) |= 0x10u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_55;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 40) = v25;
LABEL_57:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_57;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101655B34(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 2u);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 4u);
    if ((*(unsigned char *)(v3 + 44) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  char v4 = *(unsigned char *)(v3 + 44);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_11:
  int v5 = *(_DWORD *)(v3 + 40);

  return PB::Writer::writeVarInt(this, v5, 5u);
}

uint64_t sub_101655BF8(uint64_t result)
{
  *(void *)uint64_t result = &off_102332FE8;
  *(_DWORD *)(result + 176) = 0;
  return result;
}

void sub_101655C20(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_101655C58(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102332FE8;
  *(_DWORD *)(a1 + 176) = 0;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    int v3 = 8;
    *(_DWORD *)(a1 + 176) = 8;
    *(double *)(a1 + 32) = result;
    int v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 40) = result;
    int v2 = *(_DWORD *)(a2 + 176);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    double result = *(double *)(a2 + 48);
    v3 |= 0x20u;
    *(_DWORD *)(a1 + 176) = v3;
    *(double *)(a1 + 48) = result;
    int v2 = *(_DWORD *)(a2 + 176);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 56) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  double result = *(double *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 72) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x1000) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  double result = *(double *)(a2 + 104);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 104) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  double result = *(double *)(a2 + 120);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 120) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x8000) == 0)
  {
LABEL_12:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  double result = *(double *)(a2 + 128);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 128) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x2000) == 0)
  {
LABEL_13:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  double result = *(double *)(a2 + 112);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 112) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x10000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v5 = *(void *)(a2 + 136);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(void *)(a1 + 136) = v5;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x20000) == 0)
  {
LABEL_15:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t v6 = *(void *)(a2 + 144);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(void *)(a1 + 144) = v6;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x40000) == 0)
  {
LABEL_16:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t v7 = *(void *)(a2 + 152);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(void *)(a1 + 152) = v7;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80000) == 0)
  {
LABEL_17:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  double result = *(double *)(a2 + 160);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 160) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x100000) == 0)
  {
LABEL_18:
    if ((v2 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v8 = *(_DWORD *)(a2 + 168);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 176) = v3;
  *(_DWORD *)(a1 + 168) = v8;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x400) == 0)
  {
LABEL_19:
    if ((v2 & 2) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  double result = *(double *)(a2 + 88);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 88) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 2) == 0)
  {
LABEL_20:
    if ((v2 & 4) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  double result = *(double *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 16) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 4) == 0)
  {
LABEL_21:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 24) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x200000) == 0)
  {
LABEL_22:
    if ((v2 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a2 + 172);
  *(_DWORD *)(a1 + 176) = v3;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x80) == 0)
  {
LABEL_23:
    if ((v2 & 0x200) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 64) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 0x200) == 0)
  {
LABEL_24:
    if ((v2 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = *(double *)(a2 + 80);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 80) = result;
  int v2 = *(_DWORD *)(a2 + 176);
  if ((v2 & 1) == 0)
  {
LABEL_25:
    if ((v2 & 0x800) == 0) {
      return result;
    }
LABEL_46:
    double result = *(double *)(a2 + 96);
    *(_DWORD *)(a1 + 176) = v3 | 0x800;
    *(double *)(a1 + 96) = result;
    return result;
  }
LABEL_45:
  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(a1 + 176) = v3;
  *(double *)(a1 + 8) = result;
  if ((*(_DWORD *)(a2 + 176) & 0x800) != 0) {
    goto LABEL_46;
  }
  return result;
}

uint64_t sub_101655EE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 176);
  if (v5)
  {
    PB::TextFormatter::format(this, "cadenceDeviceIdentification", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cadenceUpdateTime", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100000) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "externalMachineType", *(_DWORD *)(a1 + 168));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "inclination", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "instantaneousCadence", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "instantaneousPower", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "instantaneousSpeed", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "powerMeterIdentification", *(_DWORD *)(a1 + 172));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "powerUpdateTime", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "resistanceLevel", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "speedDeviceIdentification", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "speedUpdateTime", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "totalDistance", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "totalElevationAscended", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "totalEnergy", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "totalFloorsClimbed", *(void *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "totalStrideCount", *(void *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(this, "totalStrokeCount", *(void *)(a1 + 152));
  if ((*(_DWORD *)(a1 + 176) & 0x80000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 160));
LABEL_24:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016561EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 176) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 2u:
              *(_DWORD *)(a1 + 176) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 3u:
              *(_DWORD *)(a1 + 176) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 4u:
              *(_DWORD *)(a1 + 176) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 5u:
              *(_DWORD *)(a1 + 176) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 6u:
              *(_DWORD *)(a1 + 176) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 7u:
              *(_DWORD *)(a1 + 176) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 8u:
              *(_DWORD *)(a1 + 176) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 9u:
              *(_DWORD *)(a1 + 176) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0xAu:
              *(_DWORD *)(a1 + 176) |= 0x10000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_155:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_155;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_156:
              *(void *)(a1 + 136) = v25;
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 176) |= 0x20000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_160:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_160;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_161:
              *(void *)(a1 + 144) = v31;
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 176) |= 0x40000u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_165:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_165;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_166:
              *(void *)(a1 + 152) = v37;
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 176) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0xEu:
              *(_DWORD *)(a1 + 176) |= 0x100000u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_171;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_170:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_170;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_171;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_171:
              *(_DWORD *)(a1 + 168) = v43;
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 176) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x10u:
              *(_DWORD *)(a1 + 176) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x11u:
              *(_DWORD *)(a1 + 176) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x12u:
              *(_DWORD *)(a1 + 176) |= 0x200000u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_175:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_175;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 172) = v49;
LABEL_147:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x13u:
              *(_DWORD *)(a1 + 176) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x14u:
              *(_DWORD *)(a1 + 176) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x15u:
              *(_DWORD *)(a1 + 176) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_109;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_146;
            case 0x16u:
              *(_DWORD *)(a1 + 176) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
LABEL_146:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_109:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_147;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_147;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101656C20(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 176);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32), 1u);
    int v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 3u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 4u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72), 5u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104), 6u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120), 7u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128), 8u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112), 9u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 136), 0xAu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 144), 0xBu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 152), 0xCu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160), 0xDu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 168), 0xEu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 2) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88), 0xFu);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 2) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 0x10u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_18:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 0x11u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200000) == 0)
  {
LABEL_19:
    if ((v4 & 0x80) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 172), 0x12u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_20:
    if ((v4 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 0x13u);
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_21:
    if ((v4 & 1) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 0x15u);
    if ((*(_DWORD *)(v3 + 176) & 0x800) == 0) {
      return result;
    }
    goto LABEL_45;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80), 0x14u);
  int v4 = *(_DWORD *)(v3 + 176);
  if (v4) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x800) == 0) {
    return result;
  }
LABEL_45:
  double v5 = *(double *)(v3 + 96);

  return PB::Writer::write(this, v5, 0x16u);
}

uint64_t sub_101656EC0(uint64_t result)
{
  *(void *)uint64_t result = &off_102333020;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_101656EE8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_101656F20(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102333020;
  *(_DWORD *)(a1 + 112) = 0;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 4) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    int v3 = 4;
    *(_DWORD *)(a1 + 112) = 4;
    *(void *)(a1 + 24) = v4;
    int v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 2) != 0)
  {
LABEL_5:
    uint64_t v4 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 112) = v3;
    *(void *)(a1 + 16) = v4;
    int v2 = *(_DWORD *)(a2 + 112);
  }
LABEL_6:
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    v3 |= 1u;
    *(_DWORD *)(a1 + 112) = v3;
    *(void *)(a1 + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 112);
    if ((v2 & 0x400) == 0)
    {
LABEL_8:
      if ((v2 & 0x400000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_30;
    }
  }
  else if ((v2 & 0x400) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 60);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x400000) == 0)
  {
LABEL_9:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  LODWORD(v4) = *(_DWORD *)(a2 + 108);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 108) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x2000) == 0)
  {
LABEL_10:
    if ((v2 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  LODWORD(v4) = *(_DWORD *)(a2 + 72);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 72) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x100) == 0)
  {
LABEL_11:
    if ((v2 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  LODWORD(v4) = *(_DWORD *)(a2 + 52);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 52) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x800) == 0)
  {
LABEL_12:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  int v5 = *(_DWORD *)(a2 + 64);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 64) = v5;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x100000) == 0)
  {
LABEL_13:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  int v6 = *(_DWORD *)(a2 + 100);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 100) = v6;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x200000) == 0)
  {
LABEL_14:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 104) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40000) == 0)
  {
LABEL_15:
    if ((v2 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  LODWORD(v4) = *(_DWORD *)(a2 + 92);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 92) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x80) == 0)
  {
LABEL_16:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  LODWORD(v4) = *(_DWORD *)(a2 + 48);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 48) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x10000) == 0)
  {
LABEL_17:
    if ((v2 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  LODWORD(v4) = *(_DWORD *)(a2 + 84);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 84) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20) == 0)
  {
LABEL_18:
    if ((v2 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  LODWORD(v4) = *(_DWORD *)(a2 + 40);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 40) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x200) == 0)
  {
LABEL_19:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  LODWORD(v4) = *(_DWORD *)(a2 + 56);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 56) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x1000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_42;
  }
LABEL_41:
  LODWORD(v4) = *(_DWORD *)(a2 + 68);
  v3 |= 0x1000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 68) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_43;
  }
LABEL_42:
  LODWORD(v4) = *(_DWORD *)(a2 + 96);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 96) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x20000) == 0)
  {
LABEL_22:
    if ((v2 & 0x40) == 0) {
      goto LABEL_23;
    }
    goto LABEL_44;
  }
LABEL_43:
  LODWORD(v4) = *(_DWORD *)(a2 + 88);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 88) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x40) == 0)
  {
LABEL_23:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_45;
  }
LABEL_44:
  LODWORD(v4) = *(_DWORD *)(a2 + 44);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 44) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x4000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_46;
  }
LABEL_45:
  LODWORD(v4) = *(_DWORD *)(a2 + 76);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 76) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_47;
  }
LABEL_46:
  LODWORD(v4) = *(_DWORD *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 32) = v4;
  int v2 = *(_DWORD *)(a2 + 112);
  if ((v2 & 0x8000) == 0)
  {
LABEL_26:
    if ((v2 & 0x10) == 0) {
      return *(float *)&v4;
    }
    goto LABEL_48;
  }
LABEL_47:
  LODWORD(v4) = *(_DWORD *)(a2 + 80);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 112) = v3;
  *(_DWORD *)(a1 + 80) = v4;
  if ((*(_DWORD *)(a2 + 112) & 0x10) == 0) {
    return *(float *)&v4;
  }
LABEL_48:
  LODWORD(v4) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 112) = v3 | 0x10;
  *(_DWORD *)(a1 + 36) = v4;
  return *(float *)&v4;
}

uint64_t sub_1016571D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "averageCadence", *(float *)(a1 + 32));
    int v5 = *(_DWORD *)(a1 + 112);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "averageHeartRate", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "averagePace", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "averagePower", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "averageSpeed", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "crossTrainerDistance", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "elapsedTime", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "elevationGain", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "energy", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "floors", *(_DWORD *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "indoorBikeDistance", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "instantaneousCadence", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "instantaneousHeartRate", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "instantaneousPace", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "instantaneousPower", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "instantaneousSpeed", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "resistanceLevel", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "stepCount", *(_DWORD *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 112);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_49:
  PB::TextFormatter::format(this, "strideCount", *(float *)(a1 + 104));
  if ((*(_DWORD *)(a1 + 112) & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(this, "treadmillDistance", *(float *)(a1 + 108));
LABEL_25:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016574F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 112) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_33;
            case 2u:
              *(_DWORD *)(a1 + 112) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_33;
            case 3u:
              *(_DWORD *)(a1 + 112) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_33:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_118;
            case 4u:
              *(_DWORD *)(a1 + 112) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 5u:
              *(_DWORD *)(a1 + 112) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 6u:
              *(_DWORD *)(a1 + 112) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 7u:
              *(_DWORD *)(a1 + 112) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 8u:
              *(_DWORD *)(a1 + 112) |= 0x800u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_128;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_127:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_128;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_127;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_128;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_128:
              *(_DWORD *)(a1 + 64) = v25;
              goto LABEL_119;
            case 9u:
              *(_DWORD *)(a1 + 112) |= 0x100000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_133;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_132:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_133;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_132;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_133;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_133:
              *(_DWORD *)(a1 + 100) = v31;
LABEL_119:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xAu:
              *(_DWORD *)(a1 + 112) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xBu:
              *(_DWORD *)(a1 + 112) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xCu:
              *(_DWORD *)(a1 + 112) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xDu:
              *(_DWORD *)(a1 + 112) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xEu:
              *(_DWORD *)(a1 + 112) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0xFu:
              *(_DWORD *)(a1 + 112) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x10u:
              *(_DWORD *)(a1 + 112) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x11u:
              *(_DWORD *)(a1 + 112) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x12u:
              *(_DWORD *)(a1 + 112) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x13u:
              *(_DWORD *)(a1 + 112) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x14u:
              *(_DWORD *)(a1 + 112) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x15u:
              *(_DWORD *)(a1 + 112) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x16u:
              *(_DWORD *)(a1 + 112) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_101;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_117;
            case 0x17u:
              *(_DWORD *)(a1 + 112) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_117:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_118:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_101:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_119;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101657D50(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 112);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    int v4 = *(_DWORD *)(v3 + 112);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 2u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 3u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x400000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 5u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x2000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 6u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 7u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 64), 8u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 100), 9u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xAu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0xBu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 0xCu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x10000) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0xDu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0xEu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 0xFu);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x1000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0x10u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x11u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0x12u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x40) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0x13u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x14u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
LABEL_46:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x16u);
    if ((*(_DWORD *)(v3 + 112) & 0x10) == 0) {
      return result;
    }
    goto LABEL_47;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 0x15u);
  int v4 = *(_DWORD *)(v3 + 112);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_46;
  }
LABEL_23:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_47:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(this, v5, 0x17u);
}

uint64_t sub_10165800C(uint64_t result)
{
  *(_DWORD *)(result + 48) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &off_102333058;
  return result;
}

void sub_101658034(PB::Base *this)
{
  *(void *)this = &off_102333058;
  uint64_t v4 = *((void *)this + 2);
  unint64_t v2 = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    sub_10068D784((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    sub_10068D784((uint64_t)this + 8, v5);
  }

  PB::Base::~Base(this);
}

void sub_1016580AC(PB::Base *a1)
{
  sub_101658034(a1);

  operator delete();
}

uint64_t sub_1016580E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = 0;
  *(void *)uint64_t result = &off_102333058;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 4) != 0)
  {
    int v4 = *(_DWORD *)(a2 + 36);
    *(unsigned char *)(result + 48) |= 4u;
    *(_DWORD *)(result + 36) = v4;
    char v2 = *(unsigned char *)(a2 + 48);
    if ((v2 & 2) == 0)
    {
LABEL_7:
      if ((v2 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  int v5 = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(result + 48) |= 2u;
  *(_DWORD *)(result + 32) = v5;
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 8) == 0)
  {
LABEL_8:
    if ((v2 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v6 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(result + 48) |= 8u;
  *(_DWORD *)(result + 40) = v6;
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 1) == 0) {
      return result;
    }
    goto LABEL_10;
  }
LABEL_15:
  char v7 = *(unsigned char *)(a2 + 44);
  *(unsigned char *)(result + 48) |= 0x10u;
  *(unsigned char *)(result + 44) = v7;
  if ((*(unsigned char *)(a2 + 48) & 1) == 0) {
    return result;
  }
LABEL_10:
  uint64_t v3 = *(void *)(a2 + 24);
  *(unsigned char *)(result + 48) |= 1u;
  *(void *)(result + 24) = v3;
  return result;
}

uint64_t sub_1016582BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "modeSemanticType", *(_DWORD *)(a1 + 32));
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_5:
      if ((v5 & 8) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 4) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "modeUpdateReason", *(_DWORD *)(a1 + 36));
  if ((*(unsigned char *)(a1 + 48) & 8) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "modeUpdateSource", *(_DWORD *)(a1 + 40));
LABEL_7:
  if (*(void *)(a1 + 16)) {
    PB::TextFormatter::format();
  }
  char v6 = *(unsigned char *)(a1 + 48);
  if ((v6 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "starting", *(unsigned char *)(a1 + 44));
    char v6 = *(unsigned char *)(a1 + 48);
  }
  if (v6) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016583C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          *(unsigned char *)(a1 + 48) |= 4u;
          unint64_t v21 = *((void *)this + 1);
          unint64_t v22 = *((void *)this + 2);
          uint64_t v23 = *(void *)this;
          if (v21 <= 0xFFFFFFFFFFFFFFF5 && v21 + 10 <= v22)
          {
            char v24 = 0;
            unsigned int v25 = 0;
            uint64_t v26 = 0;
            do
            {
              unint64_t v27 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              char v28 = *(unsigned char *)(v23 + v21);
              v26 |= (unint64_t)(v28 & 0x7F) << v24;
              if ((v28 & 0x80) == 0) {
                goto LABEL_79;
              }
              v24 += 7;
              unint64_t v21 = v27;
              BOOL v14 = v25++ > 8;
            }
            while (!v14);
LABEL_58:
            LODWORD(v26) = 0;
            goto LABEL_79;
          }
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)this + 1);
          }
          while (2)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v52 = v21 + 1;
              char v53 = *(unsigned char *)(v23 + v21);
              *((void *)this + 1) = v52;
              v26 |= (unint64_t)(v53 & 0x7F) << v50;
              if (v53 < 0)
              {
                v50 += 7;
                unint64_t v21 = v52;
                BOOL v14 = v51++ > 8;
                if (v14) {
                  goto LABEL_58;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v26) = 0;
              }
            }
            break;
          }
LABEL_79:
          *(_DWORD *)(a1 + 36) = v26;
          goto LABEL_88;
        case 4u:
          *(unsigned char *)(a1 + 48) |= 2u;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_83;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_65:
            LODWORD(v34) = 0;
            goto LABEL_83;
          }
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v56 = v29 + 1;
              char v57 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v56;
              v34 |= (unint64_t)(v57 & 0x7F) << v54;
              if (v57 < 0)
              {
                v54 += 7;
                unint64_t v29 = v56;
                BOOL v14 = v55++ > 8;
                if (v14) {
                  goto LABEL_65;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_83:
          *(_DWORD *)(a1 + 32) = v34;
          goto LABEL_88;
        case 5u:
          *(unsigned char *)(a1 + 48) |= 8u;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_87;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_72:
            LODWORD(v42) = 0;
            goto LABEL_87;
          }
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          break;
        case 6u:
          *(unsigned char *)(a1 + 48) |= 0x10u;
          unint64_t v45 = *((void *)this + 1);
          if (v45 >= *((void *)this + 2))
          {
            BOOL v48 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v46 = v45 + 1;
            int v47 = *(unsigned __int8 *)(*(void *)this + v45);
            *((void *)this + 1) = v46;
            BOOL v48 = v47 != 0;
          }
          *(unsigned char *)(a1 + 44) = v48;
          goto LABEL_88;
        case 7u:
          *(unsigned char *)(a1 + 48) |= 1u;
          unint64_t v49 = *((void *)this + 1);
          if (v49 <= 0xFFFFFFFFFFFFFFF7 && v49 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v49);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_88;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          goto LABEL_88;
      }
      while (1)
      {
        if (v38 == v37)
        {
          LODWORD(v42) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_87;
        }
        unint64_t v60 = v37 + 1;
        char v61 = *(unsigned char *)(v39 + v37);
        *((void *)this + 1) = v60;
        v42 |= (unint64_t)(v61 & 0x7F) << v58;
        if ((v61 & 0x80) == 0) {
          break;
        }
        v58 += 7;
        unint64_t v37 = v60;
        BOOL v14 = v59++ > 8;
        if (v14) {
          goto LABEL_72;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v42) = 0;
      }
LABEL_87:
      *(_DWORD *)(a1 + 40) = v42;
LABEL_88:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101658958(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = PB::Writer::write();
  }
  if (*(void *)(v3 + 16)) {
    uint64_t result = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 36), 3u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(v3 + 48) & 2) == 0)
  {
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 32), 4u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 44), 6u);
    if ((*(unsigned char *)(v3 + 48) & 1) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_9:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_15:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5, 7u);
}

double sub_101658A44(uint64_t a1)
{
  *(void *)a1 = &off_102333090;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_101658A78(PB::Base *this)
{
  *(void *)this = &off_102333090;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_101658AEC(PB::Base *a1)
{
  sub_101658A78(a1);

  operator delete();
}

uint64_t sub_101658B24(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102333090;
  *(_OWORD *)(a1 + 8) = 0u;
  char v4 = (char *)(a1 + 8);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*(unsigned char *)(a2 + 64))
  {
    uint64_t v5 = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = 1;
    *(void *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_1000FB43C(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_1000FB43C((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_101658BC8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(float **)(a1 + 8);
  char v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "freq", v7);
  }
  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "mag", v10);
  }
  if (*(unsigned char *)(a1 + 64)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }

  return PB::TextFormatter::endObject(this);
}

BOOL sub_101658C90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)this + 1);
          unint64_t v43 = *((void *)this + 2);
          while (v42 < v43 && !*((unsigned char *)this + 24))
          {
            unint64_t v45 = *(char **)(a1 + 16);
            unint64_t v44 = *(void *)(a1 + 24);
            if ((unint64_t)v45 >= v44)
            {
              int v47 = (char *)*v10;
              uint64_t v48 = (v45 - (unsigned char *)*v10) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_128;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unint64_t v52 = (char *)sub_10017EA34(v11, v51);
                int v47 = *(char **)(a1 + 8);
                unint64_t v45 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v52 = 0;
              }
              char v53 = &v52[4 * v48];
              *(_DWORD *)char v53 = 0;
              unint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(void *)(a1 + 8) = v53;
              *(void *)(a1 + 16) = v46;
              *(void *)(a1 + 24) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              unint64_t v46 = v45 + 4;
            }
            *(void *)(a1 + 16) = v46;
            unint64_t v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
            unint64_t v43 = *((void *)this + 2);
            unint64_t v42 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v42;
          }
          goto LABEL_83;
        }
        unint64_t v60 = *(char **)(a1 + 16);
        unint64_t v59 = *(void *)(a1 + 24);
        if ((unint64_t)v60 >= v59)
        {
          char v67 = (char *)*v10;
          uint64_t v68 = (v60 - (unsigned char *)*v10) >> 2;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62) {
LABEL_128:
          }
            sub_1001D7FD4();
          uint64_t v70 = v59 - (void)v67;
          if (v70 >> 1 > v69) {
            unint64_t v69 = v70 >> 1;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            unint64_t v72 = (char *)sub_10017EA34(v11, v71);
            char v67 = *(char **)(a1 + 8);
            unint64_t v60 = *(char **)(a1 + 16);
          }
          else
          {
            unint64_t v72 = 0;
          }
          unint64_t v75 = &v72[4 * v68];
          *(_DWORD *)unint64_t v75 = 0;
          char v58 = v75 + 4;
          while (v60 != v67)
          {
            int v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *(void *)(a1 + 8) = v75;
          *(void *)(a1 + 16) = v58;
          *(void *)(a1 + 24) = &v72[4 * v71];
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v60 = 0;
          char v58 = v60 + 4;
        }
        *(void *)(a1 + 16) = v58;
LABEL_114:
        unint64_t v77 = *((void *)this + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2))
        {
LABEL_116:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(void *)this + v77);
        uint64_t v27 = *((void *)this + 1) + 4;
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *(unsigned char *)(a1 + 64) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v26);
        uint64_t v27 = *((void *)this + 1) + 8;
LABEL_118:
        *((void *)this + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this, v25, v24, 0) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v28 = *((void *)this + 1);
      unint64_t v29 = *((void *)this + 2);
      while (v28 < v29 && !*((unsigned char *)this + 24))
      {
        uint64_t v31 = *(char **)(a1 + 40);
        unint64_t v30 = *(void *)(a1 + 48);
        if ((unint64_t)v31 >= v30)
        {
          unsigned int v33 = (char *)*v8;
          uint64_t v34 = (v31 - (unsigned char *)*v8) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            goto LABEL_127;
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            unint64_t v38 = (char *)sub_10017EA34(v9, v37);
            unsigned int v33 = *(char **)(a1 + 32);
            uint64_t v31 = *(char **)(a1 + 40);
          }
          else
          {
            unint64_t v38 = 0;
          }
          uint64_t v39 = &v38[4 * v34];
          *(_DWORD *)uint64_t v39 = 0;
          char v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(void *)(a1 + 32) = v39;
          *(void *)(a1 + 40) = v32;
          *(void *)(a1 + 48) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v31 = 0;
          char v32 = v31 + 4;
        }
        *(void *)(a1 + 40) = v32;
        unint64_t v41 = *((void *)this + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2))
        {
LABEL_82:
          *((unsigned char *)this + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
        unint64_t v29 = *((void *)this + 2);
        unint64_t v28 = *((void *)this + 1) + 4;
        *((void *)this + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    char v57 = *(char **)(a1 + 40);
    unint64_t v56 = *(void *)(a1 + 48);
    if ((unint64_t)v57 >= v56)
    {
      char v61 = (char *)*v8;
      uint64_t v62 = (v57 - (unsigned char *)*v8) >> 2;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62) {
LABEL_127:
      }
        sub_1001D7FD4();
      uint64_t v64 = v56 - (void)v61;
      if (v64 >> 1 > v63) {
        unint64_t v63 = v64 >> 1;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        char v66 = (char *)sub_10017EA34(v9, v65);
        char v61 = *(char **)(a1 + 32);
        char v57 = *(char **)(a1 + 40);
      }
      else
      {
        char v66 = 0;
      }
      unint64_t v73 = &v66[4 * v62];
      *(_DWORD *)unint64_t v73 = 0;
      char v58 = v73 + 4;
      while (v57 != v61)
      {
        int v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *(void *)(a1 + 32) = v73;
      *(void *)(a1 + 40) = v58;
      *(void *)(a1 + 48) = &v66[4 * v65];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *(_DWORD *)char v57 = 0;
      char v58 = v57 + 4;
    }
    *(void *)(a1 + 40) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_10165920C(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 64)) {
    double result = PB::Writer::write(this, *(double *)(result + 56), 1u);
  }
  int v4 = (float *)v3[1];
  uint64_t v5 = (float *)v3[2];
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6, 2u);
  }
  uint64_t v8 = (float *)v3[4];
  float v7 = (float *)v3[5];
  while (v8 != v7)
  {
    float v9 = *v8++;
    double result = PB::Writer::write(this, v9, 3u);
  }
  return result;
}

void *sub_101659290(void *result)
{
  *double result = &off_1023330C8;
  result[1] = 0;
  return result;
}

void sub_1016592B0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &off_1023330C8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_101659330(PB::Base *a1)
{
  sub_1016592B0(a1);

  operator delete();
}

void *sub_101659368(void *result, uint64_t a2)
{
  *double result = &off_1023330C8;
  result[1] = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_101659410(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165948C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this, v10 >> 3, v10 & 7, 0);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_101659688(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2, 1u);
  }
  return result;
}

uint64_t sub_1016596A4(uint64_t result)
{
  *(void *)uint64_t result = &off_102333100;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_1016596CC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_101659704(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102333100;
  *(_DWORD *)(a1 + 100) = 0;
  int v2 = *(_DWORD *)(a2 + 100);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    int v3 = 1;
    *(_DWORD *)(a1 + 100) = 1;
    *(void *)(a1 + 8) = v4;
    int v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 4) != 0)
  {
LABEL_5:
    uint64_t v5 = *(void *)(a2 + 24);
    v3 |= 4u;
    *(_DWORD *)(a1 + 100) = v3;
    *(void *)(a1 + 24) = v5;
    int v2 = *(_DWORD *)(a2 + 100);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v3 |= 2u;
    *(_DWORD *)(a1 + 100) = v3;
    *(void *)(a1 + 16) = v6;
    int v2 = *(_DWORD *)(a2 + 100);
    if ((v2 & 0x200) == 0)
    {
LABEL_8:
      if ((v2 & 0x10000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_31;
    }
  }
  else if ((v2 & 0x200) == 0)
  {
    goto LABEL_8;
  }
  float result = *(float *)(a2 + 60);
  v3 |= 0x200u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 60) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10000) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  float result = *(float *)(a2 + 88);
  v3 |= 0x10000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 88) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  float result = *(float *)(a2 + 48);
  v3 |= 0x40u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 48) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x4000) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  float result = *(float *)(a2 + 80);
  v3 |= 0x4000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 80) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  float result = *(float *)(a2 + 56);
  v3 |= 0x100u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 56) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x80) == 0)
  {
LABEL_13:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  float result = *(float *)(a2 + 52);
  v3 |= 0x80u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 52) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x2000) == 0)
  {
LABEL_14:
    if ((v2 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  float result = *(float *)(a2 + 76);
  v3 |= 0x2000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 76) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20) == 0)
  {
LABEL_15:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  float result = *(float *)(a2 + 44);
  v3 |= 0x20u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 44) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x8000) == 0)
  {
LABEL_16:
    if ((v2 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  float result = *(float *)(a2 + 84);
  v3 |= 0x8000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 84) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x400) == 0)
  {
LABEL_17:
    if ((v2 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  float result = *(float *)(a2 + 64);
  v3 |= 0x400u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 64) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x800000) == 0)
  {
LABEL_18:
    if ((v2 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  char v8 = *(unsigned char *)(a2 + 98);
  v3 |= 0x800000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(unsigned char *)(a1 + 98) = v8;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x800) == 0)
  {
LABEL_19:
    if ((v2 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  float result = *(float *)(a2 + 68);
  v3 |= 0x800u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 68) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x400000) == 0)
  {
LABEL_20:
    if ((v2 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  char v9 = *(unsigned char *)(a2 + 97);
  v3 |= 0x400000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(unsigned char *)(a1 + 97) = v9;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x80000) == 0)
  {
LABEL_21:
    if ((v2 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_44;
  }
LABEL_43:
  char v10 = *(unsigned char *)(a2 + 94);
  v3 |= 0x80000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(unsigned char *)(a1 + 94) = v10;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x40000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_45;
  }
LABEL_44:
  char v11 = *(unsigned char *)(a2 + 93);
  v3 |= 0x40000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(unsigned char *)(a1 + 93) = v11;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x100000) == 0)
  {
LABEL_23:
    if ((v2 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_46;
  }
LABEL_45:
  char v12 = *(unsigned char *)(a2 + 95);
  v3 |= 0x100000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(unsigned char *)(a1 + 95) = v12;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x10) == 0)
  {
LABEL_24:
    if ((v2 & 0x200000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_47;
  }
LABEL_46:
  float result = *(float *)(a2 + 40);
  v3 |= 0x10u;
  *(_DWORD *)(a1 + 100) = v3;
  *(float *)(a1 + 40) = result;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x200000) == 0)
  {
LABEL_25:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_48;
  }
LABEL_47:
  char v13 = *(unsigned char *)(a2 + 96);
  v3 |= 0x200000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(unsigned char *)(a1 + 96) = v13;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 0x20000) == 0)
  {
LABEL_26:
    if ((v2 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_49;
  }
LABEL_48:
  char v14 = *(unsigned char *)(a2 + 92);
  v3 |= 0x20000u;
  *(_DWORD *)(a1 + 100) = v3;
  *(unsigned char *)(a1 + 92) = v14;
  int v2 = *(_DWORD *)(a2 + 100);
  if ((v2 & 8) == 0)
  {
LABEL_27:
    if ((v2 & 0x1000) == 0) {
      return result;
    }
LABEL_50:
    float result = *(float *)(a2 + 72);
    *(_DWORD *)(a1 + 100) = v3 | 0x1000;
    *(float *)(a1 + 72) = result;
    return result;
  }
LABEL_49:
  uint64_t v15 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(a1 + 100) = v3;
  *(void *)(a1 + 32) = v15;
  if ((*(_DWORD *)(a2 + 100) & 0x1000) != 0) {
    goto LABEL_50;
  }
  return result;
}

uint64_t sub_1016599D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbabilityEstimate", *(float *)(a1 + 40));
    int v5 = *(_DWORD *)(a1 + 100);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "doubleSupportEstimate", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "horizontalRotationRateMax", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "impulseMagnitude", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "impulseStartTime", *(void *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x20000) == 0)
  {
LABEL_8:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "isCadenceConcordant", *(unsigned char *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x40000) == 0)
  {
LABEL_9:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isFeasibleWalkingSpeed", *(unsigned char *)(a1 + 93));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x80000) == 0)
  {
LABEL_10:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "isNotRunning", *(unsigned char *)(a1 + 94));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x100000) == 0)
  {
LABEL_11:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "isPendular", *(unsigned char *)(a1 + 95));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200000) == 0)
  {
LABEL_12:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "isSufficientVerticalTwist", *(unsigned char *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400000) == 0)
  {
LABEL_13:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "isSwingStanceCycle", *(unsigned char *)(a1 + 97));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "isValid", *(unsigned char *)(a1 + 98));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "loftEndTime", *(void *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x200) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "loftMagnitude", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "loftStartTime", *(void *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 8) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "pendulumResidual", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "previousImpulseStartTime", *(void *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "rawLoftSpeed", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "sqrtMaxAbsLoftAccel", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "stanceProbability", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "stepLengthEstimate", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 100);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_51:
  PB::TextFormatter::format(this, "verticalRotationRateMean", *(float *)(a1 + 84));
  if ((*(_DWORD *)(a1 + 100) & 0x10000) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(this, "walkSpeedEstimate", *(float *)(a1 + 88));
LABEL_26:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101659D14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 100) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_153;
                  }
                  unint64_t v61 = v20++;
                  char v62 = *(unsigned char *)(v21 + v61);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_152:
                unint64_t v2 = v61 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_153;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_153:
              *(void *)(a1 + 8) = v24;
              goto LABEL_169;
            case 2u:
              *(_DWORD *)(a1 + 100) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_158;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_157:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_158;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_157;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_158;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_158:
              *(void *)(a1 + 24) = v31;
              goto LABEL_169;
            case 3u:
              *(_DWORD *)(a1 + 100) |= 2u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_163;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_162:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_163;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_162;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_163;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_163:
              *(void *)(a1 + 16) = v37;
              goto LABEL_169;
            case 4u:
              *(_DWORD *)(a1 + 100) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 100) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 6u:
              *(_DWORD *)(a1 + 100) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 7u:
              *(_DWORD *)(a1 + 100) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 100) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 100) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xAu:
              *(_DWORD *)(a1 + 100) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xBu:
              *(_DWORD *)(a1 + 100) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xCu:
              *(_DWORD *)(a1 + 100) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xDu:
              *(_DWORD *)(a1 + 100) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0xEu:
              *(_DWORD *)(a1 + 100) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 98) = v40;
              goto LABEL_169;
            case 0xFu:
              *(_DWORD *)(a1 + 100) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0x10u:
              *(_DWORD *)(a1 + 100) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *(unsigned char *)(a1 + 97) = v42;
              goto LABEL_169;
            case 0x11u:
              *(_DWORD *)(a1 + 100) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *(unsigned char *)(a1 + 94) = v44;
              goto LABEL_169;
            case 0x12u:
              *(_DWORD *)(a1 + 100) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *(unsigned char *)(a1 + 93) = v46;
              goto LABEL_169;
            case 0x13u:
              *(_DWORD *)(a1 + 100) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 95) = v48;
              goto LABEL_169;
            case 0x14u:
              *(_DWORD *)(a1 + 100) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_104;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 100) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *(unsigned char *)(a1 + 96) = v50;
              goto LABEL_169;
            case 0x16u:
              *(_DWORD *)(a1 + 100) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v52 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v52 = v51 != 0;
              }
              *(unsigned char *)(a1 + 92) = v52;
              goto LABEL_169;
            case 0x17u:
              *(_DWORD *)(a1 + 100) |= 8u;
              unint64_t v53 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_168;
                  }
                  unint64_t v73 = v53++;
                  char v74 = *(unsigned char *)(v54 + v73);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0;
LABEL_167:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_168;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v57 = 0;
                }
                goto LABEL_167;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_168;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              uint64_t v57 = 0;
LABEL_168:
              *(void *)(a1 + 32) = v57;
LABEL_169:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x18u:
              *(_DWORD *)(a1 + 100) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
LABEL_148:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_104:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_169;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_169;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10165A760(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 100);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(result + 8), 1u);
    int v4 = *(_DWORD *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 2u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 3u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60), 4u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 5u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 6u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 7u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56), 8u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52), 9u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0xAu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 0xBu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x8000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0xCu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64), 0xDu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 98), 0xEu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68), 0xFu);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 97), 0x10u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x80000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 94), 0x11u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 93), 0x12u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x100000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 95), 0x13u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 0x14u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 96), 0x15u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 0x20000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
LABEL_48:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0x17u);
    if ((*(_DWORD *)(v3 + 100) & 0x1000) == 0) {
      return result;
    }
    goto LABEL_49;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 92), 0x16u);
  int v4 = *(_DWORD *)(v3 + 100);
  if ((v4 & 8) != 0) {
    goto LABEL_48;
  }
LABEL_24:
  if ((v4 & 0x1000) == 0) {
    return result;
  }
LABEL_49:
  float v5 = *(float *)(v3 + 72);

  return PB::Writer::write(this, v5, 0x18u);
}

uint64_t sub_10165AA38(uint64_t result)
{
  *(void *)uint64_t result = &off_102333138;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_10165AA60(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_10165AA98(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_102333138;
  *(_DWORD *)(result + 116) = 0;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x80) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    int v3 = 128;
    *(_DWORD *)(result + 116) = 128;
    *(void *)(result + 64) = v4;
    int v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v3 = 0;
  if ((v2 & 0x100000) != 0)
  {
LABEL_5:
    char v5 = *(unsigned char *)(a2 + 114);
    v3 |= 0x100000u;
    *(_DWORD *)(result + 116) = v3;
    *(unsigned char *)(result + 114) = v5;
    int v2 = *(_DWORD *)(a2 + 116);
  }
LABEL_6:
  if ((v2 & 0x80000) != 0)
  {
    char v6 = *(unsigned char *)(a2 + 113);
    v3 |= 0x80000u;
    *(_DWORD *)(result + 116) = v3;
    *(unsigned char *)(result + 113) = v6;
    int v2 = *(_DWORD *)(a2 + 116);
    if ((v2 & 0x200000) == 0)
    {
LABEL_8:
      if ((v2 & 0x40000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_29;
    }
  }
  else if ((v2 & 0x200000) == 0)
  {
    goto LABEL_8;
  }
  char v7 = *(unsigned char *)(a2 + 115);
  v3 |= 0x200000u;
  *(_DWORD *)(result + 116) = v3;
  *(unsigned char *)(result + 115) = v7;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40000) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  char v8 = *(unsigned char *)(a2 + 112);
  v3 |= 0x40000u;
  *(_DWORD *)(result + 116) = v3;
  *(unsigned char *)(result + 112) = v8;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t v9 = *(void *)(a2 + 24);
  v3 |= 4u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 24) = v9;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 2) == 0)
  {
LABEL_11:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t v10 = *(void *)(a2 + 16);
  v3 |= 2u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 16) = v10;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 1) == 0)
  {
LABEL_12:
    if ((v2 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v11 = *(void *)(a2 + 8);
  v3 |= 1u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 8) = v11;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20) == 0)
  {
LABEL_13:
    if ((v2 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t v12 = *(void *)(a2 + 48);
  v3 |= 0x20u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 48) = v12;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x40) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t v13 = *(void *)(a2 + 56);
  v3 |= 0x40u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 56) = v13;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  int v14 = *(_DWORD *)(a2 + 92);
  v3 |= 0x2000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 92) = v14;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x10000) == 0)
  {
LABEL_16:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  int v15 = *(_DWORD *)(a2 + 104);
  v3 |= 0x10000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 104) = v15;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x1000) == 0)
  {
LABEL_17:
    if ((v2 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  int v16 = *(_DWORD *)(a2 + 88);
  v3 |= 0x1000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 88) = v16;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x800) == 0)
  {
LABEL_18:
    if ((v2 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  int v17 = *(_DWORD *)(a2 + 84);
  v3 |= 0x800u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 84) = v17;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x8000) == 0)
  {
LABEL_19:
    if ((v2 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_39:
  int v18 = *(_DWORD *)(a2 + 100);
  v3 |= 0x8000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 100) = v18;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x200) == 0)
  {
LABEL_20:
    if ((v2 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_41;
  }
LABEL_40:
  int v19 = *(_DWORD *)(a2 + 76);
  v3 |= 0x200u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 76) = v19;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x400) == 0)
  {
LABEL_21:
    if ((v2 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_42;
  }
LABEL_41:
  int v20 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 80) = v20;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x4000) == 0)
  {
LABEL_22:
    if ((v2 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_43;
  }
LABEL_42:
  int v21 = *(_DWORD *)(a2 + 96);
  v3 |= 0x4000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 96) = v21;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x100) == 0)
  {
LABEL_23:
    if ((v2 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_44;
  }
LABEL_43:
  int v22 = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 72) = v22;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 0x20000) == 0)
  {
LABEL_24:
    if ((v2 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_45;
  }
LABEL_44:
  int v23 = *(_DWORD *)(a2 + 108);
  v3 |= 0x20000u;
  *(_DWORD *)(result + 116) = v3;
  *(_DWORD *)(result + 108) = v23;
  int v2 = *(_DWORD *)(a2 + 116);
  if ((v2 & 8) == 0)
  {
LABEL_25:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_46:
    uint64_t v25 = *(void *)(a2 + 40);
    *(_DWORD *)(result + 116) = v3 | 0x10;
    *(void *)(result + 40) = v25;
    return result;
  }
LABEL_45:
  uint64_t v24 = *(void *)(a2 + 32);
  v3 |= 8u;
  *(_DWORD *)(result + 116) = v3;
  *(void *)(result + 32) = v24;
  if ((*(_DWORD *)(a2 + 116) & 0x10) != 0) {
    goto LABEL_46;
  }
  return result;
}

uint64_t sub_10165AD2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 116);
  if (v5)
  {
    PB::TextFormatter::format(this, "curImpulseStartTime", *(void *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "curLoftEndTime", *(void *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "curLoftStartTime", *(void *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "currentCadence", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "currentHorzRotRateMax", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "currentImpulseMagnitude", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "currentLoftMagnitude", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "currentMax", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "currentMin", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "currentWalkSpeedEstimate", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "firstLoft", *(unsigned char *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "impulseStartTimeWalkingSpeed", *(void *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_14:
    if ((v5 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "impulseStopTimeWalkingSpeed", *(void *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "lastZeroTime", *(void *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "loftEndDetected", *(unsigned char *)(a1 + 113));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "loftStartDetected", *(unsigned char *)(a1 + 114));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "prevLoftStartTime", *(void *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_19:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "previousHorzRotRateMax", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "previousMax", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(this, "vertRotationRateMean", *(float *)(a1 + 108));
  if ((*(_DWORD *)(a1 + 116) & 0x200000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "waitingToConfirmLoft", *(unsigned char *)(a1 + 115));
LABEL_24:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165B030(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 116) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_173;
            case 2u:
              *(_DWORD *)(a1 + 116) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 114) = v22;
              goto LABEL_209;
            case 3u:
              *(_DWORD *)(a1 + 116) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *(unsigned char *)(a1 + 113) = v24;
              goto LABEL_209;
            case 4u:
              *(_DWORD *)(a1 + 116) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *(unsigned char *)(a1 + 115) = v26;
              goto LABEL_209;
            case 5u:
              *(_DWORD *)(a1 + 116) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 112) = v28;
              goto LABEL_209;
            case 6u:
              *(_DWORD *)(a1 + 116) |= 4u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    uint64_t v33 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_178;
                  }
                  unint64_t v73 = v29++;
                  char v74 = *(unsigned char *)(v30 + v73);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    uint64_t v33 = 0;
LABEL_177:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_178;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v33 = 0;
                }
                goto LABEL_177;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_178;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              uint64_t v33 = 0;
LABEL_178:
              *(void *)(a1 + 24) = v33;
              goto LABEL_209;
            case 7u:
              *(_DWORD *)(a1 + 116) |= 2u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    uint64_t v39 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_183;
                  }
                  unint64_t v77 = v35++;
                  char v78 = *(unsigned char *)(v36 + v77);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    uint64_t v39 = 0;
LABEL_182:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_183;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v39 = 0;
                }
                goto LABEL_182;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_183;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              uint64_t v39 = 0;
LABEL_183:
              *(void *)(a1 + 16) = v39;
              goto LABEL_209;
            case 8u:
              *(_DWORD *)(a1 + 116) |= 1u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    uint64_t v45 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_188;
                  }
                  unint64_t v81 = v41++;
                  char v82 = *(unsigned char *)(v42 + v81);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    uint64_t v45 = 0;
LABEL_187:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_188;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v45 = 0;
                }
                goto LABEL_187;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_188;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              uint64_t v45 = 0;
LABEL_188:
              *(void *)(a1 + 8) = v45;
              goto LABEL_209;
            case 9u:
              *(_DWORD *)(a1 + 116) |= 0x20u;
              unint64_t v47 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    uint64_t v51 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_193;
                  }
                  unint64_t v85 = v47++;
                  char v86 = *(unsigned char *)(v48 + v85);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    uint64_t v51 = 0;
LABEL_192:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_193;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v51 = 0;
                }
                goto LABEL_192;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_193;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              uint64_t v51 = 0;
LABEL_193:
              *(void *)(a1 + 48) = v51;
              goto LABEL_209;
            case 0xAu:
              *(_DWORD *)(a1 + 116) |= 0x40u;
              unint64_t v53 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    uint64_t v57 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_198;
                  }
                  unint64_t v89 = v53++;
                  char v90 = *(unsigned char *)(v54 + v89);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    uint64_t v57 = 0;
LABEL_197:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_198;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v57 = 0;
                }
                goto LABEL_197;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_198;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              uint64_t v57 = 0;
LABEL_198:
              *(void *)(a1 + 56) = v57;
              goto LABEL_209;
            case 0xBu:
              *(_DWORD *)(a1 + 116) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xCu:
              *(_DWORD *)(a1 + 116) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xDu:
              *(_DWORD *)(a1 + 116) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xEu:
              *(_DWORD *)(a1 + 116) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0xFu:
              *(_DWORD *)(a1 + 116) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x10u:
              *(_DWORD *)(a1 + 116) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x11u:
              *(_DWORD *)(a1 + 116) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x12u:
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x13u:
              *(_DWORD *)(a1 + 116) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_99;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_172;
            case 0x14u:
              *(_DWORD *)(a1 + 116) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
LABEL_172:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_173:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_99:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_209;
            case 0x15u:
              *(_DWORD *)(a1 + 116) |= 8u;
              unint64_t v59 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v60 = *(void *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                char v91 = 0;
                unsigned int v92 = 0;
                uint64_t v63 = 0;
                if (v2 <= v59) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v59)
                  {
                    uint64_t v63 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_203;
                  }
                  unint64_t v93 = v59++;
                  char v94 = *(unsigned char *)(v60 + v93);
                  *((void *)this + 1) = v59;
                  v63 |= (unint64_t)(v94 & 0x7F) << v91;
                  if ((v94 & 0x80) == 0) {
                    break;
                  }
                  v91 += 7;
                  BOOL v14 = v92++ > 8;
                  if (v14)
                  {
                    uint64_t v63 = 0;
LABEL_202:
                    unint64_t v2 = v93 + 1;
                    goto LABEL_203;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v63 = 0;
                }
                goto LABEL_202;
              }
              char v61 = 0;
              unsigned int v62 = 0;
              uint64_t v63 = 0;
              do
              {
                unint64_t v2 = v59 + 1;
                *((void *)this + 1) = v59 + 1;
                char v64 = *(unsigned char *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0) {
                  goto LABEL_203;
                }
                v61 += 7;
                unint64_t v59 = v2;
                BOOL v14 = v62++ > 8;
              }
              while (!v14);
              uint64_t v63 = 0;
LABEL_203:
              *(void *)(a1 + 32) = v63;
              goto LABEL_209;
            case 0x16u:
              *(_DWORD *)(a1 + 116) |= 0x10u;
              unint64_t v65 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v66 = *(void *)this;
              if (v65 > 0xFFFFFFFFFFFFFFF5 || v65 + 10 > v2)
              {
                char v95 = 0;
                unsigned int v96 = 0;
                uint64_t v69 = 0;
                if (v2 <= v65) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v65)
                  {
                    uint64_t v69 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_208;
                  }
                  unint64_t v97 = v65++;
                  char v98 = *(unsigned char *)(v66 + v97);
                  *((void *)this + 1) = v65;
                  v69 |= (unint64_t)(v98 & 0x7F) << v95;
                  if ((v98 & 0x80) == 0) {
                    break;
                  }
                  v95 += 7;
                  BOOL v14 = v96++ > 8;
                  if (v14)
                  {
                    uint64_t v69 = 0;
LABEL_207:
                    unint64_t v2 = v97 + 1;
                    goto LABEL_208;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v69 = 0;
                }
                goto LABEL_207;
              }
              char v67 = 0;
              unsigned int v68 = 0;
              uint64_t v69 = 0;
              do
              {
                unint64_t v2 = v65 + 1;
                *((void *)this + 1) = v65 + 1;
                char v70 = *(unsigned char *)(v66 + v65);
                v69 |= (unint64_t)(v70 & 0x7F) << v67;
                if ((v70 & 0x80) == 0) {
                  goto LABEL_208;
                }
                v67 += 7;
                unint64_t v65 = v2;
                BOOL v14 = v68++ > 8;
              }
              while (!v14);
              uint64_t v69 = 0;
LABEL_208:
              *(void *)(a1 + 40) = v69;
LABEL_209:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_209;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10165BC04(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64), 1u);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 114), 2u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_4:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 113), 3u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 115), 4u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 112), 5u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 24), 6u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 16), 7u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 8), 8u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 48), 9u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 56), 0xAu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92), 0xBu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104), 0xCu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88), 0xDu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84), 0xEu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100), 0xFu);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76), 0x10u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80), 0x11u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96), 0x12u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72), 0x13u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    uint64_t result = PB::Writer::writeVarInt(this, *(void *)(v3 + 32), 0x15u);
    if ((*(_DWORD *)(v3 + 116) & 0x10) == 0) {
      return result;
    }
    goto LABEL_45;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108), 0x14u);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) != 0) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_45:
  unint64_t v5 = *(void *)(v3 + 40);

  return PB::Writer::writeVarInt(this, v5, 0x16u);
}

uint64_t sub_10165BEA4(uint64_t result)
{
  *(void *)uint64_t result = &off_102333170;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

void sub_10165BECC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10165BF04(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102333170;
  *(_DWORD *)(a1 + 76) = 0;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 4) != 0)
  {
    double result = *(double *)(a2 + 24);
    __int16 v3 = 4;
    *(_WORD *)(a1 + 76) = 4;
    *(double *)(a1 + 24) = result;
    __int16 v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    double result = *(double *)(a2 + 40);
    v3 |= 0x10u;
    *(_WORD *)(a1 + 76) = v3;
    *(double *)(a1 + 40) = result;
    __int16 v2 = *(_WORD *)(a2 + 76);
  }
LABEL_6:
  if ((v2 & 8) != 0)
  {
    double result = *(double *)(a2 + 32);
    v3 |= 8u;
    *(_WORD *)(a1 + 76) = v3;
    *(double *)(a1 + 32) = result;
    __int16 v2 = *(_WORD *)(a2 + 76);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 48) = result;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 1) == 0)
  {
LABEL_9:
    if ((v2 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_17:
  double result = *(double *)(a2 + 8);
  v3 |= 1u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 8) = result;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x80) == 0)
  {
LABEL_10:
    if ((v2 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }
LABEL_18:
  double result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 64) = result;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x40) == 0)
  {
LABEL_11:
    if ((v2 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_20;
  }
LABEL_19:
  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 76) = v3;
  *(double *)(a1 + 56) = result;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x200) == 0)
  {
LABEL_12:
    if ((v2 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  char v5 = *(unsigned char *)(a2 + 73);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 76) = v3;
  *(unsigned char *)(a1 + 73) = v5;
  __int16 v2 = *(_WORD *)(a2 + 76);
  if ((v2 & 0x100) == 0)
  {
LABEL_13:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_22:
    double result = *(double *)(a2 + 16);
    *(_WORD *)(a1 + 76) = v3 | 2;
    *(double *)(a1 + 16) = result;
    return result;
  }
LABEL_21:
  char v6 = *(unsigned char *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 76) = v3;
  *(unsigned char *)(a1 + 72) = v6;
  if ((*(_WORD *)(a2 + 76) & 2) != 0) {
    goto LABEL_22;
  }
  return result;
}

uint64_t sub_10165C048(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 76);
  if (v5)
  {
    PB::TextFormatter::format(this, "emptyField2", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(a1 + 76) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "emptyField3", *(unsigned char *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "hasValidGroundContactTime", *(unsigned char *)(a1 + 73));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "leftGroundContactTime", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "leftGroundContactTimePercentage", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "rightGroundContactTime", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "rightGroundContactTimePercentage", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
  if ((*(_WORD *)(a1 + 76) & 0x80) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
LABEL_12:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165C1CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 2u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 3u:
          *(_WORD *)(a1 + 76) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 4u:
          *(_WORD *)(a1 + 76) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 5u:
          *(_WORD *)(a1 + 76) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 6u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_57;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *(unsigned char *)(a1 + 73) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v24 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v24 = v23 != 0;
          }
          *(unsigned char *)(a1 + 72) = v24;
          break;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_49:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_57:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165C5C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 76);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24), 1u);
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 2u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 3u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 4u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 5u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 6u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 7u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 72), 9u);
    if ((*(_WORD *)(v3 + 76) & 2) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 73), 8u);
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_21:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5, 0xAu);
}

uint64_t sub_10165C714(uint64_t result)
{
  *(void *)uint64_t result = &off_1023331A8;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_10165C73C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10165C774(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1023331A8;
  *(_DWORD *)(a1 + 88) = 0;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x800) != 0)
  {
    char v4 = *(unsigned char *)(a2 + 84);
    __int16 v3 = 2048;
    *(_WORD *)(a1 + 88) = 2048;
    *(unsigned char *)(a1 + 84) = v4;
    __int16 v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if (v2)
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(_WORD *)(a1 + 88) = v3;
    *(double *)(a1 + 16) = result;
    __int16 v2 = *(_WORD *)(a2 + 88);
    if ((v2 & 0x20) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_21;
    }
  }
  else if ((v2 & 0x20) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 48);
  v3 |= 0x20u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 48) = result;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = *(double *)(a2 + 32);
  v3 |= 8u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 32) = result;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x10) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = *(double *)(a2 + 40);
  v3 |= 0x10u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 40) = result;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  double result = *(double *)(a2 + 64);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 64) = result;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x40) == 0)
  {
LABEL_12:
    if ((v2 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  double result = *(double *)(a2 + 56);
  v3 |= 0x40u;
  *(_WORD *)(a1 + 88) = v3;
  *(double *)(a1 + 56) = result;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x200) == 0)
  {
LABEL_13:
    if ((v2 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  int v6 = *(_DWORD *)(a2 + 76);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 76) = v6;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x1000) == 0)
  {
LABEL_14:
    if ((v2 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  char v7 = *(unsigned char *)(a2 + 85);
  v3 |= 0x1000u;
  *(_WORD *)(a1 + 88) = v3;
  *(unsigned char *)(a1 + 85) = v7;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x2000) == 0)
  {
LABEL_15:
    if ((v2 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
LABEL_27:
  char v8 = *(unsigned char *)(a2 + 86);
  v3 |= 0x2000u;
  *(_WORD *)(a1 + 88) = v3;
  *(unsigned char *)(a1 + 86) = v8;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x400) == 0)
  {
LABEL_16:
    if ((v2 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v9 = *(_DWORD *)(a2 + 80);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 80) = v9;
  __int16 v2 = *(_WORD *)(a2 + 88);
  if ((v2 & 0x100) == 0)
  {
LABEL_17:
    if ((v2 & 4) == 0) {
      return result;
    }
LABEL_30:
    double result = *(double *)(a2 + 24);
    *(_WORD *)(a1 + 88) = v3 | 4;
    *(double *)(a1 + 24) = result;
    return result;
  }
LABEL_29:
  int v10 = *(_DWORD *)(a2 + 72);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 88) = v3;
  *(_DWORD *)(a1 + 72) = v10;
  if ((*(_WORD *)(a2 + 88) & 4) != 0) {
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_10165C928(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) != 0)
  {
    PB::TextFormatter::format(this, "crownOrientation", *(_DWORD *)(a1 + 72));
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isSuccessful", *(unsigned char *)(a1 + 84));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "isValidSide", *(unsigned char *)(a1 + 85));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "isValidToeOff", *(unsigned char *)(a1 + 86));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "meanRotationZ", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "relativeInitialContactTime", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "relativeToeOffTime", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "stepSide", *(_DWORD *)(a1 + 76));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "windowEndTime", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "wristOrientation", *(_DWORD *)(a1 + 80));
LABEL_16:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165CB2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *(unsigned char *)(a1 + 84) = v21;
              goto LABEL_119;
            case 2u:
              *(_WORD *)(a1 + 88) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 3u:
              *(_WORD *)(a1 + 88) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 88) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 88) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 9u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v47 = v23++;
                  char v48 = *(unsigned char *)(v24 + v47);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_107:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_107;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 76) = v27;
              goto LABEL_119;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 85) = v30;
              goto LABEL_119;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *(unsigned char *)(a1 + 86) = v32;
              goto LABEL_119;
            case 0xCu:
              *(_WORD *)(a1 + 88) |= 0x400u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  unint64_t v51 = v33++;
                  char v52 = *(unsigned char *)(v34 + v51);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_112:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_112;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 80) = v37;
              goto LABEL_119;
            case 0xDu:
              *(_WORD *)(a1 + 88) |= 0x100u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  unint64_t v55 = v39++;
                  char v56 = *(unsigned char *)(v40 + v55);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_117:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_117;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 72) = v43;
LABEL_119:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 88) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_103:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_74:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_119;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10165D23C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(result + 84), 1u);
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48), 4u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32), 5u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40), 6u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64), 7u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56), 8u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 76), 9u);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 85), 0xAu);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 86), 0xBu);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 72), 0xDu);
    if ((*(_WORD *)(v3 + 88) & 4) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 80), 0xCu);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5, 0xEu);
}

uint64_t sub_10165D3FC(uint64_t result)
{
  *(void *)uint64_t result = &off_1023331E0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_10165D424(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10165D45C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1023331E0;
  *(_DWORD *)(a1 + 48) = 0;
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 0x20) != 0)
  {
    char v4 = *(unsigned char *)(a2 + 44);
    char v3 = 32;
    *(unsigned char *)(a1 + 48) = 32;
    *(unsigned char *)(a1 + 44) = v4;
    char v2 = *(unsigned char *)(a2 + 48);
    if ((v2 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if (*(unsigned char *)(a2 + 48))
  {
LABEL_5:
    double result = *(double *)(a2 + 8);
    v3 |= 1u;
    *(unsigned char *)(a1 + 48) = v3;
    *(double *)(a1 + 8) = result;
    char v2 = *(unsigned char *)(a2 + 48);
  }
LABEL_6:
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    v3 |= 2u;
    *(unsigned char *)(a1 + 48) = v3;
    *(double *)(a1 + 16) = result;
    char v2 = *(unsigned char *)(a2 + 48);
    if ((v2 & 4) == 0)
    {
LABEL_8:
      if ((v2 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else if ((v2 & 4) == 0)
  {
    goto LABEL_8;
  }
  double result = *(double *)(a2 + 24);
  v3 |= 4u;
  *(unsigned char *)(a1 + 48) = v3;
  *(double *)(a1 + 24) = result;
  char v2 = *(unsigned char *)(a2 + 48);
  if ((v2 & 0x10) == 0)
  {
LABEL_9:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_14:
    double result = *(double *)(a2 + 32);
    *(unsigned char *)(a1 + 48) = v3 | 8;
    *(double *)(a1 + 32) = result;
    return result;
  }
LABEL_13:
  int v6 = *(_DWORD *)(a2 + 40);
  v3 |= 0x10u;
  *(unsigned char *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 40) = v6;
  if ((*(unsigned char *)(a2 + 48) & 8) != 0) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_10165D530(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 48);
  if (v5)
  {
    PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "initialContactTime", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "isSuccessful", *(unsigned char *)(a1 + 44));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "stepSide", *(_DWORD *)(a1 + 40));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "toeOffTime", *(double *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 48) & 8) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "windowStartTime", *(double *)(a1 + 32));
LABEL_8:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165D634(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 48) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v21 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *(unsigned char *)(a1 + 44) = v21;
              goto LABEL_61;
            case 2u:
              *(unsigned char *)(a1 + 48) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_55;
            case 3u:
              *(unsigned char *)(a1 + 48) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_55;
            case 4u:
              *(unsigned char *)(a1 + 48) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_55;
            case 5u:
              *(unsigned char *)(a1 + 48) |= 0x10u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_60;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_59:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_59;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_60;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 40) = v27;
LABEL_61:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(unsigned char *)(a1 + 48) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_55:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_44:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_61;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_61;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10165D9E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 48);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(result + 44), 1u);
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 48) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8), 2u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 40), 5u);
    if ((*(unsigned char *)(v3 + 48) & 8) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(this, v5, 6u);
}

uint64_t sub_10165DAC4(uint64_t result)
{
  *(void *)uint64_t result = &off_102333218;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_10165DAEC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_10165DB24(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102333218;
  *(_DWORD *)(a1 + 52) = 0;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x20) != 0)
  {
    float result = *(float *)(a2 + 28);
    __int16 v3 = 32;
    *(_WORD *)(a1 + 52) = 32;
    *(float *)(a1 + 28) = result;
    __int16 v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x40) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 32);
    v3 |= 0x40u;
    *(_WORD *)(a1 + 52) = v3;
    *(float *)(a1 + 32) = result;
    __int16 v2 = *(_WORD *)(a2 + 52);
  }
LABEL_6:
  if (v2)
  {
    float result = *(float *)(a2 + 8);
    v3 |= 1u;
    *(_WORD *)(a1 + 52) = v3;
    *(float *)(a1 + 8) = result;
    __int16 v2 = *(_WORD *)(a2 + 52);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_18;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  float result = *(float *)(a2 + 12);
  v3 |= 2u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 12) = result;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x100) == 0)
  {
LABEL_9:
    if ((v2 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_19;
  }
LABEL_18:
  float result = *(float *)(a2 + 40);
  v3 |= 0x100u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 40) = result;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x200) == 0)
  {
LABEL_10:
    if ((v2 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_20;
  }
LABEL_19:
  float result = *(float *)(a2 + 44);
  v3 |= 0x200u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 44) = result;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x400) == 0)
  {
LABEL_11:
    if ((v2 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
LABEL_20:
  float result = *(float *)(a2 + 48);
  v3 |= 0x400u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 48) = result;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 0x80) == 0)
  {
LABEL_12:
    if ((v2 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_22;
  }
LABEL_21:
  float result = *(float *)(a2 + 36);
  v3 |= 0x80u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 36) = result;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 8) == 0)
  {
LABEL_13:
    if ((v2 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_23;
  }
LABEL_22:
  float result = *(float *)(a2 + 20);
  v3 |= 8u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 20) = result;
  __int16 v2 = *(_WORD *)(a2 + 52);
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 0x10) == 0) {
      return result;
    }
LABEL_24:
    float result = *(float *)(a2 + 24);
    *(_WORD *)(a1 + 52) = v3 | 0x10;
    *(float *)(a1 + 24) = result;
    return result;
  }
LABEL_23:
  float result = *(float *)(a2 + 16);
  v3 |= 4u;
  *(_WORD *)(a1 + 52) = v3;
  *(float *)(a1 + 16) = result;
  if ((*(_WORD *)(a2 + 52) & 0x10) != 0) {
    goto LABEL_24;
  }
  return result;
}

uint64_t sub_10165DC84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 52);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitude", *(float *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "decimalYear", *(float *)(a1 + 12));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "declination", *(float *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "horizontal", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "inclination", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "latitude", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "longitude", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "magnitude", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 52);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 44));
  if ((*(_WORD *)(a1 + 52) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 48));
LABEL_13:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165DE28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 52) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 2u:
          *(_WORD *)(a1 + 52) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 3u:
          *(_WORD *)(a1 + 52) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 4u:
          *(_WORD *)(a1 + 52) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 5u:
          *(_WORD *)(a1 + 52) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 6u:
          *(_WORD *)(a1 + 52) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 7u:
          *(_WORD *)(a1 + 52) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 8u:
          *(_WORD *)(a1 + 52) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 9u:
          *(_WORD *)(a1 + 52) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xAu:
          *(_WORD *)(a1 + 52) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xBu:
          *(_WORD *)(a1 + 52) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_58:
            unint64_t v2 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_54:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165E244(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 28), 1u);
    __int16 v4 = *(_WORD *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 2u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 8), 3u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12), 4u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40), 5u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44), 6u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48), 7u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 8u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 0xAu);
    if ((*(_WORD *)(v3 + 52) & 0x10) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 9u);
  __int16 v4 = *(_WORD *)(v3 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_23:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5, 0xBu);
}

uint64_t sub_10165E3B0(uint64_t result)
{
  *(void *)uint64_t result = &off_102333250;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10165E3DC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

double sub_10165E414(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_102333250;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if ((v2 & 2) != 0)
  {
    double result = *(double *)(a2 + 16);
    char v3 = 2;
    *(unsigned char *)(a1 + 32) = 2;
    *(double *)(a1 + 16) = result;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 8) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 8u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 28) = v5;
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) == 0)
  {
    if ((v2 & 1) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 8);
    *(unsigned char *)(a1 + 32) = v3 | 1;
    *(double *)(a1 + 8) = result;
    return result;
  }
  int v6 = *(_DWORD *)(a2 + 24);
  v3 |= 4u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 24) = v6;
  if (*(unsigned char *)(a2 + 32)) {
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_10165E4B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "measSource", *(_DWORD *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "state", *(_DWORD *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "stateProbability", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
LABEL_6:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165E578(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_59;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_64;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_63:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_64;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_63;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_64;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_64:
              *(_DWORD *)(a1 + 28) = v25;
              goto LABEL_70;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_68;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 24) = v31;
LABEL_70:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_59:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_70;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_70;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_10165E958(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 3u);
      if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5, 4u);
}

double sub_10165EA00(uint64_t a1)
{
  *(void *)a1 = off_102333288;
  *(_DWORD *)(a1 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 136) = 0;
  return result;
}

void sub_10165EA48(void **a1)
{
  *a1 = off_102333288;
  unint64_t v2 = a1 + 3;
  uint64_t v3 = a1 + 15;
  sub_1016B1E74(&v3);
  uint64_t v3 = a1 + 12;
  sub_1016B1E74(&v3);
  uint64_t v3 = a1 + 9;
  sub_1016B1E74(&v3);
  uint64_t v3 = a1 + 6;
  sub_1016B1E74(&v3);
  uint64_t v3 = v2;
  sub_1016B1E74(&v3);
  PB::Base::~Base((PB::Base *)a1);
}

void sub_10165EAE8(void **a1)
{
  sub_10165EA48(a1);

  operator delete();
}

uint64_t sub_10165EB20(uint64_t result, uint64_t a2)
{
  *(void *)double result = off_102333288;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_DWORD *)(result + 152) = 0;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(void *)(result + 136) = 0;
  if ((*(unsigned char *)(a2 + 152) & 4) != 0)
  {
    uint64_t v2 = *(void *)(a2 + 144);
    *(unsigned char *)(result + 152) = 4;
    *(void *)(result + 144) = v2;
  }
  if (*(void *)(a2 + 96) != *(void *)(a2 + 104)) {
    sub_10165ECC4();
  }
  if (*(void *)(a2 + 72) != *(void *)(a2 + 80)) {
    sub_10165ECC4();
  }
  if (*(void *)(a2 + 120) != *(void *)(a2 + 128)) {
    sub_10165ECC4();
  }
  if (*(void *)(a2 + 48) != *(void *)(a2 + 56)) {
    sub_10165ECC4();
  }
  if (*(void *)(a2 + 24) != *(void *)(a2 + 32)) {
    sub_10165ECC4();
  }
  char v3 = *(unsigned char *)(a2 + 152);
  if ((v3 & 2) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    *(unsigned char *)(result + 152) |= 2u;
    *(void *)(result + 16) = v4;
    char v3 = *(unsigned char *)(a2 + 152);
  }
  if (v3)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    *(unsigned char *)(result + 152) |= 1u;
    *(void *)(result + 8) = v5;
  }
  return result;
}

void sub_10165ECC4()
{
}

void sub_10165EDC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C341AC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10165EE10(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 152);
  if (v5)
  {
    PB::TextFormatter::format(this, "lifespan", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 152);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "machTime", *(double *)(a1 + 16));
  }
  int v6 = *(uint64_t **)(a1 + 24);
  char v7 = *(uint64_t **)(a1 + 32);
  while (v6 != v7)
  {
    uint64_t v8 = *v6++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "satInfoBeidou");
  }
  char v9 = *(uint64_t **)(a1 + 48);
  unsigned int v10 = *(uint64_t **)(a1 + 56);
  while (v9 != v10)
  {
    uint64_t v11 = *v9++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, this, "satInfoGalileo");
  }
  unint64_t v12 = *(uint64_t **)(a1 + 72);
  char v13 = *(uint64_t **)(a1 + 80);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, this, "satInfoGlonass");
  }
  char v15 = *(uint64_t **)(a1 + 96);
  unsigned int v16 = *(uint64_t **)(a1 + 104);
  while (v15 != v16)
  {
    uint64_t v17 = *v15++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, this, "satInfoGps");
  }
  char v18 = *(uint64_t **)(a1 + 120);
  int v19 = *(uint64_t **)(a1 + 128);
  while (v18 != v19)
  {
    uint64_t v20 = *v18++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v20 + 32))(v20, this, "satInfoQzss");
  }
  if ((*(unsigned char *)(a1 + 152) & 4) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 144));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165F034(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 152) |= 4u;
              unint64_t v20 = *((void *)this + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
                goto LABEL_37;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v20);
              goto LABEL_39;
            case 2u:
              sub_10165F35C();
            case 3u:
              sub_10165F35C();
            case 4u:
              sub_10165F35C();
            case 5u:
              sub_10165F35C();
            case 6u:
              sub_10165F35C();
            case 7u:
              *(unsigned char *)(a1 + 152) |= 2u;
              unint64_t v23 = *((void *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
                goto LABEL_37;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v23);
              goto LABEL_39;
            case 8u:
              *(unsigned char *)(a1 + 152) |= 1u;
              unint64_t v21 = *((void *)this + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2))
              {
LABEL_37:
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v21);
LABEL_39:
                *((void *)this + 1) += 8;
              }
LABEL_40:
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              goto LABEL_40;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

void sub_10165F35C()
{
}

void sub_10165F458(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C341AC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10165F49C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(unsigned char *)(result + 152) & 4) != 0) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 144), 1u);
  }
  int v4 = *(const PB::Base ***)(v3 + 96);
  char v5 = *(const PB::Base ***)(v3 + 104);
  while (v4 != v5)
  {
    int v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 2u);
  }
  char v7 = *(const PB::Base ***)(v3 + 72);
  uint64_t v8 = *(const PB::Base ***)(v3 + 80);
  while (v7 != v8)
  {
    char v9 = *v7++;
    uint64_t result = PB::Writer::writeSubmessage(this, v9, 3u);
  }
  unsigned int v10 = *(const PB::Base ***)(v3 + 120);
  unint64_t v11 = *(const PB::Base ***)(v3 + 128);
  while (v10 != v11)
  {
    unint64_t v12 = *v10++;
    uint64_t result = PB::Writer::writeSubmessage(this, v12, 4u);
  }
  char v13 = *(const PB::Base ***)(v3 + 48);
  uint64_t v14 = *(const PB::Base ***)(v3 + 56);
  while (v13 != v14)
  {
    char v15 = *v13++;
    uint64_t result = PB::Writer::writeSubmessage(this, v15, 5u);
  }
  unsigned int v16 = *(const PB::Base ***)(v3 + 24);
  unint64_t v17 = *(const PB::Base ***)(v3 + 32);
  while (v16 != v17)
  {
    char v18 = *v16++;
    uint64_t result = PB::Writer::writeSubmessage(this, v18, 6u);
  }
  char v19 = *(unsigned char *)(v3 + 152);
  if ((v19 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16), 7u);
    char v19 = *(unsigned char *)(v3 + 152);
  }
  if (v19)
  {
    double v20 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v20, 8u);
  }
  return result;
}

uint64_t sub_10165F5CC(uint64_t result)
{
  *(void *)uint64_t result = &off_1023332C0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_10165F5F4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

float sub_10165F62C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &off_1023332C0;
  *(_DWORD *)(a1 + 32) = 0;
  char v2 = *(unsigned char *)(a2 + 32);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(a1 + 32) = 1;
    *(void *)(a1 + 8) = v4;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 32) & 0x10) != 0)
  {
LABEL_5:
    LODWORD(v4) = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 28) = v4;
    char v2 = *(unsigned char *)(a2 + 32);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    LODWORD(v4) = *(_DWORD *)(a2 + 20);
    v3 |= 4u;
    *(unsigned char *)(a1 + 32) = v3;
    *(_DWORD *)(a1 + 20) = v4;
    char v2 = *(unsigned char *)(a2 + 32);
    if ((v2 & 2) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        return *(float *)&v4;
      }
      goto LABEL_12;
    }
  }
  else if ((v2 & 2) == 0)
  {
    goto LABEL_8;
  }
  LODWORD(v4) = *(_DWORD *)(a2 + 16);
  v3 |= 2u;
  *(unsigned char *)(a1 + 32) = v3;
  *(_DWORD *)(a1 + 16) = v4;
  if ((*(unsigned char *)(a2 + 32) & 8) == 0) {
    return *(float *)&v4;
  }
LABEL_12:
  LODWORD(v4) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v3 | 8;
  *(_DWORD *)(a1 + 24) = v4;
  return *(float *)&v4;
}

uint64_t sub_10165F6E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "gyroMaxMean", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "magnitudeDiffUnity", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "magnitudeVar", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "maxAccelStdAxis", *(float *)(a1 + 28));
  if (*(unsigned char *)(a1 + 32)) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_7:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165F7C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_41;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_40;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_40;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_40;
        case 5u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_40:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_41:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165FA84(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 4u);
    if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20), 3u);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5, 5u);
}

uint64_t sub_10165FB48(uint64_t result)
{
  *(void *)uint64_t result = &off_1023332F8;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_10165FB6C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &off_1023332F8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_10165FBEC(PB::Base *a1)
{
  sub_10165FB6C(a1);

  operator delete();
}

uint64_t sub_10165FC24(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_1023332F8;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 20))
  {
    char v2 = *(unsigned char *)(a2 + 16);
    *(unsigned char *)(result + 20) |= 1u;
    *(unsigned char *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_10165FCEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "correction");
  }
  if (*(unsigned char *)(a1 + 20)) {
    PB::TextFormatter::format(this, "isAvgGrav", *(unsigned char *)(a1 + 16));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_10165FD84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        if (v21 >= *((void *)this + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)this + v21);
          *((void *)this + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *(unsigned char *)(a1 + 16) = v24;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this, v20, v11 & 7, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_10165FFD0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    char v5 = *(unsigned char *)(v3 + 16);
    return PB::Writer::write(this, v5, 2u);
  }
  return result;
}

void sub_10166003C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101660074(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_102333330;
  *(_DWORD *)(result + 44) = 0;
  __int16 v2 = *(_WORD *)(a2 + 44);
  if (v2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    __int16 v3 = 1;
    *(_WORD *)(result + 44) = 1;
    *(void *)(result + 8) = v4;
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  __int16 v3 = 0;
  if ((v2 & 0x10) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 28);
    v3 |= 0x10u;
    *(_WORD *)(result + 44) = v3;
    *(_DWORD *)(result + 28) = v5;
    __int16 v2 = *(_WORD *)(a2 + 44);
  }
LABEL_6:
  if ((v2 & 0x20) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 32);
    v3 |= 0x20u;
    *(_WORD *)(result + 44) = v3;
    *(_DWORD *)(result + 32) = v6;
    __int16 v2 = *(_WORD *)(a2 + 44);
    if ((v2 & 0x40) == 0)
    {
LABEL_8:
      if ((v2 & 8) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
  }
  else if ((v2 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 36);
  v3 |= 0x40u;
  *(_WORD *)(result + 44) = v3;
  *(_DWORD *)(result + 36) = v7;
  __int16 v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 8) == 0)
  {
LABEL_9:
    if ((v2 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
LABEL_16:
  int v8 = *(_DWORD *)(a2 + 24);
  v3 |= 8u;
  *(_WORD *)(result + 44) = v3;
  *(_DWORD *)(result + 24) = v8;
  __int16 v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 4) == 0)
  {
LABEL_10:
    if ((v2 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_17:
  int v9 = *(_DWORD *)(a2 + 20);
  v3 |= 4u;
  *(_WORD *)(result + 44) = v3;
  *(_DWORD *)(result + 20) = v9;
  __int16 v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 0x80) == 0)
  {
LABEL_11:
    if ((v2 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v10 = *(unsigned char *)(a2 + 40);
  v3 |= 0x80u;
  *(_WORD *)(result + 44) = v3;
  *(unsigned char *)(result + 40) = v10;
  __int16 v2 = *(_WORD *)(a2 + 44);
  if ((v2 & 0x100) == 0)
  {
LABEL_12:
    if ((v2 & 2) == 0) {
      return result;
    }
LABEL_20:
    int v12 = *(_DWORD *)(a2 + 16);
    *(_WORD *)(result + 44) = v3 | 2;
    *(_DWORD *)(result + 16) = v12;
    return result;
  }
LABEL_19:
  char v11 = *(unsigned char *)(a2 + 41);
  v3 |= 0x100u;
  *(_WORD *)(result + 44) = v3;
  *(unsigned char *)(result + 41) = v11;
  if ((*(_WORD *)(a2 + 44) & 2) != 0) {
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_101660198(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location", *(_DWORD *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sampleNumMod3", *(_DWORD *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "subType", *(_DWORD *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "triggerEnabled", *(unsigned char *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "triggerOn", *(unsigned char *)(a1 + 41));
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 32));
  if ((*(_WORD *)(a1 + 44) & 0x40) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 36));
LABEL_11:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_1016602FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 44) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_88;
            case 2u:
              *(_WORD *)(a1 + 44) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_87;
            case 3u:
              *(_WORD *)(a1 + 44) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_35;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_87;
            case 4u:
              *(_WORD *)(a1 + 44) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_87:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_88:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_35:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 44) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v45 = v21++;
                  char v46 = *(unsigned char *)(v22 + v45);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_92;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_104;
            case 6u:
              *(_WORD *)(a1 + 44) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v49 = v27++;
                  char v50 = *(unsigned char *)(v28 + v49);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_97:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_97;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_104;
            case 7u:
              *(_WORD *)(a1 + 44) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 40) = v34;
              goto LABEL_104;
            case 8u:
              *(_WORD *)(a1 + 44) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 41) = v36;
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 44) |= 2u;
              unint64_t v37 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v53 = v37++;
                  char v54 = *(unsigned char *)(v38 + v53);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_102:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_102;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 16) = v41;
LABEL_104:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1016608DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 44);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8), 1u);
    __int16 v4 = *(_WORD *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 2u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 3u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36), 4u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 24), 5u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 20), 6u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 41), 8u);
    if ((*(_WORD *)(v3 + 44) & 2) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(unsigned char *)(v3 + 40), 7u);
  __int16 v4 = *(_WORD *)(v3 + 44);
  if ((v4 & 0x100) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_19:
  int v5 = *(_DWORD *)(v3 + 16);

  return PB::Writer::writeVarInt(this, v5, 9u);
}

uint64_t sub_101660A10(uint64_t result)
{
  *(void *)uint64_t result = &off_102333368;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_101660A38(PB::Base *a1)
{
  PB::Base::~Base(a1);

  operator delete();
}

uint64_t sub_101660A70(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &off_102333368;
  *(_DWORD *)(result + 36) = 0;
  char v2 = *(unsigned char *)(a2 + 36);
  if (v2)
  {
    int v4 = *(_DWORD *)(a2 + 8);
    char v3 = 1;
    *(unsigned char *)(result + 36) = 1;
    *(_DWORD *)(result + 8) = v4;
    char v2 = *(unsigned char *)(a2 + 36);
    if ((v2 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  char v3 = 0;
  if ((*(unsigned char *)(a2 + 36) & 2) != 0)
  {
LABEL_5:
    int v5 = *(_DWORD *)(a2 + 12);
    v3 |= 2u;
    *(unsigned char *)(result + 36) = v3;
    *(_DWORD *)(result + 12) = v5;
    char v2 = *(unsigned char *)(a2 + 36);
  }
LABEL_6:
  if ((v2 & 4) != 0)
  {
    int v6 = *(_DWORD *)(a2 + 16);
    v3 |= 4u;
    *(unsigned char *)(result + 36) = v3;
    *(_DWORD *)(result + 16) = v6;
    char v2 = *(unsigned char *)(a2 + 36);
    if ((v2 & 0x10) == 0)
    {
LABEL_8:
      if ((v2 & 0x20) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v2 & 0x10) == 0)
  {
    goto LABEL_8;
  }
  int v7 = *(_DWORD *)(a2 + 24);
  v3 |= 0x10u;
  *(unsigned char *)(result + 36) = v3;
  *(_DWORD *)(result + 24) = v7;
  char v2 = *(unsigned char *)(a2 + 36);
  if ((v2 & 0x20) == 0)
  {
LABEL_9:
    if ((v2 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_15;
  }
LABEL_14:
  int v8 = *(_DWORD *)(a2 + 28);
  v3 |= 0x20u;
  *(unsigned char *)(result + 36) = v3;
  *(_DWORD *)(result + 28) = v8;
  char v2 = *(unsigned char *)(a2 + 36);
  if ((v2 & 0x40) == 0)
  {
LABEL_10:
    if ((v2 & 8) == 0) {
      return result;
    }
LABEL_16:
    int v10 = *(_DWORD *)(a2 + 20);
    *(unsigned char *)(result + 36) = v3 | 8;
    *(_DWORD *)(result + 20) = v10;
    return result;
  }
LABEL_15:
  int v9 = *(_DWORD *)(a2 + 32);
  v3 |= 0x40u;
  *(unsigned char *)(result + 36) = v3;
  *(_DWORD *)(result + 32) = v9;
  if ((*(unsigned char *)(a2 + 36) & 8) != 0) {
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_101660B60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 36);
  if (v5)
  {
    PB::TextFormatter::format(this, "biasX", *(float *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasY", *(float *)(a1 + 12));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "biasZ", *(float *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "doingBiasEstimation", *(_DWORD *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "varianceX", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "varianceY", *(float *)(a1 + 28));
  if ((*(unsigned char *)(a1 + 36) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "varianceZ", *(float *)(a1 + 32));
LABEL_9:

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_101660C84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 36) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 2u:
              *(unsigned char *)(a1 + 36) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 3u:
              *(unsigned char *)(a1 + 36) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 4u:
              *(unsigned char *)(a1 + 36) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 5u:
              *(unsigned char *)(a1 + 36) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_57;
            case 6u:
              *(unsigned char *)(a1 + 36) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_57:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_41:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_63;
            case 7u:
              *(unsigned char *)(a1 + 36) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_62;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_61:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_62;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_61;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_62;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_62:
              *(_DWORD *)(a1 + 20) = v25;
LABEL_63:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this, v11 >> 3, v11 & 7, 0);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_63;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_101661064(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 36);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8), 1u);
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 36) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12), 2u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16), 3u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24), 4u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32), 6u);
    if ((*(unsigned char *)(v3 + 36) & 8) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28), 5u);
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x40) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_15:
  int v5 = *(_DWORD *)(v3 + 20);

  return PB::Writer::writeVarInt(this, v5, 7u);
}

double sub_101661160(uint64_t a1)
{
  *(void *)a1 = &off_1023333A0;
  *(_DWORD *)(a1 + 116) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_1016611A0(PB::Base *this)
{
  *(void *)this = &off_1023333A0;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  int v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}