BOOL sub_10104055C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  void *v11;
  BOOL v12;
  BOOL result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  char *v22;
  uint8_t buf[4];
  void *v24;
  __int16 v25;
  int v26;

  v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2) {
      v9 = (uint64_t *)v5;
    }
    else {
      v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      v6 = v5;
    }
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(void *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17) {
        v21 = (uint64_t *)v15;
      }
      else {
        v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        v18 = v15;
      }
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230C638);
    }
    v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        v11 = (void *)*v11;
      }
      *(_DWORD *)buf = 136446466;
      v24 = v11;
      v25 = 1026;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_10013D1A0(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230C638);
      }
      v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1010407E0(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          v11 = (uint64_t *)v6;
        }
        else {
          v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((void *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              v19 = (char **)v13;
            }
            else {
              v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              v16 = v13;
            }
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                v25 = (uint64_t *)v20;
              }
              else {
                v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10230C638);
              }
              v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0) {
                  v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  v28 = __p;
                }
                else {
                  v28 = (void **)__p[0];
                }
                *(_DWORD *)buf = 136446466;
                *(void *)&buf[4] = v27;
                __int16 v34 = 2082;
                v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10230C638);
                }
                v29 = a1 + 8;
                if (a1[31] < 0) {
                  v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  v30 = buf;
                }
                else {
                  v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                v38 = v29;
                __int16 v39 = 2082;
                v40 = v30;
                v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_101040BB4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  v11 = *(__int16 **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  __int16 v12 = *v11;
  *(unsigned char *)(a3 + 2) = *((unsigned char *)v11 + 2);
  *(_WORD *)a3 = v12;
  return 1;
}

uint64_t sub_101040C1C(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *int v6 = off_10230C790;
  *((_WORD *)v6 + 12) = *(_WORD *)a3;
  *((unsigned char *)v6 + 26) = *(unsigned char *)(a3 + 2);
  int v10 = *a2;
  v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = v6 + 3;
  v7[9] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_101040CE0(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_101040CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v6 = 0;
  __int16 v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int16 *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_101040D4C(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230C638);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    v26 = v10;
    __int16 v27 = 2050;
    v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    v29 = v30;
    memset(v30, 0, sizeof(v30));
    v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = operator new(0x20uLL);
    v18[1] = 0;
    v18[2] = 0;
    *BOOL v18 = off_10230C790;
    *((unsigned char *)v18 + 26) = *(unsigned char *)(a3 + 2);
    *((_WORD *)v18 + 12) = *(_WORD *)a3;
    v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = v18 + 3;
    v14[9] = v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_101042544();
  }
  os_activity_scope_leave(&state);
}

void sub_101041338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101041384(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230C638);
    }
    v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230C638);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::listClients() [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230C638);
    }
    __int16 v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      char v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        char v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230C638);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::listClients() [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10230C638);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10230C638);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::listClients() [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_101041934(uint64_t a1)
{
  sub_1010419EC(a1);

  operator delete();
}

id sub_10104196C(uint64_t a1, int a2, void *a3)
{
  id result = sub_101041C58(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1010419BC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1010419EC(uint64_t a1)
{
  *(void *)a1 = &off_10230C748;
  v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_101041A5C(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_101041A8C()
{
}

unsigned char *sub_101041B40(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_101041C58(a4);
    uint64_t v10 = *(void *)a3 + 80;
    v11 = (uint64_t **)(*(void *)a3 + 40);
    v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

uint64_t sub_101041C38(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_101041C58(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_101041CF4(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_101042080(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_101041CF4(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_101042440((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10230C760);
    }
    __int16 v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101DAF038 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_10230C760);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101DAF038 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_10230C760);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101DAF038 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLAutopauseProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_101042080(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230C760);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAF038 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLAutopauseProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230C760);
      }
      __int16 v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DAF038 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10230C760);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_101042440(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102393968))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)3) {
      sub_101A9D43C();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1010424C8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10230C790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010424E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10230C790;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101042544()
{
}

void sub_1010425F8(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    __int16 v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      __int16 v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          unint64_t v12 = (uint64_t *)v4;
        }
        else {
          unint64_t v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          __int16 v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v49 = v9;
        id v13 = sub_101041C58(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          id v15 = a1 + 11;
          __int16 v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            unint64_t v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                unint64_t v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v48 = v19;
              sub_101041B40(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              v49 = v29;
              uint64_t v34 = v29[6];
              v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10230C638);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10230C638);
                }
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

uint64_t sub_1010429E8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_101042A08()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D9DAA8;
      v0[3] = unk_101D9DAB8;
      v0[4] = xmmword_101D9DAC8;
      v0[0] = xmmword_101D9DA88;
      v0[1] = unk_101D9DA98;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101042AE8(_Unwind_Exception *a1)
{
}

uint64_t sub_101042B00(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &off_1022BBD88;
  uint64_t v6 = a1 + 32;
  sub_101A1F180((unsigned __int8 *)(a1 + 8), "NatalimetryMaxDelay", &qword_101D23760, 0);
  *(void *)a1 = off_10230C7E0;
  sub_1004DE228(v6, a3);
  sub_10126C8A0(a1 + 104, a3);
  uint64_t v7 = a2[1];
  *(void *)(a1 + 176) = *a2;
  *(void *)(a1 + 184) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 192) = 0u;
  *(unsigned char *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  int v8 = operator new(0x20uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = off_10230C860;
  v8[3] = off_1022C7420;
  *(void *)(a1 + 248) = v8 + 3;
  *(void *)(a1 + 256) = v8;
  __int16 v9 = (char *)operator new(0x58uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)__int16 v9 = off_10230C8B0;
  *((void *)v9 + 3) = off_102315B08;
  *((_OWORD *)v9 + 2) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((void *)v9 + 8) = 0;
  *(_OWORD *)(v9 + 72) = xmmword_101D9DC30;
  *(void *)(a1 + 264) = v9 + 24;
  *(void *)(a1 + 272) = v9;
  int v10 = operator new(0x20uLL);
  v10[1] = 0;
  v10[2] = 0;
  *int v10 = off_10230C900;
  v10[3] = off_1022DC1D8;
  *(void *)(a1 + 280) = v10 + 3;
  *(void *)(a1 + 288) = v10;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a1 + 296;
  return a1;
}

void sub_101042CF4(_Unwind_Exception *a1)
{
  while (1)
  {
    __int16 v5 = (std::__shared_weak_count *)*(v3 - 1);
    if (v5) {
      sub_1000DB0A0(v5);
    }
    v3 -= 2;
    if (v3 == v2 + 7)
    {
      sub_10041F48C(v2);
      uint64_t v6 = (std::__shared_weak_count *)v1[23];
      if (v6) {
        sub_1000DB0A0(v6);
      }
      v1[13] = off_1022B6F38;
      sub_1000D816C(v1 + 15);
      v1[4] = off_1022B6F38;
      sub_1000D816C(v1 + 6);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_101042D90(uint64_t a1, double *a2)
{
  uint64_t result = sub_1001AA460(*(void ***)(a1 + 176), *a2);
  if (*((_DWORD *)a2 + 2))
  {
    double v5 = sub_10017CCF0((void *)(a1 + 192), a2);
    (*(void (**)(void, double *, double))(**(void **)(*(void *)(a1 + 176) + 48) + 32))(*(void *)(*(void *)(a1 + 176) + 48), a2, v5);
    uint64_t result = (*(uint64_t (**)(void, uint64_t *, double))(**(void **)(*(void *)(a1 + 176) + 48) + 24))(*(void *)(*(void *)(a1 + 176) + 48), &v9, *a2);
    if (result)
    {
      uint64_t v6 = 0;
      double v7 = *a2;
      uint64_t v8 = *(void *)(a1 + 176);
      do
      {
        uint64_t result = *(void *)(a1 + 248 + v6);
        if (result) {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)result + 24))(result, v8, v7);
        }
        v6 += 16;
      }
      while (v6 != 64);
    }
    if (!*(unsigned char *)(a1 + 240)) {
      return sub_101042EE8(a1);
    }
  }
  return result;
}

uint64_t sub_101042EE8(uint64_t result)
{
  if (*(void *)(result + 232))
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 192;
    do
    {
      double v3 = *(double *)(*(void *)(*(void *)(v1 + 200) + ((*(void *)(v1 + 224) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (*(void *)(v1 + 224) & 0x1FFLL));
      if ((*(unsigned int (**)(void, double))(**(void **)(*(void *)(v1 + 176) + 48) + 48))(*(void *)(*(void *)(v1 + 176) + 48), v3)&& (uint64_t v4 = (*(uint64_t (**)(void, _OWORD *, double))(**(void **)(*(void *)(v1 + 176) + 48) + 24))(*(void *)(*(void *)(v1 + 176) + 48), v11, v3), v4))
      {
        uint64_t result = sub_101043278(v3, v4, *(void ***)(v1 + 176));
        if ((result & 1) == 0)
        {
          unint64_t v5 = *(void *)(v1 + 232) + *(void *)(v1 + 224) - 1;
          if (vabdd_f64(*(double *)(*(void *)(*(void *)(v1 + 200) + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v5 & 0x1FF)), v3) <= *(double *)(v1 + 16))return result; {
        }
          }
        sub_1001A98B4(*(void *)(v1 + 176), v3);
        v9[12] = v11[12];
        v9[13] = v11[13];
        uint64_t v10 = v12;
        v9[8] = v11[8];
        v9[9] = v11[9];
        v9[11] = v11[11];
        v9[10] = v11[10];
        v9[4] = v11[4];
        v9[5] = v11[5];
        v9[7] = v11[7];
        v9[6] = v11[6];
        v9[0] = v11[0];
        v9[1] = v11[1];
        v9[3] = v11[3];
        v9[2] = v11[2];
        sub_1010433E0(v1, (uint64_t)v9, *(void *)(v1 + 176));
      }
      else
      {
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10230C830);
        }
        uint64_t v6 = qword_102418FF8;
        if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#Warning Popping out an activity since there's no activity associated with current time.  This shouldn't happen", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FF0 != -1) {
            dispatch_once(&qword_102418FF0, &stru_10230C830);
          }
          double v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLFitnessControllerYouth::processQueue()", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
        }
      }
      *(int64x2_t *)(v1 + 224) = vaddq_s64(*(int64x2_t *)(v1 + 224), (int64x2_t)xmmword_101D0A740);
      uint64_t result = sub_10007F07C(v2, 1);
    }
    while (*(void *)(v1 + 232));
  }
  return result;
}

uint64_t sub_101043278(double a1, uint64_t a2, void **a3)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a3[6] + 48))(a3[6]);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t *, double))(*a3[6] + 24))(a3[6], &v6, a1);
    if (result)
    {
      if (v7 || (uint64_t result = (*(uint64_t (**)(void *, double))(*a3[4] + 48))(a3[4], a1), result))
      {
        if (CLMotionActivity::isTypeCycling() && v7) {
          return (*(uint64_t (**)(void *, double))(*a3[2] + 48))(a3[2], a1);
        }
        else {
          return (*(uint64_t (**)(void *, double))(*a3[5] + 48))(a3[5], a1);
        }
      }
    }
  }
  return result;
}

void sub_1010433E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101043648(a1, a3);
  uint64_t v6 = 0;
  unsigned int v7 = *(_DWORD *)(a2 + 136);
  uint64_t v8 = v7;
  do
  {
    uint64_t v9 = *(void *)(a1 + 248 + v6);
    if (v9)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v8, a3);
      *(_DWORD *)(a2 + 136) = v8;
    }
    v6 += 16;
  }
  while (v6 != 64);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230C830);
  }
  uint64_t v10 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a2 + 88);
    int v12 = *(_DWORD *)(a2 + 136);
    *(_DWORD *)buf = 134349568;
    uint64_t v15 = v11;
    __int16 v16 = 1026;
    unsigned int v17 = v7;
    __int16 v18 = 1026;
    int v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "startTime, %{public}.3f, rawActivity, %{public}d, overridenActivity, %{public}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230C830);
    }
    id v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFitnessControllerYouth::processEpoch(CLMotionStateMediator_Type::MediatedMotionActivity, const CLNatalieModelInput &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  sub_100F109E0(a1 + 32, a2);
  sub_100F109E0(a1 + 104, a2);
}

void sub_101043648(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 352))
  {
    uint64_t v10 = *(void **)(a1 + 312);
    uint64_t v11 = (std::__shared_weak_count *)v10[1];
    *uint64_t v10 = 0;
    v10[1] = 0;
    if (!v11) {
      return;
    }
    goto LABEL_10;
  }
  id v3 = +[CMWorkout CMWorkoutTypeFromCLMotionActivityType:*(unsigned int *)(a2 + 152)];
  if (v3 != (id)15 && v3 != (id)17)
  {
    unint64_t v5 = *(void **)(a1 + 312);
    if (!*v5)
    {
      id v6 = v3;
      unsigned int v7 = operator new(0x20uLL);
      v7[1] = 0;
      v7[2] = 0;
      if (v6 == (id)4)
      {
        *unsigned int v7 = off_10230C950;
        uint64_t v8 = v7 + 3;
        uint64_t v9 = off_102301D78;
      }
      else
      {
        *unsigned int v7 = off_10230C9A0;
        uint64_t v8 = v7 + 3;
        uint64_t v9 = off_1022B9F70;
      }
      v7[3] = v9;
      uint64_t v11 = (std::__shared_weak_count *)v5[1];
      *unint64_t v5 = v8;
      v5[1] = v7;
      if (v11)
      {
LABEL_10:
        sub_1000DB0A0(v11);
      }
    }
  }
}

uint64_t sub_101043764(uint64_t result)
{
  *(unsigned char *)(result + 240) = 1;
  return result;
}

uint64_t sub_101043770(uint64_t result)
{
  *(unsigned char *)(result + 240) = 0;
  return result;
}

void *sub_101043778(void *a1)
{
  *a1 = off_10230C7E0;
  for (uint64_t i = 38; i != 30; i -= 2)
  {
    id v3 = (std::__shared_weak_count *)a1[i];
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  sub_10041F48C(a1 + 24);
  uint64_t v4 = (std::__shared_weak_count *)a1[23];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  a1[13] = off_1022B6F38;
  sub_1000D816C(a1 + 15);
  a1[4] = off_1022B6F38;
  sub_1000D816C(a1 + 6);
  return a1;
}

void sub_101043838(void *a1)
{
  *a1 = off_10230C7E0;
  uint64_t v2 = 38;
  while (1)
  {
    id v3 = (std::__shared_weak_count *)a1[v2];
    if (v3) {
      sub_1000DB0A0(v3);
    }
    v2 -= 2;
    if (v2 == 30)
    {
      sub_10041F48C(a1 + 24);
      uint64_t v4 = (std::__shared_weak_count *)a1[23];
      if (v4) {
        sub_1000DB0A0(v4);
      }
      a1[13] = off_1022B6F38;
      sub_1000D816C(a1 + 15);
      a1[4] = off_1022B6F38;
      sub_1000D816C(a1 + 6);
      operator delete();
    }
  }
}

void sub_101043918(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_101043948(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10230C860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101043968(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10230C860;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010439BC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1010439E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10230C8B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101043A04(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10230C8B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101043A58(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_101043A80(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10230C900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101043AA0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10230C900;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101043AF4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_101043B1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10230C950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101043B3C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10230C950;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101043B90(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_101043BB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10230C9A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_101043BD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10230C9A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_101043C2C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_101043C54(uint64_t a1)
{
  return a1;
}

const char *sub_101043C80(unsigned int a1)
{
  if (a1 > 0xA) {
    return "?unknown?";
  }
  else {
    return off_10230CA40[a1];
  }
}

int8x8_t sub_101043CA4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 96);
  long long v9 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  long long v10 = *(_OWORD *)(a1 + 144);
  long long v11 = *(_OWORD *)(a1 + 160);
  long long v12 = *(_OWORD *)(a1 + 176);
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 160) = v11;
  *(_OWORD *)(a2 + 176) = v12;
  *(_OWORD *)(a2 + 144) = v10;
  sub_10125BA3C((unsigned __int16 *)a1, a2);
  *(int8x16_t *)(a2 + 12) = vrev32q_s8(*(int8x16_t *)(a1 + 12));
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 28));
  *(int8x8_t *)(a2 + 28) = result;
  *(_DWORD *)(a2 + 36) = bswap32(*(_DWORD *)(a1 + 36));
  unint64_t v14 = bswap64(*(void *)(a1 + 40));
  unint64_t v15 = bswap64(*(void *)(a1 + 188));
  *(_DWORD *)(a2 + 176) = bswap32(*(_DWORD *)(a1 + 176));
  *(void *)(a2 + 40) = v14;
  *(void *)(a2 + 188) = v15;
  return result;
}

unsigned __int16 *sub_101043D54(unsigned __int16 *result, uint64_t a2)
{
  *(_WORD *)a2 = bswap32(*result) >> 16;
  *(_WORD *)(a2 + 2) = bswap32(result[1]) >> 16;
  *(_DWORD *)(a2 + 4) = bswap32(*((_DWORD *)result + 1));
  *(_WORD *)(a2 + 8) = bswap32(result[4]) >> 16;
  *(_WORD *)(a2 + 10) = bswap32(result[5]) >> 16;
  *(_DWORD *)(a2 + 12) = *((_DWORD *)result + 3);
  return result;
}

uint64_t sub_101043DAC()
{
  sub_10010F274((uint64_t)v7);
  sub_100132EFC(v8, (uint64_t)"mcc, ", 5);
  v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", mnc, ", 7);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", lac, ", 7);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", subY, ", 8);
  id v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", subX, ", 8);
  long long v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)", hUnc, ", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v7
  v8[0] = v5;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101043FA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x8_t sub_101043FBC(unsigned __int16 *a1, uint64_t a2)
{
  *(_WORD *)a2 = bswap32(*a1) >> 16;
  *(_WORD *)(a2 + 2) = bswap32(a1[1]) >> 16;
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 2));
  *(int8x8_t *)(a2 + 4) = result;
  return result;
}

uint64_t sub_101043FEC()
{
  sub_10010F274((uint64_t)v5);
  sub_100132EFC(v6, (uint64_t)"mcc, ", 5);
  v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", mnc, ", 7);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", lac, ", 7);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", offset, ", 10);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v5
  v6[0] = v3;
  if (v7 < 0) {
    operator delete((void *)v6[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1010441B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010441CC(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  return 1;
}

int8x8_t sub_1010441E4(int8x8_t *a1, int8x8_t *a2)
{
  int8x8_t result = vrev32_s8(*a1);
  *a2 = result;
  a2[1].i16[0] = bswap32(a1[1].u16[0]) >> 16;
  a2[1].i16[1] = bswap32(a1[1].u16[1]) >> 16;
  a2[1].i16[2] = a1[1].i16[2];
  return result;
}

uint64_t sub_10104421C()
{
  sub_10010F274((uint64_t)v6);
  sub_100132EFC(v7, (uint64_t)", lac, ", 7);
  v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", ci, ", 6);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", subY, ", 8);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", subX, ", 8);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", hUnc, ", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v6
  v7[0] = v4;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101044400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x8_t sub_101044414(int8x8_t *a1, int8x8_t *a2)
{
  int8x8_t result = vrev32_s8(*a1);
  *a2 = result;
  a2[1].i32[0] = bswap32(a1[1].u32[0]);
  return result;
}

uint64_t sub_101044430()
{
  sub_10010F274((uint64_t)v4);
  sub_100132EFC(v5, (uint64_t)", lac, ", 7);
  v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", ci, ", 6);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", offset, ", 10);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v4
  v5[0] = v2;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1010445E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010445F8(void *a1, void *a2)
{
  *a1 = *a2;
  return 1;
}

uint64_t sub_101044608()
{
  sub_10010F274((uint64_t)v6);
  sub_100132EFC(v7, (uint64_t)", tac, ", 7);
  v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", ci, ", 6);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", subY, ", 8);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", subX, ", 8);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", hUnc, ", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v6
  v7[0] = v4;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1010447EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101044800()
{
  sub_10010F274((uint64_t)v4);
  sub_100132EFC(v5, (uint64_t)", tac, ", 7);
  v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", ci, ", 6);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", offset, ", 10);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v4
  v5[0] = v2;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1010449B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010449C8()
{
  sub_10010F274((uint64_t)v6);
  sub_100132EFC(v7, (uint64_t)", sid, ", 7);
  v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", bsid, ", 8);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", subY, ", 8);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", subX, ", 8);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", hUnc, ", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v6
  v7[0] = v4;
  if (v8 < 0) {
    operator delete((void *)v7[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101044BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101044BC0()
{
  sub_10010F274((uint64_t)v4);
  sub_100132EFC(v5, (uint64_t)", sid, ", 7);
  v0 = (void *)std::ostream::operator<<();
  sub_100132EFC(v0, (uint64_t)", bsid, ", 8);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", offset, ", 10);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v4
  v5[0] = v2;
  if (v6 < 0) {
    operator delete((void *)v5[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101044D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

int8x8_t sub_101044D88(uint64_t a1, uint64_t a2)
{
  sub_10125BA3C((unsigned __int16 *)a1, a2);
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(int8x8_t *)(a2 + 12) = result;
  return result;
}

unsigned __int16 *sub_101044DBC(unsigned __int16 *result, uint64_t a2)
{
  *(_WORD *)a2 = bswap32(*result) >> 16;
  *(_WORD *)(a2 + 2) = bswap32(result[1]) >> 16;
  *(_DWORD *)(a2 + 4) = bswap32(*((_DWORD *)result + 1));
  *(_WORD *)(a2 + 8) = result[4];
  int v2 = *(_WORD *)(a2 + 10) & 0xFFFE | result[5] & 1;
  *(_WORD *)(a2 + 10) = *(_WORD *)(a2 + 10) & 0xFFFE | result[5] & 1;
  unsigned int v3 = v2 & 0xFFFFFFFD | (2 * ((result[5] >> 1) & 1));
  *(_WORD *)(a2 + 10) = v3;
  unsigned int v4 = v3 & 0xFFFFFFFB | (4 * ((result[5] >> 2) & 1));
  *(_WORD *)(a2 + 10) = v4;
  unsigned int v5 = v4 & 0xFFFFFFF7 | (8 * ((result[5] >> 3) & 1));
  *(_WORD *)(a2 + 10) = v5;
  unsigned int v6 = v5 & 0xFFFFFFEF | (16 * ((result[5] >> 4) & 1));
  *(_WORD *)(a2 + 10) = v6;
  unsigned int v7 = v6 & 0xFFFFFFDF | (32 * ((result[5] >> 5) & 1));
  *(_WORD *)(a2 + 10) = v7;
  *(_WORD *)(a2 + 10) = result[5] & 0xFFC0 | v7 & 0x3F;
  return result;
}

unsigned int *sub_101044E60(unsigned int *result, _DWORD *a2)
{
  *a2 = bswap32(*result);
  return result;
}

int8x8_t sub_101044E70(uint64_t a1, uint64_t a2)
{
  sub_10125BA3C((unsigned __int16 *)a1, a2);
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(int8x8_t *)(a2 + 12) = result;
  *(_DWORD *)(a2 + 20) = bswap32(*(_DWORD *)(a1 + 20));
  return result;
}

int8x8_t sub_101044EB0(uint64_t a1, uint64_t a2)
{
  sub_10125BA3C((unsigned __int16 *)a1, a2);
  int8x8_t result = vrev32_s8(*(int8x8_t *)(a1 + 12));
  *(int8x8_t *)(a2 + 12) = result;
  *(_DWORD *)(a2 + 20) = bswap32(*(_DWORD *)(a1 + 20));
  *(_WORD *)(a2 + 24) = bswap32(*(unsigned __int16 *)(a1 + 24)) >> 16;
  *(_WORD *)(a2 + 26) = bswap32(*(unsigned __int16 *)(a1 + 26)) >> 16;
  return result;
}

void sub_101044F10()
{
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)&buf[0], "TileDownloadCoolOffPeriod", &qword_102475AE8);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  v0 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = qword_102475AE8;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "TileFile, fTileDownloadCoolOffPeriod, %{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    unsigned int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLTileFile::initStaticGlobals()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)&buf[0], "TileDownloadExtendedCoolOffPeriod", &qword_102475AF0);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  uint64_t v1 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = qword_102475AF0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "TileFile, fTileDownloadExtendedCoolOffPeriod, %{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLTileFile::initStaticGlobals()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)&buf[0], "TileForceExpirationPeriod", &qword_102475AF8);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  int v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = qword_102475AF8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TileFile, fTileForceExpirationPeriod, %{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLTileFile::initStaticGlobals()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)&buf[0], "TileMinExpirationPeriod", &qword_102475B00);
  if (*((void *)&buf[0] + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&buf[0] + 1));
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  unsigned int v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf[0]) = 134349056;
    *(void *)((char *)buf + 4) = qword_102475B00;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TileFile, fTileMinExpirationPeriod, %{public}.1lf", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLTileFile::initStaticGlobals()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_101045578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010455A4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = off_10230CAA8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a3;
  sub_10014F674(a1 + 48, a2);
  *(void *)(a1 + 96) = a4;
  *(void *)(a1 + 104) = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(a1 + 208) = 0u;
  *(_WORD *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 114) = 0;
  *(void *)(a1 + 120) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 128) = 0;
  *(CFAbsoluteTime *)(a1 + 136) = Current;
  *(_WORD *)(a1 + 144) = 1;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 200) = -1;
  *(_WORD *)(a1 + 240) = 68;
  *(_OWORD *)(a1 + 224) = 0u;
  sub_101171D90(a1 + 248);
  *(_DWORD *)(a1 + 288) = 0;
  pthread_once(&stru_102475B08, sub_101044F10);
  return a1;
}

void sub_10104568C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*(void **)(v1 + 72));
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010456D8(uint64_t a1)
{
  *(void *)a1 = off_10230CAA8;
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_101045750(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
    *(void *)(a1 + 104) = 0;
  }
  *(unsigned char *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 192) = 0;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_10104581C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_101045834(uint64_t a1, double a2)
{
  return vabdd_f64(a2, *(double *)(a1 + 176));
}

double sub_101045840(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  BOOL v5 = sub_10014548C(a1);
  uint64_t v6 = 160;
  if (v5) {
    uint64_t v6 = 232;
  }
  double v7 = *(double *)(a1 + v6);
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return a2 - v7;
}

void sub_1010458F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10104590C(uint64_t a1)
{
  return *(double *)(a1 + 232);
}

BOOL sub_101045914(uint64_t a1, int a2, double a3, float a4)
{
  int v4 = *(_DWORD *)(a1 + 200);
  if (v4 < 1) {
    return 0;
  }
  double v7 = vabdd_f64(a3, *(double *)(a1 + 176));
  double v8 = (double)v4;
  if (a2)
  {
    double v9 = a4 * v8;
    if (v9 > *(double *)&qword_102475B00) {
      double v10 = v9;
    }
    else {
      double v10 = *(double *)&qword_102475B00;
    }
  }
  else if (*(double *)&qword_102475B00 < v8)
  {
    double v10 = (double)v4;
  }
  else
  {
    double v10 = *(double *)&qword_102475B00;
  }
  BOOL v11 = v7 >= v10;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  long long v12 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(_DWORD *)(a1 + 200);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(&__p, a1);
    unint64_t v14 = (SBYTE1(v27) & 0x80u) == 0 ? &__p : (void **)__p;
    *(_DWORD *)buf = 67241475;
    BOOL v33 = v7 >= v10;
    __int16 v34 = 1026;
    int v35 = a2;
    __int16 v36 = 1026;
    int v37 = v13;
    __int16 v38 = 2050;
    double v39 = v10;
    __int16 v40 = 2050;
    double v41 = v7;
    __int16 v42 = 2081;
    v43 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "@TileQueue, hasDataExpired, %{public}d, isLargeConnectivity, %{public}d, fExpirationAge, %{public}d, dataExpirationPeriod, %{public}.1lf, dataAge, %{public}.1lf, tile, %{private}s", buf, 0x32u);
    if (SBYTE1(v27) < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v16 = *(_DWORD *)(a1 + 200);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(v19, a1);
    if (v20 >= 0) {
      unsigned int v17 = v19;
    }
    else {
      unsigned int v17 = (void **)v19[0];
    }
    LODWORD(__p) = 67241475;
    HIDWORD(__p) = v7 >= v10;
    __int16 v22 = 1026;
    int v23 = a2;
    __int16 v24 = 1026;
    int v25 = v16;
    __int16 v26 = 2050;
    double v27 = v10;
    __int16 v28 = 2050;
    double v29 = v7;
    __int16 v30 = 2081;
    BOOL v31 = v17;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::hasDataExpired(CFAbsoluteTime, BOOL, float)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  return v11;
}

double sub_101045C60(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a2 + 176);
  *(double *)(a1 + 176) = result;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  return result;
}

uint64_t sub_101045C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (int *)(a1 + 48);
  sub_100C09A14(a1 + 48, v52);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    double v8 = (const std::string::value_type *)a2;
  }
  else {
    double v8 = *(const std::string::value_type **)a2;
  }
  if (v7 >= 0) {
    std::string::size_type v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v9 = *(void *)(a2 + 8);
  }
  double v10 = std::string::insert((std::string *)v52, 0, v8, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v46.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((v54[9] & 0x80000000) != 0) {
    operator delete(*(void **)v52);
  }
  sub_100C0A030(v6, a1 + 208, &v45);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  long long v12 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    int v13 = *(unsigned char **)__p;
    if (v51[9] >= 0) {
      int v13 = __p;
    }
    unint64_t v14 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v14 = (void *)*v14;
    }
    unint64_t v15 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v15 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int16 v52 = 136381187;
    *(void *)&v52[4] = v13;
    __int16 v53 = 2082;
    *(void *)v54 = v14;
    *(_WORD *)&v54[8] = 2082;
    *(void *)&v54[10] = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TileFile, startDownloading, tile, %{private}s, localFilename, %{public}s, tempFilename, %{public}s", v52, 0x20u);
    if ((v51[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v52, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(v42, a1);
    __int16 v34 = (void **)v42[0];
    if (v44 >= 0) {
      __int16 v34 = v42;
    }
    int v35 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v35 = (void *)*v35;
    }
    __int16 v36 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v36 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__p = 136381187;
    *(void *)&__p[4] = v34;
    __int16 v50 = 2082;
    *(void *)v51 = v35;
    *(_WORD *)&v51[8] = 2082;
    *(void *)&v51[10] = v36;
    int v37 = (char *)_os_log_send_and_compose_impl();
    if (v44 < 0) {
      operator delete(v42[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::startDownloading(const std::string &, CLFileDownload *)", "%s\n", v37);
    if (v37 != v52) {
      free(v37);
    }
  }
  int v16 = *(void **)(a1 + 40);
  v42[0] = v16;
  (*(void (**)(void *))(*(void *)v16 + 16))(v16);
  __int16 v43 = 256;
  if (!a3)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    BOOL v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v52, a1);
      __int16 v22 = v54[9] >= 0 ? v52 : *(unsigned char **)v52;
      *(_DWORD *)__p = 136380675;
      *(void *)&__p[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "TileFile, startDownloading, failed to download without a downloadRequest, %{private}s, #CloneMe", __p, 0xCu);
      if ((v54[9] & 0x80000000) != 0) {
        operator delete(*(void **)v52);
      }
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_49;
    }
    bzero(v52, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    if (v51[9] >= 0) {
      __int16 v38 = __p;
    }
    else {
      __int16 v38 = *(unsigned char **)__p;
    }
    *(_DWORD *)v47 = 136380675;
    *(void *)&v47[4] = v38;
    char v20 = (char *)_os_log_send_and_compose_impl();
    if ((v51[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_99;
  }
  if (sub_100065F70(a1))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    unsigned int v17 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v52, a1);
      __int16 v18 = v54[9] >= 0 ? v52 : *(unsigned char **)v52;
      *(_DWORD *)__p = 136380675;
      *(void *)&__p[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "TileFile, startDownloading, tile is already being downloaded, %{private}s, #CloneMe", __p, 0xCu);
      if ((v54[9] & 0x80000000) != 0) {
        operator delete(*(void **)v52);
      }
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_49;
    }
    bzero(v52, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    if (v51[9] >= 0) {
      int v19 = __p;
    }
    else {
      int v19 = *(unsigned char **)__p;
    }
    *(_DWORD *)v47 = 136380675;
    *(void *)&v47[4] = v19;
    char v20 = (char *)_os_log_send_and_compose_impl();
    if ((v51[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
LABEL_99:
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFile::startDownloading(const std::string &, CLFileDownload *)", "%s\n", v20);
    if (v20 != v52) {
      free(v20);
    }
LABEL_49:
    uint64_t v23 = 0;
    goto LABEL_75;
  }
  *(void *)(a1 + 104) = a3;
  (*(void (**)(uint64_t))(*(void *)a3 + 24))(a3);
  if (*(unsigned char *)(a1 + 144))
  {
    __int16 v24 = (const std::string::value_type *)sub_1010467A4();
    int v25 = v24[23];
    if (v25 >= 0) {
      __int16 v26 = v24;
    }
    else {
      __int16 v26 = *(const std::string::value_type **)v24;
    }
    if (v25 >= 0) {
      std::string::size_type v27 = *((unsigned __int8 *)v24 + 23);
    }
    else {
      std::string::size_type v27 = *((void *)v24 + 1);
    }
    std::string::append(&v46, v26, v27);
  }
  if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v28 = &v46;
  }
  else {
    __int16 v28 = (std::string *)v46.__r_.__value_.__r.__words[0];
  }
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v29 = &v45;
  }
  else {
    double v29 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  uint64_t v23 = (*(uint64_t (**)(void, std::string *, std::string *, void *))(**(void **)(a1 + 104) + 16))(*(void *)(a1 + 104), v28, v29, &unk_101D9DE58);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  __int16 v30 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    if (v51[9] >= 0) {
      BOOL v31 = __p;
    }
    else {
      BOOL v31 = *(unsigned char **)__p;
    }
    int v32 = &v46;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v32 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__int16 v52 = 136381187;
    *(void *)&v52[4] = v31;
    __int16 v53 = 1026;
    *(_DWORD *)v54 = v23;
    *(_WORD *)&v54[4] = 2081;
    *(void *)&v54[6] = v32;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "TileFile, startDownloading, tile, %{private}s, started, %{public}d, strFileUrl, %{private}s", v52, 0x1Cu);
    if ((v51[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v52, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v47, a1);
    if (v48 >= 0) {
      double v39 = v47;
    }
    else {
      double v39 = *(unsigned char **)v47;
    }
    __int16 v40 = &v46;
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v40 = (std::string *)v46.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__p = 136381187;
    *(void *)&__p[4] = v39;
    __int16 v50 = 1026;
    *(_DWORD *)v51 = v23;
    *(_WORD *)&v51[4] = 2081;
    *(void *)&v51[6] = v40;
    double v41 = (char *)_os_log_send_and_compose_impl();
    if (v48 < 0) {
      operator delete(*(void **)v47);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::startDownloading(const std::string &, CLFileDownload *)", "%s\n", v41);
    if (v41 != v52) {
      free(v41);
    }
  }
LABEL_75:
  (*(void (**)(void *))(*(void *)v16 + 24))(v16);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
  return v23;
}

void sub_1010466FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void *sub_1010467A4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102475B30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102475B30))
  {
    sub_100134750(qword_102475B18, ".gz");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_102475B18, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102475B30);
  }
  return qword_102475B18;
}

void sub_101046830(_Unwind_Exception *a1)
{
}

BOOL sub_101046848(uint64_t a1, unsigned int *a2)
{
  *a2 = 0;
  int v4 = (int *)(a1 + 48);
  sub_100C0A030((int *)(a1 + 48), a1 + 208, &v68);
  sub_100C0A030(v4, a1 + 8, &__p);
  if (*(unsigned char *)(a1 + 144))
  {
    BOOL v5 = (const void **)sub_1010467A4();
    sub_1002F0A00((const void **)&v68.__r_.__value_.__l.__data_, v5, (uint64_t)v77);
    double v7 = sub_1000D3E50();
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v8 = (const std::__fs::filesystem::path *)&v68;
    }
    else {
      double v8 = (const std::__fs::filesystem::path *)v68.__r_.__value_.__r.__words[0];
    }
    if (v78 >= 0) {
      std::string::size_type v9 = (const std::__fs::filesystem::path *)v77;
    }
    else {
      std::string::size_type v9 = *(const std::__fs::filesystem::path **)v77;
    }
    BOOL v10 = sub_1004BB3CC(v8, v9, v6);
    if (!v10)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      long long v11 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v12 = &v68;
        }
        else {
          long long v12 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        if (v78 >= 0) {
          int v13 = v77;
        }
        else {
          int v13 = *(unsigned char **)v77;
        }
        int v14 = *__error();
        unint64_t v15 = __error();
        int v16 = strerror(*v15);
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = v12;
        __int16 v74 = 2082;
        *(void *)v75 = v13;
        *(_WORD *)&v75[8] = 1026;
        *(_DWORD *)v76 = v14;
        *(_WORD *)&v76[4] = 2082;
        *(void *)&v76[6] = v16;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "TileFile, decompress, failed to move, %{public}s, %{public}s, errno, %{public}d, %{public}s, #CloneMe", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CB28);
        }
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v49 = &v68;
        }
        else {
          v49 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        if (v78 >= 0) {
          __int16 v50 = v77;
        }
        else {
          __int16 v50 = *(unsigned char **)v77;
        }
        int v51 = *__error();
        __int16 v52 = __error();
        __int16 v53 = strerror(*v52);
        *(_DWORD *)v69 = 136446978;
        *(void *)&v69[4] = v49;
        __int16 v70 = 2082;
        *(void *)v71 = v50;
        *(_WORD *)&v71[8] = 1026;
        *(_DWORD *)v72 = v51;
        *(_WORD *)&v72[4] = 2082;
        *(void *)&v72[6] = v53;
        v54 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v54);
        if (v54 != buf) {
          free(v54);
        }
      }
    }
    double v17 = sub_1000D3E50();
    if (v10)
    {
      double v18 = v17;
      if (v78 >= 0) {
        int v19 = v77;
      }
      else {
        int v19 = *(const char **)v77;
      }
      unsigned int v20 = sub_1004BC384(v19);
      *a2 = v20;
      if (v20)
      {
        if (v78 >= 0) {
          BOOL v21 = v77;
        }
        else {
          BOOL v21 = *(const char **)v77;
        }
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v22 = &v68;
        }
        else {
          __int16 v22 = (std::string *)v68.__r_.__value_.__r.__words[0];
        }
        BOOL v10 = sub_1004BC3D8(v21, (const char *)v22);
        if (v10)
        {
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v23 = &v68;
          }
          else {
            uint64_t v23 = (std::string *)v68.__r_.__value_.__r.__words[0];
          }
          unsigned int v24 = sub_1004BC384((const char *)v23);
        }
        else
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CB28);
          }
          int v32 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
          {
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              BOOL v33 = &v68;
            }
            else {
              BOOL v33 = (std::string *)v68.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            int v35 = *__error();
            __int16 v36 = __error();
            int v37 = strerror(*v36);
            *(_DWORD *)buf = 136446978;
            *(void *)&uint8_t buf[4] = v33;
            __int16 v74 = 2082;
            *(void *)v75 = p_p;
            *(_WORD *)&v75[8] = 1026;
            *(_DWORD *)v76 = v35;
            *(_WORD *)&v76[4] = 2082;
            *(void *)&v76[6] = v37;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "TileFile, decompress, from, %{public}s, to, %{public}s, failed, errno, %{public}d, %{public}s, #CloneMe", buf, 0x26u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CB28);
            }
            if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v59 = &v68;
            }
            else {
              v59 = (std::string *)v68.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v60 = &__p;
            }
            else {
              v60 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            int v61 = *__error();
            v62 = __error();
            v63 = strerror(*v62);
            *(_DWORD *)v69 = 136446978;
            *(void *)&v69[4] = v59;
            __int16 v70 = 2082;
            *(void *)v71 = v60;
            *(_WORD *)&v71[8] = 1026;
            *(_DWORD *)v72 = v61;
            *(_WORD *)&v72[4] = 2082;
            *(void *)&v72[6] = v63;
            v64 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v64);
            if (v64 != buf) {
              free(v64);
            }
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v38 = &__p;
          }
          else {
            __int16 v38 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          sub_1004BEB14((const char *)v38);
          unsigned int v24 = 0;
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CB28);
        }
        double v39 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v40 = *a2;
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v69, a1);
          double v41 = v71[9] >= 0 ? v69 : *(unsigned char **)v69;
          *(_DWORD *)buf = 134349827;
          *(double *)&uint8_t buf[4] = v18 - v7;
          __int16 v74 = 1026;
          *(_DWORD *)v75 = v40;
          *(_WORD *)&v75[4] = 1026;
          *(_DWORD *)&v75[6] = v24;
          *(_WORD *)v76 = 2081;
          *(void *)&v76[2] = v41;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "TileFile, decompress, in, %{public}.6lf, seconds, size, %{public}u, to, %{public}u, tile, %{private}s", buf, 0x22u);
          if ((v71[9] & 0x80000000) != 0) {
            operator delete(*(void **)v69);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CB28);
          }
          unsigned int v46 = *a2;
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(v65, a1);
          if (v66 >= 0) {
            v47 = v65;
          }
          else {
            v47 = (void **)v65[0];
          }
          *(_DWORD *)v69 = 134349827;
          *(double *)&v69[4] = v18 - v7;
          __int16 v70 = 1026;
          *(_DWORD *)v71 = v46;
          *(_WORD *)&v71[4] = 1026;
          *(_DWORD *)&v71[6] = v24;
          *(_WORD *)v72 = 2081;
          *(void *)&v72[2] = v47;
          char v48 = (char *)_os_log_send_and_compose_impl();
          if (v66 < 0) {
            operator delete(v65[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v48);
          if (v48 != buf) {
            free(v48);
          }
        }
      }
      else
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CB28);
        }
        __int16 v28 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          double v29 = &v68;
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            double v29 = (std::string *)v68.__r_.__value_.__r.__words[0];
          }
          __int16 v30 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          unsigned int v31 = *a2;
          *(_DWORD *)buf = 136446722;
          *(void *)&uint8_t buf[4] = v29;
          __int16 v74 = 2082;
          *(void *)v75 = v30;
          *(_WORD *)&v75[8] = 1026;
          *(_DWORD *)v76 = v31;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "TileFile, decompress, from, %{public}s, to, %{public}s, failed, %{public}u byte file, #CloneMe", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CB28);
          }
          v55 = &v68;
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            v55 = (std::string *)v68.__r_.__value_.__r.__words[0];
          }
          __int16 v56 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            __int16 v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          unsigned int v57 = *a2;
          *(_DWORD *)v69 = 136446722;
          *(void *)&v69[4] = v55;
          __int16 v70 = 2082;
          *(void *)v71 = v56;
          *(_WORD *)&v71[8] = 1026;
          *(_DWORD *)v72 = v57;
          v58 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v58);
          if (v58 != buf) {
            free(v58);
          }
        }
        BOOL v10 = 0;
      }
    }
    if (v78 >= 0) {
      __int16 v42 = v77;
    }
    else {
      __int16 v42 = *(const char **)v77;
    }
    sub_1004BEB14(v42);
    if (v78 < 0) {
      operator delete(*(void **)v77);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v25 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(buf, a1);
      __int16 v26 = v75[9] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)v69 = 136380675;
      *(void *)&v69[4] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "TileFile, decompress, file is not compressed, %{private}s", v69, 0xCu);
      if ((v75[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v69, a1);
      if (v71[9] >= 0) {
        char v44 = v69;
      }
      else {
        char v44 = *(unsigned char **)v69;
      }
      *(_DWORD *)v77 = 136380675;
      *(void *)&v77[4] = v44;
      std::string v45 = (char *)_os_log_send_and_compose_impl();
      if ((v71[9] & 0x80000000) != 0) {
        operator delete(*(void **)v69);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLTileFile::decompress(unsigned int &)", "%s\n", v45);
      if (v45 != buf) {
        free(v45);
      }
    }
    if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v27 = &v68;
    }
    else {
      std::string::size_type v27 = (std::string *)v68.__r_.__value_.__r.__words[0];
    }
    *a2 = sub_1004BC384((const char *)v27);
    BOOL v10 = 1;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_101047458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 121) < 0) {
    operator delete(*(void **)(v26 - 144));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010474E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100C0A028((int *)(a1 + 48));
  BOOL v5 = *(char **)v4;
  if (*(char *)(v4 + 23) >= 0) {
    BOOL v5 = (char *)v4;
  }
  __s = v5;
  std::string __p = 0;
  long long v47 = 0uLL;
  memset(&v45, 0, sizeof(v45));
  uint64_t v6 = &qword_102419000;
  do
  {
    sub_10010F274((uint64_t)v54);
    if (SHIBYTE(v47) < 0)
    {
      *(unsigned char *)std::string __p = 0;
      *(void *)&long long v47 = 0;
    }
    else
    {
      LOBYTE(__p) = 0;
      HIBYTE(v47) = 0;
    }
    int v7 = *(char *)(a2 + 23);
    if (v7 >= 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *(void *)a2;
    }
    if (v7 >= 0) {
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    BOOL v10 = sub_100132EFC(&v56[2], v8, v9);
    v48.__r_.__value_.__s.__data_[0] = 48;
    long long v11 = sub_10006E19C(v10, (char *)&v48);
    *(void *)((char *)v11 + *(void *)(*v11 - 24) + 24) = 8;
    ++dword_102482A58;
    std::ostream::operator<<();
    sub_100134750(&v44, __s);
    sub_100134750(buf, "/");
    if ((v52 & 0x80u) == 0) {
      long long v12 = buf;
    }
    else {
      long long v12 = *(const std::string::value_type **)buf;
    }
    if ((v52 & 0x80u) == 0) {
      std::string::size_type v13 = v52;
    }
    else {
      std::string::size_type v13 = *(void *)&buf[8];
    }
    int v14 = std::string::append(&v44, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::stringbuf::str();
    if ((v50 & 0x80u) == 0) {
      int v16 = v49;
    }
    else {
      int v16 = *(const std::string::value_type **)v49;
    }
    if ((v50 & 0x80u) == 0) {
      std::string::size_type v17 = v50;
    }
    else {
      std::string::size_type v17 = *(void *)&v49[8];
    }
    double v18 = std::string::append(&v48, v16, v17);
    int v19 = (void *)v18->__r_.__value_.__r.__words[0];
    v53[0] = v18->__r_.__value_.__l.__size_;
    *(void *)((char *)v53 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    char v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v47) < 0) {
      operator delete(__p);
    }
    std::string __p = v19;
    *(void *)&long long v47 = v53[0];
    *(void *)((char *)&v47 + 7) = *(void *)((char *)v53 + 7);
    HIBYTE(v47) = v20;
    if ((char)v50 < 0) {
      operator delete(*(void **)v49);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    if ((char)v52 < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    dword_102482A58 %= 0x989680u;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    BOOL v21 = v6[117];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      std::stringbuf::str();
      int v22 = SHIBYTE(v48.__r_.__value_.__r.__words[2]);
      std::string::size_type v23 = v48.__r_.__value_.__r.__words[0];
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v44, a1);
      unsigned int v24 = &v48;
      if (v22 < 0) {
        unsigned int v24 = (std::string *)v23;
      }
      int v25 = &v44;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v25 = (std::string *)v44.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446467;
      *(void *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&buf[14] = v25;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TileFile, generateUniqueFileName, trying, %{public}s, tile, %{private}s", buf, 0x16u);
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = &qword_102419000;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v48, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      std::stringbuf::str();
      int v27 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
      std::string::size_type v28 = v44.__r_.__value_.__r.__words[0];
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(buf, a1);
      double v29 = &v44;
      if (v27 < 0) {
        double v29 = (std::string *)v28;
      }
      __int16 v30 = buf;
      if ((v52 & 0x80u) != 0) {
        __int16 v30 = *(unsigned char **)buf;
      }
      *(_DWORD *)v49 = 136446467;
      *(void *)&v49[4] = v29;
      *(_WORD *)&v49[12] = 2081;
      *(void *)&v49[14] = v30;
      unsigned int v31 = (std::string *)_os_log_send_and_compose_impl();
      if ((char)v52 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v6 = &qword_102419000;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::generateUniqueFileName(const std::string &)", "%s\n", (const char *)v31);
      if (v31 != &v48) {
        free(v31);
      }
    }
    std::stringbuf::str();
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    std::string v45 = v48;
    *(void *)v54 = v42;
    *(void *)&v54[*(void *)(v42 - 24)] = v41;
    *(void *)&v56[2] = v40;
    if (v59 < 0) {
      operator delete(v58);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    if (v47 >= 0) {
      p_p = (const char *)&__p;
    }
    else {
      p_p = (const char *)__p;
    }
  }
  while (sub_1000A569C(p_p));
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v32 = &v45;
  }
  else {
    int v32 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  sub_101047E00(a1, (const std::string::value_type *)v32);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  BOOL v33 = v6[117];
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    __int16 v34 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v34 = (void *)*v34;
    }
    int v35 = (void *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0) {
      int v35 = (void *)*v35;
    }
    LODWORD(v48.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
    WORD2(v48.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v35;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "TileFile, generateUniqueFileName, end, localFilename, %{public}s, temp, %{public}s", (uint8_t *)&v48, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v48, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v37 = (void *)*v37;
    }
    __int16 v38 = (void *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0) {
      __int16 v38 = (void *)*v38;
    }
    *(_DWORD *)v54 = 136446466;
    *(void *)&v54[4] = v37;
    __int16 v55 = 2082;
    *(void *)__int16 v56 = v38;
    double v39 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::generateUniqueFileName(const std::string &)", "%s\n", (const char *)v39);
    if (v39 != &v48) {
      free(v39);
    }
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v47) < 0) {
    operator delete(__p);
  }
  return 1;
}

void sub_101047D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(a1);
}

void sub_101047E00(uint64_t a1, const std::string::value_type *a2)
{
  uint64_t v3 = (void *)(a1 + 8);
  std::string::assign((std::string *)(a1 + 8), a2);
  sub_10104A4EC();
  std::operator+<char>();
  uint64_t v4 = (void **)(a1 + 208);
  if (*(char *)(a1 + 231) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)buf;
  *(void *)(a1 + 224) = *(void *)&buf[16];
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  BOOL v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = v3;
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v6 = (void *)*v3;
    }
    int v7 = (void *)(a1 + 208);
    if (*(char *)(a1 + 231) < 0) {
      int v7 = *v4;
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TileFile, setLocalfilename, localFilename, %{public}s, tempFilename, %{public}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileFile::setLocalfilename(const char *)", "%s\n", v8);
    if (v8 != buf) {
      free(v8);
    }
  }
}

void sub_101048050(uint64_t a1@<X0>, std::string *a2@<X8>)
{
}

BOOL sub_101048060(uint64_t a1)
{
  sub_100C0A030((int *)(a1 + 48), a1 + 8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__p.__r_.__value_.__l.__size_)
    {
      BOOL v2 = 0;
LABEL_10:
      operator delete(__p.__r_.__value_.__l.__data_);
      return v2;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      return 0;
    }
    p_p = &__p;
  }
  BOOL v2 = sub_1000A569C((const char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_10;
  }
  return v2;
}

void sub_1010480E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101048104(uint64_t a1)
{
  sub_100C0A030((int *)(a1 + 48), a1 + 8, &__p);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  uint64_t v1 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = p_p;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "TileFile, deleteFile, unlink, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    uint64_t v6 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v6 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v9 = 136446210;
    BOOL v10 = v6;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileFile::deleteFile()", "%s\n", v7);
    if (v7 != buf) {
      free(v7);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &__p;
  }
  else {
    uint64_t v3 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1004BEB14((const char *)v3);
  uint64_t v4 = (const void **)sub_101048388();
  sub_1002F0A00((const void **)&__p.__r_.__value_.__l.__data_, v4, (uint64_t)buf);
  if (v12 >= 0) {
    BOOL v5 = buf;
  }
  else {
    BOOL v5 = *(const char **)buf;
  }
  sub_1004BEB14(v5);
  if (v12 < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_101048344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101048388()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102475B50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102475B50))
  {
    sub_100134750(qword_102475B38, ".plist");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_102475B38, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102475B50);
  }
  return qword_102475B38;
}

void sub_101048414(_Unwind_Exception *a1)
{
}

void sub_10104842C(uint64_t a1)
{
  sub_100C0A030((int *)(a1 + 48), a1 + 208, &__p);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  uint64_t v1 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136446210;
    BOOL v10 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "TileFile, deleteTempFile, unlink, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    uint64_t v4 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v4 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v7 = 136446210;
    uint64_t v8 = v4;
    BOOL v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileFile::deleteTempFile()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &__p;
  }
  else {
    uint64_t v3 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_1004BEB14((const char *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_101048630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101048658(uint64_t a1, int a2, int a3, double a4)
{
  LODWORD(v5) = a3;
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v80 = v8;
  (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
  __int16 v81 = 256;
  sub_100C0A030((int *)(a1 + 48), a1 + 208, &v79);
  sub_100C0A030((int *)(a1 + 48), a1 + 8, &v78);
  __int16 v74 = (unsigned int *)(a1 + 48);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  int v9 = &qword_102419000;
  BOOL v10 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v11 = v5;
    uint64_t v5 = *(void *)(a1 + 104);
    sub_1010496AC();
    if (__p[23] >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 67240962;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&buf[8] = 2050;
    *(void *)&buf[10] = v5;
    *(_WORD *)&buf[18] = 1026;
    LODWORD(v5) = v11;
    *(_DWORD *)&buf[20] = v11;
    *(_WORD *)&buf[24] = 2082;
    *(void *)&buf[26] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TileFile, onDownloadCompleted, success, %{public}d, fDownloadRequest, %{public}p, tileDoesNotExist, %{public}d, details, %{public}s", buf, 0x22u);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    int v9 = &qword_102419000;
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    int v49 = v5;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    uint64_t v5 = *(void *)(a1 + 104);
    sub_1010496AC();
    if (v84 >= 0) {
      unsigned __int8 v50 = v83;
    }
    else {
      unsigned __int8 v50 = *(unsigned char **)v83;
    }
    *(_DWORD *)std::string __p = 67240962;
    *(_DWORD *)&__p[4] = a2;
    *(_WORD *)&__p[8] = 2050;
    *(void *)&__p[10] = v5;
    *(_WORD *)&__p[18] = 1026;
    LOBYTE(v5) = v49;
    *(_DWORD *)&__p[20] = v49;
    *(_WORD *)&__p[24] = 2082;
    *(void *)&__p[26] = v50;
    int v51 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v84) < 0) {
      operator delete(*(void **)v83);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v51);
    if (v51 != buf) {
      free(v51);
    }
  }
  *(double *)(a1 + 160) = a4;
  *(double *)(a1 + 232) = a4;
  *(void *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 168) = a2;
  *(unsigned char *)(a1 + 32) = v5;
  *(void *)(a1 + 104) = 0;
  if (!a2)
  {
    if ((v5 & 1) == 0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      char v20 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(buf, a1);
        BOOL v21 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)std::string __p = 136380675;
        *(void *)&__p[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "TileFile, tile, %{private}s, download failed, #CloneMe", __p, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CB28);
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
        if (__p[23] >= 0) {
          v60 = __p;
        }
        else {
          v60 = *(unsigned char **)__p;
        }
        *(_DWORD *)v83 = 136380675;
        *(void *)&v83[4] = v60;
        int v61 = (char *)_os_log_send_and_compose_impl();
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v61);
        if (v61 != buf) {
          free(v61);
        }
      }
    }
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v22 = &v79;
    }
    else {
      int v22 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    sub_1004BEB14((const char *)v22);
    goto LABEL_96;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  std::string::size_type v13 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v14 = &v79;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v14 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    long long v15 = &v78;
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v15 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TileFile, copy from, %{public}s, to, %{public}s, start", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    unsigned __int8 v52 = &v79;
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned __int8 v52 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    __int16 v53 = &v78;
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v53 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string __p = 136446466;
    *(void *)&__p[4] = v52;
    *(_WORD *)&unsigned char __p[12] = 2082;
    *(void *)&__p[14] = v53;
    v54 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v54);
    if (v54 != buf) {
      free(v54);
    }
  }
  *(void *)v83 = "";
  *(_WORD *)&v83[8] = 0;
  uint64_t v84 = nullsub_41(0, v16);
  *(void *)v83 = "CLTileFile::onDownloadCompleted";
  *(_WORD *)&v83[8] = 1;
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = &v79;
  }
  else {
    std::string::size_type v17 = (std::string *)v79.__r_.__value_.__r.__words[0];
  }
  sub_100134750(buf, (char *)v17);
  sub_101049A48((void *)a1, (uint64_t)buf, (uint64_t)v83);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  int v18 = *(_DWORD *)(a1 + 184);
  if (v18) {
    BOOL v19 = v18 >= (*(int (**)(uint64_t))(*(void *)a1 + 48))(a1);
  }
  else {
    BOOL v19 = 1;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  unsigned int v24 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    char v25 = v5;
    int v26 = *(_DWORD *)(a1 + 184);
    int v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    if (__p[23] >= 0) {
      std::string::size_type v28 = __p;
    }
    else {
      std::string::size_type v28 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 67240963;
    *(_DWORD *)&uint8_t buf[4] = v26;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v27;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v19;
    *(_WORD *)&buf[20] = 2081;
    *(void *)&unsigned char buf[22] = v28;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, tile, %{private}s", buf, 0x1Eu);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    LOBYTE(v5) = v25;
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    char v55 = v5;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v56 = *(_DWORD *)(a1 + 184);
    int v57 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(v76, a1);
    if (v77 >= 0) {
      v58 = v76;
    }
    else {
      v58 = (void **)v76[0];
    }
    *(_DWORD *)std::string __p = 67240963;
    *(_DWORD *)&__p[4] = v56;
    *(_WORD *)&__p[8] = 1026;
    *(_DWORD *)&__p[10] = v57;
    *(_WORD *)&__p[14] = 1026;
    *(_DWORD *)&__p[16] = v19;
    *(_WORD *)&__p[20] = 2081;
    *(void *)&__p[22] = v58;
    char v59 = (char *)_os_log_send_and_compose_impl();
    if (v77 < 0) {
      operator delete(v76[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v59);
    int v9 = &qword_102419000;
    LOBYTE(v5) = v55;
    if (v59 != buf) {
      free(v59);
    }
  }
  if (!v19)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    uint64_t v42 = v9[117];
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      int v43 = *(_DWORD *)(a1 + 184);
      int v44 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      unsigned int v45 = *v74;
      unsigned int v46 = sub_100147F50(*v74);
      *(_DWORD *)buf = 67241218;
      *(_DWORD *)&uint8_t buf[4] = v43;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v44;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = 0;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&unsigned char buf[22] = v45;
      *(_WORD *)&buf[26] = 2082;
      *(void *)&buf[28] = v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "TileFile, onDownloadCompleted, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, type, %{public}d, %{public}s, #CloneMe", buf, 0x24u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      int v62 = *(_DWORD *)(a1 + 184);
      int v63 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
      unsigned int v64 = *v74;
      v65 = sub_100147F50(*v74);
      *(_DWORD *)std::string __p = 67241218;
      *(_DWORD *)&__p[4] = v62;
      *(_WORD *)&__p[8] = 1026;
      *(_DWORD *)&__p[10] = v63;
      *(_WORD *)&__p[14] = 1026;
      *(_DWORD *)&__p[16] = 0;
      *(_WORD *)&__p[20] = 1026;
      *(_DWORD *)&__p[22] = v64;
      *(_WORD *)&__p[26] = 2082;
      *(void *)&__p[28] = v65;
      char v66 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v66);
      if (v66 != buf) {
        free(v66);
      }
    }
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v47 = &v79;
    }
    else {
      long long v47 = (std::string *)v79.__r_.__value_.__r.__words[0];
    }
    sub_1004BEB14((const char *)v47);
LABEL_96:
    BOOL v33 = 0;
    goto LABEL_97;
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v30 = (const std::__fs::filesystem::path *)&v79;
  }
  else {
    __int16 v30 = (const std::__fs::filesystem::path *)v79.__r_.__value_.__r.__words[0];
  }
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v31 = (const std::__fs::filesystem::path *)&v78;
  }
  else {
    unsigned int v31 = (const std::__fs::filesystem::path *)v78.__r_.__value_.__r.__words[0];
  }
  BOOL v32 = sub_1004BB3CC(v30, v31, v29);
  BOOL v33 = v32;
  if (!v32)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    __int16 v34 = v9[117];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      char v35 = v5;
      __int16 v36 = &v79;
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v36 = (std::string *)v79.__r_.__value_.__r.__words[0];
      }
      v75 = v36;
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v37 = &v78;
      }
      else {
        int v37 = (std::string *)v78.__r_.__value_.__r.__words[0];
      }
      LODWORD(v5) = *__error();
      __int16 v38 = __error();
      double v39 = strerror(*v38);
      *(_DWORD *)buf = 136446978;
      *(void *)&uint8_t buf[4] = v75;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v37;
      *(_WORD *)&unsigned char buf[22] = 1026;
      *(_DWORD *)&buf[24] = v5;
      *(_WORD *)&buf[28] = 2082;
      *(void *)&buf[30] = v39;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "TileFile, failed to move from, %{public}s, to, %{public}s, errno, %{public}d, %{public}s, #CloneMe", buf, 0x26u);
      LOBYTE(v5) = v35;
    }
    if (sub_10013D1A0(115, 0))
    {
      char v67 = v5;
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v68 = &v79;
      }
      else {
        std::string v68 = (std::string *)v79.__r_.__value_.__r.__words[0];
      }
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v69 = &v78;
      }
      else {
        v69 = (std::string *)v78.__r_.__value_.__r.__words[0];
      }
      int v70 = *__error();
      v71 = __error();
      v72 = strerror(*v71);
      *(_DWORD *)std::string __p = 136446978;
      *(void *)&__p[4] = v68;
      *(_WORD *)&unsigned char __p[12] = 2082;
      *(void *)&__p[14] = v69;
      *(_WORD *)&__p[22] = 1026;
      *(_DWORD *)&__p[24] = v70;
      *(_WORD *)&__p[28] = 2082;
      *(void *)&__p[30] = v72;
      v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFile::onDownloadCompleted(BOOL, BOOL, CFAbsoluteTime)", "%s\n", v73);
      if (v73 != buf) {
        free(v73);
      }
      LOBYTE(v5) = v67;
    }
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v40 = &v78;
    }
    else {
      uint64_t v40 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    sub_1004BEB14((const char *)v40);
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v41 = &v79;
  }
  else {
    uint64_t v41 = (std::string *)v79.__r_.__value_.__r.__words[0];
  }
  sub_1004BEB14((const char *)v41);
  if (*(double *)(a1 + 176) <= 0.0) {
    *(double *)(a1 + 176) = a4;
  }
  if (*(int *)(a1 + 200) <= 0) {
    *(_DWORD *)(a1 + 200) = 1209600;
  }
  v23.n128_u64[0] = qword_102475AF8;
  if (*(double *)&qword_102475AF8 >= 0.0) {
    *(_DWORD *)(a1 + 200) = (int)*(double *)&qword_102475AF8;
  }
  if (v32 && (v5 & 1) == 0) {
    sub_10104A2AC(a1);
  }
LABEL_97:
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, __n128))(*(void *)v8 + 24))(v8, v23);
  return v33;
}

void sub_1010495F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  sub_1019DB560((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_1010496AC()
{
  sub_10010F274((uint64_t)v16);
  CFAbsoluteTimeGetCurrent();
  v0 = sub_100132EFC(v17, (uint64_t)"tileFileDownloadDetails", 23);
  sub_100132EFC(v0, (uint64_t)", cellIfCurrent, ", 17);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_100132EFC(v1, (uint64_t)", cellIfNotCurrent, ", 20);
  BOOL v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)", redownload, ", 14);
  uint64_t v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)", timeout, ", 11);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 16) = 1;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v4 + *(void *)(v5 - 24) + 8) & 0xFFFFFEFB | 4;
  uint64_t v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)", numNeighbors, ", 16);
  int v7 = (void *)std::ostream::operator<<();
  uint64_t v8 = sub_100132EFC(v7, (uint64_t)", timestamp, ", 13);
  uint64_t v9 = *v8;
  *(uint64_t *)((char *)v8 + *(void *)(*v8 - 24) + 16) = 1;
  *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(v9 - 24) + 8) & 0xFFFFFEFB | 4;
  BOOL v10 = (void *)std::ostream::operator<<();
  int v11 = sub_100132EFC(v10, (uint64_t)", age, ", 7);
  uint64_t v12 = *v11;
  *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 16) = 1;
  *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::string::size_type v13 = (void *)std::ostream::operator<<();
  sub_100132EFC(v13, (uint64_t)", decompress, ", 14);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)v16
  v17[0] = v14;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101049A28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101049A48(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[5];
  uint64_t v42 = v6;
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  __int16 v43 = 256;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__filename, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__filename = *(_OWORD *)a2;
    uint64_t v41 = *(void *)(a2 + 16);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  int v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = __filename;
    if (v41 < 0) {
      uint64_t v8 = *(char **)__filename;
    }
    int v9 = *(unsigned __int8 *)(a3 + 8);
    int v10 = *(unsigned __int8 *)(a3 + 9);
    *(_DWORD *)buf = 136446722;
    int v51 = v8;
    __int16 v52 = 1026;
    int v53 = v9;
    __int16 v54 = 1024;
    LODWORD(v55[0]) = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileFile, readTileFileByFileName, start, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v26 = __filename;
    if (v41 < 0) {
      int v26 = *(char **)__filename;
    }
    int v27 = *(unsigned __int8 *)(a3 + 8);
    int v28 = *(unsigned __int8 *)(a3 + 9);
    int v44 = 136446722;
    unsigned int v45 = v26;
    __int16 v46 = 1026;
    int v47 = v27;
    __int16 v48 = 1024;
    *(_DWORD *)int v49 = v28;
    double v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  if (SHIBYTE(v41) < 0)
  {
    int v11 = *(char **)__filename;
    if (*(void *)&__filename[8] != 1) {
      goto LABEL_32;
    }
    int v12 = **(unsigned char **)__filename;
  }
  else
  {
    int v11 = __filename;
    if (SHIBYTE(v41) != 1) {
      goto LABEL_32;
    }
    int v12 = __filename[0];
  }
  if (v12 == 45)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    std::string::size_type v13 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TileFile, readTileFileByFileName, reading input from stdin", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      LOWORD(v44) = 0;
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    uint64_t v14 = __stdinp;
    if (!__stdinp) {
      goto LABEL_23;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t v14 = fopen(v11, "r");
  if (!v14)
  {
LABEL_23:
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    long long v15 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      if (v41 >= 0) {
        uint64_t v16 = __filename;
      }
      else {
        uint64_t v16 = *(char **)__filename;
      }
      int v17 = *__error();
      char v18 = __error();
      BOOL v19 = strerror(*v18);
      *(_DWORD *)buf = 136446722;
      int v51 = v16;
      __int16 v52 = 1026;
      int v53 = v17;
      __int16 v54 = 2082;
      v55[0] = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "TileFile, failed to open, %{public}s, errno, %{public}d, %{public}s, #CloneMe", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      if (v41 >= 0) {
        char v35 = __filename;
      }
      else {
        char v35 = *(char **)__filename;
      }
      int v36 = *__error();
      int v37 = __error();
      __int16 v38 = strerror(*v37);
      int v44 = 136446722;
      unsigned int v45 = v35;
      __int16 v46 = 1026;
      int v47 = v36;
      __int16 v48 = 2082;
      *(void *)int v49 = v38;
      double v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
    uint64_t v20 = 0;
    goto LABEL_35;
  }
LABEL_33:
  uint64_t v20 = (*(uint64_t (**)(void *, FILE *, uint64_t))(*a1 + 88))(a1, v14, a3);
  if (v14 != __stdinp) {
    fclose(v14);
  }
LABEL_35:
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  BOOL v21 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v22 = __filename;
    if (v41 < 0) {
      int v22 = *(char **)__filename;
    }
    int v23 = *(unsigned __int8 *)(a3 + 8);
    int v24 = *(unsigned __int8 *)(a3 + 9);
    *(_DWORD *)buf = 136446978;
    int v51 = v22;
    __int16 v52 = 1026;
    int v53 = v23;
    __int16 v54 = 1026;
    LODWORD(v55[0]) = v24;
    WORD2(v55[0]) = 1026;
    *(_DWORD *)((char *)v55 + 6) = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TileFile, readTileFileByFileName, done, file, %{public}s, isHeadersOnly, %{public}d, isBinarySearch, %{public}d, isOK, %{public}d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    __int16 v30 = __filename;
    if (v41 < 0) {
      __int16 v30 = *(char **)__filename;
    }
    int v31 = *(unsigned __int8 *)(a3 + 8);
    int v32 = *(unsigned __int8 *)(a3 + 9);
    int v44 = 136446978;
    unsigned int v45 = v30;
    __int16 v46 = 1026;
    int v47 = v31;
    __int16 v48 = 1026;
    *(_DWORD *)int v49 = v32;
    *(_WORD *)&v49[4] = 1026;
    *(_DWORD *)&v49[6] = v20;
    BOOL v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::readTileFileByFileName(const std::string &, const TraverseDetails &)", "%s\n", v33);
    if (v33 != (char *)buf) {
      free(v33);
    }
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(*(void **)__filename);
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return v20;
}

void sub_10104A254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1019DB560((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10104A2AC(uint64_t a1)
{
  uint64_t v2 = sub_10104C754(a1, 3);
  if (v2)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    uint64_t v3 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = sub_100147F50(*(_DWORD *)(a1 + 48));
      *(_DWORD *)buf = 136446723;
      int v10 = v4;
      __int16 v11 = 2049;
      double v12 = sub_10013DAC0(a1 + 48);
      __int16 v13 = 2049;
      double v14 = sub_10013DA9C(a1 + 48);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "@TileList, %{public}s, unlocked, llsw, %{private}.2lf, %{private}.2lf, ClassC", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      unsigned int v7 = *(_DWORD *)(a1 + 48);
      uint64_t v6 = a1 + 48;
      sub_100147F50(v7);
      sub_10013DAC0(v6);
      sub_10013DA9C(v6);
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::unlockTile()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return v2;
}

void *sub_10104A4EC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102475B70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102475B70))
  {
    sub_100134750(qword_102475B58, ".download");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_102475B58, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102475B70);
  }
  return qword_102475B58;
}

void sub_10104A578(_Unwind_Exception *a1)
{
}

void sub_10104A590(uint64_t a1, int a2, unsigned int *a3, double a4)
{
  v11[0] = a2;
  if (a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230CB48);
    }
    int v9 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileFile.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1000;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = "tileType == CLTilesManager_Type::TileType::WIFI_Location";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230CB48);
      }
      v11[1] = 136315650;
      double v12 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileFile.mm";
      __int16 v13 = 1024;
      int v14 = 1000;
      __int16 v15 = 2080;
      uint64_t v16 = "tileType == CLTilesManager_Type::TileType::WIFI_Location";
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTileFile::extractPropertiesFromTileHeader(CLTilesManager_Type::TileType, const CLWifiTileHeaderEntry &, CFAbsoluteTime)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
    sub_1004BA578();
  }
  sub_10014F674((uint64_t)buf, v11);
  *(_DWORD *)&uint8_t buf[4] = sub_1006D40B0(a3);
  *(_DWORD *)&buf[8] = sub_100C8D88C((uint64_t)a3);
  *(void *)&buf[16] = -1;
  *(void *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)buf;
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)&buf[24]);
  *(unsigned char *)(a1 + 168) = 1;
  *(double *)(a1 + 160) = a4;
  double v7 = sub_100C8D8BC((uint64_t)a3);
  *(double *)(a1 + 232) = v7;
  *(double *)(a1 + 192) = v7;
  *(_DWORD *)(a1 + 288) = 2;
  *(double *)(a1 + 176) = sub_100C8D8A4((uint64_t)a3);
  int v8 = sub_100C8D8AC((uint64_t)a3);
  *(_DWORD *)(a1 + 200) = v8;
  *(_DWORD *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (v8 <= 0) {
    *(_DWORD *)(a1 + 200) = 1209600;
  }
  if (*(double *)&qword_102475AF8 >= 0.0) {
    *(_DWORD *)(a1 + 200) = (int)*(double *)&qword_102475AF8;
  }
  if (v18 < 0) {
    operator delete(*(void **)&buf[24]);
  }
}

void sub_10104A87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t sub_10104A8A0(uint64_t *a1, char *a2, std::string::value_type *a3, int a4, int a5, double a6)
{
  int v70 = "";
  __int16 v71 = 0;
  uint64_t v72 = nullsub_41(0, a2);
  if (*a2)
  {
    sub_100134750(v75, a2);
    sub_100134750(__p, "/");
    if ((v68 & 0x80u) == 0) {
      double v12 = __p;
    }
    else {
      double v12 = (void **)__p[0];
    }
    if ((v68 & 0x80u) == 0) {
      std::string::size_type v13 = v68;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    int v14 = std::string::append((std::string *)v75, (const std::string::value_type *)v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(void *)&v79[16] = *((void *)&v14->__r_.__value_.__l + 2);
    *(_OWORD *)std::string v79 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append((std::string *)v79, a3);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((v79[23] & 0x80000000) != 0) {
      operator delete(*(void **)v79);
    }
    if ((char)v68 < 0) {
      operator delete(__p[0]);
    }
    if ((v76[9] & 0x80000000) != 0) {
      operator delete(*(void **)v75);
    }
  }
  else
  {
    sub_100134750(&v69, a3);
  }
  if (sub_1000A569C(a3))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    char v18 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string v79 = 136446210;
      *(void *)&v79[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TileFile,: extractTileIdFromFile, prefer local file name because it exists, %{public}s", v79, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v79, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      *(_DWORD *)v75 = 136446210;
      *(void *)&v75[4] = a3;
      int v56 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v56);
      if (v56 != v79) {
        free(v56);
      }
    }
    std::string::assign(&v69, a3);
  }
  BOOL v19 = (const void **)sub_101048388();
  sub_1002F0A00((const void **)&v69.__r_.__value_.__l.__data_, v19, (uint64_t)__p);
  sub_101047E00((uint64_t)a1, a3);
  int v70 = "extractTileIdFromFile";
  __int16 v71 = a5;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  uint64_t v20 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    BOOL v21 = &v69;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v21 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string v79 = 136447234;
    *(void *)&v79[4] = a2;
    *(_WORD *)&v79[12] = 2082;
    *(void *)&v79[14] = a3;
    *(_WORD *)&v79[22] = 2082;
    *(void *)&v79[24] = v21;
    LOWORD(v80) = 1026;
    *(_DWORD *)((char *)&v80 + 2) = a4;
    HIWORD(v80) = 1026;
    int v81 = a5;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TileFile, extractTileIdFromFile, directory, %{public}s, filename, %{public}s, absFilename, %{public}s, type, %{public}d, isHeadersOnly, %{public}d", v79, 0x2Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v79, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    __int16 v54 = &v69;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v54 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)v75 = 136447234;
    *(void *)&v75[4] = a2;
    *(_WORD *)&v75[12] = 2082;
    *(void *)v76 = a3;
    *(_WORD *)&v76[8] = 2082;
    *(void *)&v76[10] = v54;
    LOWORD(v77) = 1026;
    *(_DWORD *)((char *)&v77 + 2) = a4;
    HIWORD(v77) = 1026;
    int v78 = a5;
    char v55 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v55);
    if (v55 != v79) {
      free(v55);
    }
  }
  if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &v69;
  }
  else {
    int v22 = (std::string *)v69.__r_.__value_.__r.__words[0];
  }
  int v23 = fopen((const char *)v22, "rb");
  if (!v23)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v26 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v27 = &v69;
      }
      else {
        int v27 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      int v28 = *__error();
      double v29 = __error();
      __int16 v30 = strerror(*v29);
      *(_DWORD *)std::string v79 = 136446722;
      *(void *)&v79[4] = v27;
      *(_WORD *)&v79[12] = 1026;
      *(_DWORD *)&v79[14] = v28;
      *(_WORD *)&v79[18] = 2082;
      *(void *)&v79[20] = v30;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "TileFile, extractTileIdFromFile, failed to open file, %{public}s, errno, %{public}d, %{public}s, #CloneMe", v79, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_106;
    }
    bzero(v79, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v31 = &v69;
    }
    else {
      int v31 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    int v32 = *__error();
    BOOL v33 = __error();
    __int16 v34 = strerror(*v33);
    *(_DWORD *)v75 = 136446722;
    *(void *)&v75[4] = v31;
    *(_WORD *)&v75[12] = 1026;
    *(_DWORD *)v76 = v32;
    *(_WORD *)&v76[4] = 2082;
    *(void *)&v76[6] = v34;
    char v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v35);
LABEL_62:
    if (v35 == v79) {
      goto LABEL_106;
    }
    goto LABEL_63;
  }
  if (((*(uint64_t (**)(uint64_t *, FILE *, const char **))(*a1 + 88))(a1, v23, &v70) & 1) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v36 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      int v37 = &v69;
      if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v37 = (std::string *)v69.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string v79 = 136446210;
      *(void *)&v79[4] = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "TileFile, extractTileIdFromFile, failed, %{public}s, #CloneMe", v79, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_106;
    }
    bzero(v79, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    __int16 v38 = &v69;
    if ((v69.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v38 = (std::string *)v69.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)v75 = 136446210;
    *(void *)&v75[4] = v38;
    char v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v35);
    goto LABEL_62;
  }
  int v24 = *((_DWORD *)a1 + 46);
  if (v24) {
    BOOL v25 = v24 >= (*(int (**)(uint64_t *))(*a1 + 48))(a1);
  }
  else {
    BOOL v25 = 1;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  double v39 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    int v40 = *((_DWORD *)a1 + 46);
    int v41 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
    double v42 = (*(double (**)(uint64_t *))(*a1 + 56))(a1);
    double v43 = (*(double (**)(uint64_t *))(*a1 + 64))(a1);
    *(_DWORD *)std::string v79 = 67241216;
    *(_DWORD *)&v79[4] = v40;
    *(_WORD *)&v79[8] = 1026;
    *(_DWORD *)&v79[10] = v41;
    *(_WORD *)&v79[14] = 1026;
    *(_DWORD *)&v79[16] = v25;
    *(_WORD *)&v79[20] = 2050;
    *(double *)&v79[22] = v42;
    *(_WORD *)&v79[30] = 2050;
    double v80 = v43;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "TileFile, extractTileIdFromFile, tile version, %{public}d, min version, %{public}d, isVersionOk, %{public}d, dLat, %{public}.5lf, dLon, %{public}.5lf", v79, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v79, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v57 = *((_DWORD *)a1 + 46);
    int v58 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
    double v59 = (*(double (**)(uint64_t *))(*a1 + 56))(a1);
    double v60 = (*(double (**)(uint64_t *))(*a1 + 64))(a1);
    *(_DWORD *)v75 = 67241216;
    *(_DWORD *)&v75[4] = v57;
    *(_WORD *)&v75[8] = 1026;
    *(_DWORD *)&unsigned char v75[10] = v58;
    *(_WORD *)v76 = 1026;
    *(_DWORD *)&v76[2] = v25;
    *(_WORD *)&v76[6] = 2050;
    *(double *)&v76[8] = v59;
    *(_WORD *)&v76[16] = 2050;
    double v77 = v60;
    int v61 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v61);
    if (v61 != v79) {
      free(v61);
    }
    if (v25) {
      goto LABEL_71;
    }
LABEL_106:
    sub_100C09438((uint64_t)(a1 + 6));
    uint64_t v50 = 0;
    if (!v23) {
      goto LABEL_108;
    }
    goto LABEL_107;
  }
  if (!v25) {
    goto LABEL_106;
  }
LABEL_71:
  int v45 = *((_DWORD *)a1 + 13);
  int v44 = *((_DWORD *)a1 + 14);
  (*(void (**)(uint64_t *))(*a1 + 56))(a1);
  (*(void (**)(uint64_t *))(*a1 + 64))(a1);
  sub_1001468EC((uint64_t)(a1 + 6), v44, v45, a1[8]);
  if (!sub_1001449D8((uint64_t)(a1 + 6)))
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v51 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a1 + 16))(v79, a1);
      __int16 v52 = v79[23] >= 0 ? v79 : *(unsigned char **)v79;
      *(_DWORD *)v75 = 136380675;
      *(void *)&v75[4] = v52;
      _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "TileFile, extractTileIdFromFile, invalid hash value for, %{private}s, #CloneMe", v75, 0xCu);
      if ((v79[23] & 0x80000000) != 0) {
        operator delete(*(void **)v79);
      }
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_106;
    }
    bzero(v79, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a1 + 16))(v75, a1);
    if (v76[9] >= 0) {
      unsigned int v64 = v75;
    }
    else {
      unsigned int v64 = *(unsigned char **)v75;
    }
    int v73 = 136380675;
    __int16 v74 = v64;
    char v35 = (char *)_os_log_send_and_compose_impl();
    if ((v76[9] & 0x80000000) != 0) {
      operator delete(*(void **)v75);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v35);
    if (v35 == v79) {
      goto LABEL_106;
    }
LABEL_63:
    free(v35);
    goto LABEL_106;
  }
  *((unsigned char *)a1 + 168) = 1;
  *((double *)a1 + 20) = a6;
  *((double *)a1 + 29) = a6;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  __int16 v46 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a1 + 16))(v79, a1);
    int v47 = v79[23] >= 0 ? v79 : *(unsigned char **)v79;
    *(_DWORD *)v75 = 136380675;
    *(void *)&v75[4] = v47;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "TileFile, extractTileIdFromFile, read tileid from file, %{private}s", v75, 0xCu);
    if ((v79[23] & 0x80000000) != 0) {
      operator delete(*(void **)v79);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(v79, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t *))(*a1 + 16))(v75, a1);
    if (v76[9] >= 0) {
      int v62 = v75;
    }
    else {
      int v62 = *(unsigned char **)v75;
    }
    int v73 = 136380675;
    __int16 v74 = v62;
    int v63 = (char *)_os_log_send_and_compose_impl();
    if ((v76[9] & 0x80000000) != 0) {
      operator delete(*(void **)v75);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v63);
    if (v63 != v79) {
      free(v63);
    }
  }
  if (a4)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    __int16 v48 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      int v49 = __p;
      if ((v68 & 0x80u) != 0) {
        int v49 = (void **)__p[0];
      }
      *(_DWORD *)std::string v79 = 136446210;
      *(void *)&v79[4] = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "TileFile, extractTileIdFromFile, read, absFilenameParams, %{public}s", v79, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(v79, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      v65 = __p;
      if ((v68 & 0x80u) != 0) {
        v65 = (void **)__p[0];
      }
      *(_DWORD *)v75 = 136446210;
      *(void *)&v75[4] = v65;
      char v66 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, BOOL, CFAbsoluteTime)", "%s\n", v66);
      if (v66 != v79) {
        free(v66);
      }
    }
    sub_10104BAE0((uint64_t)a1, (uint64_t)__p);
  }
  if (*((double *)a1 + 22) <= 0.0) {
    *((double *)a1 + 22) = a6;
  }
  if (*((int *)a1 + 50) <= 0) {
    *((_DWORD *)a1 + 50) = 1209600;
  }
  if (*(double *)&qword_102475AF8 >= 0.0) {
    *((_DWORD *)a1 + 50) = (int)*(double *)&qword_102475AF8;
  }
  uint64_t v50 = 1;
LABEL_107:
  fclose(v23);
LABEL_108:
  *((_DWORD *)a1 + 72) = sub_10104BDA0((uint64_t)a1);
  if ((char)v68 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v69.__r_.__value_.__l.__data_);
  }
  return v50;
}

void sub_10104BA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10104BAE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v15 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v16 = 256;
  sub_10104DA2C(a2, (uint64_t)&v13);
  int v5 = v14;
  if (v14) {
    *(void *)(a1 + 232) = v13;
  }
  else {
    sub_10104D5C4(a1);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    uint64_t v8 = *(void *)(a1 + 232);
    *(_DWORD *)buf = 67240706;
    int v24 = v5;
    __int16 v25 = 2082;
    uint64_t v26 = v7;
    __int16 v27 = 2050;
    uint64_t v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TileFile, paramsFileExist, %{public}d, loading, %{public}s, accessTimestamp, %{public}.1lf", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v10 = a2;
    }
    else {
      uint64_t v10 = *(void *)a2;
    }
    uint64_t v11 = *(void *)(a1 + 232);
    int v17 = 67240706;
    int v18 = v5;
    __int16 v19 = 2082;
    uint64_t v20 = v10;
    __int16 v21 = 2050;
    uint64_t v22 = v11;
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileFile::loadPersistentPropertiesFromFile(const std::string &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
}

void sub_10104BD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10104BDA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  uint64_t v3 = *(unsigned int *)(a1 + 288);
  if (!v3)
  {
    sub_100C0A030((int *)(a1 + 48), a1 + 8, &v15);
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v4 = &v15;
    }
    else {
      uint64_t v4 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    int v5 = open((const char *)v4, 2);
    if (v5 < 0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      uint64_t v7 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = &v15;
        if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v8 = (std::string *)v15.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136446210;
        unsigned __int8 v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileFile, getProtectionClass, failed to open, %{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CB28);
        }
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLTileFile::ProtectionClass CLTileFile::getProtectionClass()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = 0;
    }
    else
    {
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = fcntl(v5, 63);
      uint64_t v3 = v6;
      if ((v6 - 1) >= 4)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CB28);
        }
        int v9 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67240192;
          LODWORD(v14) = v3;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "TileFile, getProtectionClass, failed to set protection class, %{public}d, #CloneMe", buf, 8u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CB28);
          }
          LODWORD(v15.__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(v15.__r_.__value_.__r.__words[0]) = v3;
          double v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLTileFile::ProtectionClass CLTileFile::getProtectionClass()", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
      }
      else
      {
        *(_DWORD *)(a1 + 288) = v6;
      }
      close(v5);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3;
}

void sub_10104C1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_10104C204(uint64_t a1, unsigned int a2, unsigned int a3, double *a4, double *a5)
{
  unsigned int v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  double v11 = sub_10013DAC0(a1 + 48);
  double v12 = (*(double (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *a4 = v11 + (double)a2 / (double)v10 * v12 + v12 / (double)v10 * 0.5;
  LODWORD(a4) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  double v13 = sub_10013DA9C(a1 + 48);
  double v14 = (*(double (**)(uint64_t))(*(void *)a1 + 64))(a1);
  double result = v13 + (double)a3 / (double)a4 * v14 + v14 / (double)a4 * 0.5;
  *a5 = result;
  return result;
}

BOOL sub_10104C358(const char *a1, uint64_t a2)
{
  if (!a1)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "TileFile,filename==nullptr", buf, 2u);
    }
    BOOL v6 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (!v6) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1)
    {
LABEL_27:
      uint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLTileFile::setProtectionClass(const char *, ProtectionClass)", "%s\n");
LABEL_28:
      if (v8 != buf) {
        free(v8);
      }
      return 0;
    }
LABEL_31:
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
    goto LABEL_27;
  }
  int v2 = a2;
  if (sub_1004BF004(a1, a2)) {
    return 1;
  }
  if ((v2 - 1) >= 2)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v12) = v2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "TileFile,setProtectionClass,failed,protectionClass,%{public}d,#CloneMe", buf, 8u);
    }
    BOOL v10 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (!v10) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 == -1) {
      goto LABEL_27;
    }
    goto LABEL_31;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  uint64_t v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    double v12 = a1;
    __int16 v13 = 1026;
    int v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TileFile,setProtectionClass,failed,%{public}s,protectionClass,%{public}d", buf, 0x12u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    uint64_t v8 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLTileFile::setProtectionClass(const char *, ProtectionClass)", "%s\n");
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_10104C754(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v20 = v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  __int16 v21 = 256;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  int v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 16))(v23, a1);
    BOOL v6 = v27 >= 0 ? v23 : *(unsigned char **)v23;
    int v7 = *(_DWORD *)(a1 + 288);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136381187;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = a2;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TileFile, setProtectionClass, tile, %{private}s, newClass, %{public}d, curClass, %{public}d", (uint8_t *)buf, 0x18u);
    if (SHIBYTE(v27) < 0) {
      operator delete(*(void **)v23);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    if (v19 >= 0) {
      int v14 = __p;
    }
    else {
      int v14 = (void **)__p[0];
    }
    int v15 = *(_DWORD *)(a1 + 288);
    *(_DWORD *)int v23 = 136381187;
    *(void *)&v23[4] = v14;
    __int16 v24 = 1026;
    int v25 = a2;
    __int16 v26 = 1026;
    int v27 = v15;
    __int16 v16 = (std::string *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::setProtectionClass(ProtectionClass)", "%s\n", (const char *)v16);
    if (v16 != buf) {
      free(v16);
    }
  }
  if (*(_DWORD *)(a1 + 288) == a2) {
    goto LABEL_11;
  }
  if ((a2 - 1) >= 4)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    double v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "TileFile, setProtectionClass, invalid protectionClass, %{public}d, #CloneMe", (uint8_t *)buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      *(_DWORD *)int v23 = 67240192;
      *(_DWORD *)&v23[4] = a2;
      int v17 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTileFile::setProtectionClass(ProtectionClass)", "%s\n", (const char *)v17);
      if (v17 != buf) {
        free(v17);
      }
    }
    goto LABEL_24;
  }
  sub_100C0A030((int *)(a1 + 48), a1 + 8, buf);
  if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v9 = buf;
  }
  else {
    int v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
  }
  BOOL v10 = sub_10104C358((const char *)v9, a2);
  BOOL v11 = v10;
  if ((SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v10) {
      goto LABEL_27;
    }
LABEL_24:
    uint64_t v8 = 0;
    goto LABEL_25;
  }
  operator delete(buf[0].__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_24;
  }
LABEL_27:
  *(_DWORD *)(a1 + 288) = a2;
LABEL_11:
  uint64_t v8 = 1;
LABEL_25:
  (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  return v8;
}

void sub_10104CC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

uint64_t sub_10104CC50(uint64_t a1, int a2)
{
  uint64_t v4 = sub_10104C754(a1, 2);
  if (v4)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    int v5 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      BOOL v6 = sub_100147F50(*(_DWORD *)(a1 + 48));
      if (a2) {
        int v7 = "locked";
      }
      else {
        int v7 = "unlocked";
      }
      *(_DWORD *)buf = 136447235;
      __int16 v13 = v6;
      __int16 v14 = 2082;
      int v15 = v7;
      __int16 v16 = 2049;
      double v17 = sub_10013DAC0(a1 + 48);
      __int16 v18 = 2049;
      double v19 = sub_10013DA9C(a1 + 48);
      __int16 v20 = 1026;
      int v21 = 66;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@TileList, %{public}s, %{public}s, llsw, %{private}.2lf, %{private}.2lf, Class%{public}c", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      unsigned int v10 = *(_DWORD *)(a1 + 48);
      uint64_t v9 = a1 + 48;
      sub_100147F50(v10);
      sub_10013DAC0(v9);
      sub_10013DA9C(v9);
      BOOL v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::lockTile(BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  return v4;
}

BOOL sub_10104CF04(const char *a1)
{
  return sub_10104C358(a1, 2);
}

BOOL sub_10104CF0C(const char *a1)
{
  return sub_10104C358(a1, 3);
}

BOOL sub_10104CF14(double *a1, uint64_t a2, float a3)
{
  double v4 = *(double *)(a2 + 20);
  double v5 = a3;
  double v6 = *(double *)(a2 + 4);
  double v7 = *(double *)(a2 + 12);
  if (v4 >= v5 || v4 < 0.0) {
    double v9 = *(double *)(a2 + 20);
  }
  else {
    double v9 = v5;
  }
  double v10 = v9 * 1.1;
  if (v9 < 0.0) {
    double v10 = v9;
  }
  if (v10 < 0.0
    || (*(double (**)(double *))(*(void *)a1 + 56))(a1) <= 0.0
    || (*(double (**)(double *))(*(void *)a1 + 64))(a1) <= 0.0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    uint64_t v28 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)a1 + 16))(__p, a1);
      double v29 = v40 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)buf = 136381187;
      double v43 = *(double *)&v29;
      __int16 v44 = 2049;
      double v45 = v6;
      __int16 v46 = 2049;
      double v47 = v7;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TileFile, no location / coordinates, tile, %{private}s, scaledLocation, %{private}.8lf, %{private}.8lf, #CloneMe", buf, 0x20u);
      if (SHIBYTE(v40) < 0) {
        operator delete(*(void **)__p);
      }
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      (*(void (**)(void **__return_ptr, double *))(*(void *)a1 + 16))(v35, a1);
      if (v36 >= 0) {
        __int16 v30 = v35;
      }
      else {
        __int16 v30 = (void **)v35[0];
      }
      *(_DWORD *)std::string __p = 136381187;
      *(void *)&__p[4] = v30;
      __int16 v38 = 2049;
      double v39 = v6;
      __int16 v40 = 2049;
      double v41 = v7;
      int v31 = (char *)_os_log_send_and_compose_impl();
      if (v36 < 0) {
        operator delete(v35[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::doesLocationIntersectWithTile(const CLDaemonLocation &, float)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
      return 0;
    }
  }
  else
  {
    double v11 = sub_10013DAC0((uint64_t)(a1 + 6));
    double v12 = sub_10013DA9C((uint64_t)(a1 + 6));
    double v13 = sub_10013DAC0((uint64_t)(a1 + 6));
    double v14 = v13 + (*(double (**)(double *))(*(void *)a1 + 56))(a1);
    double v15 = sub_10013DA9C((uint64_t)(a1 + 6));
    double v16 = (*(double (**)(double *))(*(void *)a1 + 64))(a1);
    double v17 = sub_1000F1648(a1 + 31, v11, v12, v14, v15 + v16, 0.0);
    double v18 = sub_10013DAC0((uint64_t)(a1 + 6));
    double v19 = v18 + (*(double (**)(double *))(*(void *)a1 + 56))(a1) * 0.5;
    double v20 = sub_10013DA9C((uint64_t)(a1 + 6));
    double v21 = (*(double (**)(double *))(*(void *)a1 + 64))(a1);
    double v22 = sub_1000F1648(a1 + 31, v6, v7, v19, v20 + v21 * 0.5, 0.0) - v9;
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    double v23 = v22 - v17 * 0.5;
    __int16 v24 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
    {
      double v25 = (*(double (**)(double *))(*(void *)a1 + 56))(a1);
      double v26 = (*(double (**)(double *))(*(void *)a1 + 64))(a1);
      *(_DWORD *)buf = 134349568;
      double v43 = v23;
      __int16 v44 = 2050;
      double v45 = v25;
      __int16 v46 = 2050;
      double v47 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TileFile, doesLocationIntersectWithTile, distance, %{public}.1lf, deltas, %{public}.1lf, %{public}.1lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CB28);
      }
      double v32 = (*(double (**)(double *))(*(void *)a1 + 56))(a1);
      double v33 = (*(double (**)(double *))(*(void *)a1 + 64))(a1);
      *(_DWORD *)std::string __p = 134349568;
      *(double *)&__p[4] = v23;
      __int16 v38 = 2050;
      double v39 = v32;
      __int16 v40 = 2050;
      double v41 = v33;
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTileFile::doesLocationIntersectWithTile(const CLDaemonLocation &, float)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    return v23 <= 0.0;
  }
  return result;
}

uint64_t sub_10104D5C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v18 = v2;
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  __int16 v19 = 256;
  sub_1000E9354(v17);
  sub_10016332C((uint64_t)v17, "atime", (const void *)(a1 + 232));
  v22.__r_.__value_.__r.__words[0] = 0;
  sub_10016332C((uint64_t)v17, "stime", &v22);
  sub_100C0A030((int *)(a1 + 48), a1 + 8, &v22);
  uint64_t v3 = (const std::string::value_type *)sub_101048388();
  int v4 = v3[23];
  if (v4 >= 0) {
    double v5 = v3;
  }
  else {
    double v5 = *(const std::string::value_type **)v3;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    std::string::size_type v6 = *((void *)v3 + 1);
  }
  double v7 = std::string::append(&v22, v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  int64_t v16 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CB28);
  }
  double v9 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    double v10 = __p;
    if (v16 < 0) {
      double v10 = (void **)__p[0];
    }
    LODWORD(v22.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)v22.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TileFile, saving, %{public}s", (uint8_t *)&v22, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v22, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CB28);
    }
    double v13 = __p;
    if (v16 < 0) {
      double v13 = (void **)__p[0];
    }
    int v20 = 136446210;
    double v21 = v13;
    double v14 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTileFile::savePersistentPropertiesToFile()", "%s\n", (const char *)v14);
    if (v14 != &v22) {
      free(v14);
    }
  }
  if (v16 >= 0) {
    double v11 = __p;
  }
  else {
    double v11 = (void **)__p[0];
  }
  sub_1004CF388((uint64_t)v17, (uint64_t)v11);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  sub_10013F3C4(v17);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_10104D8BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a17);
  sub_1019DB560((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_10104D928(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  *(unsigned char *)(a1 + 241) = 1;
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

BOOL sub_10104D9A8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  LODWORD(v1) = *(unsigned __int8 *)(v1 + 241);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v1 != 0;
}

uint64_t sub_10104DA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1;
  if (*(char *)(a1 + 23) < 0) {
    a1 = *(void *)a1;
  }
  uint64_t result = sub_1000A569C((const char *)a1);
  if (result)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    sub_1000E9354(v7);
    if (*(char *)(v2 + 23) >= 0) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = *(void *)v2;
    }
    sub_1004CEA84((uint64_t)v7, v5);
    sub_1000A699C((uint64_t)v7, "atime", &v9);
    sub_1000A699C((uint64_t)v7, "stime", &v8);
    uint64_t v6 = v8;
    *(void *)a2 = v9;
    *(void *)(a2 + 8) = v6;
    *(unsigned char *)(a2 + 16) = 1;
    return sub_10013F3C4(v7);
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

void sub_10104DAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10104DAFC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10104DB2C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10104DB5C(uint64_t a1, char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_10104DBDC((uint64_t **)a1, v4, a2, a2);
      a2 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_10104DBC4(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10104DBDC(uint64_t **a1, uint64_t *a2, char *a3, _OWORD *a4)
{
  uint64_t v6 = sub_10104DC64(a1, a2, &v11, &v10, a3);
  double v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    double v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1000EDF90(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10104DC64(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, char *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (int v6 = *a5, v7 = *((char *)a2 + 32), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      double v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        double v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((char *)v10 + 32) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v17 = (uint64_t *)v16;
          int v18 = *(char *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      double v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    double v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      double v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    __int16 v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      __int16 v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((char *)a4 + 32))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          double v21 = (uint64_t *)v20;
          int v22 = *(char *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      double v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t **sub_10104DE0C(uint64_t **a1, char *a2, uint64_t a3, unsigned char **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((char *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[32] = **a4;
    *((void *)v11 + 5) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_10104DED0()
{
  v1[2] = unk_10230CA00;
  v1[3] = unk_10230CA10;
  v1[4] = unk_10230CA20;
  v1[5] = unk_10230CA30;
  v1[0] = unk_10230C9E0;
  v1[1] = unk_10230C9F0;
  sub_10104DB5C((uint64_t)&unk_10248B168, (char *)v1, 6);
  return __cxa_atexit((void (*)(void *))sub_101043C54, &unk_10248B168, (void *)&_mh_execute_header);
}

void *sub_10104DF7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v10 = *(void *)(a3 + 16);
  }
  int v11 = *(_DWORD *)(a3 + 24);
  sub_100BCB368((uint64_t)a1, a2, (long long *)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10230CB78;
  sub_10104F3A0((uint64_t)(a1 + 24), a4);
  return a1;
}

void sub_10104E034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_100BCB73C(v14);
  _Unwind_Resume(a1);
}

unint64_t sub_10104E064(uint64_t a1)
{
  uint64_t v1 = a1;
  int v2 = *(_DWORD *)(a1 + 144);
  __chkstk_darwin(a1);
  v111 = (char *)&v105 - v4;
  uint64_t v6 = sub_100BCAAD8(v3 + 48, (char *)&v105 - v4, v5);
  uint64_t v7 = v6;
  v110 = (void *)(v1 + 120);
  float v8 = 1.0 / (float)v2;
  if (v6)
  {
    double v9 = (double)*(unint64_t *)(v111 + 12);
    double v10 = v9 - *(double *)(v1 + 224);
    uint64_t v11 = (int)v6 - 1;
    double v12 = &v111[20 * v11];
    double v13 = (unint64_t *)(v12 + 12);
    double v14 = (double)*(unint64_t *)(v12 + 12) - v9;
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10230CBA8);
    }
    double v15 = v10 / 1000000.0;
    uint64_t v16 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      double v17 = v110;
      if (*(char *)(v1 + 143) < 0) {
        double v17 = (void *)*v110;
      }
      uint64_t v18 = *(void *)(v111 + 12);
      unint64_t v19 = *v13;
      int v123 = 136447746;
      v124 = v17;
      __int16 v125 = 1026;
      *(_DWORD *)v126 = v7;
      *(_WORD *)&v126[4] = 2050;
      *(double *)&v126[6] = v15;
      *(_WORD *)&v126[14] = 2050;
      *(void *)&v126[16] = vabdd_f64(v15, v8);
      *(_WORD *)&v126[24] = 2050;
      *(void *)&v126[26] = v18;
      *(_WORD *)&v126[34] = 2050;
      *(void *)&v126[36] = v19;
      *(_WORD *)&v126[44] = 2050;
      *(double *)&v126[46] = v14 / 1000000.0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] read %{public}d, timestamp from previous [%{public}f %{public}f], range [%{public}llu %{public}llu], time interval %{public}f", (uint8_t *)&v123, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v123, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10230CBA8);
      }
      double v80 = v110;
      if (*(char *)(v1 + 143) < 0) {
        double v80 = (void *)*v110;
      }
      uint64_t v81 = *(void *)(v111 + 12);
      unint64_t v82 = *v13;
      int v115 = 136447746;
      v116 = v80;
      __int16 v117 = 1026;
      *(_DWORD *)v118 = v7;
      *(_WORD *)&v118[4] = 2050;
      *(double *)&v118[6] = v15;
      *(_WORD *)&v118[14] = 2050;
      *(void *)&v118[16] = vabdd_f64(v15, v8);
      *(_WORD *)&v118[24] = 2050;
      *(void *)&v118[26] = v81;
      *(_WORD *)&v118[34] = 2050;
      *(void *)&v118[36] = v82;
      *(_WORD *)&v118[44] = 2050;
      *(double *)&v118[46] = v14 / 1000000.0;
      v83 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v83);
      if (v83 != (char *)&v123) {
        free(v83);
      }
    }
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10230CBA8);
    }
    uint64_t v20 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_INFO))
    {
      double v21 = v110;
      if (*(char *)(v1 + 143) < 0) {
        double v21 = (void *)*v110;
      }
      unint64_t v22 = *(void *)(v111 + 12);
      unint64_t v23 = *v13;
      double v24 = (double)*v13 * 0.000000999999997;
      double v25 = *(float *)v111;
      double v26 = *((float *)v111 + 1);
      double v27 = *((float *)v111 + 2);
      double v28 = *(float *)v12;
      double v29 = &v111[20 * v11];
      double v30 = *((float *)v29 + 1);
      double v31 = *((float *)v29 + 2);
      int v123 = 136448770;
      v124 = v21;
      __int16 v125 = 2050;
      *(void *)v126 = v22;
      *(_WORD *)&v126[8] = 2050;
      *(void *)&v126[10] = v23;
      *(_WORD *)&v126[18] = 2050;
      *(double *)&v126[20] = (double)v22 * 0.000000999999997;
      *(_WORD *)&v126[28] = 2050;
      *(double *)&v126[30] = v24;
      *(_WORD *)&v126[38] = 2050;
      *(double *)&v126[40] = v25;
      *(_WORD *)&v126[48] = 2050;
      *(double *)&v126[50] = v26;
      *(_WORD *)&v126[58] = 2050;
      *(double *)v127 = v27;
      v127[4] = 2050;
      *(double *)&v127[5] = v28;
      v127[9] = 2050;
      double v128 = v30;
      __int16 v129 = 2050;
      double v130 = v31;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[manager-%{public}s] read [%{public}llu %{public}llu], timeS [%{public}f %{public}f], first sample [%{public}f %{public}f %{public}f], last sample [%{public}f %{public}f %{public}f]", (uint8_t *)&v123, 0x70u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v123, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10230CBA8);
      }
      uint64_t v84 = v110;
      if (*(char *)(v1 + 143) < 0) {
        uint64_t v84 = (void *)*v110;
      }
      unint64_t v85 = *(void *)(v111 + 12);
      unint64_t v86 = *v13;
      double v87 = (double)*v13 * 0.000000999999997;
      double v88 = *(float *)v111;
      double v89 = *((float *)v111 + 1);
      double v90 = *((float *)v111 + 2);
      double v91 = *(float *)v12;
      v92 = &v111[20 * v11];
      double v93 = *((float *)v92 + 1);
      double v94 = *((float *)v92 + 2);
      int v115 = 136448770;
      v116 = v84;
      __int16 v117 = 2050;
      *(void *)v118 = v85;
      *(_WORD *)&v118[8] = 2050;
      *(void *)&v118[10] = v86;
      *(_WORD *)&v118[18] = 2050;
      *(double *)&v118[20] = (double)v85 * 0.000000999999997;
      *(_WORD *)&v118[28] = 2050;
      *(double *)&v118[30] = v87;
      *(_WORD *)&v118[38] = 2050;
      *(double *)&v118[40] = v88;
      *(_WORD *)&v118[48] = 2050;
      *(double *)&v118[50] = v89;
      *(_WORD *)&v118[58] = 2050;
      *(double *)v119 = v90;
      v119[4] = 2050;
      *(double *)&v119[5] = v91;
      v119[9] = 2050;
      double v120 = v93;
      __int16 v121 = 2050;
      double v122 = v94;
      v95 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v95);
      if (v95 != (char *)&v123) {
        free(v95);
      }
    }
    *(double *)(v1 + 224) = (double)*v13;
  }
  v112 = 0;
  v113 = 0;
  v114 = 0;
  sub_10104F174((void **)&v112, (int)v7);
  uint64_t v106 = v7;
  if ((int)v7 >= 1)
  {
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    v109 = &v114;
    uint64_t v35 = v106;
    *(void *)&long long v32 = 136446722;
    long long v108 = v32;
    *(void *)&long long v32 = 136446466;
    long long v107 = v32;
    uint64_t v36 = v1;
    while (1)
    {
      int v37 = &v111[20 * v33];
      unint64_t v38 = *(void *)(v37 + 12);
      if (*(double *)(v1 + 152) <= (double)v38 * 0.000000999999997) {
        break;
      }
LABEL_61:
      if (++v33 == v35) {
        goto LABEL_70;
      }
    }
    if (v38 >= v34)
    {
      if (!v34)
      {
LABEL_44:
        unint64_t v34 = *(void *)(v37 + 12);
        __int16 v46 = v113;
        if (v113 >= v114)
        {
          unint64_t v49 = 0xCCCCCCCCCCCCCCCDLL * ((v113 - v112) >> 2);
          unint64_t v50 = v49 + 1;
          if (v49 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            sub_1001D7FD4();
          }
          if (0x999999999999999ALL * ((v114 - v112) >> 2) > v50) {
            unint64_t v50 = 0x999999999999999ALL * ((v114 - v112) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v114 - v112) >> 2) >= 0x666666666666666) {
            unint64_t v51 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v51 = v50;
          }
          if (v51) {
            __int16 v52 = (char *)sub_10027E440((uint64_t)v109, v51);
          }
          else {
            __int16 v52 = 0;
          }
          int v53 = &v52[20 * v49];
          long long v54 = *(_OWORD *)v37;
          *((_DWORD *)v53 + 4) = *((_DWORD *)v37 + 4);
          *(_OWORD *)int v53 = v54;
          int v56 = v112;
          char v55 = v113;
          int v57 = v53;
          if (v113 != v112)
          {
            do
            {
              long long v58 = *(_OWORD *)(v55 - 20);
              *((_DWORD *)v57 - 1) = *((_DWORD *)v55 - 1);
              *(_OWORD *)(v57 - 20) = v58;
              v57 -= 20;
              v55 -= 20;
            }
            while (v55 != v56);
            char v55 = v112;
          }
          __int16 v48 = v53 + 20;
          v112 = v57;
          v113 = v53 + 20;
          v114 = &v52[20 * v51];
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          long long v47 = *(_OWORD *)v37;
          *((_DWORD *)v113 + 4) = *((_DWORD *)v37 + 4);
          *(_OWORD *)__int16 v46 = v47;
          __int16 v48 = v46 + 20;
        }
        v113 = v48;
        goto LABEL_61;
      }
    }
    else
    {
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10230CBA8);
      }
      double v39 = qword_102419318;
      if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
      {
        __int16 v40 = v110;
        if (*(char *)(v36 + 143) < 0) {
          __int16 v40 = (void *)*v110;
        }
        int v123 = v108;
        v124 = v40;
        __int16 v125 = 2048;
        *(void *)v126 = v38;
        *(_WORD *)&v126[8] = 2048;
        *(void *)&v126[10] = v34;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "[manager-%{public}s] time went backwards, current %llu, previous %llu", (uint8_t *)&v123, 0x20u);
      }
      uint64_t v1 = v36;
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v123, 0x65CuLL);
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_10230CBA8);
        }
        double v41 = v110;
        if (*(char *)(v36 + 143) < 0) {
          double v41 = (void *)*v110;
        }
        int v115 = v108;
        v116 = v41;
        __int16 v117 = 2048;
        *(void *)v118 = v38;
        *(_WORD *)&v118[8] = 2048;
        *(void *)&v118[10] = v34;
        double v42 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v42);
        if (v42 != (char *)&v123) {
          free(v42);
        }
        uint64_t v1 = v36;
      }
    }
    double v43 = (double)(v38 - v34) / 1000000.0;
    if (v43 > v8 * 1.5)
    {
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10230CBA8);
      }
      __int16 v44 = qword_102419318;
      if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
      {
        double v45 = v110;
        if (*(char *)(v36 + 143) < 0) {
          double v45 = (void *)*v110;
        }
        int v123 = v107;
        v124 = v45;
        __int16 v125 = 2050;
        *(double *)v126 = 1.0 / v43;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "[manager-%{public}s] wrong frequency read, %{public}f", (uint8_t *)&v123, 0x16u);
      }
      uint64_t v1 = v36;
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v123, 0x65CuLL);
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_10230CBA8);
        }
        double v59 = v110;
        if (*(char *)(v36 + 143) < 0) {
          double v59 = (void *)*v110;
        }
        int v115 = v107;
        v116 = v59;
        __int16 v117 = 2050;
        *(double *)v118 = 1.0 / v43;
        double v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v60);
        if (v60 != (char *)&v123) {
          free(v60);
        }
        uint64_t v1 = v36;
      }
    }
    goto LABEL_44;
  }
LABEL_70:
  int v61 = v112;
  int v62 = v113;
  if (v112 == v113)
  {
    unint64_t v65 = 0;
  }
  else
  {
    double v63 = *(double *)(v1 + 160) * 1000000.0;
    unsigned int v64 = v112;
    do
    {
      *(void *)(v64 + 12) -= (unint64_t)v63;
      v64 += 20;
    }
    while (v64 != v62);
    unint64_t v65 = 0xCCCCCCCCCCCCCCCDLL * ((v62 - v61) >> 2);
    uint64_t v66 = *(void *)(v1 + 176) + (int)v65;
    ++*(void *)(v1 + 168);
    *(void *)(v1 + 176) = v66;
    int v67 = v106;
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_10230CBA8);
    }
    unsigned __int8 v68 = qword_102419318;
    if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
    {
      std::string v69 = v110;
      if (*(char *)(v1 + 143) < 0) {
        std::string v69 = (void *)*v110;
      }
      unint64_t v70 = *(void *)(v112 + 12);
      unint64_t v71 = *((void *)v113 - 1);
      uint64_t v72 = *(void *)(v1 + 168);
      uint64_t v73 = *(void *)(v1 + 176);
      int v123 = 136448258;
      v124 = v69;
      __int16 v125 = 2050;
      *(void *)v126 = v70;
      *(_WORD *)&v126[8] = 2050;
      *(void *)&v126[10] = v71;
      *(_WORD *)&v126[18] = 2050;
      *(double *)&v126[20] = (double)v70 * 0.000000999999997;
      *(_WORD *)&v126[28] = 2050;
      *(double *)&v126[30] = (double)v71 * 0.000000999999997;
      *(_WORD *)&v126[38] = 1026;
      *(_DWORD *)&v126[40] = v67;
      *(_WORD *)&v126[44] = 1026;
      *(_DWORD *)&v126[46] = v65;
      *(_WORD *)&v126[50] = 2050;
      *(void *)&v126[52] = v72;
      v127[0] = 2050;
      *(void *)&v127[1] = v73;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "[manager-%{public}s] notifying [%{public}llu %{public}llu], timeS [%{public}f %{public}f], trimmed from %{public}d to %{public}d, batch num %{public}llu, sample num %{public}llu", (uint8_t *)&v123, 0x54u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v123, 0x65CuLL);
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10230CBA8);
      }
      v96 = v110;
      if (*(char *)(v1 + 143) < 0) {
        v96 = (void *)*v110;
      }
      unint64_t v97 = *(void *)(v112 + 12);
      unint64_t v98 = *((void *)v113 - 1);
      uint64_t v99 = *(void *)(v1 + 168);
      uint64_t v100 = *(void *)(v1 + 176);
      int v115 = 136448258;
      v116 = v96;
      __int16 v117 = 2050;
      *(void *)v118 = v97;
      *(_WORD *)&v118[8] = 2050;
      *(void *)&v118[10] = v98;
      *(_WORD *)&v118[18] = 2050;
      *(double *)&v118[20] = (double)v97 * 0.000000999999997;
      *(_WORD *)&v118[28] = 2050;
      *(double *)&v118[30] = (double)v98 * 0.000000999999997;
      *(_WORD *)&v118[38] = 1026;
      *(_DWORD *)&v118[40] = v67;
      *(_WORD *)&v118[44] = 1026;
      *(_DWORD *)&v118[46] = v65;
      *(_WORD *)&v118[50] = 2050;
      *(void *)&v118[52] = v99;
      v119[0] = 2050;
      *(void *)&v119[1] = v100;
      v101 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v101);
      if (v101 != (char *)&v123) {
        free(v101);
      }
    }
    double v74 = ((double)*(unint64_t *)(v112 + 12) - *(double *)(v1 + 184)) / 1000000.0;
    if (v74 > v8 * 1.5)
    {
      if (qword_102419310 != -1) {
        dispatch_once(&qword_102419310, &stru_10230CBA8);
      }
      v75 = qword_102419318;
      if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_ERROR))
      {
        v76 = v110;
        if (*(char *)(v1 + 143) < 0) {
          v76 = (void *)*v110;
        }
        double v77 = *(double *)(v1 + 184) * 0.000001;
        double v78 = (double)*((unint64_t *)v113 - 1) * 0.000001;
        int v123 = 136446978;
        v124 = v76;
        __int16 v125 = 2050;
        *(double *)v126 = v74;
        *(_WORD *)&v126[8] = 2050;
        *(double *)&v126[10] = v77;
        *(_WORD *)&v126[18] = 2050;
        *(double *)&v126[20] = v78;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "[manager-%{public}s] gap between batches, %{public}f, last batch %{public}f, current batch %{public}f", (uint8_t *)&v123, 0x2Au);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v123, 0x65CuLL);
        if (qword_102419310 != -1) {
          dispatch_once(&qword_102419310, &stru_10230CBA8);
        }
        if (*(char *)(v1 + 143) < 0) {
          v110 = (void *)*v110;
        }
        double v102 = *(double *)(v1 + 184) * 0.000001;
        double v103 = (double)*((unint64_t *)v113 - 1) * 0.000001;
        int v115 = 136446978;
        v116 = v110;
        __int16 v117 = 2050;
        *(double *)v118 = v74;
        *(_WORD *)&v118[8] = 2050;
        *(double *)&v118[10] = v102;
        *(_WORD *)&v118[18] = 2050;
        *(double *)&v118[20] = v103;
        v104 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual int CLBatchedAccelerometerClient::Client::read()", "%s\n", v104);
        if (v104 != (char *)&v123) {
          free(v104);
        }
      }
    }
    *(double *)(v1 + 184) = (double)*((unint64_t *)v113 - 1);
  }
  sub_10104F260(v1 + 192, (uint64_t)&v112, v65);
  if (v112)
  {
    v113 = v112;
    operator delete(v112);
  }
  return v65;
}

void sub_10104F12C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(void *)(v1 + 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10104F174(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (unsigned char *)*a1) >> 2) < a2)
  {
    if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 20;
    uint64_t v6 = (char *)sub_10027E440(v3, a2);
    uint64_t v7 = &v6[20 * v5];
    double v9 = &v6[20 * v8];
    uint64_t v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    double v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v12 - 20) = v13;
        v12 -= 20;
        v10 -= 20;
      }
      while (v10 != v11);
      double v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t sub_10104F260(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t sub_10104F2B4(void *a1)
{
  *a1 = off_10230CB78;
  sub_100DF47C0(a1 + 24);

  return sub_100BCB73C((uint64_t)a1);
}

void sub_10104F308(void *a1)
{
  *a1 = off_10230CB78;
  sub_100DF47C0(a1 + 24);
  sub_100BCB73C((uint64_t)a1);

  operator delete();
}

void sub_10104F370(id a1)
{
  qword_102419318 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

uint64_t sub_10104F3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10104F438()
{
  sub_100134750(qword_102482A60, "Acc800Fp");
  dword_102482A78 = 800;
  __cxa_atexit((void (*)(void *))sub_10058C198, qword_102482A60, (void *)&_mh_execute_header);
  sub_100134750(qword_102482A80, "DmFp");
  dword_102482A98 = 200;

  return __cxa_atexit((void (*)(void *))sub_10058C198, qword_102482A80, (void *)&_mh_execute_header);
}

BOOL *sub_10104F4E0(BOOL *a1)
{
  *a1 = 0;
  uint64_t v2 = sub_1000D3E78();
  sub_10006B564(v2, buf);
  int v3 = sub_1000D2988(*(uint64_t *)buf, "HRR_UseWorkoutEndTimeForRecoveryOnset", a1);
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v3)
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10230CBC8);
    }
    uint64_t v4 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = *a1;
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLHRPeakEstimator,fUseWorkoutEndTimeForRecoveryOnset overridden (%{public}d)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_10230CBC8);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLHRPeakEstimator::CLHRPeakEstimator()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return a1;
}

void sub_10104F6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10104F6F8(unsigned char *a1, uint64_t a2, uint64_t *a3, long long **a4)
{
  sub_10104F764(a1, a2, a4);
  if (*(double *)(a2 + 56) == 0.0)
  {
    int v7 = 5;
LABEL_5:
    uint64_t result = 0;
    *(_DWORD *)a2 = v7;
    return result;
  }
  sub_101050B98(v6, a2, a3);
  if (*(double *)(a2 + 64) == 0.0)
  {
    int v7 = 6;
    goto LABEL_5;
  }
  return 1;
}

void sub_10104F764(unsigned char *a1, uint64_t a2, long long **a3)
{
  double v3 = *(double *)(a2 + 48);
  if (*a1)
  {
    *(double *)(a2 + 56) = v3;
    return;
  }
  double v4 = v3 + -180.0;
  std::string __p = 0;
  v141 = 0;
  v142 = 0;
  uint64_t v6 = *a3;
  BOOL v5 = a3[1];
  if (*a3 == v5)
  {
    int v64 = 0;
    double v12 = 0.0;
    double v11 = 0.0;
    double v10 = 0.0;
    double v67 = 0.0;
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    v135 = a3[1];
    do
    {
      double v14 = *((double *)v6 + 1);
      if (v14 > v4)
      {
        if (v13 == 0.0 || v9 == 0.0) {
          goto LABEL_43;
        }
        if (*((double *)v6 + 2) < v13) {
          double v13 = *((double *)v6 + 2);
        }
        if (v9 + 3.84 >= v14)
        {
LABEL_43:
          int v28 = v8;
        }
        else
        {
          do
          {
            double v9 = v9 + 2.56;
            double v15 = v141;
            if (v141 >= v142)
            {
              double v17 = (char *)__p;
              uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((v141 - (unsigned char *)__p) >> 3);
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) > 0x492492492492492) {
                sub_1001D7FD4();
              }
              if (0xDB6DB6DB6DB6DB6ELL * ((v142 - (unsigned char *)__p) >> 3) > v19) {
                unint64_t v19 = 0xDB6DB6DB6DB6DB6ELL * ((v142 - (unsigned char *)__p) >> 3);
              }
              if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v142 - (unsigned char *)__p) >> 3)) >= 0x249249249249249) {
                unint64_t v20 = 0x492492492492492;
              }
              else {
                unint64_t v20 = v19;
              }
              if (v20)
              {
                double v21 = (char *)sub_10017EA6C((uint64_t)&v142, v20);
                double v17 = (char *)__p;
                double v15 = v141;
              }
              else
              {
                double v21 = 0;
              }
              unint64_t v22 = &v21[8 * ((v141 - (unsigned char *)__p) >> 3)];
              *(void *)unint64_t v22 = 0;
              *((double *)v22 + 1) = v9;
              *((double *)v22 + 2) = v13;
              *((_DWORD *)v22 + 6) = 0;
              *((void *)v22 + 4) = 0;
              *((void *)v22 + 5) = 0;
              *((_DWORD *)v22 + 12) = 3;
              if (v15 == v17)
              {
                double v27 = &v21[56 * v18];
              }
              else
              {
                unint64_t v23 = &v21[56 * v18];
                do
                {
                  long long v24 = *(_OWORD *)(v15 - 56);
                  long long v25 = *(_OWORD *)(v15 - 40);
                  long long v26 = *(_OWORD *)(v15 - 24);
                  double v27 = v23 - 56;
                  *((_DWORD *)v23 - 2) = *((_DWORD *)v15 - 2);
                  *(_OWORD *)(v23 - 24) = v26;
                  *(_OWORD *)(v23 - 40) = v25;
                  *(_OWORD *)(v23 - 56) = v24;
                  v15 -= 56;
                  v23 -= 56;
                }
                while (v15 != v17);
              }
              uint64_t v16 = v22 + 56;
              std::string __p = v27;
              v141 = v22 + 56;
              v142 = &v21[56 * v20];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              *(void *)v141 = 0;
              *((double *)v15 + 1) = v9;
              *((double *)v15 + 2) = v13;
              *((_DWORD *)v15 + 6) = 0;
              *((void *)v15 + 4) = 0;
              *((void *)v15 + 5) = 0;
              uint64_t v16 = v15 + 56;
              *((_DWORD *)v15 + 12) = 3;
            }
            v141 = v16;
            int v28 = v8 + 1;
            if (v8)
            {
              double v29 = v13 - v10;
              double v10 = v10 + (v13 - v10) / (double)v28;
              double v12 = v11 + v29 * (v13 - v10);
              double v11 = v12;
            }
            else
            {
              double v11 = 0.0;
              double v10 = v13;
            }
            if (qword_1024192C0 != -1) {
              dispatch_once(&qword_1024192C0, &stru_10230CBC8);
            }
            double v30 = qword_1024192C8;
            if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134283777;
              *(double *)&uint8_t buf[4] = v9;
              *(_WORD *)&unsigned char buf[12] = 2049;
              *(double *)v150 = v13;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,fillerEntry.startTime,%{private}f,fillerEntry.mets,%{private}f", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024192C0 != -1) {
                dispatch_once(&qword_1024192C0, &stru_10230CBC8);
              }
              *(_DWORD *)v147 = 134283777;
              *(double *)&v147[4] = v9;
              *(_WORD *)&v147[12] = 2049;
              *(double *)&v147[14] = v13;
              double v31 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v31);
              if (v31 != buf) {
                free(v31);
              }
            }
            int v8 = v28;
          }
          while (v9 + 3.84 < *((double *)v6 + 1));
          int v7 = v141;
        }
        if (v7 >= v142)
        {
          uint64_t v35 = (char *)__p;
          uint64_t v36 = 0x6DB6DB6DB6DB6DB7 * ((v7 - (unsigned char *)__p) >> 3);
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) > 0x492492492492492) {
            sub_1001D7FD4();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((v142 - (unsigned char *)__p) >> 3) > v37) {
            unint64_t v37 = 0xDB6DB6DB6DB6DB6ELL * ((v142 - (unsigned char *)__p) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v142 - (unsigned char *)__p) >> 3)) >= 0x249249249249249) {
            unint64_t v38 = 0x492492492492492;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38)
          {
            double v39 = (char *)sub_10017EA6C((uint64_t)&v142, v38);
            uint64_t v35 = (char *)__p;
            int v7 = v141;
          }
          else
          {
            double v39 = 0;
          }
          __int16 v40 = &v39[56 * v36];
          long long v41 = *v6;
          long long v42 = v6[1];
          long long v43 = v6[2];
          *((void *)v40 + 6) = *((void *)v6 + 6);
          *((_OWORD *)v40 + 1) = v42;
          *((_OWORD *)v40 + 2) = v43;
          *(_OWORD *)__int16 v40 = v41;
          if (v7 == v35)
          {
            __int16 v48 = &v39[56 * v36];
          }
          else
          {
            __int16 v44 = &v39[56 * v36];
            do
            {
              long long v45 = *(_OWORD *)(v7 - 56);
              long long v46 = *(_OWORD *)(v7 - 40);
              long long v47 = *(_OWORD *)(v7 - 24);
              __int16 v48 = v44 - 56;
              *((_DWORD *)v44 - 2) = *((_DWORD *)v7 - 2);
              *(_OWORD *)(v44 - 24) = v47;
              *(_OWORD *)(v44 - 40) = v46;
              *(_OWORD *)(v44 - 56) = v45;
              v7 -= 56;
              v44 -= 56;
            }
            while (v7 != v35);
          }
          int v7 = v40 + 56;
          std::string __p = v48;
          v141 = v40 + 56;
          v142 = &v39[56 * v38];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          long long v32 = *v6;
          long long v33 = v6[1];
          long long v34 = v6[2];
          *((void *)v7 + 6) = *((void *)v6 + 6);
          *((_OWORD *)v7 + 1) = v33;
          *((_OWORD *)v7 + 2) = v34;
          *(_OWORD *)int v7 = v32;
          v7 += 56;
        }
        v141 = v7;
        double v13 = *((double *)v6 + 2);
        int v8 = v28 + 1;
        if (v28)
        {
          double v49 = v13 - v10;
          double v10 = v10 + (v13 - v10) / (double)v8;
          double v12 = v11 + v49 * (v13 - v10);
          double v11 = v12;
        }
        else
        {
          double v11 = 0.0;
          double v10 = *((double *)v6 + 2);
        }
        double v9 = *((double *)v6 + 1);
        BOOL v5 = v135;
      }
      uint64_t v6 = (long long *)((char *)v6 + 56);
    }
    while (v6 != v5);
    if (v9 <= 0.0 || (double v50 = v9 + 2.56, v50 >= *(double *)(a2 + 8)))
    {
      int v64 = v8;
      double v67 = v10;
    }
    else
    {
      do
      {
        unint64_t v51 = v141;
        if (v141 >= v142)
        {
          int v53 = (char *)__p;
          uint64_t v54 = 0x6DB6DB6DB6DB6DB7 * ((v141 - (unsigned char *)__p) >> 3);
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) > 0x492492492492492) {
            sub_1001D7FD4();
          }
          if (0xDB6DB6DB6DB6DB6ELL * ((v142 - (unsigned char *)__p) >> 3) > v55) {
            unint64_t v55 = 0xDB6DB6DB6DB6DB6ELL * ((v142 - (unsigned char *)__p) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v142 - (unsigned char *)__p) >> 3)) >= 0x249249249249249) {
            unint64_t v56 = 0x492492492492492;
          }
          else {
            unint64_t v56 = v55;
          }
          if (v56)
          {
            int v57 = (char *)sub_10017EA6C((uint64_t)&v142, v56);
            int v53 = (char *)__p;
            unint64_t v51 = v141;
          }
          else
          {
            int v57 = 0;
          }
          long long v58 = &v57[8 * ((v141 - (unsigned char *)__p) >> 3)];
          *(void *)long long v58 = 0;
          *((double *)v58 + 1) = v50;
          *((double *)v58 + 2) = v13;
          *((_DWORD *)v58 + 6) = 0;
          *((void *)v58 + 4) = 0;
          *((void *)v58 + 5) = 0;
          *((_DWORD *)v58 + 12) = 3;
          if (v51 == v53)
          {
            double v63 = &v57[56 * v54];
          }
          else
          {
            double v59 = &v57[56 * v54];
            do
            {
              long long v60 = *(_OWORD *)(v51 - 56);
              long long v61 = *(_OWORD *)(v51 - 40);
              long long v62 = *(_OWORD *)(v51 - 24);
              double v63 = v59 - 56;
              *((_DWORD *)v59 - 2) = *((_DWORD *)v51 - 2);
              *(_OWORD *)(v59 - 24) = v62;
              *(_OWORD *)(v59 - 40) = v61;
              *(_OWORD *)(v59 - 56) = v60;
              v51 -= 56;
              v59 -= 56;
            }
            while (v51 != v53);
          }
          __int16 v52 = v58 + 56;
          std::string __p = v63;
          v141 = v58 + 56;
          v142 = &v57[56 * v56];
          if (v53) {
            operator delete(v53);
          }
        }
        else
        {
          *(void *)v141 = 0;
          *((double *)v51 + 1) = v50;
          *((double *)v51 + 2) = v13;
          *((_DWORD *)v51 + 6) = 0;
          *((void *)v51 + 4) = 0;
          *((void *)v51 + 5) = 0;
          __int16 v52 = v51 + 56;
          *((_DWORD *)v51 + 12) = 3;
        }
        v141 = v52;
        int v64 = v8 + 1;
        if (v8)
        {
          double v65 = v13 - v10;
          double v10 = v10 + (v13 - v10) / (double)v64;
          double v12 = v11 + v65 * (v13 - v10);
          double v11 = v12;
        }
        else
        {
          double v11 = 0.0;
          double v10 = v13;
        }
        if (qword_1024192C0 != -1) {
          dispatch_once(&qword_1024192C0, &stru_10230CBC8);
        }
        uint64_t v66 = qword_1024192C8;
        if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134283777;
          *(double *)&uint8_t buf[4] = v50;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(double *)v150 = v13;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,fillerEntry.startTime,%{private}f,fillerEntry.mets,%{private}f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024192C0 != -1) {
            dispatch_once(&qword_1024192C0, &stru_10230CBC8);
          }
          *(_DWORD *)v147 = 134283777;
          *(double *)&v147[4] = v50;
          *(_WORD *)&v147[12] = 2049;
          *(double *)&v147[14] = v13;
          unsigned __int8 v68 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v68);
          if (v68 != buf) {
            free(v68);
          }
        }
        double v50 = v50 + 2.56;
        int v8 = v64;
        double v67 = v10;
      }
      while (v50 < *(double *)(a2 + 8));
    }
  }
  if (qword_1024192C0 != -1) {
    dispatch_once(&qword_1024192C0, &stru_10230CBC8);
  }
  std::string v69 = qword_1024192C8;
  if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
  {
    if (v64 < 2)
    {
      double v70 = 0.0;
      double v71 = 0.0;
      if (v64 != 1)
      {
LABEL_110:
        *(_DWORD *)buf = 134284033;
        *(double *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(double *)v150 = v70;
        *(_WORD *)&v150[8] = 2049;
        double v151 = v71;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,recoveryOnsetWindowStart,%{private}f,metsStdDev,%{private}f,metsMean,%{private}f", buf, 0x20u);
        goto LABEL_111;
      }
    }
    else
    {
      double v70 = sqrt(v12 / (double)(v64 - 1));
    }
    double v71 = v10;
    goto LABEL_110;
  }
LABEL_111:
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10230CBC8);
    }
    if (v64 < 2)
    {
      double v130 = 0.0;
      double v131 = 0.0;
      if (v64 != 1) {
        goto LABEL_235;
      }
    }
    else
    {
      double v130 = sqrt(v12 / (double)(v64 - 1));
    }
    double v131 = v10;
LABEL_235:
    *(_DWORD *)v147 = 134284033;
    *(double *)&v147[4] = v4;
    *(_WORD *)&v147[12] = 2049;
    *(double *)&v147[14] = v130;
    *(_WORD *)&v147[22] = 2049;
    double v148 = v131;
    v132 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v132);
    if (v132 != buf) {
      free(v132);
    }
  }
  *(void *)buf = 0x3FF6A09E60000000;
  sub_1001DCEDC(v147, 0x18uLL, buf);
  int v72 = 0;
  uint64_t v73 = *(void **)&v147[8];
  do
  {
    if ((unint64_t)v73 >= *(void *)&v147[16])
    {
      double v74 = *(void **)v147;
      uint64_t v75 = ((uint64_t)v73 - *(void *)v147) >> 3;
      unint64_t v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) >> 61) {
        sub_1001D7FD4();
      }
      uint64_t v77 = *(void *)&v147[16] - *(void *)v147;
      if ((uint64_t)(*(void *)&v147[16] - *(void *)v147) >> 2 > v76) {
        unint64_t v76 = v77 >> 2;
      }
      if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v78 = v76;
      }
      if (v78)
      {
        std::string v79 = (char *)sub_1000DA54C((uint64_t)&v147[16], v78);
        double v74 = *(void **)v147;
        uint64_t v73 = *(void **)&v147[8];
      }
      else
      {
        std::string v79 = 0;
      }
      double v80 = &v79[8 * v75];
      *(void *)double v80 = 0xBFE6A09E60000000;
      uint64_t v81 = v80 + 8;
      while (v73 != v74)
      {
        uint64_t v82 = *--v73;
        *((void *)v80 - 1) = v82;
        v80 -= 8;
      }
      *(void *)v147 = v80;
      *(void *)&v147[8] = v81;
      *(void *)&v147[16] = &v79[8 * v78];
      if (v74) {
        operator delete(v74);
      }
      uint64_t v73 = v81;
    }
    else
    {
      *v73++ = 0xBFE6A09E60000000;
    }
    *(void *)&v147[8] = v73;
    ++v72;
  }
  while (v72 != 48);
  uint64_t v84 = (double *)__p;
  v83 = v141;
  unint64_t v85 = *(void **)v147;
  uint64_t v86 = (uint64_t)v73 - *(void *)v147;
  if (0x6DB6DB6DB6DB6DB7 * ((v141 - (unsigned char *)__p) >> 3) >= (unint64_t)(((uint64_t)v73 - *(void *)v147) >> 3))
  {
    double v87 = 0.0;
    if (v64 >= 2) {
      double v87 = v12 / (double)(v64 - 1);
    }
    if (sqrt(v87) != 0.0)
    {
      v137 = 0;
      v138 = 0;
      v139 = 0;
      if (__p == v141)
      {
        uint64_t v105 = 0;
        v104 = 0;
      }
      else
      {
        double v88 = v12 / (double)(v64 - 1);
        if (v64 >= 1) {
          double v89 = v10;
        }
        else {
          double v89 = 0.0;
        }
        if (v64 < 2) {
          double v88 = 0.0;
        }
        double v90 = sqrt(v88) * (double)v64;
        do
        {
          double v91 = (v84[2] - v89) / v90;
          v92 = v138;
          if (v138 >= v139)
          {
            double v94 = v137;
            uint64_t v95 = v138 - v137;
            unint64_t v96 = v95 + 1;
            if ((unint64_t)(v95 + 1) >> 61) {
              sub_1001D7FD4();
            }
            uint64_t v97 = (char *)v139 - (char *)v137;
            if (((char *)v139 - (char *)v137) >> 2 > v96) {
              unint64_t v96 = v97 >> 2;
            }
            if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v98 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v98 = v96;
            }
            if (v98)
            {
              uint64_t v99 = (char *)sub_1000DA54C((uint64_t)&v139, v98);
              double v94 = v137;
              v92 = v138;
            }
            else
            {
              uint64_t v99 = 0;
            }
            uint64_t v100 = (double *)&v99[8 * v95];
            *uint64_t v100 = v91;
            double v93 = v100 + 1;
            while (v92 != v94)
            {
              uint64_t v101 = *((void *)v92-- - 1);
              *((void *)v100-- - 1) = v101;
            }
            v137 = v100;
            v139 = (double *)&v99[8 * v98];
            if (v94) {
              operator delete(v94);
            }
          }
          else
          {
            double *v138 = v91;
            double v93 = v138 + 1;
          }
          v138 = v93;
          if (qword_1024192C0 != -1) {
            dispatch_once(&qword_1024192C0, &stru_10230CBC8);
          }
          double v102 = qword_1024192C8;
          if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134283521;
            *(double *)&uint8_t buf[4] = v91;
            _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,normalizedMetsValue,%{private}f", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024192C0 != -1) {
              dispatch_once(&qword_1024192C0, &stru_10230CBC8);
            }
            LODWORD(v146) = 134283521;
            *(double *)((char *)&v146 + 4) = v91;
            double v103 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v103);
            if (v103 != buf) {
              free(v103);
            }
          }
          v84 += 7;
        }
        while (v84 != (double *)v83);
        uint64_t v105 = v137;
        v104 = v138;
        uint64_t v86 = *(void *)&v147[8] - *(void *)v147;
      }
      uint64_t v136 = v104 - v105 - (v86 >> 3);
      *(void *)buf = 0;
      sub_1001DCEDC(&v146, v136 + 1, buf);
      if (v136 != -1)
      {
        uint64_t v106 = 0;
        uint64_t v107 = 0;
        uint64_t v108 = *(void *)v147;
        uint64_t v109 = *(void *)&v147[8];
        do
        {
          if (v109 == v108)
          {
            uint64_t v109 = v108;
          }
          else
          {
            unint64_t v110 = 0;
            do
            {
              *(double *)(v146 + 8 * v107) = *(double *)(v146 + 8 * v107)
                                           + *(double *)(v108 + 8 * v110) * v137[v106 + v110];
              if (qword_1024192C0 != -1) {
                dispatch_once(&qword_1024192C0, &stru_10230CBC8);
              }
              v111 = qword_1024192C8;
              if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v112 = *(void *)(v146 + 8 * v107);
                *(_DWORD *)buf = 67175169;
                *(_DWORD *)&uint8_t buf[4] = v107;
                *(_WORD *)&uint8_t buf[8] = 1025;
                *(_DWORD *)&buf[10] = v110;
                *(_WORD *)v150 = 2049;
                *(void *)&v150[2] = v112;
                _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,l,%{private}d,i,%{private}d,xCorrVals[l],%{private}f", buf, 0x18u);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024192C0 != -1) {
                  dispatch_once(&qword_1024192C0, &stru_10230CBC8);
                }
                uint64_t v113 = *(void *)(v146 + 8 * v107);
                int v143 = 67175169;
                *(_DWORD *)v144 = v107;
                *(_WORD *)&v144[4] = 1025;
                *(_DWORD *)&v144[6] = v110;
                *(_WORD *)v145 = 2049;
                *(void *)&v145[2] = v113;
                v114 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v114);
                if (v114 != buf) {
                  free(v114);
                }
              }
              ++v110;
              uint64_t v108 = *(void *)v147;
              uint64_t v109 = *(void *)&v147[8];
            }
            while (v110 < (uint64_t)(*(void *)&v147[8] - *(void *)v147) >> 3);
          }
          ++v106;
        }
        while (v107++ != v136);
      }
      if (*((void *)&v146 + 1) == (void)v146)
      {
        int v117 = 0;
        double v119 = 0.0;
      }
      else
      {
        uint64_t v116 = 0;
        int v117 = 0;
        unint64_t v118 = (uint64_t)(*((void *)&v146 + 1) - v146) >> 3;
        if (v118 <= 1) {
          unint64_t v118 = 1;
        }
        double v119 = 0.0;
        do
        {
          if (*(double *)(v146 + 8 * v116) > v119)
          {
            double v119 = *(double *)(v146 + 8 * v116);
            int v117 = v116;
          }
          ++v116;
        }
        while (v118 != v116);
      }
      unint64_t v120 = v117 + 24;
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_10230CBC8);
      }
      __int16 v121 = qword_1024192C8;
      if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134284033;
        *(double *)&uint8_t buf[4] = v119;
        *(_WORD *)&unsigned char buf[12] = 1025;
        *(_DWORD *)v150 = v117;
        *(_WORD *)&v150[4] = 1025;
        *(_DWORD *)&v150[6] = v117 + 24;
        _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_DEBUG, "CLHRPeakEstimator::estimateRecoveryOnset,xCorrValMax,%{private}f,xCorrValMaxIndex,%{private}d,onsetIndex,%{private}d", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192C0 != -1) {
          dispatch_once(&qword_1024192C0, &stru_10230CBC8);
        }
        int v143 = 134284033;
        *(double *)v144 = v119;
        *(_WORD *)&v144[8] = 1025;
        *(_DWORD *)v145 = v117;
        *(_WORD *)&v145[4] = 1025;
        *(_DWORD *)&v145[6] = v117 + 24;
        v133 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRPeakEstimator::estimateRecoveryOnset(HRRecoveryResult &, const std::vector<HRRecoveryInputWR> &)", "%s\n", v133);
        if (v133 != buf) {
          free(v133);
        }
      }
      int v123 = (double *)__p;
      double v122 = v141;
      if (0x6DB6DB6DB6DB6DB7 * ((v141 - (unsigned char *)__p) >> 3) > v120)
      {
        double v124 = *((double *)__p + 7 * v120 + 1);
        *(double *)(a2 + 56) = v124;
        if (v123 == (double *)v122) {
          goto LABEL_217;
        }
        int v125 = 0;
        do
        {
          double v126 = v123[1];
          if (v126 > v124 && v126 < v124 + 180.0)
          {
            double v10 = v123[2];
            if (v125)
            {
              ++v125;
              double v128 = v10 - v67;
              double v67 = v67 + (v10 - v67) / (double)v125;
              double v12 = v11 + v128 * (v10 - v67);
              double v11 = v12;
              double v10 = v67;
            }
            else
            {
              double v11 = 0.0;
              int v125 = 1;
              double v67 = v123[2];
            }
          }
          v123 += 7;
        }
        while (v123 != (double *)v122);
        if (v125 <= 0)
        {
LABEL_217:
          *(void *)(a2 + 152) = 0;
          double v10 = 0.0;
          double v129 = 0.0;
        }
        else
        {
          *(double *)(a2 + 152) = v10;
          double v129 = 0.0;
          if (v125 != 1) {
            double v129 = v12 / (double)(v125 - 1);
          }
        }
        *(double *)(a2 + 160) = sqrt(v129);
        *(unsigned char *)(a2 + 168) = v10 < 2.5;
      }
      if ((void)v146)
      {
        *((void *)&v146 + 1) = v146;
        operator delete((void *)v146);
      }
      if (v137) {
        operator delete(v137);
      }
      unint64_t v85 = *(void **)v147;
    }
  }
  if (v85)
  {
    *(void *)&v147[8] = v85;
    operator delete(v85);
  }
  if (__p)
  {
    v141 = (char *)__p;
    operator delete(__p);
  }
}

void sub_101050AF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a31) {
    operator delete(a31);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_101050B98(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  double v3 = *(double *)(a2 + 56);
  if (v3 != 0.0)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = a3[1];
    if (*a3 == v5)
    {
      double v8 = 0.0;
    }
    else
    {
      double v6 = v3 + -30.0;
      double v7 = v3 + 30.0;
      double v8 = 0.0;
      do
      {
        double v9 = *(double *)(v4 + 8);
        BOOL v10 = v9 < v6 || v9 > v7;
        if (!v10 && *(double *)(v4 + 16) > v8) {
          double v8 = *(double *)(v4 + 16);
        }
        v4 += 32;
      }
      while (v4 != v5);
    }
    *(double *)(a2 + 64) = v8;
  }
}

void sub_101050C04(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_101050CC4(id a1)
{
  qword_102482AB8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLTilesManagerSilo"];
}

uint64_t sub_101050D84(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10105CB14;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_102482AC8 != -1) {
    dispatch_once(&qword_102482AC8, block);
  }
  return qword_10248B180;
}

uint64_t sub_1010512AC(uint64_t result, int a2)
{
  if (*(unsigned __int8 *)(result + 456) != a2)
  {
    uint64_t v3 = result;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(v3 + 456);
      *(_DWORD *)buf = 67109376;
      int v10 = a2;
      __int16 v11 = 1024;
      int v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: shouldEnableAppTiles, %d, fAppTilesEnabled, %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      double v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::enableAppTilesDownload(BOOL)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    uint64_t result = sub_10015EB2C(v3, 9u);
    if (a2) {
      int v6 = 1;
    }
    else {
      int v6 = -1;
    }
    *(_DWORD *)(result + 148) = v6;
    *(unsigned char *)(result + 177) = a2;
    if (a2) {
      int v7 = 100;
    }
    else {
      int v7 = 0;
    }
    *(_DWORD *)(result + 132) = v7;
    *(unsigned char *)(v3 + 456) = a2;
  }
  return result;
}

void sub_1010514E8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 84) = *(_DWORD *)(sub_10015EB2C(a1, 1u) + 288);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)buf = 67109120;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: stats: getTileStats, demTilesDownloaded, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::getTileStats(CLDaemonStats_Type::LocationNetworkQueries &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(sub_10015EB2C(a1, 2u) + 288);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  int v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *(_DWORD *)(a2 + 88);
    *(_DWORD *)buf = 67109120;
    int v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: stats: getTileStats, hrseTilesDownloaded, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    double v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::getTileStats(CLDaemonStats_Type::LocationNetworkQueries &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_10015E8B0(a1, (uint64_t)"resetStats", (uint64_t)&stru_10230CDB8);
}

void sub_1010518E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10105194C(uint64_t a1, unsigned int *a2, const char *a3)
{
  if ((*a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101A9DBC4();
    __break(1u);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  int v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    unsigned int v7 = *a2;
    double v8 = sub_100147F50(*a2);
    *(_DWORD *)buf = 67240707;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)double v29 = 2081;
    *(void *)&v29[2] = v8;
    __int16 v30 = 2082;
    double v31 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "TileMgr, deleteTileFile, tileType, %{public}d, %{private}s, localPathToFile, %{public}s, #CloneMe", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    unsigned int v21 = *a2;
    unint64_t v22 = sub_100147F50(*a2);
    *(_DWORD *)long long v25 = 67240707;
    *(_DWORD *)&v25[4] = v21;
    *(_WORD *)&v25[8] = 2081;
    *(void *)&v25[10] = v22;
    __int16 v26 = 2082;
    double v27 = a3;
    unint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTilesManager::deleteTileFile(const CLTilesManager_Type::TileType &, const char *)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  double v9 = (uint64_t **)(sub_10015EB2C(a1, *a2) + 184);
  int v10 = (void *)sub_1000D8908((uint64_t)v9);
  if (v10 == (void *)sub_1000B894C((uint64_t)v9)) {
    return 0;
  }
  while (1)
  {
    uint64_t v11 = v10[10];
    sub_101048050(v11, (std::string *)buf);
    size_t v12 = strlen(a3);
    if (SBYTE3(v31) < 0) {
      break;
    }
    if (v12 == BYTE3(v31))
    {
      if (v12 == -1) {
        goto LABEL_46;
      }
      if (!memcmp(buf, a3, v12)) {
        goto LABEL_25;
      }
    }
LABEL_18:
    double v15 = (void *)v10[1];
    if (v15)
    {
      do
      {
        uint64_t v16 = v15;
        double v15 = (void *)*v15;
      }
      while (v15);
    }
    else
    {
      do
      {
        uint64_t v16 = (void *)v10[2];
        BOOL v17 = *v16 == (void)v10;
        int v10 = v16;
      }
      while (!v17);
    }
    int v10 = v16;
    if (v16 == (void *)sub_1000B894C((uint64_t)v9)) {
      return 0;
    }
  }
  if (v12 != *(void *)v29)
  {
    operator delete(*(void **)buf);
    goto LABEL_18;
  }
  if (v12 == -1) {
LABEL_46:
  }
    sub_1002E93D4();
  double v13 = *(void **)buf;
  int v14 = memcmp(*(const void **)buf, a3, v12);
  operator delete(v13);
  if (v14) {
    goto LABEL_18;
  }
LABEL_25:
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  unint64_t v19 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v11 + 16))(buf, v11);
    unint64_t v20 = SBYTE3(v31) >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)long long v25 = 136315138;
    *(void *)&v25[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: deleteTileFile, deleting, tileid, %s", v25, 0xCu);
    if (SBYTE3(v31) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v11 + 16))(v25, v11);
    long long v24 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE3(v27) < 0) {
      operator delete(*(void **)v25);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::deleteTileFile(const CLTilesManager_Type::TileType &, const char *)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  sub_101048104(v11);
  sub_1008B3890(v9, (uint64_t)v10);
  return 1;
}

void sub_101051E80(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_101051EF0(uint64_t a1, double a2, double a3, float a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12 = a1;
  int v91 = 9;
  uint64_t v13 = sub_10015EB2C(a1, 9u);
  sub_1003B2350(a6);
  if (!*(unsigned char *)(v12 + 201))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    double v67 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v68 = *(unsigned __int8 *)(v12 + 200);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v68;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, index is not available until first unlock, fDataProtectionEnabled, %d", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v69 = *(unsigned __int8 *)(v12 + 200);
    *(_DWORD *)v92 = 67109120;
    *(_DWORD *)&v92[4] = v69;
    double v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v70);
LABEL_137:
    if (v70 != buf) {
      free(v70);
    }
    return 0;
  }
  if (*(unsigned char *)v13)
  {
    v90[0] = 0;
    v90[1] = 0;
    double v89 = (uint64_t *)v90;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = a2;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = a3;
      *(_WORD *)&unsigned char buf[22] = 2048;
      double v99 = a4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, loc, %.8lf, %.8lf, radius, %.3f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      *(_DWORD *)v92 = 134218496;
      *(double *)&v92[4] = a2;
      *(_WORD *)&v92[12] = 2048;
      *(double *)&v92[14] = a3;
      *(_WORD *)&v92[22] = 2048;
      *(double *)double v93 = a4;
      int v72 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v72);
      if (v72 != buf) {
        free(v72);
      }
    }
    sub_10014F674((uint64_t)&v85, &v91);
    sub_100146674((uint64_t)&v85, -1, a2, a3, *(double *)(v13 + 152), *(double *)(v13 + 160));
    double v83 = 0.0;
    double v84 = 0.0;
    double v81 = 0.0;
    double v82 = 0.0;
    sub_1004BDD98(&v84, &v83, &v82, &v81, a2, a3, a4);
    uint64_t v77 = v12;
    if (!sub_10013D858(v13 + 184, (unsigned int *)&v85)) {
      goto LABEL_31;
    }
    double v15 = (void *)sub_100144000(v13 + 184, (unsigned int *)&v85);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v16 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v15 + 16))(buf, v15);
      BOOL v17 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)v92 = 136315138;
      *(void *)&v92[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, tile, %s", v92, 0xCu);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v12 = v77;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v15 + 16))(v92, v15);
      if (v92[23] >= 0) {
        uint64_t v73 = v92;
      }
      else {
        uint64_t v73 = *(unsigned char **)v92;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v73;
      double v74 = (char *)_os_log_send_and_compose_impl();
      if ((v92[23] & 0x80000000) != 0) {
        operator delete(*(void **)v92);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v74);
      if (v74 != buf) {
        free(v74);
      }
      uint64_t v12 = v77;
    }
    else if (!v15)
    {
LABEL_31:
      for (unsigned int i = -1; i != 2; ++i)
      {
        for (unsigned int j = -1; j != 2; ++j)
        {
          if (j | i)
          {
            *(_OWORD *)v92 = v85;
            *(void *)&v92[16] = v86;
            if (SHIBYTE(v88) < 0)
            {
              sub_1000DC48C(v93, (void *)v87, *((unint64_t *)&v87 + 1));
            }
            else
            {
              *(_OWORD *)double v93 = v87;
              *(void *)&v93[16] = v88;
            }
            double v25 = *(double *)(v13 + 160);
            float32_t v26 = *(double *)(v13 + 152);
            *(float *)&double v25 = v25;
            sub_100143FCC((uint64_t)v92, i, j, v26, *(float32x2_t *)&v25);
            if (sub_10013D858(v13 + 184, (unsigned int *)v92))
            {
              uint64_t v27 = sub_100144000(v13 + 184, (unsigned int *)v92);
              int v28 = (void *)v27;
              if (v27)
              {
                if (sub_1001453B8(v27, *(unsigned char *)(v12 + 200)))
                {
                  double v29 = v90[0];
                  if (!v90[0]) {
                    goto LABEL_49;
                  }
                  __int16 v30 = v90;
                  do
                  {
                    double v31 = v29;
                    long long v32 = v30;
                    unint64_t v33 = v29[4];
                    long long v34 = v29 + 1;
                    if (v33 >= (unint64_t)v28)
                    {
                      long long v34 = v31;
                      __int16 v30 = (void **)v31;
                    }
                    double v29 = (void *)*v34;
                  }
                  while (v29);
                  if (v30 == v90) {
                    goto LABEL_49;
                  }
                  if (v33 < (unint64_t)v28) {
                    double v31 = v32;
                  }
                  if ((unint64_t)v28 >= v31[4])
                  {
                    if (qword_102419380 != -1) {
                      dispatch_once(&qword_102419380, &stru_10230D000);
                    }
                    __int16 v40 = qword_102419388;
                    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "TILE: already been searched", buf, 2u);
                    }
                    uint64_t v12 = v77;
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_10230D000);
                      }
                      LOWORD(__p[0]) = 0;
                      long long v43 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v43);
                      if (v43 != buf) {
                        free(v43);
                      }
                      uint64_t v12 = v77;
                    }
                  }
                  else
                  {
LABEL_49:
                    if (qword_102419380 != -1) {
                      dispatch_once(&qword_102419380, &stru_10230D000);
                    }
                    uint64_t v35 = qword_102419388;
                    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
                    {
                      (*(void (**)(void **__return_ptr, void *))(*(void *)v28 + 16))(__p, v28);
                      uint64_t v36 = __p;
                      if (SBYTE7(v97[0]) < 0) {
                        uint64_t v36 = (void **)__p[0];
                      }
                      *(_DWORD *)buf = 67109634;
                      *(_DWORD *)&uint8_t buf[4] = i;
                      *(_WORD *)&uint8_t buf[8] = 1024;
                      *(_DWORD *)&buf[10] = j;
                      *(_WORD *)&unsigned char buf[14] = 2080;
                      *(void *)&buf[16] = v36;
                      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, y, %d, x, %d, ntile, %s", buf, 0x18u);
                      if (SBYTE7(v97[0]) < 0) {
                        operator delete(__p[0]);
                      }
                    }
                    uint64_t v12 = v77;
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419380 != -1) {
                        dispatch_once(&qword_102419380, &stru_10230D000);
                      }
                      (*(void (**)(void **__return_ptr, void *))(*(void *)v28 + 16))(v79, v28);
                      long long v41 = v79;
                      if (v80 < 0) {
                        long long v41 = (void **)v79[0];
                      }
                      LODWORD(__p[0]) = 67109634;
                      HIDWORD(__p[0]) = i;
                      LOWORD(__p[1]) = 1024;
                      *(_DWORD *)((char *)&__p[1] + 2) = j;
                      HIWORD(__p[1]) = 2080;
                      *(void *)&v97[0] = v41;
                      long long v42 = (char *)_os_log_send_and_compose_impl();
                      if (v80 < 0) {
                        operator delete(v79[0]);
                      }
                      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v42);
                      if (v42 != buf) {
                        free(v42);
                      }
                      uint64_t v12 = v77;
                    }
                    *(void *)buf = buf;
                    *(void *)&uint8_t buf[8] = buf;
                    *(void *)&buf[16] = 0;
                    v79[0] = v28;
                    __p[0] = v79;
                    unint64_t v37 = sub_101069754(&v89, (unint64_t *)v79, (uint64_t)&unk_101D0B290, (uint64_t **)__p);
                    sub_101069898(v37 + 5, buf);
                    sub_1003B2350(buf);
                    *(double *)std::string __p = v82 - v84;
                    *(double *)std::string v79 = v81 - v83;
                    unint64_t v78 = v28;
                    *(void *)buf = &v78;
                    unint64_t v38 = sub_101069754(&v89, (unint64_t *)&v78, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
                    (*(void (**)(void *, double *, double *, void **, void **, uint64_t, void, uint64_t *))(*(void *)v28 + 176))(v28, &v84, &v83, __p, v79, 1, 0, v38 + 5);
                    __p[0] = v28;
                    *(void *)buf = __p;
                    if (sub_101069754(&v89, (unint64_t *)__p, (uint64_t)&unk_101D0B290, (uint64_t **)buf)[7])
                    {
                      double v39 = (*(double (**)(void))(**(void **)(v12 + 464) + 56))(*(void *)(v12 + 464));
                      sub_100144E3C((uint64_t)v28, v39);
                    }
                  }
                }
              }
            }
            if ((v93[23] & 0x80000000) != 0) {
              operator delete(*(void **)v93);
            }
          }
        }
      }
      sub_1003B2350(a6);
      __p[0] = 0;
      memset((char *)v97 + 8, 0, 32);
      __int16 v44 = v89;
      if (v89 != (uint64_t *)v90)
      {
        do
        {
          uint64_t v45 = v44[6];
          if ((uint64_t *)v45 != v44 + 5)
          {
            uint64_t v46 = v44[4];
            do
            {
              unsigned int v47 = *(unsigned __int16 *)(v45 + 26);
              int8x16_t v48 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vdup_n_s16(v47), (int8x8_t)0x8000400020001));
              *(int8x8_t *)v48.i8 = vorr_s8(*(int8x8_t *)v48.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
              LODWORD(__p[0]) = v48.i32[0] | v47 & 0x10 | v48.i32[1] | (uint64_t)__p[0] & 0xFFFFFFE0;
              if (sub_100D33DEC(v45 + 16)) {
                int v49 = 32;
              }
              else {
                int v49 = 0;
              }
              __p[0] = (void *)__PAIR64__(*(_DWORD *)(v45 + 20), (uint64_t)__p[0] & 0xFFFFFFDF | v49);
              unsigned int v50 = *(unsigned __int8 *)(v45 + 25);
              LODWORD(__p[1]) = 10 * *(unsigned __int8 *)(v45 + 24);
              HIDWORD(__p[1]) = v50 >> 4;
              LODWORD(v97[0]) = v50 & 0xF;
              sub_10104C204(v46, *(unsigned __int16 *)(v45 + 16), *(unsigned __int16 *)(v45 + 18), (double *)v97 + 1, (double *)&v97[1]);
              uint64_t v51 = *(void *)(v13 + 168);
              v52.i64[0] = v51;
              v52.i64[1] = HIDWORD(v51);
              *(float64x2_t *)((char *)&v97[1] + 8) = vdivq_f64(*(float64x2_t *)(v13 + 152), vcvtq_f64_u64(v52));
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              int v53 = qword_102419388;
              if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v54 = a6[2];
                sub_101065BC0(v45 + 16);
                unint64_t v55 = v92;
                if (v92[23] < 0) {
                  unint64_t v55 = *(unsigned char **)v92;
                }
                *(_DWORD *)buf = 134219266;
                *(void *)&uint8_t buf[4] = v54;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&unsigned char buf[14] = v55;
                *(_WORD *)&unsigned char buf[22] = 2048;
                double v99 = *((double *)v97 + 1);
                __int16 v100 = 2048;
                uint64_t v101 = *(void *)&v97[1];
                __int16 v102 = 2048;
                uint64_t v103 = *((void *)&v97[1] + 1);
                __int16 v104 = 2048;
                uint64_t v105 = *(void *)&v97[2];
                _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, appRecommendation, %lu, %s, loc, %.10lf, %.10lf, span, %.10lf, %.10lf", buf, 0x3Eu);
                if ((v92[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v92);
                }
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419380 != -1) {
                  dispatch_once(&qword_102419380, &stru_10230D000);
                }
                uint64_t v60 = a6[2];
                sub_101065BC0(v45 + 16);
                long long v61 = v79;
                if (v80 < 0) {
                  long long v61 = (void **)v79[0];
                }
                *(_DWORD *)v92 = 134219266;
                *(void *)&v92[4] = v60;
                *(_WORD *)&v92[12] = 2080;
                *(void *)&v92[14] = v61;
                *(_WORD *)&v92[22] = 2048;
                *(void *)double v93 = *((void *)&v97[0] + 1);
                *(_WORD *)&v93[8] = 2048;
                *(void *)&v93[10] = *(void *)&v97[1];
                *(_WORD *)&v93[18] = 2048;
                *(void *)&v93[20] = *((void *)&v97[1] + 1);
                __int16 v94 = 2048;
                uint64_t v95 = *(void *)&v97[2];
                long long v62 = (char *)_os_log_send_and_compose_impl();
                if (v80 < 0) {
                  operator delete(v79[0]);
                }
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v62);
                if (v62 != buf) {
                  free(v62);
                }
              }
              unint64_t v56 = operator new(0x48uLL);
              v56[8] = *(void *)&v97[2];
              long long v57 = v97[1];
              long long v58 = *(_OWORD *)__p;
              *((_OWORD *)v56 + 2) = v97[0];
              *((_OWORD *)v56 + 3) = v57;
              *((_OWORD *)v56 + 1) = v58;
              uint64_t v59 = *a6;
              *unint64_t v56 = *a6;
              v56[1] = a6;
              *(void *)(v59 + 8) = v56;
              *a6 = (uint64_t)v56;
              ++a6[2];
              uint64_t v45 = *(void *)(v45 + 8);
            }
            while ((uint64_t *)v45 != v44 + 5);
          }
          double v63 = (uint64_t *)v44[1];
          if (v63)
          {
            do
            {
              int v64 = v63;
              double v63 = (uint64_t *)*v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              int v64 = (uint64_t *)v44[2];
              BOOL v65 = *v64 == (void)v44;
              __int16 v44 = v64;
            }
            while (!v65);
          }
          __int16 v44 = v64;
        }
        while (v64 != (uint64_t *)v90);
      }
      if (SHIBYTE(v88) < 0) {
        operator delete((void *)v87);
      }
      sub_1010696F8((uint64_t)&v89, v90[0]);
      return 1;
    }
    if (sub_1001453B8((uint64_t)v15, *(unsigned char *)(v12 + 200)))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v18 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v15 + 16))(buf, v15);
        unint64_t v19 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)v92 = 136315138;
        *(void *)&v92[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, ctile, %s", v92, 0xCu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t v12 = v77;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        (*(void (**)(unsigned char *__return_ptr, void *))(*(void *)v15 + 16))(v92, v15);
        if (v92[23] >= 0) {
          uint64_t v75 = v92;
        }
        else {
          uint64_t v75 = *(unsigned char **)v92;
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v75;
        unint64_t v76 = (char *)_os_log_send_and_compose_impl();
        if ((v92[23] & 0x80000000) != 0) {
          operator delete(*(void **)v92);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v76);
        if (v76 != buf) {
          free(v76);
        }
        uint64_t v12 = v77;
      }
      *(void *)buf = buf;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0;
      __p[0] = v15;
      *(void *)v92 = __p;
      unint64_t v20 = sub_101069754(&v89, (unint64_t *)__p, (uint64_t)&unk_101D0B290, (uint64_t **)v92);
      sub_101069898(v20 + 5, buf);
      sub_1003B2350(buf);
      *(double *)v92 = v82 - v84;
      *(double *)std::string __p = v81 - v83;
      v79[0] = v15;
      *(void *)buf = v79;
      unsigned int v21 = sub_101069754(&v89, (unint64_t *)v79, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
      (*(void (**)(void *, double *, double *, unsigned char *, void **, uint64_t, uint64_t, uint64_t *))(*(void *)v15 + 176))(v15, &v84, &v83, v92, __p, 1, a7, v21 + 5);
      *(void *)v92 = v15;
      *(void *)buf = v92;
      if (sub_101069754(&v89, (unint64_t *)v92, (uint64_t)&unk_101D0B290, (uint64_t **)buf)[7])
      {
        double v22 = (*(double (**)(void))(**(void **)(v12 + 464) + 56))(*(void *)(v12 + 464));
        sub_100144E3C((uint64_t)v15, v22);
      }
    }
    goto LABEL_31;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  double v71 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = 9;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = sub_100147F50(9u);
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "TILE: getAppAvailabilityForArea, tiles, %d, %s, are not active on this device", buf, 0x12u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    *(_DWORD *)v92 = 67109378;
    *(_DWORD *)&v92[4] = 9;
    *(_WORD *)&v92[8] = 2080;
    *(void *)&v92[10] = sub_100147F50(9u);
    double v70 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, BOOL)", "%s\n", v70);
    goto LABEL_137;
  }
  return result;
}

void sub_1010533B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  sub_1010696F8((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

uint64_t sub_1010534E0(uint64_t a1, id **a2, uint64_t a3, double a4, double a5)
{
  if (!a3)
  {
    sub_101A9DE9C();
    __break(1u);
LABEL_21:
    dispatch_once(&qword_102419380, &stru_10230D000);
    goto LABEL_5;
  }
  uint64_t v5 = a3;
  int v6 = a2;
  uint64_t v7 = a1;
  int v24 = 11;
  uint64_t v12 = (double *)sub_10015EB2C(a1, 0xBu);
  *(void *)(v5 + 8) = *(void *)v5;
  if (!*(unsigned char *)v12) {
    return 0;
  }
  uint64_t v13 = v12;
  sub_10014F674((uint64_t)v21, &v24);
  sub_100146674((uint64_t)v21, -1, a4, a5, v13[19], v13[20]);
  uint64_t v14 = (uint64_t)(v13 + 23);
  if (!sub_10013D858(v14, v21)) {
    goto LABEL_15;
  }
  uint64_t v8 = sub_100144000(v14, v21);
  double v9 = &qword_102419000;
  if (qword_102419380 != -1) {
    goto LABEL_21;
  }
LABEL_5:
  double v15 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 16))(__p, v8);
    uint64_t v16 = v30 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TransitMac: getTransitMacAddresses, tile exists, %s", buf, 0xCu);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (v9[112] != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v8 + 16))(buf, v8);
    if (v26 >= 0) {
      unint64_t v19 = buf;
    }
    else {
      unint64_t v19 = *(unsigned char **)buf;
    }
    int v27 = 136315138;
    int v28 = v19;
    unint64_t v20 = (char *)_os_log_send_and_compose_impl();
    if (v26 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::getTransitMacAddresses(std::vector<uint64_t> *, double, double, std::vector<CLTilesManager_Type::TransitMac> *)", "%s\n", v20);
    if (v20 != (char *)__p) {
      free(v20);
    }
  }
  else if (!v8)
  {
    goto LABEL_15;
  }
  if (sub_1001453B8(v8, *(unsigned char *)(v7 + 200)))
  {
    sub_1005DB03C(v8, v6, (char **)v5);
    uint64_t v17 = 1;
    goto LABEL_16;
  }
LABEL_15:
  uint64_t v17 = 0;
LABEL_16:
  if (v23 < 0) {
    operator delete(v22);
  }
  return v17;
}

void sub_10105381C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010538D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010538F0(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  if ((a3 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101A9E008();
  }
  else
  {
    double v9 = a4;
    unsigned int v7 = a3;
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    uint64_t v6 = sub_10015EB2C(a1, a3);
    uint64_t v8 = &qword_102419000;
    if (qword_102419380 == -1) {
      goto LABEL_3;
    }
  }
  dispatch_once(&qword_102419380, &stru_10230D000);
LABEL_3:
  int v10 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109378;
    unsigned int v14 = v7;
    __int16 v15 = 2080;
    uint64_t v16 = sub_100147F50(v7);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: listTilesDirectory, tileType, %d, %s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[112] != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    sub_100147F50(v7);
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listTilesDirectory(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return sub_10105CB84(v5, v4, *(_DWORD *)(v6 + 4), v9);
}

void sub_101053B18(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = a1 + 268;
  uint64_t v8 = sub_101054820(a1, "CLTilesManager", a2);
  *(void *)(v8 + 120) = 0;
  *(void *)uint64_t v8 = &off_10230CC18;
  *(void *)(v8 + 112) = v8 + 120;
  *(void *)(v8 + 128) = 0;
  *(void *)(v8 + 136) = "";
  *(unsigned char *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = 0;
  *(void *)(v8 + 160) = 0;
  *(void *)(v8 + 168) = "";
  *(unsigned char *)(v8 + 176) = 0;
  *(void *)(v8 + 184) = 0;
  *(void *)(v8 + 192) = 0;
  *(_WORD *)(v8 + 200) = 0;
  *(_OWORD *)(v8 + 208) = xmmword_101D9DED0;
  *(void *)(v8 + 224) = 0x40C5180000000000;
  *(void *)(v8 + 240) = 0;
  *(_DWORD *)(v8 + 248) = 0xFFFF;
  *(void *)(v8 + 252) = 0;
  *(void *)(v8 + 260) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)uint64_t v7 = xmmword_101D1C320;
  *(_OWORD *)(v7 + 16) = _Q1;
  *(_OWORD *)(v7 + 32) = _Q1;
  *(_OWORD *)(v7 + 48) = _Q1;
  *(_DWORD *)(v8 + 332) = 0;
  *(_DWORD *)(v8 + 360) = 0;
  *(void *)(v8 + 336) = 0xBFF0000000000000;
  *(void *)(v8 + 344) = 0;
  *(void *)(v8 + 352) = 0;
  *(void *)(v7 + 96) = 0xBFF0000000000000;
  *(_DWORD *)(v8 + 372) = 0x7FFFFFFF;
  *(void *)(v8 + 384) = 0;
  *(void *)(v8 + 392) = 0;
  *(void *)(v8 + 376) = 0;
  *(unsigned char *)(v8 + 400) = 0;
  *(_DWORD *)(v8 + 424) = 0;
  *(void *)(v8 + 408) = 0;
  *(void *)(v8 + 416) = 0;
  *(unsigned char *)(v8 + 428) = 1;
  *(void *)(v8 + 432) = 0x190000000C8;
  *(unsigned char *)(v8 + 440) = 0;
  *(_DWORD *)(v8 + 444) = 8;
  *(unsigned char *)(v8 + 448) = 0;
  *(_DWORD *)(v8 + 452) = 5;
  *(unsigned char *)(v8 + 456) = 1;
  uint64_t v14 = *a3;
  *a3 = 0;
  *(void *)(v8 + 464) = v14;
  sub_100FFB380((void *)(v8 + 472), *(void *)(a1 + 40));
  *(unsigned char *)(a1 + 496) = 0;
  sub_1013182A0(a1 + 504);
  *(void *)(a1 + 528) = a1 + 528;
  *(void *)(a1 + 536) = a1 + 528;
  *(void *)(a1 + 544) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 556) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  sub_100134750((void *)(a1 + 568), "cldavl.avl");
  *(unsigned char *)(a1 + 592) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 616) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 624) = a1 + 624;
  *(void *)(a1 + 632) = a1 + 624;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 646) = 0;
  sub_100134750((void *)(a1 + 680), "clhrseavl.avl");
  *(unsigned char *)(a1 + 704) = 0;
  if (*(unsigned char *)(a4 + 24))
  {
    sub_1013182A4((long long *)(a1 + 504), (long long *)a4);
    sub_1000C7F88(&buf);
    __int16 v15 = (int *)(a1 + 436);
    sub_10006EF84(buf, "MaxDownloadListSize", (_DWORD *)(a1 + 436));
    if (*((void *)&buf + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v16 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *v15;
      LODWORD(buf) = 67109120;
      DWORD1(buf) = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: fDefaultMaxDownloadListSize, %d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      int v24 = *v15;
      v33[0] = 67109120;
      v33[1] = v24;
      double v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v25);
      if (v25 != (char *)&buf) {
        free(v25);
      }
    }
    sub_1000C7F88(&buf);
    sub_1000A699C(buf, "MTimeModificationPeriod", &qword_102477288);
    if (*((void *)&buf + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&buf + 1));
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = qword_102477288;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: MTimeModificationPeriod, %.1lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      v33[0] = 134217984;
      *(void *)&v33[1] = qword_102477288;
      char v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v26);
      if (v26 != (char *)&buf) {
        free(v26);
      }
    }
    *(void *)(a1 + 232) = *(void *)(a1 + 224);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1010565F4;
    v32[3] = &unk_1022C1698;
    v32[4] = a1;
    sub_10015E8B0(a1, (uint64_t)"initialize", (uint64_t)v32);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    unint64_t v19 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TmmMgr, ctor", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      LOWORD(v33[0]) = 0;
      int v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v27);
      if (v27 != (char *)&buf) {
        free(v27);
      }
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    unint64_t v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v21 = *(void *)(a1 + 232);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: fMinEncryptionGracePeriod, %.2lf", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v28 = *(void *)(a1 + 232);
      v33[0] = 134217984;
      *(void *)&v33[1] = v28;
      double v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v29);
      if (v29 != (char *)&buf) {
        free(v29);
      }
    }
    *(unsigned char *)(a1 + 200) = (*(uint64_t (**)(void))(**(void **)(a1 + 464) + 24))(*(void *)(a1 + 464));
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    double v22 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      int v23 = *(unsigned __int8 *)(a1 + 200);
      LODWORD(buf) = 67240192;
      DWORD1(buf) = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "@TileEvent, all, locked, %{public}d", (uint8_t *)&buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      int v30 = *(unsigned __int8 *)(a1 + 200);
      v33[0] = 67240192;
      v33[1] = v30;
      double v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)", "%s\n", v31);
      if (v31 != (char *)&buf) {
        free(v31);
      }
    }
    operator new();
  }
  sub_1010548CC(a1, (uint64_t)&buf);
}

void sub_101054684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_10105704C(v27);
  sub_101057098(v26);
  sub_100D1A044((void ***)&__p);
  uint64_t v29 = *(void *)(v24 + 464);
  *(void *)(v24 + 464) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *(void *)(v24 + 192);
  *(void *)(v24 + 192) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *(void *)(v24 + 160);
  *(void *)(v24 + 160) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  sub_1008B4894(v25, *(void **)(v24 + 120));
  sub_1010570E4(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_101054820(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10230D070;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1010548B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010548CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v67 = (*(uint64_t (**)(void))(**(void **)(a1 + 464) + 40))(*(void *)(a1 + 464));
  char v66 = 1;
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "AppTilesActive", &v67);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v67;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: isAppTilesActive, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v67;
    unint64_t v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
  }
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "TilePreloadManifestTilesActive", (BOOL *)&v66);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v66;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: isTilePreloadManifestActive, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v66;
    double v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v39);
    if (v39 != buf) {
      free(v39);
    }
  }
  sub_101057238();
  if (byte_102482B48[23] < 0) {
    sub_1000DC48C(&__dst, *(void **)byte_102482B48, *(unint64_t *)&byte_102482B48[8]);
  }
  else {
    std::string __dst = *(std::string *)byte_102482B48;
  }
  sub_1000C7F88(buf);
  BOOL v65 = sub_1004D1284(*(uint64_t *)buf, "DEMTilesServerUrl", &__dst);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  uint64_t v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    p_dst = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136380931;
    *(void *)&uint8_t buf[4] = p_dst;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v65;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: defaultDemTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    __int16 v40 = &__dst;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v40 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    LODWORD(v73.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v73.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
    WORD2(v73.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v73.__r_.__value_.__r.__words[1] + 6) = v65;
    long long v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v41);
    if (v41 != buf) {
      free(v41);
    }
  }
  sub_1010572D8();
  if (byte_102482B98[23] < 0) {
    sub_1000DC48C(&v73, *(void **)byte_102482B98, *(unint64_t *)&byte_102482B98[8]);
  }
  else {
    std::string v73 = *(std::string *)byte_102482B98;
  }
  sub_1000C7F88(buf);
  BOOL v64 = sub_1004D1284(*(uint64_t *)buf, "HrseTilesServerUrl", &v73);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  uint64_t v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    double v9 = &v73;
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      double v9 = (std::string *)v73.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136380931;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v64;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TILE: defaultHrseTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    long long v42 = &v73;
    if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v42 = (std::string *)v73.__r_.__value_.__r.__words[0];
    }
    LODWORD(v72.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v72.__r_.__value_.__r.__words + 4) = (std::string::size_type)v42;
    WORD2(v72.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v72.__r_.__value_.__r.__words[1] + 6) = v64;
    long long v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v43);
    if (v43 != buf) {
      free(v43);
    }
  }
  sub_101057378();
  if (byte_102482C38[23] < 0) {
    sub_1000DC48C(&v72, *(void **)byte_102482C38, *(unint64_t *)&byte_102482C38[8]);
  }
  else {
    std::string v72 = *(std::string *)byte_102482C38;
  }
  sub_1000C7F88(buf);
  BOOL v63 = sub_1004D1284(*(uint64_t *)buf, "TilePreloadManifestServerUrl", &v72);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  int v10 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v11 = &v72;
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v11 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136380931;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v63;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: defaultTilePreloadManifestServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    __int16 v44 = &v72;
    if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      __int16 v44 = (std::string *)v72.__r_.__value_.__r.__words[0];
    }
    LODWORD(v71.__r_.__value_.__l.__data_) = 136380931;
    *(std::string::size_type *)((char *)v71.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
    WORD2(v71.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v71.__r_.__value_.__r.__words[1] + 6) = v63;
    uint64_t v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v45);
    if (v45 != buf) {
      free(v45);
    }
  }
  sub_101057418();
  if (byte_102482C88[23] < 0) {
    sub_1000DC48C(&v71, *(void **)byte_102482C88, *(unint64_t *)&byte_102482C88[8]);
  }
  else {
    std::string v71 = *(std::string *)byte_102482C88;
  }
  sub_1000C7F88(buf);
  BOOL v62 = sub_1004D1284(*(uint64_t *)buf, "TransitMacServerUrl", &v71);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  uint64_t v12 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v13 = &v71;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v13 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136380931;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v62;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: defaultTransitMacTilesServerUrl, %{private}s, overridden, %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    uint64_t v46 = &v71;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v46 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    __p[0] = 136380931;
    *(void *)&__p[1] = v46;
    __int16 v69 = 1026;
    BOOL v70 = v62;
    unsigned int v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v47);
    if (v47 != buf) {
      free(v47);
    }
  }
  sub_1000C7F88(buf);
  uint64_t v14 = (uint64_t *)(a1 + 208);
  sub_1000A699C(*(uint64_t *)buf, "MaxTileAge", (void *)(a1 + 208));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  __int16 v15 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *v14;
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: fDefaultMaxTileAge, %.1lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v48 = *v14;
    __p[0] = 134217984;
    *(void *)&__p[1] = v48;
    int v49 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v49);
    if (v49 != buf) {
      free(v49);
    }
  }
  sub_1000C7F88(buf);
  int v17 = (uint64_t *)(a1 + 216);
  sub_1000A699C(*(uint64_t *)buf, "AncientTilesThreshold", (void *)(a1 + 216));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v18 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v19 = *v17;
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: fDefaultMaxTileDataAge, %.1lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v50 = *v17;
    __p[0] = 134217984;
    *(void *)&__p[1] = v50;
    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v51);
    if (v51 != buf) {
      free(v51);
    }
  }
  sub_1000C7F88(buf);
  unint64_t v20 = (uint64_t *)(a1 + 224);
  sub_1000A699C(*(uint64_t *)buf, "EncryptionGracePeriod", (void *)(a1 + 224));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v21 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *v20;
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TILE: fDefaultEncryptionGracePeriod, %.1lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v52 = *v20;
    __p[0] = 134217984;
    *(void *)&__p[1] = v52;
    int v53 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v53);
    if (v53 != buf) {
      free(v53);
    }
  }
  sub_1000C7F88(buf);
  int v23 = (int *)(a1 + 432);
  sub_10006EF84(*(uint64_t *)buf, "MaxNumOfTiles", (_DWORD *)(a1 + 432));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v24 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v25 = *v23;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TILE: fMaxNumOfTiles, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v54 = *v23;
    __p[0] = 67109120;
    __p[1] = v54;
    unint64_t v55 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v55);
    if (v55 != buf) {
      free(v55);
    }
  }
  sub_1000C7F88(buf);
  uint64_t v26 = (BOOL *)(a1 + 440);
  char v27 = sub_1000D2988(*(uint64_t *)buf, "DisableTilesWhileLocked", (BOOL *)(a1 + 440));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v27 & 1) == 0)
  {
    sub_100103240();
    BOOL *v26 = sub_10073D36C();
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v28 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    BOOL v29 = *v26;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "TILE: fDefaultDisableTilesWhileLocked, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    BOOL v56 = *v26;
    __p[0] = 67109120;
    __p[1] = v56;
    long long v57 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v57);
    if (v57 != buf) {
      free(v57);
    }
  }
  sub_1000C7F88(buf);
  uint64_t v30 = (int *)(a1 + 444);
  int v31 = sub_10006EF84(*(uint64_t *)buf, "NumOfSurroundingCirclesDEM", (_DWORD *)(a1 + 444));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v31 && *v30 < 0) {
    int *v30 = 8;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10230D020);
  }
  long long v32 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v33 = *v30;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "TILE: DEM,fDefaultNumOfSurroundingCirclesDEM, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10230D020);
    }
    int v58 = *v30;
    __p[0] = 67109120;
    __p[1] = v58;
    uint64_t v59 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v59);
    if (v59 != buf) {
      free(v59);
    }
  }
  sub_1000C7F88(buf);
  long long v34 = (int *)(a1 + 452);
  int v35 = sub_10006EF84(*(uint64_t *)buf, "NumOfSurroundingCirclesHrse", (_DWORD *)(a1 + 452));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v35 && *v34 < 0) {
    *long long v34 = 5;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_10230D020);
  }
  uint64_t v36 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v37 = *v34;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v37;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "TILE: HRSE,fDefaultNumOfSurroundingCirclesHrse, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_10230D020);
    }
    int v60 = *v34;
    __p[0] = 67109120;
    __p[1] = v60;
    long long v61 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()", "%s\n", v61);
    if (v61 != buf) {
      free(v61);
    }
  }
  sub_1013182A0(a2);
  operator new();
}

void sub_1010563B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  _Unwind_Resume(a1);
}

void sub_1010565F4(uint64_t a1, uint64_t a2)
{
  *(double *)(*(void *)(a1 + 32) + 232) = fmin(*(double *)(*(void *)(a1 + 32) + 232), *(double *)(a2 + 136));
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v4 = *(void *)(a2 + 8);
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TILE: registered, tilesSet, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTilesManager::CLTilesManager(id<CLIntersiloUniverse>, std::unique_ptr<CLITilesManagerExternal>, std::optional<CLTilesSetCollection>)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1010567D8(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230CFC0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTilesManager::onPCTimerFired", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230CFC0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      uint64_t v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTilesManager::onPCTimerFired\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_101065578(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_10105698C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010569AC(uint64_t a1, double a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesAllTypes, start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    __int16 v14 = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  int v5 = *(unsigned __int8 *)(a1 + 200);
  if (*(unsigned char *)(a1 + 200))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesAllTypes, can't list tiles while locked, wait for unlock", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      __int16 v14 = 0;
LABEL_15:
      char v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else if (!*(unsigned char *)(a1 + 201))
  {
    if (byte_102482AD0) {
      goto LABEL_20;
    }
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_10105DB30;
    v13[3] = &unk_10230CD70;
    v13[4] = &stru_10230CD48;
    v13[5] = a1;
    sub_10015E8B0(a1, (uint64_t)"listerSetClass", (uint64_t)v13);
    byte_102482AD0 = 1;
    if (!*(unsigned char *)(a1 + 201))
    {
LABEL_20:
      uint64_t v8 = *(void **)(a1 + 40);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      v12[2] = sub_10105E3B8;
      v12[3] = &unk_1022B8660;
      v12[4] = a1;
      *(double *)&v12[5] = a2;
      [v8 async:v12];
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      int v9 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesAllTypes, done", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        __int16 v14 = 0;
        goto LABEL_15;
      }
    }
  }
  return v5 == 0;
}

id sub_101056E34(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 67109120;
    int v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: _tileDownloadCompleted, success, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v12 = 67109120;
    int v13 = a2;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLTilesManager::_tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  char v7 = *(void **)(a3 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1010628F8;
  v10[3] = &unk_1022C7AC0;
  char v11 = a2;
  v10[4] = a3;
  v10[5] = a1;
  v10[6] = a3;
  return [v7 async:v10];
}

uint64_t sub_10105704C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_1003B2350((void *)a1);
  return a1;
}

uint64_t sub_101057098(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  sub_1003B2350((void *)a1);
  return a1;
}

uint64_t sub_1010570E4(uint64_t a1)
{
  *(void *)a1 = off_10230D070;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101057168()
{
}

void sub_10105720C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  if (a12)
  {
    *(void *)(v13 - 24) = &a9;
    sub_100D1A044((void ***)(v13 - 24));
  }
  sub_101A9E16C(&a13);
  _Unwind_Resume(a1);
}

long long *sub_101057238()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482B60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482B60))
  {
    xmmword_102482B48 = 0uLL;
    unk_102482B58 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102482B48, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482B60);
  }
  if (qword_102482B68 != -1) {
    dispatch_once(&qword_102482B68, &stru_10230CE18);
  }
  return &xmmword_102482B48;
}

long long *sub_1010572D8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482BB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482BB0))
  {
    xmmword_102482B98 = 0uLL;
    unk_102482BA8 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102482B98, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482BB0);
  }
  if (qword_102482BB8 != -1) {
    dispatch_once(&qword_102482BB8, &stru_10230CE58);
  }
  return &xmmword_102482B98;
}

long long *sub_101057378()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482C50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482C50))
  {
    xmmword_102482C38 = 0uLL;
    unk_102482C48 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102482C38, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482C50);
  }
  if (qword_102482C58 != -1) {
    dispatch_once(&qword_102482C58, &stru_10230CED8);
  }
  return &xmmword_102482C38;
}

long long *sub_101057418()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482CA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482CA0))
  {
    xmmword_102482C88 = 0uLL;
    unk_102482C98 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_102482C88, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482CA0);
  }
  if (qword_102482CA8 != -1) {
    dispatch_once(&qword_102482CA8, &stru_10230CF18);
  }
  return &xmmword_102482C88;
}

uint64_t *sub_1010574B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482B38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482B38))
  {
    qword_102482B20 = 0;
    *(void *)algn_102482B28 = 0;
    qword_102482B30 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482B20, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482B38);
  }
  if (qword_102482B40 != -1) {
    dispatch_once(&qword_102482B40, &stru_10230CDF8);
  }
  return &qword_102482B20;
}

uint64_t *sub_101057558()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482B88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482B88))
  {
    qword_102482B70 = 0;
    *(void *)algn_102482B78 = 0;
    qword_102482B80 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482B70, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482B88);
  }
  if (qword_102482B90 != -1) {
    dispatch_once(&qword_102482B90, &stru_10230CE38);
  }
  return &qword_102482B70;
}

uint64_t *sub_1010575F8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482BD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482BD8))
  {
    qword_102482BC0 = 0;
    *(void *)algn_102482BC8 = 0;
    qword_102482BD0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482BC0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482BD8);
  }
  if (qword_102482BE0 != -1) {
    dispatch_once(&qword_102482BE0, &stru_10230CE78);
  }
  return &qword_102482BC0;
}

void sub_101057698(uint64_t a1@<X0>, std::string::size_type a2@<X8>)
{
  uint64_t v3 = (__CFString *)(*(uint64_t (**)(void))(**(void **)(a1 + 464) + 16))(*(void *)(a1 + 464));
  if (v3 && (uint64_t v4 = v3, [(__CFString *)v3 length]))
  {
    id v5 = [(__CFString *)v4 rangeOfCharacterFromSet:[+[NSCharacterSet decimalDigitCharacterSet] invertedSet]];
    if (v5 != (id)0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v4 = (__CFString *)[(__CFString *)v4 substringToIndex:v5];
    }
  }
  else
  {
    uint64_t v4 = @"143441";
  }
  sub_100134750(v22, (char *)[(__CFString *)v4 UTF8String]);
  sub_100103240();
  if (sub_1001B7C64()) {
    uint64_t v6 = "2";
  }
  else {
    uint64_t v6 = "1";
  }
  sub_100134750(__p, v6);
  sub_101065EAC();
  sub_1002F0A00((const void **)&qword_102482BE8, (const void **)__p, (uint64_t)&v19);
  char v7 = std::string::append(&v19, "/");
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if ((v23 & 0x80u) == 0) {
    int v9 = v22;
  }
  else {
    int v9 = (void **)v22[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v10 = v23;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)v22[1];
  }
  char v11 = std::string::append(&v25, (const std::string::value_type *)v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  uint64_t v13 = std::string::append(&v24, "/v1");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = *((void *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  int v15 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v16 = a2;
    }
    else {
      std::string::size_type v16 = *(void *)a2;
    }
    LODWORD(v24.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: fullAppTilesServerUrl, %s", (uint8_t *)&v24, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v24, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v17 = a2;
    }
    else {
      std::string::size_type v17 = *(void *)a2;
    }
    LODWORD(v25.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = v17;
    uint64_t v18 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::string CLTilesManager::composeFullAppTilesServerUrl()", "%s\n", (const char *)v18);
    if (v18 != &v24) {
      free(v18);
    }
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v23 < 0) {
    operator delete(v22[0]);
  }
}

void sub_101057A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 + 23) < 0) {
    operator delete(*(void **)v35);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_101057AB0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482C28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482C28))
  {
    qword_102482C10 = 0;
    *(void *)algn_102482C18 = 0;
    qword_102482C20 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482C10, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482C28);
  }
  if (qword_102482C30 != -1) {
    dispatch_once(&qword_102482C30, &stru_10230CEB8);
  }
  return &qword_102482C10;
}

uint64_t *sub_101057B50()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482C78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482C78))
  {
    qword_102482C60 = 0;
    *(void *)algn_102482C68 = 0;
    qword_102482C70 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482C60, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482C78);
  }
  if (qword_102482C80 != -1) {
    dispatch_once(&qword_102482C80, &stru_10230CEF8);
  }
  return &qword_102482C60;
}

uint64_t sub_101057BF0(uint64_t a1)
{
  *(void *)a1 = &off_10230CC18;
  sub_101065968((void *)a1);
  if (*(char *)(a1 + 703) < 0) {
    operator delete(*(void **)(a1 + 680));
  }
  if (*(char *)(a1 + 679) < 0) {
    operator delete(*(void **)(a1 + 656));
  }
  sub_1003B2350((void *)(a1 + 624));
  if (*(char *)(a1 + 623) < 0) {
    operator delete(*(void **)(a1 + 600));
  }
  if (*(char *)(a1 + 591) < 0) {
    operator delete(*(void **)(a1 + 568));
  }
  sub_1003B2350((void *)(a1 + 528));
  uint64_t v6 = (void **)(a1 + 504);
  sub_100D1A044(&v6);
  uint64_t v2 = *(void *)(a1 + 464);
  *(void *)(a1 + 464) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_1008B4894(a1 + 112, *(void **)(a1 + 120));
  return sub_1010570E4(a1);
}

void sub_101057D4C(uint64_t a1)
{
  sub_101057BF0(a1);

  operator delete();
}

void sub_101057D84(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  char v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)long long buf = 134218240;
    *(void *)uint64_t v26 = a1;
    *(_WORD *)&v26[8] = 1024;
    v27[0] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: onDataProtectionNotification, %p, notification, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    char v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 464) + 56))(*(void *)(a1 + 464));
  if (!*a3)
  {
    double v10 = v9;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    char v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *(unsigned __int8 *)(a1 + 200);
      int v13 = *a4;
      BOOL v14 = *a4 != 1;
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)uint64_t v26 = v12;
      *(_WORD *)&v26[4] = 1024;
      *(_DWORD *)&v26[6] = v14;
      LOWORD(v27[0]) = 1024;
      *(_DWORD *)((char *)v27 + 2) = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    int v15 = *(unsigned __int8 *)(a1 + 200);
    BOOL v16 = *a4 == 1;
    *(unsigned char *)(a1 + 200) = *a4 != 1;
    if (v16)
    {
      sub_1010569AC(a1, v10);
      int v17 = *(unsigned __int8 *)(a1 + 200);
    }
    else
    {
      int v17 = 1;
    }
    if (v15 != v17)
    {
      sub_101058430(a1, v10);
      if (*(unsigned char *)(a1 + 200))
      {
        sub_101058C10(a1, (uint64_t)"onDataProtectionNotification", a1 + 248, 1);
      }
      else
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        uint64_t v18 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, skip on unlock", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          std::string v24 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        sub_101059004(a1);
        sub_10015E8B0(a1, (uint64_t)"onDataProtectionNotification.cleanUnknownCache", (uint64_t)&stru_10230CCE8);
      }
      sub_100033CE0(a1, v10);
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    std::string v19 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
    {
      int v20 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)uint64_t v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "@TileEvent, all, locked, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      unsigned __int8 v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
}

void sub_101058430(uint64_t a1, double a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: cleanUpDownloadList, start, isLocked, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v25 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)long long v32 = 67109120;
    *(_DWORD *)&v32[4] = v25;
    uint64_t v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v26);
    if (v26 != buf) {
      free(v26);
    }
  }
  if (*(void *)(a1 + 128) >= (unint64_t)*(int *)(a1 + 436))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 128);
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILES: cleanUpDownloadList, download list is too large, %lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v29 = *(void *)(a1 + 128);
      *(_DWORD *)long long v32 = 134217984;
      *(void *)&v32[4] = v29;
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v30);
      if (v30 != buf) {
        free(v30);
      }
    }
    sub_101059A20(a1);
  }
  int v31 = 0;
  if (!*(unsigned char *)(a1 + 200))
  {
    int v8 = *(uint64_t **)(a1 + 112);
    if (v8 != (uint64_t *)(a1 + 120))
    {
      int v31 = 0;
      do
      {
        double v9 = (uint64_t *)v8[1];
        double v10 = v8;
        if (v9)
        {
          do
          {
            char v11 = v9;
            double v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            char v11 = (uint64_t *)v10[2];
            BOOL v12 = *v11 == (void)v10;
            double v10 = v11;
          }
          while (!v12);
        }
        int v13 = (unsigned int *)v8[10];
        uint64_t v14 = sub_10015EB2C(a1, v13[12]);
        int v15 = *(_DWORD *)(a1 + 424);
        BOOL v16 = sub_10013D858(v14 + 184, v13 + 12);
        if (v16)
        {
          uint64_t v17 = sub_100144000(v14 + 184, v13 + 12);
          BOOL v18 = sub_100065380(v17, v15 > 1, *(float *)(v14 + 128), a2);
        }
        else
        {
          BOOL v18 = 0;
        }
        if (!sub_100065F70((uint64_t)v13) && !v18 && (v16 & sub_10014548C((uint64_t)v13)) == 1)
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          std::string v19 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v13 + 16))(buf, v13);
            int v20 = buf;
            if (v37 < 0) {
              int v20 = *(unsigned char **)buf;
            }
            *(_DWORD *)long long v32 = 136315138;
            *(void *)&v32[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "TILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download", v32, 0xCu);
            if (v37 < 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10230D000);
            }
            (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v13 + 16))(v32, v13);
            char v21 = v32;
            if (v33 < 0) {
              char v21 = *(unsigned char **)v32;
            }
            int v34 = 136315138;
            uint64_t v35 = v21;
            uint64_t v22 = (char *)_os_log_send_and_compose_impl();
            if (v33 < 0) {
              operator delete(*(void **)v32);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v22);
            if (v22 != buf) {
              free(v22);
            }
          }
          sub_1000F0A30((uint64_t **)(a1 + 112), v8);
          sub_1008B4638((uint64_t)(v8 + 4));
          operator delete(v8);
          ++v31;
        }
        if (*(unsigned char *)(a1 + 200)) {
          break;
        }
        int v8 = v11;
      }
      while (v11 != (uint64_t *)(a1 + 120));
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  unsigned __int8 v23 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v24 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v24;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v31;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v27 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)long long v32 = 67109376;
    *(_DWORD *)&v32[4] = v27;
    *(_WORD *)&v32[8] = 1024;
    *(_DWORD *)&v32[10] = v31;
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::cleanUpDownloadList(CFAbsoluteTime)", "%s\n", v28);
    if (v28 != buf) {
      free(v28);
    }
  }
}

void sub_101058C10(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v15 = 0;
  BOOL v16 = &v15;
  uint64_t v17 = 0x2020000000;
  int v18 = 0;
  if (*(unsigned char *)(a1 + 200))
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_101063328;
    v13[3] = &unk_10230CD98;
    void v13[6] = a3;
    v13[7] = a2;
    char v14 = a4;
    v13[4] = &v15;
    v13[5] = a1;
    sub_10015E8B0(a1, (uint64_t)"updateProtectionClass", (uint64_t)v13);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v8 = *((_DWORD *)v16 + 6);
      *(_DWORD *)long long buf = 67109376;
      int v24 = a4;
      __int16 v25 = 1024;
      int v26 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      int v10 = *((_DWORD *)v16 + 6);
      int v19 = 67109376;
      int v20 = a4;
      __int16 v21 = 1024;
      int v22 = v10;
      char v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    if (*(unsigned char *)(a1 + 200) && *((_DWORD *)v16 + 6)) {
      sub_101064E34(a1, a2);
    }
    else {
      sub_101059004(a1);
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    double v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning TILE: updateProtectionClass, called on when not locked", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      LOWORD(v19) = 0;
      BOOL v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  _Block_object_dispose(&v15, 8);
}

void sub_101058FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_101059004(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: cancelExpiredLocationTimer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::cancelExpiredLocationTimer()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  id result = *(id *)(a1 + 240);
  if (result) {
    return sub_1001B0AE4((uint64_t)result);
  }
  return result;
}

void sub_1010591A4(id a1, void *a2)
{
  if (*(unsigned char *)a2)
  {
    uint64_t v2 = *((void *)a2 + 38);
    if (v2) {
      (*(void (**)(void))(*(void *)v2 + 32))();
    }
  }
}

id sub_1010591DC(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v11 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: onCleanupAgedTiles, %p", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v8 = 134217984;
    uint64_t v9 = a1;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onCleanupAgedTiles()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  double v3 = (*(double (**)(void))(**(void **)(a1 + 464) + 56))(*(void *)(a1 + 464));
  uint64_t v4 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_101059408;
  v7[3] = &unk_1022B8660;
  v7[4] = a1;
  *(double *)&v7[5] = v3;
  return [v4 async:v7];
}

void sub_101059408(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1010594C0(v2, *(double *)(a1 + 40));
  sub_10015E8B0(v2, (uint64_t)"onCleanupAgedTiles", (uint64_t)&stru_10230CD08);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10105F6E4;
  v3[3] = &unk_1022C1698;
  v3[4] = v2;
  sub_10015E8B0(v2, (uint64_t)"refreshTilesDataIfNeeded", (uint64_t)v3);
  sub_100033CE0(v2, *(double *)(a1 + 40));
}

uint64_t *sub_1010594C0(uint64_t a1, double a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10105C650;
  v7[3] = &unk_1022C9848;
  v7[4] = a1;
  *(double *)&v7[5] = a2;
  sub_10015E8B0(a1, (uint64_t)"deleteAgedTiles", (uint64_t)v7);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, fTilesToDownload", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedTiles(CFAbsoluteTime)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_10105ADD8(a1, a1 + 112, a2);
}

void sub_1010596CC(id a1, void *a2)
{
  uint64_t v3 = *((void *)a2 + 37);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  uint64_t v4 = *((void *)a2 + 38);
  if (v4)
  {
    int v5 = *(void (**)(void))(*(void *)v4 + 40);
    v5();
  }
}

id *sub_10105975C(uint64_t a1)
{
  sub_1000E1294((uint64_t *)v11, (uint64_t)"clearLocationInformationTiles", 0);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136446210;
    uint64_t v15 = "clearLocationInformationTiles";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v12 = 136446210;
    int v13 = "clearLocationInformationTiles";
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::clearLocationInformation()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_101059A20(a1);
  *(_DWORD *)(a1 + 248) = 0xFFFF;
  *(void *)(a1 + 260) = 0;
  *(void *)(a1 + 252) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 268) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 284) = _Q1;
  *(_OWORD *)(a1 + 300) = _Q1;
  *(_OWORD *)(a1 + 316) = _Q1;
  *(_DWORD *)(a1 + 332) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 336) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 360) = 0;
  *(void *)(a1 + 364) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 372) = 0x7FFFFFFF;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 376) = 0;
  *(unsigned char *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  sub_100FFB390(a1 + 472);
  sub_10046FF94(a1 + 624);
  sub_1008B4C78(a1 + 528);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_101059D24;
  v10[3] = &unk_1022C1698;
  v10[4] = a1;
  sub_10015E8B0(a1, (uint64_t)"clearLocationInformationTiles", (uint64_t)v10);
  return sub_1000E1098(v11);
}

void sub_101059A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_101059A20(uint64_t a1)
{
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_10105C89C;
  v15[3] = &unk_1022F2D48;
  v15[4] = a1;
  v16[0] = mach_absolute_time();
  v16[1] = (uint64_t)v15;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *(void *)(a1 + 128);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: cancelAllDownloads, planned, %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v13 = *(void *)(a1 + 128);
    int v17 = 134217984;
    uint64_t v18 = v13;
    char v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::cancelAllDownloads()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  uint64_t v4 = *(void *)(a1 + 192);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    *(unsigned char *)(a1 + 176) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 160);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
    *(unsigned char *)(a1 + 144) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 112);
  uint64_t v7 = (void *)(a1 + 120);
  if (v6 != (void *)(a1 + 120))
  {
    do
    {
      uint64_t v8 = v6[10];
      sub_101048104(v8);
      sub_10104842C(v8);
      uint64_t v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          uint64_t v6 = v10;
        }
        while (!v11);
      }
      uint64_t v6 = v10;
    }
    while (v10 != v7);
  }
  sub_1008B4894(a1 + 112, *(void **)(a1 + 120));
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = v7;
  return sub_1000E0900(v16);
}

void sub_101059D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000E0900((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101059D24(uint64_t a1, uint64_t a2)
{
  sub_101059DC4(*(void *)(a1 + 32), 1, *(_DWORD *)(a2 + 4));
  uint64_t v3 = *(void *)(a2 + 296);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  uint64_t result = *(void *)(a2 + 304);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v5();
  }
  return result;
}

uint64_t *sub_101059DC4(uint64_t a1, int a2, unsigned int a3)
{
  if ((a3 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101A9E31C();
    __break(1u);
  }
  else
  {
    unsigned int v6 = a3;
    int v5 = a2;
    uint64_t v4 = a1;
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472;
    v42[2] = sub_10105C9D8;
    v42[3] = &unk_1022F2D28;
    unsigned int v43 = a3;
    v44[0] = mach_absolute_time();
    v44[1] = (uint64_t)v42;
    uint64_t v7 = sub_10015EB2C(v4, v6);
    uint64_t v3 = &qword_102419000;
    if (qword_102419380 == -1) {
      goto LABEL_3;
    }
  }
  dispatch_once(&qword_102419380, &stru_10230D000);
LABEL_3:
  uint64_t v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = v7 + 8;
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v9 = *(void *)(v7 + 8);
    }
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)uint64_t v52 = v6;
    *(_WORD *)&v52[4] = 2080;
    *(void *)&v52[6] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "TILE: removeAllTiles, cleaning map, %d, %s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[112] != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v34 = v7 + 8;
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v34 = *(void *)(v7 + 8);
    }
    int v45 = 67109378;
    *(_DWORD *)uint64_t v46 = v6;
    *(_WORD *)&v46[4] = 2080;
    *(void *)&v46[6] = v34;
    uint64_t v35 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v35);
    if (v35 != (char *)buf) {
      free(v35);
    }
  }
  uint64_t v41 = v4;
  uint64_t v10 = v7 + 184;
  BOOL v11 = (void *)sub_1000D8908(v7 + 184);
  if (v11 != (void *)sub_1000B894C(v7 + 184))
  {
    do
    {
      if (v5)
      {
        uint64_t v12 = v11[10];
        sub_101048104(v12);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CFE0);
        }
        uint64_t v13 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          char v14 = sub_100147F50(*(_DWORD *)(v12 + 48));
          double v15 = sub_10013DAC0(v12 + 48);
          double v16 = sub_10013DA9C(v12 + 48);
          uint64_t v17 = sub_10014D19C(v10);
          *(_DWORD *)long long buf = 136446979;
          *(void *)uint64_t v52 = v14;
          *(_WORD *)&v52[8] = 2049;
          *(double *)&v52[10] = v15;
          __int16 v53 = 2049;
          double v54 = v16;
          __int16 v55 = 2050;
          uint64_t v56 = v17;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, all, size, %{public}lu", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
          }
          unsigned int v22 = *(_DWORD *)(v12 + 48);
          uint64_t v21 = v12 + 48;
          unsigned __int8 v23 = sub_100147F50(v22);
          double v24 = sub_10013DAC0(v21);
          double v25 = sub_10013DA9C(v21);
          uint64_t v26 = sub_10014D19C(v10);
          int v45 = 136446979;
          *(void *)uint64_t v46 = v23;
          *(_WORD *)&v46[8] = 2049;
          *(double *)&v46[10] = v24;
          __int16 v47 = 2049;
          double v48 = v25;
          __int16 v49 = 2050;
          uint64_t v50 = v26;
          int v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
      }
      uint64_t v18 = (void *)v11[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (void *)v11[2];
          BOOL v20 = *v19 == (void)v11;
          BOOL v11 = v19;
        }
        while (!v20);
      }
      BOOL v11 = v19;
    }
    while (v19 != (void *)sub_1000B894C(v10));
  }
  sub_1008B42E0(v10);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v28 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(v7 + 31) >= 0) {
      uint64_t v29 = v7 + 8;
    }
    else {
      uint64_t v29 = *(void *)(v7 + 8);
    }
    uint64_t v30 = sub_10014D19C(v10);
    uint64_t v31 = sub_1008B42D8(v10);
    uint64_t v32 = *(void *)(v4 + 128);
    *(_DWORD *)long long buf = 136315906;
    *(void *)uint64_t v52 = v29;
    *(_WORD *)&v52[8] = 2048;
    *(void *)&v52[10] = v30;
    __int16 v53 = 2048;
    double v54 = *(double *)&v31;
    __int16 v55 = 2048;
    uint64_t v56 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    if (*(char *)(v7 + 31) >= 0) {
      uint64_t v36 = v7 + 8;
    }
    else {
      uint64_t v36 = *(void *)(v7 + 8);
    }
    uint64_t v37 = sub_10014D19C(v10);
    uint64_t v38 = sub_1008B42D8(v10);
    uint64_t v39 = *(void *)(v41 + 128);
    int v45 = 136315906;
    *(void *)uint64_t v46 = v36;
    *(_WORD *)&v46[8] = 2048;
    *(void *)&v46[10] = v37;
    __int16 v47 = 2048;
    double v48 = *(double *)&v38;
    __int16 v49 = 2048;
    uint64_t v50 = v39;
    __int16 v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::removeAllTiles(BOOL, CLTilesManager_Type::TileType)", "%s\n", v40);
    if (v40 != (char *)buf) {
      free(v40);
    }
  }
  return sub_1000E0900(v44);
}

void sub_10105A4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000E0900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10105A4E0(uint64_t a1, uint64_t a2, int *a3, unsigned __int8 *a4)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)long long buf = 67109120;
    int v14 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "onCompanionNotification, notification, %d, Tiles", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 464) + 56))(*(void *)(a1 + 464));
  if (*a3 == 5)
  {
    double v10 = v9;
    sub_100103240();
    if (sub_10010145C())
    {
      int v11 = *a4;
      *(unsigned char *)(a1 + 496) = v11;
      if (!v11) {
        return;
      }
    }
    else if (!*(unsigned char *)(a1 + 496))
    {
      return;
    }
    sub_100033CE0(a1, v10);
  }
}

void sub_10105A714(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)long long buf = 134218240;
    uint64_t v20 = a1;
    __int16 v21 = 1024;
    int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: onClientNotification, %p, notification, %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  int v9 = *a3;
  if (*a3 == 6)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TILE: #CacheDelete kNotificationSoftwareUpdateStorageRecovery", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_33;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_48;
    }
    goto LABEL_50;
  }
  if (v9 != 4)
  {
    if (!v9)
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      double v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: kNotificationReset", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      sub_10105975C(a1);
      (*(void (**)(void))(**(void **)(a1 + 464) + 64))(*(void *)(a1 + 464));
    }
    return;
  }
  *(unsigned char *)(a1 + 428) = *(_DWORD *)(a4 + 188) == 1;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v13 = *(unsigned __int8 *)(a1 + 428);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v20) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "TILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (!*(unsigned char *)(a1 + 428))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TILE: location services off, remove all the tiles", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_33;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_48:
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
LABEL_33:
      sub_10105975C(a1);
      return;
    }
LABEL_50:
    dispatch_once(&qword_102419380, &stru_10230D000);
    goto LABEL_48;
  }
}

uint64_t *sub_10105ADD8(uint64_t a1, uint64_t a2, double a3)
{
  v52[0] = _NSConcreteStackBlock;
  v52[1] = 3221225472;
  v52[2] = sub_10105B60C;
  v52[3] = &unk_1022F2D48;
  *(double *)&v52[4] = a3;
  v53[0] = mach_absolute_time();
  v53[1] = (uint64_t)v52;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedDownloadItems, start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    LOWORD(v54) = 0;
    __int16 v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  uint64_t v5 = a1 + 248;
  long long v6 = *(_OWORD *)(a1 + 360);
  long long v7 = *(_OWORD *)(a1 + 376);
  long long v8 = *(_OWORD *)(a1 + 328);
  v50[6] = *(_OWORD *)(a1 + 344);
  v50[7] = v6;
  v51[0] = v7;
  *(_OWORD *)((char *)v51 + 12) = *(_OWORD *)(a1 + 388);
  long long v9 = *(_OWORD *)(a1 + 296);
  long long v10 = *(_OWORD *)(a1 + 312);
  long long v11 = *(_OWORD *)(a1 + 264);
  v50[2] = *(_OWORD *)(a1 + 280);
  v50[3] = v9;
  uint64_t v12 = *(uint64_t **)a2;
  v50[4] = v10;
  v50[5] = v8;
  v50[0] = *(_OWORD *)(a1 + 248);
  v50[1] = v11;
  BOOL v13 = sub_10125C05C((uint64_t)v50, a3);
  sub_101171D90((uint64_t)v49);
  if (v12 == (uint64_t *)(a2 + 8))
  {
    int v14 = 0;
  }
  else
  {
    int v14 = 0;
    do
    {
      double v15 = (uint64_t *)v12[1];
      double v16 = v12;
      if (v15)
      {
        do
        {
          uint64_t v17 = v15;
          double v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)v16[2];
          BOOL v26 = *v17 == (void)v16;
          double v16 = v17;
        }
        while (!v26);
      }
      uint64_t v18 = v12[10];
      double v19 = *(double *)(v18 + 136);
      if (v13)
      {
        int v20 = *(_DWORD *)(v18 + 48);
        if (v20 == 1)
        {
          double v21 = sub_10013DAC0(v18 + 48);
          double v22 = sub_10013DA9C(v18 + 48);
          int v23 = sub_101171EA0(v49, v5, v21, v22) >= 250000.0 && !sub_101048060(v18);
          int v20 = *(_DWORD *)(v18 + 48);
        }
        else
        {
          int v23 = 0;
        }
        if (v20 == 2)
        {
          double v24 = sub_10013DAC0(v18 + 48);
          double v25 = sub_10013DA9C(v18 + 48);
          if (sub_101171EA0(v49, v5, v24, v25) >= 200000.0) {
            v23 |= !sub_101048060(v18);
          }
        }
      }
      else
      {
        int v23 = 0;
      }
      BOOL v26 = vabdd_f64(a3, v19) < *(double *)(a1 + 208) && v23 == 0;
      if (!v26)
      {
        sub_101048104(v18);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CFE0);
        }
        int v27 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = sub_100147F50(*(_DWORD *)(v18 + 48));
          double v29 = sub_10013DAC0(v18 + 48);
          double v30 = sub_10013DA9C(v18 + 48);
          uint64_t v31 = *(void *)(a2 + 16) - 1;
          *(_DWORD *)long long buf = 136446979;
          *(void *)long long v61 = v28;
          *(_WORD *)&v61[8] = 2049;
          *(double *)&v61[10] = v29;
          *(_WORD *)&v61[18] = 2049;
          double v62 = v30;
          __int16 v63 = 2050;
          uint64_t v64 = v31;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, rmlist, llsw, %{private}.2lf, %{private}.2lf, aged, size, %{public}ld", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
          }
          unsigned int v33 = *(_DWORD *)(v18 + 48);
          uint64_t v32 = v18 + 48;
          uint64_t v34 = sub_100147F50(v33);
          double v35 = sub_10013DAC0(v32);
          double v36 = sub_10013DA9C(v32);
          uint64_t v37 = *(void *)(a2 + 16) - 1;
          int v54 = 136446979;
          *(void *)__int16 v55 = v34;
          *(_WORD *)&v55[8] = 2049;
          *(double *)&v55[10] = v35;
          __int16 v56 = 2049;
          double v57 = v36;
          __int16 v58 = 2050;
          uint64_t v59 = v37;
          uint64_t v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
        sub_1000F0A30((uint64_t **)a2, v12);
        sub_1008B4638((uint64_t)(v12 + 4));
        operator delete(v12);
        ++v14;
      }
      uint64_t v12 = v17;
    }
    while (v17 != (uint64_t *)(a2 + 8));
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  int v39 = v14;
  __int16 v40 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v41 = *(void *)(a2 + 16);
    *(_DWORD *)long long buf = 67240448;
    *(_DWORD *)long long v61 = v39;
    *(_WORD *)&v61[4] = 2050;
    *(void *)&v61[6] = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "TilesManager, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    uint64_t v45 = *(void *)(a2 + 16);
    int v54 = 67240448;
    *(_DWORD *)__int16 v55 = v39;
    *(_WORD *)&v55[4] = 2050;
    *(void *)&v55[6] = v45;
    uint64_t v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile>> &, CFAbsoluteTime)", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  long long v42 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)long long v61 = 0;
    *(_WORD *)&v61[4] = 2082;
    *(void *)&v61[6] = "";
    *(_WORD *)&v61[14] = 1026;
    *(_DWORD *)&v61[16] = v39;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Finished CLTilesManager::deleteAgedDownloadItems\", \"deleted\":%{public}u}", buf, 0x18u);
  }
  return sub_1000E0900(v53);
}

void sub_10105B5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
}

void sub_10105B60C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  long long v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    __int16 v10 = 2082;
    long long v11 = "";
    __int16 v12 = 2082;
    BOOL v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::deleteAgedDownloadItems\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

uint64_t *sub_10105B744(double a1, uint64_t a2, uint64_t a3)
{
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472;
  v62[2] = sub_10105C2E8;
  v62[3] = &unk_1022F2D48;
  *(double *)&v62[4] = a1;
  v63[0] = mach_absolute_time();
  v63[1] = (uint64_t)v62;
  uint64_t v5 = (void *)sub_1000D8908(a3 + 184);
  uint64_t v6 = sub_1000B894C(a3 + 184);
  if (v5 == (void *)sub_1000B894C(a3 + 184))
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    do
    {
      uint64_t v8 = (uint64_t)v5;
      long long v9 = (void *)v5[1];
      __int16 v10 = v5;
      if (v9)
      {
        do
        {
          uint64_t v5 = v9;
          long long v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v10[2];
          BOOL v11 = *v5 == (void)v10;
          __int16 v10 = v5;
        }
        while (!v11);
      }
      uint64_t v12 = *(void *)(v8 + 80);
      double v13 = sub_101045840(v12, a1);
      double v14 = sub_101045834(v12, a1);
      double v15 = fabs(v13);
      BOOL v16 = v15 < *(double *)(a3 + 112) && v14 < *(double *)(a3 + 120);
      if (v16 && !sub_10104D9A8(v12))
      {
        if (v6 == sub_1000B894C(a3 + 184)
          || v6 != sub_1000B894C(a3 + 184) && v15 >= fabs(sub_101045840(*(void *)(v6 + 80), a1)))
        {
          uint64_t v6 = v8;
        }
      }
      else
      {
        sub_101048104(v12);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CFE0);
        }
        uint64_t v17 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v18 = sub_100147F50(*(_DWORD *)(v12 + 48));
          double v19 = sub_10013DAC0(v12 + 48);
          double v20 = sub_10013DA9C(v12 + 48);
          BOOL v21 = sub_10104D9A8(v12);
          uint64_t v22 = sub_10014D19C(a3 + 184);
          *(_DWORD *)long long buf = 136447235;
          int v23 = "age";
          if (v21) {
            int v23 = "corrupt";
          }
          *(void *)&uint8_t buf[4] = v18;
          *(_WORD *)&unsigned char buf[12] = 2049;
          *(double *)&unsigned char buf[14] = v19;
          *(_WORD *)&unsigned char buf[22] = 2049;
          *(double *)&unsigned char buf[24] = v20;
          __int16 v74 = 2082;
          uint64_t v75 = v23;
          __int16 v76 = 2050;
          uint64_t v77 = v22 - 1;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu", buf, 0x34u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
          }
          double v24 = sub_100147F50(*(_DWORD *)(v12 + 48));
          double v25 = sub_10013DAC0(v12 + 48);
          double v26 = sub_10013DA9C(v12 + 48);
          BOOL v27 = sub_10104D9A8(v12);
          uint64_t v28 = sub_10014D19C(a3 + 184);
          *(_DWORD *)int v68 = 136447235;
          double v29 = "age";
          if (v27) {
            double v29 = "corrupt";
          }
          *(void *)&v68[4] = v24;
          *(_WORD *)&v68[12] = 2049;
          *(double *)&v68[14] = v25;
          *(_WORD *)&v68[22] = 2049;
          *(double *)&v68[24] = v26;
          __int16 v69 = 2082;
          BOOL v70 = v29;
          __int16 v71 = 2050;
          uint64_t v72 = v28 - 1;
          double v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v30);
          if (v30 != buf) {
            free(v30);
          }
        }
        sub_1008B3890((uint64_t **)(a3 + 184), v8);
        ++v7;
      }
    }
    while (v5 != (void *)sub_1000B894C(a3 + 184));
  }
  uint64_t v31 = v6;
  uint64_t v32 = &qword_102419000;
  if (v31 != sub_1000B894C(a3 + 184) && sub_10014D19C(a3 + 184) > (unint64_t)*(unsigned int *)(a3 + 132))
  {
    unsigned int v33 = *(unsigned int **)(v31 + 80);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v34 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v35 = sub_10014D19C(a3 + 184);
      (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v33 + 16))(buf, v33);
      if (buf[23] >= 0) {
        double v36 = buf;
      }
      else {
        double v36 = *(unsigned char **)buf;
      }
      *(_DWORD *)int v68 = 134218242;
      *(void *)&v68[4] = v35;
      *(_WORD *)&v68[12] = 2080;
      *(void *)&v68[14] = v36;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, too many tiles, %lu, tile, %s", v68, 0x16u);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v32 = &qword_102419000;
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v52 = sub_10014D19C(a3 + 184);
      (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v33 + 16))(v68, v33);
      if (v68[23] >= 0) {
        __int16 v53 = v68;
      }
      else {
        __int16 v53 = *(unsigned char **)v68;
      }
      int v64 = 134218242;
      uint64_t v65 = v52;
      __int16 v66 = 2080;
      BOOL v67 = v53;
      int v54 = (char *)_os_log_send_and_compose_impl();
      if ((v68[23] & 0x80000000) != 0) {
        operator delete(*(void **)v68);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v54);
      uint64_t v32 = &qword_102419000;
      if (v54 != buf) {
        free(v54);
      }
    }
    if (sub_10014548C((uint64_t)v33))
    {
      sub_101048104((uint64_t)v33);
      ++v7;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    uint64_t v37 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = sub_100147F50(v33[12]);
      double v39 = sub_10013DAC0((uint64_t)(v33 + 12));
      double v40 = sub_10013DA9C((uint64_t)(v33 + 12));
      uint64_t v41 = sub_10014D19C(a3 + 184);
      *(_DWORD *)long long buf = 136446979;
      *(void *)&uint8_t buf[4] = v38;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&unsigned char buf[14] = v39;
      *(_WORD *)&unsigned char buf[22] = 2049;
      *(double *)&unsigned char buf[24] = v40;
      __int16 v74 = 2050;
      uint64_t v75 = (const char *)(v41 - 1);
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, delete, llsw, %{private}.2lf, %{private}.2lf, limits, size, %{public}lu", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      unsigned int v56 = v33[12];
      uint64_t v55 = (uint64_t)(v33 + 12);
      double v57 = sub_100147F50(v56);
      double v58 = sub_10013DAC0(v55);
      double v59 = sub_10013DA9C(v55);
      uint64_t v60 = sub_10014D19C(a3 + 184);
      *(_DWORD *)int v68 = 136446979;
      *(void *)&v68[4] = v57;
      *(_WORD *)&v68[12] = 2049;
      *(double *)&v68[14] = v58;
      *(_WORD *)&v68[22] = 2049;
      *(double *)&v68[24] = v59;
      __int16 v69 = 2050;
      BOOL v70 = (const char *)(v60 - 1);
      long long v61 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v61);
      if (v61 != buf) {
        free(v61);
      }
    }
    sub_1008B3890((uint64_t **)(a3 + 184), v31);
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  long long v42 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v43 = sub_10014D19C(a3 + 184);
    uint64_t v44 = a3 + 8;
    if (*(char *)(a3 + 31) < 0) {
      uint64_t v44 = *(void *)(a3 + 8);
    }
    *(_DWORD *)long long buf = 67240707;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(void *)&buf[10] = v43;
    *(_WORD *)&unsigned char buf[18] = 2081;
    *(void *)&buf[20] = v44;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "TilesManager, deleteAgedTiles, end, numOfDeletedTiles, %{public}u, remain, %{public}lu, name, %{private}s", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    uint64_t v47 = sub_10014D19C(a3 + 184);
    uint64_t v50 = *(void *)(a3 + 8);
    uint64_t v49 = a3 + 8;
    uint64_t v48 = v50;
    if (*(char *)(v49 + 23) >= 0) {
      uint64_t v48 = v49;
    }
    *(_DWORD *)int v68 = 67240707;
    *(_DWORD *)&v68[4] = v7;
    *(_WORD *)&v68[8] = 2050;
    *(void *)&v68[10] = v47;
    *(_WORD *)&v68[18] = 2081;
    *(void *)&v68[20] = v48;
    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)", "%s\n", v51);
    if (v51 != buf) {
      free(v51);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v45 = v32[113];
  if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 1025;
    *(_DWORD *)&buf[20] = v7;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::agedTileDeleter\", \"deleted\":%{private}u}", buf, 0x18u);
  }
  return sub_1000E0900(v63);
}

void sub_10105C284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1000E0900((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10105C2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  int v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v9[0] = 68290306;
    v9[1] = 0;
    __int16 v10 = 2082;
    BOOL v11 = "";
    __int16 v12 = 2082;
    double v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::agedTileDeleter\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\"}", (uint8_t *)v9, 0x44u);
  }
}

unint64_t sub_10105C420(double a1, uint64_t a2, uint64_t a3)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a3 + 31) >= 0) {
      uint64_t v6 = a3 + 8;
    }
    else {
      uint64_t v6 = *(void *)(a3 + 8);
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v10 = v6;
    __int16 v11 = 2048;
    uint64_t v12 = sub_10014D19C(a3 + 184);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: deleteAgedTiles, start, name, %s, size, %lu", buf, 0x16u);
  }
  unint64_t result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    sub_10014D19C(a3 + 184);
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    unint64_t result = sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedTilesForTilesSet(CLTilesSet &, CFAbsoluteTime)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  do
  {
    sub_10105B744(a1, result, a3);
    unint64_t result = sub_10014D19C(a3 + 184);
  }
  while (result > *(unsigned int *)(a3 + 132));
  return result;
}

id sub_10105C650(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v6 = *(void *)(a2 + 8);
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: dispatch, deleteAgedTiles, for, %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v9 = a2 + 8;
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    int v12 = 136315138;
    uint64_t v13 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  int v7 = *(void **)(v4 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  id v11[2] = sub_10105C890;
  v11[3] = &unk_1022B8680;
  v11[4] = v4;
  v11[5] = a2;
  v11[6] = *(void *)(a1 + 40);
  return [v7 async:v11];
}

unint64_t sub_10105C890(uint64_t a1)
{
  return sub_10105C420(*(double *)(a1 + 48), a1, *(void *)(a1 + 40));
}

void sub_10105C89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  int v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(v5 + 128);
    v9[0] = 68290307;
    v9[1] = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2082;
    uint64_t v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 2049;
    uint64_t v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::cancelAllDownloads\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"planned\":%{private}lu}", (uint8_t *)v9, 0x44u);
  }
}

void sub_10105C9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v6 = sub_1000D3D90(a3 - a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  int v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v8 = *(_DWORD *)(a1 + 32);
    v9[0] = 68290307;
    v9[1] = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2082;
    uint64_t v13 = "elapsed";
    __int16 v14 = 2050;
    uint64_t v15 = a2;
    __int16 v16 = 2050;
    uint64_t v17 = a3;
    __int16 v18 = 2050;
    double v19 = v6;
    __int16 v20 = 1025;
    int v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLTilesManager::removeAllTiles\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\", \"type\":%{private}d}", (uint8_t *)v9, 0x40u);
  }
}

void sub_10105CB14()
{
}

void sub_10105CB60()
{
}

BOOL sub_10105CB84(uint64_t a1, uint64_t a2, unsigned int a3, double a4)
{
  uint64_t v8 = sub_10015EB2C(a1, a3);
  uint64_t v52 = a1;
  unsigned int v51 = a3;
  sub_101059DC4(a1, 0, a3);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v9 = (const char *)a2;
  }
  else {
    uint64_t v9 = *(const char **)a2;
  }
  __int16 v10 = opendir(v9);
  if (v10)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    __int16 v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFiles, start", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      LOWORD(v67.st_dev) = 0;
      uint64_t v50 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", (const char *)v50);
      if (v50 != &buf) {
        free(v50);
      }
    }
    __int16 v12 = readdir(v10);
    if (v12)
    {
      int v13 = 0;
      do
      {
        sub_1002E9328(__dst, v12->d_name, v12->d_namlen);
        if (*(char *)(a2 + 23) >= 0) {
          size_t v15 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v15 = *(void *)(a2 + 8);
        }
        sub_1001110E4((uint64_t)&buf, v15 + 1);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if (v15)
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v17 = (const void *)a2;
          }
          else {
            uint64_t v17 = *(const void **)a2;
          }
          memmove(p_buf, v17, v15);
        }
        *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v15) = 47;
        if ((v58 & 0x80u) == 0) {
          __int16 v18 = __dst;
        }
        else {
          __int16 v18 = (void **)__dst[0];
        }
        if ((v58 & 0x80u) == 0) {
          std::string::size_type v19 = v58;
        }
        else {
          std::string::size_type v19 = (std::string::size_type)__dst[1];
        }
        __int16 v20 = std::string::append(&buf, (const std::string::value_type *)v18, v19);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        int64_t v56 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)uint64_t v55 = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        uint64_t v22 = (const void **)sub_101048388();
        sub_1002F0A00((const void **)v55, v22, (uint64_t)&__p);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        int v23 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          double v24 = v55;
          if (v56 < 0) {
            double v24 = (void **)v55[0];
          }
          int d_type = v12->d_type;
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v13;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v24;
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = d_type;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFiles, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d", (uint8_t *)&buf, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          uint64_t v37 = v55;
          if (v56 < 0) {
            uint64_t v37 = (void **)v55[0];
          }
          gid_t v38 = v12->d_type;
          v67.st_dev = 67109634;
          *(_DWORD *)&v67.st_mode = v13;
          LOWORD(v67.st_ino) = 2080;
          *(__darwin_ino64_t *)((char *)&v67.st_ino + 2) = (__darwin_ino64_t)v37;
          HIWORD(v67.st_uid) = 1024;
          v67.st_gid = v38;
          double v39 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", (const char *)v39);
          if (v39 != &buf) {
            free(v39);
          }
        }
        if (v12->d_type == 8 && sub_10105E728((uint64_t)__dst, (const void **)a2))
        {
          if (v56 >= 0) {
            double v26 = v55;
          }
          else {
            double v26 = (void **)v55[0];
          }
          int v27 = stat((const char *)v26, &v67);
          if (v27)
          {
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            }
            uint64_t v28 = qword_1024193A8;
            if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
            {
              if ((v58 & 0x80u) == 0) {
                double v29 = __dst;
              }
              else {
                double v29 = (void **)__dst[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v29;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v27;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "TileMgr, listAvailableFiles, failed to stat file, %{public}s, ret, %{public}d, #CloneMe", (uint8_t *)&buf, 0x12u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_10230CFE0);
              }
              if ((v58 & 0x80u) == 0) {
                double v40 = __dst;
              }
              else {
                double v40 = (void **)__dst[0];
              }
              int v59 = 136446466;
              uint64_t v60 = v40;
              __int16 v61 = 1026;
              LODWORD(v62) = v27;
              uint64_t v41 = (std::string *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", (const char *)v41);
              if (v41 != &buf) {
                free(v41);
              }
            }
          }
          else if (sub_10105E87C(v52, v51, (char *)a2, (std::string::value_type *)__dst, a4))
          {
            uint64_t v31 = v30;
            double v32 = sub_101045834(v30, a4);
            if (v32 > *(double *)(v8 + 120))
            {
              if (qword_1024193A0 != -1) {
                dispatch_once(&qword_1024193A0, &stru_10230CFE0);
              }
              unsigned int v33 = qword_1024193A8;
              if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v34 = sub_100147F50(v51);
                uint64_t v35 = v55;
                if (v56 < 0) {
                  uint64_t v35 = (void **)v55[0];
                }
                uint64_t v36 = *(void *)(v8 + 120);
                LODWORD(buf.__r_.__value_.__l.__data_) = 136446978;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v35;
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2050;
                *(double *)__int16 v69 = v32;
                *(_WORD *)&v69[8] = 2050;
                *(void *)&v69[10] = v36;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "TILE: listAvailableFiles, %{public}s, deleting old tile %{public}s, tileDataAge, %{public}.1lf, %{public}.1lf", (uint8_t *)&buf, 0x2Au);
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_10230CFE0);
                }
                long long v42 = sub_100147F50(v51);
                uint64_t v43 = v55;
                if (v56 < 0) {
                  uint64_t v43 = (void **)v55[0];
                }
                uint64_t v44 = *(void *)(v8 + 120);
                int v59 = 136446978;
                uint64_t v60 = (void *)v42;
                __int16 v61 = 2082;
                double v62 = v43;
                __int16 v63 = 2050;
                double v64 = v32;
                __int16 v65 = 2050;
                uint64_t v66 = v44;
                uint64_t v45 = (std::string *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", (const char *)v45);
                if (v45 != &buf) {
                  free(v45);
                }
              }
              sub_101048104(v31);
              std::string buf = *(std::string *)(v31 + 48);
              if (*(char *)(v31 + 95) < 0)
              {
                sub_1000DC48C(v69, *(void **)(v31 + 72), *(void *)(v31 + 80));
              }
              else
              {
                *(_OWORD *)__int16 v69 = *(_OWORD *)(v31 + 72);
                *(void *)&v69[16] = *(void *)(v31 + 88);
              }
              sub_1008B3DC4((uint64_t **)(v8 + 184), (unsigned int *)&buf);
              if ((v69[23] & 0x80000000) != 0) {
                operator delete(*(void **)v69);
              }
            }
            else
            {
              sub_10105ECBC(v52, v31, v8, (uint64_t)"index", a4);
            }
          }
        }
        if (v54 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v56) < 0) {
          operator delete(v55[0]);
        }
        if ((char)v58 < 0) {
          operator delete(__dst[0]);
        }
        __int16 v12 = readdir(v10);
        ++v13;
      }
      while (v12);
    }
    closedir(v10);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v46 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFiles, end", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      LOWORD(v67.st_dev) = 0;
      uint64_t v47 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", (const char *)v47);
LABEL_115:
      if (v47 != &buf) {
        free(v47);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    uint64_t v48 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "TileMgr, listAvailableFiles, can't open dir, %{public}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      v67.st_dev = 136446210;
      *(void *)&v67.st_mode = v9;
      uint64_t v47 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)", "%s\n", (const char *)v47);
      goto LABEL_115;
    }
  }
  return v10 != 0;
}

void sub_10105D788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

BOOL sub_10105D82C(id a1, const char *a2, unsigned int a3, BOOL a4)
{
  if (a4)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      __int16 v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "TILE: convert to class B, first unlock, %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_10104CF04(a2);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    double v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315138;
      __int16 v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: convert to class C, first unlock, %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_10104CF0C(a2);
  }
  return 1;
}

uint64_t sub_10105DB30(uint64_t a1, uint64_t a2)
{
  return sub_10105DB44(a1, (std::string::size_type)"listerSetClass", a2, *(void *)(a1 + 32));
}

uint64_t sub_10105DB44(uint64_t a1, std::string::size_type a2, uint64_t a3, uint64_t a4)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  double v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type v7 = *(void *)(a3 + 32);
    if (*(char *)(a3 + 55) >= 0) {
      std::string::size_type v7 = a3 + 32;
    }
    uint64_t v8 = a3 + 8;
    if (*(char *)(a3 + 31) < 0) {
      uint64_t v8 = *(void *)(a3 + 8);
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v49 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesByLister, reason, %s, rootDirectory, %s, name, %s", (uint8_t *)&buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v31 = *(void *)(a3 + 32);
    if (*(char *)(a3 + 55) >= 0) {
      uint64_t v31 = a3 + 32;
    }
    uint64_t v32 = a3 + 8;
    if (*(char *)(a3 + 31) < 0) {
      uint64_t v32 = *(void *)(a3 + 8);
    }
    *(_DWORD *)std::string __dst = 136315650;
    *(void *)&__dst[4] = a2;
    *(_WORD *)&__dst[12] = 2080;
    *(void *)&__dst[14] = v31;
    __int16 v46 = 2080;
    uint64_t v47 = v32;
    unsigned int v33 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)", "%s\n", (const char *)v33);
    if (v33 != &buf) {
      free(v33);
    }
  }
  if (*(char *)(a3 + 55) >= 0) {
    uint64_t v9 = (const char *)(a3 + 32);
  }
  else {
    uint64_t v9 = *(const char **)(a3 + 32);
  }
  __int16 v10 = opendir(v9);
  if (v10)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    __int16 v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesByLister, start", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      *(_WORD *)std::string __dst = 0;
      uint64_t v34 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)", "%s\n", (const char *)v34);
      if (v34 != &buf) {
        free(v34);
      }
    }
    __int16 v12 = readdir(v10);
    if (v12)
    {
      LODWORD(v13) = 0;
      char v14 = 1;
      do
      {
        sub_1002E9328(__dst, v12->d_name, v12->d_namlen);
        if (*(char *)(a3 + 55) >= 0) {
          size_t v15 = *(unsigned __int8 *)(a3 + 55);
        }
        else {
          size_t v15 = *(void *)(a3 + 40);
        }
        sub_1001110E4((uint64_t)&buf, v15 + 1);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if (v15)
        {
          if (*(char *)(a3 + 55) >= 0) {
            uint64_t v17 = (const void *)(a3 + 32);
          }
          else {
            uint64_t v17 = *(const void **)(a3 + 32);
          }
          memmove(p_buf, v17, v15);
        }
        *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v15) = 47;
        if (v46 >= 0) {
          __int16 v18 = __dst;
        }
        else {
          __int16 v18 = *(const std::string::value_type **)__dst;
        }
        if (v46 >= 0) {
          std::string::size_type v19 = HIBYTE(v46);
        }
        else {
          std::string::size_type v19 = *(void *)&__dst[8];
        }
        __int16 v20 = std::string::append(&buf, v18, v19);
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        int64_t v38 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)std::string __p = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        uint64_t v22 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          int v23 = __p;
          if (v38 < 0) {
            int v23 = (void **)__p[0];
          }
          int d_type = v12->d_type;
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v13;
          LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)v23;
          WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(buf.__r_.__value_.__r.__words[2]) = d_type;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: listAvailableFilesByLister, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d", (uint8_t *)&buf, 0x18u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          double v26 = __p;
          if (v38 < 0) {
            double v26 = (void **)__p[0];
          }
          int v27 = v12->d_type;
          int v39 = 67109634;
          int v40 = v13;
          __int16 v41 = 2080;
          long long v42 = v26;
          __int16 v43 = 1024;
          int v44 = v27;
          uint64_t v28 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)", "%s\n", (const char *)v28);
          if (v28 != &buf) {
            free(v28);
          }
        }
        if (v12->d_type == 8)
        {
          uint64_t v13 = (v13 + 1);
          if (sub_10105E728((uint64_t)__dst, (const void **)(a3 + 32)))
          {
            if (v38 >= 0) {
              double v25 = __p;
            }
            else {
              double v25 = (void **)__p[0];
            }
            char v14 = (*(uint64_t (**)(uint64_t, void **, uint64_t, void))(a4 + 16))(a4, v25, v13, *(unsigned __int8 *)(a3 + 178));
          }
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v46) < 0) {
          operator delete(*(void **)__dst);
        }
        __int16 v12 = readdir(v10);
      }
      while (v12);
    }
    else
    {
      char v14 = 1;
    }
    closedir(v10);
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    double v29 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = a2;
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v9;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "TileMgr, listAvailableFilesByLister, reason, %{public}s, can't open dir, %{public}s, #CloneMe", (uint8_t *)&buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      *(_DWORD *)std::string __dst = 136446466;
      *(void *)&__dst[4] = a2;
      *(_WORD *)&__dst[12] = 2082;
      *(void *)&__dst[14] = v9;
      uint64_t v35 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)", "%s\n", (const char *)v35);
      if (v35 != &buf) {
        free(v35);
      }
    }
    char v14 = 0;
  }
  return v14 & 1;
}

void sub_10105E364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10105E3B8(uint64_t *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 201))
  {
    uint64_t v2 = result;
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10105E464;
    v3[3] = &unk_1022C9848;
    v3[4] = v1;
    void v3[5] = result[5];
    sub_10015E8B0(v1, (uint64_t)"listAvailableFilesAllTypes", (uint64_t)v3);
    *(unsigned char *)(v1 + 201) = 1;
    return sub_1010594C0(v1, *((double *)v2 + 5));
  }
  return result;
}

void sub_10105E464(uint64_t a1, uint64_t a2)
{
  sub_10105CB84(*(void *)(a1 + 32), a2 + 32, *(_DWORD *)(a2 + 4), *(double *)(a1 + 40));
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  uint64_t v3 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = sub_100147F50(*(_DWORD *)(a2 + 4));
    *(_DWORD *)std::string buf = 136446466;
    std::string::size_type v7 = v4;
    __int16 v8 = 2050;
    uint64_t v9 = sub_10014D19C(a2 + 184);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "@TileEvent, %{public}s, indexed, %{public}lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    sub_100147F50(*(_DWORD *)(a2 + 4));
    sub_10014D19C(a2 + 184);
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

uint64_t sub_10105E66C@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = sub_1001110E4((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  __int16 v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

BOOL sub_10105E728(uint64_t a1, const void **a2)
{
  unsigned __int16 v4 = sub_1010661DC(a1);
  if (v4 < 0x100u) {
    return v4 != 0;
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = &v15;
  sub_1001110E4((uint64_t)&v15, v6 + 1);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    size_t v7 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      __int16 v8 = a2;
    }
    else {
      __int16 v8 = *a2;
    }
    memmove(v7, v8, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
  int v9 = *(char *)(a1 + 23);
  if (v9 >= 0) {
    __int16 v10 = (const std::string::value_type *)a1;
  }
  else {
    __int16 v10 = *(const std::string::value_type **)a1;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(a1 + 8);
  }
  __int16 v12 = std::string::append(&v15, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  int64_t v17 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v17 >= 0) {
    char v14 = __p;
  }
  else {
    char v14 = (void **)__p[0];
  }
  sub_1004BEB14((const char *)v14);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  return 0;
}

void sub_10105E84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10105E87C(uint64_t a1, unsigned int a2, char *a3, std::string::value_type *a4, double a5)
{
  if ((a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101A9E5EC();
    __break(1u);
LABEL_34:
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    goto LABEL_12;
  }
  uint64_t v5 = a4;
  size_t v6 = a3;
  unsigned int v7 = a2;
  uint64_t v10 = sub_10015EB2C(a1, a2);
  sub_10125C090(v7, &v28);
  if (v6[23] >= 0) {
    std::string::size_type v11 = v6;
  }
  else {
    std::string::size_type v11 = *(char **)v6;
  }
  if (v5[23] >= 0) {
    __int16 v12 = v5;
  }
  else {
    __int16 v12 = *(std::string::value_type **)v5;
  }
  if (sub_10104A8A0(v28, v11, v12, v7, 1, a5))
  {
    *(_OWORD *)std::string buf = *((_OWORD *)v28 + 3);
    *(void *)&buf[16] = v28[8];
    if (*((char *)v28 + 95) < 0)
    {
      sub_1000DC48C(&__p, (void *)v28[9], v28[10]);
    }
    else
    {
      long long __p = *(_OWORD *)(v28 + 9);
      uint64_t v37 = v28[11];
    }
    __int16 v18 = sub_1008B436C((uint64_t **)(v10 + 184), (unsigned int *)buf);
    std::string::size_type v19 = v28;
    uint64_t v28 = 0;
    uint64_t v20 = *v18;
    *__int16 v18 = (uint64_t)v19;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = *(void *)(v10 + 304);
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 32))(v21);
    }
    sub_100144000(v10 + 184, (unsigned int *)buf);
    if (SHIBYTE(v37) < 0) {
      operator delete((void *)__p);
    }
    uint64_t v17 = 1;
    goto LABEL_30;
  }
  __int16 v8 = &qword_102419000;
  if (qword_1024193A0 != -1) {
    goto LABEL_34;
  }
LABEL_12:
  long long v13 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    char v14 = sub_100147F50(v7);
    if (v6[23] >= 0) {
      std::string v15 = v6;
    }
    else {
      std::string v15 = *(char **)v6;
    }
    if (v5[23] >= 0) {
      __int16 v16 = v5;
    }
    else {
      __int16 v16 = *(std::string::value_type **)v5;
    }
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v15;
    *(_WORD *)&unsigned char buf[22] = 2082;
    *(void *)&long long __p = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, readerror, dir, %{public}s, file, %{public}s, #CloneMe", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[116] != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    double v24 = sub_100147F50(v7);
    if (v6[23] >= 0) {
      double v25 = v6;
    }
    else {
      double v25 = *(char **)v6;
    }
    if (v5[23] >= 0) {
      double v26 = v5;
    }
    else {
      double v26 = *(std::string::value_type **)v5;
    }
    int v29 = 136446722;
    uint64_t v30 = v24;
    __int16 v31 = 2082;
    uint64_t v32 = v25;
    __int16 v33 = 2082;
    uint64_t v34 = v26;
    int v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::tuple<BOOL, CLTileFile *> CLTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)", "%s\n", v27);
    if (v27 != buf) {
      free(v27);
    }
  }
  uint64_t v17 = 0;
LABEL_30:
  uint64_t v22 = v28;
  uint64_t v28 = 0;
  if (v22) {
    (*(void (**)(uint64_t *))(*v22 + 8))(v22);
  }
  return v17;
}

void sub_10105EC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a12) {
    (*(void (**)(uint64_t))(*(void *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_10105ECBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  long long v52 = *(_OWORD *)(a2 + 48);
  uint64_t v53 = *(void *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1000DC48C(&v54, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v54 = *(_OWORD *)(a2 + 72);
    uint64_t v55 = *(void *)(a2 + 88);
  }
  double v10 = *(double *)(a1 + 324);
  double v11 = *(double *)(a3 + 136);
  BOOL v12 = sub_10104CF14((double *)a2, a1 + 248, 30000.0);
  if (!*(unsigned char *)(a3 + 178))
  {
    int v14 = sub_10104A2AC(a2);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    std::string v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      __int16 v16 = v72 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v16;
      __int16 v57 = 1024;
      LODWORD(v58) = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, unlocked tile type, tileid, %s, unlocked, %d", buf, 0x12u);
      if (SHIBYTE(v72) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_58;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
    if (v59 >= 0) {
      uint64_t v17 = buf;
    }
    else {
      uint64_t v17 = *(unsigned char **)buf;
    }
    int v65 = 136315394;
    uint64_t v66 = v17;
    __int16 v67 = 1024;
    LODWORD(v68) = v14;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v59) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v18);
    if (v18 == __p) {
      goto LABEL_58;
    }
LABEL_25:
    free(v18);
    goto LABEL_58;
  }
  if (!*(unsigned char *)(a1 + 200)) {
    goto LABEL_56;
  }
  if (*(unsigned char *)(a1 + 440))
  {
    BOOL v13 = 1;
LABEL_57:
    sub_10104CC50(a2, v13);
    goto LABEL_58;
  }
  if (fabs(a5 - v10 + 60.0) >= v11 || !v12)
  {
LABEL_56:
    BOOL v13 = *(unsigned __int8 *)(a1 + 200) != 0;
    goto LABEL_57;
  }
  char v20 = sub_10104A2AC(a2);
  uint64_t v21 = a3 + 184;
  sub_1008B403C(v21, (unsigned int *)&v52);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v22 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
    int v23 = SHIBYTE(v72);
    double v24 = *(unsigned char **)__p;
    uint64_t v25 = sub_1008B42D8(v21);
    double v26 = __p;
    if (v23 < 0) {
      double v26 = v24;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v26;
    __int16 v57 = 2048;
    double v58 = *(double *)&v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu", buf, 0x16u);
    if (SHIBYTE(v72) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
    int v42 = SHIBYTE(v59);
    __int16 v43 = *(unsigned char **)buf;
    uint64_t v44 = sub_1008B42D8(v21);
    uint64_t v45 = buf;
    if (v42 < 0) {
      uint64_t v45 = v43;
    }
    int v65 = 136315394;
    uint64_t v66 = v45;
    __int16 v67 = 2048;
    uint64_t v68 = v44;
    __int16 v46 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v59) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v46);
    if (v46 != __p) {
      free(v46);
    }
  }
  if ((v20 & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v27 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      int v28 = SHIBYTE(v72);
      int v29 = *(unsigned char **)__p;
      uint64_t v30 = sub_1008B42D8(v21);
      __int16 v31 = __p;
      if (v28 < 0) {
        __int16 v31 = v29;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v31;
      __int16 v57 = 2048;
      double v58 = *(double *)&v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu", buf, 0x16u);
      if (SHIBYTE(v72) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
      int v47 = SHIBYTE(v59);
      uint64_t v48 = *(unsigned char **)buf;
      uint64_t v49 = sub_1008B42D8(v21);
      uint64_t v50 = buf;
      if (v47 < 0) {
        uint64_t v50 = v48;
      }
      int v65 = 136315394;
      uint64_t v66 = v50;
      __int16 v67 = 2048;
      uint64_t v68 = v49;
      unsigned int v51 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v59) < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v51);
      if (v51 != __p) {
        free(v51);
      }
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  uint64_t v32 = (unsigned int *)(a2 + 48);
  __int16 v33 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v34 = sub_100147F50(*v32);
    double v35 = sub_10013DAC0((uint64_t)&v52);
    double v36 = sub_10013DA9C((uint64_t)&v52);
    uint64_t v37 = sub_10014D19C(v21);
    *(_DWORD *)long long __p = 136447235;
    *(void *)&__p[4] = v34;
    __int16 v70 = 2049;
    double v71 = v35;
    __int16 v72 = 2049;
    double v73 = v36;
    __int16 v74 = 2082;
    uint64_t v75 = a4;
    __int16 v76 = 2050;
    uint64_t v77 = v37;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, %{public}s, size, %{public}lu, ", __p, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    int64_t v38 = sub_100147F50(*v32);
    double v39 = sub_10013DAC0((uint64_t)&v52);
    double v40 = sub_10013DA9C((uint64_t)&v52);
    uint64_t v41 = sub_10014D19C(v21);
    *(_DWORD *)std::string buf = 136447235;
    *(void *)&uint8_t buf[4] = v38;
    __int16 v57 = 2049;
    double v58 = v39;
    __int16 v59 = 2049;
    double v60 = v40;
    __int16 v61 = 2082;
    uint64_t v62 = a4;
    __int16 v63 = 2050;
    uint64_t v64 = v41;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime, const char *)", "%s\n", v18);
    if (v18 != __p) {
      goto LABEL_25;
    }
  }
LABEL_58:
  if (SHIBYTE(v55) < 0) {
    operator delete((void *)v54);
  }
}

void sub_10105F65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10105F6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 40);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_10105F758;
  v5[3] = &unk_1022B8660;
  v5[4] = v2;
  v5[5] = a2;
  return [v3 async:v5];
}

void sub_10105F758(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = (*(double (**)(void))(**(void **)(v2 + 464) + 56))(*(void *)(v2 + 464));
  uint64_t v27 = v2;
  int v4 = *(int *)(v2 + 424) > 1 || *(unsigned char *)(v2 + 496) != 0;
  uint64_t v5 = *(void *)(a1 + 40) + 184;
  size_t v6 = (void *)sub_1000D8908(v5);
  uint64_t v7 = sub_1000B894C(v5);
  if (v6 != (void *)v7)
  {
    __int16 v8 = (void *)v7;
    char v26 = 0;
    do
    {
      uint64_t v9 = v6[10];
      BOOL v10 = sub_101045914(v9, v4, v3, *(float *)(*(void *)(a1 + 40) + 128));
      BOOL v11 = sub_100065380(v9, v4, *(float *)(*(void *)(a1 + 40) + 128), v3);
      BOOL v12 = sub_100144248(v27 + 112, v9 + 48);
      if (sub_10014548C(v9))
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        BOOL v13 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(void ***__return_ptr, uint64_t))(*(void *)v9 + 16))(&v36, v9);
          int v14 = (void **)&v36;
          if (SHIBYTE(v40) < 0) {
            int v14 = v36;
          }
          LODWORD(buf) = 67109634;
          DWORD1(buf) = v10;
          WORD4(buf) = 1024;
          *(_DWORD *)((char *)&buf + 10) = v11;
          HIWORD(buf) = 2080;
          __int16 v33 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "TILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s", (uint8_t *)&buf, 0x18u);
          if (SHIBYTE(v40) < 0) {
            operator delete(v36);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v9 + 16))(__p, v9);
          int v23 = __p;
          if (v31 < 0) {
            int v23 = (void **)__p[0];
          }
          LODWORD(v36) = 67109634;
          HIDWORD(v36) = v10;
          __int16 v37 = 1024;
          BOOL v38 = v11;
          __int16 v39 = 2080;
          double v40 = v23;
          double v24 = (char *)_os_log_send_and_compose_impl();
          if (v31 < 0) {
            operator delete(__p[0]);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::refreshTilesDataIfNeeded()_block_invoke", "%s\n", v24);
          if (v24 != (char *)&buf) {
            free(v24);
          }
        }
        if ((void *)(v27 + 120) == v12 && v10)
        {
          sub_10125C090(*(_DWORD *)(*(void *)(a1 + 40) + 4), &v36);
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          LOWORD(buf) = 0;
          BYTE2(buf) = 0;
          *((void *)&buf + 1) = 0xBFF0000000000000;
          CFAbsoluteTime v34 = Current;
          __int16 v35 = 1;
          LODWORD(v33) = 0;
          sub_101045C60((uint64_t)v36, v9);
          uint64_t v17 = v36;
          double v36 = 0;
          uint64_t v29 = (uint64_t)v17;
          sub_10105FCCC(v27, &v29, v9 + 48, &buf);
          uint64_t v18 = v29;
          uint64_t v29 = 0;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
          std::string::size_type v19 = v36;
          double v36 = 0;
          if (v19) {
            (*((void (**)(void **))*v19 + 1))(v19);
          }
          char v26 = 1;
        }
      }
      char v20 = (void *)v6[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = v20;
          char v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (void *)v6[2];
          BOOL v22 = *v21 == (void)v6;
          size_t v6 = v21;
        }
        while (!v22);
      }
      size_t v6 = v21;
    }
    while (v21 != v8);
    if (v26)
    {
      uint64_t v25 = *(void **)(v27 + 40);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_1010600B8;
      v28[3] = &unk_1022B8660;
      v28[4] = v27;
      *(double *)&v28[5] = v3;
      [v25 async:v28];
    }
  }
}

void sub_10105FC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25) {
    sub_101A9D8B8();
  }
  uint64_t v27 = *(void *)(v25 - 144);
  *(void *)(v25 - 144) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10105FCCC(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  std::string v21 = *(std::string *)a3;
  if (*(char *)(a3 + 47) < 0)
  {
    sub_1000DC48C(&v22, *(void **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    long long v22 = *(_OWORD *)(a3 + 24);
    uint64_t v23 = *(void *)(a3 + 40);
  }
  sub_101063234(*a2, &v21);
  uint64_t v7 = *a2;
  long long v8 = *a4;
  long long v9 = a4[1];
  *(_WORD *)(v7 + 144) = *((_WORD *)a4 + 16);
  *(_OWORD *)(v7 + 112) = v8;
  *(_OWORD *)(v7 + 128) = v9;
  sub_1010474E4(*a2, (uint64_t)&unk_102482AA0);
  BOOL v10 = (uint64_t **)(a1 + 112);
  if ((void *)(a1 + 120) != sub_100144248(a1 + 112, (uint64_t)&v21))
  {
    sub_101A9E758(qword_102419380 == -1);
    abort_report_np();
    __break(1u);
    goto LABEL_19;
  }
  if (qword_102419380 != -1) {
LABEL_19:
  }
    dispatch_once(&qword_102419380, &stru_10230D000);
  BOOL v11 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(void **__return_ptr))(*(void *)*a2 + 16))(__p);
    BOOL v12 = v33 >= 0 ? __p : (void **)__p[0];
    uint64_t v13 = *(void *)(a1 + 128);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    __int16 v25 = 2048;
    uint64_t v26 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu", buf, 0x16u);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    (*(void (**)(unsigned char *__return_ptr))(*(void *)*a2 + 16))(buf);
    if (v27 >= 0) {
      uint64_t v18 = buf;
    }
    else {
      uint64_t v18 = *(unsigned char **)buf;
    }
    uint64_t v19 = *(void *)(a1 + 128);
    int v28 = 136315394;
    uint64_t v29 = v18;
    __int16 v30 = 2048;
    uint64_t v31 = v19;
    char v20 = (char *)_os_log_send_and_compose_impl();
    if (v27 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTilesManager::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, const CLTileFileDownloadDetails &)", "%s\n", v20);
    if (v20 != (char *)__p) {
      free(v20);
    }
  }
  __p[0] = &v21;
  int v14 = sub_1008B48F0(v10, (uint64_t)&v21, (uint64_t)&unk_101D0B290, (_OWORD **)__p);
  uint64_t v15 = *a2;
  *a2 = 0;
  uint64_t v16 = v14[10];
  v14[10] = v15;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)v22);
  }
  return 1;
}

void sub_101060084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010600B8(uint64_t a1)
{
}

uint64_t sub_1010600C8(_DWORD *a1, int a2)
{
  a1[12] += a2;
  return (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 24))(a1);
}

void *sub_101060148(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 112);
  double v3 = (void *)(a1 + 120);
  if (v2 != (void *)(a1 + 120))
  {
    while (sub_1001BF5C0(v2[10]) != a2)
    {
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          size_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          size_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
      if (v6 == v3) {
        return v3;
      }
    }
  }
  return v2;
}

id *sub_1010601D0(uint64_t a1, uint64_t a2, int a3)
{
  sub_1000E1294((uint64_t *)v43, (uint64_t)"tileDownloaded", 0);
  size_t v6 = sub_101060148(a1, a2);
  if ((void *)(a1 + 120) == v6 || (BOOL v7 = (unsigned int *)v6[10]) == 0)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    BOOL v12 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "TileMgr, where did this download request come from?, download, %{public}p, #CloneMe", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      *(_DWORD *)long long __p = 134349056;
      *(void *)&__p[4] = a2;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
  }
  else
  {
    uint64_t v8 = *(void *)(sub_1001BF5C0(v6[10]) + 96);
    double v9 = (*(double (**)(void))(**(void **)(a1 + 464) + 56))(*(void *)(a1 + 464));
    double v10 = v9;
    uint64_t v11 = a1 + 472;
    if ((a3 & 1) != 0 || v8 == -1100) {
      sub_100FFB390(v11);
    }
    else {
      sub_100FFB3C0(v11, v9);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v7 + 16))(__p, v7);
      int v15 = v46[9];
      uint64_t v16 = *(unsigned char **)__p;
      uint64_t v17 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      int v18 = *(_DWORD *)(a1 + 424);
      uint64_t v19 = __p;
      if (v15 < 0) {
        uint64_t v19 = v16;
      }
      int v20 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)long long buf = 136316674;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v52 = 1024;
      *(_DWORD *)uint64_t v53 = a3;
      *(_WORD *)&v53[4] = 1024;
      *(_DWORD *)&v53[6] = v17;
      LOWORD(v54) = 1024;
      *(_DWORD *)((char *)&v54 + 2) = v8 == -1100;
      HIWORD(v54) = 1024;
      *(_DWORD *)uint64_t v55 = v18;
      *(_WORD *)&v55[4] = 1024;
      *(_DWORD *)int64_t v56 = v20;
      *(_WORD *)&v56[4] = 1024;
      int v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d", buf, 0x30u);
      if ((v46[9] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      (*(void (**)(void **__return_ptr, unsigned int *))(*(void *)v7 + 16))(v41, v7);
      int v29 = v42;
      __int16 v30 = (void **)v41[0];
      uint64_t v31 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      int v32 = *(_DWORD *)(a1 + 424);
      char v33 = v41;
      if (v29 < 0) {
        char v33 = v30;
      }
      int v34 = *(unsigned __int8 *)(a1 + 200);
      *(_DWORD *)long long __p = 136316674;
      *(void *)&__p[4] = v33;
      __int16 v45 = 1024;
      *(_DWORD *)__int16 v46 = a3;
      *(_WORD *)&v46[4] = 1024;
      *(_DWORD *)&v46[6] = v31;
      LOWORD(v47) = 1024;
      *(_DWORD *)((char *)&v47 + 2) = v8 == -1100;
      HIWORD(v47) = 1024;
      *(_DWORD *)uint64_t v48 = v32;
      *(_WORD *)&v48[4] = 1024;
      *(_DWORD *)uint64_t v49 = v34;
      *(_WORD *)&v49[4] = 1024;
      int v50 = 0;
      __int16 v35 = (char *)_os_log_send_and_compose_impl();
      if (v42 < 0) {
        operator delete(v41[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v35);
      if (v35 != buf) {
        free(v35);
      }
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    std::string v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      long long v22 = sub_100147F50(v7[12]);
      double v23 = sub_10013DAC0((uint64_t)(v7 + 12));
      double v24 = sub_10013DA9C((uint64_t)(v7 + 12));
      uint64_t v25 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      *(_DWORD *)long long buf = 136447235;
      *(void *)&uint8_t buf[4] = v22;
      __int16 v52 = 2049;
      *(double *)uint64_t v53 = v23;
      *(_WORD *)&v53[8] = 2049;
      double v54 = v24;
      *(_WORD *)uint64_t v55 = 1026;
      *(_DWORD *)&v55[2] = a3;
      *(_WORD *)int64_t v56 = 1026;
      *(_DWORD *)&v56[2] = v25;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@TileReq, %{public}s, downloaded, llsw, %{private}.2lf, %{private}.2lf, success, %{public}d, NSURLErrorCode, %{public}d", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      double v36 = sub_100147F50(v7[12]);
      double v37 = sub_10013DAC0((uint64_t)(v7 + 12));
      double v38 = sub_10013DA9C((uint64_t)(v7 + 12));
      uint64_t v39 = *(void *)(sub_1001BF5C0((uint64_t)v7) + 96);
      *(_DWORD *)long long __p = 136447235;
      *(void *)&__p[4] = v36;
      __int16 v45 = 2049;
      *(double *)__int16 v46 = v37;
      *(_WORD *)&v46[8] = 2049;
      double v47 = v38;
      *(_WORD *)uint64_t v48 = 1026;
      *(_DWORD *)&v48[2] = a3;
      *(_WORD *)uint64_t v49 = 1026;
      *(_DWORD *)&v49[2] = v39;
      double v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDownloadCompleted(CLFileDownload *, BOOL, void *)", "%s\n", v40);
      if (v40 != buf) {
        free(v40);
      }
    }
    if (a3)
    {
      uint64_t v26 = sub_10015EB2C(a1, v7[12]);
      uint64_t v27 = v26 + 232;
      (*(void (**)(uint64_t))(*(void *)(v26 + 232) + 16))(v26 + 232);
      (*(void (**)(uint64_t))(*(void *)v27 + 24))(v27);
      (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
      ++*(_DWORD *)(v26 + 284);
      (*(void (**)(uint64_t))(*(void *)(v26 + 232) + 24))(v26 + 232);
      sub_100134750(buf, "tileDownloadCompleted");
      sub_100D3B360(v26 + 232, (uint64_t *)buf, *(_DWORD *)(a1 + 424));
      if ((v53[9] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_101060A6C(a1, a2, a3, v10);
  }
  return sub_1000E1098(v43);
}

void sub_1010609D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, id a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void sub_101060A6C(uint64_t a1, uint64_t a2, int a3, double a4)
{
  double v9 = sub_101060148(a1, a2);
  if ((uint64_t *)(a1 + 120) == v9)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    int v15 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 134349056;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "TileMgr, tileDecompressionCompleted, no tile for download, %{public}p, #CloneMe", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      *(_DWORD *)long long __p = 134349056;
      *(void *)&__p[4] = a2;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
  }
  else
  {
    double v10 = v9;
    uint64_t v11 = v9 + 4;
    uint64_t v12 = v9[10];
    if (v12)
    {
      uint64_t v13 = (unsigned int *)(v12 + 48);
      uint64_t v108 = sub_10015EB2C(a1, *(_DWORD *)(v12 + 48));
      int v105 = *(_DWORD *)(a1 + 424);
      if (*(void *)(a1 + 160) == a2)
      {
        uint64_t v14 = a1 + 136;
      }
      else
      {
        if (*(void *)(a1 + 192) != a2)
        {
          sub_101A9E918();
          __break(1u);
          goto LABEL_196;
        }
        uint64_t v14 = a1 + 168;
      }
      uint64_t v107 = v14;
      uint64_t v4 = *(void *)(sub_1001BF5C0(v12) + 96);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v106 = (uint64_t)v11;
      int v20 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v12 + 16))(__p, v12);
        int v21 = __p[23];
        long long v22 = *(unsigned char **)__p;
        uint64_t v23 = *(void *)(sub_1001BF5C0(v12) + 96);
        double v24 = __p;
        int v25 = *(_DWORD *)(a1 + 424);
        if (v21 < 0) {
          double v24 = v22;
        }
        *(_DWORD *)long long buf = 136316162;
        *(void *)&uint8_t buf[4] = v24;
        __int16 v130 = 1024;
        *(_DWORD *)double v131 = a3;
        *(_WORD *)&v131[4] = 1024;
        *(_DWORD *)&v131[6] = v23;
        *(_WORD *)v132 = 1024;
        *(_DWORD *)&v132[2] = v4 == -1100;
        *(_WORD *)&v132[6] = 1024;
        *(_DWORD *)&v132[8] = v25;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d", buf, 0x24u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_30:
        *(_OWORD *)uint64_t v112 = *(_OWORD *)v13;
        uint64_t v113 = *(void *)(v12 + 64);
        if (*(char *)(v12 + 95) < 0)
        {
          sub_1000DC48C(&v114, *(void **)(v12 + 72), *(void *)(v12 + 80));
        }
        else
        {
          long long v114 = *(_OWORD *)(v12 + 72);
          uint64_t v115 = *(void *)(v12 + 88);
        }
        uint64_t v26 = &qword_102419000;
        if (sub_1001447B8((unsigned int *)v112))
        {
          if (qword_1024193A0 != -1)
          {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            uint64_t v26 = &qword_102419000;
          }
          uint64_t v27 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            int v28 = sub_100147F50(*v13);
            double v29 = sub_10013DAC0((uint64_t)v112);
            double v30 = sub_10013DA9C((uint64_t)v112);
            uint64_t v31 = sub_10014D19C(v108 + 184);
            *(_DWORD *)long long buf = 136446979;
            *(void *)&uint8_t buf[4] = v28;
            __int16 v130 = 2049;
            *(double *)double v131 = v29;
            *(_WORD *)&v131[8] = 2049;
            *(double *)v132 = v30;
            *(_WORD *)&v132[8] = 2050;
            *(void *)&v132[10] = v31;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "@TileList, %{public}s, add, llsw, %{private}.2lf, %{private}.2lf, download, size, %{public}lu", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            }
            int v32 = sub_100147F50(*v13);
            double v33 = sub_10013DAC0((uint64_t)v112);
            double v34 = sub_10013DA9C((uint64_t)v112);
            uint64_t v35 = sub_10014D19C(v108 + 184);
            *(_DWORD *)long long __p = 136446979;
            *(void *)&__p[4] = v32;
            *(_WORD *)&unsigned char __p[12] = 2049;
            *(double *)&__p[14] = v33;
            *(_WORD *)&__p[22] = 2049;
            *(double *)double v126 = v34;
            *(_WORD *)&v126[8] = 2050;
            *(void *)&v126[10] = v35;
            double v36 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v36);
            if (v36 != buf) {
              free(v36);
            }
            uint64_t v26 = &qword_102419000;
          }
        }
        else
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
          }
          double v37 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "@TileError, DecompressionID", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            }
            *(_WORD *)long long __p = 0;
            unint64_t v98 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v98);
            if (v98 != buf) {
              free(v98);
            }
          }
        }
        BOOL v38 = sub_101048658(v12, a3, v4 == -1100, a4);
        uint64_t v39 = v108;
        char v111 = v38;
        (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
        *(unsigned char *)(v107 + 8) = 0;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        double v40 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v12 + 16))(__p, v12);
          uint64_t v41 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          int v42 = *(_DWORD *)(a1 + 424);
          int v43 = *(unsigned __int8 *)(a1 + 200);
          double v44 = a4 - *(double *)(v107 + 16);
          uint64_t v45 = *(void *)v107;
          int v46 = *(unsigned __int8 *)(a1 + 144);
          int v47 = *(unsigned __int8 *)(a1 + 176);
          *(_DWORD *)long long buf = 136316674;
          *(void *)&uint8_t buf[4] = v41;
          __int16 v130 = 1024;
          *(_DWORD *)double v131 = v42;
          *(_WORD *)&v131[4] = 1024;
          *(_DWORD *)&v131[6] = v43;
          *(_WORD *)v132 = 2048;
          *(double *)&v132[2] = v44;
          *(_WORD *)&v132[10] = 2080;
          *(void *)&v132[12] = v45;
          __int16 v133 = 1024;
          int v134 = v46;
          __int16 v135 = 1024;
          int v136 = v47;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d", buf, 0x38u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v12 + 16))(v121, v12);
          if (v124 >= 0) {
            double v84 = v121;
          }
          else {
            double v84 = *(unsigned char **)v121;
          }
          int v85 = *(_DWORD *)(a1 + 424);
          int v86 = *(unsigned __int8 *)(a1 + 200);
          double v87 = a4 - *(double *)(v107 + 16);
          uint64_t v88 = *(void *)v107;
          int v89 = *(unsigned __int8 *)(a1 + 144);
          int v90 = *(unsigned __int8 *)(a1 + 176);
          *(_DWORD *)long long __p = 136316674;
          *(void *)&__p[4] = v84;
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = v85;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = v86;
          *(_WORD *)double v126 = 2048;
          *(double *)&v126[2] = v87;
          *(_WORD *)&v126[10] = 2080;
          *(void *)&v126[12] = v88;
          *(_WORD *)&v126[20] = 1024;
          *(_DWORD *)&v126[22] = v89;
          __int16 v127 = 1024;
          int v128 = v90;
          int v91 = (char *)_os_log_send_and_compose_impl();
          if (v124 < 0) {
            operator delete(*(void **)v121);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v91);
          if (v91 != buf) {
            free(v91);
          }
        }
        sub_101062460(a1, v111, (_DWORD *)v12, v108);
        if (sub_1000FC450())
        {
          sub_1000E9354(buf);
          uint64_t v48 = (char *)(v12 + 8);
          if (*(char *)(v12 + 31) < 0) {
            uint64_t v48 = *(char **)v48;
          }
          sub_1004D34AC((uint64_t)buf, "gotTile", v48);
          sub_1000EA238((uint64_t)buf, "success", &v111);
          sub_1000EA238((uint64_t)buf, "protection", (unsigned char *)(a1 + 200));
          sub_1000FC45C((uint64_t)buf, (uint64_t)"locationd");
          sub_10013F3C4(buf);
        }
        if (!v111)
        {
          int v50 = *(void **)(a1 + 40);
          v110[0] = _NSConcreteStackBlock;
          v110[1] = 3221225472;
          v110[2] = sub_1010628D8;
          v110[3] = &unk_1022B8660;
          v110[4] = a1;
          *(double *)&v110[5] = a4;
          [v50 async:v110];
LABEL_128:
          if (SHIBYTE(v115) < 0) {
            operator delete((void *)v114);
          }
          return;
        }
        uint64_t v49 = v10[10];
        v10[10] = 0;
        *(_OWORD *)long long __p = *(_OWORD *)(v49 + 48);
        *(void *)&__p[16] = *(void *)(v49 + 64);
        if (*(char *)(v49 + 95) < 0)
        {
          sub_1000DC48C(v126, *(void **)(v49 + 72), *(void *)(v49 + 80));
        }
        else
        {
          *(_OWORD *)double v126 = *(_OWORD *)(v49 + 72);
          *(void *)&v126[16] = *(void *)(v49 + 88);
        }
        unsigned int v51 = v26;
        sub_1000F0A30((uint64_t **)(a1 + 112), v10);
        sub_1008B4638(v106);
        operator delete(v10);
        __int16 v52 = (uint64_t **)(v108 + 184);
        if (!sub_10013D858(v108 + 184, (unsigned int *)__p))
        {
LABEL_112:
          uint64_t v66 = sub_1008B436C(v52, (unsigned int *)__p);
          uint64_t v67 = *v66;
          *uint64_t v66 = v49;
          if (v67) {
            (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
          }
          uint64_t v68 = sub_100144000((uint64_t)v52, (unsigned int *)__p);
          sub_100144E3C(v68, a4);
          uint64_t v69 = sub_100144000((uint64_t)v52, (unsigned int *)__p);
          sub_10105ECBC(a1, v69, v39, (uint64_t)"download", a4);
          uint64_t v70 = sub_100144000((uint64_t)v52, (unsigned int *)__p);
          uint64_t v71 = *(void *)(v39 + 304);
          if (v71) {
            (*(void (**)(uint64_t))(*(void *)v71 + 32))(v71);
          }
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          __int16 v72 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
          {
            (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v70 + 16))(buf, v70);
            int v73 = v131[9];
            __int16 v74 = *(unsigned char **)buf;
            uint64_t v75 = sub_10014D19C((uint64_t)v52);
            __int16 v76 = buf;
            if (v73 < 0) {
              __int16 v76 = v74;
            }
            *(_DWORD *)__int16 v121 = 136315394;
            *(void *)&v121[4] = v76;
            __int16 v122 = 2048;
            uint64_t v123 = v75;
            _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, added, tileid, %s, tilesMap.size, %lu", v121, 0x16u);
            if ((v131[9] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10230D000);
            }
            (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v70 + 16))(v121, v70);
            int v92 = v124;
            double v93 = *(unsigned char **)v121;
            uint64_t v94 = sub_10014D19C((uint64_t)v52);
            uint64_t v95 = v121;
            if (v92 < 0) {
              uint64_t v95 = v93;
            }
            int v117 = 136315394;
            unint64_t v118 = v95;
            __int16 v119 = 2048;
            uint64_t v120 = v94;
            unint64_t v96 = (char *)_os_log_send_and_compose_impl();
            if (v124 < 0) {
              operator delete(*(void **)v121);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v96);
            if (v96 != buf) {
              free(v96);
            }
            uint64_t v39 = v108;
          }
          ++*(_DWORD *)(v39 + 288);
          if (v105 == 1) {
            ++*(_DWORD *)(v39 + 292);
          }
          sub_1010594C0(a1, a4);
          uint64_t v77 = *(void **)(a1 + 40);
          v109[0] = _NSConcreteStackBlock;
          v109[1] = 3221225472;
          v109[2] = sub_1010628E8;
          v109[3] = &unk_1022B8660;
          v109[4] = a1;
          *(double *)&v109[5] = a4;
          [v77 async:v109];
          if ((v126[23] & 0x80000000) != 0) {
            operator delete(*(void **)v126);
          }
          goto LABEL_128;
        }
        uint64_t v53 = sub_100144000(v108 + 184, (unsigned int *)__p);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        double v54 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v53 + 16))(buf, v53);
          uint64_t v55 = v131[9] >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)__int16 v121 = 136315138;
          *(void *)&v121[4] = v55;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, replacing from, %s", v121, 0xCu);
          if ((v131[9] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v53 + 16))(v121, v53);
          if (v124 >= 0) {
            double v99 = v121;
          }
          else {
            double v99 = *(unsigned char **)v121;
          }
          int v117 = 136315138;
          unint64_t v118 = v99;
          __int16 v100 = (char *)_os_log_send_and_compose_impl();
          if (v124 < 0) {
            operator delete(*(void **)v121);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v100);
          if (v100 != buf) {
            free(v100);
          }
          uint64_t v39 = v108;
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        int64_t v56 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v49 + 16))(buf, v49);
          int v57 = v131[9] >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)__int16 v121 = 136315138;
          *(void *)&v121[4] = v57;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "TILE: tileDecompressionCompleted, replacing to, %s", v121, 0xCu);
          if ((v131[9] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_10230D000);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v49 + 16))(v121, v49);
          if (v124 >= 0) {
            uint64_t v101 = v121;
          }
          else {
            uint64_t v101 = *(unsigned char **)v121;
          }
          int v117 = 136315138;
          unint64_t v118 = v101;
          __int16 v102 = (char *)_os_log_send_and_compose_impl();
          if (v124 < 0) {
            operator delete(*(void **)v121);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v102);
          if (v102 != buf) {
            free(v102);
          }
          uint64_t v39 = v108;
        }
        uint64_t v58 = *(unsigned __int8 *)(v53 + 31);
        if ((v58 & 0x80u) == 0) {
          uint64_t v59 = *(unsigned __int8 *)(v53 + 31);
        }
        else {
          uint64_t v59 = *(void *)(v53 + 16);
        }
        uint64_t v60 = *(unsigned __int8 *)(v49 + 31);
        int v61 = (char)v60;
        if ((v60 & 0x80u) != 0) {
          uint64_t v60 = *(void *)(v49 + 16);
        }
        if (v59 != v60) {
          goto LABEL_101;
        }
        uint64_t v62 = (const void **)(v53 + 8);
        if (v61 >= 0) {
          __int16 v63 = (unsigned __int8 *)(v49 + 8);
        }
        else {
          __int16 v63 = *(unsigned __int8 **)(v49 + 8);
        }
        if ((v58 & 0x80) != 0)
        {
          if (memcmp(*v62, v63, *(void *)(v53 + 16)))
          {
LABEL_101:
            sub_101048104(v53);
LABEL_111:
            sub_1008B3DC4(v52, (unsigned int *)__p);
            goto LABEL_112;
          }
        }
        else if (*(unsigned char *)(v53 + 31))
        {
          while (*(unsigned __int8 *)v62 == *v63)
          {
            uint64_t v62 = (const void **)((char *)v62 + 1);
            ++v63;
            if (!--v58) {
              goto LABEL_102;
            }
          }
          goto LABEL_101;
        }
LABEL_102:
        if (v51[116] != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CFE0);
        }
        uint64_t v64 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v53 + 16))(buf, v53);
          int v65 = v131[9] >= 0 ? buf : *(unsigned char **)buf;
          *(_DWORD *)__int16 v121 = 136380675;
          *(void *)&v121[4] = v65;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "TileMgr, tileDecompressionCompleted, where the file, was it deleted, %{private}s, #CloneMe", v121, 0xCu);
          if ((v131[9] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (v51[116] != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v53 + 16))(v121, v53);
          if (v124 >= 0) {
            uint64_t v103 = v121;
          }
          else {
            uint64_t v103 = *(unsigned char **)v121;
          }
          int v117 = 136380675;
          unint64_t v118 = v103;
          __int16 v104 = (char *)_os_log_send_and_compose_impl();
          if (v124 < 0) {
            operator delete(*(void **)v121);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v104);
          if (v104 != buf) {
            free(v104);
          }
          uint64_t v39 = v108;
        }
        goto LABEL_111;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_132:
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v12 + 16))(v112, v12);
        int v78 = SHIBYTE(v113);
        std::string v79 = (void **)v112[0];
        uint64_t v80 = *(void *)(sub_1001BF5C0(v12) + 96);
        double v81 = v112;
        int v82 = *(_DWORD *)(a1 + 424);
        if (v78 < 0) {
          double v81 = v79;
        }
        *(_DWORD *)long long __p = 136316162;
        *(void *)&__p[4] = v81;
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&__p[14] = a3;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v80;
        *(_WORD *)double v126 = 1024;
        *(_DWORD *)&v126[2] = v4 == -1100;
        *(_WORD *)&v126[6] = 1024;
        *(_DWORD *)&v126[8] = v82;
        double v83 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v113) < 0) {
          operator delete(v112[0]);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v83);
        if (v83 != buf) {
          free(v83);
        }
        goto LABEL_30;
      }
LABEL_196:
      dispatch_once(&qword_102419380, &stru_10230D000);
      goto LABEL_132;
    }
    uint64_t v17 = (uint64_t)(v9 + 4);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    int v18 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "TileMgr, tileDecompressionCompleted, nullptr in fTilesDownload, #CloneMe", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      *(_WORD *)long long __p = 0;
      uint64_t v97 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, BOOL, void *, CFAbsoluteTime)", "%s\n", v97);
      if (v97 != buf) {
        free(v97);
      }
    }
    sub_1000F0A30((uint64_t **)(a1 + 112), v10);
    sub_1008B4638(v17);
    operator delete(v10);
    uint64_t v19 = *(void **)(a1 + 40);
    v116[0] = _NSConcreteStackBlock;
    v116[1] = 3221225472;
    v116[2] = sub_101062450;
    v116[3] = &unk_1022B8660;
    v116[4] = a1;
    *(double *)&v116[5] = a4;
    [v19 async:v116];
  }
}

void sub_101062310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void sub_101062450(uint64_t a1)
{
}

void sub_101062460(uint64_t a1, char a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t)(a3 + 12);
  int v6 = a3[12];
  memset(&v24, 0, sizeof(v24));
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)long long v22 = 0u;
  v20[0] = a2;
  int v21 = v6;
  std::string::operator=((std::string *)v22, (const std::string *)(a4 + 56));
  sub_100C09A14(v7, &buf);
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  *(std::string *)&__p[1] = buf;
  sub_101048050((uint64_t)a3, &buf);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  std::string v24 = buf;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  uint64_t v8 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(unsigned char *__return_ptr, _DWORD *))(*(void *)a3 + 16))(v25, a3);
    double v9 = v29 >= 0 ? v25 : *(unsigned char **)v25;
    double v10 = SHIBYTE(__p[0]) >= 0 ? v22 : (void **)v22[0];
    uint64_t v11 = SHIBYTE(__p[3]) >= 0 ? &__p[1] : (void **)__p[1];
    uint64_t v12 = (v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v24
        : (std::string *)v24.__r_.__value_.__r.__words[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v20[0];
    WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
    HIDWORD(buf.__r_.__value_.__r.__words[2]) = v21;
    __int16 v37 = 2080;
    BOOL v38 = v10;
    __int16 v39 = 2080;
    double v40 = v11;
    __int16 v41 = 2080;
    int v42 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "TILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s", (uint8_t *)&buf, 0x36u);
    if (SHIBYTE(v29) < 0) {
      operator delete(*(void **)v25);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a3 + 16))(v18, a3);
    if (v19 >= 0) {
      uint64_t v13 = v18;
    }
    else {
      uint64_t v13 = (void **)v18[0];
    }
    if (SHIBYTE(__p[0]) >= 0) {
      uint64_t v14 = v22;
    }
    else {
      uint64_t v14 = (void **)v22[0];
    }
    if (SHIBYTE(__p[3]) >= 0) {
      int v15 = &__p[1];
    }
    else {
      int v15 = (void **)__p[1];
    }
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v16 = &v24;
    }
    else {
      uint64_t v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v25 = 136316418;
    *(void *)&v25[4] = v13;
    __int16 v26 = 1024;
    int v27 = v20[0];
    __int16 v28 = 1024;
    int v29 = v21;
    __int16 v30 = 2080;
    uint64_t v31 = v14;
    __int16 v32 = 2080;
    double v33 = v15;
    __int16 v34 = 2080;
    uint64_t v35 = v16;
    uint64_t v17 = (std::string *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::sendNotificationTileWasDownloaded(BOOL, const CLTileFile &, const CLTilesSet &)", "%s\n", (const char *)v17);
    if (v17 != &buf) {
      free(v17);
    }
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  (*(void (**)(uint64_t, std::string *, unsigned char *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &buf, v20, 0, 0xFFFFFFFFLL, 0);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v22[0]);
  }
}

void sub_1010628AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010628D8(uint64_t a1)
{
}

void sub_1010628E8(uint64_t a1)
{
}

id *sub_1010628F8(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)std::string buf = 67109120;
    int v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: _tileDownloadCompleted, success, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLTilesManager::_tileDownloadCompleted(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1010601D0(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56));
}

void sub_101062ABC(uint64_t a1)
{
}

uint64_t sub_101062ACC(uint64_t a1, _DWORD *a2, double *a3, double *a4, uint64_t a5, unsigned char *a6, unsigned char *a7)
{
  if ((*a2 & 0xFFFFFFF7) - 1 >= 2)
  {
    sub_101A9EA84();
    __break(1u);
LABEL_40:
    dispatch_once(&qword_102419380, &stru_10230D000);
    goto LABEL_19;
  }
  uint64_t v7 = a1;
  *a7 = 0;
  if (*(unsigned char *)(a1 + 201))
  {
    sub_10014F674((uint64_t)v40, a2);
    uint64_t v14 = sub_10015EB2C(v7, v40[0]);
    sub_100146674((uint64_t)v40, -1, *a3, *a4, *(double *)(v14 + 152), *(double *)(v14 + 160));
    if (sub_10013D858(v14 + 184, v40))
    {
      uint64_t v15 = sub_100144000(v14 + 184, v40);
      *a6 = sub_1001453B8(v15, *(unsigned char *)(v7 + 200));
      if (sub_1001453B8(v15, *(unsigned char *)(v7 + 200)))
      {
        double v16 = (*(double (**)(void))(**(void **)(v7 + 464) + 56))(*(void *)(v7 + 464));
        sub_100144E3C(v15, v16);
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v17 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v15 + 16))(__p, v15);
        int v18 = v39 >= 0 ? __p : *(unsigned char **)__p;
        int v19 = *a6;
        LODWORD(buf[0].__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v18;
        WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = 1;
        WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: getTileFile, tile, %s, isAvailable, %d, isFileAccessible, %d", (uint8_t *)buf, 0x18u);
        if (SHIBYTE(v39) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v15 + 16))(v33, v15);
        if (v34 >= 0) {
          __int16 v30 = v33;
        }
        else {
          __int16 v30 = *(unsigned char **)v33;
        }
        int v31 = *a6;
        *(_DWORD *)long long __p = 136315650;
        *(void *)&__p[4] = v30;
        __int16 v36 = 1024;
        int v37 = 1;
        __int16 v38 = 1024;
        int v39 = v31;
        __int16 v32 = (std::string *)_os_log_send_and_compose_impl();
        if (v34 < 0) {
          operator delete(*(void **)v33);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, BOOL &, BOOL &)", "%s\n", (const char *)v32);
        if (v32 != buf) {
          free(v32);
        }
      }
      sub_101048050(v15, buf);
      if (*(char *)(a5 + 23) < 0) {
        operator delete(*(void **)a5);
      }
      *(std::string *)a5 = buf[0];
    }
    else
    {
      *a6 = 0;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      long long v22 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_100C094CC((uint64_t)v40);
        uint64_t v23 = (buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? buf
            : (std::string *)buf[0].__r_.__value_.__r.__words[0];
        *(_DWORD *)long long __p = 136315138;
        *(void *)&__p[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "TILE: getTileFile, tileid, %s, not available", __p, 0xCu);
        if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf[0].__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        sub_100C094CC((uint64_t)v40);
        if (v39 >= 0) {
          __int16 v28 = __p;
        }
        else {
          __int16 v28 = *(unsigned char **)__p;
        }
        *(_DWORD *)double v33 = 136315138;
        *(void *)&_DWORD v33[4] = v28;
        int v29 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(v39) < 0) {
          operator delete(*(void **)__p);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, BOOL &, BOOL &)", "%s\n", (const char *)v29);
        if (v29 != buf) {
          free(v29);
        }
      }
      if ((void *)(v7 + 120) == sub_100144248(v7 + 112, (uint64_t)v40)
        || (buf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v40,
            std::string v24 = sub_1008B48F0((uint64_t **)(v7 + 112), (uint64_t)v40, (uint64_t)&unk_101D0B290, buf),
            sub_10014548C(v24[10])))
      {
        uint64_t v15 = 0;
      }
      else
      {
        uint64_t v15 = 0;
        *a7 = 1;
      }
    }
    if (v42 < 0) {
      operator delete(v41);
    }
    return v15;
  }
  uint64_t v8 = &qword_102419000;
  if (qword_102419380 != -1) {
    goto LABEL_40;
  }
LABEL_19:
  int v20 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *(unsigned __int8 *)(v7 + 200);
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(buf[0].__r_.__value_.__r.__words[0]) = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "TILE: getTileFile, index is not available until first unlock, fDataProtectionEnabled, %d", (uint8_t *)buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v8[112] != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    unsigned int v26 = *(unsigned __int8 *)(v7 + 200);
    v40[0] = 67109120;
    v40[1] = v26;
    int v27 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, BOOL &, BOOL &)", "%s\n", (const char *)v27);
    if (v27 != buf) {
      free(v27);
    }
  }
  return 0;
}

void sub_1010631E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101063234(uint64_t a1, const std::string *a2)
{
  uint64_t v6 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  long long v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
  *(void *)(a1 + 64) = *((void *)&a2->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 48) = v4;
  std::string::operator=((std::string *)(a1 + 72), a2 + 1);
  (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
  return 1;
}

void sub_101063314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101063328(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 178)) {
    return;
  }
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a1 + 40);
  double v5 = (*(double (**)(void))(**(void **)(v4 + 464) + 56))(*(void *)(v4 + 464))
     - *(double *)(*(void *)(a1 + 48) + 76)
     + 60.0;
  BOOL v6 = v5 < *(double *)(a2 + 136) && *(unsigned char *)(v4 + 440) == 0;
  uint64_t v108 = a2;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  uint64_t v7 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(char *)(a2 + 31) >= 0 ? a2 + 8 : *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(v3 + 56);
    int v10 = *(unsigned __int8 *)(v3 + 64);
    uint64_t v11 = sub_10014D19C(a2 + 184);
    uint64_t v12 = sub_1008B42D8(a2 + 184);
    sub_1000AB340(*(void *)(v3 + 48));
    uint64_t v13 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 136316930;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v125 = 2080;
    *(void *)&long long v126 = v9;
    WORD4(v126) = 1024;
    *(_DWORD *)((char *)&v126 + 10) = v10;
    HIWORD(v126) = 2048;
    *(double *)__int16 v127 = v5;
    *(_WORD *)&v127[8] = 1024;
    BOOL v128 = v6;
    __int16 v129 = 2048;
    uint64_t v130 = v11;
    __int16 v131 = 2048;
    uint64_t v132 = v12;
    __int16 v133 = 2080;
    int v134 = v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "TileMgr, updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s", buf, 0x4Au);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    if (*(char *)(a2 + 31) >= 0) {
      uint64_t v87 = a2 + 8;
    }
    else {
      uint64_t v87 = *(void *)(a2 + 8);
    }
    uint64_t v88 = *(void *)(v3 + 56);
    int v89 = *(unsigned __int8 *)(v3 + 64);
    uint64_t v90 = sub_10014D19C(a2 + 184);
    uint64_t v91 = sub_1008B42D8(a2 + 184);
    sub_1000AB340(*(void *)(v3 + 48));
    if (v114 >= 0) {
      int v92 = v113;
    }
    else {
      int v92 = *(unsigned char **)v113;
    }
    *(_DWORD *)long long __p = 136316930;
    *(void *)&__p[4] = v87;
    *(_WORD *)&unsigned char __p[12] = 2080;
    *(void *)&__p[14] = v88;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&unsigned char __p[24] = v89;
    *(_WORD *)&__p[28] = 2048;
    *(double *)uint64_t v116 = v5;
    *(_WORD *)&v116[8] = 1024;
    BOOL v117 = v6;
    __int16 v118 = 2048;
    uint64_t v119 = v90;
    __int16 v120 = 2048;
    uint64_t v121 = v91;
    __int16 v122 = 2080;
    uint64_t v123 = v92;
    double v93 = (char *)_os_log_send_and_compose_impl();
    if (v114 < 0) {
      operator delete(*(void **)v113);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v93);
    if (v93 != buf) {
      free(v93);
    }
  }
  unsigned int i = &qword_102419000;
  if (v6)
  {
    if (*(unsigned char *)(v3 + 64))
    {
      uint64_t v15 = a2 + 184;
      sub_1008B4338(a2 + 184);
      double v16 = (void *)sub_1000D8908(a2 + 184);
      uint64_t v107 = sub_1000B894C(a2 + 184);
      if (v16 != (void *)v107)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        uint64_t v106 = v3;
        while (1)
        {
          int v19 = (unsigned int *)v16[10];
          if (!v19) {
            break;
          }
          if (sub_10014548C(v16[10]))
          {
            if (sub_10104CF14((double *)v19, *(void *)(v3 + 48), *(float *)(v108 + 144)))
            {
              if (!sub_10104A2AC((uint64_t)v19))
              {
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_10230CFE0);
                }
                std::string v24 = qword_1024193A8;
                if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
                {
                  (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v19 + 16))(buf, v19);
                  uint64_t v25 = v4;
                  uint64_t v26 = v17;
                  uint64_t v27 = v18;
                  __int16 v28 = i;
                  int v29 = SBYTE9(v126);
                  __int16 v30 = *(unsigned char **)buf;
                  uint64_t v31 = sub_1008B42D8(v15);
                  *(_DWORD *)long long __p = 136380931;
                  __int16 v32 = buf;
                  if (v29 < 0) {
                    __int16 v32 = v30;
                  }
                  *(void *)&__p[4] = v32;
                  *(_WORD *)&unsigned char __p[12] = 2050;
                  *(void *)&__p[14] = v31;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "TileMgr, updateProtectionClass, failed unlocking tileid, %{private}s, size, %{public}lu, #CloneMe", __p, 0x16u);
                  if (SBYTE9(v126) < 0) {
                    operator delete(*(void **)buf);
                  }
                  unsigned int i = v28;
                  uint64_t v18 = v27;
                  uint64_t v17 = v26;
                  uint64_t v4 = v25;
                  uint64_t v3 = v106;
                }
                if (!sub_10013D1A0(115, 0)) {
                  goto LABEL_31;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_10230CFE0);
                }
                (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v19 + 16))(__p, v19);
                uint64_t v33 = v17;
                int v34 = __p[23];
                uint64_t v35 = *(unsigned char **)__p;
                uint64_t v36 = sub_1008B42D8(v15);
                *(_DWORD *)uint64_t v113 = 136380931;
                int v37 = __p;
                if (v34 < 0) {
                  int v37 = v35;
                }
                *(void *)&v113[4] = v37;
                *(_WORD *)&v113[12] = 2050;
                *(void *)&v113[14] = v36;
                __int16 v38 = (char *)_os_log_send_and_compose_impl();
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v38);
                uint64_t v17 = v33;
                goto LABEL_74;
              }
              sub_1008B403C(v15, v19 + 12);
              ++*(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
              uint64_t v18 = (v18 + 1);
            }
            else
            {
              if (!sub_10104CC50((uint64_t)v19, *(unsigned __int8 *)(v4 + 200)))
              {
                sub_1008B403C(v15, v19 + 12);
                ++*(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_10230CFE0);
                }
                int v39 = qword_1024193A8;
                if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
                {
                  (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v19 + 16))(buf, v19);
                  double v40 = buf;
                  if (SBYTE9(v126) < 0) {
                    double v40 = *(unsigned char **)buf;
                  }
                  *(_DWORD *)long long __p = 136380675;
                  *(void *)&__p[4] = v40;
                  _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{private}s, #CloneMe", __p, 0xCu);
                  if (SBYTE9(v126) < 0) {
                    operator delete(*(void **)buf);
                  }
                }
                if (!sub_10013D1A0(115, 0)) {
                  goto LABEL_31;
                }
                bzero(buf, 0x65CuLL);
                if (qword_1024193A0 != -1) {
                  dispatch_once(&qword_1024193A0, &stru_10230CFE0);
                }
                (*(void (**)(unsigned char *__return_ptr, unsigned int *))(*(void *)v19 + 16))(__p, v19);
                __int16 v41 = __p;
                if (__p[23] < 0) {
                  __int16 v41 = *(unsigned char **)__p;
                }
                *(_DWORD *)uint64_t v113 = 136380675;
                *(void *)&v113[4] = v41;
                __int16 v38 = (char *)_os_log_send_and_compose_impl();
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v38);
                goto LABEL_74;
              }
              uint64_t v17 = (v17 + 1);
            }
          }
LABEL_31:
          int v21 = (void *)v16[1];
          if (v21)
          {
            do
            {
              long long v22 = v21;
              int v21 = (void *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              long long v22 = (void *)v16[2];
              BOOL v23 = *v22 == (void)v16;
              double v16 = v22;
            }
            while (!v23);
          }
          double v16 = v22;
          if (v22 == (void *)v107) {
            goto LABEL_175;
          }
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CFE0);
        }
        int v20 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "TileMgr, tile ptr is NULL, #CloneMe", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_31;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CFE0);
        }
        *(_WORD *)long long __p = 0;
        __int16 v38 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v38);
LABEL_74:
        if (v38 != buf) {
          free(v38);
        }
        goto LABEL_31;
      }
      goto LABEL_174;
    }
    memset(__p, 0, 24);
    uint64_t v54 = a2 + 184;
    sub_1008B42CC(a2 + 184, (uint64_t *)v113);
    uint64_t v55 = *(unsigned int **)v113;
    if (*(unsigned char **)v113 == &v113[8])
    {
LABEL_171:
      sub_10014F400((uint64_t)v113, *(char **)&v113[8]);
      int v73 = *(unsigned int **)__p;
      __int16 v74 = *(unsigned int **)&__p[8];
      for (unsigned int i = &qword_102419000; v73 != v74; v73 += 12)
        sub_1008B3B1C(v54, v73);
      *(void *)std::string buf = __p;
      sub_10014FEE0((void ***)buf);
LABEL_174:
      LODWORD(v18) = 0;
      LODWORD(v17) = 0;
LABEL_175:
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      uint64_t v75 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(v108 + 31) >= 0) {
          uint64_t v76 = v108 + 8;
        }
        else {
          uint64_t v76 = *(void *)(v108 + 8);
        }
        int v77 = *(unsigned __int8 *)(v3 + 64);
        uint64_t v78 = sub_10014D19C(v108 + 184);
        *(_DWORD *)std::string buf = 136447234;
        *(void *)&uint8_t buf[4] = v76;
        __int16 v125 = 1026;
        LODWORD(v126) = v77;
        WORD2(v126) = 1026;
        *(_DWORD *)((char *)&v126 + 6) = v17;
        WORD5(v126) = 1026;
        HIDWORD(v126) = v18;
        *(_WORD *)__int16 v127 = 2050;
        *(void *)&v127[2] = v78;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "TileMgr, %{public}s, locking, %{public}d, lock, %{public}d, unlock, %{public}d, size, %{public}lu", buf, 0x28u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_183;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      if (*(char *)(v108 + 31) >= 0) {
        uint64_t v102 = v108 + 8;
      }
      else {
        uint64_t v102 = *(void *)(v108 + 8);
      }
      int v103 = *(unsigned __int8 *)(v3 + 64);
      uint64_t v104 = sub_10014D19C(v108 + 184);
      *(_DWORD *)long long __p = 136447234;
      *(void *)&__p[4] = v102;
      *(_WORD *)&unsigned char __p[12] = 1026;
      *(_DWORD *)&__p[14] = v103;
      *(_WORD *)&__p[18] = 1026;
      *(_DWORD *)&__p[20] = v17;
      *(_WORD *)&unsigned char __p[24] = 1026;
      *(_DWORD *)&__p[26] = v18;
      *(_WORD *)uint64_t v116 = 2050;
      *(void *)&v116[2] = v104;
      uint64_t v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v53);
      goto LABEL_232;
    }
    while (1)
    {
      uint64_t v56 = sub_100144000(v54, v55 + 8);
      int v57 = (double *)v56;
      if (!v56)
      {
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CFE0);
        }
        uint64_t v62 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "TileMgr, tile ptr is NULL, #CloneMe", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
          }
          *(_WORD *)uint64_t v109 = 0;
          __int16 v63 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v63);
          if (v63 != buf) {
            free(v63);
          }
        }
        goto LABEL_141;
      }
      if (sub_10014548C(v56))
      {
        if (!sub_10104CF14(v57, *(void *)(v3 + 48), *(float *)(v108 + 144)))
        {
          if (sub_10104CC50((uint64_t)v57, *(unsigned __int8 *)(v4 + 200)))
          {
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_10230D000);
            }
            uint64_t v58 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
            {
              (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)v57 + 16))(buf, v57);
              uint64_t v59 = buf;
              if (SBYTE9(v126) < 0) {
                uint64_t v59 = *(unsigned char **)buf;
              }
              *(_DWORD *)uint64_t v109 = 136315138;
              *(void *)&v109[4] = v59;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, location moved, locking tileid, %s", v109, 0xCu);
              if (SBYTE9(v126) < 0) {
                operator delete(*(void **)buf);
              }
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_10230D000);
              }
              (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)v57 + 16))(v109, v57);
              uint64_t v68 = v109;
              if (v110 < 0) {
                uint64_t v68 = *(unsigned char **)v109;
              }
              int v111 = 136315138;
              uint64_t v112 = v68;
              uint64_t v69 = (char *)_os_log_send_and_compose_impl();
              if (v110 < 0) {
                operator delete(*(void **)v109);
              }
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v69);
              if (v69 != buf) {
                free(v69);
              }
            }
            uint64_t v60 = *(void *)&__p[8];
            if (*(void *)&__p[8] >= *(void *)&__p[16])
            {
              uint64_t v61 = sub_10014F734((uint64_t *)__p, (long long *)v55 + 2);
            }
            else
            {
              sub_10014F6C0((uint64_t)__p, (long long *)v55 + 2);
              uint64_t v61 = v60 + 48;
            }
            *(void *)&__p[8] = v61;
            goto LABEL_141;
          }
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230CFE0);
          }
          uint64_t v64 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
          {
            (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)v57 + 16))(buf, v57);
            int v65 = buf;
            if (SBYTE9(v126) < 0) {
              int v65 = *(unsigned char **)buf;
            }
            *(_DWORD *)uint64_t v109 = 136315138;
            *(void *)&v109[4] = v65;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "TileMgr, updateProtectionClass, unable to lock tile, locking tileid, %{pricate}s, #CloneMe", v109, 0xCu);
            if (SBYTE9(v126) < 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_10230CFE0);
            }
            (*(void (**)(unsigned char *__return_ptr, double *))(*(void *)v57 + 16))(v109, v57);
            uint64_t v70 = v109;
            if (v110 < 0) {
              uint64_t v70 = *(unsigned char **)v109;
            }
            int v111 = 136315138;
            uint64_t v112 = v70;
            uint64_t v71 = (char *)_os_log_send_and_compose_impl();
            if (v110 < 0) {
              operator delete(*(void **)v109);
            }
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v71);
            if (v71 != buf) {
              free(v71);
            }
          }
        }
        ++*(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
      }
LABEL_141:
      uint64_t v66 = (unsigned int *)*((void *)v55 + 1);
      if (v66)
      {
        do
        {
          uint64_t v67 = v66;
          uint64_t v66 = *(unsigned int **)v66;
        }
        while (v66);
      }
      else
      {
        do
        {
          uint64_t v67 = (unsigned int *)*((void *)v55 + 2);
          BOOL v23 = *(void *)v67 == (void)v55;
          uint64_t v55 = v67;
        }
        while (!v23);
      }
      uint64_t v55 = v67;
      if (v67 == (unsigned int *)&v113[8]) {
        goto LABEL_171;
      }
    }
  }
  uint64_t v42 = a2 + 184;
  sub_1008B42CC(a2 + 184, (uint64_t *)__p);
  int v43 = *(unsigned int **)__p;
  if (*(unsigned char **)__p == &__p[8])
  {
    sub_10014F400((uint64_t)__p, **(char ***)__p);
LABEL_165:
    unsigned int i = &qword_102419000;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    __int16 v72 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, clearing unprotected map", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      *(_WORD *)long long __p = 0;
      int v105 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v105);
      if (v105 != buf) {
        free(v105);
      }
    }
    sub_1008B4338(v42);
    goto LABEL_183;
  }
  int v44 = 1;
  do
  {
    uint64_t v45 = sub_100144000(v42, v43 + 8);
    uint64_t v46 = v45;
    if (v45)
    {
      BOOL v47 = sub_10014548C(v45);
      if ((v47 & v44) == 1) {
        int v44 = sub_10104CC50(v46, *(unsigned __int8 *)(v4 + 200));
      }
      else {
        v44 &= !v47;
      }
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      uint64_t v48 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "TileMgr, tile ptr is NULL, #CloneMe", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230CFE0);
        }
        *(_WORD *)uint64_t v113 = 0;
        uint64_t v49 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v49);
        if (v49 != buf) {
          free(v49);
        }
      }
    }
    int v50 = (unsigned int *)*((void *)v43 + 1);
    if (v50)
    {
      do
      {
        unsigned int v51 = v50;
        int v50 = *(unsigned int **)v50;
      }
      while (v50);
    }
    else
    {
      do
      {
        unsigned int v51 = (unsigned int *)*((void *)v43 + 2);
        BOOL v23 = *(void *)v51 == (void)v43;
        int v43 = v51;
      }
      while (!v23);
    }
    int v43 = v51;
  }
  while (v51 != (unsigned int *)&__p[8]);
  sub_10014F400((uint64_t)__p, *(char **)&__p[8]);
  if (v44) {
    goto LABEL_165;
  }
  unsigned int i = &qword_102419000;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  __int16 v52 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "TileMgr, Unable to lock all unprotected files!, #CloneMe", buf, 2u);
  }
  if (!sub_10013D1A0(115, 0)) {
    goto LABEL_183;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  *(_WORD *)long long __p = 0;
  uint64_t v53 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v53);
LABEL_232:
  if (v53 != buf) {
    free(v53);
  }
LABEL_183:
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  std::string v79 = i[113];
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(v108 + 31) >= 0) {
      uint64_t v80 = v108 + 8;
    }
    else {
      uint64_t v80 = *(void *)(v108 + 8);
    }
    uint64_t v81 = sub_10014D19C(v108 + 184);
    int v82 = *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v80;
    __int16 v125 = 2048;
    *(void *)&long long v126 = v81;
    WORD4(v126) = 1024;
    *(_DWORD *)((char *)&v126 + 10) = v82;
    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    if (*(char *)(v108 + 31) >= 0) {
      uint64_t v94 = v108 + 8;
    }
    else {
      uint64_t v94 = *(void *)(v108 + 8);
    }
    uint64_t v95 = sub_10014D19C(v108 + 184);
    int v96 = *(_DWORD *)(*(void *)(*(void *)(v3 + 32) + 8) + 24);
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v94;
    *(_WORD *)&unsigned char __p[12] = 2048;
    *(void *)&__p[14] = v95;
    *(_WORD *)&__p[22] = 1024;
    *(_DWORD *)&unsigned char __p[24] = v96;
    uint64_t v97 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v97);
    if (v97 != buf) {
      free(v97);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230CFE0);
  }
  double v83 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(v108 + 31) >= 0) {
      uint64_t v84 = v108 + 8;
    }
    else {
      uint64_t v84 = *(void *)(v108 + 8);
    }
    int v85 = *(unsigned __int8 *)(v3 + 64);
    uint64_t v86 = sub_10014D19C(v108 + 184);
    *(_DWORD *)std::string buf = 136446722;
    *(void *)&uint8_t buf[4] = v84;
    __int16 v125 = 1026;
    LODWORD(v126) = v85;
    WORD2(v126) = 2050;
    *(void *)((char *)&v126 + 6) = v86;
    _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_INFO, "@TileEvent, %{public}s, locking, %{public}d, readable, %{public}lu\n", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    if (*(char *)(v108 + 31) >= 0) {
      uint64_t v98 = v108 + 8;
    }
    else {
      uint64_t v98 = *(void *)(v108 + 8);
    }
    int v99 = *(unsigned __int8 *)(v3 + 64);
    uint64_t v100 = sub_10014D19C(v108 + 184);
    *(_DWORD *)long long __p = 136446722;
    *(void *)&__p[4] = v98;
    *(_WORD *)&unsigned char __p[12] = 1026;
    *(_DWORD *)&__p[14] = v99;
    *(_WORD *)&__p[18] = 2050;
    *(void *)&__p[20] = v100;
    uint64_t v101 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, BOOL)_block_invoke", "%s\n", v101);
    if (v101 != buf) {
      free(v101);
    }
  }
}

void sub_101064D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **p_p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  p_p = &__p;
  sub_10014FEE0(&p_p);
  _Unwind_Resume(a1);
}

void sub_101064E34(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 240))
  {
    if (*(double *)(a1 + 268) >= 0.0)
    {
      double v6 = vabdd_f64((*(double (**)(void))(**(void **)(a1 + 464) + 56))(*(void *)(a1 + 464)), *(double *)(a1 + 324));
      double v7 = *(double *)(a1 + 232);
      double v8 = v7 - v6 + 20.0;
      double v9 = v7 * 0.170000002;
      if (v8 > v9) {
        double v10 = v8;
      }
      else {
        double v10 = v9;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v11 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        sub_1000AB340(a1 + 248);
        uint64_t v12 = v22 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136315906;
        uint64_t v27 = a2;
        __int16 v28 = 2048;
        double v29 = v6;
        __int16 v30 = 2048;
        double v31 = v10;
        __int16 v32 = 2080;
        uint64_t v33 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "TILE: scheduleExpiredLocationTimer, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s", buf, 0x2Au);
        if (SHIBYTE(v22) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        sub_1000AB340(a1 + 248);
        if (v18 >= 0) {
          uint64_t v15 = &v17;
        }
        else {
          uint64_t v15 = v17;
        }
        *(_DWORD *)long long __p = 136315906;
        *(void *)&__p[4] = a2;
        __int16 v20 = 2048;
        double v21 = v6;
        __int16 v22 = 2048;
        double v23 = v10;
        __int16 v24 = 2080;
        uint64_t v25 = v15;
        double v16 = (char *)_os_log_send_and_compose_impl();
        if (v18 < 0) {
          operator delete(v17);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::scheduleExpiredLocationTimer(const char *)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      uint64_t v13 = *(void *)(a1 + 240);
      double v14 = (*(double (**)(void))(**(void **)(a1 + 464) + 56))(*(void *)(a1 + 464));
      sub_1001165F8(v13, v10 + v14);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      uint64_t v3 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "TILE: scheduleExpiredLocationTimer, no valid location", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_10230D000);
        }
        *(_WORD *)long long __p = 0;
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::scheduleExpiredLocationTimer(const char *)", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
  }
}

void sub_101065274(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(unsigned __int8 *)(a1 + 200);
    *(_DWORD *)std::string buf = 67109120;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: onExpiredLocationTimerFired, isLocked, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onExpiredLocationTimerFired()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(unsigned char *)(a1 + 200))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: onExpiredLocationTimerFired", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onExpiredLocationTimerFired()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    if (*(unsigned char *)(a1 + 200)) {
      sub_101058C10(a1, (uint64_t)"onExpiredLocationTimerFired", a1 + 248, 0);
    }
  }
}

void sub_101065578(uint64_t a1, uint64_t a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: onPCTimerFired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    double v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::onPCTimerFired(CLPersistentTimer *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(void *)(a1 + 240) == a2) {
    sub_101065274(a1);
  }
}

void sub_101065724(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  (*(void (**)(void))(**(void **)(a1 + 464) + 56))(*(void *)(a1 + 464));
  if (*a3 == 6)
  {
    int v8 = *(_DWORD *)(a4 + 4);
    *(_DWORD *)(a1 + 424) = v8;
    if (v8 >= 1)
    {
      sub_100033CE0(a1, v7);
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230CFE0);
    }
    double v9 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      int v10 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      int v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "TileMgr, onStatusNotification, unknown notification, %{public}d, #CloneMe", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230CFE0);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

uint64_t sub_101065968(void *a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_10230D000);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: CLTilesManager::shutdown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLTilesManager::shutdown()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (a1[30])
  {
    sub_101059004((uint64_t)a1);
    uint64_t v3 = a1[30];
    if (v3)
    {
      sub_100998C38(v3);
      operator delete();
    }
    a1[30] = 0;
  }
  sub_101059A20((uint64_t)a1);
  uint64_t v4 = a1[24];
  a1[24] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = a1[20];
  a1[20] = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_101065B98(id a1, void *a2)
{
  *((void *)a2 + 36) = 0;
}

void *sub_101065BA0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "https://cl3.apple.com/3/v2");
}

void *sub_101065BB0@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "https://cl3.apple.com/2/v1");
}

uint64_t sub_101065BC0(uint64_t a1)
{
  sub_10010F274((uint64_t)v17);
  uint64_t v2 = sub_100132EFC(v18, (uint64_t)"", 0);
  sub_100132EFC(v2, (uint64_t)"sw_cor, ", 8);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)", ", 2);
  uint64_t v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)", adamId, ", 10);
  double v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)", radiusIns, ", 13);
  double v6 = (void *)std::ostream::operator<<();
  sub_100132EFC(v6, (uint64_t)", rankIns, ", 11);
  double v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)", rankUnIns, ", 13);
  int v8 = (void *)std::ostream::operator<<();
  sub_100132EFC(v8, (uint64_t)", age, ", 7);
  double v9 = (void *)std::ostream::operator<<();
  sub_100132EFC(v9, (uint64_t)", ", 2);
  int v10 = (void *)std::ostream::operator<<();
  sub_100132EFC(v10, (uint64_t)", ", 2);
  uint64_t v11 = (void *)std::ostream::operator<<();
  sub_100132EFC(v11, (uint64_t)", ", 2);
  uint64_t v12 = (void *)std::ostream::operator<<();
  sub_100132EFC(v12, (uint64_t)", touristApp, ", 14);
  int v13 = (void *)std::ostream::operator<<();
  sub_100132EFC(v13, (uint64_t)", marqueeApp, ", 14);
  sub_100D33DEC(a1);
  double v14 = (void *)std::ostream::operator<<();
  sub_100132EFC(v14, (uint64_t)"", 0);
  std::stringbuf::str();
  *(void *)((char *)v17
  v18[0] = v15;
  if (v19 < 0) {
    operator delete((void *)v18[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_101065E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_101065EAC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482C00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482C00))
  {
    qword_102482BE8 = 0;
    unk_102482BF0 = 0;
    qword_102482BF8 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102482BE8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102482C00);
  }
  if (qword_102482C08 != -1) {
    dispatch_once(&qword_102482C08, &stru_10230CE98);
  }
  return &qword_102482BE8;
}

void sub_101065F4C(uint64_t a1)
{
  uint64_t v2 = sub_10015EB2C(a1, 9u);
  sub_101057698(a1, (std::string::size_type)&__str);
  int v3 = *(char *)(v2 + 79);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  if (v3 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(v2 + 79);
  }
  else {
    std::string::size_type v6 = *(void *)(v2 + 64);
  }
  if (v3 >= 0) {
    double v7 = (const void *)(v2 + 56);
  }
  else {
    double v7 = *(const void **)(v2 + 56);
  }
  if (v6 >= size) {
    size_t v8 = size;
  }
  else {
    size_t v8 = v6;
  }
  if (memcmp(p_str, v7, v8) || v6 != size)
  {
    std::string::operator=((std::string *)(v2 + 56), &__str);
    sub_101059DC4(a1, 1, 9u);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_10230D000);
    }
    int v10 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(v2 + 79) >= 0) {
        uint64_t v11 = v2 + 56;
      }
      else {
        uint64_t v11 = *(void *)(v2 + 56);
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v18 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: onStoreFrontDidChangeNotification, new fServerUrl, %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_10230D000);
      }
      if (*(char *)(v2 + 79) >= 0) {
        uint64_t v12 = v2 + 56;
      }
      else {
        uint64_t v12 = *(void *)(v2 + 56);
      }
      int v15 = 136315138;
      uint64_t v16 = v12;
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTilesManager::storeFrontDidChange()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1010661B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010661DC(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102482B18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102482B18))
  {
    sub_10105E66C("([0-9]{8})", (const void **)&unk_102482AA0, __p);
    sub_101032120((std::locale *)&unk_102482AD8, (uint64_t)__p, 0);
  }
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  char v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  char v40 = 0;
  char v41 = 0;
  uint64_t v42 = 0;
  *(_OWORD *)long long __p = 0u;
  memset(v34, 0, sizeof(v34));
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (sub_101037FEC(v3, v3 + v2, (uint64_t)__p, (uint64_t)&unk_102482AD8, 0))
  {
    int v4 = 0;
    int v5 = 1;
  }
  else
  {
    std::string::size_type v6 = sub_101066430();
    int v7 = *(char *)(a1 + 23);
    BOOL v8 = v7 < 0;
    if (v7 >= 0) {
      uint64_t v9 = a1;
    }
    else {
      uint64_t v9 = *(void *)a1;
    }
    uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
    if (v8) {
      uint64_t v10 = *(void *)(a1 + 8);
    }
    int v11 = *((char *)v6 + 23);
    BOOL v12 = v11 < 0;
    if (v11 >= 0) {
      int v13 = v6;
    }
    else {
      int v13 = (void *)*v6;
    }
    uint64_t v14 = *((unsigned __int8 *)v6 + 23);
    if (v12) {
      uint64_t v14 = v6[1];
    }
    uint64_t v15 = v9 - 1;
    uint64_t v16 = (char *)v13 - 1;
    while (v10 && v14)
    {
      int v17 = *(unsigned __int8 *)(v15 + v10);
      int v18 = v16[v14];
      --v10;
      --v14;
      if (v17 != v18) {
        goto LABEL_25;
      }
    }
    if (!v14)
    {
LABEL_42:
      int v5 = 0;
      int v4 = 0;
      goto LABEL_43;
    }
LABEL_25:
    char v19 = sub_101048388();
    int v20 = *(char *)(a1 + 23);
    BOOL v21 = v20 < 0;
    if (v20 >= 0) {
      uint64_t v22 = a1;
    }
    else {
      uint64_t v22 = *(void *)a1;
    }
    uint64_t v23 = *(unsigned __int8 *)(a1 + 23);
    if (v21) {
      uint64_t v23 = *(void *)(a1 + 8);
    }
    int v24 = *((char *)v19 + 23);
    BOOL v25 = v24 < 0;
    if (v24 >= 0) {
      uint64_t v26 = v19;
    }
    else {
      uint64_t v26 = (void *)*v19;
    }
    uint64_t v27 = *((unsigned __int8 *)v19 + 23);
    if (v25) {
      uint64_t v27 = v19[1];
    }
    uint64_t v28 = v22 - 1;
    double v29 = (char *)v26 - 1;
    while (v23 && v27)
    {
      int v30 = *(unsigned __int8 *)(v28 + v23);
      int v31 = v29[v27];
      --v23;
      --v27;
      if (v30 != v31) {
        goto LABEL_41;
      }
    }
    if (!v27) {
      goto LABEL_42;
    }
LABEL_41:
    int v5 = 0;
    int v4 = 1;
  }
LABEL_43:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v5 | (v4 << 8);
}

void sub_1010663E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_102482B18);
  _Unwind_Resume(a1);
}

void *sub_101066430()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102475C50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102475C50))
  {
    sub_100134750(qword_102475C38, ".ignore");
    __cxa_atexit((void (*)(void *))&std::string::~string, qword_102475C38, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102475C50);
  }
  return qword_102475C38;
}

void sub_1010664BC(_Unwind_Exception *a1)
{
}

void sub_1010664D4(id a1)
{
  sub_10053B99C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign((std::string *)&qword_102482B20, [[+[NSString stringWithUTF8String:p_p] stringByAppendingPathComponent:@"adsf"] UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_101066558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101066574(id a1)
{
}

void sub_101066588(id a1)
{
  sub_10053B99C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign((std::string *)&qword_102482B70, [[+[NSString stringWithUTF8String:p_p] stringByAppendingPathComponent:@"tiles_hrse"] UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10106660C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101066628(id a1)
{
}

void sub_10106663C(id a1)
{
  sub_10053B99C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign((std::string *)&qword_102482BC0, [[+[NSString stringWithUTF8String:p_p] stringByAppendingPathComponent:@"tiles_app_v2"] UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1010666C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010666DC(id a1)
{
}

void sub_1010666F0(id a1)
{
  sub_10053B99C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign((std::string *)&qword_102482C10, [[+[NSString stringWithUTF8String:p_p] stringByAppendingPathComponent:@"tiles_preload_manifest"] UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_101066774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101066790(id a1)
{
}

void sub_1010667A4(id a1)
{
  sub_10053B99C(0, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  std::string::assign((std::string *)&qword_102482C60, [[+[NSString stringWithUTF8String:p_p] stringByAppendingPathComponent:@"tiles_transit_mac"] UTF8String]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_101066828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101066844(id a1)
{
}

void sub_101066858()
{
}

void sub_101066914(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_101066950(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_10230D1C0;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    BOOL v12 = a3;
  }
  else {
    BOOL v12 = (uint64_t *)*a3;
  }
  id v13 = [[[a4 vendor] proxyForService:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_101066A34(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)std::string buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230CFC0);
      }
      uint64_t v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)std::string buf = 136446466;
        char v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10230CFC0);
        }
        BOOL v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          BOOL v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_101066CC4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_101066D78(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_101066DC0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_101066E08(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_101066E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102475C58);
}

BOOL sub_101066E7C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          uint64_t v23 = (uint64_t *)v17;
        }
        else {
          uint64_t v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          uint64_t v28 = (uint64_t *)v24;
        }
        else {
          uint64_t v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)char v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        char v35 = *a4;
        buf[0] = &v40;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, buf) + 32) = v35;
        LOBYTE(buf[0]) = 0;
        *(_OWORD *)((char *)buf + 4) = 0u;
        memset((char *)&buf[2] + 4, 0, 32);
        memset((char *)&buf[6] + 4, 0, 28);
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, _DWORD **))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_101069A94();
        }
        if (SHIBYTE(buf[9]) < 0) {
          operator delete(buf[7]);
        }
        if (SHIBYTE(buf[6]) < 0) {
          operator delete(buf[4]);
        }
        if (SHIBYTE(buf[3]) < 0) {
          operator delete(buf[1]);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)char v41 = a1 + 64;
        char v29 = byte_102475C59;
        int v38 = v16;
        buf[0] = &v38;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, buf) + 80) = v29;
        int v38 = *a3;
        buf[0] = &v38;
        int v30 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, buf);
        int v31 = (std::__shared_weak_count *)v30[9];
        v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        char v32 = *a4;
        int v38 = *a3;
        buf[0] = &v38;
        uint64_t v33 = sub_10044715C((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, buf);
        buf[0] = &v40;
        *((unsigned char *)sub_1000EB1B8(v33 + 5, &v40, (uint64_t)&unk_101D0B290, buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230CFC0);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (_DWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = *(_DWORD **)v15;
    }
    LODWORD(buf[0]) = 136446466;
    *(_DWORD **)((char *)buf + 4) = v15;
    WORD2(buf[1]) = 1026;
    *(_DWORD *)((char *)&buf[1] + 6) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230CFC0);
    }
    uint64_t v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v36 = (void *)*v36;
    }
    *(_DWORD *)char v41 = 136446466;
    *(void *)&v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = v40;
    char v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_10106736C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100C52374((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10106738C(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230CFC0);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230CFC0);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_101067610(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10230CFC0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  uint64_t v28 = __p;
                }
                else {
                  uint64_t v28 = (void **)__p[0];
                }
                *(_DWORD *)std::string buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                char v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10230CFC0);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  int v30 = buf;
                }
                else {
                  int v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                int v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1010679E4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  *(void *)a3 = *(void *)v12;
  std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v12 + 8));
  std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v12 + 32));
  std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v12 + 56));
  return 1;
}

uint64_t sub_101067A94(uint64_t a1, int *a2, uint64_t a3)
{
  sub_101068FC4(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10044715C((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_101067B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101067B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[0] = 0;
  *(_OWORD *)uint64_t v5 = 0u;
  memset(v6, 0, sizeof(v6));
  (*(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if ((v6[59] & 0x80000000) != 0) {
    operator delete(*(void **)&v6[36]);
  }
  if ((v6[35] & 0x80000000) != 0) {
    operator delete(*(void **)&v6[12]);
  }
  if ((v6[11] & 0x80000000) != 0) {
    operator delete(*(void **)((char *)v5 + 4));
  }
}

void sub_101067BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_101067BF8(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230CFC0);
  }
  int v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    BOOL v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    BOOL v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_1000F5BB0((uint64_t)&buf[8], *(void **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_101068FC4(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    uint64_t v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_101068940();
  }
  os_activity_scope_leave(&state);
}

void sub_1010681C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_101068214(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230CFC0);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230CFC0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230CFC0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230CFC0);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10230CFC0);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10230CFC0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1010687C8(uint64_t a1)
{
  sub_101069A24(a1);

  operator delete();
}

id sub_101068800(uint64_t a1, int a2, void *a3)
{
  id result = sub_1010692A8(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_101068850(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101068880(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1010688B0(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1010688E0(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101068910(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101068940()
{
}

void sub_101068A84()
{
  if (*(char *)(v0 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  operator delete();
}

void sub_101068AD8(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      int v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          int v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1010692A8(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              uint64_t v48 = v19;
              sub_101068ECC(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                char v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    char v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  int v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      int v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      char v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              uint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10230CFC0);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)std::string buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10230CFC0);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                unsigned int v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                BOOL v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_101068ECC(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1010692A8(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void *sub_101068FC4@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x68uLL);
  id result = sub_101069020(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10106900C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_101069020(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10230D150;
  sub_101069130((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_10106907C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_101069090(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10230D150;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010690B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10230D150;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_101069104(uint64_t a1)
{
  sub_100C55D44((uint64_t)&v1, a1 + 24);
}

unsigned char *sub_101069130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = *(void *)a3;
  uint64_t v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1000DC48C(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)uint64_t v5 = v6;
  }
  if (*(char *)(a3 + 55) < 0)
  {
    sub_1000DC48C((unsigned char *)(a2 + 32), *(void **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    long long v7 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)(a2 + 32) = v7;
  }
  id result = (unsigned char *)(a2 + 56);
  if (*(char *)(a3 + 79) < 0) {
    return sub_1000DC48C(result, *(void **)(a3 + 56), *(void *)(a3 + 64));
  }
  long long v9 = *(_OWORD *)(a3 + 56);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(_OWORD *)id result = v9;
  return result;
}

void sub_1010691F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101069224(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

id sub_1010692A8(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_101069308(a1);
}

id sub_101069308(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230D190);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D9E00DLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        long long v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLTilesManager_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230D190);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D9E00DLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10230D190);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1010696C8(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1010696F8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1010696F8(a1, *a2);
    sub_1010696F8(a1, a2[1]);
    sub_1003B2350(a2 + 5);
    operator delete(a2);
  }
}

uint64_t *sub_101069754(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  long long v7 = a1 + 1;
  long long v6 = a1[1];
  id v8 = a1 + 1;
  __int16 v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        long long v6 = *v9;
        id v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        id v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unint64_t v12 = (uint64_t *)operator new(0x40uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = (uint64_t)(v12 + 5);
    void v12[6] = (uint64_t)(v12 + 5);
    v12[7] = 0;
    char v15 = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_101069840((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

void sub_101069840(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1003B2350(v2 + 5);
    }
    operator delete(v2);
  }
}

uint64_t sub_101069898(uint64_t *a1, void *a2)
{
  return sub_1010698D4((uint64_t)a1, a1, a2);
}

uint64_t sub_1010698D4(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    char v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    *char v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t sub_10106991C(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_1000DA5D8(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  BOOL v16 = &v10[24 * v9];
  sub_100134750(v14, a2);
  char v15 = v14 + 24;
  sub_1001D7FEC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1001D8184((uint64_t)&v13);
  return v11;
}

void sub_101069A10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001D8184((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101069A24(uint64_t a1)
{
  *(void *)a1 = &off_10230D1C0;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_101069A94()
{
}

void sub_101069BD8()
{
  if (*(char *)(v0 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  operator delete();
}

uint64_t sub_101069C2C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_101069CC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_101069D44()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_101069DD4(_Unwind_Exception *a1)
{
}

uint64_t sub_101069DEC()
{
  sub_100134750(qword_102482AA0, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482AA0, (void *)&_mh_execute_header);
}

uint64_t sub_101069E4C(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 8) + *(_DWORD *)(a1 + 4));
}

uint64_t *sub_101069E58()
{
  return &qword_10248B188;
}

int *sub_101069E64()
{
  return &dword_10248B198;
}

char *sub_101069E70()
{
  return &byte_102475C60;
}

uint64_t sub_101069E7C(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_101D9E040;
  *(_OWORD *)(a1 + 16) = xmmword_101D9E050;
  *(_OWORD *)(a1 + 32) = xmmword_101D9E060;
  *(_OWORD *)(a1 + 48) = xmmword_101D9E070;
  *(_OWORD *)(a1 + 64) = xmmword_101D9E080;
  *(_OWORD *)(a1 + 80) = xmmword_101D9E090;
  *(_OWORD *)(a1 + 96) = xmmword_101D9E0A0;
  *(void *)&v3[0] = 0;
  sub_100D4CDC8(a1 + 112, (unint64_t *)v3, 1);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 1065353216;
  v3[0] = xmmword_101D9E0B0;
  v3[1] = unk_101D9E0C0;
  sub_100D4CDC8(a1 + 192, (unint64_t *)v3, 4);
  *(_WORD *)(a1 + 232) = 257;
  return a1;
}

void sub_101069F7C(_Unwind_Exception *a1)
{
  sub_1000D7D80(v2);
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

int *sub_101069FA0()
{
  return &dword_10248B1A8;
}

char *sub_101069FAC()
{
  return &byte_102475C64;
}

void *sub_101069FB8(void *a1, uint64_t a2, void *aBlock)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  if (aBlock) {
    a1[1] = _Block_copy(aBlock);
  }
  return a1;
}

void sub_101069FFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v3) {
    sub_101A62790(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10106A01C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_10106A084(uint64_t a1, uint64_t a2)
{
  sub_1000E9354(v42);
  int v41 = 0;
  if (sub_100012960(a2, "Altimeter", v42))
  {
    if (sub_1004D0870((uint64_t)v42, "MaxNumSubmissionsFloorTransition", &v41)) {
      LODWORD(qword_10248B188) = v41;
    }
    if (sub_1004D0870((uint64_t)v42, "MaxNumSubmissionsUnknown", &v41)) {
      HIDWORD(qword_10248B188) = v41;
    }
    if (sub_1004D0870((uint64_t)v42, "MaxNumSubmissionsWork", &v41)) {
      dword_10248B190 = v41;
    }
    buf[0] = 0;
    if (sub_1000D2988((uint64_t)v42, "AllowALSRequests", (BOOL *)buf)) {
      byte_10248B194 = buf[0];
    }
  }
  if (sub_100012960(a2, "Ionosphere", v42))
  {
    if (sub_1004D0870((uint64_t)v42, "MaxPointsCollectedPerSubArchive", &v41)) {
      dword_10248B198 = v41;
    }
    *(void *)std::string buf = 0;
    if (sub_1000A699C((uint64_t)v42, "IonosphereCollectionIntervalSec", buf)) {
      qword_10248B1A0 = *(void *)buf;
    }
  }
  if (sub_100012960(a2, "Realtime", v42))
  {
    buf[0] = byte_102475C60;
    if (sub_1000D2988((uint64_t)v42, "AllowProactiveLocationsHarvest", (BOOL *)buf)) {
      byte_102475C60 = buf[0];
    }
    LOBYTE(v38) = 0;
    if (sub_1000D2988((uint64_t)v42, "AllowCyclingHarvest", (BOOL *)&v38)) {
      byte_102475C61 = (char)v38;
    }
    if (sub_1000D2988((uint64_t)v42, "AllowRunningHarvest", (BOOL *)&v38)) {
      byte_102475C62 = (char)v38;
    }
    if (sub_1000D2988((uint64_t)v42, "AllowWalkingHarvest", (BOOL *)&v38)) {
      byte_102475C63 = (char)v38;
    }
  }
  if (sub_100012960(a2, "Trace", v42))
  {
    if (sub_1004D0870((uint64_t)v42, "MaxNumSubmissionsScored", &v41)) {
      dword_10248B1A8 = v41;
    }
    if (sub_1004D0870((uint64_t)v42, "MaxSubmissionsVision", &v41)) {
      dword_10248B1AC = v41;
    }
    if (sub_1004D0870((uint64_t)v42, "MaxTracesSavedToDisk", &v41)) {
      dword_10248B1B4 = v41;
    }
    if (sub_1004D0870((uint64_t)v42, "TracesToCapturePerScoredTrace", &v41)) {
      dword_10248B1B0 = v41;
    }
    *(void *)std::string buf = 0;
    if (sub_1000A699C((uint64_t)v42, "ScoringMinDeltaTimestamp", buf)) {
      qword_10248B1B8 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "ScoringIntervalDuration", buf)) {
      qword_10248B1C0 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "ScoringMinIntervalDuration", buf)) {
      qword_10248B1C8 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "ScoringMinWifiScanFrequency", buf)) {
      qword_10248B1D0 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "ScoringMinInertialOdometryValidFrequency", buf)) {
      qword_10248B1E8 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "ScoringInertialOdometryMinWalkingSpeed", buf)) {
      qword_10248B1F0 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "ScoringLoiMultiplier", buf)) {
      qword_10248B1D8 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "ScoringWalkingMultiplier", buf)) {
      qword_10248B1E0 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "VisionSecondsBetweenVIOCapture", buf)) {
      qword_10248B1F8 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "VisionSecondsBetweenVLDebugInfo", buf)) {
      qword_10248B200 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "VisionScoringMaxSecondsBetweenVIOCapture", buf)) {
      qword_10248B208 = *(void *)buf;
    }
    if (sub_1000A699C((uint64_t)v42, "VisionScoringVLMultiplier", buf)) {
      qword_10248B210 = *(void *)buf;
    }
    char v40 = 0;
    if (sub_1000D2988((uint64_t)v42, "AllowInertialOdometryNotifications", (BOOL *)&v40)) {
      byte_10248B290 = v40;
    }
    char v39 = 0;
    if (sub_1000D2988((uint64_t)v42, "AllowOutdoorServiceNotifications", (BOOL *)&v39)) {
      byte_10248B291 = v39;
    }
    BOOL v38 = 0;
    if (sub_1004D1D1C((uint64_t)v42, (const __CFString *)"VisionBlockingLoiTypes", (CFTypeRef *)&v38))
    {
      sub_1000E2F40(qword_10248B218);
      unint64_t v4 = v38;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v5 = [v38 countByEnumeratingWithState:&v34 objects:v46 count:16];
      if (v5)
      {
        uint64_t v6 = *(void *)v35;
        do
        {
          for (unsigned int i = 0; i != v5; unsigned int i = (char *)i + 1)
          {
            if (*(void *)v35 != v6) {
              objc_enumerationMutation(v4);
            }
            unint64_t v8 = *(void **)(*((void *)&v34 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v33 = [v8 integerValue];
              sub_10089DA1C((uint64_t)qword_10248B218, (unint64_t *)&v33, &v33);
            }
          }
          id v5 = [v4 countByEnumeratingWithState:&v34 objects:v46 count:16];
        }
        while (v5);
      }
    }
    id v33 = 0;
    if (sub_1004D1D1C((uint64_t)v42, (const __CFString *)"NonVisionBlockingLoiTypes", (CFTypeRef *)&v33))
    {
      sub_1000E2F40(qword_10248B240);
      unint64_t v9 = v33;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      id v10 = [v33 countByEnumeratingWithState:&v29 objects:v45 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v30;
        do
        {
          for (unsigned int j = 0; j != v10; unsigned int j = (char *)j + 1)
          {
            if (*(void *)v30 != v11) {
              objc_enumerationMutation(v9);
            }
            uint64_t v13 = *(void **)(*((void *)&v29 + 1) + 8 * (void)j);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v28 = [v13 integerValue];
              sub_10089DA1C((uint64_t)qword_10248B240, (unint64_t *)&v28, &v28);
            }
          }
          id v10 = [v9 countByEnumeratingWithState:&v29 objects:v45 count:16];
        }
        while (v10);
      }
    }
    id v28 = 0;
    if (sub_1004D1D1C((uint64_t)v42, (const __CFString *)"TriggeringLoiTypes", (CFTypeRef *)&v28))
    {
      sub_1000E2F40(qword_10248B268);
      uint64_t v14 = v28;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      id v15 = [v28 countByEnumeratingWithState:&v24 objects:v44 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v25;
        do
        {
          for (k = 0; k != v15; k = (char *)k + 1)
          {
            if (*(void *)v25 != v16) {
              objc_enumerationMutation(v14);
            }
            int v18 = *(void **)(*((void *)&v24 + 1) + 8 * (void)k);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v23 = [v18 integerValue];
              sub_10089DA1C((uint64_t)qword_10248B268, (unint64_t *)&v23, &v23);
            }
          }
          id v15 = [v14 countByEnumeratingWithState:&v24 objects:v44 count:16];
        }
        while (v15);
      }
    }
  }
  if (sub_100012960(a2, "Tracks", v42))
  {
    buf[0] = byte_102475C64;
    if (sub_1000D2988((uint64_t)v42, "AllowProactiveLocationsHarvest", (BOOL *)buf)) {
      byte_102475C64 = buf[0];
    }
    LOBYTE(v38) = 0;
    if (sub_1000D2988((uint64_t)v42, "AllowCyclingHarvest", (BOOL *)&v38)) {
      byte_102475C65 = (char)v38;
    }
    if (sub_1000D2988((uint64_t)v42, "AllowRunningHarvest", (BOOL *)&v38)) {
      byte_102475C66 = (char)v38;
    }
    if (sub_1000D2988((uint64_t)v42, "AllowWalkingHarvest", (BOOL *)&v38)) {
      byte_102475C67 = (char)v38;
    }
  }
  uint64_t v19 = *(void *)(a1 + 8);
  if (v19)
  {
    (*(void (**)(void))(v19 + 16))();
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10230D1D8);
    }
    int v20 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "PostMobileAssetsUpdateCallback unavailable; skip",
        buf,
        2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10230D1D8);
      }
      LOWORD(v38) = 0;
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHarvestSettings::updateSettings(const CLNameValuePair &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  return sub_10013F3C4(v42);
}

void sub_10106AAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

uint64_t sub_10106AB50(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    uint64_t v5 = result;
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10230D1D8);
    }
    uint64_t v6 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138477827;
      uint64_t v9 = sub_1000E9358(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Mobile Asset Harvest notification data: %{private}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10230D1D8);
      }
      sub_1000E9358(a4);
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHarvestSettings::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return sub_10106A084(v5, a4);
  }
  return result;
}

id sub_10106AD2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    sub_1014CC69C();
  }
  return [*(id *)(v1 + 16) register:*(void *)(v1 + 8) forNotification:4 registrationInfo:0];
}

void sub_10106ADF8(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230D1F8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestSettings::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230D1F8);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestSettings::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10106AB50((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10106AFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10106AFD4(void *result)
{
  uint64_t v1 = result[2];
  if (v1)
  {
    uint64_t v2 = result;
    [*(id *)(v1 + 16) unregister:*(void *)(v1 + 8) forNotification:4];
    id result = (void *)v2[2];
    v2[2] = 0;
    if (result)
    {
      uint64_t v3 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v3();
    }
  }
  return result;
}

void sub_10106B050(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_10106B080(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10106B0B0()
{
  qword_10248B188 = 0x200000002;
  dword_10248B190 = 2;
  byte_10248B194 = 1;
  dword_10248B198 = 10;
  qword_10248B1A0 = 0x4082C00000000000;
  sub_101069E7C((uint64_t)&dword_10248B1A8);

  return __cxa_atexit((void (*)(void *))sub_1006BB8D4, &dword_10248B1A8, (void *)&_mh_execute_header);
}

uint64_t sub_10106B144(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a3 + 48) + 48))(*(void *)(a3 + 48));
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void, unsigned char *, double))(**(void **)(a3 + 48) + 24))(*(void *)(a3 + 48), v6, a1);
    if (v6[208])
    {
      sub_100528B3C(*(void *)(a3 + 16), *(double *)(*(void *)(a3 + 16) + 104), *(double *)(*(void *)(a3 + 16) + 112));
      sub_100B5C070(*(void *)(a3 + 24), *(double *)(*(void *)(a3 + 24) + 104), *(double *)(*(void *)(a3 + 24) + 112));
      sub_10046B90C(*(void *)(a3 + 8), *(double *)(*(void *)(a3 + 8) + 104), *(double *)(*(void *)(a3 + 8) + 112));
      return sub_100B4A608(*(void *)(a3 + 64), *(double *)(*(void *)(a3 + 64) + 104), *(double *)(*(void *)(a3 + 64) + 112));
    }
  }
  return result;
}

uint64_t sub_10106B238(double a1, uint64_t a2, void **a3)
{
  (*(void (**)(void *, unsigned char *))(*a3[6] + 24))(a3[6], v7);
  int v5 = v7[208];
  uint64_t result = (*(uint64_t (**)(void *, double))(*a3[1] + 48))(a3[1], a1);
  if (v5)
  {
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(void *, double))(*a3[2] + 48))(a3[2], a1);
      if (result)
      {
        uint64_t result = (*(uint64_t (**)(void *, double))(*a3[3] + 48))(a3[3], a1);
        if (result) {
          return (*(uint64_t (**)(void *, double))(*a3[8] + 48))(a3[8], a1);
        }
      }
    }
  }
  else if (result)
  {
    return (*(uint64_t (**)(void *, double))(*a3[2] + 48))(a3[2], a1);
  }
  return result;
}

float sub_10106B3C4(uint64_t a1, float a2)
{
  float v3 = *(float *)(a1 + 1364);
  float v4 = *(float *)(a1 + 1368);
  double v5 = a2;
  double v6 = *(float *)(a1 + 1384);
  double v7 = *(float *)(a1 + 1380);
  float v8 = (v7 - a2) / (v7 - v6);
  float v9 = sub_101141BD8(v8, *(float *)(a1 + 1372));
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230D268);
  }
  float v10 = v4 * v9;
  char v11 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v12 = *(double *)(a1 + 120);
    double v13 = *(double *)(a1 + 128);
    *(_DWORD *)std::string buf = 134220032;
    double v17 = v12;
    __int16 v18 = 2048;
    double v19 = v13;
    __int16 v20 = 2048;
    double v21 = v5;
    __int16 v22 = 2048;
    double v23 = v7;
    __int16 v24 = 2048;
    double v25 = v6;
    __int16 v26 = 2048;
    double v27 = v4;
    __int16 v28 = 2048;
    double v29 = v13 - v12;
    __int16 v30 = 2048;
    double v31 = v3;
    __int16 v32 = 2048;
    double v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Cycle, CR DT Regression, %f, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f", buf, 0x5Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230D268);
    }
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static float CLNatalieCycleModel::computeHRMets(float, const CLNatalieModelInput &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  return v10;
}

void sub_10106B67C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float v6 = *(float *)(a2 + 1364);
  uint64_t v61 = *(void *)(a2 + 624);
  uint64_t v7 = *(void *)(a2 + 640);
  double v8 = *(double *)(a2 + 816);
  int v9 = *(_DWORD *)(a2 + 832);
  float v10 = *(double *)(a2 + 648);
  float v11 = *(double *)(a2 + 840);
  unsigned int v12 = *(_DWORD *)(a2 + 400);
  p_cache = CLAvengerScannerClientController.cache;
  if (v10 <= 25.0)
  {
    float v16 = *(double *)(a2 + 648);
  }
  else
  {
    double v14 = *(double *)(a2 + 616);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230D268);
    }
    id v15 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218496;
      double v65 = v14;
      __int16 v66 = 2048;
      double v67 = v10;
      __int16 v68 = 2048;
      *(void *)uint64_t v69 = 0x4039000000000000;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Cycle, GPS speed at time, %f, %f is too high,  set to maximum default, %f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230D268);
      }
      uint64_t v58 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v58);
      if (v58 != (char *)buf) {
        free(v58);
      }
      p_cache = (void **)(CLAvengerScannerClientController + 16);
    }
    float v16 = 25.0;
  }
  if (v11 > 5.0)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230D268);
    }
    double v17 = p_cache[511];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 134218496;
      double v65 = v8;
      __int16 v66 = 2048;
      double v67 = v11;
      __int16 v68 = 2048;
      *(void *)uint64_t v69 = 0x4014000000000000;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Cycle, Uphill vertical speed at time, %f, %f is too high, set to maximum default %f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230D268);
      }
      uint64_t v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v59);
      if (v59 != (char *)buf) {
        free(v59);
      }
      p_cache = (void **)(CLAvengerScannerClientController + 16);
    }
    float v11 = 5.0;
  }
  float v18 = 0.0;
  float v19 = 0.0;
  if (sub_1001860C8(a2))
  {
    float v20 = *(double *)(a2 + 560);
    float v19 = sub_10106B3C4(a2, v20);
  }
  if (*(double *)(a2 + 616) > 0.0)
  {
    float v21 = 0.0;
    if (v11 >= 0.0) {
      float v22 = v11;
    }
    else {
      float v22 = 0.0;
    }
    if (v22 > 5.0) {
      float v22 = 5.0;
    }
    if (v16 >= 0.0) {
      float v21 = v16;
    }
    if (v21 > 25.0) {
      float v21 = 25.0;
    }
    sub_10106C668(v21, v22, *(float *)(a2 + 1364));
    float v18 = v23;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230D268);
    }
    __int16 v24 = p_cache[511];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      double v25 = *(double *)(a2 + 120);
      uint64_t v26 = *(void *)(a2 + 128);
      *(_DWORD *)std::string buf = 134218496;
      double v65 = v18;
      __int16 v66 = 2048;
      double v67 = v25;
      __int16 v68 = 2048;
      *(void *)uint64_t v69 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Cycle, metsWR,%f,startTime,%f,endTime,%f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230D268);
      }
      uint64_t v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v60);
      if (v60 != (char *)buf) {
        free(v60);
      }
      p_cache = (void **)(CLAvengerScannerClientController + 16);
    }
  }
  float v27 = 4.4021;
  if (CLMotionActivity::isTypeStatic()) {
    float v28 = 1.3;
  }
  else {
    float v28 = 4.4021;
  }
  *(float *)a3 = v19;
  *(float *)(a3 + 4) = v18;
  *(_DWORD *)(a3 + 8) = 0;
  *(float *)(a3 + 12) = v18;
  *(void *)(a3 + 16) = 0x408CDDEA00000000;
  *(_DWORD *)(a3 + 24) = 3;
  float v63 = v28;
  *(float *)(a3 + 28) = v28;
  *(void *)(a3 + 32) = 0x200000003;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230D268);
  }
  double v29 = p_cache[511];
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    double v30 = *(double *)(a2 + 120);
    double v31 = *(double *)(a2 + 128);
    *(_DWORD *)std::string buf = 134219776;
    double v65 = v30;
    __int16 v66 = 2048;
    double v67 = v31;
    __int16 v68 = 1024;
    *(_DWORD *)uint64_t v69 = v9;
    *(_WORD *)&v69[4] = 2048;
    *(double *)&v69[6] = v16;
    *(_WORD *)&v69[14] = 2048;
    *(double *)&v69[16] = v11;
    *(_WORD *)&unsigned char v69[24] = 2048;
    *(double *)&v69[26] = v31 - v30;
    *(_WORD *)&v69[34] = 2048;
    double v70 = v6;
    *(_WORD *)uint64_t v71 = 2048;
    *(double *)&v71[2] = v18;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "Cycle, WR Linear Regression, %f, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, WR METS, %f", buf, 0x4Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230D268);
    }
    uint64_t v55 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v55);
    if (v55 != (char *)buf) {
      free(v55);
    }
    p_cache = (void **)(CLAvengerScannerClientController + 16);
  }
  BOOL v62 = sub_100F73A58((double *)(a1 + 8), a2);
  unsigned int v32 = sub_1001860C8(a2);
  if (*(double *)(a2 + 600) < *(double *)a2) {
    unsigned int v33 = v32;
  }
  else {
    unsigned int v33 = 0;
  }
  uint64_t v34 = (8 * (v12 > 2)) | (4 * (*(double *)(a2 + 616) > 0.0)) | (2 * (*(_DWORD *)(a2 + 832) != 0)) | v33;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230D268);
  }
  long long v35 = p_cache[511];
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    int v36 = v9;
    unsigned int v37 = v12;
    double v38 = *(double *)(a2 + 120);
    double v39 = *(double *)(a2 + 128);
    int v40 = sub_1001860C8(a2);
    BOOL v41 = *(double *)(a2 + 616) > 0.0;
    uint64_t v42 = *(void *)(a2 + 600);
    *(_DWORD *)std::string buf = 134220288;
    double v65 = v38;
    __int16 v66 = 2048;
    double v67 = v39;
    unsigned int v12 = v37;
    int v9 = v36;
    __int16 v68 = 1024;
    *(_DWORD *)uint64_t v69 = v34;
    *(_WORD *)&v69[4] = 1024;
    *(_DWORD *)&v69[6] = v36;
    *(_WORD *)&v69[10] = 2048;
    *(double *)&unsigned char v69[12] = v16;
    float v27 = 4.4021;
    *(_WORD *)&v69[20] = 2048;
    *(double *)&v69[22] = v11;
    *(_WORD *)&v69[30] = 1024;
    *(_DWORD *)&v69[32] = v40;
    LOWORD(v70) = 1024;
    *(_DWORD *)((char *)&v70 + 2) = v33;
    HIWORD(v70) = 1024;
    *(_DWORD *)uint64_t v71 = v41;
    *(_WORD *)&v71[4] = 2048;
    *(void *)&v71[6] = v42;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Cycle, Model switcher input availability, StartTime, %f, EndTime, %f, ModelSwitcherInputCase, %d, gradeType, %d, hspeed, %f, vspeed, %f, isCatherineAvailable, %d, isCatherineReliable, %d, isGpsAvailable, %d, HRstaleness, %f", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230D268);
    }
    sub_1001860C8(a2);
    __int16 v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v56);
    if (v56 != (char *)buf) {
      free(v56);
    }
  }
  int v43 = 3;
  switch(v34)
  {
    case 1:
    case 3:
    case 5:
    case 9:
    case 11:
    case 13:
      int v43 = 1;
      float v27 = v19;
      goto LABEL_51;
    case 4:
    case 12:
      goto LABEL_53;
    case 6:
    case 14:
      if ((v9 - 1) < 2)
      {
LABEL_53:
        int v43 = 0;
        float v27 = v18;
        float v63 = v18;
      }
      break;
    case 7:
    case 15:
      if (v62 && v19 <= v18 && v18 <= 30.0)
      {
        float v27 = v19 + v18 * 0.0;
        int v43 = 1;
LABEL_51:
        float v63 = v19;
      }
      else
      {
        int v43 = (v9 - 3) < 0xFFFFFFFE;
        if ((v9 - 3) >= 0xFFFFFFFE) {
          float v27 = v18;
        }
        else {
          float v27 = v19;
        }
        float v63 = v27;
      }
      break;
    default:
      break;
  }
  float v44 = v27;
  *(float *)(a3 + 20) = v27;
  *(_DWORD *)(a3 + 24) = v43;
  *(float *)(a3 + 28) = v63;
  *(_DWORD *)(a3 + 32) = v43;
  double v45 = *(double *)(a2 + 1040);
  float v46 = 0.0;
  if (v45 > 0.0
    && *(unsigned char *)(a2 + 352)
    && vabdd_f64(*(double *)(a2 + 1160), v45) < 10.0
    && (double v47 = *(double *)(a2 + 1152), v47 > 0.0))
  {
    double v48 = sub_1013EF984(v47, *(float *)(a2 + 1364));
    float v46 = v48;
    *(float *)(a3 + 8) = v46;
    int v49 = v43;
    if (v44 < v46)
    {
      *(float *)(a3 + 20) = v46;
      int v49 = 4;
      *(_DWORD *)(a3 + 24) = 4;
      float v44 = v48;
    }
    if (v63 < v46)
    {
      *(float *)(a3 + 28) = v46;
      int v43 = 4;
      *(_DWORD *)(a3 + 32) = 4;
      float v63 = v48;
    }
  }
  else
  {
    int v49 = v43;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230D268);
  }
  int v50 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    double v51 = *(double *)(a2 + 120);
    double v52 = *(double *)(a2 + 128);
    uint64_t v53 = *(void *)(a2 + 600);
    float v54 = *(double *)(a2 + 560);
    *(_DWORD *)std::string buf = 134223104;
    double v65 = v51;
    __int16 v66 = 2048;
    double v67 = v52;
    __int16 v68 = 2048;
    *(double *)uint64_t v69 = v19;
    *(_WORD *)&v69[8] = 2048;
    *(double *)&v69[10] = v18;
    *(_WORD *)&v69[18] = 2048;
    *(double *)&v69[20] = v44;
    *(_WORD *)&v69[28] = 1024;
    *(_DWORD *)&v69[30] = v9;
    *(_WORD *)&v69[34] = 2048;
    double v70 = v16;
    *(_WORD *)uint64_t v71 = 2048;
    *(double *)&v71[2] = v11;
    *(_WORD *)&unsigned char v71[10] = 2048;
    *(double *)&v71[12] = v52 - v51;
    __int16 v72 = 2048;
    double v73 = v6;
    __int16 v74 = 1024;
    unsigned int v75 = v12;
    __int16 v76 = 1024;
    int v77 = v34;
    __int16 v78 = 2048;
    uint64_t v79 = v61;
    __int16 v80 = 2048;
    uint64_t v81 = v7;
    __int16 v82 = 2048;
    uint64_t v83 = v53;
    __int16 v84 = 2048;
    double v85 = v54;
    __int16 v86 = 1024;
    int v87 = v49;
    __int16 v88 = 2048;
    double v89 = v63;
    __int16 v90 = 1024;
    int v91 = v43;
    __int16 v92 = 1024;
    BOOL v93 = v62;
    __int16 v94 = 2048;
    double v95 = v46;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "Cycle, Fused, %f, %f, HR METS, %f, WR METS, %f, Fused User METS, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, Steps, %d, ModelSwitcherInputCase, %d, distance, %f, altitude, %f, HRstaleness, %f, HR, %f, userMetSource, %d, Fused Truth METs, %f, truthMetSource, %d, isAssistedCycling, %d, FM METS, %f", buf, 0xBCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230D268);
    }
    int v57 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v57);
    if (v57 != (char *)buf) {
      free(v57);
    }
  }
}

void sub_10106C638(float a1, float a2, float a3)
{
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  if (a2 > 5.0) {
    a2 = 5.0;
  }
  if (a1 < 0.0) {
    a1 = 0.0;
  }
  if (a1 > 25.0) {
    a1 = 25.0;
  }
  sub_10106C668(a1, a2, a3);
}

void sub_10106C668(float a1, float a2, float a3)
{
  if (a3 > 0.0)
  {
    double v5 = pow(a1, 3.0) * 0.167999998 / a3;
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230D268);
    }
    float v6 = a1 * 0.194;
    float v7 = a2 * 7.884;
    float v8 = v5;
    int v9 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218496;
      double v12 = v6;
      __int16 v13 = 2048;
      double v14 = v7;
      __int16 v15 = 2048;
      double v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Cycle, RollingResistance,%f,gravity,%f,wind,%f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230D268);
      }
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static float CLNatalieCycleModel::computeWRMETS(const float, const float, const float)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

void sub_10106C8C8()
{
}

void sub_10106C8DC(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void *sub_10106C90C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10065AA18((uint64_t)v12, a3);
  sub_10065AB34((uint64_t)v11, a4);
  sub_10065AC50((uint64_t)v10, a5);
  sub_100DD5888((uint64_t)a1, a2, @"Nearby", 0, 1, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10);
  sub_10065ACE8(v10);
  sub_10065ABCC(v11);
  sub_10065AAB0(v12);
  *a1 = &off_10230D298;
  return a1;
}

void sub_10106C9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  sub_10065ACE8((uint64_t *)va);
  sub_10065ABCC((uint64_t *)va1);
  sub_10065AAB0((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void sub_10106CA3C(uint64_t a1)
{
  sub_100DD5960(a1);

  operator delete();
}

id sub_10106CA74(uint64_t a1)
{
  if (*(void *)(a1 + 128))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    uint64_t v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 16) UTF8String];
      int v4 = sub_1007E72D8(*(void **)(a1 + 128));
      int v5 = sub_1007E7290(*(void **)(a1 + 128));
      *(_DWORD *)std::string buf = 136446722;
      id v26 = v3;
      __int16 v27 = 1026;
      LODWORD(v28[0]) = v4;
      WORD2(v28[0]) = 1026;
      *(_DWORD *)((char *)v28 + 6) = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsToDict,reading contents of asset for sending to nearbyd,compatibilityVersion,%{public}d,contentVersion,%{public}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      id v12 = [*(id *)(a1 + 16) UTF8String];
      int v13 = sub_1007E72D8(*(void **)(a1 + 128));
      int v14 = sub_1007E7290(*(void **)(a1 + 128));
      int v21 = 136446722;
      id v22 = v12;
      __int16 v23 = 1026;
      LODWORD(v24[0]) = v13;
      WORD2(v24[0]) = 1026;
      *(_DWORD *)((char *)v24 + 6) = v14;
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsToDict()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    sub_1000E9354(v20);
    sub_100DD6DC0(a1, @"settings.plist", (uint64_t)v20);
    [v6 setValue:sub_1000E9358((uint64_t)v20) forKey:@"SettingsKey"];
    [v6 setValue:sub_10106CFFC(a1) forKey:@"PrGlobalTileKey"];
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    uint64_t v7 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446467;
      id v26 = v8;
      __int16 v27 = 2113;
      v28[0] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsToDict,returning dict,%{private}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      id v16 = [*(id *)(a1 + 16) UTF8String];
      int v21 = 136446467;
      id v22 = v16;
      __int16 v23 = 2113;
      v24[0] = v6;
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsToDict()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    sub_10013F3C4(v20);
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    int v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446210;
      id v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,copySettingsToDict,no asset present", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      id v18 = [*(id *)(a1 + 16) UTF8String];
      int v21 = 136446210;
      id v22 = v18;
      float v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsToDict()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    return 0;
  }
  return v6;
}

void sub_10106CFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

NSData *sub_10106CFFC(uint64_t a1)
{
  uint64_t v2 = +[NSURL URLWithString:relativeToURL:](NSURL, "URLWithString:relativeToURL:", @"prGlobalTile.gz", [*(id *)(a1 + 128) getLocalFileUrl]);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10230D338);
  }
  id v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)std::string buf = 136446467;
    id v24 = v4;
    __int16 v25 = 2081;
    id v26 = [(NSString *)[(NSURL *)v2 absoluteString] UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,reading PrGlobalTile from %{private}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    id v12 = [*(id *)(a1 + 16) UTF8String];
    int v19 = 136446467;
    id v20 = v12;
    __int16 v21 = 2081;
    id v22 = [(NSString *)[(NSURL *)v2 absoluteString] UTF8String];
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getPrGlobalTileFileContents()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  id v18 = 0;
  int v5 = +[NSData dataWithContentsOfURL:v2 options:2 error:&v18];
  if (v18)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    id v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446466;
      id v24 = v7;
      __int16 v25 = 2112;
      id v26 = v18;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,error reading PrGlobalTile,error,%@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      id v14 = [*(id *)(a1 + 16) UTF8String];
      int v19 = 136446466;
      id v20 = v14;
      __int16 v21 = 2112;
      id v22 = v18;
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getPrGlobalTileFileContents()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    return 0;
  }
  else
  {
    id v8 = v5;
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    int v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446210;
      id v24 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,PrGlobalTile read successfully", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      id v16 = [*(id *)(a1 + 16) UTF8String];
      int v19 = 136446210;
      id v20 = v16;
      double v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getPrGlobalTileFileContents()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  return v8;
}

id sub_10106D51C(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 128))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    id v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(a1 + 16) UTF8String];
      int v6 = sub_1007E72D8(*(void **)(a1 + 128));
      int v7 = sub_1007E7290(*(void **)(a1 + 128));
      *(_DWORD *)std::string buf = 136446722;
      id v18 = v5;
      __int16 v19 = 1026;
      LODWORD(v20[0]) = v6;
      WORD2(v20[0]) = 1026;
      *(_DWORD *)((char *)v20 + 6) = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsOfAccessoryFileToDict,reading contents of asset for sending to nearbyd,compatibilityVersion,%{public}d,contentVersion,%{public}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      [*(id *)(a1 + 16) UTF8String];
      sub_1007E72D8(*(void **)(a1 + 128));
      sub_1007E7290(*(void **)(a1 + 128));
      __int16 v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsOfAccessoryFileToDict(NSString *)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    id v8 = objc_alloc_init((Class)NSMutableDictionary);
    [v8 setValue:sub_10106DA3C(a1, a2) forKey:a2];
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    int v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446467;
      id v18 = v10;
      __int16 v19 = 2113;
      v20[0] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,copySettingsOfAccessoryFileToDict,returning dict,%{private}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      [*(id *)(a1 + 16) UTF8String];
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsOfAccessoryFileToDict(NSString *)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    id v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(a1 + 16) UTF8String];
      *(_DWORD *)std::string buf = 136446210;
      id v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning #CLConfig,%{public}s,copySettingsOfAccessoryFileToDict,no asset present", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      [*(id *)(a1 + 16) UTF8String];
      id v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSDictionary *CLNearbyConfigAsset::copySettingsOfAccessoryFileToDict(NSString *)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    return 0;
  }
  return v8;
}

NSData *sub_10106DA3C(uint64_t a1, void *a2)
{
  id v4 = +[NSURL URLWithString:relativeToURL:](NSURL, "URLWithString:relativeToURL:", a2, [*(id *)(a1 + 128) getLocalFileUrl]);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10230D338);
  }
  id v5 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)std::string buf = 136446467;
    id v32 = v6;
    __int16 v33 = 2081;
    uint64_t v34 = [(NSString *)[(NSURL *)v4 absoluteString] UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,reading contents from %{private}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    id v16 = [*(id *)(a1 + 16) UTF8String];
    int v25 = 136446467;
    id v26 = v16;
    __int16 v27 = 2081;
    float v28 = [(NSString *)[(NSURL *)v4 absoluteString] UTF8String];
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getAccessoryFileContents(NSString *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  uint64_t v24 = 0;
  int v7 = +[NSData dataWithContentsOfURL:v4 options:2 error:&v24];
  if (v24)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    id v8 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [*(id *)(a1 + 16) UTF8String];
      id v10 = [(NSString *)[(NSURL *)v4 absoluteString] UTF8String];
      *(_DWORD *)std::string buf = 136446723;
      id v32 = v9;
      __int16 v33 = 2081;
      uint64_t v34 = v10;
      __int16 v35 = 2112;
      uint64_t v36 = v24;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,error reading %{private}s,error,%@", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      id v18 = [*(id *)(a1 + 16) UTF8String];
      __int16 v19 = [(NSString *)[(NSURL *)v4 absoluteString] UTF8String];
      int v25 = 136446723;
      id v26 = v18;
      __int16 v27 = 2081;
      float v28 = v19;
      __int16 v29 = 2112;
      uint64_t v30 = v24;
      id v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getAccessoryFileContents(NSString *)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    return 0;
  }
  else
  {
    uint64_t v11 = v7;
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230D338);
    }
    id v12 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [*(id *)(a1 + 16) UTF8String];
      id v14 = (const char *)[a2 UTF8String];
      *(_DWORD *)std::string buf = 136446467;
      id v32 = v13;
      __int16 v33 = 2081;
      uint64_t v34 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,%{private}s read successfully", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_10230D338);
      }
      id v21 = [*(id *)(a1 + 16) UTF8String];
      id v22 = (const char *)[a2 UTF8String];
      int v25 = 136446467;
      id v26 = v21;
      __int16 v27 = 2081;
      float v28 = v22;
      __int16 v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSData *CLNearbyConfigAsset::getAccessoryFileContents(NSString *)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
  return v11;
}

void sub_10106DFC4(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_10106DFF4(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6, int a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  *(void *)uint64_t result = a2;
  *(double *)(result + 8) = a8;
  *(double *)(result + 16) = a9;
  *(double *)(result + 24) = a10;
  *(double *)(result + 32) = a11;
  *(double *)(result + 40) = a12;
  *(_DWORD *)(result + 48) = a3;
  *(_DWORD *)(result + 52) = a4;
  *(_DWORD *)(result + 56) = a5;
  *(double *)(result + 64) = a13;
  *(_DWORD *)(result + 76) = a6;
  *(void *)(result + 80) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(_DWORD *)(result + 92) = a7;
  return result;
}

uint64_t sub_10106E024(uint64_t a1)
{
  sub_10010F274((uint64_t)v41);
  uint64_t v2 = sub_100132EFC(v42, (uint64_t)"mac, ", 5);
  sub_100B39278(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  sub_100132EFC(v2, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  id v5 = sub_100132EFC(v42, (uint64_t)", lat, ", 7);
  uint64_t v6 = *v5;
  *(uint64_t *)((char *)v5 + *(void *)(*v5 - 24) + 24) = 13;
  *(uint64_t *)((char *)v5 + *(void *)(v6 - 24) + 16) = 8;
  *(_DWORD *)((char *)v5 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v5 + *(void *)(v6 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  int v7 = sub_100132EFC(v42, (uint64_t)", lon, ", 7);
  uint64_t v8 = *v7;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 - 24) + 24) = 13;
  *(uint64_t *)((char *)v7 + *(void *)(v8 - 24) + 16) = 8;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  id v9 = sub_100132EFC(v42, (uint64_t)", alt, ", 7);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 4;
  *(uint64_t *)((char *)v9 + *(void *)(v10 - 24) + 16) = 2;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  uint64_t v11 = sub_100132EFC(v42, (uint64_t)", acc, ", 7);
  uint64_t v12 = *v11;
  *(uint64_t *)((char *)v11 + *(void *)(*v11 - 24) + 24) = 4;
  *(uint64_t *)((char *)v11 + *(void *)(v12 - 24) + 16) = 2;
  *(_DWORD *)((char *)v11 + *(void *)(v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v11 + *(void *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  id v13 = sub_100132EFC(v42, (uint64_t)", vacc, ", 8);
  uint64_t v14 = *v13;
  *(uint64_t *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 4;
  *(uint64_t *)((char *)v13 + *(void *)(v14 - 24) + 16) = 2;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(v14 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  __int16 v15 = sub_100132EFC(v42, (uint64_t)", channel, ", 11);
  uint64_t v16 = *v15;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 1;
  *(uint64_t *)((char *)v15 + *(void *)(v16 - 24) + 16) = 0;
  *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  double v17 = sub_100132EFC(v42, (uint64_t)", score, ", 9);
  uint64_t v18 = *v17;
  *(uint64_t *)((char *)v17 + *(void *)(*v17 - 24) + 24) = 1;
  *(uint64_t *)((char *)v17 + *(void *)(v18 - 24) + 16) = 0;
  *(_DWORD *)((char *)v17 + *(void *)(v18 - 24) + 8) = *(_DWORD *)((unsigned char *)v17 + *(void *)(v18 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  __int16 v19 = sub_100132EFC(v42, (uint64_t)", reach, ", 9);
  uint64_t v20 = *v19;
  *(uint64_t *)((char *)v19 + *(void *)(*v19 - 24) + 24) = 1;
  *(uint64_t *)((char *)v19 + *(void *)(v20 - 24) + 16) = 0;
  *(_DWORD *)((char *)v19 + *(void *)(v20 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(v20 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  id v21 = sub_100132EFC(v42, (uint64_t)", rssi, ", 8);
  uint64_t v22 = *v21;
  *(uint64_t *)((char *)v21 + *(void *)(*v21 - 24) + 24) = 1;
  *(uint64_t *)((char *)v21 + *(void *)(v22 - 24) + 16) = 0;
  *(_DWORD *)((char *)v21 + *(void *)(v22 - 24) + 8) = *(_DWORD *)((unsigned char *)v21 + *(void *)(v22 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  __int16 v23 = sub_100132EFC(v42, (uint64_t)", qTime, ", 9);
  uint64_t v24 = *v23;
  *(uint64_t *)((char *)v23 + *(void *)(*v23 - 24) + 24) = 8;
  *(uint64_t *)((char *)v23 + *(void *)(v24 - 24) + 16) = 0;
  *(_DWORD *)((char *)v23 + *(void *)(v24 - 24) + 8) = *(_DWORD *)((unsigned char *)v23 + *(void *)(v24 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  int v25 = sub_100132EFC(v42, (uint64_t)", ", 2);
  uint64_t v26 = *v25;
  *(uint64_t *)((char *)v25 + *(void *)(*v25 - 24) + 24) = 8;
  *(uint64_t *)((char *)v25 + *(void *)(v26 - 24) + 16) = 0;
  *(_DWORD *)((char *)v25 + *(void *)(v26 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(v26 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  __int16 v27 = sub_100132EFC(v42, (uint64_t)", sTime, ", 9);
  uint64_t v28 = *v27;
  *(uint64_t *)((char *)v27 + *(void *)(*v27 - 24) + 24) = 8;
  *(uint64_t *)((char *)v27 + *(void *)(v28 - 24) + 16) = 0;
  *(_DWORD *)((char *)v27 + *(void *)(v28 - 24) + 8) = *(_DWORD *)((unsigned char *)v27 + *(void *)(v28 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  __int16 v29 = sub_100132EFC(v42, (uint64_t)", ", 2);
  uint64_t v30 = *v29;
  *(uint64_t *)((char *)v29 + *(void *)(*v29 - 24) + 24) = 1;
  *(uint64_t *)((char *)v29 + *(void *)(v30 - 24) + 16) = 0;
  *(_DWORD *)((char *)v29 + *(void *)(v30 - 24) + 8) = *(_DWORD *)((unsigned char *)v29 + *(void *)(v30 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  double v31 = sub_100132EFC(v42, (uint64_t)", ", 2);
  uint64_t v32 = *v31;
  *(uint64_t *)((char *)v31 + *(void *)(*v31 - 24) + 24) = 1;
  *(uint64_t *)((char *)v31 + *(void *)(v32 - 24) + 16) = 0;
  *(_DWORD *)((char *)v31 + *(void *)(v32 - 24) + 8) = *(_DWORD *)((unsigned char *)v31 + *(void *)(v32 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<();
  __int16 v33 = sub_100132EFC(v42, (uint64_t)", flg, -", 8);
  __p.__r_.__value_.__s.__data_[0] = 45;
  uint64_t v34 = sub_100132EFC(v33, (uint64_t)&__p, 1);
  if (*(unsigned char *)(a1 + 88)) {
    std::string::value_type v35 = 84;
  }
  else {
    std::string::value_type v35 = 45;
  }
  __p.__r_.__value_.__s.__data_[0] = v35;
  uint64_t v36 = sub_100132EFC(v34, (uint64_t)&__p, 1);
  if (*(_DWORD *)(a1 + 56)) {
    std::string::value_type v37 = 77;
  }
  else {
    std::string::value_type v37 = 45;
  }
  __p.__r_.__value_.__s.__data_[0] = v37;
  sub_100132EFC(v36, (uint64_t)&__p, 1);
  std::stringbuf::str();
  *(void *)((char *)v41
  v42[0] = v38;
  if (v43 < 0) {
    operator delete((void *)v42[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10106EA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

double sub_10106EA88@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0xFFFF;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 44) = _Q0;
  *(_OWORD *)(a2 + 60) = _Q0;
  *(_DWORD *)(a2 + 84) = 0;
  *(void *)(a2 + 88) = 0xBFF0000000000000;
  *(void *)(a2 + 108) = 0;
  *(void *)(a2 + 100) = 0;
  *(void *)(a2 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a2 + 124) = 0x7FFFFFFF;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 128) = 0;
  *(unsigned char *)(a2 + 152) = 0;
  *(_DWORD *)(a2 + 96) = 4;
  *(_OWORD *)(a2 + 4) = *(_OWORD *)(a1 + 8);
  *(int8x16_t *)(a2 + 20) = vextq_s8(*(int8x16_t *)(a1 + 24), *(int8x16_t *)(a1 + 24), 8uLL);
  *(void *)(a2 + 36) = *(void *)(a1 + 40);
  double result = *(double *)(a1 + 64);
  *(double *)(a2 + 76) = result;
  return result;
}

uint64_t sub_10106EAFC(uint64_t result, int a2, int a3, double a4)
{
  *(_DWORD *)(result + 72) = a2;
  *(double *)(result + 80) = a4;
  *(_DWORD *)(result + 52) = a3;
  return result;
}

BOOL sub_10106EB0C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 1;
}

BOOL sub_10106EB1C(double *a1)
{
  BOOL v1 = 0;
  double v2 = a1[1];
  if (v2 <= 90.0 && v2 >= -90.0)
  {
    double v3 = a1[2];
    BOOL v1 = v3 <= 180.0 && v3 >= -180.0;
  }
  return a1[4] > -1.0 && v1;
}

double sub_10106EB84@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 32) = _Q0;
  double result = NAN;
  *(void *)(a2 + 48) = -1;
  *(_DWORD *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 76) = -1;
  *(void *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 92) = -1;
  return result;
}

uint64_t sub_10106EBBC@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a4 + 32) = _Q1;
  *(_DWORD *)(a4 + 52) = a3;
  *(_DWORD *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = 0;
  *(unsigned char *)(a4 + 88) = 0;
  *(_DWORD *)(a4 + 92) = -1;
  *(_DWORD *)(a4 + 72) = a2;
  *(_DWORD *)(a4 + 76) = -1;
  *(double *)(a4 + 80) = a5;
  *(_DWORD *)(a4 + 48) = -1;
  return result;
}

BOOL sub_10106EBF0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 76) != -1;
}

uint64_t sub_10106EC00(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 76) == -1)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230D378);
    }
    double v2 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "fScore is not initialized!", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230D378);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int CLWifiAPLocation::score() const", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return *(unsigned int *)(a1 + 76);
}

void sub_10106EDA4(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_10106EDD4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10106EE00(int a1)
{
  int v9 = a1;
  (*(void (**)(uint64_t *))(qword_10248B298 + 16))(&qword_10248B298);
  uint64_t v2 = qword_10248B2B0;
  if (!qword_10248B2B0) {
    goto LABEL_12;
  }
  double v3 = &qword_10248B2B0;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < a1;
    if (v4 >= a1) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      double v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_10248B2B0 || *((_DWORD *)v3 + 8) > a1)
  {
LABEL_12:
    sub_101A9EBF0();
    uint64_t result = abort_report_np();
    __break(1u);
  }
  else
  {
    int v7 = sub_1000A43BC((uint64_t)&qword_10248B2A8, &v9);
    (*(void (**)(uint64_t *))(qword_10248B298 + 24))(&qword_10248B298);
    return (uint64_t)v7;
  }
  return result;
}

void sub_10106EF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10106EF38(int a1, const std::string *a2)
{
  int v5 = a1;
  (*(void (**)(uint64_t *))(qword_10248B298 + 16))(&qword_10248B298);
  uint64_t v6 = &v5;
  double v3 = sub_1000EAEE4((uint64_t **)&qword_10248B2A8, &v5, (uint64_t)&unk_101D0B290, &v6);
  std::string::operator=((std::string *)(v3 + 5), a2);
  return (*(uint64_t (**)(uint64_t *))(qword_10248B298 + 24))(&qword_10248B298);
}

void sub_10106F000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10106F014(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_10106F044()
{
  sub_100513074(&qword_10248B298, "TilesSetGlobalProperties", 0, 1);
  __cxa_atexit((void (*)(void *))sub_10051310C, &qword_10248B298, (void *)&_mh_execute_header);
  qword_10248B2B8 = 0;
  qword_10248B2B0 = 0;
  qword_10248B2A8 = (uint64_t)&qword_10248B2B0;

  return __cxa_atexit((void (*)(void *))sub_10106EDD4, &qword_10248B2A8, (void *)&_mh_execute_header);
}

uint64_t sub_10106F0E0(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 7600;
  do
  {
    uint64_t v4 = a1 + v2;
    int v5 = *(void **)(a1 + v2 + 7544);
    if (v5)
    {
      *(void *)(v4 + 7552) = v5;
      operator delete(v5);
    }
    if (*(char *)(v3 + v2 - 57) < 0) {
      operator delete(*(void **)(v4 + 7520));
    }
    v2 -= 80;
  }
  while (v2 != -7600);
  return a1;
}

uint64_t sub_10106F158(uint64_t a1)
{
  uint64_t v2 = 1280;
  do
  {
    uint64_t v3 = a1 + v2;
    uint64_t v4 = *(void **)(a1 + v2 - 56);
    if (v4)
    {
      *(void *)(v3 - 48) = v4;
      operator delete(v4);
    }
    if (*(char *)(v3 - 57) < 0) {
      operator delete(*(void **)(v3 - 80));
    }
    v2 -= 80;
  }
  while (v2);
  return a1;
}

void sub_10106F498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000D80C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

id sub_10106F7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [*(id *)(*(void *)(a1 + 32) + 8) silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10106F850;
  v8[3] = &unk_1022C6138;
  v8[4] = a3;
  v8[5] = a2;
  long long v9 = *(_OWORD *)(a1 + 32);
  return [v6 async:v8];
}

void sub_10106F850(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10230D3B8);
    }
    uint64_t v2 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
    {
      double v3 = *(double *)(a1 + 32);
      int v23 = 68289283;
      int v24 = 0;
      __int16 v25 = 2082;
      uint64_t v26 = "";
      __int16 v27 = 2113;
      double v28 = v3;
      uint64_t v4 = "{\"msg%{public}.0s\":\"Received error when fetching LOI\", \"location: \":%{private, location:escape_only}@}";
      int v5 = v2;
LABEL_6:
      uint32_t v6 = 28;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, v4, (uint8_t *)&v23, v6);
      return;
    }
    return;
  }
  int v7 = *(void **)(a1 + 40);
  if (v7 && ![v7 type])
  {
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_10230D3B8);
    }
    uint64_t v12 = qword_1024191E8;
    if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
    {
      int v23 = 68289026;
      int v24 = 0;
      __int16 v25 = 2082;
      uint64_t v26 = "";
      uint64_t v4 = "{\"msg%{public}.0s\":\"LOI type is home\"}";
      int v5 = v12;
      uint32_t v6 = 18;
      goto LABEL_7;
    }
    return;
  }
  if ([*(id *)(a1 + 48) isEntry:*(void *)(a1 + 56)])
  {
    [objc_msgSend(*(id *)(a1 + 56), "arrivalDate") timeIntervalSinceReferenceDate];
    double v9 = -120.0;
LABEL_14:
    double v10 = v8 + v9;
    double Current = CFAbsoluteTimeGetCurrent();
    goto LABEL_20;
  }
  if ([*(id *)(a1 + 48) isDeparture:*(void *)(a1 + 56)])
  {
    double v8 = CFAbsoluteTimeGetCurrent();
    double v9 = -600.0;
    goto LABEL_14;
  }
  double Current = 1.79769313e308;
  double v10 = 2.22507386e-308;
LABEL_20:
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_10230D3B8);
  }
  id v13 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
  {
    int v23 = 68289539;
    int v24 = 0;
    __int16 v25 = 2082;
    uint64_t v26 = "";
    __int16 v27 = 2049;
    double v28 = v10;
    __int16 v29 = 2049;
    double v30 = Current;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Computed timestamps for tracks\", \"start_s\":\"%{private}.09f\", \"end_s\":\"%{private}.09f\"}", (uint8_t *)&v23, 0x26u);
  }
  if ([*(id *)(a1 + 48) hasPressureChangeFrom:v10 to:Current])
  {
    uint64_t v14 = *(void **)(a1 + 40);
    if (v14) {
      *(double *)&uint64_t v15 = COERCE_DOUBLE([v14 type]);
    }
    else {
      *(double *)&uint64_t v15 = NAN;
    }
    if ([*(id *)(a1 + 48) shouldSubmit:v15 calibrationType:3])
    {
      uint64_t v16 = *(void **)(a1 + 48);
      [*(id *)(a1 + 56) coordinate];
      double v18 = v17;
      double v20 = v19;
      [*(id *)(a1 + 56) horizontalAccuracy];
      [v16 sendTrackFrom:3 to:v10 location:Current horrUnc:v18 type:v20];
    }
    else
    {
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10230D3B8);
      }
      uint64_t v22 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
      {
        int v23 = 68289283;
        int v24 = 0;
        __int16 v25 = 2082;
        uint64_t v26 = "";
        __int16 v27 = 2049;
        double v28 = *(double *)&v15;
        uint64_t v4 = "{\"msg%{public}.0s\":\"number of submissions exceeded for\", \"type\":%{private}ld}";
        int v5 = v22;
        goto LABEL_6;
      }
    }
  }
}

void sub_10107073C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101070CA4(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void *sub_101070CD4(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v4 = a2[4];
    uint64_t v5 = a2[1];
    uint64_t v6 = a2[2];
    int v7 = (char **)(v5 + 8 * (v4 >> 8));
    if (v6 == v5)
    {
      double v8 = 0;
      uint64_t v11 = 0;
      double v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
    }
    else
    {
      double v8 = &(*v7)[16 * v4];
      unint64_t v9 = a2[5] + v4;
      double v10 = (char *)(v5 + 8 * (v9 >> 8));
      uint64_t v11 = (char *)(*(void *)v10 + 16 * v9);
    }
    sub_101070D60(a1, v7, v8, v10, v11);
  }
  return a1;
}

void *sub_101070D60(void *a1, char **a2, char *a3, char *a4, char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = ((uint64_t)&a5[-*(void *)a4] >> 4) + 32 * (a4 - (char *)a2) - ((a3 - *a2) >> 4);
  }
  return sub_101070D94(a1, a2, a3, v5);
}

void *sub_101070D94(void *a1, char **a2, char *a3, unint64_t a4)
{
  int v23 = a2;
  int v24 = a3;
  unint64_t v7 = a1[5];
  if (v7 >= a4)
  {
    unint64_t v16 = a1[4];
    uint64_t v17 = a1[1];
    double v18 = (char *)(v17 + 8 * (v16 >> 8));
    if (a1[2] == v17) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *(void *)v18 + 16 * v16;
    }
    v25[0] = a2;
    v25[1] = a3;
    double v21 = (char **)sub_1000D9B0C((uint64_t)v25, a4);
    uint64_t v26 = v18;
    uint64_t v27 = v19;
    sub_1010710D8(a2, a3, v21, v22, (uint64_t)&v26);
    return (void *)sub_101070FE4((uint64_t)a1, v26, v27);
  }
  else
  {
    unint64_t v9 = (char **)sub_1000D9B0C((uint64_t)&v23, v7);
    double v10 = (long long *)v8;
    unint64_t v11 = a1[4];
    uint64_t v12 = a1[1];
    id v13 = (char *)(v12 + 8 * (v11 >> 8));
    if (a1[2] == v12) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = *(void *)v13 + 16 * v11;
    }
    uint64_t v26 = v13;
    uint64_t v27 = v14;
    sub_1010710D8(v23, v24, v9, v8, (uint64_t)&v26);
    return sub_101070EB4(a1, v9, v10, a4 - a1[5]);
  }
}

void *sub_101070EB4(void *a1, void *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_10107126C(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  id v13 = (void *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 16 * v11;
  }
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  uint64_t result = sub_1000D9B0C((uint64_t)v22, a4);
  while (v14 != v16)
  {
    uint64_t v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_OWORD *)v14 == v17)
    {
      uint64_t v17 = (_OWORD *)v14;
    }
    else
    {
      double v18 = (_OWORD *)v14;
      do
      {
        long long v19 = *a3++;
        *double v18 = v19;
        if ((long long *)((char *)a3 - *a2) == (long long *)4096)
        {
          double v20 = (long long *)a2[1];
          ++a2;
          a3 = v20;
        }
        ++v18;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result) {
      break;
    }
    uint64_t v21 = v13[1];
    ++v13;
    uint64_t v14 = v21;
  }
  return result;
}

uint64_t sub_101070FE4(uint64_t result, char *a2, uint64_t a3)
{
  double v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = (char *)(v6 + 8 * (v5 >> 8));
  if (v7 == v6) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = *(void *)v8 + 16 * v5;
  }
  if (v9 != a3)
  {
    uint64_t v10 = ((v9 - *(void *)v8) >> 4) + 32 * (v8 - a2);
    uint64_t v11 = a3 - *(void *)a2;
    uint64_t v12 = v10 - (v11 >> 4);
    if (v12 >= 1)
    {
      id v13 = (char *)(v6 + 8 * (v4 >> 8));
      if (v7 == v6) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = *(void *)v13 + 16 * v4;
      }
      v16[0] = v13;
      v16[1] = v14;
      if (v14 == a3) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = (v11 >> 4) + 32 * (a2 - v13) - ((v14 - *(void *)v13) >> 4);
      }
      sub_1000D9B0C((uint64_t)v16, v15);
      v3[5] -= v12;
      do
        uint64_t result = sub_100446B90(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

double sub_1010710D8(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  if (a1 == a3)
  {
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
    uint64_t v10 = __src;
  }
  else
  {
    uint64_t v8 = a1 + 1;
    sub_1010711A8(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      uint64_t v9 = *v8++;
      sub_1010711A8(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    uint64_t v10 = *a3;
    uint64_t v11 = *(void ***)a5;
    uint64_t v12 = *(char **)(a5 + 8);
  }
  sub_1010711A8(v10, v12, a4, v11, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_1010711A8@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  uint64_t v6 = a4;
  if (__src != a3)
  {
    uint64_t v9 = __src;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = v10 - __dst + 4096;
      uint64_t v12 = (a3 - v9) >> 4 >= v11 >> 4 ? v11 >> 4 : (a3 - v9) >> 4;
      if (v12) {
        __src = (char *)memmove(__dst, v9, 16 * v12 - 4);
      }
      v9 += 16 * v12;
      if (v9 == a3) {
        break;
      }
      id v13 = (char *)*v6++;
      uint64_t v10 = v13;
      std::string __dst = v13;
    }
    __dst += 16 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst) {
      std::string __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void sub_10107126C(void *a1, unint64_t a2)
{
  double v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          __int16 v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          double v31 = &v29[8 * (v28 >> 2)];
          uint64_t v32 = (uint64_t *)a1[1];
          double v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            double v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            std::string::value_type v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)std::string::value_type v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          std::string::value_type v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            double v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          __int16 v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            double v3 = (char *)a1[1];
          }
          uint64_t v27 = &v3[-8 * (v24 >> 1)];
          double v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)double v3 = v18;
      double v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 255;
          }
          else {
            uint64_t v64 = 256;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        __int16 v66 = (char *)a1[2];
        do
        {
          double v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          __int16 v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              uint64_t v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              uint64_t v81 = &v79[8 * (v78 >> 2)];
              __int16 v82 = (uint64_t *)a1[1];
              __int16 v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                __int16 v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                double v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)double v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              int v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                __int16 v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              unsigned int v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                __int16 v66 = (char *)a1[1];
              }
              int v77 = &v66[-8 * (v74 >> 1)];
              __int16 v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)__int16 v66 = v69;
          __int16 v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      int v91 = a1 + 3;
      if (v13) {
        long long v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        long long v15 = 0;
      }
      uint64_t v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        __int16 v88 = operator new(0x1000uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        double v39 = (void *)a1[1];
        int v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              int v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              double v51 = (uint64_t *)__p[1];
              int v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                int v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                float v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)float v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              __int16 v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                int v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              double v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                int v40 = (char *)__p[1];
              }
              double v47 = &v40[-8 * (v44 >> 1)];
              int v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)int v40 = *v39;
          int v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          double v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      int v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      uint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_101071784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010717F8(uint64_t a1)
{
  __chkstk_darwin(a1);
  sub_100134750(&qword_102482CC8, "Tokyo-1");
  v366[0] = xmmword_101D9E130;
  v366[1] = xmmword_101D9E140;
  v366[2] = xmmword_101D9E150;
  v366[3] = xmmword_101D9E160;
  v366[4] = xmmword_101D9E170;
  v366[5] = xmmword_101D9E180;
  v366[6] = xmmword_101D9E190;
  v366[7] = xmmword_101D9E130;
  qword_102482CE8 = 0;
  qword_102482CF0 = 0;
  qword_102482CE0 = 0;
  BOOL v1 = (char *)operator new(0x80uLL);
  uint64_t v2 = 0;
  qword_102482CE0 = (uint64_t)v1;
  qword_102482CE8 = (uint64_t)v1;
  qword_102482CF0 = (uint64_t)(v1 + 128);
  do
  {
    double v3 = &v1[v2 * 16];
    long long v4 = v366[v2 + 1];
    *(_OWORD *)double v3 = v366[v2];
    *((_OWORD *)v3 + 1) = v4;
    v2 += 2;
  }
  while (v2 != 8);
  qword_102482CE8 = (uint64_t)(v1 + 128);
  xmmword_102482CF8 = xmmword_101D9E1A0;
  unk_102482D08 = xmmword_101D9E1B0;
  sub_100134750(&qword_102482D18, "Tokyo-2");
  v365[0] = xmmword_101D9E1C0;
  v365[1] = xmmword_101D9E1D0;
  v365[2] = xmmword_101D9E1E0;
  v365[3] = xmmword_101D9E1F0;
  v365[4] = xmmword_101D9E200;
  v365[5] = xmmword_101D9E210;
  v365[6] = xmmword_101D9E220;
  v365[7] = xmmword_101D9E230;
  v365[8] = xmmword_101D9E240;
  v365[9] = xmmword_101D9E250;
  v365[10] = xmmword_101D9E1C0;
  qword_102482D38 = 0;
  qword_102482D40 = 0;
  qword_102482D30 = 0;
  unint64_t v5 = (char *)operator new(0xB0uLL);
  uint64_t v6 = 0;
  qword_102482D30 = (uint64_t)v5;
  qword_102482D38 = (uint64_t)v5;
  qword_102482D40 = (uint64_t)(v5 + 176);
  do
  {
    *(_OWORD *)&v5[v6 * 16] = v365[v6];
    ++v6;
  }
  while (v6 != 11);
  qword_102482D38 = (uint64_t)(v5 + 176);
  xmmword_102482D48 = xmmword_101D9E260;
  unk_102482D58 = xmmword_101D9E270;
  sub_100134750(&qword_102482D68, "Tokyo-3");
  v364[0] = xmmword_101D9E280;
  v364[1] = xmmword_101D9E290;
  v364[2] = xmmword_101D9E2A0;
  v364[3] = xmmword_101D9E2B0;
  v364[4] = xmmword_101D9E280;
  qword_102482D88 = 0;
  qword_102482D90 = 0;
  qword_102482D80 = 0;
  unint64_t v7 = (char *)operator new(0x50uLL);
  uint64_t v8 = 0;
  qword_102482D80 = (uint64_t)v7;
  qword_102482D88 = (uint64_t)v7;
  qword_102482D90 = (uint64_t)(v7 + 80);
  do
  {
    *(_OWORD *)&v7[v8 * 16] = v364[v8];
    ++v8;
  }
  while (v8 != 5);
  qword_102482D88 = (uint64_t)(v7 + 80);
  xmmword_102482D98 = xmmword_101D9E2C0;
  unk_102482DA8 = xmmword_101D9E2D0;
  sub_100134750(&qword_102482DB8, "Hong Kong-1");
  v363[0] = xmmword_101D9E2E0;
  v363[1] = xmmword_101D9E2F0;
  v363[2] = xmmword_101D9E300;
  v363[3] = xmmword_101D9E310;
  v363[4] = xmmword_101D9E320;
  v363[5] = xmmword_101D9E330;
  v363[6] = xmmword_101D9E340;
  v363[7] = xmmword_101D9E350;
  v363[8] = xmmword_101D9E2E0;
  qword_102482DD8 = 0;
  qword_102482DE0 = 0;
  qword_102482DD0 = 0;
  unint64_t v9 = (char *)operator new(0x90uLL);
  uint64_t v10 = 0;
  qword_102482DD0 = (uint64_t)v9;
  qword_102482DD8 = (uint64_t)v9;
  qword_102482DE0 = (uint64_t)(v9 + 144);
  do
  {
    *(_OWORD *)&v9[v10 * 16] = v363[v10];
    ++v10;
  }
  while (v10 != 9);
  qword_102482DD8 = (uint64_t)(v9 + 144);
  xmmword_102482DE8 = xmmword_101D9E360;
  unk_102482DF8 = xmmword_101D9E370;
  sub_100134750(&qword_102482E08, "Hong Kong-2");
  v362[0] = xmmword_101D9E380;
  v362[1] = xmmword_101D9E390;
  v362[2] = xmmword_101D9E3A0;
  v362[3] = xmmword_101D9E3B0;
  v362[4] = xmmword_101D9E3C0;
  v362[5] = xmmword_101D9E3D0;
  v362[6] = xmmword_101D9E3E0;
  v362[7] = xmmword_101D9E3F0;
  v362[8] = xmmword_101D9E400;
  v362[9] = xmmword_101D9E410;
  v362[10] = xmmword_101D9E420;
  v362[11] = xmmword_101D9E430;
  v362[12] = xmmword_101D9E380;
  qword_102482E28 = 0;
  qword_102482E30 = 0;
  qword_102482E20 = 0;
  uint64_t v11 = (char *)operator new(0xD0uLL);
  uint64_t v12 = 0;
  qword_102482E20 = (uint64_t)v11;
  qword_102482E28 = (uint64_t)v11;
  qword_102482E30 = (uint64_t)(v11 + 208);
  do
  {
    *(_OWORD *)&v11[v12 * 16] = v362[v12];
    ++v12;
  }
  while (v12 != 13);
  qword_102482E28 = (uint64_t)(v11 + 208);
  xmmword_102482E38 = xmmword_101D9E440;
  unk_102482E48 = xmmword_101D9E450;
  sub_100134750(&qword_102482E58, "Hong Kong-3");
  v361[0] = xmmword_101D9E460;
  v361[1] = xmmword_101D9E470;
  v361[2] = xmmword_101D9E480;
  v361[3] = xmmword_101D9E490;
  v361[4] = xmmword_101D9E4A0;
  v361[5] = xmmword_101D9E4B0;
  v361[6] = xmmword_101D9E4C0;
  v361[7] = xmmword_101D9E4D0;
  v361[8] = xmmword_101D9E460;
  qword_102482E78 = 0;
  qword_102482E80 = 0;
  qword_102482E70 = 0;
  unint64_t v13 = (char *)operator new(0x90uLL);
  uint64_t v14 = 0;
  qword_102482E70 = (uint64_t)v13;
  qword_102482E78 = (uint64_t)v13;
  qword_102482E80 = (uint64_t)(v13 + 144);
  do
  {
    *(_OWORD *)&v13[v14 * 16] = v361[v14];
    ++v14;
  }
  while (v14 != 9);
  qword_102482E78 = (uint64_t)(v13 + 144);
  xmmword_102482E88 = xmmword_101D9E4E0;
  unk_102482E98 = xmmword_101D9E4F0;
  sub_100134750(&qword_102482EA8, "Hong Kong-4");
  v360[0] = xmmword_101D9E500;
  v360[1] = xmmword_101D9E510;
  v360[2] = xmmword_101D9E520;
  v360[3] = xmmword_101D9E530;
  v360[4] = xmmword_101D9E540;
  v360[5] = xmmword_101D9E550;
  v360[6] = xmmword_101D9E560;
  v360[7] = xmmword_101D9E570;
  v360[8] = xmmword_101D9E580;
  v360[9] = xmmword_101D9E590;
  v360[10] = xmmword_101D9E5A0;
  v360[11] = xmmword_101D9E5B0;
  v360[12] = xmmword_101D9E5C0;
  v360[13] = xmmword_101D9E5D0;
  v360[14] = xmmword_101D9E5E0;
  v360[15] = xmmword_101D9E5F0;
  v360[16] = xmmword_101D9E600;
  v360[17] = xmmword_101D9E610;
  v360[18] = xmmword_101D9E620;
  v360[19] = xmmword_101D9E630;
  v360[20] = xmmword_101D9E640;
  v360[21] = xmmword_101D9E650;
  v360[22] = xmmword_101D9E660;
  v360[23] = xmmword_101D9E500;
  qword_102482EC0 = 0;
  qword_102482EC8 = 0;
  qword_102482ED0 = 0;
  long long v15 = (char *)operator new(0x180uLL);
  uint64_t v16 = 0;
  qword_102482EC0 = (uint64_t)v15;
  qword_102482EC8 = (uint64_t)v15;
  qword_102482ED0 = (uint64_t)(v15 + 384);
  do
  {
    uint64_t v17 = &v15[v16 * 16];
    long long v18 = v360[v16 + 1];
    *(_OWORD *)uint64_t v17 = v360[v16];
    *((_OWORD *)v17 + 1) = v18;
    v16 += 2;
  }
  while (v16 != 24);
  qword_102482EC8 = (uint64_t)(v15 + 384);
  xmmword_102482ED8 = xmmword_101D9E670;
  unk_102482EE8 = xmmword_101D9E680;
  sub_100134750(&qword_102482EF8, "Singapore-1");
  v359[0] = xmmword_101D9E690;
  v359[1] = xmmword_101D9E6A0;
  v359[2] = xmmword_101D9E6B0;
  v359[3] = xmmword_101D9E6C0;
  v359[4] = xmmword_101D9E6D0;
  v359[5] = xmmword_101D9E6E0;
  v359[6] = xmmword_101D9E6F0;
  v359[7] = xmmword_101D9E700;
  v359[8] = xmmword_101D9E710;
  v359[9] = xmmword_101D9E720;
  v359[10] = xmmword_101D9E730;
  v359[11] = xmmword_101D9E690;
  qword_102482F18 = 0;
  qword_102482F20 = 0;
  qword_102482F10 = 0;
  uint64_t v19 = (char *)operator new(0xC0uLL);
  uint64_t v20 = 0;
  qword_102482F10 = (uint64_t)v19;
  qword_102482F18 = (uint64_t)v19;
  qword_102482F20 = (uint64_t)(v19 + 192);
  do
  {
    uint64_t v21 = &v19[v20 * 16];
    long long v22 = v359[v20 + 1];
    *(_OWORD *)uint64_t v21 = v359[v20];
    *((_OWORD *)v21 + 1) = v22;
    v20 += 2;
  }
  while (v20 != 12);
  qword_102482F18 = (uint64_t)(v19 + 192);
  xmmword_102482F28 = xmmword_101D9E740;
  unk_102482F38 = xmmword_101D9E750;
  sub_100134750(&qword_102482F48, "Singapore-2");
  v358[0] = xmmword_101D9E760;
  v358[1] = xmmword_101D9E770;
  v358[2] = xmmword_101D9E780;
  v358[3] = xmmword_101D9E790;
  v358[4] = xmmword_101D9E7A0;
  v358[5] = xmmword_101D9E7B0;
  v358[6] = xmmword_101D9E7C0;
  v358[7] = xmmword_101D9E7D0;
  v358[8] = xmmword_101D9E7E0;
  v358[9] = xmmword_101D9E7F0;
  v358[10] = xmmword_101D9E800;
  v358[11] = xmmword_101D9E810;
  v358[12] = xmmword_101D9E820;
  v358[13] = xmmword_101D9E830;
  v358[14] = xmmword_101D9E760;
  qword_102482F68 = 0;
  qword_102482F70 = 0;
  qword_102482F60 = 0;
  uint64_t v23 = (char *)operator new(0xF0uLL);
  uint64_t v24 = 0;
  qword_102482F60 = (uint64_t)v23;
  qword_102482F68 = (uint64_t)v23;
  qword_102482F70 = (uint64_t)(v23 + 240);
  do
  {
    *(_OWORD *)&v23[v24 * 16] = v358[v24];
    ++v24;
  }
  while (v24 != 15);
  qword_102482F68 = (uint64_t)(v23 + 240);
  xmmword_102482F78 = xmmword_101D9E840;
  unk_102482F88 = xmmword_101D9E850;
  sub_100134750(&qword_102482F98, "Singapore-3");
  v357[0] = xmmword_101D9E860;
  v357[1] = xmmword_101D9E870;
  v357[2] = xmmword_101D9E880;
  v357[3] = xmmword_101D9E890;
  v357[4] = xmmword_101D9E8A0;
  v357[5] = xmmword_101D9E8B0;
  v357[6] = xmmword_101D9E8C0;
  v357[7] = xmmword_101D9E860;
  qword_102482FB8 = 0;
  qword_102482FC0 = 0;
  qword_102482FB0 = 0;
  __int16 v25 = (char *)operator new(0x80uLL);
  uint64_t v26 = 0;
  qword_102482FB0 = (uint64_t)v25;
  qword_102482FB8 = (uint64_t)v25;
  qword_102482FC0 = (uint64_t)(v25 + 128);
  do
  {
    uint64_t v27 = &v25[v26 * 16];
    long long v28 = v357[v26 + 1];
    *(_OWORD *)uint64_t v27 = v357[v26];
    *((_OWORD *)v27 + 1) = v28;
    v26 += 2;
  }
  while (v26 != 8);
  qword_102482FB8 = (uint64_t)(v25 + 128);
  xmmword_102482FC8 = xmmword_101D9E8A0;
  unk_102482FD8 = xmmword_101D9E8D0;
  sub_100134750(&qword_102482FE8, "Singapore-4");
  v356[0] = xmmword_101D9E8E0;
  v356[1] = xmmword_101D9E8F0;
  v356[2] = xmmword_101D9E900;
  v356[3] = xmmword_101D9E910;
  v356[4] = xmmword_101D9E920;
  v356[5] = xmmword_101D9E930;
  v356[6] = xmmword_101D9E940;
  v356[7] = xmmword_101D9E950;
  v356[8] = xmmword_101D9E960;
  v356[9] = xmmword_101D9E970;
  v356[10] = xmmword_101D9E980;
  v356[11] = xmmword_101D9E990;
  v356[12] = xmmword_101D9E9A0;
  v356[13] = xmmword_101D9E9B0;
  v356[14] = xmmword_101D9E9C0;
  v356[15] = xmmword_101D9E9D0;
  v356[16] = xmmword_101D9E8E0;
  qword_102483008 = 0;
  qword_102483010 = 0;
  qword_102483000 = 0;
  __int16 v29 = (char *)operator new(0x110uLL);
  uint64_t v30 = 0;
  qword_102483000 = (uint64_t)v29;
  qword_102483008 = (uint64_t)v29;
  qword_102483010 = (uint64_t)(v29 + 272);
  do
  {
    *(_OWORD *)&v29[v30 * 16] = v356[v30];
    ++v30;
  }
  while (v30 != 17);
  qword_102483008 = (uint64_t)(v29 + 272);
  xmmword_102483018 = xmmword_101D9E9E0;
  unk_102483028 = xmmword_101D9E9F0;
  sub_100134750(&qword_102483038, "Singapore-5");
  v355[0] = xmmword_101D9EA00;
  v355[1] = xmmword_101D9EA10;
  v355[2] = xmmword_101D9EA20;
  v355[3] = xmmword_101D9EA30;
  v355[4] = xmmword_101D9EA40;
  v355[5] = xmmword_101D9EA50;
  v355[6] = xmmword_101D9EA60;
  v355[7] = xmmword_101D9EA00;
  qword_102483058 = 0;
  qword_102483060 = 0;
  qword_102483050 = 0;
  double v31 = (char *)operator new(0x80uLL);
  uint64_t v32 = 0;
  qword_102483050 = (uint64_t)v31;
  qword_102483058 = (uint64_t)v31;
  qword_102483060 = (uint64_t)(v31 + 128);
  do
  {
    uint64_t v33 = &v31[v32 * 16];
    long long v34 = v355[v32 + 1];
    *(_OWORD *)uint64_t v33 = v355[v32];
    *((_OWORD *)v33 + 1) = v34;
    v32 += 2;
  }
  while (v32 != 8);
  qword_102483058 = (uint64_t)(v31 + 128);
  xmmword_102483068 = xmmword_101D9EA70;
  unk_102483078 = xmmword_101D9EA80;
  sub_100134750(&qword_102483088, "Singapore-6");
  v354[0] = xmmword_101D9EA90;
  v354[1] = xmmword_101D9EAA0;
  v354[2] = xmmword_101D9EAB0;
  v354[3] = xmmword_101D9EAC0;
  v354[4] = xmmword_101D9EAD0;
  v354[5] = xmmword_101D9EAE0;
  v354[6] = xmmword_101D9EAF0;
  v354[7] = xmmword_101D9EB00;
  v354[8] = xmmword_101D9EB10;
  v354[9] = xmmword_101D9EA90;
  qword_1024830A8 = 0;
  qword_1024830B0 = 0;
  qword_1024830A0 = 0;
  std::string::value_type v35 = (char *)operator new(0xA0uLL);
  uint64_t v36 = 0;
  qword_1024830A0 = (uint64_t)v35;
  qword_1024830A8 = (uint64_t)v35;
  qword_1024830B0 = (uint64_t)(v35 + 160);
  do
  {
    std::string::value_type v37 = &v35[v36 * 16];
    long long v38 = v354[v36 + 1];
    *(_OWORD *)std::string::value_type v37 = v354[v36];
    *((_OWORD *)v37 + 1) = v38;
    v36 += 2;
  }
  while (v36 != 10);
  qword_1024830A8 = (uint64_t)(v35 + 160);
  xmmword_1024830B8 = xmmword_101D9EB20;
  unk_1024830C8 = xmmword_101D9EB30;
  sub_100134750(&qword_1024830D8, "Singapore-7");
  v353[0] = xmmword_101D9EB40;
  v353[1] = xmmword_101D9EB50;
  v353[2] = xmmword_101D9EB60;
  v353[3] = xmmword_101D9EB70;
  v353[4] = xmmword_101D9EB80;
  v353[5] = xmmword_101D9EB90;
  v353[6] = xmmword_101D9EB40;
  qword_1024830F8 = 0;
  qword_102483100 = 0;
  qword_1024830F0 = 0;
  double v39 = (char *)operator new(0x70uLL);
  uint64_t v40 = 0;
  qword_1024830F0 = (uint64_t)v39;
  qword_1024830F8 = (uint64_t)v39;
  qword_102483100 = (uint64_t)(v39 + 112);
  do
  {
    *(_OWORD *)&v39[v40 * 16] = v353[v40];
    ++v40;
  }
  while (v40 != 7);
  qword_1024830F8 = (uint64_t)(v39 + 112);
  xmmword_102483108 = xmmword_101D9EBA0;
  unk_102483118 = xmmword_101D9EBB0;
  sub_100134750(&qword_102483128, "Shanghai-1");
  v352[0] = xmmword_101D9EBC0;
  v352[1] = xmmword_101D9EBD0;
  v352[2] = xmmword_101D9EBE0;
  v352[3] = xmmword_101D9EBF0;
  v352[4] = xmmword_101D9EC00;
  v352[5] = xmmword_101D9EC10;
  v352[6] = xmmword_101D9EC20;
  v352[7] = xmmword_101D9EC30;
  v352[8] = xmmword_101D9EC40;
  v352[9] = xmmword_101D9EC50;
  v352[10] = xmmword_101D9EC60;
  v352[11] = xmmword_101D9EC70;
  v352[12] = xmmword_101D9EBC0;
  qword_102483148 = 0;
  qword_102483150 = 0;
  qword_102483140 = 0;
  int64_t v41 = (char *)operator new(0xD0uLL);
  uint64_t v42 = 0;
  qword_102483140 = (uint64_t)v41;
  qword_102483148 = (uint64_t)v41;
  qword_102483150 = (uint64_t)(v41 + 208);
  do
  {
    *(_OWORD *)&v41[v42 * 16] = v352[v42];
    ++v42;
  }
  while (v42 != 13);
  qword_102483148 = (uint64_t)(v41 + 208);
  xmmword_102483158 = xmmword_101D9EC80;
  unk_102483168 = xmmword_101D9EC90;
  sub_100134750(&qword_102483178, "Shanghai-2");
  v351[0] = xmmword_101D9ECA0;
  v351[1] = xmmword_101D9ECB0;
  v351[2] = xmmword_101D9ECC0;
  v351[3] = xmmword_101D9ECD0;
  v351[4] = xmmword_101D9ECE0;
  v351[5] = xmmword_101D9ECF0;
  v351[6] = xmmword_101D9ED00;
  v351[7] = xmmword_101D9ED10;
  v351[8] = xmmword_101D9ED20;
  v351[9] = xmmword_101D9ED30;
  v351[10] = xmmword_101D9ED40;
  v351[11] = xmmword_101D9ED50;
  v351[12] = xmmword_101D9ECA0;
  qword_102483198 = 0;
  qword_1024831A0 = 0;
  qword_102483190 = 0;
  uint64_t v43 = (char *)operator new(0xD0uLL);
  uint64_t v44 = 0;
  qword_102483190 = (uint64_t)v43;
  qword_102483198 = (uint64_t)v43;
  qword_1024831A0 = (uint64_t)(v43 + 208);
  do
  {
    *(_OWORD *)&v43[v44 * 16] = v351[v44];
    ++v44;
  }
  while (v44 != 13);
  qword_102483198 = (uint64_t)(v43 + 208);
  xmmword_1024831A8 = xmmword_101D9ED60;
  unk_1024831B8 = xmmword_101D9ED70;
  sub_100134750(&qword_1024831C8, "Shanghai-3");
  v350[0] = xmmword_101D9ED80;
  v350[1] = xmmword_101D9ED90;
  v350[2] = xmmword_101D9EDA0;
  v350[3] = xmmword_101D9EDB0;
  v350[4] = xmmword_101D9EDC0;
  v350[5] = xmmword_101D9EDD0;
  v350[6] = xmmword_101D9EDE0;
  v350[7] = xmmword_101D9EDF0;
  v350[8] = xmmword_101D9EE00;
  v350[9] = xmmword_101D9EE10;
  v350[10] = xmmword_101D9ED80;
  qword_1024831E8 = 0;
  qword_1024831F0 = 0;
  qword_1024831E0 = 0;
  double v45 = (char *)operator new(0xB0uLL);
  uint64_t v46 = 0;
  qword_1024831E0 = (uint64_t)v45;
  qword_1024831E8 = (uint64_t)v45;
  qword_1024831F0 = (uint64_t)(v45 + 176);
  do
  {
    *(_OWORD *)&v45[v46 * 16] = v350[v46];
    ++v46;
  }
  while (v46 != 11);
  qword_1024831E8 = (uint64_t)(v45 + 176);
  xmmword_1024831F8 = xmmword_101D9EE20;
  unk_102483208 = xmmword_101D9EE30;
  sub_100134750(&qword_102483218, "Shanghai-4");
  v349[0] = xmmword_101D9EE40;
  v349[1] = xmmword_101D9EE50;
  v349[2] = xmmword_101D9EE60;
  v349[3] = xmmword_101D9EE70;
  v349[4] = xmmword_101D9EE80;
  v349[5] = xmmword_101D9EE90;
  v349[6] = xmmword_101D9EEA0;
  v349[7] = xmmword_101D9EEB0;
  v349[8] = xmmword_101D9EEC0;
  v349[9] = xmmword_101D9EED0;
  v349[10] = xmmword_101D9EE40;
  qword_102483238 = 0;
  qword_102483240 = 0;
  qword_102483230 = 0;
  double v47 = (char *)operator new(0xB0uLL);
  uint64_t v48 = 0;
  qword_102483230 = (uint64_t)v47;
  qword_102483238 = (uint64_t)v47;
  qword_102483240 = (uint64_t)(v47 + 176);
  do
  {
    *(_OWORD *)&v47[v48 * 16] = v349[v48];
    ++v48;
  }
  while (v48 != 11);
  qword_102483238 = (uint64_t)(v47 + 176);
  xmmword_102483248 = xmmword_101D9EEE0;
  unk_102483258 = xmmword_101D9EEF0;
  sub_100134750(&qword_102483268, "Shanghai-5");
  v348[0] = xmmword_101D9EF00;
  v348[1] = xmmword_101D9EF10;
  v348[2] = xmmword_101D9EF20;
  v348[3] = xmmword_101D9EF30;
  v348[4] = xmmword_101D9EF40;
  v348[5] = xmmword_101D9EF50;
  v348[6] = xmmword_101D9EF60;
  v348[7] = xmmword_101D9EF70;
  v348[8] = xmmword_101D9EF80;
  v348[9] = xmmword_101D9EF90;
  v348[10] = xmmword_101D9EFA0;
  v348[11] = xmmword_101D9EFB0;
  v348[12] = xmmword_101D9EFC0;
  v348[13] = xmmword_101D9EFD0;
  v348[14] = xmmword_101D9EFE0;
  v348[15] = xmmword_101D9EF00;
  qword_102483288 = 0;
  qword_102483290 = 0;
  qword_102483280 = 0;
  int v49 = (char *)operator new(0x100uLL);
  uint64_t v50 = 0;
  qword_102483280 = (uint64_t)v49;
  qword_102483288 = (uint64_t)v49;
  qword_102483290 = (uint64_t)(v49 + 256);
  do
  {
    double v51 = &v49[v50 * 16];
    long long v52 = v348[v50 + 1];
    *(_OWORD *)double v51 = v348[v50];
    *((_OWORD *)v51 + 1) = v52;
    v50 += 2;
  }
  while (v50 != 16);
  qword_102483288 = (uint64_t)(v49 + 256);
  xmmword_102483298 = xmmword_101D9EFF0;
  unk_1024832A8 = xmmword_101D9F000;
  sub_100134750(&qword_1024832B8, "Shanghai-6");
  v347[0] = xmmword_101D9F010;
  v347[1] = xmmword_101D9F020;
  v347[2] = xmmword_101D9F030;
  v347[3] = xmmword_101D9F040;
  v347[4] = xmmword_101D9F050;
  v347[5] = xmmword_101D9F060;
  v347[6] = xmmword_101D9F070;
  v347[7] = xmmword_101D9F080;
  v347[8] = xmmword_101D9F010;
  qword_1024832D8 = 0;
  qword_1024832E0 = 0;
  qword_1024832D0 = 0;
  uint64_t v53 = (char *)operator new(0x90uLL);
  uint64_t v54 = 0;
  qword_1024832D0 = (uint64_t)v53;
  qword_1024832D8 = (uint64_t)v53;
  qword_1024832E0 = (uint64_t)(v53 + 144);
  do
  {
    *(_OWORD *)&v53[v54 * 16] = v347[v54];
    ++v54;
  }
  while (v54 != 9);
  qword_1024832D8 = (uint64_t)(v53 + 144);
  xmmword_1024832E8 = xmmword_101D9F090;
  unk_1024832F8 = xmmword_101D9F0A0;
  sub_100134750(&qword_102483308, "Shanghai-7");
  v346[0] = xmmword_101D9F0B0;
  v346[1] = xmmword_101D9F0C0;
  v346[2] = xmmword_101D9F0D0;
  v346[3] = xmmword_101D9F0E0;
  v346[4] = xmmword_101D9F0F0;
  v346[5] = xmmword_101D9F100;
  v346[6] = xmmword_101D9F110;
  v346[7] = xmmword_101D9F120;
  v346[8] = xmmword_101D9F130;
  v346[9] = xmmword_101D9F140;
  v346[10] = xmmword_101D9F150;
  v346[11] = xmmword_101D9F0B0;
  qword_102483328 = 0;
  qword_102483330 = 0;
  qword_102483320 = 0;
  uint64_t v55 = (char *)operator new(0xC0uLL);
  uint64_t v56 = 0;
  qword_102483320 = (uint64_t)v55;
  qword_102483328 = (uint64_t)v55;
  qword_102483330 = (uint64_t)(v55 + 192);
  do
  {
    int v57 = &v55[v56 * 16];
    long long v58 = v346[v56 + 1];
    *(_OWORD *)int v57 = v346[v56];
    *((_OWORD *)v57 + 1) = v58;
    v56 += 2;
  }
  while (v56 != 12);
  qword_102483328 = (uint64_t)(v55 + 192);
  xmmword_102483338 = xmmword_101D9F160;
  unk_102483348 = xmmword_101D9F170;
  sub_100134750(&qword_102483358, "Shanghai-8");
  v345[0] = xmmword_101D9F180;
  v345[1] = xmmword_101D9F190;
  v345[2] = xmmword_101D9F1A0;
  v345[3] = xmmword_101D9F1B0;
  v345[4] = xmmword_101D9F1C0;
  v345[5] = xmmword_101D9F1D0;
  v345[6] = xmmword_101D9F1E0;
  v345[7] = xmmword_101D9F1F0;
  v345[8] = xmmword_101D9F200;
  v345[9] = xmmword_101D9F210;
  v345[10] = xmmword_101D9F220;
  v345[11] = xmmword_101D9F230;
  v345[12] = xmmword_101D9F240;
  v345[13] = xmmword_101D9F250;
  v345[14] = xmmword_101D9F260;
  v345[15] = xmmword_101D9F270;
  v345[16] = xmmword_101D9F180;
  qword_102483378 = 0;
  qword_102483380 = 0;
  qword_102483370 = 0;
  uint64_t v59 = (char *)operator new(0x110uLL);
  uint64_t v60 = 0;
  qword_102483370 = (uint64_t)v59;
  qword_102483378 = (uint64_t)v59;
  qword_102483380 = (uint64_t)(v59 + 272);
  do
  {
    *(_OWORD *)&v59[v60 * 16] = v345[v60];
    ++v60;
  }
  while (v60 != 17);
  qword_102483378 = (uint64_t)(v59 + 272);
  xmmword_102483388 = xmmword_101D9F280;
  unk_102483398 = xmmword_101D9F290;
  sub_100134750(&qword_1024833A8, "Shanghai-9");
  v344[0] = xmmword_101D9F2A0;
  v344[1] = xmmword_101D9F2B0;
  v344[2] = xmmword_101D9F2C0;
  v344[3] = xmmword_101D9F2D0;
  v344[4] = xmmword_101D9F2E0;
  v344[5] = xmmword_101D9F2A0;
  qword_1024833C8 = 0;
  qword_1024833D0 = 0;
  qword_1024833C0 = 0;
  long long v61 = (char *)operator new(0x60uLL);
  uint64_t v62 = 0;
  qword_1024833C0 = (uint64_t)v61;
  qword_1024833C8 = (uint64_t)v61;
  qword_1024833D0 = (uint64_t)(v61 + 96);
  do
  {
    float v63 = &v61[v62 * 16];
    long long v64 = v344[v62 + 1];
    *(_OWORD *)float v63 = v344[v62];
    *((_OWORD *)v63 + 1) = v64;
    v62 += 2;
  }
  while (v62 != 6);
  qword_1024833C8 = (uint64_t)(v61 + 96);
  xmmword_1024833D8 = xmmword_101D9F2F0;
  unk_1024833E8 = xmmword_101D9F300;
  sub_100134750(&qword_1024833F8, "Shanghai-10");
  v343[0] = xmmword_101D9F310;
  v343[1] = xmmword_101D9F320;
  v343[2] = xmmword_101D9F330;
  v343[3] = xmmword_101D9F340;
  v343[4] = xmmword_101D9F350;
  v343[5] = xmmword_101D9F360;
  v343[6] = xmmword_101D9F370;
  v343[7] = xmmword_101D9F380;
  v343[8] = xmmword_101D9F390;
  v343[9] = xmmword_101D9F3A0;
  v343[10] = xmmword_101D9F3B0;
  v343[11] = xmmword_101D9F3C0;
  v343[12] = xmmword_101D9F3D0;
  v343[13] = xmmword_101D9F3E0;
  v343[14] = xmmword_101D9F310;
  qword_102483418 = 0;
  qword_102483420 = 0;
  qword_102483410 = 0;
  uint64_t v65 = (char *)operator new(0xF0uLL);
  uint64_t v66 = 0;
  qword_102483410 = (uint64_t)v65;
  qword_102483418 = (uint64_t)v65;
  qword_102483420 = (uint64_t)(v65 + 240);
  do
  {
    *(_OWORD *)&v65[v66 * 16] = v343[v66];
    ++v66;
  }
  while (v66 != 15);
  qword_102483418 = (uint64_t)(v65 + 240);
  xmmword_102483428 = xmmword_101D9F3F0;
  unk_102483438 = xmmword_101D9F400;
  sub_100134750(&qword_102483448, "Beijing-1");
  v342[0] = xmmword_101D9F410;
  v342[1] = xmmword_101D9F420;
  v342[2] = xmmword_101D9F430;
  v342[3] = xmmword_101D9F440;
  v342[4] = xmmword_101D9F410;
  qword_102483468 = 0;
  qword_102483470 = 0;
  qword_102483460 = 0;
  double v67 = (char *)operator new(0x50uLL);
  uint64_t v68 = 0;
  qword_102483460 = (uint64_t)v67;
  qword_102483468 = (uint64_t)v67;
  qword_102483470 = (uint64_t)(v67 + 80);
  do
  {
    *(_OWORD *)&v67[v68 * 16] = v342[v68];
    ++v68;
  }
  while (v68 != 5);
  qword_102483468 = (uint64_t)(v67 + 80);
  xmmword_102483478 = xmmword_101D9F410;
  unk_102483488 = xmmword_101D9F450;
  sub_100134750(&qword_102483498, "Beijing-2");
  v341[0] = xmmword_101D9F460;
  v341[1] = xmmword_101D9F470;
  v341[2] = xmmword_101D9F480;
  v341[3] = xmmword_101D9F490;
  v341[4] = xmmword_101D9F4A0;
  v341[5] = xmmword_101D9F4B0;
  v341[6] = xmmword_101D9F460;
  qword_1024834B8 = 0;
  qword_1024834C0 = 0;
  qword_1024834B0 = 0;
  uint64_t v69 = (char *)operator new(0x70uLL);
  uint64_t v70 = 0;
  qword_1024834B0 = (uint64_t)v69;
  qword_1024834B8 = (uint64_t)v69;
  qword_1024834C0 = (uint64_t)(v69 + 112);
  do
  {
    *(_OWORD *)&v69[v70 * 16] = v341[v70];
    ++v70;
  }
  while (v70 != 7);
  qword_1024834B8 = (uint64_t)(v69 + 112);
  xmmword_1024834C8 = xmmword_101D9F4C0;
  unk_1024834D8 = xmmword_101D9F4D0;
  sub_100134750(&qword_1024834E8, "Beijing-3");
  v340[0] = xmmword_101D9F4E0;
  v340[1] = xmmword_101D9F4F0;
  v340[2] = xmmword_101D9F500;
  v340[3] = xmmword_101D9F510;
  v340[4] = xmmword_101D9F520;
  v340[5] = xmmword_101D9F530;
  v340[6] = xmmword_101D9F4E0;
  qword_102483508 = 0;
  qword_102483510 = 0;
  qword_102483500 = 0;
  uint64_t v71 = (char *)operator new(0x70uLL);
  uint64_t v72 = 0;
  qword_102483500 = (uint64_t)v71;
  qword_102483508 = (uint64_t)v71;
  qword_102483510 = (uint64_t)(v71 + 112);
  do
  {
    *(_OWORD *)&v71[v72 * 16] = v340[v72];
    ++v72;
  }
  while (v72 != 7);
  qword_102483508 = (uint64_t)(v71 + 112);
  xmmword_102483518 = xmmword_101D9F540;
  unk_102483528 = xmmword_101D9F550;
  sub_100134750(&qword_102483538, "Beijing-4");
  v339[0] = xmmword_101D9F560;
  v339[1] = xmmword_101D9F570;
  v339[2] = xmmword_101D9F580;
  v339[3] = xmmword_101D9F590;
  v339[4] = xmmword_101D9F5A0;
  v339[5] = xmmword_101D9F5B0;
  v339[6] = xmmword_101D9F5C0;
  v339[7] = xmmword_101D9F5D0;
  v339[8] = xmmword_101D9F5E0;
  v339[9] = xmmword_101D9F560;
  qword_102483558 = 0;
  qword_102483560 = 0;
  qword_102483550 = 0;
  uint64_t v73 = (char *)operator new(0xA0uLL);
  uint64_t v74 = 0;
  qword_102483550 = (uint64_t)v73;
  qword_102483558 = (uint64_t)v73;
  qword_102483560 = (uint64_t)(v73 + 160);
  do
  {
    unsigned int v75 = &v73[v74 * 16];
    long long v76 = v339[v74 + 1];
    *(_OWORD *)unsigned int v75 = v339[v74];
    *((_OWORD *)v75 + 1) = v76;
    v74 += 2;
  }
  while (v74 != 10);
  qword_102483558 = (uint64_t)(v73 + 160);
  xmmword_102483568 = xmmword_101D9F580;
  unk_102483578 = xmmword_101D9F5F0;
  sub_100134750(&qword_102483588, "Beijing-5");
  v338[0] = xmmword_101D9F600;
  v338[1] = xmmword_101D9F610;
  v338[2] = xmmword_101D9F620;
  v338[3] = xmmword_101D9F630;
  v338[4] = xmmword_101D9F600;
  qword_1024835A8 = 0;
  qword_1024835B0 = 0;
  qword_1024835A0 = 0;
  int v77 = (char *)operator new(0x50uLL);
  uint64_t v78 = 0;
  qword_1024835A0 = (uint64_t)v77;
  qword_1024835A8 = (uint64_t)v77;
  qword_1024835B0 = (uint64_t)(v77 + 80);
  do
  {
    *(_OWORD *)&v77[v78 * 16] = v338[v78];
    ++v78;
  }
  while (v78 != 5);
  qword_1024835A8 = (uint64_t)(v77 + 80);
  xmmword_1024835B8 = xmmword_101D9F600;
  unk_1024835C8 = xmmword_101D9F640;
  sub_100134750(&qword_1024835D8, "Beijing-6");
  v337[0] = xmmword_101D9F650;
  v337[1] = xmmword_101D9F660;
  v337[2] = xmmword_101D9F670;
  v337[3] = xmmword_101D9F680;
  v337[4] = xmmword_101D9F690;
  v337[5] = xmmword_101D9F6A0;
  v337[6] = xmmword_101D9F650;
  qword_1024835F8 = 0;
  qword_102483600 = 0;
  qword_1024835F0 = 0;
  uint64_t v79 = (char *)operator new(0x70uLL);
  uint64_t v80 = 0;
  qword_1024835F0 = (uint64_t)v79;
  qword_1024835F8 = (uint64_t)v79;
  qword_102483600 = (uint64_t)(v79 + 112);
  do
  {
    *(_OWORD *)&v79[v80 * 16] = v337[v80];
    ++v80;
  }
  while (v80 != 7);
  qword_1024835F8 = (uint64_t)(v79 + 112);
  xmmword_102483608 = xmmword_101D9F6B0;
  unk_102483618 = xmmword_101D9F6C0;
  sub_100134750(&qword_102483628, "Beijing-7");
  v336[0] = xmmword_101D9F6D0;
  v336[1] = xmmword_101D9F6E0;
  v336[2] = xmmword_101D9F6F0;
  v336[3] = xmmword_101D9F700;
  v336[4] = xmmword_101D9F710;
  v336[5] = xmmword_101D9F720;
  v336[6] = xmmword_101D9F730;
  v336[7] = xmmword_101D9F740;
  v336[8] = xmmword_101D9F6D0;
  qword_102483648 = 0;
  qword_102483650 = 0;
  qword_102483640 = 0;
  uint64_t v81 = (char *)operator new(0x90uLL);
  uint64_t v82 = 0;
  qword_102483640 = (uint64_t)v81;
  qword_102483648 = (uint64_t)v81;
  qword_102483650 = (uint64_t)(v81 + 144);
  do
  {
    *(_OWORD *)&v81[v82 * 16] = v336[v82];
    ++v82;
  }
  while (v82 != 9);
  qword_102483648 = (uint64_t)(v81 + 144);
  xmmword_102483658 = xmmword_101D9F750;
  unk_102483668 = xmmword_101D9F760;
  sub_100134750(&qword_102483678, "Beijing-8");
  v335[0] = xmmword_101D9F770;
  v335[1] = xmmword_101D9F780;
  v335[2] = xmmword_101D9F790;
  v335[3] = xmmword_101D9F7A0;
  v335[4] = xmmword_101D9F770;
  qword_102483698 = 0;
  qword_1024836A0 = 0;
  qword_102483690 = 0;
  uint64_t v83 = (char *)operator new(0x50uLL);
  uint64_t v84 = 0;
  qword_102483690 = (uint64_t)v83;
  qword_102483698 = (uint64_t)v83;
  qword_1024836A0 = (uint64_t)(v83 + 80);
  do
  {
    *(_OWORD *)&v83[v84 * 16] = v335[v84];
    ++v84;
  }
  while (v84 != 5);
  qword_102483698 = (uint64_t)(v83 + 80);
  xmmword_1024836A8 = xmmword_101D9F770;
  unk_1024836B8 = xmmword_101D9F7B0;
  sub_100134750(&qword_1024836C8, "Beijing-9");
  v334[0] = xmmword_101D9F7C0;
  v334[1] = xmmword_101D9F7D0;
  v334[2] = xmmword_101D9F7E0;
  v334[3] = xmmword_101D9F7F0;
  v334[4] = xmmword_101D9F7C0;
  qword_1024836E8 = 0;
  qword_1024836F0 = 0;
  qword_1024836E0 = 0;
  double v85 = (char *)operator new(0x50uLL);
  uint64_t v86 = 0;
  qword_1024836E0 = (uint64_t)v85;
  qword_1024836E8 = (uint64_t)v85;
  qword_1024836F0 = (uint64_t)(v85 + 80);
  do
  {
    *(_OWORD *)&v85[v86 * 16] = v334[v86];
    ++v86;
  }
  while (v86 != 5);
  qword_1024836E8 = (uint64_t)(v85 + 80);
  xmmword_1024836F8 = xmmword_101D9F800;
  unk_102483708 = xmmword_101D9F7E0;
  sub_100134750(&qword_102483718, "Paris-1");
  v333[0] = xmmword_101D9F810;
  v333[1] = xmmword_101D9F820;
  v333[2] = xmmword_101D9F830;
  v333[3] = xmmword_101D9F840;
  v333[4] = xmmword_101D9F850;
  v333[5] = xmmword_101D9F860;
  v333[6] = xmmword_101D9F870;
  v333[7] = xmmword_101D9F880;
  v333[8] = xmmword_101D9F890;
  v333[9] = xmmword_101D9F8A0;
  v333[10] = xmmword_101D9F8B0;
  v333[11] = xmmword_101D9F8C0;
  v333[12] = xmmword_101D9F8D0;
  v333[13] = xmmword_101D9F8E0;
  v333[14] = xmmword_101D9F8F0;
  v333[15] = xmmword_101D9F900;
  v333[16] = xmmword_101D9F910;
  v333[17] = xmmword_101D9F920;
  v333[18] = xmmword_101D9F930;
  v333[19] = xmmword_101D9F940;
  v333[20] = xmmword_101D9F950;
  v333[21] = xmmword_101D9F960;
  v333[22] = xmmword_101D9F810;
  qword_102483730 = 0;
  qword_102483738 = 0;
  qword_102483740 = 0;
  int v87 = (char *)operator new(0x170uLL);
  uint64_t v88 = 0;
  qword_102483730 = (uint64_t)v87;
  qword_102483738 = (uint64_t)v87;
  qword_102483740 = (uint64_t)(v87 + 368);
  do
  {
    *(_OWORD *)&v87[v88 * 16] = v333[v88];
    ++v88;
  }
  while (v88 != 23);
  qword_102483738 = (uint64_t)(v87 + 368);
  xmmword_102483748 = xmmword_101D9F970;
  unk_102483758 = xmmword_101D9F980;
  sub_100134750(&qword_102483768, "Paris-2");
  v332[0] = xmmword_101D9F990;
  v332[1] = xmmword_101D9F9A0;
  v332[2] = xmmword_101D9F9B0;
  v332[3] = xmmword_101D9F9C0;
  v332[4] = xmmword_101D9F9D0;
  v332[5] = xmmword_101D9F9E0;
  v332[6] = xmmword_101D9F9F0;
  v332[7] = xmmword_101D9FA00;
  v332[8] = xmmword_101D9FA10;
  v332[9] = xmmword_101D9FA20;
  v332[10] = xmmword_101D9FA30;
  v332[11] = xmmword_101D9FA40;
  v332[12] = xmmword_101D9FA50;
  v332[13] = xmmword_101D9FA60;
  v332[14] = xmmword_101D9FA70;
  v332[15] = xmmword_101D9FA80;
  v332[16] = xmmword_101D9F990;
  qword_102483788 = 0;
  qword_102483790 = 0;
  qword_102483780 = 0;
  double v89 = (char *)operator new(0x110uLL);
  uint64_t v90 = 0;
  qword_102483780 = (uint64_t)v89;
  qword_102483788 = (uint64_t)v89;
  qword_102483790 = (uint64_t)(v89 + 272);
  do
  {
    *(_OWORD *)&v89[v90 * 16] = v332[v90];
    ++v90;
  }
  while (v90 != 17);
  qword_102483788 = (uint64_t)(v89 + 272);
  xmmword_102483798 = xmmword_101D9FA90;
  unk_1024837A8 = xmmword_101D9FAA0;
  sub_100134750(&qword_1024837B8, "London-1");
  v331[0] = xmmword_101D9FAB0;
  v331[1] = xmmword_101D9FAC0;
  v331[2] = xmmword_101D9FAD0;
  v331[3] = xmmword_101D9FAE0;
  v331[4] = xmmword_101D9FAF0;
  v331[5] = xmmword_101D9FB00;
  v331[6] = xmmword_101D9FB10;
  v331[7] = xmmword_101D9FB20;
  v331[8] = xmmword_101D9FB30;
  v331[9] = xmmword_101D9FB40;
  v331[10] = xmmword_101D9FB50;
  v331[11] = xmmword_101D9FB60;
  v331[12] = xmmword_101D9FB70;
  v331[13] = xmmword_101D9FB80;
  v331[14] = xmmword_101D9FB90;
  v331[15] = xmmword_101D9FAB0;
  qword_1024837D8 = 0;
  qword_1024837E0 = 0;
  qword_1024837D0 = 0;
  int v91 = (char *)operator new(0x100uLL);
  uint64_t v92 = 0;
  qword_1024837D0 = (uint64_t)v91;
  qword_1024837D8 = (uint64_t)v91;
  qword_1024837E0 = (uint64_t)(v91 + 256);
  do
  {
    BOOL v93 = &v91[v92 * 16];
    long long v94 = v331[v92 + 1];
    *(_OWORD *)BOOL v93 = v331[v92];
    *((_OWORD *)v93 + 1) = v94;
    v92 += 2;
  }
  while (v92 != 16);
  qword_1024837D8 = (uint64_t)(v91 + 256);
  xmmword_1024837E8 = xmmword_101D9FBA0;
  unk_1024837F8 = xmmword_101D9FBB0;
  sub_100134750(&qword_102483808, "London-2");
  v330[0] = xmmword_101D9FBC0;
  v330[1] = xmmword_101D9FBD0;
  v330[2] = xmmword_101D9FBE0;
  v330[3] = xmmword_101D9FBF0;
  v330[4] = xmmword_101D9FC00;
  v330[5] = xmmword_101D9FBC0;
  qword_102483828 = 0;
  qword_102483830 = 0;
  qword_102483820 = 0;
  double v95 = (char *)operator new(0x60uLL);
  uint64_t v96 = 0;
  qword_102483820 = (uint64_t)v95;
  qword_102483828 = (uint64_t)v95;
  qword_102483830 = (uint64_t)(v95 + 96);
  do
  {
    uint64_t v97 = &v95[v96 * 16];
    long long v98 = v330[v96 + 1];
    *(_OWORD *)uint64_t v97 = v330[v96];
    *((_OWORD *)v97 + 1) = v98;
    v96 += 2;
  }
  while (v96 != 6);
  qword_102483828 = (uint64_t)(v95 + 96);
  xmmword_102483838 = xmmword_101D9FC10;
  unk_102483848 = xmmword_101D9FC20;
  sub_100134750(&qword_102483858, "London-3");
  v329[0] = xmmword_101D9FC30;
  v329[1] = xmmword_101D9FC40;
  v329[2] = xmmword_101D9FC50;
  v329[3] = xmmword_101D9FC60;
  v329[4] = xmmword_101D9FC70;
  v329[5] = xmmword_101D9FC80;
  v329[6] = xmmword_101D9FC90;
  v329[7] = xmmword_101D9FC30;
  qword_102483878 = 0;
  qword_102483880 = 0;
  qword_102483870 = 0;
  int v99 = (char *)operator new(0x80uLL);
  uint64_t v100 = 0;
  qword_102483870 = (uint64_t)v99;
  qword_102483878 = (uint64_t)v99;
  qword_102483880 = (uint64_t)(v99 + 128);
  do
  {
    uint64_t v101 = &v99[v100 * 16];
    long long v102 = v329[v100 + 1];
    *(_OWORD *)uint64_t v101 = v329[v100];
    *((_OWORD *)v101 + 1) = v102;
    v100 += 2;
  }
  while (v100 != 8);
  qword_102483878 = (uint64_t)(v99 + 128);
  xmmword_102483888 = xmmword_101D9FCA0;
  unk_102483898 = xmmword_101D9FCB0;
  sub_100134750(&qword_1024838A8, "London-4");
  v328[0] = xmmword_101D9FCC0;
  v328[1] = xmmword_101D9FCD0;
  v328[2] = xmmword_101D9FCE0;
  v328[3] = xmmword_101D9FCF0;
  v328[4] = xmmword_101D9FD00;
  v328[5] = xmmword_101D9FCC0;
  qword_1024838C8 = 0;
  qword_1024838D0 = 0;
  qword_1024838C0 = 0;
  int v103 = (char *)operator new(0x60uLL);
  uint64_t v104 = 0;
  qword_1024838C0 = (uint64_t)v103;
  qword_1024838C8 = (uint64_t)v103;
  qword_1024838D0 = (uint64_t)(v103 + 96);
  do
  {
    int v105 = &v103[v104 * 16];
    long long v106 = v328[v104 + 1];
    *(_OWORD *)int v105 = v328[v104];
    *((_OWORD *)v105 + 1) = v106;
    v104 += 2;
  }
  while (v104 != 6);
  qword_1024838C8 = (uint64_t)(v103 + 96);
  xmmword_1024838D8 = xmmword_101D9FD10;
  unk_1024838E8 = xmmword_101D9FD20;
  sub_100134750(&qword_1024838F8, "London-5");
  v327[0] = xmmword_101D9FD30;
  v327[1] = xmmword_101D9FD40;
  v327[2] = xmmword_101D9FD50;
  v327[3] = xmmword_101D9FD60;
  v327[4] = xmmword_101D9FD70;
  v327[5] = xmmword_101D9FD80;
  v327[6] = xmmword_101D9FD90;
  v327[7] = xmmword_101D9FDA0;
  v327[8] = xmmword_101D9FDB0;
  v327[9] = xmmword_101D9FD30;
  qword_102483918 = 0;
  qword_102483920 = 0;
  qword_102483910 = 0;
  uint64_t v107 = (char *)operator new(0xA0uLL);
  uint64_t v108 = 0;
  qword_102483910 = (uint64_t)v107;
  qword_102483918 = (uint64_t)v107;
  qword_102483920 = (uint64_t)(v107 + 160);
  do
  {
    uint64_t v109 = &v107[v108 * 16];
    long long v110 = v327[v108 + 1];
    *(_OWORD *)uint64_t v109 = v327[v108];
    *((_OWORD *)v109 + 1) = v110;
    v108 += 2;
  }
  while (v108 != 10);
  qword_102483918 = (uint64_t)(v107 + 160);
  xmmword_102483928 = xmmword_101D9FDC0;
  unk_102483938 = xmmword_101D9FDD0;
  sub_100134750(&qword_102483948, "London-6");
  v326[0] = xmmword_101D9FDE0;
  v326[1] = xmmword_101D9FDF0;
  v326[2] = xmmword_101D9FE00;
  v326[3] = xmmword_101D9FE10;
  v326[4] = xmmword_101D9FE20;
  v326[5] = xmmword_101D9FE30;
  v326[6] = xmmword_101D9FE40;
  v326[7] = xmmword_101D9FE50;
  v326[8] = xmmword_101D9FE60;
  v326[9] = xmmword_101D9FE70;
  v326[10] = xmmword_101D9FE80;
  v326[11] = xmmword_101D9FE90;
  v326[12] = xmmword_101D9FDE0;
  qword_102483968 = 0;
  qword_102483970 = 0;
  qword_102483960 = 0;
  int v111 = (char *)operator new(0xD0uLL);
  uint64_t v112 = 0;
  qword_102483960 = (uint64_t)v111;
  qword_102483968 = (uint64_t)v111;
  qword_102483970 = (uint64_t)(v111 + 208);
  do
  {
    *(_OWORD *)&v111[v112 * 16] = v326[v112];
    ++v112;
  }
  while (v112 != 13);
  qword_102483968 = (uint64_t)(v111 + 208);
  xmmword_102483978 = xmmword_101D9FEA0;
  unk_102483988 = xmmword_101D9FEB0;
  sub_100134750(&qword_102483998, "London-7");
  v325[0] = xmmword_101D9FEC0;
  v325[1] = xmmword_101D9FED0;
  v325[2] = xmmword_101D9FEE0;
  v325[3] = xmmword_101D9FEF0;
  v325[4] = xmmword_101D9FF00;
  v325[5] = xmmword_101D9FF10;
  v325[6] = xmmword_101D9FF20;
  v325[7] = xmmword_101D9FF30;
  v325[8] = xmmword_101D9FF40;
  v325[9] = xmmword_101D9FF50;
  v325[10] = xmmword_101D9FF60;
  v325[11] = xmmword_101D9FF70;
  v325[12] = xmmword_101D9FF80;
  v325[13] = xmmword_101D9FF90;
  v325[14] = xmmword_101D9FFA0;
  v325[15] = xmmword_101D9FFB0;
  v325[16] = xmmword_101D9FEC0;
  qword_1024839B8 = 0;
  qword_1024839C0 = 0;
  qword_1024839B0 = 0;
  uint64_t v113 = (char *)operator new(0x110uLL);
  uint64_t v114 = 0;
  qword_1024839B0 = (uint64_t)v113;
  qword_1024839B8 = (uint64_t)v113;
  qword_1024839C0 = (uint64_t)(v113 + 272);
  do
  {
    *(_OWORD *)&v113[v114 * 16] = v325[v114];
    ++v114;
  }
  while (v114 != 17);
  qword_1024839B8 = (uint64_t)(v113 + 272);
  xmmword_1024839C8 = xmmword_101D9FF30;
  unk_1024839D8 = xmmword_101D9FFC0;
  sub_100134750(&qword_1024839E8, "Frankfurt-1");
  v324[0] = xmmword_101D9FFD0;
  v324[1] = xmmword_101D9FFE0;
  v324[2] = xmmword_101D9FFF0;
  v324[3] = xmmword_101DA0000;
  v324[4] = xmmword_101DA0010;
  v324[5] = xmmword_101DA0020;
  v324[6] = xmmword_101DA0030;
  v324[7] = xmmword_101D9FFD0;
  qword_102483A08 = 0;
  qword_102483A10 = 0;
  qword_102483A00 = 0;
  uint64_t v115 = (char *)operator new(0x80uLL);
  uint64_t v116 = 0;
  qword_102483A00 = (uint64_t)v115;
  qword_102483A08 = (uint64_t)v115;
  qword_102483A10 = (uint64_t)(v115 + 128);
  do
  {
    BOOL v117 = &v115[v116 * 16];
    long long v118 = v324[v116 + 1];
    *(_OWORD *)BOOL v117 = v324[v116];
    *((_OWORD *)v117 + 1) = v118;
    v116 += 2;
  }
  while (v116 != 8);
  qword_102483A08 = (uint64_t)(v115 + 128);
  xmmword_102483A18 = xmmword_101DA0040;
  unk_102483A28 = xmmword_101DA0050;
  sub_100134750(&qword_102483A38, "Frankfurt-2");
  v323[0] = xmmword_101DA0060;
  v323[1] = xmmword_101DA0070;
  v323[2] = xmmword_101DA0080;
  v323[3] = xmmword_101DA0090;
  v323[4] = xmmword_101DA00A0;
  v323[5] = xmmword_101DA00B0;
  v323[6] = xmmword_101DA0060;
  qword_102483A58 = 0;
  qword_102483A60 = 0;
  qword_102483A50 = 0;
  uint64_t v119 = (char *)operator new(0x70uLL);
  uint64_t v120 = 0;
  qword_102483A50 = (uint64_t)v119;
  qword_102483A58 = (uint64_t)v119;
  qword_102483A60 = (uint64_t)(v119 + 112);
  do
  {
    *(_OWORD *)&v119[v120 * 16] = v323[v120];
    ++v120;
  }
  while (v120 != 7);
  qword_102483A58 = (uint64_t)(v119 + 112);
  xmmword_102483A68 = xmmword_101DA00C0;
  unk_102483A78 = xmmword_101DA00D0;
  sub_100134750(&qword_102483A88, "Frankfurt-3");
  v322[0] = xmmword_101DA00E0;
  v322[1] = xmmword_101DA00F0;
  v322[2] = xmmword_101DA0100;
  v322[3] = xmmword_101DA0110;
  v322[4] = xmmword_101DA0120;
  v322[5] = xmmword_101DA0130;
  v322[6] = xmmword_101DA0140;
  v322[7] = xmmword_101DA0150;
  v322[8] = xmmword_101DA0160;
  v322[9] = xmmword_101DA00E0;
  qword_102483AA8 = 0;
  qword_102483AB0 = 0;
  qword_102483AA0 = 0;
  uint64_t v121 = (char *)operator new(0xA0uLL);
  uint64_t v122 = 0;
  qword_102483AA0 = (uint64_t)v121;
  qword_102483AA8 = (uint64_t)v121;
  qword_102483AB0 = (uint64_t)(v121 + 160);
  do
  {
    uint64_t v123 = &v121[v122 * 16];
    long long v124 = v322[v122 + 1];
    *(_OWORD *)uint64_t v123 = v322[v122];
    *((_OWORD *)v123 + 1) = v124;
    v122 += 2;
  }
  while (v122 != 10);
  qword_102483AA8 = (uint64_t)(v121 + 160);
  xmmword_102483AB8 = xmmword_101DA0170;
  unk_102483AC8 = xmmword_101DA0180;
  sub_100134750(&qword_102483AD8, "Frankfurt-4");
  v321[0] = xmmword_101DA0190;
  v321[1] = xmmword_101DA01A0;
  v321[2] = xmmword_101DA01B0;
  v321[3] = xmmword_101DA01C0;
  v321[4] = xmmword_101DA01D0;
  v321[5] = xmmword_101DA01E0;
  v321[6] = xmmword_101DA01F0;
  v321[7] = xmmword_101DA0200;
  v321[8] = xmmword_101DA0210;
  v321[9] = xmmword_101DA0220;
  v321[10] = xmmword_101DA0230;
  v321[11] = xmmword_101DA0190;
  qword_102483AF8 = 0;
  qword_102483B00 = 0;
  qword_102483AF0 = 0;
  __int16 v125 = (char *)operator new(0xC0uLL);
  uint64_t v126 = 0;
  qword_102483AF0 = (uint64_t)v125;
  qword_102483AF8 = (uint64_t)v125;
  qword_102483B00 = (uint64_t)(v125 + 192);
  do
  {
    __int16 v127 = &v125[v126 * 16];
    long long v128 = v321[v126 + 1];
    *(_OWORD *)__int16 v127 = v321[v126];
    *((_OWORD *)v127 + 1) = v128;
    v126 += 2;
  }
  while (v126 != 12);
  qword_102483AF8 = (uint64_t)(v125 + 192);
  xmmword_102483B08 = xmmword_101DA0240;
  unk_102483B18 = xmmword_101DA0250;
  sub_100134750(&qword_102483B28, "Frankfurt-5");
  v320[0] = xmmword_101DA0260;
  v320[1] = xmmword_101DA0270;
  v320[2] = xmmword_101DA0280;
  v320[3] = xmmword_101DA0290;
  v320[4] = xmmword_101DA02A0;
  v320[5] = xmmword_101DA02B0;
  v320[6] = xmmword_101DA02C0;
  v320[7] = xmmword_101DA0260;
  qword_102483B48 = 0;
  qword_102483B50 = 0;
  qword_102483B40 = 0;
  __int16 v129 = (char *)operator new(0x80uLL);
  uint64_t v130 = 0;
  qword_102483B40 = (uint64_t)v129;
  qword_102483B48 = (uint64_t)v129;
  qword_102483B50 = (uint64_t)(v129 + 128);
  do
  {
    __int16 v131 = &v129[v130 * 16];
    long long v132 = v320[v130 + 1];
    *(_OWORD *)__int16 v131 = v320[v130];
    *((_OWORD *)v131 + 1) = v132;
    v130 += 2;
  }
  while (v130 != 8);
  qword_102483B48 = (uint64_t)(v129 + 128);
  xmmword_102483B58 = xmmword_101DA02D0;
  unk_102483B68 = xmmword_101DA02E0;
  sub_100134750(&qword_102483B78, "Frankfurt-6");
  v319[0] = xmmword_101DA02F0;
  v319[1] = xmmword_101DA0300;
  v319[2] = xmmword_101DA0310;
  v319[3] = xmmword_101DA0320;
  v319[4] = xmmword_101DA0330;
  v319[5] = xmmword_101DA02F0;
  qword_102483B98 = 0;
  qword_102483BA0 = 0;
  qword_102483B90 = 0;
  __int16 v133 = (char *)operator new(0x60uLL);
  uint64_t v134 = 0;
  qword_102483B90 = (uint64_t)v133;
  qword_102483B98 = (uint64_t)v133;
  qword_102483BA0 = (uint64_t)(v133 + 96);
  do
  {
    __int16 v135 = &v133[v134 * 16];
    long long v136 = v319[v134 + 1];
    *(_OWORD *)__int16 v135 = v319[v134];
    *((_OWORD *)v135 + 1) = v136;
    v134 += 2;
  }
  while (v134 != 6);
  qword_102483B98 = (uint64_t)(v133 + 96);
  xmmword_102483BA8 = xmmword_101DA0340;
  unk_102483BB8 = xmmword_101DA0350;
  sub_100134750(&qword_102483BC8, "Stockholm-1");
  v318[0] = xmmword_101DA0360;
  v318[1] = xmmword_101DA0370;
  v318[2] = xmmword_101DA0380;
  v318[3] = xmmword_101DA0390;
  v318[4] = xmmword_101DA03A0;
  v318[5] = xmmword_101DA03B0;
  v318[6] = xmmword_101DA03C0;
  v318[7] = xmmword_101DA03D0;
  v318[8] = xmmword_101DA0360;
  qword_102483BE8 = 0;
  qword_102483BF0 = 0;
  qword_102483BE0 = 0;
  v137 = (char *)operator new(0x90uLL);
  uint64_t v138 = 0;
  qword_102483BE0 = (uint64_t)v137;
  qword_102483BE8 = (uint64_t)v137;
  qword_102483BF0 = (uint64_t)(v137 + 144);
  do
  {
    *(_OWORD *)&v137[v138 * 16] = v318[v138];
    ++v138;
  }
  while (v138 != 9);
  qword_102483BE8 = (uint64_t)(v137 + 144);
  xmmword_102483BF8 = xmmword_101DA03E0;
  unk_102483C08 = xmmword_101DA03F0;
  sub_100134750(&qword_102483C18, "Stockholm-2");
  v317[0] = xmmword_101DA0400;
  v317[1] = xmmword_101DA0410;
  v317[2] = xmmword_101DA0420;
  v317[3] = xmmword_101DA0430;
  v317[4] = xmmword_101DA0440;
  v317[5] = xmmword_101DA0450;
  v317[6] = xmmword_101DA0460;
  v317[7] = xmmword_101DA0470;
  v317[8] = xmmword_101DA0480;
  v317[9] = xmmword_101DA0490;
  v317[10] = xmmword_101DA04A0;
  v317[11] = xmmword_101DA04B0;
  v317[12] = xmmword_101DA04C0;
  v317[13] = xmmword_101DA04D0;
  v317[14] = xmmword_101DA04E0;
  v317[15] = xmmword_101DA04F0;
  v317[16] = xmmword_101DA0500;
  v317[17] = xmmword_101DA0510;
  v317[18] = xmmword_101DA0520;
  v317[19] = xmmword_101DA0530;
  v317[20] = xmmword_101DA0540;
  v317[21] = xmmword_101DA0550;
  v317[22] = xmmword_101DA0560;
  v317[23] = xmmword_101DA0570;
  v317[24] = xmmword_101DA0580;
  v317[25] = xmmword_101DA0400;
  qword_102483C30 = 0;
  qword_102483C38 = 0;
  qword_102483C40 = 0;
  v139 = (char *)operator new(0x1A0uLL);
  uint64_t v140 = 0;
  qword_102483C30 = (uint64_t)v139;
  qword_102483C38 = (uint64_t)v139;
  qword_102483C40 = (uint64_t)(v139 + 416);
  do
  {
    v141 = &v139[v140 * 16];
    long long v142 = v317[v140 + 1];
    *(_OWORD *)v141 = v317[v140];
    *((_OWORD *)v141 + 1) = v142;
    v140 += 2;
  }
  while (v140 != 26);
  qword_102483C38 = (uint64_t)(v139 + 416);
  xmmword_102483C48 = xmmword_101DA0590;
  unk_102483C58 = xmmword_101DA05A0;
  sub_100134750(&qword_102483C68, "Stockholm-3");
  v316[0] = xmmword_101DA05B0;
  v316[1] = xmmword_101DA05C0;
  v316[2] = xmmword_101DA05D0;
  v316[3] = xmmword_101DA05E0;
  v316[4] = xmmword_101DA05F0;
  v316[5] = xmmword_101DA0600;
  v316[6] = xmmword_101DA0610;
  v316[7] = xmmword_101DA0620;
  v316[8] = xmmword_101DA0630;
  v316[9] = xmmword_101DA0640;
  v316[10] = xmmword_101DA0650;
  v316[11] = xmmword_101DA0660;
  v316[12] = xmmword_101DA0670;
  v316[13] = xmmword_101DA0680;
  v316[14] = xmmword_101DA0690;
  v316[15] = xmmword_101DA06A0;
  v316[16] = xmmword_101DA06B0;
  v316[17] = xmmword_101DA05B0;
  qword_102483C80 = 0;
  qword_102483C88 = 0;
  qword_102483C90 = 0;
  int v143 = (char *)operator new(0x120uLL);
  uint64_t v144 = 0;
  qword_102483C80 = (uint64_t)v143;
  qword_102483C88 = (uint64_t)v143;
  qword_102483C90 = (uint64_t)(v143 + 288);
  do
  {
    v145 = &v143[v144 * 16];
    long long v146 = v316[v144 + 1];
    *(_OWORD *)v145 = v316[v144];
    *((_OWORD *)v145 + 1) = v146;
    v144 += 2;
  }
  while (v144 != 18);
  qword_102483C88 = (uint64_t)(v143 + 288);
  xmmword_102483C98 = xmmword_101DA06C0;
  unk_102483CA8 = xmmword_101DA06D0;
  sub_100134750(&qword_102483CB8, "Sydney-1");
  v315[0] = xmmword_101DA06E0;
  v315[1] = xmmword_101DA06F0;
  v315[2] = xmmword_101DA0700;
  v315[3] = xmmword_101DA0710;
  v315[4] = xmmword_101DA0720;
  v315[5] = xmmword_101DA0730;
  v315[6] = xmmword_101DA0740;
  v315[7] = xmmword_101DA0750;
  v315[8] = xmmword_101DA0760;
  v315[9] = xmmword_101DA0770;
  v315[10] = xmmword_101DA0780;
  v315[11] = xmmword_101DA0790;
  v315[12] = xmmword_101DA07A0;
  v315[13] = xmmword_101DA07B0;
  v315[14] = xmmword_101DA07C0;
  v315[15] = xmmword_101DA07D0;
  v315[16] = xmmword_101DA07E0;
  v315[17] = xmmword_101DA07F0;
  v315[18] = xmmword_101DA0800;
  v315[19] = xmmword_101DA0810;
  v315[20] = xmmword_101DA06E0;
  qword_102483CD0 = 0;
  qword_102483CD8 = 0;
  qword_102483CE0 = 0;
  v147 = (char *)operator new(0x150uLL);
  uint64_t v148 = 0;
  qword_102483CD0 = (uint64_t)v147;
  qword_102483CD8 = (uint64_t)v147;
  qword_102483CE0 = (uint64_t)(v147 + 336);
  do
  {
    *(_OWORD *)&v147[v148 * 16] = v315[v148];
    ++v148;
  }
  while (v148 != 21);
  qword_102483CD8 = (uint64_t)(v147 + 336);
  xmmword_102483CE8 = xmmword_101DA0820;
  unk_102483CF8 = xmmword_101DA0830;
  sub_100134750(&qword_102483D08, "Sydney-2");
  v314[0] = xmmword_101DA0840;
  v314[1] = xmmword_101DA0850;
  v314[2] = xmmword_101DA0860;
  v314[3] = xmmword_101DA0870;
  v314[4] = xmmword_101DA0880;
  v314[5] = xmmword_101DA0890;
  v314[6] = xmmword_101DA08A0;
  v314[7] = xmmword_101DA08B0;
  v314[8] = xmmword_101DA08C0;
  v314[9] = xmmword_101DA0840;
  qword_102483D28 = 0;
  qword_102483D30 = 0;
  qword_102483D20 = 0;
  v149 = (char *)operator new(0xA0uLL);
  uint64_t v150 = 0;
  qword_102483D20 = (uint64_t)v149;
  qword_102483D28 = (uint64_t)v149;
  qword_102483D30 = (uint64_t)(v149 + 160);
  do
  {
    double v151 = &v149[v150 * 16];
    long long v152 = v314[v150 + 1];
    *(_OWORD *)double v151 = v314[v150];
    *((_OWORD *)v151 + 1) = v152;
    v150 += 2;
  }
  while (v150 != 10);
  qword_102483D28 = (uint64_t)(v149 + 160);
  xmmword_102483D38 = xmmword_101DA08D0;
  unk_102483D48 = xmmword_101DA08E0;
  sub_100134750(&qword_102483D58, "Sydney-3");
  v313[0] = xmmword_101DA08F0;
  v313[1] = xmmword_101DA0900;
  v313[2] = xmmword_101DA0910;
  v313[3] = xmmword_101DA0920;
  v313[4] = xmmword_101DA0930;
  v313[5] = xmmword_101DA08F0;
  qword_102483D78 = 0;
  qword_102483D80 = 0;
  qword_102483D70 = 0;
  v153 = (char *)operator new(0x60uLL);
  uint64_t v154 = 0;
  qword_102483D70 = (uint64_t)v153;
  qword_102483D78 = (uint64_t)v153;
  qword_102483D80 = (uint64_t)(v153 + 96);
  do
  {
    v155 = &v153[v154 * 16];
    long long v156 = v313[v154 + 1];
    *(_OWORD *)v155 = v313[v154];
    *((_OWORD *)v155 + 1) = v156;
    v154 += 2;
  }
  while (v154 != 6);
  qword_102483D78 = (uint64_t)(v153 + 96);
  xmmword_102483D88 = xmmword_101DA0940;
  unk_102483D98 = xmmword_101DA0950;
  sub_100134750(&qword_102483DA8, "Sydney-4");
  v312[0] = xmmword_101DA0960;
  v312[1] = xmmword_101DA0970;
  v312[2] = xmmword_101DA0980;
  v312[3] = xmmword_101DA0990;
  v312[4] = xmmword_101DA09A0;
  v312[5] = xmmword_101DA09B0;
  v312[6] = xmmword_101DA09C0;
  v312[7] = xmmword_101DA09D0;
  v312[8] = xmmword_101DA0960;
  qword_102483DC8 = 0;
  qword_102483DD0 = 0;
  qword_102483DC0 = 0;
  v157 = (char *)operator new(0x90uLL);
  uint64_t v158 = 0;
  qword_102483DC0 = (uint64_t)v157;
  qword_102483DC8 = (uint64_t)v157;
  qword_102483DD0 = (uint64_t)(v157 + 144);
  do
  {
    *(_OWORD *)&v157[v158 * 16] = v312[v158];
    ++v158;
  }
  while (v158 != 9);
  qword_102483DC8 = (uint64_t)(v157 + 144);
  xmmword_102483DD8 = xmmword_101DA09E0;
  unk_102483DE8 = xmmword_101DA09F0;
  sub_100134750(&qword_102483DF8, "Dubai-1");
  v311[0] = xmmword_101DA0A00;
  v311[1] = xmmword_101DA0A10;
  v311[2] = xmmword_101DA0A20;
  v311[3] = xmmword_101DA0A30;
  v311[4] = xmmword_101DA0A40;
  v311[5] = xmmword_101DA0A50;
  v311[6] = xmmword_101DA0A60;
  v311[7] = xmmword_101DA0A00;
  qword_102483E18 = 0;
  qword_102483E20 = 0;
  qword_102483E10 = 0;
  v159 = (char *)operator new(0x80uLL);
  uint64_t v160 = 0;
  qword_102483E10 = (uint64_t)v159;
  qword_102483E18 = (uint64_t)v159;
  qword_102483E20 = (uint64_t)(v159 + 128);
  do
  {
    v161 = &v159[v160 * 16];
    long long v162 = v311[v160 + 1];
    *(_OWORD *)v161 = v311[v160];
    *((_OWORD *)v161 + 1) = v162;
    v160 += 2;
  }
  while (v160 != 8);
  qword_102483E18 = (uint64_t)(v159 + 128);
  xmmword_102483E28 = xmmword_101DA0A70;
  unk_102483E38 = xmmword_101DA0A80;
  sub_100134750(&qword_102483E48, "Dubai-2");
  v310[0] = xmmword_101DA0A90;
  v310[1] = xmmword_101DA0AA0;
  v310[2] = xmmword_101DA0AB0;
  v310[3] = xmmword_101DA0AC0;
  v310[4] = xmmword_101DA0AD0;
  v310[5] = xmmword_101DA0AE0;
  v310[6] = xmmword_101DA0AF0;
  v310[7] = xmmword_101DA0A90;
  qword_102483E68 = 0;
  qword_102483E70 = 0;
  qword_102483E60 = 0;
  v163 = (char *)operator new(0x80uLL);
  uint64_t v164 = 0;
  qword_102483E60 = (uint64_t)v163;
  qword_102483E68 = (uint64_t)v163;
  qword_102483E70 = (uint64_t)(v163 + 128);
  do
  {
    v165 = &v163[v164 * 16];
    long long v166 = v310[v164 + 1];
    *(_OWORD *)v165 = v310[v164];
    *((_OWORD *)v165 + 1) = v166;
    v164 += 2;
  }
  while (v164 != 8);
  qword_102483E68 = (uint64_t)(v163 + 128);
  xmmword_102483E78 = xmmword_101DA0B00;
  unk_102483E88 = xmmword_101DA0B10;
  sub_100134750(&qword_102483E98, "Dubai-3");
  v309[0] = xmmword_101DA0B20;
  v309[1] = xmmword_101DA0B30;
  v309[2] = xmmword_101DA0B40;
  v309[3] = xmmword_101DA0B50;
  v309[4] = xmmword_101DA0B60;
  v309[5] = xmmword_101DA0B70;
  v309[6] = xmmword_101DA0B80;
  v309[7] = xmmword_101DA0B90;
  v309[8] = xmmword_101DA0BA0;
  v309[9] = xmmword_101DA0B20;
  qword_102483EB8 = 0;
  qword_102483EC0 = 0;
  qword_102483EB0 = 0;
  v167 = (char *)operator new(0xA0uLL);
  uint64_t v168 = 0;
  qword_102483EB0 = (uint64_t)v167;
  qword_102483EB8 = (uint64_t)v167;
  qword_102483EC0 = (uint64_t)(v167 + 160);
  do
  {
    v169 = &v167[v168 * 16];
    long long v170 = v309[v168 + 1];
    *(_OWORD *)v169 = v309[v168];
    *((_OWORD *)v169 + 1) = v170;
    v168 += 2;
  }
  while (v168 != 10);
  qword_102483EB8 = (uint64_t)(v167 + 160);
  xmmword_102483EC8 = xmmword_101DA0BB0;
  unk_102483ED8 = xmmword_101DA0BC0;
  sub_100134750(&qword_102483EE8, "Mumbai-1");
  v308[0] = xmmword_101DA0BD0;
  v308[1] = xmmword_101DA0BE0;
  v308[2] = xmmword_101DA0BF0;
  v308[3] = xmmword_101DA0C00;
  v308[4] = xmmword_101DA0C10;
  v308[5] = xmmword_101DA0C20;
  v308[6] = xmmword_101DA0BD0;
  qword_102483F08 = 0;
  qword_102483F10 = 0;
  qword_102483F00 = 0;
  v171 = (char *)operator new(0x70uLL);
  uint64_t v172 = 0;
  qword_102483F00 = (uint64_t)v171;
  qword_102483F08 = (uint64_t)v171;
  qword_102483F10 = (uint64_t)(v171 + 112);
  do
  {
    *(_OWORD *)&v171[v172 * 16] = v308[v172];
    ++v172;
  }
  while (v172 != 7);
  qword_102483F08 = (uint64_t)(v171 + 112);
  xmmword_102483F18 = xmmword_101DA0C30;
  unk_102483F28 = xmmword_101DA0BD0;
  sub_100134750(&qword_102483F38, "Mumbai-2");
  v307[0] = xmmword_101DA0C40;
  v307[1] = xmmword_101DA0C50;
  v307[2] = xmmword_101DA0C60;
  v307[3] = xmmword_101DA0C70;
  v307[4] = xmmword_101DA0C80;
  v307[5] = xmmword_101DA0C90;
  v307[6] = xmmword_101DA0CA0;
  v307[7] = xmmword_101DA0CB0;
  v307[8] = xmmword_101DA0CC0;
  v307[9] = xmmword_101DA0CD0;
  v307[10] = xmmword_101DA0CE0;
  v307[11] = xmmword_101DA0C40;
  qword_102483F58 = 0;
  qword_102483F60 = 0;
  qword_102483F50 = 0;
  v173 = (char *)operator new(0xC0uLL);
  uint64_t v174 = 0;
  qword_102483F50 = (uint64_t)v173;
  qword_102483F58 = (uint64_t)v173;
  qword_102483F60 = (uint64_t)(v173 + 192);
  do
  {
    v175 = &v173[v174 * 16];
    long long v176 = v307[v174 + 1];
    *(_OWORD *)v175 = v307[v174];
    *((_OWORD *)v175 + 1) = v176;
    v174 += 2;
  }
  while (v174 != 12);
  qword_102483F58 = (uint64_t)(v173 + 192);
  xmmword_102483F68 = xmmword_101DA0CF0;
  unk_102483F78 = xmmword_101DA0D00;
  sub_100134750(&qword_102483F88, "Cairo-1");
  v306[0] = xmmword_101DA0D10;
  v306[1] = xmmword_101DA0D20;
  v306[2] = xmmword_101DA0D30;
  v306[3] = xmmword_101DA0D40;
  v306[4] = xmmword_101DA0D50;
  v306[5] = xmmword_101DA0D60;
  v306[6] = xmmword_101DA0D70;
  v306[7] = xmmword_101DA0D10;
  qword_102483FA8 = 0;
  qword_102483FB0 = 0;
  qword_102483FA0 = 0;
  v177 = (char *)operator new(0x80uLL);
  uint64_t v178 = 0;
  qword_102483FA0 = (uint64_t)v177;
  qword_102483FA8 = (uint64_t)v177;
  qword_102483FB0 = (uint64_t)(v177 + 128);
  do
  {
    v179 = &v177[v178 * 16];
    long long v180 = v306[v178 + 1];
    *(_OWORD *)v179 = v306[v178];
    *((_OWORD *)v179 + 1) = v180;
    v178 += 2;
  }
  while (v178 != 8);
  qword_102483FA8 = (uint64_t)(v177 + 128);
  xmmword_102483FB8 = xmmword_101DA0D80;
  unk_102483FC8 = xmmword_101DA0D90;
  sub_100134750(&qword_102483FD8, "Cairo-2");
  v305[0] = xmmword_101DA0DA0;
  v305[1] = xmmword_101DA0DB0;
  v305[2] = xmmword_101DA0DC0;
  v305[3] = xmmword_101DA0DD0;
  v305[4] = xmmword_101DA0DE0;
  v305[5] = xmmword_101DA0DA0;
  qword_102483FF8 = 0;
  qword_102484000 = 0;
  qword_102483FF0 = 0;
  v181 = (char *)operator new(0x60uLL);
  uint64_t v182 = 0;
  qword_102483FF0 = (uint64_t)v181;
  qword_102483FF8 = (uint64_t)v181;
  qword_102484000 = (uint64_t)(v181 + 96);
  do
  {
    v183 = &v181[v182 * 16];
    long long v184 = v305[v182 + 1];
    *(_OWORD *)v183 = v305[v182];
    *((_OWORD *)v183 + 1) = v184;
    v182 += 2;
  }
  while (v182 != 6);
  qword_102483FF8 = (uint64_t)(v181 + 96);
  xmmword_102484008 = xmmword_101DA0DF0;
  unk_102484018 = xmmword_101DA0E00;
  sub_100134750(&qword_102484028, "Cairo-3");
  v304[0] = xmmword_101DA0E10;
  v304[1] = xmmword_101DA0E20;
  v304[2] = xmmword_101DA0E30;
  v304[3] = xmmword_101DA0E40;
  v304[4] = xmmword_101DA0E10;
  qword_102484048 = 0;
  qword_102484050 = 0;
  qword_102484040 = 0;
  v185 = (char *)operator new(0x50uLL);
  uint64_t v186 = 0;
  qword_102484040 = (uint64_t)v185;
  qword_102484048 = (uint64_t)v185;
  qword_102484050 = (uint64_t)(v185 + 80);
  do
  {
    *(_OWORD *)&v185[v186 * 16] = v304[v186];
    ++v186;
  }
  while (v186 != 5);
  qword_102484048 = (uint64_t)(v185 + 80);
  xmmword_102484058 = xmmword_101DA0E50;
  unk_102484068 = xmmword_101DA0E60;
  sub_100134750(&qword_102484078, "Cairo-4");
  v303[0] = xmmword_101DA0E70;
  v303[1] = xmmword_101DA0E80;
  v303[2] = xmmword_101DA0E90;
  v303[3] = xmmword_101DA0EA0;
  v303[4] = xmmword_101DA0E70;
  qword_102484098 = 0;
  qword_1024840A0 = 0;
  qword_102484090 = 0;
  v187 = (char *)operator new(0x50uLL);
  uint64_t v188 = 0;
  qword_102484090 = (uint64_t)v187;
  qword_102484098 = (uint64_t)v187;
  qword_1024840A0 = (uint64_t)(v187 + 80);
  do
  {
    *(_OWORD *)&v187[v188 * 16] = v303[v188];
    ++v188;
  }
  while (v188 != 5);
  qword_102484098 = (uint64_t)(v187 + 80);
  xmmword_1024840A8 = xmmword_101DA0EB0;
  unk_1024840B8 = xmmword_101DA0EC0;
  sub_100134750(&qword_1024840C8, "Cairo-5");
  v302[0] = xmmword_101DA0ED0;
  v302[1] = xmmword_101DA0EE0;
  v302[2] = xmmword_101DA0EF0;
  v302[3] = xmmword_101DA0F00;
  v302[4] = xmmword_101DA0F10;
  v302[5] = xmmword_101DA0F20;
  v302[6] = xmmword_101DA0F30;
  v302[7] = xmmword_101DA0F40;
  v302[8] = xmmword_101DA0F50;
  v302[9] = xmmword_101DA0F60;
  v302[10] = xmmword_101DA0F70;
  v302[11] = xmmword_101DA0ED0;
  qword_1024840E8 = 0;
  qword_1024840F0 = 0;
  qword_1024840E0 = 0;
  v189 = (char *)operator new(0xC0uLL);
  uint64_t v190 = 0;
  qword_1024840E0 = (uint64_t)v189;
  qword_1024840E8 = (uint64_t)v189;
  qword_1024840F0 = (uint64_t)(v189 + 192);
  do
  {
    v191 = &v189[v190 * 16];
    long long v192 = v302[v190 + 1];
    *(_OWORD *)v191 = v302[v190];
    *((_OWORD *)v191 + 1) = v192;
    v190 += 2;
  }
  while (v190 != 12);
  qword_1024840E8 = (uint64_t)(v189 + 192);
  xmmword_1024840F8 = xmmword_101DA0F80;
  unk_102484108 = xmmword_101DA0F90;
  sub_100134750(&qword_102484118, "Cairo-6");
  v301[0] = xmmword_101DA0FA0;
  v301[1] = xmmword_101DA0FB0;
  v301[2] = xmmword_101DA0FC0;
  v301[3] = xmmword_101DA0FD0;
  v301[4] = xmmword_101DA0FE0;
  v301[5] = xmmword_101DA0FF0;
  v301[6] = xmmword_101DA0FA0;
  qword_102484138 = 0;
  qword_102484140 = 0;
  qword_102484130 = 0;
  v193 = (char *)operator new(0x70uLL);
  uint64_t v194 = 0;
  qword_102484130 = (uint64_t)v193;
  qword_102484138 = (uint64_t)v193;
  qword_102484140 = (uint64_t)(v193 + 112);
  do
  {
    *(_OWORD *)&v193[v194 * 16] = v301[v194];
    ++v194;
  }
  while (v194 != 7);
  qword_102484138 = (uint64_t)(v193 + 112);
  xmmword_102484148 = xmmword_101DA1000;
  unk_102484158 = xmmword_101DA1010;
  sub_100134750(&qword_102484168, "Cairo-7");
  v300[0] = xmmword_101DA1020;
  v300[1] = xmmword_101DA1030;
  v300[2] = xmmword_101DA1040;
  v300[3] = xmmword_101DA1050;
  v300[4] = xmmword_101DA1060;
  v300[5] = xmmword_101DA1070;
  v300[6] = xmmword_101DA1080;
  v300[7] = xmmword_101DA1090;
  v300[8] = xmmword_101DA10A0;
  v300[9] = xmmword_101DA10B0;
  v300[10] = xmmword_101DA1020;
  qword_102484188 = 0;
  qword_102484190 = 0;
  qword_102484180 = 0;
  v195 = (char *)operator new(0xB0uLL);
  uint64_t v196 = 0;
  qword_102484180 = (uint64_t)v195;
  qword_102484188 = (uint64_t)v195;
  qword_102484190 = (uint64_t)(v195 + 176);
  do
  {
    *(_OWORD *)&v195[v196 * 16] = v300[v196];
    ++v196;
  }
  while (v196 != 11);
  qword_102484188 = (uint64_t)(v195 + 176);
  xmmword_102484198 = xmmword_101DA10C0;
  unk_1024841A8 = xmmword_101DA10D0;
  sub_100134750(&qword_1024841B8, "Cairo-8");
  v299[0] = xmmword_101DA10E0;
  v299[1] = xmmword_101DA10F0;
  v299[2] = xmmword_101DA1100;
  v299[3] = xmmword_101DA1110;
  v299[4] = xmmword_101DA1120;
  v299[5] = xmmword_101DA10E0;
  qword_1024841D8 = 0;
  qword_1024841E0 = 0;
  qword_1024841D0 = 0;
  v197 = (char *)operator new(0x60uLL);
  uint64_t v198 = 0;
  qword_1024841D0 = (uint64_t)v197;
  qword_1024841D8 = (uint64_t)v197;
  qword_1024841E0 = (uint64_t)(v197 + 96);
  do
  {
    v199 = &v197[v198 * 16];
    long long v200 = v299[v198 + 1];
    *(_OWORD *)v199 = v299[v198];
    *((_OWORD *)v199 + 1) = v200;
    v198 += 2;
  }
  while (v198 != 6);
  qword_1024841D8 = (uint64_t)(v197 + 96);
  xmmword_1024841E8 = xmmword_101DA1130;
  unk_1024841F8 = xmmword_101DA1140;
  sub_100134750(&qword_102484208, "Shanghai-11");
  v298[0] = xmmword_101DA1150;
  v298[1] = xmmword_101DA1160;
  v298[2] = xmmword_101DA1170;
  v298[3] = xmmword_101DA1180;
  v298[4] = xmmword_101DA1190;
  v298[5] = xmmword_101DA11A0;
  v298[6] = xmmword_101DA1150;
  qword_102484228 = 0;
  qword_102484230 = 0;
  qword_102484220 = 0;
  v201 = (char *)operator new(0x70uLL);
  uint64_t v202 = 0;
  qword_102484220 = (uint64_t)v201;
  qword_102484228 = (uint64_t)v201;
  qword_102484230 = (uint64_t)(v201 + 112);
  do
  {
    *(_OWORD *)&v201[v202 * 16] = v298[v202];
    ++v202;
  }
  while (v202 != 7);
  qword_102484228 = (uint64_t)(v201 + 112);
  xmmword_102484238 = xmmword_101DA11B0;
  unk_102484248 = xmmword_101DA11C0;
  sub_100134750(&qword_102484258, "Shanghai-12");
  v297[0] = xmmword_101DA11D0;
  v297[1] = xmmword_101DA11E0;
  v297[2] = xmmword_101DA11F0;
  v297[3] = xmmword_101DA1200;
  v297[4] = xmmword_101DA1210;
  v297[5] = xmmword_101DA1220;
  v297[6] = xmmword_101DA1230;
  v297[7] = xmmword_101DA1240;
  v297[8] = xmmword_101DA1250;
  v297[9] = xmmword_101DA11D0;
  qword_102484278 = 0;
  qword_102484280 = 0;
  qword_102484270 = 0;
  v203 = (char *)operator new(0xA0uLL);
  uint64_t v204 = 0;
  qword_102484270 = (uint64_t)v203;
  qword_102484278 = (uint64_t)v203;
  qword_102484280 = (uint64_t)(v203 + 160);
  do
  {
    v205 = &v203[v204 * 16];
    long long v206 = v297[v204 + 1];
    *(_OWORD *)v205 = v297[v204];
    *((_OWORD *)v205 + 1) = v206;
    v204 += 2;
  }
  while (v204 != 10);
  qword_102484278 = (uint64_t)(v203 + 160);
  xmmword_102484288 = xmmword_101DA1260;
  unk_102484298 = xmmword_101DA1270;
  sub_100134750(&qword_1024842A8, "Beijing-10");
  v296[0] = xmmword_101DA1280;
  v296[1] = xmmword_101DA1290;
  v296[2] = xmmword_101DA12A0;
  v296[3] = xmmword_101DA12B0;
  v296[4] = xmmword_101DA1280;
  qword_1024842C8 = 0;
  qword_1024842D0 = 0;
  qword_1024842C0 = 0;
  v207 = (char *)operator new(0x50uLL);
  uint64_t v208 = 0;
  qword_1024842C0 = (uint64_t)v207;
  qword_1024842C8 = (uint64_t)v207;
  qword_1024842D0 = (uint64_t)(v207 + 80);
  do
  {
    *(_OWORD *)&v207[v208 * 16] = v296[v208];
    ++v208;
  }
  while (v208 != 5);
  qword_1024842C8 = (uint64_t)(v207 + 80);
  xmmword_1024842D8 = xmmword_101DA1280;
  unk_1024842E8 = xmmword_101DA12C0;
  sub_100134750(&qword_1024842F8, "Beijing-11");
  v295[0] = xmmword_101DA12D0;
  v295[1] = xmmword_101DA12E0;
  v295[2] = xmmword_101DA12F0;
  v295[3] = xmmword_101DA1300;
  v295[4] = xmmword_101DA12D0;
  qword_102484318 = 0;
  qword_102484320 = 0;
  qword_102484310 = 0;
  v209 = (char *)operator new(0x50uLL);
  uint64_t v210 = 0;
  qword_102484310 = (uint64_t)v209;
  qword_102484318 = (uint64_t)v209;
  qword_102484320 = (uint64_t)(v209 + 80);
  do
  {
    *(_OWORD *)&v209[v210 * 16] = v295[v210];
    ++v210;
  }
  while (v210 != 5);
  qword_102484318 = (uint64_t)(v209 + 80);
  xmmword_102484328 = xmmword_101DA1310;
  unk_102484338 = xmmword_101DA1320;
  sub_100134750(&qword_102484348, "Barcelona-1");
  v294[0] = xmmword_101DA1330;
  v294[1] = xmmword_101DA1340;
  v294[2] = xmmword_101DA1350;
  v294[3] = xmmword_101DA1360;
  v294[4] = xmmword_101DA1370;
  v294[5] = xmmword_101DA1380;
  v294[6] = xmmword_101DA1330;
  qword_102484368 = 0;
  qword_102484370 = 0;
  qword_102484360 = 0;
  v211 = (char *)operator new(0x70uLL);
  uint64_t v212 = 0;
  qword_102484360 = (uint64_t)v211;
  qword_102484368 = (uint64_t)v211;
  qword_102484370 = (uint64_t)(v211 + 112);
  do
  {
    *(_OWORD *)&v211[v212 * 16] = v294[v212];
    ++v212;
  }
  while (v212 != 7);
  qword_102484368 = (uint64_t)(v211 + 112);
  xmmword_102484378 = xmmword_101DA1390;
  unk_102484388 = xmmword_101DA13A0;
  sub_100134750(&qword_102484398, "Barcelona-2");
  v293[0] = xmmword_101DA13B0;
  v293[1] = xmmword_101DA13C0;
  v293[2] = xmmword_101DA13D0;
  v293[3] = xmmword_101DA13E0;
  v293[4] = xmmword_101DA13B0;
  qword_1024843B8 = 0;
  qword_1024843C0 = 0;
  qword_1024843B0 = 0;
  v213 = (char *)operator new(0x50uLL);
  uint64_t v214 = 0;
  qword_1024843B0 = (uint64_t)v213;
  qword_1024843B8 = (uint64_t)v213;
  qword_1024843C0 = (uint64_t)(v213 + 80);
  do
  {
    *(_OWORD *)&v213[v214 * 16] = v293[v214];
    ++v214;
  }
  while (v214 != 5);
  qword_1024843B8 = (uint64_t)(v213 + 80);
  xmmword_1024843C8 = xmmword_101DA13F0;
  unk_1024843D8 = xmmword_101DA1400;
  sub_100134750(&qword_1024843E8, "Houston-1");
  v292[0] = xmmword_101DA1410;
  v292[1] = xmmword_101DA1420;
  v292[2] = xmmword_101DA1430;
  v292[3] = xmmword_101DA1440;
  v292[4] = xmmword_101DA1450;
  v292[5] = xmmword_101DA1460;
  v292[6] = xmmword_101DA1470;
  v292[7] = xmmword_101DA1480;
  v292[8] = xmmword_101DA1490;
  v292[9] = xmmword_101DA14A0;
  v292[10] = xmmword_101DA14B0;
  v292[11] = xmmword_101DA14C0;
  v292[12] = xmmword_101DA14D0;
  v292[13] = xmmword_101DA14E0;
  v292[14] = xmmword_101DA14F0;
  v292[15] = xmmword_101DA1500;
  v292[16] = xmmword_101DA1510;
  v292[17] = xmmword_101DA1520;
  v292[18] = xmmword_101DA1530;
  v292[19] = xmmword_101DA1540;
  v292[20] = xmmword_101DA1550;
  v292[21] = xmmword_101DA1560;
  v292[22] = xmmword_101DA1570;
  v292[23] = xmmword_101DA1580;
  v292[24] = xmmword_101DA1590;
  v292[25] = xmmword_101DA15A0;
  v292[26] = xmmword_101DA1410;
  qword_102484400 = 0;
  qword_102484408 = 0;
  qword_102484410 = 0;
  v215 = (char *)operator new(0x1B0uLL);
  uint64_t v216 = 0;
  qword_102484400 = (uint64_t)v215;
  qword_102484408 = (uint64_t)v215;
  qword_102484410 = (uint64_t)(v215 + 432);
  do
  {
    *(_OWORD *)&v215[v216 * 16] = v292[v216];
    ++v216;
  }
  while (v216 != 27);
  qword_102484408 = (uint64_t)(v215 + 432);
  xmmword_102484418 = xmmword_101DA15B0;
  unk_102484428 = xmmword_101DA15C0;
  sub_100134750(&qword_102484438, "Seattle-1");
  v291[0] = xmmword_101DA15D0;
  v291[1] = xmmword_101DA15E0;
  v291[2] = xmmword_101DA15F0;
  v291[3] = xmmword_101DA1600;
  v291[4] = xmmword_101DA1610;
  v291[5] = xmmword_101DA1620;
  v291[6] = xmmword_101DA1630;
  v291[7] = xmmword_101DA1640;
  v291[8] = xmmword_101DA1650;
  v291[9] = xmmword_101DA1660;
  v291[10] = xmmword_101DA1670;
  v291[11] = xmmword_101DA1680;
  v291[12] = xmmword_101DA1690;
  v291[13] = xmmword_101DA16A0;
  v291[14] = xmmword_101DA16B0;
  v291[15] = xmmword_101DA16C0;
  v291[16] = xmmword_101DA16D0;
  v291[17] = xmmword_101DA15D0;
  qword_102484450 = 0;
  qword_102484458 = 0;
  qword_102484460 = 0;
  v217 = (char *)operator new(0x120uLL);
  uint64_t v218 = 0;
  qword_102484450 = (uint64_t)v217;
  qword_102484458 = (uint64_t)v217;
  qword_102484460 = (uint64_t)(v217 + 288);
  do
  {
    v219 = &v217[v218 * 16];
    long long v220 = v291[v218 + 1];
    *(_OWORD *)v219 = v291[v218];
    *((_OWORD *)v219 + 1) = v220;
    v218 += 2;
  }
  while (v218 != 18);
  qword_102484458 = (uint64_t)(v217 + 288);
  xmmword_102484468 = xmmword_101DA16E0;
  unk_102484478 = xmmword_101DA16F0;
  sub_100134750(&qword_102484488, "LasVegas-1");
  v290[0] = xmmword_101DA1700;
  v290[1] = xmmword_101DA1710;
  v290[2] = xmmword_101DA1720;
  v290[3] = xmmword_101DA1730;
  v290[4] = xmmword_101DA1700;
  qword_1024844A8 = 0;
  qword_1024844B0 = 0;
  qword_1024844A0 = 0;
  v221 = (char *)operator new(0x50uLL);
  uint64_t v222 = 0;
  qword_1024844A0 = (uint64_t)v221;
  qword_1024844A8 = (uint64_t)v221;
  qword_1024844B0 = (uint64_t)(v221 + 80);
  do
  {
    *(_OWORD *)&v221[v222 * 16] = v290[v222];
    ++v222;
  }
  while (v222 != 5);
  qword_1024844A8 = (uint64_t)(v221 + 80);
  xmmword_1024844B8 = xmmword_101DA1740;
  unk_1024844C8 = xmmword_101DA1750;
  sub_100134750(&qword_1024844D8, "LasVegas-2");
  v289[0] = xmmword_101DA1760;
  v289[1] = xmmword_101DA1770;
  v289[2] = xmmword_101DA1780;
  v289[3] = xmmword_101DA1790;
  v289[4] = xmmword_101DA17A0;
  v289[5] = xmmword_101DA17B0;
  v289[6] = xmmword_101DA17C0;
  v289[7] = xmmword_101DA17D0;
  v289[8] = xmmword_101DA17E0;
  v289[9] = xmmword_101DA17F0;
  v289[10] = xmmword_101DA1800;
  v289[11] = xmmword_101DA1810;
  v289[12] = xmmword_101DA1760;
  qword_1024844F8 = 0;
  qword_102484500 = 0;
  qword_1024844F0 = 0;
  v223 = (char *)operator new(0xD0uLL);
  uint64_t v224 = 0;
  qword_1024844F0 = (uint64_t)v223;
  qword_1024844F8 = (uint64_t)v223;
  qword_102484500 = (uint64_t)(v223 + 208);
  do
  {
    *(_OWORD *)&v223[v224 * 16] = v289[v224];
    ++v224;
  }
  while (v224 != 13);
  qword_1024844F8 = (uint64_t)(v223 + 208);
  xmmword_102484508 = xmmword_101DA1820;
  unk_102484518 = xmmword_101DA1830;
  sub_100134750(&qword_102484528, "Miami-1");
  v288[0] = xmmword_101DA1840;
  v288[1] = xmmword_101DA1850;
  v288[2] = xmmword_101DA1860;
  v288[3] = xmmword_101DA1870;
  v288[4] = xmmword_101DA1880;
  v288[5] = xmmword_101DA1890;
  v288[6] = xmmword_101DA18A0;
  v288[7] = xmmword_101DA18B0;
  v288[8] = xmmword_101DA18C0;
  v288[9] = xmmword_101DA18D0;
  v288[10] = xmmword_101DA18E0;
  v288[11] = xmmword_101DA18F0;
  v288[12] = xmmword_101DA1900;
  v288[13] = xmmword_101DA1910;
  v288[14] = xmmword_101DA1920;
  v288[15] = xmmword_101DA1930;
  v288[16] = xmmword_101DA1940;
  v288[17] = xmmword_101DA1950;
  v288[18] = xmmword_101DA1960;
  v288[19] = xmmword_101DA1970;
  v288[20] = xmmword_101DA1840;
  qword_102484540 = 0;
  qword_102484548 = 0;
  qword_102484550 = 0;
  v225 = (char *)operator new(0x150uLL);
  uint64_t v226 = 0;
  qword_102484540 = (uint64_t)v225;
  qword_102484548 = (uint64_t)v225;
  qword_102484550 = (uint64_t)(v225 + 336);
  do
  {
    *(_OWORD *)&v225[v226 * 16] = v288[v226];
    ++v226;
  }
  while (v226 != 21);
  qword_102484548 = (uint64_t)(v225 + 336);
  xmmword_102484558 = xmmword_101DA1980;
  unk_102484568 = xmmword_101DA1990;
  sub_100134750(&qword_102484578, "Denver-1");
  v287[0] = xmmword_101DA19A0;
  v287[1] = xmmword_101DA19B0;
  v287[2] = xmmword_101DA19C0;
  v287[3] = xmmword_101DA19D0;
  v287[4] = xmmword_101DA19E0;
  v287[5] = xmmword_101DA19F0;
  v287[6] = xmmword_101DA1A00;
  v287[7] = xmmword_101DA1A10;
  v287[8] = xmmword_101DA1A20;
  v287[9] = xmmword_101DA1A30;
  v287[10] = xmmword_101DA1A40;
  v287[11] = xmmword_101DA1A50;
  v287[12] = xmmword_101DA1A60;
  v287[13] = xmmword_101DA19A0;
  qword_102484598 = 0;
  qword_1024845A0 = 0;
  qword_102484590 = 0;
  v227 = (char *)operator new(0xE0uLL);
  uint64_t v228 = 0;
  qword_102484590 = (uint64_t)v227;
  qword_102484598 = (uint64_t)v227;
  qword_1024845A0 = (uint64_t)(v227 + 224);
  do
  {
    v229 = &v227[v228 * 16];
    long long v230 = v287[v228 + 1];
    *(_OWORD *)v229 = v287[v228];
    *((_OWORD *)v229 + 1) = v230;
    v228 += 2;
  }
  while (v228 != 14);
  qword_102484598 = (uint64_t)(v227 + 224);
  xmmword_1024845A8 = xmmword_101DA1A70;
  unk_1024845B8 = xmmword_101DA1A80;
  sub_100134750(&qword_1024845C8, "NY-1");
  v286[0] = xmmword_101DA1A90;
  v286[1] = xmmword_101DA1AA0;
  v286[2] = xmmword_101DA1AB0;
  v286[3] = xmmword_101DA1AC0;
  v286[4] = xmmword_101DA1AD0;
  v286[5] = xmmword_101DA1AE0;
  v286[6] = xmmword_101DA1AF0;
  v286[7] = xmmword_101DA1A90;
  qword_1024845E8 = 0;
  qword_1024845F0 = 0;
  qword_1024845E0 = 0;
  v231 = (char *)operator new(0x80uLL);
  uint64_t v232 = 0;
  qword_1024845E0 = (uint64_t)v231;
  qword_1024845E8 = (uint64_t)v231;
  qword_1024845F0 = (uint64_t)(v231 + 128);
  do
  {
    v233 = &v231[v232 * 16];
    long long v234 = v286[v232 + 1];
    *(_OWORD *)v233 = v286[v232];
    *((_OWORD *)v233 + 1) = v234;
    v232 += 2;
  }
  while (v232 != 8);
  qword_1024845E8 = (uint64_t)(v231 + 128);
  xmmword_1024845F8 = xmmword_101DA1B00;
  unk_102484608 = xmmword_101DA1B10;
  sub_100134750(&qword_102484618, "Chicago-1");
  v285[0] = xmmword_101DA1B20;
  v285[1] = xmmword_101DA1B30;
  v285[2] = xmmword_101DA1B40;
  v285[3] = xmmword_101DA1B50;
  v285[4] = xmmword_101DA1B60;
  v285[5] = xmmword_101DA1B70;
  v285[6] = xmmword_101DA1B80;
  v285[7] = xmmword_101DA1B90;
  v285[8] = xmmword_101DA1BA0;
  v285[9] = xmmword_101DA1BB0;
  v285[10] = xmmword_101DA1BC0;
  v285[11] = xmmword_101DA1BD0;
  v285[12] = xmmword_101DA1BE0;
  v285[13] = xmmword_101DA1BF0;
  v285[14] = xmmword_101DA1C00;
  v285[15] = xmmword_101DA1C10;
  v285[16] = xmmword_101DA1C20;
  v285[17] = xmmword_101DA1C30;
  v285[18] = xmmword_101DA1C40;
  v285[19] = xmmword_101DA1C50;
  v285[20] = xmmword_101DA1C60;
  v285[21] = xmmword_101DA1C70;
  v285[22] = xmmword_101DA1C80;
  v285[23] = xmmword_101DA1C90;
  v285[24] = xmmword_101DA1CA0;
  v285[25] = xmmword_101DA1CB0;
  v285[26] = xmmword_101DA1CC0;
  v285[27] = xmmword_101DA1CD0;
  v285[28] = xmmword_101DA1B20;
  qword_102484630 = 0;
  qword_102484638 = 0;
  qword_102484640 = 0;
  v235 = (char *)operator new(0x1D0uLL);
  uint64_t v236 = 0;
  qword_102484630 = (uint64_t)v235;
  qword_102484638 = (uint64_t)v235;
  qword_102484640 = (uint64_t)(v235 + 464);
  do
  {
    *(_OWORD *)&v235[v236 * 16] = v285[v236];
    ++v236;
  }
  while (v236 != 29);
  qword_102484638 = (uint64_t)(v235 + 464);
  xmmword_102484648 = xmmword_101DA1CE0;
  unk_102484658 = xmmword_101DA1CF0;
  sub_100134750(&qword_102484668, "Chicago-2");
  v284[0] = xmmword_101DA1D00;
  v284[1] = xmmword_101DA1D10;
  v284[2] = xmmword_101DA1D20;
  v284[3] = xmmword_101DA1D30;
  v284[4] = xmmword_101DA1D00;
  qword_102484688 = 0;
  qword_102484690 = 0;
  qword_102484680 = 0;
  v237 = (char *)operator new(0x50uLL);
  uint64_t v238 = 0;
  qword_102484680 = (uint64_t)v237;
  qword_102484688 = (uint64_t)v237;
  qword_102484690 = (uint64_t)(v237 + 80);
  do
  {
    *(_OWORD *)&v237[v238 * 16] = v284[v238];
    ++v238;
  }
  while (v238 != 5);
  qword_102484688 = (uint64_t)(v237 + 80);
  xmmword_102484698 = xmmword_101DA1D40;
  unk_1024846A8 = xmmword_101DA1D50;
  sub_100134750(&qword_1024846B8, "Chicago-3");
  v283[0] = xmmword_101DA1D60;
  v283[1] = xmmword_101DA1D70;
  v283[2] = xmmword_101DA1D80;
  v283[3] = xmmword_101DA1D90;
  v283[4] = xmmword_101DA1D60;
  qword_1024846D8 = 0;
  qword_1024846E0 = 0;
  qword_1024846D0 = 0;
  v239 = (char *)operator new(0x50uLL);
  uint64_t v240 = 0;
  qword_1024846D0 = (uint64_t)v239;
  qword_1024846D8 = (uint64_t)v239;
  qword_1024846E0 = (uint64_t)(v239 + 80);
  do
  {
    *(_OWORD *)&v239[v240 * 16] = v283[v240];
    ++v240;
  }
  while (v240 != 5);
  qword_1024846D8 = (uint64_t)(v239 + 80);
  xmmword_1024846E8 = xmmword_101DA1DA0;
  unk_1024846F8 = xmmword_101DA1DB0;
  sub_100134750(&qword_102484708, "Chicago-4");
  v282[0] = xmmword_101DA1DC0;
  v282[1] = xmmword_101DA1DD0;
  v282[2] = xmmword_101DA1DE0;
  v282[3] = xmmword_101DA1DF0;
  v282[4] = xmmword_101DA1DC0;
  qword_102484728 = 0;
  qword_102484730 = 0;
  qword_102484720 = 0;
  v241 = (char *)operator new(0x50uLL);
  uint64_t v242 = 0;
  qword_102484720 = (uint64_t)v241;
  qword_102484728 = (uint64_t)v241;
  qword_102484730 = (uint64_t)(v241 + 80);
  do
  {
    *(_OWORD *)&v241[v242 * 16] = v282[v242];
    ++v242;
  }
  while (v242 != 5);
  qword_102484728 = (uint64_t)(v241 + 80);
  xmmword_102484738 = xmmword_101DA1E00;
  unk_102484748 = xmmword_101DA1E10;
  sub_100134750(&qword_102484758, "SF-1");
  v281[0] = xmmword_101DA1E20;
  v281[1] = xmmword_101DA1E30;
  v281[2] = xmmword_101DA1E40;
  v281[3] = xmmword_101DA1E50;
  v281[4] = xmmword_101DA1E60;
  v281[5] = xmmword_101DA1E70;
  v281[6] = xmmword_101DA1E80;
  v281[7] = xmmword_101DA1E90;
  v281[8] = xmmword_101DA1EA0;
  v281[9] = xmmword_101DA1EB0;
  v281[10] = xmmword_101DA1E20;
  qword_102484778 = 0;
  qword_102484780 = 0;
  qword_102484770 = 0;
  v243 = (char *)operator new(0xB0uLL);
  uint64_t v244 = 0;
  qword_102484770 = (uint64_t)v243;
  qword_102484778 = (uint64_t)v243;
  qword_102484780 = (uint64_t)(v243 + 176);
  do
  {
    *(_OWORD *)&v243[v244 * 16] = v281[v244];
    ++v244;
  }
  while (v244 != 11);
  qword_102484778 = (uint64_t)(v243 + 176);
  xmmword_102484788 = xmmword_101DA1EC0;
  unk_102484798 = xmmword_101DA1ED0;
  sub_100134750(&qword_1024847A8, "SF-2");
  v280[0] = xmmword_101DA1EE0;
  v280[1] = xmmword_101DA1EF0;
  v280[2] = xmmword_101DA1F00;
  v280[3] = xmmword_101DA1F10;
  v280[4] = xmmword_101DA1F20;
  v280[5] = xmmword_101DA1F30;
  v280[6] = xmmword_101DA1F40;
  v280[7] = xmmword_101DA1EE0;
  qword_1024847C8 = 0;
  qword_1024847D0 = 0;
  qword_1024847C0 = 0;
  v245 = (char *)operator new(0x80uLL);
  uint64_t v246 = 0;
  qword_1024847C0 = (uint64_t)v245;
  qword_1024847C8 = (uint64_t)v245;
  qword_1024847D0 = (uint64_t)(v245 + 128);
  do
  {
    v247 = &v245[v246 * 16];
    long long v248 = v280[v246 + 1];
    *(_OWORD *)v247 = v280[v246];
    *((_OWORD *)v247 + 1) = v248;
    v246 += 2;
  }
  while (v246 != 8);
  qword_1024847C8 = (uint64_t)(v245 + 128);
  xmmword_1024847D8 = xmmword_101DA1F50;
  unk_1024847E8 = xmmword_101DA1F60;
  sub_100134750(&qword_1024847F8, "SJ-1");
  v279[0] = xmmword_101DA1F70;
  v279[1] = xmmword_101DA1F80;
  v279[2] = xmmword_101DA1F90;
  v279[3] = xmmword_101DA1FA0;
  v279[4] = xmmword_101DA1FB0;
  v279[5] = xmmword_101DA1FC0;
  v279[6] = xmmword_101DA1FD0;
  v279[7] = xmmword_101DA1FE0;
  v279[8] = xmmword_101DA1FF0;
  v279[9] = xmmword_101DA2000;
  v279[10] = xmmword_101DA2010;
  v279[11] = xmmword_101DA2020;
  v279[12] = xmmword_101DA2030;
  v279[13] = xmmword_101DA2040;
  v279[14] = xmmword_101DA2050;
  v279[15] = xmmword_101DA2060;
  v279[16] = xmmword_101DA2070;
  v279[17] = xmmword_101DA2080;
  v279[18] = xmmword_101DA2090;
  v279[19] = xmmword_101DA20A0;
  v279[20] = xmmword_101DA20B0;
  v279[21] = xmmword_101DA20C0;
  v279[22] = xmmword_101DA20D0;
  v279[23] = xmmword_101DA20E0;
  v279[24] = xmmword_101DA20F0;
  v279[25] = xmmword_101DA2100;
  v279[26] = xmmword_101DA2110;
  v279[27] = xmmword_101DA1F70;
  qword_102484810 = 0;
  qword_102484818 = 0;
  qword_102484820 = 0;
  v249 = (char *)operator new(0x1C0uLL);
  uint64_t v250 = 0;
  qword_102484810 = (uint64_t)v249;
  qword_102484818 = (uint64_t)v249;
  qword_102484820 = (uint64_t)(v249 + 448);
  do
  {
    v251 = &v249[v250 * 16];
    long long v252 = v279[v250 + 1];
    *(_OWORD *)v251 = v279[v250];
    *((_OWORD *)v251 + 1) = v252;
    v250 += 2;
  }
  while (v250 != 28);
  qword_102484818 = (uint64_t)(v249 + 448);
  xmmword_102484828 = xmmword_101DA2120;
  unk_102484838 = xmmword_101DA2130;
  sub_100134750(&qword_102484848, "SJ-2");
  v278[0] = xmmword_101DA2140;
  v278[1] = xmmword_101DA2150;
  v278[2] = xmmword_101DA2160;
  v278[3] = xmmword_101DA2170;
  v278[4] = xmmword_101DA2180;
  v278[5] = xmmword_101DA2190;
  v278[6] = xmmword_101DA2140;
  qword_102484868 = 0;
  qword_102484870 = 0;
  qword_102484860 = 0;
  v253 = (char *)operator new(0x70uLL);
  uint64_t v254 = 0;
  qword_102484860 = (uint64_t)v253;
  qword_102484868 = (uint64_t)v253;
  qword_102484870 = (uint64_t)(v253 + 112);
  do
  {
    *(_OWORD *)&v253[v254 * 16] = v278[v254];
    ++v254;
  }
  while (v254 != 7);
  qword_102484868 = (uint64_t)(v253 + 112);
  xmmword_102484878 = xmmword_101DA21A0;
  unk_102484888 = xmmword_101DA21B0;
  sub_100134750(&qword_102484898, "SJ-3");
  v277[0] = xmmword_101DA21C0;
  v277[1] = xmmword_101DA21D0;
  v277[2] = xmmword_101DA21E0;
  v277[3] = xmmword_101DA21F0;
  v277[4] = xmmword_101DA21C0;
  qword_1024848B8 = 0;
  qword_1024848C0 = 0;
  qword_1024848B0 = 0;
  v255 = (char *)operator new(0x50uLL);
  uint64_t v256 = 0;
  qword_1024848B0 = (uint64_t)v255;
  qword_1024848B8 = (uint64_t)v255;
  qword_1024848C0 = (uint64_t)(v255 + 80);
  do
  {
    *(_OWORD *)&v255[v256 * 16] = v277[v256];
    ++v256;
  }
  while (v256 != 5);
  qword_1024848B8 = (uint64_t)(v255 + 80);
  xmmword_1024848C8 = xmmword_101DA2200;
  unk_1024848D8 = xmmword_101DA2210;
  sub_100134750(&qword_1024848E8, "SJ-4");
  v276[0] = xmmword_101DA2220;
  v276[1] = xmmword_101DA2230;
  v276[2] = xmmword_101DA2240;
  v276[3] = xmmword_101DA2250;
  v276[4] = xmmword_101DA2220;
  qword_102484908 = 0;
  qword_102484910 = 0;
  qword_102484900 = 0;
  v257 = (char *)operator new(0x50uLL);
  uint64_t v258 = 0;
  qword_102484900 = (uint64_t)v257;
  qword_102484908 = (uint64_t)v257;
  qword_102484910 = (uint64_t)(v257 + 80);
  do
  {
    *(_OWORD *)&v257[v258 * 16] = v276[v258];
    ++v258;
  }
  while (v258 != 5);
  qword_102484908 = (uint64_t)(v257 + 80);
  xmmword_102484918 = xmmword_101DA2260;
  unk_102484928 = xmmword_101DA2270;
  sub_100134750(&qword_102484938, "SJ-5");
  v275[0] = xmmword_101DA2280;
  v275[1] = xmmword_101DA2290;
  v275[2] = xmmword_101DA22A0;
  v275[3] = xmmword_101DA22B0;
  v275[4] = xmmword_101DA22C0;
  v275[5] = xmmword_101DA22D0;
  v275[6] = xmmword_101DA22E0;
  v275[7] = xmmword_101DA22F0;
  v275[8] = xmmword_101DA2280;
  qword_102484958 = 0;
  qword_102484960 = 0;
  qword_102484950 = 0;
  v259 = (char *)operator new(0x90uLL);
  uint64_t v260 = 0;
  qword_102484950 = (uint64_t)v259;
  qword_102484958 = (uint64_t)v259;
  qword_102484960 = (uint64_t)(v259 + 144);
  do
  {
    *(_OWORD *)&v259[v260 * 16] = v275[v260];
    ++v260;
  }
  while (v260 != 9);
  qword_102484958 = (uint64_t)(v259 + 144);
  xmmword_102484968 = xmmword_101DA2290;
  unk_102484978 = xmmword_101DA2300;
  sub_100134750(&qword_102484988, "Atlanta-1");
  v274[0] = xmmword_101DA2310;
  v274[1] = xmmword_101DA2320;
  v274[2] = xmmword_101DA2330;
  v274[3] = xmmword_101DA2340;
  v274[4] = xmmword_101DA2350;
  v274[5] = xmmword_101DA2360;
  v274[6] = xmmword_101DA2370;
  v274[7] = xmmword_101DA2380;
  v274[8] = xmmword_101DA2390;
  v274[9] = xmmword_101DA23A0;
  v274[10] = xmmword_101DA23B0;
  v274[11] = xmmword_101DA23C0;
  v274[12] = xmmword_101DA23D0;
  v274[13] = xmmword_101DA23E0;
  v274[14] = xmmword_101DA23F0;
  v274[15] = xmmword_101DA2400;
  v274[16] = xmmword_101DA2410;
  v274[17] = xmmword_101DA2420;
  v274[18] = xmmword_101DA2430;
  v274[19] = xmmword_101DA2440;
  v274[20] = xmmword_101DA2450;
  v274[21] = xmmword_101DA2460;
  v274[22] = xmmword_101DA2470;
  v274[23] = xmmword_101DA2480;
  v274[24] = xmmword_101DA2490;
  v274[25] = xmmword_101DA2310;
  qword_1024849A0 = 0;
  qword_1024849A8 = 0;
  qword_1024849B0 = 0;
  v261 = (char *)operator new(0x1A0uLL);
  uint64_t v262 = 0;
  qword_1024849A0 = (uint64_t)v261;
  qword_1024849A8 = (uint64_t)v261;
  qword_1024849B0 = (uint64_t)(v261 + 416);
  do
  {
    v263 = &v261[v262 * 16];
    long long v264 = v274[v262 + 1];
    *(_OWORD *)v263 = v274[v262];
    *((_OWORD *)v263 + 1) = v264;
    v262 += 2;
  }
  while (v262 != 26);
  qword_1024849A8 = (uint64_t)(v261 + 416);
  xmmword_1024849B8 = xmmword_101DA24A0;
  unk_1024849C8 = xmmword_101DA24B0;
  sub_100134750(&qword_1024849D8, "Atlanta-2");
  v273[0] = xmmword_101DA24C0;
  v273[1] = xmmword_101DA24D0;
  v273[2] = xmmword_101DA24E0;
  v273[3] = xmmword_101DA24F0;
  v273[4] = xmmword_101DA2500;
  v273[5] = xmmword_101DA2510;
  v273[6] = xmmword_101DA2520;
  v273[7] = xmmword_101DA2530;
  v273[8] = xmmword_101DA2540;
  v273[9] = xmmword_101DA2550;
  v273[10] = xmmword_101DA2560;
  v273[11] = xmmword_101DA2570;
  v273[12] = xmmword_101DA2580;
  v273[13] = xmmword_101DA2590;
  v273[14] = xmmword_101DA25A0;
  v273[15] = xmmword_101DA24C0;
  qword_1024849F8 = 0;
  qword_102484A00 = 0;
  qword_1024849F0 = 0;
  v265 = (char *)operator new(0x100uLL);
  uint64_t v266 = 0;
  qword_1024849F0 = (uint64_t)v265;
  qword_1024849F8 = (uint64_t)v265;
  qword_102484A00 = (uint64_t)(v265 + 256);
  do
  {
    v267 = &v265[v266 * 16];
    long long v268 = v273[v266 + 1];
    *(_OWORD *)v267 = v273[v266];
    *((_OWORD *)v267 + 1) = v268;
    v266 += 2;
  }
  while (v266 != 16);
  qword_1024849F8 = (uint64_t)(v265 + 256);
  xmmword_102484A08 = xmmword_101DA25B0;
  unk_102484A18 = xmmword_101DA25C0;
  sub_100134750(&qword_102484A28, "Atlanta-3");
  v272[0] = xmmword_101DA25D0;
  v272[1] = xmmword_101DA25E0;
  v272[2] = xmmword_101DA25F0;
  v272[3] = xmmword_101DA2600;
  v272[4] = xmmword_101DA2610;
  v272[5] = xmmword_101DA2620;
  v272[6] = xmmword_101DA2630;
  v272[7] = xmmword_101DA2640;
  v272[8] = xmmword_101DA2650;
  qword_102484A48 = 0;
  qword_102484A50 = 0;
  qword_102484A40 = 0;
  v269 = (char *)operator new(0x90uLL);
  uint64_t v270 = 0;
  qword_102484A40 = (uint64_t)v269;
  qword_102484A48 = (uint64_t)v269;
  qword_102484A50 = (uint64_t)(v269 + 144);
  do
  {
    *(_OWORD *)&v269[v270 * 16] = v272[v270];
    ++v270;
  }
  while (v270 != 9);
  qword_102484A48 = (uint64_t)(v269 + 144);
  xmmword_102484A58 = xmmword_101DA2660;
  xmmword_102484A68 = xmmword_101DA2670;

  return __cxa_atexit((void (*)(void *))sub_10106F0E0, &qword_102482CC8, (void *)&_mh_execute_header);
}

void sub_101077284(_Unwind_Exception *exception_object)
{
  if (byte_102484A3F < 0) {
    sub_101A9EDB8();
  }
  double v3 = &qword_102484A28;
  while (1)
  {
    long long v4 = (void *)*(v3 - 7);
    if (v4)
    {
      *(v3 - 6) = (uint64_t)v4;
      operator delete(v4);
    }
    if (*((char *)v3 - 57) < 0) {
      operator delete((void *)*(v3 - 10));
    }
    v3 -= 10;
    if (v3 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_101078174()
{
  if (byte_102482CDF < 0) {
    sub_101A9F220();
  }
  JUMPOUT(0x10107816CLL);
}

void sub_10107818C()
{
}

uint64_t sub_101078194(uint64_t a1)
{
  __chkstk_darwin(a1);
  sub_100134750(qword_102482CB0, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  uint64_t v1 = __cxa_atexit((void (*)(void *))&std::string::~string, qword_102482CB0, (void *)&_mh_execute_header);
  sub_1010717F8(v1);
  sub_100134750(qword_102484A78, "ContinentalUS-WestCoast");
  v58[0] = xmmword_101DA2680;
  v58[1] = xmmword_101DA2690;
  v58[2] = xmmword_101DA26A0;
  v58[3] = xmmword_101DA26B0;
  v58[4] = xmmword_101DA26C0;
  v58[5] = xmmword_101DA26D0;
  v58[6] = xmmword_101DA26E0;
  v58[7] = xmmword_101DA26F0;
  v58[8] = xmmword_101DA2700;
  v58[9] = xmmword_101DA2710;
  v58[10] = xmmword_101DA2720;
  v58[11] = xmmword_101DA2730;
  v58[12] = xmmword_101DA2740;
  v58[13] = xmmword_101DA2750;
  v58[14] = xmmword_101DA2760;
  v58[15] = xmmword_101DA2770;
  v58[16] = xmmword_101DA2780;
  v58[17] = xmmword_101DA2790;
  v58[18] = xmmword_101DA27A0;
  v58[19] = xmmword_101DA27B0;
  v58[20] = xmmword_101DA27C0;
  v58[21] = xmmword_101DA27D0;
  v58[22] = xmmword_101DA27E0;
  v58[23] = xmmword_101DA27F0;
  v58[24] = xmmword_101DA2680;
  qword_102484A90 = 0;
  qword_102484A98 = 0;
  qword_102484AA0 = 0;
  uint64_t v2 = (char *)operator new(0x190uLL);
  uint64_t v3 = 0;
  qword_102484A90 = (uint64_t)v2;
  qword_102484A98 = (uint64_t)v2;
  qword_102484AA0 = (uint64_t)(v2 + 400);
  do
  {
    *(_OWORD *)&v2[v3 * 16] = v58[v3];
    ++v3;
  }
  while (v3 != 25);
  qword_102484A98 = (uint64_t)(v2 + 400);
  xmmword_102484AA8 = xmmword_101DA2800;
  unk_102484AB8 = xmmword_101DA2810;
  sub_100134750(&qword_102484AC8, "ContinentalUS-Mountain");
  v57[0] = xmmword_101DA2710;
  v57[1] = xmmword_101DA2820;
  v57[2] = xmmword_101DA2830;
  v57[3] = xmmword_101DA2840;
  v57[4] = xmmword_101DA2850;
  v57[5] = xmmword_101DA2860;
  v57[6] = xmmword_101DA2870;
  v57[7] = xmmword_101DA2880;
  v57[8] = xmmword_101DA2890;
  v57[9] = xmmword_101DA28A0;
  v57[10] = xmmword_101DA28B0;
  v57[11] = xmmword_101DA28C0;
  v57[12] = xmmword_101DA28D0;
  v57[13] = xmmword_101DA28E0;
  v57[14] = xmmword_101DA28F0;
  v57[15] = xmmword_101DA2900;
  v57[16] = xmmword_101DA2910;
  v57[17] = xmmword_101DA2920;
  v57[18] = xmmword_101DA2930;
  v57[19] = xmmword_101DA2940;
  v57[20] = xmmword_101DA2950;
  v57[21] = xmmword_101DA2960;
  v57[22] = xmmword_101DA2970;
  v57[23] = xmmword_101DA2980;
  v57[24] = xmmword_101DA2990;
  v57[25] = xmmword_101DA29A0;
  v57[26] = xmmword_101DA29B0;
  v57[27] = xmmword_101DA29C0;
  v57[28] = xmmword_101DA29D0;
  v57[29] = xmmword_101DA29E0;
  v57[30] = xmmword_101DA29F0;
  v57[31] = xmmword_101DA2A00;
  v57[32] = xmmword_101DA2A10;
  v57[33] = xmmword_101DA2A20;
  v57[34] = xmmword_101DA2A30;
  v57[35] = xmmword_101DA2A40;
  v57[36] = xmmword_101DA2710;
  qword_102484AE0 = 0;
  qword_102484AE8 = 0;
  qword_102484AF0 = 0;
  long long v4 = (char *)operator new(0x250uLL);
  uint64_t v5 = 0;
  qword_102484AE0 = (uint64_t)v4;
  qword_102484AE8 = (uint64_t)v4;
  qword_102484AF0 = (uint64_t)(v4 + 592);
  do
  {
    *(_OWORD *)&v4[v5 * 16] = v57[v5];
    ++v5;
  }
  while (v5 != 37);
  qword_102484AE8 = (uint64_t)(v4 + 592);
  xmmword_102484AF8 = xmmword_101DA2A50;
  unk_102484B08 = xmmword_101DA2820;
  sub_100134750(&qword_102484B18, "ContinentalUS-Central1");
  v56[0] = xmmword_101DA2A60;
  v56[1] = xmmword_101DA2820;
  v56[2] = xmmword_101DA2840;
  v56[3] = xmmword_101DA2A70;
  v56[4] = xmmword_101DA2A80;
  v56[5] = xmmword_101DA2A90;
  unsigned char v56[6] = xmmword_101DA2AA0;
  v56[7] = xmmword_101DA2AB0;
  v56[8] = xmmword_101DA2AC0;
  v56[9] = xmmword_101DA2AD0;
  unsigned char v56[10] = xmmword_101DA2AE0;
  v56[11] = xmmword_101DA2AF0;
  v56[12] = xmmword_101DA2B00;
  v56[13] = xmmword_101DA2B10;
  v56[14] = xmmword_101DA2B20;
  v56[15] = xmmword_101DA2B30;
  v56[16] = xmmword_101DA2B40;
  v56[17] = xmmword_101DA2B50;
  v56[18] = xmmword_101DA2B60;
  v56[19] = xmmword_101DA2B70;
  v56[20] = xmmword_101DA2B80;
  v56[21] = xmmword_101DA2B90;
  v56[22] = xmmword_101DA2BA0;
  v56[23] = xmmword_101DA2BB0;
  v56[24] = xmmword_101DA2BC0;
  v56[25] = xmmword_101DA2BD0;
  v56[26] = xmmword_101DA2BE0;
  v56[27] = xmmword_101DA2BF0;
  v56[28] = xmmword_101DA2C00;
  v56[29] = xmmword_101DA2C10;
  v56[30] = xmmword_101DA2C20;
  v56[31] = xmmword_101DA2C30;
  v56[32] = xmmword_101DA2C40;
  v56[33] = xmmword_101DA2C50;
  v56[34] = xmmword_101DA2C60;
  v56[35] = xmmword_101DA2C70;
  v56[36] = xmmword_101DA2C80;
  v56[37] = xmmword_101DA2C90;
  v56[38] = xmmword_101DA2CA0;
  v56[39] = xmmword_101DA2CB0;
  v56[40] = xmmword_101DA2CC0;
  v56[41] = xmmword_101DA2CD0;
  v56[42] = xmmword_101DA2CE0;
  v56[43] = xmmword_101DA2CF0;
  v56[44] = xmmword_101DA2D00;
  v56[45] = xmmword_101DA2D10;
  v56[46] = xmmword_101DA2D20;
  v56[47] = xmmword_101DA2D30;
  v56[48] = xmmword_101DA2D40;
  v56[49] = xmmword_101DA2D50;
  v56[50] = xmmword_101DA2D60;
  v56[51] = xmmword_101DA2D70;
  v56[52] = xmmword_101DA2D80;
  v56[53] = xmmword_101DA2D90;
  v56[54] = xmmword_101DA2DA0;
  v56[55] = xmmword_101DA2DB0;
  v56[56] = xmmword_101DA2DC0;
  v56[57] = xmmword_101DA2DD0;
  v56[58] = xmmword_101DA2DE0;
  v56[59] = xmmword_101DA2DF0;
  v56[60] = xmmword_101DA2E00;
  v56[61] = xmmword_101DA2E10;
  v56[62] = xmmword_101DA2E20;
  v56[63] = xmmword_101DA2E30;
  v56[64] = xmmword_101DA2E40;
  v56[65] = xmmword_101DA2E50;
  v56[66] = xmmword_101DA2E60;
  v56[67] = xmmword_101DA2E70;
  v56[68] = xmmword_101DA2E80;
  v56[69] = xmmword_101DA2E90;
  v56[70] = xmmword_101DA2EA0;
  v56[71] = xmmword_101DA2EB0;
  v56[72] = xmmword_101DA2EC0;
  v56[73] = xmmword_101DA2ED0;
  v56[74] = xmmword_101DA2EE0;
  v56[75] = xmmword_101DA2EF0;
  v56[76] = xmmword_101DA2F00;
  v56[77] = xmmword_101DA2F10;
  v56[78] = xmmword_101DA2F20;
  v56[79] = xmmword_101DA2F30;
  v56[80] = xmmword_101DA2F40;
  v56[81] = xmmword_101DA2F50;
  v56[82] = xmmword_101DA2F60;
  v56[83] = xmmword_101DA2F70;
  v56[84] = xmmword_101DA2F80;
  v56[85] = xmmword_101DA2F90;
  v56[86] = xmmword_101DA2FA0;
  v56[87] = xmmword_101DA2FB0;
  v56[88] = xmmword_101DA2FC0;
  v56[89] = xmmword_101DA2FD0;
  v56[90] = xmmword_101DA2FE0;
  v56[91] = xmmword_101DA2FF0;
  v56[92] = xmmword_101DA3000;
  v56[93] = xmmword_101DA3010;
  v56[94] = xmmword_101DA3020;
  v56[95] = xmmword_101DA3030;
  v56[96] = xmmword_101DA3040;
  v56[97] = xmmword_101DA3050;
  v56[98] = xmmword_101DA3060;
  v56[99] = xmmword_101DA3070;
  v56[100] = xmmword_101DA3080;
  v56[101] = xmmword_101DA3090;
  v56[102] = xmmword_101DA30A0;
  v56[103] = xmmword_101DA30B0;
  v56[104] = xmmword_101DA30C0;
  v56[105] = xmmword_101DA30D0;
  v56[106] = xmmword_101DA30E0;
  v56[107] = xmmword_101DA30F0;
  v56[108] = xmmword_101DA3100;
  v56[109] = xmmword_101DA3110;
  v56[110] = xmmword_101DA3120;
  v56[111] = xmmword_101DA3130;
  v56[112] = xmmword_101DA3140;
  v56[113] = xmmword_101DA3150;
  v56[114] = xmmword_101DA3160;
  v56[115] = xmmword_101DA3170;
  v56[116] = xmmword_101DA3180;
  v56[117] = xmmword_101DA3190;
  v56[118] = xmmword_101DA31A0;
  v56[119] = xmmword_101DA31B0;
  v56[120] = xmmword_101DA31C0;
  v56[121] = xmmword_101DA31D0;
  v56[122] = xmmword_101DA31E0;
  v56[123] = xmmword_101DA31F0;
  v56[124] = xmmword_101DA3200;
  v56[125] = xmmword_101DA3210;
  v56[126] = xmmword_101DA3220;
  v56[127] = xmmword_101DA3230;
  v56[128] = xmmword_101DA3240;
  v56[129] = xmmword_101DA3250;
  v56[130] = xmmword_101DA3260;
  v56[131] = xmmword_101DA3270;
  v56[132] = xmmword_101DA3280;
  v56[133] = xmmword_101DA3290;
  v56[134] = xmmword_101DA32A0;
  v56[135] = xmmword_101DA32B0;
  v56[136] = xmmword_101DA32C0;
  v56[137] = xmmword_101DA32D0;
  v56[138] = xmmword_101DA32E0;
  v56[139] = xmmword_101DA32F0;
  v56[140] = xmmword_101DA3300;
  v56[141] = xmmword_101DA3310;
  v56[142] = xmmword_101DA3320;
  v56[143] = xmmword_101DA3330;
  v56[144] = xmmword_101DA3340;
  v56[145] = xmmword_101DA3350;
  v56[146] = xmmword_101DA3360;
  v56[147] = xmmword_101DA3370;
  v56[148] = xmmword_101DA3380;
  v56[149] = xmmword_101DA2A60;
  qword_102484B30 = 0;
  qword_102484B38 = 0;
  qword_102484B40 = 0;
  uint64_t v6 = (char *)operator new(0x960uLL);
  uint64_t v7 = 0;
  qword_102484B30 = (uint64_t)v6;
  qword_102484B38 = (uint64_t)v6;
  qword_102484B40 = (uint64_t)(v6 + 2400);
  do
  {
    uint64_t v8 = &v6[v7 * 16];
    long long v9 = v56[v7 + 1];
    *(_OWORD *)uint64_t v8 = v56[v7];
    *((_OWORD *)v8 + 1) = v9;
    v7 += 2;
  }
  while (v7 != 150);
  qword_102484B38 = (uint64_t)(v6 + 2400);
  xmmword_102484B48 = xmmword_101DA3390;
  unk_102484B58 = xmmword_101DA2A60;
  sub_100134750(&qword_102484B68, "ContinentalUS-Central2");
  v55[0] = xmmword_101DA3380;
  v55[1] = xmmword_101DA33A0;
  v55[2] = xmmword_101DA33B0;
  v55[3] = xmmword_101DA33C0;
  v55[4] = xmmword_101DA33D0;
  v55[5] = xmmword_101DA33E0;
  unsigned char v55[6] = xmmword_101DA33F0;
  v55[7] = xmmword_101DA3400;
  v55[8] = xmmword_101DA3410;
  v55[9] = xmmword_101DA3420;
  v55[10] = xmmword_101DA3430;
  v55[11] = xmmword_101DA3440;
  v55[12] = xmmword_101DA3450;
  v55[13] = xmmword_101DA3460;
  v55[14] = xmmword_101DA3470;
  v55[15] = xmmword_101DA3480;
  v55[16] = xmmword_101DA3490;
  v55[17] = xmmword_101DA34A0;
  unsigned char v55[18] = xmmword_101DA34B0;
  v55[19] = xmmword_101DA34C0;
  v55[20] = xmmword_101DA34D0;
  v55[21] = xmmword_101DA34E0;
  v55[22] = xmmword_101DA34F0;
  v55[23] = xmmword_101DA3500;
  v55[24] = xmmword_101DA3510;
  v55[25] = xmmword_101DA3520;
  v55[26] = xmmword_101DA3530;
  v55[27] = xmmword_101DA3540;
  v55[28] = xmmword_101DA3550;
  v55[29] = xmmword_101DA3560;
  v55[30] = xmmword_101DA3570;
  v55[31] = xmmword_101DA3580;
  v55[32] = xmmword_101DA3590;
  v55[33] = xmmword_101DA35A0;
  v55[34] = xmmword_101DA35B0;
  v55[35] = xmmword_101DA35C0;
  v55[36] = xmmword_101DA35D0;
  v55[37] = xmmword_101DA35E0;
  v55[38] = xmmword_101DA35F0;
  v55[39] = xmmword_101DA3600;
  v55[40] = xmmword_101DA3610;
  v55[41] = xmmword_101DA3620;
  v55[42] = xmmword_101DA3630;
  v55[43] = xmmword_101DA3640;
  v55[44] = xmmword_101DA3650;
  v55[45] = xmmword_101DA3660;
  v55[46] = xmmword_101DA3670;
  v55[47] = xmmword_101DA3680;
  v55[48] = xmmword_101DA3690;
  v55[49] = xmmword_101DA36A0;
  v55[50] = xmmword_101DA36B0;
  v55[51] = xmmword_101DA36C0;
  v55[52] = xmmword_101DA36D0;
  v55[53] = xmmword_101DA36E0;
  v55[54] = xmmword_101DA36F0;
  v55[55] = xmmword_101DA3700;
  v55[56] = xmmword_101DA3710;
  v55[57] = xmmword_101DA3720;
  v55[58] = xmmword_101DA3730;
  v55[59] = xmmword_101DA3740;
  v55[60] = xmmword_101DA3750;
  v55[61] = xmmword_101DA3760;
  v55[62] = xmmword_101DA3770;
  v55[63] = xmmword_101DA3780;
  v55[64] = xmmword_101DA3790;
  v55[65] = xmmword_101DA37A0;
  v55[66] = xmmword_101DA37B0;
  v55[67] = xmmword_101DA37C0;
  v55[68] = xmmword_101DA37D0;
  v55[69] = xmmword_101DA37E0;
  v55[70] = xmmword_101DA37F0;
  v55[71] = xmmword_101DA3800;
  v55[72] = xmmword_101DA3810;
  v55[73] = xmmword_101DA3820;
  v55[74] = xmmword_101DA3830;
  v55[75] = xmmword_101DA3840;
  v55[76] = xmmword_101DA3850;
  v55[77] = xmmword_101DA3380;
  qword_102484B80 = 0;
  qword_102484B88 = 0;
  qword_102484B90 = 0;
  uint64_t v10 = (char *)operator new(0x4E0uLL);
  uint64_t v11 = 0;
  qword_102484B80 = (uint64_t)v10;
  qword_102484B88 = (uint64_t)v10;
  qword_102484B90 = (uint64_t)(v10 + 1248);
  do
  {
    uint64_t v12 = &v10[v11 * 16];
    long long v13 = v55[v11 + 1];
    *(_OWORD *)uint64_t v12 = v55[v11];
    *((_OWORD *)v12 + 1) = v13;
    v11 += 2;
  }
  while (v11 != 78);
  qword_102484B88 = (uint64_t)(v10 + 1248);
  xmmword_102484B98 = xmmword_101DA3380;
  unk_102484BA8 = xmmword_101DA3860;
  sub_100134750(&qword_102484BB8, "ContinentalUS-Eastern");
  v54[0] = xmmword_101DA3870;
  v54[1] = xmmword_101DA3880;
  v54[2] = xmmword_101DA3890;
  v54[3] = xmmword_101DA38A0;
  v54[4] = xmmword_101DA38B0;
  v54[5] = xmmword_101DA38C0;
  v54[6] = xmmword_101DA38D0;
  v54[7] = xmmword_101DA38E0;
  v54[8] = xmmword_101DA38F0;
  v54[9] = xmmword_101DA3900;
  v54[10] = xmmword_101DA3910;
  v54[11] = xmmword_101DA3920;
  unsigned char v54[12] = xmmword_101DA3930;
  v54[13] = xmmword_101DA3940;
  v54[14] = xmmword_101DA3950;
  v54[15] = xmmword_101DA3960;
  v54[16] = xmmword_101DA3970;
  v54[17] = xmmword_101DA3980;
  unsigned char v54[18] = xmmword_101DA3990;
  v54[19] = xmmword_101DA39A0;
  v54[20] = xmmword_101DA39B0;
  v54[21] = xmmword_101DA39C0;
  v54[22] = xmmword_101DA39D0;
  v54[23] = xmmword_101DA39E0;
  v54[24] = xmmword_101DA39F0;
  v54[25] = xmmword_101DA3A00;
  v54[26] = xmmword_101DA3A10;
  v54[27] = xmmword_101DA3A20;
  v54[28] = xmmword_101DA3A30;
  v54[29] = xmmword_101DA3A40;
  v54[30] = xmmword_101DA3A50;
  v54[31] = xmmword_101DA3A60;
  v54[32] = xmmword_101DA3A70;
  v54[33] = xmmword_101DA3A80;
  v54[34] = xmmword_101DA3A90;
  v54[35] = xmmword_101DA3AA0;
  v54[36] = xmmword_101DA3AB0;
  v54[37] = xmmword_101DA3AC0;
  v54[38] = xmmword_101DA3AD0;
  v54[39] = xmmword_101DA3AE0;
  v54[40] = xmmword_101DA3AF0;
  v54[41] = xmmword_101DA3B00;
  v54[42] = xmmword_101DA3B10;
  v54[43] = xmmword_101DA3B20;
  v54[44] = xmmword_101DA3B30;
  v54[45] = xmmword_101DA3B40;
  v54[46] = xmmword_101DA3B50;
  v54[47] = xmmword_101DA3B60;
  v54[48] = xmmword_101DA3B70;
  v54[49] = xmmword_101DA3B80;
  v54[50] = xmmword_101DA3B90;
  v54[51] = xmmword_101DA3BA0;
  v54[52] = xmmword_101DA3870;
  qword_102484BD0 = 0;
  qword_102484BD8 = 0;
  qword_102484BE0 = 0;
  uint64_t v14 = (char *)operator new(0x350uLL);
  uint64_t v15 = 0;
  qword_102484BD0 = (uint64_t)v14;
  qword_102484BD8 = (uint64_t)v14;
  qword_102484BE0 = (uint64_t)(v14 + 848);
  do
  {
    *(_OWORD *)&v14[v15 * 16] = v54[v15];
    ++v15;
  }
  while (v15 != 53);
  qword_102484BD8 = (uint64_t)(v14 + 848);
  xmmword_102484BE8 = xmmword_101DA3B90;
  unk_102484BF8 = xmmword_101DA3BB0;
  sub_100134750(&qword_102484C08, "ContinentalUS-EastCoast");
  v53[0] = xmmword_101DA3870;
  v53[1] = xmmword_101DA3BA0;
  uint64_t v53[2] = xmmword_101DA3BC0;
  v53[3] = xmmword_101DA3BD0;
  v53[4] = xmmword_101DA3BE0;
  v53[5] = xmmword_101DA3BF0;
  v53[6] = xmmword_101DA3870;
  qword_102484C28 = 0;
  qword_102484C30 = 0;
  qword_102484C20 = 0;
  uint64_t v16 = (char *)operator new(0x70uLL);
  uint64_t v17 = 0;
  qword_102484C20 = (uint64_t)v16;
  qword_102484C28 = (uint64_t)v16;
  qword_102484C30 = (uint64_t)(v16 + 112);
  do
  {
    *(_OWORD *)&v16[v17 * 16] = v53[v17];
    ++v17;
  }
  while (v17 != 7);
  qword_102484C28 = (uint64_t)(v16 + 112);
  xmmword_102484C38 = xmmword_101DA3BA0;
  unk_102484C48 = xmmword_101DA3C00;
  sub_100134750(&qword_102484C58, "ContinentalUS-Florida");
  v52[0] = xmmword_101DA3BA0;
  v52[1] = xmmword_101DA3C10;
  v52[2] = xmmword_101DA3C20;
  v52[3] = xmmword_101DA3C30;
  v52[4] = xmmword_101DA3C40;
  void v52[5] = xmmword_101DA3C50;
  v52[6] = xmmword_101DA3BC0;
  v52[7] = xmmword_101DA3BA0;
  qword_102484C78 = 0;
  qword_102484C80 = 0;
  qword_102484C70 = 0;
  long long v18 = (char *)operator new(0x80uLL);
  uint64_t v19 = 0;
  qword_102484C70 = (uint64_t)v18;
  qword_102484C78 = (uint64_t)v18;
  qword_102484C80 = (uint64_t)(v18 + 128);
  do
  {
    uint64_t v20 = &v18[v19 * 16];
    long long v21 = v52[v19 + 1];
    *(_OWORD *)uint64_t v20 = v52[v19];
    *((_OWORD *)v20 + 1) = v21;
    v19 += 2;
  }
  while (v19 != 8);
  qword_102484C78 = (uint64_t)(v18 + 128);
  xmmword_102484C88 = xmmword_101DA3C20;
  unk_102484C98 = xmmword_101DA3BC0;
  sub_100134750(&qword_102484CA8, "ContinentalUS-NewYork");
  v51[0] = xmmword_101DA3C60;
  v51[1] = xmmword_101DA3BE0;
  _OWORD v51[2] = xmmword_101DA3C70;
  v51[3] = xmmword_101DA3C80;
  v51[4] = xmmword_101DA3C90;
  v51[5] = xmmword_101DA3CA0;
  v51[6] = xmmword_101DA3CB0;
  v51[7] = xmmword_101DA3CC0;
  v51[8] = xmmword_101DA3CD0;
  v51[9] = xmmword_101DA3CE0;
  v51[10] = xmmword_101DA3CF0;
  v51[11] = xmmword_101DA3D00;
  v51[12] = xmmword_101DA3D10;
  v51[13] = xmmword_101DA3D20;
  v51[14] = xmmword_101DA3D30;
  v51[15] = xmmword_101DA3D40;
  v51[16] = xmmword_101DA3D50;
  v51[17] = xmmword_101DA3D60;
  unsigned char v51[18] = xmmword_101DA3D70;
  v51[19] = xmmword_101DA3D80;
  v51[20] = xmmword_101DA3D90;
  v51[21] = xmmword_101DA3DA0;
  v51[22] = xmmword_101DA3DB0;
  v51[23] = xmmword_101DA3DC0;
  v51[24] = xmmword_101DA3DD0;
  v51[25] = xmmword_101DA3DE0;
  v51[26] = xmmword_101DA3DF0;
  v51[27] = xmmword_101DA3E00;
  v51[28] = xmmword_101DA3E10;
  v51[29] = xmmword_101DA3E20;
  v51[30] = xmmword_101DA3E30;
  v51[31] = xmmword_101DA3E40;
  v51[32] = xmmword_101DA3E50;
  v51[33] = xmmword_101DA3E60;
  v51[34] = xmmword_101DA3E70;
  v51[35] = xmmword_101DA3E80;
  v51[36] = xmmword_101DA3E90;
  v51[37] = xmmword_101DA3EA0;
  v51[38] = xmmword_101DA3EB0;
  v51[39] = xmmword_101DA3EC0;
  v51[40] = xmmword_101DA3ED0;
  v51[41] = xmmword_101DA3EE0;
  v51[42] = xmmword_101DA3EF0;
  v51[43] = xmmword_101DA3F00;
  v51[44] = xmmword_101DA3870;
  v51[45] = xmmword_101DA3C60;
  qword_102484CC0 = 0;
  qword_102484CC8 = 0;
  qword_102484CD0 = 0;
  long long v22 = (char *)operator new(0x2E0uLL);
  uint64_t v23 = 0;
  qword_102484CC0 = (uint64_t)v22;
  qword_102484CC8 = (uint64_t)v22;
  qword_102484CD0 = (uint64_t)(v22 + 736);
  do
  {
    uint64_t v24 = &v22[v23 * 16];
    long long v25 = v51[v23 + 1];
    *(_OWORD *)uint64_t v24 = v51[v23];
    *((_OWORD *)v24 + 1) = v25;
    v23 += 2;
  }
  while (v23 != 46);
  qword_102484CC8 = (uint64_t)(v22 + 736);
  xmmword_102484CD8 = xmmword_101DA3C60;
  unk_102484CE8 = xmmword_101DA3C70;
  sub_100134750(&qword_102484CF8, "ContinentalUS-Maine");
  v50[0] = xmmword_101DA3C80;
  v50[1] = xmmword_101DA3F10;
  v50[2] = xmmword_101DA3F20;
  v50[3] = xmmword_101DA3F30;
  v50[4] = xmmword_101DA3F40;
  v50[5] = xmmword_101DA3F50;
  v50[6] = xmmword_101DA3F60;
  v50[7] = xmmword_101DA3F70;
  _OWORD v50[8] = xmmword_101DA3F80;
  v50[9] = xmmword_101DA3F90;
  v50[10] = xmmword_101DA3FA0;
  v50[11] = xmmword_101DA3FB0;
  v50[12] = xmmword_101DA3FC0;
  v50[13] = xmmword_101DA3FD0;
  v50[14] = xmmword_101DA3FE0;
  v50[15] = xmmword_101DA3FF0;
  v50[16] = xmmword_101DA4000;
  v50[17] = xmmword_101DA4010;
  v50[18] = xmmword_101DA4020;
  v50[19] = xmmword_101DA4030;
  v50[20] = xmmword_101DA4040;
  v50[21] = xmmword_101DA4050;
  v50[22] = xmmword_101DA4060;
  v50[23] = xmmword_101DA4070;
  v50[24] = xmmword_101DA4080;
  v50[25] = xmmword_101DA4090;
  v50[26] = xmmword_101DA40A0;
  v50[27] = xmmword_101DA40B0;
  v50[28] = xmmword_101DA40C0;
  v50[29] = xmmword_101DA40D0;
  v50[30] = xmmword_101DA40E0;
  v50[31] = xmmword_101DA40F0;
  v50[32] = xmmword_101DA4100;
  v50[33] = xmmword_101DA4110;
  v50[34] = xmmword_101DA4120;
  v50[35] = xmmword_101DA4130;
  v50[36] = xmmword_101DA4140;
  v50[37] = xmmword_101DA4150;
  v50[38] = xmmword_101DA4160;
  v50[39] = xmmword_101DA4170;
  v50[40] = xmmword_101DA4180;
  v50[41] = xmmword_101DA4190;
  v50[42] = xmmword_101DA41A0;
  v50[43] = xmmword_101DA41B0;
  v50[44] = xmmword_101DA41C0;
  v50[45] = xmmword_101DA41D0;
  v50[46] = xmmword_101DA41E0;
  v50[47] = xmmword_101DA41F0;
  v50[48] = xmmword_101DA4200;
  v50[49] = xmmword_101DA4210;
  v50[50] = xmmword_101DA4220;
  v50[51] = xmmword_101DA4230;
  v50[52] = xmmword_101DA4240;
  v50[53] = xmmword_101DA4250;
  v50[54] = xmmword_101DA4260;
  v50[55] = xmmword_101DA4270;
  v50[56] = xmmword_101DA4280;
  v50[57] = xmmword_101DA4290;
  v50[58] = xmmword_101DA42A0;
  v50[59] = xmmword_101DA42B0;
  v50[60] = xmmword_101DA42C0;
  v50[61] = xmmword_101DA42D0;
  v50[62] = xmmword_101DA42E0;
  v50[63] = xmmword_101DA42F0;
  v50[64] = xmmword_101DA4300;
  v50[65] = xmmword_101DA4310;
  v50[66] = xmmword_101DA4320;
  v50[67] = xmmword_101DA4330;
  v50[68] = xmmword_101DA4340;
  v50[69] = xmmword_101DA4350;
  v50[70] = xmmword_101DA4360;
  v50[71] = xmmword_101DA4370;
  v50[72] = xmmword_101DA4380;
  v50[73] = xmmword_101DA4390;
  v50[74] = xmmword_101DA43A0;
  v50[75] = xmmword_101DA43B0;
  v50[76] = xmmword_101DA43C0;
  v50[77] = xmmword_101DA43D0;
  v50[78] = xmmword_101DA43E0;
  v50[79] = xmmword_101DA43F0;
  v50[80] = xmmword_101DA4400;
  v50[81] = xmmword_101DA4410;
  v50[82] = xmmword_101DA4420;
  v50[83] = xmmword_101DA4430;
  v50[84] = xmmword_101DA4440;
  v50[85] = xmmword_101DA4450;
  v50[86] = xmmword_101DA4460;
  v50[87] = xmmword_101DA4470;
  v50[88] = xmmword_101DA4480;
  v50[89] = xmmword_101DA4490;
  v50[90] = xmmword_101DA44A0;
  v50[91] = xmmword_101DA44B0;
  v50[92] = xmmword_101DA44C0;
  v50[93] = xmmword_101DA44D0;
  v50[94] = xmmword_101DA44E0;
  v50[95] = xmmword_101DA44F0;
  v50[96] = xmmword_101DA4500;
  v50[97] = xmmword_101DA4510;
  v50[98] = xmmword_101DA4520;
  v50[99] = xmmword_101DA4530;
  v50[100] = xmmword_101DA4540;
  v50[101] = xmmword_101DA4550;
  v50[102] = xmmword_101DA4560;
  v50[103] = xmmword_101DA4570;
  v50[104] = xmmword_101DA4580;
  v50[105] = xmmword_101DA4590;
  v50[106] = xmmword_101DA45A0;
  v50[107] = xmmword_101DA45B0;
  v50[108] = xmmword_101DA45C0;
  v50[109] = xmmword_101DA45D0;
  v50[110] = xmmword_101DA3C80;
  qword_102484D10 = 0;
  qword_102484D18 = 0;
  qword_102484D20 = 0;
  uint64_t v26 = (char *)operator new(0x6F0uLL);
  uint64_t v27 = 0;
  qword_102484D10 = (uint64_t)v26;
  qword_102484D18 = (uint64_t)v26;
  qword_102484D20 = (uint64_t)(v26 + 1776);
  do
  {
    *(_OWORD *)&v26[v27 * 16] = v50[v27];
    ++v27;
  }
  while (v27 != 111);
  qword_102484D18 = (uint64_t)(v26 + 1776);
  xmmword_102484D28 = xmmword_101DA45E0;
  unk_102484D38 = xmmword_101DA45F0;
  sub_100134750(&qword_102484D48, "Alaska");
  v49[0] = xmmword_101DA4600;
  v49[1] = xmmword_101DA4610;
  v49[2] = xmmword_101DA4620;
  v49[3] = xmmword_101DA4630;
  v49[4] = xmmword_101DA4640;
  double v49[5] = xmmword_101DA4650;
  unsigned char v49[6] = xmmword_101DA4660;
  v49[7] = xmmword_101DA4670;
  v49[8] = xmmword_101DA4680;
  v49[9] = xmmword_101DA4690;
  unsigned char v49[10] = xmmword_101DA46A0;
  v49[11] = xmmword_101DA46B0;
  v49[12] = xmmword_101DA46C0;
  v49[13] = xmmword_101DA46D0;
  v49[14] = xmmword_101DA46E0;
  v49[15] = xmmword_101DA46F0;
  v49[16] = xmmword_101DA4700;
  v49[17] = xmmword_101DA4710;
  v49[18] = xmmword_101DA4720;
  qword_102484D60 = 0;
  qword_102484D68 = 0;
  qword_102484D70 = 0;
  long long v28 = (char *)operator new(0x130uLL);
  uint64_t v29 = 0;
  qword_102484D60 = (uint64_t)v28;
  qword_102484D68 = (uint64_t)v28;
  qword_102484D70 = (uint64_t)(v28 + 304);
  do
  {
    *(_OWORD *)&v28[v29 * 16] = v49[v29];
    ++v29;
  }
  while (v29 != 19);
  qword_102484D68 = (uint64_t)(v28 + 304);
  xmmword_102484D78 = xmmword_101DA4710;
  unk_102484D88 = xmmword_101DA4730;
  sub_100134750(&qword_102484D98, "Hawaii");
  v48[0] = xmmword_101DA4740;
  v48[1] = xmmword_101DA4750;
  v48[2] = xmmword_101DA4760;
  v48[3] = xmmword_101DA4770;
  v48[4] = xmmword_101DA4740;
  qword_102484DB8 = 0;
  qword_102484DC0 = 0;
  qword_102484DB0 = 0;
  uint64_t v30 = (char *)operator new(0x50uLL);
  uint64_t v31 = 0;
  qword_102484DB0 = (uint64_t)v30;
  qword_102484DB8 = (uint64_t)v30;
  qword_102484DC0 = (uint64_t)(v30 + 80);
  do
  {
    *(_OWORD *)&v30[v31 * 16] = v48[v31];
    ++v31;
  }
  while (v31 != 5);
  qword_102484DB8 = (uint64_t)(v30 + 80);
  xmmword_102484DC8 = xmmword_101DA4740;
  unk_102484DD8 = xmmword_101DA4760;
  sub_100134750(&qword_102484DE8, "American-Samoa");
  v47[0] = xmmword_101DA4780;
  v47[1] = xmmword_101DA4790;
  v47[2] = xmmword_101DA47A0;
  v47[3] = xmmword_101DA47B0;
  v47[4] = xmmword_101DA4780;
  qword_102484E08 = 0;
  qword_102484E10 = 0;
  qword_102484E00 = 0;
  uint64_t v32 = (char *)operator new(0x50uLL);
  uint64_t v33 = 0;
  qword_102484E00 = (uint64_t)v32;
  qword_102484E08 = (uint64_t)v32;
  qword_102484E10 = (uint64_t)(v32 + 80);
  do
  {
    *(_OWORD *)&v32[v33 * 16] = v47[v33];
    ++v33;
  }
  while (v33 != 5);
  qword_102484E08 = (uint64_t)(v32 + 80);
  xmmword_102484E18 = xmmword_101DA4780;
  unk_102484E28 = xmmword_101DA47A0;
  sub_100134750(&qword_102484E38, "Commonwealth-Northern-Mariana-Islands");
  v46[0] = xmmword_101DA47C0;
  v46[1] = xmmword_101DA47D0;
  v46[2] = xmmword_101DA47E0;
  v46[3] = xmmword_101DA47F0;
  v46[4] = xmmword_101DA47C0;
  qword_102484E58 = 0;
  qword_102484E60 = 0;
  qword_102484E50 = 0;
  long long v34 = (char *)operator new(0x50uLL);
  uint64_t v35 = 0;
  qword_102484E50 = (uint64_t)v34;
  qword_102484E58 = (uint64_t)v34;
  qword_102484E60 = (uint64_t)(v34 + 80);
  do
  {
    *(_OWORD *)&v34[v35 * 16] = v46[v35];
    ++v35;
  }
  while (v35 != 5);
  qword_102484E58 = (uint64_t)(v34 + 80);
  xmmword_102484E68 = xmmword_101DA47C0;
  unk_102484E78 = xmmword_101DA47E0;
  sub_100134750(&qword_102484E88, "Guam");
  v45[0] = xmmword_101DA4800;
  v45[1] = xmmword_101DA4810;
  v45[2] = xmmword_101DA4820;
  v45[3] = xmmword_101DA4830;
  v45[4] = xmmword_101DA4800;
  qword_102484EA8 = 0;
  qword_102484EB0 = 0;
  qword_102484EA0 = 0;
  uint64_t v36 = (char *)operator new(0x50uLL);
  uint64_t v37 = 0;
  qword_102484EA0 = (uint64_t)v36;
  qword_102484EA8 = (uint64_t)v36;
  qword_102484EB0 = (uint64_t)(v36 + 80);
  do
  {
    *(_OWORD *)&v36[v37 * 16] = v45[v37];
    ++v37;
  }
  while (v37 != 5);
  qword_102484EA8 = (uint64_t)(v36 + 80);
  xmmword_102484EB8 = xmmword_101DA4800;
  unk_102484EC8 = xmmword_101DA4820;
  sub_100134750(&qword_102484ED8, "Puerto-Rico");
  v44[0] = xmmword_101DA4840;
  v44[1] = xmmword_101DA4850;
  uint64_t v44[2] = xmmword_101DA4860;
  v44[3] = xmmword_101DA4870;
  v44[4] = xmmword_101DA4840;
  qword_102484EF8 = 0;
  qword_102484F00 = 0;
  qword_102484EF0 = 0;
  long long v38 = (char *)operator new(0x50uLL);
  uint64_t v39 = 0;
  qword_102484EF0 = (uint64_t)v38;
  qword_102484EF8 = (uint64_t)v38;
  qword_102484F00 = (uint64_t)(v38 + 80);
  do
  {
    *(_OWORD *)&v38[v39 * 16] = v44[v39];
    ++v39;
  }
  while (v39 != 5);
  qword_102484EF8 = (uint64_t)(v38 + 80);
  xmmword_102484F08 = xmmword_101DA4840;
  unk_102484F18 = xmmword_101DA4860;
  sub_100134750(&qword_102484F28, "US-Virgin-Islands");
  v43[0] = xmmword_101DA4880;
  v43[1] = xmmword_101DA4890;
  id v43[2] = xmmword_101DA48A0;
  v43[3] = xmmword_101DA48B0;
  v43[4] = xmmword_101DA48C0;
  v43[5] = xmmword_101DA48D0;
  v43[6] = xmmword_101DA4880;
  qword_102484F48 = 0;
  qword_102484F50 = 0;
  qword_102484F40 = 0;
  uint64_t v40 = (char *)operator new(0x70uLL);
  uint64_t v41 = 0;
  qword_102484F40 = (uint64_t)v40;
  qword_102484F48 = (uint64_t)v40;
  qword_102484F50 = (uint64_t)(v40 + 112);
  do
  {
    *(_OWORD *)&v40[v41 * 16] = v43[v41];
    ++v41;
  }
  while (v41 != 7);
  qword_102484F48 = (uint64_t)(v40 + 112);
  xmmword_102484F58 = xmmword_101DA4880;
  xmmword_102484F68 = xmmword_101DA48E0;

  return __cxa_atexit((void (*)(void *))sub_10106F158, qword_102484A78, (void *)&_mh_execute_header);
}

void sub_10107A350(_Unwind_Exception *exception_object)
{
  if (byte_102484F3F < 0) {
    sub_101A9F22C();
  }
  uint64_t v3 = &qword_102484F28;
  while (1)
  {
    long long v4 = (void *)*(v3 - 7);
    if (v4)
    {
      *(v3 - 6) = (uint64_t)v4;
      operator delete(v4);
    }
    if (*((char *)v3 - 57) < 0) {
      operator delete((void *)*(v3 - 10));
    }
    v3 -= 10;
    if (v3 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_10107A5E8()
{
  if (byte_102484A8F < 0) {
    sub_101A9F2E0();
  }
  JUMPOUT(0x10107A5E0);
}

void sub_10107A600()
{
}

void *sub_10107A608(void *a1, int a2)
{
  sub_100134750(__p, "");
  sub_10107A6EC((uint64_t)a1, "SkiHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = off_10230D3E8;
  a1[9] = off_10230D4A0;
  a1[50] = 0;
  a1[51] = 0;
  sub_10107BD00((uint64_t)a1);
  return a1;
}

void sub_10107A6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10107AB98(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_10107A6EC(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 8));
  void *v12 = &off_1022B2C68;
  *(void *)a1 = off_10230D760;
  *(void *)(a1 + 72) = off_10230D808;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_10230D760;
  *(void *)(a1 + 72) = off_10230D808;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 320) = 12000;
  *(void *)(a1 + 328) = off_1022B2C20;
  sub_1003BDF2C((void *)(a1 + 336));
  *(void *)(a1 + 336) = &off_1022B2C68;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 264) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_10107AAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_100D97288(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_10107AB90()
{
}

void *sub_10107AB98(void *a1)
{
  *a1 = off_10230D760;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_10230D808;
  a1[41] = off_1022B2C20;
  sub_1003BE1F8(a1 + 42);
  sub_100D97288(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022B2C20;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_10107AC5C(uint64_t a1)
{
  return sub_10107AB98((void *)(a1 - 72));
}

void sub_10107AC64(void *a1)
{
  sub_10107AB98(a1);

  operator delete();
}

void sub_10107AC9C(uint64_t a1)
{
  sub_10107AB98((void *)(a1 - 72));

  operator delete();
}

uint64_t sub_10107ACD8(uint64_t *a1, uint64_t a2, void **a3)
{
  if (!sub_100082064(a1 + 9)) {
    return 109;
  }
  memset(uu, 0, sizeof(uu));
  uuid_parse("00000000-0000-0000-0000-000000000000", uu);
  if (uuid_is_null((const unsigned __int8 *)(a2 + 8)) && uuid_compare(uu, (const unsigned __int8 *)(a2 + 24)))
  {
    memset(dst, 0, sizeof(dst));
    uuid_copy(dst, (const unsigned __int8 *)(a2 + 24));
    return sub_10107AF48((uint64_t)a1, dst, a3);
  }
  else
  {
    uint64_t v6 = sub_10107B1F4(a1, a2, a3);
    if (v6 == 100)
    {
      if (*a3 == a3[1])
      {
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        *(_OWORD *)uuid_t dst = 0u;
        long long v34 = 0u;
        uint64_t v6 = sub_10107B500((uint64_t)a1);
        if (v6 == 100)
        {
          v32[0] = 0;
          v32[1] = 0;
          sub_100652E3C((uint64_t)a1, (unsigned __int8 *)v32);
          uuid_copy(&dst[8], (const unsigned __int8 *)v32);
          unint64_t v7 = (unint64_t)a3[2];
          uint64_t v8 = a3[1];
          if ((unint64_t)v8 >= v7)
          {
            unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (unsigned char *)*a3) >> 5);
            unint64_t v15 = v14 + 1;
            if (v14 + 1 > 0x2AAAAAAAAAAAAAALL) {
              sub_1001D7FD4();
            }
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a3) >> 5);
            if (2 * v16 > v15) {
              unint64_t v15 = 2 * v16;
            }
            if (v16 >= 0x155555555555555) {
              unint64_t v17 = 0x2AAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v17 = v15;
            }
            if (v17) {
              __int16 v18 = (char *)sub_100642EA8((uint64_t)(a3 + 2), v17);
            }
            else {
              __int16 v18 = 0;
            }
            uint64_t v19 = &v18[96 * v14];
            uint64_t v20 = &v18[96 * v17];
            long long v21 = v34;
            *(_OWORD *)uint64_t v19 = *(_OWORD *)dst;
            *((_OWORD *)v19 + 1) = v21;
            long long v22 = v35;
            long long v23 = v36;
            long long v24 = v38;
            *((_OWORD *)v19 + 4) = v37;
            *((_OWORD *)v19 + 5) = v24;
            *((_OWORD *)v19 + 2) = v22;
            *((_OWORD *)v19 + 3) = v23;
            uint64_t v13 = v19 + 96;
            uint64_t v26 = (char *)*a3;
            long long v25 = (char *)a3[1];
            if (v25 != *a3)
            {
              do
              {
                long long v27 = *((_OWORD *)v25 - 5);
                *((_OWORD *)v19 - 6) = *((_OWORD *)v25 - 6);
                *((_OWORD *)v19 - 5) = v27;
                long long v28 = *((_OWORD *)v25 - 4);
                long long v29 = *((_OWORD *)v25 - 3);
                long long v30 = *((_OWORD *)v25 - 1);
                *((_OWORD *)v19 - 2) = *((_OWORD *)v25 - 2);
                *((_OWORD *)v19 - 1) = v30;
                *((_OWORD *)v19 - 4) = v28;
                *((_OWORD *)v19 - 3) = v29;
                v19 -= 96;
                v25 -= 96;
              }
              while (v25 != v26);
              long long v25 = (char *)*a3;
            }
            *a3 = v19;
            a3[1] = v13;
            a3[2] = v20;
            if (v25) {
              operator delete(v25);
            }
          }
          else
          {
            long long v9 = v34;
            _OWORD *v8 = *(_OWORD *)dst;
            v8[1] = v9;
            long long v10 = v35;
            long long v11 = v36;
            long long v12 = v38;
            v8[4] = v37;
            v8[5] = v12;
            v8[2] = v10;
            v8[3] = v11;
            uint64_t v13 = v8 + 6;
          }
          a3[1] = v13;
        }
      }
      else
      {
        return 100;
      }
    }
  }
  return v6;
}

uint64_t sub_10107AF48(uint64_t a1, const unsigned __int8 *a2, void *a3)
{
  if (sub_100082064(a1 + 72))
  {
    a3[1] = *a3;
    uuid_unparse(a2, out);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from SkiHistory WHERE sessionId = ?");
  }
  return 109;
}

void sub_10107B1B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107B1F4(uint64_t *a1, uint64_t a2, void *a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_100652E3C((uint64_t)a1, (unsigned __int8 *)v10);
  if (!sub_100082064(a1 + 9)) {
    return 109;
  }
  a3[1] = *a3;
  *(void *)uu1 = 0;
  uint64_t v9 = 0;
  sub_100652E3C((uint64_t)a1, uu1);
  if (!uuid_is_null((const unsigned __int8 *)(a2 + 8)) && !uuid_compare(uu1, (const unsigned __int8 *)(a2 + 8))) {
    sub_10014D518(a1[10], (uint64_t)"SELECT * from SkiHistory WHERE id >= ?");
  }
  (*(void (**)(uint64_t *, void *))(*a1 + 40))(a1, a3);
  return 100;
}

void sub_10107B4BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107B500(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from SkiHistory ORDER BY id DESC LIMIT 1");
  }
  return 109;
}

void sub_10107B5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
  {
    a10 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_101A7735C((uint64_t)&__p, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_10107B604(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM SkiHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_10107B750(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107B768(uint64_t a1, uint64_t a2)
{
  return sub_10107B604(a1 - 72, a2);
}

uint64_t sub_10107B770(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from SkiHistory ORDER BY id ASC");
  }
  return result;
}

void sub_10107B9CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107BA14(uint64_t *a1, uint64_t a2)
{
  long long v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v6, 0);
  unint64_t v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t v8 = sqlite3_column_text(v7, 1);
  uuid_parse((const char *)v8, (unsigned __int8 *)(a2 + 24));
  uint64_t v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 2);
  uint64_t v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 48) = sqlite3_column_double(v10, 3);
  long long v11 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 56) = sqlite3_column_double(v11, 4);
  long long v12 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 64) = sqlite3_column_double(v12, 5);
  uint64_t v13 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 72) = sqlite3_column_double(v13, 6);
  unint64_t v14 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 80) = sqlite3_column_double(v14, 7);
  unint64_t v15 = (sqlite3_stmt *)sub_10014D19C(*a1);
  double v16 = sqlite3_column_double(v15, 8);
  uint64_t result = 0;
  *(double *)(a2 + 88) = v16;
  return result;
}

uint64_t sub_10107BB24(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM SkiHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_10107BBE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107BBF8(uint64_t a1)
{
  return sub_10107BB24(a1 - 72);
}

void sub_10107BC00(uint64_t a1, void *a2, const void *a3)
{
  if ((a2 != 0) == (a3 != 0))
  {

    *(void *)(a1 + 400) = a2;
    uint64_t v6 = *(const void **)(a1 + 408);
    if (v6) {
      _Block_release(v6);
    }
    if (a3) {
      *(void *)(a1 + 408) = _Block_copy(a3);
    }
  }
  else
  {
    unint64_t v7 = (uint64_t *)sub_101A9F2EC();
    sub_10107BC78(v7, v8);
  }
}

uint64_t sub_10107BC78(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10002B640(a1[10]);
    (*(void (**)(uint64_t *, uint64_t, void))(*a1 + 120))(a1, a2, 0);
    uint64_t v5 = a1[10];
    return sub_100028FB4(v5);
  }
  return result;
}

uint64_t sub_10107BD00(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    return sub_1005F7B0C(v3, "SkiHistory", (const char **)&off_10230D570, (const std::string::value_type **)&off_102475C68, 0);
  }
  return result;
}

uint64_t sub_10107BD68(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM SkiHistory");
  }
  return result;
}

void sub_10107BE18(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107BE30(uint64_t a1)
{
  return sub_10107BD68(a1 - 72);
}

uint64_t sub_10107BE38(uint64_t *a1, uint64_t a2)
{
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10014D518(a1[10], (uint64_t)"DELETE FROM SkiHistory WHERE startTime > ?");
  }
  return result;
}

void sub_10107BF34(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107BF4C(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"UPDATE SkiHistory SET startTime = startTime + ?");
  }
  return result;
}

void sub_10107C000(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107C018(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO SkiHistory (sessionId, startTime, endTime, runDistance, runAvgSpeed, runMaxSpeed, runSlope, runElevationDescent) VALUES (?, ?, ?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_10107C27C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107C2C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 408);
  long long v2 = *(_OWORD *)(a1 + 88);
  void v6[2] = *(_OWORD *)(a1 + 72);
  v6[3] = v2;
  long long v3 = *(_OWORD *)(a1 + 120);
  v6[4] = *(_OWORD *)(a1 + 104);
  v6[5] = v3;
  long long v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(v1 + 16))(v1, v6);
}

uint64_t sub_10107C348()
{
  return 0;
}

uint64_t sub_10107C350(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM SkiHistory ORDER BY startTime DESC LIMIT 1");
  }
  return 2;
}

void sub_10107C440(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107C484(uint64_t a1, uint64_t *a2, char **a3)
{
  a3[1] = *a3;
  sub_10002B640(*(void *)(a1 + 80));
  *(void *)src = 0;
  uint64_t v32 = 0;
  sub_100652E3C(a1, src);
  for (; !sub_10107BA14(a2, (uint64_t)&v33); a3[1] = v12)
  {
    uuid_copy((unsigned __int8 *)&v33 + 8, src);
    uint64_t v6 = a3[1];
    unint64_t v7 = (unint64_t)a3[2];
    if ((unint64_t)v6 >= v7)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a3) >> 5);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0x2AAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a3) >> 5);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x155555555555555) {
        unint64_t v16 = 0x2AAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        unint64_t v17 = (char *)sub_100642EA8((uint64_t)(a3 + 2), v16);
      }
      else {
        unint64_t v17 = 0;
      }
      __int16 v18 = &v17[96 * v13];
      long long v19 = v34;
      *(_OWORD *)__int16 v18 = v33;
      *((_OWORD *)v18 + 1) = v19;
      long long v20 = v35;
      long long v21 = v36;
      long long v22 = v38;
      *((_OWORD *)v18 + 4) = v37;
      *((_OWORD *)v18 + 5) = v22;
      *((_OWORD *)v18 + 2) = v20;
      *((_OWORD *)v18 + 3) = v21;
      long long v24 = *a3;
      long long v23 = a3[1];
      long long v25 = v18;
      if (v23 != *a3)
      {
        do
        {
          long long v26 = *((_OWORD *)v23 - 5);
          *((_OWORD *)v25 - 6) = *((_OWORD *)v23 - 6);
          *((_OWORD *)v25 - 5) = v26;
          long long v27 = *((_OWORD *)v23 - 4);
          long long v28 = *((_OWORD *)v23 - 3);
          long long v29 = *((_OWORD *)v23 - 1);
          *((_OWORD *)v25 - 2) = *((_OWORD *)v23 - 2);
          *((_OWORD *)v25 - 1) = v29;
          *((_OWORD *)v25 - 4) = v27;
          *((_OWORD *)v25 - 3) = v28;
          v25 -= 96;
          v23 -= 96;
        }
        while (v23 != v24);
        long long v23 = *a3;
      }
      long long v12 = v18 + 96;
      *a3 = v25;
      a3[1] = v18 + 96;
      a3[2] = &v17[96 * v16];
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      long long v8 = v34;
      *(_OWORD *)uint64_t v6 = v33;
      *((_OWORD *)v6 + 1) = v8;
      long long v9 = v35;
      long long v10 = v36;
      long long v11 = v38;
      *((_OWORD *)v6 + 4) = v37;
      *((_OWORD *)v6 + 5) = v11;
      *((_OWORD *)v6 + 2) = v9;
      *((_OWORD *)v6 + 3) = v10;
      long long v12 = v6 + 96;
    }
  }
  return sub_100028FB4(*(void *)(a1 + 80));
}

uint64_t sub_10107C69C(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_100082064(a1 + 72))
  {
    a3[1] = *a3;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM SkiHistory ORDER by id DESC limit ?");
  }
  return 109;
}

void sub_10107C980(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107C9C4(void *a1)
{
  long long v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v11);
  if ((SHIBYTE(v12) & 0x80000000) == 0)
  {
    if (HIBYTE(v12)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A9F478(v2);
    __break(1u);
  }
  long long v9 = v11[1];
  operator delete(v11[0]);
  if (!v9) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v11);
    long long v3 = sub_100132EFC(&v12, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v13, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = v13;
    }
    else {
      long long v4 = (void **)v13[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)v13[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
    if ((char)v14 < 0) {
      operator delete(v13[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      long long v8 = v13;
    }
    else {
      long long v8 = (void **)v13[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_10107CE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 - 185) < 0) {
    operator delete(*(void **)(v4 - 208));
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10107CEDC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_10107EE64(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_10230D848);
  }
  uint64_t v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)unint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&void v13[6] = "";
    __int16 v14 = 2082;
    unint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_10230D848);
    }
    uint64_t v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)std::string buf = 134349056;
      *(void *)unint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10230D848);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLSkiEntry>::setDatabaseAccessible() [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_10107D664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_10107D698(uint64_t a1, uint64_t a2, char a3)
{
  v31[0] = (id)os_transaction_create();
  v31[1] = 0;
  if (*(double *)(a1 + 264) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v31);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)a1 + 104))(a1, v40);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10230D848);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10230D848);
        }
        LOWORD(v32) = 0;
        unint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *(double *)(a2 + 40);
    double v8 = v41;
    double v9 = v7 - v41;
    if (v7 - v41 < 0.0) {
      double v9 = -(v7 - v41);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_10230D848);
      }
      long long v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(a2 + 40);
        *(_DWORD *)std::string buf = 134349312;
        double v37 = v41;
        __int16 v38 = 2050;
        uint64_t v39 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10230D848);
        }
        uint64_t v25 = *(void *)(a2 + 40);
        int v32 = 134349312;
        double v33 = v41;
        __int16 v34 = 2050;
        uint64_t v35 = v25;
        long long v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      CLWriteStackshot();
      double v7 = *(double *)(a2 + 40);
      double v8 = v41;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10230D848);
        }
        uint64_t v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *(double *)(a2 + 40);
          *(_DWORD *)std::string buf = 134217984;
          double v37 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_10230D848);
          }
          double v27 = *(double *)(a2 + 40);
          int v32 = 134217984;
          double v33 = v27;
          long long v28 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v28);
          if (v28 != (char *)buf) {
            free(v28);
          }
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v30 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_10230D848);
        double v17 = v30;
      }
      double v18 = v16 - v17;
      long long v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 134217984;
        double v37 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_10230D848);
        }
        int v32 = 134217984;
        double v33 = v18;
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLSkiEntry>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLSkiEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v40, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v20;
  long long v21 = *(_OWORD *)(a2 + 32);
  long long v22 = *(_OWORD *)(a2 + 48);
  long long v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v23;
  *(_OWORD *)(a1 + 256) = v21;
  *(_OWORD *)(a1 + 272) = v22;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v31);
}

void sub_10107DEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10107DED4(uint64_t a1)
{
  return sub_10107CEDC(a1 - 72);
}

void sub_10107DEDC(id a1)
{
  qword_102419188 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

uint64_t sub_10107DF0C(void *a1, void *a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v13);
  if ((SHIBYTE(v14) & 0x80000000) == 0)
  {
    if (HIBYTE(v14)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101A9F5E8(v4);
    __break(1u);
  }
  uint64_t v12 = v13[1];
  operator delete(v13[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v13);
    int v6 = sub_100132EFC(&v14, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(v15, a1);
    if ((v16 & 0x80u) == 0) {
      double v7 = v15;
    }
    else {
      double v7 = (void **)v15[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v8 = v16;
    }
    else {
      uint64_t v8 = (uint64_t)v15[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v16 < 0) {
      operator delete(v15[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = v15;
    }
    else {
      uint64_t v11 = (void **)v15[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_10107E358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10107E3E0(void *a1, uint64_t a2)
{
  uint64_t v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101A9F758(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  uint64_t v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_10107E754(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A9F8C8(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    uint64_t v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_10107EA80(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101A9FA38(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

void sub_10107EDA4(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10107EDD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_10107EE64(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_10107EEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10107EF00(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_10107EF30()
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230D960);
  }
  uint64_t v0 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "TILE: running initStaticGlobals", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiTileFile::initStaticGlobals()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  sub_1000C7F88(buf);
  sub_10006EF84(*(uint64_t *)buf, "kMinimumSupportedTilesVersion", &dword_102475C78);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230D960);
  }
  uint64_t v1 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = dword_102475C78;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "TILE: fMinimumSupportedTilesVersion, %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiTileFile::initStaticGlobals()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_10107F240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10107F260(uint64_t a1, uint64_t a2)
{
  int v5 = 0;
  uint64_t v3 = sub_1007FC1E8(a1, &v5, qword_102484F78, a2);
  *(void *)uint64_t v3 = off_10230D898;
  *(_DWORD *)(v3 + 328) = 175034;
  *(_OWORD *)(v3 + 332) = xmmword_101DA4970;
  *(_DWORD *)(v3 + 356) = 109498;
  *(void *)(v3 + 360) = 192;
  *(_DWORD *)(v3 + 368) = 381;
  *(void *)(v3 + 372) = 0;
  *(_OWORD *)(v3 + 380) = 0u;
  *(_DWORD *)(v3 + 396) = 0;
  *(int32x2_t *)(v3 + 400) = vdup_n_s32(0xC47A0000);
  *(_DWORD *)(v3 + 408) = -998637568;
  *(_OWORD *)(v3 + 412) = 0u;
  *(_OWORD *)(v3 + 428) = 0u;
  *(_OWORD *)(v3 + 444) = 0u;
  *(_OWORD *)(v3 + 460) = 0u;
  *(_OWORD *)(v3 + 476) = 0u;
  *(_OWORD *)(v3 + 492) = 0u;
  *(_OWORD *)(v3 + 508) = 0u;
  *(_OWORD *)(v3 + 524) = 0u;
  *(_OWORD *)(v3 + 540) = 0u;
  *(_DWORD *)(v3 + 556) = 0;
  *(_OWORD *)(v3 + 600) = 0u;
  *(_OWORD *)(v3 + 576) = 0u;
  *(void *)(v3 + 592) = v3 + 600;
  pthread_once(&stru_102475C80, sub_10107EF30);
  (*(void (**)(uint64_t))(*(void *)a1 + 104))(a1);
  return a1;
}

void sub_10107F3AC(_Unwind_Exception *a1)
{
  int v5 = v4;
  sub_1000F5BB0(v3, *v5);
  uint64_t v7 = *v2;
  uint64_t *v2 = 0;
  if (v7) {
    sub_101083370((uint64_t)v2, v7);
  }
  sub_1010456D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10107F3E8(uint64_t a1)
{
  *(void *)a1 = off_10230D898;
  sub_10107F49C(a1);
  sub_1000F5BB0(a1 + 592, *(void **)(a1 + 600));
  uint64_t v2 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = 0;
  if (v2) {
    sub_101083370(a1 + 576, v2);
  }

  return sub_1010456D8(a1);
}

void sub_10107F464(uint64_t a1)
{
  sub_10107F3E8(a1);

  operator delete();
}

uint64_t sub_10107F49C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  bzero((void *)(a1 + 356), 0xCCuLL);
  bzero((void *)(a1 + 328), 0x14uLL);
  *(void *)(a1 + 348) = 0;
  *(void *)(a1 + 560) = 0;
  *(_DWORD *)(a1 + 568) = 0;
  uint64_t v3 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = 0;
  if (v3) {
    sub_101083370(a1 + 576, v3);
  }
  sub_1000F5BB0(a1 + 592, *(void **)(a1 + 600));
  *(void *)(a1 + 592) = a1 + 600;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 600) = 0;
  sub_101045750(a1);
  return (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
}

void sub_10107F594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10107F5A8(uint64_t a1, FILE *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230D960);
  }
  uint64_t v10 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v11 = *(unsigned __int16 *)(a3 + 2);
    *(_DWORD *)std::string buf = 67109378;
    unsigned int v32 = v11;
    __int16 v33 = 2080;
    __int16 v34 = sub_101043C80(v11);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: CLWifiTileFile, sectionId, %d, %s", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    sub_101043C80(*(unsigned __int16 *)(a3 + 2));
    long long v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
  int v12 = *(unsigned __int16 *)(a3 + 2);
  if (v12 == 3)
  {
    *(int8x8_t *)&double v20 = sub_100D33EB0(a4, a4);
    (*(void (**)(uint64_t, uint64_t, double))(*(void *)a1 + 152))(a1, a4, v20);
    if (!*(unsigned char *)(a5 + 8))
    {
      long long v24 = (char *)sub_100800268(a1, a2, a3, 0, *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 16));
      if (!v24) {
        return;
      }
      uint64_t v15 = v24;
      if (!*(unsigned char *)(a5 + 9))
      {
        unint64_t v25 = 0;
        do
        {
          if (v25 >= *(unsigned int *)(a4 + 12)) {
            break;
          }
          long long v26 = (int *)&v15[v25 * *(unsigned int *)(a4 + 16)];
          sub_100D33F08(v26, (uint64_t)v26);
          (*(void (**)(uint64_t, int *))(*(void *)a1 + 160))(a1, v26);
          ++v25;
        }
        while (!*(unsigned char *)(a5 + 9));
      }
      goto LABEL_43;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    long long v21 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TILE: headers only, avoid reading SectionID_TileAccessPointTable", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230D960);
      }
      long long v22 = (const char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v22);
      if (v22 != (const char *)buf)
      {
        long long v23 = (char *)v22;
LABEL_44:
        free(v23);
      }
    }
  }
  else if (v12 == 2)
  {
    *(int8x8_t *)&double v13 = sub_100D33EB0(a4, a4);
    (*(void (**)(uint64_t, uint64_t, double))(*(void *)a1 + 136))(a1, a4, v13);
    unsigned __int8 v14 = (char *)sub_100800268(a1, a2, a3, 0, *(_DWORD *)(a4 + 12), *(_DWORD *)(a4 + 16));
    if (v14)
    {
      uint64_t v15 = v14;
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230D960);
      }
      uint64_t v16 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v17 = *(_DWORD *)(a4 + 16);
        *(_DWORD *)std::string buf = 67109120;
        unsigned int v32 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "TILE: tileMacIndexHeader, entrySizeInBytes, %u", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10230D960);
        }
        double v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
      }
      if (*(unsigned char *)(a5 + 8))
      {
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10230D960);
        }
        double v18 = qword_102419638;
        if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "TILE: headers only, avoid reading SectionID_TileIndex_Mac", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419630 != -1) {
            dispatch_once(&qword_102419630, &stru_10230D960);
          }
          long long v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const TraverseDetails &)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
      }
      else if (*(_DWORD *)(a4 + 12))
      {
        unint64_t v27 = 0;
        do
        {
          long long v28 = (int *)&v15[v27 * *(unsigned int *)(a4 + 16)];
          sub_100D33EE8(v28, (uint64_t)v28);
          (*(void (**)(uint64_t, int *))(*(void *)a1 + 144))(a1, v28);
          ++v27;
        }
        while (v27 < *(unsigned int *)(a4 + 12));
      }
LABEL_43:
      long long v23 = v15;
      goto LABEL_44;
    }
  }
}

__n128 sub_10107FCEC(uint64_t a1, uint64_t a2)
{
  sub_1007FEA84(a1, a2);
  *(void *)(a1 + 560) = *(void *)(a2 + 44);
  *(_DWORD *)(a1 + 568) = *(_DWORD *)(a2 + 52);
  uint64_t v4 = *(void **)(a1 + 576);
  if (!v4) {
    operator new();
  }
  v4[1] = *v4;
  long long v5 = *(_OWORD *)(a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 404) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 420) = v5;
  *(_OWORD *)(a1 + 372) = v7;
  *(_OWORD *)(a1 + 388) = v6;
  long long v8 = *(_OWORD *)(a2 + 128);
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 468) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 484) = v8;
  *(_OWORD *)(a1 + 436) = v10;
  *(_OWORD *)(a1 + 452) = v9;
  long long v12 = *(_OWORD *)(a2 + 160);
  long long v11 = *(_OWORD *)(a2 + 176);
  long long v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 544) = *(_OWORD *)(a2 + 188);
  *(_OWORD *)(a1 + 516) = v12;
  *(_OWORD *)(a1 + 532) = v11;
  *(_OWORD *)(a1 + 500) = v13;
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 356) = *(_OWORD *)a2;
  return result;
}

void sub_10107FDBC(uint64_t a1, _DWORD *a2)
{
  sub_1007FF93C(a1, a2);
  long long v4 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 344) = a2[4];
  *(_OWORD *)(a1 + 328) = v4;
  long long v5 = *(void **)(a1 + 576);
  if (!v5) {
    operator new();
  }
  v5[1] = *v5;
  long long v6 = *(char ***)(a1 + 576);
  unint64_t v7 = a2[3];

  sub_10107FE64(v6, v7);
}

void sub_10107FE64(char **a1, unint64_t a2)
{
  long long v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 1) < a2)
  {
    if (a2 >= 0x199999999999999ALL) {
      sub_1001D7FD4();
    }
    uint64_t v5 = (a1[1] - *a1) / 10;
    long long v6 = (char *)sub_101083488(v3, a2);
    unint64_t v7 = &v6[10 * v5];
    long long v9 = &v6[10 * v8];
    long long v11 = *a1;
    long long v10 = a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *(void *)(v10 - 10);
        v10 -= 10;
        __int16 v14 = *((_WORD *)v10 + 4);
        *(void *)(v12 - 10) = v13;
        v12 -= 10;
        *((_WORD *)v12 + 4) = v14;
      }
      while (v10 != v11);
      long long v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_10107FF44(uint64_t a1, uint64_t *a2)
{
  if (!*(unsigned char *)(a1 + 313))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    long long v4 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v5 = *(uint64_t **)(a1 + 576);
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      int v8 = *(_DWORD *)(a1 + 340);
      v35.__r_.__value_.__r.__words[0] = sub_100B390EC((unsigned __int8 *)a2);
      sub_100B39278((std::string *)__p);
      long long v9 = SBYTE3(v40) >= 0 ? __p : *(unsigned char **)__p;
      int v10 = *(_DWORD *)((char *)a2 + 6);
      *(_DWORD *)std::string buf = 134218754;
      unint64_t v44 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 1);
      __int16 v45 = 1024;
      int v46 = v8;
      __int16 v47 = 2080;
      uint64_t v48 = v9;
      __int16 v49 = 1024;
      int v50 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: idx, %3lu, %3u, mac, %s, offset, %u", buf, 0x22u);
      if (SBYTE3(v40) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230D960);
      }
      long long v28 = *(uint64_t **)(a1 + 576);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      int v31 = *(_DWORD *)(a1 + 340);
      sub_100B390EC((unsigned __int8 *)a2);
      sub_100B39278(&v35);
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v32 = &v35;
      }
      else {
        unsigned int v32 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      int v33 = *(_DWORD *)((char *)a2 + 6);
      *(_DWORD *)std::string __p = 134218754;
      *(void *)&__p[4] = 0xCCCCCCCCCCCCCCCDLL * ((v29 - v30) >> 1);
      __int16 v37 = 1024;
      int v38 = v31;
      __int16 v39 = 2080;
      uint64_t v40 = v32;
      __int16 v41 = 1024;
      int v42 = v33;
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingTileIndexEntry(const CLTilesManager_Type::AccessPointIndexEntry &)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
  }
  long long v11 = *(char ***)(a1 + 576);
  unint64_t v12 = (unint64_t)v11[1];
  unint64_t v13 = (unint64_t)v11[2];
  if (v12 >= v13)
  {
    unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)*v11) >> 1);
    unint64_t v17 = v16 + 1;
    if (v16 + 1 > 0x1999999999999999) {
      sub_1001D7FD4();
    }
    unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)*v11) >> 1);
    if (2 * v18 > v17) {
      unint64_t v17 = 2 * v18;
    }
    if (v18 >= 0xCCCCCCCCCCCCCCCLL) {
      unint64_t v19 = 0x1999999999999999;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19) {
      double v20 = (char *)sub_101083488((uint64_t)(v11 + 2), v19);
    }
    else {
      double v20 = 0;
    }
    long long v21 = &v20[10 * v16];
    long long v22 = &v20[10 * v19];
    uint64_t v23 = *a2;
    *((_WORD *)v21 + 4) = *((_WORD *)a2 + 4);
    *(void *)long long v21 = v23;
    uint64_t v15 = v21 + 10;
    unint64_t v25 = *v11;
    long long v24 = v11[1];
    if (v24 != *v11)
    {
      do
      {
        uint64_t v26 = *(void *)(v24 - 10);
        v24 -= 10;
        __int16 v27 = *((_WORD *)v24 + 4);
        *(void *)(v21 - 10) = v26;
        v21 -= 10;
        *((_WORD *)v21 + 4) = v27;
      }
      while (v24 != v25);
      long long v24 = *v11;
    }
    char *v11 = v21;
    v11[1] = v15;
    id v11[2] = v22;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    uint64_t v14 = *a2;
    *(_WORD *)(v12 + 8) = *((_WORD *)a2 + 4);
    *(void *)unint64_t v12 = v14;
    uint64_t v15 = (char *)(v12 + 10);
  }
  v11[1] = v15;
}

double sub_101080310(uint64_t a1, uint64_t a2)
{
  sub_1007FFD9C(a1, (_DWORD *)a2);
  double result = *(double *)(a2 + 12);
  *(double *)(a1 + 348) = result;
  *(_DWORD *)(a1 + 292) = 0;
  return result;
}

_WORD *sub_101080348(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v36 = 0;
  double v37 = 0.0;
  sub_10104C204(a1, *(_DWORD *)(a2 + 6) & 0xFFF, (*(_DWORD *)(a2 + 6) >> 12) & 0xFFF, &v37, (double *)&v36);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230D960);
  }
  long long v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 292);
    int v6 = *a2;
    int v7 = a2[1];
    int v8 = a2[2];
    int v9 = a2[3];
    int v10 = a2[4];
    unsigned int v11 = *(_DWORD *)(a2 + 6);
    int v28 = v11 & 0xFFF;
    int v29 = a2[5];
    int v31 = (v11 >> 12) & 0xFFF;
    double v33 = v37;
    uint64_t v35 = v36;
    double v12 = sub_1013FB07C(HIBYTE(v11) & 0xF);
    double v13 = sub_1013FB098(*(_DWORD *)(a2 + 6) >> 28);
    *(_DWORD *)std::string buf = 67112192;
    *(_DWORD *)&uint8_t buf[4] = v5;
    __int16 v64 = 1024;
    int v65 = v6;
    __int16 v66 = 1024;
    int v67 = v7;
    __int16 v68 = 1024;
    int v69 = v8;
    __int16 v70 = 1024;
    int v71 = v9;
    __int16 v72 = 1024;
    int v73 = v10;
    __int16 v74 = 1024;
    int v75 = v29;
    __int16 v76 = 1024;
    int v77 = v28;
    __int16 v78 = 1024;
    int v79 = v31;
    __int16 v80 = 2048;
    double v81 = v33;
    __int16 v82 = 2048;
    uint64_t v83 = v35;
    __int16 v84 = 2048;
    double v85 = v12;
    __int16 v86 = 2048;
    double v87 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf, unc, %.1lf, reach, %.1lf", buf, 0x60u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    int v16 = *(_DWORD *)(a1 + 292);
    int v17 = *a2;
    int v18 = a2[1];
    int v19 = a2[2];
    int v20 = a2[3];
    int v21 = a2[4];
    int v22 = a2[5];
    unsigned int v23 = *(_DWORD *)(a2 + 6);
    int v24 = v23 & 0xFFF;
    int v30 = (v23 >> 12) & 0xFFF;
    double v34 = v37;
    uint64_t v32 = v36;
    double v25 = sub_1013FB07C(HIBYTE(v23) & 0xF);
    double v26 = sub_1013FB098(*(_DWORD *)(a2 + 6) >> 28);
    LODWORD(v38) = 67112192;
    HIDWORD(v38) = v16;
    __int16 v39 = 1024;
    int v40 = v17;
    __int16 v41 = 1024;
    int v42 = v18;
    __int16 v43 = 1024;
    int v44 = v19;
    __int16 v45 = 1024;
    int v46 = v20;
    __int16 v47 = 1024;
    int v48 = v21;
    __int16 v49 = 1024;
    int v50 = v22;
    __int16 v51 = 1024;
    int v52 = v24;
    __int16 v53 = 1024;
    int v54 = v30;
    __int16 v55 = 2048;
    double v56 = v34;
    __int16 v57 = 2048;
    uint64_t v58 = v32;
    __int16 v59 = 2048;
    double v60 = v25;
    __int16 v61 = 2048;
    double v62 = v26;
    __int16 v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLWifiTileFile::onTraversingTileAPTableEntry(const CLTilesManager_Type::AccessPointEntry &)", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  unint64_t v38 = sub_100B390EC(a2);
  *(void *)std::string buf = &v38;
  double result = sub_1010833FC((uint64_t **)(a1 + 592), &v38, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  uint64_t v15 = *(void *)a2;
  result[24] = *((_WORD *)a2 + 4);
  *((void *)result + 5) = v15;
  ++*(_DWORD *)(a1 + 292);
  return result;
}

uint64_t sub_101080720(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9 = 0;
  int v10 = (void *)(a4 + 16);
  while (1)
  {
    unsigned int v11 = (v9 + a3) >> 1;
    double v12 = (unsigned __int8 *)(*(_DWORD *)(a5 + 16) * v11 + a2);
    unint64_t v24 = sub_100B390EC(v12);
    BOOL v13 = sub_100B39178(&v24, v10);
    if (v13) {
      break;
    }
    if (v9 == v11 || !sub_100B391C8(v10, &v24))
    {
      if (a3 == v11 || !sub_100B391A0(v10, &v24)) {
        goto LABEL_17;
      }
      a3 = (v9 + a3) >> 1;
      unsigned int v11 = v9;
    }
    else
    {
      unsigned int v9 = (v9 + a3) >> 1;
    }
    if (v11 > a3) {
      goto LABEL_18;
    }
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230D960);
  }
  uint64_t v14 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = sub_1000D8908((uint64_t)v10);
    uint64_t v16 = sub_1000D8908((uint64_t)&v24);
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = v15;
    __int16 v29 = 2048;
    uint64_t v30 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "TILE: binarySearchAP, match, %012llx, %012llx", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    uint64_t v21 = sub_1000D8908((uint64_t)v10);
    uint64_t v22 = sub_1000D8908((uint64_t)&v24);
    *(_DWORD *)double v25 = 134218240;
    *(void *)&v25[4] = v21;
    __int16 v26 = 2048;
    uint64_t v27 = v22;
    unsigned int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTileFile::binarySearchAP(CLTilesManager_Type::AccessPointEntry *, unsigned int, const TraverseDetails &, const CLTilesManager_Type::TileAccessPointTable &)", "%s\n", v23);
    if (v23 != buf) {
      free(v23);
    }
  }
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)a1 + 160))(a1, v12);
LABEL_17:
  unsigned int v11 = v9;
LABEL_18:
  char v17 = v11 == a3 || v13;
  if ((v17 & 1) == 0)
  {
    int v18 = *(_DWORD *)(a5 + 16);
    int v19 = (unsigned __int8 *)(v18 * a3 + a2);
    *(void *)std::string buf = sub_100B390EC((unsigned __int8 *)(v18 * v11 + a2));
    *(void *)double v25 = sub_100B390EC(v19);
    BOOL v13 = sub_100B39178(buf, v10);
    if (v13) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, *(_DWORD *)(a5 + 16) * v11 + a2);
    }
    if (sub_100B39178(v25, v10))
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 160))(a1, *(_DWORD *)(a5 + 16) * a3 + a2);
      return 1;
    }
  }
  return v13;
}

uint64_t sub_101080AB4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v5 = 0;
  *a4 = 0;
  *a5 = 0;
  int v6 = *(unsigned __int8 **)a2;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  if (v7 >= 2)
  {
    uint64_t v46 = *(void *)(a3 + 16);
    unint64_t v11 = v7 - 1;
    unint64_t v12 = (v7 - 1) >> 1;
    unint64_t v45 = sub_100B390EC(v6);
    unint64_t v44 = sub_100B390EC((unsigned __int8 *)(*(void *)a2 + 10 * v11));
    if (sub_100B391C8(&v46, &v44))
    {
      uint64_t v5 = 0;
      int v43 = 0;
      int v13 = 0;
      unint64_t v14 = 0;
      *a4 = v11;
      *a5 = v11;
    }
    else if (sub_100B391A0(&v46, &v45))
    {
      uint64_t v5 = 0;
      int v43 = 0;
      int v13 = 0;
      unint64_t v14 = 0;
      *a4 = 0;
      *a5 = 0;
    }
    else
    {
      unint64_t v14 = 0;
      unint64_t v15 = v12;
      while (1)
      {
        unint64_t v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
        unint64_t v17 = v15 + 1;
        if (v15 >= v16 || v17 >= v16) {
          break;
        }
        *(void *)std::string buf = sub_100B390EC((unsigned __int8 *)(*(void *)a2 + 10 * v15));
        *(void *)__int16 v47 = sub_100B390EC((unsigned __int8 *)(*(void *)a2 + 10 * v17));
        if (sub_100B391B4(buf, &v46) && sub_100B391B4(&v46, v47))
        {
          *a4 = v15;
          *a5 = v15 + 1;
          int v13 = *(_DWORD *)(*(void *)a2 + 10 * (v15 + 1) + 6)
              - *(_DWORD *)(*(void *)a2 + 10 * *a4 + 6);
          uint64_t v5 = 1;
          int v43 = 1;
          unint64_t v12 = v15;
          goto LABEL_27;
        }
        if (sub_100B391C8(&v46, buf))
        {
          unint64_t v14 = v15;
        }
        else if (sub_100B391A0(&v46, buf))
        {
          unint64_t v11 = v15;
        }
        unint64_t v12 = (v11 + v14) >> 1;
        if (v12 == v15) {
          break;
        }
        unint64_t v15 = (v11 + v14) >> 1;
        if (v14 > v11) {
          goto LABEL_21;
        }
      }
      unint64_t v12 = v15;
LABEL_21:
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230D980);
      }
      int v19 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
        uint64_t v21 = sub_1000D8908((uint64_t)&v45);
        uint64_t v22 = sub_1000D8908((uint64_t)&v46);
        uint64_t v23 = sub_1000D8908((uint64_t)&v44);
        *(_DWORD *)std::string buf = 134350592;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)uint64_t v58 = v14;
        *(_WORD *)&v58[8] = 2050;
        *(void *)__int16 v59 = v11;
        *(_WORD *)&v59[8] = 2050;
        *(void *)double v60 = v12;
        *(_WORD *)&v60[8] = 2050;
        *(void *)__int16 v61 = v21;
        *(_WORD *)&v61[8] = 2050;
        uint64_t v62 = v22;
        *(_WORD *)float v63 = 2050;
        *(void *)&uint64_t v63[2] = v23;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "WifiTile, binarySearchIndex, ==================> indexFailed <==================, size, %{public}4lu, a, %{public}4lu, b, %{public}4lu, c, %{public}4lu,  A, %{public}012llx,  S, %{public}012llx, B, %{public}012llx, #CloneMe", buf, 0x48u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230D980);
        }
        unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
        uint64_t v38 = sub_1000D8908((uint64_t)&v45);
        uint64_t v39 = sub_1000D8908((uint64_t)&v46);
        uint64_t v40 = sub_1000D8908((uint64_t)&v44);
        *(_DWORD *)__int16 v47 = 134350592;
        *(void *)&v47[4] = v37;
        *(_WORD *)&unsigned char v47[12] = 2050;
        *(void *)int v48 = v14;
        *(_WORD *)&v48[8] = 2050;
        *(void *)__int16 v49 = v11;
        *(_WORD *)&v49[8] = 2050;
        *(void *)int v50 = v12;
        *(_WORD *)&_OWORD v50[8] = 2050;
        *(void *)__int16 v51 = v38;
        *(_WORD *)&v51[8] = 2050;
        uint64_t v52 = v39;
        *(_WORD *)__int16 v53 = 2050;
        *(void *)&uint64_t v53[2] = v40;
        __int16 v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLWifiTileFile::binarySearchIndex(const CLTilesManager_Type::AccessPointIndexEntryVector &, const TraverseDetails &, unsigned int &, unsigned int &)", "%s\n", v41);
        if (v41 != buf) {
          free(v41);
        }
      }
      uint64_t v5 = 0;
      int v13 = 0;
      int v43 = 1;
    }
LABEL_27:
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    unint64_t v24 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v25 = v11;
      unint64_t v26 = v14;
      int v27 = v13;
      unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
      uint64_t v42 = sub_1000D8908((uint64_t)&v45);
      uint64_t v29 = sub_1000D8908((uint64_t)&v46);
      uint64_t v30 = sub_1000D8908((uint64_t)&v44);
      *(_DWORD *)std::string buf = 67111424;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v43;
      *(_WORD *)uint64_t v58 = 2048;
      *(void *)&v58[2] = v28;
      int v13 = v27;
      unint64_t v14 = v26;
      unint64_t v11 = v25;
      *(_WORD *)__int16 v59 = 2048;
      *(void *)&v59[2] = v14;
      *(_WORD *)double v60 = 2048;
      *(void *)&v60[2] = v25;
      *(_WORD *)__int16 v61 = 2048;
      *(void *)&v61[2] = v12;
      LOWORD(v62) = 1024;
      *(_DWORD *)((char *)&v62 + 2) = v13;
      HIWORD(v62) = 2048;
      *(void *)float v63 = v42;
      *(_WORD *)&v63[8] = 2048;
      uint64_t v64 = v29;
      __int16 v65 = 2048;
      uint64_t v66 = v30;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TILE: binarySearchIndex, indexFound, isFound, %d, wasSearched, %d, size, %4lu, a, %4lu, b, %4lu, c, %4lu, searchAr, %4u, A, %012llx,  S, %012llx, B, %012llx", buf, 0x5Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230D960);
      }
      unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
      uint64_t v33 = sub_1000D8908((uint64_t)&v45);
      uint64_t v34 = sub_1000D8908((uint64_t)&v46);
      uint64_t v35 = sub_1000D8908((uint64_t)&v44);
      *(_DWORD *)__int16 v47 = 67111424;
      *(_DWORD *)&v47[4] = v5;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)&v47[10] = v43;
      *(_WORD *)int v48 = 2048;
      *(void *)&v48[2] = v32;
      *(_WORD *)__int16 v49 = 2048;
      *(void *)&v49[2] = v14;
      *(_WORD *)int v50 = 2048;
      *(void *)&v50[2] = v11;
      *(_WORD *)__int16 v51 = 2048;
      *(void *)&_OWORD v51[2] = v12;
      LOWORD(v52) = 1024;
      *(_DWORD *)((char *)&v52 + 2) = v13;
      HIWORD(v52) = 2048;
      *(void *)__int16 v53 = v33;
      *(_WORD *)&v53[8] = 2048;
      uint64_t v54 = v34;
      __int16 v55 = 2048;
      uint64_t v56 = v35;
      uint64_t v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTileFile::binarySearchIndex(const CLTilesManager_Type::AccessPointIndexEntryVector &, const TraverseDetails &, unsigned int &, unsigned int &)", "%s\n", v36);
      if (v36 != buf) {
        free(v36);
      }
    }
  }
  return v5;
}

BOOL sub_1010811A8(uint64_t a1, FILE *a2, uint64_t a3)
{
  uint64_t v150 = *(void *)(a1 + 40);
  (*(void (**)(uint64_t))(*(void *)v150 + 16))(v150);
  __int16 v152 = 256;
  *(unsigned char *)(a1 + 296) = 1;
  int v6 = &qword_102419000;
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230D960);
  }
  unint64_t v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)a3;
    int v9 = *(unsigned __int8 *)(a3 + 8);
    int v10 = *(unsigned __int8 *)(a3 + 9);
    uint64_t v11 = sub_1000D8908(a3 + 16);
    BOOL v12 = *(void *)(a1 + 576) != 0;
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v163 = 1024;
    *(_DWORD *)uint64_t v164 = v9;
    *(_WORD *)&v164[4] = 1024;
    *(_DWORD *)&v164[6] = v10;
    *(_WORD *)v165 = 2048;
    *(void *)&v165[2] = v11;
    *(_WORD *)&v165[10] = 1024;
    *(_DWORD *)&v165[12] = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx, cachedIndex, %d", buf, 0x28u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    uint64_t v121 = *(void *)a3;
    int v122 = *(unsigned __int8 *)(a3 + 8);
    int v123 = *(unsigned __int8 *)(a3 + 9);
    uint64_t v124 = sub_1000D8908(a3 + 16);
    BOOL v125 = *(void *)(a1 + 576) != 0;
    LODWORD(v161[0]) = 136316162;
    *(void *)((char *)v161 + 4) = v121;
    WORD6(v161[0]) = 1024;
    *(_DWORD *)((char *)v161 + 14) = v122;
    WORD1(v161[1]) = 1024;
    DWORD1(v161[1]) = v123;
    WORD4(v161[1]) = 2048;
    *(void *)((char *)&v161[1] + 10) = v124;
    WORD1(v161[2]) = 1024;
    DWORD1(v161[2]) = v125;
    uint64_t v126 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v126);
    if (v126 != buf) {
      free(v126);
    }
  }
  if (!a2)
  {
    BOOL v26 = 0;
    goto LABEL_203;
  }
  long long v14 = *(_OWORD *)a3;
  *(void *)(a1 + 320) = *(void *)(a3 + 16);
  *(_OWORD *)(a1 + 304) = v14;
  unint64_t v149 = nullsub_41(0, v13);
  unint64_t v148 = nullsub_41(0, v15);
  *(void *)((char *)v161 + 4) = 192;
  LODWORD(v161[0]) = 109498;
  HIDWORD(v161[0]) = 381;
  memset(&v161[1], 0, 28);
  *(int32x2_t *)((char *)&v161[2] + 12) = vdup_n_s32(0xC47A0000);
  DWORD1(v161[3]) = -998637568;
  memset((char *)&v161[3] + 8, 0, 148);
  uint64_t v16 = (uint64_t)&byte_101D1BF2C[212];
  if (*(unsigned char *)(a3 + 9) && *(void *)(a1 + 576) && *(void *)(a1 + 584))
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    unint64_t v17 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v18 = *(void *)(a1 + 584);
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, indexVector cached, seek to the APs table, %lld", buf, 0xCu);
    }
    uint64_t v19 = sub_10013D1A0(115, 2);
    if (v19)
    {
      bzero(buf, 0x65CuLL);
      uint64_t v63 = (uint64_t)&qword_102419000;
      if (qword_102419630 != -1) {
LABEL_237:
      }
        dispatch_once(&qword_102419630, &stru_10230D960);
      uint64_t v130 = *(void *)(a1 + 584);
      int v153 = 134217984;
      uint64_t v154 = v130;
      __int16 v131 = (char *)_os_log_send_and_compose_impl();
      uint64_t v19 = sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v131);
      if (v131 != buf) {
        free(v131);
      }
      int v6 = (uint64_t *)v63;
    }
    LODWORD(v146) = 0;
    LODWORD(__ptr) = 0;
    if (sub_101080AB4(v19, *(void *)(a1 + 576), a3, &v146, &__ptr)
      && (unsigned int v20 = __ptr, v146 < __ptr))
    {
      uint64_t v21 = *(uint64_t **)(a1 + 576);
      uint64_t v22 = *v21;
      unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v21[1] - *v21) >> 1);
      if (v23 <= v146 || v23 <= __ptr) {
        sub_100273D6C();
      }
      uint64_t v141 = v22 + 10 * v146;
      unint64_t v149 = sub_100B390EC((unsigned __int8 *)v141);
      uint64_t v140 = v22 + 10 * v20;
      unint64_t v148 = sub_100B390EC((unsigned __int8 *)v140);
      if (v6[198] != -1) {
        dispatch_once(&qword_102419630, &stru_10230D960);
      }
      unint64_t v24 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, re-using cached index vector", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[198] != -1) {
          dispatch_once(&qword_102419630, &stru_10230D960);
        }
        LOWORD(v153) = 0;
        unint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v25);
        if (v25 != buf) {
          free(v25);
        }
      }
    }
    else
    {
      if (v6[198] != -1) {
        dispatch_once(&qword_102419630, &stru_10230D960);
      }
      int v27 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v28 = sub_1000D8908((uint64_t)&v149);
        uint64_t v29 = sub_1000D8908(a3 + 16);
        uint64_t v30 = sub_1000D8908((uint64_t)&v148);
        unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL
            * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8) - **(void **)(a1 + 576)) >> 1);
        *(_DWORD *)std::string buf = *(void *)(v16 + 2136);
        *(void *)&uint8_t buf[4] = v28;
        __int16 v163 = 2048;
        *(void *)uint64_t v164 = v29;
        *(_WORD *)&v164[8] = 2048;
        *(void *)v165 = v30;
        *(_WORD *)&v165[8] = 2048;
        *(void *)&v165[10] = v31;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[198] != -1) {
          dispatch_once(&qword_102419630, &stru_10230D960);
        }
        uint64_t v132 = sub_1000D8908((uint64_t)&v149);
        uint64_t v133 = sub_1000D8908(a3 + 16);
        uint64_t v134 = sub_1000D8908((uint64_t)&v148);
        unint64_t v135 = 0xCCCCCCCCCCCCCCCDLL
             * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8) - **(void **)(a1 + 576)) >> 1);
        int v153 = *(void *)(v16 + 2136);
        uint64_t v154 = v132;
        __int16 v155 = 2048;
        *(void *)long long v156 = v133;
        *(_WORD *)&v156[8] = 2048;
        *(void *)v157 = v134;
        *(_WORD *)&v157[8] = 2048;
        *(void *)&v157[10] = v135;
        long long v136 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v136);
        if (v136 != buf) {
          free(v136);
        }
      }
      uint64_t v140 = 0;
      uint64_t v141 = 0;
      *(unsigned char *)(a1 + 296) = 0;
    }
    fseeko(a2, *(void *)(a1 + 584), 0);
  }
  else
  {
    uint64_t v140 = 0;
    uint64_t v141 = 0;
  }
  long long v142 = (void *)(a3 + 16);
  int v139 = *(void *)(v16 + 2136);
  while (1)
  {
    if (!*(unsigned char *)(a1 + 296) || feof(a2))
    {
      BOOL v26 = 1;
      goto LABEL_196;
    }
    uint64_t v146 = 0;
    unsigned int v147 = 0;
    uint64_t __ptr = 0;
    int v145 = 0;
    size_t v32 = fread(&__ptr, 1uLL, 0xCuLL, a2);
    sub_100D33DF8((unsigned __int16 *)&__ptr, (uint64_t)&v146);
    BOOL v26 = v32 != 12;
    if (v32 != 12) {
      goto LABEL_196;
    }
    if ((unsigned __int16)v146 != 43962) {
      break;
    }
    unint64_t v33 = HIDWORD(v146) + (unint64_t)v147;
    size_t v34 = v33 + 1036;
    if (v33 + 12 > 0x63FFC0B)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230D980);
      }
      int v111 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349312;
        *(void *)&uint8_t buf[4] = v34;
        __int16 v163 = 2050;
        *(void *)uint64_t v164 = 104857612;
        _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_ERROR, "WifiTile, traverseTileFile, invalid tile file, bad allocation size, bytesToAllocate, %{public}lu, maxAllocationSize, %{public}lu, #CloneMe", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_195;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230D980);
      }
      int v153 = 134349312;
      uint64_t v154 = v34;
      __int16 v155 = 2050;
      *(void *)long long v156 = 104857612;
      uint64_t v112 = (const char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v112);
LABEL_186:
      if (v112 != buf)
      {
        uint64_t v114 = (char *)v112;
        goto LABEL_194;
      }
LABEL_195:
      BOOL v26 = 0;
      goto LABEL_196;
    }
    int v35 = WORD1(v146);
    if (WORD1(v146) == 3)
    {
      *(void *)(a1 + 584) = ftello(a2) - 12;
      int v35 = WORD1(v146);
    }
    if ((v35 - 4) <= 0xFFFFFFFC)
    {
      if (v6[198] != -1) {
        dispatch_once(&qword_102419630, &stru_10230D960);
      }
      uint64_t v36 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v37 = *(void *)a3;
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = v37;
        __int16 v163 = 1024;
        *(_DWORD *)uint64_t v164 = (unsigned __int16)v146;
        *(_WORD *)&v164[4] = 1024;
        *(_DWORD *)&v164[6] = WORD1(v146);
        *(_WORD *)v165 = 1024;
        *(_DWORD *)&v165[2] = v147;
        *(_WORD *)&v165[6] = 1024;
        *(_DWORD *)&v165[8] = HIDWORD(v146);
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "TILE: skip section, message, %s, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d", buf, 0x24u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[198] != -1) {
          dispatch_once(&qword_102419630, &stru_10230D960);
        }
        uint64_t v38 = *(void *)a3;
        int v153 = 136316162;
        uint64_t v154 = v38;
        __int16 v155 = 1024;
        *(_DWORD *)long long v156 = (unsigned __int16)v146;
        *(_WORD *)&v156[4] = 1024;
        *(_DWORD *)&v156[6] = WORD1(v146);
        *(_WORD *)v157 = 1024;
        *(_DWORD *)&v157[2] = v147;
        *(_WORD *)&v157[6] = 1024;
        *(_DWORD *)&v157[8] = HIDWORD(v146);
        uint64_t v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v39);
        if (v39 != buf) {
          free(v39);
        }
      }
LABEL_61:
      unsigned int v40 = HIDWORD(v146);
      uint64_t v41 = v147;
      v34 -= v147;
      goto LABEL_63;
    }
    if (*(unsigned char *)(a3 + 9))
    {
      if (v35 == 3) {
        goto LABEL_61;
      }
    }
    else if (v35 == 3 && *(unsigned char *)(a3 + 8))
    {
      goto LABEL_61;
    }
    uint64_t v41 = 0;
    unsigned int v40 = v147 + HIDWORD(v146);
LABEL_63:
    uint64_t v42 = malloc_type_malloc(v34, 0xE5637B24uLL);
    int v43 = (char *)v42;
    if (!v42)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230D980);
      }
      uint64_t v113 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349056;
        *(void *)&uint8_t buf[4] = v34;
        _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_ERROR, "WifiTile, failed to allocate memory for, %{public}lu, #CloneMe", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_195;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230D980);
      }
      int v153 = 134349056;
      uint64_t v154 = v34;
      uint64_t v112 = (const char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v112);
      goto LABEL_186;
    }
    unint64_t v44 = v42 + 3;
    size_t v45 = fread(v42 + 3, 1uLL, v40, a2);
    if (v45 != v40)
    {
      size_t v115 = v45;
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_10230D980);
      }
      uint64_t v116 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 134349312;
        *(void *)&uint8_t buf[4] = v115;
        __int16 v163 = 2050;
        *(void *)uint64_t v164 = v40;
        _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_ERROR, "WifiTile, failed to read, %{public}lu, %{public}lu, #CloneMe", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230D980);
        }
        int v153 = 134349312;
        uint64_t v154 = v115;
        __int16 v155 = 2050;
        *(void *)long long v156 = v40;
        uint64_t v138 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v138);
        if (v138 != buf) {
          free(v138);
        }
      }
      uint64_t v114 = v43;
LABEL_194:
      free(v114);
      goto LABEL_195;
    }
    uint64_t v46 = __ptr;
    *((_DWORD *)v43 + 2) = v145;
    *(void *)int v43 = v46;
    if (WORD1(v146) != 3)
    {
      if (WORD1(v146) != 2)
      {
        if (WORD1(v146) == 1)
        {
          v161[0] = *(_OWORD *)v43;
          long long v47 = *((_OWORD *)v43 + 1);
          long long v48 = *((_OWORD *)v43 + 2);
          long long v49 = *((_OWORD *)v43 + 4);
          v161[3] = *((_OWORD *)v43 + 3);
          v161[4] = v49;
          v161[1] = v47;
          v161[2] = v48;
          long long v50 = *((_OWORD *)v43 + 5);
          long long v51 = *((_OWORD *)v43 + 6);
          long long v52 = *((_OWORD *)v43 + 8);
          v161[7] = *((_OWORD *)v43 + 7);
          v161[8] = v52;
          v161[5] = v50;
          v161[6] = v51;
          long long v53 = *((_OWORD *)v43 + 9);
          long long v54 = *((_OWORD *)v43 + 10);
          long long v55 = *((_OWORD *)v43 + 11);
          *(_OWORD *)((char *)&v161[11] + 12) = *(_OWORD *)(v43 + 188);
          v161[10] = v54;
          v161[11] = v55;
          v161[9] = v53;
          *(int8x8_t *)&double v56 = sub_100D33DFC((uint64_t)v161, (uint64_t)v161);
          (*(void (**)(uint64_t, _OWORD *, double))(*(void *)a1 + 120))(a1, v161, v56);
        }
        else
        {
          if (v6[198] != -1) {
            dispatch_once(&qword_102419630, &stru_10230D960);
          }
          int v71 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = WORD1(v146);
            _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "TILE: unknown section : %d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v6[198] != -1) {
              dispatch_once(&qword_102419630, &stru_10230D960);
            }
            int v153 = 67109120;
            LODWORD(v154) = WORD1(v146);
            uint64_t v100 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v100);
            if (v100 != buf) {
              free(v100);
            }
          }
        }
        goto LABEL_90;
      }
      if (!*(unsigned char *)(a3 + 8))
      {
        *(int8x8_t *)&double v57 = sub_100D33EB0((uint64_t)v43, (uint64_t)v43);
        (*(void (**)(uint64_t, char *, double))(*(void *)a1 + 136))(a1, v43, v57);
        if (*v44)
        {
          unint64_t v59 = 0;
          uint64_t v16 = (uint64_t)v44 + *((unsigned int *)v43 + 1);
          do
          {
            double v60 = (int *)(v16 + v59 * *((unsigned int *)v43 + 4));
            sub_100D33EE8(v60, (uint64_t)v60);
            (*(void (**)(uint64_t, int *))(*(void *)a1 + 144))(a1, v60);
            ++v59;
          }
          while (v59 < *v44);
        }
        unint64_t v149 = nullsub_41(0, v58);
        uint64_t v62 = nullsub_41(0, v61);
        uint64_t v63 = 10;
        unint64_t v148 = v62;
        uint64_t v64 = *(void *)(a1 + 576);
        if (!v64)
        {
          sub_101A9FBA8();
          abort_report_np();
          __break(1u);
          goto LABEL_237;
        }
        if (*(unsigned char *)(a3 + 9))
        {
          uint64_t v143 = 0;
          if (sub_101080AB4(v62, v64, a3, (_DWORD *)&v143 + 1, &v143))
          {
            unsigned int v65 = v143;
            if (HIDWORD(v143) < v143)
            {
              uint64_t v66 = *(uint64_t **)(a1 + 576);
              uint64_t v67 = *v66;
              unint64_t v68 = 0xCCCCCCCCCCCCCCCDLL * ((v66[1] - *v66) >> 1);
              if (v68 <= HIDWORD(v143) || v68 <= v143) {
                sub_100273D6C();
              }
              uint64_t v141 = v67 + 10 * HIDWORD(v143);
              unint64_t v149 = sub_100B390EC((unsigned __int8 *)v141);
              uint64_t v140 = v67 + 10 * v65;
              unint64_t v148 = sub_100B390EC((unsigned __int8 *)v140);
              goto LABEL_122;
            }
          }
          if (v6[198] != -1) {
            dispatch_once(&qword_102419630, &stru_10230D960);
          }
          __int16 v76 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v77 = sub_1000D8908((uint64_t)&v149);
            uint64_t v78 = sub_1000D8908((uint64_t)v142);
            uint64_t v79 = sub_1000D8908((uint64_t)&v148);
            unint64_t v80 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8) - **(void **)(a1 + 576)) >> 1);
            *(_DWORD *)std::string buf = v139;
            *(void *)&uint8_t buf[4] = v77;
            __int16 v163 = 2048;
            *(void *)uint64_t v164 = v78;
            *(_WORD *)&v164[8] = 2048;
            *(void *)v165 = v79;
            *(_WORD *)&v165[8] = 2048;
            *(void *)&v165[10] = v80;
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (v6[198] != -1) {
              dispatch_once(&qword_102419630, &stru_10230D960);
            }
            uint64_t v101 = sub_1000D8908((uint64_t)&v149);
            uint64_t v102 = sub_1000D8908((uint64_t)v142);
            uint64_t v103 = sub_1000D8908((uint64_t)&v148);
            unint64_t v104 = 0xCCCCCCCCCCCCCCCDLL
                 * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8) - **(void **)(a1 + 576)) >> 1);
            int v153 = v139;
            uint64_t v154 = v101;
            __int16 v155 = 2048;
            *(void *)long long v156 = v102;
            *(_WORD *)&v156[8] = 2048;
            *(void *)v157 = v103;
            *(_WORD *)&v157[8] = 2048;
            *(void *)&v157[10] = v104;
            int v105 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v105);
            if (v105 != buf) {
              free(v105);
            }
          }
          uint64_t v140 = 0;
          uint64_t v141 = 0;
        }
        else
        {
          uint64_t v140 = 0;
          uint64_t v141 = 0;
LABEL_122:
          if (v6[198] != -1) {
            dispatch_once(&qword_102419630, &stru_10230D960);
          }
          uint64_t v88 = qword_102419638;
          if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v89 = sub_1000D8908((uint64_t)&v149);
            uint64_t v90 = sub_1000D8908((uint64_t)v142);
            uint64_t v91 = sub_1000D8908((uint64_t)&v148);
            unint64_t v92 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8) - **(void **)(a1 + 576)) >> 1);
            *(_DWORD *)std::string buf = v139;
            *(void *)&uint8_t buf[4] = v89;
            __int16 v163 = 2048;
            *(void *)uint64_t v164 = v90;
            *(_WORD *)&v164[8] = 2048;
            *(void *)v165 = v91;
            *(_WORD *)&v165[8] = 2048;
            *(void *)&v165[10] = v92;
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            __int16 v74 = v6;
            if (v6[198] != -1) {
              dispatch_once(&qword_102419630, &stru_10230D960);
            }
            uint64_t v93 = sub_1000D8908((uint64_t)&v149);
            uint64_t v94 = sub_1000D8908((uint64_t)v142);
            uint64_t v95 = sub_1000D8908((uint64_t)&v148);
            unint64_t v96 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(*(void *)(*(void *)(a1 + 576) + 8) - **(void **)(a1 + 576)) >> 1);
            int v153 = v139;
            uint64_t v154 = v93;
            __int16 v155 = 2048;
            *(void *)long long v156 = v94;
            *(_WORD *)&v156[8] = 2048;
            *(void *)v157 = v95;
            *(_WORD *)&v157[8] = 2048;
            *(void *)&v157[10] = v96;
            int v75 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v75);
LABEL_130:
            if (v75 != buf) {
              free(v75);
            }
            __int16 v70 = 0;
            uint64_t v16 = 1;
            int v6 = v74;
            goto LABEL_92;
          }
        }
LABEL_90:
        __int16 v70 = 0;
        goto LABEL_91;
      }
LABEL_84:
      __int16 v70 = 0;
      *(unsigned char *)(a1 + 296) = 0;
      goto LABEL_91;
    }
    if (*(unsigned char *)(a3 + 8)) {
      goto LABEL_84;
    }
    *(int8x8_t *)&double v72 = sub_100D33EB0((uint64_t)v43, (uint64_t)v43);
    (*(void (**)(uint64_t, char *, double))(*(void *)a1 + 152))(a1, v43, v72);
    if (*(unsigned char *)(a3 + 8))
    {
      if (v6[198] != -1) {
        dispatch_once(&qword_102419630, &stru_10230D960);
      }
      int v73 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "TILE: headers only, avoid reading the APs", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        __int16 v74 = v6;
        if (v6[198] != -1) {
          dispatch_once(&qword_102419630, &stru_10230D960);
        }
        LOWORD(v153) = 0;
        int v75 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v75);
        goto LABEL_130;
      }
      goto LABEL_90;
    }
    uint64_t v81 = *((unsigned int *)v43 + 1);
    unint64_t v82 = *v44;
    uint64_t v83 = sub_1000D8908((uint64_t)v142);
    uint64_t v84 = (uint64_t)v44 + v81;
    if (*(unsigned char *)(a3 + 9))
    {
      __int16 v70 = 0;
      if (!v83 || !v141)
      {
        LODWORD(v86) = v82;
LABEL_142:
        sub_101080720(a1, v84, v86, a3, (uint64_t)v43);
        goto LABEL_91;
      }
      if (v140) {
        unint64_t v82 = (*(_DWORD *)(v140 + 6) + 1);
      }
      uint64_t v85 = *(unsigned int *)(v141 + 6);
      uint64_t v86 = v82 - v85;
      uint64_t v87 = *((unsigned int *)v43 + 3);
      __int16 v70 = malloc_type_malloc((*((_DWORD *)v43 + 4) * (v82 - v85)), 0xE6C51E8CuLL);
      if (!v70)
      {
        uint64_t v16 = 0;
LABEL_145:
        int v6 = &qword_102419000;
        goto LABEL_92;
      }
      fseek(a2, *((unsigned int *)v43 + 4) * (unint64_t)v85, 1);
      fread(v70, 1uLL, v86 * *((unsigned int *)v43 + 4), a2);
      fseek(a2, (v87 - v82) * *((unsigned int *)v43 + 4), 1);
      uint64_t v41 = 0;
      uint64_t v84 = (uint64_t)v70;
      int v6 = &qword_102419000;
      if (*(unsigned char *)(a3 + 9)) {
        goto LABEL_142;
      }
    }
    else
    {
      __int16 v70 = 0;
    }
    if (v82)
    {
      unint64_t v97 = 1;
      while (1)
      {
        long long v98 = (int *)(v84 + (v97 - 1) * *((unsigned int *)v43 + 4));
        sub_100D33F08(v98, (uint64_t)v98);
        (*(void (**)(uint64_t, int *))(*(void *)a1 + 160))(a1, v98);
        *(void *)std::string buf = sub_100B390EC((unsigned __int8 *)v98);
        if (sub_100B39178(v142, buf)) {
          break;
        }
        uint64_t v16 = 1;
        if (!*(unsigned char *)(a3 + 9) && v97++ < v82) {
          continue;
        }
        goto LABEL_145;
      }
      uint64_t v16 = 1;
      goto LABEL_145;
    }
LABEL_91:
    uint64_t v16 = 1;
LABEL_92:
    if (v41) {
      fseek(a2, v41, 1);
    }
    free(v43);
    if (v70) {
      free(v70);
    }
    if ((v16 & 1) == 0) {
      goto LABEL_195;
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230D980);
  }
  long long v106 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 134349824;
    *(void *)&uint8_t buf[4] = 12;
    __int16 v163 = 1026;
    *(_DWORD *)uint64_t v164 = (unsigned __int16)v146;
    *(_WORD *)&v164[4] = 1026;
    *(_DWORD *)&v164[6] = WORD1(v146);
    *(_WORD *)v165 = 1026;
    *(_DWORD *)&v165[2] = v147;
    _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "WifiTile, Invalid section signature, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, #CloneMe", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230D980);
    }
    int v153 = 134349824;
    uint64_t v154 = 12;
    __int16 v155 = 1026;
    *(_DWORD *)long long v156 = (unsigned __int16)v146;
    *(_WORD *)&v156[4] = 1026;
    *(_DWORD *)&v156[6] = WORD1(v146);
    *(_WORD *)v157 = 1026;
    *(_DWORD *)&v157[2] = v147;
    v137 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v137);
    if (v137 != buf) {
      free(v137);
    }
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_10230D980);
  }
  uint64_t v107 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v108 = *(void *)a3;
    *(_DWORD *)std::string buf = 136447746;
    *(void *)&uint8_t buf[4] = v108;
    __int16 v163 = 2050;
    *(void *)uint64_t v164 = 12;
    *(_WORD *)&v164[8] = 1026;
    *(_DWORD *)v165 = (unsigned __int16)v146;
    *(_WORD *)&v165[4] = 1026;
    *(_DWORD *)&v165[6] = WORD1(v146);
    *(_WORD *)&v165[10] = 1026;
    *(_DWORD *)&v165[12] = v147;
    *(_WORD *)&v165[16] = 1026;
    int v166 = HIDWORD(v146);
    __int16 v167 = 1026;
    int v168 = WORD1(v146);
    _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_ERROR, "WifiTile, message, %{public}s, readBytes, %{public}lu, section, signature, 0x%{public}x, sectionId, %{public}d, sizeBytes, %{public}d, headerSizeBytes, %{public}d, sectionId, %{public}d, #CloneMe", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_10230D980);
    }
    uint64_t v109 = *(void *)a3;
    int v153 = 136447746;
    uint64_t v154 = v109;
    __int16 v155 = 2050;
    *(void *)long long v156 = 12;
    *(_WORD *)&v156[8] = 1026;
    *(_DWORD *)v157 = (unsigned __int16)v146;
    *(_WORD *)&v157[4] = 1026;
    *(_DWORD *)&v157[6] = WORD1(v146);
    *(_WORD *)&v157[10] = 1026;
    *(_DWORD *)&v157[12] = v147;
    *(_WORD *)&v157[16] = 1026;
    int v158 = HIDWORD(v146);
    __int16 v159 = 1026;
    int v160 = WORD1(v146);
    long long v110 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v110);
    if (v110 != buf) {
      free(v110);
    }
  }
LABEL_196:
  if (v6[198] != -1) {
    dispatch_once(&qword_102419630, &stru_10230D960);
  }
  BOOL v117 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v118 = *(void *)(a1 + 576);
    if (v118) {
      unint64_t v118 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v118 + 8) - *(void *)v118) >> 1);
    }
    uint64_t v119 = *(void *)(a1 + 608);
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = v118;
    __int16 v163 = 2048;
    *(void *)uint64_t v164 = v119;
    _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "TILE: traverseTileFile, finished traversing, file, index entries, %lu, apEntries, %lu", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v6[198] != -1) {
      dispatch_once(&qword_102419630, &stru_10230D960);
    }
    unint64_t v127 = *(void *)(a1 + 576);
    if (v127) {
      unint64_t v127 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v127 + 8) - *(void *)v127) >> 1);
    }
    uint64_t v128 = *(void *)(a1 + 608);
    int v153 = 134218240;
    uint64_t v154 = v127;
    __int16 v155 = 2048;
    *(void *)long long v156 = v128;
    __int16 v129 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiTileFile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v129);
    if (v129 != buf) {
      free(v129);
    }
  }
LABEL_203:
  if (HIBYTE(v152))
  {
    if ((_BYTE)v152) {
      pthread_mutex_unlock(v151);
    }
    else {
      (*(void (**)(uint64_t))(*(void *)v150 + 24))(v150);
    }
  }
  return v26;
}

void sub_1010831B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t sub_1010832A8@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  int v7 = 0;
  sub_10014F674(a1, &v7);
  return sub_100146674(a1, -1, a2, a3, 0.05, 0.05);
}

void sub_101083310(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10108332C()
{
  return dword_102475C78;
}

uint64_t sub_101083338()
{
  return 4096;
}

void sub_101083340(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_101083370(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_1010833CC(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

_WORD *sub_1010833FC(uint64_t **a1, void *a2, uint64_t a3, uint64_t **a4)
{
  int v6 = (void **)sub_1005295E0((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = operator new(0x38uLL);
    uint64_t v9 = **a4;
    v7[24] = 0;
    *((void *)v7 + 4) = v9;
    *((void *)v7 + 5) = 0;
    sub_1000EDF90(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_101083488(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x199999999999999ALL) {
    sub_1001D7FA0();
  }
  return operator new(10 * a2);
}

void sub_1010834D0()
{
}

void sub_101083524()
{
}

void **sub_101083548(void **a1)
{
  uint64_t v3 = a1;
  sub_1001DCABC(&v3);
  return a1;
}

void *sub_101083580(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v4 = a4;
  int v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *long long v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      sub_10010F834(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      long long v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_101083634((uint64_t)v8);
  return v4;
}

void sub_101083620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_101083634(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001DCE1C(a1);
  }
  return a1;
}

uint64_t sub_10108366C()
{
  qword_10248B2C8 = 0;
  unk_10248B2D0 = 0;
  qword_10248B2C0 = 0;
  uint64_t v0 = operator new(0x4CuLL);
  qword_10248B2C8 = (uint64_t)v0 + 76;
  unk_10248B2D0 = (char *)v0 + 76;
  v0[2] = xmmword_101DA49B4;
  v0[3] = unk_101DA49C4;
  *(_OWORD *)((char *)v0 + 60) = unk_101DA49D0;
  _OWORD *v0 = xmmword_101DA4994;
  v0[1] = unk_101DA49A4;
  qword_10248B2C0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_10248B2C0, (void *)&_mh_execute_header);
  qword_10248B2E0 = 0;
  unk_10248B2E8 = 0;
  qword_10248B2D8 = 0;
  uint64_t v1 = operator new(0x4CuLL);
  qword_10248B2E0 = (uint64_t)v1 + 76;
  unk_10248B2E8 = (char *)v1 + 76;
  v1[2] = xmmword_101DA4A00;
  v1[3] = unk_101DA4A10;
  *(_OWORD *)((char *)v1 + 60) = unk_101DA4A1C;
  _OWORD *v1 = xmmword_101DA49E0;
  v1[1] = unk_101DA49F0;
  qword_10248B2D8 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_10248B2D8, (void *)&_mh_execute_header);
  uint64_t v2 = operator new(0x50uLL);
  v2[2] = xmmword_101DA4A4C;
  v2[3] = unk_101DA4A5C;
  v2[4] = xmmword_101DA4A6C;
  _OWORD *v2 = xmmword_101DA4A2C;
  v2[1] = unk_101DA4A3C;
  v25[0] = v2;
  v25[1] = v2 + 5;
  void v25[2] = v2 + 5;
  uint64_t v3 = operator new(0x50uLL);
  _OWORD v3[2] = xmmword_101DA4A9C;
  v3[3] = unk_101DA4AAC;
  v3[4] = xmmword_101DA4ABC;
  *uint64_t v3 = xmmword_101DA4A7C;
  v3[1] = unk_101DA4A8C;
  v25[3] = v3;
  v25[4] = v3 + 5;
  v25[5] = v3 + 5;
  long long v4 = operator new(0x50uLL);
  void v4[2] = xmmword_101DA4AEC;
  v4[3] = unk_101DA4AFC;
  unsigned char v4[4] = xmmword_101DA4B0C;
  *long long v4 = xmmword_101DA4ACC;
  v4[1] = unk_101DA4ADC;
  v25[6] = v4;
  v25[7] = v4 + 5;
  v25[8] = v4 + 5;
  uint64_t v5 = operator new(0x50uLL);
  void v5[2] = xmmword_101DA4B3C;
  v5[3] = unk_101DA4B4C;
  v5[4] = xmmword_101DA4B5C;
  *uint64_t v5 = xmmword_101DA4B1C;
  v5[1] = unk_101DA4B2C;
  v25[9] = v5;
  v25[10] = v5 + 5;
  v25[11] = v5 + 5;
  uint64_t v6 = operator new(0x50uLL);
  void v6[2] = xmmword_101DA4B8C;
  v6[3] = unk_101DA4B9C;
  v6[4] = xmmword_101DA4BAC;
  *uint64_t v6 = xmmword_101DA4B6C;
  v6[1] = unk_101DA4B7C;
  unsigned char v25[12] = v6;
  v25[13] = v6 + 5;
  v25[14] = v6 + 5;
  int v7 = operator new(0x50uLL);
  void v7[2] = xmmword_101DA4BDC;
  v7[3] = unk_101DA4BEC;
  v7[4] = xmmword_101DA4BFC;
  *int v7 = xmmword_101DA4BBC;
  v7[1] = unk_101DA4BCC;
  v25[15] = v7;
  v25[16] = v7 + 5;
  v25[17] = v7 + 5;
  uint64_t v8 = operator new(0x50uLL);
  v8[2] = xmmword_101DA4C2C;
  void v8[3] = unk_101DA4C3C;
  v8[4] = xmmword_101DA4C4C;
  _OWORD *v8 = xmmword_101DA4C0C;
  v8[1] = unk_101DA4C1C;
  unsigned char v25[18] = v8;
  v25[19] = v8 + 5;
  v25[20] = v8 + 5;
  char v9 = operator new(0x50uLL);
  _DWORD v9[2] = xmmword_101DA4C7C;
  v9[3] = unk_101DA4C8C;
  v9[4] = xmmword_101DA4C9C;
  *char v9 = xmmword_101DA4C5C;
  v9[1] = unk_101DA4C6C;
  v25[21] = v9;
  v25[22] = v9 + 5;
  v25[23] = v9 + 5;
  int v10 = operator new(0x50uLL);
  void v10[2] = xmmword_101DA4CCC;
  v10[3] = unk_101DA4CDC;
  void v10[4] = xmmword_101DA4CEC;
  *int v10 = xmmword_101DA4CAC;
  v10[1] = unk_101DA4CBC;
  v25[24] = v10;
  v25[25] = v10 + 5;
  v25[26] = v10 + 5;
  uint64_t v11 = operator new(0x50uLL);
  id v11[2] = xmmword_101DA4D1C;
  v11[3] = unk_101DA4D2C;
  void v11[4] = xmmword_101DA4D3C;
  _OWORD *v11 = xmmword_101DA4CFC;
  v11[1] = unk_101DA4D0C;
  v25[27] = v11;
  v25[28] = v11 + 5;
  v25[29] = v11 + 5;
  BOOL v12 = operator new(0x50uLL);
  v12[2] = xmmword_101DA4D6C;
  v12[3] = unk_101DA4D7C;
  void v12[4] = xmmword_101DA4D8C;
  _OWORD *v12 = xmmword_101DA4D4C;
  v12[1] = unk_101DA4D5C;
  v25[30] = v12;
  v25[31] = v12 + 5;
  v25[32] = v12 + 5;
  uint64_t v13 = operator new(0x50uLL);
  v13[2] = xmmword_101DA4DBC;
  v13[3] = unk_101DA4DCC;
  v13[4] = xmmword_101DA4DDC;
  _OWORD *v13 = xmmword_101DA4D9C;
  v13[1] = unk_101DA4DAC;
  v25[33] = v13;
  v25[34] = v13 + 5;
  v25[35] = v13 + 5;
  long long v14 = operator new(0x50uLL);
  void v14[2] = xmmword_101DA4E0C;
  v14[3] = unk_101DA4E1C;
  v14[4] = xmmword_101DA4E2C;
  _OWORD *v14 = xmmword_101DA4DEC;
  v14[1] = unk_101DA4DFC;
  v25[36] = v14;
  v25[37] = v14 + 5;
  v25[38] = v14 + 5;
  uint64_t v15 = operator new(0x50uLL);
  v15[2] = xmmword_101DA4E5C;
  v15[3] = unk_101DA4E6C;
  v15[4] = xmmword_101DA4E7C;
  *uint64_t v15 = xmmword_101DA4E3C;
  v15[1] = unk_101DA4E4C;
  v25[39] = v15;
  v25[40] = v15 + 5;
  v25[41] = v15 + 5;
  uint64_t v16 = operator new(0x50uLL);
  void v16[2] = xmmword_101DA4EAC;
  v16[3] = unk_101DA4EBC;
  v16[4] = xmmword_101DA4ECC;
  _OWORD *v16 = xmmword_101DA4E8C;
  v16[1] = unk_101DA4E9C;
  v25[42] = v16;
  v25[43] = v16 + 5;
  v25[44] = v16 + 5;
  unint64_t v17 = operator new(0x50uLL);
  void v17[2] = xmmword_101DA4EFC;
  v17[3] = unk_101DA4F0C;
  v17[4] = xmmword_101DA4F1C;
  *unint64_t v17 = xmmword_101DA4EDC;
  v17[1] = unk_101DA4EEC;
  v25[45] = v17;
  v25[46] = v17 + 5;
  v25[47] = v17 + 5;
  uint64_t v18 = operator new(0x50uLL);
  v18[2] = xmmword_101DA4F4C;
  v18[3] = unk_101DA4F5C;
  v18[4] = xmmword_101DA4F6C;
  *uint64_t v18 = xmmword_101DA4F2C;
  v18[1] = unk_101DA4F3C;
  v25[48] = v18;
  v25[49] = v18 + 5;
  v25[50] = v18 + 5;
  uint64_t v19 = operator new(0x50uLL);
  v19[2] = xmmword_101DA4F9C;
  v19[3] = unk_101DA4FAC;
  v19[4] = xmmword_101DA4FBC;
  _OWORD *v19 = xmmword_101DA4F7C;
  v19[1] = unk_101DA4F8C;
  v25[51] = v19;
  v25[52] = v19 + 5;
  v25[53] = v19 + 5;
  unsigned int v20 = operator new(0x50uLL);
  v20[2] = xmmword_101DA4FEC;
  v20[3] = unk_101DA4FFC;
  unsigned char v20[4] = xmmword_101DA500C;
  *unsigned int v20 = xmmword_101DA4FCC;
  v20[1] = unk_101DA4FDC;
  v25[54] = v20;
  v25[55] = v20 + 5;
  v25[56] = v20 + 5;
  uint64_t v21 = operator new(0x50uLL);
  v25[58] = v21 + 5;
  v25[59] = v21 + 5;
  v21[2] = xmmword_101DA503C;
  v21[3] = unk_101DA504C;
  v21[4] = xmmword_101DA505C;
  *uint64_t v21 = xmmword_101DA501C;
  v21[1] = unk_101DA502C;
  v25[57] = v21;
  qword_10248B2F8 = 0;
  qword_10248B300 = 0;
  qword_10248B2F0 = 0;
  qword_10248B2F0 = (uint64_t)operator new(0x1E0uLL);
  qword_10248B2F8 = qword_10248B2F0;
  qword_10248B300 = qword_10248B2F0 + 480;
  qword_10248B2F8 = (uint64_t)sub_101083580((uint64_t)&qword_10248B300, (uint64_t)v25, (uint64_t)&v26, (void *)qword_10248B2F0);
  uint64_t v22 = 60;
  do
  {
    unint64_t v23 = (void *)v25[v22 - 3];
    if (v23)
    {
      v25[v22 - 2] = v23;
      operator delete(v23);
    }
    v22 -= 3;
  }
  while (v22 * 8);
  return __cxa_atexit((void (*)(void *))sub_101083548, &qword_10248B2F0, (void *)&_mh_execute_header);
}

void sub_101083CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  qword_10248B2F8 = v12;
  sub_1001DCABC(&a10);
  uint64_t v14 = 60;
  while (1)
  {
    uint64_t v15 = *(void ***)(&a12 + v14 * 8 - 24);
    if (v15)
    {
      (&a10)[v14] = v15;
      operator delete(v15);
    }
    v14 -= 3;
    if (!(v14 * 8)) {
      _Unwind_Resume(a1);
    }
  }
}

double sub_101083DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100466FBC(a1, a2);
  *(void *)uint64_t v2 = off_10230D9B0;
  *(_DWORD *)(v2 + 24) = 2;
  double result = 0.0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(void *)(v2 + 256) = 0;
  *(_DWORD *)(v2 + 264) = 2;
  return result;
}

void *sub_101083E10(unsigned int *a1, unsigned int a2)
{
  a1[6] = a2;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230DA00);
  }
  long long v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (*(uint64_t (**)(unsigned int *, void))(*(void *)a1 + 32))(a1, a1[2]);
    *(_DWORD *)std::string buf = 67240448;
    unsigned int v9 = a2;
    __int16 v10 = 1026;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FitnessMode, received phone fitness mode update %{public}d, shouldPush, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230DA00);
    }
    (*(void (**)(unsigned int *, void))(*(void *)a1 + 32))(a1, a1[2]);
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerPhone::feedPhoneFitnessModeUpdate(CLFitnessTrackingNotifier_Type::PhoneFitnessMode)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (a2 == 1) {
    return sub_100467468(a1);
  }
  else {
    return (void *)sub_100467730(a1);
  }
}

void *sub_101084060(unsigned int *a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)a2;
  long long v5 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)a1 + 4) = v5;
  *((_OWORD *)a1 + 2) = v4;
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  long long v8 = *(_OWORD *)(a2 + 96);
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 80);
  *((_OWORD *)a1 + 8) = v8;
  *((_OWORD *)a1 + 5) = v6;
  *((_OWORD *)a1 + 6) = v7;
  long long v9 = *(_OWORD *)(a2 + 112);
  long long v10 = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 160);
  *((_OWORD *)a1 + 11) = *(_OWORD *)(a2 + 144);
  *((_OWORD *)a1 + 12) = v11;
  *((_OWORD *)a1 + 9) = v9;
  *((_OWORD *)a1 + 10) = v10;
  long long v12 = *(_OWORD *)(a2 + 176);
  long long v13 = *(_OWORD *)(a2 + 192);
  long long v14 = *(_OWORD *)(a2 + 208);
  *((void *)a1 + 32) = *(void *)(a2 + 224);
  *((_OWORD *)a1 + 14) = v13;
  *((_OWORD *)a1 + 15) = v14;
  *((_OWORD *)a1 + 13) = v12;
  if (sub_1010143F4(a2) == 1)
  {
    int v15 = 1;
  }
  else
  {
    if (sub_1010143F4(a2) != 2) {
      goto LABEL_6;
    }
    int v15 = 2;
  }
  a1[66] = v15;
LABEL_6:
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230DA00);
  }
  uint64_t v16 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a2 + 16);
    int v18 = *(unsigned __int8 *)(a2 + 144);
    unsigned int v19 = a1[66];
    int v20 = (*(uint64_t (**)(unsigned int *, void))(*(void *)a1 + 32))(a1, a1[2]);
    *(_DWORD *)std::string buf = 134349824;
    uint64_t v24 = v17;
    __int16 v25 = 1026;
    int v26 = v18;
    __int16 v27 = 1026;
    unsigned int v28 = v19;
    __int16 v29 = 1026;
    int v30 = v20;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "FitnessMode, received workout event, %{public}ld, fitness plus %{public}d, active state, %{public}d, should push, %{public}d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230DA00);
    }
    (*(void (**)(unsigned int *, void))(*(void *)a1 + 32))(a1, a1[2]);
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerPhone::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  if (*((unsigned char *)a1 + 176) && a1[66] == 1) {
    return sub_100467468(a1);
  }
  else {
    return (void *)sub_100467730(a1);
  }
}

BOOL sub_101084378(uint64_t a1, int a2)
{
  if (!*(unsigned char *)(a1 + 12) || a2 != 2 && a2 != 1) {
    return 0;
  }
  if (*(_DWORD *)(a1 + 24) == 1) {
    return 1;
  }
  return *(unsigned char *)(a1 + 176) && *(_DWORD *)(a1 + 264) == 1;
}

void sub_1010843C4()
{
}

void sub_1010843D8(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_101084714(id a1)
{
  v4[0] = @"Authorized";
  v4[1] = @"Authorization";
  void v4[2] = @"CorrectiveCompensationEnabled";
  v4[3] = @"SupportedAuthorizationMask";
  qword_102484F88 = +[NSArray arrayWithObjects:v4 count:4];
  v3[0] = @"Authorized";
  v3[1] = @"Authorization";
  _OWORD v3[2] = @"CorrectiveCompensationEnabled";
  v3[3] = @"IncidentalUseMode";
  v3[4] = @"LocationButtonUseMode";
  void v3[5] = @"SupportedAuthorizationMask";
  void v3[6] = @"RemoteUsage";
  qword_102484F90 = +[NSArray arrayWithObjects:v3 count:7];
  v1[0] = @"Authorized";
  v1[1] = @"Authorization";
  v2[0] = &__kCFBooleanFalse;
  v2[1] = &off_1023939E0;
  v1[2] = @"CorrectiveCompensationEnabled";
  v1[3] = @"IncidentalUseMode";
  v2[2] = &off_1023939F8;
  v2[3] = &off_102393A10;
  v1[4] = @"isSystemService";
  v1[5] = @"InUseLevel";
  v2[4] = &__kCFBooleanFalse;
  v2[5] = &off_1023939F8;
  qword_102484F98 = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:6];
}

void sub_101084FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1010858DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_101086CF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_101086D34(void *a1, void *a2, uint64_t a3)
{
  if (objc_msgSend(a2, "objectForKeyedSubscript:"))
  {
    id v6 = [a2 objectForKeyedSubscript:a3];
    return [a1 setObject:v6 forKeyedSubscript:a3];
  }
  else
  {
    id result = [a1 objectForKeyedSubscript:a3];
    if (result)
    {
      return [a1 removeObjectForKey:a3];
    }
  }
  return result;
}

void sub_101089134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10108A23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10108AB9C(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10108ABCC(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

uint64_t sub_10108AC3C(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 10) = v4;
  *(_WORD *)(a3 + 18) = 2114;
  *(void *)(a3 + 20) = result;
  *(_WORD *)(a3 + 28) = 2114;
  *(void *)(a3 + 30) = a2;
  *(_WORD *)(a3 + 38) = v3;
  return result;
}

void sub_10108AC5C(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(float *)a4 = a1;
  *(_DWORD *)(a4 + 4) = 0;
  *(_WORD *)(a4 + 8) = 2082;
}

void sub_10108AC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 40) = v3;
  *(_WORD *)(a3 + 48) = 2081;
}

void sub_10108AC80(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_impl(a1, a4, OS_LOG_TYPE_INFO, a2, a3, 0x3Au);
}

void sub_10108B194(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_10108B1C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 24))(&v22);
  if (!v24)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
  std::string __p = 0;
  int v20 = 0;
  uint64_t v21 = 0;
  uint64_t v3 = (int *)v22;
  uint64_t v4 = v23;
  if (v22 == v23)
  {
    int v18 = 0;
    goto LABEL_36;
  }
  do
  {
    int v5 = *v3;
    if (sub_100D550A4(*v3))
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10230DBA8);
      }
      id v6 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v28 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "@WifiChannel, receive channel %{public}d recommendation from 5GHz selector", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_10230DBA8);
        }
        int v25 = 67240192;
        int v26 = v5;
        long long v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "std::optional<CLWifiService_Type::Channels> CLIWifiLocation5GHzChannelSelector::recommendedChannels()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
    }
    else
    {
      long long v8 = v20;
      if (v20 >= v21)
      {
        long long v10 = __p;
        uint64_t v11 = v20 - __p;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v13 = (char *)v21 - (char *)__p;
        if (((char *)v21 - (char *)__p) >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          int v15 = (char *)sub_10017EA34((uint64_t)&v21, v14);
          long long v10 = __p;
          long long v8 = v20;
        }
        else
        {
          int v15 = 0;
        }
        uint64_t v16 = (int *)&v15[4 * v11];
        int *v16 = v5;
        long long v9 = v16 + 1;
        while (v8 != v10)
        {
          int v17 = *--v8;
          *--uint64_t v16 = v17;
        }
        std::string __p = v16;
        uint64_t v21 = (int *)&v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *int v20 = v5;
        long long v9 = v20 + 1;
      }
      int v20 = v9;
    }
    ++v3;
  }
  while (v3 != v4);
  int v18 = v20;
  if (__p == v20)
  {
LABEL_36:
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
    if (!v18) {
      goto LABEL_38;
    }
    goto LABEL_37;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_10010F834((void *)a2, __p, (uint64_t)v20, v20 - __p);
  *(unsigned char *)(a2 + 24) = 1;
  int v18 = __p;
  if (__p) {
LABEL_37:
  }
    operator delete(v18);
LABEL_38:
  if (v24)
  {
    if (v22)
    {
      unint64_t v23 = (int *)v22;
      operator delete(v22);
    }
  }
}

void sub_10108B518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20)
  {
    if (a17) {
      operator delete(a17);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10108B560()
{
  return 0;
}

uint64_t sub_10108B568@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_101413030();

  return sub_10141306C(v2, 12, a1);
}

void sub_10108B5A4(uint64_t a1)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 8) + 40))(&v10);
  if (v12)
  {
    uint64_t v2 = v10;
    if (v10 == v11) {
      goto LABEL_18;
    }
    sub_1010A88C4(&v16, &v10);
    sub_10108B8D4(a1 + 24, (uint64_t)&v16);
    if (__p)
    {
      int v18 = __p;
      operator delete(__p);
    }
    sub_1000F5BB0((uint64_t)&v16, (void *)v16.__r_.__value_.__l.__size_);
    long long v7 = 0;
    long long v8 = 0;
    uint64_t v9 = 0;
    sub_10010F834(&v7, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10230DBA8);
    }
    uint64_t v3 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100D55288((uint64_t *)&v7, &v16);
      uint64_t v4 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v16
         : (std::string *)v16.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@WifiChannel, time-based 5GHz, query latest ALS channels %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v16, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10230DBA8);
      }
      sub_100D55288((uint64_t *)&v7, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v14 = 136446210;
      int v15 = p_buf;
      id v6 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiLocation5GHzChannelTimeBasedSelector::updateAlsQueryTopChannels()", "%s\n", (const char *)v6);
      if (v6 != &v16) {
        free(v6);
      }
    }
    if (v7)
    {
      long long v8 = v7;
      operator delete(v7);
    }
    if (v12)
    {
      uint64_t v2 = v10;
LABEL_18:
      if (v2)
      {
        uint64_t v11 = v2;
        operator delete(v2);
      }
    }
  }
}

void sub_10108B870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18)
  {
    if (a15) {
      operator delete(a15);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10108B8D4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    sub_100D697EC(a1, (void *)a2);
    sub_1000F4EBC(a1 + 24, (__n128 *)(a2 + 24));
  }
  else
  {
    sub_10108CBCC((void *)a1, a2);
    *(unsigned char *)(a1 + 48) = 1;
  }
  return a1;
}

uint64_t sub_10108B934(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  sub_1000F5BB0(a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t sub_10108B974()
{
  return 1;
}

void sub_10108B97C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 72))
  {
    int v14 = 0;
    std::string __dst = 0;
    uint64_t v16 = 0;
    sub_10010F834(&v14, *(const void **)(a1 + 48), *(void *)(a1 + 56), (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 2);
    uint64_t v3 = sub_101413030();
    sub_10141306C(v3, 12, (uint64_t)&__p);
    if (v13)
    {
      unint64_t v4 = (v12 - (unsigned char *)__p) >> 2;
      if (v4 > ((unsigned char *)__dst - (unsigned char *)v14) >> 2)
      {
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_10230DBA8);
        }
        int v5 = qword_1024193B8;
        if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)std::string buf = 67240192;
          LODWORD(v20) = v4 - ((unint64_t)((unsigned char *)__dst - (unsigned char *)v14) >> 2);
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "@WifiChannel, time-based 5GHz, fill the extra %{public}d channel(s) from preset", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193B0 != -1) {
            dispatch_once(&qword_1024193B0, &stru_10230DBA8);
          }
          int v17 = 67240192;
          LODWORD(v18) = v4 - ((unint64_t)((unsigned char *)__dst - (unsigned char *)v14) >> 2);
          long long v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::optional<CLWifiService_Type::Channels> CLWifiLocation5GHzChannelTimeBasedSelector::recommendedChannelsImpl()", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
        sub_1001E06C8((uint64_t)&v14, (uint64_t)__dst, (char *)__p, v12, (v12 - (unsigned char *)__p) >> 2);
      }
    }
    else
    {
      unint64_t v4 = 10;
    }
    id v6 = v14;
    long long v7 = (char *)__dst;
    if (v4 < ((unsigned char *)__dst - (unsigned char *)v14) >> 2)
    {
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10230DBA8);
      }
      long long v8 = qword_1024193B8;
      if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 134349056;
        unint64_t v20 = v4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "@WifiChannel, time-based 5GHz, trim channel recommendation down to %{public}lu candidates", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193B0 != -1) {
          dispatch_once(&qword_1024193B0, &stru_10230DBA8);
        }
        int v17 = 134349056;
        unint64_t v18 = v4;
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::optional<CLWifiService_Type::Channels> CLWifiLocation5GHzChannelTimeBasedSelector::recommendedChannelsImpl()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      id v6 = v14;
      long long v7 = (char *)v14 + 4 * v4;
      if (v7 != __dst) {
        std::string __dst = (char *)v14 + 4 * v4;
      }
    }
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v16;
    std::string __dst = 0;
    uint64_t v16 = 0;
    int v14 = 0;
    *(unsigned char *)(a2 + 24) = 1;
    if (v13 && __p)
    {
      char v12 = (char *)__p;
      operator delete(__p);
      if (v14)
      {
        std::string __dst = v14;
        operator delete(v14);
      }
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
}

void sub_10108BD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17)
{
  if (a15 && __p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10108BDD8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 72)) {
    BOOL v2 = *(unsigned char *)(a2 + 48) == 12;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return 0;
  }
  unint64_t v23 = 0;
  char v24 = 0;
  unint64_t v25 = 0;
  int v5 = *(uint64_t **)(a2 + 16);
  if (!v5) {
    goto LABEL_33;
  }
  id v6 = (uint64_t *)(a1 + 32);
  do
  {
    *(void *)std::string buf = v5[2];
    if (*((char *)v5 + 47) < 0)
    {
      sub_1000DC48C(&__p, (void *)v5[3], v5[4]);
    }
    else
    {
      long long __p = *(_OWORD *)(v5 + 3);
      uint64_t v28 = v5[5];
    }
    long long v7 = *((_OWORD *)v5 + 4);
    long long v29 = *((_OWORD *)v5 + 3);
    long long v30 = v7;
    long long v31 = *((_OWORD *)v5 + 5);
    uint64_t v32 = v5[12];
    uint64_t v8 = *v6;
    if (*v6)
    {
      uint64_t v9 = a1 + 32;
      do
      {
        int v10 = *(_DWORD *)(v8 + 28);
        BOOL v11 = v10 < SDWORD2(v29);
        if (v10 >= SDWORD2(v29)) {
          char v12 = (uint64_t *)v8;
        }
        else {
          char v12 = (uint64_t *)(v8 + 8);
        }
        if (!v11) {
          uint64_t v9 = v8;
        }
        uint64_t v8 = *v12;
      }
      while (*v12);
      if ((uint64_t *)v9 != v6 && *(_DWORD *)(v9 + 28) <= SDWORD2(v29))
      {
        char v13 = v24;
        if ((unint64_t)v24 >= v25)
        {
          uint64_t v16 = sub_1001F8D14((uint64_t *)&v23, (uint64_t)buf);
        }
        else
        {
          *char v24 = *(void *)buf;
          int v14 = v13 + 1;
          if (SHIBYTE(v28) < 0)
          {
            sub_1000DC48C(v14, (void *)__p, *((unint64_t *)&__p + 1));
          }
          else
          {
            long long v15 = __p;
            v13[3] = v28;
            *(_OWORD *)int v14 = v15;
          }
          long long v17 = v29;
          long long v18 = v30;
          long long v19 = v31;
          v13[10] = v32;
          *((_OWORD *)v13 + 3) = v18;
          *((_OWORD *)v13 + 4) = v19;
          *((_OWORD *)v13 + 2) = v17;
          uint64_t v16 = (uint64_t)(v13 + 11);
        }
        char v24 = (void *)v16;
      }
    }
    if (SHIBYTE(v28) < 0) {
      operator delete((void *)__p);
    }
    int v5 = (uint64_t *)*v5;
  }
  while (v5);
  if (v23 == v24)
  {
LABEL_33:
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10230DBA8);
    }
    unint64_t v20 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "@WifiChannel, time-based 5GHz, reset channel selector due to no APs", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10230DBA8);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiLocation5GHzChannelTimeBasedSelector::resetTopChannelsBasedOnScanResult(const CL::Wifi1::Events::Wifi::Scan &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    sub_10108C13C(a1 + 24);
    uint64_t v3 = 1;
  }
  else
  {
    uint64_t v3 = 0;
  }
  *(void *)std::string buf = &v23;
  sub_1000D7F78((void ***)buf);
  return v3;
}

void sub_10108C0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  a15 = &a12;
  sub_1000D7F78((void ***)&a15);
  _Unwind_Resume(a1);
}

void sub_10108C13C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    BOOL v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
    sub_1000F5BB0(a1, *(void **)(a1 + 8));
    *(unsigned char *)(a1 + 48) = 0;
  }
}

uint64_t sub_10108C184(uint64_t result, uint64_t *a2)
{
  *(void *)id result = off_10230DB10;
  *(void *)(result + 8) = off_10230DAB0;
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  *(void *)(result + 16) = off_10230DAE0;
  *(void *)(result + 24) = v3;
  *(void *)(result + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(result + 40) = 0;
  *(unsigned char *)(result + 88) = 0;
  *(void *)(result + 112) = 0;
  *(void *)(result + 104) = 0;
  *(void *)(result + 96) = result + 104;
  return result;
}

void sub_10108C218(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v22 = a2;
  if (a2 != 12)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 32) = 0;
    return;
  }
  sub_10108B1C4(a1 + 16, (uint64_t)&v19);
  if (v21)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10230DBA8);
    }
    int v5 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      if (!v21) {
        sub_10020D700();
      }
      sub_100D55288((uint64_t *)&v19, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@WifiChannel, apply, time-based 5GHz channel selector overrides, %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10230DBA8);
      }
      if (!v21) {
        sub_10020D700();
      }
      sub_100D55288((uint64_t *)&v19, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v24 = 136446210;
      unint64_t v25 = p_buf;
      uint64_t v16 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::optional<CLWifiLocationChannelSelectionService_Type::ChannelRecommendation> CLWifiLocation5GHzChannelSelectionService::recommendedChannels(CLWifiService_Type::ScanType)", "%s\n", (const char *)v16);
      if (v16 != &__p) {
        free(v16);
      }
    }
    if (!v21) {
      sub_10020D700();
    }
    __p.__r_.__value_.__s.__data_[0] = 1;
    __int16 v27 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    sub_10010F834(&__p.__r_.__value_.__l.__size_, v19, (uint64_t)v20, (v20 - (unsigned char *)v19) >> 2);
    long long v7 = (uint64_t **)(a1 + 96);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
    uint64_t v8 = sub_10108CC28(v7, &v22, (uint64_t)&unk_101D0B290, &buf.__r_.__value_.__l.__data_);
    *((unsigned char *)v8 + 40) = __p.__r_.__value_.__s.__data_[0];
    uint64_t v9 = v8[6];
    if (v9)
    {
      v8[7] = v9;
      operator delete(v9);
      void v8[6] = 0;
      v8[7] = 0;
      v8[8] = 0;
    }
LABEL_35:
    *((_OWORD *)v8 + 3) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    v8[8] = v27;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
    int v14 = sub_10108CC28(v7, &v22, (uint64_t)&unk_101D0B290, &__p.__r_.__value_.__l.__data_);
    *(unsigned char *)a3 = *((unsigned char *)v14 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    sub_10010F834((void *)(a3 + 8), v14[6], (uint64_t)v14[7], ((char *)v14[7] - (char *)v14[6]) >> 2);
    char v10 = 1;
    goto LABEL_36;
  }
  sub_10108B1C4(a1 + 8, (uint64_t)&__p);
  sub_100221F2C((uint64_t)&v19, (__n128 *)&__p);
  if ((_BYTE)v27 && __p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  char v10 = v21;
  if (v21)
  {
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_10230DBA8);
    }
    BOOL v11 = qword_1024193B8;
    if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
    {
      if (!v21) {
        sub_10020D700();
      }
      sub_100D55288((uint64_t *)&v19, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v12 = &__p;
      }
      else {
        char v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "@WifiChannel, apply, default 5GHz channel selector overrides, %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024193B0 != -1) {
        dispatch_once(&qword_1024193B0, &stru_10230DBA8);
      }
      if (!v21) {
        sub_10020D700();
      }
      sub_100D55288((uint64_t *)&v19, &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v17 = &buf;
      }
      else {
        long long v17 = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      int v24 = 136446210;
      unint64_t v25 = v17;
      long long v18 = (std::string *)_os_log_send_and_compose_impl();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::optional<CLWifiLocationChannelSelectionService_Type::ChannelRecommendation> CLWifiLocation5GHzChannelSelectionService::recommendedChannels(CLWifiService_Type::ScanType)", "%s\n", (const char *)v18);
      if (v18 != &__p) {
        free(v18);
      }
    }
    if (!v21) {
      sub_10020D700();
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    __int16 v27 = 0;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
    sub_10010F834(&__p.__r_.__value_.__l.__size_, v19, (uint64_t)v20, (v20 - (unsigned char *)v19) >> 2);
    long long v7 = (uint64_t **)(a1 + 96);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
    uint64_t v8 = sub_10108CC28(v7, &v22, (uint64_t)&unk_101D0B290, &buf.__r_.__value_.__l.__data_);
    *((unsigned char *)v8 + 40) = __p.__r_.__value_.__s.__data_[0];
    char v13 = v8[6];
    if (v13)
    {
      v8[7] = v13;
      operator delete(v13);
      void v8[6] = 0;
      v8[7] = 0;
      v8[8] = 0;
    }
    goto LABEL_35;
  }
  *(unsigned char *)a3 = 0;
LABEL_36:
  *(unsigned char *)(a3 + 32) = v10;
  if (v21)
  {
    if (v19)
    {
      unint64_t v20 = v19;
      operator delete(v19);
    }
  }
}

void sub_10108C84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (a15)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_10108C8C8@<X0>(uint64_t **result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v12 = a2;
  int v5 = (uint64_t *)(result + 13);
  unint64_t v4 = result[13];
  if (!v4) {
    goto LABEL_11;
  }
  result += 12;
  id v6 = v5;
  do
  {
    int v7 = *((char *)v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t **)v4;
    }
    else {
      uint64_t v9 = (uint64_t **)(v4 + 1);
    }
    if (!v8) {
      id v6 = v4;
    }
    unint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != v5 && *((char *)v6 + 32) <= a2)
  {
    char v13 = &v12;
    BOOL v11 = sub_10108CC28(result, &v12, (uint64_t)&unk_101D0B290, &v13);
    *(unsigned char *)a3 = *((unsigned char *)v11 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 8) = 0;
    id result = (uint64_t **)sub_10010F834((void *)(a3 + 8), v11[6], (uint64_t)v11[7], ((char *)v11[7] - (char *)v11[6]) >> 2);
    char v10 = 1;
  }
  else
  {
LABEL_11:
    char v10 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 32) = v10;
  return result;
}

void sub_10108C994(uint64_t a1)
{
}

uint64_t sub_10108C99C(uint64_t a1, uint64_t a2)
{
  return sub_10108BDD8(a1 + 16, a2);
}

void sub_10108C9A8(void *a1)
{
  sub_10108CAD0(a1);

  operator delete();
}

uint64_t sub_10108C9E0(uint64_t a1)
{
  *(void *)a1 = off_10230DB10;
  sub_10108CB68(a1 + 96, *(void **)(a1 + 104));
  sub_10108CAD0((void *)(a1 + 16));
  return a1;
}

void sub_10108CA30(uint64_t a1)
{
  *(void *)a1 = off_10230DB10;
  sub_10108CB68(a1 + 96, *(void **)(a1 + 104));
  sub_10108CAD0((void *)(a1 + 16));

  operator delete();
}

void sub_10108CAA0(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void *sub_10108CAD0(void *a1)
{
  *a1 = off_10230DAE0;
  sub_10108CB20((uint64_t)(a1 + 3));
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

uint64_t sub_10108CB20(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v2 = *(void **)(a1 + 24);
    if (v2)
    {
      *(void *)(a1 + 32) = v2;
      operator delete(v2);
    }
    sub_1000F5BB0(a1, *(void **)(a1 + 8));
  }
  return a1;
}

void sub_10108CB68(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10108CB68(a1, *a2);
    sub_10108CB68(a1, a2[1]);
    unint64_t v4 = (void *)a2[6];
    if (v4)
    {
      a2[7] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

__n128 sub_10108CBCC(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  uint64_t v2 = (void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  a1[1] = v3;
  unint64_t v4 = a1 + 1;
  uint64_t v5 = *(void *)(a2 + 16);
  a1[2] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *(void *)a2 = v2;
    void *v2 = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *a1 = v4;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 3) = result;
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t **sub_10108CC28(uint64_t **a1, char *a2, uint64_t a3, unsigned char **a4)
{
  int v7 = a1 + 1;
  id v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((char *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        id v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      id v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x48uLL);
    v11[32] = **a4;
    v11[40] = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 8) = 0;
    *((void *)v11 + 6) = 0;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_10108CCF4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10108CDAC(_Unwind_Exception *a1)
{
}

void sub_10108CDC4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10108CE6C(_Unwind_Exception *a1)
{
}

BOOL sub_10108D054(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0;
      while (1)
      {
        uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v8 = v7 + 1;
        if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
        v6 |= (unint64_t)(v9 & 0x7F) << v4;
        if ((v9 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0;
          int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0;
      }
LABEL_13:
      if (v11 || (v6 & 7) == 4) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 2) {
        break;
      }
      if ((v6 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v13 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v14 = 0;
        }
        uint64_t v16 = &OBJC_IVAR___CLStreamedLocationInternal__rawCoordinateLatitude;
LABEL_31:
        *(void *)(a1 + *v16) = v14;
        goto LABEL_32;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_32:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }
    *(unsigned char *)(a1 + 24) |= 2u;
    unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
    if (v15 <= 0xFFFFFFFFFFFFFFF7 && v15 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
    {
      uint64_t v14 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 8;
    }
    else
    {
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
      uint64_t v14 = 0;
    }
    uint64_t v16 = &OBJC_IVAR___CLStreamedLocationInternal__rawCoordinateLongitude;
    goto LABEL_31;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10108D65C(uint64_t a1)
{
  *(unsigned char *)(a1 + 64) = 0;
  uint64_t v2 = (BOOL *)(a1 + 64);
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v3 = sub_1000D3E78();
  sub_10006B564(v3, buf);
  sub_1000D2988(*(uint64_t *)buf, "MotionLoggerLogRunningPower", v2);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419230 != -1) {
    dispatch_once(&qword_102419230, &stru_10230DBC8);
  }
  char v4 = qword_102419238;
  if (os_log_type_enabled((os_log_t)qword_102419238, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v5 = *v2;
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = "MotionLoggerLogRunningPower";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Init: %{public}s=%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419230 != -1) {
      dispatch_once(&qword_102419230, &stru_10230DBC8);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLPowerEstimator::CLPowerEstimator()", "%s\n", v7);
    if (v7 != buf) {
      free(v7);
    }
  }
  return a1;
}

void sub_10108D884(_Unwind_Exception *a1)
{
  sub_10058D17C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10108D8B8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, unint64_t a4@<D1>, unint64_t a5@<D2>)
{
  double v67 = 0.0;
  double v68 = 0.0;
  *(_DWORD *)(a3 + 124) = 0;
  *(_WORD *)(a3 + 128) = 0;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(unsigned char *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(unsigned char *)(a3 + 120) = 0;
  *(_DWORD *)(a3 + 132) = 1000;
  if (*(void *)(result + 56) != 1)
  {
    uint64_t v7 = result;
    int v56 = *(_DWORD *)(a2 + 848);
    double v9 = *(double *)(a2 + 448);
    double v8 = *(double *)(a2 + 456);
    float v10 = *(double *)(a2 + 840);
    float v11 = v10 * 2.2369;
    double v12 = v11;
    LODWORD(a4) = *(_DWORD *)(a2 + 824);
    LODWORD(a5) = *(_DWORD *)(a2 + 828);
    double v55 = (double)a4 - (double)a5;
    if (v9 > 2.23693991 || v9 <= 0.140000001) {
      double v14 = 0.0;
    }
    else {
      double v14 = 2.23693991 / v9;
    }
    float v15 = v14;
    sub_100DF7CBC(1, v11, v15);
    double v17 = v16;
    sub_100DF7C94(a2, (uint64_t)v64);
    sub_100418664(a2, (uint64_t)v62);
    double v18 = *(double *)(a2 + 128);
    int v19 = *(_DWORD *)(a2 + 832);
    int v20 = *(unsigned __int8 *)(a2 + 528);
    uint64_t v21 = *(void *)(a2 + 344);
    *(double *)uint64_t v66 = v9;
    *(double *)&v66[1] = v8;
    *(double *)&v66[2] = v14;
    *(double *)&v66[3] = v12;
    double v22 = *(float *)(a2 + 1372);
    double v69 = v17;
    double v70 = v22;
    int8x16_t v58 = (int8x16_t)vcvtq_f64_f32(*(float32x2_t *)(a2 + 1360));
    int8x16_t v71 = vextq_s8(v58, v58, 8uLL);
    double v59 = v18;
    double v72 = v18;
    unsigned int v23 = v20 & 0xFFFFFFFD;
    BOOL v24 = (v20 & 0xFFFFFFFD) != 1;
    BOOL v25 = sub_100DE61A4(v21);
    double v57 = v8;
    int v26 = sub_100DE6064(v8, v9, *(double *)v58.i64, v17);
    char v27 = v26;
    if (v26)
    {
      double v68 = v65;
      float v28 = v14;
      float v29 = sub_100DF7CA4(v28);
    }
    else
    {
      double v68 = v63;
      float v30 = v14;
      float v29 = sub_100418670(v30);
    }
    double v67 = v29;
    BOOL v31 = sub_10007E3A4(v9 * 0.7, *(double *)v58.i64);
    sub_10108DE60(v7, v59);
    uint64_t v32 = *(void *)(v7 + 40);
    double v33 = 0.0;
    if (v32)
    {
      unint64_t v34 = v32 + *(void *)(v7 + 32) - 1;
      uint64_t v35 = *(void *)(*(void *)(v7 + 8) + 8 * (v34 / 0x49));
      unint64_t v36 = v34 % 0x49;
      double v37 = v59 - *(double *)(v35 + 56 * v36);
      double v38 = v8;
      if (v37 > 0.0) {
        double v33 = (v55 / 100.0 - *(double *)(v35 + 56 * v36 + 16)) / v37;
      }
    }
    else
    {
      double v38 = v8;
    }
    double v39 = sub_100DE6130(v14, v12);
    double v40 = sub_100DE6130(v14, v33 * 2.23693991);
    *(double *)uint64_t v61 = v59;
    *(double *)&v61[1] = v14;
    *(double *)&v61[2] = v55 / 100.0;
    *(double *)&v61[3] = v33;
    *(double *)&v61[4] = v39;
    *(double *)&v61[5] = v40;
    *(double *)&v61[6] = v38;
    sub_10108E00C(v7, (uint64_t)v61, v19);
    if (v25)
    {
      sub_1013EFEA8(&buf, v66, *(_DWORD *)(v7 + 48) != 0);
      long long v41 = v82;
      *(_OWORD *)(a3 + 96) = v81;
      *(_OWORD *)(a3 + 112) = v41;
      *(void *)(a3 + 128) = v83;
      long long v42 = v78;
      *(_OWORD *)(a3 + 32) = v77;
      *(_OWORD *)(a3 + 48) = v42;
      long long v43 = v80;
      *(_OWORD *)(a3 + 64) = v79;
      *(_OWORD *)(a3 + 80) = v43;
      long long v44 = v76;
      *(_OWORD *)a3 = buf;
      *(_OWORD *)(a3 + 16) = v44;
      double v45 = *(double *)(a3 + 104);
      *(unsigned char *)(a3 + 16) = 1;
      if (v45 <= 35.0)
      {
        if (v23 == 1)
        {
          int v47 = 0;
          *(unsigned char *)(a3 + 16) = 0;
        }
        else
        {
          int v47 = 1;
        }
      }
      else
      {
        *(unsigned char *)(a3 + 16) = 0;
        if (qword_102419230 != -1) {
          dispatch_once(&qword_102419230, &stru_10230DBC8);
        }
        uint64_t v46 = qword_102419238;
        if (os_log_type_enabled((os_log_t)qword_102419238, OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf) = 134217984;
          *(double *)((char *)&buf + 4) = v45;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Rejected RunningPower due to invalid grade=%.1f ", (uint8_t *)&buf, 0xCu);
        }
        int v47 = 0;
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_102419230 != -1) {
            dispatch_once(&qword_102419230, &stru_10230DBC8);
          }
          int v73 = 134217984;
          double v74 = v45;
          long long v48 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLPower::ModelOutput CLPowerEstimator::calculatePower(const CLNatalieModelInput &)", "%s\n", v48);
          if (v48 != (char *)&buf) {
            free(v48);
          }
          int v47 = 0;
          double v38 = v57;
        }
      }
    }
    else
    {
      *(unsigned char *)(a3 + 16) = 0;
      sub_1013F0200((uint64_t)v66, (uint64_t)&buf);
      long long v49 = v82;
      *(_OWORD *)(a3 + 96) = v81;
      *(_OWORD *)(a3 + 112) = v49;
      *(void *)(a3 + 128) = v83;
      long long v50 = v78;
      *(_OWORD *)(a3 + 32) = v77;
      *(_OWORD *)(a3 + 48) = v50;
      long long v51 = v80;
      *(_OWORD *)(a3 + 64) = v79;
      *(_OWORD *)(a3 + 80) = v51;
      long long v52 = v76;
      *(_OWORD *)a3 = buf;
      *(_OWORD *)(a3 + 16) = v52;
      int v47 = *(unsigned __int8 *)(a3 + 16);
    }
    *(double *)double v60 = v59;
    *(double *)&v60[1] = v14;
    *(double *)&v60[2] = v55 / 100.0;
    *(double *)&v60[3] = v33;
    *(double *)&v60[4] = v39;
    *(double *)&v60[5] = v40;
    *(double *)&v60[6] = v38;
    sub_10108E0C8(v7, (uint64_t)v60, v31 && v25, v47 != 0);
    int v53 = *(_DWORD *)(v7 + 48);
    *(unsigned char *)(a3 + 120) = v53 != 0;
    *(_DWORD *)(a3 + 124) = v53;
    *(unsigned char *)(a3 + 40) = *(unsigned char *)(a2 + 1410);
    int v54 = *(_DWORD *)(a2 + 152);
    *(_DWORD *)(a3 + 56) = *(_DWORD *)(a2 + 288);
    *(_DWORD *)(a3 + 60) = v54;
    *(unsigned char *)(a3 + 64) = v25;
    *(unsigned char *)(a3 + 129) = v27;
    *(unsigned char *)(a3 + 128) = v24;
    if (v47) {
      __n128 result = sub_10108E164((double *)a3);
    }
    else {
      __n128 result = 0;
    }
    *(unsigned char *)(a3 + 16) = result;
    *(_DWORD *)(a3 + 132) = v56;
  }
  return result;
}

unint64_t sub_10108DE60(uint64_t a1, double a2)
{
  unint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = (void *)(v4 + 8 * (v3 / 0x49));
  if (v5 == v4)
  {
    unint64_t v7 = 0;
    double v8 = (void *)(a1 + 40);
  }
  else
  {
    unint64_t v7 = *(void *)(v4 + 8 * (v3 / 0x49)) + 56 * (v3 % 0x49);
    double v8 = (void *)(a1 + 40);
    unint64_t v9 = *(void *)(v4 + 8 * ((*(void *)(a1 + 40) + v3) / 0x49)) + 56 * ((*(void *)(a1 + 40) + v3) % 0x49);
    if (v7 != v9)
    {
      while (a2 - *(double *)v7 <= 20.0)
      {
        v7 += 56;
        if (v7 - *v6 == 4088)
        {
          unint64_t v10 = v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
        if (v7 == v9) {
          goto LABEL_17;
        }
      }
    }
    if (v7 == v9)
    {
LABEL_17:
      unint64_t v7 = *(void *)(v4 + 8 * ((*(void *)(a1 + 40) + v3) / 0x49)) + 56 * ((*(void *)(a1 + 40) + v3) % 0x49);
    }
    else
    {
      unint64_t v11 = v7;
      double v12 = v6;
      while (1)
      {
        v11 += 56;
        if (v11 - *v12 == 4088)
        {
          unint64_t v13 = v12[1];
          ++v12;
          unint64_t v11 = v13;
        }
        if (v11 == v9) {
          break;
        }
        if (a2 - *(double *)v11 <= 20.0)
        {
          long long v14 = *(_OWORD *)v11;
          long long v15 = *(_OWORD *)(v11 + 16);
          long long v16 = *(_OWORD *)(v11 + 32);
          *(void *)(v7 + 48) = *(void *)(v11 + 48);
          *(_OWORD *)(v7 + 16) = v15;
          *(_OWORD *)(v7 + 32) = v16;
          *(_OWORD *)unint64_t v7 = v14;
          v7 += 56;
          if (v7 - *v6 == 4088)
          {
            unint64_t v17 = v6[1];
            ++v6;
            unint64_t v7 = v17;
          }
        }
      }
      unint64_t v3 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 8);
      uint64_t v5 = *(void *)(a1 + 16);
    }
  }
  unint64_t v18 = v3 + *v8;
  int v19 = (void *)(v4 + 8 * (v18 / 0x49));
  if (v5 == v4) {
    int v20 = 0;
  }
  else {
    int v20 = (char *)(*v19 + 56 * (v18 % 0x49));
  }
  unint64_t result = sub_10108E618((void *)a1, v6, (char *)v7, v19, v20);
  if (!*(void *)(a1 + 40)) {
    *(_DWORD *)(a1 + 48) = 0;
  }
  return result;
}

uint64_t sub_10108E00C(uint64_t a1, uint64_t a2, int a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v6;
  v12[2] = *(_OWORD *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t result = sub_10108E8C4(a1, (double *)v12, a3, (void *)a1);
  if (a3 == 1 || (double v8 = *(double *)(a2 + 32), v8 < 2.0) && *(double *)(a2 + 40) < 2.0)
  {
    *(_DWORD *)(a1 + 48) = 0;
    return result;
  }
  int v9 = *(_DWORD *)(a1 + 48);
  BOOL v10 = v8 < 0.0 || v8 > 8.0;
  if (v10 || ((result ^ 1) & 1) != 0)
  {
    if (!v9) {
      return result;
    }
    goto LABEL_13;
  }
  if (v9)
  {
LABEL_13:
    int v11 = v9 - 1;
    goto LABEL_14;
  }
  int v11 = 10;
LABEL_14:
  *(_DWORD *)(a1 + 48) = v11;
  return result;
}

uint64_t sub_10108E0C8(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4 = (void *)result;
  if (*(double *)(a2 + 32) >= 35.0 || a3 == 0)
  {
    if ((a4 & 1) == 0 && *(_DWORD *)(result + 48) == 10) {
      *(_DWORD *)(result + 48) = 0;
    }
  }
  else
  {
    unint64_t v7 = *(void *)(result + 40);
    if (v7 >= 4)
    {
      ++*(void *)(result + 32);
      *(void *)(result + 40) = v7 - 1;
      sub_100ADB118(result, 1);
    }
    return sub_10108EF44(v4, (long long *)a2);
  }
  return result;
}

BOOL sub_10108E164(double *a1)
{
  double v2 = a1[3];
  if (v2 >= 30.0)
  {
    double v6 = *a1 / v2;
    if (v6 >= 0.66)
    {
      if (v6 <= 15.37) {
        return 1;
      }
      if (qword_102419230 != -1) {
        dispatch_once(&qword_102419230, &stru_10230DBC8);
      }
      int v11 = qword_102419238;
      if (os_log_type_enabled((os_log_t)qword_102419238, OS_LOG_TYPE_ERROR))
      {
        double v12 = a1[3];
        double v13 = *a1;
        *(_DWORD *)long long buf = 134218496;
        double v16 = v12;
        __int16 v17 = 2050;
        double v18 = v13;
        __int16 v19 = 2048;
        double v20 = v12 * 0.66;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Rejected RunningPower due to range check, unreasonably high Watts: weight=%.1f,powerWattage=%{public}.2f,maximum allowed powerWattage=%.2f", buf, 0x20u);
      }
      BOOL v14 = sub_10013D1A0(115, 0);
      BOOL result = 0;
      if (v14)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419230 != -1) {
          dispatch_once(&qword_102419230, &stru_10230DBC8);
        }
        BOOL v10 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLPowerEstimator::rangeCheck(const CLPower::ModelOutput &)", "%s\n");
        goto LABEL_17;
      }
    }
    else
    {
      if (qword_102419230 != -1) {
        dispatch_once(&qword_102419230, &stru_10230DBC8);
      }
      unint64_t v7 = qword_102419238;
      if (os_log_type_enabled((os_log_t)qword_102419238, OS_LOG_TYPE_INFO))
      {
        double v8 = a1[3];
        double v9 = *a1;
        *(_DWORD *)long long buf = 134218496;
        double v16 = v8;
        __int16 v17 = 2050;
        double v18 = v9;
        __int16 v19 = 2048;
        double v20 = v8 * 0.66;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Rejected RunningPower due to range check, low Watts: weight=%.1f,powerWattage=%{public}.2f,minimum required powerWattage=%.2f", buf, 0x20u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419230 == -1)
        {
LABEL_16:
          BOOL v10 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPowerEstimator::rangeCheck(const CLPower::ModelOutput &)", "%s\n");
LABEL_17:
          if (v10 != buf) {
            free(v10);
          }
          return 0;
        }
LABEL_31:
        dispatch_once(&qword_102419230, &stru_10230DBC8);
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (qword_102419230 != -1) {
      dispatch_once(&qword_102419230, &stru_10230DBC8);
    }
    unint64_t v3 = qword_102419238;
    if (os_log_type_enabled((os_log_t)qword_102419238, OS_LOG_TYPE_INFO))
    {
      double v4 = a1[3];
      *(_DWORD *)long long buf = 134217984;
      double v16 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Rejected RunningPower due to range check, low weight: weight=%.1f ", buf, 0xCu);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419230 == -1) {
        goto LABEL_16;
      }
      goto LABEL_31;
    }
  }
  return result;
}

unint64_t sub_10108E618(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 73 * (a4 - a2)
  }
       + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a5[-*a4] >> 3)
       - 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a3[-*a2] >> 3);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  double v9 = (char **)(v8 + 8 * (v7 / 0x49));
  if (a1[2] == v8) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = &(*v9)[56 * (v7 % 0x49)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 73 * ((char **)a2 - v9)
  }
        + 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a3[-*a2] >> 3)
        - 0x6DB6DB6DB6DB6DB7 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x49);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_10080DF84(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_10080DF84(v24, v6);
      sub_10108F080(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100ADB118((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_10080DF84(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      double v16 = (unsigned char **)(v15 + 8 * (v14 / 0x49));
      if (a1[2] == v15) {
        __int16 v17 = 0;
      }
      else {
        __int16 v17 = &(*v16)[56 * (v14 % 0x49)];
      }
      v24[0] = v12;
      sub_10108F23C(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_100ADB178(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x49));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 56 * (v19 % 0x49);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_10080DF84(v24, v11);
  return v24[0].n128_u64[0];
}

uint64_t sub_10108E8C4(uint64_t a1, double *a2, int a3, void *a4)
{
  unint64_t v4 = a4[5];
  if (v4 < 2) {
    return 0;
  }
  uint64_t v8 = a4[4];
  unint64_t v9 = v8 + v4;
  unint64_t v10 = (v8 + v4) / 0x49;
  uint64_t v11 = a4[1];
  uint64_t v12 = a4[2];
  __n128 v13 = (uint64_t *)(v11 + 8 * v10);
  uint64_t v14 = *v13;
  unint64_t v15 = *v13 + 56 * ((v8 + v4) % 0x49);
  if (v12 == v11) {
    unint64_t v15 = 0;
  }
  uint64_t v16 = v15 - v14;
  uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - v14) >> 3);
  if (v16 < 113) {
    unint64_t v18 = v13[-((74 - v17) / 0x49uLL)] + 56 * (73 * ((74 - v17) / 0x49uLL) - (74 - v17)) + 4032;
  }
  else {
    unint64_t v18 = v13[(v17 - 2) / 0x49uLL] + 56 * ((v17 - 2) % 0x49uLL);
  }
  uint64_t v19 = v14 + 56 * (v9 % 0x49);
  if (v12 == v11) {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v19 - v14;
  uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v14) >> 3);
  if (v20 < 113)
  {
    uint64_t v27 = 74 - v21;
    unint64_t v28 = (74 - v21) / 0x49uLL;
    BOOL v24 = &v13[-v28];
    uint64_t v25 = *v24;
    uint64_t v26 = *v24 + 56 * (73 * v28 - v27) + 4032;
  }
  else
  {
    uint64_t v22 = v21 - 2;
    unint64_t v23 = (v21 - 2) / 0x49uLL;
    BOOL v24 = &v13[v23];
    uint64_t v25 = *v24;
    uint64_t v26 = *v24 + 56 * (v22 - 73 * v23);
  }
  double v29 = a2[1];
  uint64_t v30 = v14 + 56 * (v9 % 0x49);
  if (v12 == v11) {
    uint64_t v30 = 0;
  }
  if (v26 != v30)
  {
    while (1)
    {
      uint64_t v31 = v26 + 56;
      if (v26 + 56 - v25 == 4088)
      {
        uint64_t v32 = v24[1];
        ++v24;
        uint64_t v25 = v32;
        uint64_t v31 = v32;
      }
      if (v31 == v30) {
        break;
      }
      double v33 = *(double *)(v26 + 8);
      uint64_t v26 = v31;
      if (*(double *)(v31 + 8) > v33)
      {
        BOOL v34 = 0;
        goto LABEL_22;
      }
    }
  }
  BOOL v34 = *(double *)(*(void *)(v11 + 8 * ((v4 + v8 - 1) / 0x49)) + 56 * ((v4 + v8 - 1) % 0x49) + 8) > v29;
LABEL_22:
  double v35 = *(double *)(v18 + 8);
  if (v4 < 3) {
    goto LABEL_38;
  }
  if (v12 == v11) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = v14 + 56 * (v9 % 0x49);
  }
  uint64_t v37 = v36 - v14;
  uint64_t v38 = 0x6DB6DB6DB6DB6DB7 * ((v36 - v14) >> 3);
  if (v37 < 169)
  {
    uint64_t v43 = 75 - v38;
    unint64_t v44 = 75 - v38;
    double v40 = (unint64_t *)&v13[-((75 - v38) / 0x49uLL)];
    unint64_t v41 = *v40;
    unint64_t v42 = *v40 + 56 * (73 * (v44 / 0x49) - v43) + 4032;
  }
  else
  {
    unint64_t v39 = v38 - 3;
    double v40 = (unint64_t *)&v13[(v38 - 3) / 0x49uLL];
    unint64_t v41 = *v40;
    unint64_t v42 = *v40 + 56 * (v39 % 0x49);
  }
  uint64_t v45 = v14 + 56 * (v9 - 73 * v10);
  if (v12 == v11) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = v45;
  }
  if (v42 != v46)
  {
    while (*(double *)(v42 + 24) > 0.11)
    {
      v42 += 56;
      if (v42 - v41 == 4088)
      {
        unint64_t v47 = v40[1];
        ++v40;
        unint64_t v41 = v47;
        unint64_t v42 = v47;
      }
      if (v42 == v46) {
        goto LABEL_37;
      }
    }
LABEL_38:
    BOOL v48 = 0;
    goto LABEL_39;
  }
LABEL_37:
  BOOL v48 = a2[3] > 0.11;
LABEL_39:
  double v49 = v29 - v35;
  double v50 = *(double *)(*(void *)(v11 + 8 * ((v4 + v8 - 1) / 0x49)) + 56 * ((v4 + v8 - 1) % 0x49) + 48);
  double v51 = 0.0;
  if (v50 > 0.0) {
    double v51 = (a2[6] - v50) / v50;
  }
  uint64_t v5 = 0;
  double v52 = v49 / v35;
  if (a3 != 1 && fabs(v51) < 0.05)
  {
    double v53 = a2[4];
    BOOL v54 = v53 > 4.0;
    if (v52 >= -0.009) {
      BOOL v54 = 0;
    }
    uint64_t v5 = v54 && v34 || v53 > 3.1 && v48;
  }
  if (qword_102419230 != -1) {
    dispatch_once(&qword_102419230, &stru_10230DBC8);
  }
  double v55 = qword_102419238;
  if (os_log_type_enabled((os_log_t)qword_102419238, OS_LOG_TYPE_INFO))
  {
    double v56 = *a2;
    uint64_t v57 = *((void *)a2 + 4);
    *(_DWORD *)long long buf = 134350592;
    double v61 = v56;
    __int16 v62 = 2050;
    uint64_t v63 = v57;
    __int16 v64 = 1026;
    int v65 = a3;
    __int16 v66 = 2050;
    double v67 = v51;
    __int16 v68 = 2050;
    double v69 = v52;
    __int16 v70 = 1026;
    BOOL v71 = v34;
    __int16 v72 = 1026;
    BOOL v73 = v48;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "startTime=%{public}.2f, grade=%{public}.2f, gradeType=%{public}d, deltaCadenceRatio=%{public}.2f, deltaHorizSpeedRatio=%{public}.2f, strictlyDecreasingHorizontalSpeed=%{public}d, allVerticalSpeedsExceeded=%{public}d", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419230 != -1) {
      dispatch_once(&qword_102419230, &stru_10230DBC8);
    }
    double v59 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPowerEstimator::isPossibleOnset(const GradeOnsetIndicatorInput, const GradeType, const std::deque<GradeOnsetIndicatorInput> &) const", "%s\n", v59);
    if (v59 != (char *)buf) {
      free(v59);
    }
  }
  return v5;
}

uint64_t sub_10108EF44(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10108F3C4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  long long v9 = *a2;
  long long v10 = a2[1];
  long long v11 = a2[2];
  *(void *)(v8 + 48) = *((void *)a2 + 6);
  *(_OWORD *)(v8 + 16) = v10;
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)unint64_t v8 = v9;
  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5] + 1;
  a1[5] = v13;
  unint64_t v14 = v12 + v13;
  uint64_t v15 = a1[1];
  uint64_t v16 = (void *)(v15 + 8 * (v14 / 0x49));
  uint64_t v17 = *v16 + 56 * (v14 % 0x49);
  if (a1[2] == v15) {
    uint64_t v17 = 0;
  }
  if (v17 == *v16) {
    uint64_t v17 = *(v16 - 1) + 4088;
  }
  return v17 - 56;
}

uint64_t sub_10108F040(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = *(void *)(a2 + 224);
  return result;
}

void sub_10108F04C(id a1)
{
  qword_102419238 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Power");
}

__n128 sub_10108F080@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    unint64_t v18 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    uint64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_10108F150(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      uint64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4088;
    }
    unint64_t v18 = *a1 + 4088;
    uint64_t v19 = a2;
  }
  sub_10108F150(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10108F150@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    long long v9 = a1;
  }
  else
  {
    long long v9 = a2;
    uint64_t v10 = *a3;
    long long v11 = a2;
    while (1)
    {
      uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)&a4[-v10] >> 3);
      if (0x6DB6DB6DB6DB6DB7 * ((v11 - a1) >> 3) < v12) {
        uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v11 - a1) >> 3);
      }
      v11 -= 56 * v12;
      a4 -= 56 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 56 * v12);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4088);
    }
    if ((char *)(*v6 + 4088) == a4)
    {
      uint64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10108F23C(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  unint64_t v7 = *(void ***)a5;
  unint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4088); ; uint64_t i = v12 + 4088)
    {
      sub_10108F2D0(a2, v8, i, v7, &v14);
      unint64_t v8 = (char *)*((void *)&v15 + 1);
      unint64_t v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_10108F2D0(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10108F2D0@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  unint64_t v7 = __src;
  if (__src == a3)
  {
    long long v9 = __src;
  }
  else
  {
    long long v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((v10 - __dst + 4088) >> 3);
      uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v7) >> 3) >= v11 ? v11 : 0x6DB6DB6DB6DB6DB7 * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 56 * v12);
      }
      v7 += 56 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      std::string __dst = v14;
    }
    __dst += 56 * v12;
    if ((char *)*(v6 - 1) + 4088 == __dst) {
      std::string __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_10108F3C4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_1000DA54C(v5, v33);
      double v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF8uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF8uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      BOOL v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      double v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      BOOL v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        double v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)double v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  double v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF8uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10108F690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10108F758(_Unwind_Exception *a1)
{
}

void sub_10108F7B4(id a1)
{
  qword_102484FE0 = [[CMPedometerTableRawSpeedToKValue alloc] initWithTestMode:0];
}

void sub_10108F9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

id sub_10108FAAC(uint64_t a1, void *a2, uint64_t a3)
{
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_10230DC70);
  }
  uint64_t v6 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    id v7 = [[*(id *)(a1 + 32) objectAtIndexedSubscript:a3] UTF8String];
    *(_DWORD *)long long buf = 136315138;
    id v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10230DC70);
    }
    id v23 = [[objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3) UTF8String];
    LODWORD(v30) = 136315138;
    *(void *)((char *)&v30 + 4) = v23;
    uint64_t v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMPedometerTableRawSpeedToKValue logBins]_block_invoke", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  id result = [*(id *)(a1 + 40) isBinaryLogging];
  if (result)
  {
    *(void *)&long long v30 = off_1022E6F58;
    int v31 = a3;
    [a2 begin];
    uint64_t v32 = v10;
    [a2 end];
    uint64_t v33 = v11;
    unsigned int v34 = [a2 state];
    [a2 valueOut];
    uint64_t v35 = v12;
    *((CFAbsoluteTime *)&v30 + 1) = Current;
    uint64_t v13 = sub_101282D9C();
    sub_10128431C(v13, (uint64_t)&v30);
    sub_10170140C(buf);
    sub_101727998((uint64_t)buf);
    v29 |= 1u;
    CFAbsoluteTime v27 = Current;
    uint64_t v14 = v28;
    *(unsigned char *)(v28 + 40) |= 8u;
    *(_DWORD *)(v14 + 32) = a3;
    uint64_t v15 = v28;
    [a2 begin];
    *(unsigned char *)(v15 + 40) |= 1u;
    *(void *)(v15 + 8) = v16;
    uint64_t v17 = v28;
    [a2 end];
    *(unsigned char *)(v17 + 40) |= 2u;
    *(void *)(v17 + 16) = v18;
    uint64_t v19 = v28;
    unsigned int v20 = [a2 state];
    *(unsigned char *)(v19 + 40) |= 0x10u;
    *(_DWORD *)(v19 + 36) = v20;
    uint64_t v21 = v28;
    [a2 valueOut];
    *(unsigned char *)(v21 + 40) |= 4u;
    *(void *)(v21 + 24) = v22;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_10230DC90);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)buf);
    }
    return (id)sub_101706914((PB::Base *)buf);
  }
  return result;
}

void sub_10108FDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_10108FE6C(id a1, void *a2)
{
}

void sub_1010901E8(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_10109021C()
{
  qword_102484FA0 = 0;
  qword_102484FA8 = 0;
  qword_102484FB0 = 0;
  uint64_t v0 = operator new(0x30uLL);
  qword_102484FA8 = (uint64_t)(v0 + 3);
  qword_102484FB0 = (uint64_t)(v0 + 3);
  _OWORD *v0 = xmmword_101DA5180;
  v0[1] = unk_101DA5190;
  v0[2] = xmmword_101DA51A0;
  qword_102484FA0 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_102484FA0, (void *)&_mh_execute_header);
  qword_102484FC0 = 0;
  qword_102484FC8 = 0;
  qword_102484FB8 = 0;
  uint64_t v1 = operator new(0xA0uLL);
  qword_102484FC8 = (uint64_t)(v1 + 10);
  void v1[6] = xmmword_101DA5210;
  v1[7] = unk_101DA5220;
  v1[8] = xmmword_101DA5230;
  v1[9] = unk_101DA5240;
  v1[2] = xmmword_101DA51D0;
  v1[3] = unk_101DA51E0;
  v1[4] = xmmword_101DA51F0;
  v1[5] = unk_101DA5200;
  _OWORD *v1 = xmmword_101DA51B0;
  v1[1] = unk_101DA51C0;
  qword_102484FB8 = (uint64_t)v1;
  qword_102484FC0 = (uint64_t)(v1 + 10);

  return __cxa_atexit((void (*)(void *))sub_10039DF6C, &qword_102484FB8, (void *)&_mh_execute_header);
}

__n128 sub_101090314(uint64_t a1, uint64_t *a2, __n128 *a3, double a4)
{
  uint64_t v6 = sub_1001F6F78(a1, a2);
  *(void *)(v6 + 96) = 0;
  *(void *)(v6 + 104) = 0;
  *(void *)(v6 + 112) = 0;
  __n128 result = *a3;
  *(__n128 *)(v6 + 96) = *a3;
  *(void *)(v6 + 112) = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  *(double *)(v6 + 120) = a4;
  return result;
}

uint64_t sub_101090368(uint64_t a1)
{
  for (uint64_t i = a1 + 16;
        ;
        [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 16) unregister:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 8) forNotification:*(unsigned int *)(i + 16)])
  {
    uint64_t i = *(void *)i;
    if (!i) {
      break;
    }
  }

  return sub_1000D7D80(a1);
}

void sub_1010903C4(uint64_t a1, void *a2)
{
  if (*a2 != a2[1]) {
    sub_1005E05AC();
  }
}

void sub_10109045C(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0x10000000000000;
  *(void *)(a1 + 48) = *a3;
  uint64_t v3 = a3[1];
  *(void *)(a1 + 56) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  operator new();
}

void sub_10109081C(_Unwind_Exception *a1)
{
  sub_1010914A0(v3, 0);
  sub_1010914A0(v2 + 1, 0);
  sub_1010914A0(v2, 0);
  uint64_t v5 = (std::__shared_weak_count *)v1[9];
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[7];
  if (v6) {
    sub_1000DB0A0(v6);
  }
  uint64_t v7 = v1[1];
  v1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  _Unwind_Resume(a1);
}

void sub_1010908C8(uint64_t a1)
{
}

void sub_1010908D0(uint64_t a1)
{
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230DD18);
  }
  unint64_t v2 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    id v3 = [[[*(id *)a1 silo] identifier] UTF8String];
    *(_DWORD *)long long buf = 136315138;
    id v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s WIFI TIMER TRIGGERED", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230DD18);
    }
    id v8 = [[[objc_msgSend(*(id *)a1, "silo") identifier] UTF8String];
    int v13 = 136315138;
    id v14 = v8;
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanner::onTimerTriggered()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (*(void *)(a1 + 64))
  {
    unint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
    v12[0] = *(uint64_t **)(a1 + 64);
    v12[1] = (uint64_t *)v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_101091B34(a1, v12);
    if (v4) {
      sub_1000DB0A0(v4);
    }
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    if (v5) {
      sub_1000DB0A0(v5);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230DD18);
    }
    uint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      id v7 = [[[*(id *)a1 silo] identifier] UTF8String];
      *(_DWORD *)long long buf = 136315138;
      id v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s WIFI SCAN SETTINGS EMPTY, TIMER RACE?", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
      id v10 = [[[objc_msgSend(*(id *)a1, "silo") identifier] UTF8String];
      int v13 = 136315138;
      id v14 = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanner::onTimerTriggered()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_101090C50(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_101090C70(uint64_t a1, int *a2, double *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230DCF8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    id v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiScanner::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230DCF8);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiScanner::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101091DB8((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101090E2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101090E50(uint64_t a1)
{
  sub_101090F00(a1);
  [*(id *)(a1 + 16) invalidate];

  sub_1010914A0((uint64_t *)(a1 + 96), 0);
  sub_1010914A0((uint64_t *)(a1 + 88), 0);
  sub_1010914A0((uint64_t *)(a1 + 80), 0);
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t sub_101090F00(uint64_t result)
{
  if (*(unsigned char *)(result + 33))
  {
    uint64_t v1 = result;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230DD18);
    }
    unint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      id v3 = [[[*(id *)v1 silo] identifier] UTF8String];
      *(_DWORD *)long long buf = 136315138;
      id v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Stop monitor for active scanning", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
      [objc_msgSend(objc_msgSend(*(id *)v1, "silo"), "identifier") UTF8String];
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanner::stop()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    *(unsigned char *)(v1 + 33) = 0;
    [*(id *)(v1 + 16) setNextFireDelay:1.79769313e308];
    sub_1010914A0((uint64_t *)(v1 + 88), 0);
    return sub_1010914A0((uint64_t *)(v1 + 80), 0);
  }
  return result;
}

uint64_t sub_101091108(uint64_t result)
{
  if (!*(unsigned char *)(result + 33))
  {
    uint64_t v1 = (id *)result;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230DD18);
    }
    unint64_t v2 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      id v3 = [[[objc_msgSend(*v1, "silo") identifier] UTF8String];
      int buf = 136315138;
      *(void *)buf_4 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s Start monitor for active scanning", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
      [objc_msgSend(objc_msgSend(*v1, "silo"), "identifier") UTF8String];
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanner::start()", "%s\n", v4);
      if (v4 != (char *)&buf) {
        free(v4);
      }
    }
    operator new();
  }
  return result;
}

void sub_101091464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (v20) {
    sub_1000DB0A0(v20);
  }
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010914A0(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101090368(result);
    operator delete();
  }
  return result;
}

void sub_1010914F0(uint64_t a1, uint64_t **a2)
{
  double Current_5 = j__CFAbsoluteTimeGetCurrent_5();
  if (*(unsigned char *)(a1 + 33))
  {
    double v5 = Current_5;
    double v6 = *((double *)*a2 + 15);
    double v7 = v6 + *(double *)(a1 + 40);
    sub_1010903C4(*(void *)(a1 + 80), *a2 + 12);
    if (v5 >= v7)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
      id v8 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        id v9 = [[[objc_msgSend(*(id *)a1, "silo") identifier] UTF8String];
        *(_DWORD *)int buf = 136315650;
        id v36 = v9;
        __int16 v37 = 2048;
        double v38 = v5;
        __int16 v39 = 2048;
        double v40 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10230DD18);
        }
        id v21 = [[[*(id *)a1 silo] identifier] UTF8String];
        int v29 = 136315650;
        id v30 = v21;
        __int16 v31 = 2048;
        double v32 = v5;
        __int16 v33 = 2048;
        double v34 = v7;
        uint64_t v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      id v10 = *a2;
      char v11 = (std::__shared_weak_count *)a2[1];
      v28[0] = v10;
      v28[1] = (uint64_t *)v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_101091B34(a1, v28);
      if (v11) {
        sub_1000DB0A0(v11);
      }
      goto LABEL_30;
    }
    [*(id *)(a1 + 16) setNextFireDelay:v7 - v5];
    if (v6 >= 1.79769313e308)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
      uint64_t v19 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        id v20 = [[[objc_msgSend(*(id *)a1, "silo") identifier] UTF8String];
        *(_DWORD *)int buf = 136315138;
        id v36 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "%s WIFI SCAN EFFECTIVELY NOT SCHEDULED", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10230DD18);
        }
        id v26 = [[[objc_msgSend(*(id *)a1, "silo") identifier] UTF8String];
        int v29 = 136315138;
        id v30 = v26;
        CFAbsoluteTime v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
LABEL_30:
      __int16 v18 = *(std::__shared_weak_count **)(a1 + 72);
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      if (!v18) {
        return;
      }
      goto LABEL_31;
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230DD18);
    }
    int v13 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      id v14 = [[[objc_msgSend(*(id *)a1, "silo") identifier] UTF8String];
      [*(id *)(a1 + 16) nextFireTime];
      *(_DWORD *)int buf = 136315394;
      id v36 = v14;
      __int16 v37 = 2048;
      double v38 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s WIFI SCAN SCHEDULED FOR %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
      id v23 = [[[*(id *)a1 silo] identifier] UTF8String];
      [*(id *)(a1 + 16) nextFireTime];
      int v29 = 136315394;
      id v30 = v23;
      __int16 v31 = 2048;
      double v32 = v24;
      unint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    uint64_t v17 = *a2;
    __int16 v16 = a2[1];
    if (v16) {
      atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
    }
    __int16 v18 = *(std::__shared_weak_count **)(a1 + 72);
    *(void *)(a1 + 64) = v17;
    *(void *)(a1 + 72) = v16;
    if (v18) {
LABEL_31:
    }
      sub_1000DB0A0(v18);
  }
  else
  {
    uint64_t v12 = *(void **)(a1 + 16);
    [v12 setNextFireDelay:1.79769313e308];
  }
}

void sub_101091B14(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

id sub_101091B34(uint64_t a1, uint64_t **a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    sub_1001F6F78((uint64_t)buf, *a2);
    id v3 = *(void **)(a1 + 24);
    sub_1001F6F78((uint64_t)v10, (uint64_t *)buf);
    id v4 = [v3 syncgetStartScanWithParameters:sub_1003C2AC8(v10)];
    if (v14 < 0) {
      operator delete(__p);
    }
    if (v11)
    {
      uint64_t v12 = v11;
      operator delete(v11);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (v19)
    {
      id v20 = v19;
      operator delete(v19);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230DD18);
    }
    double v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      id v6 = [[[*(id *)a1 silo] identifier] UTF8String];
      *(_DWORD *)int buf = 136315138;
      id v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s WIFI IS POWERED OFF - NOT ISSUING SCAN REQUEST", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
      id v8 = [[[*(id *)a1 silo] identifier] UTF8String];
      int v15 = 136315138;
      id v16 = v8;
      id v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiScanner::requestScan(std::shared_ptr<WifiScanSettings>)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return 0;
  }
  return v4;
}

void sub_101091D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_1001F6058((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101091DB8(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  int v7 = *a3;
  if (*a3 == 12 || v7 == 3)
  {
    double v9 = a4[13];
    double v10 = *(double *)(a1 + 40);
    if (v9 < v10 || *((unsigned char *)a4 + 1) != 11)
    {
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
      uint64_t v12 = qword_102419638;
      if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
      {
        id v13 = [[[*(id *)a1 silo] identifier] UTF8String];
        int v14 = *((char *)a4 + 1);
        *(_DWORD *)int buf = 136315650;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v9 < v10;
        __int16 v48 = 1024;
        LODWORD(v49) = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s WIFI IGNORING NOTIFICATION, cached=%d scantype=%d", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419630 != -1) {
          dispatch_once(&qword_102419630, &stru_10230DD18);
        }
        id v15 = [[[*(id *)a1 silo] identifier] UTF8String];
        int v16 = *((char *)a4 + 1);
        int v41 = 136315650;
        id v42 = v15;
        __int16 v43 = 1024;
        BOOL v44 = v9 < v10;
        __int16 v45 = 1024;
        LODWORD(v46) = v16;
        uint64_t v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v17);
        if (v17 != buf) {
          goto LABEL_54;
        }
      }
      return;
    }
  }
  else if (v7 == 1)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230DD18);
    }
    id v18 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      id v19 = [[[*(id *)a1 silo] identifier] UTF8String];
      int v20 = *(unsigned __int8 *)a4;
      [*(id *)(a1 + 16) nextFireTime];
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v20;
      __int16 v48 = 2048;
      uint64_t v49 = v21;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "%s WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230DD18);
      }
      id v31 = [[[*(id *)a1 silo] identifier] UTF8String];
      int v32 = *(unsigned __int8 *)a4;
      [*(id *)(a1 + 16) nextFireTime];
      int v41 = 136315650;
      id v42 = v31;
      __int16 v43 = 1024;
      BOOL v44 = v32;
      __int16 v45 = 2048;
      uint64_t v46 = v33;
      double v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v34);
      if (v34 != buf) {
        free(v34);
      }
    }
    int v22 = *(unsigned __int8 *)(a1 + 32);
    int v23 = *(unsigned __int8 *)a4;
    if (v22 != v23)
    {
      BOOL v24 = v22 != 0;
      if (*(unsigned char *)a4) {
        BOOL v25 = v22 != 0;
      }
      else {
        BOOL v25 = 1;
      }
      if (*(unsigned char *)a4) {
        BOOL v24 = 0;
      }
      if (!v24 && v25) {
        sub_101A9FFBC();
      }
    }
    *(unsigned char *)(a1 + 32) = v23;
    return;
  }
  if (*(unsigned char *)(a1 + 33))
  {
    *(CFAbsoluteTime *)(a1 + 40) = j__CFAbsoluteTimeGetCurrent_5();
    uint64_t v26 = *(void *)(a1 + 48);
    int v38 = *a3;
    __int16 v39 = a4;
    char v40 = 1;
    (*(void (**)(unsigned char *__return_ptr))(*(void *)v26 + 24))(buf);
    CFAbsoluteTime v27 = *(std::__shared_weak_count **)&buf[8];
    v37[0] = *(uint64_t **)buf;
    v37[1] = *(uint64_t **)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    sub_1010914F0(a1, v37);
    if (v27) {
      sub_1000DB0A0(v27);
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    return;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230DD18);
  }
  uint64_t v28 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_ERROR))
  {
    id v29 = [[[*(id *)a1 silo] identifier] UTF8String];
    int v30 = *a3;
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = v29;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v30;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%s WIFI GOT NOTIFICATION WHILE SCANNER NOT STARTED, type=%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230DD18);
    }
    id v35 = [[[objc_msgSend(*(id *)a1, "silo") identifier] UTF8String];
    int v36 = *a3;
    int v41 = 136315394;
    id v42 = v35;
    __int16 v43 = 1024;
    BOOL v44 = v36;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v17);
    if (v17 != buf) {
LABEL_54:
    }
      free(v17);
  }
}

void sub_101092420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (a22) {
    sub_1000DB0A0(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_10109244C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10109247C(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_1010924AC(uint64_t a1, void *a2)
{
  uint64_t result = (void *)sub_100C67674(a1, a2);
  *uint64_t result = off_10230DD48;
  result[14] = 0;
  return result;
}

void sub_1010924E8(uint64_t a1)
{
  sub_100C67870(a1);

  operator delete();
}

uint64_t sub_101092520()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)(sub_1000D2E34(0) + 48) + 16);

  return v0();
}

uint64_t sub_10109257C(uint64_t result)
{
  if (!*(void *)(result + 112))
  {
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_10230DE48);
    }
    uint64_t v1 = qword_102419258;
    if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Registering with Motion Coprocessor", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_10230DE48);
      }
      unint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLOnBodyNotifier7::startOnBodyDetection()", "%s\n", v2);
      if (v2 != (char *)buf) {
        free(v2);
      }
    }
    operator new();
  }
  return result;
}

void sub_101092770()
{
}

void sub_10109279C(int *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230DE68);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    id v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOnBodyNotifier7::onMotionCoprocessorData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230DE68);
    }
    double v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      char v11 = "";
      __int16 v12 = 2082;
      id v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOnBodyNotifier7::onMotionCoprocessorData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_101092B50(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101092950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101092970(void *result)
{
  if (result[14])
  {
    uint64_t v1 = result;
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_10230DE48);
    }
    unint64_t v2 = qword_102419258;
    if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Unregistering with Motion Coprocessor", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419250 != -1) {
        dispatch_once(&qword_102419250, &stru_10230DE48);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLOnBodyNotifier7::stopOnBodyDetection()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    uint64_t v3 = sub_1000D2E34(0);
    sub_1009D26C4(v3, 2, v1[14]);
    uint64_t result = (void *)v1[14];
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    v1[14] = 0;
  }
  return result;
}

uint64_t sub_101092B50(uint64_t a1, int *a2)
{
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_10230DE48);
  }
  id v4 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    int v6 = a2[1];
    uint64_t v7 = *((void *)a2 + 1);
    *(_DWORD *)int buf = 67109632;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "onBodyStatusData->onBodyStatus,%d,onBodyStatusData->confidence,%d,onBodyStatusData->timestamp,%f", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_10230DE48);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOnBodyNotifier7::onMotionCoprocessorData(const CLMotionCoprocessorInterface::NotificationData *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  *(_DWORD *)int buf = 0;
  return (*(uint64_t (**)(uint64_t, uint8_t *, int *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, a2, 0, 0xFFFFFFFFLL, 0);
}

void sub_101092D80(id a1)
{
  qword_102419258 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_101092DB0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_101092DE0(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  uint64_t v6 = a3[1];
  *(void *)a1 = *a3;
  *(void *)(a1 + 8) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a4[1];
  *(void *)(a1 + 16) = *a4;
  *(void *)(a1 + 24) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a5;
  *(unsigned char *)(a1 + 44) = 0;
  *(void *)(a1 + 48) = objc_alloc_init((Class)NSMutableArray);
  *(_OWORD *)(a1 + 56) = xmmword_101D2A430;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0x7FEFFFFFFFFFFFFFLL;
  return a1;
}

void sub_101092E6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  id v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101092E94(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  return a1;
}

void sub_101092EE0(uint64_t a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10230DE88);
  }
  unint64_t v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 40);
    int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
    double v5 = (*(double (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
    double v6 = (*(double (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
    double v7 = (*(double (**)(void))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32));
    double v8 = (*(double (**)(void))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32));
    double v9 = (*(double (**)(void))(**(void **)(a1 + 32) + 64))(*(void *)(a1 + 32));
    double v10 = (*(double (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
    int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32));
    int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 88))(*(void *)(a1 + 32));
    int v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 144))(*(void *)(a1 + 32));
    int v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 152))(*(void *)(a1 + 32));
    int v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 96))(*(void *)(a1 + 32));
    int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 104))(*(void *)(a1 + 32));
    v17[0] = 68292611;
    v17[1] = 0;
    __int16 v18 = 2082;
    id v19 = "";
    __int16 v20 = 2050;
    uint64_t v21 = v3;
    __int16 v22 = 1025;
    int v23 = v4;
    __int16 v24 = 2049;
    double v25 = v5;
    __int16 v26 = 2049;
    double v27 = v6;
    __int16 v28 = 2049;
    double v29 = v7;
    __int16 v30 = 2049;
    double v31 = v8;
    __int16 v32 = 2049;
    double v33 = v9;
    __int16 v34 = 2049;
    double v35 = v10;
    __int16 v36 = 1025;
    int v37 = v11;
    __int16 v38 = 1025;
    int v39 = v12;
    __int16 v40 = 1025;
    int v41 = v13;
    __int16 v42 = 1025;
    int v43 = v14;
    __int16 v44 = 1025;
    int v45 = v15;
    __int16 v46 = 1025;
    int v47 = v16;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Harvest-Settings\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"maxEvents\":%{private}d, \"minGapTime\":\"%{private}f\", \"maxGapTime\":\"%{private}f\", \"minWifiTimespan\":\"%{private}f\", \"targetCompassUpdateInterval\":\"%{private}f\", \"traceDuration\":\"%{private}f\", \"traceFuzzInterval\":\"%{private}f\", \"traceOnDiskHarvestingOnly\":%{private}d, \"maxVisionEnabledTraces\":%{private}d, \"allowInertialOdometryNotifications\":%{private}d, \"allowOutdoorServiceNotifications\":%{private}d, \"isImmediateNonVisionTraceHarvestAllowed\":%{private}d, \"maxNumSubmissionsScoredTraces\":%{private}d}", (uint8_t *)v17, 0x82u);
  }
}

void sub_1010932AC(uint64_t a1)
{
  [*(id *)(a1 + 48) removeAllObjects];
  *(double *)(a1 + 56) = (*(double (**)(void))(**(void **)a1 + 64))();
  double v2 = (*(double (**)(void))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32));
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 32) + 80))(*(void *)(a1 + 32)) & 1) == 0 && v2 > 0.0) {
    *(long double *)(a1 + 64) = fmod(*(long double *)(a1 + 56), v2);
  }
  if (*(unsigned char *)(a1 + 272)) {
    *(unsigned char *)(a1 + 272) = 0;
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
}

uint64_t sub_101093390(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  id v7 = objc_alloc_init((Class)CLPIndoorEvent);
  [v7 setType:3];
  id v8 = objc_alloc((Class)CLPLocation);
  long long v9 = *(_OWORD *)(a3 + 112);
  v33[6] = *(_OWORD *)(a3 + 96);
  v33[7] = v9;
  v34[0] = *(_OWORD *)(a3 + 128);
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)(a3 + 140);
  long long v10 = *(_OWORD *)(a3 + 48);
  v33[2] = *(_OWORD *)(a3 + 32);
  v33[3] = v10;
  long long v11 = *(_OWORD *)(a3 + 80);
  _DWORD v33[4] = *(_OWORD *)(a3 + 64);
  v33[5] = v11;
  long long v12 = *(_OWORD *)(a3 + 16);
  v33[0] = *(_OWORD *)a3;
  v33[1] = v12;
  id v13 = [v8 initWithDaemonLocation:v33];
  [v13 timestamp];
  [v13 setTimestamp:v14 - *(double *)(a1 + 64)];
  [v13 setIsFromLocationController:a4 == 0];
  [v13 setProvider:*(unsigned int *)(a3 + 96)];
  if (*(_DWORD *)(a3 + 124) != 0x7FFFFFFF) {
    [v13 setFloor:];
  }
  float v15 = *(float *)(a3 + 200);
  if (v15 != *((float *)sub_100BCE65C() + 10))
  {
    LODWORD(v16) = *(_DWORD *)(a3 + 200);
    [v13 setHorzUncSemiMaj:v16];
  }
  float v17 = *(float *)(a3 + 204);
  if (v17 != *((float *)sub_100BCE65C() + 11))
  {
    LODWORD(v18) = *(_DWORD *)(a3 + 204);
    [v13 setHorzUncSemiMin:v18];
  }
  float v19 = *(float *)(a3 + 208);
  if (v19 != *((float *)sub_100BCE65C() + 12))
  {
    LODWORD(v20) = *(_DWORD *)(a3 + 208);
    [v13 setHorzUncSemiMajAz:v20];
  }
  if (a4 == 1)
  {
    uint64_t v21 = *(void **)(a3 + 680);
    if (v21)
    {
      if (*v21 != v21[1])
      {
        id v22 = objc_alloc_init((Class)CLPSatelliteReport);
        [v22 setGps:sub_1010936C0(*(uint64_t **)(a3 + 680), 0)];
        [v22 setGlonass:sub_1010936C0(*(uint64_t **)(a3 + 680), 1)];
        [v22 setQzss:sub_1010936C0(*(uint64_t **)(a3 + 680), 4)];
        [v22 setGalileo:sub_1010936C0(*(uint64_t **)(a3 + 680), 3)];
        [v13 setSatReport:v22];
      }
    }
  }
  if ((*(_DWORD *)(a3 + 96) & 0xFFFFFFFE) == 0xA)
  {
    id v23 = objc_alloc_init((Class)CLPPipelineDiagnosticReport);
    __int16 v24 = v23;
    unsigned int v25 = *(_DWORD *)(a3 + 1184);
    if (v25 - 1 >= 3) {
      uint64_t v26 = 0;
    }
    else {
      uint64_t v26 = v25;
    }
    [v23 setYieldType:v26];
    [v24 setPrbPipelinedSaysYield:*(double *)(a3 + 1192)];
    [v24 setPrbCoarseIndoorSaysIndoor:*(double *)(a3 + 1200)];
    [v24 setPrbWifiSaysIndoor:*(double *)(a3 + 1208)];
    [v24 setPrbGpsSaysIndoor:*(double *)(a3 + 1216)];
    [v24 setPrbParticleFilterSaysYield:*(double *)(a3 + 1224)];
    [v24 setPrbOnFloorsEstimate:*(double *)(a3 + 1232)];
    for (uint64_t i = 0; i != 40; i += 8)
    {
      if (*(double *)(a3 + 1240 + i) >= 0.0) {
        [v24 addPrbOnFloorEstimate:];
      }
    }
    [v24 setPrbInlierEstimate:*(double *)(a3 + 1280)];
    [v24 setPrbLocalizerIoWrapperSaysWifiOk:*(double *)(a3 + 1288)];
    [v24 setPrbInjectionOccupancyRetryLimitOk:*(double *)(a3 + 1296)];
    [v24 setPrbInjectionGainRetryLimitOk:*(double *)(a3 + 1304)];
    unsigned int v28 = *(_DWORD *)(a3 + 1312);
    if (v28 - 1 >= 4) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v28;
    }
    [v24 setPfYieldStatusBeforeCalculatePose:v29];
    unsigned int v30 = *(_DWORD *)(a3 + 1316);
    if (v30 - 1 >= 4) {
      uint64_t v31 = 0;
    }
    else {
      uint64_t v31 = v30;
    }
    [v24 setYieldStatusBeforeCalculatePose:v31];
    [v13 setPipelineDiagnosticReport:v24];
  }
  [v7 setLocation:v13];
  [*(id *)(a1 + 48) addObject:v7];
  return sub_1000E6840(a1);
}

id sub_1010936C0(uint64_t *a1, int a2)
{
  if (a1[1] == *a1) {
    return 0;
  }
  id v4 = objc_alloc_init((Class)CLPSatelliteInfo);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 != v6)
  {
    do
    {
      if (*(_DWORD *)v5 == a2)
      {
        uint64_t v7 = (int)(float)(*(float *)(v5 + 16) * 10.0);
        uint64_t v8 = (int)(float)(*(float *)(v5 + 12) * 10.0);
        uint64_t v9 = (int)(float)(*(float *)(v5 + 8) * 10.0);
        [v4 addSatIds:*(unsigned int *)(v5 + 4)];
        [v4 addCnos:v7];
        [v4 addAzimuths:v8];
        [v4 addElevations:v9];
        [v4 addIsUsedInFixes:*(unsigned __int8 *)(v5 + 24)];
      }
      v5 += 28;
    }
    while (v5 != v6);
  }
  return v4;
}

uint64_t sub_1010937B4(uint64_t result, _DWORD *a2, uint64_t a3)
{
  if (*a2 == 3)
  {
    uint64_t v4 = result;
    id v5 = objc_alloc_init((Class)CLPIndoorEvent);
    [v5 setType:4];
    [v5 setMotionActivity:objc_alloc_init((Class)CLPIndoorMotionActivity)];
    [objc_msgSend(v5, "motionActivity") setTimestamp:(*(double (**)(void))(**(void **)v4 + 64))() - *(double *)(v4 + 64)];
    id v6 = objc_alloc((Class)CLPMotionActivity);
    long long v7 = *(_OWORD *)(a3 + 112);
    v11[6] = *(_OWORD *)(a3 + 96);
    void v11[7] = v7;
    uint64_t v12 = *(void *)(a3 + 128);
    long long v8 = *(_OWORD *)(a3 + 48);
    id v11[2] = *(_OWORD *)(a3 + 32);
    v11[3] = v8;
    long long v9 = *(_OWORD *)(a3 + 80);
    void v11[4] = *(_OWORD *)(a3 + 64);
    v11[5] = v9;
    long long v10 = *(_OWORD *)(a3 + 16);
    v11[0] = *(_OWORD *)a3;
    v11[1] = v10;
    [objc_msgSend(v5, "motionActivity") setMotionActivity:[v6 initCLMotionActivity:v11]];
    [*(id *)(v4 + 48) addObject:v5];
    return sub_1000E6840(v4);
  }
  return result;
}

void sub_1010938DC(void *a1)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_10230DE88);
  }
  double v2 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *((unsigned int *)a1 + 10);
    int v7 = 68289282;
    int v8 = 0;
    __int16 v9 = 2082;
    long long v10 = "";
    __int16 v11 = 2050;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"trace starting, subscribing to trace notifications\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v7, 0x1Cu);
  }
  if (*((unsigned char *)a1 + 44))
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10230DE88);
    }
    uint64_t v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *((unsigned int *)a1 + 10);
      int v7 = 68289282;
      int v8 = 0;
      __int16 v9 = 2082;
      long long v10 = "";
      __int16 v11 = 2050;
      uint64_t v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning: unexpectedly already registered for trace notifications\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  else
  {
    (*(void (**)(void, void, uint64_t))(*(void *)*a1 + 24))(*a1, *((unsigned int *)a1 + 10), 2);
    (*(void (**)(void, void, uint64_t))(*(void *)*a1 + 24))(*a1, *((unsigned int *)a1 + 10), 8);
    uint64_t v6 = a1[2];
    int v7 = 0;
    (*(void (**)(uint64_t, int *))(*(void *)v6 + 48))(v6, &v7);
    (*(void (**)(void, uint64_t))(*(void *)a1[2] + 64))(a1[2], 30);
    (*(void (**)(void, void))(*(void *)a1[2] + 80))(a1[2], 0);
    if ((*(unsigned int (**)(void))(*(void *)a1[4] + 144))(a1[4])) {
      (*(void (**)(void, double))(*(void *)a1[2] + 96))(a1[2], 1.0);
    }
    if ((*(unsigned int (**)(void))(*(void *)a1[4] + 152))(a1[4])) {
      (*(void (**)(void))(*(void *)a1[2] + 112))(a1[2]);
    }
    *((unsigned char *)a1 + 44) = 1;
  }
}

void sub_101093C08(double *a1)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  (*(void (**)(void, uint64_t *, uint64_t *))(**(void **)a1 + 240))(*(void *)a1, &v19, &v22);
  uint64_t v3 = v19;
  uint64_t v4 = v20;
  if (v19 != v20)
  {
    *(void *)&long long v2 = 68289795;
    long long v16 = v2;
    do
    {
      if (*(_DWORD *)(v3 + 36) == 2)
      {
        id v5 = objc_alloc_init((Class)CLPIndoorEvent);
        [v5 setType:6];
        [v5 setWifiScan:objc_alloc_init((Class)CLPIndoorWifiScan)];
        [objc_msgSend(v5, "wifiScan") setTimestamp:*(double *)(v3 + 56) - a1[8]];
        v18.__r_.__value_.__r.__words[0] = *(void *)v3;
        sub_10006DE8C((std::string *)__p);
        if (__p[23] >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = *(unsigned char **)__p;
        }
        [objc_msgSend(v5, "wifiScan") setMac:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6, v16, v17)];
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        [objc_msgSend(v5, "wifiScan") setChannel:*(unsigned int *)(v3 + 40)];
        if (*(char *)(v3 + 31) < 0)
        {
          sub_1000DC48C(__p, *(void **)(v3 + 8), *(void *)(v3 + 16));
        }
        else
        {
          long long v7 = *(_OWORD *)(v3 + 8);
          *(void *)&__p[16] = *(void *)(v3 + 24);
          *(_OWORD *)std::string __p = v7;
        }
        uint64_t v12 = __p[23];
        uint64_t v13 = *(void *)&__p[8];
        id v14 = [v5 wifiScan];
        if ((v12 & 0x80u) == 0) {
          uint64_t v15 = v12;
        }
        else {
          uint64_t v15 = v13;
        }
        [v14 setHidden:v15 == 0];
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
        [objc_msgSend(v5, "wifiScan") setRssi:*(unsigned int *)(v3 + 32)];
        [objc_msgSend(v5, "wifiScan") setAge:*(double *)(v3 + 48)];
        [*((id *)a1 + 6) addObject:v5];
      }
      else
      {
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_10230DE88);
        }
        int v8 = qword_102419568;
        if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v9 = *((unsigned int *)a1 + 10);
          std::string::size_type v17 = *(void *)v3;
          sub_10006DE8C(&v18);
          long long v10 = &v18;
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
          }
          int v11 = *(_DWORD *)(v3 + 36);
          *(void *)std::string __p = v16;
          *(_WORD *)&__p[8] = 2082;
          *(void *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2050;
          *(void *)&__p[20] = v9;
          __int16 v24 = 2081;
          unsigned int v25 = v10;
          __int16 v26 = 1025;
          int v27 = v11;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"not an infrastructure ap- ignoring\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"macAddress\":%{private, location:escape_only}s, \"mode\":%{private}d}", __p, 0x2Cu);
          if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v18.__r_.__value_.__l.__data_);
          }
        }
      }
      v3 += 88;
    }
    while (v3 != v4);
  }
  sub_1000E6840((uint64_t)a1);
  *(void *)std::string __p = &v19;
  sub_1000D7F78((void ***)__p);
}

void sub_101093F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::string __p = &a15;
  sub_1000D7F78((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_101093F94(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)a2 - *(double *)(a1 + 72);
  if (v4 >= (*(double (**)(void))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32)))
  {
    *(void *)(a1 + 72) = *(void *)a2;
    double v5 = (*(double (**)(void))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16));
    id v6 = objc_alloc_init((Class)CLPIndoorEvent);
    [v6 setType:1];
    [v6 setCmAttitude:objc_alloc_init((Class)CLPIndoorCMAttitude)];
    [objc_msgSend(v6, "cmAttitude") setTimestamp:v5 - *(double *)(a1 + 64)];
    LODWORD(v5) = *(_DWORD *)(a2 + 40);
    id v7 = [v6 cmAttitude];
    LODWORD(v8) = LODWORD(v5);
    [v7 setMagneticAccuracy:v8];
    [objc_msgSend(objc_msgSend(v6, "cmAttitude"), "setMagneticCalibration":*(unsigned int *)(a2 + 44)];
    [objc_msgSend(v6, "cmAttitude") setQuaternion:objc_alloc_init((Class)CLPQuaternion)];
    if (*(double *)(a2 + 64) < 0.0) {
      double v9 = -1.0;
    }
    else {
      double v9 = 1.0;
    }
    float v10 = *(double *)(a2 + 72) * v9;
    id v11 = [[objc_msgSend(v6, "cmAttitude") quaternion];
    *(float *)&double v12 = v10;
    [v11 setX:v12];
    float v13 = v9 * *(double *)(a2 + 80);
    id v14 = [[[v6 cmAttitude] quaternion];
    *(float *)&double v15 = v13;
    [v14 setY:v15];
    float v16 = v9 * *(double *)(a2 + 88);
    id v17 = [objc_msgSend(v6, "cmAttitude") quaternion];
    *(float *)&double v18 = v16;
    [v17 setZ:v18];
    [*(id *)(a1 + 48) addObject:v6];
    sub_1000E6840(a1);
  }
}

void sub_101094178(uint64_t a1, _DWORD *a2, double *a3)
{
  if (*a2 == 2)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10230DE88);
    }
    double v4 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Got kNotificationPedometerEvent but we didn't register for it", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 == -1) {
        goto LABEL_24;
      }
      goto LABEL_26;
    }
  }
  else if (*a2 == 1)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10230DE88);
    }
    uint64_t v3 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Got kNotificationExtendedStepCountUpdate but we didn't register for it", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 == -1)
      {
LABEL_24:
        id v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLHarvestDataTrace::saveStepCountInCacheIfNecessary(const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
        return;
      }
LABEL_26:
      dispatch_once(&qword_102419560, &stru_10230DE88);
      goto LABEL_24;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 272))
    {
      long long v7 = *(_OWORD *)a3;
      long long v8 = *((_OWORD *)a3 + 2);
      *(_OWORD *)(a1 + 112) = *((_OWORD *)a3 + 1);
      *(_OWORD *)(a1 + 128) = v8;
      *(_OWORD *)(a1 + 96) = v7;
      long long v9 = *((_OWORD *)a3 + 3);
      long long v10 = *((_OWORD *)a3 + 4);
      long long v11 = *((_OWORD *)a3 + 6);
      *(_OWORD *)(a1 + 176) = *((_OWORD *)a3 + 5);
      *(_OWORD *)(a1 + 192) = v11;
      *(_OWORD *)(a1 + 144) = v9;
      *(_OWORD *)(a1 + 160) = v10;
      long long v12 = *((_OWORD *)a3 + 7);
      long long v13 = *((_OWORD *)a3 + 8);
      long long v14 = *((_OWORD *)a3 + 10);
      *(_OWORD *)(a1 + 240) = *((_OWORD *)a3 + 9);
      *(_OWORD *)(a1 + 256) = v14;
      *(_OWORD *)(a1 + 208) = v12;
      *(_OWORD *)(a1 + 224) = v13;
      *(unsigned char *)(a1 + 272) = 1;
    }
    id v15 = objc_alloc_init((Class)CLPIndoorEvent);
    [v15 setType:2];
    [v15 setCmPedometer:objc_alloc_init((Class)CLPIndoorCMPedometer)];
    [objc_msgSend(v15, "cmPedometer") setTimestamp:a3[1] - *(double *)(a1 + 64)];
    float v16 = a3[4] - *(double *)(a1 + 128);
    id v17 = [v15 cmPedometer];
    *(float *)&double v18 = v16;
    [v17 setDistance:v18];
    [objc_msgSend(v15, "cmPedometer") setNumberOfSteps:(*((_DWORD *)a3 + 6) - *(_DWORD *)(a1 + 120))];
    [objc_msgSend(v15, "cmPedometer") setFloorsAscended:((*((_DWORD *)a3 + 16) - *(_DWORD *)(a1 + 160)))]
    [objc_msgSend(v15, "cmPedometer") setFloorsDescended:((*((_DWORD *)a3 + 17) - *(_DWORD *)(a1 + 164)))]
    float v19 = a3[11] - *(double *)(a1 + 184);
    id v20 = [v15 cmPedometer];
    *(float *)&double v21 = v19;
    [v20 setActiveTime:v21];
    double v22 = a3[2];
    if (v22 > 0.0) {
      [objc_msgSend(v15, "cmPedometer") setFirstStepTime:v22 - *(double *)(a1 + 64)];
    }
    [*(id *)(a1 + 48) addObject:v15];
    sub_1000E6840(a1);
  }
}

void sub_1010945A0(uint64_t a1, void *a2)
{
  [a2 timestamp];
  double v5 = v4 - *(double *)(a1 + 80);
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 16) + 128))(v13);
  double v6 = *(double *)&v13[10];
  sub_1000D7D80((uint64_t)&v16);
  sub_1000D7D80((uint64_t)&v15);
  sub_1000D7D80((uint64_t)&v14);
  if (v5 >= v6)
  {
    [a2 timestamp];
    *(void *)(a1 + 80) = v7;
    id v8 = objc_alloc_init((Class)CLPIndoorEvent);
    [v8 setType:8];
    sub_100B66FE4((uint64_t)v13);
    sub_100864CF0(a2, (uint64_t)v13);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
    [v8 setVioEstimation:[objc_alloc((Class)CLPLOGENTRYVISIONVIOEstimation) initWithData:+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", __p, 0)]];
    [objc_msgSend(objc_msgSend(objc_msgSend(v8, "vioEstimation"), "timestamp"), "cfAbsoluteTimeS");
    [objc_msgSend(objc_msgSend(objc_msgSend(v8, "vioEstimation"), "timestamp"), "setCfAbsoluteTimeS:", v9 - *(double *)(a1 + 64)];
    [objc_msgSend(objc_msgSend(objc_msgSend(v8, "vioEstimation"), "originTimestamp"), "cfAbsoluteTimeS");
    [objc_msgSend(objc_msgSend(objc_msgSend(v8, "vioEstimation"), "originTimestamp"), "setCfAbsoluteTimeS:", v10 - *(double *)(a1 + 64)];
    [*(id *)(a1 + 48) addObject:v8];
    sub_1000E6840(a1);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    sub_100B6B85C((wireless_diagnostics::google::protobuf::MessageLite *)v13);
  }
}

void sub_101094768(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100B6B85C((wireless_diagnostics::google::protobuf::MessageLite *)&a16);
  _Unwind_Resume(a1);
}

void sub_10109478C(uint64_t a1, void *a2, int a3)
{
  id v6 = objc_alloc_init((Class)CLPIndoorEvent);
  [v6 setType:9];
  [a2 timestamp:sub_100B6715C((uint64_t)v23)];
  double v8 = v7;
  double v9 = *(double *)(a1 + 88);
  id v10 = [a2 debugInfo];
  double v11 = (*(double (**)(void))(**(void **)(a1 + 32) + 112))(*(void *)(a1 + 32));
  double v12 = v8 - v9;
  BOOL v13 = v12 >= v11 || v9 < 0.0;
  if (a3 && v10 && v13)
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10230DE88);
    }
    uint64_t v14 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Crowdsourced debug info stored in harvest", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10230DE88);
      }
      LOWORD(v24) = 0;
      double v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHarvestDataTrace::saveVLLocalizationResultInCacheIfNecessary(const _CLVLLocalizationResult *const, BOOL)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    sub_10086736C(a2, (uint64_t)v23);
    [a2 timestamp];
    *(void *)(a1 + 88) = v15;
  }
  else
  {
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_10230DE88);
    }
    uint64_t v16 = qword_102419568;
    if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = a3;
      LOWORD(v31) = 1026;
      *(_DWORD *)((char *)&v31 + 2) = v10 != 0;
      HIWORD(v31) = 1026;
      LODWORD(v32) = v12 >= v11;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Crowdsourced debug info not stored in harvest, ehl, %{public}d, %{public}d, %{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_10230DE88);
      }
      int v24 = 67240704;
      int v25 = a3;
      __int16 v26 = 1026;
      BOOL v27 = v10 != 0;
      __int16 v28 = 1026;
      BOOL v29 = v12 >= v11;
      double v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHarvestDataTrace::saveVLLocalizationResultInCacheIfNecessary(const _CLVLLocalizationResult *const, BOOL)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    sub_10086646C(a2, (uint64_t)v23);
  }
  *(void *)int buf = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  wireless_diagnostics::google::protobuf::MessageLite::SerializeToString();
  id v17 = objc_alloc((Class)CLPLOGENTRYVISIONVLLocalizationResult);
  if (v32 >= 0) {
    double v18 = buf;
  }
  else {
    double v18 = *(uint8_t **)buf;
  }
  if (v32 >= 0) {
    uint64_t v19 = HIBYTE(v32);
  }
  else {
    uint64_t v19 = v31;
  }
  [v6 setVlLocalizationResult:[v17 initWithData:+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v18, v19)]];
  [objc_msgSend(objc_msgSend(objc_msgSend(v6, "vlLocalizationResult"), "timestamp"), "cfAbsoluteTimeS");
  [objc_msgSend(objc_msgSend(objc_msgSend(v6, "vlLocalizationResult"), "timestamp"), "setCfAbsoluteTimeS:", v20 - *(double *)(a1 + 64)];
  [*(id *)(a1 + 48) addObject:v6];
  sub_1000E6840(a1);
  if (SHIBYTE(v32) < 0) {
    operator delete(*(void **)buf);
  }
  sub_100B74AA0((wireless_diagnostics::google::protobuf::MessageLite *)v23);
}

void sub_101094C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

id sub_101094C88(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 48) enumerateObjectsUsingBlock:a2];
  uint64_t v3 = *(void **)(a1 + 48);

  return [v3 removeAllObjects];
}

void sub_101094CC8(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_101094DA8(id a1)
{
  qword_102484FF0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLPeopleDensityLocToolSilo"];
}

void sub_10109509C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1010950DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  [objc_loadWeak((id *)(a1 + 40)) onOneShotQueryResult:a3 withError:a2];
  double v4 = *(NSObject **)(*(void *)(a1 + 32) + 65);

  dispatch_group_leave(v4);
}

void sub_101095390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_1010953B0(int a1)
{
  if (a1 == 2) {
    operator new();
  }
  operator new();
}

void sub_101095420()
{
}

void sub_101097B2C(_Unwind_Exception *a1)
{
}

void sub_101097C34(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  double v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    mach_continuous_time();
    TMConvertTicksToSeconds();
    *(_DWORD *)int buf = 67109376;
    int v9 = v5;
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched location system state, %f seconds", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    mach_continuous_time();
    TMConvertTicksToSeconds();
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) setCellAvailable:*a2];
  [*(id *)(a1 + 32) setAirplaneMode:a2[3]];
  [*(id *)(a1 + 32) setPasscodeLocked:a2[2]];
  [*(id *)(a1 + 32) setWifiAvailable:a2[1]];
  [*(id *)(a1 + 32) setReachabilityStatus:*((unsigned int *)a2 + 2)];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_101097E74(uint64_t a1, uint64_t a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  double v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    mach_continuous_time();
    TMConvertTicksToSeconds();
    *(_DWORD *)int buf = 67109376;
    int v9 = v5;
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched motion activity, %f seconds", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    mach_continuous_time();
    TMConvertTicksToSeconds();
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) setMotionStateBeforeStateChange:a2];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_101098084(uint64_t a1, uint64_t a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  double v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    mach_continuous_time();
    TMConvertTicksToSeconds();
    *(_DWORD *)int buf = 67109376;
    int v9 = v5;
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics %d fetched dominant motion activity after n-1 state change, %f seconds", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    mach_continuous_time();
    TMConvertTicksToSeconds();
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) setMotionStateAfterNMinusOneStateChange:a2];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_101098294(uint64_t a1, uint64_t a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  double v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    mach_continuous_time();
    TMConvertTicksToSeconds();
    *(_DWORD *)int buf = 67109376;
    int v9 = v5;
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched dominant motion activity before n-1 state change, %f seconds", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    mach_continuous_time();
    TMConvertTicksToSeconds();
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) setMotionStateBeforeNMinusOneStateChange:a2];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1010984A4(uint64_t a1, uint64_t a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  double v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    mach_continuous_time();
    TMConvertTicksToSeconds();
    *(_DWORD *)int buf = 67109376;
    int v9 = v5;
    __int16 v10 = 2048;
    uint64_t v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched dominant motion activity after n-2 state change, %f seconds", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    mach_continuous_time();
    TMConvertTicksToSeconds();
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) setMotionStateAfterNMinusTwoStateChange:a2];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1010986B4(uint64_t a1, void *a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  double v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)(a1 + 304);
    mach_continuous_time();
    TMConvertTicksToSeconds();
    *(_DWORD *)int buf = 67109376;
    int v28 = v5;
    __int16 v29 = 2048;
    uint64_t v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#FenceMetrics request %d fetched LOI for fence, %f seconds", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    int v15 = *(_DWORD *)(a1 + 304);
    mach_continuous_time();
    TMConvertTicksToSeconds();
    int v23 = 67109376;
    int v24 = v15;
    __int16 v25 = 2048;
    uint64_t v26 = v16;
    id v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  [*(id *)(a1 + 32) setHasLoiAtFence:a2 != 0];
  [*(id *)(a1 + 32) setLoiType:-1];
  if ([*(id *)(a1 + 32) hasLoiAtFence])
  {
    [a2 uncertainty];
    [*(id *)(a1 + 32) setLoiRadius:];
    [objc_msgSend(a2, "location") latitude];
    [objc_msgSend(a2, "location") longitude];
    CLClientGetDistanceCoordinates();
    [*(id *)(a1 + 32) setLoiDistance:];
    [*(id *)(a1 + 32) setLoiType:[a2 type]];
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v7 = [a2 visits];
    id v8 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v8)
    {
      id v9 = v8;
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v7);
          }
          [objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * i), "exitDate") timeIntervalSinceDate:[objc_msgSend(*(id *)(*((void *)&v18 + 1) + 8 * i), "entryDate")]];
          if (v13 > 14400.0) {
            ++v10;
          }
        }
        id v9 = [v7 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v9);
      BOOL v14 = v10 > 9;
    }
    else
    {
      BOOL v14 = 0;
    }
    [*(id *)(a1 + 32) setHasSignificantPrior:v14];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

char *sub_101098A2C(uint64_t a1, uint64_t a2)
{
  return sub_10048AEC0((char *)(a1 + 56), (long long *)(a2 + 56));
}

void sub_101098A38(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(void *)(a1 + 288) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 271) < 0) {
    operator delete(*(void **)(a1 + 248));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 56);
    operator delete(v3);
  }
}

void sub_101098ACC(uint64_t a1)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  long long v2 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    int v3 = *(_DWORD *)(a1 + 64);
    mach_continuous_time();
    TMConvertTicksToSeconds();
    *(_DWORD *)int buf = 67109376;
    int v7 = v3;
    __int16 v8 = 2048;
    uint64_t v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#FenceMetrics group notify for request %d, %f seconds", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    mach_continuous_time();
    TMConvertTicksToSeconds();
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics extractAnalyticsFromNotification:isInternal:handler:]_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();

  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

void sub_101099C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_101099C74(const void *a1, char a2)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#FenceMetrics, _possibleFalseExitDetectionUIResponseHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void _possibleFalseExitDetectionUIResponseHandler(CFUserNotificationRef, CFOptionFlags)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if ((a2 & 3) == 1)
  {
    id v5 = [@"tap-to-radar://new" mutableCopy];
    [v5 appendString:@"?Title=Detected%20Exit%20and%20Reentry%20to%20Geofence%20Configured%20at%20Home"];
    [v5 appendString:@"&Classification=Other%20Bug"];
    [v5 appendString:@"&ComponentID=632758&ComponentName=Location%20Geofence%20&ComponentVersion=All"];
    [v5 appendString:@"&Reproducibility=I%20Didn't%20Try"];
    [v5 appendFormat:@"&Description=%@", [@"Possible false exit detected... Did you intentionally exit and reenter your home?" stringByAddingPercentEncodingWithAllowedCharacters:+[NSCharacterSet URLQueryAllowedCharacterSet](NSCharacterSet, "URLQueryAllowedCharacterSet")]];
    [+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace") openURL:+[NSURL URLWithString:](NSURL, "URLWithString:", v5) configuration:0 completionHandler:&stru_10230E088];
  }
  CFRelease(a1);
}

void sub_10109A1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
}

uint64_t sub_10109A1FC(uint64_t a1, void *a2)
{
  [a2 type];
  int v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v3();
}

void sub_10109A304(_Unwind_Exception *a1)
{
  sub_1001111C8(v1);
  sub_1001111C8((uint64_t)&STACK[0x678]);
  _Unwind_Resume(a1);
}

void sub_10109A328(uint64_t a1, int a2, uint64_t a3)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  uint64_t v6 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      int v7 = (void *)*v7;
    }
    __int16 v8 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      __int16 v8 = (void *)*v8;
    }
    *(_DWORD *)int buf = 136446979;
    uint64_t v16 = v7;
    __int16 v17 = 2081;
    if (a2) {
      CFStringRef v9 = @"YES";
    }
    else {
      CFStringRef v9 = @"NO";
    }
    long long v18 = v8;
    __int16 v19 = 2112;
    CFStringRef v20 = v9;
    __int16 v21 = 2112;
    uint64_t v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#FenceMetrics, evaluate possible false exit, fence, %{public}s/%{private}s, conditions satisfied, %@, error, %@", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    double v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics evaluatePossibleFalseExitFromNotification:]_block_invoke", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (a2)
  {
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    unint64_t v10 = qword_1024193C8;
    if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v11 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v11 = (void *)*v11;
      }
      double v12 = (void *)(a1 + 64);
      if (*(char *)(a1 + 87) < 0) {
        double v12 = (void *)*v12;
      }
      *(_DWORD *)int buf = 136446467;
      uint64_t v16 = v11;
      __int16 v17 = 2081;
      long long v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#FenceMetrics, detected possible false exit, fence, %{public}s/%{private}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193C0 != -1) {
        dispatch_once(&qword_1024193C0, &stru_10230E048);
      }
      BOOL v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLFenceStateChangeAnalytics evaluatePossibleFalseExitFromNotification:]_block_invoke", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if ((int)arc4random_uniform(0x64u) <= 2) {
      [*(id *)(a1 + 32) promptPossibleFalseExitDetectionUI];
    }
  }
}

char *sub_10109A748(uint64_t a1, uint64_t a2)
{
  return sub_10089FBB8((char *)(a1 + 40), (long long *)(a2 + 40));
}

uint64_t sub_10109A754(uint64_t a1)
{
  return sub_1001111C8(a1 + 40);
}

void sub_10109A810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_1001111C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10109A824(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 32) createMetricsDict:a2 isInternal:*(unsigned __int8 *)(a1 + 40)];
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  uint64_t v4 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = "YES";
    if (!*(unsigned char *)(a1 + 40)) {
      id v5 = "NO";
    }
    *(_DWORD *)int buf = 138412546;
    CFStringRef v9 = @"com.apple.Geofence.StateChange";
    __int16 v10 = 2080;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#FenceMetrics sending event %@, isInternal %s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics submitAllMetricsFromNotification:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [v3 enumerateKeysAndObjectsUsingBlock:&stru_10230E000];
  sub_10096317C();
  return sub_1009631C8();
}

void sub_10109AAB0(id a1, id a2, id a3, BOOL *a4)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  uint64_t v6 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138412546;
    id v9 = a2;
    __int16 v10 = 2112;
    id v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#FenceMetrics key %@ : %@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CLFenceStateChangeAnalytics submitAllMetricsFromNotification:]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

uint64_t sub_10109AC78(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_10109ACA0(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

void sub_10109ACD0(id a1, NSDictionary *a2, NSError *a3)
{
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_10230E048);
  }
  id v3 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#FenceMetrics Launched TTR for user to report potential false exit (exit, followed by quick reentry to home", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_10230E048);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void _possibleFalseExitDetectionUIResponseHandler(CFUserNotificationRef, CFOptionFlags)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void *sub_10109AE58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_10065AA18((uint64_t)v12, a3);
  sub_10065AB34((uint64_t)v11, a4);
  sub_10065AC50((uint64_t)v10, a5);
  sub_100DD5888((uint64_t)a1, a2, @"Harvest", 1, 1, (uint64_t)v12, (uint64_t)v11, (uint64_t)v10);
  sub_10065ACE8(v10);
  sub_10065ABCC(v11);
  sub_10065AAB0(v12);
  *a1 = off_10230E0B8;
  sub_1000E9354(a1 + 17);
  return a1;
}

void sub_10109AF4C(_Unwind_Exception *a1)
{
  sub_100DD5960(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10109AF9C(void *a1)
{
  *a1 = off_10230E0B8;
  sub_10013F3C4(a1 + 17);

  return sub_100DD5960((uint64_t)a1);
}

void sub_10109AFF0(void *a1)
{
  *a1 = off_10230E0B8;
  sub_10013F3C4(a1 + 17);
  sub_100DD5960((uint64_t)a1);

  operator delete();
}

uint64_t sub_10109B058(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10230E158);
  }
  long long v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    *(_DWORD *)int buf = 136446210;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,clearOutAssetData", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230E158);
    }
    [*(id *)(a1 + 16) UTF8String];
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLHarvestConfigAsset::clearOutAssetData()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1000E9354(buf);
  sub_1004CE798(a1 + 136, (uint64_t)buf);
  return sub_10013F3C4(buf);
}

void sub_10109B234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_10109B250(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_10230E158);
  }
  long long v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 16) UTF8String];
    int v4 = sub_1007E72D8(*(void **)(a1 + 128));
    int v5 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    WORD2(buf[0].__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&buf[0].__r_.__value_.__r.__words[1] + 6) = v4;
    WORD1(buf[0].__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(buf[0].__r_.__value_.__r.__words[2]) = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLConfig,%{public}s,sending kNotificationHarvestSettings for asset,compatibilityVersion,%{public}d,contentVersion,%{public}d", (uint8_t *)buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_10230E158);
    }
    id v15 = [*(id *)(a1 + 16) UTF8String];
    int v16 = sub_1007E72D8(*(void **)(a1 + 128));
    int v17 = sub_1007E7290(*(void **)(a1 + 128));
    LODWORD(v25.__r_.__value_.__l.__data_) = 136446722;
    *(std::string::size_type *)((char *)v25.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
    WORD2(v25.__r_.__value_.__r.__words[1]) = 1026;
    *(_DWORD *)((char *)&v25.__r_.__value_.__r.__words[1] + 6) = v16;
    WORD1(v25.__r_.__value_.__r.__words[2]) = 1026;
    HIDWORD(v25.__r_.__value_.__r.__words[2]) = v17;
    long long v18 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLHarvestConfigAsset::sendNotifications()", "%s\n", (const char *)v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  sub_100134750(&v25, "#CLConfig,");
  uint64_t v6 = std::string::append(&v25, (const std::string::value_type *)[*(id *)(a1 + 16) UTF8String]);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  buf[0].__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&buf[0].__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_100134750(__p, ",kNotificationHarvestSettings,");
  if ((v23 & 0x80u) == 0) {
    __int16 v8 = __p;
  }
  else {
    __int16 v8 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v9 = v23;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  __int16 v10 = std::string::append(buf, (const std::string::value_type *)v8, v9);
  id v11 = (void *)v10->__r_.__value_.__r.__words[0];
  unint64_t size = v10->__r_.__value_.__l.__size_;
  v24[0] = v10->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v24 + 3) = *(_DWORD *)((char *)&v10->__r_.__value_.__r.__words[2] + 3);
  int v13 = SHIBYTE(v10->__r_.__value_.__r.__words[2]);
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v25.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
LABEL_18:
    *(void *)&long long __dst = v11;
    *((void *)&__dst + 1) = size;
    *(_DWORD *)CFStringRef v20 = v24[0];
    *(_DWORD *)&v20[3] = *(_DWORD *)((char *)v24 + 3);
    char v21 = v13;
    goto LABEL_21;
  }
  sub_1000DC48C(&__dst, v11, size);
LABEL_21:
  BOOL v14 = (void *)sub_1000E9358(a1 + 136);
  sub_1007E7320(&__dst, v14);
  if (v21 < 0) {
    operator delete((void *)__dst);
  }
  sub_100DD8718(a1, 4, a1 + 136);
  if (v13 < 0) {
    operator delete(v11);
  }
}

void sub_10109B5AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10109B628(uint64_t a1)
{
  sub_100DD6DC0(a1, @"settings.plist", a1 + 136);
  long long v2 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 120);

  return v2(a1);
}

void sub_10109B68C(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

double sub_10109B6BC(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 8) = *a2;
  return result;
}

double sub_10109B6C8(uint64_t a1, double *a2)
{
  double result = *a2;
  *(double *)(a1 + 16) = *a2;
  return result;
}

uint64_t sub_10109B6D4(uint64_t result, void *a2)
{
  *(void *)(result + 24) |= *a2;
  return result;
}

uint64_t sub_10109B6E8(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(result + 32) = *a2;
  return result;
}

uint64_t sub_10109B6F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

uint64_t sub_10109B6FC(uint64_t result, float a2)
{
  int v2 = 24 * ((int)a2 / 24);
  if (v2 <= 32) {
    int v2 = 32;
  }
  if (v2 >= 56) {
    int v2 = 56;
  }
  *(_DWORD *)(result + 36) = v2;
  return result;
}

uint64_t sub_10109B740(uint64_t result, float a2)
{
  int v2 = 34 * ((int)a2 / 34);
  if (v2 <= 2000) {
    int v2 = 2000;
  }
  if (v2 >= 36000) {
    int v2 = 36000;
  }
  *(_DWORD *)(result + 40) = v2;
  return result;
}

uint64_t sub_10109B784(uint64_t result, float a2)
{
  if ((int)a2 <= 0) {
    int v2 = -(-(int)a2 & 0x1F);
  }
  else {
    int v2 = (int)a2 & 0x1F;
  }
  int v3 = ((int)a2 - v2) & ~(((int)a2 - v2) >> 31);
  if (v3 >= 32) {
    int v3 = 32;
  }
  *(_DWORD *)(result + 44) = v3;
  return result;
}

uint64_t sub_10109B7B4(uint64_t result, float a2)
{
  if ((int)a2 <= 0) {
    int v2 = -(-(int)a2 & 0x1F);
  }
  else {
    int v2 = (int)a2 & 0x1F;
  }
  int v3 = ((int)a2 - v2) & ~(((int)a2 - v2) >> 31);
  if (v3 >= 32) {
    int v3 = 32;
  }
  *(_DWORD *)(result + 48) = v3;
  return result;
}

uint64_t sub_10109B7E4(uint64_t result, float a2)
{
  if ((int)a2 <= 0) {
    int v2 = -(-(int)a2 & 0x1F);
  }
  else {
    int v2 = (int)a2 & 0x1F;
  }
  int v3 = ((int)a2 - v2) & ~(((int)a2 - v2) >> 31);
  if (v3 >= 32) {
    int v3 = 32;
  }
  *(_DWORD *)(result + 52) = v3;
  return result;
}

uint64_t sub_10109B814(uint64_t result, float a2)
{
  *(float *)(result + 64) = a2;
  return result;
}

uint64_t sub_10109B81C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

uint64_t sub_10109B824(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t sub_10109B82C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

void sub_10109B834(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4, unsigned char *a5)
{
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x20) != 0)
  {
    *(unsigned char *)a2 = 1;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    id v11 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 8);
      *(_DWORD *)int buf = 136315394;
      BOOL v117 = "impactCanceledBecauseOfMaxAccelNorm";
      __int16 v118 = 2048;
      uint64_t v119 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10230E228);
      }
      long long v81 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v81);
      if (v81 != (char *)buf) {
        free(v81);
      }
    }
    *a3 = 1;
    uint64_t v10 = *(void *)(a1 + 24);
    if ((v10 & 0x40) == 0)
    {
LABEL_3:
      if ((v10 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((v10 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  *(unsigned char *)a2 = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v13 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "impactCanceledBecauseOfOtherHardThresholds";
    __int16 v118 = 2048;
    uint64_t v119 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    long long v82 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v82);
    if (v82 != (char *)buf) {
      free(v82);
    }
  }
  a3[1] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x80) == 0)
  {
LABEL_4:
    if ((v10 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_55;
  }
LABEL_49:
  *(unsigned char *)a2 = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  id v15 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v16 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "impactCanceledBecauseOfMultiPeaks";
    __int16 v118 = 2048;
    uint64_t v119 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v83 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v83);
    if (v83 != (char *)buf) {
      free(v83);
    }
  }
  a3[2] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x100) == 0)
  {
LABEL_5:
    if ((v10 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_61;
  }
LABEL_55:
  *(unsigned char *)a2 = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v17 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v18 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "impactCanceledBecauseOfNaiveBayes";
    __int16 v118 = 2048;
    uint64_t v119 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v84 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v84);
    if (v84 != (char *)buf) {
      free(v84);
    }
  }
  a3[3] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x400) == 0)
  {
LABEL_6:
    if ((v10 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_67;
  }
LABEL_61:
  *(unsigned char *)a2 = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  __int16 v19 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "impactCanceledBecauseOfExistingAlert";
    __int16 v118 = 2048;
    uint64_t v119 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v85 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v85);
    if (v85 != (char *)buf) {
      free(v85);
    }
  }
  a3[4] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 2) == 0)
  {
LABEL_7:
    if ((v10 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_73;
  }
LABEL_67:
  *(unsigned char *)a2 = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  char v21 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v22 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "impactReplacedBecauseOfNewImpact";
    __int16 v118 = 2048;
    uint64_t v119 = v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v86 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v86);
    if (v86 != (char *)buf) {
      free(v86);
    }
  }
  a3[5] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x200) == 0)
  {
LABEL_8:
    if ((v10 & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_79;
  }
LABEL_73:
  *(unsigned char *)a2 = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  unsigned __int8 v23 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "impactCanceledBecauseOfCyclingImpactThresholds";
    __int16 v118 = 2048;
    uint64_t v119 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v87 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v87);
    if (v87 != (char *)buf) {
      free(v87);
    }
  }
  a3[6] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x100000) == 0)
  {
LABEL_9:
    if ((v10 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_85;
  }
LABEL_79:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  std::string v25 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v26 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfHighFrequencyFFT";
    __int16 v118 = 2048;
    uint64_t v119 = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v88 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v88);
    if (v88 != (char *)buf) {
      free(v88);
    }
  }
  *a4 = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x200000) == 0)
  {
LABEL_10:
    if ((v10 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_91;
  }
LABEL_85:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  BOOL v27 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v28 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfLowFrequencyFFT";
    __int16 v118 = 2048;
    uint64_t v119 = v28;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v89 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v89);
    if (v89 != (char *)buf) {
      free(v89);
    }
  }
  a4[1] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x400000) == 0)
  {
LABEL_11:
    if ((v10 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_97;
  }
LABEL_91:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  __int16 v29 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v30 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfDecimatedLowFrequencyFFT";
    __int16 v118 = 2048;
    uint64_t v119 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v90 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v90);
    if (v90 != (char *)buf) {
      free(v90);
    }
  }
  a4[2] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x800000) == 0)
  {
LABEL_12:
    if ((v10 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_103;
  }
LABEL_97:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  uint64_t v31 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v32 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfFFT";
    __int16 v118 = 2048;
    uint64_t v119 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v91 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v91);
    if (v91 != (char *)buf) {
      free(v91);
    }
  }
  a4[3] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v10 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_109;
  }
LABEL_103:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  double v33 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v34 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfPeaksIQR";
    __int16 v118 = 2048;
    uint64_t v119 = v34;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    unint64_t v92 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v92);
    if (v92 != (char *)buf) {
      free(v92);
    }
  }
  a4[4] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v10 & 0x4000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_115;
  }
LABEL_109:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  double v35 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v36 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfOffBody";
    __int16 v118 = 2048;
    uint64_t v119 = v36;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v93 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v93);
    if (v93 != (char *)buf) {
      free(v93);
    }
  }
  a4[5] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v10 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_121;
  }
LABEL_115:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v37 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v38 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfRepetitiveMotion";
    __int16 v118 = 2048;
    uint64_t v119 = v38;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v94 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v94);
    if (v94 != (char *)buf) {
      free(v94);
    }
  }
  a4[6] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v10 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_127;
  }
LABEL_121:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v39 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v40 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfAbsenceOfQuiessence";
    __int16 v118 = 2048;
    uint64_t v119 = v40;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v95 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v95);
    if (v95 != (char *)buf) {
      free(v95);
    }
  }
  a4[7] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v10 & 0x20000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_133;
  }
LABEL_127:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v41 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v42 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfOffWristPre";
    __int16 v118 = 2048;
    uint64_t v119 = v42;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    unint64_t v96 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v96);
    if (v96 != (char *)buf) {
      free(v96);
    }
  }
  a4[8] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x20000000) == 0)
  {
LABEL_18:
    if ((v10 & 0x40000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_139;
  }
LABEL_133:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v43 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v44 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfOffWristPost";
    __int16 v118 = 2048;
    uint64_t v119 = v44;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    unint64_t v97 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v97);
    if (v97 != (char *)buf) {
      free(v97);
    }
  }
  a4[9] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x40000000) == 0)
  {
LABEL_19:
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_145;
  }
LABEL_139:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v45 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v46 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfFeatureDisabled";
    __int16 v118 = 2048;
    uint64_t v119 = v46;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    long long v98 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v98);
    if (v98 != (char *)buf) {
      free(v98);
    }
  }
  a4[10] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x80000000) == 0)
  {
LABEL_20:
    if ((v10 & 0x100000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_151;
  }
LABEL_145:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v47 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v48 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfOnCharger";
    __int16 v118 = 2048;
    uint64_t v119 = v48;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    int v99 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v99);
    if (v99 != (char *)buf) {
      free(v99);
    }
  }
  a4[11] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x100000000) == 0)
  {
LABEL_21:
    if ((v10 & 0x200000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_157;
  }
LABEL_151:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  uint64_t v49 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v50 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfAlreadyGatedBefore";
    __int16 v118 = 2048;
    uint64_t v119 = v50;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v100 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v100);
    if (v100 != (char *)buf) {
      free(v100);
    }
  }
  a4[12] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x200000000) == 0)
  {
LABEL_22:
    if ((v10 & 0x400000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_163;
  }
LABEL_157:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  double v51 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v52 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfSimilarPeaks";
    __int16 v118 = 2048;
    uint64_t v119 = v52;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v101 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v101);
    if (v101 != (char *)buf) {
      free(v101);
    }
  }
  a4[13] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v10 & 0x800000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_169;
  }
LABEL_163:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  double v53 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v54 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfLockedNoMotionBeforeImpact";
    __int16 v118 = 2048;
    uint64_t v119 = v54;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v102 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v102);
    if (v102 != (char *)buf) {
      free(v102);
    }
  }
  a4[14] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x800000000) == 0)
  {
LABEL_24:
    if ((v10 & 0x1000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_175;
  }
LABEL_169:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  long long v55 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v56 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseOfReferee";
    __int16 v118 = 2048;
    uint64_t v119 = v56;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v103 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v103);
    if (v103 != (char *)buf) {
      free(v103);
    }
  }
  a4[15] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x1000000000) == 0)
  {
LABEL_25:
    if ((v10 & 0x2000000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_181;
  }
LABEL_175:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  uint64_t v57 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v58 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseStand";
    __int16 v118 = 2048;
    uint64_t v119 = v58;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    unint64_t v104 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v104);
    if (v104 != (char *)buf) {
      free(v104);
    }
  }
  a4[16] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x2000000000) == 0)
  {
LABEL_26:
    if ((v10 & 0x4000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_187;
  }
LABEL_181:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  double v59 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v60 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseActive";
    __int16 v118 = 2048;
    uint64_t v119 = v60;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    int v105 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v105);
    if (v105 != (char *)buf) {
      free(v105);
    }
  }
  a4[17] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x4000000000) == 0)
  {
LABEL_27:
    if ((v10 & 0x4000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_193;
  }
LABEL_187:
  *(unsigned char *)(a2 + 1) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  double v61 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v62 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "alertCanceledBecauseSteps";
    __int16 v118 = 2048;
    uint64_t v119 = v62;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    long long v106 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v106);
    if (v106 != (char *)buf) {
      free(v106);
    }
  }
  a4[18] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x4000000000000) == 0)
  {
LABEL_28:
    if ((v10 & 0x8000000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_199;
  }
LABEL_193:
  *(unsigned char *)(a2 + 2) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  uint64_t v63 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v64 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "sosCanceledBecauseUserResponse";
    __int16 v118 = 2048;
    uint64_t v119 = v64;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v107 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v107);
    if (v107 != (char *)buf) {
      free(v107);
    }
  }
  a5[5] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x8000000000000) == 0)
  {
LABEL_29:
    if ((v10 & 0x10000000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_205;
  }
LABEL_199:
  *(unsigned char *)(a2 + 2) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v65 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v66 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "sosCanceledBecauseOffWrist";
    __int16 v118 = 2048;
    uint64_t v119 = v66;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v108 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v108);
    if (v108 != (char *)buf) {
      free(v108);
    }
  }
  a5[6] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x10000000000000) == 0)
  {
LABEL_30:
    if ((v10 & 0x20000000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_211;
  }
LABEL_205:
  *(unsigned char *)(a2 + 2) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  double v67 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v68 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "sosCanceledBecauseStand";
    __int16 v118 = 2048;
    uint64_t v119 = v68;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v109 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v109);
    if (v109 != (char *)buf) {
      free(v109);
    }
  }
  a5[7] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x20000000000000) == 0)
  {
LABEL_31:
    if ((v10 & 0x40000000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_217;
  }
LABEL_211:
  *(unsigned char *)(a2 + 2) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  double v69 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v70 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "sosCanceledBecauseActive";
    __int16 v118 = 2048;
    uint64_t v119 = v70;
    _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    long long v110 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v110);
    if (v110 != (char *)buf) {
      free(v110);
    }
  }
  a5[8] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x40000000000000) == 0)
  {
LABEL_32:
    if ((v10 & 0x80000000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_223;
  }
LABEL_217:
  *(unsigned char *)(a2 + 2) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  BOOL v71 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v72 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "sosCanceledBecauseSteps";
    __int16 v118 = 2048;
    uint64_t v119 = v72;
    _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    int v111 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v111);
    if (v111 != (char *)buf) {
      free(v111);
    }
  }
  a5[9] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x80000000000000) == 0)
  {
LABEL_33:
    if ((v10 & 0x2000000000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_229;
  }
LABEL_223:
  *(unsigned char *)(a2 + 2) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  BOOL v73 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v74 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "sosCanceledBecauseAbsenceOfLongLie";
    __int16 v118 = 2048;
    uint64_t v119 = v74;
    _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v112 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v112);
    if (v112 != (char *)buf) {
      free(v112);
    }
  }
  a5[10] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x2000000000000000) == 0)
  {
LABEL_34:
    if ((v10 & 0x4000000000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_235;
  }
LABEL_229:
  *(unsigned char *)(a2 + 2) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  int v75 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v76 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "sosCallConsidered";
    __int16 v118 = 2048;
    uint64_t v119 = v76;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v113 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v113);
    if (v113 != (char *)buf) {
      free(v113);
    }
  }
  a5[11] = 1;
  uint64_t v10 = *(void *)(a1 + 24);
  if ((v10 & 0x4000000000000000) == 0)
  {
LABEL_35:
    if ((v10 & 0x8000000000000000) == 0) {
      goto LABEL_247;
    }
    goto LABEL_241;
  }
LABEL_235:
  *(unsigned char *)(a2 + 2) = 1;
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  long long v77 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v78 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 136315394;
    BOOL v117 = "sosCallScheduled";
    __int16 v118 = 2048;
    uint64_t v119 = v78;
    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    uint64_t v114 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v114);
    if (v114 != (char *)buf) {
      free(v114);
    }
  }
  a5[12] = 1;
  if ((*(void *)(a1 + 24) & 0x8000000000000000) != 0)
  {
LABEL_241:
    *(unsigned char *)(a2 + 2) = 1;
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    long long v79 = qword_1024190F8;
    if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v80 = *(void *)(a1 + 8);
      *(_DWORD *)int buf = 136315394;
      BOOL v117 = "sosCallPlaced";
      __int16 v118 = 2048;
      uint64_t v119 = v80;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting %s for impact at %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10230E228);
      }
      size_t v115 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processImpactCancelReason(ImpactContext &, ImpactCandidateEvent &, AlertCandidateEvent &, SOSCandidateEvent &) const", "%s\n", v115);
      if (v115 != (char *)buf) {
        free(v115);
      }
    }
    a5[13] = 1;
  }
LABEL_247:
  if (*(unsigned char *)(a2 + 2))
  {
    *(unsigned char *)(a2 + 1) = 1;
    *(_WORD *)(a2 + 4) = 257;
  }
  if (*(unsigned char *)(a2 + 1))
  {
    *(unsigned char *)a2 = 1;
    *(unsigned char *)(a2 + 3) = 1;
  }
  if (a5[5]) {
    *(unsigned char *)(a2 + 7) = 1;
  }
  if (!a5[11] || a5[6]) {
    *(unsigned char *)(a2 + 8) = 1;
  }
  if (a5[13] | a5[12]) {
    *(unsigned char *)(a2 + 6) = 1;
  }
}

void sub_10109F060(uint64_t a1, unsigned char *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 32);
  if (*(unsigned char *)(a1 + 32))
  {
    if (v2 == 1)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10230E228);
      }
      int v5 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        *(_DWORD *)int buf = 136315394;
        char v21 = "ResponseConfirmedActionRequested";
        __int16 v22 = 2048;
        uint64_t v23 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_10230E228);
        }
        id v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      *a2 = 1;
      int v2 = *(unsigned __int8 *)(a1 + 32);
    }
    if (v2 == 2)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10230E228);
      }
      long long v7 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v8 = *(void *)(a1 + 8);
        *(_DWORD *)int buf = 136315394;
        char v21 = "ResponseConfirmedNoActionRequested";
        __int16 v22 = 2048;
        uint64_t v23 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_10230E228);
        }
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      a2[1] = 1;
      int v2 = *(unsigned __int8 *)(a1 + 32);
    }
    if (v2 == 3)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10230E228);
      }
      std::string::size_type v9 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = *(void *)(a1 + 8);
        *(_DWORD *)int buf = 136315394;
        char v21 = "ResponseDismissed";
        __int16 v22 = 2048;
        uint64_t v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_10230E228);
        }
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      a2[2] = 1;
      int v2 = *(unsigned __int8 *)(a1 + 32);
    }
    if (v2 == 4)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10230E228);
      }
      id v11 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = *(void *)(a1 + 8);
        *(_DWORD *)int buf = 136315394;
        char v21 = "ResponseRejected";
        __int16 v22 = 2048;
        uint64_t v23 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_10230E228);
        }
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      a2[3] = 1;
      int v2 = *(unsigned __int8 *)(a1 + 32);
    }
    if (v2 == 5)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_10230E228);
      }
      int v13 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v14 = *(void *)(a1 + 8);
        *(_DWORD *)int buf = 136315394;
        char v21 = "ResponseAutomaticActionRequested";
        __int16 v22 = 2048;
        uint64_t v23 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLFallImpactMetrics: Setting isUser%s for impact at %f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190F0 != -1) {
          dispatch_once(&qword_1024190F0, &stru_10230E228);
        }
        __int16 v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLFallImpactMetrics::processUserResponse(SOSCandidateEvent &) const", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      a2[4] = 1;
    }
  }
}

void sub_10109F870(uint64_t a1)
{
  char v14 = 0;
  uint64_t v13 = 0;
  *(void *)&long long v2 = 0x8000000080000000;
  *((void *)&v2 + 1) = 0x8000000080000000;
  long long v15 = v2;
  *(_DWORD *)((char *)v12 + 3) = 0;
  v12[0] = 0;
  memset(v11, 0, 19);
  memset(v10, 0, 14);
  sub_10109B834(a1, (uint64_t)&v13, v12, v11, v10);
  int v3 = BYTE1(v13);
  if (BYTE1(v13))
  {
    int v4 = *(_DWORD *)(a1 + 72);
    int v5 = 100 * (v4 - *(_DWORD *)(a1 + 80));
    DWORD1(v15) = (int)(float)(*(float *)(a1 + 64) * 100.0);
    DWORD2(v15) = v5;
    HIDWORD(v15) = 100 * (*(_DWORD *)(a1 + 88) - v4);
  }
  int v6 = BYTE2(v13);
  if (BYTE2(v13)) {
    sub_10109F060(a1, v10);
  }
  LODWORD(v15) = (int)(*(double *)(a1 + 16) - *(double *)(a1 + 8));
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_10230E228);
  }
  long long v7 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 67109632;
    int v23 = v13;
    __int16 v24 = 1024;
    int v25 = v3;
    __int16 v26 = 1024;
    int v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CA - Events about to be created, isImpactCandidateEvent=%d, isAlertCandidateEvent=%d, isSOSCandidateEvent=%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_10230E228);
    }
    int v8 = v13;
    int v16 = 67109632;
    int v17 = v13;
    __int16 v18 = 1024;
    int v19 = v3;
    __int16 v20 = 1024;
    int v21 = v6;
    std::string::size_type v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLFallImpactMetrics::sendEventToCoreAnalytics() const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  else
  {
    int v8 = v13;
  }
  if (v8) {
    AnalyticsSendEventLazy();
  }
  if (v3) {
    AnalyticsSendEventLazy();
  }
  if (v6) {
    AnalyticsSendEventLazy();
  }
}

NSDictionary *sub_10109FC7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"isFallImpact";
  v5[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 43)];
  v4[1] = @"isFallAlert";
  v5[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 44)];
  void v4[2] = @"isSOSConsidered";
  void v5[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 45)];
  v4[3] = @"isSOSCallPlaced";
  v5[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 46)];
  void v4[4] = @"userCancelledSOS";
  v5[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 47)];
  v4[5] = @"algCancelledSOS";
  v5[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 48)];
  v4[6] = @"impactCanceledBecauseOfMaxAccelNorm";
  void v5[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 68)];
  v4[7] = @"impactCanceledBecauseOfOtherHardThresholds";
  v5[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 69)];
  v4[8] = @"impactCanceledBecauseOfMultiPeaks";
  v5[8] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 70)];
  v4[9] = @"impactCanceledBecauseOfNaiveBayes";
  v5[9] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 71)];
  v4[10] = @"impactCanceledBecauseOfExistingAlert";
  v5[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 72)];
  v4[11] = @"impactReplacedBecauseOfNewImpact";
  void v5[11] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 73)];
  v4[12] = @"impactCanceledBecauseOfCyclingImpactThresholds";
  v5[12] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 74)];
  v4[13] = @"maxAccelNorm";
  v5[13] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 36)];
  v4[14] = @"maxAbsX";
  v5[14] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 44)];
  v4[15] = @"maxAbsY";
  v5[15] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 48)];
  v4[16] = @"maxAbsZ";
  v5[16] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 52)];
  v4[17] = @"jerkVectorMagnitude";
  v5[17] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 40)];
  v4[18] = @"workoutType";
  v5[18] = +[NSNumber numberWithInteger:*(void *)(v2 + 56)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:19];
}

NSDictionary *sub_10109FF0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"isFallImpact";
  v5[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 43)];
  v4[1] = @"isFallAlert";
  v5[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 44)];
  void v4[2] = @"isSOSConsidered";
  void v5[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 45)];
  v4[3] = @"isSOSCallPlaced";
  v5[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 46)];
  void v4[4] = @"userCancelledSOS";
  v5[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 47)];
  v4[5] = @"alertCanceledBecauseOfHighFrequencyFFT";
  v5[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 68)];
  v4[6] = @"alertCanceledBecauseOfLowFrequencyFFT";
  void v5[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 69)];
  v4[7] = @"alertCanceledBecauseOfDecimatedLowFrequencyFFT";
  v5[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 70)];
  v4[8] = @"alertCanceledBecauseOfFFT";
  v5[8] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 71)];
  v4[9] = @"alertCanceledBecauseOfPeaksIQR";
  v5[9] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 72)];
  v4[10] = @"alertCanceledBecauseOfOffBody";
  v5[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 73)];
  v4[11] = @"alertCanceledBecauseOfRepetitiveMotion";
  void v5[11] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 74)];
  v4[12] = @"alertCanceledBecauseOfAbsenceOfQuiessence";
  v5[12] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 75)];
  v4[13] = @"alertCanceledBecauseOfOffWristPre";
  v5[13] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 76)];
  v4[14] = @"alertCanceledBecauseOfOffWristPost";
  v5[14] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 77)];
  v4[15] = @"alertCanceledBecauseOfFeatureDisabled";
  v5[15] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 78)];
  v4[16] = @"alertCanceledBecauseOfOnCharger";
  v5[16] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 79)];
  v4[17] = @"alertCanceledBecauseOfAlreadyGatedBefore";
  v5[17] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
  v4[18] = @"alertCanceledBecauseOfSimilarPeaks";
  v5[18] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 81)];
  void v4[19] = @"alertCanceledBecauseOfLockedNoMotionBeforeImpact";
  void v5[19] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 82)];
  v4[20] = @"alertCanceledBecauseOfReferee";
  v5[20] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 83)];
  v4[21] = @"alertCanceledBecauseStand";
  v5[21] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 84)];
  v4[22] = @"alertCanceledBecauseActive";
  v5[22] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 85)];
  v4[23] = @"alertCanceledBecauseSteps";
  v5[23] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 86)];
  v4[24] = @"workoutType";
  v5[24] = +[NSNumber numberWithInteger:*(void *)(v2 + 56)];
  v4[25] = @"eventDuration";
  v5[25] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];
  v4[26] = @"fallDistanceCentimeter";
  v5[26] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  v4[27] = @"staticTimestampBeforePeak";
  v5[27] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  v4[28] = @"staticTimestampAfterPeak";
  v5[28] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:29];
}

NSDictionary *sub_1010A02B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = @"isFallImpact";
  v5[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 43)];
  v4[1] = @"isFallAlert";
  v5[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 44)];
  void v4[2] = @"isSOSConsidered";
  void v5[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 45)];
  v4[3] = @"isSOSCallPlaced";
  v5[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 46)];
  void v4[4] = @"userCancelledSOS";
  v5[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 47)];
  v4[5] = @"sosCanceledBecauseUserResponse";
  v5[5] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 73)];
  v4[6] = @"sosCanceledBecauseOffWrist";
  void v5[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 74)];
  v4[7] = @"sosCanceledBecauseStand";
  v5[7] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 75)];
  v4[8] = @"sosCanceledBecauseActive";
  v5[8] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 76)];
  v4[9] = @"sosCanceledBecauseSteps";
  v5[9] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 77)];
  v4[10] = @"sosCanceledBecauseAbsenceOfLongLie";
  v5[10] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 78)];
  v4[11] = @"sosCallConsidered";
  void v5[11] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 79)];
  v4[12] = @"sosCallScheduled";
  v5[12] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
  v4[13] = @"sosCallPlaced";
  v5[13] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 81)];
  v4[14] = @"workoutType";
  v5[14] = +[NSNumber numberWithInteger:*(void *)(v2 + 56)];
  v4[15] = @"eventDuration";
  v5[15] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];
  v4[16] = @"fallDistanceCentimeter";
  v5[16] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  v4[17] = @"staticTimestampBeforePeak";
  v5[17] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  v4[18] = @"staticTimestampAfterPeak";
  v5[18] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 64)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:19];
}

void sub_1010A0544()
{
}

void sub_1010A0558(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

double sub_1010A0588(double *a1, double *a2, double a3)
{
  double v6 = sqrt(a1[17] * a1[17] + a1[16] * a1[16]) / 2.45;
  double v7 = sqrt(a2[17] * a2[17] + a2[16] * a2[16]) / 2.45;
  sub_100103240();
  if (sub_100119A30())
  {
    double v6 = v6 / 2.45;
    double v7 = v7 / 2.45;
  }
  if (v6 > 0.0 || (double v8 = -1.0, v7 > 0.0))
  {
    double v9 = v7 * v7 + v6 * v6 + v6 * -1.9876 * v7;
    double v10 = sqrt(v9);
    if (v9 <= 0.0) {
      double v8 = 0.0;
    }
    else {
      double v8 = v10;
    }
    double v11 = a1[14];
    if (v11 > 0.0)
    {
      double v12 = a2[14];
      if (v12 > 0.0 && (*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && a1[6] >= 0.0 && a2[6] >= 0.0)
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485058, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_102485058))
        {
          sub_101171D90((uint64_t)dbl_102485030);
          __cxa_guard_release(&qword_102485058);
        }
        double v13 = a3 * 0.5 * sqrt(v12 * v12 + v11 * v11);
        double v14 = sub_1000F1648(dbl_102485030, a1[1], a1[2], a2[1], a2[2], 0.0);
        double v15 = (a1[6] + a2[6]) * 0.5 * a3;
        double v16 = v15 + v13 * -1.5;
        if (v16 < 0.0) {
          double v16 = 0.0;
        }
        double v17 = v15 + v13 * 1.5;
        BOOL v18 = v16 < v14 && v14 < v17;
        if (v18 || v13 > v8) {
          double v8 = v13;
        }
      }
    }
    if (v8 > 0.0)
    {
      double v8 = v8 * 0.4;
      if (v8 < 0.25) {
        return 0.25;
      }
    }
  }
  return v8;
}

void sub_1010A0768(_Unwind_Exception *a1)
{
}

uint64_t sub_1010A0780(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  int v3 = (void *)(a1 + 8);
  sub_100134750(&__p, "OutdoorService");
  sub_1010FFAA4(v3);
  if (v11 < 0) {
    operator delete(__p);
  }
  sub_100134750(v8, "OutdoorService");
  sub_10140C9F0((char *)(a1 + 2960), (long long *)v8);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  sub_100134750(&v6, "OutdoorService");
  sub_1007636B8((void *)(a1 + 3064));
  if (v7 < 0) {
    operator delete(v6);
  }
  sub_101141EF0(a1 + 3136);
  *(void *)(a1 + 3192) = 0;
  sub_10134D2D8(a1 + 3520);
  int v5 = 3;
  sub_10044FD20((unsigned __int8 *)(a1 + 3784), "ForceOutdoorPredictionType", &v5, 0);
  return a1;
}

void sub_1010A0890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v20 = v18;
  sub_10134D2DC(v20);
  __int16 v22 = *(void **)(v16 + 3160);
  if (v22)
  {
    *(void *)(v16 + 3168) = v22;
    operator delete(v22);
  }
  sub_100DF2FD0(v19);
  sub_10054EAC4(v17);
  if (*(char *)(v16 + 31) < 0) {
    operator delete(*v15);
  }
  _Unwind_Resume(a1);
}

void sub_1010A0908(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1010A08F0);
}

void sub_1010A0920()
{
}

void sub_1010A0928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    JUMPOUT(0x1010A08F8);
  }
  JUMPOUT(0x1010A0900);
}

void *sub_1010A0940(void *result, uint64_t *a2, double a3, double a4)
{
  double v6 = result;
  unint64_t v7 = result[6];
  uint64_t v8 = result[3];
  uint64_t v9 = result[4];
  double v10 = (void *)(v8 + 8 * (v7 / 0x55));
  if (v9 == v8) {
    char v11 = 0;
  }
  else {
    char v11 = (long long *)(*v10 + 48 * (v7 % 0x55));
  }
  double v12 = a4 + 1.0e-13;
  while (1)
  {
    if (v9 == v8)
    {
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v13 = v6[7] + v6[6];
      unint64_t v14 = *(void *)(v8 + 8 * (v13 / 0x55)) + 48 * (v13 % 0x55);
    }
    if (v11 == (long long *)v14) {
      break;
    }
    if (*(double *)v11 <= v12 && *(double *)v11 + 1.0e-13 > a3)
    {
      unint64_t v16 = a2[1];
      if (v16 >= a2[2])
      {
        double result = (void *)sub_1010A0C74(a2, v11);
      }
      else
      {
        sub_1010A0BFC((uint64_t)a2, v11);
        double result = (void *)(v16 + 48);
      }
      a2[1] = (uint64_t)result;
    }
    v11 += 3;
    if ((long long *)((char *)v11 - *v10) == (long long *)4080)
    {
      uint64_t v17 = (long long *)v10[1];
      ++v10;
      char v11 = v17;
    }
    uint64_t v8 = v6[3];
    uint64_t v9 = v6[4];
  }
  return result;
}

void sub_1010A0A74(uint64_t a1, int *a2)
{
}

void sub_1010A0A7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 2960;
  uint64_t v4 = *a2;
  memset(v5, 0, sizeof(v5));
  sub_1000DA6E8(v5, a2[1], a2[2], 0x2E8BA2E8BA2E8BA3 * ((a2[2] - a2[1]) >> 3));
  sub_10140CA60(v3, (uint64_t)&v4, *(double *)(a1 + 3192));
  double v6 = (void **)v5;
  sub_1000D7F78(&v6);
}

void sub_1010A0B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1000D7F78((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1010A0B28(id a1)
{
  qword_1024194F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Outdoor");
}

void sub_1010A0B58(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1010A0BAC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1010A0BAC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void *sub_1010A0BFC(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  *(void *)(v3 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v3 = v4;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 24) = 0;
  double result = sub_100D69FEC((void *)(v3 + 24), *((const void **)a2 + 3), *((void *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2));
  *(void *)(a1 + 8) = v3 + 48;
  return result;
}

void sub_1010A0C6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1010A0C74(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    double v10 = (char *)sub_10014F86C(v7, v9);
  }
  else {
    double v10 = 0;
  }
  char v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  unint64_t v16 = v11;
  uint64_t v17 = &v10[48 * v9];
  long long v12 = *a2;
  *((void *)v11 + 2) = *((void *)a2 + 2);
  *(_OWORD *)char v11 = v12;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 3) = 0;
  sub_100D69FEC((void *)v11 + 3, *((const void **)a2 + 3), *((void *)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 2));
  v16 += 48;
  sub_1010A0DB0(a1, v15);
  uint64_t v13 = a1[1];
  sub_1010A0F60((uint64_t)v15);
  return v13;
}

void sub_1010A0D9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010A0F60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010A0DB0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1010A0E28((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1010A0E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  id v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = v8;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 48;
      *((void *)&v14 + 1) -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1010A0EE0((uint64_t)v11);
  return v9;
}

uint64_t sub_1010A0EE0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1010A0F18(a1);
  }
  return a1;
}

void sub_1010A0F18(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 24);
    if (v3)
    {
      *(void *)(v1 + 32) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t sub_1010A0F60(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1010A0F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 48;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

uint64_t sub_1010A10C8(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_28;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_30;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_28:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_30:
      *(_DWORD *)(a1 + 8) = v14;
    }
    else
    {
      uint64_t result = PBReaderSkipValueWithTag();
      if (!result) {
        return result;
      }
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

double sub_1010A13D4(void *a1)
{
  *a1 = 0;
  a1[1] = 0x400000000;
  *(void *)&double result = 0x1000000000;
  a1[30] = 0x1000000000;
  return result;
}

unsigned __int16 *sub_1010A13F4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)&long long v5 = a3;
  *((void *)&v5 + 1) = a2;
  double v6 = a4;
  return sub_1001886E4((unsigned __int16 *)(a1 + 240), &v5);
}

unsigned __int16 *sub_1010A1428(uint64_t a1, uint64_t a2)
{
  long long v13 = *(_OWORD *)a2;
  int v14 = *(_DWORD *)(a2 + 16);
  char v18 = 0;
  if (*(_WORD *)(a1 + 242))
  {
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    double v6 = -1.0;
    double v7 = 1.79769313e308;
    do
    {
      uint64_t v8 = sub_1010A17E0((unsigned __int16 *)(a1 + 240), v4);
      double v9 = *(double *)(a2 + 8);
      double v10 = vabdd_f64(*(double *)v8, v9);
      if (v10 < v7 && v10 < 3.0)
      {
        uint64_t v5 = *(void *)(v8 + 8);
        double v6 = *(double *)(v8 + 16);
        double v7 = v10;
      }
      ++v4;
    }
    while (v4 < *(unsigned __int16 *)(a1 + 242));
  }
  else
  {
    uint64_t v5 = 0;
    double v9 = *(double *)(a2 + 8);
    double v6 = -1.0;
  }
  uint64_t v17 = v5;
  double v11 = v9 - *(double *)a1;
  double v15 = v6;
  double v16 = v11;
  return sub_1010A1528((unsigned __int16 *)(a1 + 8), &v13);
}

unsigned __int16 *sub_1010A1528(unsigned __int16 *result, long long *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  unint64_t v4 = &result[28 * (v3 - v2)];
  long long v6 = a2[1];
  long long v5 = a2[2];
  long long v7 = *a2;
  *((void *)v4 + 7) = *((void *)a2 + 6);
  *(_OWORD *)(v4 + 4) = v7;
  *(_OWORD *)(v4 + 20) = v5;
  *(_OWORD *)(v4 + 12) = v6;
  unsigned int v8 = result[1];
  unint64_t v9 = *((unsigned int *)result + 1);
  if (v9 <= v8)
  {
    unint64_t v10 = *result + 1;
    if (v10 < v9) {
      LOWORD(v9) = 0;
    }
    *double result = v10 - v9;
  }
  else
  {
    result[1] = v8 + 1;
  }
  return result;
}

uint64_t sub_1010A15A0(uint64_t a1)
{
  if (!*(_WORD *)(a1 + 10)) {
    return 0;
  }
  unsigned __int8 v2 = 0;
  unint64_t v3 = 0;
  unint64_t v4 = (unsigned __int16 *)(a1 + 8);
  char v5 = 1;
  do
  {
    BOOL v6 = *(_DWORD *)(sub_1010A1A10(v4, v3) + 16) != 0;
    v2 |= v6;
    v5 &= v6;
    ++v3;
    unint64_t v7 = *(unsigned __int16 *)(a1 + 10);
  }
  while (v3 < v7);
  if (!*(_WORD *)(a1 + 10)) {
    return 0;
  }
  unsigned int v9 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v8 = a1 + 8;
  unint64_t v10 = v7 + v9 - 1;
  unint64_t v11 = *(unsigned int *)(v8 + 4);
  if (v10 < v11) {
    unint64_t v11 = 0;
  }
  uint64_t v12 = v8 + 56 * (v10 - v11);
  uint64_t v13 = *(void *)(v12 + 48);
  double v14 = *(double *)(v12 + 32);
  if (v7 == 2) {
    char v15 = v5;
  }
  else {
    char v15 = 0;
  }
  BOOL v16 = v14 > 0.999 && v13 == 19;
  uint64_t result = 1;
  if (!v16 && (v15 & 1) == 0) {
    return (v7 > 2) & v2;
  }
  return result;
}

BOOL sub_1010A1680(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int16 *)(a1 + 10);
  if (!*(_WORD *)(a1 + 10)) {
    return 0;
  }
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  unint64_t v4 = v1 + v3 - 1;
  unint64_t v5 = *(unsigned int *)(v2 + 4);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  uint64_t v6 = v2 + 56 * (v4 - v5);
  double v7 = *(double *)(v6 + 32);
  uint64_t v8 = *(void *)(v6 + 48);
  return v7 < 0.01 && v8 != 0;
}

uint64_t sub_1010A16D8(uint64_t a1, double *a2, unsigned __int16 *a3)
{
  double v6 = *a2;
  double v7 = *(double *)a1;
  if (*a2 < *(double *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 240) = 0;
    double v6 = *a2;
    double v7 = 0.0;
  }
  if (v6 - v7 > 9.0) {
    *(_DWORD *)(a1 + 8) = 0;
  }
  sub_1010A1428(a1, (uint64_t)a2);
  *(double *)a1 = *a2;
  uint64_t result = sub_1010A1680(a1);
  if (result)
  {
    *(_DWORD *)(a1 + 8) = 0;
  }
  else
  {
    *(_DWORD *)a3 = 0;
    uint64_t result = sub_1010A15A0(a1);
    if (result && *(_WORD *)(a1 + 10))
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t result = sub_1010A1A10((unsigned __int16 *)(a1 + 8), v9);
        if (!*(unsigned char *)(result + 48))
        {
          unint64_t v10 = (long long *)sub_1010A1A10((unsigned __int16 *)(a1 + 8), v9);
          sub_1010A1528(a3, v10);
          uint64_t result = sub_1010A1A10((unsigned __int16 *)(a1 + 8), v9);
          *(unsigned char *)(result + 48) = 1;
        }
        ++v9;
      }
      while (v9 < *(unsigned __int16 *)(a1 + 10));
    }
  }
  return result;
}

uint64_t sub_1010A17E0(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230E268);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)int buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230E268);
      }
      unint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CLSwimStrokeVoter::WorkoutClassificationEntry>::operator[](const size_t) const [T = CLSwimStrokeVoter::WorkoutClassificationEntry]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

void sub_1010A19E0(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1010A1A10(unsigned __int16 *a1, unint64_t a2)
{
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230E268);
    }
    double v7 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)int buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_10230E268);
      }
      unint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "const T &CMQueue<CLSwimStrokeVoter::BufferedStroke>::operator[](const size_t) const [T = CLSwimStrokeVoter::BufferedStroke]", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[28 * (v4 - v5) + 4];
}

uint64_t sub_1010A1C10(uint64_t a1)
{
  *(void *)a1 = off_10230E298;
  *(void *)(a1 + 8) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *(void *)(a1 + 64) = 0x408C200000000000;
  *(_DWORD *)(a1 + 72) = 0xFFFF;
  *(void *)(a1 + 84) = 0;
  *(void *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 92) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 108) = _Q0;
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_OWORD *)(a1 + 140) = _Q0;
  *(_DWORD *)(a1 + 156) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 188) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 196) = 0x7FFFFFFF;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = off_1022DE6F0;
  *(void *)(a1 + 240) = 30;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = 0;
  sub_101171D90(a1 + 320);
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  uint64_t v11 = 0;
  sub_1000C7F88(&v9);
  int v7 = sub_1000A699C(v9, "AutopauseRequiredDuration", &v11);
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v7) {
    *(void *)(a1 + 64) = v11;
  }
  return a1;
}

void sub_1010A1D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  sub_1010A3D88(v11 + 51);
  sub_1003BE294(v13);
  v11[29] = v12;
  sub_10041F48C(v11 + 33);
  _Unwind_Resume(a1);
}

void *sub_1010A1DAC(void *a1)
{
  *a1 = off_10230E298;
  sub_1010A3D88(a1 + 51);
  sub_1003BE294(a1 + 45);
  a1[29] = off_1022DE6F0;
  sub_10041F48C(a1 + 33);
  return a1;
}

void sub_1010A1E28(void *a1)
{
  sub_1010A1DAC(a1);

  operator delete();
}

void sub_1010A1E60(uint64_t a1)
{
  *(_OWORD *)(a1 + 8) = xmmword_101D1C320;
  *(_WORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 58) = 0;
  *(_DWORD *)(a1 + 72) = 0xFFFF;
  *(void *)(a1 + 84) = 0;
  *(void *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 92) = xmmword_101D1C320;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 108) = _Q0;
  *(_OWORD *)(a1 + 124) = _Q0;
  *(_OWORD *)(a1 + 140) = _Q0;
  *(_DWORD *)(a1 + 156) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 184) = 0;
  *(void *)(a1 + 188) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 196) = 0x7FFFFFFF;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  sub_1006156AC(a1 + 320);
  int v7 = *(void ***)(a1 + 368);
  uint64_t v8 = *(void *)(a1 + 376);
  *(void *)(a1 + 400) = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = *(void *)(a1 + 376);
      int v7 = (void **)(*(void *)(a1 + 368) + 8);
      *(void *)(a1 + 368) = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 51;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v11 = 102;
  }
  *(void *)(a1 + 392) = v11;
LABEL_8:
  uint64_t v12 = *(void ***)(a1 + 416);
  uint64_t v13 = *(void *)(a1 + 424);
  *(void *)(a1 + 448) = 0;
  unint64_t v14 = v13 - (void)v12;
  if (v14 >= 0x11)
  {
    do
    {
      operator delete(*v12);
      uint64_t v15 = *(void *)(a1 + 424);
      uint64_t v12 = (void **)(*(void *)(a1 + 416) + 8);
      *(void *)(a1 + 416) = v12;
      unint64_t v14 = v15 - (void)v12;
    }
    while (v14 > 0x10);
  }
  if (v14 >> 3 == 1)
  {
    uint64_t v16 = 25;
  }
  else
  {
    if (v14 >> 3 != 2) {
      return;
    }
    uint64_t v16 = 51;
  }
  *(void *)(a1 + 440) = v16;
}

uint64_t sub_1010A1FA8(unsigned int a1)
{
  if (a1 < 0xF) {
    return (0x2E1Eu >> a1) & 1;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230E2B8);
  }
  unsigned int v3 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)int buf = 67240192;
    unsigned int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unknown whether or not provider %{public}d is a candidate for autopause", buf, 8u);
  }
  BOOL v4 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230E2B8);
    }
    unint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLAutopauseCalculator::isLocationTypeSupported(CLLocationType)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
    return 0;
  }
  return result;
}

__n128 sub_1010A2178(uint64_t a1, unint64_t *a2, _DWORD *a3, int *a4)
{
  result.n128_u64[0] = *a2;
  *(void *)(a1 + 24) = *a2;
  unint64_t v5 = (__n128 *)(a1 + 24);
  int v6 = *a4;
  *(_DWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 36) = v6;
  if (*a3 > 0xBu || ((1 << *a3) & 0xC06) == 0)
  {
    __n128 result = *v5;
    *(__n128 *)(a1 + 40) = *v5;
  }
  else if (*(_DWORD *)(a1 + 48) != 2)
  {
    result.n128_u64[0] = *a2;
    *(void *)(a1 + 40) = *a2;
    int v8 = *a4;
    *(_DWORD *)(a1 + 48) = 2;
    *(_DWORD *)(a1 + 52) = v8;
  }
  return result;
}

uint64_t sub_1010A21E0(uint64_t a1, void *a2)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  int v11 = 0;
  if (!a2[5]) {
    return 0;
  }
  unint64_t v3 = 0;
  do
  {
    sub_1010A22EC(a1, *(_DWORD *)(*(void *)(a2[1] + 8 * ((v3 + a2[4]) / 0x66)) + 40 * ((v3 + a2[4]) % 0x66) + 32), (_DWORD *)&v13 + 1, &v13, (_DWORD *)&v12 + 1, &v12, &v11);
    ++v3;
  }
  while (a2[5] > v3);
  int v4 = v12;
  int v5 = HIDWORD(v12);
  int v6 = v13;
  if ((int)v13 > (HIDWORD(v13) & ~(SHIDWORD(v13) >> 31)))
  {
    int v7 = 4;
  }
  else
  {
    int v6 = HIDWORD(v13) & ~(SHIDWORD(v13) >> 31);
    int v7 = 2 * (SHIDWORD(v13) > 0);
  }
  if (SHIDWORD(v12) > v6)
  {
    int v8 = 8;
  }
  else
  {
    int v5 = v6;
    int v8 = v7;
  }
  if ((int)v12 > v5)
  {
    unsigned int v9 = 5;
  }
  else
  {
    int v4 = v5;
    unsigned int v9 = v8;
  }
  if (v11 <= v4) {
    return v9;
  }
  else {
    return 0;
  }
}

void sub_1010A22EC(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7)
{
  if (a2 > 40)
  {
    if (a2 == 56)
    {
LABEL_8:
      a3 = a6;
    }
    else
    {
      a3 = a6;
      if (a2 != 52)
      {
        a3 = a4;
        if (a2 != 41) {
LABEL_7:
        }
          a3 = a7;
      }
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
      case 2:
      case 10:
      case 11:
        break;
      case 4:
        a3 = a4;
        break;
      case 5:
        goto LABEL_8;
      case 8:
        a3 = a5;
        break;
      default:
        goto LABEL_7;
    }
  }
  ++*a3;
}

uint64_t sub_1010A2398(void *a1)
{
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v7 = 0;
  if (a1[56])
  {
    unint64_t v2 = 0;
    do
    {
      sub_1010A22EC((uint64_t)a1, *(_DWORD *)(*(void *)(a1[52] + 8 * ((v2 + a1[55]) / 0x33)) + 80 * ((v2 + a1[55]) % 0x33) + 72), (_DWORD *)&v9 + 1, &v9, (_DWORD *)&v8 + 1, &v8, &v7);
      ++v2;
    }
    while (a1[56] > v2);
  }
  uint64_t v3 = sub_1010A21E0((uint64_t)a1, a1 + 45);
  sub_1010A22EC(v3, v3, (_DWORD *)&v9 + 1, &v9, (_DWORD *)&v8 + 1, &v8, &v7);
  int v4 = HIDWORD(v9) & ~(SHIDWORD(v9) >> 31);
  unsigned int v5 = 2 * (SHIDWORD(v9) > 0);
  if ((int)v9 > v4)
  {
    int v4 = v9;
    unsigned int v5 = 4;
  }
  if (SHIDWORD(v8) > v4)
  {
    int v4 = HIDWORD(v8);
    unsigned int v5 = 8;
  }
  if ((int)v8 > v4)
  {
    int v4 = v8;
    unsigned int v5 = 5;
  }
  if (v7 <= v4) {
    return v5;
  }
  else {
    return 0;
  }
}

void sub_1010A24C8(uint64_t a1, uint64_t *a2, void *a3)
{
  *(_OWORD *)(a2 + 3) = xmmword_101D0BD20;
  *(_OWORD *)(a2 + 5) = xmmword_101D0BD20;
  uint64_t v3 = a3[5];
  *((_DWORD *)a2 + 14) = v3;
  a2[8] = 0;
  if (!v3) {
    return;
  }
  if ((int)v3 >= 1)
  {
    unsigned int v5 = 0;
    unint64_t v6 = a3[4];
    uint64_t v7 = v3;
    uint64_t v8 = v3;
    do
    {
      if (*(double *)(*(void *)(a3[1] + 8 * (v6 / 0x66)) + 40 * (v6 % 0x66) + 24) < 85.0) {
        ++v5;
      }
      ++v6;
      --v8;
    }
    while (v8);
    double v9 = (double)(int)v3;
    double v10 = (double)v5 / (double)(int)v3;
    unint64_t v11 = a3[4];
    uint64_t v12 = a3[1];
    if (v10 > 0.68)
    {
      float64x2_t v13 = *(float64x2_t *)(a2 + 1);
      double v14 = 1.79769313e308;
      double v15 = -1.79769313e308;
      double v16 = -1.79769313e308;
      double v17 = 1.79769313e308;
      while (1)
      {
        uint64_t v18 = *(void *)(v12 + 8 * (v11 / 0x66));
        if (*(double *)(v18 + 40 * (v11 % 0x66) + 24) >= 85.0) {
          break;
        }
        float64x2_t v19 = *(float64x2_t *)(v18 + 40 * (v11 % 0x66) + 8);
        float64x2_t v13 = vaddq_f64(v19, v13);
        *(float64x2_t *)(a2 + 1) = v13;
        if (v19.f64[0] > v15)
        {
          a2[4] = *(void *)&v19.f64[0];
          double v15 = v19.f64[0];
        }
        if (v19.f64[0] < v14)
        {
          a2[3] = *(void *)&v19.f64[0];
          double v14 = v19.f64[0];
        }
        v19.f64[0] = v19.f64[1];
        if (v19.f64[1] > v16)
        {
          a2[6] = *(void *)&v19.f64[1];
          double v16 = v19.f64[1];
        }
        if (v19.f64[1] >= v17) {
          goto LABEL_19;
        }
        a2[5] = *(void *)&v19.f64[1];
LABEL_20:
        ++v11;
        double v17 = v19.f64[0];
        if (!--v7) {
          goto LABEL_46;
        }
      }
      LODWORD(v3) = v3 - 1;
LABEL_19:
      v19.f64[0] = v17;
      goto LABEL_20;
    }
    double v23 = 0.0;
    uint64_t v24 = v3;
    do
    {
      double v23 = v23 + *(double *)(*(void *)(v12 + 8 * (v11 / 0x66)) + 40 * (v11 % 0x66) + 24);
      ++v11;
      --v24;
    }
    while (v24);
    unint64_t v25 = a3[4];
    double v22 = 0.0;
    double v20 = 0.0;
    double v21 = v23 / v9;
    do
    {
      double v26 = *(double *)(*(void *)(a3[1] + 8 * (v25 / 0x66)) + 40 * (v25 % 0x66) + 24) - v21;
      double v20 = v20 + v26 * v26;
      double v22 = v22 + v26;
      ++v25;
      --v7;
    }
    while (v7);
LABEL_28:
    double v27 = (double)((int)v3 - 1);
    if ((int)v3 <= 1) {
      double v27 = 1.0;
    }
    double v28 = sqrt((v20 - v22 * v22 / v9) / v27);
    double v29 = (v21 + v28) * 1.5;
    if (v29 > 300.0) {
      double v29 = 300.0;
    }
    *((double *)a2 + 8) = v29;
    if ((int)v3 >= 1)
    {
      unint64_t v30 = a3[4];
      uint64_t v31 = a3[1];
      double v32 = v21 + v28 * 3.0;
      uint64_t v33 = v3;
      double v34 = 1.79769313e308;
      double v35 = -1.79769313e308;
      float64x2_t v36 = *(float64x2_t *)(a2 + 1);
      double v37 = -1.79769313e308;
      double v38 = 1.79769313e308;
      while (1)
      {
        uint64_t v39 = *(void *)(v31 + 8 * (v30 / 0x66));
        if (*(double *)(v39 + 40 * (v30 % 0x66) + 24) > v32) {
          break;
        }
        float64x2_t v40 = *(float64x2_t *)(v39 + 40 * (v30 % 0x66) + 8);
        float64x2_t v36 = vaddq_f64(v40, v36);
        *(float64x2_t *)(a2 + 1) = v36;
        if (v40.f64[0] > v35)
        {
          a2[4] = *(void *)&v40.f64[0];
          double v35 = v40.f64[0];
        }
        if (v40.f64[0] < v34)
        {
          a2[3] = *(void *)&v40.f64[0];
          double v34 = v40.f64[0];
        }
        v40.f64[0] = v40.f64[1];
        if (v40.f64[1] > v37)
        {
          a2[6] = *(void *)&v40.f64[1];
          double v37 = v40.f64[1];
        }
        if (v40.f64[1] >= v38) {
          goto LABEL_44;
        }
        a2[5] = *(void *)&v40.f64[1];
LABEL_45:
        ++v30;
        double v38 = v40.f64[0];
        if (!--v33) {
          goto LABEL_46;
        }
      }
      LODWORD(v3) = v3 - 1;
LABEL_44:
      v40.f64[0] = v38;
      goto LABEL_45;
    }
    goto LABEL_46;
  }
  double v9 = (double)(int)v3;
  double v20 = 0.0;
  double v21 = 0.0 / (double)(int)v3;
  if (v21 <= 0.68)
  {
    double v22 = 0.0;
    goto LABEL_28;
  }
LABEL_46:
  *((_DWORD *)a2 + 14) = v3;
  *(float64x2_t *)(a2 + 1) = vdivq_f64(*(float64x2_t *)(a2 + 1), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)v3), 0));
  *((_DWORD *)a2 + 18) = sub_1010A21E0(a1, (void *)(a1 + 360));
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_10230E2B8);
  }
  int v41 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v42 = *a2;
    uint64_t v43 = a2[1];
    uint64_t v44 = a2[2];
    uint64_t v45 = a2[3];
    uint64_t v46 = a2[4];
    uint64_t v47 = a2[5];
    uint64_t v48 = a2[6];
    int v49 = *((_DWORD *)a2 + 14);
    int v50 = *((_DWORD *)a2 + 18);
    *(_DWORD *)int buf = 134220032;
    uint64_t v53 = v42;
    __int16 v54 = 2048;
    uint64_t v55 = v43;
    __int16 v56 = 2048;
    uint64_t v57 = v44;
    __int16 v58 = 2048;
    uint64_t v59 = v45;
    __int16 v60 = 2048;
    uint64_t v61 = v46;
    __int16 v62 = 2048;
    uint64_t v63 = v47;
    __int16 v64 = 2048;
    uint64_t v65 = v48;
    __int16 v66 = 1024;
    int v67 = v49;
    __int16 v68 = 1024;
    int v69 = v50;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "PKAUTOPAUSE MEAN coord: %f %f %f %f %f %f %f %d %d ", buf, 0x54u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_10230E2B8);
    }
    double v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLAutopauseCalculator::aggregation(AggregateCoord &, const std::deque<CoordAndMotion> &)", "%s\n", v51);
    if (v51 != (char *)buf) {
      free(v51);
    }
  }
}

void sub_1010A2AB8(uint64_t a1, _OWORD *a2, unsigned char *a3)
{
  long long v5 = a2[7];
  long long v116 = a2[6];
  long long v117 = v5;
  v118[0] = a2[8];
  *(_OWORD *)((char *)v118 + 12) = *(_OWORD *)((char *)a2 + 140);
  long long v6 = a2[3];
  v114[2] = a2[2];
  v114[3] = v6;
  long long v7 = a2[5];
  v115[0] = a2[4];
  v115[1] = v7;
  long long v8 = a2[1];
  v114[0] = *a2;
  v114[1] = v8;
  *a3 = 0;
  unsigned int v9 = v116;
  if (!sub_1010A1FA8(v116)) {
    return;
  }
  double v10 = sub_1004BE230();
  *(double *)((char *)v115 + 12) = v10;
  if (*(double *)(a1 + 92) > 0.0 && v10 - *(double *)(a1 + 148) > *(double *)(a1 + 64))
  {
    sub_1010A1E60(a1);
    *a3 = 1;
  }
  long long v11 = v117;
  *(_OWORD *)(a1 + 168) = v116;
  *(_OWORD *)(a1 + 184) = v11;
  *(_OWORD *)(a1 + 200) = v118[0];
  *(_OWORD *)(a1 + 212) = *(_OWORD *)((char *)v118 + 12);
  long long v12 = v114[3];
  *(_OWORD *)(a1 + 104) = v114[2];
  *(_OWORD *)(a1 + 120) = v12;
  long long v13 = v115[1];
  *(_OWORD *)(a1 + 136) = v115[0];
  *(_OWORD *)(a1 + 152) = v13;
  long long v14 = v114[1];
  *(_OWORD *)(a1 + 72) = v114[0];
  *(_OWORD *)(a1 + 88) = v14;
  if (v9 <= 9 && ((1 << v9) & 0x20E) != 0 && *(double *)((char *)&v114[2] + 12) >= 0.0)
  {
    if (*(void *)(a1 + 304))
    {
      if (v10 - *(double *)(a1 + 312) < 3.0)
      {
        sub_100B0AD90(a1 + 232, (double *)((char *)&v114[2] + 12));
        *(void *)(a1 + 312) = *(void *)((char *)v115 + 12);
        unint64_t v15 = *(void *)(a1 + 304);
        if (v15 && v15 >= *(void *)(a1 + 240) && *(double *)(a1 + 248) / (double)v15 > 6.0)
        {
          sub_1010A1E60(a1);
LABEL_57:
          *a3 = 1;
          return;
        }
        goto LABEL_16;
      }
      sub_100B0AD14((void *)(a1 + 232));
    }
    sub_100B0AD90(a1 + 232, (double *)((char *)&v114[2] + 12));
    *(void *)(a1 + 312) = *(void *)((char *)v115 + 12);
  }
LABEL_16:
  if (*(double *)(a1 + 8) < 0.0) {
    *(double *)(a1 + 8) = v10;
  }
  if (*(double *)((char *)&v114[2] + 4) > 0.0) {
    *(void *)(a1 + 16) = *(void *)((char *)&v114[1] + 12);
  }
  uint64_t v16 = sub_1010A1FA8(v116);
  if (v16)
  {
    long long v110 = *(float **)&v10;
    long long v111 = *(_OWORD *)((char *)v114 + 4);
    uint64_t v112 = *(void *)((char *)&v114[1] + 4);
    int v113 = *(_DWORD *)(a1 + 32);
    sub_1010A36F4(a1 + 360, (long long *)&v110);
    if (*(void *)(a1 + 400) >= 0x3CuLL)
    {
      double v108 = 0.0;
      int v109 = 0;
      long long v105 = 0u;
      long long v106 = 0u;
      memset(v107, 0, 28);
      sub_1010A24C8(a1, (uint64_t *)&v105, (void *)(a1 + 360));
      *(double *)&long long v105 = v10;
      sub_1010A37A0(a1 + 408, &v105);
      double v17 = *(void ***)(a1 + 368);
      uint64_t v18 = *(void *)(a1 + 376);
      *(void *)(a1 + 400) = 0;
      unint64_t v19 = v18 - (void)v17;
      if (v19 >= 0x11)
      {
        do
        {
          operator delete(*v17);
          uint64_t v20 = *(void *)(a1 + 376);
          double v17 = (void **)(*(void *)(a1 + 368) + 8);
          *(void *)(a1 + 368) = v17;
          unint64_t v19 = v20 - (void)v17;
        }
        while (v19 > 0x10);
      }
      if (v19 >> 3 == 1)
      {
        uint64_t v21 = 51;
      }
      else
      {
        if (v19 >> 3 != 2) {
          goto LABEL_29;
        }
        uint64_t v21 = 102;
      }
      *(void *)(a1 + 392) = v21;
    }
  }
LABEL_29:
  double v22 = *(double *)(a1 + 64);
  if (v10 - *(double *)(a1 + 8) <= v22) {
    return;
  }
  uint64_t v23 = *(void *)(a1 + 448);
  if (v23)
  {
    uint64_t v24 = 0;
    unint64_t v25 = *(void *)(a1 + 440);
    uint64_t v26 = *(void *)(a1 + 416);
    while (v10 - *(double *)(*(void *)(v26 + 8 * ((v25 + v24) / 0x33)) + 80 * ((v25 + v24) % 0x33)) <= v22)
    {
      if (v23 == ++v24)
      {
        uint64_t v24 = *(void *)(a1 + 448);
        break;
      }
    }
    double v27 = (void *)(v26 + 8 * (v25 / 0x33));
    if (*(void *)(a1 + 424) == v26) {
      unint64_t v28 = 0;
    }
    else {
      unint64_t v28 = *v27 + 80 * (v25 % 0x33);
    }
    *(void *)&long long v105 = v27;
    *((void *)&v105 + 1) = v28;
    sub_1008106FC(&v105, v24);
    unint64_t v29 = *(void *)(a1 + 440) + *(void *)(a1 + 448);
    uint64_t v30 = *(void *)(a1 + 416);
    uint64_t v31 = (void *)(v30 + 8 * (v29 / 0x33));
    if (*(void *)(a1 + 424) == v30) {
      double v32 = 0;
    }
    else {
      double v32 = (char *)(*v31 + 80 * (v29 % 0x33));
    }
    uint64_t v16 = sub_1010A3850((void *)(a1 + 408), (void *)v105, *((char **)&v105 + 1), v31, v32);
  }
  uint64_t v33 = *(void *)(a1 + 400);
  if (v33)
  {
    uint64_t v34 = 0;
    unint64_t v35 = *(void *)(a1 + 392);
    uint64_t v36 = *(void *)(a1 + 368);
    while (v10 - *(double *)(*(void *)(v36 + 8 * ((v35 + v34) / 0x66)) + 40 * ((v35 + v34) % 0x66)) <= *(double *)(a1 + 64))
    {
      if (v33 == ++v34)
      {
        uint64_t v34 = *(void *)(a1 + 400);
        break;
      }
    }
    double v37 = (void *)(v36 + 8 * (v35 / 0x66));
    if (*(void *)(a1 + 376) == v36) {
      unint64_t v38 = 0;
    }
    else {
      unint64_t v38 = *v37 + 40 * (v35 % 0x66);
    }
    *(void *)&long long v105 = v37;
    *((void *)&v105 + 1) = v38;
    sub_100176BF4(&v105, v34);
    unint64_t v39 = *(void *)(a1 + 392) + *(void *)(a1 + 400);
    uint64_t v40 = *(void *)(a1 + 368);
    int v41 = (void *)(v40 + 8 * (v39 / 0x66));
    if (*(void *)(a1 + 376) == v40) {
      uint64_t v42 = 0;
    }
    else {
      uint64_t v42 = (char *)(*v41 + 40 * (v39 % 0x66));
    }
    uint64_t v16 = sub_1010A3AD4((void *)(a1 + 360), (void *)v105, *((char **)&v105 + 1), v41, v42);
  }
  if (*(_DWORD *)(a1 + 48) == 2)
  {
    double v43 = *(double *)(a1 + 64);
    if (v10 - *(double *)(a1 + 40) > v43)
    {
      *(unsigned char *)(a1 + 58) = 1;
      *(_WORD *)(a1 + 56) = 257;
      *(double *)(a1 + 8) = v10 - v43 + 60.0;
      goto LABEL_57;
    }
  }
  double v44 = 0.0;
  if (!*(void *)(a1 + 448))
  {
    int v52 = 0;
    BOOL v49 = 1;
    BOOL v50 = 1;
    goto LABEL_76;
  }
  unint64_t v45 = 0;
  LODWORD(v105) = 0;
  LODWORD(v110) = 0;
  uint64_t v104 = 0;
  int v103 = 0;
  do
  {
    sub_1010A22EC(v16, *(_DWORD *)(*(void *)(*(void *)(a1 + 416) + 8 * ((v45 + *(void *)(a1 + 440)) / 0x33))+ 80 * ((v45 + *(void *)(a1 + 440)) % 0x33)+ 72), &v105, &v110, (_DWORD *)&v104 + 1, &v104, &v103);
    ++v45;
    unint64_t v46 = *(void *)(a1 + 448);
  }
  while (v46 > v45);
  double v47 = (double)(HIDWORD(v104) + (int)v110) / (double)v46 * 100.0;
  double v48 = (double)(int)v104 / (double)v46 * 100.0;
  BOOL v49 = v48 <= 25.0;
  if (v48 > 25.0)
  {
    *(unsigned char *)(a1 + 57) = 0;
    *a3 = 1;
  }
  BOOL v50 = v47 <= 25.0;
  if (v47 > 25.0)
  {
    *(unsigned char *)(a1 + 56) = 0;
    *a3 = 1;
  }
  int v51 = *(_DWORD *)(*(void *)(*(void *)(a1 + 416) + 8 * (*(void *)(a1 + 440) / 0x33uLL))
                  + 80 * (*(void *)(a1 + 440) % 0x33uLL)
                  + 72);
  if (v51 != 8)
  {
    if (v51 == 5)
    {
      BOOL v49 = 0;
      *(unsigned char *)(a1 + 57) = 0;
      goto LABEL_71;
    }
    if (v51 != 4) {
      goto LABEL_72;
    }
  }
  BOOL v50 = 0;
  *(unsigned char *)(a1 + 56) = 0;
LABEL_71:
  *a3 = 1;
LABEL_72:
  int v52 = 0;
  if (v46)
  {
    unint64_t v53 = *(void *)(a1 + 440);
    double v54 = 0.0;
    double v44 = 0.0;
    do
    {
      unint64_t v55 = *(void *)(*(void *)(a1 + 416) + 8 * (v53 / 0x33)) + 80 * (v53 % 0x33);
      int v56 = *(_DWORD *)(v55 + 56);
      double v54 = v54 + *(double *)(v55 + 8) * (double)v56;
      double v44 = v44 + *(double *)(v55 + 16) * (double)v56;
      v52 += v56;
      ++v53;
      --v46;
    }
    while (v46);
    goto LABEL_77;
  }
LABEL_76:
  double v54 = 0.0;
LABEL_77:
  double v108 = 0.0;
  int v109 = 0;
  long long v105 = 0u;
  long long v106 = 0u;
  memset(v107, 0, 28);
  if (*(void *)(a1 + 400))
  {
    sub_1010A24C8(a1, (uint64_t *)&v105, (void *)(a1 + 360));
    int v57 = DWORD2(v107[1]);
    double v54 = v54 + *((double *)&v105 + 1) * (double)SDWORD2(v107[1]);
    double v44 = v44 + *(double *)&v106 * (double)SDWORD2(v107[1]);
    v52 += DWORD2(v107[1]);
  }
  else
  {
    int v57 = 0;
  }
  if (v52 <= 0)
  {
    *(double *)(a1 + 8) = *(double *)((char *)v115 + 12) - *(double *)(a1 + 64) + 60.0;
  }
  else
  {
    double v58 = v54 / (double)v52;
    double v59 = v44 / (double)v52;
    sub_100F74AE0(&v110, 2 * *(void *)(a1 + 448) + 2 * (v57 > 0));
    if (*(void *)(a1 + 448))
    {
      uint64_t v60 = 0;
      unint64_t v61 = 0;
      uint64_t v62 = *(void *)(a1 + 440);
      uint64_t v63 = *(void *)(a1 + 416);
      do
      {
        unint64_t v64 = *(void *)(v63 + 8 * ((v62 + v61) / 0x33)) + 80 * ((v62 + v61) % 0x33);
        float v65 = sub_1000F1648((double *)(a1 + 320), v58, v59, *(double *)(v64 + 24), *(double *)(v64 + 40), *(double *)(a1 + 16));
        __int16 v66 = (double *)(*(void *)(*(void *)(a1 + 416) + 8 * ((v61 + *(void *)(a1 + 440)) / 0x33))
                       + 80 * ((v61 + *(void *)(a1 + 440)) % 0x33));
        float v67 = v65 - v66[8];
        v110[v60] = v67;
        long double v68 = sub_1000F1648((double *)(a1 + 320), v58, v59, v66[4], v66[6], *(double *)(a1 + 16));
        uint64_t v62 = *(void *)(a1 + 440);
        uint64_t v63 = *(void *)(a1 + 416);
        *(float *)&long double v68 = v68 - *(double *)(*(void *)(v63 + 8 * ((v61 + v62) / 0x33)) + 80 * ((v61 + v62) % 0x33) + 64);
        v110[v60 + 1] = *(float *)&v68;
        v60 += 2;
        ++v61;
      }
      while (*(void *)(a1 + 448) > v61);
    }
    else
    {
      LODWORD(v60) = 0;
    }
    if (v57 > 0)
    {
      float v69 = sub_1000F1648((double *)(a1 + 320), v58, v59, *((double *)&v106 + 1), *((double *)v107 + 1), *(double *)(a1 + 16));
      double v70 = v108;
      float v71 = v69 - v108;
      v110[v60] = v71;
      float v72 = sub_1000F1648((double *)(a1 + 320), v58, v59, *(double *)v107, *(double *)&v107[1], *(double *)(a1 + 16));
      float v73 = v72 - v70;
      v110[v60 | 1] = v73;
    }
    if (v50)
    {
      if ((float *)v111 == v110)
      {
        BOOL v76 = 1;
      }
      else
      {
        unint64_t v74 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v74 <= 1) {
          uint64_t v75 = 1;
        }
        else {
          uint64_t v75 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 <= 78.5)
        {
          uint64_t v77 = 1;
          do
          {
            unint64_t v78 = v77;
            if (v75 == v77) {
              break;
            }
            float v79 = v110[v77++];
          }
          while (v79 <= 78.5);
          BOOL v76 = v74 <= v78;
        }
        else
        {
          BOOL v76 = 0;
        }
      }
      *(unsigned char *)(a1 + 56) = v76;
    }
    if (v49)
    {
      float v80 = 300.0;
      if ((*(_DWORD *)(a1 + 32) & 0xFFFFFFFE) == 0xA) {
        float v80 = 110.0;
      }
      if ((float *)v111 == v110)
      {
        BOOL v83 = 1;
      }
      else
      {
        unint64_t v81 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v81 <= 1) {
          uint64_t v82 = 1;
        }
        else {
          uint64_t v82 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 <= v80)
        {
          uint64_t v84 = 1;
          do
          {
            unint64_t v85 = v84;
            if (v82 == v84) {
              break;
            }
            float v86 = v110[v84++];
          }
          while (v86 <= v80);
          BOOL v83 = v81 <= v85;
        }
        else
        {
          BOOL v83 = 0;
        }
      }
      *(unsigned char *)(a1 + 57) = v83;
    }
    switch(sub_1010A2398((void *)a1))
    {
      case 2u:
        uint64_t v87 = v110;
        if ((float *)v111 == v110) {
          goto LABEL_151;
        }
        unint64_t v88 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v88 <= 1) {
          uint64_t v93 = 1;
        }
        else {
          uint64_t v93 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 > 250.0) {
          goto LABEL_150;
        }
        uint64_t v94 = 1;
        do
        {
          unint64_t v91 = v94;
          if (v93 == v94) {
            break;
          }
          float v95 = v110[v94++];
        }
        while (v95 <= 250.0);
        goto LABEL_155;
      case 4u:
      case 8u:
        uint64_t v87 = v110;
        if ((float *)v111 == v110) {
          goto LABEL_151;
        }
        unint64_t v88 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v88 <= 1) {
          uint64_t v89 = 1;
        }
        else {
          uint64_t v89 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 > 78.5) {
          goto LABEL_150;
        }
        uint64_t v90 = 1;
        do
        {
          unint64_t v91 = v90;
          if (v89 == v90) {
            break;
          }
          float v92 = v110[v90++];
        }
        while (v92 <= 78.5);
        goto LABEL_155;
      case 5u:
        uint64_t v87 = v110;
        if ((float *)v111 == v110) {
          goto LABEL_151;
        }
        unint64_t v88 = (uint64_t)(v111 - (void)v110) >> 2;
        if (v88 <= 1) {
          uint64_t v99 = 1;
        }
        else {
          uint64_t v99 = (uint64_t)(v111 - (void)v110) >> 2;
        }
        if (*v110 > 300.0) {
          goto LABEL_150;
        }
        uint64_t v101 = 1;
        do
        {
          unint64_t v91 = v101;
          if (v99 == v101) {
            break;
          }
          float v102 = v110[v101++];
        }
        while (v102 <= 300.0);
        goto LABEL_155;
      default:
        uint64_t v87 = v110;
        if ((float *)v111 == v110)
        {
LABEL_151:
          BOOL v100 = 1;
        }
        else
        {
          unint64_t v88 = (uint64_t)(v111 - (void)v110) >> 2;
          if (v88 <= 1) {
            uint64_t v96 = 1;
          }
          else {
            uint64_t v96 = (uint64_t)(v111 - (void)v110) >> 2;
          }
          if (*v110 > 200.0)
          {
LABEL_150:
            BOOL v100 = 0;
          }
          else
          {
            uint64_t v97 = 1;
            do
            {
              unint64_t v91 = v97;
              if (v96 == v97) {
                break;
              }
              float v98 = v110[v97++];
            }
            while (v98 <= 200.0);
LABEL_155:
            BOOL v100 = v88 <= v91;
          }
        }
        *(unsigned char *)(a1 + 58) = v100;
        *a3 = 1;
        *(double *)(a1 + 8) = v10 - *(double *)(a1 + 64) + 60.0;
        if (v87)
        {
          *(void *)&long long v111 = v87;
          operator delete(v87);
        }
        break;
    }
  }
}

void sub_1010A36B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_1010A36F4(uint64_t a1, long long *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_1010A3E30((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  long long v6 = (void *)(v5 + 8 * (v4 / 0x66));
  uint64_t v7 = *v6 + 40 * (v4 % 0x66);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4080;
  }
  long long v8 = *a2;
  long long v9 = a2[1];
  *(void *)(v7 - 8) = *((void *)a2 + 4);
  *(_OWORD *)(v7 - 24) = v9;
  *(_OWORD *)(v7 - 40) = v8;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101D1F270);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

int64x2_t sub_1010A37A0(uint64_t a1, _OWORD *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_1010A414C((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  long long v6 = (void *)(v5 + 8 * (v4 / 0x33));
  uint64_t v7 = *v6 + 80 * (v4 % 0x33);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4080;
  }
  *(_OWORD *)(v7 - 80) = *a2;
  long long v8 = a2[1];
  long long v9 = a2[2];
  long long v10 = a2[4];
  *(_OWORD *)(v7 - 32) = a2[3];
  *(_OWORD *)(v7 - 16) = v10;
  *(_OWORD *)(v7 - 64) = v8;
  *(_OWORD *)(v7 - 48) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101D1F270);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

unint64_t sub_1010A3850(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 51 * (a4 - a2)
  }
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 4)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 4);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  long long v9 = (char **)(v8 + 8 * (v7 / 0x33));
  if (a1[2] == v8) {
    long long v10 = 0;
  }
  else {
    long long v10 = &(*v9)[80 * (v7 % 0x33)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 51 * ((char **)a2 - v9)
  }
        - 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 4)
        + 0x3333333333333333 * ((v10 - *v9) >> 4);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x33);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1008106FC(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1008106FC(v24, v6);
      sub_1010A44E0(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_10080FB24((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1008106FC(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      uint64_t v16 = (unsigned char **)(v15 + 8 * (v14 / 0x33));
      if (a1[2] == v15) {
        double v17 = 0;
      }
      else {
        double v17 = &(*v16)[80 * (v14 % 0x33)];
      }
      v24[0] = v12;
      sub_1010A46A0(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1010A4468(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x33));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 80 * (v19 % 0x33);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1008106FC(v24, v11);
  return v24[0].n128_u64[0];
}

unint64_t sub_1010A3AD4(void *a1, void *a2, char *a3, void *a4, char *a5)
{
  if (a5 == a3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 102 * (a4 - a2)
  }
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3);
  unint64_t v7 = a1[4];
  uint64_t v8 = a1[1];
  long long v9 = (char **)(v8 + 8 * (v7 / 0x66));
  if (a1[2] == v8) {
    long long v10 = 0;
  }
  else {
    long long v10 = &(*v9)[40 * (v7 % 0x66)];
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = 102 * ((char **)a2 - v9)
  }
        - 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x3333333333333333 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x66);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_100176BF4(v24, v11);
  if (v6 >= 1)
  {
    __n128 v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_100176BF4(v24, v6);
      sub_1010A4828(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      uint64_t v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_100473B58((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_100176BF4(v24, v6);
      __n128 v13 = v24[0];
      unint64_t v14 = a1[4] + a1[5];
      uint64_t v15 = a1[1];
      uint64_t v16 = (unsigned char **)(v15 + 8 * (v14 / 0x66));
      if (a1[2] == v15) {
        double v17 = 0;
      }
      else {
        double v17 = &(*v16)[40 * (v14 % 0x66)];
      }
      v24[0] = v12;
      sub_1010A49E8(v13.n128_u64[0], (unsigned char *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_10017D8E8(a1, 1) & 1) != 0)
        ;
    }
  }
  unint64_t v19 = a1[4];
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v20 + 8 * (v19 / 0x66));
  if (a1[2] == v20) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = *v21 + 40 * (v19 % 0x66);
  }
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_100176BF4(v24, v11);
  return v24[0].n128_u64[0];
}

void sub_1010A3D58(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1010A3D88(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 25;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 51;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_1000D7EB4((uint64_t)a1);
}

void sub_1010A3E30(void **a1)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 102 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x66)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    long long v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_1000DA54C(v7, v11);
      double v43 = (char *)__p;
      double v44 = (char *)__p;
      unint64_t v45 = (char *)__p + 8 * v12;
      int v41 = operator new(0xFF0uLL);
      sub_1000DA434(&__p, &v41);
      __n128 v13 = (char *)a1[1];
      unint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              uint64_t v26 = v43;
              unint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                unint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              uint64_t v31 = __p;
              std::string __p = v24;
              double v43 = &v24[8 * (v23 >> 2)];
              double v44 = v14;
              unint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                unint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                unint64_t v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              unint64_t v14 = &v20[v21];
              double v43 = v22;
              double v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)unint64_t v14 = v32;
          unint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      double v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      double v43 = v33;
      unint64_t v38 = (char *)a1[3];
      unint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      double v44 = v13;
      unint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 51;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 102;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        double v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFF0uLL);
        sub_10017F0B4(a1, &__p);
        uint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFF0uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 51;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 102;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 102;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_1010A4100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1010A414C(void **a1)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 51 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x33)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    long long v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_1000DA54C(v7, v11);
      double v43 = (char *)__p;
      double v44 = (char *)__p;
      unint64_t v45 = (char *)__p + 8 * v12;
      int v41 = operator new(0xFF0uLL);
      sub_1000DA434(&__p, &v41);
      __n128 v13 = (char *)a1[1];
      unint64_t v14 = v44;
      if (v13 == a1[2])
      {
        uint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000DA54C((uint64_t)v46, v23);
              uint64_t v26 = v43;
              unint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                unint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              uint64_t v31 = __p;
              std::string __p = v24;
              double v43 = &v24[8 * (v23 >> 2)];
              double v44 = v14;
              unint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                unint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                unint64_t v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              unint64_t v14 = &v20[v21];
              double v43 = v22;
              double v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)unint64_t v14 = v32;
          unint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        uint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      double v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      double v43 = v33;
      unint64_t v38 = (char *)a1[3];
      unint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      double v44 = v13;
      unint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 25;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 51;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        double v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFF0uLL);
        sub_10017F0B4(a1, &__p);
        uint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFF0uLL);
      }
      sub_1002D02D8((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 25;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 51;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 51;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002D02D8((uint64_t)a1, &__p);
  }
}

void sub_1010A441C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010A4468(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 51 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x33) {
    a2 = 1;
  }
  if (v5 < 0x66) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_1010A44E0@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    int64_t v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    __n128 v13 = a3 - 1;
    uint64_t v12 = *a3;
    unint64_t v14 = a4;
    int64_t v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_1010A45B0(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      int64_t v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      BOOL v17 = *v13--;
      uint64_t v12 = v17;
      unint64_t v14 = v17 + 4080;
    }
    uint64_t v18 = *a1 + 4080;
    uint64_t v19 = a2;
  }
  sub_1010A45B0(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1010A45B0@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    long long v9 = a1;
  }
  else
  {
    long long v9 = a2;
    uint64_t v10 = *a3;
    unint64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 4);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 4)) < v12) {
        int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 4);
      }
      v11 -= 80 * v12;
      a4 -= 80 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 80 * v12 - 4);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      int64_t v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1010A46A0(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4080); ; uint64_t i = v12 + 4080)
    {
      sub_1010A4734(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1010A4734(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1010A4734@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    long long v9 = __src;
  }
  else
  {
    long long v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 4);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 4);
      if (v12) {
        double result = memmove(__dst, v7, 80 * v12 - 4);
      }
      v7 += 80 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      long long __dst = v14;
    }
    __dst += 80 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst) {
      long long __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

__n128 sub_1010A4828@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, void *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v19 = a2;
    uint64_t v18 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    __n128 v13 = a3 - 1;
    unint64_t v12 = *a3;
    uint64_t v14 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_1010A48F8(v12, v14, v15, v16, &v21);
      uint64_t v16 = (char *)v22.n128_u64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      BOOL v17 = *v13--;
      unint64_t v12 = v17;
      uint64_t v14 = v17 + 4080;
    }
    uint64_t v18 = *a1 + 4080;
    uint64_t v19 = a2;
  }
  sub_1010A48F8(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1010A48F8@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X3>, char *a4@<X4>, void *a5@<X8>)
{
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    long long v9 = a1;
  }
  else
  {
    long long v9 = a2;
    uint64_t v10 = *a3;
    int64_t v11 = a2;
    while (1)
    {
      int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3)) < v12) {
        int64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3);
      }
      v11 -= 40 * v12;
      a4 -= 40 * v12;
      if (v12) {
        __n128 result = memmove(a4, v11, 40 * v12 - 4);
      }
      if (v11 == a1) {
        break;
      }
      uint64_t v14 = *--v6;
      uint64_t v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      long long v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1010A49E8(void *a1, unsigned char *a2, unsigned char **a3, unsigned char *a4, uint64_t a5)
{
  int v7 = *(void ***)a5;
  uint64_t v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = (unsigned char *)(*a1 + 4080); ; uint64_t i = v12 + 4080)
    {
      sub_1010A4A7C(a2, v8, i, v7, &v14);
      uint64_t v8 = (char *)*((void *)&v15 + 1);
      int v7 = (void **)v15;
      *(void *)a5 = v15;
      *(void *)(a5 + 8) = v8;
      if (v10 == a3) {
        break;
      }
      int64_t v12 = (unsigned char *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1010A4A7C(a2, v8, a4, v7, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1010A4A7C@<X0>(unsigned char *__src@<X1>, char *__dst@<X4>, unsigned char *a3@<X2>, void **a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a4;
  int v7 = __src;
  if (__src == a3)
  {
    long long v9 = __src;
  }
  else
  {
    long long v9 = a3;
    uint64_t v6 = a4 + 1;
    uint64_t v10 = (char *)*a4;
    while (1)
    {
      int64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 3);
      unint64_t v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3);
      if (v12) {
        double result = memmove(__dst, v7, 40 * v12 - 4);
      }
      v7 += 40 * v12;
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (char *)*v6++;
      uint64_t v10 = v14;
      long long __dst = v14;
    }
    __dst += 40 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst) {
      long long __dst = (char *)*v6;
    }
    else {
      --v6;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_1010A4B74(uint64_t a1)
{
  sub_100029A7C(a1);

  operator delete();
}

uint64_t sub_1010A4BAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))();
}

uint64_t sub_1010A4BD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 64))();
}

uint64_t sub_1010A4BFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 112))();
}

void sub_1010A4C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(void *)v3 + 128))(v3, v4, __p, a3);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1010A4CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010A4CC4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 136))();
}

uint64_t sub_1010A4CEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 144))();
}

uint64_t sub_1010A4D14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 152))();
}

uint64_t sub_1010A4D3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 168))();
}

uint64_t sub_1010A4D64(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 160))();
}

uint64_t sub_1010A4D8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 184))();
}

std::string *sub_1010A4DB4(int a1, std::string *this)
{
  return std::string::assign(this, "");
}

uint64_t sub_1010A4DC4(uint64_t a1, uint64_t a2)
{
  uint64_t result = rand();
  if ((int)result % 100 <= 0)
  {
    return sub_1010A4E38(a1, a2);
  }
  return result;
}

uint64_t sub_1010A4E38(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1010A5150(a1);
  if (result)
  {
    if (!*(unsigned char *)(a2 + 180))
    {
      uint64_t result = sub_100BCE2EC(a2);
      if (result)
      {
        id v5 = +[NSMutableDictionary dictionary];
        [v5 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1010A5190(a1)) forKeyedSubscript:@"wifiHarvestCentroidHasGoodZAxis"];
        uint64_t v6 = sub_1000DBFA0();
        BOOL v7 = 0;
        if (*(double *)(a2 + 28) > -500.0)
        {
          double v8 = *(double *)(a2 + 36);
          if (v8 > 0.0) {
            BOOL v7 = *((double *)v6 + 44) >= v8;
          }
        }
        [v5 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7) forKeyedSubscript:@"originalWifi1FixHasGoodZAxis"];
        if (sub_1010A5190(a1))
        {
          long long v9 = sub_1000DBFA0();
          double v10 = *(double *)(a2 + 28);
          if (v10 > -500.0)
          {
            double v11 = *(double *)(a2 + 36);
            if (v11 > 0.0 && *((double *)v9 + 44) >= v11) {
              [v5 setObject:[NSNumber numberWithDouble:*(double *)(a1 + 16)] forKeyedSubscript:@"zAxisDifference"];
            }
          }
        }
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_10230E318);
        }
        unint64_t v12 = qword_1024193A8;
        if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)int buf = 138543362;
          id v15 = v5;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Submitting CoreAnalytics event for associated AP ZAxis comparisons, %{public}@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_10230E318);
          }
          __n128 v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "static void CLWifiAssociatedApZAxisComparator::submitMetrics(const CLWifiAccessPoint &, const CL::Wifi1::Types::ComputedLocation &)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        return AnalyticsSendEventLazy();
      }
    }
  }
  return result;
}

uint64_t sub_1010A5150(uint64_t a1)
{
  sub_100F83A18(a1, (uint64_t)v3);
  sub_10106EA88((uint64_t)v3, (uint64_t)v2);
  return sub_100BCE2EC((uint64_t)v2);
}

BOOL sub_1010A5190(uint64_t a1)
{
  sub_100F83A18(a1, (uint64_t)v6);
  sub_10106EA88((uint64_t)v6, (uint64_t)v3);
  uint64_t v1 = sub_1000DBFA0();
  BOOL result = 0;
  if (v4 > -500.0 && v5 > 0.0) {
    return *((double *)v1 + 44) >= v5;
  }
  return result;
}

uint64_t sub_1010A5200(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1010A5208(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1010A5238()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1010A52F0(_Unwind_Exception *a1)
{
}

void sub_1010A5308()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1010A53B0(_Unwind_Exception *a1)
{
}

void sub_1010A53C8(uint64_t a1, void *a2)
{
}

void sub_1010A54C4(_Unwind_Exception *a1)
{
  sub_1005E2398(v1);
  _Unwind_Resume(a1);
}

id sub_1010A54E0(uint64_t a1)
{
  return sub_1010A54E8(*(void *)(a1 + 32));
}

id sub_1010A54E8(uint64_t a1)
{
  if (sub_1005E2384())
  {
    sub_1010A7138((unsigned __int8 *)a1, 1);
    uint64_t v2 = *(void **)(a1 + 176);
    double v3 = 1.79769313e308;
LABEL_11:
    return [v2 setNextFireDelay:v3];
  }
  double Current = CFAbsoluteTimeGetCurrent();
  [(id)qword_10248A0E8 pairedDeviceLastSeenTimestamp];
  if (Current - v5 <= 3299.0)
  {
    uint64_t v2 = *(void **)(a1 + 176);
    double v3 = 3300.0;
    goto LABEL_11;
  }
  if (qword_102419210 != -1) {
    dispatch_once(&qword_102419210, &stru_10230E490);
  }
  uint64_t v6 = qword_102419218;
  if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Spectator subscriptions expired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_10230E490);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierWatch::checkAndToggleSpectatorSubscriptions()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  id result = (id)sub_1010A7138((unsigned __int8 *)a1, 0);
  *(unsigned char *)(a1 + 184) = 0;
  return result;
}

uint64_t sub_1010A5750(id *a1)
{
  *a1 = off_10230E348;

  (*((void (**)(id *))*a1 + 2))(a1);

  return sub_1005E2398(a1);
}

void sub_1010A57D8(id *a1)
{
  sub_1010A5750(a1);

  operator delete();
}

void sub_1010A5810(uint64_t a1, int a2, void *a3)
{
  if (qword_102419210 != -1) {
    dispatch_once(&qword_102419210, &stru_10230E490);
  }
  uint64_t v6 = qword_102419218;
  if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = [a3 length];
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Received companion message,type,%d,size,%lu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_10230E490);
    }
    *(_DWORD *)int v103 = 67109376;
    *(_DWORD *)&v103[4] = a2;
    *(_WORD *)&v103[8] = 2048;
    *(void *)&v103[10] = [a3 length];
    uint64_t v82 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v82);
    if (v82 != (char *)buf) {
      free(v82);
    }
  }
  switch(a2)
  {
    case 2:
      *(void *)int v103 = 0;
      id v27 = +[NSJSONSerialization JSONObjectWithData:a3 options:0 error:v103];
      if (!*(void *)v103)
      {
        uint64_t v28 = v27;
        if ([v27 count] == (id)9)
        {
          memset(&buf[88], 0, 96);
          [objc_msgSend(v28, "objectAtIndexedSubscript:", 0) doubleValue];
          *(void *)int buf = v29;
          [objc_msgSend(v28, "objectAtIndexedSubscript:", 1) doubleValue];
          *(void *)&uint8_t buf[8] = v30;
          [objc_msgSend(v28, "objectAtIndexedSubscript:", 5) doubleValue];
          *(void *)&buf[16] = v31;
          [v28[2] doubleValue];
          *(void *)&unsigned char buf[24] = v32;
          [objc_msgSend(v28, "objectAtIndexedSubscript:", 3) doubleValue];
          *(void *)&unsigned char buf[32] = v33;
          [v28[8] doubleValue];
          *(void *)&buf[40] = v34;
          [objc_msgSend(v28, "objectAtIndexedSubscript:", 4) doubleValue];
          *(void *)&buf[48] = v35;
          [v28[6] doubleValue];
          *(void *)&buf[56] = v36;
          [v28[7] doubleValue];
          *(_OWORD *)&buf[64] = v37;
          *(_DWORD *)&buf[176] = 0;
          *(void *)&buf[184] = 0;
          *(void *)&buf[80] = 0;
          *(_DWORD *)&buf[88] = 0;
          memset(&buf[96], 0, 73);
          LODWORD(v100[0]) = 3;
          goto LABEL_130;
        }
      }
      if (qword_102419210 != -1) {
        dispatch_once(&qword_102419210, &stru_10230E490);
      }
      float v72 = qword_102419218;
      if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#Warning error serializing OdometerCyclingData", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419210 != -1) {
          dispatch_once(&qword_102419210, &stru_10230E490);
        }
        LOWORD(v100[0]) = 0;
        goto LABEL_115;
      }
      return;
    case 6:
      *(void *)int v103 = 0;
      id v38 = +[NSJSONSerialization JSONObjectWithData:a3 options:0 error:v103];
      if (!*(void *)v103)
      {
        unint64_t v39 = v38;
        if ([v38 count] == (id)3)
        {
          memset(buf, 0, 192);
          [v39[0] doubleValue];
          *(void *)&uint8_t buf[8] = v40;
          *(_DWORD *)&buf[16] = [v39 objectAtIndexedSubscript:1].unsignedIntValue;
          *(_DWORD *)&buf[20] = [v39[2] unsignedIntValue];
          int v41 = 4;
          goto LABEL_129;
        }
      }
      if (qword_102419210 != -1) {
        dispatch_once(&qword_102419210, &stru_10230E490);
      }
      float v73 = qword_102419218;
      if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#Warning error deserializing OdometerElevationData", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419210 != -1) {
          dispatch_once(&qword_102419210, &stru_10230E490);
        }
        LOWORD(v100[0]) = 0;
        goto LABEL_115;
      }
      return;
    case 13:
      *(void *)int v103 = 0;
      id v9 = +[NSJSONSerialization JSONObjectWithData:a3 options:0 error:v103];
      if (*(void *)v103 || (double v10 = v9, (unint64_t)[v9 count] <= 1))
      {
        if (qword_102419210 != -1) {
          dispatch_once(&qword_102419210, &stru_10230E490);
        }
        double v11 = qword_102419218;
        if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning error deserializing CoarseElevationData", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419210 != -1) {
            dispatch_once(&qword_102419210, &stru_10230E490);
          }
          LOWORD(v100[0]) = 0;
          goto LABEL_115;
        }
      }
      else
      {
        memset(&buf[16], 0, 176);
        [v10[0] doubleValue];
        *(void *)int buf = v81;
        *(_DWORD *)&uint8_t buf[8] = [v10 objectAtIndexedSubscript:1];
        *(_DWORD *)&unsigned char buf[12] = 0;
        int v41 = 8;
LABEL_129:
        LODWORD(v100[0]) = v41;
LABEL_130:
        (*(void (**)(uint64_t, void *, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, v100, buf, 0, 0xFFFFFFFFLL, 0);
      }
      return;
    case 14:
      uint64_t v42 = objc_opt_class();
      uint64_t v43 = objc_opt_class();
      uint64_t v44 = objc_opt_class();
      uint64_t v45 = objc_opt_class();
      id v46 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v42, v43, v44, v45, objc_opt_class(), 0), a3, 0);
      id v47 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLMotionSyncStore"];
      v102[0] = _NSConcreteStackBlock;
      v102[1] = 3221225472;
      v102[2] = sub_1010A7108;
      v102[3] = &unk_1022CA588;
      v102[4] = v46;
      [v47 doAsync:v102];
      return;
    case 15:
      *(unsigned char *)(a1 + 184) = 0;
      sub_1010A7138((unsigned __int8 *)a1, 1);
      return;
    case 18:
      id v12 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLMotionStateObserver"];
      v101[0] = _NSConcreteStackBlock;
      v101[1] = 3221225472;
      v101[2] = sub_1010A7474;
      v101[3] = &unk_1022CA588;
      v101[4] = a3;
      [v12 doAsync:v101];
      [a3 getBytes:v103 length:40];
      if (*(_DWORD *)v103 == 1)
      {
        memset(&buf[20], 0, 172);
        *(_OWORD *)int buf = *(_OWORD *)&v103[4];
        *(_DWORD *)&buf[16] = *(_DWORD *)&v103[20];
        LODWORD(v100[0]) = 10;
        (*(void (**)(uint64_t, void *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v100, buf, 1, 0xFFFFFFFFLL, 0);
      }
      return;
    case 19:
      id v48 = [objc_alloc((Class)NSString) initWithData:a3 encoding:4];
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLMotionAlarmNotifier"), "launchWatchApplicationForCompanion:", v48];

      return;
    case 20:
      v100[0] = 0;
      id v49 = +[NSJSONSerialization JSONObjectWithData:a3 options:0 error:v100];
      if (!v100[0])
      {
        BOOL v50 = v49;
        if ([v49 count] == (id)5)
        {
          if (qword_1024191E0 != -1) {
            dispatch_once(&qword_1024191E0, &stru_10230E4B0);
          }
          int v51 = qword_1024191E8;
          if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
          {
            [v50[0] doubleValue];
            uint64_t v53 = v52;
            [v50[1] doubleValue];
            uint64_t v55 = v54;
            [v50[2] doubleValue];
            uint64_t v57 = v56;
            [objc_msgSend(v50, "objectAtIndexedSubscript:", 3) doubleValue];
            uint64_t v59 = v58;
            unsigned int v60 = [[v50 objectAtIndexedSubscript:4] intValue];
            *(_DWORD *)int buf = 134219008;
            *(void *)&uint8_t buf[4] = v53;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&unsigned char buf[14] = v55;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(void *)&unsigned char buf[24] = v57;
            *(_WORD *)&unsigned char buf[32] = 2048;
            *(void *)&buf[34] = v59;
            *(_WORD *)&buf[42] = 1024;
            *(_DWORD *)&buf[44] = v60;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "Watch received absolute altitude update, timestamp, %f, altitude, %f, accuracy %f, precision, %f, status, %d", buf, 0x30u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024191E0 != -1) {
              dispatch_once(&qword_1024191E0, &stru_10230E4B0);
            }
            [v50[0] doubleValue];
            uint64_t v91 = v90;
            [objc_msgSend(v50, "objectAtIndexedSubscript:", 1) doubleValue];
            uint64_t v93 = v92;
            [v50[2] doubleValue];
            uint64_t v95 = v94;
            [v50[3] doubleValue];
            uint64_t v97 = v96;
            unsigned int v98 = [[v50 objectAtIndexedSubscript:4] intValue];
            *(_DWORD *)int v103 = 134219008;
            *(void *)&v103[4] = v91;
            *(_WORD *)&v103[12] = 2048;
            *(void *)&v103[14] = v93;
            *(_WORD *)&v103[22] = 2048;
            uint64_t v104 = v95;
            __int16 v105 = 2048;
            uint64_t v106 = v97;
            __int16 v107 = 1024;
            unsigned int v108 = v98;
            uint64_t v99 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v99);
            if (v99 != (char *)buf) {
              free(v99);
            }
          }
          memset(&buf[24], 0, 168);
          [v50[1] doubleValue];
          *(void *)int buf = v61;
          [v50[2] doubleValue];
          *(void *)&uint8_t buf[8] = v62;
          [v50[3] doubleValue];
          *(void *)&buf[16] = v63;
          int v26 = 11;
          goto LABEL_61;
        }
      }
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10230E4B0);
      }
      unint64_t v74 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#Warning error deserializing Absolute Altitude update", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10230E4B0);
        }
        *(_WORD *)int v103 = 0;
        goto LABEL_115;
      }
      return;
    case 23:
      sub_1010A74A4(a1);
      return;
    case 24:
      if ((sub_101523584() & 1) == 0)
      {
        id v13 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLKappaNotifier"];
        uint64_t v14 = 65793;
        goto LABEL_66;
      }
      return;
    case 25:
      if ((sub_101523584() & 1) == 0)
      {
        id v7 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLKappaNotifier"];
        uint64_t v8 = 257;
        goto LABEL_22;
      }
      return;
    case 26:
      id v13 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLKappaNotifier"];
      uint64_t v14 = 0x101000001;
      goto LABEL_66;
    case 27:
    case 29:
      id v7 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLKappaNotifier"];
      uint64_t v8 = 16777217;
LABEL_22:
      [v7 dontcollect:v8 isLocal:0];
      return;
    case 28:
      id v13 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLKappaNotifier"];
      uint64_t v14 = 0x100000101000001;
LABEL_66:
      [v13 collect:v14 isLocal:0];
      return;
    case 30:
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLKappaNotifier"), "companionHeartbeat:", a3];
      return;
    case 32:
      uint64_t v64 = objc_opt_class();
      uint64_t v65 = objc_opt_class();
      uint64_t v66 = objc_opt_class();
      v100[0] = 0;
      id v67 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v64, v65, v66, objc_opt_class(), 0), a3, v100);
      if (v100[0])
      {
        if (qword_102419280 != -1) {
          dispatch_once(&qword_102419280, &stru_10230E510);
        }
        long double v68 = qword_102419288;
        if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int buf = 138412290;
          *(void *)&uint8_t buf[4] = v100[0];
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "Error reading config from companion: %@", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419280 != -1) {
            dispatch_once(&qword_102419280, &stru_10230E510);
          }
          *(_DWORD *)int v103 = 138412290;
          *(void *)&v103[4] = v100[0];
LABEL_127:
          uint64_t v75 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n");
          goto LABEL_116;
        }
      }
      else
      {
        BOOL v76 = v67;
        uint64_t v77 = sub_100F8CC8C();
        int v78 = sub_100F8E384(v77, v76);
        if (v78 != 100)
        {
          int v79 = v78;
          if (qword_102419280 != -1) {
            dispatch_once(&qword_102419280, &stru_10230E510);
          }
          float v80 = qword_102419288;
          if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)int buf = 67240192;
            *(_DWORD *)&uint8_t buf[4] = v79;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "[Dynamic Config] Error on config insertion: %{public}d", buf, 8u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419280 != -1) {
              dispatch_once(&qword_102419280, &stru_10230E510);
            }
            *(_DWORD *)int v103 = 67240192;
            *(_DWORD *)&v103[4] = v79;
            goto LABEL_127;
          }
        }
      }
      return;
    case 33:
      id v69 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLMotionAlarmNotifier"];
      if (qword_1024192B0 != -1) {
        dispatch_once(&qword_1024192B0, &stru_10230E4F0);
      }
      double v70 = qword_1024192B8;
      if (os_log_type_enabled((os_log_t)qword_1024192B8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "Watch received motion alarm trigger for kTypeSignificantCardioChange", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024192B0 != -1) {
          dispatch_once(&qword_1024192B0, &stru_10230E4F0);
        }
        *(_WORD *)int v103 = 0;
        unint64_t v85 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v85);
        if (v85 != (char *)buf) {
          free(v85);
        }
      }
      [v69 onCardioChangeEvent];
      return;
    case 35:
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10230E4D0);
      }
      id v15 = qword_102419038;
      if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v16 = [a3 length];
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Watch received mobility calibration data from phone. Message size: %d bytes", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419030 != -1) {
          dispatch_once(&qword_102419030, &stru_10230E4D0);
        }
        *(_DWORD *)int v103 = 67109120;
        *(_DWORD *)&v103[4] = [a3 length];
        BOOL v83 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v83);
        if (v83 != (char *)buf) {
          free(v83);
        }
      }
      if (_os_feature_enabled_impl()) {
        [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLStepCountNotifier"] receiveMobilityDataFromCompanion:a3];
      }
      return;
    case 36:
      if (qword_1024191E0 != -1) {
        dispatch_once(&qword_1024191E0, &stru_10230E4B0);
      }
      BOOL v17 = qword_1024191E8;
      if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "received filtered pressure from phone", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10230E4B0);
        }
        *(_WORD *)int v103 = 0;
        uint64_t v84 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v84);
        if (v84 != (char *)buf) {
          free(v84);
        }
      }
      v100[0] = 0;
      id v18 = +[NSJSONSerialization JSONObjectWithData:a3 options:0 error:v100];
      if (v100[0] || (uint64_t v19 = v18, [v18 count] != (id)2))
      {
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10230E4B0);
        }
        float v71 = qword_1024191E8;
        if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#Warning error deserializing Filtered Pressure update", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191E0 != -1) {
            dispatch_once(&qword_1024191E0, &stru_10230E4B0);
          }
          *(_WORD *)int v103 = 0;
LABEL_115:
          uint64_t v75 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n");
LABEL_116:
          if (v75 != buf) {
            free(v75);
          }
        }
      }
      else
      {
        if (qword_1024191E0 != -1) {
          dispatch_once(&qword_1024191E0, &stru_10230E4B0);
        }
        uint64_t v20 = qword_1024191E8;
        if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
        {
          [objc_msgSend(v19, "objectAtIndexedSubscript:", 0) doubleValue];
          uint64_t v22 = v21;
          [objc_msgSend(v19, "objectAtIndexedSubscript:", 1) doubleValue];
          *(_DWORD *)int buf = 134218240;
          *(void *)&uint8_t buf[4] = v22;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v23;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Watch received filtered pressure update, timestamp, %f, filteredPressure, %f", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191E0 != -1) {
            dispatch_once(&qword_1024191E0, &stru_10230E4B0);
          }
          [objc_msgSend(v19, "objectAtIndexedSubscript:", 0) doubleValue];
          uint64_t v87 = v86;
          [objc_msgSend(v19, "objectAtIndexedSubscript:", 1) doubleValue];
          *(_DWORD *)int v103 = 134218240;
          *(void *)&v103[4] = v87;
          *(_WORD *)&v103[12] = 2048;
          *(void *)&v103[14] = v88;
          uint64_t v89 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)", "%s\n", v89);
          if (v89 != (char *)buf) {
            free(v89);
          }
        }
        memset(&buf[24], 0, 168);
        [v19[1] doubleValue];
        *(void *)int buf = v24;
        [v19[0] doubleValue];
        *(void *)&uint8_t buf[8] = v25;
        *(void *)&buf[16] = 0x4014000000000000;
        int v26 = 12;
LABEL_61:
        *(_DWORD *)int v103 = v26;
        (*(void (**)(uint64_t, unsigned char *, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, v103, buf, 0, 0xFFFFFFFFLL, 0);
      }
      return;
    default:
      return;
  }
}

uint64_t sub_1010A7108(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 224))(a2, *(void *)(a1 + 32));
}

uint64_t sub_1010A7138(unsigned __int8 *a1, int a2)
{
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_10230E530);
  }
  double v4 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v5 = sub_1005E2384();
    int v6 = a1[184];
    int v7 = a1[109];
    int v8 = a1[110];
    *(_DWORD *)int buf = 8;
    int v9 = sub_1001072EC((uint64_t)a1, (int *)buf, 1);
    *(_DWORD *)int buf = 67110400;
    int v31 = a2;
    __int16 v32 = 1024;
    unsigned int v33 = v5;
    __int16 v34 = 1024;
    int v35 = v6;
    __int16 v36 = 1024;
    int v37 = v7;
    __int16 v38 = 1024;
    int v39 = v8;
    __int16 v40 = 1024;
    int v41 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "coarse elevation sub,enable,%d,transport,%d,subsCompleted,%d,unlockSinceBoot,%d,fitnessTracking,%d,numClients,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10230E530);
    }
    unsigned int v13 = sub_1005E2384();
    int v14 = a1[184];
    int v15 = a1[109];
    int v16 = a1[110];
    v19[0] = 8;
    int v17 = sub_1001072EC((uint64_t)a1, v19, 1);
    v19[0] = 67110400;
    v19[1] = a2;
    __int16 v20 = 1024;
    unsigned int v21 = v13;
    __int16 v22 = 1024;
    int v23 = v14;
    __int16 v24 = 1024;
    int v25 = v15;
    __int16 v26 = 1024;
    int v27 = v16;
    __int16 v28 = 1024;
    int v29 = v17;
    id v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierWatch::toggleCoarseElevationSubscription(BOOL)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  uint64_t result = (uint64_t)sub_1005E2384();
  if (result)
  {
    if (a1[184])
    {
      if (!a1[110]
        || (a2 & 1) == 0 && (*(_DWORD *)buf = 8, uint64_t result = sub_1001072EC((uint64_t)a1, (int *)buf, 1), !result))
      {
        char v11 = 0;
        int v12 = 12;
LABEL_12:
        uint64_t result = (uint64_t)sub_1005E26F4(120.0, (uint64_t)a1, v12, 0, 300, 0, 0, 0, 0, 0);
        a1[184] = v11;
      }
    }
    else if (a2)
    {
      *(_DWORD *)int buf = 8;
      uint64_t result = sub_1001072EC((uint64_t)a1, (int *)buf, 1);
      if (result)
      {
        uint64_t result = sub_1005E2494((uint64_t)a1);
        if (result)
        {
          if (a1[109] && a1[110])
          {
            char v11 = 1;
            int v12 = 11;
            goto LABEL_12;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1010A7474(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 208))(a2, *(void *)(a1 + 32));
}

uint64_t sub_1010A74A4(uint64_t a1)
{
  sub_100103240();
  uint64_t result = sub_1000A16E8();
  if ((result & 0x8000000000000) != 0 || *(unsigned char *)(a1 + 186) || *(unsigned char *)(a1 + 189)) {
    return (uint64_t)sub_1005E26F4(120.0, a1, 22, 0, 300, 1, 0, 0, 0, 0);
  }
  return result;
}

uint64_t sub_1010A7518(uint64_t a1, int a2, int *a3, uint64_t **a4)
{
  if (qword_102419210 != -1) {
    dispatch_once(&qword_102419210, &stru_10230E490);
  }
  int v8 = qword_102419218;
  if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEBUG))
  {
    int v9 = *a3;
    *(_DWORD *)int buf = 67109120;
    LODWORD(v19) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Registering for companion notification type %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_10230E490);
    }
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLCompanionNotifierWatch::registerForNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::RegistrationInfo &)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  uint64_t v10 = sub_100064A74(a1, a2, a3, a4);
  if (v10)
  {
    switch(*a3)
    {
      case 0:
        if (qword_102419210 != -1) {
          dispatch_once(&qword_102419210, &stru_10230E490);
        }
        char v11 = qword_102419218;
        if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v12 = *(void *)(a1 + 160);
          unsigned int v13 = *a4;
          *(_DWORD *)int buf = 134218240;
          uint64_t v19 = v12;
          __int16 v20 = 2048;
          unsigned int v21 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Last Overridden Session,%ld, Registration Info Overridden Session,%ld", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419210 != -1) {
            dispatch_once(&qword_102419210, &stru_10230E490);
          }
          int v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLCompanionNotifierWatch::registerForNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::RegistrationInfo &)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        *(void *)(a1 + 160) = *a4;
        sub_1010A7960(a1);
        break;
      case 3:
        sub_1005E26F4(120.0, a1, 0, 0, 300, 1, 0, 0, 0, 0);
        break;
      case 4:
        sub_1005E26F4(120.0, a1, 4, 0, 300, 1, 0, 0, 0, 0);
        break;
      case 8:
        sub_1010A7138((unsigned __int8 *)a1, 1);
        break;
      default:
        break;
    }
  }
  id v14 = sub_1005E2384();
  (*(void (**)(uint64_t, id))(*(void *)a1 + 208))(a1, v14);
  return v10;
}

void sub_1010A7960(uint64_t a1)
{
  id v9 = 0;
  id v18 = +[NSNumber numberWithInteger:*(void *)(a1 + 160)];
  uint64_t v2 = +[NSJSONSerialization dataWithJSONObject:options:error:](NSJSONSerialization, "dataWithJSONObject:options:error:", +[NSArray arrayWithObjects:&v18 count:1], 0, &v9);
  if (v9)
  {
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_10230E490);
    }
    double v3 = qword_102419218;
    if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 160);
      id v5 = [[objc_msgSend(v9, "description") UTF8String];
      *(_DWORD *)int buf = 134218242;
      uint64_t v15 = v4;
      __int16 v16 = 2080;
      id v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Error serializing session override (%ld): %s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419210 != -1) {
        dispatch_once(&qword_102419210, &stru_10230E490);
      }
      uint64_t v6 = *(void *)(a1 + 160);
      id v7 = [[objc_msgSend(v9, "description") UTF8String];
      int v10 = 134218242;
      uint64_t v11 = v6;
      __int16 v12 = 2080;
      id v13 = v7;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLCompanionNotifierWatch::sendLastOverriddenSession() const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 168))
  {
    sub_1005E26F4(120.0, a1, 7, v2, 300, 1, 0, 0, 0, 0);
  }
}

BOOL sub_1010A7BD0(uint64_t a1, int a2, int *a3)
{
  if (qword_102419210 != -1) {
    dispatch_once(&qword_102419210, &stru_10230E490);
  }
  uint64_t v6 = qword_102419218;
  if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEBUG))
  {
    int v7 = *a3;
    *(_DWORD *)int buf = 67109120;
    int v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Unregistering for companion notification type %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_10230E490);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLCompanionNotifierWatch::unregisterForNotification(int, const CLCompanionNotifier_Type::Notification &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  BOOL v8 = sub_1001BFB34((char *)a1, a2, a3);
  if (v8)
  {
    switch(*a3)
    {
      case 0:
        *(_DWORD *)int buf = 0;
        if (!sub_1001072EC(a1, (int *)buf, 1))
        {
          *(void *)(a1 + 160) = 0;
          sub_1005E26F4(120.0, a1, 8, 0, 300, 1, 0, 0, 0, 0);
        }
        break;
      case 3:
        *(_DWORD *)int buf = 3;
        if (!sub_1001072EC(a1, (int *)buf, 1)) {
          sub_1005E26F4(120.0, a1, 1, 0, 300, 1, 0, 0, 0, 0);
        }
        break;
      case 4:
        *(_DWORD *)int buf = 4;
        if (!sub_1001072EC(a1, (int *)buf, 1)) {
          sub_1005E26F4(120.0, a1, 5, 0, 300, 1, 0, 0, 0, 0);
        }
        break;
      case 8:
        sub_1010A7138((unsigned __int8 *)a1, 0);
        break;
      default:
        break;
    }
  }
  id v9 = sub_1005E2384();
  (*(void (**)(uint64_t, id))(*(void *)a1 + 208))(a1, v9);
  return v8;
}

id sub_1010A7EF8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 110))
  {
    int v6 = 3;
    int v3 = sub_1001072EC(a1, &v6, 1);
    int v7 = 4;
    int v4 = sub_1001072EC(a1, &v7, 1);
    if (v3) {
      sub_1005E26F4(120.0, a1, 0, 0, 300, 1, 0, 0, 0, 0);
    }
    if (v4) {
      sub_1005E26F4(120.0, a1, 4, 0, 300, 1, 0, 0, 0, 0);
    }
    int v8 = 0;
    if (sub_1001072EC(a1, &v8, 1)) {
      sub_1010A7960(a1);
    }
    sub_1005E2A74(a1, (v3 | v4) != 0);
  }
  return sub_1010A54E8(a1);
}

uint64_t sub_1010A8010(uint64_t a1)
{
  if (qword_102419210 != -1) {
    dispatch_once(&qword_102419210, &stru_10230E490);
  }
  uint64_t v2 = qword_102419218;
  if (os_log_type_enabled((os_log_t)qword_102419218, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Sync state with Companion", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419210 != -1) {
      dispatch_once(&qword_102419210, &stru_10230E490);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompanionNotifierWatch::handleStateSyncTimerExpiry()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 208))(a1, 1);
}

void sub_1010A81D4()
{
}

void sub_1010A828C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1010A82C8(id a1)
{
  qword_102419218 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Transport");
}

void sub_1010A82F8(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_1010A8328(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1010A8358(id a1)
{
  qword_1024192B8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

void sub_1010A8388(id a1)
{
  qword_102419288 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_1010A83B8(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

NSDictionary *sub_1010A83E8()
{
  sub_100134750(qword_102485060, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485060, (void *)&_mh_execute_header);
  v1[0] = +[NSString stringWithUTF8String:"VO2MaxPowerBudgetEstimatorQueryLookbackInterval"];
  v2[0] = &off_102397F80;
  v1[1] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetRefreshInterval"];
  v2[1] = &off_102397F98;
  v1[2] = +[NSString stringWithUTF8String:"VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds"];
  v2[2] = &off_102397FB0;
  v1[3] = +[NSString stringWithUTF8String:"SensitiveEscalationBudgetAllowanceSeconds"];
  v2[3] = &off_102397FC8;
  v1[4] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetAllowanceSeconds"];
  v2[4] = &off_102397FE0;
  v1[5] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetAllowanceSeconds"];
  v2[5] = &off_102397FF8;
  void v1[6] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetRefreshInterval"];
  void v2[6] = &off_102398010;
  uint64_t result = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:7];
  qword_102485078 = (uint64_t)result;
  return result;
}

uint64_t sub_1010A8574(uint64_t a1, int **a2)
{
  *(void *)(a1 + 8) = 0;
  int v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  int v4 = (void **)(a1 + 24);
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  id v5 = *a2;
  int v6 = a2[1];
  if (*a2 == v6)
  {
    id v9 = 0;
    __int16 v22 = 0;
    __int16 v40 = 0;
    int v41 = 0;
    uint64_t v42 = 0;
  }
  else
  {
    do
    {
      int v43 = *v5;
      __int16 v40 = (unsigned int *)&v43;
      int v7 = sub_100125FD0((uint64_t **)a1, &v43, (uint64_t)&unk_101D0B290, &v40);
      ++*((_DWORD *)v7 + 8);
      ++v5;
    }
    while (v5 != v6);
    int v8 = *(uint64_t **)a1;
    __int16 v40 = 0;
    int v41 = 0;
    uint64_t v42 = 0;
    if (v8 == v3)
    {
      id v9 = 0;
      __int16 v22 = 0;
    }
    else
    {
      id v9 = 0;
      do
      {
        uint64_t v10 = *(uint64_t *)((char *)v8 + 28);
        if (v9 >= v42)
        {
          uint64_t v11 = ((char *)v9 - (char *)v40) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            sub_1001D7FD4();
          }
          unint64_t v12 = ((char *)v42 - (char *)v40) >> 2;
          if (v12 <= v11 + 1) {
            unint64_t v12 = v11 + 1;
          }
          if ((unint64_t)((char *)v42 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            id v14 = (char *)sub_1000DA54C((uint64_t)&v42, v13);
          }
          else {
            id v14 = 0;
          }
          uint64_t v15 = (unsigned int *)&v14[8 * v11];
          *(void *)uint64_t v15 = v10;
          id v9 = (int *)(v15 + 2);
          id v17 = v40;
          __int16 v16 = v41;
          if (v41 != v40)
          {
            do
            {
              uint64_t v18 = *((void *)v16 - 1);
              v16 -= 2;
              *((void *)v15 - 1) = v18;
              v15 -= 2;
            }
            while (v16 != v17);
            __int16 v16 = v40;
          }
          __int16 v40 = v15;
          int v41 = (unsigned int *)v9;
          uint64_t v42 = (int *)&v14[8 * v13];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          *(void *)id v9 = v10;
          v9 += 2;
        }
        int v41 = (unsigned int *)v9;
        uint64_t v19 = (uint64_t *)v8[1];
        if (v19)
        {
          do
          {
            __int16 v20 = v19;
            uint64_t v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            __int16 v20 = (uint64_t *)v8[2];
            BOOL v21 = *v20 == (void)v8;
            int v8 = v20;
          }
          while (!v21);
        }
        int v8 = v20;
      }
      while (v20 != v3);
      __int16 v22 = (int *)v40;
    }
  }
  unint64_t v23 = 126 - 2 * __clz(((char *)v9 - (char *)v22) >> 3);
  if (v9 == v22) {
    uint64_t v24 = 0;
  }
  else {
    uint64_t v24 = v23;
  }
  sub_1010A88F0(v22, v9, v24, 1);
  int v25 = v40;
  __int16 v26 = v41;
  if (v40 != v41)
  {
    int v27 = (void *)(a1 + 40);
    __int16 v28 = *(char **)(a1 + 32);
    do
    {
      unsigned int v29 = *v25;
      if ((unint64_t)v28 >= *v27)
      {
        int v31 = (char *)*v4;
        uint64_t v32 = (v28 - (unsigned char *)*v4) >> 2;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v34 = *v27 - (void)v31;
        if (v34 >> 1 > v33) {
          unint64_t v33 = v34 >> 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v33;
        }
        if (v35)
        {
          __int16 v36 = (char *)sub_10017EA34(a1 + 40, v35);
          int v31 = *(char **)(a1 + 24);
          __int16 v28 = *(char **)(a1 + 32);
        }
        else
        {
          __int16 v36 = 0;
        }
        int v37 = (unsigned int *)&v36[4 * v32];
        *int v37 = v29;
        uint64_t v30 = (char *)(v37 + 1);
        while (v28 != v31)
        {
          unsigned int v38 = *((_DWORD *)v28 - 1);
          v28 -= 4;
          *--int v37 = v38;
        }
        *(void *)(a1 + 24) = v37;
        *(void *)(a1 + 32) = v30;
        *(void *)(a1 + 40) = &v36[4 * v35];
        if (v31) {
          operator delete(v31);
        }
      }
      else
      {
        *(_DWORD *)__int16 v28 = v29;
        uint64_t v30 = v28 + 4;
      }
      *(void *)(a1 + 32) = v30;
      v25 += 2;
      __int16 v28 = v30;
    }
    while (v25 != v26);
    int v25 = v40;
  }
  if (v25)
  {
    int v41 = v25;
    operator delete(v25);
  }
  return a1;
}

void sub_1010A8878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v13;
    operator delete(v13);
  }
  sub_1000F5BB0(v10, *(void **)(v10 + 8));
  _Unwind_Resume(a1);
}

const char *sub_1010A88C8(unsigned int a1)
{
  if (a1 > 1) {
    return "-";
  }
  else {
    return (&off_10230E550)[a1];
  }
}

int *sub_1010A88F0(int *result, int *a2, uint64_t a3, char a4)
{
  id v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          id v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 3;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(a2 - 1) > v10[1])
                {
                  int v45 = *v10;
                  *uint64_t v10 = *(a2 - 2);
                  *(a2 - 2) = v45;
                  int v46 = v10[1];
                  v10[1] = *(a2 - 1);
                  *(a2 - 1) = v46;
                }
                break;
              case 3uLL:
                uint64_t result = sub_1010A9090(v10, v10 + 2, a2 - 2);
                break;
              case 4uLL:
                uint64_t result = sub_1010A9384(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5uLL:
                uint64_t result = sub_1010A9384(v10, v10 + 2, v10 + 4, v10 + 6);
                if (*(a2 - 1) > v10[7])
                {
                  int v47 = v10[6];
                  v10[6] = *(a2 - 2);
                  *(a2 - 2) = v47;
                  int v48 = v10[7];
                  void v10[7] = *(a2 - 1);
                  *(a2 - 1) = v48;
                  int v49 = v10[7];
                  int v50 = v10[5];
                  if (v49 > v50)
                  {
                    int v51 = v10[6];
                    int v52 = v10[3];
                    int v53 = v10[4];
                    void v10[4] = v51;
                    void v10[5] = v49;
                    v10[6] = v53;
                    void v10[7] = v50;
                    if (v49 > v52)
                    {
                      int v54 = v10[1];
                      int v55 = v10[2];
                      uint64_t v10[2] = v51;
                      v10[3] = v49;
                      void v10[4] = v55;
                      void v10[5] = v52;
                      if (v49 > v54)
                      {
                        int v56 = *v10;
                        *uint64_t v10 = v51;
                        v10[1] = v49;
                        uint64_t v10[2] = v56;
                        v10[3] = v54;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 191)
          {
            uint64_t v57 = v10 + 2;
            BOOL v59 = v10 == a2 || v57 == a2;
            if (a4)
            {
              if (!v59)
              {
                uint64_t v60 = 0;
                uint64_t v61 = v10;
                do
                {
                  int v62 = v61[3];
                  int v63 = v61[1];
                  uint64_t v61 = v57;
                  if (v62 > v63)
                  {
                    int v64 = *v57;
                    int v65 = v61[1];
                    uint64_t v66 = v60;
                    while (1)
                    {
                      id v67 = (char *)v10 + v66;
                      int v68 = *(int *)((char *)v10 + v66 + 4);
                      *((_DWORD *)v67 + 2) = *(int *)((char *)v10 + v66);
                      *((_DWORD *)v67 + 3) = v68;
                      if (!v66) {
                        break;
                      }
                      v66 -= 8;
                      if (*((_DWORD *)v67 - 1) >= v65)
                      {
                        id v69 = (int *)((char *)v10 + v66 + 8);
                        goto LABEL_83;
                      }
                    }
                    id v69 = v10;
LABEL_83:
                    int *v69 = v64;
                    v69[1] = v65;
                  }
                  uint64_t v57 = v61 + 2;
                  v60 += 8;
                }
                while (v61 + 2 != a2);
              }
            }
            else if (!v59)
            {
              BOOL v100 = v10 + 3;
              do
              {
                int v101 = v9[3];
                int v102 = v9[1];
                id v9 = v57;
                if (v101 > v102)
                {
                  uint64_t v103 = *(void *)v57;
                  uint64_t v104 = HIDWORD(*(void *)v9);
                  __int16 v105 = v100;
                  do
                  {
                    uint64_t v106 = v105;
                    int v107 = *(v105 - 4);
                    *(v105 - 1) = *(v105 - 3);
                    int v108 = *(v105 - 2);
                    v105 -= 2;
                    *uint64_t v106 = v108;
                  }
                  while (v107 < (int)v104);
                  *(v105 - 1) = v103;
                  *__int16 v105 = v104;
                }
                uint64_t v57 = v9 + 2;
                v100 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v70 = (v12 - 2) >> 1;
              int64_t v71 = v70;
              do
              {
                int64_t v72 = v71;
                if (v70 >= v71)
                {
                  uint64_t v73 = (2 * v71) | 1;
                  unint64_t v74 = &v10[2 * v73];
                  if (2 * v72 + 2 < (uint64_t)v12)
                  {
                    int v75 = v74[1];
                    int v76 = v74[3];
                    v74 += 2 * (v75 > v76);
                    if (v75 > v76) {
                      uint64_t v73 = 2 * v72 + 2;
                    }
                  }
                  if (v74[1] <= v10[2 * v72 + 1])
                  {
                    uint64_t v77 = &v10[2 * v72];
                    int v78 = *v77;
                    int v79 = v77[1];
                    do
                    {
                      float v80 = v77;
                      uint64_t v77 = v74;
                      *float v80 = *v74;
                      v80[1] = v74[1];
                      if (v70 < v73) {
                        break;
                      }
                      uint64_t v81 = (2 * v73) | 1;
                      unint64_t v74 = &v10[2 * v81];
                      uint64_t v82 = 2 * v73 + 2;
                      if (v82 < (uint64_t)v12)
                      {
                        int v83 = v74[1];
                        int v84 = v74[3];
                        v74 += 2 * (v83 > v84);
                        if (v83 > v84) {
                          uint64_t v81 = v82;
                        }
                      }
                      uint64_t result = (int *)v74[1];
                      uint64_t v73 = v81;
                    }
                    while ((int)result <= v79);
                    *uint64_t v77 = v78;
                    v77[1] = v79;
                  }
                }
                int64_t v71 = v72 - 1;
              }
              while (v72);
              uint64_t v85 = (unint64_t)v11 >> 3;
              do
              {
                uint64_t v86 = 0;
                uint64_t v87 = *(void *)v10;
                uint64_t v88 = v10;
                do
                {
                  uint64_t v89 = &v88[2 * v86 + 2];
                  uint64_t v90 = (2 * v86) | 1;
                  uint64_t v91 = 2 * v86 + 2;
                  if (v91 < v85)
                  {
                    int v92 = v89[1];
                    int v93 = v89[3];
                    v89 += 2 * (v92 > v93);
                    if (v92 > v93) {
                      uint64_t v90 = v91;
                    }
                  }
                  *uint64_t v88 = *v89;
                  v88[1] = v89[1];
                  uint64_t v88 = v89;
                  uint64_t v86 = v90;
                }
                while (v90 <= (uint64_t)((unint64_t)(v85 - 2) >> 1));
                if (v89 == a2 - 2)
                {
                  *(void *)uint64_t v89 = v87;
                }
                else
                {
                  *uint64_t v89 = *(a2 - 2);
                  v89[1] = *(a2 - 1);
                  *((void *)a2 - 1) = v87;
                  uint64_t v94 = (char *)v89 - (char *)v10 + 8;
                  if (v94 >= 9)
                  {
                    unint64_t v95 = (((unint64_t)v94 >> 3) - 2) >> 1;
                    if (v10[2 * v95 + 1] > v89[1])
                    {
                      int v96 = *v89;
                      int v97 = v89[1];
                      do
                      {
                        unsigned int v98 = v89;
                        uint64_t v89 = &v10[2 * v95];
                        *unsigned int v98 = *v89;
                        v98[1] = v89[1];
                        if (!v95) {
                          break;
                        }
                        unint64_t v95 = (v95 - 1) >> 1;
                      }
                      while (v10[2 * v95 + 1] > v97);
                      *uint64_t v89 = v96;
                      v89[1] = v97;
                    }
                  }
                }
                a2 -= 2;
              }
              while (v85-- > 2);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          id v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x401)
          {
            sub_1010A9090(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            sub_1010A9090(v9 + 2, v14 - 2, a2 - 4);
            sub_1010A9090(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = sub_1010A9090(v14 - 2, v14, &v9[2 * v13 + 2]);
            uint64_t v15 = *(void *)v9;
            *(void *)id v9 = *(void *)v14;
            *(void *)id v14 = v15;
          }
          else
          {
            uint64_t result = sub_1010A9090(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(v9 - 1) > v9[1]) {
            break;
          }
          uint64_t v32 = *(void *)v9;
          uint64_t v33 = HIDWORD(*(void *)v9);
          if (*(a2 - 1) >= (int)v33)
          {
            __int16 v36 = v9 + 2;
            do
            {
              uint64_t v10 = v36;
              if (v36 >= a2) {
                break;
              }
              int v37 = v36[1];
              v36 += 2;
            }
            while (v37 >= (int)v33);
          }
          else
          {
            uint64_t v34 = v9;
            do
            {
              uint64_t v10 = v34 + 2;
              int v35 = v34[3];
              v34 += 2;
            }
            while (v35 >= (int)v33);
          }
          unsigned int v38 = a2;
          if (v10 < a2)
          {
            int v39 = a2;
            do
            {
              unsigned int v38 = v39 - 2;
              int v40 = *(v39 - 1);
              v39 -= 2;
            }
            while (v40 < (int)v33);
          }
          while (v10 < v38)
          {
            int v41 = *v10;
            *uint64_t v10 = *v38;
            int *v38 = v41;
            int v42 = v10[1];
            v10[1] = v38[1];
            v38[1] = v42;
            do
            {
              int v43 = v10[3];
              v10 += 2;
            }
            while (v43 >= (int)v33);
            do
            {
              int v44 = *(v38 - 1);
              v38 -= 2;
            }
            while (v44 < (int)v33);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            *id v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v32;
          *(v10 - 1) = v33;
        }
        uint64_t v16 = 0;
        uint64_t v17 = *(void *)v9;
        uint64_t v18 = HIDWORD(*(void *)v9);
        do
        {
          int v19 = v9[v16 + 3];
          v16 += 2;
        }
        while (v19 > (int)v18);
        __int16 v20 = &v9[v16];
        BOOL v21 = a2;
        if (v16 == 2)
        {
          uint64_t v24 = a2;
          while (v20 < v24)
          {
            __int16 v22 = v24 - 2;
            int v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 > (int)v18) {
              goto LABEL_22;
            }
          }
          __int16 v22 = v24;
        }
        else
        {
          do
          {
            __int16 v22 = v21 - 2;
            int v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 <= (int)v18);
        }
LABEL_22:
        uint64_t v10 = v20;
        if (v20 < v22)
        {
          __int16 v26 = v22;
          do
          {
            int v27 = *v10;
            *uint64_t v10 = *v26;
            int *v26 = v27;
            int v28 = v10[1];
            v10[1] = v26[1];
            v26[1] = v28;
            do
            {
              int v29 = v10[3];
              v10 += 2;
            }
            while (v29 > (int)v18);
            do
            {
              int v30 = *(v26 - 1);
              v26 -= 2;
            }
            while (v30 <= (int)v18);
          }
          while (v10 < v26);
        }
        if (v10 - 2 != v9)
        {
          *id v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v17;
        *(v10 - 1) = v18;
        if (v20 >= v22) {
          break;
        }
LABEL_33:
        uint64_t result = (int *)sub_1010A88F0(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_1010A916C(v9, v10 - 2);
      uint64_t result = (int *)sub_1010A916C(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_33;
      }
    }
    a2 = v10 - 2;
    if (!v31) {
      continue;
    }
    return result;
  }
}

int *sub_1010A9090(int *result, int *a2, int *a3)
{
  int v3 = a2 + 1;
  int v4 = a2[1];
  BOOL v5 = result + 1;
  int v6 = a3[1];
  if (v4 > result[1])
  {
    int v7 = *result;
    if (v6 <= v4)
    {
      *uint64_t result = *a2;
      *a2 = v7;
      int v11 = result[1];
      result[1] = a2[1];
      a2[1] = v11;
      if (a3[1] <= v11) {
        return result;
      }
      int v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL v5 = a2 + 1;
    }
    else
    {
      *uint64_t result = *a3;
      *a3 = v7;
    }
    int v3 = a3 + 1;
    goto LABEL_10;
  }
  if (v6 > v4)
  {
    int v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    int v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    if (a2[1] > *v5)
    {
      int v10 = *result;
      *uint64_t result = *a2;
      *a2 = v10;
LABEL_10:
      int v13 = *v5;
      *BOOL v5 = *v3;
      *int v3 = v13;
    }
  }
  return result;
}

BOOL sub_1010A916C(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) > a1[1])
      {
        int v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        int v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1010A9090(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1010A9384(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1010A9384(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) > a1[7])
      {
        int v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        int v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        int v20 = a1[7];
        int v21 = a1[5];
        if (v20 > v21)
        {
          int v22 = a1[6];
          int v23 = a1[3];
          int v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 > v23)
          {
            int v25 = a1[1];
            int v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 > v25)
            {
              int v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }
      return 1;
    default:
      int v8 = a1 + 4;
      sub_1010A9090(a1, a1 + 2, a1 + 4);
      int v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (v9[1] > v8[1])
    {
      int v12 = *v9;
      int v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        uint64_t v15 = (int *)((char *)a1 + v14);
        int v16 = *(int *)((char *)a1 + v14 + 20);
        v15[6] = *(int *)((char *)a1 + v14 + 16);
        v15[7] = v16;
        if (v14 == -16) {
          break;
        }
        v14 -= 8;
        if (v15[3] >= v13)
        {
          uint64_t v17 = (int *)((char *)a1 + v14 + 24);
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *uint64_t v17 = v12;
      v17[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    int v8 = v9;
    v10 += 8;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

int *sub_1010A9384(int *a1, int *a2, int *a3, int *a4)
{
  BOOL result = sub_1010A9090(a1, a2, a3);
  if (a4[1] > a3[1])
  {
    int v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    int v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    if (a3[1] > a2[1])
    {
      int v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      int v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      if (a2[1] > a1[1])
      {
        int v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        int v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t sub_1010A944C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = a2;
  sub_100AFEDC0(a1 + 8, a2);
  sub_101189FAC(a1 + 144, *(void *)a1);
  *(void *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1072) = xmmword_101DA5588;
  *(_OWORD *)(a1 + 1088) = unk_101DA5598;
  *(_OWORD *)(a1 + 1104) = xmmword_101DA55A8;
  *(_OWORD *)(a1 + 1120) = unk_101DA55B8;
  *(_OWORD *)(a1 + 1008) = xmmword_101DA5548;
  *(_OWORD *)(a1 + 1024) = unk_101DA5558;
  *(_OWORD *)(a1 + 1040) = xmmword_101DA5568;
  *(_OWORD *)(a1 + 1056) = unk_101DA5578;
  *(_OWORD *)(a1 + 944) = xmmword_101DA5508;
  *(_OWORD *)(a1 + 960) = unk_101DA5518;
  *(_OWORD *)(a1 + 976) = xmmword_101DA5528;
  *(_OWORD *)(a1 + 992) = unk_101DA5538;
  *(_OWORD *)(a1 + 912) = xmmword_101DA54E8;
  *(_OWORD *)(a1 + 928) = unk_101DA54F8;
  *(void *)(a1 + 1144) = 0;
  *(_DWORD *)(a1 + 1168) = 0;
  *(void *)(a1 + 1176) = a3;
  *(_DWORD *)(a1 + 1152) = 0;
  *(void *)(a1 + 1160) = 8;
  *(unsigned char *)(a1 + 1184) = 0;
  uint64_t v5 = sub_1000D3E78();
  sub_10006B564(v5, &v7);
  sub_1000D2988(v7, "MotionLoggerLogPedometer", (BOOL *)(a1 + 1184));
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return a1;
}

void sub_1010A952C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  sub_1000D816C((void *)(v10 + 776));
  _Unwind_Resume(a1);
}

void sub_1010A9558(uint64_t a1, uint64_t a2)
{
  sub_100103240();
  if (sub_10010145C())
  {
    int v4 = sub_10101439C(a2);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10230E560);
    }
    uint64_t v5 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
    {
      sub_101014524(*(void *)(a2 + 16), &__p);
      int v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      uint64_t v7 = *(void *)(a2 + 112);
      *(_DWORD *)int buf = 136446722;
      int v28 = v6;
      __int16 v29 = 2050;
      uint64_t v30 = v7;
      __int16 v31 = 2050;
      uint64_t v32 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[PaceController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}ld,labelState,%{public}ld,", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10230E560);
      }
      sub_101014524(*(void *)(a2 + 16), &v24);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v20 = &v24;
      }
      else {
        int v20 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v21 = *(void *)(a2 + 112);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v20;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v21;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
      uint64_t v26 = v4;
      int v22 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPedometer::PaceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    if (v4)
    {
      long long v8 = *(_OWORD *)a2;
      long long v9 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 928) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 944) = v9;
      *(_OWORD *)(a1 + 912) = v8;
      long long v10 = *(_OWORD *)(a2 + 48);
      long long v11 = *(_OWORD *)(a2 + 64);
      long long v12 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 992) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 1008) = v12;
      *(_OWORD *)(a1 + 960) = v10;
      *(_OWORD *)(a1 + 976) = v11;
      long long v13 = *(_OWORD *)(a2 + 112);
      long long v14 = *(_OWORD *)(a2 + 128);
      long long v15 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 1072) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 1056) = v15;
      *(_OWORD *)(a1 + 1040) = v14;
      *(_OWORD *)(a1 + 1024) = v13;
      long long v16 = *(_OWORD *)(a2 + 176);
      long long v17 = *(_OWORD *)(a2 + 192);
      long long v18 = *(_OWORD *)(a2 + 208);
      *(void *)(a1 + 1136) = *(void *)(a2 + 224);
      *(_OWORD *)(a1 + 1120) = v18;
      *(_OWORD *)(a1 + 1104) = v17;
      *(_OWORD *)(a1 + 1088) = v16;
    }
  }
  else
  {
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_10230E560);
    }
    int v19 = qword_102419038;
    if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
    {
      sub_100103240();
      *(_DWORD *)int buf = 67109120;
      LODWORD(v28) = sub_10010145C();
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "[PaceController] RunningSpeedKF not available (isWatch=%d)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419030 != -1) {
        dispatch_once(&qword_102419030, &stru_10230E560);
      }
      sub_100103240();
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = sub_10010145C();
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLPedometer::PaceController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
  }
}

void sub_1010A9984(uint64_t a1, long long *a2)
{
  sub_100103240();
  if (sub_10010145C())
  {
    sub_10118C894(a1 + 144, a2);
  }
}

double sub_1010A99D8(uint64_t a1, uint64_t a2)
{
  sub_100103240();
  if (sub_10010145C())
  {
    *(void *)&double result = sub_10118CA54(a1 + 144, a2).n128_u64[0];
  }
  return result;
}

void sub_1010A9A2C(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void *sub_1010A9A60(void *result, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a2[1];
  *double result = *a2;
  result[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  result[2] = *a3;
  result[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a4[1];
  result[4] = *a4;
  result[5] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1010A9AB0(void *a1, void *a2, unsigned int a3)
{
  sub_1000E1294((uint64_t *)v26, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsHR", 0);
  int v23 = 0;
  std::string v24 = 0;
  uint64_t v25 = 0;
  double Current = CFAbsoluteTimeGetCurrent();
  double v22 = 0.0;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  sub_1000A699C(*(uint64_t *)buf, "HRRecoveryLastHRRecordId", &v22);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v22 <= 0.0)
  {
    uint64_t v11 = sub_1000A6958();
    sub_1000A699C(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryHR", &v22);
  }
  else
  {
    uint64_t v8 = sub_1000A6958();
    sub_10016332C(v8, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryHR", &v22);
    uint64_t v9 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v9 + 944))(v9);
    uint64_t v10 = sub_1000D3E78();
    sub_10006B564(v10, buf);
    sub_1004CF7DC(*(uint64_t *)buf, "HRRecoveryLastHRRecordId", 0xFFFFFFFFLL);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if ((*(unsigned int (**)(void, void, char **, double, double))(*(void *)*a1 + 16))(*a1, a3 >> 5, &v23, v22, Current) != 100)
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10230E5A0);
    }
    long long v12 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 134218240;
      *(double *)&uint8_t buf[4] = v22;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLHRRecoveryCompanionSyncManager: Failed to fetch input heart rates for time range, startTime : %f, endTime: %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_10230E5A0);
      }
      int v27 = 134218240;
      double v28 = v22;
      __int16 v29 = 2048;
      double v30 = Current;
      std::string::size_type v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "size_t CLHRRecoveryCompanionSyncManager::queryLatestRecordsHR(NSMutableDictionary *, uint32_t)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
  }
  a1[6] = 0xBFF0000000000000;
  long long v13 = v23;
  if (v23 == v24)
  {
    int v19 = v23;
    if (!v23) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  a1[6] = *((void *)v24 - 3);
  id v14 = +[NSMutableArray array];
  long long v15 = v23;
  for (uint64_t i = v24; v15 != i; v15 += 32)
  {
    long long v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)int buf = *(_OWORD *)v15;
    *(_OWORD *)&buf[16] = v17;
    long long v18 = [[CLHRRecoveryInputHRData alloc] initWithHRRecoveryInputHR:buf];
    [v14 addObject:v18];
  }
  [a2 setObject:v14 forKey:@"HRRecoveryInputHRKey"];
  int v19 = v23;
  long long v13 = v24;
  if (v23)
  {
LABEL_17:
    std::string v24 = v19;
    operator delete(v19);
  }
LABEL_18:
  sub_1000E1098(v26);
  return (v13 - v19) >> 5;
}

void sub_1010A9E7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000E1098(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1010A9EE0(uint64_t a1, void *a2, unsigned int a3)
{
  sub_1000E1294((uint64_t *)v28, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsWR", 0);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  double Current = CFAbsoluteTimeGetCurrent();
  double v24 = 0.0;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  sub_1000A699C(*(uint64_t *)buf, "HRRecoveryLastWRRecordId", &v24);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v24 <= 0.0)
  {
    uint64_t v11 = sub_1000A6958();
    sub_1000A699C(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryWR", &v24);
  }
  else
  {
    uint64_t v8 = sub_1000A6958();
    sub_10016332C(v8, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryWR", &v24);
    uint64_t v9 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v9 + 944))(v9);
    uint64_t v10 = sub_1000D3E78();
    sub_10006B564(v10, buf);
    sub_1004CF7DC(*(uint64_t *)buf, "HRRecoveryLastWRRecordId", 0xFFFFFFFFLL);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if ((*(unsigned int (**)(void, unint64_t, char **, double, double))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a3 / 0x38uLL, &v25, v24, Current) != 100)
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10230E5A0);
    }
    long long v12 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 134218240;
      *(double *)&uint8_t buf[4] = v24;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLHRRecoveryCompanionSyncManager: Failed to fetch input work rates for time range, startTime : %f, endTime: %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_10230E5A0);
      }
      int v29 = 134218240;
      double v30 = v24;
      __int16 v31 = 2048;
      double v32 = Current;
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "size_t CLHRRecoveryCompanionSyncManager::queryLatestRecordsWR(NSMutableDictionary *, uint32_t)", "%s\n", v23);
      if (v23 != buf) {
        free(v23);
      }
    }
  }
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  long long v13 = v25;
  if (v25 == v26)
  {
    std::string::size_type v21 = v25;
    if (!v25) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  *(void *)(a1 + 56) = *((void *)v26 - 6);
  id v14 = +[NSMutableArray array];
  long long v15 = v25;
  long long v16 = v26;
  if (v25 != v26)
  {
    do
    {
      long long v17 = *v15;
      long long v18 = v15[1];
      long long v19 = v15[2];
      uint64_t v35 = *((void *)v15 + 6);
      *(_OWORD *)&buf[16] = v18;
      long long v34 = v19;
      *(_OWORD *)int buf = v17;
      int v20 = [[CLHRRecoveryInputWRData alloc] initWithHRRecoveryInputWR:buf];
      [v14 addObject:v20];

      long long v15 = (_OWORD *)((char *)v15 + 56);
    }
    while (v15 != (_OWORD *)v16);
  }
  [a2 setObject:v14 forKey:@"HRRecoveryInputWRKey"];
  std::string::size_type v21 = v25;
  long long v13 = v26;
  if (v25)
  {
LABEL_17:
    uint64_t v26 = v21;
    operator delete(v21);
  }
LABEL_18:
  sub_1000E1098(v28);
  return 0x6DB6DB6DB6DB6DB7 * ((v13 - v21) >> 3);
}

void sub_1010AA2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000E1098(&a15);
  _Unwind_Resume(a1);
}

unint64_t sub_1010AA344(uint64_t a1, void *a2, unsigned int a3)
{
  sub_1000E1294((uint64_t *)v32, (uint64_t)"CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession", 0);
  int v29 = 0;
  double v30 = 0;
  uint64_t v31 = 0;
  double Current = CFAbsoluteTimeGetCurrent();
  double v28 = 0.0;
  uint64_t v7 = sub_1000D3E78();
  sub_10006B564(v7, buf);
  sub_1000A699C(*(uint64_t *)buf, "HRRecoveryLastSessionRecordId", &v28);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v28 <= 0.0)
  {
    uint64_t v11 = sub_1000A6958();
    sub_1000A699C(v11, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoverySession", &v28);
  }
  else
  {
    uint64_t v8 = sub_1000A6958();
    sub_10016332C(v8, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoverySession", &v28);
    uint64_t v9 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v9 + 944))(v9);
    uint64_t v10 = sub_1000D3E78();
    sub_10006B564(v10, buf);
    sub_1004CF7DC(*(uint64_t *)buf, "HRRecoveryLastSessionRecordId", 0xFFFFFFFFLL);
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if ((*(unsigned int (**)(void, unint64_t, char **, double, double))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), a3 / 0xA0uLL, &v29, v28, Current) != 100)
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10230E5A0);
    }
    long long v12 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 134218240;
      *(double *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = Current;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLHRRecoveryCompanionSyncManager: Failed to fetch input sessions for time range, startTime : %f, endTime: %f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_10230E5A0);
      }
      int v33 = 134218240;
      double v34 = v28;
      __int16 v35 = 2048;
      double v36 = Current;
      uint64_t v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "size_t CLHRRecoveryCompanionSyncManager::queryLatestRecordsSession(NSMutableDictionary *, uint32_t)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
  }
  *(void *)(a1 + 64) = 0xBFF0000000000000;
  long long v13 = v29;
  if (v29 == v30)
  {
    uint64_t v25 = v29;
    if (!v29) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  *(void *)(a1 + 64) = *((void *)v30 - 19);
  id v14 = +[NSMutableArray array];
  long long v15 = v29;
  for (uint64_t i = v30; v15 != i; v15 += 160)
  {
    long long v17 = *((_OWORD *)v15 + 1);
    *(_OWORD *)int buf = *(_OWORD *)v15;
    *(_OWORD *)&buf[16] = v17;
    long long v18 = *((_OWORD *)v15 + 2);
    long long v19 = *((_OWORD *)v15 + 3);
    long long v20 = *((_OWORD *)v15 + 5);
    long long v40 = *((_OWORD *)v15 + 4);
    long long v41 = v20;
    long long v38 = v18;
    long long v39 = v19;
    long long v21 = *((_OWORD *)v15 + 6);
    long long v22 = *((_OWORD *)v15 + 7);
    long long v23 = *((_OWORD *)v15 + 9);
    long long v44 = *((_OWORD *)v15 + 8);
    long long v45 = v23;
    long long v42 = v21;
    long long v43 = v22;
    double v24 = [[CLHRRecoverySessionData alloc] initWithHRRecoverySession:buf];
    [v14 addObject:v24];
  }
  [a2 setObject:v14 forKey:@"HRRecoverySessionKey"];
  uint64_t v25 = v29;
  long long v13 = v30;
  if (v29)
  {
LABEL_17:
    double v30 = v25;
    operator delete(v25);
  }
LABEL_18:
  sub_1000E1098(v32);
  return 0xCCCCCCCCCCCCCCCDLL * ((v13 - v25) >> 5);
}

void sub_1010AA748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, id a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1000E1098(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1010AA7AC(uint64_t result)
{
  uint64_t v1 = (uint64_t *)(result + 48);
  if (*(double *)(result + 48) > 0.0)
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10230E5A0);
    }
    uint64_t v2 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *v1;
      *(_DWORD *)int buf = 134217984;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[HR] Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_10230E5A0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRRecoveryCompanionSyncManager::saveCurrentSyncProgressHR()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    uint64_t v4 = sub_1000A6958();
    sub_10016332C(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryHR", v1);
    uint64_t v5 = *(void *)sub_1000A6958();
    return (*(uint64_t (**)(void))(v5 + 944))();
  }
  return result;
}

uint64_t sub_1010AA9BC(uint64_t result)
{
  uint64_t v1 = (uint64_t *)(result + 56);
  if (*(double *)(result + 56) > 0.0)
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10230E5A0);
    }
    uint64_t v2 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *v1;
      *(_DWORD *)int buf = 134217984;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[WR] Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_10230E5A0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRRecoveryCompanionSyncManager::saveCurrentSyncProgressWR()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    uint64_t v4 = sub_1000A6958();
    sub_10016332C(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoveryWR", v1);
    uint64_t v5 = *(void *)sub_1000A6958();
    return (*(uint64_t (**)(void))(v5 + 944))();
  }
  return result;
}

uint64_t sub_1010AABCC(uint64_t result)
{
  uint64_t v1 = (uint64_t *)(result + 64);
  if (*(double *)(result + 64) > 0.0)
  {
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_10230E5A0);
    }
    uint64_t v2 = qword_1024192C8;
    if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = *v1;
      *(_DWORD *)int buf = 134217984;
      uint64_t v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[Session] Saving last Cold Storage sync timestamp: %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024192C0 != -1) {
        dispatch_once(&qword_1024192C0, &stru_10230E5A0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLHRRecoveryCompanionSyncManager::saveCurrentSyncProgressSession()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    uint64_t v4 = sub_1000A6958();
    sub_10016332C(v4, "CMHealthColdStorageWatchServiceLastSyncTimestampHRRecoverySession", v1);
    uint64_t v5 = *(void *)sub_1000A6958();
    return (*(uint64_t (**)(void))(v5 + 944))();
  }
  return result;
}

void sub_1010AADDC(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_1010AAE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 128), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230E708);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSLCSubscription::onFLNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230E708);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSLCSubscription::onFLNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1010AB970(a4, v6, v7, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010AAFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010AAFE0(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  if (*(char *)(a5 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a5;
    uint64_t v21 = *(void *)(a5 + 16);
  }
  if (*(char *)(a5 + 47) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a5 + 24), *(void *)(a5 + 32));
  }
  else
  {
    long long __p = *(_OWORD *)(a5 + 24);
    uint64_t v23 = *(void *)(a5 + 40);
  }
  uint64_t v24 = *(void *)(a5 + 48);
  sub_10001FAF4(a1, a2, a3, a4, (long long *)__dst);
  *(void *)a1 = off_10230E738;
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v21) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)a1 = off_10230E5D0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = off_1022B6DB8;
  uint64_t v10 = operator new(0x20uLL);
  v10[1] = 0;
  uint64_t v10[2] = 0;
  *uint64_t v10 = off_1022B6DF0;
  *((_DWORD *)v10 + 6) = 31337;
  *(void *)(a1 + 280) = v10 + 3;
  *(void *)(a1 + 288) = v10;
  *(void *)(a1 + 272) = off_1022C7F70;
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0x7FEFFFFFFFFFFFFFLL;
  *(_WORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 324) = 0xFFFF;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0xBFF0000000000000;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 352) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 368) = _Q1;
  *(_OWORD *)(a1 + 384) = _Q1;
  *(void *)(a1 + 400) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 408) = 0;
  *(void *)(a1 + 420) = 0;
  *(void *)(a1 + 428) = 0;
  *(void *)(a1 + 412) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 436) = 0;
  *(void *)(a1 + 440) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 448) = 0x7FFFFFFF;
  *(void *)(a1 + 460) = 0;
  *(void *)(a1 + 468) = 0;
  *(void *)(a1 + 452) = 0;
  *(unsigned char *)(a1 + 476) = 0;
  sub_1000C7F88(&v18);
  sub_1000D2988(v18, "ForceMapMatching", (BOOL *)(a1 + 305));
  if (v19) {
    sub_1000DB0A0(v19);
  }
  id v16 = [[objc_msgSend(*(id *)(a1 + 128), "vendor") proxyForService:@"CLClientManager"];
  *(void *)(a1 + 480) = v16;
  [v16 registerDelegate:sub_1000C86C4(a1 + 272) inSilo:[*(id *)(a1 + 128) silo]];
  return a1;
}

void sub_1010AB250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010AB320(uint64_t a1)
{
  *(void *)a1 = off_10230E5D0;

  sub_100789878(a1 + 272);
  uint64_t v2 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_100702CC8(a1);
}

void sub_1010AB3E8(uint64_t a1)
{
  sub_1010AB320(a1);

  operator delete();
}

void *sub_1010AB420@<X0>(uint64_t a1@<X8>)
{
  v3[0] = off_10230E7B0;
  v3[1] = sub_100099E48;
  _OWORD v3[2] = 0;
  v3[3] = v3;
  sub_100134750(__p, "kCLConnectionMessageSignificantLocationChange");
  sub_100BEC2D0((uint64_t)v6, (uint64_t)v3);
  sub_1010ABE20(a1, (unsigned __int8 *)__p, 1);
  sub_100BEC350(v6);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return sub_100BEC350(v3);
}

void sub_1010AB500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1010AB524(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1010AB560@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "SLC");
}

uint64_t sub_1010AB574(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 320)) {
    sub_1000189FC(a1);
  }
  return a1;
}

void sub_1010AB584(uint64_t a1, void *a2)
{
  sub_1001960EC(a1);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if ([a2 BOOLValue])
    {
      sub_10009A6F0(a1, @"powerBudget", (uint64_t)&off_1023941C0);
      uint64_t v4 = &off_1023955F0;
      uint64_t v5 = a1;
LABEL_8:
      sub_10009A6F0(v5, @"distanceThreshold", (uint64_t)v4);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
    uint64_t v8 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      uint64_t v9 = *(void *)(a1 + 64);
      int v14 = 68289538;
      int v15 = 0;
      __int16 v16 = 2082;
      long long v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = a2;
      __int16 v20 = 2114;
      uint64_t v21 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#slc Cannot migrate legacy subscription data\", \"legacySubscriptionData\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_10230E780);
      }
    }
    uint64_t v10 = qword_102419528;
    if (!os_signpost_enabled((os_log_t)qword_102419528)) {
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v13 = *(void *)(a1 + 64);
    int v14 = 68289538;
    int v15 = 0;
    __int16 v16 = 2082;
    long long v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = v13;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#slc Cannot migrate legacy subscription data", "{\"msg%{public}.0s\":\"#slc Cannot migrate legacy subscription data\", \"legacySubscriptionData\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
    goto LABEL_23;
  }
  id v6 = [a2 objectForKeyedSubscript:@"powerBudget"];
  uint64_t v7 = (_UNKNOWN **)[a2 objectForKeyedSubscript:@"distance"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      sub_10009A6F0(a1, @"powerBudget", (uint64_t)v6);
      uint64_t v5 = a1;
      uint64_t v4 = v7;
      goto LABEL_8;
    }
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_10230E780);
  }
  char v11 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
  {
    uint64_t v12 = *(void *)(a1 + 64);
    int v14 = 68289538;
    int v15 = 0;
    __int16 v16 = 2082;
    long long v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = a2;
    __int16 v20 = 2114;
    uint64_t v21 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#slc Cannot migrate legacy subscription data\", \"legacySubscriptionData\":%{public, location:escape_only}@, \"client\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x26u);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
  }
  uint64_t v10 = qword_102419528;
  if (os_signpost_enabled((os_log_t)qword_102419528)) {
    goto LABEL_22;
  }
LABEL_23:
  sub_100196178(a1);
}

uint64_t sub_1010AB960(uint64_t a1)
{
  return sub_100009A0C((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 48));
}

void sub_1010AB970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (sub_1004BABDC(*(double *)(a1 + 328), *(double *)(a1 + 336), *(double *)(a4 + 4), *(double *)(a4 + 12), 0.00000001))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_10230E780);
    }
    id v6 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 64);
      v15[0] = 68289282;
      v15[1] = 0;
      __int16 v16 = 2082;
      long long v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Not sending #SLC to #compensation client because their estimate hasn't changed\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v15, 0x1Cu);
    }
  }
  else
  {
    long long v8 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 324) = *(_OWORD *)a4;
    *(_OWORD *)(a1 + 340) = v8;
    long long v9 = *(_OWORD *)(a4 + 32);
    long long v10 = *(_OWORD *)(a4 + 48);
    long long v11 = *(_OWORD *)(a4 + 80);
    *(_OWORD *)(a1 + 388) = *(_OWORD *)(a4 + 64);
    *(_OWORD *)(a1 + 404) = v11;
    *(_OWORD *)(a1 + 356) = v9;
    *(_OWORD *)(a1 + 372) = v10;
    long long v12 = *(_OWORD *)(a4 + 96);
    long long v13 = *(_OWORD *)(a4 + 112);
    long long v14 = *(_OWORD *)(a4 + 128);
    *(_OWORD *)(a1 + 464) = *(_OWORD *)(a4 + 140);
    *(_OWORD *)(a1 + 436) = v13;
    *(_OWORD *)(a1 + 452) = v14;
    *(_OWORD *)(a1 + 420) = v12;
    sub_10002D85C(a1, a4);
  }
}

id sub_1010ABAF0(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  [v2 setObject:*(id *)(a1 + 64) forKeyedSubscript:@"ClientKeyPath"];
  uint64_t v3 = (void *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3) forKeyedSubscript:@"SubscriptionStorageName"];
  [v2 setObject:+[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", *(void *)(a1 + 136)) forKeyedSubscript:@"AuthContext"];
  [v2 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 321)) forKeyedSubscript:@"RegisteredForCC"];
  [v2 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 320)) forKeyedSubscript:@"RegisteredForSLC"];
  sub_10005BA4C();
  if (v7 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  [v2 setObject:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p) forKeyedSubscript:@"LastLocation"];
  if (v7 < 0) {
    operator delete(__p);
  }
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 304))] forKeyedSubscript:@"Options_AllowsAlteredAccessoryLocations"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 305))] forKeyedSubscript:@"Options_ForceMapMatching"];
  [v2 setObject:[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 306)] forKeyedSubscript:@"Options_IncludePrivateData"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 307))] forKeyedSubscript:@"Options_AtMostOneLocation"];
  [v2 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 312)) forKeyedSubscript:@"Options_StartTime"];
  return v2;
}

void sub_1010ABCDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010ABCF8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010ABD28(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

__n128 sub_1010ABD58(uint64_t a1)
{
  id v2 = (char *)operator new(0x18uLL);
  *(void *)id v2 = off_10230E7B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1010ABDA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10230E7B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1010ABDD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010ABE14()
{
}

uint64_t sub_1010ABE20(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 56 * a3;
    do
    {
      sub_1010ABE9C(a1, a2, (long long *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1010ABE88(_Unwind_Exception *a1)
{
  sub_100BEC3D4(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1010ABE9C(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  char v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_100103388(a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    long long v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (sub_100103744(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  sub_1010AC120(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  long long v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1010AC210((uint64_t)v25, 0);
  return i;
}

void sub_1010AC108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1010AC210((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_1010AC120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = sub_1010AC198(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1010AC180(_Unwind_Exception *a1)
{
  sub_1010AC210(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1010AC198(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100BEBD98((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1010AC1F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010AC210(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100BEC454((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

id sub_1010AC268(uint64_t a1, double a2)
{
  long long v4 = +[NSString stringWithUTF8String:"kCLConnectionMessageSignificantLocationChange"];
  id v5 = [objc_msgSend(*(id *)(a1 + 128), "silo") newTimer];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1010AC448;
  v7[3] = &unk_1022A3020;
  v7[4] = a1;
  [v5 setHandler:v7];
  [v5 setNextFireDelay:a2];
  [objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v4) invalidate];
  return [*(id *)(a1 + 240) setObject:v5 forKeyedSubscript:v4];
}

unsigned char *sub_1010AC34C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  __n128 result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    __n128 result = sub_1000DC48C(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)__n128 result = v11;
  }
  v8[5] = 0;
  void v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_1010AC3D8(_Unwind_Exception *a1)
{
  sub_1010AC3F0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1010AC3F0(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100703258((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_1010AC448(uint64_t a1)
{
}

void sub_1010AC450(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 200);
  sub_100134750(__p, "kCLConnectionMessageSignificantLocationChange");
  sub_1010AC4C0(v1, (unsigned __int8 *)__p);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1010AC4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1010AC4C0(void *a1, unsigned __int8 *a2)
{
  __n128 result = sub_100103284(a1, a2);
  if (result)
  {
    sub_10017FA3C(a1, result, (uint64_t)v4);
    sub_1010AC3F0((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void sub_1010AC510()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DA55F8;
      v0[3] = unk_101DA5608;
      v0[4] = xmmword_101DA5618;
      v0[0] = xmmword_101DA55D8;
      v0[1] = unk_101DA55E8;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1010AC5F0(_Unwind_Exception *a1)
{
}

uint64_t sub_1010AC608(uint64_t a1)
{
  WORD2(v2) = *(_WORD *)(a1 + 4);
  LODWORD(v2) = *(_DWORD *)a1;
  *(_DWORD *)((char *)&v2 + 6) = *(_DWORD *)(a1 + 6);
  return v2;
}

__n128 sub_1010AC630@<Q0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = bswap32(a1[1]) & 0xFFFF0000 | ((unint64_t)bswap32(*((_DWORD *)a1 + 1)) << 32) | (bswap32(*a1) >> 16);
  *(int8x16_t *)(a2 + 8) = vrev32q_s8(*(int8x16_t *)(a1 + 4));
  *(int8x16_t *)(a2 + 24) = vrev32q_s8(*(int8x16_t *)(a1 + 12));
  *(int8x16_t *)(a2 + 40) = vrev32q_s8(*(int8x16_t *)(a1 + 20));
  *(_DWORD *)(a2 + 192) = bswap32(*((_DWORD *)a1 + 48));
  *(void *)(a2 + 56) = bswap64(*((void *)a1 + 7));
  *(void *)(a2 + 196) = bswap64(*(void *)(a1 + 98));
  long long v2 = *((_OWORD *)a1 + 4);
  long long v3 = *((_OWORD *)a1 + 5);
  long long v4 = *((_OWORD *)a1 + 7);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)a1 + 6);
  *(_OWORD *)(a2 + 112) = v4;
  *(_OWORD *)(a2 + 64) = v2;
  *(_OWORD *)(a2 + 80) = v3;
  __n128 result = *((__n128 *)a1 + 8);
  long long v6 = *((_OWORD *)a1 + 9);
  long long v7 = *((_OWORD *)a1 + 11);
  *(_OWORD *)(a2 + 160) = *((_OWORD *)a1 + 10);
  *(_OWORD *)(a2 + 176) = v7;
  *(__n128 *)(a2 + 128) = result;
  *(_OWORD *)(a2 + 144) = v6;
  return result;
}

double sub_1010AC6C8(unsigned int a1)
{
  if (a1 >= 0xF) {
    unsigned int v1 = 15;
  }
  else {
    unsigned int v1 = a1;
  }
  return dbl_101DA5848[v1];
}

double sub_1010AC6E4(unsigned int a1)
{
  if (a1 >= 0xF) {
    unsigned int v1 = 15;
  }
  else {
    unsigned int v1 = a1;
  }
  return dbl_101DA58C8[v1];
}

void sub_1010AC700()
{
}

void sub_1010AC99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      sub_1010AD6D8(v21, 0);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

BOOL sub_1010ACA34(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a2)
  {
    sub_101AA0194();
    goto LABEL_22;
  }
  if (*(int *)(a2 + 32) < 1 || !*(void *)(a2 + 40))
  {
    sub_101AA0304();
LABEL_22:
    __break(1u);
  }
  *(void *)((char *)&v23 + 4) = 192;
  LODWORD(v23) = 109498;
  HIDWORD(v23) = 381;
  long long v24 = 0uLL;
  *(void *)&v25[0] = 0;
  *(int32x2_t *)((char *)v25 + 12) = vdup_n_s32(0xC47A0000);
  DWORD2(v25[0]) = 0;
  DWORD1(v25[1]) = -998637568;
  memset((char *)&v25[1] + 8, 0, 148);
  if (*(void *)(a2 + 24) < 0xCuLL) {
    return 1;
  }
  uint64_t v7 = 0;
  while (1)
  {
    unint64_t v8 = sub_1010ACCA4(a1, (long long *)a2, v7);
    if ((unsigned __int16)v8 != 43962) {
      return 0;
    }
    if (WORD1(v8) != 1) {
      break;
    }
    if (HIDWORD(v8) != 192 || (unint64_t)(v7 + 204) > *(void *)(a2 + 24)) {
      return 0;
    }
    sub_1010ACEF0((long long *)a2, v7, (uint64_t)&v11);
    v25[8] = v21;
    v25[9] = *(_OWORD *)v22;
    *(_OWORD *)((char *)&v25[9] + 12) = *(_OWORD *)&v22[12];
    v25[4] = v17;
    v25[5] = v18;
    v25[6] = v19;
    v25[7] = v20;
    v25[0] = v13;
    v25[1] = v14;
    void v25[2] = v15;
    void v25[3] = v16;
    v7 += 204;
    long long v23 = v11;
    long long v24 = v12;
LABEL_16:
    if ((unint64_t)(v7 + 12) > *(void *)(a2 + 24)) {
      return 1;
    }
  }
  if (WORD1(v8) == 2)
  {
    if (HIDWORD(v8) != 8) {
      return 0;
    }
    uint64_t v9 = v7 + 20;
    if ((unint64_t)(v7 + 20) > *(void *)(a2 + 24)) {
      return 0;
    }
    sub_1010AD120((long long *)a2, v7, (int8x8_t *)&v11);
    uint64_t v10 = (v12 * HIDWORD(v11));
    uint64_t v7 = v9 + v10;
    sub_1010AD384((uint64_t)a3, (uint64_t)&v23, SHIDWORD(v11), v9 + v10 + 20, *(_DWORD *)(a2 + 24));
    sub_1010AD7AC(a3);
    goto LABEL_16;
  }
  return WORD1(v8) == 3;
}

unint64_t sub_1010ACCA4(uint64_t a1, long long *a2, uint64_t a3)
{
  if ((unint64_t)(a3 + 12) > *((void *)a2 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v16, 0xCuLL);
    long long v6 = std::string::insert(&v16, 0, "Not enough data left to read block of size ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    unint64_t v8 = std::string::append(&v17, " in wifi tile: ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)a2 + 23) < 0)
    {
      sub_1000DC48C(&v14, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v14 = *a2;
      uint64_t v15 = *((void *)a2 + 2);
    }
    if (v15 >= 0) {
      uint64_t v10 = (const std::string::value_type *)&v14;
    }
    else {
      uint64_t v10 = (const std::string::value_type *)v14;
    }
    if (v15 >= 0) {
      std::string::size_type v11 = HIBYTE(v15);
    }
    else {
      std::string::size_type v11 = *((void *)&v14 + 1);
    }
    long long v12 = std::string::append(&v18, v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v19);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10230E898;
  }
  return bswap32(*(unsigned __int16 *)(*((void *)a2 + 5) + a3 + 2)) & 0xFFFF0000 | ((unint64_t)bswap32(*(_DWORD *)(*((void *)a2 + 5) + a3 + 4)) << 32) | (bswap32(*(unsigned __int16 *)(*((void *)a2 + 5) + a3)) >> 16);
}

void sub_1010ACE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

double sub_1010ACEF0@<D0>(long long *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  if ((unint64_t)(a2 + 204) > *((void *)a1 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v17, 0xCCuLL);
    long long v7 = std::string::insert(&v17, 0, "Not enough data left to read block of size ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    long long v9 = std::string::append(&v18, " in wifi tile: ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)a1 + 23) < 0)
    {
      sub_1000DC48C(&v15, *(void **)a1, *((void *)a1 + 1));
    }
    else
    {
      long long v15 = *a1;
      uint64_t v16 = *((void *)a1 + 2);
    }
    if (v16 >= 0) {
      std::string::size_type v11 = (const std::string::value_type *)&v15;
    }
    else {
      std::string::size_type v11 = (const std::string::value_type *)v15;
    }
    if (v16 >= 0) {
      std::string::size_type v12 = HIBYTE(v16);
    }
    else {
      std::string::size_type v12 = *((void *)&v15 + 1);
    }
    long long v13 = std::string::append(&v19, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v20);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10230E898;
  }
  long long v4 = (unsigned __int16 *)(*((void *)a1 + 5) + a2);

  *(void *)&double result = sub_1010AC630(v4, a3).n128_u64[0];
  return result;
}

void sub_1010AD06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

int8x8_t sub_1010AD120@<D0>(long long *a1@<X1>, uint64_t a2@<X2>, int8x8_t *a3@<X8>)
{
  if ((unint64_t)(a2 + 20) > *((void *)a1 + 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v17, 0x14uLL);
    long long v7 = std::string::insert(&v17, 0, "Not enough data left to read block of size ");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    long long v9 = std::string::append(&v18, " in wifi tile: ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (*((char *)a1 + 23) < 0)
    {
      sub_1000DC48C(&v15, *(void **)a1, *((void *)a1 + 1));
    }
    else
    {
      long long v15 = *a1;
      uint64_t v16 = *((void *)a1 + 2);
    }
    if (v16 >= 0) {
      std::string::size_type v11 = (const std::string::value_type *)&v15;
    }
    else {
      std::string::size_type v11 = (const std::string::value_type *)v15;
    }
    if (v16 >= 0) {
      std::string::size_type v12 = HIBYTE(v16);
    }
    else {
      std::string::size_type v12 = *((void *)&v15 + 1);
    }
    long long v13 = std::string::append(&v19, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v20);
    exception->__vftable = (std::runtime_error_vtbl *)&off_10230E898;
  }
  long long v4 = (int8x8_t *)(*((void *)a1 + 5) + a2);
  *a3 = (int8x8_t)(bswap32(v4->u16[1]) & 0xFFFF0000 | ((unint64_t)bswap32(v4->u32[1]) << 32) | (bswap32(v4->u16[0]) >> 16));
  int8x8_t result = vrev32_s8(v4[1]);
  a3[1] = result;
  a3[2].i32[0] = bswap32(v4[2].u32[0]);
  return result;
}

void sub_1010AD2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_1010AD384(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  int v9 = a3;
  int v7 = a5;
  int v8 = a4;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, int *, int *))(*(void *)v5 + 48))(v5, a2, &v9, &v8, &v7);
}

void sub_1010AD3E4(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_10230E870;
  if (SHIBYTE(this[5].__imp_.__imp_) < 0) {
    operator delete((void *)this[4].__imp_.__imp_);
  }
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }

  std::runtime_error::~runtime_error(this);
}

std::string *sub_1010AD464(std::string *this)
{
  int v2 = this[1].__r_.__value_.__r.__words[1];
  if (v2 >= 1) {
    close(v2);
  }
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = -1;
  long long v3 = (void *)this[1].__r_.__value_.__r.__words[2];
  if (v3)
  {
    std::string::pointer data = this[1].__r_.__value_.__l.__data_;
    if (data) {
      munmap(v3, (size_t)data);
    }
  }
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[1].__r_.__value_.__r.__words[0] = 0;

  return std::string::assign(this, "");
}

uint64_t sub_1010AD4D4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::runtime_error *sub_1010AD514(std::runtime_error *a1, long long *a2, int a3, uint64_t a4)
{
  int v8 = std::runtime_error::runtime_error(a1, (const std::string *)a2);
  v8[1].__vftable = 0;
  v8->__vftable = (std::runtime_error_vtbl *)off_10230E870;
  v8[1].__imp_.__imp_ = 0;
  v8[2].__vftable = 0;
  LODWORD(v8[2].__imp_.__imp_) = a3;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1000DC48C(&v8[3], *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    std::runtime_error v9 = *(std::runtime_error *)a4;
    v8[4].__vftable = *(std::runtime_error_vtbl **)(a4 + 16);
    void v8[3] = v9;
  }
  p_imp = &a1[4].__imp_;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(p_imp, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v11 = *a2;
    a1[5].__imp_.__imp_ = (const char *)*((void *)a2 + 2);
    *(_OWORD *)&p_imp->__imp_ = v11;
  }
  return a1;
}

void sub_1010AD5D8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v3);
  }
  std::runtime_error::~runtime_error((std::runtime_error *)v1);
  _Unwind_Resume(a1);
}

void sub_1010AD614(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)off_10230E870;
  if (SHIBYTE(this[5].__imp_.__imp_) < 0) {
    operator delete((void *)this[4].__imp_.__imp_);
  }
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  if (SHIBYTE(this[2].__vftable) < 0) {
    operator delete(this[1].__vftable);
  }
  std::runtime_error::~runtime_error(this);

  operator delete();
}

void sub_1010AD6A8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1010AD6D8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1010AD4D4(result);
    operator delete();
  }
  return result;
}

void *sub_1010AD728(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1010AD7AC(void *a1)
{
  int v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1010AD834(uint64_t a1)
{
  if (*(void *)(a1 + 2600))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v1 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "CLMM,Vehicle,Maps API already initialized", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()", "%s\n", v2);
    if (v2 == (char *)buf) {
      return;
    }
LABEL_22:
    free(v2);
    return;
  }
  *(void *)(a1 + 2608) = dispatch_queue_create("cl_geo_access_map_feature_geometry_queue", 0);
  id v4 = [objc_alloc((Class)GEOMapFeatureAccess) initWithQueue:*(void *)(a1 + 2608)];
  *(void *)(a1 + 2600) = v4;
  if (!v4) {
    sub_101AA0474();
  }
  [v4 setAllowNetworkTileLoad:1];
  [*(id *)(a1 + 2600) setFlipNegativeTravelDirectionRoads:1];
  [*(id *)(a1 + 2600) setVisitDoubleTravelDirectionRoadsTwice:1];
  [*(id *)(a1 + 2600) setAllowStaleData:1];
  [*(id *)(a1 + 2600) setAllowOfflineData:1];
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_10230EA20);
  }
  uint64_t v5 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = [*(id *)(a1 + 2600) allowStaleData];
    *(_DWORD *)int buf = 67240192;
    unsigned int v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLMM,Vehicle,using maps API,stale data,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    [*(id *)(a1 + 2600) allowStaleData];
    int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGeoMapFeatureAccessGeometry::initializeMapsAPI()", "%s\n", v2);
    if (v2 != (char *)buf) {
      goto LABEL_22;
    }
  }
}

id sub_1010ADB90(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    std::runtime_error v9 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 8);
      *(_DWORD *)int buf = 134349056;
      uint64_t v66 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v42 = *(void *)(a1 + 8);
    int v62 = 134349056;
    uint64_t v63 = v42;
    long long v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "%s\n", v39);
    goto LABEL_63;
  }
  if (*(unsigned char *)(a1 + 33)) {
    return 0;
  }
  if (!*(void *)(a1 + 2600) || *(void *)a2 == 0) {
    return 0;
  }
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  unsigned int v6 = *(uint64_t **)(*(void *)a2 + 136);
  context = v5;
  if (*(uint64_t **)(*(void *)a2 + 144) == v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
  }
  uint64_t v52 = v7;
  uint64_t v53 = v8;
  id v13 = +[NSMutableArray array];
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472;
  v50[2] = sub_1010AE4D4;
  v50[3] = &unk_10230E8E8;
  v50[4] = v13;
  int v51 = v50;
  long long v14 = operator new(0x20uLL);
  void *v14 = off_10230EA50;
  v14[1] = a1;
  void v14[2] = &v52;
  v14[3] = &v51;
  int v64 = v14;
  ++*(_DWORD *)(a1 + 36);
  sub_1010B5194((uint64_t)v61, (uint64_t)&v62);
  BOOL v15 = sub_1010AE548((uint64_t)v61);
  sub_100ECD778(v61);
  if (v15)
  {
    long long v48 = 0u;
    long long v49 = 0u;
    long long v46 = 0u;
    long long v47 = 0u;
    id v16 = [v13 countByEnumeratingWithState:&v46 objects:v60 count:16];
    if (v16)
    {
      std::string v17 = &qword_102419000;
      uint64_t v18 = *(void *)v47;
      while (2)
      {
        for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v47 != v18) {
            objc_enumerationMutation(v13);
          }
          std::string v20 = *(void **)(*((void *)&v46 + 1) + 8 * i);
          if ([v20 roadID] == **(id **)a2)
          {
            if ((unint64_t)[v20 coordinateCount] > 1)
            {
              id v29 = [v20 coordinateCount];
              double v30 = *(double **)(*(void *)a2 + 136);
              if (*(double **)(*(void *)a2 + 144) == v30)
              {
                double v31 = 0.0;
                double v32 = 0.0;
              }
              else
              {
                double v31 = *v30;
                double v32 = v30[1];
              }
              if (sub_1004BABDC(v31, v32, *(double *)[v20 coordinates], *((double *)objc_msgSend(v20, "coordinates") + 1), 0.00000001))
              {
                uint64_t v33 = *(void *)(*(void *)a2 + 144);
                if (v33 == *(void *)(*(void *)a2 + 136))
                {
                  double v34 = 0.0;
                  double v35 = 0.0;
                }
                else
                {
                  double v34 = *(double *)(v33 - 16);
                  double v35 = *(double *)(v33 - 8);
                }
                if (sub_1004BABDC(v34, v35, *((double *)[v20 coordinates] + 2 * ((uint64_t)v29 - 1)), *((double *)objc_msgSend(v20, "coordinates") + 2 * ((uint64_t)v29 - 1) + 1), 0.00000001))
                {
                  id v11 = v20;
                  goto LABEL_59;
                }
              }
            }
            else
            {
              if (v17[134] != -1) {
                dispatch_once(&qword_102419430, &stru_10230EA20);
              }
              long long v21 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v22 = *(void *)(a1 + 8);
                id v23 = [v20 roadID];
                id v24 = [v20 coordinateCount];
                *(_DWORD *)int buf = 134349569;
                uint64_t v66 = v22;
                __int16 v67 = 2049;
                id v68 = v23;
                __int16 v69 = 2050;
                id v70 = v24;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject, GEOMapFeatureRoad id,%{private}lld,has less than two coordinate,%{public}ld", buf, 0x20u);
                std::string v17 = &qword_102419000;
              }
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (v17[134] != -1) {
                  dispatch_once(&qword_102419430, &stru_10230EA20);
                }
                uint64_t v25 = *(void *)(a1 + 8);
                id v26 = [v20 roadID];
                id v27 = [v20 coordinateCount];
                int v54 = 134349569;
                uint64_t v55 = v25;
                __int16 v56 = 2049;
                id v57 = v26;
                __int16 v58 = 2050;
                id v59 = v27;
                double v28 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "%s\n", v28);
                std::string v17 = &qword_102419000;
                if (v28 != (char *)buf) {
                  free(v28);
                }
              }
            }
          }
        }
        id v16 = [v13 countByEnumeratingWithState:&v46 objects:v60 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }
    sub_100ECD778(&v62);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    double v36 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = *(void *)(a1 + 8);
      *(_DWORD *)int buf = 134349056;
      uint64_t v66 = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject Unable to find roads", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v38 = *(void *)(a1 + 8);
    int v62 = 134349056;
    uint64_t v63 = v38;
    long long v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "%s\n", v39);
LABEL_63:
    if (v39 != (char *)buf) {
      free(v39);
    }
    return 0;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_10230EA20);
  }
  long long v40 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v41 = *(void *)(a1 + 8);
    *(_DWORD *)int buf = 134349056;
    uint64_t v66 = v41;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (getGeoMapFeatureRoadObject)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v43 = *(void *)(a1 + 8);
    int v54 = 134349056;
    uint64_t v55 = v43;
    long long v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "GEOMapFeatureRoad *CLGeoMapFeatureAccessGeometry::getGeoMapFeatureRoadObject(const CLMapRoadPtr &) const", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  id v11 = 0;
LABEL_59:
  sub_100ECD778(&v62);
  return v11;
}

void sub_1010AE484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
}

id sub_1010AE4D4(uint64_t a1, void *a2)
{
  if (([a2 isRail] & 1) != 0
    || (id result = [a2 travelDirection], result != 6)
    && (id result = [a2 travelDirection], result != 255))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    return [v5 addObject:a2];
  }
  return result;
}

BOOL sub_1010AE548(uint64_t a1)
{
  uint64_t v25 = 0;
  id v26 = &v25;
  uint64_t v27 = 0x2020000000;
  char v28 = 0;
  uint64_t v19 = 0;
  std::string v20 = &v19;
  uint64_t v21 = 0x3052000000;
  uint64_t v22 = sub_1010B49F4;
  id v23 = sub_1010B4A04;
  dispatch_group_t v24 = 0;
  dispatch_group_t v24 = dispatch_group_create();
  uint64_t v15 = 0;
  id v16 = &v15;
  uint64_t v17 = 0x2020000000;
  uint64_t v18 = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1010B4A10;
  v14[3] = &unk_102301668;
  v14[4] = &v25;
  v14[5] = &v19;
  v14[6] = &v15;
  dispatch_group_enter((dispatch_group_t)v20[5]);
  int v2 = (void *)sub_100ECD600(a1, (uint64_t)v14);
  long long v3 = v20[5];
  dispatch_time_t v4 = dispatch_time(0, 100000000);
  intptr_t v5 = dispatch_group_wait(v3, v4);
  v16[3] = v5;
  if (v5)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    unsigned int v6 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = v16[3];
      *(_DWORD *)int buf = 134349056;
      uint64_t v32 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning CLMM, GeoMapFeatureAccess query timed out,%{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v11 = v16[3];
      int v29 = 134349056;
      uint64_t v30 = v11;
      std::string::size_type v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    [v2 cancel];
  }
  else if (v20[5])
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      LOWORD(v29) = 0;
      id v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }

    v20[5] = 0;
  }
  if (v16[3]) {
    BOOL v9 = 0;
  }
  else {
    BOOL v9 = *((unsigned char *)v26 + 24) == 0;
  }
  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v19, 8);
  _Block_object_dispose(&v25, 8);
  return v9;
}

void sub_1010AE9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

uint64_t sub_1010AE9F4(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v4 = a1;
  double v109 = a4;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v18 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(v4 + 8);
      *(_DWORD *)int buf = 134349056;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v85 = *(void *)(v4 + 8);
      *(_DWORD *)long long v111 = 134349056;
      *(void *)&v111[4] = v85;
      uint64_t v86 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v86);
      if (v86 != (char *)buf) {
        free(v86);
      }
    }
    return 0;
  }
  long long v108 = *(_OWORD *)(a3 + 56);
  double v8 = round(a4);
  unsigned int v9 = (v8 + v8);
  if (v9 >= 0x1F4) {
    unint64_t v10 = 500;
  }
  else {
    unint64_t v10 = v9;
  }
  __int16 v105 = 0;
  uint64_t v106 = 0;
  uint64_t v107 = 0;
  sub_1010AFD70((uint64_t *)&v105, v10);
  uint64_t v97 = v4;
  if (*(unsigned char *)(v4 + 33))
  {
    if (!*(void *)(v4 + 16))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v77 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v78 = *(void *)(v4 + 8);
        *(_DWORD *)int buf = 134349056;
        *(void *)&uint8_t buf[4] = v78;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,roadsWithinDistance,fRoadGeometryBuffer is unexpectedly nullptr", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_127;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v79 = *(void *)(v4 + 8);
      *(_DWORD *)long long v111 = 134349056;
      *(void *)&v111[4] = v79;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v17);
      goto LABEL_113;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v11 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(v4 + 8);
      uint64_t v13 = (uint64_t)(*(void *)(*(void *)(v4 + 16) + 336) - *(void *)(*(void *)(v4 + 16) + 328)) >> 4;
      *(_DWORD *)int buf = 134349312;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,RoadBuffer,findRoadsNear fRoadBuffer.size,%{public}lu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v87 = *(void *)(v4 + 8);
      uint64_t v88 = (uint64_t)(*(void *)(*(void *)(v4 + 16) + 336) - *(void *)(*(void *)(v4 + 16) + 328)) >> 4;
      *(_DWORD *)long long v111 = 134349312;
      *(void *)&v111[4] = v87;
      *(_WORD *)&v111[12] = 2050;
      *(void *)&v111[14] = v88;
      uint64_t v89 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v89);
      if (v89 != (char *)buf) {
        free(v89);
      }
    }
    if ((sub_100D213E0(*(void *)(v4 + 16), (uint64_t *)&v105, 1, *(double *)(a3 + 56), *(double *)(a3 + 64), v109) & 1) == 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      long long v14 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(v4 + 8);
        *(_DWORD *)int buf = 134349056;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,Warning,RoadBuffer,findRoadsNear returned false", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_127;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v16 = *(void *)(v4 + 8);
      *(_DWORD *)long long v111 = 134349056;
      *(void *)&v111[4] = v16;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v17);
LABEL_113:
      if (v17 != (char *)buf) {
        free(v17);
      }
LABEL_127:
      uint64_t v20 = 0;
      goto LABEL_128;
    }
  }
  else
  {
    id v21 = +[NSMutableArray array];
    v104[0] = _NSConcreteStackBlock;
    v104[1] = 3221225472;
    v104[2] = sub_1010AFE04;
    v104[3] = &unk_10230E8E8;
    v104[4] = v21;
    *(void *)&long long v142 = v104;
    uint64_t v22 = operator new(0x28uLL);
    void *v22 = off_10230EAD0;
    v22[1] = v4;
    void v22[2] = &v108;
    v22[3] = &v109;
    v22[4] = &v142;
    *(void *)&v111[24] = v22;
    ++*(_DWORD *)(v4 + 36);
    sub_1010B5194((uint64_t)v141, (uint64_t)v111);
    BOOL v23 = sub_1010AE548((uint64_t)v141);
    sub_100ECD778(v141);
    if (!v23)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      float v80 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v81 = *(void *)(v4 + 8);
        *(_DWORD *)int buf = 134349056;
        *(void *)&uint8_t buf[4] = v81;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (roadsWithinDistance)", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        unint64_t v90 = *(void *)(v4 + 8);
        v134.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)v134.n128_u64 + 4) = v90;
        uint64_t v91 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v91);
        if (v91 != (char *)buf) {
          free(v91);
        }
      }
      sub_100ECD778(v111);
      goto LABEL_127;
    }
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    id v24 = [v21 countByEnumeratingWithState:&v100 objects:v140 count:16];
    if (v24)
    {
      uint64_t v25 = *(void *)v101;
      do
      {
        for (uint64_t i = 0; i != v24; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v101 != v25) {
            objc_enumerationMutation(v21);
          }
          double v27 = sub_100D25C4C(*(void **)(*((void *)&v100 + 1) + 8 * i), 1, (std::string **)buf);
          if (*(void *)buf) {
            sub_100D247D0((uint64_t *)&v105, (long long *)buf);
          }
          if (*(void *)&buf[8]) {
            sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
          }
        }
        id v24 = [v21 countByEnumeratingWithState:&v100 objects:v140 count:16];
      }
      while (v24);
    }
    sub_100ECD778(v111);
  }
  char v28 = v105;
  uint64_t v20 = 1;
  unsigned int v98 = v106;
  if (v105 == v106) {
    goto LABEL_128;
  }
  uint64_t v94 = v7;
  int v29 = (double *)(v4 + 56);
  __asm { FMOV            V0.2D, #-1.0 }
  long long v95 = _Q0;
  while (2)
  {
    if (!*v28)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v7 = v94;
      uint64_t v82 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v83 = *(void *)(v4 + 8);
        *(_DWORD *)int buf = 134349056;
        *(void *)&uint8_t buf[4] = v83;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        uint64_t v92 = *(void *)(v97 + 8);
        *(_DWORD *)long long v111 = 134349056;
        *(void *)&v111[4] = v92;
        int v93 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v93);
        if (v93 != (char *)buf) {
          free(v93);
        }
        uint64_t v7 = v94;
      }
      sub_10017FF2C(a2);
      goto LABEL_127;
    }
    if (!sub_10039D6C0(*v28)) {
      goto LABEL_90;
    }
    __n128 v134 = 0uLL;
    float v135 = 0.0;
    __int16 v136 = 1;
    float v137 = 0.0;
    unint64_t v139 = 0;
    long long v138 = 0uLL;
    *(void *)long long v111 = 0;
    *(void *)&v111[8] = 0;
    *(_OWORD *)&v111[16] = v95;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    unint64_t v114 = 0xBFF0000000000000;
    uint64_t v126 = 0;
    int v127 = 0;
    memset(&v124[32], 0, 32);
    __int16 v125 = 0;
    long long v128 = 0u;
    long long v129 = 0u;
    long long v130 = 0u;
    memset(v131, 0, 27);
    memset(&v131[32], 0, 48);
    long long v123 = 0u;
    memset(v124, 0, 30);
    long long v121 = 0u;
    long long v122 = 0u;
    long long v119 = 0u;
    long long v120 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    unint64_t v133 = 0xBFF0000000000000;
    uint64_t v132 = 0;
    uint64_t v35 = *v28;
    double v36 = *(double **)(*v28 + 136);
    unint64_t v37 = *(void *)(*v28 + 144) - (void)v36;
    unint64_t v99 = 0xBFF0000000000000;
    if ((int)(v37 >> 4) <= 1)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      __int16 v58 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      uint64_t v59 = v97;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        LOWORD(v142) = 0;
        int64_t v72 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v72);
        if (v72 != (char *)buf) {
          free(v72);
        }
        uint64_t v59 = v97;
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v60 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v61 = *(void *)(v59 + 8);
        *(_DWORD *)int buf = 134349056;
        *(void *)&uint8_t buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_70;
      }
      bzero(buf, 0x65CuLL);
      uint64_t v4 = v97;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v73 = *(void *)(v97 + 8);
      LODWORD(v142) = 134349056;
      *(void *)((char *)&v142 + 4) = v73;
      unint64_t v74 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v74);
      if (v74 != (char *)buf) {
        free(v74);
      }
      goto LABEL_84;
    }
    double v38 = *v36;
    double v39 = v36[1];
    *(void *)int buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&long long v142 = 0;
    sub_1000F17A8(v29, (double *)buf, (double *)&buf[8], (double *)&v142, *(double *)&v108, *((double *)&v108 + 1), 0.0, v38, v39, 0.0);
    uint64_t v40 = 0;
    uint64_t v41 = (v37 >> 4) - 1;
    double v42 = 0.0;
    double v43 = -1.0;
    double v44 = 0.0;
    do
    {
      uint64_t v45 = *(void *)(v35 + 136) + v40;
      double v46 = *(double *)(v45 + 16);
      double v47 = *(double *)(v45 + 24);
      long long v142 = 0uLL;
      uint64_t v110 = 0;
      sub_1000F17A8(v29, (double *)&v142, (double *)&v142 + 1, (double *)&v110, *(double *)&v108, *((double *)&v108 + 1), 0.0, v46, v47, 0.0);
      double v48 = (*(double *)buf - *(double *)&v142) * (*(double *)buf - *(double *)&v142)
          + (*(double *)&buf[8] - *((double *)&v142 + 1)) * (*(double *)&buf[8] - *((double *)&v142 + 1));
      double v49 = 0.0 - *(double *)buf;
      if (v48 < 0.001)
      {
        double v50 = v49 * v49;
        double v51 = 0.0;
        double v52 = 0.0 - *(double *)&buf[8];
LABEL_48:
        double v53 = v50 + v52 * v52;
        goto LABEL_53;
      }
      double v51 = ((0.0 - *(double *)&buf[8]) * (*((double *)&v142 + 1) - *(double *)&buf[8])
           + v49 * (*(double *)&v142 - *(double *)buf))
          / v48;
      if (v51 >= 0.0)
      {
        if (v51 <= 1.0)
        {
          double v50 = (0.0 - (*(double *)buf + (*(double *)&v142 - *(double *)buf) * v51))
              * (0.0 - (*(double *)buf + (*(double *)&v142 - *(double *)buf) * v51));
          double v52 = 0.0 - (*(double *)&buf[8] + (*((double *)&v142 + 1) - *(double *)&buf[8]) * v51);
          goto LABEL_48;
        }
        double v53 = (0.0 - *(double *)&v142) * (0.0 - *(double *)&v142)
            + (0.0 - *((double *)&v142 + 1)) * (0.0 - *((double *)&v142 + 1));
        double v51 = 1.0;
      }
      else
      {
        double v53 = v49 * v49 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
        double v51 = 0.0;
      }
LABEL_53:
      double v54 = sqrt(v48);
      double v55 = sqrt(v53);
      BOOL v56 = v43 < 0.0;
      if (v55 < v43) {
        BOOL v56 = 1;
      }
      double v57 = v44 + v54 * v51;
      if (v56)
      {
        double v43 = v55;
        double v42 = v57;
      }
      double v44 = v44 + v54;
      *(_OWORD *)int buf = v142;
      v40 += 16;
      --v41;
    }
    while (v41);
    double v63 = v42 / v44;
    if (v44 < 0.001) {
      double v63 = 0.0;
    }
    unint64_t v99 = *(void *)&v63;
    unsigned __int8 v64 = *(_DWORD *)(*v28 + 72) != 2;
    uint64_t v4 = v97;
    if (!sub_101188D84(v97, (uint64_t)v111, (double **)v28, v64, (double *)&v99, 1))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      id v70 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v71 = *(void *)(v97 + 8);
        *(_DWORD *)int buf = 134349056;
        *(void *)&uint8_t buf[4] = v71;
        _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,interpolateOnRoad returned false", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        uint64_t v75 = *(void *)(v97 + 8);
        LODWORD(v142) = 134349056;
        *(void *)((char *)&v142 + 4) = v75;
        int v76 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, BOOL) const", "%s\n", v76);
        if (v76 != (char *)buf) {
          free(v76);
        }
LABEL_70:
        int v62 = 0;
        uint64_t v4 = v97;
        goto LABEL_85;
      }
LABEL_84:
      int v62 = 0;
      goto LABEL_85;
    }
    unint64_t v66 = *v28;
    unint64_t v65 = v28[1];
    if (v65) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v67 = (std::__shared_weak_count *)v134.n128_u64[1];
    v134.n128_u64[0] = v66;
    v134.n128_u64[1] = v65;
    if (v67) {
      sub_1000DB0A0(v67);
    }
    float v68 = v43;
    float v135 = v68;
    long long v138 = v121;
    float v69 = *(double *)&v122;
    float v137 = v69;
    unint64_t v139 = v99;
    __int16 v136 = v64;
    sub_1010AFE78((__n128 **)a2, &v134);
    int v62 = 1;
LABEL_85:
    if (SHIBYTE(v120) < 0) {
      operator delete(*((void **)&v119 + 1));
    }
    if (v134.n128_u64[1]) {
      sub_1000DB0A0((std::__shared_weak_count *)v134.n128_u64[1]);
    }
    if (v62)
    {
LABEL_90:
      v28 += 2;
      if (v28 == v98)
      {
        uint64_t v20 = 1;
        goto LABEL_131;
      }
      continue;
    }
    break;
  }
  uint64_t v20 = 0;
LABEL_131:
  uint64_t v7 = v94;
LABEL_128:
  *(void *)int buf = &v105;
  sub_1000C5954((void ***)buf);
  return v20;
}

void sub_1010AFCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  a47 = (uint64_t)&a40;
  sub_1000C5954((void ***)&a47);
  _Unwind_Resume(a1);
}

void **sub_1010AFD70(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  id result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1000C571C((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    void v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    sub_100D2CDB0(a1, v7);
    return sub_1000C5898(v7);
  }
  return result;
}

void sub_1010AFDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

id sub_1010AFE04(uint64_t a1, void *a2)
{
  if (([a2 isRail] & 1) != 0
    || (id result = [a2 travelDirection], result != 6)
    && (id result = [a2 travelDirection], result != 255))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    return [v5 addObject:a2];
  }
  return result;
}

__n128 sub_1010AFE78(__n128 **a1, __n128 *a2)
{
  uint64_t v4 = (__n128 *)operator new(0x48uLL);
  unint64_t v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = a2[1];
  __n128 v7 = a2[2];
  void v4[2] = result;
  v4[3] = v7;
  v4[4].n128_u64[0] = a2[3].n128_u64[0];
  unint64_t v8 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v8 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_1010AFEE8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    int v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 8);
      *(_DWORD *)int buf = 134349056;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      unint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsConnected(CLMapGeometry::ConnectedQueryResultList &, const CLMapRoadPtr &, BOOL, double, double, BOOL) const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  return 0;
}

uint64_t sub_1010B00A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char a5, double **a6, int a7, double *a8, double a9, double a10)
{
  char v90 = a7;
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v22 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      unint64_t v23 = *(void *)(a1 + 8);
      buf.n128_u32[0] = 134349056;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", (uint8_t *)&buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(&buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_126;
    }
LABEL_135:
    dispatch_once(&qword_102419430, &stru_10230EA20);
LABEL_126:
    uint64_t v66 = *(void *)(a1 + 8);
    LODWORD(v98) = 134349056;
    *(void *)((char *)&v98 + 4) = v66;
    __int16 v67 = (__n128 *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", (const char *)v67);
    if (v67 != &buf) {
      free(v67);
    }
    return 0;
  }
  uint64_t v12 = *a6;
  if (*a6)
  {
    int v14 = a7;
    double v18 = a9;
    if ((a5 & 1) == 0)
    {
      int v14 = a7 ^ 1;
      char v90 = a7 ^ 1;
    }
    uint64_t v20 = *(void *)v12;
    if (v14)
    {
      double v21 = 1.0 - a9;
      sub_10039C4B4(v12);
      double v18 = v12[5];
    }
    else
    {
      sub_10039C4B4(v12);
      double v21 = v12[5];
    }
    *a8 = v21 * v18;
    if (v21 * v18 > a10)
    {
      *a8 = -1.0;
      return 1;
    }
    double v27 = 1.0;
    if (!v14) {
      double v27 = 0.0;
    }
    double v89 = v27;
    sub_101188D84(a1, a2, a6, v14, &v89, 1);
    if (!((unint64_t)a3 | (unint64_t)a4)) {
      return 1;
    }
    uint64_t v85 = 0;
    uint64_t v86 = &v85;
    uint64_t v87 = 0x2020000000;
    char v88 = 0;
    *(void *)&long long v98 = 0;
    *((void *)&v98 + 1) = &v98;
    uint64_t v99 = 0x4812000000;
    long long v100 = sub_100177EB8;
    long long v101 = sub_10017765C;
    uint64_t v102 = 0;
    v103[0] = (uint64_t)v103;
    v103[1] = (uint64_t)v103;
    v103[2] = 0;
    uint64_t v78 = 0;
    uint64_t v79 = (__n128 **)&v78;
    uint64_t v80 = 0x4812000000;
    uint64_t v81 = sub_100177EB8;
    uint64_t v82 = sub_10017765C;
    uint64_t v83 = 0;
    v84[0] = (uint64_t)v84;
    v84[1] = (uint64_t)v84;
    v84[2] = 0;
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472;
    v77[2] = sub_1010B12E4;
    v77[3] = &unk_10230E910;
    v77[7] = a1;
    v77[8] = v20;
    v77[4] = &v85;
    v77[5] = &v98;
    v77[6] = &v78;
    v75[0] = _NSConcreteStackBlock;
    v75[1] = 3221225472;
    v75[2] = sub_1010B1774;
    v75[3] = &unk_10230E938;
    v75[4] = v77;
    int v76 = v75;
    v73[0] = _NSConcreteStackBlock;
    v73[1] = 3221225472;
    v73[2] = sub_1010B1788;
    v73[3] = &unk_10230E938;
    v73[4] = v77;
    unint64_t v74 = v73;
    if (!a3)
    {
LABEL_63:
      if (!a4)
      {
LABEL_97:
        BOOL v26 = *((unsigned char *)v86 + 24) == 0;
LABEL_123:
        _Block_object_dispose(&v78, 8);
        sub_10017FF2C(v84);
        _Block_object_dispose(&v98, 8);
        sub_10017FF2C(v103);
        _Block_object_dispose(&v85, 8);
        return v26;
      }
      if (*(unsigned char *)(a1 + 33))
      {
        long long v96 = 0uLL;
        uint64_t v97 = 0;
        sub_1010AFD70((uint64_t *)&v96, 3uLL);
        uint64_t v43 = *(void *)(a1 + 16);
        if (v43)
        {
          if (v90)
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_10230EA20);
            }
            double v44 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
            {
              unint64_t v45 = *(void *)(a1 + 8);
              buf.n128_u32[0] = 134349056;
              *(unint64_t *)((char *)buf.n128_u64 + 4) = v45;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection incoming data requested from end of the road", (uint8_t *)&buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(&buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_10230EA20);
              }
              uint64_t v46 = *(void *)(a1 + 8);
              *(_DWORD *)long long v95 = 134349056;
              *(void *)&v95[4] = v46;
              double v47 = (__n128 *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", (const char *)v47);
              if (v47 != &buf) {
                free(v47);
              }
            }
          }
          else
          {
            sub_100D248EC(v43, (uint64_t *)a6, (uint64_t *)&v96, 1);
          }
          double v53 = (unint64_t *)*((void *)&v96 + 1);
          for (uint64_t i = (unint64_t *)v96; i != v53; i += 2)
          {
            __n128 buf = 0uLL;
            char v105 = 1;
            uint64_t v106 = 0;
            char v107 = 0;
            unint64_t v55 = *i;
            unint64_t v54 = i[1];
            if (v54)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
              BOOL v56 = (std::__shared_weak_count *)buf.n128_u64[1];
              buf.n128_u64[0] = v55;
              buf.n128_u64[1] = v54;
              if (v56) {
                sub_1000DB0A0(v56);
              }
            }
            else
            {
              __n128 buf = (__n128)*i;
            }
            char v105 = 1;
            uint64_t v106 = 0;
            char v107 = 0;
            sub_1010B1704((__n128 **)(*((void *)&v98 + 1) + 48), &buf);
            if (buf.n128_u64[1]) {
              sub_1000DB0A0((std::__shared_weak_count *)buf.n128_u64[1]);
            }
          }
        }
        buf.n128_u64[0] = (unint64_t)&v96;
        sub_1000C5954((void ***)&buf);
        goto LABEL_95;
      }
      *(void *)long long v95 = 0;
      *(void *)long long v95 = sub_1010ADB90(a1, (uint64_t)a6);
      if (*(void *)v95)
      {
        ++*(_DWORD *)(a1 + 36);
        uint64_t v92 = 0;
        double v48 = operator new(0x28uLL);
        void *v48 = off_10230EBD0;
        v48[1] = &v90;
        v48[2] = a1;
        v48[3] = v95;
        v48[4] = &v76;
        uint64_t v92 = v48;
        BOOL v49 = sub_1010AE548((uint64_t)v91);
        sub_100ECD778(v91);

        *(void *)long long v95 = 0;
        if (v49)
        {
LABEL_95:
          if ((uint64_t *)(*((void *)&v98 + 1) + 48) != a4) {
            sub_1010B545C(a4, *(void *)(*((void *)&v98 + 1) + 56), *((void *)&v98 + 1) + 48);
          }
          goto LABEL_97;
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        double v50 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          unint64_t v51 = *(void *)(a1 + 8);
          buf.n128_u32[0] = 134349056;
          *(unint64_t *)((char *)buf.n128_u64 + 4) = v51;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,incoming roads query failed (roadsAtIntersection)", (uint8_t *)&buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 0))
        {
LABEL_122:
          BOOL v26 = 0;
          goto LABEL_123;
        }
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 == -1)
        {
LABEL_133:
          uint64_t v70 = *(void *)(a1 + 8);
          LODWORD(v96) = 134349056;
          *(void *)((char *)&v96 + 4) = v70;
          uint64_t v71 = (__n128 *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", (const char *)v71);
          if (v71 != &buf) {
            free(v71);
          }
          goto LABEL_122;
        }
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        double v57 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          unint64_t v58 = *(void *)(a1 + 8);
          buf.n128_u32[0] = 134349056;
          *(unint64_t *)((char *)buf.n128_u64 + 4) = v58;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", (uint8_t *)&buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_122;
        }
        bzero(&buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_133;
        }
      }
LABEL_136:
      dispatch_once(&qword_102419430, &stru_10230EA20);
      goto LABEL_133;
    }
    if (*(unsigned char *)(a1 + 33))
    {
      long long v96 = 0uLL;
      uint64_t v97 = 0;
      sub_1010AFD70((uint64_t *)&v96, 3uLL);
      uint64_t v28 = *(void *)(a1 + 16);
      if (v28)
      {
        if (v90)
        {
          sub_100D24064(v28, (uint64_t *)a6, (uint64_t *)&v96, 1);
        }
        else
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_10230EA20);
          }
          double v36 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
          {
            unint64_t v37 = *(void *)(a1 + 8);
            buf.n128_u32[0] = 134349056;
            *(unint64_t *)((char *)buf.n128_u64 + 4) = v37;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadsAtIntersection outgoing data requested from start of the road", (uint8_t *)&buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_10230EA20);
            }
            uint64_t v68 = *(void *)(a1 + 8);
            *(_DWORD *)long long v95 = 134349056;
            *(void *)&v95[4] = v68;
            float v69 = (__n128 *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const", "%s\n", (const char *)v69);
            if (v69 != &buf) {
              free(v69);
            }
          }
        }
        double v39 = (unint64_t *)*((void *)&v96 + 1);
        for (unsigned int j = (unint64_t *)v96; j != v39; j += 2)
        {
          __n128 buf = 0uLL;
          char v105 = 1;
          uint64_t v106 = 0;
          char v107 = 0;
          unint64_t v41 = *j;
          unint64_t v40 = j[1];
          if (v40)
          {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
            double v42 = (std::__shared_weak_count *)buf.n128_u64[1];
            buf.n128_u64[0] = v41;
            buf.n128_u64[1] = v40;
            if (v42) {
              sub_1000DB0A0(v42);
            }
          }
          else
          {
            __n128 buf = (__n128)*j;
          }
          char v105 = 1;
          uint64_t v106 = 0;
          char v107 = 0;
          sub_1010B1704(v79 + 6, &buf);
          if (buf.n128_u64[1]) {
            sub_1000DB0A0((std::__shared_weak_count *)buf.n128_u64[1]);
          }
        }
      }
      buf.n128_u64[0] = (unint64_t)&v96;
      sub_1000C5954((void ***)&buf);
      goto LABEL_61;
    }
    int v29 = sub_100D2036C((uint64_t **)(a1 + 2616), (long long *)*a6, 0);
    if (v90 && (uint64_t v30 = v29) != 0)
    {
      uint64_t v32 = (unint64_t *)*((void *)v29 + 4);
      double v31 = (unint64_t *)*((void *)v29 + 5);
      if (v32 != v31)
      {
        while (*v32)
        {
          if (*(void *)*v32 != v20)
          {
            __n128 buf = 0uLL;
            char v105 = 1;
            uint64_t v106 = 0;
            char v107 = 0;
            double v34 = (void *)*v32;
            unint64_t v33 = v32[1];
            if (v33)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
              uint64_t v35 = (std::__shared_weak_count *)buf.n128_u64[1];
              buf.n128_u64[0] = (unint64_t)v34;
              buf.n128_u64[1] = v33;
              if (v35) {
                sub_1000DB0A0(v35);
              }
            }
            else
            {
              __n128 buf = (__n128)*v32;
            }
            char v105 = 1;
            uint64_t v106 = 0;
            char v107 = 0;
            sub_1010B1704(v79 + 6, &buf);
            if (buf.n128_u64[1]) {
              sub_1000DB0A0((std::__shared_weak_count *)buf.n128_u64[1]);
            }
          }
          v32 += 2;
          if (v32 == v31) {
            goto LABEL_106;
          }
        }
        sub_10017FF2C((uint64_t *)v79 + 6);
      }
LABEL_106:
      if (v79[8])
      {
        *((void *)v30 + 7) = *(void *)(a1 + 8);
LABEL_61:
        if (v79 + 6 != (__n128 **)a3) {
          sub_1010B545C(a3, (uint64_t)v79[7], (uint64_t)(v79 + 6));
        }
        goto LABEL_63;
      }
    }
    else if (v79[8])
    {
      goto LABEL_61;
    }
    *(void *)long long v95 = 0;
    *(void *)long long v95 = sub_1010ADB90(a1, (uint64_t)a6);
    if (!*(void *)v95)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      double v63 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        unint64_t v64 = *(void *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v64;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_122;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_133;
      }
      goto LABEL_136;
    }
    ++*(_DWORD *)(a1 + 36);
    uint64_t v94 = 0;
    uint64_t v59 = operator new(0x28uLL);
    void *v59 = off_10230EB50;
    v59[1] = &v90;
    v59[2] = a1;
    v59[3] = v95;
    v59[4] = &v74;
    uint64_t v94 = v59;
    BOOL v60 = sub_1010AE548((uint64_t)v93);
    sub_100ECD778(v93);

    *(void *)long long v95 = 0;
    if (!v60)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v61 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        unint64_t v62 = *(void *)(a1 + 8);
        buf.n128_u32[0] = 134349056;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = v62;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,outgoing roads query failed (roadsAtIntersection)", (uint8_t *)&buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_122;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_133;
      }
      goto LABEL_136;
    }
    goto LABEL_61;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_10230EA20);
  }
  id v24 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    unint64_t v25 = *(void *)(a1 + 8);
    buf.n128_u32[0] = 134349056;
    *(unint64_t *)((char *)buf.n128_u64 + 4) = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", (uint8_t *)&buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_126;
    }
    goto LABEL_135;
  }
  return 0;
}

void sub_1010B1208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a36, 8);
  sub_10017FF2C(a13);
  _Block_object_dispose(&a65, 8);
  sub_10017FF2C(a14);
  _Block_object_dispose(&a45, 8);
  _Unwind_Resume(a1);
}

void sub_1010B12E4(uint64_t a1, void *a2, int a3)
{
  uint64_t v4 = *(void *)(a1 + 56);
  if (a2)
  {
    if ([a2 roadID] != *(id *)(a1 + 64)
      && (([a2 isRail] & 1) != 0
       || ![a2 travelDirection]
       || [a2 travelDirection] == 1))
    {
      char v16 = 1;
      uint64_t v17 = 0;
      char v18 = 0;
      sub_100D25C4C(a2, 1, (std::string **)buf);
      __n128 v15 = *(__n128 *)buf;
      if (*(void *)buf)
      {
        if (sub_10039D6C0(*(uint64_t *)buf))
        {
          char v16 = 1;
          uint64_t v17 = 0;
          char v18 = 0;
          if (a3) {
            uint64_t v7 = *(void *)(a1 + 40);
          }
          else {
            uint64_t v7 = *(void *)(a1 + 48);
          }
          sub_1010B1704((__n128 **)(*(void *)(v7 + 8) + 48), &v15);
        }
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        unint64_t v10 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          uint64_t v11 = *(void *)(v4 + 8);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_10230EA20);
          }
          int v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const_block_invoke", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      }
      if (v15.n128_u64[1]) {
        sub_1000DB0A0((std::__shared_weak_count *)v15.n128_u64[1]);
      }
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    unint64_t v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(v4 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,GEOMapFeatureRoad is null", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      unint64_t v12 = *(void *)(v4 + 8);
      v15.n128_u32[0] = 134349056;
      *(unint64_t *)((char *)v15.n128_u64 + 4) = v12;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, BOOL, const CLMapRoadPtr &, BOOL, double, double, double &) const_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
}

void sub_1010B16D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (v14) {
    sub_1000DB0A0(v14);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1010B1704(__n128 **a1, __n128 *a2)
{
  uint64_t v4 = (__n128 *)operator new(0x38uLL);
  unint64_t v5 = a2->n128_u64[1];
  v4[1].n128_u64[0] = a2->n128_u64[0];
  v4[1].n128_u64[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = a2[1];
  void v4[2] = result;
  v4[3].n128_u8[0] = a2[2].n128_u8[0];
  unint64_t v7 = (unint64_t)*a1;
  v4->n128_u64[0] = (unint64_t)*a1;
  v4->n128_u64[1] = (unint64_t)a1;
  *(void *)(v7 + 8) = v4;
  *a1 = v4;
  a1[2] = (__n128 *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_1010B1774(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1010B1788(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1010B179C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      sub_100D205B0(v2, 0.5, 0.5);
    }
    double v3 = *(double *)(a1 + 8);
    sub_100D20600(a1 + 2616, v3, 60.0, 60.0);
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      uint64_t v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGeoMapFeatureAccessGeometry::clearStoredStaleConnections()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

BOOL sub_1010B19C0(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, double a5, double a6)
{
  uint64_t v6 = a3;
  uint64_t v10 = a1;
  int v11 = 0;
  __int16 v125 = (uint64_t **)(a1 + 2616);
  uint64_t v124 = a1 + 96;
  long long v128 = (double *)(a1 + 56);
  int v130 = a4 & ~(a4 >> 31);
  while (v11 != v130)
  {
    unsigned __int8 v137 = 0;
    uint64_t v13 = *v6;
    if (!*v6)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v104 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v105 = *(void *)(v10 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v105;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_217;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        goto LABEL_225;
      }
      goto LABEL_197;
    }
    uint64_t v14 = *(void *)v13;
    sub_10039C4B4((void *)*v6);
    double v15 = *(double *)(v13 + 40);
    if (v15 <= 0.0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      long long v108 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v109 = *(void *)(v10 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v109;
        _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,road length is 0.0", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_217;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_197;
      }
LABEL_225:
      dispatch_once(&qword_102419430, &stru_10230EA20);
LABEL_197:
      uint64_t v106 = *(void *)(a1 + 8);
      *(_DWORD *)long long v142 = 134349056;
      *(void *)&v142[4] = v106;
      char v107 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v107);
      goto LABEL_222;
    }
    if ((int)((*(void *)(*v6 + 144) - *(void *)(*v6 + 136)) >> 4) <= 1)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v110 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v111 = *(void *)(v10 + 8);
        uint64_t v112 = *(void *)*v6;
        uint64_t v113 = (char *)(int)((uint64_t)(*(void *)(*v6 + 144) - *(void *)(*v6 + 136)) >> 4);
        *(_DWORD *)__n128 buf = 134349569;
        *(void *)&uint8_t buf[4] = v111;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)&unsigned char buf[14] = v112;
        *(_WORD *)&unsigned char buf[22] = 2050;
        unint64_t v148 = v113;
        _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_217;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_221;
      }
      goto LABEL_227;
    }
    uint64_t v16 = sub_10039C48C(*v6, 0);
    if (!v16)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      unint64_t v114 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v115 = *(void *)(v10 + 8);
        uint64_t v116 = *(void *)*v6;
        long long v117 = (char *)(int)((uint64_t)(*(void *)(*v6 + 144) - *(void *)(*v6 + 136)) >> 4);
        *(_DWORD *)__n128 buf = 134349569;
        *(void *)&uint8_t buf[4] = v115;
        *(_WORD *)&unsigned char buf[12] = 2049;
        *(void *)&unsigned char buf[14] = v116;
        *(_WORD *)&unsigned char buf[22] = 2050;
        unint64_t v148 = v117;
        _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,startCoordinate is null,%{public}ld", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_217;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_221:
        uint64_t v119 = *(void *)(a1 + 8);
        uint64_t v120 = *(void *)*a3;
        long long v121 = (__n128 (*)(__n128 *, __n128 *))(int)((uint64_t)(*(void *)(*a3 + 144) - *(void *)(*a3 + 136)) >> 4);
        *(_DWORD *)long long v142 = 134349569;
        *(void *)&v142[4] = v119;
        *(_WORD *)&v142[12] = 2049;
        *(void *)&v142[14] = v120;
        *(_WORD *)&v142[22] = 2050;
        uint64_t v143 = v121;
        char v107 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v107);
LABEL_222:
        if (v107 != (char *)buf) {
          free(v107);
        }
LABEL_217:
        return 0;
      }
LABEL_227:
      dispatch_once(&qword_102419430, &stru_10230EA20);
      goto LABEL_221;
    }
    if (a6 >= 0.0)
    {
      int v17 = v137;
    }
    else
    {
      int v17 = 1;
      unsigned __int8 v137 = 1;
    }
    double v18 = fabs(a6);
    double v19 = 1.0 - a5;
    if (v17) {
      double v19 = a5;
    }
    double v20 = v15 * v19;
    if (v15 * v19 <= v18)
    {
      if (v17) {
        a5 = 0.0;
      }
      else {
        a5 = 1.0;
      }
    }
    else
    {
      a5 = a5 + a6 / v15;
    }
    int v132 = v11 + 1;
    long long v136 = *(_OWORD *)*v6;
    *(void *)long long v142 = 0;
    *(void *)&v142[8] = v142;
    *(void *)&v142[16] = 0x4812000000;
    uint64_t v143 = sub_1010B31B8;
    uint64_t v144 = sub_1010B31DC;
    int v145 = "";
    memset(v146, 0, 24);
    if (v20 > v18) {
      goto LABEL_54;
    }
    if (*(unsigned char *)(v10 + 33))
    {
      memset(buf, 0, sizeof(buf));
      sub_1010AFD70((uint64_t *)buf, 3uLL);
      uint64_t v21 = *(void *)(v10 + 16);
      if (v21)
      {
        if (v137) {
          sub_100D248EC(v21, a3, (uint64_t *)buf, 1);
        }
        else {
          sub_100D24064(v21, a3, (uint64_t *)buf, 1);
        }
        uint64_t v46 = *(uint64_t **)buf;
        unint64_t v45 = *(uint64_t **)&buf[8];
        while (v46 != v45)
        {
          LOBYTE(v135) = 1;
          sub_1010B5828(v46, (char *)&v135, &v141);
          sub_1010B3208((uint64_t *)(*(void *)&v142[8] + 48), &v141);
          if (*((void *)&v141 + 1)) {
            sub_1000DB0A0(*((std::__shared_weak_count **)&v141 + 1));
          }
          v46 += 2;
        }
      }
      *(void *)&long long v141 = buf;
      sub_1000C5954((void ***)&v141);
      goto LABEL_54;
    }
    uint64_t v22 = sub_100D2036C(v125, &v136, 0);
    unint64_t v23 = v22;
    BOOL v123 = v22 != 0;
    if (!v22)
    {
      uint64_t v43 = *(void *)(*(void *)&v142[8] + 48);
      uint64_t v44 = *(void *)(*(void *)&v142[8] + 56);
      goto LABEL_97;
    }
    long long v122 = v12;
    id v24 = (_OWORD *)((char *)v22 + 8);
    uint64_t v25 = 8;
    if (!v137)
    {
      uint64_t v25 = 32;
      id v24 = v22 + 2;
    }
    BOOL v26 = *(uint64_t **)((char *)v22 + v25);
    double v27 = (uint64_t *)*((void *)v24 + 1);
    while (v26 != v27)
    {
      uint64_t v28 = *v26;
      *(void *)&long long v141 = *v26;
      uint64_t v29 = v26[1];
      *((void *)&v141 + 1) = v29;
      if (v29) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v30 = *(uint64_t **)&v142[8];
      if (v28)
      {
        LOBYTE(v135) = 1;
        sub_1010B5828((uint64_t *)&v141, (char *)&v135, &v140);
        unint64_t v31 = v30[8];
        uint64_t v32 = (_OWORD *)v30[7];
        if ((unint64_t)v32 >= v31)
        {
          uint64_t v33 = v30[6];
          uint64_t v34 = ((uint64_t)v32 - v33) >> 4;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v36 = v31 - v33;
          if (v36 >> 3 > v35) {
            unint64_t v35 = v36 >> 3;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          unint64_t v149 = v30 + 8;
          double v38 = (char *)sub_1000C571C((uint64_t)(v30 + 8), v37);
          double v39 = &v38[16 * v34];
          *(void *)__n128 buf = v38;
          *(void *)&uint8_t buf[8] = v39;
          unint64_t v148 = &v38[16 * v40];
          *(_OWORD *)double v39 = v140;
          long long v140 = 0uLL;
          *(void *)&buf[16] = v39 + 16;
          sub_1010B59C0(v30 + 6, buf);
          uint64_t v41 = v30[7];
          sub_1000C5898((void **)buf);
          double v42 = (std::__shared_weak_count *)*((void *)&v140 + 1);
          v30[7] = v41;
          if (v42) {
            sub_1000DB0A0(v42);
          }
        }
        else
        {
          *uint64_t v32 = v140;
          v30[7] = (uint64_t)(v32 + 1);
        }
      }
      else
      {
        sub_1000C59A8((uint64_t *)(*(void *)&v142[8] + 48));
      }
      if (*((void *)&v141 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v141 + 1));
      }
      if (!v28) {
        break;
      }
      v26 += 2;
    }
    uint64_t v43 = *(void *)(*(void *)&v142[8] + 48);
    uint64_t v44 = *(void *)(*(void *)&v142[8] + 56);
    if (v43 != v44)
    {
      uint64_t v10 = a1;
      *((void *)v23 + 7) = *(void *)(a1 + 8);
      unint64_t v12 = v122;
LABEL_97:
      if (v43 != v44)
      {
        if (v23) {
          goto LABEL_54;
        }
LABEL_105:
        if (*(void *)(*(void *)&v142[8] + 48) != *(void *)(*(void *)&v142[8] + 56))
        {
          __int16 v67 = sub_100D2036C(v125, &v136, 1);
          uint64_t v68 = (uint64_t)v67;
          if (v67)
          {
            sub_100D204B4((uint64_t)v67, v137);
            *(void *)(v68 + 56) = *(void *)(v10 + 8);
            uint64_t v69 = *(void *)(*(void *)&v142[8] + 48);
            uint64_t v70 = *(void *)(*(void *)&v142[8] + 56);
            if (v69 != v70)
            {
              do
              {
                uint64_t v71 = *(long long **)v69;
                int64_t v72 = *(std::__shared_weak_count **)(v69 + 8);
                if (v72) {
                  atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                uint64_t v73 = *(void *)v71;
                if (*(void *)v71)
                {
                  if (v137)
                  {
                    *(unsigned char *)(v68 + 1) = 1;
                    unint64_t v74 = (uint64_t *)(v68 + 8);
                  }
                  else
                  {
                    *(unsigned char *)uint64_t v68 = 1;
                    unint64_t v74 = (uint64_t *)(v68 + 32);
                  }
                  sub_100D247D0(v74, v71);
                }
                else
                {
                  sub_100D204B4(v68, v137 != 0);
                  *(void *)(v68 + 56) = 0xBFF0000000000000;
                }
                if (v72) {
                  sub_1000DB0A0(v72);
                }
                v69 += 16;
                if (v73) {
                  BOOL v75 = v69 == v70;
                }
                else {
                  BOOL v75 = 1;
                }
                uint64_t v10 = a1;
              }
              while (!v75);
            }
          }
          else
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_10230EA20);
            }
            char v90 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
            {
              uint64_t v91 = *(void *)(v10 + 8);
              *(_DWORD *)__n128 buf = 134349056;
              *(void *)&uint8_t buf[4] = v91;
              _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,Unexpected,RoadConnectionsEntry could not be created", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_10230EA20);
              }
              uint64_t v92 = *(void *)(a1 + 8);
              LODWORD(v141) = 134349056;
              *(void *)((char *)&v141 + 4) = v92;
              int v93 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v93);
              if (v93 != (char *)buf) {
                free(v93);
              }
              uint64_t v10 = a1;
            }
          }
        }
        goto LABEL_54;
      }
      BOOL v64 = v123;
      goto LABEL_102;
    }
    BOOL v64 = 0;
    unint64_t v12 = v122;
    uint64_t v10 = a1;
LABEL_102:
    *(void *)&long long v140 = 0;
    uint64_t v6 = a3;
    int v11 = v132;
    *(void *)&long long v140 = sub_1010ADB90(v10, (uint64_t)a3);
    if (!(void)v140)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v82 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v83 = *(void *)(v10 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v83;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,getGeoMapFeatureRoadObject returned nil", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        uint64_t v84 = *(void *)(a1 + 8);
        LODWORD(v141) = 134349056;
        *(void *)((char *)&v141 + 4) = v84;
        uint64_t v85 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v85);
        if (v85 != (char *)buf) {
          free(v85);
        }
        uint64_t v10 = a1;
        uint64_t v6 = a3;
        int v11 = v132;
      }
LABEL_157:
      char v62 = 0;
      BOOL v129 = 0;
      goto LABEL_89;
    }
    v134[0] = _NSConcreteStackBlock;
    v134[1] = 3221225472;
    v134[2] = sub_1010B3324;
    v134[3] = &unk_10230E960;
    v134[6] = v14;
    v134[7] = v16;
    v134[4] = v142;
    v134[5] = v10;
    double v135 = COERCE_DOUBLE(v134);
    ++*(_DWORD *)(v10 + 36);
    unint64_t v139 = 0;
    unint64_t v65 = operator new(0x28uLL);
    void *v65 = off_10230ECA0;
    v65[1] = &v137;
    v65[2] = v10;
    v65[3] = &v140;
    v65[4] = &v135;
    unint64_t v139 = v65;
    BOOL v66 = sub_1010AE548((uint64_t)v138);
    sub_100ECD778(v138);

    *(void *)&long long v140 = 0;
    if (!v66)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v86 = qword_102419438;
      uint64_t v6 = a3;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v87 = *(void *)(v10 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v87;
        _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,query failed (moveOnRoad)", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        uint64_t v96 = *(void *)(a1 + 8);
        LODWORD(v141) = 134349056;
        *(void *)((char *)&v141 + 4) = v96;
        uint64_t v97 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v97);
        if (v97 != (char *)buf) {
          free(v97);
        }
        uint64_t v10 = a1;
        uint64_t v6 = a3;
      }
      char v62 = 0;
      BOOL v129 = 0;
LABEL_151:
      int v11 = v132;
      goto LABEL_89;
    }
    if (!v64) {
      goto LABEL_105;
    }
LABEL_54:
    if (!v137
      || (v47 = *(void *)(*(void *)&v142[8] + 48), uint64_t v48 = *(void *)(*(void *)&v142[8] + 56), v47 == v48))
    {
      unint64_t v50 = 0xFFFFFFFFLL;
    }
    else
    {
      unint64_t v49 = 0;
      unint64_t v50 = 0xFFFFFFFFLL;
      do
      {
        double v52 = *(void ***)v47;
        unint64_t v51 = *(std::__shared_weak_count **)(v47 + 8);
        if (v51) {
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v53 = a2;
        while (1)
        {
          uint64_t v53 = *(void *)(v53 + 8);
          if (v53 == a2) {
            break;
          }
          if (*(void *)(v53 + 16) == **v52)
          {
            unint64_t v50 = v49;
            break;
          }
        }
        if (v51) {
          sub_1000DB0A0(v51);
        }
        if ((v50 & 0x80000000) == 0) {
          break;
        }
        ++v49;
        v47 += 16;
      }
      while (v47 != v48);
    }
    int v11 = v132;
    if (v20 > v18
      || ((v54 = *(void *)(*(void *)&v142[8] + 48), uint64_t v55 = *(void *)(*(void *)&v142[8] + 56), v54 != v55)
        ? (BOOL v56 = v132 < a4)
        : (BOOL v56 = 0),
          !v56 || v50 == 0xFFFFFFFF && v137))
    {
      long long v141 = 0uLL;
      double v135 = -1.0;
      uint64_t v6 = a3;
      double v57 = (std::__shared_weak_count *)a3[1];
      v133[0] = (void *)*a3;
      v133[1] = &v57->__vftable;
      if (v57) {
        atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v58 = sub_1010B3458(v128, v133, (double *)&v141, &v135, a5);
      if (v57) {
        sub_1000DB0A0(v57);
      }
      if (v58)
      {
        *((double *)a3 + 6) = a5;
        *((_OWORD *)a3 + 2) = v141;
        float v59 = v135;
        *((float *)a3 + 6) = v59;
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        BOOL v60 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
        {
          uint64_t v61 = *(void *)(v10 + 8);
          *(_DWORD *)__n128 buf = 134349056;
          *(void *)&uint8_t buf[4] = v61;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,moveOnRoadInternal,interpolateProjections returned false", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_10230EA20);
          }
          uint64_t v94 = *(void *)(v10 + 8);
          LODWORD(v140) = 134349056;
          *(void *)((char *)&v140 + 4) = v94;
          long long v95 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v95);
          if (v95 != (char *)buf) {
            free(v95);
          }
        }
      }
      BOOL v129 = v58;
      char v62 = 0;
      goto LABEL_89;
    }
    double v63 = -v20;
    if (v137) {
      double v63 = v20;
    }
    a6 = a6 + v63;
    uint64_t v6 = a3;
    if ((v50 & 0x80000000) != 0)
    {
      unsigned int v76 = sub_100C4B484(v124);
      uint64_t v54 = *(void *)(*(void *)&v142[8] + 48);
      unint64_t v50 = v76 % (unint64_t)((*(void *)(*(void *)&v142[8] + 56) - v54) >> 4);
    }
    else if (v50 >= (v55 - v54) >> 4)
    {
      goto LABEL_134;
    }
    if (v137) {
      a5 = 1.0;
    }
    else {
      a5 = 0.0;
    }
    uint64_t v77 = 16 * v50;
    uint64_t v78 = *(uint64_t **)(v54 + v77);
    uint64_t v79 = *v78;
    uint64_t v80 = (void *)v78[1];
    if (v80) {
      atomic_fetch_add_explicit(v80 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v81 = (std::__shared_weak_count *)a3[1];
    *a3 = v79;
    a3[1] = (uint64_t)v80;
    if (v81)
    {
      sub_1000DB0A0(v81);
      uint64_t v79 = *a3;
    }
    if (!v79)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      char v88 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        uint64_t v89 = *(void *)(v10 + 8);
        *(_DWORD *)__n128 buf = 134349056;
        *(void *)&uint8_t buf[4] = v89;
        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,makeRoadFromGEOMapFeatureRoad returned nullptr", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_157;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v98 = *(void *)(a1 + 8);
      LODWORD(v141) = 134349056;
      *(void *)((char *)&v141 + 4) = v98;
      uint64_t v99 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v99);
      if (v99 != (char *)buf) {
        free(v99);
      }
      char v62 = 0;
      BOOL v129 = 0;
      uint64_t v10 = a1;
      uint64_t v6 = a3;
      goto LABEL_151;
    }
    *((unsigned char *)a3 + 20) = *(unsigned char *)(*(void *)(*(void *)(*(void *)&v142[8] + 48) + v77) + 16);
LABEL_134:
    char v62 = 1;
LABEL_89:
    _Block_object_dispose(v142, 8);
    *(void *)__n128 buf = v146;
    sub_1000C5954((void ***)buf);
    if ((v62 & 1) == 0) {
      return v129;
    }
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_10230EA20);
  }
  long long v100 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v101 = *(void *)(v10 + 8);
    *(_DWORD *)__n128 buf = 134349312;
    *(void *)&uint8_t buf[4] = v101;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(double *)&unsigned char buf[14] = a6;
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,moveOnRoad failed,distanceRemaining,%{public}.1lf", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v102 = *(void *)(a1 + 8);
    *(_DWORD *)long long v142 = 134349312;
    *(void *)&v142[4] = v102;
    *(_WORD *)&v142[12] = 2050;
    *(double *)&v142[14] = a6;
    long long v103 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometry::moveOnRoadInternal(double, double, const CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int) const", "%s\n", v103);
    if (v103 != (char *)buf) {
      free(v103);
    }
  }
  return 0;
}

void sub_1010B30C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,char a51)
{
  a49 = a20;
  sub_1000C5954(&a49);
  _Unwind_Resume(a1);
}

__n128 sub_1010B31B8(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1010B31DC(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_1000C5954(&v1);
}

void **sub_1010B3208(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    double v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)double v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_1010B59C0(a1, v18);
    uint64_t v9 = (void *)a1[1];
    __n128 result = sub_1000C5898(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1010B3310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

void sub_1010B3324(uint64_t a1, void *a2)
{
  if (([a2 isRail] & 1) != 0
    || ![a2 travelDirection]
    || [a2 travelDirection] == 1)
  {
    id v4 = *(id *)(a1 + 48);
    if (v4 != [a2 roadID]
      || (unint64_t v5 = (double *)[a2 coordinates],
          !sub_1004BABDC(*v5, v5[1], **(double **)(a1 + 56), *(double *)(*(void *)(a1 + 56) + 8), 0.0000001)))
    {
      sub_100D25C4C(a2, 1, &v8);
      if (v8)
      {
        if (sub_10039D6C0((uint64_t)v8))
        {
          char v6 = 1;
          sub_1010B5828((uint64_t *)&v8, &v6, &v7);
          sub_1010B3208((uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 48), &v7);
          if (*((void *)&v7 + 1)) {
            sub_1000DB0A0(*((std::__shared_weak_count **)&v7 + 1));
          }
        }
      }
      if (v9) {
        sub_1000DB0A0(v9);
      }
    }
  }
}

void sub_1010B3428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010B3458(double *a1, void **a2, double *a3, double *a4, double a5)
{
  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  unint64_t v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v25 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__x[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)__x, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(__x, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      LOWORD(__y[0]) = 0;
    }
    else
    {
      if (v6 == 1) {
        return 1;
      }
      sub_10039C4B4(*a2);
      uint64_t v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == v6 - 1)
      {
        uint64_t v13 = (uint64_t)*a2;
        sub_10039C4B4((void *)v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(void *)(v13 + 136);
          double v14 = *a3;
          double v15 = a3[1];
          uint64_t v16 = *(double **)(v13 + 136);
LABEL_7:
          double v17 = v16[2];
          double v18 = v16[3];
          __x[0] = 0.0;
          uint64_t v55 = 0;
          __y[0] = 0.0;
          sub_1000F17A8(a1, __x, __y, (double *)&v55, v14, v15, 0.0, v17, v18, 0.0);
          double v19 = atan2(__y[0], __x[0]);
          if (v19 < 0.0) {
            double v19 = v19 + 6.28318531;
          }
          double v20 = v19 * 57.2957795;
          goto LABEL_54;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + 16 * v12);
          double v20 = sub_10071B58C(a1, *(double *)(*(void *)(v13 + 136) + 16 * v12 - 16), *(double *)(*(void *)(v13 + 136) + 16 * v12 - 8), *a3, a3[1]);
LABEL_54:
          *a4 = v20;
          return 1;
        }
        double v27 = (double *)v5[20];
        uint64_t v28 = (double *)v5[21];
        if (v27 != v28)
        {
          uint64_t v29 = 0;
          double v30 = 0.0;
          int v31 = 2;
          while (1)
          {
            double v32 = *v27 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v30 + v32) < 0.000001) {
              break;
            }
            if (v30 + v32 > a5)
            {
              double v47 = (a5 - v30) / v32;
              uint64_t v48 = (double *)(*(void *)(v13 + 136) + v29);
              double v49 = v48[1];
              double v50 = v48[3];
              *a3 = *v48 + (v48[2] - *v48) * v47;
              long double v51 = v49 + sub_1011717B4(v49, v50) * v47;
              a3[1] = v51;
              sub_10005B720(v51);
              *((void *)a3 + 1) = v52;
              uint64_t v16 = (double *)(*(void *)(v13 + 136) + v29);
              double v14 = *v16;
              double v15 = v16[1];
              goto LABEL_7;
            }
            ++v27;
            v29 += 16;
            ++v31;
            double v30 = v30 + v32;
            if (v27 == v28) {
              goto LABEL_45;
            }
          }
          if (v31 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + v29 + 16);
            uint64_t v34 = (double *)(*(void *)(v13 + 136) + v29);
            double v35 = *v34;
            double v36 = v34[1];
            double v37 = *a3;
            double v38 = a3[1];
            __x[0] = 0.0;
            uint64_t v55 = 0;
            __y[0] = 0.0;
            sub_1000F17A8(a1, __x, __y, (double *)&v55, v35, v36, 0.0, v37, v38, 0.0);
            double v39 = atan2(__y[0], __x[0]);
            if (v39 < 0.0) {
              double v39 = v39 + 6.28318531;
            }
            double v40 = v39 * 57.2957795;
            double v41 = *a3;
            double v42 = a3[1];
            uint64_t v43 = *(void *)(v13 + 136) + v29;
            double v44 = *(double *)(v43 + 32);
            double v45 = *(double *)(v43 + 40);
            __x[0] = 0.0;
            uint64_t v55 = 0;
            __y[0] = 0.0;
            sub_1000F17A8(a1, __x, __y, (double *)&v55, v41, v42, 0.0, v44, v45, 0.0);
            double v46 = atan2(__y[0], __x[0]);
            if (v46 < 0.0) {
              double v46 = v46 + 6.28318531;
            }
            sub_1004BAC08(v40, v46 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_10230EA20);
          }
          uint64_t v53 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)__x, 2u);
          }
          BOOL v54 = sub_10013D1A0(115, 0);
          BOOL result = 0;
          if (v54)
          {
            bzero(__x, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_10230EA20);
            }
            LOWORD(__y[0]) = 0;
LABEL_18:
            id v24 = (double *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n");
LABEL_36:
            if (v24 != __x) {
              free(v24);
            }
            return 0;
          }
          return result;
        }
LABEL_45:
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        uint64_t v33 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)__x, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(__x, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        LOWORD(__y[0]) = 0;
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        BOOL v26 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)__x, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(__x, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        LOWORD(__y[0]) = 0;
      }
    }
    id v24 = (double *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n");
    goto LABEL_36;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_10230EA20);
  }
  uint64_t v21 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__x[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)__x, 2u);
  }
  BOOL v22 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v22)
  {
    bzero(__x, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    LOWORD(__y[0]) = 0;
    goto LABEL_18;
  }
  return result;
}

BOOL sub_1010B3C44(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  if (*(unsigned char *)(a1 + 32))
  {
    double v5 = 1050.0;
    if (a4 <= 1050.0)
    {
      double v5 = a4;
      if (a4 < -1050.0) {
        double v5 = -1050.0;
      }
    }
    double v6 = *((double *)a2 + 6);
    return sub_1010B19C0(a1, a3, a2, 45, v6, v5);
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRoad(struct CLMapGeometry::DistanceQueryResult &, double, const CLMapGeometry::RoadInfoList &) const", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    return 0;
  }
}

uint64_t sub_1010B3E84(uint64_t a1, uint64_t **a2, uint64_t *a3, int *a4, double a5, double a6)
{
  if (!*(unsigned char *)(a1 + 32))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    id v24 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v25 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,CLGeoMapFeatureAccessGeometry geometry is not initialized, use initialize() function", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      goto LABEL_80;
    }
    goto LABEL_33;
  }
  uint64_t v8 = (double *)*a2;
  if (!*a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    BOOL v26 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,input road is nullptr", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      goto LABEL_80;
    }
LABEL_33:
    uint64_t v30 = *(void *)(a1 + 8);
    *(_DWORD *)float v59 = 134349056;
    *(void *)&v59[4] = v30;
    unint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v23);
LABEL_34:
    if (v23 != buf) {
      free(v23);
    }
    return 0;
  }
  sub_10039C4B4(*a2);
  double v13 = v8[5];
  if (v13 <= 0.0)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    uint64_t v28 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = *(void *)(a1 + 8);
      *(_DWORD *)__n128 buf = 134349056;
      *(void *)&uint8_t buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,road length is 0.0", buf, 0xCu);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_33;
    }
LABEL_80:
    dispatch_once(&qword_102419430, &stru_10230EA20);
    goto LABEL_33;
  }
  double v14 = *a2;
  if ((int)((unint64_t)((*a2)[18] - (*a2)[17]) >> 4) <= 1)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    double v15 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = **a2;
      uint64_t v18 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
      *(_DWORD *)__n128 buf = 134349569;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(void *)&unsigned char buf[14] = v17;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(void *)&uint8_t buf[24] = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,GEOMapFeatureRoad id,%{private}lld,has less than two coordinate (moveOnRoadInternal),%{public}ld", buf, 0x20u);
    }
    uint64_t result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v20 = *(void *)(a1 + 8);
      uint64_t v21 = **a2;
      uint64_t v22 = (int)(((*a2)[18] - (*a2)[17]) >> 4);
      *(_DWORD *)float v59 = 134349569;
      *(void *)&v59[4] = v20;
      __int16 v60 = 2049;
      *(void *)uint64_t v61 = v21;
      *(_WORD *)&v61[8] = 2050;
      *(void *)&unsigned char v61[10] = v22;
      unint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v23);
      goto LABEL_34;
    }
    return result;
  }
  double v31 = 1.0 - a5;
  if (!*((unsigned char *)a2 + 20)) {
    double v31 = a5;
  }
  double v32 = v13 * v31;
  if (v13 * v31 > fabs(a6))
  {
    double v33 = a6 / v13;
    if (!*((unsigned char *)a2 + 20)) {
      double v33 = -v33;
    }
    *(void *)__n128 buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v34 = (std::__shared_weak_count *)a2[1];
    double v35 = v33 + a5;
    v58[0] = v14;
    v58[1] = &v34->__vftable;
    *(void *)float v59 = 0xBFF0000000000000;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1010B3458((double *)(a1 + 56), v58, (double *)buf, (double *)v59, v33 + a5);
    if (v34) {
      sub_1000DB0A0(v34);
    }
    *((double *)a2 + 6) = v35;
    *((_OWORD *)a2 + 2) = *(_OWORD *)buf;
    float v36 = *(double *)v59;
    *((float *)a2 + 6) = v36;
    if (!*((unsigned char *)a2 + 20))
    {
      float v37 = v36 + 180.0;
      *((float *)a2 + 6) = v37;
      sub_100142F58(v37);
      *(float *)&double v38 = v38;
      *((_DWORD *)a2 + 6) = LODWORD(v38);
    }
    return 1;
  }
  uint64_t v39 = *a4;
  unint64_t v40 = v39 + 1;
  *a4 = v39 + 1;
  if ((int)v39 > 9 || a3[2] <= v40)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    double v49 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v50 = *(void *)(a1 + 8);
      int v51 = *a4;
      uint64_t v52 = a3[2];
      *(_DWORD *)__n128 buf = 134349568;
      *(void *)&uint8_t buf[4] = v50;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)&unsigned char buf[14] = v51;
      *(_WORD *)&unsigned char buf[18] = 2050;
      *(void *)&buf[20] = v52;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,no more route roads available to cover the distance travelled,index,%{public}d,size,%{public}lu", buf, 0x1Cu);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v53 = *(void *)(a1 + 8);
      int v54 = *a4;
      uint64_t v55 = a3[2];
      *(_DWORD *)float v59 = 134349568;
      *(void *)&v59[4] = v53;
      __int16 v60 = 1026;
      *(_DWORD *)uint64_t v61 = v54;
      *(_WORD *)&void v61[4] = 2050;
      *(void *)&v61[6] = v55;
      unint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLGeoMapFeatureAccessGeometry::moveOnRouteRoads(double, CLMapGeometry::DistanceQueryResult &, CLMapGeometry::DistanceQueryResultList &, double, int &) const", "%s\n", v23);
      goto LABEL_34;
    }
    return result;
  }
  double v41 = (uint64_t *)a3[1];
  if ((int)v39 <= -2)
  {
    do
      double v41 = (uint64_t *)*v41;
    while (!__CFADD__(v40++, 1));
  }
  else if (v39 != -1)
  {
    unint64_t v42 = v39 + 2;
    do
    {
      double v41 = (uint64_t *)v41[1];
      --v42;
    }
    while (v42 > 1);
  }
  if (v41 != a3)
  {
    int v44 = *((unsigned __int8 *)v41 + 36);
    sub_100F0805C(a2, v41 + 2);
    *((unsigned char *)a2 + 20) = *((unsigned char *)v41 + 36);
    v46.n128_u64[0] = 0;
    if (!v44)
    {
      float v47 = *((float *)a2 + 6) + 180.0;
      *((float *)a2 + 6) = v47;
      sub_100142F58(v47);
      v46.n128_f32[0] = v46.n128_f64[0];
      *((_DWORD *)a2 + 6) = v46.n128_u32[0];
      v46.n128_u64[0] = 1.0;
    }
    uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t **, uint64_t *, int *, __n128, __n128))(*(void *)a1 + 56);
    v45.n128_f64[0] = a6 - v32;
    return v48(a1, a2, a3, a4, v46, v45);
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_10230EA20);
  }
  BOOL v56 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    uint64_t v57 = *(void *)(a1 + 8);
    *(_DWORD *)__n128 buf = 134349056;
    *(void *)&uint8_t buf[4] = v57;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "CLMM,%{public}.1lf,unexpectedly reached to the end of routeRoadList", buf, 0xCu);
  }
  uint64_t result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1) {
      goto LABEL_33;
    }
    goto LABEL_80;
  }
  return result;
}

void sub_1010B4968(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010B498C(uint64_t a1)
{
  sub_101187DE8(a1);

  operator delete();
}

void sub_1010B49C4(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_1010B49F4(uint64_t a1, uint64_t a2)
{
}

void sub_1010B4A04(uint64_t a1)
{
}

void sub_1010B4A10(void *a1, void *a2)
{
  if (a2)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    id v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 134349571;
      id v15 = [a2 code];
      __int16 v16 = 2114;
      id v17 = [a2 domain];
      __int16 v18 = 2113;
      id v19 = [a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning CLMM,GEOMapFeatureAccessRequest reported errorcode,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  if (*(void *)(*(void *)(a1[5] + 8) + 40))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_10230EA20);
    }
    double v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      double v6 = *(void **)(*(void *)(a1[6] + 8) + 24);
      int v7 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
      *(_DWORD *)__n128 buf = 134349312;
      id v15 = v6;
      __int16 v16 = 1026;
      LODWORD(v17) = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,releasing dispatch_group,%{public}lu,errorReported,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      unint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1[5] + 8) + 40));
  }
  if (*(void *)(*(void *)(a1[6] + 8) + 24))
  {
    if (*(void *)(*(void *)(a1[5] + 8) + 40))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v8 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLMM,clearing dispatchGroup when time-out has happened", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        uint64_t v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }

      *(void *)(*(void *)(a1[5] + 8) + 40) = 0;
    }
    else
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_10230EA20);
      }
      uint64_t v9 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLMM,dispatchGroup is unexpectedly nil", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_10230EA20);
        }
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoMapFeatureAccessGeometryCommon::performQuery(QueryFunction, dispatch_queue_t  _Nonnull const &)_block_invoke", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

void sub_1010B5084()
{
}

__n128 sub_1010B5098(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_10230EA50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1010B50EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10230EA50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_1010B5124(uint64_t a1, void *a2)
{
  return [*(id *)(*(void *)(a1 + 8) + 2600) findRoadsNear:**(void **)(a1 + 24) radius:*(double *)(*(void *)(a1 + 16) + 8) handler:10.0];
}

uint64_t sub_1010B5148(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B5188()
{
}

uint64_t sub_1010B5194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1010B5230()
{
}

__n128 sub_1010B5244(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_10230EAD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B5298(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10230EAD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_1010B52D0(uint64_t a1, void *a2)
{
  return [*(id *)(*(void *)(a1 + 8) + 2600) findRoadsNear:**(void **)(a1 + 32) radius:**(double **)(a1 + 16) handler:*(double *)(*(void *)(a1 + 16) + 8) completionHandler:**(double **)(a1 + 24)];
}

uint64_t sub_1010B52F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B5334()
{
}

void sub_1010B5344()
{
}

__n128 sub_1010B5358(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_10230EB50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B53AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10230EB50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_1010B53E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = **(unsigned __int8 **)(a1 + 8);
  double v5 = *(void **)(*(void *)(a1 + 16) + 2600);
  uint64_t v6 = **(void **)(a1 + 24);
  uint64_t v7 = **(void **)(a1 + 32);
  if (v4) {
    return _[v5 findRoadsFromNextIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
  else {
    return _[v5 findRoadsFromPreviousIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
}

uint64_t sub_1010B5410(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B5450()
{
}

uint64_t *sub_1010B545C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (a2 != a3 && (uint64_t *)v6 != a1)
  {
    do
    {
      uint64_t v8 = *(void *)(v4 + 16);
      uint64_t v7 = *(void *)(v4 + 24);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = *(std::__shared_weak_count **)(v6 + 24);
      *(void *)(v6 + 16) = v8;
      *(void *)(v6 + 24) = v7;
      if (v9) {
        sub_1000DB0A0(v9);
      }
      long long v10 = *(_OWORD *)(v4 + 32);
      *(unsigned char *)(v6 + 48) = *(unsigned char *)(v4 + 48);
      *(_OWORD *)(v6 + 32) = v10;
      uint64_t v4 = *(void *)(v4 + 8);
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v4 != a3 && (uint64_t *)v6 != a1);
  }
  if ((uint64_t *)v6 == a1)
  {
    return sub_1010B5548((uint64_t)a1, a1, v4, a3);
  }
  else
  {
    return sub_1010B5688((uint64_t)a1, (void *)v6, a1);
  }
}

uint64_t *sub_1010B5548(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x38uLL);
    uint64_t v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v10 = *(void *)(a3 + 24);
    v8[2] = *(void *)(a3 + 16);
    void v8[3] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    long long v11 = *(_OWORD *)(a3 + 32);
    *((unsigned char *)v8 + 48) = *(unsigned char *)(a3 + 48);
    *((_OWORD *)v8 + 2) = v11;
    uint64_t v12 = *(void *)(a3 + 8);
    if (v12 == a4)
    {
      uint64_t v13 = 1;
    }
    else
    {
      uint64_t v13 = 1;
      double v14 = v8;
      do
      {
        uint64_t v8 = operator new(0x38uLL);
        void *v8 = v14;
        v8[1] = 0;
        uint64_t v15 = *(void *)(v12 + 24);
        v8[2] = *(void *)(v12 + 16);
        void v8[3] = v15;
        if (v15) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
        }
        long long v16 = *(_OWORD *)(v12 + 32);
        *((unsigned char *)v8 + 48) = *(unsigned char *)(v12 + 48);
        *((_OWORD *)v8 + 2) = v16;
        v14[1] = v8;
        ++v13;
        uint64_t v12 = *(void *)(v12 + 8);
        double v14 = v8;
      }
      while (v12 != a4);
    }
    uint64_t v17 = *a2;
    *(void *)(v17 + 8) = v9;
    *uint64_t v9 = v17;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v13;
    return v9;
  }
  return a2;
}

void sub_1010B5660(void *a1)
{
  __cxa_begin_catch(a1);
  sub_101AA0644(v1);
  __cxa_rethrow();
}

void sub_1010B5674(_Unwind_Exception *a1)
{
}

void *sub_1010B5688(uint64_t a1, void *__p, void *a3)
{
  if (__p != a3)
  {
    uint64_t v4 = __p;
    uint64_t v6 = *a3;
    uint64_t v7 = *__p;
    *(void *)(v7 + 8) = *(void *)(*a3 + 8);
    **(void **)(v6 + 8) = v7;
    do
    {
      uint64_t v8 = (void *)v4[1];
      --*(void *)(a1 + 16);
      uint64_t v9 = (std::__shared_weak_count *)v4[3];
      if (v9) {
        sub_1000DB0A0(v9);
      }
      operator delete(v4);
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void sub_1010B5710()
{
}

__n128 sub_1010B5724(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_10230EBD0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B5778(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10230EBD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_1010B57B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = **(unsigned __int8 **)(a1 + 8);
  double v5 = *(void **)(*(void *)(a1 + 16) + 2600);
  uint64_t v6 = **(void **)(a1 + 24);
  uint64_t v7 = **(void **)(a1 + 32);
  if (v4) {
    return _[v5 findRoadsToNextIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
  else {
    return _[v5 findRoadsToPreviousIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
}

uint64_t sub_1010B57DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B581C()
{
}

void *sub_1010B5828@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x30uLL);
  __n128 result = sub_1010B588C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1010B5878(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1010B588C(void *a1, uint64_t *a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10230EC50;
  sub_1010B5988((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1010B58EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1010B5900(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10230EC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010B5920(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10230EC50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010B5974(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_1010B5988(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v5 = *a3;
  int v4 = (std::__shared_weak_count *)a3[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    char v6 = *a4;
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *(unsigned char *)(a2 + 16) = v6;
    sub_1000DB0A0(v4);
  }
  else
  {
    char v7 = *a4;
    *(void *)a2 = v5;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = v7;
  }
}

uint64_t sub_1010B59C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1010B5A38((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1010B5A38(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _DWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_1010B5ACC((uint64_t)v12);
  return v10;
}

uint64_t sub_1010B5ACC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

void sub_1010B5B08()
{
}

__n128 sub_1010B5B1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_10230ECA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1010B5B70(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_10230ECA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

id sub_1010B5BA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = **(unsigned __int8 **)(a1 + 8);
  uint64_t v5 = *(void **)(*(void *)(a1 + 16) + 2600);
  uint64_t v6 = **(void **)(a1 + 24);
  uint64_t v7 = **(void **)(a1 + 32);
  if (v4) {
    return _[v5 findRoadsToPreviousIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
  else {
    return _[v5 findRoadsFromNextIntersectionOf:v6 handler:v7 completionHandler:v3];
  }
}

uint64_t sub_1010B5BD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1010B5C14()
{
}

uint64_t sub_1010B5C20(uint64_t result)
{
  *(void *)(result + 160) = 0;
  return result;
}

uint64_t sub_1010B5C2C(uint64_t result)
{
  *(void *)(result + 160) = 0x3FDAAAAAAAAAAAABLL;
  return result;
}

uint64_t sub_1010B5C40(uint64_t result)
{
  *(void *)(result + 160) = 0x400AAAAAAAAAAAABLL;
  return result;
}

uint64_t sub_1010B5C54(uint64_t result)
{
  *(void *)(result + 160) = 0x400AAAAAAAAAAAABLL;
  return result;
}

uint64_t sub_1010B5C68(uint64_t result)
{
  *(void *)(result + 160) = 0;
  return result;
}

uint64_t sub_1010B5C70(uint64_t result)
{
  *(void *)(result + 160) = 0;
  return result;
}

uint64_t sub_1010B5C78(uint64_t result)
{
  *(void *)(result + 160) = 0;
  return result;
}

uint64_t sub_1010B5C80(uint64_t result)
{
  *(void *)(result + 160) = 0;
  return result;
}

uint64_t sub_1010B5C88(uint64_t result)
{
  *(void *)(result + 160) = 0;
  return result;
}

uint64_t sub_1010B5C90(uint64_t result)
{
  *(void *)(result + 160) = 0;
  return result;
}

uint64_t sub_1010B5C98(uint64_t result)
{
  *(void *)(result + 160) = 0x3FDAAAAAAAAAAAABLL;
  return result;
}

__n128 sub_1010B5CAC(uint64_t a1)
{
  *(void *)a1 = &unk_10230ED10;
  *(void *)(a1 + 8) = 40;
  *(_WORD *)(a1 + 16) = 512;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xBFF0000000000000;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 88) = -1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return result;
}

BOOL sub_1010B5D04(uint64_t a1, double *a2)
{
  *(_DWORD *)(a1 + 88) = *(unsigned __int8 *)(a1 + 16);
  *(int8x16_t *)(a1 + 96) = vextq_s8(*(int8x16_t *)(a1 + 152), *(int8x16_t *)(a1 + 152), 8uLL);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485098, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102485098))
  {
    *(_OWORD *)uint64_t v10 = xmmword_101DA6350;
    sub_1004F7D80(qword_102485080, v10, 4uLL);
    __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_102485080, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102485098);
  }
  __int16 v11 = 0;
  *(_OWORD *)uint64_t v10 = xmmword_101D1E250;
  memset(&v10[2], 0, 135);
  long long v12 = xmmword_101D1E250;
  uint64_t v13 = 0;
  int v14 = 0;
  uint64_t v15 = 0;
  v16[0] = 0;
  *(void *)((char *)v16 + 5) = 0;
  *(void *)((char *)&v16[1] + 6) = 0;
  __n128 v17 = 0uLL;
  char v18 = 0;
  v16[3] = 0;
  long long v19 = xmmword_101D1E250;
  uint64_t v20 = 0;
  int v21 = 0;
  unint64_t v22 = 0xFFEFFFFFFFFFFFFFLL;
  int v33 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  int v28 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  memset(v32, 0, sizeof(v32));
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  unint64_t v36 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v37 = 0;
  int v38 = 0;
  uint64_t v44 = 0;
  __int16 v45 = 0;
  int v50 = 0;
  int v43 = 0;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  char v48 = 0;
  memset(v49, 0, sizeof(v49));
  unint64_t v51 = 0xFFEFFFFFFFFFFFFFLL;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  uint64_t v71 = 0;
  unint64_t v72 = 0xFFEFFFFFFFFFFFFFLL;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  unint64_t v77 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v78 = 0;
  int v79 = 0;
  uint64_t v80 = 0;
  char v81 = 0;
  unint64_t v82 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v84 = 0;
  uint64_t v83 = 0;
  uint64_t v85 = 0x80000000800000;
  uint64_t v87 = 0;
  uint64_t v86 = 0;
  long long v88 = xmmword_101D1E260;
  uint64_t v89 = 0x80000000800000;
  long long v90 = 0u;
  long long v91 = 0u;
  uint64_t v92 = 0;
  unint64_t v93 = 0xFFEFFFFFFFFFFFFFLL;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  int v100 = 0;
  unint64_t v101 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v102 = 0;
  int v103 = 0;
  unint64_t v104 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v105 = 7;
  unint64_t v106 = 0xFFEFFFFFFFFFFFFFLL;
  char v107 = 0;
  uint64_t v109 = 0;
  uint64_t v108 = 0;
  uint64_t v110 = 0;
  sub_100174478(a2, qword_102485080, (uint64_t)v10);
  sub_1010B6154((void *)a1, (uint64_t)v10);
  if (*((double *)&v19 + 1) != -1.79769313e308)
  {
    __n128 v8 = v17;
    uint64_t v9 = *((void *)&v19 + 1);
    sub_1010B61B8((void *)(a1 + 176), &v8);
  }
  unint64_t v4 = *(void *)(a1 + 216);
  if (v4 >= 0x10)
  {
    ++*(void *)(a1 + 208);
    *(void *)(a1 + 216) = v4 - 1;
    sub_10041FD7C(a1 + 176, 1);
  }
  sub_1010B6268(a1, (uint64_t)a2, (uint64_t)v10);
  sub_1010B69E8(a1);
  if (*(double *)(a1 + 120) <= 20.0)
  {
    double v5 = *(double *)(a1 + 152);
    if (v5 != 0.0)
    {
LABEL_11:
      double v6 = *(double *)(a1 + 168) + 2.55999994;
      *(double *)(a1 + 168) = v6;
      goto LABEL_12;
    }
  }
  else
  {
    *(void *)(a1 + 152) = 0;
    double v5 = 0.0;
  }
  if (*(double *)(a1 + 160) <= 0.0) {
    goto LABEL_11;
  }
  *(void *)(a1 + 168) = 0;
  double v6 = 0.0;
LABEL_12:
  if (*(double *)(a1 + 128) > 60.0 || *(double *)(a1 + 112) > 300.0)
  {
    double v5 = v5 + *(double *)(a1 + 160) * 2.55999994;
    *(double *)(a1 + 152) = v5;
  }
  BOOL result = 0;
  if (v5 > 100.0 && v6 > 300.0) {
    return *(double *)(a1 + 136) > 15.0;
  }
  return result;
}

void sub_1010B6134(_Unwind_Exception *a1)
{
}

uint64_t sub_1010B6154(void *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  int v7 = v4;
  sub_1010B6A84(a1, &v6);
  sub_1010B6C28((uint64_t)a1);

  return sub_1010B6C94((uint64_t)a1, a2);
}

__n128 sub_1010B61B8(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1010B709C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v8 = result;
  ++a1[5];
  return result;
}

void sub_1010B6268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 48) = *(unsigned __int8 *)(a1 + 16);
  if (*(double *)(a1 + 112) > 0.0) {
    sub_1001A34E0(a1, 6, (uint64_t)buf);
  }
  double v6 = *(double *)(a3 + 1328);
  if (v6 == -1.79769313e308)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10230F0D0);
    }
    __int16 v11 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a2 + 296);
      *(_DWORD *)__n128 buf = 134217984;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failure to get cycling result, %f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10230F0D0);
      }
      long long v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorCycleWorkoutStopDetector::setStopCounterUpdateRate(const CLWorkoutPredictorInputs &, const CLWorkoutPredictorInputs::Items &)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
    sub_1001A34E0(a1, 4, (uint64_t)buf);
  }
  else
  {
    int v7 = *(_DWORD *)(a3 + 1336);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10230F0D0);
    }
    __n128 v8 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 134218240;
      *(double *)&uint8_t buf[4] = v6;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLOutdoorCycleWorkoutStopDetector,cyclingSource,%f,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10230F0D0);
      }
      long long v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorCycleWorkoutStopDetector::setStopCounterUpdateRate(const CLWorkoutPredictorInputs &, const CLWorkoutPredictorInputs::Items &)", "%s\n", v25);
      if (v25 != buf) {
        free(v25);
      }
    }
    switch(v7)
    {
      case 0:
      case 9:
      case 11:
        *(void *)__n128 buf = *(void *)(a2 + 296);
        *(void *)&uint8_t buf[8] = a2 + 328;
        uint64_t v9 = a1;
        int v10 = 0;
        goto LABEL_23;
      case 1:
      case 10:
      case 14:
        uint64_t v9 = a1;
        int v10 = 2;
        goto LABEL_23;
      case 2:
        uint64_t v9 = a1;
        int v10 = 3;
        goto LABEL_23;
      case 3:
      case 13:
        uint64_t v9 = a1;
        int v10 = 8;
        goto LABEL_23;
      case 4:
      case 6:
      case 12:
        uint64_t v9 = a1;
        int v10 = 1;
        goto LABEL_23;
      case 5:
        uint64_t v9 = a1;
        int v10 = 7;
        goto LABEL_23;
      case 7:
        uint64_t v9 = a1;
        int v10 = 4;
LABEL_23:
        sub_1001A34E0(v9, v10, (uint64_t)buf);
        break;
      default:
        break;
    }
    if (*(double *)(a1 + 80) > 50.0
      && *(double *)(a1 + 56) > 70.0
      && (*(double *)(a3 + 288) == -1.79769313e308 || *(double *)(a3 + 328) <= -1.0))
    {
      sub_1001A34E0(a1, 5, (uint64_t)buf);
    }
    if (*(double *)(a1 + 144) > 120.0) {
      sub_1001A34E0(a1, 9, (uint64_t)buf);
    }
    int v13 = *(unsigned __int8 *)(a1 + 16);
    BOOL v14 = *(double *)(a3 + 328) > -1.0 && *(double *)(a3 + 288) != -1.79769313e308;
    BOOL v15 = *(double *)(a3 + 240) >= 0.8 && *(double *)(a3 + 264) != -1.79769313e308;
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10230F0D0);
    }
    long long v16 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a3 + 232);
      uint64_t v18 = *(void *)(a3 + 240);
      uint64_t v19 = *(void *)(a1 + 152);
      uint64_t v20 = *(void *)(a1 + 160);
      BOOL v21 = *(double *)(a3 + 8) != -1.79769313e308;
      int v22 = *(_DWORD *)(a3 + 24);
      uint64_t v23 = *(void *)(a1 + 56);
      uint64_t v24 = *(void *)(a1 + 80);
      *(_DWORD *)__n128 buf = 67111936;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v14;
      *(_WORD *)&unsigned char buf[14] = 1024;
      *(_DWORD *)&buf[16] = v15;
      __int16 v29 = 2048;
      uint64_t v30 = v17;
      __int16 v31 = 2048;
      uint64_t v32 = v18;
      __int16 v33 = 2048;
      uint64_t v34 = v19;
      __int16 v35 = 2048;
      uint64_t v36 = v20;
      __int16 v37 = 1024;
      BOOL v38 = v21;
      __int16 v39 = 1024;
      int v40 = v22;
      __int16 v41 = 2048;
      uint64_t v42 = v23;
      __int16 v43 = 2048;
      uint64_t v44 = v24;
      __int16 v45 = 1024;
      int v46 = v7;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "OutdoorCycleStop,state,%d,hasGPS,%d,hasHR,%d,hr,%f,hrConf,%f,stopCounter,%f,fStopCounterUpdateRate,%f,hasTier1,%d,tier1Type,%d,percentNonCycleinBuffer,%f,percentModelTier1Concordant,%f,cyclieState,%d", buf, 0x62u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_10230F0D0);
      }
      long long v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOutdoorCycleWorkoutStopDetector::setStopCounterUpdateRate(const CLWorkoutPredictorInputs &, const CLWorkoutPredictorInputs::Items &)", "%s\n", v26);
      if (v26 != buf) {
        free(v26);
      }
    }
  }
}

uint64_t sub_1010B69E8(uint64_t result)
{
  *(double *)(result + 112) = *(double *)(result + 112) + 2.55999994;
  int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 == 6)
  {
    double v2 = 0.0;
    if (*(_DWORD *)(result + 88) == 6) {
      double v2 = *(double *)(result + 120) + 2.55999994;
    }
    *(double *)(result + 120) = v2;
    double v3 = *(double *)(result + 128) + 2.55999994;
  }
  else
  {
    *(void *)(result + 120) = 0;
    double v3 = *(double *)(result + 128);
  }
  *(double *)(result + 128) = v3;
  double v4 = 0.0;
  double v5 = 0.0;
  if (*(double *)(result + 160) > 0.0)
  {
    double v5 = 0.0;
    if (*(double *)(result + 96) > 0.0) {
      double v5 = *(double *)(result + 136) + 2.55999994;
    }
  }
  *(double *)(result + 136) = v5;
  if (v1 == 4) {
    double v4 = *(double *)(result + 144) + 2.55999994;
  }
  *(double *)(result + 144) = v4;
  return result;
}

void sub_1010B6A84(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v7 = a1[5];
  uint64_t v5 = (uint64_t)(a1 + 5);
  unint64_t v6 = v7;
  __n128 v8 = *(_OWORD **)(v5 - 8);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = (void **)(v5 - 16);
    uint64_t v11 = *(void *)(v5 - 16);
    uint64_t v12 = ((uint64_t)v8 - v11) >> 4;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v14 = v6 - v11;
    if (v14 >> 3 > v13) {
      unint64_t v13 = v14 >> 3;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      long long v16 = (char *)sub_1000C571C(v5, v15);
    }
    else {
      long long v16 = 0;
    }
    uint64_t v17 = &v16[16 * v12];
    uint64_t v18 = &v16[16 * v15];
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
    uint64_t v9 = (unint64_t *)(v17 + 16);
    uint64_t v20 = (char *)a1[3];
    uint64_t v19 = (char *)a1[4];
    if (v19 != v20)
    {
      do
      {
        *((_OWORD *)v17 - 1) = *((_OWORD *)v19 - 1);
        v17 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      uint64_t v19 = (char *)*v10;
    }
    a1[3] = v17;
    a1[4] = v9;
    a1[5] = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    _OWORD *v8 = *(_OWORD *)a2;
    uint64_t v9 = (unint64_t *)(v8 + 1);
  }
  a1[4] = v9;
  BOOL v21 = (unint64_t *)a1[3];
  if (v21 != v9)
  {
    double v22 = (double)(unint64_t)(v4 - 60000000);
    while (v22 <= (double)*v21)
    {
      v21 += 2;
      if (v21 == v9) {
        return;
      }
    }
    if (v21 != v9)
    {
      uint64_t v23 = v21 + 2;
      if (v21 + 2 != v9)
      {
        do
        {
          if (v22 <= (double)*v23)
          {
            *(_OWORD *)BOOL v21 = *(_OWORD *)v23;
            v21 += 2;
          }
          v23 += 2;
        }
        while (v23 != v9);
        uint64_t v9 = (unint64_t *)a1[4];
      }
    }
    if (v21 != v9) {
      a1[4] = v21;
    }
  }
}

uint64_t sub_1010B6C28(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 24);
  uint64_t v1 = *(void *)(result + 32);
  double v3 = -1.0;
  if (v1 != v2 && *(void *)(v1 - 16) - *(void *)v2 >= 0x337F980uLL)
  {
    int v4 = 0;
    uint64_t v5 = (v1 - v2) >> 4;
    do
    {
      if ((*(_DWORD *)(v2 + 8) & 0xFFFFFF7F) != 0) {
        ++v4;
      }
      v2 += 16;
    }
    while (v2 != v1);
    double v3 = (double)v4 * 100.0 / (double)(unint64_t)v5;
  }
  *(double *)(result + 56) = v3;
  return result;
}

uint64_t sub_1010B6C94(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(result + 48) == 6)
  {
    ++*(_DWORD *)(result + 64);
    if (*(_DWORD *)(a2 + 24) != 128)
    {
LABEL_4:
      ++*(_DWORD *)(result + 72);
      goto LABEL_6;
    }
LABEL_3:
    ++*(_DWORD *)(result + 68);
    goto LABEL_4;
  }
  if (*(unsigned char *)(result + 16) != 7)
  {
    if (*(_DWORD *)(a2 + 24) == 128) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
LABEL_6:
  double v2 = -1.0;
  if (*(int *)(result + 64) >= 47) {
    double v2 = (double)*(int *)(result + 68) * 100.0 / (double)*(int *)(result + 72);
  }
  *(double *)(result + 80) = v2;
  return result;
}

double sub_1010B6D24(void *a1, uint64_t a2, double a3)
{
  uint64_t v3 = a1[23];
  double v4 = 0.0;
  if (a1[24] != v3)
  {
    unint64_t v5 = a1[26];
    unint64_t v6 = v5 + a1[27];
    unint64_t v7 = (uint64_t *)(v3 + 8 * (v6 / 0xAA));
    uint64_t v8 = *v7;
    unint64_t v9 = *v7 + 24 * (v6 % 0xAA);
    unint64_t v10 = *(void *)(v3 + 8 * (v5 / 0xAA)) + 24 * (v5 % 0xAA);
    if (v9 != v10)
    {
      double v4 = 0.0;
      do
      {
        uint64_t v11 = v9;
        if (v9 == v8) {
          uint64_t v11 = *(v7 - 1) + 4080;
        }
        double v12 = *(double *)(v11 - 8);
        if (v12 >= a3 + -30.0 && v12 <= a3 && *(double *)(v11 - 16) >= 0.800000012 && *(double *)(v11 - 24) > v4) {
          double v4 = *(double *)(v11 - 24);
        }
        if (v9 == v8)
        {
          uint64_t v13 = *--v7;
          uint64_t v8 = v13;
          unint64_t v9 = v13 + 4080;
        }
        v9 -= 24;
      }
      while (v9 != v10);
    }
  }
  return 1.0 - (*(float *)(a2 + 28) - v4) / (*(float *)(a2 + 28) - *(float *)(a2 + 24));
}

BOOL sub_1010B6E20(void *a1, uint64_t a2)
{
  double v3 = sub_1010B6D24(a1, *(void *)(a2 + 8), *(double *)a2);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_10230F0D0);
  }
  double v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a2 + 8);
    double v6 = *(float *)(v5 + 24);
    double v7 = *(float *)(v5 + 28);
    *(_DWORD *)__n128 buf = 134218752;
    double v11 = v3;
    __int16 v12 = 2048;
    double v13 = v6;
    __int16 v14 = 2048;
    double v15 = v7;
    __int16 v16 = 1024;
    BOOL v17 = v3 <= 0.649999976;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "OutdoorCycleStop,HRExertionCheck,hrExertion,%f,minHr,%f,maxHr,%f,shouldTransition,%d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_10230F0D0);
    }
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLOutdoorCycleWorkoutStopDetector::isLowHRExertion(const ENoStepsNoSpeed *) const", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return v3 <= 0.649999976;
}

void sub_1010B706C(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1010B709C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    double v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    unint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      BOOL v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      unint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    unint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      char v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFF0uLL);
  sub_1000DA434(&v54, &v53);
  long long v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1010B7368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010B73B4(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4, int a5)
{
  *(_OWORD *)a1 = xmmword_101DA6370;
  *(void *)(a1 + 16) = 0;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  sub_100BA3630(a1 + 72);
  *(_DWORD *)(a1 + 888) = a5;
  sub_100B01BB8(a1 + 896, ((a5 - 82) & 0xFFFFFFF9) == 0);
  uint64_t v10 = (std::__shared_weak_count *)a2[1];
  uint64_t v27 = *a2;
  uint64_t v28 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1011C4164(a1 + 1144, &v27);
  if (v28) {
    sub_1000DB0A0(v28);
  }
  *(void *)(a1 + 1264) = 0;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1272) = xmmword_101DA63A8;
  *(_OWORD *)(a1 + 1288) = unk_101DA63B8;
  *(_OWORD *)(a1 + 1304) = xmmword_101DA63C8;
  *(_OWORD *)(a1 + 1316) = *(long long *)((char *)&xmmword_101DA63C8 + 12);
  *(_DWORD *)(a1 + 1332) = 0;
  *(_DWORD *)(a1 + 1340) = -1082130432;
  *(unsigned char *)(a1 + 1344) = 0;
  __asm { FMOV            V1.4S, #-1.0 }
  *(_OWORD *)(a1 + 1348) = _Q1;
  *(_OWORD *)(a1 + 1364) = _Q1;
  *(_OWORD *)(a1 + 1380) = _Q1;
  *(_OWORD *)(a1 + 1396) = _Q1;
  *(_OWORD *)(a1 + 1412) = _Q1;
  *(_OWORD *)(a1 + 1428) = _Q1;
  *(_OWORD *)(a1 + 1444) = _Q1;
  *(_DWORD *)(a1 + 1460) = -1082130432;
  *(void *)(a1 + 1464) = -1;
  *(void *)(a1 + 1472) = -1;
  *(_OWORD *)(a1 + 1480) = _Q1;
  *(_OWORD *)(a1 + 1496) = _Q1;
  __asm { FMOV            V1.2S, #-1.0 }
  *(void *)(a1 + 1512) = _Q1;
  *(void *)(a1 + 1520) = 66;
  *(_DWORD *)(a1 + 1528) = 0;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1541) = 0;
  *(void *)(a1 + 1568) = 0;
  *(void *)(a1 + 1552) = 0;
  *(void *)(a1 + 1560) = 0;
  *(_DWORD *)(a1 + 1576) = -1082130432;
  *(unsigned char *)(a1 + 1580) = 0;
  *(void *)(a1 + 1584) = _Q1;
  *(_DWORD *)(a1 + 1592) = a3;
  *(_DWORD *)(a1 + 1596) = 0;
  *(void *)(a1 + 1600) = 0xFFEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  sub_1012EDB6C(a1 + 1640);
  *(void *)(a1 + 1688) = 1;
  uuid_clear((unsigned __int8 *)(a1 + 40));
  uuid_clear((unsigned __int8 *)(a1 + 56));
  uint64_t v17 = *a4;
  uint64_t v16 = a4[1];
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1232) = v17;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 1240);
  *(void *)(a1 + 1240) = v16;
  if (v18) {
    sub_1000DB0A0(v18);
  }
  uint64_t v19 = sub_1000D3E78();
  sub_10006B564(v19, buf);
  int64_t v20 = (int *)(a1 + 1688);
  int v21 = sub_10006EF84(*(uint64_t *)buf, "VO2MaxMinPreviousEstimatesForHealthKitWrite", (_DWORD *)(a1 + 1688));
  if (v32) {
    sub_1000DB0A0(v32);
  }
  if (v21)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    unint64_t v22 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      int v23 = *v20;
      *(_DWORD *)__n128 buf = 67174657;
      *(_DWORD *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "VO2Max,fMinPreviousEstimatesForHealthKitWrite,%{private}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230F0F0);
      }
      int v25 = *v20;
      int v29 = 67174657;
      int v30 = v25;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLVO2MaxEstimator::CLVO2MaxEstimator(std::shared_ptr<CLVO2MaxInputCache>, CacheInputs, std::shared_ptr<CLMaxMetsRecorderDb>, uint32_t)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  return a1;
}

void sub_1010B774C(_Unwind_Exception *a1)
{
  double v6 = (void *)v1[156];
  if (v6)
  {
    v1[157] = v6;
    operator delete(v6);
  }
  double v7 = (std::__shared_weak_count *)v1[155];
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1010B77CC(v4);
  sub_1010B7804(v3);
  sub_1015776E4(v1 + 17);
  sub_1002CDF4C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1010B77CC(uint64_t a1)
{
  sub_1004B3E28((void *)(a1 + 40));
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void *sub_1010B7804(void *a1)
{
  unint64_t v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)a1[18];
  if (v3)
  {
    a1[19] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1010B784C(uint64_t a1)
{
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_10230F110);
  }
  unint64_t v2 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Beginning aggregation for VO2Max data", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10230F110);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimator::aggregateHistory()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1011C4A04((void *)(a1 + 1144));
  double v4 = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = sub_1011E124C();
  sub_1011E1408(v5);
  if (qword_102419220 != -1) {
    dispatch_once(&qword_102419220, &stru_10230F110);
  }
  double v6 = qword_102419228;
  if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
  {
    CFAbsoluteTime v7 = CFAbsoluteTimeGetCurrent();
    *(_DWORD *)__n128 buf = 134349312;
    double v11 = v4 - Current;
    __int16 v12 = 2050;
    double v13 = v7 - v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Aggregation of VO2Max data complete; input duration: %{public}f, output duration: %{public}f",
      buf,
      0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10230F110);
    }
    CFAbsoluteTimeGetCurrent();
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimator::aggregateHistory()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

uint64_t sub_1010B7B84@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>)
{
  if (*(void *)(result + 16) == 1)
  {
    *(unsigned char *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    *(void *)(a5 + 16) = 0;
    return result;
  }
  uint64_t v19 = result;
  if (*(_DWORD *)(result + 1596) == 2 && *(double *)(result + 32) + 180.0 < a6) {
    sub_1010B8664(result);
  }
  sub_100BA3CB8((int64x2_t *)(v19 + 72), a2, a3, a4, (uint64_t)v70, a6, a7, a8, a9, a10);
  unint64_t v20 = *(void *)v19;
  if (*(void *)(v19 + 16) == 1 || v20 > 0x18) {
    unsigned int v22 = 0;
  }
  else {
    unsigned int v22 = (0x1028006u >> v20) & 1;
  }
  if (v71 == -1.79769313e308)
  {
LABEL_56:
    BOOL v23 = 0;
    goto LABEL_57;
  }
  BOOL v23 = 0;
  if (v20)
  {
    if (v20 != 26)
    {
      BOOL v23 = 0;
      double v24 = *(double *)(v19 + 24);
      if (v24 != -1.79769313e308 && v24 < v71)
      {
        if (v71 >= v24 + 3600.0)
        {
          if (*(_DWORD *)(v19 + 1596) == 2) {
            char v25 = v22;
          }
          else {
            char v25 = 0;
          }
          if (v25) {
            goto LABEL_25;
          }
        }
        else if (v22)
        {
          goto LABEL_25;
        }
        if (*(_DWORD *)(v19 + 1592) == 1)
        {
LABEL_25:
          double Current = CFAbsoluteTimeGetCurrent();
          sub_1011C4168((id *)(v19 + 1144), (uint64_t)v70, (char **)&__p);
          if (qword_102419220 != -1) {
            dispatch_once(&qword_102419220, &stru_10230F110);
          }
          uint64_t v27 = qword_102419228;
          if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEBUG))
          {
            CFAbsoluteTime v28 = CFAbsoluteTimeGetCurrent();
            *(_DWORD *)__n128 buf = 134349056;
            *(double *)&uint8_t buf[4] = v28 - Current;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Completed insert of input record; duration: %{public}f",
              buf,
              0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419220 != -1) {
              dispatch_once(&qword_102419220, &stru_10230F110);
            }
            CFAbsoluteTime v59 = CFAbsoluteTimeGetCurrent();
            int v63 = 134349056;
            double v64 = v59 - Current;
            long long v60 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "std::pair<BOOL, VO2MaxSessionStats> CLVO2MaxEstimator::feedCalorieUpdate(CFAbsoluteTime, double, GradeType, double, BOOL, double, double, BOOL)", "%s\n", v60);
            if (v60 != (char *)buf) {
              free(v60);
            }
          }
          int v29 = (char *)__p;
          if (v22)
          {
            int v30 = v62;
            BOOL v23 = __p != v62;
            if (__p != v62)
            {
              long long v31 = (char **)(v19 + 1248);
              do
              {
                sub_100B02120(v19 + 896, (uint64_t)v29, (uint64_t)buf);
                if (*(_DWORD *)(v19 + 1596) == 2 && v69 != 0) {
                  LODWORD(v69) = 0;
                }
                unint64_t v33 = *(void *)(v19 + 1256);
                unint64_t v34 = *(void *)(v19 + 1264);
                if (v33 >= v34)
                {
                  unint64_t v39 = 0x8E38E38E38E38E39 * ((uint64_t)(v33 - (void)*v31) >> 3);
                  unint64_t v40 = v39 + 1;
                  if (v39 + 1 > 0x38E38E38E38E38ELL) {
                    sub_1001D7FD4();
                  }
                  unint64_t v41 = 0x8E38E38E38E38E39 * ((uint64_t)(v34 - (void)*v31) >> 3);
                  if (2 * v41 > v40) {
                    unint64_t v40 = 2 * v41;
                  }
                  if (v41 >= 0x1C71C71C71C71C7) {
                    unint64_t v42 = 0x38E38E38E38E38ELL;
                  }
                  else {
                    unint64_t v42 = v40;
                  }
                  if (v42) {
                    __int16 v43 = (char *)sub_10021D4B8(v19 + 1264, v42);
                  }
                  else {
                    __int16 v43 = 0;
                  }
                  uint64_t v44 = &v43[72 * v39];
                  *(_OWORD *)uint64_t v44 = *(_OWORD *)buf;
                  long long v45 = v66;
                  long long v46 = v67;
                  long long v47 = v68;
                  *((void *)v44 + 8) = v69;
                  *((_OWORD *)v44 + 2) = v46;
                  *((_OWORD *)v44 + 3) = v47;
                  *((_OWORD *)v44 + 1) = v45;
                  char v48 = *(char **)(v19 + 1256);
                  uint64_t v49 = *(char **)(v19 + 1248);
                  uint64_t v50 = v44;
                  if (v48 != v49)
                  {
                    do
                    {
                      *(_OWORD *)(v50 - 72) = *(_OWORD *)(v48 - 72);
                      long long v51 = *(_OWORD *)(v48 - 56);
                      long long v52 = *(_OWORD *)(v48 - 40);
                      long long v53 = *(_OWORD *)(v48 - 24);
                      *((_DWORD *)v50 - 2) = *((_DWORD *)v48 - 2);
                      *(_OWORD *)(v50 - 24) = v53;
                      *(_OWORD *)(v50 - 40) = v52;
                      *(_OWORD *)(v50 - 56) = v51;
                      v50 -= 72;
                      v48 -= 72;
                    }
                    while (v48 != v49);
                    char v48 = *v31;
                  }
                  *(void *)(v19 + 1248) = v50;
                  BOOL v38 = v44 + 72;
                  *(void *)(v19 + 1256) = v44 + 72;
                  *(void *)(v19 + 1264) = &v43[72 * v42];
                  if (v48) {
                    operator delete(v48);
                  }
                }
                else
                {
                  *(_OWORD *)unint64_t v33 = *(_OWORD *)buf;
                  long long v35 = v66;
                  long long v36 = v67;
                  long long v37 = v68;
                  *(void *)(v33 + 64) = v69;
                  *(_OWORD *)(v33 + 32) = v36;
                  *(_OWORD *)(v33 + 48) = v37;
                  *(_OWORD *)(v33 + 16) = v35;
                  BOOL v38 = (char *)(v33 + 72);
                }
                *(void *)(v19 + 1256) = v38;
                v29 += 112;
              }
              while (v29 != v30);
              BOOL v23 = 1;
              int v29 = (char *)__p;
            }
          }
          else
          {
            BOOL v23 = 0;
          }
          if (v29)
          {
            long long v62 = v29;
            operator delete(v29);
          }
          goto LABEL_57;
        }
        goto LABEL_56;
      }
    }
  }
LABEL_57:
  if (*(_DWORD *)(v19 + 1596) == 2)
  {
    BOOL v54 = 0;
    __n128 result = 0;
    BOOL v55 = 0;
    float v56 = 0.0;
    uint64_t v57 = 0;
  }
  else
  {
    uint64_t v58 = v19 + 896;
    uint64_t v57 = *(void *)(v19 + 928);
    float v56 = sub_100B02B04(v19 + 896);
    BOOL v54 = sub_1012EDF94(v19 + 1640) != 0;
    __n128 result = sub_100B02ACC(v58);
    BOOL v55 = v54 || v23;
  }
  *(unsigned char *)a5 = v55;
  *(void *)(a5 + 8) = v57;
  *(float *)(a5 + 16) = v56;
  *(unsigned char *)(a5 + 20) = v54;
  *(unsigned char *)(a5 + 21) = result;
  *(_WORD *)(a5 + 22) = 0;
  return result;
}

void sub_1010B810C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_1010B8144(uint64_t a1, uint64_t a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current) {
    sub_1010B8664(a1);
  }
  long long v5 = *(_OWORD *)a2;
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1316) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 1288) = v6;
  *(_OWORD *)(a1 + 1304) = v7;
  *(_OWORD *)(a1 + 1272) = v5;
  sub_100B02A78(a1 + 896, a2);
  *(_DWORD *)(a1 + 1372) = *(_DWORD *)(a2 + 24);
  float result = *(float *)(a2 + 32);
  *(float *)(a1 + 1376) = result;
  return result;
}

void sub_1010B81D0(uint64_t a1, int *a2)
{
  if (*(void *)(a1 + 16) != 1)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current) {
      sub_1010B8664(a1);
    }
    sub_100BA3634((int64x2_t *)(a1 + 72), a2);
  }
}

void sub_1010B8254(uint64_t a1, float a2, float a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current) {
    sub_1010B8664(a1);
  }
  *(float *)(a1 + 1332) = a2;
  sub_100EBD8D0(a1 + 896, a2);
  *(float *)(a1 + 1380) = a2;
  *(float *)(a1 + 1384) = a3;
}

float sub_1010B82CC(uint64_t a1, double a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current) {
    sub_1010B8664(a1);
  }

  return sub_100B02A8C((float *)(a1 + 896), a2);
}

float32x2_t sub_1010B8340(uint64_t a1, float64x2_t *a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (*(_DWORD *)(a1 + 1596) == 2 && *(double *)(a1 + 32) + 180.0 < Current) {
    sub_1010B8664(a1);
  }
  float v5 = a2[1].f64[0];
  *(float *)(a1 + 1360) = v5;
  float32x2_t result = vcvt_f32_f64(*a2);
  *(float32x2_t *)(a1 + 1364) = result;
  return result;
}

double sub_1010B83B0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230F0F0);
  }
  long long v6 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a2 + 16);
    uint64_t v8 = *(void *)(a2 + 112);
    uint64_t v9 = *(void *)(a2 + 224);
    *(_DWORD *)__n128 buf = 134218496;
    uint64_t v16 = v7;
    __int16 v17 = 2048;
    uint64_t v18 = v8;
    __int16 v19 = 2048;
    uint64_t v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "VO2Max,workoutEvent,%ld,workoutType,%ld,workoutMode,%ld", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    BOOL v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "VO2MaxResult CLVO2MaxEstimator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 16);
  uuid_copy((unsigned __int8 *)(a1 + 56), (const unsigned __int8 *)(a2 + 64));
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 1608) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 1624) = v10;
  *(void *)a3 = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0xBFF0000000000000;
  *(unsigned char *)(a3 + 44) = 0;
  *(_DWORD *)(a3 + 68) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  int v11 = sub_10101439C(a2);
  if (v11 == 2)
  {
    if (*(_DWORD *)(a1 + 1596) == 1) {
      return sub_1010B884C(a1, a2, a3);
    }
  }
  else if (v11 == 1)
  {
    if (*(_DWORD *)(a1 + 1596) == 2)
    {
      sub_1010B8664(a1);
      float v13 = *(float *)(a1 + 1332);
      if (v13 > 0.0) {
        sub_100EBD8D0(a1 + 896, v13);
      }
    }
    sub_100BA4700(a1 + 72, a2);
    sub_1010B8778(a1, a2);
  }
  return result;
}

double sub_1010B8664(uint64_t a1)
{
  unint64_t v2 = (_OWORD *)(a1 + 1348);
  sub_1010BBEA4(a1);
  *(void *)a1 = 0;
  *(void *)(a1 + 16) = 0;
  *(int64x2_t *)(a1 + 24) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  sub_100B02904(a1 + 896);
  if (*(float *)(a1 + 1292) > 0.0) {
    sub_100B02A78(a1 + 896, a1 + 1272);
  }
  sub_100BA359C(a1 + 72);
  sub_1011C4138(a1 + 1144);
  *(void *)(a1 + 1256) = *(void *)(a1 + 1248);
  int v3 = *(_DWORD *)(a1 + 1296);
  int v4 = *(_DWORD *)(a1 + 1304);
  *(void *)(a1 + 1336) = 0xBF80000000000000;
  *(unsigned char *)(a1 + 1344) = 0;
  __asm { FMOV            V2.4S, #-1.0 }
  _OWORD *v2 = _Q2;
  *(void *)(a1 + 1364) = 0xBF800000BF800000;
  *(_DWORD *)(a1 + 1372) = v3;
  *(_DWORD *)(a1 + 1376) = v4;
  v2[2] = _Q2;
  v2[3] = _Q2;
  v2[4] = _Q2;
  v2[5] = _Q2;
  void v2[6] = _Q2;
  *(_DWORD *)(a1 + 1460) = -1082130432;
  *(void *)(a1 + 1464) = -1;
  *(void *)(a1 + 1472) = -1;
  *(_OWORD *)((char *)v2 + 132) = _Q2;
  *(_OWORD *)((char *)v2 + 148) = _Q2;
  __asm { FMOV            V0.2S, #-1.0 }
  *(double *)(a1 + 1512) = result;
  *(void *)(a1 + 1520) = 66;
  *(void *)(a1 + 1541) = 0;
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1568) = 0;
  *(void *)(a1 + 1552) = 0;
  *(void *)(a1 + 1560) = 0;
  *(_DWORD *)(a1 + 1576) = -1082130432;
  *(unsigned char *)(a1 + 1580) = 0;
  *(double *)(a1 + 1584) = result;
  *(_DWORD *)(a1 + 1596) = 0;
  return result;
}

void sub_1010B8778(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = sub_101014448(*(void *)(a2 + 112), *(void *)(a2 + 120));
  *(void *)(a1 + 16) = *(void *)(a2 + 224);
  double v4 = *(double *)a2;
  sub_1011C47FC((unsigned __int8 *)(a1 + 56), (uint64_t *)(a1 + 1144), &__p);
  if (v7 != __p && *((double *)__p + 4) < v4) {
    double v4 = *((double *)__p + 4);
  }
  *(double *)(a1 + 24) = v4;
  *(double *)(a1 + 936) = v4;
  *(_DWORD *)(a1 + 944) = *(_DWORD *)(a2 + 32);
  char v5 = sub_1010BADA8(a1);
  sub_1012EDBB4(a1 + 1640, a2, v5);
  *(_DWORD *)(a1 + 1596) = 1;
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_1010B8830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1010B884C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(double *)(a1 + 1600) = vabdd_f64(*(double *)(a1 + 928), *(double *)(a1 + 920));
  int v6 = sub_1010B88DC(a1, a3, *(double *)(a2 + 24));
  sub_1012EDE7C((uint64_t *)(a1 + 1640), a2, a3);
  sub_1010BAE34(a1, v6, *(double *)(a3 + 16), *(double *)(a2 + 24));
  *(void *)(a3 + 56) = *(void *)(a1 + 1600);
  *(_DWORD *)(a3 + 64) = v6;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 1596) = 2;
  return result;
}

uint64_t sub_1010B88DC(uint64_t a1, uint64_t a2, double a3)
{
  uuid_copy((unsigned __int8 *)(a2 + 28), (const unsigned __int8 *)(a1 + 56));
  BOOL v38 = 0;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v6 = sub_1011E124C();
  CFAbsoluteTimeGetCurrent();
  sub_1011E1F20(v6, &v38);
  double v7 = sub_1010B8F74(a1);
  if (*(float *)(a1 + 1692) > 0.0)
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10230F110);
    }
    uint64_t v8 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
    {
      double v9 = *(float *)(a1 + 1692);
      *(_DWORD *)__n128 buf = 134218240;
      *(double *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overwriting meanMaxMets,calculated,%f,overwrite,%f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_10230F110);
      }
      double v27 = *(float *)(a1 + 1692);
      LODWORD(v49[0]) = 134218240;
      *(double *)((char *)v49 + 4) = v7;
      WORD6(v49[0]) = 2048;
      *(double *)((char *)v49 + 14) = v27;
      CFAbsoluteTime v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "VO2MaxEstimationStatus CLVO2MaxEstimator::estimateVO2Max(CFAbsoluteTime, VO2MaxResult &)", "%s\n", v28);
      if (v28 != buf) {
        free(v28);
      }
    }
    double v7 = *(float *)(a1 + 1692);
  }
  long long __p = 0;
  long long v36 = 0;
  uint64_t v37 = 0;
  uint64_t v34 = 0;
  memset(v49, 0, sizeof(v49));
  unsigned int v33 = sub_1010B932C(a1, a2, &__p, &v34, (uint64_t)v49, (long long **)&v38, a3, v7);
  if (v36 != __p)
  {
    uint64_t v10 = sub_1011E124C();
    sub_1011E1EEC(v10, (const unsigned __int8 *)(a1 + 56));
    int v11 = (unsigned __int8 *)__p;
    __int16 v12 = v36;
    while (v11 != v12)
    {
      uuid_copy(v11 + 24, (const unsigned __int8 *)(a1 + 56));
      *((void *)v11 + 2) = *(void *)a1;
      *((_DWORD *)v11 + 45) = *(_DWORD *)(a1 + 1608);
      uint64_t v13 = sub_1011E124C();
      sub_1011E1E00(v13, (uint64_t)v11);
      v11 += 184;
    }
  }
  if (*(void *)(a1 + 16) != 1)
  {
    unint64_t v14 = *(void *)a1;
    if (*(_DWORD *)(a1 + 1608) == 3)
    {
      if (v14 != 15) {
        goto LABEL_20;
      }
    }
    else if (v14 > 0x18 || ((1 << v14) & 0x1028000) == 0)
    {
      goto LABEL_20;
    }
    if (!sub_1012EDF94(a1 + 1640))
    {
      *(void *)__n128 buf = 0;
      *(double *)&uint8_t buf[8] = a3;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)&uint8_t buf[24] = 0;
      *(double *)&unsigned char buf[32] = v7;
      uint64_t v51 = v34;
      int v52 = *(_DWORD *)(a1 + 888);
      char v53 = *(unsigned char *)(a1 + 1320);
      int v54 = 3;
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uuid_copy(&buf[16], (const unsigned __int8 *)(a1 + 56));
      uint64_t v15 = sub_1011E124C();
      sub_1011E1C78(v15, (uint64_t)buf);
    }
  }
LABEL_20:
  BOOL v16 = sub_1010BA0E4(a1, &v33, (unsigned char *)(a2 + 24));
  *(unsigned char *)(a1 + 1548) = v16;
  if (v16)
  {
    uuid_copy((unsigned __int8 *)&v49[4] + 8, (const unsigned __int8 *)(a1 + 56));
    uint64_t v17 = sub_1011E124C();
    sub_1011E1584(v17, (uint64_t)v49);
    uint64_t v18 = sub_1000A6958();
    buf[0] = 1;
    sub_1000EA52C(v18, @"ActiveJacksonCalibration", buf);
    uint64_t v19 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v19 + 944))(v19);
    uuid_copy((unsigned __int8 *)(a1 + 40), (const unsigned __int8 *)(a1 + 56));
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    uint64_t v20 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = *(void *)(a1 + 1600);
      uint64_t v22 = *(void *)(a2 + 16);
      uint64_t v23 = *(void *)(a1 + 16);
      *(_DWORD *)__n128 buf = 67240960;
      *(_DWORD *)&uint8_t buf[4] = v33;
      *(_WORD *)&uint8_t buf[8] = 2050;
      *(void *)&buf[10] = v21;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&unsigned char buf[20] = v22;
      *(_WORD *)&unsigned char buf[28] = 2050;
      *(void *)&buf[30] = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "VO2Max,Failure to estimate,status,%{public}d,workout duration,%{public}.3f,estimate,%f,workout mode,%{public}ld", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230F0F0);
      }
      uint64_t v29 = *(void *)(a1 + 1600);
      uint64_t v30 = *(void *)(a2 + 16);
      uint64_t v31 = *(void *)(a1 + 16);
      int v41 = 67240960;
      unsigned int v42 = v33;
      __int16 v43 = 2050;
      uint64_t v44 = v29;
      __int16 v45 = 2048;
      uint64_t v46 = v30;
      __int16 v47 = 2050;
      uint64_t v48 = v31;
      long long v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "VO2MaxEstimationStatus CLVO2MaxEstimator::estimateVO2Max(CFAbsoluteTime, VO2MaxResult &)", "%s\n", v32);
      if (v32 != buf) {
        free(v32);
      }
    }
    *(void *)a2 = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0xBFF0000000000000;
  }
  if (*(void *)(a1 + 16) != 1)
  {
    unint64_t v24 = *(void *)a1;
    if (*(_DWORD *)(a1 + 1608) == 3)
    {
      if (v24 != 15) {
        goto LABEL_35;
      }
LABEL_34:
      *(double *)(a2 + 48) = v7;
      goto LABEL_35;
    }
    if (v24 <= 0x18 && ((1 << v24) & 0x1028000) != 0) {
      goto LABEL_34;
    }
  }
LABEL_35:
  uint64_t v25 = v33;
  if (__p)
  {
    long long v36 = (unsigned __int8 *)__p;
    operator delete(__p);
  }
  if (v38)
  {
    unint64_t v39 = v38;
    operator delete(v38);
  }
  return v25;
}

void sub_1010B8F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

double sub_1010B8F74(uint64_t a1)
{
  long long __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v2 = *(void *)(a1 + 1232);
  if (!v2)
  {
    int v3 = 0;
    double v9 = 0;
    double v7 = 0.0;
LABEL_10:
    double v5 = 0.0;
    double v4 = 0.0;
    goto LABEL_11;
  }
  sub_1014C6160(v2, &__p);
  int v3 = v21;
  if (__p == v21)
  {
    double v7 = 0.0;
    double v9 = __p;
    goto LABEL_10;
  }
  double v4 = 0.0;
  double v5 = 0.0;
  uint64_t v6 = (double *)__p;
  double v7 = 0.0;
  do
  {
    double v8 = v6[3];
    double v4 = v4 + v8;
    double v5 = v5 + 1.0;
    if (v8 > v7) {
      double v7 = v6[3];
    }
    v6 += 4;
  }
  while (v6 != (double *)v21);
  double v9 = __p;
LABEL_11:
  if ((unint64_t)(v3 - v9) >= 0x380)
  {
    double v11 = v7;
  }
  else
  {
    memset(buf, 0, 24);
    uint64_t v10 = sub_1011E124C();
    sub_1011E1DF8(v10, buf);
    if (*(void *)buf == *(void *)&buf[8]
      || (double v11 = *(double *)(*(void *)&buf[8] - 48), v11 <= 0.0)
      || (double v4 = v4 + (double)(unint64_t)(28 - ((v21 - (unsigned char *)__p) >> 5)) * v11, v5 = 28.0, v11 <= v7))
    {
      double v11 = v7;
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
  }
  if (v5 <= 0.0) {
    double v12 = 0.0;
  }
  else {
    double v12 = v4 / v5;
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230F0F0);
  }
  uint64_t v13 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v14 = "false";
    if (v5 > 0.0) {
      unint64_t v14 = "true";
    }
    *(_DWORD *)__n128 buf = 136380931;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2049;
    *(double *)&unsigned char buf[14] = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "VO2Max,GetMeanMaxMets,canCalculateMeanMaxMets,%{private}s,meanMaxMets,%{private}.3f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    uint64_t v18 = "false";
    if (v5 > 0.0) {
      uint64_t v18 = "true";
    }
    int v23 = 136380931;
    unint64_t v24 = v18;
    __int16 v25 = 2049;
    double v26 = v12;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "double CLVO2MaxEstimator::getMeanMaxMets()", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  float v15 = v12;
  *(float *)(a1 + 1388) = v15;
  float v16 = v11;
  *(float *)(a1 + 1392) = v16;
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  return v12;
}

void sub_1010B92F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010B932C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, long long **a6, double a7, double a8)
{
  float v16 = *(float *)(a1 + 908);
  LODWORD(v147) = *(_DWORD *)(a1 + 904);
  *((float *)&v147 + 1) = v16;
  uint64_t v17 = *(void *)a1;
  uint64_t v18 = *(void *)(a1 + 1600);
  double v19 = *(float *)&v147;
  int v20 = *(_DWORD *)(a1 + 1608);
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(double *)(a5 + 24) = a7;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = v17;
  *(void *)(a5 + 48) = v18;
  *(double *)(a5 + 56) = v16;
  *(double *)(a5 + 64) = v19;
  *(_OWORD *)(a5 + 72) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  *(_DWORD *)(a5 + 104) = v20;
  *(_WORD *)(a5 + 108) = 0;
  *(_DWORD *)(a5 + 112) = 0;
  *(void *)(a5 + 128) = 0;
  *(void *)(a5 + 136) = 0;
  *(void *)(a5 + 120) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  long long v138 = _Q0;
  double v139 = -1.0;
  int v142 = 0;
  uint64_t v144 = 0;
  uint64_t v145 = 0;
  uint64_t v143 = 0;
  *(_OWORD *)uint64_t v146 = _Q0;
  *(void *)&v146[16] = 0xBFF0000000000000;
  sub_100A05D30((uint64_t)v137, &v147, *(_DWORD *)(a1 + 1608));
  sub_100A07E38(*(double *)(a1 + 24), (uint64_t)v137, (uint64_t *)(a1 + 1248), a5, *(void *)a1);
  long long __p = 0;
  double v135 = 0;
  long long v136 = 0;
  uint64_t v25 = *(void *)(a1 + 1248);
  uint64_t v26 = *(void *)(a1 + 1256);
  if (v25 != v26)
  {
    double v27 = 0;
    CFAbsoluteTime v28 = 0;
    uint64_t v29 = &v136;
    do
    {
      while (*(_DWORD *)(v25 + 64) < 2u)
      {
        v25 += 72;
        if (v25 == v26) {
          goto LABEL_31;
        }
      }
      if (v28 >= (_OWORD *)v136)
      {
        unint64_t v133 = a6;
        uint64_t v33 = a2;
        uint64_t v34 = a4;
        unint64_t v35 = 0x8E38E38E38E38E39 * (((char *)v28 - v27) >> 3);
        unint64_t v36 = v35 + 1;
        if (v35 + 1 > 0x38E38E38E38E38ELL) {
          sub_1001D7FD4();
        }
        if (0x1C71C71C71C71C72 * ((v136 - v27) >> 3) > v36) {
          unint64_t v36 = 0x1C71C71C71C71C72 * ((v136 - v27) >> 3);
        }
        if (0x8E38E38E38E38E39 * ((v136 - v27) >> 3) >= 0x1C71C71C71C71C7) {
          unint64_t v37 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v37 = v36;
        }
        if (v37)
        {
          BOOL v38 = v29;
          unint64_t v39 = (char *)sub_10021D4B8((uint64_t)v29, v37);
          double v27 = __p;
          CFAbsoluteTime v28 = v135;
          uint64_t v29 = v38;
        }
        else
        {
          unint64_t v39 = 0;
        }
        uint64_t v40 = &v39[72 * v35];
        *(_OWORD *)uint64_t v40 = *(_OWORD *)v25;
        long long v41 = *(_OWORD *)(v25 + 16);
        long long v42 = *(_OWORD *)(v25 + 32);
        long long v43 = *(_OWORD *)(v25 + 48);
        *((void *)v40 + 8) = *(void *)(v25 + 64);
        *((_OWORD *)v40 + 2) = v42;
        *((_OWORD *)v40 + 3) = v43;
        *((_OWORD *)v40 + 1) = v41;
        if (v28 == (_OWORD *)v27)
        {
          uint64_t v48 = &v39[72 * v35];
          a4 = v34;
        }
        else
        {
          uint64_t v44 = &v39[72 * v35];
          a4 = v34;
          do
          {
            *(_OWORD *)(v44 - 72) = *(_OWORD *)((char *)v28 - 72);
            long long v45 = *(_OWORD *)((char *)v28 - 56);
            long long v46 = *(_OWORD *)((char *)v28 - 40);
            long long v47 = *(_OWORD *)((char *)v28 - 24);
            uint64_t v48 = v44 - 72;
            *((_DWORD *)v44 - 2) = *((_DWORD *)v28 - 2);
            *(_OWORD *)(v44 - 24) = v47;
            *(_OWORD *)(v44 - 40) = v46;
            *(_OWORD *)(v44 - 56) = v45;
            CFAbsoluteTime v28 = (_OWORD *)((char *)v28 - 72);
            v44 -= 72;
          }
          while (v28 != (_OWORD *)v27);
        }
        CFAbsoluteTime v28 = v40 + 72;
        long long __p = v48;
        double v135 = v40 + 72;
        long long v136 = &v39[72 * v37];
        a2 = v33;
        if (v27)
        {
          uint64_t v49 = v29;
          operator delete(v27);
          uint64_t v29 = v49;
          double v27 = __p;
        }
        else
        {
          double v27 = v48;
        }
        a6 = v133;
      }
      else
      {
        _OWORD *v28 = *(_OWORD *)v25;
        long long v30 = *(_OWORD *)(v25 + 16);
        long long v31 = *(_OWORD *)(v25 + 32);
        long long v32 = *(_OWORD *)(v25 + 48);
        *((void *)v28 + 8) = *(void *)(v25 + 64);
        id v28[2] = v31;
        v28[3] = v32;
        v28[1] = v30;
        CFAbsoluteTime v28 = (_OWORD *)((char *)v28 + 72);
      }
      double v135 = v28;
      v25 += 72;
    }
    while (0x8E38E38E38E38E39 * (((char *)v28 - v27) >> 3) <= 0x1EB && v25 != v26);
  }
LABEL_31:
  float v51 = sub_100B02ADC(a1 + 896);
  sub_100A05D40(v137, (uint64_t *)&__p, a6, a1 + 1272, (uint64_t)&v138, v51, a8, a7);
  double v52 = -1.0;
  p_cache = CLAvengerScannerClientController.cache;
  if (*(void *)(a1 + 16) == 1) {
    goto LABEL_32;
  }
  unint64_t v56 = *(void *)a1;
  if (*(_DWORD *)(a1 + 1608) == 3)
  {
    if (v56 != 15)
    {
LABEL_32:
      int v54 = 0;
      uint64_t v55 = 4294967292;
LABEL_40:
      double v57 = -1.0;
      goto LABEL_41;
    }
  }
  else
  {
    int v54 = 0;
    uint64_t v55 = 4294967292;
    if (v56 > 0x18 || ((1 << v56) & 0x1028000) == 0) {
      goto LABEL_40;
    }
  }
  if (sub_1012EDF94(a1 + 1640))
  {
    uint64_t v55 = sub_1012EDF94(a1 + 1640);
    int v54 = 0;
    goto LABEL_40;
  }
  double v76 = *(double *)&v138;
  double v52 = v139;
  LODWORD(v55) = v141;
  int v54 = v142;
  double v57 = -1.0;
  if (*(double *)&v138 == -1.0)
  {
    double v77 = 0.0;
  }
  else
  {
    double v77 = sub_1014084AC(*(_DWORD *)(a1 + 1276), (int)*(float *)(a1 + 1292));
    double v57 = 65.0;
    if (v76 + v77 <= 65.0)
    {
      double v57 = 14.0;
      if (v76 + v77 >= 14.0)
      {
        *(_DWORD *)(a1 + 1544) = 1;
        double v57 = v76 + v77;
        goto LABEL_59;
      }
      int v78 = 3;
    }
    else
    {
      int v78 = 2;
    }
    *(_DWORD *)(a1 + 1544) = v78;
  }
LABEL_59:
  uint64_t v79 = a2;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230F0F0);
  }
  uint64_t v80 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 67241217;
    *(_DWORD *)v191 = v55;
    *(_WORD *)&v191[4] = 2049;
    *(void *)&v191[6] = *((void *)&v138 + 1);
    *(_WORD *)&v191[14] = 2049;
    *(double *)&v191[16] = v77;
    *(_WORD *)&v191[24] = 2049;
    *(double *)&v191[26] = v57;
    *(_WORD *)&v191[34] = 2049;
    *(double *)&v191[36] = v52;
    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "VO2Max,vo2MaxEstimationStatus,%{public}d,priorVO2Max,%{private}f,biasAdjustment,%{private}f,longitudinalVO2Max,%{private}f,sessionVO2Max,%{private}f", buf, 0x30u);
  }
  a2 = v79;
  int v132 = a4;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    int v148 = 67241217;
    *(_DWORD *)unint64_t v149 = v55;
    *(_WORD *)&v149[4] = 2049;
    *(void *)&v149[6] = *((void *)&v138 + 1);
    *(_WORD *)&v149[14] = 2049;
    *(double *)&v149[16] = v77;
    *(_WORD *)&v149[24] = 2049;
    *(double *)&v149[26] = v57;
    *(_WORD *)&v149[34] = 2049;
    *(double *)&v149[36] = v52;
    int v130 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "VO2MaxEstimationStatus CLVO2MaxEstimator::evaluateVO2MaxModel(VO2MaxResult &, std::vector<VO2MaxSummary> &, double &, VO2MaxOutput &, const std::vector<VO2MaxSummary> &, CFAbsoluteTime, double)", "%s\n", v130);
    if (v130 != (char *)buf) {
      free(v130);
    }
    a2 = v79;
  }
  unint64_t v82 = v143;
  char v81 = v144;
  if (v143 == v144)
  {
    uint64_t v120 = v143;
  }
  else
  {
    uint64_t v131 = a2;
    uint64_t v83 = a3 + 2;
    uint64_t v84 = (char *)a3[1];
    do
    {
      v82[44] = 1;
      if ((unint64_t)v84 >= *v83)
      {
        unint64_t v94 = 0xD37A6F4DE9BD37A7 * ((uint64_t)&v84[-*a3] >> 3);
        unint64_t v95 = v94 + 1;
        if (v94 + 1 > 0x1642C8590B21642) {
          sub_1001D7FD4();
        }
        if (0xA6F4DE9BD37A6F4ELL * ((uint64_t)(*v83 - *a3) >> 3) > v95) {
          unint64_t v95 = 0xA6F4DE9BD37A6F4ELL * ((uint64_t)(*v83 - *a3) >> 3);
        }
        if (0xD37A6F4DE9BD37A7 * ((uint64_t)(*v83 - *a3) >> 3) >= 0xB21642C8590B21) {
          unint64_t v96 = 0x1642C8590B21642;
        }
        else {
          unint64_t v96 = v95;
        }
        if (v96) {
          long long v97 = (char *)sub_10050F820((uint64_t)(a3 + 2), v96);
        }
        else {
          long long v97 = 0;
        }
        long long v98 = &v97[184 * v94];
        long long v99 = *(_OWORD *)v82;
        long long v100 = *((_OWORD *)v82 + 1);
        long long v101 = *((_OWORD *)v82 + 3);
        *((_OWORD *)v98 + 2) = *((_OWORD *)v82 + 2);
        *((_OWORD *)v98 + 3) = v101;
        *(_OWORD *)long long v98 = v99;
        *((_OWORD *)v98 + 1) = v100;
        long long v102 = *((_OWORD *)v82 + 4);
        long long v103 = *((_OWORD *)v82 + 5);
        long long v104 = *((_OWORD *)v82 + 7);
        *((_OWORD *)v98 + 6) = *((_OWORD *)v82 + 6);
        *((_OWORD *)v98 + 7) = v104;
        *((_OWORD *)v98 + 4) = v102;
        *((_OWORD *)v98 + 5) = v103;
        long long v105 = *((_OWORD *)v82 + 8);
        long long v106 = *((_OWORD *)v82 + 9);
        long long v107 = *((_OWORD *)v82 + 10);
        *((void *)v98 + 22) = *((void *)v82 + 22);
        *((_OWORD *)v98 + 9) = v106;
        *((_OWORD *)v98 + 10) = v107;
        *((_OWORD *)v98 + 8) = v105;
        uint64_t v109 = (char *)*a3;
        uint64_t v108 = (char *)a3[1];
        uint64_t v110 = v98;
        if (v108 != (char *)*a3)
        {
          do
          {
            long long v111 = *(_OWORD *)(v108 - 184);
            long long v112 = *(_OWORD *)(v108 - 168);
            long long v113 = *(_OWORD *)(v108 - 152);
            *(_OWORD *)(v110 - 136) = *(_OWORD *)(v108 - 136);
            *(_OWORD *)(v110 - 152) = v113;
            *(_OWORD *)(v110 - 168) = v112;
            *(_OWORD *)(v110 - 184) = v111;
            long long v114 = *(_OWORD *)(v108 - 120);
            long long v115 = *(_OWORD *)(v108 - 104);
            long long v116 = *(_OWORD *)(v108 - 88);
            *(_OWORD *)(v110 - 72) = *(_OWORD *)(v108 - 72);
            *(_OWORD *)(v110 - 88) = v116;
            *(_OWORD *)(v110 - 104) = v115;
            *(_OWORD *)(v110 - 120) = v114;
            long long v117 = *(_OWORD *)(v108 - 56);
            long long v118 = *(_OWORD *)(v108 - 40);
            long long v119 = *(_OWORD *)(v108 - 24);
            *((void *)v110 - 1) = *((void *)v108 - 1);
            *(_OWORD *)(v110 - 24) = v119;
            *(_OWORD *)(v110 - 40) = v118;
            *(_OWORD *)(v110 - 56) = v117;
            v110 -= 184;
            v108 -= 184;
          }
          while (v108 != v109);
          uint64_t v108 = (char *)*a3;
        }
        uint64_t v84 = v98 + 184;
        *a3 = v110;
        a3[1] = v98 + 184;
        a3[2] = &v97[184 * v96];
        if (v108) {
          operator delete(v108);
        }
      }
      else
      {
        long long v85 = *(_OWORD *)v82;
        long long v86 = *((_OWORD *)v82 + 1);
        long long v87 = *((_OWORD *)v82 + 3);
        *((_OWORD *)v84 + 2) = *((_OWORD *)v82 + 2);
        *((_OWORD *)v84 + 3) = v87;
        *(_OWORD *)uint64_t v84 = v85;
        *((_OWORD *)v84 + 1) = v86;
        long long v88 = *((_OWORD *)v82 + 4);
        long long v89 = *((_OWORD *)v82 + 5);
        long long v90 = *((_OWORD *)v82 + 7);
        *((_OWORD *)v84 + 6) = *((_OWORD *)v82 + 6);
        *((_OWORD *)v84 + 7) = v90;
        *((_OWORD *)v84 + 4) = v88;
        *((_OWORD *)v84 + 5) = v89;
        long long v91 = *((_OWORD *)v82 + 8);
        long long v92 = *((_OWORD *)v82 + 9);
        long long v93 = *((_OWORD *)v82 + 10);
        *((void *)v84 + 22) = *((void *)v82 + 22);
        *((_OWORD *)v84 + 9) = v92;
        *((_OWORD *)v84 + 10) = v93;
        *((_OWORD *)v84 + 8) = v91;
        v84 += 184;
      }
      a3[1] = v84;
      v82 += 46;
    }
    while (v82 != v81);
    uint64_t v120 = v143;
    unint64_t v82 = v144;
    a2 = v131;
  }
  *(unsigned char *)(a2 + 44) = v120 != v82;
  uint64_t v55 = v55;
  p_cache = (void **)(CLAvengerScannerClientController + 16);
  if (v55)
  {
    a4 = v132;
  }
  else
  {
    *(double *)a2 = a7;
    *(void *)(a2 + 8) = *(void *)a1;
    *(double *)(a2 + 16) = v57;
    *(unsigned char *)(a2 + 24) = v139 != -1.0;
    *(unsigned char *)(a2 + 25) = *(unsigned char *)(a1 + 1320);
    a4 = v132;
    BOOL v121 = sub_1010BAD0C(a1) && *(unsigned char *)(a1 + 1328) != 0;
    *(unsigned char *)(a2 + 26) = v121;
    uint64_t v55 = 0;
    *(unsigned char *)(a2 + 27) = sub_1010BAD0C(a1);
  }
LABEL_41:
  *(double *)(a5 + 32) = v57;
  *(double *)(a5 + 96) = v57;
  *(_DWORD *)(a5 + 112) = v54;
  *(_WORD *)(a5 + 108) = *(_WORD *)(a2 + 26);
  *(double *)(a5 + 136) = v52;
  float v58 = v57;
  *(float *)(a1 + 1396) = v58;
  double v59 = *((double *)&v138 + 1);
  float v60 = *(double *)&v138;
  *(float *)(a1 + 1404) = v60;
  float v61 = v52;
  *(float *)(a1 + 1408) = v61;
  double v62 = *(double *)v146;
  float v63 = v139;
  *(float *)(a1 + 1416) = v63;
  float v64 = v59;
  *(float *)(a1 + 1356) = v64;
  *(_DWORD *)(a1 + 1572) = 954437177 * ((unint64_t)(v135 - (unsigned char *)__p) >> 3);
  float v65 = v62;
  *(float *)(a1 + 1420) = v65;
  *(float32x2_t *)(a1 + 1432) = vcvt_f32_f64(*(float64x2_t *)&v146[8]);
  int v66 = *(_DWORD *)(a1 + 1608);
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230F0F0);
  }
  long long v67 = p_cache[511];
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v68 = *(void *)a1;
    int v69 = *(unsigned __int8 *)(a1 + 1320);
    uint64_t v70 = *(void *)(a1 + 1600);
    uint64_t v71 = *(int *)(a1 + 1608);
    uint64_t v72 = *(void *)(a1 + 1616);
    int v73 = *(unsigned __int8 *)(a2 + 26);
    int v74 = *(unsigned __int8 *)(a2 + 27);
    *(_DWORD *)__n128 buf = 134224128;
    *(void *)v191 = v68;
    *(_WORD *)&v191[8] = 2048;
    *(double *)&v191[10] = *(float *)&v147;
    *(_WORD *)&v191[18] = 2048;
    *(double *)&v191[20] = *((float *)&v147 + 1);
    *(_WORD *)&v191[28] = 2048;
    *(void *)&v191[30] = 0x8E38E38E38E38E39 * ((v135 - (unsigned char *)__p) >> 3);
    *(_WORD *)&v191[38] = 1024;
    *(_DWORD *)&v191[40] = v141;
    __int16 v192 = 1024;
    int v193 = v140;
    __int16 v194 = 2048;
    double v195 = v139;
    __int16 v196 = 2048;
    uint64_t v197 = v138;
    __int16 v198 = 2048;
    uint64_t v199 = *(void *)&v191[30];
    __int16 v200 = 1024;
    int v201 = v141;
    __int16 v202 = 1024;
    int v203 = v140;
    __int16 v204 = 2048;
    double v205 = v139;
    __int16 v206 = 2048;
    uint64_t v207 = v138;
    __int16 v208 = 2048;
    uint64_t v209 = *((void *)&v138 + 1);
    __int16 v210 = 1024;
    int v211 = v69;
    __int16 v212 = 2048;
    double v213 = v57;
    __int16 v214 = 2048;
    double v215 = v52;
    __int16 v216 = 1024;
    BOOL v217 = v66 == 3;
    __int16 v218 = 2048;
    uint64_t v219 = v70;
    __int16 v220 = 2048;
    uint64_t v221 = v71;
    __int16 v222 = 2048;
    uint64_t v223 = v72;
    __int16 v224 = 1024;
    int v225 = v55;
    __int16 v226 = 1024;
    int v227 = v73;
    __int16 v228 = 1024;
    int v229 = v74;
    __int16 v230 = 1024;
    int v231 = v54;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "VO2Max,currentWorkoutType,%ld,hrmin,%f,hrmax,%f,outdoorPedestrianNumPairs,%lu,outdoorPedestrianStatus,%d,outdoorPedestrianSessionStatus,%d,outdoorPedestrianSessionVO2Max,%.5f,outdoorPedestrianEst,%.6f,adaptiveModelNumPairs,%lu,adaptiveModelStatus,%d, adaptiveModelSessionStatus,%d,adaptiveModelSessionVO2Max,%.5f,adaptiveModelEst,%f,adaptiveModelPrior,%f,betaBlockerUse,%d,longitudinalVO2Max,%f,sessionVO2Max,%f,isEscalation,%d,sessionDuration,%.5f,sessionType,%ld,escalationRatio,%f,finalStatus,%d,eligibleForHealthKit,%d,eligibleForCalorimetry,%d,numWorkoutsContrToEstimate,%u", buf, 0xD4u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    uint64_t v122 = *(void *)a1;
    int v123 = *(unsigned __int8 *)(a1 + 1320);
    uint64_t v124 = *(void *)(a1 + 1600);
    uint64_t v125 = *(int *)(a1 + 1608);
    uint64_t v126 = *(void *)(a1 + 1616);
    int v127 = *(unsigned __int8 *)(a2 + 26);
    int v128 = *(unsigned __int8 *)(a2 + 27);
    int v148 = 134224128;
    *(void *)unint64_t v149 = v122;
    *(_WORD *)&v149[8] = 2048;
    *(double *)&v149[10] = *(float *)&v147;
    *(_WORD *)&v149[18] = 2048;
    *(double *)&v149[20] = *((float *)&v147 + 1);
    *(_WORD *)&v149[28] = 2048;
    *(void *)&v149[30] = 0x8E38E38E38E38E39 * ((v135 - (unsigned char *)__p) >> 3);
    *(_WORD *)&v149[38] = 1024;
    *(_DWORD *)&v149[40] = v141;
    __int16 v150 = 1024;
    int v151 = v140;
    __int16 v152 = 2048;
    double v153 = v139;
    __int16 v154 = 2048;
    uint64_t v155 = v138;
    __int16 v156 = 2048;
    uint64_t v157 = *(void *)&v149[30];
    __int16 v158 = 1024;
    int v159 = v141;
    __int16 v160 = 1024;
    int v161 = v140;
    __int16 v162 = 2048;
    double v163 = v139;
    __int16 v164 = 2048;
    uint64_t v165 = v138;
    __int16 v166 = 2048;
    uint64_t v167 = *((void *)&v138 + 1);
    __int16 v168 = 1024;
    int v169 = v123;
    __int16 v170 = 2048;
    double v171 = v57;
    __int16 v172 = 2048;
    double v173 = v52;
    __int16 v174 = 1024;
    BOOL v175 = v66 == 3;
    __int16 v176 = 2048;
    uint64_t v177 = v124;
    __int16 v178 = 2048;
    uint64_t v179 = v125;
    __int16 v180 = 2048;
    uint64_t v181 = v126;
    __int16 v182 = 1024;
    int v183 = v55;
    __int16 v184 = 1024;
    int v185 = v127;
    __int16 v186 = 1024;
    int v187 = v128;
    __int16 v188 = 1024;
    int v189 = v54;
    BOOL v129 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "VO2MaxEstimationStatus CLVO2MaxEstimator::evaluateVO2MaxModel(VO2MaxResult &, std::vector<VO2MaxSummary> &, double &, VO2MaxOutput &, const std::vector<VO2MaxSummary> &, CFAbsoluteTime, double)", "%s\n", v129);
    if (v129 != (char *)buf) {
      free(v129);
    }
  }
  *a4 = *((void *)&v138 + 1);
  if (__p)
  {
    double v135 = __p;
    operator delete(__p);
  }
  if (v143)
  {
    uint64_t v144 = v143;
    operator delete(v143);
  }
  return v55;
}

void sub_1010BA08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010BA0E4(uint64_t a1, _DWORD *a2, unsigned char *a3)
{
  if (*(void *)(a1 + 16) == 1) {
    return 0;
  }
  int v7 = uuid_compare((const unsigned __int8 *)(a1 + 40), (const unsigned __int8 *)(a1 + 56));
  BOOL result = 0;
  if (v7 && !*a2)
  {
    BOOL v8 = *(_DWORD *)(a1 + 1608) != 3;
    if (*a3) {
      BOOL v8 = 1;
    }
    return *(double *)(a1 + 1600) > dbl_101DA6380[*(_DWORD *)(a1 + 1608) != 3] && v8;
  }
  return result;
}

void sub_1010BA178(uint64_t a1, uint64_t *a2, long long **a3, long long *a4, uint64_t a5, int a6, unsigned __int8 *src, double a8, double a9, double a10)
{
  if (*a2 == a2[1])
  {
    if (qword_102419220 != -1) {
      dispatch_once(&qword_102419220, &stru_10230F110);
    }
    long long v93 = qword_102419228;
    if (os_log_type_enabled((os_log_t)qword_102419228, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__n128 buf = 134283521;
      *(double *)&uint8_t buf[4] = a8;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "Will not retrocompute VO2Max due to absense of VO2MaxInputs, workoutEndTime:%{private}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419220 != -1) {
        dispatch_once(&qword_102419220, &stru_10230F110);
      }
      LODWORD(v103) = 134283521;
      *(double *)((char *)&v103 + 4) = a8;
      unint64_t v94 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimator::retrocomputeVO2Max(CFAbsoluteTime, const std::vector<VO2MaxInput> &, const std::vector<VO2MaxSummary> &, const CLBodyMetrics &, double, double, CMWorkoutType, CLWorkoutSessionDetails::Type, VO2MaxRetrocomputeSessionResult &)", "%s\n", v94);
      if (v94 != (char *)buf) {
        free(v94);
      }
    }
  }
  else
  {
    srca = (unsigned __int8 *)(a1 + 56);
    uuid_copy((unsigned __int8 *)(a1 + 56), src);
    long long v19 = *a4;
    long long v20 = a4[1];
    long long v21 = a4[2];
    *(_OWORD *)(a1 + 1316) = *(long long *)((char *)a4 + 44);
    *(_OWORD *)(a1 + 1288) = v20;
    *(_OWORD *)(a1 + 1304) = v21;
    *(_OWORD *)(a1 + 1272) = v19;
    *(_DWORD *)(a1 + 1608) = a6;
    *(void *)a1 = a5;
    *(void *)(a1 + 24) = *(void *)(*a2 + 32);
    sub_100B02A78(a1 + 896, (uint64_t)a4);
    float v22 = a10;
    uint64_t v97 = a1 + 896;
    sub_100EBD8D0(a1 + 896, v22);
    *(void *)(a1 + 936) = *(void *)(a1 + 24);
    *(_DWORD *)(a1 + 944) = *(_DWORD *)(a1 + 1608);
    uint64_t v24 = *a2;
    uint64_t v23 = a2[1];
    if (*a2 != v23)
    {
      uint64_t v25 = (char **)(a1 + 1248);
      do
      {
        sub_100B02120(v97, v24, (uint64_t)buf);
        unint64_t v26 = *(void *)(a1 + 1256);
        unint64_t v27 = *(void *)(a1 + 1264);
        if (v26 >= v27)
        {
          unint64_t v32 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - (void)*v25) >> 3);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0x38E38E38E38E38ELL) {
            sub_1001D7FD4();
          }
          unint64_t v34 = 0x8E38E38E38E38E39 * ((uint64_t)(v27 - (void)*v25) >> 3);
          if (2 * v34 > v33) {
            unint64_t v33 = 2 * v34;
          }
          if (v34 >= 0x1C71C71C71C71C7) {
            unint64_t v35 = 0x38E38E38E38E38ELL;
          }
          else {
            unint64_t v35 = v33;
          }
          if (v35) {
            unint64_t v36 = (char *)sub_10021D4B8(a1 + 1264, v35);
          }
          else {
            unint64_t v36 = 0;
          }
          unint64_t v37 = &v36[72 * v32];
          *(_OWORD *)unint64_t v37 = *(_OWORD *)buf;
          long long v38 = v111;
          long long v39 = v112;
          long long v40 = v113;
          *((void *)v37 + 8) = v114;
          *((_OWORD *)v37 + 2) = v39;
          *((_OWORD *)v37 + 3) = v40;
          *((_OWORD *)v37 + 1) = v38;
          long long v41 = *(char **)(a1 + 1256);
          long long v42 = *(char **)(a1 + 1248);
          long long v43 = v37;
          if (v41 != v42)
          {
            do
            {
              *(_OWORD *)(v43 - 72) = *(_OWORD *)(v41 - 72);
              long long v44 = *(_OWORD *)(v41 - 56);
              long long v45 = *(_OWORD *)(v41 - 40);
              long long v46 = *(_OWORD *)(v41 - 24);
              *((_DWORD *)v43 - 2) = *((_DWORD *)v41 - 2);
              *(_OWORD *)(v43 - 24) = v46;
              *(_OWORD *)(v43 - 40) = v45;
              *(_OWORD *)(v43 - 56) = v44;
              v43 -= 72;
              v41 -= 72;
            }
            while (v41 != v42);
            long long v41 = *v25;
          }
          *(void *)(a1 + 1248) = v43;
          long long v31 = v37 + 72;
          *(void *)(a1 + 1256) = v37 + 72;
          *(void *)(a1 + 1264) = &v36[72 * v35];
          if (v41) {
            operator delete(v41);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v26 = *(_OWORD *)buf;
          long long v28 = v111;
          long long v29 = v112;
          long long v30 = v113;
          *(void *)(v26 + 64) = v114;
          *(_OWORD *)(v26 + 32) = v29;
          *(_OWORD *)(v26 + 48) = v30;
          *(_OWORD *)(v26 + 16) = v28;
          long long v31 = (char *)(v26 + 72);
        }
        *(void *)(a1 + 1256) = v31;
        v24 += 112;
      }
      while (v24 != v23);
    }
    *(double *)(a1 + 1600) = vabdd_f64(*(double *)(a1 + 928), *(double *)(a1 + 920));
    long long v103 = 0x7FEFFFFFFFFFFFFFuLL;
    unint64_t v104 = 0xBFF0000000000000;
    char v106 = 0;
    int v109 = 0;
    v105[0] = 0;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    long long __p = 0;
    long long v101 = 0;
    uint64_t v102 = 0;
    uint64_t v99 = 0;
    long long v117 = 0u;
    long long v118 = 0u;
    long long v115 = 0u;
    long long v116 = 0u;
    long long v113 = 0u;
    long long v114 = 0u;
    long long v111 = 0u;
    long long v112 = 0u;
    *(_OWORD *)__n128 buf = 0u;
    int v98 = sub_1010B932C(a1, (uint64_t)&v103, &__p, &v99, (uint64_t)buf, a3, a8, a9);
    long long v47 = (unsigned __int8 *)__p;
    uint64_t v48 = v101;
    if (__p != v101)
    {
      uint64_t v49 = src + 32;
      do
      {
        uuid_copy(v47 + 24, srca);
        *((void *)v47 + 2) = *(void *)a1;
        *((_DWORD *)v47 + 45) = *(_DWORD *)(a1 + 1608);
        unint64_t v50 = *((void *)src + 5);
        unint64_t v51 = *((void *)src + 6);
        if (v50 >= v51)
        {
          unint64_t v62 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v50 - *(void *)v49) >> 3);
          unint64_t v63 = v62 + 1;
          if (v62 + 1 > 0x1642C8590B21642) {
            sub_1001D7FD4();
          }
          unint64_t v64 = 0xD37A6F4DE9BD37A7 * ((uint64_t)(v51 - *(void *)v49) >> 3);
          if (2 * v64 > v63) {
            unint64_t v63 = 2 * v64;
          }
          if (v64 >= 0xB21642C8590B21) {
            unint64_t v65 = 0x1642C8590B21642;
          }
          else {
            unint64_t v65 = v63;
          }
          if (v65) {
            int v66 = (char *)sub_10050F820((uint64_t)(src + 48), v65);
          }
          else {
            int v66 = 0;
          }
          long long v67 = &v66[184 * v62];
          long long v68 = *(_OWORD *)v47;
          long long v69 = *((_OWORD *)v47 + 1);
          long long v70 = *((_OWORD *)v47 + 3);
          *((_OWORD *)v67 + 2) = *((_OWORD *)v47 + 2);
          *((_OWORD *)v67 + 3) = v70;
          *(_OWORD *)long long v67 = v68;
          *((_OWORD *)v67 + 1) = v69;
          long long v71 = *((_OWORD *)v47 + 4);
          long long v72 = *((_OWORD *)v47 + 5);
          long long v73 = *((_OWORD *)v47 + 7);
          *((_OWORD *)v67 + 6) = *((_OWORD *)v47 + 6);
          *((_OWORD *)v67 + 7) = v73;
          *((_OWORD *)v67 + 4) = v71;
          *((_OWORD *)v67 + 5) = v72;
          long long v74 = *((_OWORD *)v47 + 8);
          long long v75 = *((_OWORD *)v47 + 9);
          long long v76 = *((_OWORD *)v47 + 10);
          *((void *)v67 + 22) = *((void *)v47 + 22);
          *((_OWORD *)v67 + 9) = v75;
          *((_OWORD *)v67 + 10) = v76;
          *((_OWORD *)v67 + 8) = v74;
          int v78 = (char *)*((void *)src + 4);
          double v77 = (char *)*((void *)src + 5);
          uint64_t v79 = v67;
          if (v77 != v78)
          {
            do
            {
              long long v80 = *(_OWORD *)(v77 - 184);
              long long v81 = *(_OWORD *)(v77 - 168);
              long long v82 = *(_OWORD *)(v77 - 152);
              *(_OWORD *)(v79 - 136) = *(_OWORD *)(v77 - 136);
              *(_OWORD *)(v79 - 152) = v82;
              *(_OWORD *)(v79 - 168) = v81;
              *(_OWORD *)(v79 - 184) = v80;
              long long v83 = *(_OWORD *)(v77 - 120);
              long long v84 = *(_OWORD *)(v77 - 104);
              long long v85 = *(_OWORD *)(v77 - 88);
              *(_OWORD *)(v79 - 72) = *(_OWORD *)(v77 - 72);
              *(_OWORD *)(v79 - 88) = v85;
              *(_OWORD *)(v79 - 104) = v84;
              *(_OWORD *)(v79 - 120) = v83;
              long long v86 = *(_OWORD *)(v77 - 56);
              long long v87 = *(_OWORD *)(v77 - 40);
              long long v88 = *(_OWORD *)(v77 - 24);
              *((void *)v79 - 1) = *((void *)v77 - 1);
              *(_OWORD *)(v79 - 24) = v88;
              *(_OWORD *)(v79 - 40) = v87;
              *(_OWORD *)(v79 - 56) = v86;
              v79 -= 184;
              v77 -= 184;
            }
            while (v77 != v78);
            double v77 = *(char **)v49;
          }
          float v61 = v67 + 184;
          *((void *)src + 4) = v79;
          *((void *)src + 5) = v67 + 184;
          *((void *)src + 6) = &v66[184 * v65];
          if (v77) {
            operator delete(v77);
          }
        }
        else
        {
          long long v52 = *(_OWORD *)v47;
          long long v53 = *((_OWORD *)v47 + 1);
          long long v54 = *((_OWORD *)v47 + 3);
          *(_OWORD *)(v50 + 32) = *((_OWORD *)v47 + 2);
          *(_OWORD *)(v50 + 48) = v54;
          *(_OWORD *)unint64_t v50 = v52;
          *(_OWORD *)(v50 + 16) = v53;
          long long v55 = *((_OWORD *)v47 + 4);
          long long v56 = *((_OWORD *)v47 + 5);
          long long v57 = *((_OWORD *)v47 + 7);
          *(_OWORD *)(v50 + 96) = *((_OWORD *)v47 + 6);
          *(_OWORD *)(v50 + 112) = v57;
          *(_OWORD *)(v50 + 64) = v55;
          *(_OWORD *)(v50 + 80) = v56;
          long long v58 = *((_OWORD *)v47 + 8);
          long long v59 = *((_OWORD *)v47 + 9);
          long long v60 = *((_OWORD *)v47 + 10);
          *(void *)(v50 + 176) = *((void *)v47 + 22);
          *(_OWORD *)(v50 + 144) = v59;
          *(_OWORD *)(v50 + 160) = v60;
          *(_OWORD *)(v50 + 128) = v58;
          float v61 = (char *)(v50 + 184);
        }
        *((void *)src + 5) = v61;
        v47 += 184;
      }
      while (v47 != v48);
    }
    if (sub_1010BA0E4(a1, &v98, v105))
    {
      uuid_copy((unsigned __int8 *)&v114 + 8, srca);
      BYTE13(v116) = 1;
      BYTE12(v116) = *(unsigned char *)(a1 + 1328);
      *(_OWORD *)(src + 56) = *(_OWORD *)buf;
      long long v89 = v113;
      *(_OWORD *)(src + 120) = v114;
      *(_OWORD *)(src + 104) = v89;
      long long v90 = v111;
      *(_OWORD *)(src + 88) = v112;
      *(_OWORD *)(src + 72) = v90;
      long long v91 = v117;
      *(_OWORD *)(src + 184) = v118;
      *(_OWORD *)(src + 168) = v91;
      long long v92 = v116;
      *(_OWORD *)(src + 136) = v115;
      *(_OWORD *)(src + 152) = v92;
    }
    sub_1010BA8B8(v97, a1 + 1336);
    if (__p)
    {
      long long v101 = (unsigned __int8 *)__p;
      operator delete(__p);
    }
  }
}

void sub_1010BA88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_1010BA8B8(uint64_t a1, uint64_t a2)
{
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230F0F0);
  }
  double v4 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    int v6 = *(_DWORD *)(a1 + 68);
    int v7 = *(_DWORD *)(a1 + 72);
    int v8 = *(_DWORD *)(a1 + 76);
    int v9 = *(_DWORD *)(a1 + 80);
    int v10 = *(_DWORD *)(a1 + 84);
    int v11 = *(_DWORD *)(a1 + 88);
    int v12 = *(_DWORD *)(a1 + 92);
    int v14 = *(_DWORD *)(a1 + 96);
    int v13 = *(_DWORD *)(a1 + 100);
    int v15 = *(_DWORD *)(a1 + 104);
    int v16 = *(_DWORD *)(a1 + 108);
    int v17 = *(_DWORD *)(a1 + 120);
    int v18 = *(_DWORD *)(a1 + 124);
    int v19 = *(_DWORD *)(a1 + 112);
    int v20 = *(_DWORD *)(a1 + 116);
    uint64_t v21 = *(void *)(a1 + 40);
    int v22 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)__n128 buf = 67113984;
    int v36 = v5;
    __int16 v37 = 1024;
    int v38 = 0;
    __int16 v39 = 1024;
    int v40 = v6;
    __int16 v41 = 1024;
    int v42 = v7;
    __int16 v43 = 1024;
    int v44 = 0;
    __int16 v45 = 1024;
    int v46 = v8;
    __int16 v47 = 1024;
    int v48 = v9;
    __int16 v49 = 1024;
    int v50 = v10;
    __int16 v51 = 1024;
    int v52 = v11;
    __int16 v53 = 1024;
    int v54 = v12;
    __int16 v55 = 1024;
    int v56 = v14;
    __int16 v57 = 1024;
    int v58 = v13;
    __int16 v59 = 1024;
    int v60 = v15;
    __int16 v61 = 1024;
    int v62 = v16;
    __int16 v63 = 1024;
    int v64 = v17;
    __int16 v65 = 1024;
    int v66 = v18;
    __int16 v67 = 1024;
    int v68 = v19;
    __int16 v69 = 1024;
    int v70 = v20;
    __int16 v71 = 2048;
    uint64_t v72 = v21;
    __int16 v73 = 1024;
    int v74 = v22;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PreProcessor,PairStats,total,%d,warmup,%d,grade,%d,flat,%d,delta,%d,metsAboveMin,%d,gps,%d,stride,%d,distance,%d,source,%d,hrOK,%d,totalWorkoutLengthOK,%d,totalPaceOK,%d,totalStrollerOK,%d,totalPercentWalkingOK,%d,metsAboveAdaptiveMin,%d,totalGoodForClustering,%d,totalGoodForAdaptiveModel,%d,workoutStartTime,%f,workoutSessionType,%d", buf, 0x7Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    unint64_t v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxPreprocessor::log(T &) [T = CLVO2MaxStats]", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  *(_DWORD *)(a2 + 228) = 100;
  int v23 = *(_DWORD *)(a1 + 64);
  if (v23)
  {
    float v24 = (float)(100 * *(_DWORD *)(a1 + 96) / v23);
    *(_DWORD *)(a2 + 224) = v24;
    *(float *)(a2 + 248) = (float)(100 * *(_DWORD *)(a1 + 72) / v23);
    *(float *)(a2 + 252) = (float)(100 * *(_DWORD *)(a1 + 84) / v23);
    float v25 = (float)(100 * *(_DWORD *)(a1 + 80) / v23);
    float v26 = (float)(100 * *(_DWORD *)(a1 + 128) / v23);
    float v27 = (float)(100 * *(_DWORD *)(a1 + 132) / v23);
    float v28 = (float)(100 * *(_DWORD *)(a1 + 136) / v23);
  }
  else
  {
    *(_DWORD *)(a2 + 224) = 0;
    float v25 = 0.0;
    float v24 = 0.0;
    float v26 = 0.0;
    float v27 = 0.0;
    *(void *)(a2 + 248) = 0;
    float v28 = 0.0;
  }
  *(float *)(a2 + 148) = v25;
  *(float *)(a2 + 152) = v24;
  *(float *)(a2 + 160) = v26;
  *(float *)(a2 + 164) = v27;
  *(float *)(a2 + 176) = v28;
  int v29 = *(_DWORD *)(a1 + 200);
  if (v29 <= 0)
  {
    *(_DWORD *)(a2 + 168) = 0;
    double v31 = 0.0;
  }
  else
  {
    float v30 = *(double *)(a1 + 216);
    *(float *)(a2 + 168) = v30;
    double v31 = 0.0;
    int v32 = v29 - 1;
    if (v32) {
      double v31 = *(double *)(a1 + 232) / (double)v32;
    }
  }
  float result = sqrt(v31);
  *(float *)(a2 + 172) = result;
  *(_DWORD *)(a2 + 192) = *(_DWORD *)(a1 + 16);
  return result;
}

BOOL sub_1010BAD0C(uint64_t a1)
{
  int v7 = 0;
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v2 = sub_1011E124C();
  sub_1011E1AFC(v2, &v7);
  int v3 = v7;
  double v4 = v8;
  unint64_t v5 = *(int *)(a1 + 1688);
  if (v7)
  {
    int v8 = v7;
    operator delete(v7);
  }
  return 0x8E38E38E38E38E39 * ((v4 - v3) >> 4) >= v5;
}

void sub_1010BAD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1010BADA8(uint64_t a1)
{
  uint64_t v1 = (const unsigned __int8 *)(a1 + 56);
  if (!uuid_compare((const unsigned __int8 *)(a1 + 40), (const unsigned __int8 *)(a1 + 56))) {
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v2 = sub_1011E124C();
  return sub_1011E1B0C(v2, v1, &v4);
}

void sub_1010BAE34(uint64_t a1, int a2, double a3, double a4)
{
  sub_1010BA8B8(a1 + 896, a1 + 1336);
  *(_DWORD *)(a1 + 1532) = a2;
  *(void *)(a1 + 1520) = *(void *)a1;
  *(_DWORD *)(a1 + 1536) = *(_DWORD *)(a1 + 1608);
  float v8 = *(double *)(a1 + 1616) * 100.0;
  *(float *)(a1 + 1492) = v8;
  float v9 = *(double *)(a1 + 1600);
  *(float *)(a1 + 1516) = v9;
  float v10 = -1.0;
  if (!a2)
  {
    long long v11 = *(_OWORD *)(a1 + 1288);
    v119[0] = *(_OWORD *)(a1 + 1272);
    v119[1] = v11;
    v120[0] = *(_OWORD *)(a1 + 1304);
    *(_OWORD *)((char *)v120 + 12) = *(_OWORD *)(a1 + 1316);
    sub_10061E40C((uint64_t)v119);
    float v13 = ((float)(v12 * 3.5) - a3) * 100.0 / a3;
    if (v13 > 100.0) {
      float v13 = 100.0;
    }
    if (v13 >= -100.0) {
      float v10 = v13 + 100.0;
    }
    else {
      float v10 = 0.0;
    }
  }
  BOOL v118 = 0;
  uint64_t v14 = sub_1000A6958();
  sub_1000D29FC(v14, @"ActiveJacksonCalibration", &v118);
  *(_DWORD *)(a1 + 1568) = 0x80000000;
  BOOL v15 = v118;
  BOOL v16 = a2 != 0;
  if (!v118) {
    BOOL v16 = 1;
  }
  if (v16 || (float v17 = *(float *)(a1 + 1316), v17 == 0.0))
  {
    int v19 = 0;
  }
  else
  {
    float v18 = a3 / 3.5;
    *(_DWORD *)(a1 + 1568) = (int)((float)(v18 - v17) * 100.0 / v17);
    int v19 = 1;
  }
  *(float *)(a1 + 1576) = v10;
  *(unsigned char *)(a1 + 1580) = v15;
  long long __p = 0;
  long long v116 = 0;
  uint64_t v117 = 0;
  uint64_t v20 = sub_1011E124C();
  sub_1011E1B04(v20, &__p, 0);
  uint64_t v21 = (double *)__p;
  int v22 = v116;
  if (__p == v116)
  {
    double v34 = 0.0;
  }
  else
  {
    int v23 = 0;
    double v24 = 0.0;
    float v25 = 0.0;
    int v26 = 1;
    float v27 = 0.0;
    float v28 = 0.0;
    int v29 = (double *)__p;
    double v30 = 0.0;
    double v31 = 0.0;
    double v32 = 0.0;
    double v33 = 0.0;
    double v34 = 0.0;
    do
    {
      double v35 = v30;
      int v36 = v26;
      double v37 = v29[4];
      double v38 = v37;
      double v39 = 0.0;
      if (v26 != 1)
      {
        double v38 = v34 + (v37 - v34) / (double)v26;
        double v39 = v33 + (v37 - v34) * (v37 - v38);
        double v32 = v39;
      }
      double v33 = v39;
      double v34 = v38;
      if (v29[3] <= a4 + -604800.0)
      {
        double v37 = v24;
      }
      else if (v23)
      {
        double v31 = v24 + (v37 - v24) / (double)++v23;
        double v37 = v31;
      }
      else
      {
        int v23 = 1;
        double v31 = v29[4];
      }
      double v30 = v35 + 1.0;
      uint64_t v40 = *((void *)v29 + 5);
      float v41 = v28 + 1.0;
      float v42 = v25 + 1.0;
      if (v40 != 15) {
        float v42 = v25;
      }
      if (v40 == 17) {
        float v42 = v25;
      }
      else {
        float v41 = v28;
      }
      if (v40 == 24) {
        float v27 = v27 + 1.0;
      }
      else {
        float v28 = v41;
      }
      if (v40 != 24) {
        float v25 = v42;
      }
      v29 += 18;
      int v26 = v36 + 1;
      double v24 = v37;
    }
    while (v29 != v116);
    if (v34 > 0.0)
    {
      double v43 = 0.0;
      if (v23 <= 0) {
        double v44 = 0.0;
      }
      else {
        double v44 = v31;
      }
      float v45 = v44 / v34;
      *(float *)(a1 + 1444) = v45;
      if (v36 != 1) {
        double v43 = v32 / v35;
      }
      float v46 = sqrt(v43);
      *(float *)(a1 + 1440) = v46;
    }
    if (v21 != v22)
    {
      unint64_t v47 = 0x8E38E38E38E38E39 * (((char *)v22 - (char *)v21) >> 4);
      if (v47 >= 2)
      {
        float v48 = v21[4] / v21[22];
        *(float *)(a1 + 1448) = v48;
      }
      *(float *)(a1 + 1452) = v25 / (float)v47;
      *(float *)(a1 + 1456) = v28 / (float)v47;
      *(float *)(a1 + 1460) = v27 / (float)v47;
    }
  }
  long long v116 = v21;
  uint64_t v49 = sub_1011E124C();
  uint64_t v50 = sub_1011E1B04(v49, &__p, 1);
  *(_DWORD *)(a1 + 1464) = 954437177 * ((unint64_t)((char *)v116 - (unsigned char *)__p) >> 4);
  uint64_t v51 = sub_1010BC1B4(a4 + -7257600.0, v50, &__p);
  *(_DWORD *)(a1 + 1468) = v51;
  sub_1010BC3D8(v51, &__p);
  *(float *)&double v52 = v52;
  *(_DWORD *)(a1 + 1480) = LODWORD(v52);
  uint64_t v53 = [+[NSTimeZone localTimeZone] secondsFromGMT];
  int v54 = __p;
  __int16 v55 = v116;
  if (v116 == __p)
  {
    int v61 = 0;
    *(_DWORD *)(a1 + 1472) = 0;
  }
  else
  {
    int v56 = 0;
    signed int v57 = 0;
    do
    {
      signed int v58 = vcvtmd_s64_f64((*(v55 - 15) + (double)v53) / 86400.0);
      __int16 v59 = v55 - 18;
      BOOL v60 = v57 < v58;
      if (v57 <= v58) {
        signed int v57 = v58;
      }
      if (v60) {
        ++v56;
      }
      v55 -= 18;
    }
    while (v59 != __p);
    *(_DWORD *)(a1 + 1472) = v56;
    int v61 = v54[28];
  }
  *(_DWORD *)(a1 + 1476) = v61;
  *(_DWORD *)(a1 + 1340) = *(_DWORD *)(a1 + 1292);
  *(_DWORD *)(a1 + 1336) = *(_DWORD *)(a1 + 1276);
  *(unsigned char *)(a1 + 1344) = *(unsigned char *)(a1 + 1320);
  float v62 = *(float *)(a1 + 1284);
  if (v62 != 0.0)
  {
    float v63 = *(float *)(a1 + 1280);
    if (v63 != 0.0) {
      *(float *)(a1 + 1348) = v62 / (float)(v63 * v63);
    }
  }
  float v64 = v34;
  if (v21 == v22) {
    float v64 = 0.0;
  }
  *(float *)(a1 + 1352) = v64;
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230F0F0);
  }
  __int16 v65 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v66 = *(_DWORD *)(a1 + 1552);
    int v67 = *(_DWORD *)(a1 + 1556);
    int v68 = *(_DWORD *)(a1 + 1560);
    int v69 = *(_DWORD *)(a1 + 1564);
    *(_DWORD *)__n128 buf = 67109888;
    LODWORD(v221) = v66;
    WORD2(v221) = 1024;
    *(_DWORD *)((char *)&v221 + 6) = v67;
    WORD5(v221) = 1024;
    HIDWORD(v221) = v68;
    *(_WORD *)__int16 v222 = 1024;
    *(_DWORD *)&v222[2] = v69;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "VO2Max,pctHRSamplesValidMin,%d,pctHRSamplesValidMax,%d,pctHRSamplesWithRecentHR,%d,pctMETSamplesWithValidDelta,%d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    int v94 = *(_DWORD *)(a1 + 1552);
    int v95 = *(_DWORD *)(a1 + 1556);
    int v96 = *(_DWORD *)(a1 + 1560);
    int v97 = *(_DWORD *)(a1 + 1564);
    int v121 = 67109888;
    LODWORD(v122) = v94;
    WORD2(v122) = 1024;
    *(_DWORD *)((char *)&v122 + 6) = v95;
    WORD5(v122) = 1024;
    HIDWORD(v122) = v96;
    *(_WORD *)int v123 = 1024;
    *(_DWORD *)&v123[2] = v97;
    int v98 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimator::logSessionStats(double, VO2MaxEstimationStatus, CFAbsoluteTime)", "%s\n", v98);
    if (v98 != (char *)buf) {
      free(v98);
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230F0F0);
  }
  int v70 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    int v71 = *(_DWORD *)(a1 + 1568);
    double v72 = a3 / 3.5;
    double v73 = *(float *)(a1 + 1316);
    *(_DWORD *)__n128 buf = 67109632;
    LODWORD(v221) = v71;
    WORD2(v221) = 2048;
    *(double *)((char *)&v221 + 6) = v73;
    if (!v19) {
      double v72 = 0.0;
    }
    HIWORD(v221) = 2048;
    *(double *)__int16 v222 = v72;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEBUG, "VO2Max,longitudinalConsistency,%d,old,%f,new,%f", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    int v99 = *(_DWORD *)(a1 + 1568);
    double v100 = a3 / 3.5;
    double v101 = *(float *)(a1 + 1316);
    int v121 = 67109632;
    LODWORD(v122) = v99;
    WORD2(v122) = 2048;
    *(double *)((char *)&v122 + 6) = v101;
    if (!v19) {
      double v100 = 0.0;
    }
    HIWORD(v122) = 2048;
    *(double *)int v123 = v100;
    uint64_t v102 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimator::logSessionStats(double, VO2MaxEstimationStatus, CFAbsoluteTime)", "%s\n", v102);
    if (v102 != (char *)buf) {
      free(v102);
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230F0F0);
  }
  int v74 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 134231040;
    *(double *)&long long v221 = *(float *)(a1 + 1340);
    *(double *)&v222[6] = *(float *)(a1 + 1348);
    double v224 = *(float *)(a1 + 1352);
    double v226 = *(float *)(a1 + 1356);
    double v228 = *(float *)(a1 + 1360);
    double v230 = *(float *)(a1 + 1364);
    double v232 = *(float *)(a1 + 1368);
    double v234 = *(float *)(a1 + 1372);
    double v236 = *(float *)(a1 + 1376);
    double v238 = *(float *)(a1 + 1380);
    double v240 = *(float *)(a1 + 1384);
    double v242 = *(float *)(a1 + 1388);
    double v244 = *(float *)(a1 + 1392);
    double v246 = *(float *)(a1 + 1396);
    double v248 = *(float *)(a1 + 1404);
    double v250 = v248;
    double v252 = *(float *)(a1 + 1408);
    double v254 = *(float *)(a1 + 1416);
    double v256 = v254;
    double v258 = *(float *)(a1 + 1420);
    double v260 = *(float *)(a1 + 1432);
    double v264 = v260;
    double v262 = *(float *)(a1 + 1436);
    double v266 = v262;
    double v268 = *(float *)(a1 + 1440);
    double v270 = *(float *)(a1 + 1444);
    double v272 = *(float *)(a1 + 1448);
    double v274 = *(float *)(a1 + 1452);
    double v276 = *(float *)(a1 + 1456);
    double v278 = *(float *)(a1 + 1460);
    double v286 = *(float *)(a1 + 1480);
    double v290 = *(float *)(a1 + 1484);
    double v292 = *(float *)(a1 + 1488);
    double v294 = *(float *)(a1 + 1492);
    double v296 = *(float *)(a1 + 1496);
    double v298 = *(float *)(a1 + 1500);
    double v300 = *(float *)(a1 + 1504);
    double v302 = *(float *)(a1 + 1508);
    double v304 = *(float *)(a1 + 1512);
    double v310 = *(float *)(a1 + 1516);
    int v75 = *(_DWORD *)(a1 + 1336);
    int v76 = *(unsigned __int8 *)(a1 + 1344);
    int v77 = *(_DWORD *)(a1 + 1464);
    int v78 = *(_DWORD *)(a1 + 1468);
    int v79 = *(_DWORD *)(a1 + 1472);
    int v80 = *(_DWORD *)(a1 + 1476);
    uint64_t v81 = *(void *)(a1 + 1520);
    int v82 = *(_DWORD *)(a1 + 1536);
    int v83 = *(_DWORD *)(a1 + 1528);
    int v84 = *(_DWORD *)(a1 + 1532);
    int v85 = *(_DWORD *)(a1 + 1544);
    WORD4(v221) = 1024;
    *(_DWORD *)((char *)&v221 + 10) = v75;
    HIWORD(v221) = 1024;
    *(_DWORD *)__int16 v222 = v76;
    *(_WORD *)&v222[4] = 2048;
    __int16 v223 = 2048;
    __int16 v225 = 2048;
    __int16 v227 = 2048;
    __int16 v229 = 2048;
    __int16 v231 = 2048;
    __int16 v233 = 2048;
    __int16 v235 = 2048;
    __int16 v237 = 2048;
    __int16 v239 = 2048;
    __int16 v241 = 2048;
    __int16 v243 = 2048;
    __int16 v245 = 2048;
    __int16 v247 = 2048;
    __int16 v249 = 2048;
    __int16 v251 = 2048;
    __int16 v253 = 2048;
    __int16 v255 = 2048;
    __int16 v257 = 2048;
    __int16 v259 = 2048;
    __int16 v261 = 2048;
    __int16 v263 = 2048;
    __int16 v265 = 2048;
    __int16 v267 = 2048;
    __int16 v269 = 2048;
    __int16 v271 = 2048;
    __int16 v273 = 2048;
    __int16 v275 = 2048;
    __int16 v277 = 2048;
    __int16 v279 = 1024;
    int v280 = v77;
    __int16 v281 = 1024;
    int v282 = v78;
    __int16 v283 = 1024;
    int v284 = v79;
    __int16 v285 = 2048;
    __int16 v287 = 1024;
    int v288 = v80;
    __int16 v289 = 2048;
    __int16 v291 = 2048;
    __int16 v293 = 2048;
    __int16 v295 = 2048;
    __int16 v297 = 2048;
    __int16 v299 = 2048;
    __int16 v301 = 2048;
    __int16 v303 = 2048;
    __int16 v305 = 1024;
    int v306 = v81;
    __int16 v307 = 1024;
    int v308 = v82;
    __int16 v309 = 2048;
    __int16 v311 = 1024;
    int v312 = v83;
    __int16 v313 = 1024;
    int v314 = v84;
    __int16 v315 = 1024;
    int v316 = 3;
    __int16 v317 = 1024;
    int v318 = v85;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "VO2Max,age,%.2f,biologicalSex,%d,useBetaBlocker,%d,userBMI,%.2f,vo2MaxMean,%.2f,vo2MaxPrior,%.2f,hrMaxObserved,%.2f,hrMaxAgePredicted,%.2f,hrMaxAgeAndMedicationPredicted,%.2f,hrMinBodyMetricsPredicted,%.2f,hrOnset,%.2f,hrRestingObservedOneDay,%.2f,hrRestingObservedSevenDays,%.2f,maxMetsMean,%.2f,maxMetsHigh,%.2f,vo2MaxValue,%.2f,vo2MaxValueAdaptiveModel,%.2f,vo2MaxValueOutdoorPedestrianModel,%.2f,vo2MaxValueOOB,%.2f,vo2MaxValueAdaptiveModelOOB,%.2f,vo2MaxValueOutdoorPedestrianModelOOB,%.2f,efficiency,%.2f,clustersHRMeanPedestrianModel,%.2f,clustersMetsMeanPedestrianModel,%.2f,clustersHRMeanAdaptiveModel,%.2f,clustersMetsMeanAdaptiveModel,%.2f,vo2MaxStDev,%.2f,vo2MaxTrend,%.2f,vo2MaxTrendSingleEst,%.2f,workoutTypeRatioWalk,%.2f,workoutTypeRatioRun,%.2f,workoutTypeRatioHike,%.2f,lookbackNumEstimates,%d,lookbackNumEstimatesAfterUpdate,%d,lookbackNumDaysWithEstimate,%d,lookbackEWMAPlusWeightedStDev,%.2f,numWorkoutsContrToLatestEstimate,%d,pctGPSAvailability,%.2f,pctHeartRateAvailability,%.2f,pctBackgroundEscalation,%.2f,pctHRMax,%.2f,pctHRMin,%.2f,validGradeMean,%.2f,validGradeStd,%.2f,pctGradeAboveAnalyticsThreshold,%.2f,workoutType,%d,sessionType,%d,sessionDuration,%.2f,hrMinSource,%d,vo2MaxEstimationStatus,%d,arbitrationState,%d,limitState,%d", buf, 0x1DAu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    int v121 = 134231040;
    *(double *)&long long v122 = *(float *)(a1 + 1340);
    *(double *)&v123[6] = *(float *)(a1 + 1348);
    double v125 = *(float *)(a1 + 1352);
    double v127 = *(float *)(a1 + 1356);
    double v129 = *(float *)(a1 + 1360);
    double v131 = *(float *)(a1 + 1364);
    double v133 = *(float *)(a1 + 1368);
    double v135 = *(float *)(a1 + 1372);
    double v137 = *(float *)(a1 + 1376);
    double v139 = *(float *)(a1 + 1380);
    double v141 = *(float *)(a1 + 1384);
    double v143 = *(float *)(a1 + 1388);
    double v145 = *(float *)(a1 + 1392);
    double v147 = *(float *)(a1 + 1396);
    double v149 = *(float *)(a1 + 1404);
    double v151 = v149;
    double v153 = *(float *)(a1 + 1408);
    double v155 = *(float *)(a1 + 1416);
    double v157 = v155;
    double v159 = *(float *)(a1 + 1420);
    double v161 = *(float *)(a1 + 1432);
    double v165 = v161;
    double v163 = *(float *)(a1 + 1436);
    double v167 = v163;
    double v169 = *(float *)(a1 + 1440);
    double v171 = *(float *)(a1 + 1444);
    double v173 = *(float *)(a1 + 1448);
    double v175 = *(float *)(a1 + 1452);
    double v177 = *(float *)(a1 + 1456);
    double v179 = *(float *)(a1 + 1460);
    double v187 = *(float *)(a1 + 1480);
    double v191 = *(float *)(a1 + 1484);
    double v193 = *(float *)(a1 + 1488);
    double v195 = *(float *)(a1 + 1492);
    double v197 = *(float *)(a1 + 1496);
    double v199 = *(float *)(a1 + 1500);
    double v201 = *(float *)(a1 + 1504);
    double v203 = *(float *)(a1 + 1508);
    double v205 = *(float *)(a1 + 1512);
    double v211 = *(float *)(a1 + 1516);
    int v103 = *(_DWORD *)(a1 + 1336);
    int v104 = *(unsigned __int8 *)(a1 + 1344);
    int v105 = *(_DWORD *)(a1 + 1464);
    int v106 = *(_DWORD *)(a1 + 1468);
    int v107 = *(_DWORD *)(a1 + 1472);
    int v108 = *(_DWORD *)(a1 + 1476);
    uint64_t v109 = *(void *)(a1 + 1520);
    int v110 = *(_DWORD *)(a1 + 1536);
    int v111 = *(_DWORD *)(a1 + 1528);
    int v112 = *(_DWORD *)(a1 + 1532);
    int v113 = *(_DWORD *)(a1 + 1544);
    WORD4(v122) = 1024;
    *(_DWORD *)((char *)&v122 + 10) = v103;
    HIWORD(v122) = 1024;
    *(_DWORD *)int v123 = v104;
    *(_WORD *)&v123[4] = 2048;
    __int16 v124 = 2048;
    __int16 v126 = 2048;
    __int16 v128 = 2048;
    __int16 v130 = 2048;
    __int16 v132 = 2048;
    __int16 v134 = 2048;
    __int16 v136 = 2048;
    __int16 v138 = 2048;
    __int16 v140 = 2048;
    __int16 v142 = 2048;
    __int16 v144 = 2048;
    __int16 v146 = 2048;
    __int16 v148 = 2048;
    __int16 v150 = 2048;
    __int16 v152 = 2048;
    __int16 v154 = 2048;
    __int16 v156 = 2048;
    __int16 v158 = 2048;
    __int16 v160 = 2048;
    __int16 v162 = 2048;
    __int16 v164 = 2048;
    __int16 v166 = 2048;
    __int16 v168 = 2048;
    __int16 v170 = 2048;
    __int16 v172 = 2048;
    __int16 v174 = 2048;
    __int16 v176 = 2048;
    __int16 v178 = 2048;
    __int16 v180 = 1024;
    int v181 = v105;
    __int16 v182 = 1024;
    int v183 = v106;
    __int16 v184 = 1024;
    int v185 = v107;
    __int16 v186 = 2048;
    __int16 v188 = 1024;
    int v189 = v108;
    __int16 v190 = 2048;
    __int16 v192 = 2048;
    __int16 v194 = 2048;
    __int16 v196 = 2048;
    __int16 v198 = 2048;
    __int16 v200 = 2048;
    __int16 v202 = 2048;
    __int16 v204 = 2048;
    __int16 v206 = 1024;
    int v207 = v109;
    __int16 v208 = 1024;
    int v209 = v110;
    __int16 v210 = 2048;
    __int16 v212 = 1024;
    int v213 = v111;
    __int16 v214 = 1024;
    int v215 = v112;
    __int16 v216 = 1024;
    int v217 = 3;
    __int16 v218 = 1024;
    int v219 = v113;
    long long v114 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimator::logSessionStats(double, VO2MaxEstimationStatus, CFAbsoluteTime)", "%s\n", v114);
    if (v114 != (char *)buf) {
      free(v114);
    }
  }
  long long v87 = objc_alloc_init(ALActivityLog);
  [(ALActivityLog *)v87 setTimestamp:CFAbsoluteTimeGetCurrent()];
  [(ALActivityLog *)v87 setJacksonData:objc_alloc_init(ALCLJacksonData)];
  [(ALCLJacksonData *)[(ALActivityLog *)v87 jacksonData] setNPairs:*(unsigned int *)(a1 + 1572)];
  long long v88 = [(ALActivityLog *)v87 jacksonData];
  *(float *)&double v89 = a3;
  [(ALCLJacksonData *)v88 setLsest:v89];
  long long v90 = [(ALActivityLog *)v87 jacksonData];
  LODWORD(v91) = -1.0;
  [(ALCLJacksonData *)v90 setSumest:v91];
  [(ALCLJacksonData *)[(ALActivityLog *)v87 jacksonData] setFPal:*(float *)(a1 + 1308)];
  [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v87];
  uint64_t v92 = sub_1001A58C0();
  sub_101432210(v92, a1 + 1336);
  uint64_t v93 = sub_1001A58C0();
  sub_1014315C0(v93);
  sub_1010BC638();
  if (__p)
  {
    long long v116 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1010BBE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010BBEA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 1248);
  uint64_t v2 = *(void *)(a1 + 1256);
  if (v1 == v2)
  {
    int v3 = 0;
    double v8 = 0.0;
    double v10 = 0.0;
    double v12 = 0.0;
    double v7 = 0.0;
    double v11 = 0.0;
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
    int v5 = 0;
    double v6 = *(double *)(a1 + 32);
    double v7 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    do
    {
      double v12 = *(double *)v1;
      if (*(double *)v1 <= v6)
      {
        double v12 = v9;
      }
      else
      {
        double v13 = *(float *)(v1 + 16);
        if (!v3)
        {
          double v10 = *(double *)v1;
          double v7 = *(float *)(v1 + 16);
        }
        if (fabs(v12 - v6 + -60.0) >= 5.0)
        {
          if (fabs(v12 - v6 + -120.0) < 5.0)
          {
            double v11 = v11 + v13;
            ++v5;
          }
        }
        else
        {
          double v8 = v8 + v13;
          ++v4;
        }
        ++v3;
        double v9 = *(double *)v1;
      }
      v1 += 72;
    }
    while (v1 != v2);
    if (v4 > 0) {
      double v8 = v8 / (double)v4;
    }
    if (v5 >= 1) {
      double v11 = v11 / (double)v5;
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_10230F0F0);
  }
  uint64_t v14 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 67241217;
    int v17 = v3;
    __int16 v18 = 2050;
    double v19 = v12 - v10;
    __int16 v20 = 2049;
    double v21 = v7;
    __int16 v22 = 2049;
    double v23 = v8;
    __int16 v24 = 2049;
    double v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "VO2Max,SamplesPostSession,%{public}d,PostSessionDuration,%{public}f,startingHR,%{private}f,HRAfter60s,%{private}f,HRAfter120s,%{private}f", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    BOOL v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimator::evaluatePostSessionPeriod() const", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

uint64_t sub_1010BC1B4(double a1, uint64_t a2, void *a3)
{
  uint64_t v5 = sub_1011E124C();
  if (sub_1011E1D14(v5))
  {
    uint64_t result = 0;
    uint64_t v7 = a3[1] - *a3;
    if (v7)
    {
      unint64_t v8 = v7 / 144;
      if (v8 <= 1) {
        unint64_t v8 = 1;
      }
      double v9 = (double *)(*a3 + 24);
      do
      {
        double v10 = *v9;
        v9 += 18;
        if (v10 < 1.79769313e308) {
          uint64_t result = result;
        }
        else {
          uint64_t result = (result + 1);
        }
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    double v11 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 134349056;
      double v14 = a1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "VO2Max,Analytics unexpectedly not able to retrieve a session record for the minimum algorithm version with startTime > %{public}.3f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230F0F0);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "int CLVO2MaxEstimator::getLookbackNumEstimatesAfterUpdate(CFAbsoluteTime, const std::vector<VO2MaxOutput> &) const", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

void sub_1010BC3D8(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    int v15 = 0;
    long long v16 = xmmword_101D21A00;
    __asm { FMOV            V0.2D, #1.0 }
    long long v17 = _Q0;
    double v18 = 0.0;
    do
    {
      uint64_t v9 = v2 - 144;
      sub_1004D90CC((uint64_t)&v15, *(double *)(v2 - 112));
      uint64_t v2 = v9;
    }
    while (v9 != *a2);
    double v10 = 0.0;
    if (v15 < 1)
    {
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v11 = *((void *)&v16 + 1);
      if (v15 != 1)
      {
        double v12 = *(double *)&v17 * *(double *)&v17 - *((double *)&v17 + 1);
        if (v12 > 0.0) {
          double v10 = sqrt(*(double *)&v17 * *(double *)&v17 / v12 * v18);
        }
      }
    }
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    double v13 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 134283777;
      uint64_t v24 = v11;
      __int16 v25 = 2049;
      double v26 = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "VO2Max,weightedAvg,%{private}.3f,std,%{private}.3f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230F0F0);
      }
      int v19 = 134283777;
      uint64_t v20 = v11;
      __int16 v21 = 2049;
      double v22 = v10;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLVO2MaxEstimator::getLookbackEWMAPlusWeightedStDev(const std::vector<VO2MaxOutput> &) const", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_1010BC638()
{
  if (objc_opt_class()
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024850B8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1024850B8))
    {
      long long v3 = xmmword_101DA6404;
      *(_OWORD *)int v4 = unk_101DA6414;
      *(_OWORD *)&v4[16] = xmmword_101DA6424;
      *(_OWORD *)&v4[28] = *(long long *)((char *)&xmmword_101DA6424 + 12);
      *(_OWORD *)__n128 buf = xmmword_101DA63E4;
      *(_OWORD *)&uint8_t buf[16] = unk_101DA63F4;
      sub_1003B17B4(&qword_1024850A0, buf, 0x17uLL);
      __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_1024850A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1024850B8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024850D8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1024850D8))
    {
      *(_OWORD *)__n128 buf = xmmword_101DA6440;
      *(_OWORD *)&uint8_t buf[16] = unk_101DA6450;
      sub_100F4CFF0(&qword_1024850C0, buf, 8uLL);
      __cxa_atexit((void (*)(void *))sub_100F4D074, &qword_1024850C0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1024850D8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024850F8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1024850F8))
    {
      *(_OWORD *)__n128 buf = xmmword_101DA6460;
      *(_OWORD *)&uint8_t buf[16] = unk_101DA6470;
      long long v3 = xmmword_101DA6480;
      *(_OWORD *)int v4 = unk_101DA6490;
      sub_1003B17B4(&qword_1024850E0, buf, 0x10uLL);
      __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_1024850E0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1024850F8);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485118, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_102485118))
    {
      long long v3 = xmmword_101DA64C0;
      *(_OWORD *)int v4 = unk_101DA64D0;
      *(_OWORD *)&v4[12] = unk_101DA64DC;
      *(_OWORD *)__n128 buf = xmmword_101DA64A0;
      *(_OWORD *)&uint8_t buf[16] = unk_101DA64B0;
      sub_1003B17B4(&qword_102485100, buf, 0x13uLL);
      __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102485100, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102485118);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485138, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_102485138))
    {
      *(_OWORD *)__n128 buf = xmmword_101DA64EC;
      *(_OWORD *)&uint8_t buf[16] = unk_101DA64FC;
      *(void *)&long long v3 = 0x422A66664219999ALL;
      sub_1003B17B4(&qword_102485120, buf, 0xAuLL);
      __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102485120, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102485138);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102485158, memory_order_acquire) & 1) == 0)
    {
      if (__cxa_guard_acquire(&qword_102485158))
      {
        *(_OWORD *)__n128 buf = xmmword_101DA6514;
        *(_OWORD *)&unsigned char buf[12] = *(long long *)((char *)&xmmword_101DA6514 + 12);
        sub_100F4CFF0(&qword_102485140, buf, 7uLL);
        __cxa_atexit((void (*)(void *))sub_100F4D074, &qword_102485140, (void *)&_mh_execute_header);
        __cxa_guard_release(&qword_102485158);
      }
    }
    AnalyticsSendEventLazy();
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F0F0);
    }
    uint64_t v0 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "VO2Max,Not sending analytics, no IHA permission", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230F0F0);
      }
      uint64_t v1 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLVO2MaxEstimator::sendAnalytics(CLVO2MaxStats &)", "%s\n", v1);
      if (v1 != buf) {
        free(v1);
      }
    }
  }
}

void sub_1010BCB50(_Unwind_Exception *a1)
{
}

NSDictionary *sub_1010BCBC0(uint64_t a1)
{
  v110[0] = @"age_bin";
  float v2 = *(float *)(*(void *)(a1 + 32) + 4);
  int v108 = 0;
  uint64_t v109 = 0;
  int v107 = 0;
  sub_10010F834(&v107, (const void *)qword_102485100, unk_102485108, (unk_102485108 - qword_102485100) >> 2);
  if (v108 == v107)
  {
    unint64_t v3 = 0;
  }
  else
  {
    unint64_t v3 = 0;
    unint64_t v4 = (v108 - (unsigned char *)v107) >> 2;
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    while (*((float *)v107 + v3) < v2)
    {
      if (v4 == ++v3)
      {
        unint64_t v3 = v4;
        break;
      }
    }
  }
  v111[0] = +[NSNumber numberWithInt:v3];
  v110[1] = @"gender";
  v111[1] = +[NSNumber numberWithUnsignedInt:**(unsigned int **)(a1 + 32)];
  v110[2] = @"useBetaBlocker";
  v111[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 8)];
  v110[3] = @"userBMI_bin";
  float v5 = *(float *)(*(void *)(a1 + 32) + 12);
  int v105 = 0;
  uint64_t v106 = 0;
  int v104 = 0;
  sub_10010F834(&v104, (const void *)qword_102485120, unk_102485128, (unk_102485128 - qword_102485120) >> 2);
  if (v105 == v104)
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = (v105 - (unsigned char *)v104) >> 2;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    while (*((float *)v104 + v6) < v5)
    {
      if (v7 == ++v6)
      {
        unint64_t v6 = v7;
        break;
      }
    }
  }
  v111[3] = +[NSNumber numberWithInt:v6];
  v110[4] = @"vo2MaxMean_bin";
  float v8 = *(float *)(*(void *)(a1 + 32) + 16);
  double v101 = 0;
  uint64_t v102 = 0;
  uint64_t v103 = 0;
  sub_10010F834(&v101, (const void *)qword_1024850A0, unk_1024850A8, (unk_1024850A8 - qword_1024850A0) >> 2);
  if (v102 == v101)
  {
    unint64_t v9 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    unint64_t v10 = (v102 - (unsigned char *)v101) >> 2;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    while (*((float *)v101 + v9) < v8)
    {
      if (v10 == ++v9)
      {
        unint64_t v9 = v10;
        break;
      }
    }
  }
  v111[4] = +[NSNumber numberWithInt:v9];
  v110[5] = @"vo2MaxPrior_bin";
  float v11 = *(float *)(*(void *)(a1 + 32) + 20);
  int v98 = 0;
  int v99 = 0;
  uint64_t v100 = 0;
  sub_10010F834(&v98, (const void *)qword_1024850A0, unk_1024850A8, (unk_1024850A8 - qword_1024850A0) >> 2);
  if (v99 == v98)
  {
    unint64_t v12 = 0;
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v13 = (v99 - (unsigned char *)v98) >> 2;
    if (v13 <= 1) {
      unint64_t v13 = 1;
    }
    while (*((float *)v98 + v12) < v11)
    {
      if (v13 == ++v12)
      {
        unint64_t v12 = v13;
        break;
      }
    }
  }
  v111[5] = +[NSNumber numberWithInt:v12];
  void v110[6] = @"hrMaxObserved";
  LODWORD(v14) = *(_DWORD *)(*(void *)(a1 + 32) + 24);
  v111[6] = +[NSNumber numberWithFloat:v14];
  v110[7] = @"hrMaxAgePredicted";
  LODWORD(v15) = *(_DWORD *)(*(void *)(a1 + 32) + 28);
  v111[7] = +[NSNumber numberWithFloat:v15];
  v110[8] = @"hrMaxAgeAndMedicationPredicted";
  LODWORD(v16) = *(_DWORD *)(*(void *)(a1 + 32) + 32);
  v111[8] = +[NSNumber numberWithFloat:v16];
  v110[9] = @"hrMinBodyMetricsPredicted";
  LODWORD(v17) = *(_DWORD *)(*(void *)(a1 + 32) + 36);
  v111[9] = +[NSNumber numberWithFloat:v17];
  v110[10] = @"hrOnset";
  LODWORD(v18) = *(_DWORD *)(*(void *)(a1 + 32) + 40);
  v111[10] = +[NSNumber numberWithFloat:v18];
  v110[11] = @"hrRestingObservedOneDay";
  LODWORD(v19) = *(_DWORD *)(*(void *)(a1 + 32) + 44);
  v111[11] = +[NSNumber numberWithFloat:v19];
  v110[12] = @"hrRestingObservedSevenDays";
  LODWORD(v20) = *(_DWORD *)(*(void *)(a1 + 32) + 48);
  v111[12] = +[NSNumber numberWithFloat:v20];
  v110[13] = @"maxMetsMean";
  LODWORD(v21) = *(_DWORD *)(*(void *)(a1 + 32) + 52);
  v111[13] = +[NSNumber numberWithFloat:v21];
  v110[14] = @"maxMetsHigh";
  LODWORD(v22) = *(_DWORD *)(*(void *)(a1 + 32) + 56);
  v111[14] = +[NSNumber numberWithFloat:v22];
  v110[15] = @"vo2MaxValue";
  LODWORD(v23) = *(_DWORD *)(*(void *)(a1 + 32) + 60);
  v111[15] = +[NSNumber numberWithFloat:v23];
  v110[16] = @"vo2MaxValueAdaptiveModel";
  LODWORD(v24) = *(_DWORD *)(*(void *)(a1 + 32) + 68);
  v111[16] = +[NSNumber numberWithFloat:v24];
  v110[17] = @"vo2MaxValueOutdoorPedestrianModel";
  LODWORD(v25) = *(_DWORD *)(*(void *)(a1 + 32) + 64);
  v111[17] = +[NSNumber numberWithFloat:v25];
  v110[18] = @"vo2MaxValueOOB";
  LODWORD(v26) = *(_DWORD *)(*(void *)(a1 + 32) + 72);
  v111[18] = +[NSNumber numberWithFloat:v26];
  v110[19] = @"vo2MaxValueAdaptiveModelOOB";
  LODWORD(v27) = *(_DWORD *)(*(void *)(a1 + 32) + 80);
  v111[19] = +[NSNumber numberWithFloat:v27];
  v110[20] = @"vo2MaxValueOutdoorPedestrianModelOOB";
  LODWORD(v28) = *(_DWORD *)(*(void *)(a1 + 32) + 76);
  v111[20] = +[NSNumber numberWithFloat:v28];
  v110[21] = @"efficiency";
  LODWORD(v29) = *(_DWORD *)(*(void *)(a1 + 32) + 84);
  v111[21] = +[NSNumber numberWithFloat:v29];
  v110[22] = @"clustersHRMeanAdaptiveModel";
  LODWORD(v30) = *(_DWORD *)(*(void *)(a1 + 32) + 96);
  v111[22] = +[NSNumber numberWithFloat:v30];
  v110[23] = @"clustersMetsMeanAdaptiveModel";
  LODWORD(v31) = *(_DWORD *)(*(void *)(a1 + 32) + 100);
  v111[23] = +[NSNumber numberWithFloat:v31];
  v110[24] = @"clustersHRMeanPedestrianModel";
  LODWORD(v32) = *(_DWORD *)(*(void *)(a1 + 32) + 88);
  v111[24] = +[NSNumber numberWithFloat:v32];
  v110[25] = @"clustersMetsMeanPedestrianModel";
  LODWORD(v33) = *(_DWORD *)(*(void *)(a1 + 32) + 92);
  v111[25] = +[NSNumber numberWithFloat:v33];
  v110[26] = @"vo2MaxStdDev";
  LODWORD(v34) = *(_DWORD *)(*(void *)(a1 + 32) + 104);
  v111[26] = +[NSNumber numberWithFloat:v34];
  v110[27] = @"vo2MaxTrend";
  LODWORD(v35) = *(_DWORD *)(*(void *)(a1 + 32) + 108);
  v111[27] = +[NSNumber numberWithFloat:v35];
  v110[28] = @"vo2MaxPriorDelta";
  *(float *)&double v36 = *(float *)(*(void *)(a1 + 32) + 60) - *(float *)(*(void *)(a1 + 32) + 20);
  v111[28] = +[NSNumber numberWithFloat:v36];
  v110[29] = @"vo2MaxTrendSingleEst";
  LODWORD(v37) = *(_DWORD *)(*(void *)(a1 + 32) + 112);
  v111[29] = +[NSNumber numberWithFloat:v37];
  v110[30] = @"workoutTypeRatioWalk";
  LODWORD(v38) = *(_DWORD *)(*(void *)(a1 + 32) + 116);
  v111[30] = +[NSNumber numberWithFloat:v38];
  v110[31] = @"workoutTypeRatioRun";
  LODWORD(v39) = *(_DWORD *)(*(void *)(a1 + 32) + 120);
  v111[31] = +[NSNumber numberWithFloat:v39];
  v110[32] = @"workoutTypeRatioHike";
  LODWORD(v40) = *(_DWORD *)(*(void *)(a1 + 32) + 124);
  unsigned char v111[32] = +[NSNumber numberWithFloat:v40];
  v110[33] = @"lookbackNumEstimates_bin";
  int v41 = *(_DWORD *)(*(void *)(a1 + 32) + 128);
  int v96 = 0;
  uint64_t v97 = 0;
  int v95 = 0;
  sub_10010F834(&v95, (const void *)qword_1024850C0, unk_1024850C8, (unk_1024850C8 - qword_1024850C0) >> 2);
  if (v96 == v95)
  {
    unint64_t v42 = 0;
  }
  else
  {
    unint64_t v42 = 0;
    unint64_t v43 = (v96 - (unsigned char *)v95) >> 2;
    if (v43 <= 1) {
      unint64_t v43 = 1;
    }
    while (*((_DWORD *)v95 + v42) < v41)
    {
      if (v43 == ++v42)
      {
        unint64_t v42 = v43;
        break;
      }
    }
  }
  v111[33] = +[NSNumber numberWithInt:v42];
  v110[34] = @"lookbackNumEstimatesAfterUpdate_bin";
  int v44 = *(_DWORD *)(*(void *)(a1 + 32) + 132);
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v92 = 0;
  sub_10010F834(&v92, (const void *)qword_1024850C0, unk_1024850C8, (unk_1024850C8 - qword_1024850C0) >> 2);
  if (v93 == v92)
  {
    unint64_t v45 = 0;
  }
  else
  {
    unint64_t v45 = 0;
    unint64_t v46 = (v93 - (unsigned char *)v92) >> 2;
    if (v46 <= 1) {
      unint64_t v46 = 1;
    }
    while (*((_DWORD *)v92 + v45) < v44)
    {
      if (v46 == ++v45)
      {
        unint64_t v45 = v46;
        break;
      }
    }
  }
  v111[34] = +[NSNumber numberWithInt:v45];
  v110[35] = @"lookbackNumDaysWithEstimate_bin";
  int v47 = *(_DWORD *)(*(void *)(a1 + 32) + 136);
  long long v90 = 0;
  uint64_t v91 = 0;
  double v89 = 0;
  sub_10010F834(&v89, (const void *)qword_1024850C0, unk_1024850C8, (unk_1024850C8 - qword_1024850C0) >> 2);
  if (v90 == v89)
  {
    unint64_t v48 = 0;
  }
  else
  {
    unint64_t v48 = 0;
    unint64_t v49 = (v90 - (unsigned char *)v89) >> 2;
    if (v49 <= 1) {
      unint64_t v49 = 1;
    }
    while (*((_DWORD *)v89 + v48) < v47)
    {
      if (v49 == ++v48)
      {
        unint64_t v48 = v49;
        break;
      }
    }
  }
  v111[35] = +[NSNumber numberWithInt:v48];
  v110[36] = @"lookbackEWMAPlusWeightedStDev_bin";
  float v50 = *(float *)(*(void *)(a1 + 32) + 144);
  long long v87 = 0;
  uint64_t v88 = 0;
  long long v86 = 0;
  sub_10010F834(&v86, (const void *)qword_1024850A0, unk_1024850A8, (unk_1024850A8 - qword_1024850A0) >> 2);
  if (v87 == v86)
  {
    unint64_t v51 = 0;
  }
  else
  {
    unint64_t v51 = 0;
    unint64_t v52 = (v87 - (unsigned char *)v86) >> 2;
    if (v52 <= 1) {
      unint64_t v52 = 1;
    }
    while (*((float *)v86 + v51) < v50)
    {
      if (v52 == ++v51)
      {
        unint64_t v51 = v52;
        break;
      }
    }
  }
  v111[36] = +[NSNumber numberWithInt:v51];
  v110[37] = @"numWorkoutsContrToLatestEstimate_bin";
  int v53 = *(_DWORD *)(*(void *)(a1 + 32) + 140);
  int v84 = 0;
  uint64_t v85 = 0;
  int v83 = 0;
  sub_10010F834(&v83, (const void *)qword_102485140, unk_102485148, (unk_102485148 - qword_102485140) >> 2);
  if (v84 == v83)
  {
    unint64_t v54 = 0;
  }
  else
  {
    unint64_t v54 = 0;
    unint64_t v55 = (v84 - (unsigned char *)v83) >> 2;
    if (v55 <= 1) {
      unint64_t v55 = 1;
    }
    while (*((_DWORD *)v83 + v54) < v53)
    {
      if (v55 == ++v54)
      {
        unint64_t v54 = v55;
        break;
      }
    }
  }
  v111[37] = +[NSNumber numberWithInt:v54];
  v110[38] = @"vo2MaxValue_bin";
  float v56 = *(float *)(*(void *)(a1 + 32) + 60);
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  int v80 = 0;
  sub_10010F834(&v80, (const void *)qword_1024850A0, unk_1024850A8, (unk_1024850A8 - qword_1024850A0) >> 2);
  if (v81 == v80)
  {
    unint64_t v57 = 0;
  }
  else
  {
    unint64_t v57 = 0;
    unint64_t v58 = (v81 - (unsigned char *)v80) >> 2;
    if (v58 <= 1) {
      unint64_t v58 = 1;
    }
    while (*((float *)v80 + v57) < v56)
    {
      if (v58 == ++v57)
      {
        unint64_t v57 = v58;
        break;
      }
    }
  }
  v111[38] = +[NSNumber numberWithInt:v57];
  v110[39] = @"pctGPSAvailability";
  LODWORD(v59) = *(_DWORD *)(*(void *)(a1 + 32) + 148);
  v111[39] = +[NSNumber numberWithFloat:v59];
  v110[40] = @"pctHeartRateAvailability";
  LODWORD(v60) = *(_DWORD *)(*(void *)(a1 + 32) + 152);
  v111[40] = +[NSNumber numberWithFloat:v60];
  v110[41] = @"pctBackgroundEscalation";
  LODWORD(v61) = *(_DWORD *)(*(void *)(a1 + 32) + 156);
  v111[41] = +[NSNumber numberWithFloat:v61];
  v110[42] = @"pctHRMax";
  LODWORD(v62) = *(_DWORD *)(*(void *)(a1 + 32) + 160);
  v111[42] = +[NSNumber numberWithFloat:v62];
  v110[43] = @"pctHRMin";
  LODWORD(v63) = *(_DWORD *)(*(void *)(a1 + 32) + 164);
  v111[43] = +[NSNumber numberWithFloat:v63];
  v110[44] = @"validGradeMean";
  LODWORD(v64) = *(_DWORD *)(*(void *)(a1 + 32) + 168);
  v111[44] = +[NSNumber numberWithFloat:v64];
  v110[45] = @"validGradeStd";
  LODWORD(v65) = *(_DWORD *)(*(void *)(a1 + 32) + 172);
  v111[45] = +[NSNumber numberWithFloat:v65];
  v110[46] = @"pctGradeAboveAnalyticsThreshold";
  LODWORD(v66) = *(_DWORD *)(*(void *)(a1 + 32) + 176);
  v111[46] = +[NSNumber numberWithFloat:v66];
  v110[47] = @"pctGPSAvailability_bin";
  LODWORD(v67) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 148) / 10.0);
  v111[47] = +[NSNumber numberWithInt:v67];
  v110[48] = @"pctHeartRateAvailability_bin";
  LODWORD(v68) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 152) / 10.0);
  v111[48] = +[NSNumber numberWithInt:v68];
  v110[49] = @"pctBackgroundEscalation_bin";
  LODWORD(v69) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 156) / 10.0);
  v111[49] = +[NSNumber numberWithInt:v69];
  v110[50] = @"pctHRMax_bin";
  LODWORD(v70) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 160) / 10.0);
  v111[50] = +[NSNumber numberWithInt:v70];
  v110[51] = @"pctHRMin_bin";
  LODWORD(v71) = vcvtps_s32_f32(*(float *)(*(void *)(a1 + 32) + 164) / 10.0);
  v111[51] = +[NSNumber numberWithInt:v71];
  v110[52] = @"workoutType";
  v111[52] = +[NSNumber numberWithInteger:*(void *)(*(void *)(a1 + 32) + 184)];
  v110[53] = @"sessionType";
  v111[53] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 200)];
  v110[54] = @"sessionDuration_bin";
  float v72 = *(float *)(*(void *)(a1 + 32) + 180);
  int v78 = 0;
  uint64_t v79 = 0;
  long long __p = 0;
  sub_10010F834(&__p, (const void *)qword_1024850E0, unk_1024850E8, (unk_1024850E8 - qword_1024850E0) >> 2);
  if (v78 == __p)
  {
    unint64_t v73 = 0;
  }
  else
  {
    unint64_t v73 = 0;
    unint64_t v74 = (v78 - (unsigned char *)__p) >> 2;
    if (v74 <= 1) {
      unint64_t v74 = 1;
    }
    while (*((float *)__p + v73) < v72)
    {
      if (v74 == ++v73)
      {
        unint64_t v73 = v74;
        break;
      }
    }
  }
  v111[54] = +[NSNumber numberWithInt:v73];
  v110[55] = @"hrMinSource";
  v111[55] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 192)];
  v110[56] = @"vo2MaxEstimationStatus";
  v111[56] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 196)];
  v110[57] = @"arbitrationDecision";
  v111[57] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 204)];
  v110[58] = @"cielFloorState";
  v111[58] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 32) + 208)];
  v110[59] = @"estimateWroteToDb";
  v111[59] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 212)];
  int v75 = +[NSDictionary dictionaryWithObjects:v111 forKeys:v110 count:60];
  if (__p)
  {
    int v78 = __p;
    operator delete(__p);
  }
  if (v80)
  {
    uint64_t v81 = v80;
    operator delete(v80);
  }
  if (v83)
  {
    int v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    long long v87 = v86;
    operator delete(v86);
  }
  if (v89)
  {
    long long v90 = v89;
    operator delete(v89);
  }
  if (v92)
  {
    uint64_t v93 = v92;
    operator delete(v92);
  }
  if (v95)
  {
    int v96 = v95;
    operator delete(v95);
  }
  if (v98)
  {
    int v99 = v98;
    operator delete(v98);
  }
  if (v101)
  {
    uint64_t v102 = v101;
    operator delete(v101);
  }
  if (v104)
  {
    int v105 = v104;
    operator delete(v104);
  }
  if (v107)
  {
    int v108 = v107;
    operator delete(v107);
  }
  return v75;
}

void sub_1010BD910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
}

void sub_1010BDA24(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1010BDA54(id a1)
{
  qword_102419228 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

void sub_1010BE9CC(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

uint64_t *sub_1010BE9FC(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v6 = a1 + 1;
  float v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        float v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        float v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      float v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    float v8 = a1 + 1;
LABEL_10:
    unint64_t v10 = (uint64_t *)operator new(0x30uLL);
    void v10[4] = *a3;
    void v10[5] = a3[1];
    sub_1000EDF90(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_1010BEAC0()
{
  sub_100134750(qword_102485160, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485160, (void *)&_mh_execute_header);
}

__n128 sub_1010BEB20(uint64_t a1, long long *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[2];
  *(_OWORD *)(a1 + 68) = *(long long *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 40) = v3;
  *(_OWORD *)(a1 + 24) = v2;
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)(a1 + 88) = result;
  return result;
}

void sub_1010BEB50(void **a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      double v14 = (char *)sub_1000DA5D8(v4, v13);
    }
    else {
      double v14 = 0;
    }
    double v15 = &v14[24 * v10];
    double v16 = &v14[24 * v13];
    long long v17 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)double v15 = v17;
    unint64_t v9 = v15 + 24;
    double v19 = (char *)*a1;
    double v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v15 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v15 - 24) = v20;
        v15 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      double v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    unint64_t v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
  double v21 = (double *)*a1;
  if (*a1 != v9)
  {
    double v22 = *((double *)v9 - 3);
    while (vabdd_f64(*v21, v22) <= 88.76)
    {
      v21 += 3;
      if (v21 == (double *)v9) {
        goto LABEL_30;
      }
    }
    if (v21 != (double *)v9)
    {
      double v23 = (long long *)(v21 + 3);
      if (v21 + 3 != (double *)v9)
      {
        do
        {
          if (vabdd_f64(*(double *)v23, v22) <= 88.76)
          {
            long long v24 = *v23;
            v21[2] = *((double *)v23 + 2);
            *(_OWORD *)double v21 = v24;
            v21 += 3;
          }
          double v23 = (long long *)((char *)v23 + 24);
        }
        while (v23 != (long long *)v9);
        unint64_t v9 = (char *)a1[1];
      }
    }
    if (v21 != (double *)v9) {
      a1[1] = v21;
    }
  }
LABEL_30:

  sub_1010BED34((uint64_t)a1);
}

void sub_1010BED34(uint64_t a1)
{
  long long v3 = *(double **)a1;
  long long v2 = *(double **)(a1 + 8);
  double v4 = *(v2 - 3);
  double v5 = **(double **)a1;
  if (vabdd_f64(v4 + 2.536, v5) >= 58.0744)
  {
    int v6 = *(_DWORD *)(a1 + 64);
    if (v3 == v2)
    {
      unsigned int v7 = 0;
      double v8 = 0.0;
    }
    else
    {
      unsigned int v7 = 0;
      double v8 = 0.0;
      do
      {
        unint64_t v9 = (unsigned int *)(v3 + 1);
        if (v6) {
          unint64_t v9 = (unsigned int *)v3 + 3;
        }
        unsigned int v10 = *v9;
        if (v10 >= 0xC) {
          unsigned int v10 = 12;
        }
        v7 += v10;
        if (v3[2] >= 2.08999991) {
          double v8 = v8 + 2.536;
        }
        v3 += 3;
      }
      while (v3 != v2);
    }
    if (v6) {
      unsigned int v11 = 19;
    }
    else {
      unsigned int v11 = 49;
    }
    BOOL v12 = v8 >= 58.0744 && v6 == 0;
    if (v12 || v7 > v11)
    {
      *(double *)(a1 + 88) = v5;
      *(double *)(a1 + 96) = v4;
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230F150);
      }
      unint64_t v13 = qword_102418FF8;
      if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 88);
        uint64_t v15 = *(void *)(a1 + 96);
        *(_DWORD *)__n128 buf = 134350336;
        uint64_t v18 = v14;
        __int16 v19 = 2050;
        uint64_t v20 = v15;
        __int16 v21 = 2050;
        double v22 = v8;
        __int16 v23 = 1026;
        unsigned int v24 = v7;
        __int16 v25 = 1026;
        BOOL v26 = v12;
        __int16 v27 = 1026;
        BOOL v28 = v7 > v11;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "StandPlus,minuteAwarded,startTime,%{public}f,endTime,%{public}f,totalMetTime,%{public}f,totalSteps,%{public}d,metConditionMet,%{public}d,stepConditionMet,%{public}d", buf, 0x32u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FF0 != -1) {
          dispatch_once(&qword_102418FF0, &stru_10230F150);
        }
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLStandPlusMinute CLStandPlusMinuteCalculator::calculateStandPlusMinute()", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      *(void *)(a1 + 8) = *(void *)a1;
    }
  }
}

__n128 sub_1010BF038(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 40) != *(_DWORD *)(a1 + 64))
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_10230F150);
    }
    double v4 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 64);
      int v6 = *(_DWORD *)(a2 + 40);
      *(_DWORD *)__n128 buf = 67240448;
      int v12 = v5;
      __int16 v13 = 1026;
      int v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,clearing buffers from body metrics,old,%{public}d,new,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_10230F150);
      }
      unsigned int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStandPlusMinuteCalculator::feedBodyMetrics(const CLBodyMetrics &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    __n128 result = *(__n128 *)a2;
    long long v8 = *(_OWORD *)(a2 + 16);
    long long v9 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 44);
    *(_OWORD *)(a1 + 40) = v8;
    *(_OWORD *)(a1 + 56) = v9;
    *(__n128 *)(a1 + 24) = result;
    *(void *)(a1 + 8) = *(void *)a1;
  }
  return result;
}

void sub_1010BF248(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_1010BF278()
{
  if ((sub_1000A16E8() & 4) != 0) {
    operator new();
  }
  if (qword_102419060 != -1) {
    dispatch_once(&qword_102419060, &stru_10230F1E8);
  }
  uint64_t v0 = qword_102419068;
  if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#Warning Gesture service is not available on this platform", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGestureService::create()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1010BF430()
{
}

uint64_t sub_1010BF45C()
{
  if (qword_102485178 != -1) {
    dispatch_once(&qword_102485178, &stru_10230F170);
  }
  return qword_10248B308;
}

void sub_1010BF4A4(uint64_t a1)
{
}

void sub_1010BF5B8(_Unwind_Exception *a1)
{
  long long v3 = (std::__shared_weak_count *)v1[6];
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1009D1DE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010BF5D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = (uint64_t *)sub_1014CB834();
  uint64_t v6 = 0x30000FF0CLL;
  char v7 = 0;
  sub_101A46D60(v2, (uint64_t)&v6, (uint64_t *)&v8);
  long long v3 = v8;
  long long v8 = 0uLL;
  double v4 = *(std::__shared_weak_count **)(v1 + 48);
  *(_OWORD *)(v1 + 40) = v3;
  if (v4)
  {
    sub_1000DB0A0(v4);
    if (*((void *)&v8 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  sub_100A2932C(*(uint64_t **)(v1 + 40), (uint64_t)sub_1010BF6A0, v1);
  sub_100A29A24(*(void *)(v1 + 40), (uint64_t)sub_1010BF870, v1);
  sub_100A294B4(*(void *)(v1 + 40), (uint64_t)sub_1010BF870, v1);
  return sub_100A293C8(*(void *)(v1 + 40), (uint64_t)sub_1010BF870, v1);
}

void sub_1010BF6A0()
{
  IOHIDEventGetVendorDefinedData();
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_10230F208);
  }
  uint64_t v0 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Empty payload", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_10230F208);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static void CLGestureService::onGestureServiceIohidEvent(void *, void *, void *, IOHIDEventRef)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1010BF870(uint64_t *a1)
{
  sub_1010C0640(a1);

  sub_1010BF950(a1);
}

void *sub_1010BF8A8(void *a1)
{
  *a1 = off_10230F1A0;
  long long v2 = (std::__shared_weak_count *)a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (v2)
  {
    sub_1000DB0A0(v2);
    long long v3 = (std::__shared_weak_count *)a1[6];
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }

  return sub_1009D1DE4(a1);
}

void sub_1010BF918(void *a1)
{
  sub_1010BF8A8(a1);

  operator delete();
}

void sub_1010BF950(uint64_t *a1)
{
  kern_return_t v14;
  mach_error_t v15;
  NSObject *v16;
  char *v17;
  NSObject *v18;
  uint8_t *v19;
  NSObject *v20;
  IOCFPlugInInterface **v21;
  HRESULT (__cdecl *QueryInterface)(void *, REFIID, LPVOID *);
  CFUUIDRef v23;
  CFUUIDBytes v24;
  NSObject *v25;
  NSObject *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  void v40[5];
  SInt32 theScore;
  uint64_t v42;
  IOCFPlugInInterface **theInterface;
  uint64_t valuePtr;
  int v45;
  unsigned char v46[18];
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  IOCFPlugInInterface **v50;
  __int16 v51;
  uint64_t v52;
  uint8_t buf[4];
  unsigned char v54[18];
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  IOCFPlugInInterface **v58;
  __int16 v59;
  uint64_t v60;

  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    long long v3 = qword_102419068;
    if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "openHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419060 != -1) {
        dispatch_once(&qword_102419060, &stru_10230F1E8);
      }
      LOWORD(v45) = 0;
      double v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
    }
    uint64_t v4 = sub_1000D3E78();
    v40[0] = _NSConcreteStackBlock;
    v40[1] = 3221225472;
    v40[2] = sub_1010C0638;
    v40[3] = &unk_1022A3020;
    v40[4] = a1;
    sub_1009E8E94(v4, (uint64_t)v40);
    return;
  }
  if (!a1[5]) {
    return;
  }
  if (qword_102419060 != -1) {
    dispatch_once(&qword_102419060, &stru_10230F1E8);
  }
  int v5 = qword_102419068;
  if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Open hid driver interface", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    LOWORD(v45) = 0;
    double v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureService::openHidDriverInterface()", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  theInterface = 0;
  valuePtr = 0;
  unint64_t v42 = 0;
  uint64_t v6 = (__IOHIDServiceClient *)sub_100A291D0(a1[5]);
  if (!v6)
  {
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    uint64_t v18 = qword_102419068;
    if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "IoHidDevice is not ready!", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    LOWORD(v45) = 0;
    __int16 v19 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureService::openHidDriverInterface()", "%s\n");
LABEL_40:
    if (v19 != buf) {
      free(v19);
    }
    return;
  }
  char v7 = v6;
  CFNumberRef RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID(v6);
  CFNumberGetValue(RegistryID, kCFNumberSInt64Type, &valuePtr);
  theScore = 0;
  CFDictionaryRef v9 = IORegistryEntryIDMatching(valuePtr);
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v9);
  if (!MatchingService)
  {
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    uint64_t v20 = qword_102419068;
    if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Service doesn't exist", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    LOWORD(v45) = 0;
    __int16 v19 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n");
    goto LABEL_40;
  }
  io_service_t v11 = MatchingService;
  CFUUIDRef v12 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x3Bu, 0xC5u, 0xCCu, 0x87u, 0x84u, 0x5Eu, 0x48u, 0xABu, 0xA9u, 0xC2u, 0x94u, 0x36u, 0, 0x1Bu, 0xA6u, 0x8Au);
  CFUUIDRef v13 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  int v14 = IOCreatePlugInInterfaceForService(v11, v12, v13, &theInterface, &theScore);
  if (v14)
  {
    uint64_t v15 = v14;
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    double v16 = qword_102419068;
    if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_FAULT))
    {
      long long v17 = mach_error_string(v15);
      *(_DWORD *)__n128 buf = 136315138;
      *(void *)unint64_t v54 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Unable to create plugin interface %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419060 != -1) {
        dispatch_once(&qword_102419060, &stru_10230F1E8);
      }
      double v33 = mach_error_string(v15);
      unint64_t v45 = 136315138;
      *(void *)unint64_t v46 = v33;
      double v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    IOObjectRelease(v11);
    return;
  }
  IOObjectRelease(v11);
  __int16 v21 = theInterface;
  QueryInterface = (*theInterface)->QueryInterface;
  __int16 v23 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x6Eu, 0xBEu, 0xBAu, 0x6Eu, 9u, 0x1Eu, 0x45u, 0x2Eu, 0x82u, 0xEAu, 0x29u, 0x79u, 0x81u, 0x6Fu, 0xB1u, 0xB5u);
  unsigned int v24 = CFUUIDGetUUIDBytes(v23);
  if (((unsigned int (*)(IOCFPlugInInterface **, void, void, uint64_t *))QueryInterface)(v21, *(void *)&v24.byte0, *(void *)&v24.byte8, &v42))
  {
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    __int16 v25 = qword_102419068;
    if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Unable to set up query interface", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419060 != -1) {
        dispatch_once(&qword_102419060, &stru_10230F1E8);
      }
      LOWORD(v45) = 0;
      double v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
LABEL_48:
    if (theInterface)
    {
      ((void (*)(IOCFPlugInInterface **))(*theInterface)->Release)(theInterface);
      IODestroyPlugInInterface(theInterface);
    }
    return;
  }
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v42 + 64))(v42, 0))
  {
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    BOOL v26 = qword_102419068;
    if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 67240450;
      *(_DWORD *)unint64_t v54 = 0;
      *(_WORD *)&v54[4] = 2114;
      *(void *)&v54[6] = v7;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Unable to create plugin interface: kr:%{public}x service:%{public}@", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419060 != -1) {
        dispatch_once(&qword_102419060, &stru_10230F1E8);
      }
      unint64_t v45 = 67240450;
      *(_DWORD *)unint64_t v46 = 0;
      *(_WORD *)&v46[4] = 2114;
      *(void *)&v46[6] = v7;
      double v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureService::openHidDriverInterface()", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    if (v42) {
      (*(void (**)(uint64_t, void))(*(void *)v42 + 72))(v42, 0);
    }
    goto LABEL_48;
  }
  if (qword_102419060 != -1) {
    dispatch_once(&qword_102419060, &stru_10230F1E8);
  }
  __int16 v27 = qword_102419068;
  if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_INFO))
  {
    BOOL v28 = a1[7];
    double v29 = a1[8];
    *(_DWORD *)__n128 buf = 134219008;
    *(void *)unint64_t v54 = valuePtr;
    *(_WORD *)&v54[8] = 2048;
    *(void *)&v54[10] = v28;
    unint64_t v55 = 2048;
    float v56 = v29;
    unint64_t v57 = 2048;
    unint64_t v58 = theInterface;
    double v59 = 2048;
    double v60 = v42;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Opened hid driver interface, registryID %llx, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    double v37 = a1[7];
    double v38 = a1[8];
    unint64_t v45 = 134219008;
    *(void *)unint64_t v46 = valuePtr;
    *(_WORD *)&v46[8] = 2048;
    *(void *)&unsigned char v46[10] = v37;
    int v47 = 2048;
    unint64_t v48 = v38;
    unint64_t v49 = 2048;
    float v50 = theInterface;
    unint64_t v51 = 2048;
    unint64_t v52 = v42;
    double v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureService::openHidDriverInterface()", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  *(void *)(a1[5] + 8) = valuePtr;
  double v30 = v42;
  a1[7] = (uint64_t)theInterface;
  a1[8] = v30;
}

uint64_t sub_1010C0638(uint64_t a1)
{
  return sub_1010BF950(*(void *)(a1 + 32));
}

void sub_1010C0640(void *a1)
{
  if (qword_102419060 != -1) {
    dispatch_once(&qword_102419060, &stru_10230F1E8);
  }
  long long v2 = qword_102419068;
  if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Close hid driver interface", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    LOWORD(v19) = 0;
    CFUUIDRef v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureService::closeHidDriverInterface()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  CFRunLoopRef Current = CFRunLoopGetCurrent();
  sub_1000D3E78();
  if (Current != (CFRunLoopRef)sub_1001BEA14())
  {
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    uint64_t v4 = qword_102419068;
    if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "closeHidDriverInterface should be called from motion thread", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419060 != -1) {
        dispatch_once(&qword_102419060, &stru_10230F1E8);
      }
      LOWORD(v19) = 0;
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureService::closeHidDriverInterface()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t v5 = sub_1000D3E78();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1010C0B58;
    v18[3] = &unk_1022A3020;
    v18[4] = a1;
    sub_1009E8E94(v5, (uint64_t)v18);
    return;
  }
  uint64_t v6 = a1[5];
  if (!v6) {
    return;
  }
  char v7 = (IOCFPlugInInterface **)a1[7];
  uint64_t v8 = a1[8];
  CFDictionaryRef v9 = a1 + 7;
  if (v8)
  {
    (*(void (**)(void, void))(*(void *)v8 + 72))(a1[8], 0);
    if (!v7) {
      goto LABEL_19;
    }
  }
  else if (!v7)
  {
    *(void *)(v6 + 8) = 0;
    *CFDictionaryRef v9 = 0;
    a1[8] = 0;
    return;
  }
  ((void (*)(IOCFPlugInInterface **))(*v7)->Release)(v7);
  IODestroyPlugInInterface(v7);
LABEL_19:
  *(void *)(a1[5] + 8) = 0;
  *CFDictionaryRef v9 = 0;
  a1[8] = 0;
  if (qword_102419060 != -1) {
    dispatch_once(&qword_102419060, &stru_10230F1E8);
  }
  unsigned int v10 = qword_102419068;
  if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = a1[7];
    uint64_t v12 = a1[8];
    *(_DWORD *)__n128 buf = 134218752;
    BOOL v28 = v7;
    __int16 v29 = 2048;
    uint64_t v30 = v8;
    __int16 v31 = 2048;
    uint64_t v32 = v11;
    __int16 v33 = 2048;
    uint64_t v34 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Closed hid driver interface, {cfPlugInInterface, hidDriverInterface} was then {%p,%p}, is now {%p,%p}", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    uint64_t v15 = a1[7];
    uint64_t v16 = a1[8];
    int v19 = 134218752;
    uint64_t v20 = v7;
    __int16 v21 = 2048;
    uint64_t v22 = v8;
    __int16 v23 = 2048;
    uint64_t v24 = v15;
    __int16 v25 = 2048;
    uint64_t v26 = v16;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureService::closeHidDriverInterface()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

uint64_t sub_1010C0B58(uint64_t a1)
{
  return sub_1010C0640(*(void *)(a1 + 32));
}

void sub_1010C0B60(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1010C0BDC;
  v3[3] = &unk_1022A3020;
  void v3[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v3);
}

void sub_1010C0BDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 36);
  *(_DWORD *)(v1 + 36) = v2 + 1;
  if (!v2)
  {
    if (sub_100A291D0(*(void *)(v1 + 40))) {
      sub_1010C0640((void *)v1);
    }
    sub_1010BF950((uint64_t *)v1);
  }
}

void sub_1010C0C40(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1010C0CBC;
  v3[3] = &unk_1022A3020;
  void v3[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v3);
}

void sub_1010C0CBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(v1 + 36) - 1;
  *(_DWORD *)(v1 + 36) = v2;
  if (!v2 && sub_100A291D0(*(void *)(v1 + 40)))
  {
    sub_1010C0640((void *)v1);
  }
}

void sub_1010C0D18(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    sub_101AA0800();
  }
  if (a3)
  {
    sub_1010C0B60(a1);
  }
  else
  {
    sub_1010C0C40(a1);
  }
}

uint64_t sub_1010C0D50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1012EB944(&__dst);
  v16[0] = a4;
  v16[1] = &__dst;
  if (__dst == 255)
  {
    uint64_t v12 = (*(uint64_t (**)(void, const __CFString *))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), @"ServiceRecord");
    if (qword_1024191D0 != -1) {
      dispatch_once(&qword_1024191D0, &stru_10230F228);
    }
    CFUUIDRef v13 = qword_1024191D8;
    if (os_log_type_enabled((os_log_t)qword_1024191D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 68158210;
      *(_DWORD *)__int16 v25 = a3;
      *(_WORD *)&v25[4] = 2098;
      *(void *)&v25[6] = a2;
      __int16 v26 = 2114;
      uint64_t v27 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Undecodable data %{public}.*P\nIOHIO service record %{public}@", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191D0 != -1) {
        dispatch_once(&qword_1024191D0, &stru_10230F228);
      }
      int v20 = 68158210;
      *(_DWORD *)__int16 v21 = a3;
      *(_WORD *)&v21[4] = 2098;
      *(void *)&unsigned int v21[6] = a2;
      __int16 v22 = 2114;
      uint64_t v23 = v12;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGestureService::onGestureService(const uint8_t *, size_t, uint64_t)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    unsigned __int8 __dst = 6;
    int v18 = 16843009;
    __int16 v19 = 1;
  }
  else
  {
    if (qword_102419060 != -1) {
      dispatch_once(&qword_102419060, &stru_10230F1E8);
    }
    uint64_t v8 = qword_102419068;
    if (os_log_type_enabled((os_log_t)qword_102419068, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v9 = sub_1009D3158(a1, 0);
      *(_DWORD *)__n128 buf = 134217984;
      *(void *)__int16 v25 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "numberOfSpectators,%zi", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419060 != -1) {
        dispatch_once(&qword_102419060, &stru_10230F1E8);
      }
      uint64_t v10 = sub_1009D3158(a1, 0);
      int v20 = 134217984;
      *(void *)__int16 v21 = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGestureService::onGestureService(const uint8_t *, size_t, uint64_t)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  return sub_1000E01AC(a1, 0, (uint64_t)v16, 16);
}

void sub_1010C1120(id a1)
{
  qword_102419068 = (uint64_t)os_log_create("com.apple.locationd.Motion", "WakeGesture");
}

void sub_1010C1150(id a1)
{
  qword_102418FE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

void sub_1010C1180(id a1)
{
  qword_1024191D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Oversize");
}

BOOL sub_1010C11B0()
{
  uint64_t v1 = qword_102419068;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_1010C11D0()
{
  int v2 = *(NSObject **)(v0 + 104);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

void sub_1010C129C(id a1)
{
  qword_102485180 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CMHealthColdStorageServiceSilo"];
}

void sub_1010C135C(id a1)
{
  if (sub_10016CCBC()) {
    byte_102485190 = 1;
  }
}

void sub_1010C19C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1010C1A08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onDataProtectionNotification:a2 data:a3];
}

id sub_1010C1A18(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onFitnessTrackingNotification:a2 data:a3];
}

void sub_1010C1A28(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    uint64_t v4 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 138412546;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to set space attribution for %@. Error: %@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_10230F418);
      }
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageService beginService]_block_invoke", "%s\n");
LABEL_19:
      if (v6 != buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    char v7 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)__n128 buf = 138412290;
      uint64_t v10 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Set space attribution for %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_10230F418);
      }
      uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageService beginService]_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_1010C283C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C297C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C2B50(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_10230F418);
  }
  uint64_t v4 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "HealthColdStorage: Sync timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    xpc_activity_get_state(a2);
    char v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageService setupSyncActivity]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) onSyncActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    uint64_t v5 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)__n128 buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_10230F418);
      }
      xpc_activity_get_state(a2);
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageService setupSyncActivity]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1010C31EC(uint64_t a1, int a2)
{
  if (a2 == 103)
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    uint64_t v4 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 136315138;
      uint64_t v10 = "com.apple.locationd.Motion.ColdStorageSync";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[Service] Unable to validate one or more table format, did not perform sync (%s)", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 == -1) {
        goto LABEL_24;
      }
      goto LABEL_30;
    }
  }
  else if (a2 == 109)
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    uint64_t v3 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 buf = 136315138;
      uint64_t v10 = "com.apple.locationd.Motion.ColdStorageSync";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "[Service] Data unavailable, did not perform sync (%s)", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 == -1)
      {
LABEL_24:
        char v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageService onSyncActivity:]_block_invoke", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        goto LABEL_15;
      }
LABEL_30:
      dispatch_once(&qword_102419300, &stru_10230F418);
      goto LABEL_24;
    }
  }
LABEL_15:
  if (xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32)) != 3
    && !xpc_activity_set_state(*(xpc_activity_t *)(a1 + 32), 5))
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    uint64_t v5 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      *(_DWORD *)__n128 buf = 136315394;
      uint64_t v10 = "com.apple.locationd.Motion.ColdStorageSync";
      __int16 v11 = 2050;
      xpc_activity_state_t v12 = state;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "[Service] Failed to mark (%s) activity as done. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_10230F418);
      }
      xpc_activity_get_state(*(xpc_activity_t *)(a1 + 32));
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageService onSyncActivity:]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1010C3890(_Unwind_Exception *a1)
{
  sub_1010C3A38(v2);
  sub_1010C3A38((dispatch_object_t *)(v3 - 104));
  _Block_object_dispose((const void *)(v3 - 96), 8);
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010C38EC(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 32);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010C3988;
  void v5[3] = &unk_10230F290;
  long long v6 = v2;
  uint64_t result = sub_1010066D0(v3, (uint64_t)v5);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = result;
  return result;
}

id sub_1010C3988(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkDeferral:*(void *)(a1 + 40)];
}

void sub_1010C3994(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 56);
  *(void *)(a1 + 56) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 56);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void sub_1010C39E8(uint64_t a1)
{
  long long v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

dispatch_object_t *sub_1010C3A38(dispatch_object_t *a1)
{
  long long v2 = *a1;
  if (v2)
  {
    dispatch_group_leave(v2);
    if (*a1) {
      dispatch_release(*a1);
    }
  }
  return a1;
}

uint64_t sub_1010C3A74(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 48) + 60) = [*(id *)(a1 + 32) getTotalDBSizeInMB];
  [*(id *)(a1 + 32) sendAnalytics];
  [*(id *)(a1 + 32) resetAnalytics];
  long long v2 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);

  return v2();
}

void sub_1010C42C0(uint64_t a1, _xpc_activity_s *a2)
{
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_10230F418);
  }
  uint64_t v4 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 134349056;
    xpc_activity_state_t state = xpc_activity_get_state(a2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HealthColdStorage: Db Vacuum timer fired (%{public}ld)", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    xpc_activity_get_state(a2);
    char v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageService setupDbCleanupActivity]_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  [*(id *)(a1 + 32) onDbCleanupActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    uint64_t v5 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_FAULT))
    {
      xpc_activity_state_t v6 = xpc_activity_get_state(a2);
      *(_DWORD *)__n128 buf = 134349056;
      xpc_activity_state_t state = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to mark activity as Continue. Current state is %{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_10230F418);
      }
      xpc_activity_get_state(a2);
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageService setupDbCleanupActivity]_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

id sub_1010C4DD8(void **a1, void *a2, uint64_t a3)
{
  if ([a2 hasPrefix:@"NumDaily"])
  {
    xpc_activity_state_t v6 = a1 + 4;
  }
  else
  {
    unsigned int v7 = [a2 hasPrefix:@"NumPurged"];
    xpc_activity_state_t v6 = a1 + 6;
    if (v7) {
      xpc_activity_state_t v6 = a1 + 5;
    }
  }
  uint64_t v8 = *v6;

  return [v8 setObject:a3 forKey:a2];
}

void sub_1010C5F7C(_Unwind_Exception *a1)
{
}

uint64_t sub_1010C62B0(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void sub_1010C647C(_Unwind_Exception *a1)
{
  sub_1010C3A38(v1);
  sub_1010C3A38((dispatch_object_t *)(v2 + 40));
  sub_1010C3A38((dispatch_object_t *)(v3 - 88));
  _Unwind_Resume(a1);
}

void sub_1010C64A8(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = [[objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_1010C65EC;
  void v8[3] = &unk_10230F340;
  unsigned int v7 = *(NSObject **)(a1 + 40);
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  int v13 = a2;
  __int16 v11 = 0;
  uint64_t v12 = 0;
  long long __p = 0;
  sub_1003B2E38(&__p, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  v8[4] = *(void *)(a1 + 32);
  [v6 async:v8];
  if (__p)
  {
    __int16 v11 = __p;
    operator delete(__p);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_1010C65C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1010C3A38((dispatch_object_t *)(v16 + 40));
  _Unwind_Resume(a1);
}

void sub_1010C65EC(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 72) == 100)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    for (uint64_t i = *(void *)(a1 + 56); v2 != i; v2 += 24)
    {
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_10230F418);
      }
      uint64_t v4 = qword_102419308;
      if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEBUG))
      {
        int v5 = *(_DWORD *)(v2 + 16);
        *(_DWORD *)__n128 buf = 67109120;
        int v14 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[Service] Processing workout with type:%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419300 != -1) {
          dispatch_once(&qword_102419300, &stru_10230F418);
        }
        unsigned int v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      if (!*(unsigned char *)(v2 + 20))
      {
        unsigned int v6 = *(_DWORD *)(v2 + 16);
        if (v6 <= 0x34 && ((1 << v6) & 0x10002001000000) != 0) {
          ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 48) + 56);
        }
      }
    }
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    __int16 v11 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
    {
      int v12 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 48) + 56);
      *(_DWORD *)__n128 buf = 67109120;
      int v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "[Service] Query returned total OutdoorPedWorkoutCounts: %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    uint64_t v10 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n");
LABEL_35:
    if (v10 != buf) {
      free(v10);
    }
    return;
  }
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_10230F418);
  }
  uint64_t v8 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
  {
    int v9 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)__n128 buf = 67109120;
    int v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "[Service] Error querying workouts: %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    uint64_t v10 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n");
    goto LABEL_35;
  }
}

void *sub_1010C6AD8(void *a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 40);
  a1[5] = v4;
  int v5 = (dispatch_group_t *)(a1 + 5);
  if (v4)
  {
    dispatch_retain(v4);
    if (*v5) {
      dispatch_group_enter(*v5);
    }
  }
  a1[6] = 0;
  a1[7] = 0;
  unsigned int v6 = a1 + 6;
  void v6[2] = 0;
  return sub_1003B2E38(v6, *(const void **)(a2 + 48), *(void *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
}

void sub_1010C6B4C(_Unwind_Exception *a1)
{
  sub_1010C3A38(v1);
  _Unwind_Resume(a1);
}

void sub_1010C6B60(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[5];
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = a1[5];
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void sub_1010C6BC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void sub_1010C6C14(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void sub_1010C6C64(uint64_t a1, int a2, uint64_t a3)
{
  id v6 = [objc_msgSend(*(id *)(a1 + 32), "universe") silo];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_1010C6DA8;
  void v8[3] = &unk_10230F3B0;
  unsigned int v7 = *(NSObject **)(a1 + 40);
  dispatch_group_t group = v7;
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(group);
  }
  int v13 = a2;
  __int16 v11 = 0;
  uint64_t v12 = 0;
  long long __p = 0;
  sub_1001F703C(&__p, *(const void **)a3, *(void *)(a3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));
  v8[4] = *(void *)(a1 + 32);
  [v6 async:v8];
  if (__p)
  {
    __int16 v11 = __p;
    operator delete(__p);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_1010C6D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  sub_1010C3A38((dispatch_object_t *)(v16 + 40));
  _Unwind_Resume(a1);
}

void sub_1010C6DA8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 72) == 100)
  {
    uint64_t v2 = *(void *)(a1 + 48);
    for (uint64_t i = *(void *)(a1 + 56); v2 != i; v2 += 24)
    {
      if (qword_102419300 != -1) {
        dispatch_once(&qword_102419300, &stru_10230F418);
      }
      uint64_t v4 = qword_102419308;
      if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v5 = *(void *)(v2 + 16);
        *(_DWORD *)__n128 buf = 134217984;
        uint64_t v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[Service] Processing sample with stepCount:%f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419300 != -1) {
          dispatch_once(&qword_102419300, &stru_10230F418);
        }
        id v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 48) + 52) += (int)*(double *)(v2 + 16);
    }
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    uint64_t v10 = qword_102419308;
    if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_INFO))
    {
      int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 48) + 52);
      *(_DWORD *)__n128 buf = 67109120;
      LODWORD(v13) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[Service] Query returned total dailyStepCounts: %d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    int v9 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n");
LABEL_31:
    if (v9 != buf) {
      free(v9);
    }
    return;
  }
  if (qword_102419300 != -1) {
    dispatch_once(&qword_102419300, &stru_10230F418);
  }
  unsigned int v7 = qword_102419308;
  if (os_log_type_enabled((os_log_t)qword_102419308, OS_LOG_TYPE_ERROR))
  {
    int v8 = *(_DWORD *)(a1 + 72);
    *(_DWORD *)__n128 buf = 67109120;
    LODWORD(v13) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "[Service] Error querying step counts: %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419300 != -1) {
      dispatch_once(&qword_102419300, &stru_10230F418);
    }
    int v9 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "-[CMHealthColdStorageService queryHealthKitWithGroup:]_block_invoke", "%s\n");
    goto LABEL_31;
  }
}

void *sub_1010C726C(void *a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 40);
  a1[5] = v4;
  uint64_t v5 = (dispatch_group_t *)(a1 + 5);
  if (v4)
  {
    dispatch_retain(v4);
    if (*v5) {
      dispatch_group_enter(*v5);
    }
  }
  a1[6] = 0;
  a1[7] = 0;
  id v6 = a1 + 6;
  void v6[2] = 0;
  return sub_1001F703C(v6, *(const void **)(a2 + 48), *(void *)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
}

void sub_1010C72E0(_Unwind_Exception *a1)
{
  sub_1010C3A38(v1);
  _Unwind_Resume(a1);
}

void sub_1010C72F4(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[5];
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = a1[5];
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void sub_1010C770C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010C7858(id a1)
{
  qword_102419308 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

Class sub_1010C7888()
{
  if (qword_1024851E8 != -1) {
    dispatch_once(&qword_1024851E8, &stru_10230F438);
  }
  Class result = objc_getClass("SAPathManager");
  qword_1024851E0 = (uint64_t)result;
  off_102475DB0 = sub_1010C78EC;
  return result;
}

uint64_t sub_1010C78EC()
{
  return qword_1024851E0;
}

void sub_1010C78F8(id a1)
{
  qword_1024851F0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SpaceAttribution.framework/SpaceAttribution", 2);
}

Class sub_1010C7924()
{
  if (qword_1024851E8 != -1) {
    dispatch_once(&qword_1024851E8, &stru_10230F438);
  }
  Class result = objc_getClass("SAPathInfo");
  qword_1024851F8 = (uint64_t)result;
  off_102475DB8 = sub_1010C7988;
  return result;
}

uint64_t sub_1010C7988()
{
  return qword_1024851F8;
}

uint64_t sub_1010C7994(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_101006368(result);
    operator delete();
  }
  return result;
}

void sub_1010C7B9C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1010C7C44(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1010C7D48(id a1)
{
  qword_102485200 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLPressureBiasSilo"];
}

void sub_1010C7E08()
{
}

void sub_1010C7E50()
{
}

uint64_t sub_1010C8004(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)sub_1010C81E4(a1, "CLPressureBias", a2);
  *uint64_t v3 = off_10230F488;
  v3[14] = 0;
  if ((sub_1000A16E8() & 0x400000000000) != 0)
  {
    sub_1010C8290(a1);
  }
  else
  {
    if (sub_100743218()) {
      sub_100CA5A08();
    }
    char v8 = 14;
    *(void *)int v9 = 0;
    *(void *)&v9[7] = 0x7F7FFFFF00000000;
    unint64_t v10 = sub_1010C8520(a1);
    int v11 = v4;
    char v12 = v5;
    int v7 = 0;
    (*(void (**)(uint64_t, int *, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v7, &v8, 1, 0xFFFFFFFFLL, 0);
  }
  return a1;
}

void sub_1010C818C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_1010C85C0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010C81E4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_10230F630;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1010C8274(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010C8290(uint64_t a1)
{
  uint64_t result = sub_1010C8718(a1, "pressure", "temp-compensation-table", (UInt8 *)v12);
  if (result)
  {
    sub_100CA39B4((uint64_t)v10);
    v7[0] = sub_1004EEEDC(v12, v11);
    v7[1] = v3;
    void v7[2] = sub_1010C8520(a1);
    int v8 = v4;
    char v9 = v5;
    int v6 = 0;
    return (*(uint64_t (**)(uint64_t, int *, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v6, v7, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_1010C8344(uint64_t a1, int *a2, float *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230F5E0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLPressureBias::onDb", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230F5E0);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__n128 buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLPressureBias::onDb\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1010C9000(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010C8500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1010C8520(int a1)
{
  *(void *)&long long v1 = 0xF0000000F0000000;
  *((void *)&v1 + 1) = 0xF0000000F0000000;
  long long v3 = v1;
  unint64_t v4 = 0xF0000000F0000000;
  int v5 = 0xFFFFFFF;
  if (sub_1010C9200(a1, "pressure", "pressure-accel-sensitivity", (UInt8 *)&v3)) {
    return ((unint64_t)COERCE_UNSIGNED_INT((float)SDWORD1(v3) * 0.000015259) << 8) | ((unint64_t)vmul_f32(vcvt_f32_s32(*(int32x2_t *)((char *)&v3 + 8)), (float32x2_t)vdup_n_s32(0x37800000u)).u32[0] << 40);
  }
  else {
    return 0;
  }
}

uint64_t sub_1010C85C0(uint64_t a1)
{
  *(void *)a1 = off_10230F630;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_1010C8644@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  if (*a1)
  {
    snprintf(__str, 0x20uLL, "%d", *a1);
    return sub_100134750(a2, __str);
  }
  else
  {
    return sub_100134750(a2, "Bias");
  }
}

uint64_t sub_1010C8708()
{
  return 1;
}

uint64_t sub_1010C8710()
{
  return 1;
}

uint64_t sub_1010C8718(int a1, char *name, const char *a3, UInt8 *a4)
{
  if (name && a3)
  {
    CFDictionaryRef v6 = IOServiceNameMatching(name);
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    if (MatchingService)
    {
      io_registry_entry_t v8 = MatchingService;
      CFStringRef v9 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
      if (v9)
      {
        CFStringRef v10 = v9;
        CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v8, v9, kCFAllocatorDefault, 0);
        if (!CFProperty)
        {
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_10230F600);
          }
          int v20 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v27 = a3;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Cannot get %s property", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190D0 != -1) {
              dispatch_once(&qword_1024190D0, &stru_10230F600);
            }
            __int16 v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]", "%s\n", v25);
            if (v25 != (char *)buf) {
              free(v25);
            }
          }
          IOObjectRelease(v8);
          uint64_t v15 = 0;
          goto LABEL_54;
        }
        CFDataRef v12 = CFProperty;
        CFTypeID v13 = CFGetTypeID(CFProperty);
        if (v13 == CFDataGetTypeID())
        {
          if ((unint64_t)CFDataGetLength(v12) > 0xDD)
          {
            v28.location = 0;
            v28.length = 222;
            CFDataGetBytes(v12, v28, a4);
            uint64_t v15 = 1;
LABEL_53:
            IOObjectRelease(v8);
            CFRelease(v12);
LABEL_54:
            CFRelease(v10);
            return v15;
          }
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_10230F600);
          }
          __int16 v14 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v27 = a3;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s property too small", buf, 0xCu);
          }
          uint64_t v15 = 0;
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_53;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024190D0 == -1)
          {
LABEL_49:
            __int16 v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]", "%s\n", v22);
            if (v22 != (char *)buf) {
              free(v22);
            }
            uint64_t v15 = 0;
            goto LABEL_53;
          }
        }
        else
        {
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_10230F600);
          }
          __int16 v21 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v27 = a3;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s property is not CFData", buf, 0xCu);
          }
          uint64_t v15 = 0;
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_53;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024190D0 == -1) {
            goto LABEL_49;
          }
        }
        dispatch_once(&qword_1024190D0, &stru_10230F600);
        goto LABEL_49;
      }
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10230F600);
      }
      uint64_t v19 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to create CFString from proprety", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_10230F600);
        }
        uint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      IOObjectRelease(v8);
      return 0;
    }
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10230F600);
    }
    long long v17 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Cannot find pressure registry entry", buf, 2u);
    }
    uint64_t v15 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 == -1) {
        goto LABEL_28;
      }
      goto LABEL_64;
    }
  }
  else
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10230F600);
    }
    __int16 v16 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "readFactoryData cannot be called without a node or a property", buf, 2u);
    }
    uint64_t v15 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 == -1)
      {
LABEL_28:
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLNonlinearPrtt::Syscfg]", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
        return 0;
      }
LABEL_64:
      dispatch_once(&qword_1024190D0, &stru_10230F600);
      goto LABEL_28;
    }
  }
  return v15;
}

uint64_t sub_1010C8F50(uint64_t a1, float *a2)
{
  float v3 = a2[1];
  float v4 = *a2 * 1000.0;
  char v9 = 14;
  __int16 v10 = 0;
  char v11 = 0;
  float v12 = v4;
  float v13 = v4 * v3;
  int v14 = 2139095039;
  unint64_t v15 = sub_1010C8520(a1);
  int v16 = v5;
  char v17 = v6;
  int v8 = 0;
  return (*(uint64_t (**)(uint64_t, int *, char *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v8, &v9, 1, 0xFFFFFFFFLL, 0);
}

void sub_1010C9000(uint64_t a1, uint64_t a2, int *a3, float *a4)
{
  if (*a3)
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10230F600);
    }
    int v5 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a3;
      *(_DWORD *)__n128 buf = 67109120;
      int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unexpected notification from pressure db.notification,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10230F600);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLPressureBias::onDb(int, const CLPressureCalibrationDatabase_Type::Notification &, const CLPressureCalibrationDatabase_Type::NotificationData &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    sub_1010C8F50(a1, a4);
  }
}

uint64_t sub_1010C9200(int a1, char *name, const char *a3, UInt8 *a4)
{
  if (name && a3)
  {
    CFDictionaryRef v6 = IOServiceNameMatching(name);
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    if (MatchingService)
    {
      io_registry_entry_t v8 = MatchingService;
      CFStringRef v9 = CFStringCreateWithCString(kCFAllocatorDefault, a3, 0x8000100u);
      if (v9)
      {
        CFStringRef v10 = v9;
        CFDataRef CFProperty = (const __CFData *)IORegistryEntryCreateCFProperty(v8, v9, kCFAllocatorDefault, 0);
        if (!CFProperty)
        {
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_10230F600);
          }
          int v20 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v27 = a3;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Cannot get %s property", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024190D0 != -1) {
              dispatch_once(&qword_1024190D0, &stru_10230F600);
            }
            __int16 v25 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]", "%s\n", v25);
            if (v25 != (char *)buf) {
              free(v25);
            }
          }
          IOObjectRelease(v8);
          uint64_t v15 = 0;
          goto LABEL_54;
        }
        CFDataRef v12 = CFProperty;
        CFTypeID v13 = CFGetTypeID(CFProperty);
        if (v13 == CFDataGetTypeID())
        {
          if ((unint64_t)CFDataGetLength(v12) > 0x1B)
          {
            v28.location = 0;
            v28.length = 28;
            CFDataGetBytes(v12, v28, a4);
            uint64_t v15 = 1;
LABEL_53:
            IOObjectRelease(v8);
            CFRelease(v12);
LABEL_54:
            CFRelease(v10);
            return v15;
          }
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_10230F600);
          }
          int v14 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v27 = a3;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "%s property too small", buf, 0xCu);
          }
          uint64_t v15 = 0;
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_53;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024190D0 == -1)
          {
LABEL_49:
            __int16 v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]", "%s\n", v22);
            if (v22 != (char *)buf) {
              free(v22);
            }
            uint64_t v15 = 0;
            goto LABEL_53;
          }
        }
        else
        {
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_10230F600);
          }
          __int16 v21 = qword_1024190D8;
          if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 buf = 136315138;
            uint64_t v27 = a3;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "%s property is not CFData", buf, 0xCu);
          }
          uint64_t v15 = 0;
          if (!sub_10013D1A0(115, 0)) {
            goto LABEL_53;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024190D0 == -1) {
            goto LABEL_49;
          }
        }
        dispatch_once(&qword_1024190D0, &stru_10230F600);
        goto LABEL_49;
      }
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_10230F600);
      }
      uint64_t v19 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__n128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to create CFString from proprety", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_10230F600);
        }
        uint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
      IOObjectRelease(v8);
      return 0;
    }
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10230F600);
    }
    char v17 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Cannot find pressure registry entry", buf, 2u);
    }
    uint64_t v15 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 == -1) {
        goto LABEL_28;
      }
      goto LABEL_64;
    }
  }
  else
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_10230F600);
    }
    int v16 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)__n128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "readFactoryData cannot be called without a node or a property", buf, 2u);
    }
    uint64_t v15 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 == -1)
      {
LABEL_28:
        __int16 v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLPressureBias::readFactoryData(const char *, const char *, T &) [T = CLPressureInertialCompensation::IORegType]", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
        return 0;
      }
LABEL_64:
      dispatch_once(&qword_1024190D0, &stru_10230F600);
      goto LABEL_28;
    }
  }
  return v15;
}

void sub_1010C9A38()
{
}

void sub_1010C9AF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1010C9B30(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_10230F780;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    CFDataRef v12 = a3;
  }
  else {
    CFDataRef v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:objc_msgSend(a4, "silo")];
  return a1;
}

void sub_1010C9C18(void *a1)
{
  sub_1010CBA00(a1);

  operator delete();
}

void sub_1010C9C50(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        CFStringRef v9 = (uint64_t *)v4;
      }
      else {
        CFStringRef v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)__n128 buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230F5E0);
      }
      CFStringRef v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        char v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          char v11 = (void *)*v11;
        }
        *(_DWORD *)__n128 buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_10230F5E0);
        }
        CFDataRef v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          CFDataRef v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::removeClient(int) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1010C9EE0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1010C9F94(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1010C9FDC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1010CA024(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1010CA06C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102475E80);
}

uint64_t sub_1010CA098(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)unint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          __int16 v29 = (uint64_t *)v25;
        }
        else {
          __int16 v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)__n128 buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        *(void *)__n128 buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        *(void *)&buf[21] = 0;
        *(void *)&uint8_t buf[16] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, unsigned char *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1010CC9C8();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102475E81;
        int v39 = v17;
        *(void *)__n128 buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)__n128 buf = &v39;
        __int16 v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)__n128 buf = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)__n128 buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)__n128 buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230F5E0);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)__n128 buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230F5E0);
    }
    double v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      double v37 = (void *)*v37;
    }
    *(_DWORD *)unint64_t v42 = 136446466;
    *(void *)&void v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1010CA544(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230F5E0);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)__n128 buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230F5E0);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1010CA7C8(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10230F5E0);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)__n128 buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10230F5E0);
                }
                __int16 v29 = a1 + 8;
                if (a1[31] < 0) {
                  __int16 v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                double v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1010CAB9C(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(long long **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *v11;
  *(_OWORD *)((char *)a3 + 13) = *(long long *)((char *)v11 + 13);
  *a3 = v12;
  return 1;
}

uint64_t sub_1010CAC04(uint64_t a1, int *a2, _OWORD *a3)
{
  int v6 = (char *)operator new(0x38uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_10230F710;
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 37) = *(_OWORD *)((char *)a3 + 13);
  int v10 = *a2;
  int v11 = &v10;
  uint64_t v7 = sub_10044715C((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101D0B290, &v11);
  int v8 = (std::__shared_weak_count *)v7[9];
  v7[8] = (uint64_t *)(v6 + 24);
  v7[9] = (uint64_t *)v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return 1;
}

void sub_1010CACC0(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010CACD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, 29);
  return (*(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1010CAD30(uint64_t a1, unsigned int *a2, _OWORD *a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_10230F5E0);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    int v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      int v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)__n128 buf = 68289794;
    int v22 = 0;
    __int16 v23 = 2082;
    *(void *)BOOL v24 = "";
    *(_WORD *)&v24[8] = 2082;
    *(void *)&v24[10] = "activity";
    __int16 v25 = 2082;
    int v26 = v10;
    __int16 v27 = 2050;
    BOOL v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    __int16 v29 = v30;
    memset(v30, 0, sizeof(v30));
    __int16 v31 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v29);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v28) {
      sub_1000DB0A0(v28);
    }
    sub_1000F5BB0((uint64_t)&v23, *(void **)&v24[6]);
    if (v31) {
      sub_1000DB0A0(v31);
    }
    sub_1000F5BB0((uint64_t)&v29, v30[0]);
  }
  if (a4)
  {
    BOOL v18 = (char *)operator new(0x38uLL);
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)BOOL v18 = off_10230F710;
    *(_OWORD *)(v18 + 24) = *a3;
    *(_OWORD *)(v18 + 37) = *(_OWORD *)((char *)a3 + 13);
    int v19 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v19) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  int v19 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v19) {
LABEL_27:
  }
    sub_1000DB0A0(v19);
LABEL_28:
  if (v14[7]) {
    sub_1010CBA80();
  }
  os_activity_scope_leave(&state);
}

void sub_1010CB31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1010CB368(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230F5E0);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)__n128 buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230F5E0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::listClients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_10230F5E0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)__n128 buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_10230F5E0);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::listClients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_10230F5E0);
            }
            int v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)__n128 buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10230F5E0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::listClients() [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1010CB918(uint64_t a1)
{
  sub_1010CC958(a1);

  operator delete();
}

id sub_1010CB950(uint64_t a1, int a2, void *a3)
{
  id result = sub_1010CC0B8(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1010CB9A0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010CB9D0(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

uint64_t sub_1010CBA00(void *a1)
{
  *a1 = off_10230F488;
  uint64_t v2 = a1[14];
  a1[14] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_1010C85C0((uint64_t)a1);
}

void sub_1010CBA80()
{
}

void sub_1010CBB34(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        unint64_t v49 = v9;
        id v13 = sub_1010CC0B8(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              unint64_t v48 = v19;
              sub_1010CBF24(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              __int16 v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  __int16 v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              unint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              unint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_10230F5E0);
              }
              BOOL v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)__n128 buf = 136446466;
                unint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_10230F5E0);
                }
                unint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  unint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                unint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLPressureBias_Type::Notification, CLPressureBias_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLPressureBias_Type::Notification, NotificationData_T = CLPressureBias_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1010CBF24(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1010CC0B8(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4];
    }
  }
  return result;
}

void sub_1010CC01C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10230F710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010CC03C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10230F710;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010CC098(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1010CC0B8(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1010CC154(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1010CC4E0(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_1010CC154(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1010CC8A0((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_10230F750);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)__n128 buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101DA66BDLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_10230F750);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__n128 buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101DA66BDLL & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_10230F750);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101DA66BDLL & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureBias_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1010CC4E0(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230F750);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__n128 buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DA66BDLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureBias_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_10230F750);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__n128 buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DA66BDLL & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_10230F750);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1010CC8A0(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102394220))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)29) {
      sub_101AA0B18();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1010CC928(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1010CC958(uint64_t a1)
{
  *(void *)a1 = off_10230F780;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1010CC9C8()
{
}

uint64_t sub_1010CCA7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

void sub_1010CCF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  os_unfair_lock_unlock(v7);
  _Unwind_Resume(a1);
}

void sub_1010CCF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    NSLog(@"CoreData, Failed to load Core Data stack: %@", a3);
    char v4 = 0;
  }
  else
  {
    NSLog(@"CoreData, Successfully loaded Core Data stack!");
    char v4 = 1;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v4;
}

void sub_1010CD088(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1010CD1D4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *sub_1010CD588(void *a1)
{
  *a1 = off_10230F7D0;
  uint64_t v2 = a1[1];
  __int16 v5 = 0;
  sub_1010E2AB8(v2 + 192, (__int16 *)&v4, 0);
  sub_1010CD5F4(a1[1]);
  return a1;
}

void sub_1010CD5F4(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1010E1840;
  v3[3] = &unk_1022A3020;
  void v3[4] = a1;
  sub_1009E8F7C(v2, (uint64_t)v3);
}

void sub_1010CD674(void *a1)
{
  sub_1010CD588(a1);

  operator delete();
}

void sub_1010CD6AC(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  HIBYTE(v3) = 1;
  char v4 = a2;
  sub_1010E2AB8(v2 + 192, &v3, 0);
}

void *sub_1010CD6E8(void *a1)
{
  *a1 = off_10230F7F8;
  sub_1010CD744(a1[1], 0, 0);
  sub_1010CD938(a1[1]);
  return a1;
}

void sub_1010CD744(uint64_t a1, int a2, unsigned int a3)
{
  v8[1] = a2;
  unsigned int v9 = a3;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  int v6 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 buf = 67109376;
    int v15 = a2;
    __int16 v16 = 2048;
    uint64_t v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "motionstateupdate, calling setMotionStateSim(%d, %lu)", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    int v10 = 67109376;
    int v11 = a2;
    __int16 v12 = 2048;
    uint64_t v13 = a3;
    char v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::setMotionStateSim(BOOL, uint32_t)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1010E2C9C(a1 + 192, (int *)v8, 0);
}

void sub_1010CD938(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1010E184C;
  v3[3] = &unk_1022A3020;
  void v3[4] = a1;
  sub_1009E8F7C(v2, (uint64_t)v3);
}

void sub_1010CD9B8(void *a1)
{
  sub_1010CD6E8(a1);

  operator delete();
}

void sub_1010CD9F0(uint64_t a1, unsigned int a2)
{
}

void *sub_1010CDA00(void *a1)
{
  *a1 = off_10230F820;
  sub_1010CDA5C(a1[1], 0, 0);
  sub_1010CDC48(a1[1]);
  return a1;
}

void sub_1010CDA5C(uint64_t a1, int a2, int a3)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  int v6 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__n128 buf = 67109376;
    int v9 = a2;
    __int16 v10 = 1024;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "motionstateupdate, calling setMotionStateYouthSim(%d, %hhu)", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    char v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::setMotionStateYouthSim(BOOL, uint8_t)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  buf[1] = a2;
  buf[2] = a3;
  sub_1010E2E80(a1 + 192, (__int16 *)buf, 0);
}

void sub_1010CDC48(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1010E1858;
  v3[3] = &unk_1022A3020;
  void v3[4] = a1;
  sub_1009E8F7C(v2, (uint64_t)v3);
}

void sub_1010CDCC8(void *a1)
{
  sub_1010CDA00(a1);

  operator delete();
}

void sub_1010CDD00(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_1010CDD10(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_10230F848;
  *(void *)(a1 + 8) = a2;
  *(_WORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 18) = 0;
  uint64_t v3 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010CDDB4;
  void v5[3] = &unk_1022A3020;
  void v5[4] = a1;
  sub_1009E8E94(v3, (uint64_t)v5);
  return a1;
}

void sub_1010CDDB4(uint64_t a1)
{
}

void sub_1010CDDC0(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1010D12B0;
  v3[3] = &unk_1022A3020;
  void v3[4] = a1;
  sub_1009E8F7C(v2, (uint64_t)v3);
}

void *sub_1010CDE3C(void *a1)
{
  *a1 = off_10230F848;
  uint64_t v2 = sub_1000D3E78();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1010CDEDC;
  v4[3] = &unk_1022A3020;
  void v4[4] = a1;
  sub_1009E8E94(v2, (uint64_t)v4);
  return a1;
}

void sub_1010CDEDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 17)) {
    --*(_DWORD *)(*(void *)(v1 + 8) + 892);
  }
  if (*(unsigned char *)(v1 + 18)) {
    --*(_DWORD *)(*(void *)(v1 + 8) + 896);
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (*(unsigned char *)(v1 + 16)) {
    --*(_DWORD *)(v2 + 888);
  }
  sub_1010CDDC0(v2);
}

void sub_1010CDF30(void *a1)
{
  sub_1010CDE3C(a1);

  operator delete();
}

void sub_1010CDF68(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010CDFEC;
  void v5[3] = &unk_1022BBA18;
  void v5[4] = a1;
  char v6 = a2;
  sub_1009E8E94(v4, (uint64_t)v5);
}

void sub_1010CDFEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != *(unsigned __int8 *)(v1 + 16))
  {
    uint64_t v4 = *(void *)(v1 + 8);
    int v5 = *(_DWORD *)(v4 + 888);
    if (v2) {
      int v6 = v5 + 1;
    }
    else {
      int v6 = v5 - 1;
    }
    *(_DWORD *)(v4 + 888) = v6;
    sub_1010CDDC0(v4);
    *(unsigned char *)(v1 + 16) = *(unsigned char *)(a1 + 40);
  }
}

void sub_1010CE044(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010CE0C8;
  void v5[3] = &unk_1022BBA18;
  void v5[4] = a1;
  char v6 = a2;
  sub_1009E8E94(v4, (uint64_t)v5);
}

void sub_1010CE0C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != *(unsigned __int8 *)(v1 + 17))
  {
    uint64_t v4 = *(void *)(v1 + 8);
    int v5 = *(_DWORD *)(v4 + 892);
    if (v2) {
      int v6 = v5 + 1;
    }
    else {
      int v6 = v5 - 1;
    }
    *(_DWORD *)(v4 + 892) = v6;
    sub_1010CDDC0(v4);
    *(unsigned char *)(v1 + 17) = *(unsigned char *)(a1 + 40);
  }
}

void sub_1010CE120(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010CE1A4;
  void v5[3] = &unk_1022BBA18;
  void v5[4] = a1;
  char v6 = a2;
  sub_1009E8E94(v4, (uint64_t)v5);
}

void sub_1010CE1A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 != *(unsigned __int8 *)(v1 + 18))
  {
    uint64_t v4 = *(void *)(v1 + 8);
    int v5 = *(_DWORD *)(v4 + 896);
    if (v2) {
      int v6 = v5 + 1;
    }
    else {
      int v6 = v5 - 1;
    }
    *(_DWORD *)(v4 + 896) = v6;
    sub_1010CDDC0(v4);
    *(unsigned char *)(v1 + 18) = *(unsigned char *)(a1 + 40);
  }
}

void sub_1010CE1FC(uint64_t a1)
{
  int times = mach_get_times();
  if (times)
  {
    int v3 = times;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__n128 buf = 67109120;
      LODWORD(v11) = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to update fMachToWallOffset! %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionCoprocessor::updateMachToWallOffset()", "%s\n");
LABEL_19:
      if (v5 != buf) {
        free(v5);
      }
    }
  }
  else
  {
    double v6 = sub_1000D3D90(0);
    *(double *)(a1 + 664) = (double)0 + (double)0 * 0.000000001 - kCFAbsoluteTimeIntervalSince1970 - v6;
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    char v7 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 664);
      uint64_t v9 = *(void *)(a1 + 352);
      *(_DWORD *)__n128 buf = 134218752;
      uint64_t v11 = v8;
      __int16 v12 = 2048;
      double v13 = v6;
      __int16 v14 = 2048;
      double v15 = (double)0 + (double)0 * 0.000000001 - kCFAbsoluteTimeIntervalSince1970;
      __int16 v16 = 2048;
      uint64_t v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Updating fMachToWallOffset %f, mach time %f, wall time %f, iohidtime %f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_102310410);
      }
      int v5 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::updateMachToWallOffset()", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_1010CE588(uint64_t a1)
{
  uint64_t v2 = sub_1000D3E78();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1010CE604;
  v3[3] = &unk_1022A3020;
  void v3[4] = a1;
  sub_1009E8F7C(v2, (uint64_t)v3);
}

double sub_1010CE604(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 859))
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v19 = 0;
    uint64_t v18 = 0;
    __int16 v20 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    memset(v14, 0, sizeof(v14));
    long long v15 = 0u;
    *(void *)&long long v9 = *(void *)(v1 + 352);
    *((CFAbsoluteTime *)&v9 + 1) = Current;
    long long v10 = 0uLL;
    LOWORD(v11) = 0;
    *((void *)&v11 + 1) = (unint64_t)Current;
    *(void *)&long long v12 = 0;
    *(void *)((char *)&v12 + 7) = 0;
    *(void *)&long long v13 = 0x7E007E007E007E00;
    WORD5(v13) = 0;
    LODWORD(v14[0]) = 0;
    *(void *)((char *)&v14[1] + 2) = 0;
    *(_OWORD *)((char *)v14 + 4) = v17;
    WORD5(v14[1]) = -1;
    long long v15 = 0u;
    memset(v16, 0, sizeof(v16));
    sub_1000E01AC(v1, 0, (uint64_t)&v9, 160);
    long long v3 = v15;
    *(_OWORD *)(v1 + 776) = v14[1];
    *(_OWORD *)(v1 + 792) = v3;
    long long v4 = v16[1];
    *(_OWORD *)(v1 + 808) = v16[0];
    *(_OWORD *)(v1 + 824) = v4;
    long long v5 = v12;
    *(_OWORD *)(v1 + 712) = v11;
    *(_OWORD *)(v1 + 728) = v5;
    long long v6 = v14[0];
    *(_OWORD *)(v1 + 744) = v13;
    *(_OWORD *)(v1 + 760) = v6;
    double result = *(double *)&v9;
    long long v8 = v10;
    *(_OWORD *)(v1 + 680) = v9;
    *(_OWORD *)(v1 + 696) = v8;
  }
  return result;
}

void sub_1010CE71C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 1280);
  if (v2)
  {
    long long v3 = (std::__shared_weak_count *)a2[1];
    uint64_t v4 = *a2;
    long long v5 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v4);
    if (v5) {
      sub_1000DB0A0(v5);
    }
  }
}

void sub_1010CE77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010CE794(uint64_t a1, int a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  uint64_t v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__n128 buf = 67109120;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending userParam: %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    long long v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendStrideParam(uint16_t)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  buf[0] = 11;
  *(_WORD *)&buf[1] = a2;
  sub_1010E1D40(a1 + 192, (__int16 *)buf, 0);
}

uint64_t sub_1010CE960()
{
  if (sub_1000F08D4()) {
    unint64_t v0 = ((unint64_t)sub_1000A16E8() >> 23) & 1;
  }
  else {
    LOBYTE(v0) = 1;
  }
  unsigned __int8 v3 = v0;
  sub_10006ACBC(v2, "OscarActivity", &v3, 0);
  return v2[1];
}

void sub_1010CE9B4(uint64_t a1, float *a2, char a3)
{
  sub_1000D3E78();
  sub_1000D5B68();
  if (*(unsigned char *)(a1 + 648))
  {
    sub_101AA0C9C();
    __break(1u);
LABEL_46:
    dispatch_once(&qword_102419080, &stru_102310490);
    goto LABEL_6;
  }
  LOBYTE(v10) = a2 | 1;
  *(_DWORD *)(a1 + 648) = a2 | 1;
  if ((a2 & 0x40) == 0) {
    goto LABEL_27;
  }
  uint64_t v35 = 0;
  BOOL v34 = 0;
  uint64_t v11 = sub_1000D3E78();
  sub_10006B564(v11, &v32);
  sub_1004D11B0(v32, "ISPUpdateInterval", (float *)&v35 + 1);
  sub_1004D11B0(v32, "OscarPredictionInterval", (float *)&v35);
  sub_1000D2988(v32, "OscarDisableDynamicBias", &v34);
  a2 = (float *)(a1 + 904);
  sub_1004D11B0(v32, "OscarGyroBiasXOffset", (float *)(a1 + 904));
  unsigned __int8 v3 = (float *)(a1 + 908);
  sub_1004D11B0(v32, "OscarGyroBiasYOffset", (float *)(a1 + 908));
  uint64_t v4 = (float *)(a1 + 912);
  sub_1004D11B0(v32, "OscarGyroBiasZOffset", (float *)(a1 + 912));
  long long v5 = (float *)(a1 + 916);
  if ((sub_1004D11B0(v32, "OscarGyroBiasErrorOffset", (float *)(a1 + 916)) & 1) == 0) {
    sub_1004D11B0(v32, "OscarGyroBiasErrorOffest", (float *)(a1 + 916));
  }
  long long v6 = &qword_102419000;
  if (qword_102419080 != -1) {
    goto LABEL_46;
  }
LABEL_6:
  long long v12 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
  {
    int buf = 134349312;
    double buf_4 = *(float *)&v35;
    __int16 v46 = 2050;
    double v47 = *((float *)&v35 + 1);
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "predictionInterval,%{public}f,ispUpdateInterval,%{public}f", (uint8_t *)&buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (v6[16] != -1) {
      dispatch_once(&qword_102419080, &stru_102310490);
    }
    int v36 = 134349312;
    double v37 = *(float *)&v35;
    __int16 v38 = 2050;
    double v39 = *((float *)&v35 + 1);
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v23);
    if (v23 != (char *)&buf) {
      free(v23);
    }
  }
  if (v34)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1023104B0);
    }
    long long v13 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Warning: dynamic bias estimation disabled!", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1023104B0);
      }
      LOWORD(v36) = 0;
      __int16 v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v29);
      if (v29 != (char *)&buf) {
        free(v29);
      }
    }
  }
  if (*a2 != 0.0 || *v3 != 0.0 || *v4 != 0.0 || *v5 != 0.0)
  {
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1023104B0);
    }
    __int16 v14 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_DEFAULT))
    {
      double v15 = *a2;
      double v16 = *v3;
      double v17 = *v4;
      double v18 = *v5;
      int buf = 134218752;
      double buf_4 = v15;
      __int16 v46 = 2048;
      double v47 = v16;
      __int16 v48 = 2048;
      double v49 = v17;
      __int16 v50 = 2048;
      double v51 = v18;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: manual gyro bias offset [%f %f %f] dps,error,%f", (uint8_t *)&buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1023104B0);
      }
      double v24 = *a2;
      double v25 = *v3;
      double v26 = *v4;
      double v27 = *v5;
      int v36 = 134218752;
      double v37 = v24;
      __int16 v38 = 2048;
      double v39 = v25;
      __int16 v40 = 2048;
      double v41 = v26;
      __int16 v42 = 2048;
      double v43 = v27;
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v28);
      if (v28 != (char *)&buf) {
        free(v28);
      }
    }
  }
  *(_DWORD *)(a1 + 230) = HIDWORD(v35);
  *(_DWORD *)(a1 + 234) = v35;
  *(_WORD *)(a1 + 228) = *(_WORD *)(a1 + 900);
  *(_DWORD *)(a1 + 238) = *(_DWORD *)(a1 + 916);
  *(unsigned char *)(a1 + 242) = v34;
  if (v33) {
    sub_1000DB0A0(v33);
  }
  int v10 = *(_DWORD *)(a1 + 648);
LABEL_27:
  if ((v10 & 8) != 0) {
    *(unsigned char *)(a1 + 223) = 1;
  }
  if ((a3 & 1) == 0)
  {
    if ((v10 & 4) != 0)
    {
      sub_1000D5BCC();
      sub_1010C9A38();
    }
    if ((v10 & 2) != 0)
    {
      *(unsigned char *)(a1 + 224) = 1;
      dispatch_time_t v19 = dispatch_time(0, 30000000000);
      sub_1000D3E78();
      __int16 v20 = [sub_1009E8E44() queue];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1010CF66C;
      block[3] = &unk_1022A3020;
      block[4] = a1;
      dispatch_after(v19, v20, block);
      int v10 = *(_DWORD *)(a1 + 648);
    }
    if ((v10 & 0x40) != 0)
    {
      uint64_t v21 = sub_1000D5BCC();
      if (sub_1005D785C(v21))
      {
        sub_1000D5BCC();
        sub_1005D791C();
      }
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1023104B0);
      }
      int v22 = off_1024190B8;
      if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "CLGyroCalibrationDatabase is not available.", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_1023104B0);
        }
        LOWORD(v36) = 0;
        int v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionCoprocessor::setFeatures(unsigned int, BOOL)", "%s\n", v30);
        if (v30 != (char *)&buf) {
          free(v30);
        }
      }
    }
    if ((*(unsigned char *)(a1 + 648) & 0x10) != 0)
    {
      sub_1000D5BCC();
      sub_100DE37F4();
    }
  }
}

void sub_1010CF464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_1000DB0A0(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010CF490(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 168), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023104D0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCoprocessor::onPressureBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023104D0);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2082;
      double v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCoprocessor::onPressureBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1010E0D3C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010CF64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010CF66C(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  v1[224] = 0;
  return (*(uint64_t (**)(unsigned char *, void))(*(void *)v1 + 552))(v1, 0);
}

void sub_1010CF6A4(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
}

void sub_1010CF6B4(uint64_t a1)
{
  sub_1000D3E78();
  sub_1000D5B68();
  if (*(unsigned char *)(a1 + 648))
  {
    if (qword_102418FE0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101AA0E20(qword_102418FE0 == -1);
  }
  dispatch_once(&qword_102418FE0, &stru_102310410);
LABEL_3:
  uint64_t v2 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Sending initial configuration.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::finishConfiguration()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  unsigned __int8 v3 = (void *)sub_10137AE78();
  sub_10137BA80(v3);
  int v4 = *(_DWORD *)(a1 + 648);
  if ((v4 & 8) != 0)
  {
    sub_1010CFA4C((void *)a1, *(void **)(a1 + 160));
    int v4 = *(_DWORD *)(a1 + 648);
    if ((v4 & 0x40) == 0)
    {
LABEL_8:
      if ((v4 & 4) == 0) {
        goto LABEL_9;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  sub_1010CFCB4();
  int v4 = *(_DWORD *)(a1 + 648);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_14:
  sub_1010CFE58(a1);
  if ((*(_DWORD *)(a1 + 648) & 0x10) == 0)
  {
LABEL_11:
    sub_1010CE794(a1, *(unsigned __int16 *)(a1 + 344));
    (*(void (**)(uint64_t, void))(*(void *)a1 + 544))(a1, *(unsigned __int8 *)(a1 + 1419));
    uint8_t v5 = *(unsigned char *)(a1 + 1813);
    buf[0] = 49;
    buf[1] = v5;
    sub_1010E84D8(a1 + 192, (__int16 *)buf, 0);
    uint8_t v6 = *(unsigned char *)(a1 + 1814);
    buf[0] = 52;
    buf[1] = v6;
    sub_1010E86AC(a1 + 192, (__int16 *)buf, 0);
    uint8_t v7 = *(unsigned char *)(a1 + 1815);
    buf[0] = 54;
    buf[1] = v7;
    sub_1010E8880(a1 + 192, (__int16 *)buf, 0);
    uint8_t v8 = *(unsigned char *)(a1 + 1816);
    buf[0] = 55;
    buf[1] = v8;
    sub_1010E8A54(a1 + 192, (__int16 *)buf, 0);
    uint8_t v9 = *(unsigned char *)(a1 + 1817);
    buf[0] = 56;
    buf[1] = v9;
    sub_1010E8C28(a1 + 192, (__int16 *)buf, 0);
    sub_1010D0218(a1);
    sub_1000D5BCC();
    sub_10116D08C();
  }
LABEL_10:
  sub_1010D0018(a1);
  goto LABEL_11;
}

void sub_1010CFA4C(void *a1, void *a2)
{
  sub_1000D3E78();
  sub_1000D5B68();
  if (qword_102419250 != -1) {
    dispatch_once(&qword_102419250, &stru_102310610);
  }
  int v4 = qword_102419258;
  if (os_log_type_enabled((os_log_t)qword_102419258, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "configuring on body detector", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419250 != -1) {
      dispatch_once(&qword_102419250, &stru_102310610);
    }
    LOWORD(v8) = 0;
    uint8_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::configureOnBodyDetector(NSDictionary *)", "%s\n", v7);
    if (v7 != buf) {
      free(v7);
    }
  }
  long long v10 = 0u;
  memset(v11, 0, 29);
  long long v8 = 0u;
  long long v9 = 0u;
  if (a2)
  {
    uint8_t v5 = (void *)(*(uint64_t (**)(void *))(*a1 + 584))(a1);
    sub_100EB8364(a2, v5, (uint64_t)&v8);
  }
  else
  {
    sub_100EB7F88(&v8);
  }
  long long v15 = v9;
  long long v16 = v10;
  v17[0] = v11[0];
  *(_OWORD *)((char *)v17 + 13) = *(_OWORD *)((char *)v11 + 13);
  buf[0] = 12;
  *(_WORD *)&buf[1] = 0;
  char v13 = 0;
  long long v14 = v8;
  uint8_t v6 = (void *)a1[20];
  if (v6 != a2)
  {

    a1[20] = [a2 copy];
  }
  sub_100EB7FA0((uint64_t)&v8);
  sub_1010E3D84((uint64_t)(a1 + 24), (long long *)buf, 0);
}

void sub_1010CFCB4()
{
  sub_1000D3E78();
  sub_1000D5B68();
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1023104B0);
  }
  unint64_t v0 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Send gyro bias fit sync", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1023104B0);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGyroBiasFitSync()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  sub_1010D0304();
}

id sub_1010CFE58(uint64_t a1)
{
  sub_1000D3E78();
  sub_1000D5B68();
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_102310510);
  }
  uint64_t v2 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Send pressure bias fit sync", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_102310510);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendPressureBiasFitSync()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  [*(id *)(*(void *)(a1 + 1336) + 16) unregister:*(void *)(*(void *)(a1 + 1336) + 8) forNotification:0];
  return [*(id *)(*(void *)(a1 + 1336) + 16) register:*(void *)(*(void *)(a1 + 1336) + 8) forNotification:0 registrationInfo:0];
}

id sub_1010D0018(uint64_t a1)
{
  sub_1000D3E78();
  sub_1000D5B68();
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_102310530);
  }
  uint64_t v2 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Send GMM data async", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102310530);
    }
    __int16 v7 = 0;
    uint8_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGmmDataAsync()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id v3 = [[[*(id *)(a1 + 168) vendor] proxyForService:@"CLGeomagneticModelProvider"];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1010D0E44;
  v6[3] = &unk_1022C1698;
  void v6[4] = a1;
  return [v3 doAsync:v6];
}

void sub_1010D0218(uint64_t a1)
{
  sub_10044FD20(v5, "OverrideSkiLiftDetectionForSeconds", &dword_102485288, 0);
  if (v6 > dword_102485288)
  {
    sub_1010D5018(a1, 1);
    dispatch_time_t v2 = dispatch_time(0, 1000000000 * v6);
    sub_1000D3E78();
    id v3 = [sub_1009E8E44() queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010D51DC;
    block[3] = &unk_1022A3020;
    block[4] = a1;
    dispatch_after(v2, v3, block);
  }
}

void sub_1010D02FC(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
}

void sub_1010D0304()
{
  uint64_t v0 = __chkstk_darwin();
  sub_1000D3E78();
  sub_1000D5B68();
  if ((*(unsigned char *)(v0 + 648) & 0x40) == 0)
  {
    sub_101AA0F94();
    __break(1u);
  }
  int v1 = *(_DWORD *)(v0 + 920);
  if (v1 == 2)
  {
    memcpy(__dst, (const void *)(v0 + 953), 0x11AuLL);
    int v3 = 0xFFFF;
    if (*(unsigned __int16 *)(v0 + 900) != 0xFFFF)
    {
      if (*(unsigned char *)(v0 + 952))
      {
        if (qword_1024190B0 != -1) {
          dispatch_once(&qword_1024190B0, &stru_1023104B0);
        }
        int v4 = off_1024190B8;
        if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Decreasing proactive gyro bias estimation timeout for out of box.", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190B0 != -1) {
            dispatch_once(&qword_1024190B0, &stru_1023104B0);
          }
          LOWORD(v55) = 0;
          uint64_t v35 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGyroBiasFit()", "%s\n", v35);
          if (v35 != buf) {
            free(v35);
          }
          int v3 = 300;
        }
        else
        {
          int v3 = 300;
        }
      }
      else
      {
        int v3 = *(unsigned __int16 *)(v0 + 900);
      }
    }
    if (*(unsigned __int16 *)(v0 + 228) != v3)
    {
      *(_WORD *)(v0 + 228) = v3;
      (*(void (**)(uint64_t, void))(*(void *)v0 + 552))(v0, 0);
    }
    *(void *)&long long v55 = off_1022E6DF8;
    *((void *)&v55 + 1) = CFAbsoluteTimeGetCurrent();
    long long v15 = &v58;
    uint64_t v16 = 4;
    do
    {
      double v17 = (char *)__dst + v16;
      *((void *)v15 - 13) = *(void *)((char *)__dst + v16);
      *(v15 - 24) = *(_DWORD *)((char *)__dst + v16 + 8);
      *((void *)v15 - 1) = *(void *)((char *)__dst + v16 + 12);
      *long long v15 = *(_DWORD *)((char *)&__dst[1] + v16 + 4);
      v15 += 3;
      v16 += 24;
    }
    while (v17 + 24 != (char *)&__dst[12] + 4);
    *(_OWORD *)double v59 = *(_OWORD *)((char *)&__dst[12] + 4);
    *(_OWORD *)&unsigned char v59[12] = __dst[13];
    v61[0] = *(void *)((char *)&__dst[14] + 4);
    *(void *)((char *)v61 + 5) = *(void *)((char *)&__dst[14] + 9);
    int v60 = __dst[14];
    if (*(unsigned char *)(v0 + 869))
    {
      uint64_t v18 = sub_101282D9C();
      sub_10128431C(v18, (uint64_t)&v55);
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1023104F0);
      }
      if (qword_10248AF90) {
        sub_1012F3924((uint64_t)&v55, (uint64_t)buf);
      }
    }
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1023104B0);
    }
    uint64_t v19 = off_1024190B8;
    if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
    {
      sub_100B542E4();
      __int16 v20 = v43 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v36 = 136446210;
      *(void *)&v36[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "NonlinearBiasFit,%{public}s", v36, 0xCu);
      if (SHIBYTE(v43) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190B0 != -1) {
        dispatch_once(&qword_1024190B0, &stru_1023104B0);
      }
      sub_100B542E4();
      if (v37 >= 0) {
        uint64_t v33 = v36;
      }
      else {
        uint64_t v33 = *(unsigned char **)v36;
      }
      int v38 = 136446210;
      double v39 = v33;
      BOOL v34 = (char *)_os_log_send_and_compose_impl();
      if (v37 < 0) {
        operator delete(*(void **)v36);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGyroBiasFit()", "%s\n", v34);
      if (v34 != buf) {
        free(v34);
      }
    }
    uint64_t v21 = 0;
    float32x2_t v22 = *(float32x2_t *)(v0 + 904);
    float v23 = *(float *)(v0 + 912);
    do
    {
      double v24 = (float32x2_t *)((char *)__dst + v21);
      __n128 v24[2] = vadd_f32(v22, *(float32x2_t *)((char *)&__dst[1] + v21));
      v24[3].f32[0] = v23 + *(float *)((char *)&__dst[1] + v21 + 8);
      v21 += 24;
    }
    while (v21 != 192);
    sub_1010E20F0(v0 + 192, __dst, 0);
  }
  else if (v1 == 1)
  {
    if ((CFAbsoluteTimeGetCurrent() - *(double *)(v0 + 928)) / 3600.0 > 0.0
      && (CFAbsoluteTimeGetCurrent() - *(double *)(v0 + 928)) / 3600.0 >= 255.0)
    {
      int v2 = 255;
    }
    else if ((CFAbsoluteTimeGetCurrent() - *(double *)(v0 + 928)) / 3600.0 <= 0.0)
    {
      int v2 = 0;
    }
    else
    {
      int v2 = (int)((CFAbsoluteTimeGetCurrent() - *(double *)(v0 + 928)) / 3600.0);
    }
    LOBYTE(v55) = 10;
    BYTE1(v55) = v2;
    WORD1(v55) = 0;
    *(void *)((char *)&v55 + 4) = *(void *)(v0 + 952);
    HIDWORD(v55) = *(_DWORD *)(v0 + 960);
    float32x2_t v5 = *(float32x2_t *)(v0 + 964);
    float32x2_t v56 = v5;
    float v6 = *(float *)(v0 + 972);
    float v57 = v6;
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    __int16 v7 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      double v8 = *(float *)(v0 + 952);
      double v9 = *(float *)(v0 + 956);
      double v10 = *(float *)(v0 + 960);
      double v11 = *(float *)(v0 + 964);
      double v12 = *(float *)(v0 + 968);
      double v13 = *(float *)(v0 + 972);
      uint64_t v14 = *(void *)(v0 + 928);
      *(_DWORD *)int buf = 134350848;
      *(double *)&uint8_t buf[4] = v8;
      __int16 v41 = 2050;
      double v42 = v9;
      __int16 v43 = 2050;
      double v44 = v10;
      __int16 v45 = 2050;
      double v46 = v11;
      __int16 v47 = 2050;
      double v48 = v12;
      __int16 v49 = 2050;
      double v50 = v13;
      __int16 v51 = 2050;
      uint64_t v52 = v14;
      __int16 v53 = 1026;
      int v54 = v2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GyroBiasFit,slope.x,%{public}f,.y,%{public}f.z,%{public}f,intercept.x,%{public}f,.y,%{public}f.z,%{public}f,lastMiniCal,%{public}f,hours,%{public}d", buf, 0x4Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_102310410);
      }
      double v25 = *(float *)(v0 + 952);
      double v26 = *(float *)(v0 + 956);
      double v27 = *(float *)(v0 + 960);
      double v28 = *(float *)(v0 + 964);
      double v29 = *(float *)(v0 + 968);
      double v30 = *(float *)(v0 + 972);
      uint64_t v31 = *(void *)(v0 + 928);
      LODWORD(__dst[0]) = 134350848;
      *(double *)((char *)__dst + 4) = v25;
      WORD6(__dst[0]) = 2050;
      *(double *)((char *)__dst + 14) = v26;
      WORD3(__dst[1]) = 2050;
      *((double *)&__dst[1] + 1) = v27;
      LOWORD(__dst[2]) = 2050;
      *(double *)((char *)&__dst[2] + 2) = v28;
      WORD5(__dst[2]) = 2050;
      *(double *)((char *)&__dst[2] + 12) = v29;
      WORD2(__dst[3]) = 2050;
      *(double *)((char *)&__dst[3] + 6) = v30;
      HIWORD(__dst[3]) = 2050;
      *(void *)&__dst[4] = v31;
      WORD4(__dst[4]) = 1026;
      *(_DWORD *)((char *)&__dst[4] + 10) = v2;
      uint64_t v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGyroBiasFit()", "%s\n", v32);
      if (v32 != buf) {
        free(v32);
      }
    }
    float32x2_t v56 = vadd_f32(*(float32x2_t *)(v0 + 904), v5);
    float v57 = *(float *)(v0 + 912) + v6;
    sub_1010E1F0C(v0 + 192, &v55, 0);
  }
}

void sub_1010D0E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_1010D0E44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v13 = 0u;
  long long v12 = 0u;
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a2 + 208))(&v12, a2);
  if (*((double *)&v15 + 1) >= 0.0)
  {
    uint64_t v5 = sub_1000D3E78();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    long long v7 = v12;
    long long v8 = v13;
    void v6[2] = sub_1010D1084;
    v6[3] = &unk_1022DB3E0;
    void v6[4] = v2;
    long long v9 = v14;
    long long v10 = v15;
    sub_1009E8F7C(v5, (uint64_t)v6);
  }
  else
  {
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102310530);
    }
    int v3 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Warning: No gmm data available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_102310530);
      }
      __int16 v11 = 0;
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGmmDataAsync()_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_1010D1084(uint64_t a1)
{
}

void sub_1010D1094(uint64_t a1, double *a2)
{
  sub_1000D3E78();
  sub_1000D5B68();
  if ((*(unsigned char *)(a1 + 648) & 0x10) != 0)
  {
    float v5 = a2[5];
    *(float *)(a1 + 864) = v5;
    char v12 = 17;
    __int16 v13 = 0;
    char v14 = 0;
    float v6 = a2[3];
    float v7 = a2[6];
    float v15 = v6;
    float v16 = v7;
    uint64_t v2 = &qword_102419000;
    if (qword_1024190A0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101AA1118();
  }
  dispatch_once(&qword_1024190A0, &stru_102310530);
LABEL_3:
  long long v8 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    float v9 = a2[3];
    *(_DWORD *)int buf = 134217984;
    double v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GeomagneticModelData.magnitude,%f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v2[20] != -1) {
      dispatch_once(&qword_1024190A0, &stru_102310530);
    }
    float v10 = a2[3];
    int v17 = 134217984;
    double v18 = v10;
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendGmmData(const CLMotionTypeGeomagneticModelData &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  sub_1010E22DC(a1 + 192, (uint64_t)&v12, 0);
}

void sub_1010D12B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(unsigned char *)(v1 + 648) & 2) != 0)
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_102310490);
    }
    int v4 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(v1 + 888);
      int v6 = *(_DWORD *)(v1 + 892);
      int v7 = *(_DWORD *)(v1 + 896);
      *(_DWORD *)int buf = 67240704;
      int v14 = v5;
      __int16 v15 = 1026;
      int v16 = v6;
      __int16 v17 = 1026;
      int v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[SidebandSensorFusion] configuring,enableCount,%{public}d,latencyCount,%{public}d,snoopCount,%{public}d", buf, 0x14u);
    }
    uint64_t v8 = sub_10013D1A0(115, 2);
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_102310490);
      }
      char v12 = (char *)_os_log_send_and_compose_impl();
      uint64_t v8 = sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::updateSidebandSensorFusion()_block_invoke", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    if (*(int *)(v1 + 892) <= 0) {
      int v9 = *(_DWORD *)(v1 + 896) > 0;
    }
    else {
      int v9 = 2;
    }
    int v10 = *(_DWORD *)(v1 + 888);
    int v11 = v10 > 0;
    if (*(unsigned __int8 *)(v1 + 226) != v9 || *(unsigned __int8 *)(v1 + 225) != v11)
    {
      sub_1010D16A0(v8, v10 > 0);
      *(unsigned char *)(v1 + 226) = v9;
      *(unsigned char *)(v1 + 225) = v11;
      (*(void (**)(uint64_t, void))(*(void *)v1 + 552))(v1, 0);
      (*(void (**)(uint64_t))(*(void *)v1 + 568))(v1);
    }
  }
  else
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_102310490);
    }
    uint64_t v2 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "[SidebandSensorFusion] Feature not available.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_102310490);
      }
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionCoprocessor::updateSidebandSensorFusion()_block_invoke", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

uint64_t sub_1010D16A0(uint64_t a1, int a2)
{
  unint64_t v3 = sub_1000A16E8();
  if ((v3 & 0x200000) != 0)
  {
    sub_1000D3E78();
    sub_1000D5B68();
    uint64_t v4 = sub_100A08A84();
    sub_100A09D30(v4, a2);
  }
  return (v3 >> 21) & 1;
}

void sub_1010D16E4(uint64_t a1, int a2, int a3)
{
  if (a2 == 14 || !a3)
  {
    int v7 = a3;
  }
  else
  {
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102310450);
    }
    int v6 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)int buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)&uint8_t buf[8] = 1024;
      int v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Setting activityOverride: when in activityType,%d, guarding against unexpected hkActivityType,%d ", buf, 0xEu);
    }
    int v7 = 0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102310450);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionCoprocessor::setActivityOverrideUL(const CMMotionContext::ActivitySession, const CMMotionContext::CMHKWorkoutActivityType)", "%s\n", v8);
      if (v8 != buf) {
        free(v8);
      }
      int v7 = 0;
    }
  }
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102310450);
  }
  int v9 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    int v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setting activityOverride: %d,hkActivityType,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102310450);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::setActivityOverrideUL(const CMMotionContext::ActivitySession, const CMMotionContext::CMHKWorkoutActivityType)", "%s\n", v10);
    if (v10 != buf) {
      free(v10);
    }
  }
  buf[0] = 15;
  *(_DWORD *)&buf[1] = a2;
  *(_DWORD *)&buf[5] = v7;
  sub_1010E24C0(a1 + 192, (uint64_t)buf, 0);
  *(unsigned char *)(a1 + 862) = a2;
}

void sub_1010D1A4C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1010D2D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t *a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_1000D7D80((uint64_t)(v26 + 234));
  sub_1000D7D80((uint64_t)(v26 + 229));
  sub_1010D37CC(v30);
  uint64_t v32 = *v29;
  uint64_t *v29 = 0;
  if (v32) {
    sub_1010E26A4((uint64_t)v29, v32);
  }
  uint64_t v33 = *v28;
  uint64_t *v28 = 0;
  if (v33) {
    sub_1010E26A4((uint64_t)v28, v33);
  }
  uint64_t v34 = *a11;
  *a11 = 0;
  if (v34) {
    sub_1010E26A4((uint64_t)a11, v34);
  }
  uint64_t v35 = *a12;
  *a12 = 0;
  if (v35) {
    sub_1010E26A4((uint64_t)a12, v35);
  }
  uint64_t v36 = *a14;
  *a14 = 0;
  if (v36) {
    sub_1010E26A4((uint64_t)a14, v36);
  }
  sub_1000D80C4(v26 + 185);
  sub_1000D80C4(v27);
  uint64_t v37 = v26[172];
  v26[172] = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = v26[171];
  v26[171] = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = v26[170];
  v26[170] = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = v26[169];
  v26[169] = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = v26[168];
  v26[168] = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = v26[167];
  v26[167] = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = v26[166];
  v26[166] = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = v26[165];
  v26[165] = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = v26[164];
  v26[164] = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = v26[163];
  v26[163] = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = v26[73];
  v26[73] = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  double v48 = (void *)v26[68];
  if (v48)
  {
    v26[69] = v48;
    operator delete(v48);
  }
  sub_1004F4578(v26 + 62);
  __int16 v49 = (void *)v26[59];
  if (v49)
  {
    v26[60] = v49;
    operator delete(v49);
  }
  double v50 = (void *)v26[56];
  if (v50)
  {
    v26[57] = v50;
    operator delete(v50);
  }
  __int16 v51 = (void *)v26[53];
  if (v51)
  {
    v26[54] = v51;
    operator delete(v51);
  }
  uint64_t v52 = (void *)v26[50];
  if (v52)
  {
    v26[51] = v52;
    operator delete(v52);
  }
  sub_10051310C(a13);
  sub_100C6129C(v26);
  _Unwind_Resume(a1);
}

void sub_1010D3230()
{
}

void sub_1010D3238()
{
}

void sub_1010D3240(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1010D3248(uint64_t a1, int *a2, int *a3, unsigned char *a4)
{
}

void sub_1010D3250(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1010D3258(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 168), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023104D0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    int v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCoprocessor::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023104D0);
    }
    int v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      int v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCoprocessor::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010D33F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010D3410(uint64_t a1, _DWORD *a2, uint8_t *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 168), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023104D0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCoprocessor::onPencilStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023104D0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)int buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCoprocessor::onPencilStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1010E1598(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010D35CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010D35EC(uint64_t a1)
{
  uint64_t result = sub_1009EC0A8();
  if (result)
  {
    if (!*(void *)(a1 + 872)) {
      operator new();
    }
  }
  return result;
}

void sub_1010D36B8()
{
}

uint64_t sub_1010D36DC(uint64_t a1)
{
  uint64_t result = sub_100A08A84();
  if (result)
  {
    if (!*(void *)(a1 + 880)) {
      operator new();
    }
  }
  return result;
}

void sub_1010D37A8()
{
}

uint64_t sub_1010D37CC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  if (v2)
  {
    *(void *)(a1 + 144) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 120) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 88);
  if (v4)
  {
    *(void *)(a1 + 96) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 64);
  if (v5)
  {
    *(void *)(a1 + 72) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 40);
  if (v6)
  {
    *(void *)(a1 + 48) = v6;
    operator delete(v6);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_1010D3850(uint64_t a1)
{
  *(void *)a1 = off_10230F880;
  *(void *)(a1 + 32) = off_10230FC38;
  *(void *)(a1 + 40) = off_10230FC80;
  *(void *)(a1 + 48) = off_10230FCB8;
  *(void *)(a1 + 56) = off_10230FCE0;
  *(void *)(a1 + 64) = off_10230FD30;
  *(void *)(a1 + 72) = off_10230FD68;
  *(void *)(a1 + 80) = off_10230FDA8;
  *(void *)(a1 + 88) = off_10230FDE0;
  *(void *)(a1 + 96) = off_10230FE10;
  *(void *)(a1 + 104) = off_10230FE60;
  *(void *)(a1 + 112) = off_10230FE88;
  *(void *)(a1 + 120) = off_10230FEF0;
  *(void *)(a1 + 128) = off_10230FF18;
  *(void *)(a1 + 136) = off_10230FF40;
  *(void *)(a1 + 152) = off_10230FF68;
  if (*(unsigned char *)(a1 + 868))
  {
    sub_1010D3F9C(a1);
    sub_1010D400C(a1);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v2 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[OscarEmuReplay] Stopped", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMotionCoprocessor::~CLMotionCoprocessor()", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }

  sub_1000D7D80(a1 + 1872);
  sub_1000D7D80(a1 + 1832);
  unint64_t v3 = *(void **)(a1 + 1704);
  if (v3)
  {
    *(void *)(a1 + 1712) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 1680);
  if (v4)
  {
    *(void *)(a1 + 1688) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 1656);
  if (v5)
  {
    *(void *)(a1 + 1664) = v5;
    operator delete(v5);
  }
  int v6 = *(void **)(a1 + 1632);
  if (v6)
  {
    *(void *)(a1 + 1640) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 1608);
  if (v7)
  {
    *(void *)(a1 + 1616) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 1607) < 0) {
    operator delete(*(void **)(a1 + 1584));
  }
  uint64_t v8 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0;
  if (v8) {
    sub_1010E26A4(a1 + 1560, v8);
  }
  uint64_t v9 = *(void *)(a1 + 1552);
  *(void *)(a1 + 1552) = 0;
  if (v9) {
    sub_1010E26A4(a1 + 1552, v9);
  }
  uint64_t v10 = *(void *)(a1 + 1544);
  *(void *)(a1 + 1544) = 0;
  if (v10) {
    sub_1010E26A4(a1 + 1544, v10);
  }
  uint64_t v11 = *(void *)(a1 + 1536);
  *(void *)(a1 + 1536) = 0;
  if (v11) {
    sub_1010E26A4(a1 + 1536, v11);
  }
  uint64_t v12 = *(void *)(a1 + 1528);
  *(void *)(a1 + 1528) = 0;
  if (v12) {
    sub_1010E26A4(a1 + 1528, v12);
  }
  sub_1000D80C4((void *)(a1 + 1480));
  sub_1000D80C4((void *)(a1 + 1432));
  uint64_t v13 = *(void *)(a1 + 1376);
  *(void *)(a1 + 1376) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *(void *)(a1 + 1368);
  *(void *)(a1 + 1368) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 1360);
  *(void *)(a1 + 1360) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 1352);
  *(void *)(a1 + 1352) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 1344);
  *(void *)(a1 + 1344) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(a1 + 1336);
  *(void *)(a1 + 1336) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void *)(a1 + 1328);
  *(void *)(a1 + 1328) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *(void *)(a1 + 1320);
  *(void *)(a1 + 1320) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *(void *)(a1 + 1312);
  *(void *)(a1 + 1312) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *(void *)(a1 + 1304);
  *(void *)(a1 + 1304) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  double v24 = *(void **)(a1 + 544);
  if (v24)
  {
    *(void *)(a1 + 552) = v24;
    operator delete(v24);
  }
  sub_1004F4578((void *)(a1 + 496));
  double v25 = *(void **)(a1 + 472);
  if (v25)
  {
    *(void *)(a1 + 480) = v25;
    operator delete(v25);
  }
  double v26 = *(void **)(a1 + 448);
  if (v26)
  {
    *(void *)(a1 + 456) = v26;
    operator delete(v26);
  }
  double v27 = *(void **)(a1 + 424);
  if (v27)
  {
    *(void *)(a1 + 432) = v27;
    operator delete(v27);
  }
  double v28 = *(void **)(a1 + 400);
  if (v28)
  {
    *(void *)(a1 + 408) = v28;
    operator delete(v28);
  }
  sub_10051310C(a1 + 176);
  sub_100C6129C((void *)a1);
  return a1;
}

void sub_1010D3F90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

uint64_t sub_1010D3F9C(uint64_t a1)
{
  uint64_t result = sub_1009EC0A8();
  if (result && *(void *)(a1 + 872))
  {
    uint64_t v3 = sub_1009EC0A8();
    sub_1009D26C4(v3, 0, *(void *)(a1 + 872));
    uint64_t result = *(void *)(a1 + 872);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(a1 + 872) = 0;
  }
  return result;
}

uint64_t sub_1010D400C(uint64_t a1)
{
  uint64_t result = sub_100A08A84();
  if (result && *(void *)(a1 + 880))
  {
    uint64_t v3 = sub_100A08A84();
    sub_1009D26C4(v3, 0, *(void *)(a1 + 880));
    uint64_t result = *(void *)(a1 + 880);
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    *(void *)(a1 + 880) = 0;
  }
  return result;
}

void sub_1010D40FC(unsigned char *a1, int a2, uint64_t a3)
{
  sub_1000D3E78();
  sub_1000D5B68();
  switch(a2)
  {
    case 31:
      if (a3)
      {
        if (a1[1419]) {
          return;
        }
        int v6 = *(void (**)(unsigned char *, BOOL))(*(void *)a1 + 544);
        uint64_t v7 = a1;
        BOOL v8 = 1;
      }
      else
      {
        if (!a1[1419]) {
          return;
        }
        int v6 = *(void (**)(unsigned char *, BOOL))(*(void *)a1 + 544);
        uint64_t v7 = a1;
        BOOL v8 = 0;
      }
LABEL_60:
      v6(v7, v8);
      return;
    case 32:
    case 33:
    case 36:
    case 37:
    case 38:
    case 39:
    case 42:
      return;
    case 34:
      if (a3)
      {
        if (a1[1420]) {
          return;
        }
        a1[1420] = 1;
        BYTE1(v23[0]) = 1;
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_102310410);
        }
        uint64_t v13 = qword_102418FE8;
        if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Turning on AOP SPL", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FE0 == -1)
          {
LABEL_85:
            uint64_t v22 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::numberOfSpectatorsChanged(int, size_t)", "%s\n", v22);
            if (v22 != (char *)buf) {
              free(v22);
            }
            goto LABEL_67;
          }
LABEL_87:
          dispatch_once(&qword_102418FE0, &stru_102310410);
          goto LABEL_85;
        }
      }
      else
      {
        if (!a1[1420]) {
          return;
        }
        a1[1420] = 0;
        BYTE1(v23[0]) = 0;
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_102310410);
        }
        uint64_t v21 = qword_102418FE8;
        if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Turning off AOP SPL", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FE0 == -1) {
            goto LABEL_85;
          }
          goto LABEL_87;
        }
      }
LABEL_67:
      sub_1010E2700((uint64_t)(a1 + 192), (__int16 *)v23, 0);
      return;
    case 35:
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_102310410);
      }
      uint64_t v14 = qword_102418FE8;
      if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67240192;
        int v25 = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "kNotificationPedometerPathStraightness, numberOfSpectators = %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FE0 != -1) {
          dispatch_once(&qword_102418FE0, &stru_102310410);
        }
        v23[0] = 67240192;
        v23[1] = a3;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::numberOfSpectatorsChanged(int, size_t)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      return;
    case 40:
      if (a3)
      {
        if (a1[1813]) {
          return;
        }
        a1[1813] = 1;
        __int16 v16 = 305;
      }
      else
      {
        if (!a1[1813]) {
          return;
        }
        a1[1813] = 0;
        __int16 v16 = 49;
      }
      *(_WORD *)int buf = v16;
      sub_1010E84D8((uint64_t)(a1 + 192), (__int16 *)buf, 0);
      return;
    case 41:
      if (a3)
      {
        if (a1[1814]) {
          return;
        }
        a1[1814] = 1;
        __int16 v17 = 308;
      }
      else
      {
        if (!a1[1814]) {
          return;
        }
        a1[1814] = 0;
        __int16 v17 = 52;
      }
      *(_WORD *)int buf = v17;
      sub_1010E86AC((uint64_t)(a1 + 192), (__int16 *)buf, 0);
      return;
    case 43:
      if (a3)
      {
        if (!a1[1815])
        {
          a1[1815] = 1;
          __int16 v18 = 310;
LABEL_55:
          *(_WORD *)int buf = v18;
          sub_1010E8880((uint64_t)(a1 + 192), (__int16 *)buf, 0);
        }
      }
      else if (a1[1815])
      {
        a1[1815] = 0;
        __int16 v18 = 54;
        goto LABEL_55;
      }
      return;
    case 44:
      if (a3)
      {
        if (a1[1816]) {
          return;
        }
        a1[1816] = 1;
        __int16 v19 = 311;
      }
      else
      {
        if (!a1[1816]) {
          return;
        }
        a1[1816] = 0;
        __int16 v19 = 55;
      }
      *(_WORD *)int buf = v19;
      sub_1010E8A54((uint64_t)(a1 + 192), (__int16 *)buf, 0);
      return;
    case 45:
      if (a3)
      {
        if (a1[1817]) {
          return;
        }
        a1[1817] = 1;
        __int16 v20 = 312;
      }
      else
      {
        if (!a1[1817]) {
          return;
        }
        a1[1817] = 0;
        __int16 v20 = 56;
      }
      *(_WORD *)int buf = v20;
      sub_1010E8C28((uint64_t)(a1 + 192), (__int16 *)buf, 0);
      return;
    default:
      switch(a2)
      {
        case 0:
          if (a3 && a1[859])
          {
            uint64_t v9 = (uint64_t)(a1 + 680);
            uint64_t v10 = (uint64_t)a1;
            uint64_t v11 = 0;
            uint64_t v12 = 160;
            goto LABEL_48;
          }
          break;
        case 2:
          if (a3)
          {
            uint64_t v9 = (uint64_t)(a1 + 840);
            uint64_t v10 = (uint64_t)a1;
            uint64_t v11 = 2;
            uint64_t v12 = 16;
            goto LABEL_48;
          }
          break;
        case 4:
          if (a3 && a1[283] && a1[859])
          {
            uint64_t v9 = (uint64_t)(a1 + 284);
            uint64_t v10 = (uint64_t)a1;
            uint64_t v11 = 4;
            uint64_t v12 = 60;
LABEL_48:
            sub_1000E01AC(v10, v11, v9, v12);
          }
          break;
        case 7:
          if (!a1[861])
          {
            int v6 = *(void (**)(unsigned char *, BOOL))(*(void *)a1 + 200);
            uint64_t v7 = a1;
            BOOL v8 = a3 != 0;
            goto LABEL_60;
          }
          break;
        default:
          return;
      }
      return;
  }
}

uint64_t sub_1010D490C()
{
  return 1;
}

uint64_t sub_1010D4914(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 648) >> 5) & 1;
}

uint64_t sub_1010D4920(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 648) >> 7;
}

void sub_1010D492C(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010D49B4;
  void v5[3] = &unk_1022ACE00;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010D49B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v2 + 856))
  {
    *(unsigned char *)(v2 + 856) = 1;
    operator new();
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
}

void sub_1010D4A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101AA1294();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010D4AC4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if ((*(unsigned char *)(result + 648) & 2) != 0) {
    operator new();
  }
  *a2 = 0;
  return result;
}

void sub_1010D4B28()
{
}

void sub_1010D4B4C(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010D4BD4;
  void v5[3] = &unk_1022ACE00;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

uint64_t sub_1010D4BD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v2 + 857))
  {
    *(unsigned char *)(v2 + 857) = 1;
    operator new();
  }
  uint64_t v4 = 0;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1010D4C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101AA12C8();
  }
  _Unwind_Resume(exception_object);
}

void sub_1010D4CB8(uint64_t a1, int a2, int a3)
{
  if (qword_102419310 != -1) {
    dispatch_once(&qword_102419310, &stru_102310550);
  }
  int v6 = qword_102419318;
  if (os_log_type_enabled((os_log_t)qword_102419318, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109376;
    int v9 = a2;
    __int16 v10 = 1024;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[coprocessor] Client registration changing for stream %d, enable %d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419310 != -1) {
      dispatch_once(&qword_102419310, &stru_102310550);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendBatchedSensorClientRegistration(CMMotionCoprocessorCommand::BatchedSensorClientRegistration::Stream, BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  buf[0] = 76;
  buf[1] = a2;
  buf[2] = a3;
  sub_1010E28D4(a1 + 192, (__int16 *)buf, 0);
}

void sub_1010D4EAC(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010D4F34;
  void v5[3] = &unk_1022ACE00;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

uint64_t sub_1010D4F34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v2 + 858))
  {
    *(unsigned char *)(v2 + 858) = 1;
    operator new();
  }
  uint64_t v4 = 0;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
  uint64_t result = v4;
  uint64_t v4 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_1010D4FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_101AA12FC();
  }
  _Unwind_Resume(exception_object);
}

void sub_1010D5018(uint64_t a1, int a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  uint64_t v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Override ski lift detection %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::setSkiLiftDetectionOverride(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  buf[1] = a2;
  sub_1010E3064(a1 + 192, (__int16 *)buf, 0);
}

void sub_1010D51DC(uint64_t a1)
{
}

void sub_1010D51E8(uint64_t a1, long long *a2, dispatch_object_t object, const void *a4)
{
  long long v7 = *a2;
  long long v13 = a2[1];
  long long v8 = a2[3];
  long long v14 = a2[2];
  long long v15 = v8;
  __int16 v16 = *((_WORD *)a2 + 32);
  long long v12 = v7;
  dispatch_retain(object);
  int v9 = _Block_copy(a4);
  uint64_t v10 = sub_1000D3E78();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  _OWORD v11[2] = sub_1010D52AC;
  void v11[3] = &unk_102310200;
  v11[5] = v9;
  v11[6] = a1;
  void v11[4] = object;
  sub_1009E8F7C(v10, (uint64_t)v11);
}

void sub_1010D52AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(_OWORD *)(v2 + 217) = *(_OWORD *)(a1 + 56);
  long long v3 = *(_OWORD *)(a1 + 104);
  __int16 v4 = *(_WORD *)(a1 + 120);
  long long v5 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v2 + 249) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v2 + 233) = v5;
  *(_WORD *)(v2 + 281) = v4;
  *(_OWORD *)(v2 + 265) = v3;
  (*(void (**)(void))(*(void *)v2 + 560))();
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
  int v6 = *(const void **)(a1 + 40);

  _Block_release(v6);
}

void sub_1010D5358(uint64_t a1, void *aBlock)
{
  long long v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010D53E0;
  void v5[3] = &unk_1022ACE00;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010D53E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 1384) == 176)
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    long long v3 = (uint64_t *)(v2 + 1385);
    uint64_t v4 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      *(_DWORD *)int buf = 134218240;
      uint64_t v13 = v5;
      __int16 v14 = 2048;
      uint64_t v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MotionCoprocessor copying the latest TimeSync data machTimestamp,%llu,oscarTimestamp,%llu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_102310410);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::getTimeSyncData(CMTimeSyncCallback) const_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    long long v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  else
  {
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    long long v8 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_FAULT))
    {
      int v9 = *(unsigned __int8 *)(v2 + 1384);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v13) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "MotionCoprocessor last received TimeSync has the wrong packet type,%hhu", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_102310410);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMotionCoprocessor::getTimeSyncData(CMTimeSyncCallback) const_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    long long v7 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
  }
  v7();
  _Block_release(*(const void **)(a1 + 32));
}

void sub_1010D5744(uint64_t a1, uint64_t a2)
{
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_102310410);
  }
  long long v3 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(_DWORD *)(a2 + 1);
    *(_DWORD *)int buf = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "reply,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitPong(const CMMotionCoprocessorReply::Pong *)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1010D58FC(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v7 = v4;
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  uint64_t v9 = 0;
  double v8 = v4 + *(double *)(a1 + 664);
  LOBYTE(v9) = *(unsigned char *)(a2 + 1);
  sub_1000E01AC(a1, 7, (uint64_t)&v7, 24);
  sub_1000E01AC(a1, 9, (uint64_t)&v7, 24);
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102310470);
  }
  uint64_t v5 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 134218496;
    double v17 = v7;
    __int16 v18 = 2048;
    double v19 = v8;
    __int16 v20 = 1024;
    int v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Timestamp,%.3f,StartTime,%.3f,ActivePedState,%u", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102310470);
    }
    int v10 = 134218496;
    double v11 = v7;
    __int16 v12 = 2048;
    double v13 = v8;
    __int16 v14 = 1024;
    int v15 = v9;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitActivePedStateUpdate(const CMMotionCoprocessorReply::ActivePedStateUpdate *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1010D5B50(uint64_t a1, uint64_t a2)
{
}

void sub_1010D5B58(void *a1, uint64_t a2)
{
  if (qword_102419020 != -1) {
    dispatch_once(&qword_102419020, &stru_102310570);
  }
  double v4 = qword_102419028;
  if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_INFO))
  {
    int v5 = *(_DWORD *)(a2 + 4);
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)int buf = 67109376;
    int v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "trigger,%d,duration,%lld", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419020 != -1) {
      dispatch_once(&qword_102419020, &stru_102310570);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitAlarmTrigger(const CMMotionCoprocessorReply::AlarmTrigger *)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  uint64_t v7 = a1[156];
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(a2 + 4);
    if ((*(double (**)(uint64_t, uint64_t, BOOL, double))(v7 + 16))(v7, v8, *(unsigned char *)(a2 + 1) != 0, (double)*(unint64_t *)(a2 + 8) / 1000000.0) >= 0.0)(*(void (**)(void *, uint64_t))(*a1 + 232))(a1, v8); {
  }
    }
}

void sub_1010D5DA0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1010D5DA8(uint64_t a1, uint64_t a2)
{
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_102310410);
  }
  double v4 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a2 + 1);
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MotionWakeReason,%u", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    int v16 = *(unsigned __int8 *)(a2 + 1);
    LODWORD(v21[0]) = 67109120;
    HIDWORD(v21[0]) = v16;
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitWakeReason(const CMMotionCoprocessorReply::WakeReason *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  sub_10010F274((uint64_t)v21);
  unint64_t v6 = *(unsigned __int8 *)(a2 + 1);
  if (v6 > 0xE || ((0x3D21uLL >> v6) & 1) != 0)
  {
    uint64_t v9 = sub_100132EFC(v22, (uint64_t)"Unkown (", 8);
    buf[0] = *(unsigned char *)(a2 + 1);
    int v10 = sub_100132EFC(v9, (uint64_t)buf, 1);
    sub_100132EFC(v10, (uint64_t)")", 1);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    int v11 = qword_102418FE8;
    if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
    {
      int v12 = *(unsigned __int8 *)(a2 + 1);
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Received bad wake reason from motion coprocessor,reason,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FE0 != -1) {
        dispatch_once(&qword_102418FE0, &stru_102310410);
      }
      int v18 = *(unsigned __int8 *)(a2 + 1);
      v20[0] = 67109120;
      v20[1] = v18;
      double v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitWakeReason(const CMMotionCoprocessorReply::WakeReason *)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  else
  {
    uint64_t v7 = (const char *)qword_102310220[v6];
    size_t v8 = strlen(v7);
    sub_100132EFC(v22, (uint64_t)v7, v8);
    if (*(unsigned char *)(a2 + 1) == 3 && *(unsigned char *)(a1 + 863)) {
      sub_100132EFC(v22, (uint64_t)"(Frequent wakes are most likely caused by enabling AlwaysOnMotionSensorLogging!)", 80);
    }
  }
  if (sub_1000FC450())
  {
    sub_1000E9354(v20);
    std::stringbuf::str();
    if (v25 >= 0) {
      uint64_t v13 = (char *)buf;
    }
    else {
      uint64_t v13 = *(char **)buf;
    }
    sub_1004D34AC((uint64_t)v20, "OscarWakeReason", v13);
    if (v25 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1000FC45C((uint64_t)v20, (uint64_t)"MotionWakeReason");
    sub_10013F3C4(v20);
  }
  *(void *)((char *)v21
  v22[0] = v14;
  if (v23 < 0) {
    operator delete((void *)v22[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1010D62E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
}

uint64_t sub_1010D6330(uint64_t a1, uint64_t a2)
{
  return sub_1010D5DA8(a1 - 152, a2);
}

void sub_1010D6338(uint64_t a1, uint64_t a2)
{
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1023104B0);
  }
  long long v3 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a2 + 1);
    int v5 = *(unsigned __int8 *)(a2 + 2);
    char v6 = *(unsigned char *)(a2 + 3);
    int v7 = *(unsigned __int16 *)(a2 + 4);
    double v8 = *(float *)(a2 + 32);
    double v9 = *(float *)(a2 + 8);
    double v10 = *(float *)(a2 + 12);
    double v11 = *(float *)(a2 + 16);
    double v12 = *(float *)(a2 + 20);
    double v13 = *(float *)(a2 + 24);
    double v14 = *(float *)(a2 + 28);
    *(_DWORD *)int buf = 67242752;
    int v17 = v4;
    __int16 v18 = 1026;
    int v19 = v5;
    __int16 v20 = 258;
    char v21 = v6;
    __int16 v22 = 1026;
    int v23 = v7;
    __int16 v24 = 2050;
    double v25 = v8;
    __int16 v26 = 2050;
    double v27 = v9;
    __int16 v28 = 2050;
    double v29 = v10;
    __int16 v30 = 2050;
    double v31 = v11;
    __int16 v32 = 2050;
    double v33 = v12;
    __int16 v34 = 2050;
    double v35 = v13;
    __int16 v36 = 2050;
    double v37 = v14;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Enabled,%{public}d,Proactive,%{public}u,EndCondition,%{public}hhu,SampleInterval,%{public}d,Temperature,%{public}f,DynamicBias.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e,Covariance.x,%{public}.3e,.y,%{public}.3e,.z,%{public}.3e", buf, 0x5Du);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1023104B0);
    }
    int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitGyroBiasData(const CMMotionCoprocessorReply::GyroBiasData *)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

uint64_t sub_1010D661C(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  double v5 = *(double *)(a1 + 664);
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102310590);
  }
  double v6 = v4 + v5;
  int v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    double v8 = v6 + (double)*(__int16 *)(a2 + 1);
    int v9 = *(unsigned __int8 *)(a2 + 3);
    int v10 = *(unsigned __int8 *)(a2 + 4);
    *(_DWORD *)int buf = 134218752;
    double v15 = v8;
    __int16 v16 = 2048;
    double v17 = v6;
    __int16 v18 = 1024;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Type,CLOscar,SedentaryAlarm:startTime,%f,firedTime,%f,type,%d,didWake,%d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102310590);
    }
    double v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSedentaryAlarm(const CMMotionCoprocessorReply::SedentaryAlarm *)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  uint64_t result = *(void *)(a1 + 1288);
  if (result)
  {
    v11.n128_f64[0] = v6 + (double)*(__int16 *)(a2 + 1);
    return (*(uint64_t (**)(uint64_t, void, BOOL, __n128, double))(result + 16))(result, *(unsigned __int8 *)(a2 + 3), *(unsigned char *)(a2 + 4) != 0, v11, v6);
  }
  return result;
}

uint64_t sub_1010D6898(uint64_t a1, uint64_t a2)
{
  return sub_1010D661C(a1 - 152, a2);
}

uint64_t sub_1010D68A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 292;
  *(unsigned char *)(a1 + 283) = 1;
  uint64_t v4 = a1 + 284;
  *(_OWORD *)(a1 + 328) = *(long long *)((char *)&xmmword_101DA6A5C + 12);
  *(_OWORD *)(a1 + 300) = unk_101DA6A4C;
  *(_OWORD *)(a1 + 316) = xmmword_101DA6A5C;
  *(_OWORD *)(a1 + 284) = xmmword_101DA6A3C;
  *(_DWORD *)(a1 + 284) = *(unsigned __int8 *)(a2 + 1);
  *(_DWORD *)(a1 + 288) = *(unsigned __int8 *)(a2 + 2);
  int v5 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 292) = v5;
  uint64_t v6 = *(void *)(a2 + 12);
  *(void *)&long long v7 = v6;
  *((void *)&v7 + 1) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 296) = v7;
  *(void *)(a1 + 312) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 324) = *(unsigned __int8 *)(a2 + 3);
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 332) = *(unsigned char *)(a2 + 4) != 0;
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 44);
  char v8 = *(unsigned char *)(a2 + 5);
  if (v8)
  {
    *(unsigned char *)(a1 + 340) = 1;
    if ((v8 & 2) == 0)
    {
LABEL_3:
      if ((v8 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a2 + 5) & 2) == 0)
  {
    goto LABEL_3;
  }
  *(unsigned char *)(a1 + 341) = 1;
  *(_DWORD *)(a1 + 292) = v5;
  if ((v8 & 4) != 0)
  {
LABEL_4:
    *(unsigned char *)(a1 + 342) = 1;
    *(_DWORD *)(a1 + 296) = v6;
  }
LABEL_5:
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  int v9 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    int v10 = *(_DWORD *)(a1 + 284);
    double v11 = *(float *)(a1 + 292);
    double v12 = *(float *)(a1 + 296);
    double v13 = *(float *)(a1 + 300);
    double v14 = *(float *)(a1 + 304);
    double v15 = *(float *)(a1 + 308);
    double v16 = *(float *)(a1 + 312);
    double v17 = *(float *)(a1 + 316);
    double v18 = *(float *)(a1 + 320);
    int v19 = *(_DWORD *)(a1 + 324);
    double v20 = *(float *)(a1 + 328);
    int v21 = *(unsigned __int8 *)(a1 + 332);
    int v22 = *(_DWORD *)(a1 + 288);
    int v23 = *(unsigned __int8 *)(a1 + 340);
    int v24 = *(unsigned __int8 *)(a1 + 341);
    int v25 = *(unsigned __int8 *)(a1 + 342);
    double v26 = *(float *)(a1 + 336);
    *(_DWORD *)int buf = 67113216;
    int v30 = v10;
    __int16 v31 = 2048;
    double v32 = v11;
    __int16 v33 = 2048;
    double v34 = v12;
    __int16 v35 = 2048;
    double v36 = v13;
    __int16 v37 = 2048;
    double v38 = v14;
    __int16 v39 = 2048;
    double v40 = v15;
    __int16 v41 = 2048;
    double v42 = v16;
    __int16 v43 = 2048;
    double v44 = v17;
    __int16 v45 = 2048;
    double v46 = v18;
    __int16 v47 = 1024;
    int v48 = v19;
    __int16 v49 = 2048;
    double v50 = v20;
    __int16 v51 = 1024;
    int v52 = v21;
    __int16 v53 = 1024;
    int v54 = v22;
    __int16 v55 = 1024;
    int v56 = v23;
    __int16 v57 = 1024;
    int v58 = v24;
    __int16 v59 = 1024;
    int v60 = v25;
    __int16 v61 = 2048;
    double v62 = v26;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Received stored user info from SPU, gender, %d, height(m), %f, weight(kg), %f, vo2max, %f, age, %f, hrmin, %f, hrmax, %f, hronset, %f, pal, %f, condition, %d, runVo2max, %f,betaBlockerUse, %d, biologicalSex, %d, isAgeSet, %d, isHeightSet, %d, isWeightSet, %d, adaptiveExerciseMinuteThreshold, %f", buf, 0x90u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    __int16 v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitStoredUserInfo(const CMMotionCoprocessorReply::StoredUserInfo *)", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 16))(a1 + 176);
  *(unsigned char *)(a1 + 593) = *(_DWORD *)(a1 + 284);
  *(unsigned char *)(a1 + 594) = *(_DWORD *)(a1 + 288);
  *(void *)(a1 + 600) = *(void *)v3;
  *(_DWORD *)(a1 + 608) = *(_DWORD *)(a1 + 300);
  *(_OWORD *)(v3 + 324) = *(_OWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 632) = *(_DWORD *)(a1 + 320);
  *(unsigned char *)(a1 + 595) = *(_DWORD *)(a1 + 324);
  *(_DWORD *)(a1 + 612) = *(_DWORD *)(a1 + 328);
  *(unsigned char *)(a1 + 596) = *(unsigned char *)(a1 + 332);
  *(_DWORD *)(a1 + 644) = *(_DWORD *)(a1 + 336);
  *(unsigned char *)(a1 + 597) = *(unsigned char *)(a1 + 340) | (2 * *(unsigned char *)(a1 + 341)) | (4 * *(unsigned char *)(a1 + 342));
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 24))(a1 + 176);
  return sub_1000E01AC(a1, 4, v4, 60);
}

void sub_1010D6DDC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010D6DE8(uint64_t a1, uint64_t a2)
{
  return sub_1010D68A0(a1 - 152, a2);
}

void sub_1010D6DF0(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352)
     + ((double)*(unint64_t *)(a2 + 9) - (double)*(unint64_t *)(a2 + 1)) / 1000000.0;
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  double v5 = v4 + *(double *)(a1 + 664);
  int v6 = *(_DWORD *)(a2 + 17);
  char v8 = *(double **)(a1 + 480);
  unint64_t v7 = *(void *)(a1 + 488);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = *(double **)(a1 + 472);
    uint64_t v11 = ((char *)v8 - (char *)v10) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      double v15 = (char *)sub_1000C571C(a1 + 488, v14);
      int v10 = *(double **)(a1 + 472);
      char v8 = *(double **)(a1 + 480);
    }
    else
    {
      double v15 = 0;
    }
    double v16 = &v15[16 * v11];
    *(double *)double v16 = v5;
    double v17 = &v15[16 * v14];
    *((_DWORD *)v16 + 2) = v6;
    *((_DWORD *)v16 + 3) = 0;
    int v9 = (double *)(v16 + 16);
    if (v8 != v10)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v8 - 1);
        v16 -= 16;
        v8 -= 2;
      }
      while (v8 != v10);
      int v10 = *(double **)(a1 + 472);
    }
    *(void *)(a1 + 472) = v16;
    *(void *)(a1 + 480) = v9;
    *(void *)(a1 + 488) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    double *v8 = v5;
    int v9 = v8 + 2;
    *((_DWORD *)v8 + 2) = v6;
    *((_DWORD *)v8 + 3) = 0;
  }
  *(void *)(a1 + 480) = v9;
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_102310510);
  }
  double v18 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 134218240;
    double v21 = v5;
    __int16 v22 = 1024;
    int v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Coarse elevation,startTime,%f,ascended,%d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_102310510);
    }
    int v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitCoarseElevation(const CMMotionCoprocessorReply::CoarseElevation *)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
}

void sub_1010D70E0(uint64_t a1, uint64_t a2)
{
}

void sub_1010D70E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = "<no name>";
  if (*(unsigned char *)(a2 + 1) && !*(unsigned char *)(a2 + 111)) {
    uint64_t v3 = (const char *)(a2 + 1);
  }
  *(_DWORD *)(a1 + 672) = *(_DWORD *)(a2 + 128);
  id v5 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a2 + 112];
  if (qword_102418FE0 != -1) {
    dispatch_once(&qword_102418FE0, &stru_102310410);
  }
  int v6 = qword_102418FE8;
  if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 136315394;
    id v9 = [[[v5 UUIDString] UTF8String];
    __int16 v10 = 2080;
    uint64_t v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "uuid,%s,name,%s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FE0 != -1) {
      dispatch_once(&qword_102418FE0, &stru_102310410);
    }
    [objc_msgSend(v5, "UUIDString") UTF8String];
    unint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitFirmwareVersion(const CMMotionCoprocessorReply::FirmwareVersion *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_1010D7324(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1010D732C(uint64_t a1, uint64_t a2)
{
  memset((char *)&v18[1] + 12, 0, 35);
  long long v3 = *(_OWORD *)(a2 + 113);
  long long v16 = *(_OWORD *)(a2 + 97);
  long long v17 = v3;
  v18[0] = *(_OWORD *)(a2 + 129);
  *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)(a2 + 141);
  long long v4 = *(_OWORD *)(a2 + 49);
  long long v12 = *(_OWORD *)(a2 + 33);
  long long v13 = v4;
  long long v5 = *(_OWORD *)(a2 + 81);
  long long v14 = *(_OWORD *)(a2 + 65);
  long long v15 = v5;
  long long v6 = *(_OWORD *)(a2 + 17);
  long long v10 = *(_OWORD *)(a2 + 1);
  long long v11 = v6;
  double v7 = *(double *)(a1 + 352);
  double v8 = v7;
  if (*(unsigned char *)(a1 + 653))
  {
    double v8 = *(double *)(a1 + 352);
    if (!*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      double v8 = *(double *)(a1 + 352);
    }
  }
  *(double *)((char *)&v18[1] + 14) = v7 + *(double *)(a1 + 664);
  *(double *)((char *)&v18[2] + 6) = *(double *)((char *)&v18[1] + 14)
                                   + (double)(unint64_t)(*(void *)((char *)&v10 + 4)
                                                              - *(void *)((char *)&v11 + 3))
                                   / -1000000.0;
  *(double *)((char *)&v18[2] + 14) = v8;
  uint64_t result = sub_1000E01AC(a1, 10, (uint64_t)&v10, 191);
  if (HIBYTE(v10))
  {
    if (BYTE13(v10)) {
      return sub_1000E01AC(a1, 11, (uint64_t)&v10, 191);
    }
  }
  return result;
}

uint64_t sub_1010D7448(uint64_t a1, uint64_t a2)
{
  return sub_1010D732C(a1 - 152, a2);
}

uint64_t sub_1010D7450(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  *(double *)double v18 = v4;
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  double v5 = v4 + *(double *)(a1 + 664);
  *(double *)&v18[1] = v5;
  int v6 = *(unsigned __int8 *)(a2 + 1);
  char v19 = *(unsigned char *)(a2 + 1);
  uint64_t v7 = *(char *)(a2 + 2);
  unsigned int v8 = *(unsigned __int8 *)(a2 + 2);
  char v20 = *(unsigned char *)(a2 + 2);
  int v9 = *(unsigned __int8 *)(a2 + 3);
  char v21 = *(unsigned char *)(a2 + 3);
  int v10 = *(unsigned __int8 *)(a2 + 4);
  char v22 = *(unsigned char *)(a2 + 4);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  long long v11 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    long long v12 = "Undefined";
    long long v13 = "Above 30mph";
    if (v6 != 16) {
      long long v13 = "Undefined";
    }
    if (v6 == 1) {
      long long v13 = "Below 30mph";
    }
    if (v8 <= 5) {
      long long v12 = off_102310760[v7];
    }
    *(_DWORD *)int buf = 134219778;
    double v40 = v4;
    __int16 v41 = 2048;
    double v42 = v5;
    __int16 v43 = 256;
    char v44 = v6;
    __int16 v45 = 256;
    char v46 = v8;
    __int16 v47 = 1024;
    int v48 = v9;
    __int16 v49 = 1024;
    int v50 = v10;
    __int16 v51 = 2080;
    int v52 = v13;
    __int16 v53 = 2080;
    int v54 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Baseband speed,timestamp,%f,startTime,%f,speedThreshold,0x%02hhx,speedRange,0x%02hhx,scaledValue,0x%02x,reserved,0x%02x,speedThresholdStr,%s,speedRangeStr,%s", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    long long v15 = "Undefined";
    long long v16 = "Above 30mph";
    if (v6 != 16) {
      long long v16 = "Undefined";
    }
    if (v6 == 1) {
      long long v16 = "Below 30mph";
    }
    if (v8 <= 5) {
      long long v15 = off_102310760[v7];
    }
    int v23 = 134219778;
    double v24 = v4;
    __int16 v25 = 2048;
    double v26 = v5;
    __int16 v27 = 256;
    char v28 = v6;
    __int16 v29 = 256;
    char v30 = v8;
    __int16 v31 = 1024;
    int v32 = v9;
    __int16 v33 = 1024;
    int v34 = v10;
    __int16 v35 = 2080;
    double v36 = v16;
    __int16 v37 = 2080;
    double v38 = v15;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitBasebandSpeed(const CMMotionCoprocessorReply::BasebandSpeed *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  return sub_1000E01AC(a1, 12, (uint64_t)v18, 224);
}

uint64_t sub_1010D778C(uint64_t a1, uint64_t a2)
{
  return sub_1010D7450(a1 - 152, a2);
}

uint64_t sub_1010D7794(uint64_t a1)
{
  double v2 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  double v3 = *(double *)(a1 + 664);
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1023105B0);
  }
  double v4 = v2 + v3;
  double v5 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134217984;
    double v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "received SkiAlarm,timestamp,%f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1023105B0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSkiAlarm(const CMMotionCoprocessorReply::SkiAlarm *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t result = *(void *)(a1 + 1296);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1010D7984(uint64_t a1)
{
  return sub_1010D7794(a1 - 152);
}

uint64_t sub_1010D798C(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v5 = v4;
  if (*(unsigned char *)(a1 + 653))
  {
    double v5 = *(double *)(a1 + 352);
    if (!*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      double v5 = *(double *)(a1 + 352);
    }
  }
  v7[0] = v4 + *(double *)(a1 + 664);
  v7[1] = v5;
  int8x16_t v8 = vextq_s8(*(int8x16_t *)(a2 + 5), *(int8x16_t *)(a2 + 5), 8uLL);
  int v9 = *(_DWORD *)(a2 + 1);
  uint64_t v10 = *(void *)(a2 + 21);
  return sub_1000E01AC(a1, 22, (uint64_t)v7, 44);
}

uint64_t sub_1010D7A28(uint64_t a1, uint64_t a2)
{
  return sub_1010D798C(a1 - 152, a2);
}

uint64_t sub_1010D7A30(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v5 = v4;
  if (*(unsigned char *)(a1 + 653))
  {
    double v5 = *(double *)(a1 + 352);
    if (!*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      double v5 = *(double *)(a1 + 352);
    }
  }
  v7[0] = v4 + *(double *)(a1 + 664);
  v7[1] = v5;
  char v8 = 1;
  uint64_t v9 = *(void *)(a2 + 1);
  int v10 = *(_DWORD *)(a2 + 9);
  int v11 = 0;
  uint64_t v12 = *(void *)(a2 + 13);
  return sub_1000E01AC(a1, 16, (uint64_t)v7, 41);
}

uint64_t sub_1010D7AD4(uint64_t a1, uint64_t a2)
{
  return sub_1010D7A30(a1 - 152, a2);
}

uint64_t sub_1010D7ADC(uint64_t a1, uint64_t a2)
{
  double v4 = (_DWORD *)(a2 + 9);
  for (uint64_t i = 15; i != -1; --i)
  {
    memset(v10, 0, 41);
    double v6 = *(double *)(a1 + 352);
    double v7 = v6;
    if (*(unsigned char *)(a1 + 653))
    {
      double v7 = *(double *)(a1 + 352);
      if (!*(unsigned char *)(a1 + 652))
      {
        sub_1010CE1FC(a1);
        *(unsigned char *)(a1 + 653) = 0;
        double v7 = *(double *)(a1 + 352);
      }
    }
    *(double *)int v10 = v6 + *(double *)(a1 + 664);
    *((double *)v10 + 1) = v7;
    LOBYTE(v10[1]) = 0;
    *(void *)((char *)&v10[1] + 1) = *((void *)v4 - 1);
    unsigned int v8 = *v4;
    v4 += 3;
    *(void *)((char *)&v10[1] + 9) = v8;
    *(void *)((char *)&v10[2] + 1) = *(void *)(a2 + 193)
                                     - ((i * (unint64_t)*(unsigned int *)(a2 + 201)) >> 4);
    uint64_t result = sub_1000E01AC(a1, 15, (uint64_t)v10, 41);
  }
  return result;
}

uint64_t sub_1010D7BB0(uint64_t a1, uint64_t a2)
{
  return sub_1010D7ADC(a1 - 152, a2);
}

uint64_t sub_1010D7BB8(uint64_t a1, uint64_t a2)
{
  double v4 = (unsigned int *)(a2 + 9);
  for (uint64_t i = 14; i != -1; --i)
  {
    memset(v11, 0, 41);
    double v6 = *(double *)(a1 + 352);
    double v7 = v6;
    if (*(unsigned char *)(a1 + 653))
    {
      double v7 = *(double *)(a1 + 352);
      if (!*(unsigned char *)(a1 + 652))
      {
        sub_1010CE1FC(a1);
        *(unsigned char *)(a1 + 653) = 0;
        double v7 = *(double *)(a1 + 352);
      }
    }
    *(double *)int v11 = v6 + *(double *)(a1 + 664);
    *((double *)v11 + 1) = v7;
    LOBYTE(v11[1]) = 3;
    *(void *)((char *)&v11[1] + 1) = *((void *)v4 - 1);
    *(void *)((char *)&v11[1] + 9) = *v4;
    *(void *)((char *)&v11[2] + 1) = *(void *)(a2 + 181) - i * (unint64_t)*(unsigned int *)(a2 + 189) / 0xF;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024852A0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_1024852A0))
    {
      qword_102485298 = *(void *)((char *)&v11[2] + 1);
      __cxa_guard_release(&qword_1024852A0);
    }
    if (!(_BYTE)qword_102485290++)
    {
      if (qword_1024190F0 != -1) {
        dispatch_once(&qword_1024190F0, &stru_1023105D0);
      }
      uint64_t v9 = qword_1024190F8;
      if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)int buf = 68290562;
        int v13 = 0;
        __int16 v14 = 2082;
        long long v15 = "";
        __int16 v16 = 2050;
        double v17 = *(float *)((char *)&v11[1] + 1);
        __int16 v18 = 2050;
        double v19 = *(float *)((char *)&v11[1] + 5);
        __int16 v20 = 2050;
        double v21 = *(float *)((char *)&v11[1] + 9);
        __int16 v22 = 2050;
        uint64_t v23 = *(void *)((char *)&v11[2] + 1);
        __int16 v24 = 2050;
        uint64_t v25 = *(void *)((char *)&v11[2] + 1) - qword_102485298;
        __int16 v26 = 2050;
        uint64_t v27 = qword_102485290;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"visitHgal notifying clients (sampled)\", \"x\":\"%{public}f\", \"y\":\"%{public}f\", \"z\":\"%{public}f\", \"ts\":%{public}llu, \"dts\":%{public}llu, \"index\":%{public}llu}", buf, 0x4Eu);
      }
    }
    qword_102485298 = *(void *)((char *)&v11[2] + 1);
    uint64_t result = sub_1000E01AC(a1, 19, (uint64_t)v11, 41);
    v4 += 3;
  }
  return result;
}

uint64_t sub_1010D7E28(uint64_t a1, uint64_t a2)
{
  return sub_1010D7BB8(a1 - 152, a2);
}

uint64_t sub_1010D7E30(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  double v5 = v4;
  if (*(unsigned char *)(a1 + 653))
  {
    double v5 = *(double *)(a1 + 352);
    if (!*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      double v5 = *(double *)(a1 + 352);
    }
  }
  v7[0] = v4 + *(double *)(a1 + 664);
  v7[1] = v5;
  char v8 = 2;
  long long v9 = *(_OWORD *)(a2 + 1);
  uint64_t v10 = *(void *)(a2 + 17);
  return sub_1000E01AC(a1, 17, (uint64_t)v7, 41);
}

uint64_t sub_1010D7EC8(uint64_t a1, uint64_t a2)
{
  return sub_1010D7E30(a1 - 152, a2);
}

uint64_t sub_1010D7ED0(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 17);
  long long v4 = *(_OWORD *)(a2 + 49);
  unsigned char v8[2] = *(_OWORD *)(a2 + 33);
  void v8[3] = v4;
  int v9 = *(_DWORD *)(a2 + 65);
  v8[0] = *(_OWORD *)(a2 + 1);
  v8[1] = v3;
  double v5 = *(double *)(a1 + 352);
  double v6 = v5;
  if (*(unsigned char *)(a1 + 653))
  {
    double v6 = *(double *)(a1 + 352);
    if (!*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      double v6 = *(double *)(a1 + 352);
    }
  }
  double v10 = v5 + *(double *)(a1 + 664);
  double v11 = v6;
  return sub_1000E01AC(a1, 18, (uint64_t)v8, 84);
}

uint64_t sub_1010D7F70(uint64_t a1, uint64_t a2)
{
  return sub_1010D7ED0(a1 - 152, a2);
}

uint64_t sub_1010D7F78(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)double v6 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)&v6[12] = *(_OWORD *)(a2 + 21);
  double v3 = *(double *)(a1 + 352);
  double v4 = v3;
  if (*(unsigned char *)(a1 + 653))
  {
    double v4 = *(double *)(a1 + 352);
    if (!*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      double v4 = *(double *)(a1 + 352);
    }
  }
  double v7 = v3 + *(double *)(a1 + 664);
  double v8 = v4;
  return sub_1000E01AC(a1, 23, (uint64_t)v6, 44);
}

uint64_t sub_1010D8034(uint64_t a1, uint64_t a2)
{
  return sub_1010D7F78(a1 - 152, a2);
}

uint64_t sub_1010D803C(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 25);
  v7[0] = *(_OWORD *)(a2 + 9);
  v7[1] = v3;
  int v8 = *(_DWORD *)(a2 + 41);
  double v4 = *(double *)(a1 + 352);
  double v5 = v4;
  if (*(unsigned char *)(a1 + 653))
  {
    double v5 = *(double *)(a1 + 352);
    if (!*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      double v5 = *(double *)(a1 + 352);
    }
  }
  double v9 = v4 + *(double *)(a1 + 664);
  double v10 = v5;
  return sub_1000E01AC(a1, 24, (uint64_t)v7, 52);
}

uint64_t sub_1010D80FC(uint64_t a1, uint64_t a2)
{
  return sub_1010D803C(a1 - 152, a2);
}

uint64_t sub_1010D8104(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 57);
  long long v4 = *(_OWORD *)(a2 + 89);
  v9[4] = *(_OWORD *)(a2 + 73);
  v9[5] = v4;
  uint64_t v10 = *(void *)(a2 + 105);
  long long v5 = *(_OWORD *)(a2 + 25);
  v9[0] = *(_OWORD *)(a2 + 9);
  v9[1] = v5;
  _DWORD v9[2] = *(_OWORD *)(a2 + 41);
  v9[3] = v3;
  double v6 = *(double *)(a1 + 352);
  double v7 = v6;
  if (*(unsigned char *)(a1 + 653))
  {
    double v7 = *(double *)(a1 + 352);
    if (!*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      double v7 = *(double *)(a1 + 352);
    }
  }
  double v11 = v6 + *(double *)(a1 + 664);
  double v12 = v7;
  return sub_1000E01AC(a1, 25, (uint64_t)v9, 120);
}

uint64_t sub_1010D81AC(uint64_t a1, uint64_t a2)
{
  return sub_1010D8104(a1 - 152, a2);
}

uint64_t sub_1010D81B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 9);
  int v4 = *(unsigned __int8 *)(a2 + 17);
  uint64_t v5 = *(void *)(a2 + 18);
  float v6 = *(float *)(a2 + 26);
  float v7 = *(float *)(a2 + 30);
  uint64_t v8 = *(void *)(a2 + 34);
  uint64_t v9 = *(void *)(a2 + 42);
  float v10 = *(float *)(a2 + 50);
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1023105D0);
  }
  double v11 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(void *)&double v14 = 68291075;
    *(_WORD *)long long v15 = 2082;
    *(void *)&_DWORD v15[2] = "";
    *(_WORD *)&v15[10] = 2049;
    *(void *)&v15[12] = v3;
    LOWORD(v16) = 1025;
    *(_DWORD *)((char *)&v16 + 2) = v4;
    HIWORD(v16) = 2049;
    uint64_t v17 = v5;
    *(_WORD *)__int16 v18 = 2049;
    *(double *)&void v18[2] = v6;
    *(_WORD *)&v18[10] = 2049;
    double v19 = v7;
    __int16 v20 = 2049;
    uint64_t v21 = v8;
    __int16 v22 = 2049;
    uint64_t v23 = v9;
    __int16 v24 = 2049;
    double v25 = v10;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Fall distance event record\", \"fFallTimestamp\":%{private}llu, \"fOperatingMode\":%{private}u, \"fPeakTimestamp\":%{private}llu, \"fBeforeImpactElevation\":\"%{private}.4f\", \"fAfterImpactElevation\":\"%{private}.4f\", \"fBeforeImpactStaticPeriodStartTimestamp\":%{private}llu, \"fAfterImpactStaticPeriodStartTimestamp\":%{private}llu, \"fFallDistance\":\"%{private}.4f\"}", (uint8_t *)&v14, 0x5Eu);
  }
  double v12 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  double v14 = v12 + *(double *)(a1 + 664);
  *(void *)long long v15 = v3;
  *(void *)&v15[8] = v5;
  *(_DWORD *)&v15[16] = v4;
  unint64_t v16 = __PAIR64__(LODWORD(v7), LODWORD(v6));
  uint64_t v17 = v8;
  *(void *)__int16 v18 = v9;
  *(float *)&v18[8] = v10;
  return sub_1000E01AC(a1, 26, (uint64_t)&v14, 56);
}

uint64_t sub_1010D8384(uint64_t a1, uint64_t a2)
{
  return sub_1010D81B4(a1 - 152, a2);
}

uint64_t sub_1010D838C(uint64_t a1)
{
  if (qword_1024190F0 != -1) {
    dispatch_once(&qword_1024190F0, &stru_1023105D0);
  }
  double v2 = qword_1024190F8;
  if (os_log_type_enabled((os_log_t)qword_1024190F8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLMotionCoprocessor::visitHighResolutionImpactDataStart", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190F0 != -1) {
      dispatch_once(&qword_1024190F0, &stru_1023105D0);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitHighResolutionImpactDataStart(const CMMotionCoprocessorReply::HighResolutionImpactDataStart *)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  *(_OWORD *)int buf = 0u;
  memset(v6, 0, sizeof(v6));
  return sub_1000E01AC(a1, 14, (uint64_t)buf, 41);
}

uint64_t sub_1010D8540(uint64_t a1)
{
  return sub_1010D838C(a1 - 152);
}

uint64_t sub_1010D8548(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 859))
  {
    uint64_t v3 = result;
    double v4 = *(double *)(result + 352)
       + ((double)*(unint64_t *)(a2 + 8) - (double)*(unint64_t *)(a2 + 16)) / 1000000.0;
    if (*(unsigned char *)(result + 653))
    {
      if (!*(unsigned char *)(result + 652))
      {
        sub_1010CE1FC(result);
        *(unsigned char *)(v3 + 653) = 0;
      }
    }
    double v5 = v4 + *(double *)(v3 + 664);
    long long v6 = *(_OWORD *)(a2 + 48);
    unsigned char v8[2] = *(_OWORD *)(a2 + 32);
    void v8[3] = v6;
    int v9 = *(_DWORD *)(a2 + 64);
    int v10 = 0;
    long long v7 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v7;
    double v11 = v5;
    return sub_1000E01AC(v3, 27, (uint64_t)v8, 80);
  }
  return result;
}

uint64_t sub_1010D85FC(uint64_t a1, uint64_t a2)
{
  return sub_1010D8548(a1 - 152, a2);
}

void sub_1010D8604(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 859)) {
    return;
  }
  double v4 = (double)*(unint64_t *)(a2 + 1);
  unint64_t v5 = *(void *)(a2 + 17);
  double v6 = (double)v5;
  double v7 = *(double *)(a1 + 352);
  if (!*(unsigned char *)(a1 + 653))
  {
    char v8 = 1;
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 652))
  {
    char v8 = 0;
LABEL_6:
    double v9 = (double)v5;
    double v10 = *(double *)(a1 + 352);
    goto LABEL_8;
  }
  sub_1010CE1FC(a1);
  *(unsigned char *)(a1 + 653) = 0;
  double v10 = *(double *)(a1 + 352);
  double v9 = (double)*(unint64_t *)(a2 + 17);
  char v8 = 1;
LABEL_8:
  double v11 = v4 - v6;
  double v12 = *(double *)(a1 + 664);
  double v13 = (double)*(unint64_t *)(a2 + 9) - v9;
  double v14 = v12;
  if ((v8 & 1) == 0)
  {
    double v14 = *(double *)(a1 + 664);
    if (!*(unsigned char *)(a1 + 652))
    {
      sub_1010CE1FC(a1);
      *(unsigned char *)(a1 + 653) = 0;
      double v14 = *(double *)(a1 + 664);
    }
  }
  double v15 = v11 / 1000000.0;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  double v16 = v7 + v15;
  double v17 = v10 + v13 / 1000000.0;
  __int16 v18 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    uint64_t v19 = *(void *)(a2 + 17);
    uint64_t v20 = *(void *)(a2 + 1);
    uint64_t v21 = *(void *)(a2 + 9);
    double v22 = *(float *)(a2 + 25);
    double v23 = *(float *)(a2 + 29);
    double v24 = *(float *)(a2 + 33);
    double v25 = *(float *)(a2 + 37);
    int v26 = *(unsigned __int8 *)(a2 + 41);
    int v27 = *(unsigned __int8 *)(a2 + 42);
    *(_DWORD *)int buf = 134351104;
    *(void *)&uint8_t buf[4] = v19;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v20;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(void *)&uint8_t buf[24] = v21;
    *(_WORD *)__int16 v33 = 2050;
    *(double *)&v33[2] = v22;
    *(_WORD *)&v33[10] = 2050;
    *(double *)&unsigned char v33[12] = v23;
    *(_WORD *)&v33[20] = 2050;
    *(double *)&v33[22] = v24;
    __int16 v34 = 2050;
    double v35 = v25;
    __int16 v36 = 1026;
    int v37 = v26;
    __int16 v38 = 1026;
    int v39 = v27;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "visitFlightSegment,now,%{public}llu,start,%{public}llu,end,%{public}llu,rate,%{public}f,probability, %{public}f, elevationChange, %{public}f, regressionMad, %{public}f, isValid, %{public}d, hasAtLeast2mElevChange, %{public}d", buf, 0x54u);
  }
  double v28 = v16 + v12;
  double v29 = v17 + v14;
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    __int16 v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitFlightSegment(const CMMotionCoprocessorReply::FlightSegment *)", "%s\n", v31);
    if (v31 != buf) {
      free(v31);
    }
  }
  *(void *)&v33[16] = 0;
  *(double *)int buf = v28;
  *(double *)&uint8_t buf[8] = v29;
  long long v30 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)(a2 + 1);
  *(_OWORD *)__int16 v33 = v30;
  *(_WORD *)&v33[16] = *(_WORD *)(a2 + 41);
  if (v33[16]) {
    sub_1000E01AC(a1, 28, (uint64_t)buf, 56);
  }
}

void sub_1010D89C4(uint64_t a1, uint64_t a2)
{
}

void sub_1010D89DC(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  double v5 = v4 + *(double *)(a1 + 664);
  double v6 = *(float *)(a2 + 4);
  double v7 = *(float *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 568);
  double v9 = *(double **)(a1 + 552);
  unint64_t v10 = *(void *)(a1 + 560);
  if ((unint64_t)v9 >= v10)
  {
    double v12 = *(double **)(a1 + 544);
    uint64_t v13 = ((char *)v9 - (char *)v12) >> 5;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 59) {
      sub_1001D7FD4();
    }
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 4 > v14) {
      unint64_t v14 = v15 >> 4;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v16 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      double v17 = (char *)sub_1001D9EDC(a1 + 560, v16);
      double v9 = *(double **)(a1 + 552);
      double v12 = *(double **)(a1 + 544);
    }
    else
    {
      double v17 = 0;
    }
    __int16 v18 = (double *)&v17[32 * v13];
    *__int16 v18 = v5;
    v18[1] = v6;
    uint64_t v19 = &v17[32 * v16];
    void v18[2] = v7;
    *((void *)v18 + 3) = v8;
    double v11 = v18 + 4;
    if (v9 != v12)
    {
      do
      {
        long long v20 = *((_OWORD *)v9 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v9 - 2);
        *((_OWORD *)v18 - 1) = v20;
        v18 -= 4;
        v9 -= 4;
      }
      while (v9 != v12);
      double v12 = *(double **)(a1 + 544);
    }
    *(void *)(a1 + 544) = v18;
    *(void *)(a1 + 552) = v11;
    *(void *)(a1 + 560) = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *double v9 = v5;
    v9[1] = v6;
    double v11 = v9 + 4;
    _DWORD v9[2] = v7;
    *((void *)v9 + 3) = v8;
  }
  *(void *)(a1 + 552) = v11;
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102310470);
  }
  uint64_t v21 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *(void *)(a1 + 352);
    double v23 = *(float *)(a2 + 4);
    double v24 = *(float *)(a2 + 8);
    uint64_t v25 = *(void *)(a1 + 568);
    *(_DWORD *)int buf = 134350080;
    uint64_t v28 = v22;
    __int16 v29 = 2050;
    double v30 = v23;
    __int16 v31 = 2050;
    double v32 = v24;
    __int16 v33 = 2050;
    uint64_t v34 = v25;
    __int16 v35 = 2050;
    double v36 = v5;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "timestamp,%{public}.3f,straightness,%{public}.3f,confidence,%{public}.3f,startTimestamp,%{public}.3f,stopTimestamp,%{public}.3f", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102310470);
    }
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitPathStraightness(const CMMotionCoprocessorReply::PathStraightness *)", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
}

void sub_1010D8D1C(uint64_t a1, uint64_t a2)
{
}

void sub_1010D8D24(uint64_t a1, _OWORD *a2)
{
}

void sub_1010D8D30(uint64_t a1, _OWORD *a2)
{
}

uint64_t sub_1010D8D3C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return sub_1000E01AC(a1, 29, (uint64_t)&v3, 8);
}

uint64_t sub_1010D8D70(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  return sub_1000E01AC(a1 - 152, 29, (uint64_t)&v3, 8);
}

uint64_t sub_1010D8DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a2 + 80;
  do
  {
    unint64_t v5 = *(void *)(v4 + 8 * v3);
    if (v5 <= qword_1024852A8) {
      unint64_t v5 = qword_1024852A8 + 1000;
    }
    qword_1024852A8 = v5;
    unint64_t v7 = v5;
    uint64_t v8 = 0;
    LODWORD(v8) = sqrtf(*(float *)(v4 + 4 * v3 - 76));
    uint64_t result = sub_1000E01AC(a1, 34, (uint64_t)&v7, 16);
    ++v3;
  }
  while (v3 != 19);
  return result;
}

uint64_t sub_1010D8E30(uint64_t a1, uint64_t a2)
{
  return sub_1010D8DA8(a1 - 152, a2);
}

void sub_1010D8E38(uint64_t a1, long long *a2)
{
  uint64_t v3 = a1 + 1768;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a1 + 1796) = *(long long *)((char *)a2 + 28);
  *(_OWORD *)(a1 + 1768) = v4;
  *(_OWORD *)(a1 + 1784) = v5;
  *(unsigned char *)(a1 + 1812) = 1;
  double v6 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  double v7 = *(double *)(a1 + 664);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  double v8 = v6 + v7;
  double v9 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int8 *)(a1 + 1777);
    int v11 = *(unsigned __int8 *)(a1 + 1778);
    int v12 = *(unsigned __int8 *)(a1 + 1799);
    double v13 = *(float *)(a1 + 1800);
    double v14 = *(float *)(a1 + 1783);
    double v15 = *(float *)(a1 + 1787);
    double v16 = *(float *)(a1 + 1804);
    double v17 = *(float *)(a1 + 1791);
    double v18 = *(float *)(a1 + 1779);
    double v19 = *(float *)(a1 + 1808);
    *(_DWORD *)int buf = 134351616;
    double v24 = v8;
    __int16 v25 = 1026;
    int v26 = v10;
    __int16 v27 = 1026;
    int v28 = v11;
    __int16 v29 = 1026;
    int v30 = v12;
    __int16 v31 = 2050;
    double v32 = v13;
    __int16 v33 = 2050;
    double v34 = v14;
    __int16 v35 = 2050;
    double v36 = v15;
    __int16 v37 = 2050;
    double v38 = v16;
    __int16 v39 = 2050;
    double v40 = v17;
    __int16 v41 = 2050;
    double v42 = v18;
    __int16 v43 = 2050;
    double v44 = v19;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "saving submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{public}u,surfPressure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,correlation,%{public}f,slope,%{public}f,depth,%{public}f", buf, 0x64u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSubmersionState(const CMMotionCoprocessorReply::SubmersionState *)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  if (*(unsigned char *)(a1 + 859) || *(unsigned char *)(a1 + 1756) || *(unsigned char *)(a1 + 1755))
  {
    *(unsigned char *)(a1 + 1756) = 0;
    sub_1010D92BC(a1, v3);
    *(unsigned char *)(a1 + 1812) = 0;
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    long long v20 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "fitness tracking off, not sending the submersion state from AOP to AP", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSubmersionState(const CMMotionCoprocessorReply::SubmersionState *)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

void sub_1010D92BC(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  double v5 = *(double *)(a1 + 664);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  double v6 = v4 + v5;
  double v7 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int8 *)(a2 + 9);
    int v9 = *(unsigned __int8 *)(a2 + 10);
    int v10 = *(unsigned __int8 *)(a2 + 31);
    double v11 = *(float *)(a2 + 32);
    double v12 = *(float *)(a2 + 15);
    double v13 = *(float *)(a2 + 19);
    double v14 = *(float *)(a2 + 36);
    double v15 = *(float *)(a2 + 23);
    double v16 = *(float *)(a2 + 11);
    double v17 = *(float *)(a2 + 40);
    *(_DWORD *)int buf = 134351616;
    double v94 = v6;
    __int16 v95 = 1026;
    *(_DWORD *)int v96 = v8;
    *(_WORD *)&v96[4] = 1026;
    *(_DWORD *)&v96[6] = v9;
    LOWORD(v97) = 1026;
    *(_DWORD *)((char *)&v97 + 2) = v10;
    HIWORD(v97) = 2050;
    *(double *)int v98 = v11;
    *(_WORD *)&v98[8] = 2050;
    double v99 = v12;
    __int16 v100 = 2050;
    double v101 = v13;
    __int16 v102 = 2050;
    double v103 = v14;
    __int16 v104 = 2050;
    double v105 = v15;
    __int16 v106 = 2050;
    double v107 = v16;
    __int16 v108 = 2050;
    double v109 = v17;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "received submersion state from the AOP,timestamp,%{public}f,state,%{public}u,model,%{public}u,zoh,%{public}u,surfPressure,%{public}f,minMaxP,%{public}f,maxAccel,%{public}f,touchTimeDelta,%{public}f,correlation,%{public}f,slope,%{public}f,depth,%{public}f", buf, 0x64u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    int v28 = *(unsigned __int8 *)(a2 + 9);
    int v29 = *(unsigned __int8 *)(a2 + 10);
    int v30 = *(unsigned __int8 *)(a2 + 31);
    double v31 = *(float *)(a2 + 32);
    double v32 = *(float *)(a2 + 15);
    double v33 = *(float *)(a2 + 19);
    double v34 = *(float *)(a2 + 36);
    double v35 = *(float *)(a2 + 23);
    double v36 = *(float *)(a2 + 11);
    double v37 = *(float *)(a2 + 40);
    int v76 = 134351616;
    double v77 = v6;
    __int16 v78 = 1026;
    *(_DWORD *)uint64_t v79 = v28;
    *(_WORD *)&v79[4] = 1026;
    *(_DWORD *)&v79[6] = v29;
    LOWORD(v80) = 1026;
    *(_DWORD *)((char *)&v80 + 2) = v30;
    HIWORD(v80) = 2050;
    *(double *)uint64_t v81 = v31;
    *(_WORD *)&v81[8] = 2050;
    double v82 = v32;
    __int16 v83 = 2050;
    double v84 = v33;
    __int16 v85 = 2050;
    double v86 = v34;
    __int16 v87 = 2050;
    double v88 = v35;
    __int16 v89 = 2050;
    double v90 = v36;
    __int16 v91 = 2050;
    double v92 = v37;
    double v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendSubmersionStateAndCollectAnalytics(const CMMotionCoprocessorReply::SubmersionState &)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  uint64_t v75 = 0;
  double v74 = v6;
  LOBYTE(v75) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 1755) = v75 > 1u;
  *(_DWORD *)(a1 + 1760) = *(unsigned __int8 *)(a2 + 10);
  float v18 = *(float *)(a2 + 40);
  *(float *)(a1 + 1764) = v18;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  long long __p = 0;
  sub_10010F834(&__p, (const void *)qword_102485228, qword_102485230, (qword_102485230 - qword_102485228) >> 2);
  sub_1003B1E08((uint64_t)&__p, &v72, v18);
  if (__p)
  {
    uint64_t v70 = __p;
    operator delete(__p);
  }
  float v19 = *(float *)(a2 + 19);
  double v65 = 0;
  uint64_t v66 = 0;
  double v64 = 0;
  sub_10010F834(&v64, (const void *)qword_102485240, qword_102485248, (qword_102485248 - qword_102485240) >> 2);
  sub_1003B1E08((uint64_t)&v64, &v67, v19);
  if (v64)
  {
    double v65 = v64;
    operator delete(v64);
  }
  float v20 = *(float *)(a2 + 15);
  int v60 = 0;
  uint64_t v61 = 0;
  __int16 v59 = 0;
  sub_10010F834(&v59, (const void *)qword_102485258, qword_102485260, (qword_102485260 - qword_102485258) >> 2);
  sub_1003B1E08((uint64_t)&v59, &v62, v20);
  if (v59)
  {
    int v60 = v59;
    operator delete(v59);
  }
  float v21 = *(float *)(a2 + 36);
  __int16 v55 = 0;
  uint64_t v56 = 0;
  int v54 = 0;
  sub_10010F834(&v54, (const void *)qword_102485270, qword_102485278, (qword_102485278 - qword_102485270) >> 2);
  sub_1003B1E08((uint64_t)&v54, &v57, v21);
  if (v54)
  {
    __int16 v55 = v54;
    operator delete(v54);
  }
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  uint64_t v22 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    double v23 = &v72;
    if (v73 < 0) {
      double v23 = (long long *)v72;
    }
    double v24 = &v67;
    if (v68 < 0) {
      double v24 = (long long *)v67;
    }
    __int16 v25 = &v62;
    if (v63 < 0) {
      __int16 v25 = (long long *)v62;
    }
    int v26 = &v57;
    if (v58 < 0) {
      int v26 = (long long *)v57;
    }
    *(_DWORD *)int buf = 136315906;
    double v94 = *(double *)&v23;
    __int16 v95 = 2080;
    *(void *)int v96 = v24;
    *(_WORD *)&v96[8] = 2080;
    uint64_t v97 = v25;
    *(_WORD *)int v98 = 2080;
    *(void *)&v98[2] = v26;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Analytics submersion,depth,%s,maxAccel,%s,maxMinPressure,%s,touchDelay,%s", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    __int16 v39 = &v72;
    if (v73 < 0) {
      __int16 v39 = (long long *)v72;
    }
    double v40 = &v67;
    if (v68 < 0) {
      double v40 = (long long *)v67;
    }
    __int16 v41 = &v62;
    if (v63 < 0) {
      __int16 v41 = (long long *)v62;
    }
    double v42 = &v57;
    if (v58 < 0) {
      double v42 = (long long *)v57;
    }
    int v76 = 136315906;
    double v77 = *(double *)&v39;
    __int16 v78 = 2080;
    *(void *)uint64_t v79 = v40;
    *(_WORD *)&v79[8] = 2080;
    int v80 = v41;
    *(_WORD *)uint64_t v81 = 2080;
    *(void *)&v81[2] = v42;
    __int16 v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendSubmersionStateAndCollectAnalytics(const CMMotionCoprocessorReply::SubmersionState &)", "%s\n", v43);
    if (v43 != (char *)buf) {
      free(v43);
    }
  }
  if (SHIBYTE(v73) < 0)
  {
    sub_1000DC48C(&v45, (void *)v72, *((unint64_t *)&v72 + 1));
  }
  else
  {
    long long v45 = v72;
    uint64_t v46 = v73;
  }
  if (SHIBYTE(v68) < 0)
  {
    sub_1000DC48C(&v47, (void *)v67, *((unint64_t *)&v67 + 1));
  }
  else
  {
    long long v47 = v67;
    uint64_t v48 = v68;
  }
  if (SHIBYTE(v63) < 0)
  {
    sub_1000DC48C(&v49, (void *)v62, *((unint64_t *)&v62 + 1));
  }
  else
  {
    long long v49 = v62;
    uint64_t v50 = v63;
  }
  if (SHIBYTE(v58) < 0)
  {
    sub_1000DC48C(&v51, (void *)v57, *((unint64_t *)&v57 + 1));
  }
  else
  {
    long long v51 = v57;
    uint64_t v52 = v58;
  }
  uint64_t v53 = a2;
  AnalyticsSendEventLazy();
  if (*(int *)(a1 + 1744) >= 1)
  {
    LOBYTE(v75) = *(_DWORD *)(a1 + 1744);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    __int16 v27 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67240192;
      LODWORD(v94) = v75;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "overriding submersion state, %{public}u", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      int v76 = 67240192;
      LODWORD(v77) = v75;
      double v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendSubmersionStateAndCollectAnalytics(const CMMotionCoprocessorReply::SubmersionState &)", "%s\n", v44);
      if (v44 != (char *)buf) {
        free(v44);
      }
    }
  }
  sub_1000E01AC(a1, 37, (uint64_t)&v74, 16);
  if (SHIBYTE(v52) < 0) {
    operator delete((void *)v51);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete((void *)v45);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete((void *)v57);
  }
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete((void *)v72);
  }
}

void sub_1010D9C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  if (a67 < 0) {
    operator delete(a62);
  }
  if (a72 < 0) {
    operator delete(a71);
  }
  _Unwind_Resume(a1);
}

void sub_1010D9D68(uint64_t a1, long long *a2)
{
}

NSDictionary *sub_1010D9D70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v8[0] = @"depth";
  uint64_t v3 = (void *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  v9[0] = +[NSString stringWithUTF8String:v3];
  v8[1] = @"maxAccel";
  double v4 = (void *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    double v4 = (void *)*v4;
  }
  v9[1] = +[NSString stringWithUTF8String:v4];
  unsigned char v8[2] = @"maxMinPressure";
  double v5 = (void *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0) {
    double v5 = (void *)*v5;
  }
  _DWORD v9[2] = +[NSString stringWithUTF8String:v5];
  void v8[3] = @"touchDelay";
  double v6 = (void *)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    double v6 = (void *)*v6;
  }
  v9[3] = +[NSString stringWithUTF8String:v6];
  _OWORD v8[4] = @"submerged";
  v9[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 1755)];
  void v8[5] = @"modelUsed";
  v9[5] = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(*(void *)(a1 + 136) + 10)];
  void v8[6] = @"modelUsedBounded";
  _OWORD v9[6] = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(*(void *)(a1 + 136) + 10)];
  return +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:7];
}

unsigned char *sub_1010D9EEC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 64), *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 88), *(void **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
  }
  uint64_t result = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0) {
    return sub_1000DC48C(result, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  long long v8 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)uint64_t result = v8;
  return result;
}

void sub_1010D9FDC(_Unwind_Exception *exception_object)
{
  if (v2[111] < 0) {
    operator delete(*v4);
  }
  if (v2[87] < 0) {
    operator delete(*v3);
  }
  if (v2[63] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DA028(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

uint64_t sub_1010DA0A0(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 859))
  {
    uint64_t v3 = result;
    double v4 = *(double *)(result + 352);
    if (*(unsigned char *)(result + 653) && !*(unsigned char *)(result + 652))
    {
      sub_1010CE1FC(result);
      *(unsigned char *)(v3 + 653) = 0;
    }
    double v5 = *(double *)(v3 + 664);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    double v6 = v4 + v5;
    double v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      double v8 = *(float *)(a2 + 9);
      uint64_t v9 = *(void *)(a2 + 1);
      *(_DWORD *)int buf = 134349568;
      *(double *)&uint8_t buf[4] = v6;
      __int16 v12 = 2050;
      double v13 = v8;
      __int16 v14 = 2050;
      uint64_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "received surface pressure from the AOP,timestamp,%{public}f,pressure,%{public}f,aopTime,%{public}llu", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitSurfacePressure(const CMMotionCoprocessorReply::SurfacePressure *)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
    *(double *)int buf = v6;
    *(_DWORD *)&uint8_t buf[8] = *(_DWORD *)(a2 + 9);
    return sub_1000E01AC(v3, 38, (uint64_t)buf, 16);
  }
  return result;
}

uint64_t sub_1010DA2E8(uint64_t a1, uint64_t a2)
{
  return sub_1010DA0A0(a1 - 152, a2);
}

uint64_t sub_1010DA2F0(uint64_t a1, uint64_t a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  double v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 1);
    int v6 = *(unsigned __int8 *)(a2 + 9);
    *(_DWORD *)int buf = 134349312;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "received face covered event from the AOP,timestamp,%{public}llu,isCovered,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitFaceCoveredEvent(const CMMotionCoprocessorReply::FaceCoveredEvent *)", "%s\n", v9);
    if (v9 != buf) {
      free(v9);
    }
  }
  *(void *)int buf = *(void *)(a2 + 1);
  *(void *)&uint8_t buf[8] = 0;
  uint8_t buf[8] = *(unsigned char *)(a2 + 9);
  double v7 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  *(double *)&uint8_t buf[16] = v7 + *(double *)(a1 + 664);
  return sub_1000E01AC(a1, 39, (uint64_t)buf, 24);
}

uint64_t sub_1010DA520(uint64_t a1, uint64_t a2)
{
  return sub_1010DA2F0(a1 - 152, a2);
}

uint64_t sub_1010DA528(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 6);
  unint64_t v5 = *(void *)(a2 + 14);
  double v6 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  double v7 = *(double *)(a1 + 664);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  double v8 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(a2 + 14);
    uint64_t v10 = *(void *)(a2 + 6);
    double v11 = *(float *)(a2 + 2);
    double v12 = *(float *)(a2 + 22);
    *(_DWORD *)int buf = 134349824;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v10;
    __int16 v16 = 2050;
    double v17 = v11;
    __int16 v18 = 2050;
    double v19 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "visitStairsEscalationEvent,now,%{public}llu,start,%{public}llu,stairMetric,%{public}f,vertSpeed,%{public}f", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitStairsEscalationEvent(const CMMotionCoprocessorReply::StairsEscalationEvent *)", "%s\n", v14);
    if (v14 != buf) {
      free(v14);
    }
  }
  *(double *)int buf = v6 + ((double)v4 - (double)v5) / 1000000.0 + v7;
  *(void *)&uint8_t buf[8] = *(void *)(a2 + 6);
  *(_DWORD *)&uint8_t buf[16] = *(_DWORD *)(a2 + 2);
  unsigned char buf[20] = *(unsigned char *)(a2 + 1);
  LODWORD(v17) = *(_DWORD *)(a2 + 22);
  return sub_1000E01AC(a1, 47, (uint64_t)buf, 32);
}

uint64_t sub_1010DA7D4(uint64_t a1, uint64_t a2)
{
  return sub_1010DA528(a1 - 152, a2);
}

uint64_t sub_1010DA7DC(uint64_t a1, uint64_t a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  unint64_t v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    double v5 = *(float *)(a2 + 1);
    double v6 = *(float *)(a2 + 5);
    *(_DWORD *)int buf = 134218240;
    *(double *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&unsigned char buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "received mean sea level pressure,mslp,%f,uncertainty,%f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitMeanSeaLevelPressure(const CMMotionCoprocessorReply::MeanSeaLevelPressure *)", "%s\n", v10);
    if (v10 != buf) {
      free(v10);
    }
  }
  double v7 = *(double *)(a1 + 352);
  if (*(unsigned char *)(a1 + 653) && !*(unsigned char *)(a1 + 652))
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 653) = 0;
  }
  uint64_t v8 = *(void *)(a2 + 1);
  *(double *)int buf = v7 + *(double *)(a1 + 664);
  *(void *)&uint8_t buf[8] = v8;
  return sub_1000E01AC(a1, 48, (uint64_t)buf, 16);
}

uint64_t sub_1010DAA10(uint64_t a1, uint64_t a2)
{
  return sub_1010DA7DC(a1 - 152, a2);
}

void sub_1010DAA18(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DAAA0;
  void v5[3] = &unk_1022A56E0;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DAAA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1248) = [*(id *)(a1 + 32) copy];
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_release(v3);
}

void sub_1010DAAEC(uint64_t a1, void *a2)
{
}

void sub_1010DAAF4(uint64_t a1, int a2, double a3)
{
  if (qword_102419020 != -1) {
    dispatch_once(&qword_102419020, &stru_102310570);
  }
  double v6 = qword_102419028;
  if (os_log_type_enabled((os_log_t)qword_102419028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67109376;
    int v9 = a2;
    LOWORD(v10[0]) = 2048;
    *(double *)((char *)v10 + 2) = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "trigger,%u,duration,%f", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419020 != -1) {
      dispatch_once(&qword_102419020, &stru_102310570);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setActivityAlarm(CMActivityAlarmTrigger, NSTimeInterval)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(_DWORD *)int buf = 3;
  int v9 = a2;
  v10[0] = (unint64_t)(a3 * 1000000.0);
  sub_1010E341C(a1 + 192, (long long *)buf, 0);
}

void sub_1010DACF4(uint64_t a1, int a2, double a3)
{
}

void sub_1010DACFC(uint64_t a1, int a2)
{
  LODWORD(v2) = 259;
  DWORD1(v2) = a2;
  *((void *)&v2 + 1) = 0;
  sub_1010E341C(a1 + 192, &v2, 0);
}

void sub_1010DAD34(uint64_t a1, int a2)
{
  LODWORD(v2) = 259;
  DWORD1(v2) = a2;
  *((void *)&v2 + 1) = 0;
  sub_1010E341C(a1 + 152, &v2, 0);
}

void sub_1010DAD6C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DADF0;
  void v5[3] = &unk_1022BBA18;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DADF0(uint64_t a1)
{
  long long v2 = *(unsigned char **)(a1 + 32);
  BOOL v9 = 0;
  uint64_t v3 = sub_1000D3E78();
  sub_10006B564(v3, &v7);
  int v4 = sub_1000D2988(v7, "OscarStepCounting", &v9);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (!v4 || v9 != *(unsigned char *)(a1 + 40))
  {
    uint64_t v5 = sub_1000D3E78();
    sub_10006B564(v5, &v7);
    char v6 = (unsigned char *)(a1 + 40);
    sub_1000EA238(v7, "OscarStepCounting", v6);
    if (v8) {
      sub_1000DB0A0(v8);
    }
    v2[219] = *v6;
    (*(void (**)(unsigned char *, void))(*(void *)v2 + 552))(v2, 0);
  }
}

void sub_1010DAEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DAEF8(uint64_t a1, char a2)
{
}

void sub_1010DAF00(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DAF84;
  void v5[3] = &unk_1022BBA18;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

uint64_t sub_1010DAF84(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  v1[264] = *(unsigned char *)(a1 + 40);
  return (*(uint64_t (**)(unsigned char *, void))(*(void *)v1 + 552))(v1, 0);
}

void sub_1010DAFC4(uint64_t a1, char a2)
{
}

uint64_t sub_1010DAFCC()
{
  if (sub_1001B7C64() & 1) != 0 || (sub_1000F08D4()) {
    return 0;
  }
  char v5 = 1;
  uint64_t v1 = sub_1000D3E78();
  sub_10006B564(v1, &v3);
  int v2 = sub_1000D2988(v3, "OscarStepCounting", (BOOL *)&v5);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v5) {
    return 1;
  }
  else {
    return v2 ^ 1u;
  }
}

void sub_1010DB054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010DB070(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DB0F8;
  void v5[3] = &unk_1022A56E0;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DB0F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1256) = [*(id *)(a1 + 32) copy];
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_release(v3);
}

void sub_1010DB144(uint64_t a1, void *a2)
{
}

void sub_1010DB14C(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DB1D4;
  void v5[3] = &unk_1022A56E0;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DB1D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1264) = [*(id *)(a1 + 32) copy];
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_release(v3);
}

void sub_1010DB220(uint64_t a1, void *a2)
{
}

uint64_t sub_1010DB228(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 192))(a1);
  if (result) {
    return sub_100862C50() != 0;
  }
  return result;
}

uint64_t sub_1010DB270(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 - 72) + 192))();
  if (result) {
    return sub_100862C50() != 0;
  }
  return result;
}

void sub_1010DB2B8(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DB340;
  void v5[3] = &unk_1022A56E0;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DB340(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1272) = [*(id *)(a1 + 32) copy];
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_release(v3);
}

void sub_1010DB38C(uint64_t a1, void *a2)
{
}

void sub_1010DB394(uint64_t a1, void *aBlock)
{
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DB41C;
  void v5[3] = &unk_1022A56E0;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DB41C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);

  *(void *)(v2 + 1280) = [*(id *)(a1 + 32) copy];
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_release(v3);
}

void sub_1010DB468(uint64_t a1, void *a2)
{
}

void sub_1010DB470(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DB4F4;
  void v5[3] = &unk_1022BBA18;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

uint64_t sub_1010DB4F4(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 32);
  v1[245] = *(unsigned char *)(a1 + 40);
  return (*(uint64_t (**)(unsigned char *, void))(*(void *)v1 + 552))(v1, 0);
}

void sub_1010DB534(uint64_t a1, char a2)
{
}

void sub_1010DB53C(uint64_t a1, __int16 a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DB5C0;
  void v5[3] = &unk_1022E8A48;
  unsigned __int8 v5[4] = a1;
  __int16 v6 = a2;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DB5C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int16 *)(a1 + 40);
  *(_WORD *)(v1 + 344) = v2;
  sub_1010CE794(v1, v2);
}

void sub_1010DB5D4(uint64_t a1, __int16 a2)
{
}

void sub_1010DB5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 176;
  uint64_t v38 = a1 + 176;
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 16))(a1 + 176);
  *(unsigned char *)(v4 + 417) = *(_DWORD *)a2;
  *(unsigned char *)(v4 + 418) = *(_DWORD *)(a2 + 4);
  *(void *)(v4 + 424) = *(void *)(a2 + 8);
  *(_DWORD *)(v4 + 432) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 440) = *(_OWORD *)(a2 + 20);
  *(_DWORD *)(v4 + 456) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(v4 + 419) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 436) = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(v4 + 420) = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(v4 + 468) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(v4 + 421) = *(unsigned char *)(a2 + 56) | (2 * *(unsigned char *)(a2 + 57)) | (4 * *(unsigned char *)(a2 + 58));
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  char v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    int v6 = *(unsigned __int8 *)(a1 + 593);
    double v7 = *(float *)(a1 + 600);
    double v8 = *(float *)(a1 + 604);
    double v9 = *(float *)(a1 + 608);
    double v10 = *(float *)(a1 + 616);
    double v11 = *(float *)(a1 + 620);
    double v12 = *(float *)(a1 + 624);
    double v13 = *(float *)(a1 + 628);
    double v14 = *(float *)(a1 + 632);
    int v15 = *(unsigned __int8 *)(a1 + 595);
    double v16 = *(float *)(a1 + 612);
    int v17 = *(unsigned __int8 *)(a1 + 596);
    int v18 = *(unsigned __int8 *)(a1 + 594);
    int v19 = *(unsigned __int8 *)(a1 + 597);
    double v20 = *(float *)(a1 + 644);
    *(_DWORD *)int buf = 67112704;
    int v72 = v6;
    __int16 v73 = 2048;
    double v74 = v7;
    __int16 v75 = 2048;
    double v76 = v8;
    __int16 v77 = 2048;
    double v78 = v9;
    __int16 v79 = 2048;
    double v80 = v10;
    __int16 v81 = 2048;
    double v82 = v11;
    __int16 v83 = 2048;
    double v84 = v12;
    __int16 v85 = 2048;
    double v86 = v13;
    __int16 v87 = 2048;
    double v88 = v14;
    __int16 v89 = 1024;
    int v90 = v15;
    __int16 v91 = 2048;
    double v92 = v16;
    __int16 v93 = 1024;
    int v94 = v17;
    __int16 v95 = 1024;
    int v96 = v18;
    __int16 v97 = 1024;
    int v98 = v19;
    __int16 v99 = 2048;
    double v100 = v20;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending user info,fGender,%d,fHeightM,%f,fWeightKG,%f,fVo2Max,%f,fAge,%f,HRMin,%f,HRMax,%f,fHROnset,%f,fPal,%f,fCondition,%d,fRunVo2Max,%f,fBetaBlockerUse,%d,fBiologicalSex,%d,fIsBodyMetricSet,%d ,fAdaptiveExerciseMinuteThreshold,%f", buf, 0x84u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    int v22 = *(unsigned __int8 *)(a1 + 593);
    double v23 = *(float *)(a1 + 600);
    double v24 = *(float *)(a1 + 604);
    double v25 = *(float *)(a1 + 608);
    double v26 = *(float *)(a1 + 616);
    double v27 = *(float *)(a1 + 620);
    double v28 = *(float *)(a1 + 624);
    double v29 = *(float *)(a1 + 628);
    double v30 = *(float *)(a1 + 632);
    int v31 = *(unsigned __int8 *)(a1 + 595);
    double v32 = *(float *)(a1 + 612);
    int v33 = *(unsigned __int8 *)(a1 + 596);
    int v34 = *(unsigned __int8 *)(a1 + 594);
    int v35 = *(unsigned __int8 *)(a1 + 597);
    double v36 = *(float *)(a1 + 644);
    int v41 = 67112704;
    int v42 = v22;
    __int16 v43 = 2048;
    double v44 = v23;
    __int16 v45 = 2048;
    double v46 = v24;
    __int16 v47 = 2048;
    double v48 = v25;
    __int16 v49 = 2048;
    double v50 = v26;
    __int16 v51 = 2048;
    double v52 = v27;
    __int16 v53 = 2048;
    double v54 = v28;
    __int16 v55 = 2048;
    double v56 = v29;
    __int16 v57 = 2048;
    double v58 = v30;
    __int16 v59 = 1024;
    int v60 = v31;
    __int16 v61 = 2048;
    double v62 = v32;
    __int16 v63 = 1024;
    int v64 = v33;
    __int16 v65 = 1024;
    int v66 = v34;
    __int16 v67 = 1024;
    int v68 = v35;
    __int16 v69 = 2048;
    double v70 = v36;
    double v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setUserInfo(const CLBodyMetrics &)", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  long long v21 = *(_OWORD *)(a1 + 608);
  v39[0] = *(_OWORD *)(a1 + 592);
  v39[1] = v21;
  v39[2] = *(_OWORD *)(a1 + 624);
  uint64_t v40 = *(void *)(a1 + 640);
  (*(void (**)(uint64_t))(*(void *)v38 + 24))(v38);
  sub_1010E35F0(a1 + 192, v39, 0);
}

void sub_1010DBA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010DBA8C(uint64_t a1, uint64_t a2)
{
}

void sub_1010DBA94(uint64_t a1, void *a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  uint64_t v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending user info + walk stride length step cadence pair", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setUserStrideLengthStepCadencePairWalk(const CLStrideLengthStepCadencePair &)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 16))(a1 + 176);
  *(void *)(a1 + 636) = *a2;
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 24))(a1 + 176);
  if (*(unsigned char *)(a1 + 283)) {
    sub_1010E35F0(a1 + 192, (long long *)(a1 + 592), 0);
  }
}

void sub_1010DBCA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1010DBCB0(uint64_t a1, void *a2)
{
}

void sub_1010DBCB8(uint64_t a1, uint64_t a2)
{
  LOBYTE(v11) = 28;
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  HIBYTE(v11) = *(_DWORD *)(a2 + 12);
  char v12 = sub_10092CDEC(v4);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  char v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int isTypeInVehicle = CLMotionActivity::isTypeInVehicle();
    int v7 = *(_DWORD *)(a2 + 12);
    *(_DWORD *)int buf = 67240448;
    int v18 = isTypeInVehicle;
    __int16 v19 = 1026;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending isVehicular %{public}d, vehicularConfidence %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    int v8 = CLMotionActivity::isTypeInVehicle();
    int v9 = *(_DWORD *)(a2 + 12);
    int v13 = 67240448;
    int v14 = v8;
    __int16 v15 = 1026;
    int v16 = v9;
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setVehicularData(const CLMotionStateUpdate &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  sub_1010E37E8(a1 + 192, &v11, 0);
}

void sub_1010DBEC4(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1010DBECC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = a1 + 176;
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 16))(a1 + 176);
  if (*(unsigned char *)(v4 + 107))
  {
    long long v5 = *(_OWORD *)(a1 + 284);
    long long v6 = *(_OWORD *)(a1 + 300);
    long long v7 = *(_OWORD *)(a1 + 316);
    *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)(a1 + 328);
    a2[1] = v6;
    a2[2] = v7;
    *a2 = v5;
  }
  else
  {
    *a2 = xmmword_101DA6A3C;
    a2[1] = unk_101DA6A4C;
    a2[2] = xmmword_101DA6A5C;
    *(_OWORD *)((char *)a2 + 44) = *(long long *)((char *)&xmmword_101DA6A5C + 12);
  }
  int v8 = *(unsigned __int8 *)(a1 + 283);
  (*(void (**)(uint64_t))(*(void *)(a1 + 176) + 24))(v4);
  return v8 != 0;
}

BOOL sub_1010DBFA4(uint64_t a1, _OWORD *a2)
{
  return sub_1010DBECC(a1 - 56, a2);
}

void sub_1010DBFAC(uint64_t a1, char a2, int a3)
{
  uint64_t v6 = sub_1000D3E78();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _OWORD v7[2] = sub_1010DC040;
  void v7[3] = &unk_1023102C8;
  v7[4] = a1;
  char v9 = a2;
  int v8 = a3;
  sub_1009E8F7C(v6, (uint64_t)v7);
}

void sub_1010DC040(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 44);
  *(unsigned char *)(v2 + 861) = *(unsigned char *)(a1 + 44) != 0;
  if (v3 || *(unsigned __int8 *)(v2 + 862) - 17 > 1 || sub_1009D3158(v2, 7) <= 0)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 44);
      int v6 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)int buf = 67109376;
      int v9 = v5;
      __int16 v10 = 1024;
      int v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MotionStateObserver, Sending down ActivityOverride,session,%d,hkActivityType,%d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setActivityOverride(const CMMotionContext::ActivitySession, const CMMotionContext::CMHKWorkoutActivityType)_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    sub_1010D16E4(v2, *(unsigned __int8 *)(a1 + 44), *(_DWORD *)(a1 + 40));
  }
}

void sub_1010DC260(uint64_t a1, char a2, int a3)
{
}

void sub_1010DC268(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DC2EC;
  void v5[3] = &unk_1022BBA18;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DC2EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  __int16 v7 = 67;
  HIBYTE(v7) = *(unsigned char *)(a1 + 40);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  int v3 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)int buf = 67109120;
    int v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[LOIStateChange]transition,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    int v5 = *(unsigned __int8 *)(a1 + 40);
    int v8 = 67109120;
    int v9 = v5;
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendLoiTransition(const uint8_t)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1010E39CC(v2 + 192, &v7, 0);
}

void sub_1010DC4C4(uint64_t a1, char a2)
{
}

void sub_1010DC4CC(uint64_t a1, void *aBlock)
{
  int v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DC554;
  void v5[3] = &unk_1022A56E0;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DC554(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = *(void *)(a1 + 40);

    *(void *)(v3 + 1288) = [*(id *)(a1 + 32) copy];
    _Block_release(*(const void **)(a1 + 32));
    p_cache = CLAvengerScannerClientController.cache;
    if (qword_102418FD0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101AA1330();
  }
  dispatch_once(&qword_102418FD0, &stru_102310430);
LABEL_3:
  uint64_t v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm, setSedentaryAlarmHandler!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (p_cache[506] != (void *)-1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::setSedentaryAlarmHandler(SedentaryAlarmHandler)_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1010DC70C(uint64_t a1, void *a2)
{
}

void sub_1010DC714(uint64_t a1, uint64_t a2)
{
  LOBYTE(v5) = 13;
  *(_WORD *)((char *)&v5 + 1) = *(_WORD *)a2;
  *(_DWORD *)((char *)&v5 + 3) = *(_DWORD *)(a2 + 2);
  HIBYTE(v5) = *(unsigned char *)(a2 + 6);
  __int16 v6 = *(_WORD *)(a2 + 8);
  int v7 = *(_DWORD *)(a2 + 10);
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  uint64_t v3 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm, startSedentaryAlarm!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::startSedentaryAlarm(const CLSedentaryAlarmParams &)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_1010E3BA0(a1 + 192, &v5, 0);
}

void sub_1010DC8E8(uint64_t a1, uint64_t a2)
{
}

void sub_1010DC8F0(uint64_t a1)
{
  *(void *)((char *)v4 + 6) = 0;
  v4[0] = 13;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  uint64_t v2 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "[SedentaryTimerTriage] SedentaryAlarm, stopSedentaryAlarm!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::stopSedentaryAlarm()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1010E3BA0(a1 + 192, v4, 0);
}

void sub_1010DCAA0(uint64_t a1)
{
}

void sub_1010DCAA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DCB28;
  void v5[3] = &unk_1022A56E0;
  unsigned __int8 v5[4] = a2;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DCB28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (([*(id *)(v2 + 160) isEqualToDictionary:*(void *)(a1 + 32)] & 1) == 0)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    sub_1010CFA4C((void *)v2, v3);
  }
}

void sub_1010DCB7C(uint64_t a1, uint64_t a2)
{
}

void sub_1010DCB84(uint64_t a1)
{
  char v4 = 20;
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_102310530);
  }
  uint64_t v2 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Sending reset compass to AOP", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_102310530);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::resetCompass()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1010E3F90(a1 + 192, &v4, 0);
}

void sub_1010DCD30(uint64_t a1)
{
}

void sub_1010DCD38(uint64_t a1)
{
  char v1 = 23;
  sub_1010E4164(a1 + 192, &v1, 0);
}

void sub_1010DCD6C(uint64_t a1)
{
  char v1 = 23;
  sub_1010E4164(a1 + 112, &v1, 0);
}

void sub_1010DCDA0(uint64_t a1)
{
  char v1 = 24;
  sub_1010E4338(a1 + 192, &v1, 0);
}

void sub_1010DCDD4(uint64_t a1)
{
  char v1 = 24;
  sub_1010E4338(a1 + 112, &v1, 0);
}

void sub_1010DCE08(uint64_t a1, int a2)
{
  LOBYTE(v8) = 21;
  HIBYTE(v8) = a2;
  if (qword_1024190B0 != -1) {
    dispatch_once(&qword_1024190B0, &stru_1023104B0);
  }
  char v4 = off_1024190B8;
  if (os_log_type_enabled((os_log_t)off_1024190B8, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = "stopping";
    if (a2) {
      uint64_t v5 = "starting";
    }
    *(_DWORD *)int buf = 136446210;
    char v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLMotionCoprocessor %{public}s gyro bias and variance updates", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190B0 != -1) {
      dispatch_once(&qword_1024190B0, &stru_1023104B0);
    }
    __int16 v6 = "stopping";
    if (a2) {
      __int16 v6 = "starting";
    }
    int v9 = 136446210;
    __int16 v10 = v6;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::startStopGyroBiasAndVariance(const BOOL)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1010E450C(a1 + 192, &v8, 0);
}

void sub_1010DD004(uint64_t a1, int a2)
{
}

void sub_1010DD00C(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102310630);
  }
  uint64_t v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending command to reset workout detector.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102310630);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::resetTier1WorkoutDetector()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  buf[0] = 33;
  sub_1010E46E0(a1 + 192, (char *)buf, 0);
}

void sub_1010DD1B8(uint64_t a1)
{
}

void sub_1010DD1C0(uint64_t a1, float *a2)
{
  unsigned int v3 = *(unsigned __int16 *)a2;
  if (v3 > 0x21C || ((unsigned int v4 = *((unsigned __int16 *)a2 + 1), v4 <= 0x347) ? (v5 = v4 > v3) : (v5 = 1), v5))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102310630);
    }
    __int16 v6 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
    {
      int v7 = *(unsigned __int16 *)a2;
      int v8 = *((unsigned __int16 *)a2 + 1);
      double v9 = a2[1];
      *(_DWORD *)int buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      int v18 = v8;
      __int16 v19 = 2048;
      double v20 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Cannot update alternate escalation parameters: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,activeSpeedInMPH,%f", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102310630);
      }
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLMotionCoprocessor::updateAlternateEscalationParameters(const EscalationRules &)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102310630);
    }
    char v12 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(unsigned __int16 *)a2;
      int v14 = *((unsigned __int16 *)a2 + 1);
      double v15 = a2[1];
      *(_DWORD *)int buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 1024;
      int v18 = v14;
      __int16 v19 = 2048;
      double v20 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Sending updated alternate escalation parameters to the AOP: lookbackTimeInSeconds,%hu,activeTimeInSeconds,%hu,activeSpeedInMPH,%f", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_102310630);
      }
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::updateAlternateEscalationParameters(const EscalationRules &)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
    buf[0] = 38;
    *(void *)&buf[1] = *(void *)a2;
    sub_1010E48B4(a1 + 192, (uint64_t)buf, 0);
  }
}

void sub_1010DD59C(uint64_t a1, float *a2)
{
}

void sub_1010DD5A4(uint64_t a1, int *a2)
{
  char v2 = 82;
  int v3 = *a2;
  int v4 = a2[1];
  sub_1010E4A98(a1 + 192, (uint64_t)&v2, 0);
}

void sub_1010DD5E8(uint64_t a1, int *a2)
{
  char v2 = 82;
  int v3 = *a2;
  int v4 = a2[1];
  sub_1010E4A98(a1 + 96, (uint64_t)&v2, 0);
}

void sub_1010DD62C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DD6B0;
  void v5[3] = &unk_1022BBA18;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

uint64_t sub_1010DD6B0(uint64_t a1)
{
  char v1 = *(unsigned char **)(a1 + 32);
  v1[270] = *(unsigned char *)(a1 + 40);
  return (*(uint64_t (**)(unsigned char *, void))(*(void *)v1 + 552))(v1, 0);
}

void sub_1010DD6F0(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  uint64_t v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *a2;
    *(_DWORD *)int buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending cycling state,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendCyclingState(const CMMotionContext::CyclingStateDetectorMessage &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  buf[0] = 42;
  buf[1] = *a2;
  *(_WORD *)&buf[2] = 0;
  int v8 = *((_DWORD *)a2 + 1);
  int v9 = *((_DWORD *)a2 + 2);
  sub_1010E4C7C(a1 + 192, (uint64_t)buf, 0);
}

void sub_1010DD8DC(uint64_t a1, unsigned __int8 *a2)
{
}

void sub_1010DD8E4(uint64_t a1, uint8_t *a2)
{
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102310430);
  }
  uint64_t v4 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
  {
    int v5 = *a2;
    *(_DWORD *)int buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending workout pause/resume,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendWorkoutPauseResumeTransition(const CMMotionContext::Transition &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  strcpy((char *)buf, ",");
  buf[1] = *a2;
  sub_1010E4E60(a1 + 192, (__int16 *)buf, 0);
}

void sub_1010DDABC(uint64_t a1, uint8_t *a2)
{
}

void sub_1010DDACC(uint64_t a1, void *aBlock)
{
  int v3 = _Block_copy(aBlock);
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DDB54;
  void v5[3] = &unk_1022A56E0;
  unsigned __int8 v5[4] = v3;
  void v5[5] = a1;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DDB54(uint64_t a1)
{
  uint64_t v4 = a1 + 32;
  char v2 = *(const void **)(a1 + 32);
  uint64_t v3 = *(void *)(v4 + 8);
  int v5 = *(void **)(v3 + 1296);
  if (v2 != v5)
  {

    *(void *)(v3 + 1296) = [*(id *)(a1 + 32) copy];
    char v2 = *(const void **)(a1 + 32);
  }

  _Block_release(v2);
}

void sub_1010DDBA8(uint64_t a1, void *a2)
{
}

void sub_1010DDBB0(uint64_t a1, int a2)
{
  LOBYTE(v6) = 26;
  HIBYTE(v6) = a2;
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1023105B0);
  }
  uint64_t v4 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending ski transition %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1023105B0);
    }
    int v7 = 67109120;
    int v8 = a2;
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendSkiTransition(const CLSkiTransitions)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1010E5034(a1 + 192, &v6, 0);
}

void sub_1010DDD7C(uint64_t a1, int a2)
{
}

void sub_1010DDD84(uint64_t a1, unsigned __int8 a2)
{
  LOBYTE(v6) = 39;
  HIBYTE(v6) = a2;
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  uint64_t v4 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sending altimeter command to the AOP,%u", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    int v7 = 67109120;
    int v8 = a2;
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendAltimeterCommand(const CLAltimeterCommand)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1010E5208(a1 + 192, &v6, 0);
}

void sub_1010DDF58(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1010DDF60(uint64_t a1, int a2)
{
  LOBYTE(v6) = 68;
  HIBYTE(v6) = a2;
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  uint64_t v4 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67240192;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending water state to the AOP,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    int v7 = 67240192;
    int v8 = a2;
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendWaterState(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1010E53DC(a1 + 192, &v6, 0);
}

void sub_1010DE12C(uint64_t a1, int a2)
{
}

void sub_1010DE134(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  uint64_t v4 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    double v6 = *((float *)a2 + 1);
    double v7 = *((float *)a2 + 2);
    double v8 = *((float *)a2 + 3);
    *(_DWORD *)int buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = v5;
    *(_WORD *)&uint8_t buf[8] = 2050;
    double v11 = v6;
    __int16 v12 = 2050;
    double v13 = v7;
    __int16 v14 = 2050;
    double v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending wetConfig to the AOP,useShower,%{public}d,wetTimeout,%{public}f,pressureAmplitude,%{public}f,tDot,%{public}f", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendWetConfig(const CLAltimeterInterface::WetConfig &)", "%s\n", v9);
    if (v9 != buf) {
      free(v9);
    }
  }
  buf[0] = 69;
  buf[1] = *a2;
  *(void *)&buf[2] = *(void *)(a2 + 4);
  LODWORD(v11) = *((_DWORD *)a2 + 3);
  sub_1010E55B0(a1 + 192, buf, 0);
}

void sub_1010DE37C(uint64_t a1, unsigned __int8 *a2)
{
}

void sub_1010DE384(uint64_t a1, int a2, float a3, float a4)
{
  char v10 = 77;
  float v11 = a3;
  float v12 = a4;
  char v13 = a2;
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  double v8 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134218496;
    double v21 = a3;
    __int16 v22 = 2048;
    double v23 = a4;
    __int16 v24 = 1024;
    int v25 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending MSLP to the AOP,%f,uncertainty,%f,resetInVisitReference,%d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    int v14 = 134218496;
    double v15 = a3;
    __int16 v16 = 2048;
    double v17 = a4;
    __int16 v18 = 1024;
    int v19 = a2;
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendMeanSeaLevelPressure(float, float, BOOL)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_1010E5794(a1 + 192, (uint64_t)&v10, 0);
}

void sub_1010DE5A8(uint64_t a1, int a2, float a3, float a4)
{
}

void sub_1010DE5B0(uint64_t a1, int a2)
{
  LOBYTE(v6) = 78;
  HIBYTE(v6) = a2;
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  uint64_t v4 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending in visit status,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    int v7 = 67109120;
    int v8 = a2;
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendInVisit(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1010E5978(a1 + 192, &v6, 0);
}

void sub_1010DE77C(uint64_t a1, int a2)
{
}

void sub_1010DE784(uint64_t a1, float a2, float a3)
{
  char v8 = 79;
  float v9 = a2;
  float v10 = a3;
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  __int16 v6 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134218240;
    double v16 = a2;
    __int16 v17 = 2048;
    double v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending elevation thresholds,lower,%f,upper,%f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    int v11 = 134218240;
    double v12 = a2;
    __int16 v13 = 2048;
    double v14 = a3;
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendElevationThreshold(float, float)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  sub_1010E5B4C(a1 + 192, (uint64_t)&v8, 0);
}

void sub_1010DE984(uint64_t a1, float a2, float a3)
{
}

void sub_1010DE98C(uint64_t a1, uint64_t a2)
{
  char v7 = 47;
  __int16 v8 = 0;
  char v9 = 0;
  float v3 = *(double *)a2;
  float v4 = *(float *)(a2 + 8);
  float v10 = v3;
  float v11 = v4;
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  int v5 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 134218240;
    double v17 = v3;
    __int16 v18 = 2048;
    double v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending surface calibration to the AOP,timestamp,%f,surfacePressure,%f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    int v12 = 134218240;
    double v13 = v3;
    __int16 v14 = 2048;
    double v15 = v4;
    __int16 v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendSurfaceCalibrationUpdate(const CLWaterSubmersion_Types::CMSurfaceCalibrationSample &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1010E5D30(a1 + 192, (uint64_t)&v7, 0);
}

void sub_1010DEB98(uint64_t a1, uint64_t a2)
{
}

void sub_1010DEBA0(uint64_t a1, uint64_t a2)
{
  v8[0] = 48;
  int v4 = *(unsigned __int8 *)(a2 + 8);
  v8[1] = *(unsigned char *)(a2 + 8);
  __int16 v9 = 0;
  char v10 = 0;
  float v5 = *(double *)a2;
  float v11 = v5;
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  __int16 v6 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 134349312;
    double v17 = v5;
    __int16 v18 = 1026;
    int v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending submersion state to the AOP,timestamp,%{public}f,submersionState,%{public}hu", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    int v12 = 134349312;
    double v13 = v5;
    __int16 v14 = 1026;
    int v15 = v4;
    char v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendSubmersionStateUpdate(const CLWaterSubmersion_Types::CMSubmersionState &)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (*(unsigned __int8 *)(a2 + 8) >= 2u) {
    *(unsigned char *)(a1 + 1756) = 1;
  }
  sub_1010E5F14(a1 + 192, (uint64_t)v8, 0);
}

void sub_1010DEDC8(uint64_t a1, uint64_t a2)
{
}

void sub_1010DEDD0(uint64_t a1, int a2)
{
  LOBYTE(v6) = 70;
  HIBYTE(v6) = a2;
  if (qword_1024191E0 != -1) {
    dispatch_once(&qword_1024191E0, &stru_1023105F0);
  }
  int v4 = qword_1024191E8;
  if (os_log_type_enabled((os_log_t)qword_1024191E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67109120;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending easy submersion to the AOP,easySubmersionState,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191E0 != -1) {
      dispatch_once(&qword_1024191E0, &stru_1023105F0);
    }
    int v7 = 67109120;
    int v8 = a2;
    float v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::sendEasySubmersionUpdate(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_1010E60F8(a1 + 192, &v6, 0);
}

void sub_1010DEF9C(uint64_t a1, int a2)
{
}

void sub_1010DEFA4(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010DF028;
  void v5[3] = &unk_1022BBA18;
  unsigned __int8 v5[4] = a1;
  char v6 = a2;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010DF028(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 1419) = *(unsigned char *)(a1 + 40);
  __int16 v5 = 41;
  int v2 = *(unsigned __int8 *)(a1 + 40);
  HIBYTE(v5) = *(unsigned char *)(a1 + 40);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_102310630);
  }
  float v3 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)int buf = 67109120;
    int v9 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Sending update for ALS active scans to the AOP,shouldEnable,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_102310630);
    }
    int v6 = 67109120;
    int v7 = v2;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::enableALSActiveScans(BOOL)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_1010E62CC(v1 + 192, &v5, 0);
}

void sub_1010DF1FC(uint64_t a1, char a2)
{
}

uint64_t sub_1010DF204(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSMutableDictionary dictionary];
  uint64_t v5 = 1872;
  if (a2) {
    uint64_t v5 = 1832;
  }
  int v6 = (void *)(a1 + v5);
  for (uint64_t i = *(uint64_t **)(a1 + v5 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    int v8 = +[NSNumber numberWithUnsignedLong:i[3]];
    CFStringRef v9 = @"Unknown";
    if ((*((unsigned char *)i + 16) + 80) <= 0xACu) {
      CFStringRef v9 = off_102310790[(*((unsigned char *)i + 16) + 80)];
    }
    [v4 setObject:v8 forKeyedSubscript:v9];
  }
  sub_1000E2F40(v6);
  [v4 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", a2) forKeyedSubscript:@"IsHistorical"];
  if (a2)
  {
    size_t v21 = 256;
    if (*(_DWORD *)(a1 + 672))
    {
      if (!sysctlbyname("kern.wakereason", __s1, &v21, 0, 0))
      {
        snprintf(__str, 0x20uLL, "spu_queue_overflow_ep%u", *(_DWORD *)(a1 + 672));
        int v10 = strstr(__s1, __str);
        if (v10)
        {
          int v11 = v10[strlen(__str)];
          if (v11 < 0 || (_DefaultRuneLocale.__runetype[v11] & 0x400) == 0)
          {
            double v12 = sub_1010E17B8(1);
            double v13 = sub_1010E17B8(0);
            double v14 = v13;
            if (v12 <= v13)
            {
              double v16 = v13 - v12;
            }
            else
            {
              if (qword_102418FE0 != -1) {
                dispatch_once(&qword_102418FE0, &stru_102310410);
              }
              int v15 = qword_102418FE8;
              if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)int buf = 134218240;
                double v27 = *(char **)&v12;
                __int16 v28 = 2048;
                double v29 = v14;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "kern.sleeptime is greater than kern.waketime: %f > %f", buf, 0x16u);
              }
              double v16 = 0.0;
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102418FE0 != -1) {
                  dispatch_once(&qword_102418FE0, &stru_102310410);
                }
                int v22 = 134218240;
                double v23 = *(char **)&v12;
                __int16 v24 = 2048;
                double v25 = v14;
                double v17 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionCoprocessor::sendCoprocessorReplyAnalytics(BOOL)", "%s\n", v17);
                if (v17 != (char *)buf) {
                  free(v17);
                }
              }
            }
            [v4 setObject:[+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)(v16 * 1000.0))] forKeyedSubscript:@"SleepDuration"];
            if (qword_102418FE0 != -1) {
              dispatch_once(&qword_102418FE0, &stru_102310410);
            }
            __int16 v18 = qword_102418FE8;
            if (os_log_type_enabled((os_log_t)qword_102418FE8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int buf = 136446466;
              double v27 = __str;
              __int16 v28 = 2050;
              double v29 = v16;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "wakeReason,%{public}s,sleepDuration,%{public}f", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102418FE0 != -1) {
                dispatch_once(&qword_102418FE0, &stru_102310410);
              }
              int v22 = 136446466;
              double v23 = __str;
              __int16 v24 = 2050;
              double v25 = v16;
              double v20 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::sendCoprocessorReplyAnalytics(BOOL)", "%s\n", v20);
              if (v20 != (char *)buf) {
                free(v20);
              }
            }
          }
        }
      }
    }
  }
  +[NSDictionary dictionaryWithDictionary:v4];
  return AnalyticsSendEventLazy();
}

CLOSTransaction *sub_1010DF740(uint64_t a1, int a2)
{
  if (a2)
  {
    sub_1010CE1FC(a1);
    *(unsigned char *)(a1 + 652) = 1;
    float v3 = *(void **)(a1 + 656);
    if (v3) {

    }
    uint64_t result = [[CLOSTransaction alloc] initWithDescription:"CLMotionCoprocessor.fHistoricalPacketsTransaction"];
    *(void *)(a1 + 656) = result;
  }
  else
  {
    *(unsigned char *)(a1 + 652) = 0;
    sub_1000D51B8(a1);

    *(void *)(a1 + 656) = 0;
    return (CLOSTransaction *)sub_1010DF204(a1, 1);
  }
  return result;
}

void sub_1010DF7D8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*a2 == 14)
  {
    int v7 = *(void (**)(void))(*(void *)a1 + 576);
    v7();
  }
  else if (*a2 == 7)
  {
    v10[0] = 4;
    BYTE1(v10[0]) = *(unsigned char *)(a3 + 9);
    BYTE2(v10[0]) = *(unsigned char *)(a3 + 8);
    HIBYTE(v10[0]) = sub_10060DF30(*(_DWORD *)(a3 + 12));
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102310450);
    }
    uint64_t v5 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
    {
      int v6 = *(unsigned __int8 *)(a3 + 9);
      *(_DWORD *)int buf = 67109120;
      int v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Sending battery connection update, connected,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102310450);
      }
      int v8 = *(unsigned __int8 *)(a3 + 9);
      v10[1] = 67109120;
      uint64_t v10[2] = v8;
      CFStringRef v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onDaemonStatus(const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    sub_1010E64A0(a1 + 192, v10, 0);
  }
}

uint64_t sub_1010DFA50(void *a1, unint64_t a2, unint64_t a3, float *a4)
{
  v74.n128_u64[0] = a2;
  v74.n128_u64[1] = a3;
  if (a2 != 1) {
    return 0;
  }
  if (*((float *)&a3 + 1) < 4.0 && *(float *)&a3 >= 0.0)
  {
    sub_1010DFED4(a1 + 179, &v74);
    unint64_t v6 = a1[184];
    if (v6 >= 3)
    {
      uint64_t v7 = a1[180];
      unint64_t v8 = a1[183];
      CFStringRef v9 = (char *)(v7 + 8 * (v8 >> 8));
      if (a1[181] == v7) {
        uint64_t v10 = 0;
      }
      else {
        uint64_t v10 = *(void *)v9 + 16 * v8;
      }
      uint64_t v69 = v7 + 8 * (v8 >> 8);
      uint64_t v70 = v10;
      int v11 = sub_1000D9B0C((uint64_t)&v69, v6);
      uint64_t v13 = v12 - *v11;
      uint64_t v14 = v13 >> 4;
      if (v13 < 49)
      {
        unint64_t v18 = 258 - v14;
        double v16 = (char *)&v11[-(v18 >> 8)];
        uint64_t v17 = *(void *)v16 + 16 * ~(_BYTE)v18;
      }
      else
      {
        unint64_t v15 = v14 - 3;
        double v16 = (char *)&v11[v15 >> 8];
        uint64_t v17 = *(void *)v16 + 16 * v15;
      }
      sub_100065154(a1 + 179, v9, v10, v16, v17);
      sub_1010E698C((uint64_t)&v69, a1 + 179);
      if (v71 == v70) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = *(void *)(v70 + 8 * (v72 >> 8)) + 16 * v72;
      }
      v68[0] = v70 + 8 * (v72 >> 8);
      v68[1] = v19;
      double v20 = (char *)sub_1000D9B0C((uint64_t)v68, v73 >> 1);
      int v22 = v21;
      double v23 = (void *)(v70 + 8 * (v72 >> 8));
      if (v71 == v70)
      {
        __int16 v24 = 0;
        double v26 = 0;
        double v25 = (char *)(v70 + 8 * ((v73 + v72) >> 8));
      }
      else
      {
        __int16 v24 = (long long *)(*v23 + 16 * v72);
        double v25 = (char *)(v70 + 8 * ((v73 + v72) >> 8));
        double v26 = (long long *)(*(void *)v25 + 16 * (v73 + v72));
      }
      v68[0] = &stru_102310308;
      if (v22 != v26) {
        sub_1010E7120((uint64_t)v23, v24, v20, v22, v25, v26, (uint64_t)v68);
      }
      sub_1010DFED4(a1 + 185, (__n128 *)v22);
      sub_1000D80C4(&v69);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v28 = a1[186];
  unint64_t v29 = a1[189];
  double v30 = (void *)(v28 + 8 * (v29 >> 8));
  uint64_t v31 = a1[187];
  if (v31 == v28)
  {
    uint64_t v32 = 0;
    int v33 = a1 + 190;
  }
  else
  {
    uint64_t v32 = *v30 + 16 * v29;
    int v33 = a1 + 190;
    uint64_t v34 = *(void *)(v28 + (((a1[190] + v29) >> 5) & 0x7FFFFFFFFFFFFF8))
        + 16 * (*((unsigned char *)a1 + 1520) + v29);
    if (v32 != v34)
    {
      while (Current + -30.0 <= *(float *)(v32 + 4))
      {
        v32 += 16;
        if (v32 - *v30 == 4096)
        {
          uint64_t v35 = v30[1];
          ++v30;
          uint64_t v32 = v35;
        }
        if (v32 == v34) {
          goto LABEL_36;
        }
      }
    }
    if (v32 == v34)
    {
LABEL_36:
      uint64_t v32 = *(void *)(v28 + (((a1[190] + v29) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((unsigned char *)a1 + 1520) + v29);
    }
    else
    {
      double v36 = Current + -30.0;
      uint64_t v37 = v32;
      uint64_t v38 = v30;
      while (1)
      {
        v37 += 16;
        if (v37 - *v38 == 4096)
        {
          uint64_t v39 = v38[1];
          ++v38;
          uint64_t v37 = v39;
        }
        if (v37 == v34) {
          break;
        }
        if (v36 <= *(float *)(v37 + 4))
        {
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v37;
          v32 += 16;
          if (v32 - *v30 == 4096)
          {
            uint64_t v40 = v30[1];
            ++v30;
            uint64_t v32 = v40;
          }
        }
      }
      unint64_t v29 = a1[189];
      uint64_t v28 = a1[186];
      uint64_t v31 = a1[187];
    }
  }
  unint64_t v41 = v29 + *v33;
  int v42 = (char *)(v28 + 8 * (v41 >> 8));
  uint64_t v43 = v31 == v28 ? 0 : *(void *)v42 + 16 * v41;
  sub_100065154(a1 + 185, (char *)v30, v32, v42, v43);
  uint64_t v44 = *v33;
  if ((unint64_t)*v33 < 0xA) {
    return 0;
  }
  uint64_t v45 = a1[186];
  unint64_t v46 = a1[189];
  __int16 v47 = (char *)(v45 + 8 * (v46 >> 8));
  if (a1[187] == v45) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = *(void *)v47 + 16 * v46;
  }
  uint64_t v69 = v45 + 8 * (v46 >> 8);
  uint64_t v70 = v48;
  double v50 = sub_1000D9B0C((uint64_t)&v69, v44);
  uint64_t v52 = v51 - *v50;
  uint64_t v53 = v52 >> 4;
  if (v52 < 161)
  {
    unint64_t v57 = 265 - v53;
    __int16 v55 = (char *)&v50[-(v57 >> 8)];
    uint64_t v56 = *(void *)v55 + 16 * ~(_BYTE)v57;
  }
  else
  {
    unint64_t v54 = v53 - 10;
    __int16 v55 = (char *)&v50[v54 >> 8];
    uint64_t v56 = *(void *)v55 + 16 * v54;
  }
  sub_100065154(a1 + 185, v47, v48, v55, v56);
  uint64_t v58 = a1[186];
  if (a1[187] == v58)
  {
    unint64_t v63 = *v33;
  }
  else
  {
    unint64_t v59 = a1[189];
    int v60 = (uint64_t *)(v58 + 8 * (v59 >> 8));
    uint64_t v61 = *v60;
    uint64_t v62 = *v60 + 16 * v59;
    unint64_t v63 = a1[190];
    uint64_t v64 = *(void *)(v58 + (((v63 + v59) >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * (v63 + v59);
    if (v62 != v64)
    {
      float v65 = 0.0;
      do
      {
        uint64_t v66 = v62 + 16;
        if (v62 + 16 - v61 == 4096)
        {
          uint64_t v67 = v60[1];
          ++v60;
          uint64_t v61 = v67;
          uint64_t v66 = v67;
        }
        float v65 = v65 + (float)(*(float *)(v62 + 8) - *(float *)(v62 + 12));
        uint64_t v62 = v66;
      }
      while (v66 != v64);
      goto LABEL_58;
    }
  }
  float v65 = 0.0;
LABEL_58:
  *a4 = v65 / (float)v63;
  return 1;
}

void sub_1010DFEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000D80C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_1010DFED4(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1010E6674(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

BOOL sub_1010DFF60(id a1, const SpeedData *a2, const SpeedData *a3)
{
  return (float)(a2->var2 - a2->var3) < (float)(a3->var2 - a3->var3);
}

void sub_1010DFF7C(unsigned char *a1, int *a2, int *a3)
{
  int v5 = *a2;
  if (*a2 == 4)
  {
    __int16 v19 = 36;
    int v9 = *a3;
    HIBYTE(v19) = *a3 == 2;
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102310450);
    }
    uint64_t v10 = qword_102419018;
    if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67240192;
      LODWORD(v23) = v9 == 2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Youth Fitness Mode, %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419010 != -1) {
        dispatch_once(&qword_102419010, &stru_102310450);
      }
      int v20 = 67240192;
      LODWORD(v21) = v9 == 2;
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onFitnessTrackingNotification(const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    sub_1010E7B94((uint64_t)(a1 + 192), &v19, 0);
  }
  else if (v5 == 3)
  {
    a1[863] = *(unsigned char *)a3;
  }
  else if (!v5)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v6 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      if (*((unsigned char *)a3 + 3)) {
        unint64_t v7 = "on";
      }
      else {
        unint64_t v7 = "off";
      }
      *(_DWORD *)int buf = 136446210;
      double v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "fitness tracking is %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      if (*((unsigned char *)a3 + 3)) {
        uint64_t v14 = "on";
      }
      else {
        uint64_t v14 = "off";
      }
      int v20 = 136446210;
      size_t v21 = v14;
      unint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onFitnessTrackingNotification(const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    a1[859] = *((unsigned char *)a3 + 3);
    if (*((unsigned char *)a3 + 3))
    {
      if (sub_1009D3158((uint64_t)a1, 4) >= 1 && a1[283]) {
        sub_1000E01AC((uint64_t)a1, 4, (uint64_t)(a1 + 284), 60);
      }
      if (a1[1812])
      {
        sub_1010D92BC((uint64_t)a1, (uint64_t)(a1 + 1768));
        a1[1812] = 0;
      }
      char v8 = 1;
    }
    else
    {
      if (*(unsigned char *)a3) {
        BOOL v11 = *((unsigned char *)a3 + 1) == 0;
      }
      else {
        BOOL v11 = 1;
      }
      char v8 = !v11;
    }
    a1[860] = v8;
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v12 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      if (a1[860]) {
        uint64_t v13 = "on";
      }
      else {
        uint64_t v13 = "off";
      }
      *(_DWORD *)int buf = 136446210;
      double v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "elevation tracking is %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      if (a1[860]) {
        uint64_t v17 = "on";
      }
      else {
        uint64_t v17 = "off";
      }
      int v20 = 136446210;
      size_t v21 = v17;
      unint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onFitnessTrackingNotification(const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
}

void sub_1010E0504(uint64_t a1, int a2)
{
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102310450);
  }
  uint64_t v4 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 67109120;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "isVehicleConnected,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102310450);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::setIsVehicleConnected(BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  buf[0] = 9;
  buf[1] = a2;
  buf[2] = a2 ^ 1;
  sub_1010E7D68(a1 + 192, (__int16 *)buf, 0);
}

void sub_1010E06D8(uint64_t a1, int *a2, double *a3)
{
  int v6 = a3[1] < 0.0 && *a3 > 0.0;
  if (qword_102419010 != -1) {
    dispatch_once(&qword_102419010, &stru_102310450);
  }
  int v7 = qword_102419018;
  if (os_log_type_enabled((os_log_t)qword_102419018, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a2;
    double v9 = *a3;
    uint64_t v10 = *((void *)a3 + 1);
    LODWORD(buf) = 67109632;
    HIDWORD(buf) = v8;
    __int16 v23 = 2048;
    double v24 = v9;
    __int16 v25 = 2048;
    uint64_t v26 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Received VehicleConnection notification,%d,startTime, %f,endTime,%f", (uint8_t *)&buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419010 != -1) {
      dispatch_once(&qword_102419010, &stru_102310450);
    }
    int v18 = *a2;
    double v19 = *a3;
    uint64_t v20 = *((void *)a3 + 1);
    LODWORD(v30) = 67109632;
    HIDWORD(v30) = v18;
    *(_WORD *)uint64_t v31 = 2048;
    *(double *)&id v31[2] = v19;
    __int16 v32 = 2048;
    *(void *)int v33 = v20;
    size_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onVehicleConnection(const CLVehicleConnectionNotifier_Type::Notification &, const CLVehicleConnectionNotifier_Type::NotificationData &)", "%s\n", v21);
    if (v21 != (char *)&buf) {
      free(v21);
    }
  }
  if (*(unsigned char *)(a1 + 868))
  {
    double v30 = off_1022E6C98;
    *(void *)uint64_t v31 = CFAbsoluteTimeGetCurrent();
    *(_OWORD *)&_DWORD v33[4] = *(_OWORD *)a3;
    char v34 = v6;
    uint64_t v11 = sub_101282D9C();
    sub_10128431C(v11, (uint64_t)&v30);
    sub_10170140C(&buf);
    sub_101727248((uint64_t)&buf);
    v29 |= 1u;
    uint64_t v28 = *(void *)v31;
    uint64_t v12 = v27;
    double v13 = *a3;
    *(unsigned char *)(v27 + 28) |= 2u;
    *(double *)(v12 + 16) = v13;
    uint64_t v14 = v27;
    uint64_t v15 = *((void *)a3 + 1);
    *(unsigned char *)(v27 + 28) |= 1u;
    *(void *)(v14 + 8) = v15;
    uint64_t v16 = v27;
    *(unsigned char *)(v27 + 28) |= 4u;
    *(unsigned char *)(v16 + 24) = v6;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1023104F0);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)&buf);
    }
    sub_101706914((PB::Base *)&buf);
  }
  sub_1010E0504(a1, v6);
  if (v6) {
    double Current = 1.79769313e308;
  }
  else {
    double Current = CFAbsoluteTimeGetCurrent();
  }
  *(double *)(a1 + 1408) = Current;
}

void sub_1010E0A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1010E0A24()
{
}

uint64_t sub_1010E0A2C(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 868))
  {
    uint64_t v2 = result;
    uint64_t v16 = off_1022E6770;
    int v20 = *(_DWORD *)(result + 16);
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v18 = *(void *)result;
    uint64_t v19 = v3;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    __int16 v21 = *(_WORD *)(v2 + 20);
    char v22 = *(unsigned char *)(v2 + 22);
    uint64_t v4 = sub_101282D9C();
    sub_10128431C(v4, (uint64_t)&v16);
    sub_10170140C(v13);
    sub_101726AF8((uint64_t)v13);
    v15 |= 1u;
    *(CFAbsoluteTime *)&v13[77] = Current;
    uint64_t v5 = v14;
    uint64_t v6 = *(void *)v2;
    *(unsigned char *)(v14 + 36) |= 1u;
    *(void *)(v5 + 8) = v6;
    uint64_t v7 = v14;
    LODWORD(v6) = *(_DWORD *)(v2 + 8);
    *(unsigned char *)(v14 + 36) |= 4u;
    *(_DWORD *)(v7 + 20) = v6;
    uint64_t v8 = v14;
    LODWORD(v6) = *(_DWORD *)(v2 + 12);
    *(unsigned char *)(v14 + 36) |= 8u;
    *(_DWORD *)(v8 + 24) = v6;
    uint64_t v9 = v14;
    LODWORD(v6) = *(_DWORD *)(v2 + 16);
    *(unsigned char *)(v14 + 36) |= 0x10u;
    *(_DWORD *)(v9 + 28) = v6;
    uint64_t v10 = v14;
    int v11 = *(unsigned __int16 *)(v2 + 20);
    *(unsigned char *)(v14 + 36) |= 2u;
    *(_DWORD *)(v10 + 16) = v11;
    uint64_t v12 = v14;
    LOBYTE(v11) = *(unsigned char *)(v2 + 22);
    *(unsigned char *)(v14 + 36) |= 0x20u;
    *(unsigned char *)(v12 + 32) = v11;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1023104F0);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v13);
    }
    return sub_101706914((PB::Base *)v13);
  }
  return result;
}

void sub_1010E0BB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E0BC8(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 868))
  {
    uint64_t v2 = result;
    uint64_t v14 = off_1022E7668;
    int v18 = *(_DWORD *)(result + 16);
    uint64_t v3 = *(void *)(result + 8);
    uint64_t v16 = *(void *)result;
    uint64_t v17 = v3;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v4 = sub_101282D9C();
    sub_10128431C(v4, (uint64_t)&v14);
    sub_10170140C(v10);
    sub_1017269D8((uint64_t)v10);
    v13 |= 1u;
    CFAbsoluteTime v12 = Current;
    sub_1016B604C(v11);
    uint64_t v5 = *(void *)(v11 + 8);
    uint64_t v6 = *(void *)v2;
    *(unsigned char *)(v5 + 32) |= 1u;
    *(void *)(v5 + 8) = v6;
    uint64_t v7 = *(void *)(v11 + 8);
    LODWORD(v6) = *(_DWORD *)(v2 + 8);
    *(unsigned char *)(v7 + 32) |= 4u;
    *(_DWORD *)(v7 + 20) = v6;
    uint64_t v8 = *(void *)(v11 + 8);
    LODWORD(v6) = *(_DWORD *)(v2 + 12);
    *(unsigned char *)(v8 + 32) |= 8u;
    *(_DWORD *)(v8 + 24) = v6;
    uint64_t v9 = *(void *)(v11 + 8);
    LODWORD(v6) = *(_DWORD *)(v2 + 16);
    *(unsigned char *)(v9 + 32) |= 0x10u;
    *(_DWORD *)(v9 + 28) = v6;
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1023104F0);
    }
    if (qword_10248AF90) {
      sub_1019E5150(qword_10248AF90, (uint64_t)v10);
    }
    return sub_101706914((PB::Base *)v10);
  }
  return result;
}

void sub_1010E0D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101706914((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1010E0D3C(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v5 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_ERROR))
    {
      int v6 = *a3;
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v25) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unexpected CLPressureBias notification.notification,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      int v7 = *a3;
      int v18 = 67109120;
      LODWORD(v19) = v7;
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMotionCoprocessor::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else
  {
    long long v17 = *(_OWORD *)a4;
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_102310510);
    }
    uint64_t v11 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134218496;
      double v25 = *((float *)&v17 + 1);
      __int16 v26 = 2048;
      double v27 = *((float *)&v17 + 2);
      __int16 v28 = 2048;
      double v29 = *((float *)&v17 + 3);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "pressureBiasFit.fMedianTemperatureOffsetCoefficient,%f,pressureBiasFit.fMedToc_FactoryTemp,%f,fMaxTemp,%f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_102310510);
      }
      int v18 = 134218496;
      double v19 = *((float *)&v17 + 1);
      __int16 v20 = 2048;
      double v21 = *((float *)&v17 + 2);
      __int16 v22 = 2048;
      double v23 = *((float *)&v17 + 3);
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t v12 = a1 + 192;
    sub_1010E7F4C(v12, &v17, 0);
    *(void *)uint64_t v16 = *(void *)(a4 + 16);
    *(void *)&v16[5] = *(void *)(a4 + 21);
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_102310510);
    }
    char v13 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134218496;
      double v25 = *(float *)&v16[1];
      __int16 v26 = 2048;
      double v27 = *(float *)&v16[5];
      __int16 v28 = 2048;
      double v29 = *(float *)&v16[9];
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "PressureInertialFit,compensationOnX,%f,compensationOnY,%f,compensationOnZ,%f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_102310510);
      }
      int v18 = 134218496;
      double v19 = *(float *)&v16[1];
      __int16 v20 = 2048;
      double v21 = *(float *)&v16[5];
      __int16 v22 = 2048;
      double v23 = *(float *)&v16[9];
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onPressureBias(int, const CLPressureBias_Type::Notification &, const CLPressureBias_Type::NotificationData &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_1010E8120(v12, v16, 0);
  }
}

void sub_1010E1274(uint64_t a1, uint64_t a2, _DWORD *a3, long long *a4)
{
  if (!*a3)
  {
    long long v5 = a4[1];
    long long v9 = *a4;
    long long v10 = v5;
    long long v6 = a4[3];
    long long v11 = a4[2];
    long long v12 = v6;
    uint64_t v7 = sub_1000D3E78();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    unsigned char v8[2] = sub_1010E1308;
    void v8[3] = &unk_1022DB3E0;
    _OWORD v8[4] = a1;
    sub_1009E8F7C(v7, (uint64_t)v8);
  }
}

void sub_1010E1308(uint64_t a1)
{
}

void sub_1010E1318(uint64_t a1, int *a2)
{
  int v3 = *a2;
  uint64_t v4 = sub_1000D3E78();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1010E139C;
  void v5[3] = &unk_1022B2410;
  unsigned __int8 v5[4] = a1;
  int v6 = v3;
  sub_1009E8F7C(v4, (uint64_t)v5);
}

void sub_1010E139C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 10)
  {
    if (objc_opt_class()) {
      *(unsigned char *)(v1 + 1736) = [[+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection") isHealthDataSubmissionAllowed];
    }
  }
  else if (v2 == 6)
  {
    *(unsigned char *)(v1 + 653) = 1;
  }
  else
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102310430);
    }
    uint64_t v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 67109120;
      int v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Unhandled notification %d.", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102310430);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onDarwinNotification(const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_1010E1598(uint64_t a1, uint64_t a2, _DWORD *a3, uint8_t *a4)
{
  if (!*a3)
  {
    sub_100103240();
    if (sub_100742CA4())
    {
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_102310650);
      }
      int v6 = qword_1024190E8;
      if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *a4;
        *(_DWORD *)uint64_t buf = 67109120;
        int v10 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Resetting compass on pencil state update, isAttached, %d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190E0 != -1) {
          dispatch_once(&qword_1024190E0, &stru_102310650);
        }
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCoprocessor::onPencilStateNotification(int, const CLPencilState_Type::Notification &, const CLPencilState_Type::NotificationData &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      (*(void (**)(uint64_t))(*(void *)a1 + 456))(a1);
      strcpy((char *)buf, "-");
      buf[1] = *a4;
      sub_1010E8304(a1 + 192, (__int16 *)buf, 0);
    }
  }
}

double sub_1010E17B8(int a1)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  size_t v6 = 16;
  if (a1) {
    uint64_t v1 = "kern.sleeptime";
  }
  else {
    uint64_t v1 = "kern.waketime";
  }
  int v2 = sysctlbyname(v1, &v7, &v6, 0, 0);
  double v3 = (double)v7;
  double v4 = (double)(int)v8;
  if (v2)
  {
    double v4 = 0.0;
    double v3 = 0.0;
  }
  return v3 + v4 * 0.000001;
}

uint64_t sub_1010E1838(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t sub_1010E1840(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 856) = 0;
  return result;
}

uint64_t sub_1010E184C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 857) = 0;
  return result;
}

uint64_t sub_1010E1858(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 858) = 0;
  return result;
}

void sub_1010E1864(id a1)
{
  qword_102418FE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

void sub_1010E1894(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1010E18C4(id a1)
{
  qword_102419018 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1010E18F4(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

void sub_1010E1924(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_1010E1954(id a1)
{
  off_1024190B8 = os_log_create("com.apple.locationd.Motion", "Gyro");
}

void sub_1010E1984(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010E19B8(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_1010E19E8(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1010E1A18(id a1)
{
  qword_102419318 = (uint64_t)os_log_create("com.apple.locationd.Motion", "BatchedSensor");
}

void sub_1010E1A48(id a1)
{
  qword_102419028 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ActivityAlarm");
}

void sub_1010E1A78(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1010E1AA8(id a1)
{
  qword_102419188 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

void sub_1010E1AD8(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_1010E1B08(id a1)
{
  qword_1024191E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Altimeter");
}

void sub_1010E1B38(id a1)
{
  qword_102419258 = (uint64_t)os_log_create("com.apple.locationd.Motion", "OnBody");
}

void sub_1010E1B68(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1010E1B98(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

void sub_1010E1BC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102310680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010E1BE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102310680;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010E1C3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1023106D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010E1C5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1023106D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010E1CB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102310720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010E1CD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102310720;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1010E1D24(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_1010E1D40(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_100177ED4;
    _OWORD v8[4] = nullsub_57;
    void v8[5] = "";
    __int16 v9 = *a2;
    char v10 = *((unsigned char *)a2 + 2);
    if (aBlock) {
      double v4 = _Block_copy(aBlock);
    }
    else {
      double v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E1E8C;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E1E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1010E1E8C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 11;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 3);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E1F0C(uint64_t a1, _OWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4C12000000;
    void v8[3] = sub_1010E2058;
    _OWORD v8[4] = nullsub_1347;
    void v8[5] = "";
    v9[0] = *a2;
    *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)((char *)a2 + 12);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E2070;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E2040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1010E2058(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1010E2070(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 10;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 28);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E20F0(uint64_t a1, const void *a2, void *a3)
{
  if (*(void *)(a1 + 8))
  {
    v9[0] = 0;
    v9[1] = v9;
    _OWORD v9[2] = 0x15012000000;
    v9[3] = sub_1010E2248;
    v9[4] = nullsub_1348;
    v9[5] = "";
    memcpy(v10, a2, sizeof(v10));
    if (a3) {
      int v5 = _Block_copy(a3);
    }
    else {
      int v5 = 0;
    }
    uint64_t v7 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E225C;
    block[3] = &unk_1022BCA88;
    void block[5] = v9;
    block[6] = a1;
    block[4] = v5;
    dispatch_async(v7, block);
    _Block_object_dispose(v9, 8);
  }
  else if (a3)
  {
    size_t v6 = (void (*)(void *, void))a3[2];
    v6(a3, 0);
  }
}

void sub_1010E2230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *sub_1010E2248(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 48), (const void *)(a2 + 48), 0x11AuLL);
}

void sub_1010E225C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 22;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 282);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E22DC(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3C12000000;
    void v8[3] = sub_1010E2428;
    _OWORD v8[4] = nullsub_1349;
    void v8[5] = "";
    void v8[6] = *(void *)a2;
    int v9 = *(_DWORD *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E2440;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E2410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E2428(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E2440(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 17;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 12);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E24C0(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E260C;
    _OWORD v8[4] = nullsub_1350;
    void v8[5] = "";
    void v8[6] = *(void *)a2;
    char v9 = *(unsigned char *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E2624;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E25F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E260C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E2624(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 15;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 9);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E26A4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 71) < 0) {
      operator delete(*(void **)(a2 + 48));
    }
    operator delete();
  }
}

void sub_1010E2700(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E2844;
    _OWORD v8[4] = nullsub_1351;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E2854;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E282C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E2844(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E2854(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 66;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E28D4(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E2A20;
    _OWORD v8[4] = nullsub_1352;
    void v8[5] = "";
    __int16 v9 = *a2;
    char v10 = *((unsigned char *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E2A38;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E2A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E2A20(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(unsigned char *)(result + 50) = *(unsigned char *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_1010E2A38(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 76;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 3);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E2AB8(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E2C04;
    _OWORD v8[4] = nullsub_1353;
    void v8[5] = "";
    __int16 v9 = *a2;
    char v10 = *((unsigned char *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E2C1C;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E2BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E2C04(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(unsigned char *)(result + 50) = *(unsigned char *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_1010E2C1C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 2;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 3);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E2C9C(uint64_t a1, int *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E2DE8;
    _OWORD v8[4] = nullsub_1354;
    void v8[5] = "";
    int v9 = *a2;
    __int16 v10 = *((_WORD *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E2E00;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E2DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E2DE8(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_WORD *)(result + 52) = *(_WORD *)(a2 + 52);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

void sub_1010E2E00(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 19;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 6);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E2E80(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E2FCC;
    _OWORD v8[4] = nullsub_1355;
    void v8[5] = "";
    __int16 v9 = *a2;
    char v10 = *((unsigned char *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E2FE4;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E2FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E2FCC(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(unsigned char *)(result + 50) = *(unsigned char *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_1010E2FE4(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 34;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 3);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E3064(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E31A8;
    _OWORD v8[4] = nullsub_1356;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E31B8;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E3190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E31A8(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E31B8(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 73;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E3238(uint64_t a1, _OWORD *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x5012000000;
    void v8[3] = sub_1010E3384;
    _OWORD v8[4] = nullsub_1357;
    void v8[5] = "";
    v9[0] = *a2;
    *(_OWORD *)((char *)v9 + 13) = *(_OWORD *)((char *)a2 + 13);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E339C;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E336C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1010E3384(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 61) = *(_OWORD *)(a2 + 61);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1010E339C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 35;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 29);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E341C(uint64_t a1, long long *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E3560;
    _OWORD v8[4] = nullsub_1358;
    void v8[5] = "";
    long long v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E3570;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E3548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1010E3560(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1010E3570(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 3;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 16);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E35F0(uint64_t a1, long long *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v9[0] = 0;
    v9[1] = v9;
    _OWORD v9[2] = 0x6812000000;
    v9[3] = sub_1010E3748;
    v9[4] = nullsub_1359;
    v9[5] = "";
    long long v4 = a2[1];
    long long v10 = *a2;
    long long v11 = v4;
    long long v12 = a2[2];
    uint64_t v13 = *((void *)a2 + 6);
    if (aBlock) {
      int v5 = _Block_copy(aBlock);
    }
    else {
      int v5 = 0;
    }
    uint64_t v7 = *(NSObject **)a1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    unsigned char v8[2] = sub_1010E3768;
    void v8[3] = &unk_1022BCA88;
    void v8[5] = v9;
    void v8[6] = a1;
    _OWORD v8[4] = v5;
    dispatch_async(v7, v8);
    _Block_object_dispose(v9, 8);
  }
  else if (aBlock)
  {
    size_t v6 = (void (*)(void *, void))*((void *)aBlock + 2);
    v6(aBlock, 0);
  }
}

void sub_1010E3730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1010E3748(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 80) = v4;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void sub_1010E3768(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 16;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 56);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E37E8(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E3934;
    _OWORD v8[4] = nullsub_1360;
    void v8[5] = "";
    __int16 v9 = *a2;
    char v10 = *((unsigned char *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E394C;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E391C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E3934(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(unsigned char *)(result + 50) = *(unsigned char *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_1010E394C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 28;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 3);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E39CC(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E3B10;
    _OWORD v8[4] = nullsub_1361;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E3B20;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E3AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E3B10(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E3B20(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 67;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E3BA0(uint64_t a1, void *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E3CEC;
    _OWORD v8[4] = nullsub_1362;
    void v8[5] = "";
    v9[0] = *a2;
    *(void *)((char *)v9 + 6) = *(void *)((char *)a2 + 6);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E3D04;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    int v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E3CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E3CEC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 54) = *(void *)(a2 + 54);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E3D04(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 13;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 14);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    int v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E3D84(uint64_t a1, long long *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v10[0] = 0;
    v10[1] = v10;
    uint64_t v10[2] = 0x8812000000;
    _OWORD v10[3] = sub_1010E3EE8;
    unsigned char v10[4] = nullsub_1363;
    int v10[5] = "";
    long long v4 = a2[3];
    long long v13 = a2[2];
    long long v14 = v4;
    long long v15 = a2[4];
    char v16 = *((unsigned char *)a2 + 80);
    long long v5 = a2[1];
    long long v11 = *a2;
    long long v12 = v5;
    if (aBlock) {
      size_t v6 = _Block_copy(aBlock);
    }
    else {
      size_t v6 = 0;
    }
    uint64_t v8 = *(NSObject **)a1;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1010E3F10;
    v9[3] = &unk_1022BCA88;
    v9[5] = v10;
    void v9[6] = a1;
    v9[4] = v6;
    dispatch_async(v8, v9);
    _Block_object_dispose(v10, 8);
  }
  else if (aBlock)
  {
    uint64_t v7 = (void (*)(void *, void))*((void *)aBlock + 2);
    v7(aBlock, 0);
  }
}

void sub_1010E3ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1010E3EE8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

void sub_1010E3F10(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 12;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 81);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E3F90(uint64_t a1, char *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E40D4;
    _OWORD v8[4] = nullsub_1364;
    void v8[5] = "";
    char v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E40E4;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E40BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E40D4(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  return result;
}

void sub_1010E40E4(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 20;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 1);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E4164(uint64_t a1, char *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E42A8;
    _OWORD v8[4] = nullsub_1365;
    void v8[5] = "";
    char v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E42B8;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E4290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E42A8(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  return result;
}

void sub_1010E42B8(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 23;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 1);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E4338(uint64_t a1, char *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E447C;
    _OWORD v8[4] = nullsub_1366;
    void v8[5] = "";
    char v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E448C;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E4464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E447C(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  return result;
}

void sub_1010E448C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 24;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 1);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E450C(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E4650;
    _OWORD v8[4] = nullsub_1367;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E4660;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E4638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E4650(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E4660(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 21;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E46E0(uint64_t a1, char *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E4824;
    _OWORD v8[4] = nullsub_1368;
    void v8[5] = "";
    char v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E4834;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E4824(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  return result;
}

void sub_1010E4834(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 33;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 1);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E48B4(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E4A00;
    _OWORD v8[4] = nullsub_1369;
    void v8[5] = "";
    void v8[6] = *(void *)a2;
    char v9 = *(unsigned char *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E4A18;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E49E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E4A00(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E4A18(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 38;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 9);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E4A98(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E4BE4;
    _OWORD v8[4] = nullsub_1370;
    void v8[5] = "";
    void v8[6] = *(void *)a2;
    char v9 = *(unsigned char *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E4BFC;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E4BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E4BE4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E4BFC(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 82;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 9);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E4C7C(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3C12000000;
    void v8[3] = sub_1010E4DC8;
    _OWORD v8[4] = nullsub_1371;
    void v8[5] = "";
    void v8[6] = *(void *)a2;
    int v9 = *(_DWORD *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E4DE0;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E4DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E4DC8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E4DE0(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 42;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 12);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E4E60(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E4FA4;
    _OWORD v8[4] = nullsub_1372;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E4FB4;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E4F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E4FA4(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E4FB4(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 44;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E5034(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E5178;
    _OWORD v8[4] = nullsub_1373;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E5188;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E5160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E5178(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E5188(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 26;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E5208(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E534C;
    _OWORD v8[4] = nullsub_1374;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E535C;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E5334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E534C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E535C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 39;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E53DC(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E5520;
    _OWORD v8[4] = nullsub_1375;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E5530;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E5508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E5520(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E5530(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 68;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E55B0(uint64_t a1, void *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E56FC;
    _OWORD v8[4] = nullsub_1376;
    void v8[5] = "";
    v9[0] = *a2;
    *(void *)((char *)v9 + 6) = *(void *)((char *)a2 + 6);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E5714;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E56E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E56FC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 54) = *(void *)(a2 + 54);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E5714(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 69;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 14);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E5794(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E58E0;
    _OWORD v8[4] = nullsub_1377;
    void v8[5] = "";
    void v8[6] = *(void *)a2;
    __int16 v9 = *(_WORD *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E58F8;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E58C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E58E0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_WORD *)(result + 56) = *(_WORD *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E58F8(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 77;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 10);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E5978(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E5ABC;
    _OWORD v8[4] = nullsub_1378;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E5ACC;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E5AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E5ABC(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E5ACC(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 78;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E5B4C(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E5C98;
    _OWORD v8[4] = nullsub_1379;
    void v8[5] = "";
    void v8[6] = *(void *)a2;
    char v9 = *(unsigned char *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E5CB0;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E5C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E5C98(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E5CB0(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 79;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 9);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E5D30(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3C12000000;
    void v8[3] = sub_1010E5E7C;
    _OWORD v8[4] = nullsub_1380;
    void v8[5] = "";
    void v8[6] = *(void *)a2;
    int v9 = *(_DWORD *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E5E94;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E5E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E5E7C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E5E94(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 47;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 12);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E5F14(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E6060;
    _OWORD v8[4] = nullsub_1381;
    void v8[5] = "";
    void v8[6] = *(void *)a2;
    char v9 = *(unsigned char *)(a2 + 8);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E6078;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E6048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E6060(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E6078(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 48;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 9);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E60F8(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E623C;
    _OWORD v8[4] = nullsub_1382;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E624C;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E6224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E623C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E624C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 70;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E62CC(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E6410;
    _OWORD v8[4] = nullsub_1383;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E6420;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E63F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E6410(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E6420(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 41;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E64A0(uint64_t a1, int *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E65E4;
    _OWORD v8[4] = nullsub_1384;
    void v8[5] = "";
    int v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    size_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E65F4;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    long long v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E65CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E65E4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  return result;
}

void sub_1010E65F4(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 4;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 4);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    long long v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E6674(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    size_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    double v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      char v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  double v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  double v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1010E6940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010E698C(uint64_t a1, void *a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v4 = a2[4];
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = (char *)(v5 + 8 * (v4 >> 8));
  if (v6 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v11 = 0;
    uint64_t v10 = (char *)(v5 + 8 * ((a2[5] + v4) >> 8));
  }
  else
  {
    uint64_t v8 = (long long *)(*(void *)v7 + 16 * v4);
    unint64_t v9 = a2[5] + v4;
    uint64_t v10 = (char *)(v5 + 8 * (v9 >> 8));
    uint64_t v11 = (long long *)(*(void *)v10 + 16 * v9);
  }
  sub_1010E6A30((void *)a1, v7, v8, v10, v11);
  return a1;
}

void sub_1010E6A1C(_Unwind_Exception *a1)
{
  sub_1000D7EB4(v1);
  _Unwind_Resume(a1);
}

void *sub_1010E6A30(void *a1, char *a2, long long *a3, char *a4, long long *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (((uint64_t)a5 - *(void *)a4) >> 4) + 32 * (a4 - a2) - (((uint64_t)a3 - *(void *)a2) >> 4);
  }
  return sub_1010E6A64(a1, a2, a3, v5);
}

void *sub_1010E6A64(void *a1, void *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 32 * (v9 - v8) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_1010E6B94(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  uint64_t v13 = (void *)(v8 + 8 * (v11 >> 8));
  if (v9 == v8) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *v13 + 16 * v11;
  }
  v22[0] = v8 + 8 * (v11 >> 8);
  v22[1] = v14;
  __n128 result = sub_1000D9B0C((uint64_t)v22, a4);
  while (v14 != v16)
  {
    uint64_t v17 = (_OWORD *)(v13 == result ? v16 : *v13 + 4096);
    if ((_OWORD *)v14 == v17)
    {
      uint64_t v17 = (_OWORD *)v14;
    }
    else
    {
      uint64_t v18 = (_OWORD *)v14;
      do
      {
        long long v19 = *a3++;
        *uint64_t v18 = v19;
        if ((long long *)((char *)a3 - *a2) == (long long *)4096)
        {
          int64_t v20 = (long long *)a2[1];
          ++a2;
          a3 = v20;
        }
        ++v18;
      }
      while (v18 != v17);
    }
    a1[5] += ((uint64_t)v17 - v14) >> 4;
    if (v13 == result) {
      break;
    }
    uint64_t v21 = v13[1];
    ++v13;
    uint64_t v14 = v21;
  }
  return result;
}

void sub_1010E6B94(void *a1, unint64_t a2)
{
  BOOL v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if ((_BYTE)v5) {
    unint64_t v6 = (v5 >> 8) + 1;
  }
  else {
    unint64_t v6 = v5 >> 8;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 >> 8) {
    unint64_t v8 = v7 >> 8;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      uint64_t v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          double v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          long long v31 = &v29[8 * (v28 >> 2)];
          long long v32 = (uint64_t *)a1[1];
          BOOL v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            BOOL v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            uint64_t v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)uint64_t v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          uint64_t v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            BOOL v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            BOOL v3 = (char *)a1[1];
          }
          double v27 = &v3[-8 * (v24 >> 1)];
          BOOL v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)BOOL v3 = v18;
      BOOL v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 255;
          }
          else {
            uint64_t v64 = 256;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        uint64_t v66 = (char *)a1[2];
        do
        {
          uint64_t v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          int v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              __int16 v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              __int16 v81 = &v79[8 * (v78 >> 2)];
              double v82 = (uint64_t *)a1[1];
              uint64_t v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                uint64_t v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                __int16 v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)__int16 v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              __int16 v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                uint64_t v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              __int16 v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                uint64_t v66 = (char *)a1[1];
              }
              __int16 v77 = &v66[-8 * (v74 >> 1)];
              uint64_t v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)uint64_t v66 = v69;
          uint64_t v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __int16 v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        double v88 = operator new(0x1000uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        uint64_t v39 = (void *)a1[1];
        uint64_t v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              uint64_t v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              uint64_t v51 = (uint64_t *)__p[1];
              uint64_t v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                uint64_t v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                long long v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)long long v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              uint64_t v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                uint64_t v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              uint64_t v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                uint64_t v40 = (char *)__p[1];
              }
              uint64_t v47 = &v40[-8 * (v44 >> 1)];
              uint64_t v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)uint64_t v40 = *v39;
          uint64_t v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          uint64_t v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      unint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      unint64_t v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] -= v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_1010E70AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010E7120(uint64_t result, long long *a2, char *a3, long long *a4, char *a5, long long *a6, uint64_t a7)
{
  uint64_t v56 = (void *)result;
  unint64_t v57 = a2;
  if (a6 != a4)
  {
    unint64_t v8 = a6;
    do
    {
      if (v8 == v57) {
        break;
      }
      __n128 result = (uint64_t)v56;
      uint64_t v11 = *(long long **)a5;
      uint64_t v12 = (((uint64_t)v8 - *(void *)a5) >> 4) + 32 * (a5 - (char *)v56) - (((uint64_t)v57 - *v56) >> 4);
      if ((unint64_t)v12 < 2) {
        break;
      }
      if (v12 == 3)
      {
        uint64_t v49 = v57 + 1;
        uint64_t v50 = v56;
        if ((long long *)((char *)v57 - *v56 + 16) == (long long *)4096)
        {
          uint64_t v50 = v56 + 1;
          uint64_t v49 = (long long *)v56[1];
        }
        if (v8 == v11)
        {
          uint64_t v51 = *((void *)a5 - 1);
          a5 -= 8;
          unint64_t v8 = (long long *)(v51 + 4096);
        }
        return sub_1010E7730((uint64_t)v56, v57, (uint64_t)v50, v49, (uint64_t)a5, v8 - 1, a7);
      }
      if (v12 == 2)
      {
        uint64_t v52 = *(void *)a7;
        if (v8 == v11) {
          unint64_t v8 = (long long *)(*((void *)a5 - 1) + 4096);
        }
        uint64_t v53 = v8 - 1;
        __n128 result = (*(uint64_t (**)(uint64_t, long long *, long long *))(v52 + 16))(v52, v8 - 1, v57);
        if (result)
        {
          long long v58 = *v57;
          long long v54 = v58;
          *unint64_t v57 = *v53;
          *uint64_t v53 = v54;
        }
        return result;
      }
      if (v12 <= 7) {
        return (uint64_t)sub_1010E7850(v56, v57, a5, (uint64_t)v8, a7);
      }
      unint64_t v13 = a3;
      uint64_t v15 = sub_1000D9B0C((uint64_t)&v56, (unint64_t)v12 >> 1);
      uint64_t v16 = v14;
      uint64_t v17 = a5;
      uint64_t v18 = (uint64_t)v8;
      if (v8 == *(long long **)a5)
      {
        uint64_t v17 = a5 - 8;
        uint64_t v18 = *((void *)a5 - 1) + 4096;
      }
      uint64_t v19 = (long long *)(v18 - 16);
      int v20 = sub_1010E7730((uint64_t)v56, v57, (uint64_t)v15, v14, (uint64_t)v17, (long long *)(v18 - 16), a7);
      uint64_t v21 = (char *)v56;
      BOOL v22 = v57;
      __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
      if ((result & 1) == 0)
      {
        do
        {
          if (v19 == *(long long **)v17)
          {
            uint64_t v23 = *((void *)v17 - 1);
            v17 -= 8;
            uint64_t v19 = (long long *)(v23 + 4096);
          }
          if (v22 == --v19)
          {
            uint64_t v39 = v22 + 1;
            if ((long long *)((char *)v39 - *(void *)v21) == (long long *)4096)
            {
              uint64_t v40 = (long long *)*((void *)v21 + 1);
              v21 += 8;
              uint64_t v39 = v40;
            }
            a3 = v13;
            int64_t v41 = a5;
            uint64_t v42 = (uint64_t)v8;
            uint64_t v30 = a4;
            if (v8 == *(long long **)a5)
            {
              int64_t v41 = a5 - 8;
              uint64_t v42 = *((void *)a5 - 1) + 4096;
            }
            uint64_t v43 = (long long *)(v42 - 16);
            __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
            if ((result & 1) == 0)
            {
              while (1)
              {
                if (v39 == v43) {
                  return result;
                }
                __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
                if (result) {
                  break;
                }
                if ((long long *)((char *)++v39 - *(void *)v21) == (long long *)4096)
                {
                  int64_t v46 = (long long *)*((void *)v21 + 1);
                  v21 += 8;
                  uint64_t v39 = v46;
                }
              }
              long long v58 = *v39;
              *v39++ = *v43;
              long long *v43 = v58;
              if ((long long *)((char *)v39 - *(void *)v21) == (long long *)4096)
              {
                unint64_t v48 = (long long *)*((void *)v21 + 1);
                v21 += 8;
                uint64_t v39 = v48;
              }
            }
            if (v39 == v43) {
              return result;
            }
            while (1)
            {
              if ((*(uint64_t (**)(void))(*(void *)a7 + 16))())
              {
                do
                {
                  if (v43 == *(long long **)v41)
                  {
                    uint64_t v45 = *((void *)v41 - 1);
                    v41 -= 8;
                    uint64_t v43 = (long long *)(v45 + 4096);
                  }
                  --v43;
                  __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
                }
                while ((result & 1) != 0);
                if (v21 >= v41 && (v21 != v41 || v39 >= v43))
                {
                  if (v21 > a3 || v39 > a4 && v21 == a3) {
                    return result;
                  }
LABEL_85:
                  uint64_t v56 = v21;
                  unint64_t v57 = v39;
                  goto LABEL_86;
                }
                long long v58 = *v39;
                *uint64_t v39 = *v43;
                long long *v43 = v58;
              }
              if ((long long *)((char *)++v39 - *(void *)v21) == (long long *)4096)
              {
                uint64_t v44 = (long long *)*((void *)v21 + 1);
                v21 += 8;
                uint64_t v39 = v44;
              }
            }
          }
          __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
        }
        while (!result);
        long long v58 = *v22;
        long long v24 = v58;
        long long *v22 = *v19;
        long long *v19 = v24;
        ++v20;
      }
      unint64_t v25 = v22 + 1;
      if ((long long *)((char *)v25 - *(void *)v21) == (long long *)4096)
      {
        int64_t v26 = (long long *)*((void *)v21 + 1);
        v21 += 8;
        unint64_t v25 = v26;
      }
      if (v21 < v17 || v21 == v17 && v25 < v19)
      {
        while (1)
        {
          if ((*(unsigned int (**)(void))(*(void *)a7 + 16))())
          {
            do
            {
              if ((long long *)((char *)++v25 - *(void *)v21) == (long long *)4096)
              {
                double v27 = (long long *)*((void *)v21 + 1);
                v21 += 8;
                unint64_t v25 = v27;
              }
            }
            while (((*(uint64_t (**)(void))(*(void *)a7 + 16))() & 1) != 0);
          }
          do
          {
            if (v19 == *(long long **)v17)
            {
              uint64_t v28 = *((void *)v17 - 1);
              v17 -= 8;
              uint64_t v19 = (long long *)(v28 + 4096);
            }
            --v19;
            __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
          }
          while (!result);
          if (v21 >= v17 && (v21 != v17 || v25 >= v19)) {
            break;
          }
          long long v58 = *v25;
          long long *v25 = *v19;
          long long *v19 = v58;
          ++v20;
          if (v16 == v25) {
            uint64_t v16 = v19;
          }
          if ((long long *)((char *)++v25 - *(void *)v21) == (long long *)4096)
          {
            double v29 = (long long *)*((void *)v21 + 1);
            v21 += 8;
            unint64_t v25 = v29;
          }
        }
      }
      a3 = v13;
      uint64_t v30 = a4;
      if (v25 != v16)
      {
        __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
        if (result)
        {
          long long v58 = *v25;
          long long *v25 = *v16;
          long long *v16 = v58;
          ++v20;
        }
      }
      if (v25 == a4) {
        return result;
      }
      if (!v20)
      {
        if (v21 > a3 || (v31 = v25, long long v32 = v21, v25 > a4) && (v31 = v25, long long v32 = v21, v21 == a3))
        {
          uint64_t v34 = v56;
          uint64_t v33 = v57;
          while (1)
          {
            uint64_t v35 = v33 + 1;
            if ((long long *)((char *)v33 - *v34 + 16) == (long long *)4096)
            {
              uint64_t v36 = (long long *)v34[1];
              ++v34;
              uint64_t v35 = v36;
            }
            if (v35 == v25) {
              break;
            }
            __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
            uint64_t v33 = v35;
            if (result) {
              goto LABEL_40;
            }
          }
        }
        else
        {
          while (1)
          {
            uint64_t v37 = v31 + 1;
            if ((long long *)((char *)v31 - *(void *)v32 + 16) == (long long *)4096)
            {
              uint64_t v38 = (long long *)*((void *)v32 + 1);
              v32 += 8;
              uint64_t v37 = v38;
            }
            if (v37 == v8) {
              break;
            }
            __n128 result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
            long long v31 = v37;
            if (result) {
              goto LABEL_40;
            }
          }
        }
        return result;
      }
LABEL_40:
      if (v21 <= a3)
      {
        if (v25 <= a4 || v21 != a3)
        {
          uint64_t v39 = v25 + 1;
          if ((long long *)((char *)v39 - *(void *)v21) == (long long *)4096)
          {
            uint64_t v47 = (long long *)*((void *)v21 + 1);
            v21 += 8;
            uint64_t v39 = v47;
          }
          goto LABEL_85;
        }
        unint64_t v8 = v25;
        a5 = a3;
      }
      else
      {
        unint64_t v8 = v25;
        a5 = v21;
      }
LABEL_86:
      ;
    }
    while (v8 != v30);
  }
  return result;
}

uint64_t sub_1010E7730(uint64_t a1, long long *a2, uint64_t a3, long long *a4, uint64_t a5, long long *a6, uint64_t a7)
{
  char v11 = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)a7 + 16))();
  if ((v11 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    long long v14 = *a4;
    *a4 = *a6;
    *a6 = v14;
    if (!(*(unsigned int (**)(void))(*(void *)a7 + 16))()) {
      return 1;
    }
    long long v15 = *a2;
    *a2 = *a4;
    *a4 = v15;
    return 2;
  }
  if (!result)
  {
    long long v16 = *a2;
    *a2 = *a4;
    *a4 = v16;
    if (!(*(unsigned int (**)(void))(*(void *)a7 + 16))()) {
      return 1;
    }
    long long v17 = *a4;
    *a4 = *a6;
    *a6 = v17;
    return 2;
  }
  long long v13 = *a2;
  *a2 = *a6;
  *a6 = v13;
  return 1;
}

void *sub_1010E7850(void *result, long long *a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8 = a2;
  unint64_t v9 = result;
  uint64_t v10 = a4;
  if (*a3 == a4) {
    uint64_t v10 = *(a3 - 1) + 4096;
  }
  char v11 = (long long *)(v10 - 16);
  if ((long long *)(v10 - 16) != a2)
  {
    do
    {
      uint64_t result = sub_1010E7914(v9, (uint64_t)v8, (uint64_t)a3, a4, a5);
      if (v8 != v12)
      {
        long long v14 = *v8;
        long long *v8 = *v12;
        long long *v12 = v14;
      }
      if ((long long *)((char *)++v8 - *v9) == (long long *)4096)
      {
        long long v13 = (long long *)v9[1];
        ++v9;
        unint64_t v8 = v13;
      }
    }
    while (v8 != v11);
  }
  return result;
}

void *sub_1010E7914(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = a1;
  if (a2 != a4)
  {
    uint64_t v8 = a2;
    unint64_t v9 = a1;
    while (1)
    {
      v8 += 16;
      if (v8 - *v9 == 4096)
      {
        uint64_t v10 = v9[1];
        ++v9;
        uint64_t v8 = v10;
      }
      if (v8 == a4) {
        break;
      }
      if ((*(unsigned int (**)(void))(*(void *)a5 + 16))()) {
        unint64_t v5 = v9;
      }
    }
  }
  return v5;
}

void sub_1010E79B0(uint64_t a1, long long *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4812000000;
    void v8[3] = sub_1010E7AFC;
    _OWORD v8[4] = nullsub_1385;
    void v8[5] = "";
    long long v9 = *a2;
    uint64_t v10 = *((void *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E7B14;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E7AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1010E7AFC(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void sub_1010E7B14(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 5;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 24);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E7B94(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E7CD8;
    _OWORD v8[4] = nullsub_1386;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E7CE8;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E7CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E7CD8(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E7CE8(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 36;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E7D68(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E7EB4;
    _OWORD v8[4] = nullsub_1387;
    void v8[5] = "";
    __int16 v9 = *a2;
    char v10 = *((unsigned char *)a2 + 2);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E7ECC;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E7E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E7EB4(uint64_t result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 48);
  *(unsigned char *)(result + 50) = *(unsigned char *)(a2 + 50);
  *(_WORD *)(result + 48) = v2;
  return result;
}

void sub_1010E7ECC(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 9;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 3);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E7F4C(uint64_t a1, long long *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E8090;
    _OWORD v8[4] = nullsub_1388;
    void v8[5] = "";
    long long v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E80A0;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E8078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1010E8090(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1010E80A0(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 14;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 16);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E8120(uint64_t a1, void *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x4012000000;
    void v8[3] = sub_1010E826C;
    _OWORD v8[4] = nullsub_1389;
    void v8[5] = "";
    v9[0] = *a2;
    *(void *)((char *)v9 + 5) = *(void *)((char *)a2 + 5);
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1010E8284;
    block[3] = &unk_1022BCA88;
    void block[5] = v8;
    block[6] = a1;
    block[4] = v4;
    dispatch_async(v6, block);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E8254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E826C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 53) = *(void *)(a2 + 53);
  *(void *)(result + 48) = v2;
  return result;
}

void sub_1010E8284(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 30;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 13);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E8304(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E8448;
    _OWORD v8[4] = nullsub_1390;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E8458;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E8430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E8448(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E8458(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 45;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E84D8(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E861C;
    _OWORD v8[4] = nullsub_1391;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E862C;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E8604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E861C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E862C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 49;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E86AC(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E87F0;
    _OWORD v8[4] = nullsub_1392;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E8800;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E87D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E87F0(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E8800(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 52;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E8880(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E89C4;
    _OWORD v8[4] = nullsub_1393;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E89D4;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E89AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E89C4(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E89D4(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 54;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E8A54(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E8B98;
    _OWORD v8[4] = nullsub_1394;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E8BA8;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E8B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E8B98(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E8BA8(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 55;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E8C28(uint64_t a1, __int16 *a2, void *aBlock)
{
  if (*(void *)(a1 + 8))
  {
    v8[0] = 0;
    v8[1] = v8;
    unsigned char v8[2] = 0x3812000000;
    void v8[3] = sub_1010E8D6C;
    _OWORD v8[4] = nullsub_1395;
    void v8[5] = "";
    __int16 v9 = *a2;
    if (aBlock) {
      uint64_t v4 = _Block_copy(aBlock);
    }
    else {
      uint64_t v4 = 0;
    }
    unint64_t v6 = *(NSObject **)a1;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _OWORD v7[2] = sub_1010E8D7C;
    void v7[3] = &unk_1022BCA88;
    void v7[5] = v8;
    void v7[6] = a1;
    v7[4] = v4;
    dispatch_async(v6, v7);
    _Block_object_dispose(v8, 8);
  }
  else if (aBlock)
  {
    unint64_t v5 = (void (*)(void *, void))*((void *)aBlock + 2);
    v5(aBlock, 0);
  }
}

void sub_1010E8D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1010E8D6C(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 48) = *(_WORD *)(a2 + 48);
  return result;
}

void sub_1010E8D7C(void *a1)
{
  uint64_t v2 = a1[6];
  *(unsigned char *)(*(void *)(a1[5] + 8) + 48) = 56;
  BOOL v3 = sub_100172054(v2, *(void *)(a1[5] + 8) + 48, 2);
  uint64_t v4 = a1[4];
  if (v4)
  {
    (*(void (**)(uint64_t, BOOL))(v4 + 16))(v4, v3);
    unint64_t v5 = (const void *)a1[4];
    _Block_release(v5);
  }
}

void sub_1010E8DFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DA6780;
      v0[3] = unk_101DA6790;
      v0[4] = xmmword_101DA67A0;
      v0[0] = xmmword_101DA6760;
      v0[1] = unk_101DA6770;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1010E8EDC(_Unwind_Exception *a1)
{
}

uint64_t sub_1010E8EF4()
{
  sub_100134750(qword_102485210, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_102485210, (void *)&_mh_execute_header);
  qword_102485230 = 0;
  unk_102485238 = 0;
  qword_102485228 = 0;
  uint64_t v0 = operator new(0x48uLL);
  qword_102485230 = (uint64_t)v0 + 72;
  unk_102485238 = (char *)v0 + 72;
  v0[2] = xmmword_101DA6918;
  v0[3] = unk_101DA6928;
  *((void *)v0 + 8) = 0x4120000040A00000;
  _OWORD *v0 = xmmword_101DA68F8;
  v0[1] = unk_101DA6908;
  qword_102485228 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102485228, (void *)&_mh_execute_header);
  qword_102485248 = 0;
  unk_102485250 = 0;
  qword_102485240 = 0;
  uint64_t v1 = operator new(0x44uLL);
  qword_102485248 = (uint64_t)(v1 + 17);
  unk_102485250 = v1 + 17;
  v1[16] = 1120403456;
  *(_OWORD *)uint64_t v1 = xmmword_101DA6940;
  *((_OWORD *)v1 + 1) = unk_101DA6950;
  *((_OWORD *)v1 + 2) = xmmword_101DA6960;
  *((_OWORD *)v1 + 3) = unk_101DA6970;
  qword_102485240 = (uint64_t)v1;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102485240, (void *)&_mh_execute_header);
  qword_102485260 = 0;
  unk_102485268 = 0;
  qword_102485258 = 0;
  uint64_t v2 = operator new(0x64uLL);
  qword_102485260 = (uint64_t)(v2 + 25);
  unk_102485268 = v2 + 25;
  v2[24] = 1203982336;
  *((_OWORD *)v2 + 2) = xmmword_101DA69A4;
  *((_OWORD *)v2 + 3) = unk_101DA69B4;
  *((_OWORD *)v2 + 4) = xmmword_101DA69C4;
  *((_OWORD *)v2 + 5) = unk_101DA69D4;
  *(_OWORD *)uint64_t v2 = xmmword_101DA6984;
  *((_OWORD *)v2 + 1) = unk_101DA6994;
  qword_102485258 = (uint64_t)v2;
  __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102485258, (void *)&_mh_execute_header);
  qword_102485278 = 0;
  unk_102485280 = 0;
  qword_102485270 = 0;
  BOOL v3 = operator new(0x54uLL);
  qword_102485278 = (uint64_t)(v3 + 21);
  unk_102485280 = v3 + 21;
  v3[20] = 1092616192;
  *((_OWORD *)v3 + 2) = xmmword_101DA6A08;
  *((_OWORD *)v3 + 3) = unk_101DA6A18;
  *((_OWORD *)v3 + 4) = xmmword_101DA6A28;
  *(_OWORD *)BOOL v3 = xmmword_101DA69E8;
  *((_OWORD *)v3 + 1) = unk_101DA69F8;
  qword_102485270 = (uint64_t)v3;

  return __cxa_atexit((void (*)(void *))sub_1003B1838, &qword_102485270, (void *)&_mh_execute_header);
}

void *sub_1010E90D4(uint64_t a1, uint64_t a2, void *a3)
{
  __n128 result = (void *)sub_1010E9110(a1, "CLWifiService", a3);
  *__n128 result = off_102310D08;
  return result;
}

uint64_t sub_1010E9110(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102310E18;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1010E91A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010E91BC(void *a1)
{
  *a1 = off_102310D08;
  if (qword_10248B310) {
    (*(void (**)(uint64_t))(*(void *)qword_10248B310 + 8))(qword_10248B310);
  }
  qword_10248B310 = 0;

  return sub_1010E9240((uint64_t)a1);
}

uint64_t sub_1010E9240(uint64_t a1)
{
  *(void *)a1 = off_102310E18;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1010E92CC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1010E935C;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024852B0 != -1) {
    dispatch_once(&qword_1024852B0, block);
  }
  return qword_10248B310;
}

void sub_1010E935C()
{
}

void sub_1010E93A8()
{
}

uint64_t sub_1010E93CC(uint64_t result, _DWORD *a2)
{
  uint64_t v2 = *(unsigned __int16 *)(result + 28);
  uint64_t v3 = *(unsigned __int16 *)(result + 30);
  unint64_t v4 = *(unsigned int *)(result + 32);
  if (v2 + v3 >= v4) {
    uint64_t v5 = *(unsigned int *)(result + 32);
  }
  else {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(result + 28 + 4 * (v2 + v3 - v5) + 8) = *a2;
  if (v4 <= v3)
  {
    unint64_t v6 = v2 + 1;
    if (v6 < v4) {
      LOWORD(v4) = 0;
    }
    *(_WORD *)(result + 28) = v6 - v4;
  }
  else
  {
    *(_WORD *)(result + 30) = v3 + 1;
  }
  *(unsigned char *)(result + 12) = 1;
  uint64_t v7 = *(unsigned __int16 *)(result + 1078);
  unint64_t v8 = *(unsigned int *)(result + 1080);
  uint64_t v9 = *(unsigned __int16 *)(result + 1076);
  if (v9 + v7 >= v8) {
    uint64_t v10 = *(unsigned int *)(result + 1080);
  }
  else {
    uint64_t v10 = 0;
  }
  *(_DWORD *)(result + 1076 + 4 * (v9 + v7 - v10) + 8) = a2[1];
  if (v8 <= v7)
  {
    if (v9 + 1 < v8) {
      LOWORD(v8) = 0;
    }
    *(_WORD *)(result + 1076) = v9 + 1 - v8;
  }
  else
  {
    *(_WORD *)(result + 1078) = v7 + 1;
  }
  *(unsigned char *)(result + 1060) = 1;
  uint64_t v11 = *(unsigned __int16 *)(result + 2126);
  unint64_t v12 = *(unsigned int *)(result + 2128);
  uint64_t v13 = *(unsigned __int16 *)(result + 2124);
  if (v13 + v11 >= v12) {
    uint64_t v14 = *(unsigned int *)(result + 2128);
  }
  else {
    uint64_t v14 = 0;
  }
  *(_DWORD *)(result + 2124 + 4 * (v13 + v11 - v14) + 8) = a2[2];
  if (v12 <= v11)
  {
    if (v13 + 1 < v12) {
      LOWORD(v12) = 0;
    }
    *(_WORD *)(result + 2124) = v13 + 1 - v12;
  }
  else
  {
    *(_WORD *)(result + 2126) = v11 + 1;
  }
  *(unsigned char *)(result + 2108) = 1;
  return result;
}

void sub_1010E9528(id a1)
{
  if (sub_10073D86C()) {
    qword_1024852B8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLOdometerAlarmManagerSilo"];
  }
}

void sub_1010E9734(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  if (*a2 == 5)
  {
LABEL_8:
    [a4 handleLocationData:a3];
    return;
  }
  if (!*a2)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102310F28);
    }
    unint64_t v6 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "BATCH: Should not be registered for location", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102310F28);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void (anonymous namespace)::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    goto LABEL_8;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_102310F28);
  }
  unint64_t v8 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    int v9 = *a2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "BATCH: Unexpected notification: %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102310F28);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void (anonymous namespace)::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_1010E9A40(uint64_t a1, int *a2, uint64_t a3, void *a4)
{
  if (*a2 == 16)
  {
    [a4 handleOdometerData:];
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_102310F28);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      int v6 = *a2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "BATCH: Unexpected notification: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_102310F28);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void (anonymous namespace)::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_1010E9D78(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

int64_t sub_1010E9D8C(id a1, id a2, id a3)
{
  [a2 odometerTarget];
  double v6 = v5;
  [a3 odometerTarget];
  if (v6 < v7) {
    return -1;
  }
  [a2 odometerTarget];
  double v10 = v9;
  [a3 odometerTarget];
  return v10 != v11;
}

void sub_1010E9E50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1010EA40C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1010EA76C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1010EA87C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) firstAlarm];
  double v3 = *(double *)(a1 + 40);

  return _[v2 fire:0 withError:v3];
}

id sub_1010EAA30(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = +[NSError errorWithDomain:kCLErrorDomain code:11 userInfo:0];

  return _[v1 fire:v2 withError:-1.0];
}

void sub_1010EABE8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1010EAC18()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1010EAC98()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1010EAD28(_Unwind_Exception *a1)
{
}

void sub_1010EAD40()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101DA6D68;
      v0[3] = unk_101DA6D78;
      v0[4] = xmmword_101DA6D88;
      v0[0] = xmmword_101DA6D48;
      v0[1] = unk_101DA6D58;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1010EAE20(_Unwind_Exception *a1)
{
}

uint64_t sub_1010EAE38(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102310F48);
  }
  id v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLTelephonyIratManager", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102310F48);
    }
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLTelephonyIratManager::CLTelephonyIratManager()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_100103240();
  if ((sub_100740C1C() & 1) != 0 || (sub_100103240(), sub_10016CCBC()))
  {
    id v3 = objc_alloc_init((Class)WRM_iRATInterface);
    *(void *)a1 = v3;
    if (v3)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102310F48);
      }
      unint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        unint64_t v12 = "";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,CLTelephonyIratManager initialized\"}", buf, 0x12u);
      }
      [*(id *)a1 registerClient:16 queue:[dispatch_queue_create("com.apple.Client.wirelesscoexmanager", 0)]];
      sub_1010EB1F8(a1, 1u);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102310F48);
      }
      double v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        unint64_t v12 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#irat,CLTelephonyIratManager init failed\"}", buf, 0x12u);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102310F48);
        }
      }
      double v6 = qword_1024193D8;
      if (os_signpost_enabled((os_log_t)qword_1024193D8))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        int v10 = 0;
        __int16 v11 = 2082;
        unint64_t v12 = "";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#irat,CLTelephonyIratManager init failed", "{\"msg%{public}.0s\":\"#irat,CLTelephonyIratManager init failed\"}", buf, 0x12u);
      }
    }
  }
  return a1;
}

void sub_1010EB1DC(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1010EB1F8(uint64_t a1, unsigned int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102310F48);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 4) {
      double v5 = "AssertLevelUnknown";
    }
    else {
      double v5 = (&off_102310F68)[a2];
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v22 = 0;
    __int16 v23 = 2082;
    long long v24 = "";
    __int16 v25 = 2082;
    int64_t v26 = (void *)v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,assertCommCenterBaseBand\", \"level\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (!*(void *)a1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102310F48);
    }
    uint64_t v9 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v22 = 0;
    __int16 v23 = 2082;
    long long v24 = "";
    int v10 = "{\"msg%{public}.0s\":\"#irat,skip irat assertion for this platform. IratClient not initialized\"}";
LABEL_24:
    __int16 v11 = v9;
    uint32_t v12 = 18;
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, v10, buf, v12);
    return;
  }
  sub_100103240();
  uint64_t v6 = sub_100740C1C();
  if ((v6 & 1) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102310F48);
    }
    uint64_t v9 = qword_1024193D8;
    if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    int v22 = 0;
    __int16 v23 = 2082;
    long long v24 = "";
    int v10 = "{\"msg%{public}.0s\":\"#irat,skip irat assertion for un-supported platform\"}";
    goto LABEL_24;
  }
  if (*(_DWORD *)(a1 + 8) == a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102310F48);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      if (a2 > 4) {
        unint64_t v8 = "AssertLevelUnknown";
      }
      else {
        unint64_t v8 = (&off_102310F68)[a2];
      }
      *(_DWORD *)uint64_t buf = 68289282;
      int v22 = 0;
      __int16 v23 = 2082;
      long long v24 = "";
      __int16 v25 = 2082;
      int64_t v26 = (void *)v8;
      int v10 = "{\"msg%{public}.0s\":\"#irat,skip repeated irat assertion\", \"level\":%{public, location:escape_only}s}";
      __int16 v11 = v7;
      uint32_t v12 = 28;
      goto LABEL_25;
    }
  }
  else
  {
    unsigned int v20 = 0;
    if (sub_1010EB70C(v6, a2, &v20))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102310F48);
      }
      int v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        if (a2 > 4) {
          uint64_t v14 = "AssertLevelUnknown";
        }
        else {
          uint64_t v14 = (&off_102310F68)[a2];
        }
        uint64_t v17 = v20;
        *(_DWORD *)uint64_t buf = 68289538;
        int v22 = 0;
        __int16 v23 = 2082;
        long long v24 = "";
        __int16 v25 = 2082;
        int64_t v26 = (void *)v14;
        __int16 v27 = 1026;
        unsigned int v28 = v20;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,spi,assertCommCenterBaseband\", \"assertion\":%{public, location:escape_only}s, \"wrmState\":%{public}d}", buf, 0x22u);
      }
      else
      {
        uint64_t v17 = v20;
      }
      *(_DWORD *)(a1 + 8) = a2;
      [*(id *)a1 assertCommCenterBaseBand:v17];
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102310F48);
      }
      long long v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        long long v16 = a2 > 4 ? "AssertLevelUnknown" : (&off_102310F68)[a2];
        *(_DWORD *)uint64_t buf = 68289282;
        int v22 = 0;
        __int16 v23 = 2082;
        long long v24 = "";
        __int16 v25 = 2082;
        int64_t v26 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#irat,Assertion level not implemented/supported\", \"assertion\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102310F48);
        }
      }
      uint64_t v18 = qword_1024193D8;
      if (os_signpost_enabled((os_log_t)qword_1024193D8))
      {
        if (a2 > 4) {
          uint64_t v19 = "AssertLevelUnknown";
        }
        else {
          uint64_t v19 = (&off_102310F68)[a2];
        }
        *(_DWORD *)uint64_t buf = 68289282;
        int v22 = 0;
        __int16 v23 = 2082;
        long long v24 = "";
        __int16 v25 = 2082;
        int64_t v26 = (void *)v19;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#irat,Assertion level not implemented/supported", "{\"msg%{public}.0s\":\"#irat,Assertion level not implemented/supported\", \"assertion\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
    }
  }
}

BOOL sub_1010EB70C(uint64_t a1, int a2, _DWORD *a3)
{
  switch(a2)
  {
    case 3:
      BOOL result = 1;
      *a3 = 1;
      return result;
    case 2:
      *a3 = 2;
      return 1;
    case 1:
      *a3 = 0;
      return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102310F48);
  }
  double v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v6 = "AssertLevelUnknown";
    if (a2 == 4) {
      uint64_t v6 = "kOnline";
    }
    int v9 = 68289282;
    int v10 = 0;
    uint32_t v12 = "";
    __int16 v11 = 2082;
    if (!a2) {
      uint64_t v6 = "kNone";
    }
    __int16 v13 = 2082;
    uint64_t v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#irat,Invalid conversion to WRM state requested\", \"state\":%{public, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102310F48);
    }
  }
  uint64_t v7 = qword_1024193D8;
  BOOL result = os_signpost_enabled((os_log_t)qword_1024193D8);
  if (result)
  {
    unint64_t v8 = "AssertLevelUnknown";
    if (a2 == 4) {
      unint64_t v8 = "kOnline";
    }
    int v9 = 68289282;
    int v10 = 0;
    uint32_t v12 = "";
    __int16 v11 = 2082;
    if (!a2) {
      unint64_t v8 = "kNone";
    }
    __int16 v13 = 2082;
    uint64_t v14 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#irat,Invalid conversion to WRM state requested", "{\"msg%{public}.0s\":\"#irat,Invalid conversion to WRM state requested\", \"state\":%{public, location:escape_only}s}", (uint8_t *)&v9, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_1010EB920(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v30 = a2;
  id v3 = *(uint64_t **)(a1 + 16);
  unsigned int v28 = (uint64_t **)(a1 + 16);
  unint64_t v4 = (uint64_t *)(a1 + 24);
  uint64_t v5 = qword_1024193D0;
  if (v3 != (uint64_t *)(a1 + 24))
  {
    do
    {
      uint64_t v7 = *((int *)v3 + 7);
      uint64_t v6 = *((int *)v3 + 8);
      if (v5 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102310F48);
      }
      unint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = "AssertClientUnknown";
        if (v7 <= 3) {
          int v9 = (&off_102310F90)[v7];
        }
        int v10 = "AssertLevelUnknown";
        if (v6 <= 4) {
          int v10 = (&off_102310F68)[v6];
        }
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v32 = 2082;
        uint64_t v33 = "";
        __int16 v34 = 2082;
        uint64_t v35 = (void *)v9;
        __int16 v36 = 2082;
        uint64_t v37 = (void *)v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,assertCommCenter,existingVote\", \"client\":%{public, location:escape_only}s, \"level\":%{public, location:escape_only}s}", buf, 0x26u);
        uint64_t v5 = qword_1024193D0;
      }
      else
      {
        uint64_t v5 = -1;
      }
      __int16 v11 = (uint64_t *)v3[1];
      if (v11)
      {
        do
        {
          uint32_t v12 = v11;
          __int16 v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint32_t v12 = (uint64_t *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          id v3 = v12;
        }
        while (!v13);
      }
      id v3 = v12;
    }
    while (v12 != v4);
  }
  if (v5 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102310F48);
  }
  uint64_t v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    if (v30 > 3) {
      long long v15 = "AssertClientUnknown";
    }
    else {
      long long v15 = (&off_102310F90)[v30];
    }
    if (a3 > 4) {
      long long v16 = "AssertLevelUnknown";
    }
    else {
      long long v16 = (&off_102310F68)[a3];
    }
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v32 = 2082;
    uint64_t v33 = "";
    __int16 v34 = 2082;
    uint64_t v35 = (void *)v15;
    __int16 v36 = 2082;
    uint64_t v37 = (void *)v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#irat,assertCommCenter,newVote\", \"client\":%{public, location:escape_only}s, \"level\":%{public, location:escape_only}s}", buf, 0x26u);
  }
  *(void *)uint64_t buf = &v30;
  *((_DWORD *)sub_100125FD0(v28, (int *)&v30, (uint64_t)&unk_101D0B290, (unsigned int **)buf) + 8) = a3;
  uint64_t v17 = *v28;
  if (*v28 == v4) {
    goto LABEL_40;
  }
  uint64_t v18 = *v28;
  while (1)
  {
    uint64_t v19 = (uint64_t *)v18[1];
    unsigned int v20 = v18;
    if (v19)
    {
      do
      {
        uint64_t v18 = v19;
        uint64_t v19 = (uint64_t *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        uint64_t v18 = (uint64_t *)v20[2];
        BOOL v13 = *v18 == (void)v20;
        unsigned int v20 = v18;
      }
      while (!v13);
    }
    if (v18 == v4) {
      break;
    }
    if (*((_DWORD *)v17 + 8) < *((_DWORD *)v18 + 8)) {
      uint64_t v17 = v18;
    }
  }
  if (v4 == v17)
  {
LABEL_40:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102310F48);
    }
    uint64_t v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v22 = v30 > 3 ? "AssertClientUnknown" : (&off_102310F90)[v30];
      __int16 v23 = a3 > 4 ? "AssertLevelUnknown" : (&off_102310F68)[a3];
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v32 = 2082;
      uint64_t v33 = "";
      __int16 v34 = 2082;
      uint64_t v35 = v22;
      __int16 v36 = 2082;
      uint64_t v37 = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#irat,unexpected, max not found\", \"client\":%{public, location:escape_only}s, \"assertion\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102310F48);
      }
    }
    long long v24 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      if (v30 > 3) {
        __int16 v25 = "AssertClientUnknown";
      }
      else {
        __int16 v25 = (&off_102310F90)[v30];
      }
      if (a3 > 4) {
        int64_t v26 = "AssertLevelUnknown";
      }
      else {
        int64_t v26 = (&off_102310F68)[a3];
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v32 = 2082;
      uint64_t v33 = "";
      __int16 v34 = 2082;
      uint64_t v35 = (void *)v25;
      __int16 v36 = 2082;
      uint64_t v37 = (void *)v26;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#irat,unexpected, max not found", "{\"msg%{public}.0s\":\"#irat,unexpected, max not found\", \"client\":%{public, location:escape_only}s, \"assertion\":%{public, location:escape_only}s}", buf, 0x26u);
    }
  }
  else
  {
    sub_1010EB1F8(a1, *((_DWORD *)v17 + 8));
  }
}

id sub_1010EBE24(void **a1, uint64_t a2)
{
  id v3 = *a1;
  if (v3)
  {
    return _[v3 getStreamingInfo:a2 linkType:0];
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102310F48);
    }
    unint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#irat,skip fetching streamingInfo. IratClient is nil", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102310F48);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTelephonyIratManager::fetchStreamingInfo(CLIratStreamingInfoBlockHandler)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    return (id)(*(uint64_t (**)(uint64_t, void, void, void, void))(a2 + 16))(a2, 0, 0, 0, 0);
  }
}

void sub_1010EC028(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1010EC058(void *a1, void *a2)
{
  *a1 = a2;
  sub_100E670C8((uint64_t)(a1 + 1), a2);
}

void sub_1010EC374(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void *)(v2 + 1152);
  *(void *)(v2 + 1152) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  *id v3 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100E67350(v1);
  _Unwind_Resume(a1);
}

void sub_1010EC3FC(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102310FD0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCuesVehicleConfidenceBooster::onMotionStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102310FD0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCuesVehicleConfidenceBooster::onMotionStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1010ED69C((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010EC5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010EC5D8(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102310FD0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    unint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCuesVehicleConfidenceBooster::onDisplayStateUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102310FD0);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCuesVehicleConfidenceBooster::onDisplayStateUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1010ED6D4((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010EC794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010EC7B8(uint64_t a1)
{
  if (qword_102419660 != -1) {
    dispatch_once(&qword_102419660, &stru_102310FB0);
  }
  uint64_t v2 = qword_102419668;
  if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLMotionCuesVehicleConfidenceBooster] ~CLMotionCuesVehicleConfidenceBooster", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_102310FB0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLMotionCuesVehicleConfidenceBooster::~CLMotionCuesVehicleConfidenceBooster()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  sub_1010EC9D4((id *)a1);

  uint64_t v3 = *(void *)(a1 + 1152);
  *(void *)(a1 + 1152) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 1144);
  *(void *)(a1 + 1144) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_100E67350(a1 + 8);
  return a1;
}

void sub_1010EC9C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

id *sub_1010EC9D4(id *result)
{
  if (*((unsigned char *)result + 1179))
  {
    uint64_t v1 = result;
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_102310FB0);
    }
    uint64_t v2 = qword_102419668;
    if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] Stopping auto stop timer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_102310FB0);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::stopAutoStopTimer()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    BOOL result = (id *)[v1[145] invalidate];
    *((unsigned char *)v1 + 1179) = 0;
  }
  return result;
}

void sub_1010ECB80(uint64_t a1, uint64_t a2)
{
  if (qword_102419660 != -1) {
    dispatch_once(&qword_102419660, &stru_102310FB0);
  }
  uint64_t v4 = qword_102419668;
  if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLMotionCuesVehicleConfidenceBooster] updateFromActivity", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_102310FB0);
    }
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (CLMotionActivity::isDriving((CLMotionActivity *)a2))
  {
    if (*(unsigned char *)(a1 + 1180))
    {
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_102310FB0);
      }
      uint64_t v5 = qword_102419668;
      if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] Driving detected, stopping GNSS updates", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_102310FB0);
        }
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      *(unsigned char *)(a1 + 1180) = 0;
    }
    sub_100E6717C((double *)(a1 + 8));
    sub_1010EC9D4((id *)a1);
  }
  else
  {
    _H8 = *(short float *)(a2 + 74);
    *(unsigned char *)(a1 + 1180) = 1;
    short float v7 = *(short float *)(a1 + 1176);
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_102310FB0);
    }
    __asm { FCVT            D10, H8 }
    int v13 = qword_102419668;
    if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      double v25 = _D10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] mostRecentShortTermMean %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_102310FB0);
      }
      unsigned int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    if (_H8 >= v7 && !*(unsigned char *)(a1 + 280))
    {
      double v14 = 0.0;
      if (!*(unsigned char *)(a1 + 1178) && *(double *)(a1 + 1168) > 0.0) {
        double v14 = sub_10016C458() - *(double *)(a1 + 1168);
      }
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_102310FB0);
      }
      long long v15 = qword_102419668;
      if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEFAULT))
      {
        float v16 = v14;
        *(_DWORD *)uint64_t buf = 134349056;
        double v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] timeSinceDisplayOff %{public}f", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_102310FB0);
        }
        int v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
      if (v14 <= 60.0)
      {
        if (qword_102419660 != -1) {
          dispatch_once(&qword_102419660, &stru_102310FB0);
        }
        uint64_t v17 = a1 + 8;
        __int16 v18 = qword_102419668;
        if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] Potential driving detected, starting GNSS updates", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419660 != -1) {
            dispatch_once(&qword_102419660, &stru_102310FB0);
          }
          __int16 v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromActivity(const CLMotionActivity &)", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        sub_100E67354(v17);
      }
    }
  }
}

id *sub_1010ED2A8(uint64_t a1, int a2)
{
  if (qword_102419660 != -1) {
    dispatch_once(&qword_102419660, &stru_102310FB0);
  }
  uint64_t v4 = qword_102419668;
  if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLMotionCuesVehicleConfidenceBooster] updateFromDisplayChange %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_102310FB0);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::updateFromDisplayChange(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (a2)
  {
    BOOL result = sub_1010EC9D4((id *)a1);
  }
  else
  {
    *(double *)(a1 + 1168) = sub_10016C458();
    BOOL result = sub_1010ED47C((id *)a1);
  }
  *(unsigned char *)(a1 + 1178) = a2;
  return result;
}

id *sub_1010ED47C(id *result)
{
  if (!*((unsigned char *)result + 1179))
  {
    uint64_t v1 = result;
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_102310FB0);
    }
    uint64_t v2 = qword_102419668;
    if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "[CLMotionCuesVehicleConfidenceBooster] Starting auto stop timer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419660 != -1) {
        dispatch_once(&qword_102419660, &stru_102310FB0);
      }
      __int16 v5 = 0;
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::startAutoStopTimer()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    if ([v1[145] handler]) {
      sub_101AA14AC();
    }
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_1010ED76C;
    v4[3] = &unk_1022A3020;
    void v4[4] = v1;
    [v1[145] setHandler:v4];
    BOOL result = (id *)[v1[145] setNextFireDelay:60.0 interval:1.79769313e308];
    *((unsigned char *)v1 + 1179) = 1;
  }
  return result;
}

void sub_1010ED69C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 != 1) {
    sub_101AA14D8();
  }

  sub_1010ECB80(a1, a4);
}

id *sub_1010ED6D4(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  if (*a3 != 10) {
    sub_101AA1504();
  }
  int v4 = *a4;

  return sub_1010ED2A8(a1, v4);
}

void sub_1010ED70C(id a1)
{
  qword_102419668 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionCues");
}

void sub_1010ED73C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

double *sub_1010ED76C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419660 != -1) {
    dispatch_once(&qword_102419660, &stru_102310FB0);
  }
  uint64_t v2 = qword_102419668;
  if (os_log_type_enabled((os_log_t)qword_102419668, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[CLMotionCuesVehicleConfidenceBooster] Auto stop timer expired; stopping session",
      buf,
      2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419660 != -1) {
      dispatch_once(&qword_102419660, &stru_102310FB0);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMotionCuesVehicleConfidenceBooster::startAutoStopTimer()_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return sub_100E6717C((double *)(v1 + 8));
}

uint64_t sub_1010ED908(uint64_t a1, int a2)
{
  sub_100134750(__p, "");
  sub_1010EDA0C(a1, "HRRecoveryInputWRHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = off_102311000;
  *(void *)(a1 + 72) = off_1023110C8;
  *(void *)(a1 + 360) = off_102311118;
  *(unsigned char *)(a1 + 368) = 0;
  sub_1010EE5EC(a1);
  return a1;
}

void sub_1010ED9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_1010EDECC(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1010EDA0C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  uint32_t v12 = (void *)(a1 + 8);
  *(void *)a1 = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 8));
  void *v12 = off_1022ADB08;
  *(void *)a1 = off_102311388;
  *(void *)(a1 + 72) = off_102311430;
  sub_1011F8748(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(void *)a1 = off_102311388;
  *(void *)(a1 + 72) = off_102311430;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 236) = 0u;
  *(_DWORD *)(a1 + 272) = 3;
  *(_DWORD *)(a1 + 280) = 12000;
  *(void *)(a1 + 288) = off_1022ADAD8;
  sub_1003BDF2C((void *)(a1 + 296));
  *(void *)(a1 + 296) = off_1022ADB08;
  uint64_t v13 = *(void *)(a1 + 112);
  uint64_t v17 = a1 + 112;
  (*(void (**)(uint64_t))(v13 + 16))(a1 + 112);
  __int16 v18 = 256;
  if ((a3 & 1) == 0)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1000DC48C(__p, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a4;
      uint64_t v16 = *(void *)(a4 + 16);
    }
    sub_1011F8FF8(a1 + 72);
  }
  *(void *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 24))(a1 + 112);
  return a1;
}

void sub_1010EDE30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_1019DB560((uint64_t)&a19);
  void *v27 = v30;
  sub_1003BE1F8(v31);
  sub_10058D17C(v29);
  sub_1011F8AE0(v28);
  void *v25 = a12;
  sub_1003BE1F8(v26);
  _Unwind_Resume(a1);
}

void sub_1010EDEC4()
{
}

void *sub_1010EDECC(void *a1)
{
  *a1 = off_102311388;
  uint64_t v2 = (uint64_t)(a1 + 9);
  a1[9] = off_102311430;
  a1[36] = off_1022ADAD8;
  sub_1003BE1F8(a1 + 37);
  sub_10058D17C(a1 + 22);
  sub_1011F8AE0(v2);
  *a1 = off_1022ADAD8;
  sub_1003BE1F8(a1 + 1);
  return a1;
}

void *sub_1010EDF90(uint64_t a1)
{
  return sub_1010EDECC((void *)(a1 - 72));
}

void *sub_1010EDF98(uint64_t a1)
{
  return sub_1010EDECC((void *)(a1 - 360));
}

void sub_1010EDFA0(void *a1)
{
  sub_1010EDECC(a1);

  operator delete();
}

void sub_1010EDFD8(uint64_t a1)
{
  sub_1010EDECC((void *)(a1 - 72));

  operator delete();
}

void sub_1010EE014(uint64_t a1)
{
  sub_1010EDECC((void *)(a1 - 360));

  operator delete();
}

uint64_t sub_1010EE050(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(void *)(a2 + 8) - 16) == 1.79769313e308 && sub_100082064(a1 + 72))
  {
    if (!*(unsigned char *)(a1 + 368)) {
      (*(void (**)(uint64_t))(*(void *)a1 + 112))(a1);
    }
    sub_10002B640(*(void *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM HRRecoveryInputWRHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_1010EE1CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010EE1E4(uint64_t a1, uint64_t a2)
{
  return sub_1010EE050(a1 - 72, a2);
}

uint64_t sub_1010EE1EC(uint64_t a1, void *a2)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    a2[1] = *a2;
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from HRRecoveryInputWRHistory ORDER BY startTime ASC");
  }
  return result;
}

void sub_1010EE424(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010EE464(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  int v5 = sqlite3_step(v4);
  if (v5 == 101) {
    return 1;
  }
  if (v5 != 100) {
    return 2;
  }
  sub_1010EEE90(a1, a2);
  return 0;
}

uint64_t sub_1010EE4C4(uint64_t a1)
{
  if (sub_100082064(a1 + 72)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT COUNT(*) FROM HRRecoveryInputWRHistory");
  }
  return 0xFFFFFFFFLL;
}

void sub_1010EE580(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010EE5BC(uint64_t a1)
{
  return sub_1010EE4C4(a1 - 72);
}

uint64_t sub_1010EE5C4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, 0);
}

uint64_t sub_1010EE5EC(uint64_t a1)
{
  uint64_t result = sub_10014C3C0(*(void *)(a1 + 80));
  if (result)
  {
    sub_1010EE64C(a1);
    uint64_t result = sub_1005F7B0C(*(void *)(a1 + 80), "HRRecoveryInputWRHistory", (const char **)&off_1023111B8, (const std::string::value_type **)&off_102475F48, 0);
    *(unsigned char *)(a1 + 368) = 1;
  }
  return result;
}

uint64_t sub_1010EE64C(uint64_t a1)
{
  uint64_t result = sub_1005F93E4(*(void *)(a1 + 80), "HRRecoveryInputWRHistory");
  if (result)
  {
    uint64_t v3 = "userMets";
    int v4 = 5;
    __int16 v5 = 0;
    char v6 = 0;
    char v7 = 0;
    sub_1005FEC4C(*(void *)(a1 + 80), "HRRecoveryInputWRHistory", (uint64_t)"userMets", (uint64_t)&v3);
  }
  return result;
}

void sub_1010EEB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a23);
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  sub_101A129A8((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void *sub_1010EEC24@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "HRRecoveryInputWRHistory");
}

void *sub_1010EEC34@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "HRRecoveryInputWRHistory");
}

uint64_t sub_1010EEC44(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"DELETE FROM HRRecoveryInputWRHistory");
  }
  return result;
}

void sub_1010EECF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A5DB04();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010EED0C(uint64_t a1)
{
  return sub_1010EEC44(a1 - 72);
}

uint64_t sub_1010EED14(uint64_t a1)
{
  uint64_t result = sub_100082064(a1 + 72);
  if (result)
  {
    sub_1000E1294(&v3, (uint64_t)"CLHRRecoveryInputWRRecorderDb.insertRecord", 0);
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"INSERT INTO HRRecoveryInputWRHistory (startTime, mets, gradeType, grade, userMets, userMetsSource) VALUES (?, ?, ?, ?, ?, ?)");
  }
  return result;
}

void sub_1010EEE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010EEE84(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1010EEE90(a2, a3);
}

uint64_t sub_1010EEE90(uint64_t *a1, uint64_t a2)
{
  int v4 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(void *)a2 = sqlite3_column_int(v4, 0);
  __int16 v5 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  char v6 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v6, 2);
  char v7 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(_DWORD *)(a2 + 24) = sqlite3_column_int(v7, 3);
  int v8 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 4);
  int v9 = (sqlite3_stmt *)sub_10014D19C(*a1);
  *(double *)(a2 + 40) = sqlite3_column_double(v9, 5);
  int v10 = (sqlite3_stmt *)sub_10014D19C(*a1);
  uint64_t result = sqlite3_column_int(v10, 6);
  *(_DWORD *)(a2 + 48) = result;
  return result;
}

uint64_t sub_1010EEF44(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * FROM HRRecoveryInputWRHistory WHERE startTime > ? and startTime < ? ORDER BY startTime ASC LIMIT ?");
  }
  if (qword_1024192C0 != -1) {
    dispatch_once(&qword_1024192C0, &stru_102311338);
  }
  int v4 = qword_1024192C8;
  if (os_log_type_enabled((os_log_t)qword_1024192C8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "StepCountHistory not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024192C0 != -1) {
      dispatch_once(&qword_1024192C0, &stru_102311338);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLHRRecoveryInputWRRecorderDb::queryHRRecoveryInputWRInTimeRange(CFAbsoluteTime, CFAbsoluteTime, int, std::vector<HRRecoveryInputWR> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return 109;
}

void sub_1010EF398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010EF3FC(uint64_t a1)
{
  return sub_1010EEF44(a1 - 360);
}

uint64_t sub_1010EF404(uint64_t a1)
{
  uint64_t v2 = a1 + 112;
  uint64_t v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(void *)(a1 + 112) + 16))(a1 + 112);
  if (sub_100082064(v3)) {
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)"SELECT * from HRRecoveryInputWRHistory ORDER BY startTime ASC");
  }
  if (qword_102419030 != -1) {
    dispatch_once(&qword_102419030, &stru_102311358);
  }
  int v4 = qword_102419038;
  if (os_log_type_enabled((os_log_t)qword_102419038, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRRecoveryInputWRHistory not accessible", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419030 != -1) {
      dispatch_once(&qword_102419030, &stru_102311358);
    }
    char v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual CMError CLHRRecoveryInputWRRecorderDb::queryHRRecoveryInputWRAllRecords(std::vector<HRRecoveryInputWR> &) const", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return 109;
}

void sub_1010EF804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010EF86C(uint64_t a1)
{
  return sub_1010EF404(a1 - 360);
}

uint64_t sub_1010EF874(uint64_t a1, void *a2)
{
  if (!sub_1005F9734(*(void *)(a1 + 80), (char *)a2))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102311470);
    }
    int v4 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311470);
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      unsigned int v20 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", (const char *)v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    memset(__p, 0, 24);
    sub_100134750(buf, (char *)a2);
    __int16 v5 = std::string::append(buf, "AutoIncr");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    int64_t v22 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v21 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_100134750(buf, (char *)a2);
    char v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf[0].__r_.__value_.__l.__data_);
    }
    sub_10002B640(*(void *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0) {
      size_t v8 = HIBYTE(__p[2]);
    }
    else {
      size_t v8 = (size_t)__p[1];
    }
    int v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    }
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v22 >= 0) {
      char v11 = v21;
    }
    else {
      char v11 = (void **)v21[0];
    }
    if (v22 >= 0) {
      std::string::size_type v12 = HIBYTE(v22);
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    uint64_t v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    double v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v23.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    char v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v14;
    __p[1] = v23.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v23.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      char v15 = HIBYTE(__p[2]);
      double v14 = __p[0];
    }
    if (v15 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)v14;
    }
    sub_10014D518(*(void *)(a1 + 80), (uint64_t)v16);
  }
  uint64_t v17 = *(void *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0) {
    uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v18 = *(void *)(v17 + 88);
  }
  sub_10003CC68(v17, v18);
  return 0;
}

void sub_1010F0AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010F0E00(void *a1)
{
  uint64_t v3 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17[0]) < 0)
  {
    int v10 = v16[1];
    operator delete(v16[0]);
    if (v10)
    {
LABEL_3:
      if (sub_100082064(a1 + 9))
      {
        sub_10010F274((uint64_t)v16);
        int v4 = sub_100132EFC(v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0) {
          __int16 v5 = __p;
        }
        else {
          __int16 v5 = (void **)__p[0];
        }
        if ((v14 & 0x80u) == 0) {
          uint64_t v6 = v14;
        }
        else {
          uint64_t v6 = (uint64_t)__p[1];
        }
        char v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
        sub_100132EFC(v7, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = a1[10];
        std::stringbuf::str();
        if ((v14 & 0x80u) == 0) {
          int v9 = __p;
        }
        else {
          int v9 = (void **)__p[0];
        }
        sub_10014D518(v8, (uint64_t)v9);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17[0]))
  {
    goto LABEL_3;
  }
  sub_101AA1530(v3);
  uint64_t v15 = 0;
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  *(void **)((char *)v16
  v17[0] = v11;
  if (v18 < 0) {
    operator delete((void *)v17[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return 2;
}

void sub_1010F1294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1010F1314(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v2 = a1 + 112;
  uint64_t v4 = v2 - 40;
  uint64_t v11 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_100082064(v4)) {
    sub_1010F32F4(a1);
  }
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102311470);
  }
  __int16 v5 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&void v13[6] = "";
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(void *)(a1 + 216))
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102311470);
    }
    char v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = *(void *)(a1 + 216);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)uint64_t v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311470);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  return 1;
}

void sub_1010F1A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1019DB560((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1010F1AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  long long v5 = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  return result;
}

id *sub_1010F1AE4(uint64_t a1, long long *a2, char a3)
{
  v37[0] = (id)os_transaction_create();
  v37[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 72))(a1, a1 + 224, a2);
    return sub_1000E1098(v37);
  }
  if ((a3 & 1) == 0) {
    sub_10002B640(*(void *)(a1 + 80));
  }
  uint64_t v30 = 0;
  double v31 = 0.0;
  int v33 = 0;
  uint64_t v32 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  int v36 = 3;
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 104))(a1, &v30);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311470);
      }
      __int16 v14 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102311470);
        }
        LOWORD(v38) = 0;
        uint64_t v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      goto LABEL_43;
    }
    double v7 = *((double *)a2 + 1);
    double v8 = v31;
    double v9 = v7 - v31;
    if (v7 - v31 < 0.0) {
      double v9 = -(v7 - v31);
    }
    if (v9 > 604800.0)
    {
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311470);
      }
      int v10 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)a2 + 1);
        *(_DWORD *)uint64_t buf = 134349312;
        double v43 = v31;
        __int16 v44 = 2050;
        uint64_t v45 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102311470);
        }
        uint64_t v24 = *((void *)a2 + 1);
        int v38 = 134349312;
        double v39 = v31;
        __int16 v40 = 2050;
        uint64_t v41 = v24;
        double v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      CLWriteStackshot();
      double v7 = *((double *)a2 + 1);
      double v8 = v31;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102311470);
        }
        std::string::size_type v12 = qword_102418FD8;
        if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
        {
          double v13 = *((double *)a2 + 1);
          *(_DWORD *)uint64_t buf = 134217984;
          double v43 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102418FD0 != -1) {
            dispatch_once(&qword_102418FD0, &stru_102311470);
          }
          double v26 = *((double *)a2 + 1);
          int v38 = 134217984;
          double v39 = v26;
          __int16 v27 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
          if (v27 != (char *)buf) {
            free(v27);
          }
        }
        (*(void (**)(uint64_t, long long *))(*(void *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      double v16 = v7 - v8;
      double v17 = *(float *)(a1 + 136);
      if (qword_102418FD0 != -1)
      {
        double v29 = *(float *)(a1 + 136);
        dispatch_once(&qword_102418FD0, &stru_102311470);
        double v17 = v29;
      }
      double v18 = v16 - v17;
      uint64_t v19 = qword_102418FD8;
      if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        double v43 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FD0 != -1) {
          dispatch_once(&qword_102418FD0, &stru_102311470);
        }
        int v38 = 134217984;
        double v39 = v18;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      (*(void (**)(uint64_t, double))(*(void *)a1 + 96))(a1, v18);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, long long *))(*(void *)a1 + 144))(a1, &v30, a1 + 224, a2);
    (*(void (**)(uint64_t, long long *, uint64_t))(*(void *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  long long v20 = *a2;
  long long v21 = a2[1];
  long long v22 = a2[2];
  *(_DWORD *)(a1 + 272) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(a1 + 240) = v21;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 224) = v20;
LABEL_43:
  if ((a3 & 1) == 0) {
    sub_100028FB4(*(void *)(a1 + 80));
  }
  return sub_1000E1098(v37);
}

void sub_1010F230C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1000E1098((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1010F2338(void *a1, uint64_t a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17)) {
      goto LABEL_3;
    }
LABEL_18:
    double v13 = (_Unwind_Exception *)sub_101AA16A0(v4);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  std::string::size_type v12 = v16[1];
  operator delete(v16[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_10010F274((uint64_t)v16);
    int v6 = sub_100132EFC(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0) {
      double v7 = __p;
    }
    else {
      double v7 = (void **)__p[0];
    }
    if ((v15 & 0x80u) == 0) {
      uint64_t v8 = v15;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v15 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1010F26AC(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA1810(v2);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    sub_101A129A8((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v14[1];
  operator delete(v14[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    sub_10010F274((uint64_t)v14);
    long long v4 = sub_100132EFC(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    if ((v13 & 0x80u) == 0) {
      uint64_t v6 = v13;
    }
    else {
      uint64_t v6 = (uint64_t)__p[1];
    }
    double v7 = sub_100132EFC(v4, (uint64_t)v5, v6);
    sub_100132EFC(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = a1[10];
    std::stringbuf::str();
    if ((v13 & 0x80u) == 0) {
      double v9 = __p;
    }
    else {
      double v9 = (void **)__p[0];
    }
    sub_10014D518(v8, (uint64_t)v9);
  }
  return result;
}

uint64_t sub_1010F29D8(void *a1)
{
  uint64_t v2 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    uint64_t v11 = (_Unwind_Exception *)sub_101AA1980(v2);
    if (v12) {
      sub_101A5DB04();
    }
    sub_101A129A8((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  uint64_t v10 = v15[1];
  operator delete(v15[0]);
  if (!v10) {
    goto LABEL_18;
  }
LABEL_3:
  if (sub_100082064(a1 + 9))
  {
    sub_10010F274((uint64_t)v15);
    uint64_t v3 = sub_100132EFC(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = v14;
    }
    else {
      uint64_t v5 = (uint64_t)__p[1];
    }
    uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
    sub_100132EFC(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    sub_10014D518(v7, (uint64_t)v8);
  }
  return 2;
}

uint64_t sub_1010F2CFC(uint64_t a1)
{
  return sub_1010F1314(a1 - 72);
}

void sub_1010F2D04(id a1)
{
  qword_1024192C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

void sub_1010F2D34(id a1)
{
  qword_102419038 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pedometer");
}

uint64_t sub_1010F2D64(void *a1, void *a2)
{
  long long v4 = (*(void *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16)) {
      goto LABEL_3;
    }
LABEL_18:
    sub_101AA1AF0(v4);
    sub_1001D7FD4();
  }
  uint64_t v12 = v15[1];
  operator delete(v15[0]);
  if (!v12) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t result = sub_100082064(a1 + 9);
  if (result)
  {
    a2[1] = *a2;
    sub_10010F274((uint64_t)v15);
    uint64_t v6 = sub_100132EFC(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, void *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v8 = v14;
    }
    else {
      uint64_t v8 = (uint64_t)__p[1];
    }
    double v9 = sub_100132EFC(v6, (uint64_t)v7, v8);
    sub_100132EFC(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = a1[10];
    std::stringbuf::str();
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    sub_10014D518(v10, (uint64_t)v11);
  }
  return result;
}

void sub_1010F31B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  sub_101A129A8((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1010F3234(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1010F3264(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (sqlite3_stmt *)sub_10014D19C(*a2);
  int v7 = sqlite3_step(v6);
  if (v7 == 101) {
    return 1;
  }
  if (v7 != 100) {
    return 2;
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 128))(a1, a2, a3);
  return 0;
}

void sub_1010F32F4(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  sub_100134750(&__p, "");
  sub_1011F8FF8(v1);
}

void sub_1010F3374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F3440(id a1)
{
  qword_1024852C8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLProxPDPAndALSPhoneNotifierSilo"];
}

uint64_t sub_1010F3500(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1010F3720;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_1024852D8 != -1) {
    dispatch_once(&qword_1024852D8, block);
  }
  return qword_10248B318;
}

void sub_1010F3720()
{
}

void sub_1010F376C()
{
}

void sub_1010F3790(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)sub_1010F38B0(a1, "CLProxPDPAndALSPhoneNotifier", a2);
  void *v2 = off_1023114C0;
  v2[14] = 0;
  v2[15] = 0;
  operator new();
}

void sub_1010F3874()
{
}

uint64_t sub_1010F38B0(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_102311668;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1010F3940(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F395C(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102311618);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    long long v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLProxPDPAndALSPhoneNotifier::onProxPDPData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102311618);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      unsigned __int8 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLProxPDPAndALSPhoneNotifier::onProxPDPData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_1010F46BC(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010F3B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F3B30(uint64_t *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102311618);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    long long v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLProxPDPAndALSPhoneNotifier::onALSPhoneData", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102311618);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2082;
      unsigned __int8 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLProxPDPAndALSPhoneNotifier::onALSPhoneData\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_1010F4768(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1010F3CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1010F3D04(uint64_t a1)
{
  *(void *)a1 = off_102311668;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_100445A1C(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1010F3D88(void *a1)
{
  *a1 = off_1023114C0;
  sub_1010F3E1C((uint64_t)a1);

  return sub_1010F3D04((uint64_t)a1);
}

void sub_1010F3DE4(void *a1)
{
  sub_1010F3D88(a1);

  operator delete();
}

void sub_1010F3E1C(uint64_t a1)
{
  *(unsigned char *)(a1 + 108) = 1;
  uint64_t v2 = sub_1000D2E34(0);
  sub_1009D26C4(v2, 40, *(void *)(a1 + 112));
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *(void *)(a1 + 112) = 0;
  uint64_t v4 = sub_1000D2E34(0);
  sub_1009D26C4(v4, 41, *(void *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 120);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *(void *)(a1 + 120) = 0;
  if (qword_102418FD0 != -1) {
    dispatch_once(&qword_102418FD0, &stru_102311638);
  }
  uint64_t v6 = qword_102418FD8;
  if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLProxPDPAndALSPhoneNotifier is shutting down", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102311638);
    }
    char v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLProxPDPAndALSPhoneNotifier::shutdown()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void *sub_1010F4038@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_1010F40B4(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102311638);
    }
    uint64_t v8 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Received register for ALS Phone notification request", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311638);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLProxPDPAndALSPhoneNotifier::registerForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Type::Notification &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    uint64_t v4 = sub_1000D2E34(0);
    uint64_t v5 = *(void *)(a1 + 120);
    double v6 = -1.0;
    int v7 = 41;
    goto LABEL_15;
  }
  if (!*a2)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102311638);
    }
    uint64_t v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Received register for prox PDP notification request", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311638);
      }
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLProxPDPAndALSPhoneNotifier::registerForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Type::Notification &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    uint64_t v4 = sub_1000D2E34(0);
    uint64_t v5 = *(void *)(a1 + 112);
    double v6 = -1.0;
    int v7 = 40;
LABEL_15:
    sub_1009D1EC4(v4, v7, v5, v6);
  }
  return 1;
}

uint64_t sub_1010F43BC(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102311638);
    }
    int v7 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Received unregister for ALS Phone notification request", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311638);
      }
      __int16 v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLProxPDPAndALSPhoneNotifier::unregisterForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Type::Notification &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    uint64_t v4 = sub_1000D2E34(0);
    uint64_t v5 = *(void *)(a1 + 120);
    int v6 = 41;
    goto LABEL_15;
  }
  if (!*a2)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_102311638);
    }
    uint64_t v3 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Received unregister for prox PDP notification request", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_102311638);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLProxPDPAndALSPhoneNotifier::unregisterForNotificationInternal(const CLProxPDPAndALSPhoneNotifier_Type::Notification &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    uint64_t v4 = sub_1000D2E34(0);
    uint64_t v5 = *(void *)(a1 + 112);
    int v6 = 40;
LABEL_15:
    sub_1009D26C4(v4, v6, v5);
  }
  return 1;
}

uint64_t sub_1010F46BC(uint64_t a1, uint64_t *a2)
{
  LODWORD(v8) = 0;
  uint64_t result = sub_1001072EC(a1, (int *)&v8, 1);
  if (result)
  {
    uint64_t v5 = *a2;
    int v6 = *(_DWORD *)((char *)a2 + 19);
    __int16 v7 = *(_WORD *)((char *)a2 + 17);
    int v14 = 0;
    uint64_t v8 = v5;
    long long v9 = *(_OWORD *)((char *)a2 + 23);
    uint64_t v10 = *(uint64_t *)((char *)a2 + 39);
    int v11 = v6;
    __int16 v12 = v7;
    __int16 v13 = 0;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v14, &v8, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_1010F4768(uint64_t a1, uint64_t *a2)
{
  LODWORD(v7) = 1;
  uint64_t result = sub_1001072EC(a1, (int *)&v7, 1);
  if (result)
  {
    uint64_t v5 = *a2;
    int v6 = *((_DWORD *)a2 + 5);
    int v10 = 1;
    uint64_t v7 = v5;
    int v8 = v6;
    int v9 = 0;
    return (*(uint64_t (**)(uint64_t, int *, uint64_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, &v10, &v7, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_1010F4808(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = &off_1023117B8;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_1010F48EC()
{
}

void sub_1010F49A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1010F49E4(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        int v9 = (uint64_t *)v4;
      }
      else {
        int v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102311618);
      }
      int v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_102311618);
        }
        __int16 v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          __int16 v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        uint64_t v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        id v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1010F4C74(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_10005C4C4(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1010F4D28(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1010F4D70(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1010F4DB8(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1010F4E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)a1 + 96))(a1, a2, a3, &unk_102476018);
}

uint64_t sub_1010F4E2C(uint64_t a1, int a2, int *a3, char *a4)
{
  int v41 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        id v13 = (uint64_t *)v7;
      }
      else {
        id v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(void *)uint64_t v42 = v10;
      int v17 = *a3;
      uint64_t v20 = *(void *)(v10 + 48);
      uint64_t v19 = v10 + 48;
      uint64_t v18 = v20;
      if (!v20) {
        goto LABEL_31;
      }
      uint64_t v21 = v19;
      do
      {
        int v22 = *(_DWORD *)(v18 + 28);
        BOOL v23 = v22 < v17;
        if (v22 >= v17) {
          uint64_t v24 = (uint64_t *)v18;
        }
        else {
          uint64_t v24 = (uint64_t *)(v18 + 8);
        }
        if (!v23) {
          uint64_t v21 = v18;
        }
        uint64_t v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28)) {
LABEL_31:
      }
        uint64_t v21 = v19;
      uint64_t v25 = *(void *)(a1 + 64);
      if (!v25) {
        goto LABEL_42;
      }
      uint64_t v26 = a1 + 64;
      do
      {
        int v27 = *(_DWORD *)(v25 + 32);
        BOOL v28 = v27 < v17;
        if (v27 >= v17) {
          double v29 = (uint64_t *)v25;
        }
        else {
          double v29 = (uint64_t *)(v25 + 8);
        }
        if (!v28) {
          uint64_t v26 = v25;
        }
        uint64_t v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        uint64_t v40 = v26;
        uint64_t v35 = *(void *)(v26 + 56);
        char v36 = *a4;
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v36;
        uint64_t v46 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1010F76E4();
        }
        if (v35) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        uint64_t v40 = a1 + 64;
        char v30 = byte_102476019;
        int v39 = v17;
        *(void *)uint64_t buf = &v39;
        *((unsigned char *)sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v30;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        double v31 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v32 = (std::__shared_weak_count *)v31[9];
        v31[8] = 0;
        v31[9] = 0;
        if (v32) {
          sub_1000DB0A0(v32);
        }
        char v33 = *a4;
        int v39 = *a3;
        *(void *)uint64_t buf = &v39;
        uint64_t v34 = sub_10044715C((uint64_t **)(a1 + 56), &v39, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v41;
        *((unsigned char *)sub_1000EB1B8(v34 + 5, &v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 32) = v33;
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v21 == v19)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(*(void *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102311618);
  }
  id v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    uint64_t v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102311618);
    }
    uint64_t v37 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v37 = (void *)*v37;
    }
    *(_DWORD *)uint64_t v42 = 136446466;
    *(void *)&void v42[4] = v37;
    __int16 v43 = 1026;
    int v44 = a2;
    int v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
    return 0;
  }
  return result;
}

BOOL sub_1010F52D8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        uint64_t v21 = (uint64_t *)v15;
      }
      else {
        uint64_t v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102311618);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102311618);
      }
      int v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1010F555C(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        id v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            id v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            int v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                int v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000ED9F4((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102311618);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                int v27 = a1 + 8;
                if (a1[31] < 0) {
                  int v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  BOOL v28 = __p;
                }
                else {
                  BOOL v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                uint64_t v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102311618);
                }
                double v29 = a1 + 8;
                if (a1[31] < 0) {
                  double v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  char v30 = buf;
                }
                else {
                  char v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                uint64_t v40 = v30;
                double v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1010F5930(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v6 = *a2;
  uint64_t v7 = v3;
  do
  {
    int v8 = *(_DWORD *)(v4 + 32);
    BOOL v9 = v8 < v6;
    if (v8 >= v6) {
      BOOL v10 = (uint64_t *)v4;
    }
    else {
      BOOL v10 = (uint64_t *)(v4 + 8);
    }
    if (!v9) {
      uint64_t v7 = v4;
    }
    uint64_t v4 = *v10;
  }
  while (*v10);
  if (v7 == v3) {
    return 0;
  }
  if (v6 < *(_DWORD *)(v7 + 32)) {
    return 0;
  }
  int v11 = *(long long **)(v7 + 64);
  if (!v11) {
    return 0;
  }
  long long v12 = *v11;
  long long v13 = v11[1];
  *(void *)(a3 + 32) = *((void *)v11 + 4);
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  return 1;
}

uint64_t sub_1010F5998(uint64_t a1, int *a2, uint64_t a3)
{
  int v6 = (char *)operator new(0x40uLL);
  long long v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)int v6 = off_102311748;
  *(_OWORD *)(v6 + 40) = v7;
  *((void *)v6 + 7) = *(void *)(a3 + 32);
  int v11 = *a2;
  long long v12 = &v11;
  int v8 = sub_10044715C((uint64_t **)(a1 + 56), &v11, (uint64_t)&unk_101D0B290, &v12);
  BOOL v9 = (std::__shared_weak_count *)v8[9];
  v8[8] = (uint64_t *)(v6 + 24);
  v8[9] = (uint64_t *)v6;
  if (v9) {
    sub_1000DB0A0(v9);
  }
  return 1;
}

void sub_1010F5A58(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1010F5A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1010F5AC8(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102311618);
  }
  BOOL v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    BOOL v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v10 = (void *)*v10;
    }
    int v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)uint64_t buf = 68289794;
    int v23 = 0;
    __int16 v24 = 2082;
    *(void *)__int16 v25 = "";
    *(_WORD *)&v25[8] = 2082;
    *(void *)&v25[10] = "activity";
    __int16 v26 = 2082;
    int v27 = v10;
    __int16 v28 = 2050;
    double v29 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    char v30 = v31;
    memset(v31, 0, sizeof(v31));
    int v32 = 0;
    sub_1004481D0((uint64_t)buf, a2, (uint64_t)&v30);
    uint64_t v14 = sub_100448098((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_1000F5BB0((uint64_t)&v24, *(void **)&v25[6]);
    if (v32) {
      sub_1000DB0A0(v32);
    }
    sub_1000F5BB0((uint64_t)&v30, v31[0]);
  }
  if (a4)
  {
    BOOL v18 = (char *)operator new(0x40uLL);
    long long v19 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v18 + 24) = *(_OWORD *)a3;
    *((void *)v18 + 1) = 0;
    *((void *)v18 + 2) = 0;
    *(void *)BOOL v18 = off_102311748;
    *(_OWORD *)(v18 + 40) = v19;
    *((void *)v18 + 7) = *(void *)(a3 + 32);
    uint64_t v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = (uint64_t *)(v18 + 24);
    v14[9] = (uint64_t *)v18;
    if (!v20) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v20 = (std::__shared_weak_count *)v14[9];
  v14[8] = 0;
  v14[9] = 0;
  if (v20) {
LABEL_27:
  }
    sub_1000DB0A0(v20);
LABEL_28:
  if (v14[7]) {
    sub_1010F679C();
  }
  os_activity_scope_leave(&state);
}

void sub_1010F60B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1010F6104(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102311618);
    }
    uint64_t v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      int v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102311618);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102311618);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      int v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_102311618);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        BOOL v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_102311618);
            }
            BOOL v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              int v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102311618);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                BOOL v9 = v15;
              }
              while (!v16);
            }
            BOOL v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            long long v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            long long v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            int v8 = v19;
          }
          while (!v16);
        }
        int v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1010F66B4(uint64_t a1)
{
  sub_1010F7674(a1);

  operator delete();
}

id sub_1010F66EC(uint64_t a1, int a2, void *a3)
{
  id result = sub_1010F6DD4(a3);
  if (result)
  {
    int v6 = a2;
    return (id)(*(uint64_t (**)(void, int *, id, void))(a1 + 24))(0, &v6, result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1010F673C(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1010F676C(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1010F679C()
{
}

void sub_1010F6850(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      BOOL v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          BOOL v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        uint64_t v49 = v9;
        id v13 = sub_1010F6DD4(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 7);
            long long v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                int v22 = (uint64_t *)v17;
              }
              else {
                int v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                long long v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              unint64_t v48 = v19;
              sub_1010F6C40(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              double v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  int v32 = (uint64_t *)v27;
                }
                else {
                  int v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  double v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              uint64_t v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                uint64_t v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 28);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    __int16 v39 = (uint64_t *)v36;
                  }
                  else {
                    __int16 v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    uint64_t v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 28);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      char v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      char v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  __int16 v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      __int16 v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      uint64_t v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              unint64_t v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_102311618);
              }
              __int16 v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)uint64_t buf = 136446466;
                uint64_t v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_102311618);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 7);
                int v50 = 136446466;
                uint64_t v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                uint64_t v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLProxPDPAndALSPhoneNotifier_Type::Notification, CLProxPDPAndALSPhoneNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLProxPDPAndALSPhoneNotifier_Type::Notification, NotificationData_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_1010F6C40(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_1010F6DD4(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EB1B8(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    id result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4, v13];
    }
  }
  return result;
}

void sub_1010F6D38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102311748;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1010F6D58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102311748;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1010F6DB4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

id sub_1010F6DD4(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return sub_1010F6E70(a1);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      return sub_1010F71FC(a1);
    }
    else
    {
      return 0;
    }
  }
}

id sub_1010F6E70(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (!v2) {
    return sub_1010F75BC((uint64_t)&v7, a1);
  }
  if (!getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_102418F90 != -1) {
      dispatch_once(&qword_102418F90, &stru_102311788);
    }
    uint64_t v5 = qword_102418F98;
    if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134218498;
      id v15 = v2;
      __int16 v16 = 2048;
      uint64_t v17 = 0;
      __int16 v18 = 2080;
      unint64_t v19 = 0x8000000101DA6FC0 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418F90 == -1) {
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  if (qword_102418F90 != -1) {
    dispatch_once(&qword_102418F90, &stru_102311788);
  }
  uint64_t v3 = qword_102418F98;
  if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 134218498;
    id v15 = v2;
    __int16 v16 = 2048;
    uint64_t v17 = 0;
    __int16 v18 = 2080;
    unint64_t v19 = 0x8000000101DA6FC0 & 0x7FFFFFFFFFFFFFFFLL;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  }
  if (!sub_10013D1A0(115, 0)) {
    return 0;
  }
  bzero(buf, 0x65CuLL);
  if (qword_102418F90 != -1) {
LABEL_20:
  }
    dispatch_once(&qword_102418F90, &stru_102311788);
LABEL_18:
  int v8 = 134218498;
  id v9 = v2;
  __int16 v10 = 2048;
  uint64_t v11 = 0;
  __int16 v12 = 2080;
  unint64_t v13 = 0x8000000101DA6FC0 & 0x7FFFFFFFFFFFFFFFLL;
  int v6 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v6);
  if (v6 != (char *)buf) {
    free(v6);
  }
  return 0;
}

id sub_1010F71FC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102311788);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DA6FC0 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLProxPDPAndALSPhoneNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_102311788);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101DA6FC0 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_102311788);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

id sub_1010F75BC(uint64_t a1, void *a2)
{
  if (![a2 cppObjectPtr]
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_102394238))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)40) {
      sub_101AA1DF4();
    }
    [a2 setCppObjectPtr:[objc_msgSend(objc_msgSend(a2, "serialized"), "bytes") bytes]];
  }

  return [a2 cppObjectPtr];
}

void sub_1010F7644(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1010F7674(uint64_t a1)
{
  *(void *)a1 = &off_1023117B8;
  id v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  id *v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

void sub_1010F76E4()
{
}

uint64_t sub_1010F7798(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    operator delete();
  }
  return result;
}

uint64_t sub_1010F77B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = xmmword_101DA7008;
  *(_OWORD *)(a1 + 16) = unk_101DA7018;
  *(_OWORD *)(a1 + 32) = xmmword_101DA7028;
  *(_OWORD *)(a1 + 44) = *(long long *)((char *)&xmmword_101DA7028 + 12);
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 224) = xmmword_101DA70E8;
  *(_OWORD *)(a1 + 240) = unk_101DA70F8;
  *(_OWORD *)(a1 + 256) = xmmword_101DA7108;
  *(_OWORD *)(a1 + 272) = unk_101DA7118;
  *(_OWORD *)(a1 + 160) = xmmword_101DA70A8;
  *(_OWORD *)(a1 + 176) = unk_101DA70B8;
  *(_OWORD *)(a1 + 192) = xmmword_101DA70C8;
  *(_OWORD *)(a1 + 208) = unk_101DA70D8;
  *(_OWORD *)(a1 + 96) = xmmword_101DA7068;
  *(_OWORD *)(a1 + 112) = unk_101DA7078;
  *(_OWORD *)(a1 + 128) = xmmword_101DA7088;
  *(_OWORD *)(a1 + 144) = unk_101DA7098;
  *(_OWORD *)(a1 + 64) = xmmword_101DA7048;
  *(_OWORD *)(a1 + 80) = unk_101DA7058;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 392) = a2;
  *(void *)(a1 + 400) = a3;
  *(void *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 440) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(_WORD *)(a1 + 424) = 0;
  sub_100803310(a1 + 448, a2);
  sub_100D4E754(a1 + 3120, 10);
  sub_100D4E754(a1 + 3176, 10);
  sub_100D4E754(a1 + 3232, 10);
  *(_OWORD *)(a1 + 3288) = 0u;
  uint64_t v4 = sub_1000D3E78();
  sub_10006B564(v4, &v11);
  uint64_t v5 = (unsigned __int8 *)(a1 + 424);
  if (sub_1000D2988(v11, "MotionLoggerLogRunningForm", (BOOL *)(a1 + 424)))
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    int v6 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_INFO))
    {
      int v7 = *v5;
      *(_DWORD *)uint64_t buf = 136315394;
      __int16 v18 = "MotionLoggerLogRunningForm";
      __int16 v19 = 1024;
      int v20 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[FormController] MSL Logging: %s: %d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      int v9 = *v5;
      int v13 = 136315394;
      uint64_t v14 = "MotionLoggerLogRunningForm";
      __int16 v15 = 1024;
      int v16 = v9;
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLRunning::FormController::FormController(const CLNatalieInput<CLElevationChangeEntry> &, CLRunningFormHealthKitWriter *)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  if (v12) {
    sub_1000DB0A0(v12);
  }
  return a1;
}

void sub_1010F7A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  sub_10041F48C(v12 + 405);
  sub_10041F48C(v12 + 398);
  sub_10041F48C(v12 + 391);
  sub_1010F7B10(v14);
  sub_10058D17C(v12 + 43);
  sub_1006AA34C(v13);
  _Unwind_Resume(a1);
}

void *sub_1010F7B10(void *a1)
{
  sub_1010A3D88(a1 + 327);
  nullsub_41((char *)a1 + 2615, v2);
  sub_10080DBC4(a1 + 43);
  sub_10080DB1C(a1 + 37);
  sub_1000D80C4(a1 + 31);
  sub_1000D80C4(a1 + 25);
  sub_1000D816C(a1 + 19);
  sub_1000D816C(a1 + 13);
  sub_1000D816C(a1 + 7);
  return a1;
}

void *sub_1010F7B80(void *a1)
{
  a1[51] = 0;
  sub_10041F48C(a1 + 405);
  sub_10041F48C(a1 + 398);
  sub_10041F48C(a1 + 391);
  sub_1010A3D88(a1 + 383);
  nullsub_41((char *)a1 + 3063, v2);
  sub_10080DBC4(a1 + 99);
  sub_10080DB1C(a1 + 93);
  sub_1000D80C4(a1 + 87);
  sub_1000D80C4(a1 + 81);
  sub_1000D816C(a1 + 75);
  sub_1000D816C(a1 + 69);
  sub_1000D816C(a1 + 63);
  sub_10058D17C(a1 + 43);
  sub_1006AA34C(a1 + 37);
  return a1;
}

uint64_t sub_1010F7C1C(uint64_t a1, uint64_t a2)
{
  sub_100103240();
  uint64_t result = sub_10010145C();
  if (result)
  {
    if (*(_DWORD *)(a1 + 3300) != 2) {
      *(void *)(a1 + 408) = a2;
    }
  }
  return result;
}

void sub_1010F7C5C(uint64_t a1, uint64_t a2)
{
  sub_100103240();
  if (sub_10010145C() && *(_DWORD *)(a1 + 3300) != 2)
  {
    int v5 = sub_10101439C(a2);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    int v6 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
    {
      p_p = &__p;
      sub_101014524(*(void *)(a2 + 16), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      id v8 = [[+[CMWorkout workoutName:](CMWorkout, "workoutName:", *(void *)(a2 + 112)) UTF8String];
      *(_DWORD *)uint64_t buf = 136446722;
      int v30 = p_p;
      __int16 v31 = 2082;
      id v32 = v8;
      __int16 v33 = 2050;
      uint64_t v34 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "[FormController] WorkoutEvent - eventType,%{public}s,workoutType,%{public}s,labelState,%{public}ld,", buf, 0x20u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      int v22 = &v26;
      sub_101014524(*(void *)(a2 + 16), &v26);
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v22 = (std::string *)v26.__r_.__value_.__r.__words[0];
      }
      id v23 = [[+[CMWorkout workoutName:](CMWorkout, "workoutName:", *(void *)(a2 + 112)) UTF8String];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446722;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v23;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
      uint64_t v28 = v5;
      __int16 v24 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    if (v5)
    {
      long long v9 = *(_OWORD *)a2;
      long long v10 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 96) = v10;
      *(_OWORD *)(a1 + 64) = v9;
      long long v11 = *(_OWORD *)(a2 + 48);
      long long v12 = *(_OWORD *)(a2 + 64);
      long long v13 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 160) = v13;
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 128) = v12;
      long long v14 = *(_OWORD *)(a2 + 112);
      long long v15 = *(_OWORD *)(a2 + 128);
      long long v16 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 224) = v16;
      *(_OWORD *)(a1 + 176) = v14;
      *(_OWORD *)(a1 + 192) = v15;
      long long v17 = *(_OWORD *)(a2 + 176);
      long long v18 = *(_OWORD *)(a2 + 192);
      long long v19 = *(_OWORD *)(a2 + 208);
      *(void *)(a1 + 288) = *(void *)(a2 + 224);
      *(_OWORD *)(a1 + 256) = v18;
      *(_OWORD *)(a1 + 272) = v19;
      *(_OWORD *)(a1 + 240) = v17;
      if (sub_100DE6158(a1 + 64))
      {
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1023117D0);
        }
        int v20 = qword_102419298;
        if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "[FormController] Beginning outdoor run", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419290 != -1) {
            dispatch_once(&qword_102419290, &stru_1023117D0);
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          __int16 v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        sub_1010F822C(a1);
      }
      else
      {
        sub_1010F856C((unsigned char *)a1);
      }
    }
  }
  else
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    uint64_t v4 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEFAULT))
    {
      sub_100103240();
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v30) = sub_10010145C();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[FormController] Form Metrics not available (supportBoltRunning=%d)", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      sub_100103240();
      LODWORD(__p.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__p.__r_.__value_.__r.__words[0]) = sub_10010145C();
      BOOL v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
}

void sub_1010F81F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F822C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 425)) {
    goto LABEL_15;
  }
  if (*(void *)(a1 + 408))
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    uint64_t v2 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[FormController] Enabling FormMetrics sources", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::enableFormMetrics()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    (*(void (**)(void))(**(void **)(a1 + 408) + 16))(*(void *)(a1 + 408));
    *(unsigned char *)(a1 + 425) = 1;
    sub_1010F9790(a1);
    sub_100803314(a1 + 448);
  }
  else
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    uint64_t v3 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[FormController] Cannot enable FormMetrics, no DM source specified", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRunning::FormController::enableFormMetrics()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  if (*(unsigned char *)(a1 + 425))
  {
LABEL_15:
    uint64_t v4 = *(void *)(a1 + 408);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 32))(v4);
    }
  }
}

unsigned char *sub_1010F856C(unsigned char *result)
{
  if (result[425])
  {
    uint64_t v1 = result;
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    uint64_t v2 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[FormController] Disabling Form sources, resetting state", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::disableFormMetrics()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    v1[425] = 0;
    sub_1010F9570(v1);
    uint64_t result = (unsigned char *)*((void *)v1 + 51);
    if (result) {
      return (unsigned char *)(*(uint64_t (**)(unsigned char *))(*(void *)result + 24))(result);
    }
  }
  return result;
}

void *sub_1010F8740(uint64_t a1, long long *a2)
{
  sub_100103240();
  uint64_t result = (void *)sub_10010145C();
  if (result && *(_DWORD *)(a1 + 3300) != 2)
  {
    long long v5 = *a2;
    long long v6 = a2[1];
    long long v7 = a2[2];
    *(_OWORD *)(a1 + 44) = *(long long *)((char *)a2 + 44);
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)a1 = v5;
    return memmove((void *)(a1 + 2976), a2, 0x3CuLL);
  }
  return result;
}

void sub_1010F87BC(uint64_t a1, uint64_t a2)
{
  sub_100103240();
  if (!sub_10010145C() || *(_DWORD *)(a1 + 3300) == 2) {
    return;
  }
  if (sub_100DE6158(a1 + 64))
  {
    sub_1010F822C(a1);
    sub_1006AA720((void *)(a1 + 296), (long long *)a2);
    double v4 = *(double *)(a2 + 8);
    double v5 = *(double *)(a1 + 416);
    if (v4 - v5 >= 0.0)
    {
      if (v5 != 0.0 && v4 - v5 < 5.0)
      {
LABEL_22:
        uint64_t v10 = *(void *)(a1 + 336);
        if (v10)
        {
          double v11 = v4 + -46.08;
          do
          {
            unint64_t v12 = *(void *)(a1 + 328);
            uint64_t v13 = (v12 * (unsigned __int128)0x642C8590B21642C9uLL) >> 64;
            if (*(double *)(*(void *)(*(void *)(a1 + 304) + 8 * ((v13 + ((v12 - v13) >> 1)) >> 4))
                           + 176 * (v12 - 23 * ((v13 + ((v12 - v13) >> 1)) >> 4))
                           + 8) >= v11)
              break;
            *(void *)(a1 + 328) = v12 + 1;
            *(void *)(a1 + 336) = v10 - 1;
            sub_100A31F9C(a1 + 296, 1);
            uint64_t v10 = *(void *)(a1 + 336);
          }
          while (v10);
        }
        return;
      }
      sub_1010F8AE8(a1, (void *)(a1 + 296));
    }
    else
    {
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      long long v6 = qword_102419298;
      if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a2 + 8);
        uint64_t v8 = *(void *)(a1 + 416);
        *(_DWORD *)uint64_t buf = 134349312;
        uint64_t v15 = v7;
        __int16 v16 = 2050;
        uint64_t v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "[FormController] #warning: Time Rollback: %{public}f->%{public}f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1023117D0);
        }
        long long v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::feedStepCountEntry(const CLStepCountEntry &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    double v4 = *(double *)(a2 + 8);
    *(double *)(a1 + 416) = v4;
    goto LABEL_22;
  }

  sub_1010F856C((unsigned char *)a1);
}

void sub_1010F8AE8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[5];
  if (!v3)
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    uint64_t v15 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[FormController] No steps in queue, cannot compute Form Metrics", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    LOWORD(v44) = 0;
    goto LABEL_49;
  }
  unint64_t v5 = a2[4];
  unint64_t v6 = v3 + v5 - 1;
  unint64_t v7 = v6 / 0x17;
  unint64_t v8 = v6 % 0x17;
  uint64_t v9 = a2[1];
  uint64_t v10 = a2[2];
  double v64 = *(double *)(*(void *)(v9 + 8 * v7) + 176 * v8 + 8) + -5.12;
  if (v10 == v9)
  {
    uint64_t v11 = 0;
    uint64_t v14 = 0;
    uint64_t v13 = (void *)(v9 + 8 * ((v5 + v3) / 0x17));
  }
  else
  {
    uint64_t v11 = *(void *)(v9 + 8 * (v5 / 0x17)) + 176 * (v5 % 0x17);
    unint64_t v12 = v5 + v3;
    uint64_t v13 = (void *)(v9 + 8 * (v12 / 0x17));
    uint64_t v14 = *v13 + 176 * (v12 % 0x17);
  }
  LOBYTE(v44) = 0;
  sub_10080FB84((void *)(v9 + 8 * (v5 / 0x17)), v11, v13, v14, &v64);
  uint64_t v17 = a2[1];
  if (a2[2] == v17)
  {
    unint64_t v19 = 0;
  }
  else
  {
    unint64_t v18 = a2[5] + a2[4];
    unint64_t v19 = *(void *)(v17 + 8 * (v18 / 0x17)) + 176 * (v18 % 0x17);
  }
  if (v19 == v16)
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    BOOL v21 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "[FormController] Not enough steps in queue", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_26;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    LOWORD(v44) = 0;
LABEL_49:
    double v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLRunning::FormController::computeFormMetrics(const StepQueue &, const DeviceMotionQueue &)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
LABEL_26:
    sub_1010F9ED4(a1);
    return;
  }
  double v47 = 0.0;
  uint64_t v48 = 0;
  int v49 = 0;
  long long v50 = 0u;
  long long v51 = 0u;
  int32x2_t v53 = vdup_n_s32(0x3E8u);
  int v52 = 0;
  int v54 = 1000;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  uint64_t v55 = 0;
  int8x16_t v61 = 0u;
  long long v62 = 0u;
  double v44 = v64;
  sub_1008099E4(a1 + 448, a2, (uint64_t)&v38, v64);
  LODWORD(v48) = v38;
  double v63 = sub_100CAFB50(v40 * 0.5, 0.01);
  double v45 = v63;
  *((void *)&v50 + 1) = v43;
  *(double *)&long long v51 = v39 * 0.5;
  char v58 = v42;
  int8x16_t v60 = vextq_s8(v41, v41, 8uLL);
  sub_10080B164(a1 + 448, a2, (uint64_t)v35, v64);
  double v46 = v35[0] * 1000.0;
  *(double *)&long long v62 = v35[0] * 1000.0;
  HIDWORD(v48) = v36;
  int8x16_t v59 = vextq_s8(v37, v37, 8uLL);
  if ((v36 & 0x100) != 0) {
    sub_1010FA3F8(a1, (uint64_t)&v44, 0);
  }
  sub_100808E28(a1 + 448, a2, (uint64_t)&v31, v64);
  int v49 = v31;
  double v47 = v32;
  *((double *)&v62 + 1) = v32;
  *(void *)&long long v50 = v34;
  int8x16_t v61 = vextq_s8(v33, v33, 8uLL);
  if (*(unsigned char *)(*(void *)(a1 + 392) + 80))
  {
    sub_1010FA50C(a1, (uint64_t)&v44, 1);
    sub_1010FA50C(a1, (uint64_t)&v44, 2);
    sub_1010FA50C(a1, (uint64_t)&v44, 0);
  }
  else
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    int v22 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "[FormController] Cannot determine grade, ElevationSource not active", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLRunning::FormController::computeFormMetrics(const StepQueue &, const DeviceMotionQueue &)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  sub_1010FA83C(a1, (uint64_t)&v44, 1, v20);
  sub_1010FA83C(a1, (uint64_t)&v44, 2, v23);
  sub_1010FA83C(a1, (uint64_t)&v44, 0, v24);
  __int16 v25 = (unint64_t *)(a1 + 3232);
  if ((v48 & 0xFFFFFFBF) != 0)
  {
    sub_100D4E7D0((uint64_t)v25);
    *(_DWORD *)(a1 + 3296) = 0;
  }
  else
  {
    sub_100D4E76C(v25, v45);
  }
  if (!HIDWORD(v48) || HIDWORD(v48) == 256 || HIDWORD(v48) == 64)
  {
    sub_100D4E76C((unint64_t *)(a1 + 3120), v46);
  }
  else
  {
    sub_100D4E7D0(a1 + 3120);
    *(_DWORD *)(a1 + 3288) = 0;
  }
  std::string v26 = (unint64_t *)(a1 + 3176);
  if ((v49 & 0xFFFFFFBF) != 0)
  {
    uint64_t v27 = sub_100D4E7D0((uint64_t)v26);
    *(_DWORD *)(a1 + 3292) = 0;
  }
  else
  {
    sub_100D4E76C(v26, v47);
  }
  sub_1010F9FF4(v27, (uint64_t *)&v44);
  sub_1010FA2EC(a1, (uint64_t)&v44);
  sub_1010F9F18((id *)a1, (uint64_t)&v44);
  uint64_t v28 = *(void *)(a1 + 408);
  if (v28) {
    (*(void (**)(uint64_t, double *))(*(void *)v28 + 40))(v28, &v44);
  }
}

void sub_1010F9244(uint64_t a1, uint64_t a2)
{
  sub_100103240();
  if (sub_10010145C() && *(_DWORD *)(a1 + 3300) != 2)
  {
    uint64_t v4 = *(void *)(a1 + 384);
    if (v4)
    {
      double v5 = *(double *)(a2 + 40)
         - *(double *)(*(void *)(*(void *)(a1 + 352) + 8 * ((v4 + *(void *)(a1 + 376) - 1) / 0x49uLL))
                     + 56 * ((v4 + *(void *)(a1 + 376) - 1) % 0x49uLL)
                     + 40);
      if (v5 < 0.0 || v5 > 1.0)
      {
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1023117D0);
        }
        unint64_t v7 = qword_102419298;
        if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)(a2 + 40);
          unint64_t v9 = *(void *)(a1 + 384) + *(void *)(a1 + 376) - 1;
          uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 352) + 8 * (v9 / 0x49)) + 56 * (v9 % 0x49) + 40);
          *(_DWORD *)uint64_t buf = 134349312;
          uint64_t v14 = v8;
          __int16 v15 = 2050;
          uint64_t v16 = v10;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[FormController] #warning: unexpected change in timestamp (%{public}.2f->%{public}.2f)", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419290 != -1) {
            dispatch_once(&qword_102419290, &stru_1023117D0);
          }
          unint64_t v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::feedDeviceMotion(const CLWorkoutPredictorDMInput &)", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
        sub_1010F9570((void *)a1);
      }
    }
    sub_1010F9658((void *)(a1 + 344), a2);
    sub_10080370C(a1 + 448, (void *)(a1 + 344), (void *)(a1 + 296));
    unint64_t v11 = *(void *)(a1 + 384);
    if (v11 >= 0x501)
    {
      do
      {
        ++*(void *)(a1 + 376);
        *(void *)(a1 + 384) = v11 - 1;
        sub_100ADB118(a1 + 344, 1);
        unint64_t v11 = *(void *)(a1 + 384);
      }
      while (v11 > 0x500);
    }
  }
}

void sub_1010F9570(void *a1)
{
  a1[52] = 0;
  uint64_t v2 = (void **)a1[38];
  uint64_t v3 = a1[39];
  a1[42] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[39];
      uint64_t v2 = (void **)(a1[38] + 8);
      a1[38] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 11;
  }
  else
  {
    if (v4 >> 3 != 2) {
      goto LABEL_8;
    }
    uint64_t v6 = 23;
  }
  a1[41] = v6;
LABEL_8:
  unint64_t v7 = (void **)a1[44];
  uint64_t v8 = a1[45];
  a1[48] = 0;
  unint64_t v9 = v8 - (void)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      uint64_t v10 = a1[45];
      unint64_t v7 = (void **)(a1[44] + 8);
      a1[44] = v7;
      unint64_t v9 = v10 - (void)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    uint64_t v11 = 36;
  }
  else
  {
    if (v9 >> 3 != 2) {
      goto LABEL_15;
    }
    uint64_t v11 = 73;
  }
  a1[47] = v11;
LABEL_15:

  sub_100803508((uint64_t)(a1 + 56));
}

__n128 sub_1010F9658(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 73 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1010FAB68(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x49)) + 56 * (v7 % 0x49);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(__n128 *)(v8 + 16) = result;
  *(_OWORD *)(v8 + 32) = v10;
  ++a1[5];
  return result;
}

uint64_t sub_1010F9718(uint64_t a1, void *a2)
{
  return sub_100803700(a1 + 448, a2);
}

uint64_t sub_1010F9720(uint64_t a1, uint64_t a2)
{
  sub_100103240();
  uint64_t result = sub_10010145C();
  if (result && *(_DWORD *)(a1 + 3300) != 2 && *(unsigned char *)(a1 + 425) && *(int *)(a2 + 112) >= 1)
  {
    return sub_1010F9790(a1);
  }
  return result;
}

uint64_t sub_1010F9790(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 408);
  if (v2)
  {
    std::string __p = 0;
    long long v10 = 0;
    uint64_t v11 = 0;
    uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 48))(v2, &__p);
    if (v3)
    {
      sub_100808900(a1 + 448, (uint64_t *)&__p);
    }
    else
    {
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      uint64_t v5 = qword_102419298;
      if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "[FormController] CLStrideCal database query failed, unable to calibrate StrideLength", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419290 != -1) {
          dispatch_once(&qword_102419290, &stru_1023117D0);
        }
        unint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRunning::FormController::calibrateStrideLength()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
    if (__p)
    {
      long long v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    uint64_t v4 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[FormController] No delegate, cannot calibrate StrideLength", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      LOWORD(__p) = 0;
      unint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRunning::FormController::calibrateStrideLength()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return 0;
  }
  return v3;
}

void sub_1010F9AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010F9AE8(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if ((a3 & 0xFE) == 2)
  {
    *(CFAbsoluteTime *)(a1 + 432) = CFAbsoluteTimeGetCurrent();
    *(unsigned char *)(a1 + 440) = a3;
    *(unsigned char *)(a1 + 441) = a4;
  }
  if (qword_102419290 != -1) {
    dispatch_once(&qword_102419290, &stru_1023117D0);
  }
  unint64_t v8 = qword_102419298;
  if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *(void *)(a1 + 432);
    char v10 = *(unsigned char *)(a1 + 440);
    char v11 = *(unsigned char *)(a1 + 441);
    *(_DWORD *)uint64_t buf = 134218752;
    uint64_t v14 = v9;
    __int16 v15 = 2048;
    uint64_t v16 = a2;
    __int16 v17 = 256;
    char v18 = v10;
    __int16 v19 = 256;
    char v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "gesture %f (%llul) - state: %hhu type: %hhu\n", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    unint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::feedWakeGesture(uint64_t, CMSPU::GestureState, CMSPU::GestureType)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_1010F9D14(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 3300) != a2)
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    uint64_t v4 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      int v7 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "[FormController] Setting ActivityMoveMode: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::feedMoveModeUpdate(CLFitnessTrackingNotifier_Type::ActivityMoveMode)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(_DWORD *)(a1 + 3300) = a2;
  }
}

double sub_1010F9ED4(uint64_t a1)
{
  sub_100D4E7D0(a1 + 3120);
  sub_100D4E7D0(a1 + 3232);
  sub_100D4E7D0(a1 + 3176);
  double result = 0.0;
  *(void *)(a1 + 3288) = 0;
  *(_DWORD *)(a1 + 3296) = 0;
  return result;
}

id *sub_1010F9F18(id *result, uint64_t a2)
{
  uint64_t v3 = result;
  if ((*(_DWORD *)(a2 + 32) & 0xFFFFFFBF) == 0)
  {
    uint64_t v4 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 56)];
    double result = (id *)[v3[50] writeToHealthRunningStrideLength:v4 startDate:v4 endDate:*(double *)(a2 + 8)];
  }
  int v5 = *(_DWORD *)(a2 + 36);
  if (!v5 || v5 == 256 || v5 == 64)
  {
    uint64_t v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)a2];
    double result = (id *)[v3[50] writeToHealthRunningGroundContactTime:v6 startDate:v6 endDate:*(double *)(a2 + 16)];
  }
  if ((*(_DWORD *)(a2 + 40) & 0xFFFFFFBF) == 0)
  {
    +[NSDate dateWithTimeIntervalSinceReferenceDate:*(double *)(a2 + 48)];
    id v7 = v3[50];
    double v8 = *(double *)(a2 + 24);
    return (id *)[v7 writeToHealthRunningVerticalOscillation:v8 startDate:v9 endDate:v10];
  }
  return result;
}

void sub_1010F9FF4(uint64_t a1, uint64_t *a2)
{
  if (qword_102419290 != -1) {
    dispatch_once(&qword_102419290, &stru_1023117D0);
  }
  uint64_t v3 = qword_102419298;
  if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
    int v6 = *((_DWORD *)a2 + 8);
    int v7 = *((_DWORD *)a2 + 9);
    uint64_t v8 = a2[2];
    uint64_t v9 = a2[3];
    int v10 = *((_DWORD *)a2 + 10);
    uint64_t v11 = a2[7];
    uint64_t v12 = a2[8];
    int v13 = *((_DWORD *)a2 + 18);
    int v14 = *((_DWORD *)a2 + 21);
    uint64_t v15 = a2[12];
    uint64_t v17 = a2[16];
    uint64_t v16 = a2[17];
    uint64_t v18 = a2[6];
    *(_DWORD *)uint64_t buf = 134352640;
    uint64_t v21 = v4;
    __int16 v22 = 2048;
    uint64_t v23 = v5;
    __int16 v24 = 1026;
    int v25 = v6;
    __int16 v26 = 2048;
    uint64_t v27 = v8;
    __int16 v28 = 1026;
    int v29 = v7;
    __int16 v30 = 2048;
    uint64_t v31 = v9;
    __int16 v32 = 1026;
    int v33 = v10;
    __int16 v34 = 2048;
    uint64_t v35 = v12;
    __int16 v36 = 1026;
    int v37 = v13;
    __int16 v38 = 1026;
    int v39 = v14;
    __int16 v40 = 2048;
    uint64_t v41 = v15;
    __int16 v42 = 2048;
    uint64_t v43 = v16;
    __int16 v44 = 2048;
    uint64_t v45 = v17;
    __int16 v46 = 2050;
    uint64_t v47 = v11;
    __int16 v48 = 2050;
    uint64_t v49 = v18;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FormMetrics,gctWindowEndTime,%{public}.2f,strideLength,%.2f,rejectionStatus,%{public}d,groundContactTime,%.2f,rejectionStatus,%{public}d,verticalOscillation,%.2f,rejectionStatus,%{public}d,strideLengthUncalibrated,%.2f,gctGradeType,%{public}d,gctGradeSource,%{public}d,gctGrade,%.2f,gctCadence,%.2f,gctPace,%.2f,slWindowEndTime,%{public}.2f,voWindowEndTime,%{public}.2f", buf, 0x84u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::logFormMetricsResult(const FormMetrics &) const", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
}

void sub_1010FA2EC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 424))
  {
    sub_101763150(a2, v2);
    if (qword_10248AF88 != -1) {
      dispatch_once(&qword_10248AF88, &stru_1023117F0);
    }
    if (qword_10248AF90) {
      operator new();
    }
    PB::Base::~Base((PB::Base *)v2);
  }
}

void sub_1010FA3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PB::Base::~Base((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_1010FA3F8(uint64_t a1, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 2:
      double v6 = sub_100D4E7FC((void *)(a1 + 3232));
      if (v6 <= 0.0 || *(int *)(a1 + 3296) > 4)
      {
        *(_DWORD *)(a2 + 32) |= 0x80u;
      }
      else
      {
        *(double *)(a2 + 8) = sub_100CAFB50(v6, 0.01);
        ++*(_DWORD *)(a1 + 3296);
      }
      break;
    case 1:
      double v7 = sub_100D4E7FC((void *)(a1 + 3176));
      if (v7 <= 0.0 || *(int *)(a1 + 3292) > 4)
      {
        *(_DWORD *)(a2 + 40) |= 0x80u;
      }
      else
      {
        *(double *)(a2 + 24) = sub_100CAFB50(v7, 0.001);
        ++*(_DWORD *)(a1 + 3292);
      }
      break;
    case 0:
      double v5 = sub_100D4E7FC((void *)(a1 + 3120));
      if (v5 <= 0.0 || *(int *)(a1 + 3288) > 4)
      {
        *(_DWORD *)(a2 + 36) |= 0x80u;
      }
      else
      {
        *(double *)(a2 + 16) = sub_100CAFB50(v5, 1.0);
        ++*(_DWORD *)(a1 + 3288);
      }
      break;
  }
}

void sub_1010FA50C(uint64_t a1, uint64_t a2, int a3)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  DWORD2(v15) = 1000;
  LODWORD(v16) = -1082130432;
  double v5 = (double *)a2;
  if (a3)
  {
    if (a3 == 1) {
      double v5 = (double *)(a2 + 48);
    }
    else {
      double v5 = (double *)(a2 + 56);
    }
  }
  if ((sub_10080A5F0((uint64_t)&v13, *(void **)(a1 + 392), *v5) & 1) == 0)
  {
    if (a3 == 2) {
      goto LABEL_40;
    }
LABEL_11:
    if (a3 == 1)
    {
      *(_DWORD *)(a2 + 40) |= 4u;
    }
    else if (!a3)
    {
      *(_DWORD *)(a2 + 36) |= 4u;
    }
    return;
  }
  if (a3 == 2)
  {
    double v6 = (double *)(a2 + 144);
  }
  else if (a3 == 1)
  {
    double v6 = (double *)(a2 + 160);
  }
  else
  {
    if (a3) {
      return;
    }
    double v6 = (double *)(a2 + 128);
  }
  if (*v6 > 0.0)
  {
    int v7 = DWORD2(v14);
    double v9 = sub_100DE6130(1.0 / *v6 * 2.23693991, *(double *)&v15 * 2.23693991);
    int v10 = DWORD2(v15);
    if (a3 == 2)
    {
      *(double *)(a2 + 112) = v9;
      *(_DWORD *)(a2 + 80) = v7;
      *(_DWORD *)(a2 + 92) = v10;
    }
    else if (a3 == 1)
    {
      *(double *)(a2 + 104) = v9;
      *(_DWORD *)(a2 + 76) = v7;
      *(_DWORD *)(a2 + 88) = v10;
    }
    else
    {
      *(double *)(a2 + 96) = v9;
      *(_DWORD *)(a2 + 72) = v7;
      *(_DWORD *)(a2 + 84) = v10;
    }
    if (v7 == 3)
    {
      if (v9 >= 0.0) {
        return;
      }
    }
    else
    {
      if (v7 != 1)
      {
        if (!v7)
        {
          if (qword_102419290 != -1) {
            dispatch_once(&qword_102419290, &stru_1023117D0);
          }
          uint64_t v11 = qword_102419298;
          if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 134349312;
            uint64_t v22 = *((void *)&v13 + 1);
            __int16 v23 = 1026;
            int v24 = DWORD2(v15);
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[FormController] Unable to determine grade -- startTime,%{public}.2f,source,%{public}d", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419290 != -1) {
              dispatch_once(&qword_102419290, &stru_1023117D0);
            }
            int v17 = 134349312;
            uint64_t v18 = *((void *)&v13 + 1);
            __int16 v19 = 1026;
            int v20 = DWORD2(v15);
            uint64_t v12 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::checkExcessiveGrade(FormMetrics &, FormMetricType) const", "%s\n", v12);
            if (v12 != (char *)buf) {
              free(v12);
            }
          }
        }
        return;
      }
      if (v9 <= 0.0) {
        return;
      }
    }
    if (!sub_1010FAAC8(v9, v8, a3)) {
      return;
    }
    if (a3 == 2)
    {
LABEL_40:
      *(_DWORD *)(a2 + 32) |= 4u;
      return;
    }
    goto LABEL_11;
  }
}

void sub_1010FA83C(uint64_t a1, uint64_t a2, int a3, double a4)
{
  switch(a3)
  {
    case 2:
      a4 = *(double *)(a2 + 56);
      break;
    case 1:
      a4 = *(double *)(a2 + 48);
      break;
    case 0:
      a4 = *(double *)a2;
      break;
  }
  double v7 = *(double *)(a1 + 432);
  double v8 = a4 + -10.24;
  double v9 = a4 + 5.12;
  BOOL v10 = v7 > v8 && v7 < v9;
  if (v10 && (*(unsigned char *)(a1 + 440) & 0xFE) == 2)
  {
    if (qword_102419290 != -1) {
      dispatch_once(&qword_102419290, &stru_1023117D0);
    }
    uint64_t v11 = qword_102419298;
    if (os_log_type_enabled((os_log_t)qword_102419298, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 432);
      *(_DWORD *)uint64_t buf = 67109376;
      int v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[FormController] Suppresing metric: %d, glanceTime: %.2f", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419290 != -1) {
        dispatch_once(&qword_102419290, &stru_1023117D0);
      }
      long long v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRunning::FormController::checkForGlances(FormMetrics &, FormMetricType)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    switch(a3)
    {
      case 2:
        *(_DWORD *)(a2 + 32) |= 0x40u;
        break;
      case 1:
        *(_DWORD *)(a2 + 40) |= 0x40u;
        break;
      case 0:
        *(_DWORD *)(a2 + 36) |= 0x40u;
        break;
    }
    sub_1010FA3F8(a1, a2, a3);
  }
}

BOOL sub_1010FAAC8(double a1, uint64_t a2, int a3)
{
  BOOL v3 = a1 > 9.0;
  if (a1 <= 0.0) {
    BOOL v3 = a1 < -9.0;
  }
  BOOL v4 = a1 > 9.0;
  if (a1 <= 0.0) {
    BOOL v4 = a1 < -9.0;
  }
  BOOL v5 = a1 > 9.0;
  if (a1 <= 0.0) {
    BOOL v5 = a1 < -9.0;
  }
  if (a3) {
    BOOL v5 = 0;
  }
  if (a3 != 1) {
    BOOL v4 = v5;
  }
  if (a3 == 2) {
    return v3;
  }
  else {
    return v4;
  }
}

void sub_1010FAB34(id a1)
{
  qword_102419298 = (uint64_t)os_log_create("com.apple.locationd.Motion", "RunningForm");
}

void sub_1010FAB68(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x49;
  unint64_t v4 = v2 - 73;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    double v6 = (char *)a1[3];
    a1[4] = v4;
    double v7 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)double v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      __int16 v38 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        double v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    __int16 v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    double v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF8uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF8uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    __int16 v44 = (void *)a1[1];
    double v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    double v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      __int16 v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      __int16 v48 = (uint64_t *)a1[1];
      double v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        double v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        double v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int32x2_t v53 = operator new(0xFF8uLL);
  sub_1000DA434(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_1010FAE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1010FAE80(uint64_t a1, int a2)
{
  *(_DWORD *)a1 = a2;
  size_t v3 = 156 * a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = 560 * a2;
  *(void *)(a1 + 24) = malloc_type_malloc(v3, 0x7BC1EC9AuLL);
  *(void *)(a1 + 32) = malloc_type_malloc(*(void *)(a1 + 16), 0xC42AC528uLL);
  *(void *)(a1 + 40) = dispatch_data_create(*(const void **)(a1 + 24), *(void *)(a1 + 8), 0, _dispatch_data_destructor_free);
  *(void *)(a1 + 48) = dispatch_data_create(*(const void **)(a1 + 32), *(void *)(a1 + 16), 0, _dispatch_data_destructor_free);
  return a1;
}

uint64_t sub_1010FAF1C(uint64_t a1, const void *a2, int a3)
{
  *(_DWORD *)a1 = a3;
  size_t v6 = 156 * a3;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = 560 * a3;
  *(void *)(a1 + 24) = malloc_type_malloc(v6, 0xC48DF30AuLL);
  *(void *)(a1 + 32) = malloc_type_malloc(*(void *)(a1 + 16), 0x7F848C98uLL);
  *(void *)(a1 + 40) = dispatch_data_create(*(const void **)(a1 + 24), *(void *)(a1 + 8), 0, _dispatch_data_destructor_free);
  *(void *)(a1 + 48) = dispatch_data_create(*(const void **)(a1 + 32), *(void *)(a1 + 16), 0, _dispatch_data_destructor_free);
  memcpy(*(void **)(a1 + 24), a2, *(void *)(a1 + 8));
  if (a3)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a3;
    do
    {
      memcpy((void *)(*(void *)(a1 + 32) + v7), &unk_101DA7130, 0x230uLL);
      v7 += 560;
      --v8;
    }
    while (v8);
  }
  return a1;
}

uint64_t sub_1010FB010(uint64_t a1, const void *a2, const void *a3, int a4)
{
  *(_DWORD *)a1 = a4;
  size_t v7 = 156 * a4;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = 560 * a4;
  *(void *)(a1 + 24) = malloc_type_malloc(v7, 0xC48E88B4uLL);
  *(void *)(a1 + 32) = malloc_type_malloc(*(void *)(a1 + 16), 0x5A12D4FAuLL);
  *(void *)(a1 + 40) = dispatch_data_create(*(const void **)(a1 + 24), *(void *)(a1 + 8), 0, _dispatch_data_destructor_free);
  *(void *)(a1 + 48) = dispatch_data_create(*(const void **)(a1 + 32), *(void *)(a1 + 16), 0, _dispatch_data_destructor_free);
  if (a2) {
    memcpy(*(void **)(a1 + 24), a2, *(void *)(a1 + 8));
  }
  if (a3) {
    memcpy(*(void **)(a1 + 32), a3, *(void *)(a1 + 16));
  }
  return a1;
}

uint64_t sub_1010FB0E8(uint64_t a1, uint64_t *a2)
{
  sub_1010FAE80(a1, -1762037865 * ((unint64_t)(a2[1] - *a2) >> 2));
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    uint64_t v6 = 0;
    do
    {
      size_t v7 = (_OWORD *)(*(void *)(a1 + 24) + v6);
      long long v8 = *(_OWORD *)(v4 + v6 + 16);
      *size_t v7 = *(_OWORD *)(v4 + v6);
      v7[1] = v8;
      long long v9 = *(_OWORD *)(v4 + v6 + 32);
      long long v10 = *(_OWORD *)(v4 + v6 + 48);
      long long v11 = *(_OWORD *)(v4 + v6 + 80);
      v7[4] = *(_OWORD *)(v4 + v6 + 64);
      void v7[5] = v11;
      _OWORD v7[2] = v9;
      void v7[3] = v10;
      long long v12 = *(_OWORD *)(v4 + v6 + 96);
      long long v13 = *(_OWORD *)(v4 + v6 + 112);
      long long v14 = *(_OWORD *)(v4 + v6 + 128);
      *(_OWORD *)((char *)v7 + 140) = *(_OWORD *)(v4 + v6 + 140);
      void v7[7] = v13;
      v7[8] = v14;
      void v7[6] = v12;
      v6 += 156;
    }
    while (v4 + v6 != v5);
    if (a2[1] != *a2)
    {
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      do
      {
        memcpy((void *)(*(void *)(a1 + 32) + v16), &unk_101DA7130, 0x230uLL);
        v16 += 560;
        ++v15;
      }
      while (v15 < 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 2));
    }
  }
  return a1;
}

void *sub_1010FB1F8(void *a1)
{
  unint64_t v2 = a1[5];
  if (v2)
  {
    dispatch_release(v2);
  }
  else
  {
    size_t v3 = (void *)a1[3];
    if (v3) {
      free(v3);
    }
  }
  uint64_t v4 = a1[6];
  if (v4)
  {
    dispatch_release(v4);
  }
  else
  {
    uint64_t v5 = (void *)a1[4];
    if (v5) {
      free(v5);
    }
  }
  return a1;
}

__n128 sub_1010FB258@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1010FB4B0((int *)a1, a2);
  if (*(void *)(a1 + 8))
  {
    uint64_t v6 = *(void *)(a1 + 24) + 156 * a2;
    long long v7 = *(_OWORD *)(v6 + 112);
    *(_OWORD *)(a3 + 96) = *(_OWORD *)(v6 + 96);
    *(_OWORD *)(a3 + 112) = v7;
    *(_OWORD *)(a3 + 128) = *(_OWORD *)(v6 + 128);
    *(_OWORD *)(a3 + 140) = *(_OWORD *)(v6 + 140);
    long long v8 = *(_OWORD *)(v6 + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v6 + 32);
    *(_OWORD *)(a3 + 48) = v8;
    long long v9 = *(_OWORD *)(v6 + 80);
    *(_OWORD *)(a3 + 64) = *(_OWORD *)(v6 + 64);
    *(_OWORD *)(a3 + 80) = v9;
    __n128 result = *(__n128 *)v6;
    long long v11 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v6;
    *(_OWORD *)(a3 + 16) = v11;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102311830);
    }
    long long v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      unint64_t v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "#batchedlocations,requested location index %{public}zu but buffer is empty, return default value", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102311830);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonLocation CLBatchedLocations::daemonLocationForIndex(size_t) const", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    *(_DWORD *)a3 = 0xFFFF;
    *(void *)(a3 + 12) = 0;
    *(void *)(a3 + 4) = 0;
    *(_OWORD *)(a3 + 20) = xmmword_101D1C320;
    __asm { FMOV            V0.2D, #-1.0 }
    *(__n128 *)(a3 + 36) = result;
    *(__n128 *)(a3 + 52) = result;
    *(__n128 *)(a3 + 68) = result;
    *(_DWORD *)(a3 + 84) = 0;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = 0;
    *(void *)(a3 + 88) = 0xBFF0000000000000;
    *(_DWORD *)(a3 + 112) = 0;
    *(void *)(a3 + 116) = 0xBFF0000000000000;
    *(_DWORD *)(a3 + 124) = 0x7FFFFFFF;
    *(void *)(a3 + 136) = 0;
    *(void *)(a3 + 144) = 0;
    *(void *)(a3 + 128) = 0;
    *(unsigned char *)(a3 + 152) = 0;
  }
  return result;
}

int *sub_1010FB4B0(int *result, unint64_t a2)
{
  if (*result <= a2)
  {
    size_t v3 = result;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102311830);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      uint64_t v5 = *v3;
      *(_DWORD *)uint64_t buf = 68290051;
      int v11 = 0;
      __int16 v12 = 2082;
      long long v13 = "";
      __int16 v14 = 2050;
      unint64_t v15 = a2;
      __int16 v16 = 2050;
      uint64_t v17 = v5;
      __int16 v18 = 2082;
      unint64_t v19 = "assert";
      __int16 v20 = 2081;
      uint64_t v21 = "index < fNumEntries";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"out of bounds index entry in #batchedlocations\", \"index\":%{public}ld, \"batchedLocationsSize\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102311830);
      }
    }
    uint64_t v6 = qword_102419388;
    if (os_signpost_enabled((os_log_t)qword_102419388))
    {
      uint64_t v7 = *v3;
      *(_DWORD *)uint64_t buf = 68290051;
      int v11 = 0;
      __int16 v12 = 2082;
      long long v13 = "";
      __int16 v14 = 2050;
      unint64_t v15 = a2;
      __int16 v16 = 2050;
      uint64_t v17 = v7;
      __int16 v18 = 2082;
      unint64_t v19 = "assert";
      __int16 v20 = 2081;
      uint64_t v21 = "index < fNumEntries";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "out of bounds index entry in #batchedlocations", "{\"msg%{public}.0s\":\"out of bounds index entry in #batchedlocations\", \"index\":%{public}ld, \"batchedLocationsSize\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102311830);
      }
    }
    long long v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *v3;
      *(_DWORD *)uint64_t buf = 68290051;
      int v11 = 0;
      __int16 v12 = 2082;
      long long v13 = "";
      __int16 v14 = 2050;
      unint64_t v15 = a2;
      __int16 v16 = 2050;
      uint64_t v17 = v9;
      __int16 v18 = 2082;
      unint64_t v19 = "assert";
      __int16 v20 = 2081;
      uint64_t v21 = "index < fNumEntries";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"out of bounds index entry in #batchedlocations\", \"index\":%{public}ld, \"batchedLocationsSize\":%{public}ld, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x3Au);
    }
    abort_report_np();
  }
  return result;
}

void sub_1010FB770(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1010FB4B0((int *)a1, a2);
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = *(void *)(a1 + 32) + 560 * a2;
    sub_1000789AC(a3, v6);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102311830);
    }
    uint64_t v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      unint64_t v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#batchedlocations,requested location private index %{public}zu but buffer is empty, return default value", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102311830);
      }
      long long v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLDaemonLocationPrivate CLBatchedLocations::daemonLocationPrivateForIndex(size_t) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_1000DBC34(a3);
  }
}

__n128 sub_1010FB988(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1010FB4B0((int *)a1, a3);
  uint64_t v6 = *(void *)(a1 + 24) + 156 * a3;
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v7;
  long long v8 = *(_OWORD *)(a2 + 32);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 80) = v10;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = v9;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v12 = *(_OWORD *)(a2 + 112);
  long long v13 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v6 + 140) = *(_OWORD *)(a2 + 140);
  *(_OWORD *)(v6 + 112) = v12;
  *(_OWORD *)(v6 + 128) = v13;
  *(__n128 *)(v6 + 96) = result;
  return result;
}

uint64_t sub_1010FB9FC(int *a1)
{
  return *a1;
}

BOOL sub_1010FBA04(int *a1, int a2)
{
  int v2 = *a1;
  if (*a1 >= a2) {
    *a1 = a2;
  }
  return v2 >= a2;
}

void sub_1010FBA20(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_1010FC984(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    unint64_t v12 = v6 >> 3;
    if ((v6 >> 3) == 3)
    {
      Data = (void *)PBReaderReadData();

      *(void *)(a1 + 8) = Data;
    }
    else
    {
      if (v12 == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v21 == -1 || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_42;
          }
          v19 += 7;
          BOOL v9 = v20++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_44;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_42:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_44:
        uint64_t v24 = 20;
      }
      else
      {
        if (v12 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
        }
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        while (1)
        {
          unint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v16 == -1 || v16 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v17 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v16 + 1;
          v15 |= (unint64_t)(v17 & 0x7F) << v13;
          if ((v17 & 0x80) == 0) {
            goto LABEL_38;
          }
          v13 += 7;
          BOOL v9 = v14++ >= 9;
          if (v9)
          {
            LODWORD(v15) = 0;
            goto LABEL_40;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_38:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_40:
        uint64_t v24 = 16;
      }
      *(_DWORD *)(a1 + v24) = v15;
    }
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1010FCFC8(uint64_t a1, long long *a2, uint64_t *a3, double a4)
{
  double v12 = a4;
  sub_10064DE4C(a1, a3, &v12);
  *(void *)a1 = off_102311890;
  unint64_t v6 = (_OWORD *)(a1 + 232);
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 232), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 248) = *((void *)a2 + 2);
    *unint64_t v6 = v7;
  }
  if (sub_10014C3C0(a1 + 64))
  {
    char v8 = (char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0) {
      char v8 = *(char **)v6;
    }
    sub_1005F7B0C(a1 + 64, v8, (const char **)&qword_1024852E0, 0, 0);
    sub_10064DFA4(a1);
  }
  else
  {
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1023118C0);
    }
    BOOL v9 = off_1024195E8;
    if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning CLWifiHarvestDatabase is not valid; not initializing! Please add retry logic if needed!",
        buf,
        2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024195E0 != -1) {
        dispatch_once(&qword_1024195E0, &stru_1023118C0);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLWifiHarvestDatabase::CLWifiHarvestDatabase(std::string, const CLSqliteDatabase::SqliteProperties &, double)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  return a1;
}

void sub_1010FD204(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 255) < 0) {
    operator delete(*v2);
  }
  sub_10064DF48(v1);
  _Unwind_Resume(a1);
}

char *sub_1010FD23C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[255] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *((void **)result + 29), *((void *)result + 30));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 232);
  *(void *)(a2 + 16) = *((void *)result + 31);
  return result;
}

uint64_t sub_1010FD268(uint64_t a1)
{
  if (sub_10064E538(a1))
  {
    sub_10010F274((uint64_t)&v42);
    int v2 = sub_100132EFC(&v43, (uint64_t)"INSERT OR REPLACE INTO ", 23);
    size_t v3 = (const char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0) {
      size_t v3 = *(const char **)v3;
    }
    size_t v4 = strlen(v3);
    unsigned int v5 = sub_100132EFC(v2, (uint64_t)v3, v4);
    unint64_t v6 = sub_100132EFC(v5, (uint64_t)"(", 3);
    long long v7 = sub_100132EFC(v6, (uint64_t)"MAC", 3);
    char v8 = sub_100132EFC(v7, (uint64_t)",", 1);
    BOOL v9 = sub_100132EFC(v8, (uint64_t)"Channel", 7);
    int v10 = sub_100132EFC(v9, (uint64_t)",", 1);
    int v11 = sub_100132EFC(v10, (uint64_t)"Rssi", 4);
    double v12 = sub_100132EFC(v11, (uint64_t)",", 1);
    char v13 = sub_100132EFC(v12, (uint64_t)"ScanTimestamp", 13);
    unsigned int v14 = sub_100132EFC(v13, (uint64_t)",", 1);
    size_t v15 = strlen("Timestamp");
    unint64_t v16 = sub_100132EFC(v14, (uint64_t)"Timestamp", v15);
    char v17 = sub_100132EFC(v16, (uint64_t)",", 1);
    size_t v18 = strlen("Latitude");
    char v19 = sub_100132EFC(v17, (uint64_t)"Latitude", v18);
    unsigned int v20 = sub_100132EFC(v19, (uint64_t)",", 1);
    size_t v21 = strlen("Longitude");
    char v22 = sub_100132EFC(v20, (uint64_t)"Longitude", v21);
    uint64_t v23 = sub_100132EFC(v22, (uint64_t)",", 1);
    size_t v24 = strlen("HorizontalAccuracy");
    unint64_t v25 = sub_100132EFC(v23, (uint64_t)"HorizontalAccuracy", v24);
    uint64_t v26 = sub_100132EFC(v25, (uint64_t)",", 1);
    size_t v27 = strlen("Altitude");
    uint64_t v28 = sub_100132EFC(v26, (uint64_t)"Altitude", v27);
    int v29 = sub_100132EFC(v28, (uint64_t)",", 1);
    size_t v30 = strlen("VerticalAccuracy");
    long long v31 = sub_100132EFC(v29, (uint64_t)"VerticalAccuracy", v30);
    long long v32 = sub_100132EFC(v31, (uint64_t)",", 1);
    unint64_t v33 = sub_100132EFC(v32, (uint64_t)"LoiType", 7);
    __int16 v34 = sub_100132EFC(v33, (uint64_t)") VALUES ", 9);
    sub_100132EFC(v34, (uint64_t)"(?,?,?,?,?,?,?,?,?,?,?);", 24);
    std::stringbuf::str();
    uint64_t v35 = a1 + 64;
    if (v41 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(v35, (uint64_t)p_p);
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1023118C0);
  }
  int v37 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call insertOrReplace() without a backing database in CLWifiHarvestDatabase!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1023118C0);
    }
    LOWORD(v42) = 0;
    uint64_t v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiHarvestDatabase::insertOrReplace(const CLWifiHarvestDatabaseEntry &)", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  return 0;
}

void sub_1010FDB94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a13) {
    (*(void (**)(uint64_t))(*(void *)a13 + 8))(a13);
  }
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1010FDC14(uint64_t a1)
{
  if (sub_10064E538(a1))
  {
    sub_10010F274((uint64_t)buf);
    int v2 = sub_100132EFC(&v18, (uint64_t)"DELETE FROM ", 12);
    size_t v3 = (const char *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0) {
      size_t v3 = *(const char **)v3;
    }
    size_t v4 = strlen(v3);
    unsigned int v5 = sub_100132EFC(v2, (uint64_t)v3, v4);
    unint64_t v6 = sub_100132EFC(v5, (uint64_t)" WHERE ", 7);
    long long v7 = sub_100132EFC(v6, (uint64_t)"MAC", 3);
    char v8 = sub_100132EFC(v7, (uint64_t)" = ? AND ", 9);
    size_t v9 = strlen("Timestamp");
    int v10 = sub_100132EFC(v8, (uint64_t)"Timestamp", v9);
    sub_100132EFC(v10, (uint64_t)"< ?;", 4);
    std::stringbuf::str();
    if (v16 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1 + 64, (uint64_t)p_p);
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1023118C0);
  }
  double v12 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call deleteByMacAndTimestampLessThan() without a backing database in CLWifiHarvestDatabase!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1023118C0);
    }
    LOWORD(__p) = 0;
    unsigned int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiHarvestDatabase::deleteByMacAndTimestampLessThan(const CLMacAddress &, const CFAbsoluteTime &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  return 0;
}

void sub_1010FE088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1010FE0D4(uint64_t a1)
{
  return sub_1010FDC14(a1);
}

uint64_t sub_1010FE100(uint64_t a1)
{
  sub_10010F274((uint64_t)v39);
  int v2 = sub_100132EFC(v40, (uint64_t)"SELECT ", 7);
  size_t v3 = sub_100132EFC(v2, (uint64_t)"MAC", 3);
  size_t v4 = sub_100132EFC(v3, (uint64_t)",", 1);
  unsigned int v5 = sub_100132EFC(v4, (uint64_t)"Channel", 7);
  unint64_t v6 = sub_100132EFC(v5, (uint64_t)",", 1);
  long long v7 = sub_100132EFC(v6, (uint64_t)"Rssi", 4);
  char v8 = sub_100132EFC(v7, (uint64_t)",", 1);
  size_t v9 = sub_100132EFC(v8, (uint64_t)"ScanTimestamp", 13);
  int v10 = sub_100132EFC(v9, (uint64_t)",", 1);
  size_t v11 = strlen("Timestamp");
  double v12 = sub_100132EFC(v10, (uint64_t)"Timestamp", v11);
  char v13 = sub_100132EFC(v12, (uint64_t)",", 1);
  size_t v14 = strlen("Latitude");
  size_t v15 = sub_100132EFC(v13, (uint64_t)"Latitude", v14);
  char v16 = sub_100132EFC(v15, (uint64_t)",", 1);
  size_t v17 = strlen("Longitude");
  uint64_t v18 = sub_100132EFC(v16, (uint64_t)"Longitude", v17);
  char v19 = sub_100132EFC(v18, (uint64_t)",", 1);
  size_t v20 = strlen("HorizontalAccuracy");
  size_t v21 = sub_100132EFC(v19, (uint64_t)"HorizontalAccuracy", v20);
  char v22 = sub_100132EFC(v21, (uint64_t)",", 1);
  size_t v23 = strlen("Altitude");
  size_t v24 = sub_100132EFC(v22, (uint64_t)"Altitude", v23);
  unint64_t v25 = sub_100132EFC(v24, (uint64_t)",", 1);
  size_t v26 = strlen("VerticalAccuracy");
  size_t v27 = sub_100132EFC(v25, (uint64_t)"VerticalAccuracy", v26);
  uint64_t v28 = sub_100132EFC(v27, (uint64_t)",", 1);
  int v29 = sub_100132EFC(v28, (uint64_t)"LoiType", 7);
  size_t v30 = sub_100132EFC(v29, (uint64_t)" FROM ", 6);
  uint64_t v33 = *(void *)(a1 + 232);
  uint64_t v32 = a1 + 232;
  uint64_t v31 = v33;
  int v34 = *(char *)(v32 + 23);
  if (v34 >= 0) {
    uint64_t v35 = v32;
  }
  else {
    uint64_t v35 = v31;
  }
  if (v34 >= 0) {
    uint64_t v36 = *(unsigned __int8 *)(v32 + 23);
  }
  else {
    uint64_t v36 = *(void *)(v32 + 8);
  }
  sub_100132EFC(v30, v35, v36);
  std::stringbuf::str();
  *(void *)((char *)v39
  v40[0] = v37;
  if (v41 < 0) {
    operator delete((void *)v40[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1010FE48C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1010FE4A0(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (sub_10064E538(a1))
  {
    sub_1010FE100(a1);
    if (v8 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1 + 64, (uint64_t)p_p);
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1023118C0);
  }
  unsigned int v5 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getAllEntries() without a backing database in CLWifiHarvestDatabase!", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1023118C0);
    }
    unint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLWifiHarvestDatabaseEntry> CLWifiHarvestDatabase::getAllEntries()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_1010FE9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010FEA4C(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (sub_10064E538(a1))
  {
    sub_1010FE100(a1);
    size_t v4 = std::string::append(&v14, " WHERE ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    unint64_t v6 = std::string::append(&v13, "MAC");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    char v8 = std::string::append(&v17, " = ? ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v16 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (v16 >= 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    sub_10014D518(a1 + 64, (uint64_t)v10);
  }
  if (qword_1024195E0 != -1) {
    dispatch_once(&qword_1024195E0, &stru_1023118C0);
  }
  size_t v11 = off_1024195E8;
  if (os_log_type_enabled((os_log_t)off_1024195E8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v17.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getEntriesForMac() without a backing database in CLWifiHarvestDatabase!", (uint8_t *)&v17, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v17, 0x65CuLL);
    if (qword_1024195E0 != -1) {
      dispatch_once(&qword_1024195E0, &stru_1023118C0);
    }
    LOWORD(v13.__r_.__value_.__l.__data_) = 0;
    double v12 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::vector<CLWifiHarvestDatabaseEntry> CLWifiHarvestDatabase::getEntriesForMac(const CLMacAddress &)", "%s\n", (const char *)v12);
    if (v12 != &v17) {
      free(v12);
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_1010FF07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1010FF158(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_1010FE4A0(a1, &v47);
  size_t v3 = v47;
  size_t v4 = v48;
  if (v47 != v48)
  {
    do
    {
      uint64_t v46 = *(void *)v3;
      uint64_t v49 = &v46;
      long long v5 = sub_1010FF4C0(a2, &v46, (uint64_t)&unk_101D0B290, &v49);
      unint64_t v6 = (_OWORD *)v5[4];
      unint64_t v7 = v5[5];
      if ((unint64_t)v6 >= v7)
      {
        uint64_t v18 = v5[3];
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v18) >> 6);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0x155555555555555) {
          sub_1001D7FD4();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v18) >> 6);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v22 = 0x155555555555555;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22) {
          size_t v23 = (char *)sub_10017EB28((uint64_t)(v5 + 5), v22);
        }
        else {
          size_t v23 = 0;
        }
        size_t v24 = &v23[192 * v19];
        long long v25 = *v3;
        long long v26 = v3[1];
        long long v27 = v3[3];
        *((_OWORD *)v24 + 2) = v3[2];
        *((_OWORD *)v24 + 3) = v27;
        *(_OWORD *)size_t v24 = v25;
        *((_OWORD *)v24 + 1) = v26;
        long long v28 = v3[4];
        long long v29 = v3[5];
        long long v30 = v3[7];
        *((_OWORD *)v24 + 6) = v3[6];
        *((_OWORD *)v24 + 7) = v30;
        *((_OWORD *)v24 + 4) = v28;
        *((_OWORD *)v24 + 5) = v29;
        long long v31 = v3[8];
        long long v32 = v3[9];
        long long v33 = v3[11];
        *((_OWORD *)v24 + 10) = v3[10];
        *((_OWORD *)v24 + 11) = v33;
        *((_OWORD *)v24 + 8) = v31;
        *((_OWORD *)v24 + 9) = v32;
        uint64_t v35 = (char *)v5[3];
        int v34 = (char *)v5[4];
        uint64_t v36 = v24;
        if (v34 != v35)
        {
          do
          {
            long long v37 = *((_OWORD *)v34 - 12);
            long long v38 = *((_OWORD *)v34 - 11);
            long long v39 = *((_OWORD *)v34 - 9);
            *((_OWORD *)v36 - 10) = *((_OWORD *)v34 - 10);
            *((_OWORD *)v36 - 9) = v39;
            *((_OWORD *)v36 - 12) = v37;
            *((_OWORD *)v36 - 11) = v38;
            long long v40 = *((_OWORD *)v34 - 8);
            long long v41 = *((_OWORD *)v34 - 7);
            long long v42 = *((_OWORD *)v34 - 5);
            *((_OWORD *)v36 - 6) = *((_OWORD *)v34 - 6);
            *((_OWORD *)v36 - 5) = v42;
            *((_OWORD *)v36 - 8) = v40;
            *((_OWORD *)v36 - 7) = v41;
            long long v43 = *((_OWORD *)v34 - 4);
            long long v44 = *((_OWORD *)v34 - 3);
            long long v45 = *((_OWORD *)v34 - 1);
            *((_OWORD *)v36 - 2) = *((_OWORD *)v34 - 2);
            *((_OWORD *)v36 - 1) = v45;
            *((_OWORD *)v36 - 4) = v43;
            *((_OWORD *)v36 - 3) = v44;
            v36 -= 192;
            v34 -= 192;
          }
          while (v34 != v35);
          int v34 = (char *)v5[3];
        }
        std::string v17 = v24 + 192;
        void v5[3] = v36;
        unsigned __int8 v5[4] = v24 + 192;
        void v5[5] = &v23[192 * v22];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        long long v8 = *v3;
        long long v9 = v3[1];
        long long v10 = v3[3];
        void v6[2] = v3[2];
        v6[3] = v10;
        *unint64_t v6 = v8;
        v6[1] = v9;
        long long v11 = v3[4];
        long long v12 = v3[5];
        long long v13 = v3[7];
        _OWORD v6[6] = v3[6];
        v6[7] = v13;
        void v6[4] = v11;
        void v6[5] = v12;
        long long v14 = v3[8];
        long long v15 = v3[9];
        long long v16 = v3[11];
        v6[10] = v3[10];
        void v6[11] = v16;
        v6[8] = v14;
        v6[9] = v15;
        std::string v17 = v6 + 12;
      }
      unsigned __int8 v5[4] = v17;
      v3 += 12;
    }
    while (v3 != v4);
    size_t v3 = v47;
  }
  if (v3)
  {
    __int16 v48 = v3;
    operator delete(v3);
  }
}

void sub_1010FF38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_10087B3F8(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_1010FF3BC(uint64_t a1)
{
  *(void *)a1 = off_102311890;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }

  return sub_10064DF48(a1);
}

void sub_1010FF41C(uint64_t a1)
{
  *(void *)a1 = off_102311890;
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  sub_10064DF48(a1);

  operator delete();
}

void sub_1010FF490(id a1)
{
  off_1024195E8 = os_log_create("com.apple.locationd.Utility", "Database");
}

void *sub_1010FF4C0(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v8 = sub_1000D8908((uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    long long v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (sub_100B39178(i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  long long v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v9;
  uint64_t v17 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v17;
  i[3] = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_100100330(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  long long v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *uint64_t i = *v25;
LABEL_38:
    void *v25 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v16;
  void *v16 = i;
  *(void *)(v24 + 8 * v4) = v16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    long long v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}