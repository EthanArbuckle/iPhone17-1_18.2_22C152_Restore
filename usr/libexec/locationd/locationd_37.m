void sub_1018917E4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  int v8;

  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102343FA8);
  }
  v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 2319);
    v4[0] = 68289282;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    v7 = 1026;
    v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#EmgContext\", \"BatterySaver\":%{public}d}", (uint8_t *)v4, 0x18u);
  }
}

void sub_1018918D0(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)(a1 + 2340) <= v2 && v2 >= 5)
  {
    *(_OWORD *)(a1 + 2336) = *(_OWORD *)a2;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102343FC8);
    }
    v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v6 = *(_DWORD *)(a1 + 2336);
      int v7 = *(_DWORD *)(a1 + 2340);
      int v8 = *(_DWORD *)(a1 + 2348);
      int v9 = *(_DWORD *)(a1 + 2344);
      *(_DWORD *)buf = 67240960;
      int v12 = v6;
      __int16 v13 = 1026;
      int v14 = v7;
      __int16 v15 = 1026;
      int v16 = v8;
      __int16 v17 = 1026;
      int v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BaroAlt,DriftRate AWD Data,closeLoopError,%{public}d,durationSinceLastCalibEv,%{public}d,distanceFromLastCalibEv,%{public}d,estAltUnc,%{public}d", buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102343FC8);
      }
      v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::setBarometricAltitudeData(const CLDaemonStats_Type::BarometricAltitudeDriftRateInfo &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
}

uint64_t sub_101891AF4(uint64_t a1)
{
  id v2 = [[[*(id *)a1 vendor] proxyForService:@"CLClientManager"];
  [v2 registerDelegate:sub_1000C86C4(a1 + 2440) inSilo:[*(id *)a1 silo]];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_101891F1C;
  v9[3] = &unk_102343F28;
  v9[4] = a1;
  [v2 fetchLocationClientKeysWithReply:v9];
  if (!*(void *)(a1 + 2416))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssawd,creating fOrientationDispatcher,onSessionStart()", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onSessionStart()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    [*(id *)a1 silo];
    operator new();
  }
  uint64_t result = sub_1000A16E8();
  if ((result & 0x40) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssawd,subscribing to device orientation,onSessionStart(),non-alwaysOnOrientation device", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onSessionStart()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    uint64_t v5 = sub_1003A1724();
    return sub_1009D1EC4(v5, 0, *(void *)(a1 + 2416), -1.0);
  }
  return result;
}

void sub_101891EF0()
{
}

void sub_101891F1C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if ([a2 count])
  {
    id v4 = [[objc_msgSend(a2, "allObjects") objectAtIndexedSubscript:arc4random_uniform((uint32_t)objc_msgSend(a2, "count"))];
    if (v4)
    {
      sub_100134750(buf, (char *)[v4 UTF8String]);
      uint64_t v5 = (void **)(v3 + 2376);
      if (*(char *)(v3 + 2399) < 0) {
        operator delete(*v5);
      }
      *(_OWORD *)uint64_t v5 = *(_OWORD *)buf;
      *(void *)(v3 + 2392) = v10;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int v7 = (void *)(v3 + 2376);
        if (*(char *)(v3 + 2399) < 0) {
          int v7 = *v5;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#gnssawd Selected LocationClientKey ,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        int v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::onSessionStart()_block_invoke", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
  }
}

void sub_101892154(uint64_t a1)
{
  sub_1000C7F88(buf);
  LOBYTE(v48[0]) = 0;
  int v2 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v48);
  if (LOBYTE(v48[0])) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (*(void *)v62) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v62);
  }
  if (v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    id v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,cacheCellularAWDMetrics", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      LOWORD(v48[0]) = 0;
      v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::cacheCellularAWDMetrics()", "%s\n", v39);
      if (v39 != (char *)buf) {
        free(v39);
      }
    }
  }
  *(_DWORD *)(a1 + 2544) = *(_DWORD *)(a1 + 2516);
  uint64_t v5 = *(char **)(a1 + 2576);
  unint64_t v6 = *(void *)(a1 + 2584);
  if ((unint64_t)v5 >= v6)
  {
    int v8 = *(char **)(a1 + 2568);
    uint64_t v9 = (v5 - v8) >> 2;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_1001D7FD4();
    }
    unint64_t v10 = v6 - (void)v8;
    unint64_t v11 = (uint64_t)(v6 - (void)v8) >> 1;
    if (v11 <= v9 + 1) {
      unint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      __int16 v13 = (char *)sub_10017EA34(a1 + 2584, v12);
      uint64_t v5 = *(char **)(a1 + 2576);
      int v8 = *(char **)(a1 + 2568);
    }
    else
    {
      __int16 v13 = 0;
    }
    int v14 = &v13[4 * v9];
    __int16 v15 = &v13[4 * v12];
    *(_DWORD *)int v14 = *(_DWORD *)(a1 + 2536);
    int v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *((_DWORD *)v5 - 1);
      v5 -= 4;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)(a1 + 2568) = v14;
    *(void *)(a1 + 2576) = v7;
    *(void *)(a1 + 2584) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v5 = *(_DWORD *)(a1 + 2536);
    int v7 = v5 + 4;
  }
  *(void *)(a1 + 2576) = v7;
  __int16 v17 = *(char **)(a1 + 2600);
  unint64_t v18 = *(void *)(a1 + 2608);
  if ((unint64_t)v17 >= v18)
  {
    v20 = *(char **)(a1 + 2592);
    uint64_t v21 = (v17 - v20) >> 2;
    if ((unint64_t)(v21 + 1) >> 62) {
      sub_1001D7FD4();
    }
    unint64_t v22 = v18 - (void)v20;
    unint64_t v23 = (uint64_t)(v18 - (void)v20) >> 1;
    if (v23 <= v21 + 1) {
      unint64_t v23 = v21 + 1;
    }
    if (v22 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24)
    {
      v25 = (char *)sub_10017EA34(a1 + 2608, v24);
      __int16 v17 = *(char **)(a1 + 2600);
      v20 = *(char **)(a1 + 2592);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[4 * v21];
    v27 = &v25[4 * v24];
    *(_DWORD *)v26 = *(_DWORD *)(a1 + 2532);
    v19 = v26 + 4;
    while (v17 != v20)
    {
      int v28 = *((_DWORD *)v17 - 1);
      v17 -= 4;
      *((_DWORD *)v26 - 1) = v28;
      v26 -= 4;
    }
    *(void *)(a1 + 2592) = v26;
    *(void *)(a1 + 2600) = v19;
    *(void *)(a1 + 2608) = v27;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    *(_DWORD *)__int16 v17 = *(_DWORD *)(a1 + 2532);
    v19 = v17 + 4;
  }
  *(void *)(a1 + 2600) = v19;
  *(_DWORD *)(a1 + 2548) = *(_DWORD *)(a1 + 2520);
  *(void *)(a1 + 2552) = *(void *)(a1 + 2524);
  sub_1000C7F88(buf);
  LOBYTE(v48[0]) = 0;
  int v29 = sub_1000D2988(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v48);
  if (LOBYTE(v48[0])) {
    int v30 = v29;
  }
  else {
    int v30 = 0;
  }
  if (*(void *)v62) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v62);
  }
  if (v30)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    v31 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v32 = *(_DWORD *)(a1 + 2544);
      double v33 = *(float *)(a1 + 2556);
      double v34 = *(float *)(a1 + 2552);
      int v35 = *(_DWORD *)(a1 + 2548);
      int v36 = *(_DWORD *)(a1 + 2536);
      int v37 = *(_DWORD *)(a1 + 2532);
      int v38 = *(_DWORD *)(a1 + 2560);
      *(_DWORD *)buf = 67110656;
      *(_DWORD *)&uint8_t buf[4] = v32;
      *(_WORD *)v62 = 2048;
      *(double *)&v62[2] = v33;
      __int16 v63 = 2048;
      double v64 = v34;
      __int16 v65 = 1024;
      int v66 = v35;
      __int16 v67 = 1024;
      int v68 = v36;
      __int16 v69 = 1024;
      int v70 = v37;
      __int16 v71 = 1024;
      int v72 = v38;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,cacheCellularAWDMetrics,BandInfo,%d,BW,%f,transmissionFrequency,%f,RAT,%d,RSRP,%d,SNR,%d,CurrentEpochCount,%d", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v40 = *(_DWORD *)(a1 + 2544);
      double v41 = *(float *)(a1 + 2556);
      double v42 = *(float *)(a1 + 2552);
      int v43 = *(_DWORD *)(a1 + 2548);
      int v44 = *(_DWORD *)(a1 + 2536);
      int v45 = *(_DWORD *)(a1 + 2532);
      int v46 = *(_DWORD *)(a1 + 2560);
      v48[0] = 67110656;
      v48[1] = v40;
      __int16 v49 = 2048;
      double v50 = v41;
      __int16 v51 = 2048;
      double v52 = v42;
      __int16 v53 = 1024;
      int v54 = v43;
      __int16 v55 = 1024;
      int v56 = v44;
      __int16 v57 = 1024;
      int v58 = v45;
      __int16 v59 = 1024;
      int v60 = v46;
      v47 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::cacheCellularAWDMetrics()", "%s\n", v47);
      if (v47 != (char *)buf) {
        free(v47);
      }
    }
  }
}

void sub_101892714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101892738(uint64_t a1, unsigned int *a2)
{
  if (*a2 - 1 >= 0xC) {
    return 0;
  }
  else {
    return *a2;
  }
}

uint64_t sub_10189274C(uint64_t a1)
{
  uint64_t result = 0;
  double v3 = *(double *)(a1 + 1312);
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v3 >= 0.0)
  {
    if (v3 >= 5.0)
    {
      if (v3 >= 10.0)
      {
        if (v3 >= 15.0)
        {
          if (v3 >= 20.0)
          {
            if (v3 >= 30.0)
            {
              if (v3 >= 40.0)
              {
                if (v3 >= 50.0)
                {
                  if (v3 >= 100.0)
                  {
                    if (v3 >= 200.0)
                    {
                      if (v3 >= 400.0)
                      {
                        if (v3 >= 1000.0) {
                          return 12;
                        }
                        else {
                          return 11;
                        }
                      }
                      else
                      {
                        return 10;
                      }
                    }
                    else
                    {
                      return 9;
                    }
                  }
                  else
                  {
                    return 8;
                  }
                }
                else
                {
                  return 7;
                }
              }
              else
              {
                return 6;
              }
            }
            else
            {
              return 5;
            }
          }
          else
          {
            return 4;
          }
        }
        else
        {
          return 3;
        }
      }
      else
      {
        return 2;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_10189286C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 == v3) {
    return 0;
  }
  unint64_t v4 = 0;
  int v5 = -1;
  do
  {
    unint64_t v6 = *(void *)(v2 + 8);
    int v8 = *(_DWORD *)v2;
    v2 += 16;
    int v7 = v8;
    if (v6 > v4)
    {
      unint64_t v4 = v6;
      int v5 = v7;
    }
  }
  while (v2 != v3);
  if ((v5 - 1) >= 3) {
    return 0;
  }
  else {
    return dword_101E44E5C[v5 - 1];
  }
}

uint64_t sub_1018928C0(uint64_t a1, void *a2)
{
  if (!a2[2]) {
    return 0;
  }
  unint64_t v4 = (void *)*a2;
  uint64_t v2 = a2 + 1;
  uint64_t v3 = v4;
  if (v4 == v2) {
    return 1;
  }
  char v5 = 0;
  unint64_t v6 = 0;
  do
  {
    if (v3[5] > v6)
    {
      unint64_t v6 = v3[5];
      char v5 = *((unsigned char *)v3 + 32);
    }
    int v7 = (void *)v3[1];
    if (v7)
    {
      do
      {
        int v8 = v7;
        int v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        int v8 = (void *)v3[2];
        BOOL v9 = *v8 == (void)v3;
        uint64_t v3 = v8;
      }
      while (!v9);
    }
    uint64_t v3 = v8;
  }
  while (v8 != v2);
  if (v5 == 1) {
    unsigned int v10 = 2;
  }
  else {
    unsigned int v10 = 1;
  }
  if (v5 == 2) {
    return 3;
  }
  else {
    return v10;
  }
}

uint64_t *sub_101892958(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  if (!v2) {
LABEL_8:
  }
    sub_10000EDDC("map::at:  key not found");
  unsigned int v3 = *a2;
  while (1)
  {
    while (1)
    {
      unsigned int v4 = *((unsigned __int8 *)v2 + 32);
      if (v3 >= v4) {
        break;
      }
      uint64_t v2 = (uint64_t **)*v2;
      if (!v2) {
        goto LABEL_8;
      }
    }
    if (v4 >= v3) {
      return (uint64_t *)(v2 + 5);
    }
    uint64_t v2 = (uint64_t **)v2[1];
    if (!v2) {
      goto LABEL_8;
    }
  }
}

uint64_t sub_1018929B0(uint64_t a1, double *a2)
{
  double v2 = *a2;
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  if (v2 < 0.0) {
    return 1;
  }
  if (v2 < 16.0) {
    return 2;
  }
  if (v2 < 20.0) {
    return 3;
  }
  if (v2 < 24.0) {
    return 4;
  }
  if (v2 < 28.0) {
    return 5;
  }
  if (v2 < 32.0) {
    return 6;
  }
  if (v2 < 36.0) {
    return 7;
  }
  if (v2 < 40.0) {
    return 8;
  }
  if (v2 >= 44.0) {
    return 10;
  }
  return 9;
}

uint64_t sub_101892A94(uint64_t a1, double *a2)
{
  double v2 = *a2;
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  if (v2 < 8.0) {
    return 1;
  }
  if (v2 < 10.0) {
    return 2;
  }
  if (v2 < 12.0) {
    return 3;
  }
  if (v2 < 14.0) {
    return 4;
  }
  if (v2 < 16.0) {
    return 5;
  }
  if (v2 < 18.0) {
    return 6;
  }
  if (v2 < 20.0) {
    return 7;
  }
  if (v2 < 22.0) {
    return 8;
  }
  if (v2 < 24.0) {
    return 9;
  }
  if (v2 < 26.0) {
    return 10;
  }
  if (v2 < 28.0) {
    return 11;
  }
  if (v2 < 30.0) {
    return 12;
  }
  if (v2 < 32.0) {
    return 13;
  }
  if (v2 < 34.0) {
    return 14;
  }
  if (v2 < 36.0) {
    return 15;
  }
  if (v2 < 38.0) {
    return 16;
  }
  if (v2 < 40.0) {
    return 17;
  }
  if (v2 < 42.0) {
    return 18;
  }
  if (v2 >= 44.0) {
    return 20;
  }
  return 19;
}

uint64_t sub_101892C50(uint64_t a1, double *a2)
{
  double v2 = *a2;
  if (*a2 >= 60.0 && v2 < 70.0) {
    return 1;
  }
  if (v2 >= 70.0 && v2 < 80.0) {
    return 2;
  }
  if (v2 >= 80.0 && v2 < 90.0) {
    return 3;
  }
  if (v2 >= 90.0 && v2 < 100.0) {
    return 4;
  }
  if (v2 >= 100.0 && v2 < 200.0) {
    return 5;
  }
  if (v2 >= 200.0 && v2 < 300.0) {
    return 6;
  }
  if (v2 >= 300.0 && v2 < 400.0) {
    return 7;
  }
  if (v2 >= 400.0 && v2 < 500.0) {
    return 8;
  }
  if (v2 >= 500.0 && v2 < 600.0) {
    return 9;
  }
  if (v2 >= 600.0 && v2 < 700.0) {
    return 10;
  }
  if (v2 >= 700.0 && v2 < 800.0) {
    return 11;
  }
  if (v2 >= 800.0 && v2 < 900.0) {
    return 12;
  }
  if (v2 >= 900.0 && v2 < 1000.0) {
    return 13;
  }
  if (v2 >= 1000.0 && v2 < 2000.0) {
    return 14;
  }
  if (v2 >= 2000.0 && v2 < 3000.0) {
    return 15;
  }
  if (v2 >= 3000.0 && v2 < 4000.0) {
    return 16;
  }
  if (v2 >= 4000.0 && v2 < 5000.0) {
    return 17;
  }
  if (v2 >= 5000.0 && v2 < 10000.0) {
    return 18;
  }
  if (v2 >= 10000.0) {
    return 19;
  }
  return 0;
}

void sub_101892EF0(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 1:
      ++*(_DWORD *)(a1 + 2176);
      *(_DWORD *)(a1 + 2192) += *(unsigned __int8 *)(a1 + 2318);
      if (*(unsigned char *)(a1 + 2402))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        unsigned int v3 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v4 = *(_DWORD *)(a1 + 2176);
          int v5 = *(_DWORD *)(a1 + 2192);
          int v6 = *(unsigned __int8 *)(a1 + 2318);
          *(_DWORD *)buf = 67109632;
          int v21 = v4;
          __int16 v22 = 1024;
          int v23 = v5;
          __int16 v24 = 1024;
          int v25 = v6;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Short Term Orbit Assistance File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            goto LABEL_36;
          }
          goto LABEL_34;
        }
      }
      break;
    case 2:
      ++*(_DWORD *)(a1 + 2180);
      *(_DWORD *)(a1 + 2196) += *(unsigned __int8 *)(a1 + 2318);
      if (*(unsigned char *)(a1 + 2402))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        int v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v8 = *(_DWORD *)(a1 + 2180);
          int v9 = *(_DWORD *)(a1 + 2196);
          int v10 = *(unsigned __int8 *)(a1 + 2318);
          *(_DWORD *)buf = 67109632;
          int v21 = v8;
          __int16 v22 = 1024;
          int v23 = v9;
          __int16 v24 = 1024;
          int v25 = v10;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Long Term Orbit Assistance File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            goto LABEL_36;
          }
          goto LABEL_34;
        }
      }
      break;
    case 3:
      ++*(_DWORD *)(a1 + 2184);
      *(_DWORD *)(a1 + 2200) += *(unsigned __int8 *)(a1 + 2318);
      if (*(unsigned char *)(a1 + 2402))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        unint64_t v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v12 = *(_DWORD *)(a1 + 2184);
          int v13 = *(_DWORD *)(a1 + 2200);
          int v14 = *(unsigned __int8 *)(a1 + 2318);
          *(_DWORD *)buf = 67109632;
          int v21 = v12;
          __int16 v22 = 1024;
          int v23 = v13;
          __int16 v24 = 1024;
          int v25 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,RTI File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            goto LABEL_36;
          }
          goto LABEL_34;
        }
      }
      break;
    case 4:
      ++*(_DWORD *)(a1 + 2188);
      *(_DWORD *)(a1 + 2204) += *(unsigned __int8 *)(a1 + 2318);
      if (*(unsigned char *)(a1 + 2402))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        __int16 v15 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v16 = *(_DWORD *)(a1 + 2188);
          int v17 = *(_DWORD *)(a1 + 2204);
          int v18 = *(unsigned __int8 *)(a1 + 2318);
          *(_DWORD *)buf = 67109632;
          int v21 = v16;
          __int16 v22 = 1024;
          int v23 = v17;
          __int16 v24 = 1024;
          int v25 = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,Raven GNSS Assistance File Daily Download Count,%d,LargeCount,%d,isReachableLarge,%d", buf, 0x14u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
LABEL_36:
          }
            dispatch_once(&qword_1024193D0, &stru_102343F68);
LABEL_34:
          v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::reportAssistanceFileDownload(CLDaemonStats_Type::AssistanceFileType)", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
      }
      break;
    default:
      return;
  }
}

void sub_10189352C(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  *(_DWORD *)buf = 0;
  int v3 = sub_10013E418(v2, @"ShortTermOrbitAssistanceDailyDownloadCount", buf);
  int v4 = *(_DWORD *)buf;
  if (!v3) {
    int v4 = 0;
  }
  *(_DWORD *)(a1 + 2176) = v4;
  uint64_t v5 = sub_1000A6958();
  *(_DWORD *)buf = 0;
  int v6 = sub_10013E418(v5, @"LongTermOrbitAssistanceDailyDownloadCount", buf);
  int v7 = *(_DWORD *)buf;
  if (!v6) {
    int v7 = 0;
  }
  *(_DWORD *)(a1 + 2180) = v7;
  uint64_t v8 = sub_1000A6958();
  *(_DWORD *)buf = 0;
  int v9 = sub_10013E418(v8, @"RtiDailyDownloadCount", buf);
  int v10 = *(_DWORD *)buf;
  if (!v9) {
    int v10 = 0;
  }
  *(_DWORD *)(a1 + 2184) = v10;
  uint64_t v11 = sub_1000A6958();
  *(_DWORD *)buf = 0;
  int v12 = sub_10013E418(v11, @"RavenGnssAssistanceDailyDownloadCount", buf);
  int v13 = *(_DWORD *)buf;
  if (!v12) {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 2188) = v13;
  uint64_t v14 = sub_1000A6958();
  *(_DWORD *)buf = 0;
  int v15 = sub_10013E418(v14, @"ShortTermOrbitAssistanceDailyDownloadLargeCount", buf);
  int v16 = *(_DWORD *)buf;
  if (!v15) {
    int v16 = 0;
  }
  *(_DWORD *)(a1 + 2192) = v16;
  uint64_t v17 = sub_1000A6958();
  *(_DWORD *)buf = 0;
  int v18 = sub_10013E418(v17, @"LongTermOrbitAssistanceDailyDownloadLargeCount", buf);
  int v19 = *(_DWORD *)buf;
  if (!v18) {
    int v19 = 0;
  }
  *(_DWORD *)(a1 + 2196) = v19;
  uint64_t v20 = sub_1000A6958();
  *(_DWORD *)buf = 0;
  int v21 = sub_10013E418(v20, @"RtiDailyDownloadLargeCount", buf);
  int v22 = *(_DWORD *)buf;
  if (!v21) {
    int v22 = 0;
  }
  *(_DWORD *)(a1 + 2200) = v22;
  uint64_t v23 = sub_1000A6958();
  *(_DWORD *)buf = 0;
  int v24 = sub_10013E418(v23, @"RavenGnssAssistanceDailyDownloadLargeCount", buf);
  int v25 = *(_DWORD *)buf;
  if (!v24) {
    int v25 = 0;
  }
  *(_DWORD *)(a1 + 2204) = v25;
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v27 = *(_DWORD *)(a1 + 2176);
      int v28 = *(_DWORD *)(a1 + 2180);
      int v29 = *(_DWORD *)(a1 + 2184);
      int v30 = *(_DWORD *)(a1 + 2188);
      int v31 = *(_DWORD *)(a1 + 2192);
      int v32 = *(_DWORD *)(a1 + 2196);
      int v33 = *(_DWORD *)(a1 + 2200);
      int v34 = *(_DWORD *)(a1 + 2204);
      *(_DWORD *)buf = 67176449;
      int v37 = v27;
      __int16 v38 = 1025;
      int v39 = v28;
      __int16 v40 = 1025;
      int v41 = v29;
      __int16 v42 = 1025;
      int v43 = v30;
      __int16 v44 = 1025;
      int v45 = v31;
      __int16 v46 = 1025;
      int v47 = v32;
      __int16 v48 = 1025;
      int v49 = v33;
      __int16 v50 = 1025;
      int v51 = v34;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,ReadFromDisk,shortTermOrbitAssistanceDailyDownloadCount,%{private}d,longTermOrbitAssistanceDailyDownloadCount,%{private}d,rtiDailyDownloadCount,%{private}d,ravenGnssAssistanceDailyDownloadCount,%{private}d,shortTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,longTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,rtiDailyDownloadLargeCount,%{private}d,ravenGnssAssistanceDailyDownloadLargeCount,%{private}d", buf, 0x32u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::readAssistanceFileDownloadMetricsFromDisk()", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
  }
}

void sub_1018938F8(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  sub_1004CF870(v2);
  uint64_t v3 = sub_1000A6958();
  sub_1004CF870(v3);
  uint64_t v4 = sub_1000A6958();
  sub_1004CF870(v4);
  uint64_t v5 = sub_1000A6958();
  sub_1004CF870(v5);
  uint64_t v6 = sub_1000A6958();
  sub_1004CF870(v6);
  uint64_t v7 = sub_1000A6958();
  sub_1004CF870(v7);
  uint64_t v8 = sub_1000A6958();
  sub_1004CF870(v8);
  uint64_t v9 = sub_1000A6958();
  sub_1004CF870(v9);
  uint64_t v10 = sub_1000A6958();
  sub_1004CF870(v10);
  uint64_t v11 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v11 + 944))();
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,clearAssistanceFileDownloadMetricsOnDisk", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::clearAssistanceFileDownloadMetricsOnDisk()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_101893B7C(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  uint64_t v3 = (int *)(a1 + 2176);
  sub_1004D2C30(v2, @"ShortTermOrbitAssistanceDailyDownloadCount", (unsigned int *)(a1 + 2176));
  uint64_t v4 = sub_1000A6958();
  uint64_t v5 = (int *)(a1 + 2180);
  sub_1004D2C30(v4, @"LongTermOrbitAssistanceDailyDownloadCount", (unsigned int *)(a1 + 2180));
  uint64_t v6 = sub_1000A6958();
  uint64_t v7 = (int *)(a1 + 2184);
  sub_1004D2C30(v6, @"RtiDailyDownloadCount", (unsigned int *)(a1 + 2184));
  uint64_t v8 = sub_1000A6958();
  uint64_t v9 = (int *)(a1 + 2188);
  sub_1004D2C30(v8, @"RavenGnssAssistanceDailyDownloadCount", (unsigned int *)(a1 + 2188));
  uint64_t v10 = sub_1000A6958();
  uint64_t v11 = (int *)(a1 + 2192);
  sub_1004D2C30(v10, @"ShortTermOrbitAssistanceDailyDownloadLargeCount", (unsigned int *)(a1 + 2192));
  uint64_t v12 = sub_1000A6958();
  int v13 = (int *)(a1 + 2196);
  sub_1004D2C30(v12, @"LongTermOrbitAssistanceDailyDownloadLargeCount", (unsigned int *)(a1 + 2196));
  uint64_t v14 = sub_1000A6958();
  int v15 = (int *)(a1 + 2200);
  sub_1004D2C30(v14, @"RtiDailyDownloadLargeCount", (unsigned int *)(a1 + 2200));
  uint64_t v16 = sub_1000A6958();
  uint64_t v17 = (int *)(a1 + 2204);
  sub_1004D2C30(v16, @"RavenGnssAssistanceDailyDownloadLargeCount", (unsigned int *)(a1 + 2204));
  uint64_t v18 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v18 + 944))();
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v20 = *v3;
      int v21 = *v5;
      int v22 = *v7;
      int v23 = *v9;
      int v24 = *v11;
      int v25 = *v13;
      int v26 = *v15;
      int v27 = *v17;
      *(_DWORD *)buf = 67176449;
      int v30 = v20;
      __int16 v31 = 1025;
      int v32 = v21;
      __int16 v33 = 1025;
      int v34 = v22;
      __int16 v35 = 1025;
      int v36 = v23;
      __int16 v37 = 1025;
      int v38 = v24;
      __int16 v39 = 1025;
      int v40 = v25;
      __int16 v41 = 1025;
      int v42 = v26;
      __int16 v43 = 1025;
      int v44 = v27;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#gnssca,AssistanceFileCountMetrics,StoreOnDisk,shortTermOrbitAssistanceDailyDownloadCount,%{private}d,longTermOrbitAssistanceDailyDownloadCount,%{private}d,rtiDailyDownloadCount,%{private}d,ravenGnssAssistanceDailyDownloadCount,%{private}d,shortTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,longTermOrbitAssistanceDailyDownloadLargeCount,%{private}d,rtiDailyDownloadLargeCount,%{private}d,ravenGnssAssistanceDailyDownloadLargeCount,%{private}d", buf, 0x32u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::storeAssistanceFileDownloadMetricsOnDisk()", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
  }
}

void sub_101893EF8(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 1016);
  do
  {
    if ((v3 & (1 << v2)) != 0)
    {
      *(_DWORD *)(a1 + 1724 + 4 * v2) = 1;
      *(unsigned char *)(a1 + 1722) = 1;
      switch((int)v2)
      {
        case 0:
          *(unsigned char *)(a1 + 1712) = 1;
          break;
        case 1:
          *(unsigned char *)(a1 + 1713) = 1;
          break;
        case 2:
          *(unsigned char *)(a1 + 1714) = 1;
          break;
        case 3:
          *(unsigned char *)(a1 + 1715) = 1;
          break;
        case 4:
          *(unsigned char *)(a1 + 1716) = 1;
          break;
        case 5:
          *(unsigned char *)(a1 + 1717) = 1;
          break;
        case 6:
          *(unsigned char *)(a1 + 1718) = 1;
          break;
        case 7:
          *(unsigned char *)(a1 + 1719) = 1;
          break;
        case 8:
          *(unsigned char *)(a1 + 1720) = 1;
          break;
        case 9:
          *(unsigned char *)(a1 + 1721) = 1;
          break;
        default:
          break;
      }
    }
    ++v2;
  }
  while (v2 != 10);
  if (!*(unsigned char *)(a1 + 1722)) {
    *(_DWORD *)(a1 + 1764) = 1;
  }
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *(unsigned __int8 *)(a1 + 1722);
      uint64_t v6 = *(void *)(a1 + 1016);
      int v7 = *(unsigned __int8 *)(a1 + 1712);
      int v8 = *(unsigned __int8 *)(a1 + 1713);
      int v9 = *(unsigned __int8 *)(a1 + 1714);
      int v10 = *(unsigned __int8 *)(a1 + 1715);
      int v11 = *(unsigned __int8 *)(a1 + 1716);
      int v12 = *(unsigned __int8 *)(a1 + 1717);
      int v13 = *(unsigned __int8 *)(a1 + 1718);
      int v14 = *(unsigned __int8 *)(a1 + 1719);
      int v15 = *(unsigned __int8 *)(a1 + 1720);
      int v16 = *(unsigned __int8 *)(a1 + 1721);
      *(_DWORD *)buf = 67177473;
      int v19 = v5;
      __int16 v20 = 2049;
      uint64_t v21 = v6;
      __int16 v22 = 1025;
      int v23 = v7;
      __int16 v24 = 1025;
      int v25 = v8;
      __int16 v26 = 1025;
      int v27 = v9;
      __int16 v28 = 1025;
      int v29 = v10;
      __int16 v30 = 1025;
      int v31 = v11;
      __int16 v32 = 1025;
      int v33 = v12;
      __int16 v34 = 1025;
      int v35 = v13;
      __int16 v36 = 1025;
      int v37 = v14;
      __int16 v38 = 1025;
      int v39 = v15;
      __int16 v40 = 1025;
      int v41 = v16;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssca,SpoofingAnalytics,SessionSpoofed,%{private}d,runningOrSpoofingFlags,%{private}llu,TimePreceedsBuildTime,%{private}d,TimePreceedsEETime,%{private}d,TimeJumpForward100s,%{private}d,TimeJumpBackward100s,%{private}d,LnavAntiSpoofBitZeroOnMultipleSvs,%{private}d,OtaLeapSecInconsistentWithEE,%{private}d,ExcessiveSignalStrength,%{private}d,HigherOrderOtaEphemerisAllZeroOnMultipleSvs,%{private}d,OtaUtcModelInconsistentWithEE,%{private}d,OtaParameterOutOfBoundsOnMultipleSvs,%{private}d", buf, 0x4Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::prepareSpoofingAnalytics()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
}

void sub_1018942B0(uint64_t a1)
{
  double v2 = sub_101894B38();
  double Current = CFAbsoluteTimeGetCurrent();
  double v4 = *(double *)(a1 + 2288);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  double v5 = Current - v4;
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 2280);
    *(_DWORD *)buf = 134284033;
    *(double *)int v60 = v2;
    *(_WORD *)&v60[8] = 2049;
    uint64_t v61 = v7;
    *(_WORD *)v62 = 2049;
    *(double *)&v62[2] = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#gnssca,submitGnssDailyUseMetricsOnDayChange,currentSecondsIntoDay_s,%{private}.1lf,secondsIntoDayAtLastGnssSessionStart_s,%{private}.1lf,timeSinceGnssDailyUseMetricsInitialization_s,%{private}.1lf,", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v16 = *(void *)(a1 + 2280);
    int v35 = 134284033;
    *(double *)__int16 v36 = v2;
    *(_WORD *)&v36[8] = 2049;
    uint64_t v37 = v16;
    *(_WORD *)__int16 v38 = 2049;
    *(double *)&v38[2] = v5;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitGnssDailyUseMetricsOnDayChange()", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (v5 > 86400.0 && *(double *)(a1 + 2280) > v2)
  {
    uint64_t v34 = a1;
    long long v33 = 0u;
    unsigned int v22 = sub_101894B88(&v34, 0, 4);
    unsigned int v23 = sub_101894B88(&v34, 0, 1);
    unsigned int v24 = sub_101894B88(&v34, 0, 2);
    unsigned int v25 = sub_101894B88(&v34, 0, 3);
    unsigned int v26 = sub_101894B88(&v34, 0, 5);
    unsigned int v27 = sub_101894B88(&v34, 1, 1);
    unsigned int v28 = sub_101894B88(&v34, 1, 3);
    unsigned int v29 = sub_101894B88(&v34, 2, 1);
    unsigned int v30 = sub_101894B88(&v34, 2, 3);
    unsigned int v31 = sub_101894B88(&v34, 3, 1);
    unsigned int v32 = sub_101894B88(&v34, 3, 3);
    LODWORD(v33) = sub_101894B88(&v34, 4, 1);
    unsigned int v8 = sub_101894B88(&v34, 4, 3);
    *(void *)((char *)&v33 + 4) = __PAIR64__(*(double *)(a1 + 2304), v8);
    HIDWORD(v33) = (int)(*(double *)(a1 + 2664) - *(double *)(a1 + 2656));
    uint64_t v9 = sub_10071B604();
    sub_100720F98(v9, (int *)&v22);
    if (*(unsigned char *)(a1 + 2402))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67178241;
        *(_DWORD *)int v60 = v22;
        *(_WORD *)&v60[4] = 1025;
        *(_DWORD *)&v60[6] = v23;
        LOWORD(v61) = 1025;
        *(_DWORD *)((char *)&v61 + 2) = v24;
        HIWORD(v61) = 1025;
        *(_DWORD *)v62 = v25;
        *(_WORD *)&v62[4] = 1025;
        *(_DWORD *)&v62[6] = v26;
        __int16 v63 = 1025;
        unsigned int v64 = v27;
        __int16 v65 = 1025;
        unsigned int v66 = v28;
        __int16 v67 = 1025;
        unsigned int v68 = v29;
        __int16 v69 = 1025;
        unsigned int v70 = v30;
        __int16 v71 = 1025;
        unsigned int v72 = v31;
        __int16 v73 = 1025;
        unsigned int v74 = v32;
        __int16 v75 = 1025;
        int v76 = v33;
        __int16 v77 = 1025;
        int v78 = DWORD1(v33);
        __int16 v79 = 1025;
        int v80 = DWORD2(v33);
        __int16 v81 = 1025;
        int v82 = HIDWORD(v33);
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#gnssca,submitGnssDailyUseMetricsOnDayChange,dailyGnssUsageSeconds,%{private}d,dailyClientSessionSeconds,%{private}d,dailyProactiveGnssSeconds,%{private}d,dailyDebouncePeriodSeconds,%{private}d,dailyExclusiveProactiveGnssSeconds,%{private}d,dailyClientGnssDisplayOnOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOnInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnInsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffInsideVisitSeconds,%{private}d,dailyGnssUsageWithShortOrWiFiAssociatedSessionsSeconds,%{private}d,dailyGnssUsageNetProactiveLocationBalanceSeconds,%{private}d", buf, 0x5Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        int v35 = 67178241;
        *(_DWORD *)__int16 v36 = v22;
        *(_WORD *)&v36[4] = 1025;
        *(_DWORD *)&v36[6] = v23;
        LOWORD(v37) = 1025;
        *(_DWORD *)((char *)&v37 + 2) = v24;
        HIWORD(v37) = 1025;
        *(_DWORD *)__int16 v38 = v25;
        *(_WORD *)&v38[4] = 1025;
        *(_DWORD *)&v38[6] = v26;
        __int16 v39 = 1025;
        unsigned int v40 = v27;
        __int16 v41 = 1025;
        unsigned int v42 = v28;
        __int16 v43 = 1025;
        unsigned int v44 = v29;
        __int16 v45 = 1025;
        unsigned int v46 = v30;
        __int16 v47 = 1025;
        unsigned int v48 = v31;
        __int16 v49 = 1025;
        unsigned int v50 = v32;
        __int16 v51 = 1025;
        int v52 = v33;
        __int16 v53 = 1025;
        int v54 = DWORD1(v33);
        __int16 v55 = 1025;
        int v56 = DWORD2(v33);
        __int16 v57 = 1025;
        int v58 = HIDWORD(v33);
        __int16 v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitGnssDailyUseMetricsOnDayChange()", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
    }
    for (i = *(void **)(a1 + 2224); i; i = (void *)*i)
    {
      for (j = (void *)i[5]; j; j = (void *)*j)
        j[3] = 0;
    }
    *(void *)(a1 + 2304) = 0;
    if (*(unsigned char *)(a1 + 2402))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#gnssca,submitGnssDailyUseMetricsOnDayChange,cleared daily usage metrics", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        LOWORD(v35) = 0;
        uint64_t v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitGnssDailyUseMetricsOnDayChange()", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
    }
  }
  *(double *)(a1 + 2280) = v2;
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    int v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(a1 + 2280);
      *(_DWORD *)buf = 134283521;
      *(void *)int v60 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gnssca,submitGnssDailyUseMetricsOnDayChange,Set SecondsIntoDayAtLastGnssSessionStart,%{private}.1lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      uint64_t v18 = *(void *)(a1 + 2280);
      int v35 = 134283521;
      *(void *)__int16 v36 = v18;
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::submitGnssDailyUseMetricsOnDayChange()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
}

double sub_101894B38()
{
  time_t v2 = 0;
  time(&v2);
  v0 = localtime(&v2);
  return (double)(3600 * v0->tm_hour + 60 * v0->tm_min + v0->tm_sec);
}

uint64_t *sub_101894B88(void *a1, int a2, int a3)
{
  int v9 = a3;
  int v10 = a2;
  uint64_t v3 = (void *)(*a1 + 2208);
  uint64_t result = sub_10011853C(v3, &v10);
  if (result)
  {
    double v5 = sub_10011853C(v3, &v10);
    if (!v5) {
      goto LABEL_10;
    }
    uint64_t v6 = sub_10011853C(v5 + 3, &v9);
    if (!sub_10011853C(v3, &v10)) {
      goto LABEL_10;
    }
    if (v6)
    {
      uint64_t v7 = sub_10011853C(v3, &v10);
      if (v7)
      {
        unsigned int v8 = sub_10011853C(v7 + 3, &v9);
        if (v8) {
          return (uint64_t *)*((double *)v8 + 3);
        }
      }
LABEL_10:
      sub_10000EDDC("unordered_map::at: key not found");
    }
    return 0;
  }
  return result;
}

uint64_t sub_101894C38(uint64_t a1, int a2, int a3)
{
  int v15 = a3;
  v16[0] = a2;
  double v4 = (void *)(a1 + 2208);
  uint64_t result = (uint64_t)sub_10011853C((void *)(a1 + 2208), v16);
  if (result)
  {
    uint64_t v6 = sub_10011853C(v4, v16);
    if (!v6) {
      goto LABEL_21;
    }
    uint64_t v7 = sub_10011853C(v6 + 3, &v15);
    if (!sub_10011853C(v4, v16)) {
      goto LABEL_21;
    }
    if (!v7) {
      return 0;
    }
    unsigned int v8 = sub_10011853C(v4, v16);
    if (!v8 || (int v9 = sub_10011853C(v8 + 3, &v15)) == 0) {
LABEL_21:
    }
      sub_10000EDDC("unordered_map::at: key not found");
    int v10 = v9;
    if (*((unsigned char *)v9 + 40)) {
      return 0;
    }
    *((CFAbsoluteTime *)v9 + 4) = CFAbsoluteTimeGetCurrent();
    uint64_t result = 1;
    *((unsigned char *)v10 + 40) = 1;
    if (*(unsigned char *)(a1 + 2402))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v12 = v10[4];
        *(_DWORD *)buf = 134284033;
        uint64_t v23 = v12;
        __int16 v24 = 1025;
        int v25 = v16[0];
        __int16 v26 = 1025;
        int v27 = v15;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gnssca,initializeGnssSessionDataAtEventStart,start time,%{private}.1lf,metricsContext,%{private}d,eventType,%{private}d", buf, 0x18u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        uint64_t v13 = v10[4];
        v16[1] = 134284033;
        uint64_t v17 = v13;
        __int16 v18 = 1025;
        int v19 = v16[0];
        __int16 v20 = 1025;
        int v21 = v15;
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssAWD::initializeGnssSessionDataAtEventStart(const DailyUseMetricsContext, const GNSS::GnssSessionEventType)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t *sub_101894EC4(uint64_t a1, int a2, int a3)
{
  int v21 = a3;
  int v22 = a2;
  double v4 = (void *)(a1 + 2208);
  uint64_t result = sub_10011853C((void *)(a1 + 2208), &v22);
  if (!result) {
    return result;
  }
  uint64_t v6 = sub_10011853C(v4, &v22);
  if (!v6) {
    goto LABEL_31;
  }
  uint64_t v7 = sub_10011853C(v6 + 3, &v21);
  if (!sub_10011853C(v4, &v22)) {
    goto LABEL_31;
  }
  if (!v7) {
    return 0;
  }
  unsigned int v8 = sub_10011853C(v4, &v22);
  if (!v8 || (int v9 = sub_10011853C(v8 + 3, &v21)) == 0) {
LABEL_31:
  }
    sub_10000EDDC("unordered_map::at: key not found");
  int v10 = v9;
  if (!*((unsigned char *)v9 + 40)) {
    return 0;
  }
  *((unsigned char *)v9 + 40) = 0;
  double v11 = CFAbsoluteTimeGetCurrent() - *((double *)v9 + 4);
  if (v11 >= 0.0)
  {
    *((double *)v10 + 3) = v11 + *((double *)v10 + 3);
    if (*(unsigned char *)(a1 + 2402))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      uint64_t v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = v10[3];
        *(_DWORD *)buf = 67175425;
        int v32 = v22;
        __int16 v33 = 1025;
        int v34 = v21;
        __int16 v35 = 2049;
        double v36 = v11;
        __int16 v37 = 2049;
        uint64_t v38 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,updateGnssSessionDataAtEventEnd,metricsContext,%{private}d,eventType,%{private}d,eventDuration_s,%{private}.1lf,totalDailyUsage_s,%{private}.1lf", buf, 0x22u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        uint64_t v19 = v10[3];
        int v23 = 67175425;
        int v24 = v22;
        __int16 v25 = 1025;
        int v26 = v21;
        __int16 v27 = 2049;
        double v28 = v11;
        __int16 v29 = 2049;
        uint64_t v30 = v19;
        __int16 v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssAWD::updateGnssSessionDataAtEventEnd(const DailyUseMetricsContext, const GNSS::GnssSessionEventType)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
    }
    return (uint64_t *)1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  int v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    double v15 = *((double *)v10 + 4);
    *(_DWORD *)buf = 67175169;
    int v32 = v22;
    __int16 v33 = 1025;
    int v34 = v21;
    __int16 v35 = 2049;
    double v36 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#gnssca,updateGnssSessionDataAtEventEnd,start time in future,metricsContext,%{private}d,eventType,%{private}d,startTime,%{private}.1lf", buf, 0x18u);
  }
  BOOL v16 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    double v17 = *((double *)v10 + 4);
    int v23 = 67175169;
    int v24 = v22;
    __int16 v25 = 1025;
    int v26 = v21;
    __int16 v27 = 2049;
    double v28 = v17;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGnssAWD::updateGnssSessionDataAtEventEnd(const DailyUseMetricsContext, const GNSS::GnssSessionEventType)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
    return 0;
  }
  return result;
}

uint64_t sub_101895310(unsigned char *a1, int a2)
{
  uint64_t v4 = sub_101894C38((uint64_t)a1, 0, a2);
  int v5 = a1[2316];
  if (a1[2296]) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    int v7 = 3;
  }
  else {
    int v7 = 4;
  }
  if (a1[2316]) {
    BOOL v8 = a1[2296] == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    int v9 = 2;
  }
  else {
    int v9 = v7;
  }
  if (a1[2296]) {
    BOOL v10 = v5 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    int v11 = v9;
  }
  else {
    int v11 = 1;
  }
  sub_101894C38((uint64_t)a1, v11, a2);
  if (a1[2402])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = a1[2316];
      int v14 = a1[2296];
      *(_DWORD *)buf = 67174913;
      int v18 = v13;
      __int16 v19 = 1025;
      int v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,initializeGnssDailyUseMetricsAtEventStart,isDisplayOn,%{private}d,isOutsideVisit,%{private}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssAWD::initializeGnssDailyUseMetricsAtEventStart(const GNSS::GnssSessionEventType)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  return v4;
}

uint64_t *sub_101895548(unsigned char *a1, int a2)
{
  uint64_t v4 = sub_101894EC4((uint64_t)a1, 0, a2);
  int v5 = a1[2316];
  if (a1[2296]) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6) {
    int v7 = 3;
  }
  else {
    int v7 = 4;
  }
  if (a1[2316]) {
    BOOL v8 = a1[2296] == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    int v9 = 2;
  }
  else {
    int v9 = v7;
  }
  if (a1[2296]) {
    BOOL v10 = v5 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (v10) {
    int v11 = v9;
  }
  else {
    int v11 = 1;
  }
  sub_101894EC4((uint64_t)a1, v11, a2);
  if (a1[2402])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = a1[2316];
      int v14 = a1[2296];
      *(_DWORD *)buf = 67174913;
      int v18 = v13;
      __int16 v19 = 1025;
      int v20 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,updateGnssDailyUseMetricsAtEventEnd,isDisplayOn,%{private}d,isOutsideVisit,%{private}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssAWD::updateGnssDailyUseMetricsAtEventEnd(const GNSS::GnssSessionEventType)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  return v4;
}

void sub_101895780(uint64_t a1, unsigned int a2, int a3)
{
  v20[0] = a2;
  if (*(unsigned char *)(a1 + 2402))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    BOOL v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134284033;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      __int16 v28 = 1025;
      unsigned int v29 = a2;
      __int16 v30 = 1025;
      int v31 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssca,handleGnssSessionEventForAnalytics, eventTime,%{private}.1lf, eventType,%{private}d, eventStatus,%{private}d", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      v20[1] = 134284033;
      CFAbsoluteTime v21 = CFAbsoluteTimeGetCurrent();
      __int16 v22 = 1025;
      unsigned int v23 = a2;
      __int16 v24 = 1025;
      int v25 = a3;
      __int16 v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssSessionEventForAnalytics(const GNSS::GnssSessionEventType, const BOOL)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  switch(a2)
  {
    case 1u:
      if (a3)
      {
        uint64_t v7 = sub_101895310((unsigned char *)a1, 1);
        if (!v7) {
          goto LABEL_37;
        }
        buf[0] = 1;
        goto LABEL_36;
      }
      int v14 = sub_101895548((unsigned char *)a1, 1);
      if (v14)
      {
        buf[0] = 0;
        sub_101895B4C((uint64_t)v14, v20, buf);
      }
      *(_DWORD *)buf = 2;
      double v15 = *(void **)(a1 + 2224);
      if (!v15) {
        return;
      }
      while (1)
      {
        if (sub_10011853C(v15 + 3, (int *)buf))
        {
          BOOL v16 = sub_10011853C(v15 + 3, (int *)buf);
          if (!v16) {
            goto LABEL_48;
          }
          if (*((unsigned char *)v16 + 40)) {
            goto LABEL_19;
          }
        }
        double v15 = (void *)*v15;
        if (!v15) {
          return;
        }
      }
    case 2u:
      if (a3)
      {
        uint64_t v8 = sub_101895310((unsigned char *)a1, 2);
        if (v8)
        {
          buf[0] = 1;
          sub_101895B4C(v8, v20, buf);
        }
        *(_DWORD *)buf = 1;
        int v9 = *(void **)(a1 + 2224);
        if (!v9)
        {
LABEL_19:
          int v11 = (unsigned char *)a1;
          int v12 = 5;
LABEL_25:
          sub_101895310(v11, v12);
          return;
        }
        while (1)
        {
          if (sub_10011853C(v9 + 3, (int *)buf))
          {
            BOOL v10 = sub_10011853C(v9 + 3, (int *)buf);
            if (!v10) {
LABEL_48:
            }
              sub_10000EDDC("unordered_map::at: key not found");
            if (*((unsigned char *)v10 + 40)) {
              break;
            }
          }
          int v9 = (void *)*v9;
          if (!v9) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        uint64_t v7 = (uint64_t)sub_101895548((unsigned char *)a1, 2);
        if (v7)
        {
          buf[0] = 0;
LABEL_36:
          sub_101895B4C(v7, v20, buf);
        }
LABEL_37:
        double v17 = (unsigned char *)a1;
        int v18 = 5;
LABEL_42:
        sub_101895548(v17, v18);
      }
      return;
    case 3u:
      if (a3)
      {
        uint64_t v13 = sub_101895310((unsigned char *)a1, 3);
        if (!v13) {
          return;
        }
        buf[0] = 1;
      }
      else
      {
        uint64_t v13 = (uint64_t)sub_101895548((unsigned char *)a1, 3);
        if (!v13) {
          return;
        }
        buf[0] = 0;
      }
      sub_101895B4C(v13, v20, buf);
      return;
    case 4u:
      if (a3)
      {
        sub_1018942B0(a1);
        int v11 = (unsigned char *)a1;
        int v12 = 4;
        goto LABEL_25;
      }
      double v17 = (unsigned char *)a1;
      int v18 = 4;
      goto LABEL_42;
    default:
      return;
  }
}

uint64_t sub_101895B4C(uint64_t a1, unsigned int *a2, unsigned __int8 *a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v6 = *a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343F68);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *a3;
    *(_DWORD *)buf = 68289794;
    int v13 = 0;
    __int16 v14 = 2082;
    double v15 = "";
    __int16 v16 = 2050;
    double v17 = Current;
    __int16 v18 = 1026;
    int v19 = v6;
    __int16 v20 = 1026;
    int v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"gnssSessionEventPowerLog\", \"eventCfTimeSec\":\"%{public}f\", \"eventType\":%{public}d, \"eventStatus\":%{public}d}", buf, 0x28u);
  }
  v11[0] = +[NSNumber numberWithDouble:Current, @"eventCfTimeSec"];
  v10[1] = @"eventType";
  v11[1] = +[NSNumber numberWithInt:v6];
  v10[2] = @"eventStatus";
  v11[2] = +[NSNumber numberWithBool:*a3];
  return sub_1000FC494((uint64_t)+[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:3], (uint64_t)"GnssSession");
}

void sub_101895CE8(double *a1, double a2, double a3)
{
  if (a2 <= 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    double v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#gnssca,received negative gnss debounce savings", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      int v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAWD::handleGnssDebounceSavingsAnalytics(const CFTimeInterval, const CFTimeInterval)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  else
  {
    double v6 = sub_10016C458();
    double v7 = a1[335];
    if (v7 > 0.0)
    {
      double v8 = a1[336];
      double v9 = v7 + v8 + a3 - v6;
      if (v9 > 0.0 && v9 < v8)
      {
        a1[332] = a1[332] - v9;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102343F68);
        }
        int v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          double v12 = a1[332];
          uint64_t v13 = *((void *)a1 + 335);
          uint64_t v14 = *((void *)a1 + 336);
          *(_DWORD *)buf = 134350336;
          double v22 = v12;
          __int16 v23 = 2050;
          double v24 = a3;
          __int16 v25 = 2050;
          double v26 = v9;
          __int16 v27 = 2050;
          double v28 = v6;
          __int16 v29 = 2050;
          uint64_t v30 = v13;
          __int16 v31 = 2050;
          uint64_t v32 = v14;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gnssca,gnssDebouce savings,adjusted for overlap with last session,totalAdjustedSaving,%{public}0.2f,sessDur,%{public}0.2f,overlapDur,%{public}0.2f,currMct,%{public}0.3f,lastSessMct,%{public}0.3f,lastSessDebounceSaving,%{public}0.2f", buf, 0x3Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102343F68);
          }
          __int16 v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssDebounceSavingsAnalytics(const CFTimeInterval, const CFTimeInterval)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
      }
    }
    a1[336] = a2;
    a1[332] = a1[332] + a2;
    a1[335] = v6;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    double v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v16 = a1[332];
      *(_DWORD *)buf = 134349312;
      double v22 = a2;
      __int16 v23 = 2050;
      double v24 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#gnssca,gnssDebouce,saving,seconds,new,%{public}0.2f,total,%{public}0.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssDebounceSavingsAnalytics(const CFTimeInterval, const CFTimeInterval)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    sub_101896218((uint64_t)a1);
  }
}

void sub_101896218(uint64_t a1)
{
  if (*(double *)(a1 + 2656) >= *(double *)(a1 + 2688) && *(double *)(a1 + 2664) >= 0.0)
  {
    double v7 = *(double *)(a1 + 2672);
    v9 = v7 > 0.0 && (double v8 = *(double *)(a1 + 2680), v8 > 0.0) && vabdd_f64(v7, v8) < 1.0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    BOOL v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v11 = *(double *)(a1 + 2672) - *(double *)(a1 + 2680);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)double v15 = v9;
      *(_WORD *)&v15[4] = 2050;
      *(double *)&v15[6] = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gnssca,isConcurrentSessionWithProactiveLocation,%{public}d,diffSec,%{public}0.2f", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAWD::checkDebounceSavingStatsValidity()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343F68);
    }
    time_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = *(void *)(a1 + 2656);
      uint64_t v4 = *(void *)(a1 + 2688);
      uint64_t v5 = *(void *)(a1 + 2664);
      *(_DWORD *)buf = 134349568;
      *(void *)double v15 = v3;
      *(_WORD *)&v15[8] = 2050;
      *(void *)&v15[10] = v4;
      __int16 v16 = 2050;
      uint64_t v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gnssca,proactiveLocation,stats data invalid,debounceCumSec,%{public}0.2f,last,%{public}0.2f,proactiveCumSec,%{public}0.2f", buf, 0x20u);
    }
    uint64_t v6 = a1 + 2656;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102343F68);
      }
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAWD::checkDebounceSavingStatsValidity()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *(void *)(v6 + 32) = 0;
    *(_OWORD *)uint64_t v6 = 0u;
    *(_OWORD *)(v6 + 16) = 0u;
  }
}

void sub_1018965DC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10189660C(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_1004459BC(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    void *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

uint64_t sub_101896678(uint64_t a1)
{
  time_t v2 = *(void **)(a1 + 952);
  if (v2)
  {
    *(void *)(a1 + 960) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 928);
  if (v3)
  {
    *(void *)(a1 + 936) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 888);
  if (v4)
  {
    *(void *)(a1 + 896) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 864);
  if (v5)
  {
    *(void *)(a1 + 872) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 480);
  if (v6)
  {
    *(void *)(a1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 456);
  if (v7)
  {
    *(void *)(a1 + 464) = v7;
    operator delete(v7);
  }
  double v8 = *(void **)(a1 + 432);
  if (v8)
  {
    *(void *)(a1 + 440) = v8;
    operator delete(v8);
  }
  BOOL v9 = *(void **)(a1 + 408);
  if (v9)
  {
    *(void *)(a1 + 416) = v9;
    operator delete(v9);
  }
  BOOL v10 = *(void **)(a1 + 384);
  if (v10)
  {
    *(void *)(a1 + 392) = v10;
    operator delete(v10);
  }
  sub_10071874C(a1 + 344);
  sub_1004459BC(a1 + 320, *(void **)(a1 + 328));
  sub_1004459BC(a1 + 296, *(void **)(a1 + 304));
  double v11 = *(void **)(a1 + 272);
  if (v11)
  {
    *(void *)(a1 + 280) = v11;
    operator delete(v11);
  }
  double v12 = *(void **)(a1 + 248);
  if (v12)
  {
    *(void *)(a1 + 256) = v12;
    operator delete(v12);
  }
  uint64_t v13 = *(void **)(a1 + 216);
  if (v13)
  {
    *(void *)(a1 + 224) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 192);
  if (v14)
  {
    *(void *)(a1 + 200) = v14;
    operator delete(v14);
  }
  double v15 = *(void **)(a1 + 168);
  if (v15)
  {
    *(void *)(a1 + 176) = v15;
    operator delete(v15);
  }
  sub_1000F5BB0(a1 + 96, *(void **)(a1 + 104));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1018967B8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1018967E8(uint64_t a1)
{
  sub_10010F274((uint64_t)v13);
  sub_100132EFC(v14, (uint64_t)"valid,", 6);
  time_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)",timestamp,", 11);
  uint64_t v3 = (void *)std::ostream::operator<<();
  uint64_t v4 = sub_100132EFC(v3, (uint64_t)",bundleId,", 10);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = a1 + 16;
  uint64_t v5 = v7;
  int v8 = *(char *)(v6 + 23);
  if (v8 >= 0) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = v5;
  }
  if (v8 >= 0) {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v10 = *(void *)(v6 + 8);
  }
  sub_100132EFC(v4, v9, v10);
  std::stringbuf::str();
  *(void *)((char *)v13
  v14[0] = v11;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1018969B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1018969C8(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    uint64_t v14 = result;
    char v15 = v8;
    __int16 v16 = v8;
    if (v8)
    {
      char v15 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          v8[5] = v9[5];
          sub_1012F1624(v5, (uint64_t)v8);
          int v8 = v15;
          __int16 v16 = v15;
          if (v15) {
            char v15 = sub_1002FABD8((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_1002FAC2C((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_101896B34(v5, (_OWORD *)a2 + 2);
      double v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          double v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_101896B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002FAC2C((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_101896B34(uint64_t **a1, _OWORD *a2)
{
  uint64_t v4 = operator new(0x30uLL);
  uint64_t v5 = v4;
  v4[2] = *a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    int v8 = v6 + 1;
  }
  else
  {
    int v8 = a1 + 1;
  }
LABEL_8:
  sub_1000EDF90(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

void sub_101896BCC(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_101896BFC(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_101896C2C(uint64_t a1)
{
  sub_1000C6EE0(a1, *(void **)(a1 + 16));
  time_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_101896C68(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *int v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_10084F514((uint64_t)v24, 0);
  return i;
}

void sub_101896EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10084F514((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_101896ED8(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      BOOL v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  BOOL v11 = operator new(0x20uLL);
  *BOOL v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  void v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *BOOL v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *BOOL v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1018970E8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1018970FC(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100169918(a1, a2);
    unint64_t v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_101897154(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101897170(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint8x8_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C(v5, v33);
      __int16 v35 = &v34[8 * (v33 >> 2)];
      __int16 v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint8x8_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_10017F0B4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002D02D8((uint64_t)a1, &v54);
    unsigned int v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint8x8_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int v34 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v46);
      __int16 v35 = &v34[8 * (v46 >> 2)];
      __int16 v37 = &v34[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        __int16 v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)__int16 v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      __int16 v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000DA54C((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  __int16 v53 = operator new(0x1000uLL);
  sub_1000DA434(&v54, &v53);
  __int16 v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002D03F8((uint64_t)&v54, v27);
  }
  __int16 v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10189743C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_101897488(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 5) = v11 + 12;
    sub_1000EDF90(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_101897558(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    int v10 = operator new(0x30uLL);
    v10[8] = *(_DWORD *)a3;
    *((void *)v10 + 5) = *(void *)(a3 + 8);
    sub_1000EDF90(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **sub_10189761C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int8 *)v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    int v10 = operator new(0x30uLL);
    v10[32] = *(unsigned char *)a3;
    *((void *)v10 + 5) = (unint64_t)*(double *)(a3 + 8);
    sub_1000EDF90(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t **sub_1018976E4(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    unsigned int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    BOOL v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        unsigned int v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            sub_1018969C8((uint64_t **)v8 + 5, (void *)v9[5], v9 + 6);
            int v8 = v16;
          }
          sub_1012F1624(v5, (uint64_t)v8);
          int v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = sub_1002FABD8((uint64_t)v15);
          }
          int v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              int v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unsigned int v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          unsigned int v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_101897864((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1018978BC((uint64_t)v5, (_DWORD *)a2 + 8);
      uint64_t v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_101897850(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101897864((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101897864(uint64_t a1)
{
  sub_1004459BC(*(void *)a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    BOOL v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        unint64_t v2 = v3;
        BOOL v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1004459BC(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_1018978BC(uint64_t a1, _DWORD *a2)
{
  sub_101897940(a1, a2, (uint64_t)&v7);
  BOOL v3 = (uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        BOOL v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  sub_1000EDF90((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *sub_101897940@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  uint64_t result = sub_1018979CC((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1018979B0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_100826D8C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1018979CC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002CF398(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_101897A0C(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **sub_101897A24(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    unsigned int v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      int v8 = (uint64_t *)v6[1];
    }
    else {
      int v8 = v6;
    }
    BOOL v14 = result;
    uint64_t v15 = v8;
    uint64_t v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        unsigned int v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            sub_1018969C8((uint64_t **)v8 + 5, (void *)v9[5], v9 + 6);
            int v8 = v16;
          }
          sub_1012F1624(v5, (uint64_t)v8);
          int v8 = v15;
          uint64_t v16 = v15;
          if (v15) {
            uint64_t v15 = sub_1002FABD8((uint64_t)v15);
          }
          int v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              int v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unsigned int v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          unsigned int v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_101897864((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_101897BA4((uint64_t)v5, (_DWORD *)a2 + 8);
      uint64_t v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_101897B90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101897864((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_101897BA4(uint64_t a1, _DWORD *a2)
{
  sub_101897C28(a1, a2, (uint64_t)&v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        unint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      unint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  sub_1000EDF90((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

uint64_t *sub_101897C28@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  uint64_t result = sub_101897CB4((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_101897C98(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_100826D8C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_101897CB4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002CF398(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_101897CF4(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_101897D0C(void *a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    int v8 = (uint64_t *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      int v10 = v8;
    }
    else
    {
      do
      {
        int v11 = *((_DWORD *)v4 + 4);
        *((_DWORD *)v8 + 4) = v11;
        if (v8 != v4)
        {
          *((_DWORD *)v8 + 14) = *((_DWORD *)v4 + 14);
          sub_101897E44(v8 + 3, (uint64_t *)v4[5], 0);
          int v11 = *((_DWORD *)v8 + 4);
        }
        int v10 = (uint64_t *)*v8;
        v8[1] = v11;
        uint64_t v12 = (void *)sub_100324B5C((uint64_t)a1, v11, (_DWORD *)v8 + 4);
        sub_1000D8A74(a1, v8, v12);
        unint64_t v4 = (uint64_t *)*v4;
        if (!v10) {
          break;
        }
        int v8 = v10;
      }
      while (v4 != a3);
    }
    sub_100718788((uint64_t)a1, v10);
  }
  while (v4 != a3)
  {
    sub_101897FD4(a1, (_DWORD *)v4 + 4);
    unint64_t v4 = (uint64_t *)*v4;
  }
}

void sub_101897E14(void *a1)
{
  __cxa_begin_catch(a1);
  sub_100718788(v1, v2);
  __cxa_rethrow();
}

void sub_101897E30(_Unwind_Exception *a1)
{
}

void sub_101897E44(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1[1];
  if (!v6) {
    goto LABEL_9;
  }
  for (uint64_t i = 0; i != v6; *(void *)(*a1 + 8 * i++) = 0)
    ;
  int v8 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      unint64_t v9 = *((int *)a2 + 4);
      *((_DWORD *)v8 + 4) = v9;
      *((_DWORD *)v8 + 5) = *((_DWORD *)a2 + 5);
      int v10 = (uint64_t *)*v8;
      v8[1] = v9;
      int v11 = (void *)sub_100324B5C((uint64_t)a1, v9, (_DWORD *)v8 + 4);
      sub_1000D8A74(a1, v8, v11);
      a2 = (uint64_t *)*a2;
      int v8 = v10;
      if (!v10) {
        goto LABEL_9;
      }
    }
    do
    {
      uint64_t v12 = (uint64_t *)*v8;
      operator delete(v8);
      int v8 = v12;
    }
    while (v12);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      sub_101897F58(a1, a2 + 2);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_101897F24(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    unint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_101897F44(_Unwind_Exception *a1)
{
}

void *sub_101897F58(void *a1, uint64_t *a2)
{
  unint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = *a2;
  v4[2] = *a2;
  void *v4 = 0;
  v4[1] = (int)v5;
  uint64_t v6 = (void *)sub_100324B5C((uint64_t)a1, (int)v5, (_DWORD *)v4 + 4);
  sub_1000D8A74(a1, v4, v6);
  return v4;
}

void sub_101897FC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_101897FD4(void *a1, _DWORD *a2)
{
  sub_101898058((uint64_t)a1, a2, (uint64_t)v8);
  uint64_t v3 = (void *)v8[0];
  uint64_t v5 = (_DWORD *)(v8[0] + 16);
  unint64_t v4 = *(int *)(v8[0] + 16);
  *(void *)(v8[0] + 8) = v4;
  uint64_t v6 = (void *)sub_100324B5C((uint64_t)a1, v4, v5);
  sub_1000D8A74(a1, v3, v6);
  v8[0] = 0;
  sub_10084F514((uint64_t)v8, 0);
  return v3;
}

void sub_101898040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10084F514((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_101898058@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *uint64_t v6 = 0;
  v6[1] = 0;
  *((_DWORD *)v6 + 4) = *a2;
  uint64_t result = sub_1018980DC((uint64_t)(v6 + 3), (uint64_t)(a2 + 2));
  *(unsigned char *)(a3 + 16) = 1;
  v6[1] = *((int *)v6 + 4);
  return result;
}

void sub_1018980C4(_Unwind_Exception *a1)
{
  sub_10084F514(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1018980DC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    sub_10045B3D0(a1, i + 4, (void *)i + 2);
  return a1;
}

void sub_10189813C(_Unwind_Exception *a1)
{
  sub_1000D7D80(v1);
  _Unwind_Resume(a1);
}

char *sub_101898154(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    uint64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v24 = result;
      if (a2 != a3)
      {
        unint64_t v25 = result;
        do
        {
          *(_DWORD *)unint64_t v25 = *(_DWORD *)v6;
          *((void *)v25 + 1) = *((void *)v6 + 1);
          v24 += 16;
          ++v6;
          v25 += 16;
        }
        while (v6 != a3);
      }
      uint64_t v17 = (char *)(v24 - result);
      uint64_t v12 = result;
    }
    else
    {
      int64_t v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)uint64_t result = *(_DWORD *)v6;
          *((void *)result + 1) = *((void *)v6++ + 1);
          result += 16;
        }
        while (v6 != v20);
      }
      uint64_t v21 = v12;
      if (v20 != a3)
      {
        unint64_t v22 = v12;
        do
        {
          long long v23 = *v20++;
          *(_OWORD *)unint64_t v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v20 != a3);
      }
      uint64_t v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_10022F168(a1, v11);
    BOOL v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    uint64_t v12 = v14;
    uint64_t v15 = v14;
    if (v6 != a3)
    {
      uint64_t v15 = v12;
      do
      {
        long long v16 = *v6++;
        *(_OWORD *)uint64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    uint64_t v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void sub_1018982C4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    uint64_t v8 = a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      uint64_t v10 = (void *)v8;
    }
    else
    {
      do
      {
        *(_DWORD *)(v8 + 16) = *(_DWORD *)v4;
        long long v11 = *(_OWORD *)(v4 + 8);
        *(unsigned char *)(v8 + 40) = *(unsigned char *)(v4 + 24);
        *(_OWORD *)(v8 + 24) = v11;
        uint64_t v10 = *(void **)v8;
        sub_1018983E0(a1, v8);
        v4 += 32;
        if (v10) {
          BOOL v12 = v4 == a3;
        }
        else {
          BOOL v12 = 1;
        }
        uint64_t v8 = (uint64_t)v10;
      }
      while (!v12);
    }
    if (v10)
    {
      do
      {
        uint64_t v13 = (void *)*v10;
        operator delete(v10);
        uint64_t v10 = v13;
      }
      while (v13);
    }
  }
  while (v4 != a3)
  {
    sub_10084F2F8((uint64_t)a1, (int *)v4, (_OWORD *)v4);
    v4 += 32;
  }
}

void sub_1018983AC(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    unint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1018983CC(_Unwind_Exception *a1)
{
}

uint64_t *sub_1018983E0(void *a1, uint64_t a2)
{
  unint64_t v2 = (void *)a2;
  uint64_t v5 = (_DWORD *)(a2 + 16);
  unint64_t v4 = *(int *)(a2 + 16);
  *((void *)v5 - 1) = v4;
  uint64_t v6 = sub_101898438((uint64_t)a1, v4, v5);
  if (v6) {
    return v6;
  }
  sub_1002F4C78(a1, v2);
  return v2;
}

uint64_t *sub_101898438(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL) {
      uint64_t v5 = v3 <= a2 ? a2 % v3 : a2;
    }
    else {
      uint64_t v5 = (v3 - 1) & a2;
    }
    uint64_t v6 = *(uint64_t ***)(*(void *)a1 + 8 * v5);
    if (v6)
    {
      for (uint64_t i = *v6; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v8 = i[1];
        if (v8 == a2)
        {
          if (*((_DWORD *)i + 4) == *a3) {
            return i;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3) {
              v8 %= v3;
            }
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5) {
            break;
          }
        }
      }
    }
  }
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    uint64_t v11 = 2 * v3;
    BOOL v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    size_t v13 = v12 | v11;
    unint64_t v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v13;
    }
    sub_100100330(a1, v15);
  }
  return 0;
}

void sub_101898550()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1018985D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_101898660(_Unwind_Exception *a1)
{
}

void sub_101898678()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E44C30;
      v0[3] = unk_101E44C40;
      v0[4] = xmmword_101E44C50;
      v0[0] = xmmword_101E44C10;
      v0[1] = unk_101E44C20;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_101898758(_Unwind_Exception *a1)
{
}

uint64_t sub_101898770(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343FE8);
  }
  unint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "initializing CLGnssPowerLogger", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343FE8);
    }
    __int16 v8 = 0;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssPowerLogger::CLGnssPowerLogger(id<CLIntersiloUniverse>)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  id v4 = [[objc_msgSend(*(id *)(a1 + 8), "silo") newTimer];
  *(void *)a1 = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_101898994;
  v7[3] = &unk_1022A3020;
  v7[4] = a1;
  [v4 setHandler:v7];
  return a1;
}

void sub_101898974(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(void *)(v1 + 32) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_101898994(uint64_t a1)
{
}

void sub_10189899C(uint64_t a1)
{
  double v2 = *(double *)(a1 + 16);
  double Current = CFAbsoluteTimeGetCurrent();
  id v4 = *(double **)(a1 + 24);
  uint64_t v5 = *(double **)(a1 + 32);
  if (v4 == v5)
  {
    double v9 = 0.0;
    double v8 = 0.0;
    double v7 = 0.0;
    double v6 = 0.0;
  }
  else
  {
    double v6 = 0.0;
    double v7 = 0.0;
    double v8 = 0.0;
    double v9 = 0.0;
    do
    {
      double v6 = v6 + v4[1];
      double v9 = v9 + v4[2];
      double v8 = v8 + v4[3];
      double v7 = v7 + v4[4];
      v4 += 5;
    }
    while (v4 != v5);
  }
  double v10 = Current - *(double *)(a1 + 16);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343FE8);
  }
  uint64_t v11 = qword_1024193D8;
  double v12 = v8 / v10;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68290562;
    int v16 = 0;
    __int16 v17 = 2082;
    uint64_t v18 = "";
    __int16 v19 = 2050;
    double v20 = v2;
    __int16 v21 = 2050;
    double v22 = v10;
    __int16 v23 = 2050;
    double v24 = v9;
    __int16 v25 = 2050;
    double v26 = v12;
    __int16 v27 = 2050;
    double v28 = v7;
    __int16 v29 = 2050;
    double v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"composite power log\", \"start\":\"%{public}f\", \"epoch_sec\":\"%{public}f\", \"active_sec\":\"%{public}f\", \"avg_pwr_mW\":\"%{public}f\", \"activeL5IntervalSec\":\"%{public}f\", \"actualMeasuredIntervalAsReturnedByTheGPS_s\":\"%{public}f\"}", buf, 0x4Eu);
  }
  v14[0] = +[NSNumber numberWithDouble:v2, @"intervalStartTime"];
  v13[1] = @"measuredInterval";
  v14[1] = +[NSNumber numberWithDouble:v10];
  void v13[2] = @"activeInterval";
  v14[2] = +[NSNumber numberWithDouble:v9];
  v13[3] = @"activeL5IntervalSec";
  v14[3] = +[NSNumber numberWithDouble:v7];
  v13[4] = @"averagePower";
  v14[4] = +[NSNumber numberWithDouble:v12];
  sub_1000FC494((uint64_t)+[NSDictionary dictionaryWithObjects:v14 forKeys:v13 count:5], (uint64_t)"GnssPowerMetric");
  [*(id *)a1 setNextFireDelay:300.0];
  *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent();
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
}

uint64_t sub_101898C2C(uint64_t a1)
{
  [*(id *)a1 invalidate];

  *(void *)a1 = 0;
  double v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101898C7C(CFAbsoluteTime *a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_101898E4C, @"com.apple.powerlog.gpslogtrigger", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  [*(id *)a1 setNextFireDelay:300.0];
  a1[2] = CFAbsoluteTimeGetCurrent();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343FE8);
  }
  unint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLGnssPowerLogger,start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343FE8);
    }
    id v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssPowerLogger::start()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_101898E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 8), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102344008);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    double v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssPowerLogger::onGnssPowerLogNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102344008);
    }
    uint64_t v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      __int16 v19 = "";
      __int16 v20 = 2082;
      __int16 v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssPowerLogger::onGnssPowerLogNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 8) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1018993A8;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  void v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_101899068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_101899088(id *a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.powerlog.gpslogtrigger", 0);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102343FE8);
  }
  unint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLGnssPowerLogger,stop", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102343FE8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssPowerLogger::stop()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return [*a1 setNextFireDelay:1.79769313e308];
}

void sub_101899244(void *a1, long long *a2)
{
  unint64_t v6 = a1[5];
  uint64_t v4 = (uint64_t)(a1 + 5);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v11 = (void **)(v4 - 16);
    uint64_t v12 = *(void *)(v4 - 16);
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - v12) >> 3);
    unint64_t v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666) {
      sub_1001D7FD4();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v12) >> 3);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x333333333333333) {
      unint64_t v16 = 0x666666666666666;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      int v17 = (char *)sub_1002E5328(v4, v16);
    }
    else {
      int v17 = 0;
    }
    __int16 v18 = &v17[40 * v13];
    __int16 v19 = &v17[40 * v16];
    long long v20 = *a2;
    long long v21 = a2[1];
    *((void *)v18 + 4) = *((void *)a2 + 4);
    *(_OWORD *)__int16 v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    double v10 = v18 + 40;
    uint64_t v23 = (char *)a1[3];
    __int16 v22 = (char *)a1[4];
    if (v22 != v23)
    {
      do
      {
        long long v24 = *(_OWORD *)(v22 - 40);
        long long v25 = *(_OWORD *)(v22 - 24);
        *((void *)v18 - 1) = *((void *)v22 - 1);
        *(_OWORD *)(v18 - 24) = v25;
        *(_OWORD *)(v18 - 40) = v24;
        v18 -= 40;
        v22 -= 40;
      }
      while (v22 != v23);
      __int16 v22 = (char *)*v11;
    }
    a1[3] = v18;
    a1[4] = v10;
    a1[5] = v19;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    long long v8 = *a2;
    long long v9 = a2[1];
    *(void *)(v7 + 32) = *((void *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    double v10 = (char *)(v7 + 40);
  }
  a1[4] = v10;
}

void sub_101899378(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018993A8(uint64_t a1)
{
}

void sub_1018993B0(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1018993E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)buf = sub_10084F794(a1, a3);
  operator new();
}

void sub_101899620(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  sub_10068280C(v1);
  _Unwind_Resume(a1);
}

void sub_10189962C(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x101899658);
}

void sub_10189963C()
{
}

void sub_101899644()
{
  sub_101833DE4(v0);
  JUMPOUT(0x101899650);
}

uint64_t **sub_101899660(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v20 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    uint64_t v4 = a4;
    unint64_t v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_10189C21C(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102344028);
LABEL_3:
  long long v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    double v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      double v10 = (void *)*v10;
    }
    if (v7 > 2) {
      uint64_t v11 = "StateUnknown";
    }
    else {
      uint64_t v11 = (&off_1023440F0)[v7];
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v25) >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v27 = 1024;
    unsigned int v28 = v7;
    __int16 v29 = 2080;
    double v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    unint64_t v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      unint64_t v14 = (void *)*v14;
    }
    if (v7 > 2) {
      unint64_t v15 = "StateUnknown";
    }
    else {
      unint64_t v15 = (&off_1023440F0)[v7];
    }
    sub_100134750(v18, v15);
    if (v19 >= 0) {
      unint64_t v16 = v18;
    }
    else {
      unint64_t v16 = (void **)v18[0];
    }
    *(_DWORD *)__p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v22 = 1024;
    unsigned int v23 = v7;
    __int16 v24 = 2080;
    long long v25 = v16;
    int v17 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaResetGnss>::setStateHandler(State, StateHandler) [T = CLEurekaResetGnss]", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  *(void *)buf = &v20;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v20, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

BOOL sub_101899968(uint64_t a1, unsigned int a2)
{
  if (a2 - 6 >= 3)
  {
    if (a2 != 3) {
      return a2 == 2;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    unint64_t v3 = qword_1024193D8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v7)
    {
      sub_100134750(__p, "BasebandDisconnected");
      if (v9 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
LABEL_16:
      *(_DWORD *)buf = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      unint64_t v13 = "";
      __int16 v14 = 2082;
      unint64_t v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#bb.e,resetGnss,spurious event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      return 0;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    unint64_t v3 = qword_1024193D8;
    BOOL v4 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v4)
    {
      sub_10189A220(a2, __p);
      if (v9 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_101899B64(uint64_t a1, unsigned int a2)
{
  uint64_t result = 1;
  switch(a2)
  {
    case 2u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      BOOL v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      sub_100134750(__p, "BasebandConnected");
      if (v7 >= 0) {
        unint64_t v5 = __p;
      }
      else {
        unint64_t v5 = (void **)__p[0];
      }
      goto LABEL_15;
    case 3u:
      uint64_t result = 0;
      break;
    case 5u:
      uint64_t result = 2;
      break;
    case 6u:
    case 7u:
    case 8u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      BOOL v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10189A220(a2, __p);
        if (v7 >= 0) {
          unint64_t v5 = __p;
        }
        else {
          unint64_t v5 = (void **)__p[0];
        }
LABEL_15:
        *(_DWORD *)buf = 68289282;
        int v9 = 0;
        __int16 v10 = 2082;
        int v11 = "";
        __int16 v12 = 2082;
        unint64_t v13 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#bb.e,resetGnss,spurious event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v7 < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_17:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_101899D88(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        int v15 = 0;
        __int16 v16 = 2082;
        int v17 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,request\"}", buf, 0x12u);
      }
      *(_DWORD *)(a1 + 160) = 0;
      uint64_t v10 = *(void *)(a1 + 24);
      if (!v10) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
      return 2;
    case 1:
      *(_DWORD *)(a1 + 160) = 0;
      sub_101833ED4(a1 + 32, 8);
      return 2;
    case 2:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      BOOL v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 2;
      }
      sub_100134750(__p, "BasebandConnected");
      if (v13 >= 0) {
        unint64_t v5 = __p;
      }
      else {
        unint64_t v5 = (void **)__p[0];
      }
      goto LABEL_33;
    case 3:
      return 0;
    case 4:
    case 7:
      return 1;
    case 5:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      BOOL v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 2;
      }
      sub_100134750(__p, "LocationServiceDisabled");
      if (v13 >= 0) {
        unint64_t v5 = __p;
      }
      else {
        unint64_t v5 = (void **)__p[0];
      }
LABEL_33:
      *(_DWORD *)buf = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2082;
      uint64_t v19 = (uint64_t)v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#bb.e,resetGnss,spurious event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      return 2;
    case 6:
      ++*(_DWORD *)(a1 + 160);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        int v7 = *(_DWORD *)(a1 + 160);
        *(_DWORD *)buf = 68289282;
        int v15 = 0;
        __int16 v16 = 2082;
        int v17 = "";
        __int16 v18 = 1026;
        LODWORD(v19) = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#warning,#bb.e,resetGnss,retry\", \"resetCount\":%{public}d}", buf, 0x18u);
      }
      if (*(_DWORD *)(a1 + 160) > 4u)
      {
        *(_DWORD *)(a1 + 160) = 0;
        return 1;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344028);
        }
        long long v8 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289282;
          int v15 = 0;
          __int16 v16 = 2082;
          int v17 = "";
          __int16 v18 = 2050;
          uint64_t v19 = 0x3FD0000000000000;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,startTimer\", \"timeout\":\"%{public}f\"}", buf, 0x1Cu);
        }
        sub_10189A24C(a1 + 32, 8, 0.25);
        return 2;
      }
    case 8:
      uint64_t v11 = *(void *)(a1 + 24);
      if (!v11) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t))(*(void *)v11 + 48))(v11);
      return 2;
    default:
      return 2;
  }
}

void *sub_10189A220@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 8) {
    double v2 = "EventUnknown";
  }
  else {
    double v2 = (&off_1023440A8)[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_10189A24C(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  BOOL v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    long long v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unint64_t v33 = (void *)*v33;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      __int16 v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v37 = (void *)*v37;
      }
      *(_DWORD *)__p = 136315138;
      *(void *)&__p[4] = v37;
      uint64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaResetGnss>::setTimeoutEvent(Event, double) [T = CLEurekaResetGnss]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    int v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
    }
    __int16 v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
    }
    uint64_t v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      long long v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long long v8 = (void *)*v8;
      }
      sub_10189A220(a2, __p);
      if (v49 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      uint64_t v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v10 = (void *)*v10;
      }
      sub_10189A220(a2, v42);
      if (v45 >= 0) {
        uint64_t v11 = v42;
      }
      else {
        uint64_t v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)__p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      unsigned int v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaResetGnss>::setTimeoutEvent(Event, double) [T = CLEurekaResetGnss]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        int v17 = (uint64_t *)v13;
      }
      else {
        int v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      __int16 v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344028);
        }
        long long v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          unsigned int v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            unsigned int v23 = (void *)*v23;
          }
          sub_10189A220(v41, __p);
          if (v49 >= 0) {
            __int16 v24 = __p;
          }
          else {
            __int16 v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344028);
          }
          long long v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            long long v25 = (void *)*v25;
          }
          sub_10189A220(v41, v42);
          if (v45 >= 0) {
            double v26 = v42;
          }
          else {
            double v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)__p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          unsigned int v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          __int16 v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaResetGnss>::setTimeoutEvent(Event, double) [T = CLEurekaResetGnss]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  uint64_t v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    __int16 v18 = v19;
    *(void *)buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10189C068;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344028);
  }
  __int16 v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    unsigned int v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      unsigned int v28 = (void *)*v28;
    }
    sub_10189A220(a2, buf);
    if (buf[23] >= 0) {
      __int16 v29 = buf;
    }
    else {
      __int16 v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)__p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    unsigned int v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    double v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      double v30 = (void *)*v30;
    }
    sub_10189A220(a2, __p);
    if (v49 >= 0) {
      long long v31 = __p;
    }
    else {
      long long v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    unsigned int v44 = v31;
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

uint64_t sub_10189AD38(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344028);
  }
  BOOL v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 1026;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,connected\", \"isConnected\":%{public}hhd}", (uint8_t *)v7, 0x18u);
  }
  if (a2) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = 3;
  }
  return sub_10189AE40(a1 + 32, v5);
}

uint64_t sub_10189AE40(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v88 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_10189C398();
    goto LABEL_159;
  }
  uint64_t v2 = a1;
  uint64_t v6 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_10189C508(qword_1024193D0 == -1);
    goto LABEL_159;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344028);
  }
  unint64_t v4 = (unint64_t)&qword_102419000;
  __int16 v8 = qword_1024193D8;
  LODWORD(v3) = *(unsigned __int8 *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, *(os_log_type_t *)(v2 + 120)))
  {
    int v9 = (void *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      int v9 = (void *)*v9;
    }
    uint64_t v10 = *(int *)(v2 + 4);
    if (v10 > 2) {
      int v11 = "StateUnknown";
    }
    else {
      int v11 = (&off_1023440F0)[v10];
    }
    sub_100134750(__p, v11);
    int v12 = SHIBYTE(v92);
    uint64_t v13 = *(unsigned char **)__p;
    uint64_t v5 = (void **)v99;
    sub_10189A220(a2, v99);
    uint64_t v14 = __p;
    if (v12 < 0) {
      uint64_t v14 = v13;
    }
    if (v102 >= 0) {
      signed int v15 = v99;
    }
    else {
      signed int v15 = *(unsigned char **)v99;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v9;
    __int16 v95 = 2080;
    v96 = v14;
    __int16 v97 = 2080;
    v98 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v3, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v102 < 0) {
      operator delete(*(void **)v99);
    }
    if (SHIBYTE(v92) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    __int16 v59 = (void *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      __int16 v59 = (void *)*v59;
    }
    uint64_t v60 = *(int *)(v2 + 4);
    if (v60 > 2) {
      uint64_t v61 = "StateUnknown";
    }
    else {
      uint64_t v61 = (&off_1023440F0)[v60];
    }
    LODWORD(v3) = *(unsigned __int8 *)(v2 + 120);
    sub_100134750(v99, v61);
    int v62 = v102;
    __int16 v63 = *(unsigned char **)v99;
    uint64_t v5 = v86;
    sub_10189A220(a2, v86);
    unsigned int v64 = v99;
    if (v62 < 0) {
      unsigned int v64 = v63;
    }
    if (v87 >= 0) {
      __int16 v65 = v86;
    }
    else {
      __int16 v65 = (void **)v86[0];
    }
    *(_DWORD *)__p = 136315650;
    *(void *)&__p[4] = v59;
    __int16 v90 = 2080;
    v91 = v64;
    __int16 v92 = 2080;
    v93 = v65;
    unsigned int v66 = (char *)_os_log_send_and_compose_impl();
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v102 < 0) {
      operator delete(*(void **)v99);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v66);
    if (v66 != buf) {
      free(v66);
    }
  }
  uint64_t v16 = *(void *)(v2 + 16);
  if (!v16) {
    goto LABEL_31;
  }
  int v17 = (uint64_t **)(v2 + 8);
  int v18 = *(_DWORD *)(v2 + 4);
  uint64_t v19 = v2 + 16;
  do
  {
    int v20 = *(_DWORD *)(v16 + 32);
    BOOL v21 = v20 < v18;
    if (v20 >= v18) {
      os_log_type_t v22 = (uint64_t *)v16;
    }
    else {
      os_log_type_t v22 = (uint64_t *)(v16 + 8);
    }
    if (!v21) {
      uint64_t v19 = v16;
    }
    uint64_t v16 = *v22;
  }
  while (*v22);
  if (v19 == v2 + 16 || v18 < *(_DWORD *)(v19 + 32))
  {
LABEL_31:
    sub_10189C684();
    goto LABEL_159;
  }
  unsigned int v23 = *(uint64_t (**)(void *, uint64_t))(v19 + 40);
  uint64_t v24 = *(void *)(v19 + 48);
  long long v25 = (void *)(*(void *)(v2 + 32) + (v24 >> 1));
  if (v24) {
    unsigned int v23 = *(uint64_t (**)(void *, uint64_t))(*v25 + v23);
  }
  uint64_t v26 = v23(v25, a2);
  uint64_t v3 = v26;
  int v85 = v26;
  if (a2 <= 1 && v26 != v88)
  {
    sub_10189CAD4();
    while (1)
    {
LABEL_159:
      while (1)
      {
        __break(1u);
LABEL_160:
        unsigned int v72 = "StateUnknown";
LABEL_161:
        sub_100134750(v99, v72);
        int v75 = v102;
        int v76 = *(unsigned char **)v99;
        sub_100134750(v86, "Exit");
        __int16 v77 = v99;
        if (v75 < 0) {
          __int16 v77 = v76;
        }
        if (v87 >= 0) {
          int v78 = v86;
        }
        else {
          int v78 = (void **)v86[0];
        }
        *(_DWORD *)__p = 136315650;
        *(void *)&__p[4] = v5;
        __int16 v90 = 2080;
        v91 = v77;
        __int16 v92 = 2080;
        v93 = v78;
        __int16 v79 = (char *)_os_log_send_and_compose_impl();
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v102 < 0) {
          operator delete(*(void **)v99);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v79);
        int v17 = v84;
        if (v79 != buf) {
          free(v79);
        }
LABEL_78:
        uint64_t v40 = *(void *)(v2 + 32);
        *(void *)buf = &v88;
        unsigned int v41 = sub_1000C5658(v17, (int *)&v88, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v42 = v41[5];
        uint64_t v43 = (uint64_t)v41[6];
        unsigned int v44 = (void *)(v40 + (v43 >> 1));
        if (v43) {
          uint64_t v42 = *(uint64_t **)(*v44 + v42);
        }
        int v45 = ((uint64_t (*)(void *, uint64_t))v42)(v44, 1);
        if (v45 == v88) {
          break;
        }
        sub_10189C964();
      }
      *(_DWORD *)(v2 + 4) = v3;
      if (v6[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      unint64_t v46 = *(NSObject **)(v4 + 984);
      os_log_type_t v47 = *(unsigned char *)(v2 + 120);
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v5 = (void **)(v2 + 96);
        if (*(char *)(v2 + 119) < 0) {
          uint64_t v5 = (void **)*v5;
        }
        if (v3 > 2) {
          unsigned int v48 = "StateUnknown";
        }
        else {
          unsigned int v48 = (&off_1023440F0)[(int)v3];
        }
        sub_100134750(__p, v48);
        int v49 = SHIBYTE(v92);
        double v50 = *(unsigned char **)__p;
        sub_100134750(v99, "Enter");
        __int16 v51 = __p;
        if (v49 < 0) {
          __int16 v51 = v50;
        }
        if (v102 >= 0) {
          uint64_t v52 = v99;
        }
        else {
          uint64_t v52 = *(unsigned char **)v99;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v5;
        __int16 v95 = 2080;
        v96 = v51;
        __int16 v97 = 2080;
        v98 = v52;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "%snewState,%s,event,%s", buf, 0x20u);
        if (v102 < 0) {
          operator delete(*(void **)v99);
        }
        if (SHIBYTE(v92) < 0) {
          operator delete(*(void **)__p);
        }
        int v17 = v84;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344028);
        }
        __int16 v73 = (void *)(v2 + 96);
        if (*(char *)(v2 + 119) < 0) {
          __int16 v73 = (void *)*v73;
        }
        if (v3 > 2) {
          unsigned int v74 = "StateUnknown";
        }
        else {
          unsigned int v74 = (&off_1023440F0)[(int)v3];
        }
        sub_100134750(v99, v74);
        unint64_t v4 = v102;
        int v80 = *(unsigned char **)v99;
        sub_100134750(v86, "Enter");
        __int16 v81 = v99;
        if ((v4 & 0x80000000) != 0) {
          __int16 v81 = v80;
        }
        if (v87 >= 0) {
          int v82 = v86;
        }
        else {
          int v82 = (void **)v86[0];
        }
        *(_DWORD *)__p = 136315650;
        *(void *)&__p[4] = v73;
        __int16 v90 = 2080;
        v91 = v81;
        __int16 v92 = 2080;
        v93 = v82;
        v83 = (char *)_os_log_send_and_compose_impl();
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v102 < 0) {
          operator delete(*(void **)v99);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v83);
        if (v83 != buf) {
          free(v83);
        }
      }
      uint64_t v53 = *(void *)(v2 + 32);
      *(void *)buf = &v85;
      long long v54 = sub_1000C5658(v17, &v85, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      long long v55 = v54[5];
      uint64_t v56 = (uint64_t)v54[6];
      __int16 v57 = (void *)(v53 + (v56 >> 1));
      if (v56) {
        long long v55 = *(uint64_t **)(*v57 + v55);
      }
      uint64_t v3 = ((uint64_t (*)(void *, void))v55)(v57, 0);
      if (v3 == v85) {
        break;
      }
      sub_10189C7F4();
    }
    goto LABEL_103;
  }
  if (*(_DWORD *)(v2 + 88) >= 2u)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    __int16 v27 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v28 = (void *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        unsigned int v28 = (void *)*v28;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      unsigned int v68 = (void *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        unsigned int v68 = (void *)*v68;
      }
      *(_DWORD *)__p = 136315138;
      *(void *)&__p[4] = v68;
      __int16 v69 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v69);
      if (v69 != buf) {
        free(v69);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344028);
  }
  __int16 v29 = qword_1024193D8;
  os_log_type_t v30 = *(unsigned char *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v30))
  {
    uint64_t v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      uint64_t v5 = (void **)*v5;
    }
    if (v3 > 2) {
      long long v31 = "StateUnknown";
    }
    else {
      long long v31 = (&off_1023440F0)[(int)v3];
    }
    sub_100134750(buf, v31);
    if (v97 >= 0) {
      long long v32 = buf;
    }
    else {
      long long v32 = *(unsigned char **)buf;
    }
    *(_DWORD *)__p = 136315394;
    *(void *)&__p[4] = v5;
    __int16 v90 = 2080;
    v91 = v32;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v97) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    uint64_t v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      uint64_t v5 = (void **)*v5;
    }
    if (v3 > 2) {
      __int16 v67 = "StateUnknown";
    }
    else {
      __int16 v67 = (&off_1023440F0)[(int)v3];
    }
    sub_100134750(__p, v67);
    if (v92 >= 0) {
      unsigned int v70 = __p;
    }
    else {
      unsigned int v70 = *(unsigned char **)__p;
    }
    *(_DWORD *)v99 = 136315394;
    *(void *)&v99[4] = v5;
    __int16 v100 = 2080;
    v101 = v70;
    __int16 v71 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v92) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaResetGnss>::handleEvent(Event) [T = CLEurekaResetGnss]", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  if (v3 != v88)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
    unint64_t v33 = qword_1024193D8;
    os_log_type_t v34 = *(unsigned char *)(v2 + 120);
    v84 = (uint64_t **)(v2 + 8);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v34))
    {
      uint64_t v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        uint64_t v5 = (void **)*v5;
      }
      if (v88 > 2) {
        __int16 v35 = "StateUnknown";
      }
      else {
        __int16 v35 = (&off_1023440F0)[v88];
      }
      sub_100134750(__p, v35);
      int v36 = SHIBYTE(v92);
      __int16 v37 = *(unsigned char **)__p;
      sub_100134750(v99, "Exit");
      uint64_t v38 = __p;
      if (v36 < 0) {
        uint64_t v38 = v37;
      }
      if (v102 >= 0) {
        uint64_t v39 = v99;
      }
      else {
        uint64_t v39 = *(unsigned char **)v99;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v95 = 2080;
      v96 = v38;
      __int16 v97 = 2080;
      v98 = v39;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v102 < 0) {
        operator delete(*(void **)v99);
      }
      if (SHIBYTE(v92) < 0) {
        operator delete(*(void **)__p);
      }
      unint64_t v4 = (unint64_t)&qword_102419000;
      int v17 = (uint64_t **)(v2 + 8);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344028);
      }
      uint64_t v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        uint64_t v5 = (void **)*v5;
      }
      if (v88 <= 2)
      {
        unsigned int v72 = (&off_1023440F0)[v88];
        goto LABEL_161;
      }
      goto LABEL_160;
    }
    goto LABEL_78;
  }
LABEL_103:
  --*(_DWORD *)(v2 + 88);
  return v3;
}

void sub_10189BC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10189BC90(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344028);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 1026;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,ls\", \"isEnabled\":%{public}hhd}", (uint8_t *)v7, 0x18u);
  }
  if (a2) {
    uint64_t v5 = 4;
  }
  else {
    uint64_t v5 = 5;
  }
  return sub_10189AE40(a1 + 32, v5);
}

uint64_t sub_10189BD98(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344028);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v8[0] = 68289282;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 1026;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,resetGnss,response\", \"error\":%{public}d}", (uint8_t *)v8, 0x18u);
  }
  if (a2 == 3 || a2 == 23) {
    uint64_t v6 = 6;
  }
  else {
    uint64_t v6 = 7;
  }
  return sub_10189AE40(a1 + 32, v6);
}

void sub_10189BEA4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10189BED8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10189BF14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10189BF58(uint64_t a1, void *a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a2;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 40) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  unint64_t v4 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  sub_100134750(&v6, "");
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)unint64_t v4 = v6;
  *(void *)(a1 + 112) = v7;
  return a1;
}

void sub_10189C028(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

uint64_t sub_10189C068(uint64_t a1)
{
  return sub_10189AE40(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_10189C078()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344028);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"assert because of empty reset gnss callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "assert because of empty reset gnss callback", "{\"msg%{public}.0s\":\"assert because of empty reset gnss callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344028);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"assert because of empty reset gnss callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

#error "10189C290: call analysis failed (funcsize=76)"

#error "10189C414: call analysis failed (funcsize=73)"

#error "10189C57C: call analysis failed (funcsize=76)"

#error "10189C700: call analysis failed (funcsize=73)"

#error "10189C870: call analysis failed (funcsize=73)"

#error "10189C9E0: call analysis failed (funcsize=73)"

#error "10189CB50: call analysis failed (funcsize=73)"

BOOL sub_10189CC44(AriMsg *a1, uint64_t a2)
{
  return sub_10189CC70(a1, 1, (void *)a2, (void *)(a2 + 4)) == 0;
}

uint64_t sub_10189CC70(AriMsg *a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return AriMsg::unpack(a1, (v5 + 1), a4, 20, 0, 0);
  }
  return result;
}

BOOL sub_10189CCEC(AriMsg *a1, void *a2)
{
  return AriMsg::unpack(a1, 1, a2, 24, 0, 0) == 0;
}

BOOL sub_10189CD20(AriMsg *a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344108);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = a2[5];
    int v5 = a2[6];
    int v7 = a2[4];
    int v8 = a2[63];
    int v9 = a2[64];
    *(_DWORD *)buf = 67110145;
    int v13 = v5;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 1025;
    int v19 = v8;
    __int16 v20 = 1025;
    int v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "NilrDbg,locationResponse,sessionId,%u,sessionProtocol,%d,posProtocol,%d,locEstimate,%{private}d,%{private}d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIceMessageDef::pack(AriMsg &, const IBILpMeasurePositionLocationInfoRspParams &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return !AriMsg::pack(a1, 1u, a2, 4uLL)
      && sub_10189CF8C(a1, 3u, a2 + 2, a2 + 3, a2 + 4, a2 + 7, a2 + 25, a2 + 56, a2 + 108) == 0;
}

uint64_t sub_10189CF8C(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8, const void *a9)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!result)
  {
    return sub_10189F3CC(a1, a2 + 1, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

BOOL sub_10189D034(AriMsg *a1, char *a2)
{
  if (AriMsg::pack(a1, 1u, a2, 4uLL)
    || sub_10189D0C8(a1, 3u, a2 + 8, a2 + 12, a2 + 16, a2 + 28, a2 + 484, a2 + 3708))
  {
    return 0;
  }
  if (sub_10073CB50()) {
    return AriMsg::pack(a1, 9u, a2 + 3712, 4uLL) == 0;
  }
  return 1;
}

uint64_t sub_10189D0C8(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!result)
  {
    return sub_10189F658(a1, a2 + 1, a4, a5, a6, a7, a8);
  }
  return result;
}

BOOL sub_10189D168(AriMsg *a1, char *a2)
{
  return !AriMsg::pack(a1, 1u, a2, 4uLL)
      && sub_10189D1C8(a1, 3u, a2 + 8, a2 + 12, a2 + 16) == 0;
}

uint64_t sub_10189D1C8(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!result)
  {
    return sub_10189F844(a1, a2 + 1, a4, a5);
  }
  return result;
}

BOOL sub_10189D238(AriMsg *a1, char *a2)
{
  return !AriMsg::pack(a1, 1u, a2, 4uLL)
      && sub_10189D2A0(a1, 3u, a2 + 8, a2 + 12, a2 + 16, a2 + 28, a2 + 68) == 0;
}

uint64_t sub_10189D2A0(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!result)
  {
    return sub_10189F8B0(a1, a2 + 1, a4, a5, a6, a7);
  }
  return result;
}

BOOL sub_10189D32C(AriMsg *a1, uint64_t a2)
{
  return sub_10189D358(a1, 1u, (const void *)a2, (const void *)(a2 + 4)) == 0;
}

uint64_t sub_10189D358(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!result)
  {
    return AriMsg::pack(a1, a2 + 1, a4, 0x10uLL);
  }
  return result;
}

BOOL sub_10189D3C4(AriMsg *a1, void *a2)
{
  return AriMsg::pack(a1, 1u, a2, 8uLL) == 0;
}

BOOL sub_10189D3F0(AriMsg *a1, char *a2)
{
  return !AriMsg::pack(a1, 1u, a2, 4uLL) && AriMsg::pack(a1, 3u, a2 + 8, 4uLL) == 0;
}

BOOL sub_10189D44C(AriMsg *a1, char *a2)
{
  return !AriMsg::pack(a1, 1u, a2, 4uLL) && AriMsg::pack(a1, 3u, a2 + 4, 4uLL) == 0;
}

BOOL sub_10189D4A8(AriMsg *a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344108);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v6 = a2[3];
    int v5 = a2[4];
    int v7 = a2[2];
    *(_DWORD *)buf = 67109632;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v7;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#wlan,WlanResponse,sessionId,%u,sessionProtocol,%d,posProtocol,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIceMessageDef::pack(AriMsg &, const IBIMsLpWlanMeasurementRspParam &)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return !AriMsg::pack(a1, 1u, a2, 4uLL)
      && sub_10189D6D0(a1, 3u, a2 + 1, a2 + 2, a2 + 5) == 0;
}

uint64_t sub_10189D6D0(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!result)
  {
    return sub_10189FA10(a1, a2 + 1, a4, a5);
  }
  return result;
}

BOOL sub_10189D740(AriMsg *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344108);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *(_DWORD *)(a2 + 20);
    int v5 = *(_DWORD *)(a2 + 24);
    int v7 = *(_DWORD *)(a2 + 16);
    int v8 = *(unsigned __int8 *)(a2 + 12);
    int v9 = *(_DWORD *)(a2 + 8);
    *(_DWORD *)buf = 67110144;
    int v13 = v5;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 1024;
    int v19 = v8;
    __int16 v20 = 1024;
    int v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#dbh,MeasurePositionMeasurementsAndEstimateRsp,sessionId,%u,sessionProtocol,%d,posProtocol,%d,rsptype,%d,result,%d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIceMessageDef::pack(AriMsg &, const IBIMsLpMeasurePositionMeasurementsAndEstimateRspParams &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  if (AriMsg::pack(a1, 1u, (const void *)a2, 4uLL)
    || sub_10189D9CC(a1, 3u, (const void *)(a2 + 8), (const void *)(a2 + 12), (const void *)(a2 + 16), (const void *)(a2 + 28), (const void *)(a2 + 484), (const void *)(a2 + 532)))
  {
    return 0;
  }
  if (sub_10073CB50()) {
    return AriMsg::pack(a1, 9u, (const void *)(a2 + 536), 4uLL) == 0;
  }
  return 1;
}

uint64_t sub_10189D9CC(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!result)
  {
    return sub_10189FA7C(a1, a2 + 1, a4, a5, a6, a7, a8);
  }
  return result;
}

BOOL sub_10189DA6C(AriMsg *a1, char *a2)
{
  return !AriMsg::unpack(a1, 1, a2, 4, 0, 0)
      && sub_10189DAD4(a1, 3, a2 + 8, a2 + 588, a2 + 1744) == 0;
}

uint64_t sub_10189DAD4(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  int v7 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 580, 0, 0);
  if (!result)
  {
    return sub_10189FC68(a1, (v7 + 1), a4, a5);
  }
  return result;
}

BOOL sub_10189DB4C(AriMsg *a1, uint64_t a2)
{
  return sub_10189FCE4(a1, 1, (uint64_t)v3, a2, v3, &v4, (char *)&v4 + 4, &v5, (char *)&v5 + 2, (char *)&v5 + 4, &v6, (char *)&v6 + 4, &v7, (char *)&v7 + 1, (char *)&v7 + 2, (char *)&v7 + 4, &v8, (char *)&v8 + 4, &v9,
           (char *)&v9 + 4,
           &v10,
           (char *)&v10 + 4,
           &v11,
           (char *)&v11 + 4,
           (char *)&v11 + 5,
           (char *)&v11 + 6,
           &v12,
           (char *)&v12 + 4);
}

BOOL sub_10189DC24(AriMsg *a1, _DWORD *a2)
{
  return sub_1018A136C(a1, 1, (uint64_t)v3, a2, v3, &v4, (char *)&v4 + 4);
}

BOOL sub_10189DC60(AriMsg *a1, uint64_t a2)
{
  return sub_10189DCE0(a1, (uint64_t)&v5 + 4, &v3, a2, (char *)&v5 + 4, &v6, (char *)&v6 + 4, (char *)&v6 + 6, (char *)&v6 + 7, &v7, (char *)&v7 + 4, &v8, (char *)&v8 + 4, &v9, &v3, &v4, &v5);
}

BOOL sub_10189DCE0(AriMsg *a1, uint64_t a2, int *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  int v20 = sub_1018A15C0(a1, 1, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  if (v20)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v21 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v25 = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIntoNilr(const AriMsg &, TIbi &, IBILpSessionInfo &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpGpsReferenceTime, TNilr = gnss::Emergency::Cplane::GpsReferenceTimeFromModem, Trest = <unsigned int *, unsigned int *, unsigned short *, unsigned char *, signed char *, IBILpUtranSfnGpsUncertainty *, IBILpCellTimeAssistance *, unsigned char *, IBILpTowAssist (*)[16], unsigned char *, IBILpSessionProtocol *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  else
  {
    sub_1018EAF14(a2, a3, a4);
  }
  return v20 == 0;
}

BOOL sub_10189DEF0(AriMsg *a1, uint64_t a2)
{
  return sub_10189DF74(a1, (uint64_t)v5, &v3, a2, v5, &v6, (char *)&v6 + 1, (char *)&v6 + 2, &v7, (char *)&v7 + 4, &v8, (char *)&v8 + 1, (char *)&v8 + 2, (char *)&v8 + 3, (char *)&v8 + 4, (char *)&v8 + 5, &v3, &v4, (char *)&v4 + 4);
}

BOOL sub_10189DF74(AriMsg *a1, uint64_t a2, int *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  int v22 = sub_1018A1D04(a1, 1, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  if (v22)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    unsigned int v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v27 = v22;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIntoNilr(const AriMsg &, TIbi &, IBILpSessionInfo &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpGpsReferenceLocation, TNilr = gnss::Emergency::Cplane::ReferenceLocationFromModem, Trest = <unsigned int *, unsigned char *, unsigned char *, unsigned short *, unsigned int *, int *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, unsigned char *, IBILpSessionProtocol *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  else
  {
    sub_1018ED5B8(a2, a3, a4);
  }
  return v22 == 0;
}

BOOL sub_10189E184(AriMsg *a1, uint64_t a2)
{
  return sub_10189E1DC(a1, (uint64_t)v5, &v3, a2, v5, &v6, &v7, &v3, &v4, (char *)&v4 + 4);
}

BOOL sub_10189E1DC(AriMsg *a1, uint64_t a2, int *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  int v13 = sub_1018A256C(a1, 1, a5, a6, a7, a8, a9, a10);
  if (v13)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    __int16 v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIntoNilr(const AriMsg &, TIbi &, IBILpSessionInfo &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpGpsNavigationModel, TNilr = gnss::Emergency::Cplane::GpsNavigationModelFromModem, Trest = <unsigned int *, unsigned char *, IBILpGpsEphemeris (*)[16], IBILpSessionProtocol *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  else
  {
    sub_1018EBF8C(a2, a3, a4);
  }
  return v13 == 0;
}

uint64_t sub_10189E3D4(AriMsg *a1, _DWORD *a2)
{
  if (AriMsg::unpack(a1, 1, v5, 4, 0, 0)
    || AriMsg::unpack(a1, 3, &v6, 12, 0, 0))
  {
    return 0;
  }
  sub_1018EA5AC((uint64_t)v5, a2);
  return 1;
}

uint64_t sub_10189E460(AriMsg *a1, _DWORD *a2)
{
  if (AriMsg::unpack(a1, 1, v5, 4, 0, 0)
    || AriMsg::unpack(a1, 3, &v6, 4, 0, 0)
    || AriMsg::unpack(a1, 4, (char *)&v6 + 4, 12, 0, 0))
  {
    return 0;
  }
  sub_1018EA458((uint64_t)v5, a2);
  return 1;
}

uint64_t sub_10189E510(AriMsg *a1, _DWORD *a2)
{
  if (AriMsg::unpack(a1, 1, v5, 4, 0, 0)
    || AriMsg::unpack(a1, 3, &v6, 4, 0, 0)
    || AriMsg::unpack(a1, 4, (char *)&v6 + 4, 12, 0, 0))
  {
    return 0;
  }
  sub_1018EA4A8((uint64_t)v5, a2);
  return 1;
}

uint64_t sub_10189E5C0(AriMsg *a1, _DWORD *a2)
{
  if (AriMsg::unpack(a1, 1, v5, 4, 0, 0)
    || AriMsg::unpack(a1, 3, &v6, 4, 0, 0)
    || AriMsg::unpack(a1, 4, (char *)&v6 + 4, 12, 0, 0))
  {
    return 0;
  }
  sub_1018EA4F8((uint64_t)v5, a2);
  return 1;
}

BOOL sub_10189E670(AriMsg *a1, uint64_t a2)
{
  if (sub_10073CB54()) {
    return sub_1018A2734(a1, 1, (uint64_t)v5, a2, v5, v6, v7, v8, &v9, &v10, (char *)&v10 + 4);
  }
  else {
    return sub_1018A2BA0(a1, 1, (uint64_t)v5, a2, v5, v6, v7, v8);
  }
}

BOOL sub_10189E6FC(AriMsg *a1, uint64_t a2)
{
  return sub_1018A2D80(a1, 1, (uint64_t)v3, a2, v3, &v4, &v5, &v6);
}

BOOL sub_10189E73C(AriMsg *a1, uint64_t a2)
{
  if (sub_10073CB54()) {
    return sub_1018A30E0(a1, 1, (uint64_t)v5, a2, v5, v6, v7, &v8, &v9, (char *)&v9 + 4);
  }
  else {
    return sub_1018A3408(a1, 1, (uint64_t)v5, a2, v5, v6, v7);
  }
}

BOOL sub_10189E7C0(AriMsg *a1, _DWORD *a2)
{
  return sub_1018A36D8(a1, 1, (uint64_t)v3, a2, v3, &v4, &v5, (char *)&v5 + 4);
}

BOOL sub_10189E800(AriMsg *a1, uint64_t a2)
{
  return sub_10189E868(a1, (uint64_t)&v5 + 4, &v3, a2, (char *)&v5 + 4, &v6, (char *)&v6 + 4, &v7, &v8, &v9, &v3, &v4, &v5);
}

BOOL sub_10189E868(AriMsg *a1, uint64_t a2, int *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  int v16 = sub_1018A39BC(a1, 1, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  if (v16)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v21 = v16;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      int v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIntoNilr(const AriMsg &, TIbi &, IBILpSessionInfo &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpGpsAcquisitionAssistance, TNilr = gnss::Emergency::Cplane::GpsAcqAssistanceFromModem, Trest = <unsigned int *, unsigned int *, unsigned char *, IBILpCellTimeAssistance *, IBILpGpsAcquisitionElement (*)[16], unsigned char *, IBILpSessionProtocol *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  else
  {
    sub_1018EC094(a2, a3, a4);
  }
  return v16 == 0;
}

BOOL sub_10189EA70(AriMsg *a1, uint64_t a2)
{
  return sub_10189EAB0(a1, 1, (uint64_t)v3, a2, v3, &v4, &v5, (char *)&v5 + 4);
}

BOOL sub_10189EAB0(AriMsg *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10 = sub_1018A3D2C(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = IBIMsCellTimeStampIndCbParam, TNilr = gnss::Emergency::Cplane::CellFTAssistanceFromModem, Trest = <unsigned int *, int *, IBICtsNetworkType *, IBICtsCellTimeData *>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    sub_1018EA768(a3, a4);
  }
  return v10 == 0;
}

uint64_t sub_10189EC90(AriMsg *a1, _DWORD *a2)
{
  if (AriMsg::unpack(a1, 1, v5, 4, 0, 0)
    || AriMsg::unpack(a1, 3, &v6, 4, 0, 0))
  {
    return 0;
  }
  sub_1018ED69C((uint64_t)v5, a2);
  return 1;
}

BOOL sub_10189ED1C(AriMsg *a1, uint64_t a2)
{
  return sub_10189EDF4(a1, 1, (uint64_t)v3, a2, v3, &v4, &v5, (char *)&v5 + 4, &v6, (char *)&v6 + 4, &v7, (char *)&v7 + 4, &v8, (char *)&v8 + 4, &v9, (char *)&v9 + 4, &v10, (char *)&v10 + 4, &v11,
           &v12,
           (char *)&v12 + 4,
           (char *)&v12 + 6,
           &v13,
           (char *)&v13 + 1,
           &v14,
           (char *)&v14 + 2,
           (char *)&v14 + 4,
           (char *)&v14 + 6);
}

BOOL sub_10189EDF4(AriMsg *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  int v30 = sub_1018A3EAC(a1, a2, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28);
  if (v30)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    long long v31 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v35 = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      long long v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = IBIXccLtlIndCb, TNilr = GnssHal::ExtensionsOlaf::LtlInfo, Trest = <int *, IBIXccLtlInfoType *, int *, int *, int *, int *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *, int (*)[135], unsigned short (*)[135], int *, short *, short (*)[8], unsigned char *, unsigned char *, short *, unsigned char *, unsigned short *, unsigned short *>]", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
  else
  {
    sub_1018ED6A8(a3, a4);
  }
  return v30 == 0;
}

BOOL sub_10189F008(AriMsg *a1, void *a2)
{
  return AriMsg::unpack(a1, 1, a2, 4, 0, 0) == 0;
}

BOOL sub_10189F03C(AriMsg *a1, uint64_t a2)
{
  BOOL v3 = sub_1018A5320(a1, 1, (uint64_t)v11, a2, v11, &v12, &v13, (char *)&v13 + 2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344108);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(_DWORD *)a2;
    int v6 = *(unsigned __int16 *)(a2 + 16);
    *(_DWORD *)buf = 67109376;
    int v18 = v5;
    __int16 v19 = 1024;
    int v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#wlan,WlanRequestIBI,nInstance,%d,respTime,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v8 = *(_DWORD *)a2;
    int v9 = *(unsigned __int16 *)(a2 + 16);
    HIDWORD(v13) = 67109376;
    int v14 = v8;
    __int16 v15 = 1024;
    int v16 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLIceMessageDef::unpack(const AriMsg &, gnss::Emergency::Cplane::WlanMeasReqParams &)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  return v3;
}

uint64_t sub_10189F23C(AriMsg *a1, void *a2)
{
  if (AriMsg::unpack(a1, 1, &v5, 4, 0, 0)
    || AriMsg::unpack(a1, 3, (char *)&v5 + 4, 4, 0, 0)
    || AriMsg::unpack(a1, 4, &v6, 12, 0, 0))
  {
    return 0;
  }
  sub_1018ED82C(&v5, a2);
  return 1;
}

uint64_t sub_10189F2EC(AriMsg *a1, _DWORD *a2)
{
  if (AriMsg::unpack(a1, 1, v5, 4, 0, 0)
    || AriMsg::unpack(a1, 3, &v6, 4, 0, 0)
    || AriMsg::unpack(a1, 4, (char *)&v6 + 4, 12, 0, 0))
  {
    return 0;
  }
  sub_1018EDB50((uint64_t)v5, a2);
  return 1;
}

void sub_10189F39C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_10189F3CC(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, const void *a8)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 1uLL);
  if (!result)
  {
    return sub_10189F46C(a1, a2 + 1, a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_10189F46C(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!result)
  {
    return sub_10189F4F8(a1, a2 + 1, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_10189F4F8(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0x48uLL);
  if (!result)
  {
    return sub_10189F57C(a1, a2 + 1, a4, a5, a6);
  }
  return result;
}

uint64_t sub_10189F57C(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0x7CuLL);
  if (!result)
  {
    return sub_10189F5EC(a1, a2 + 1, a4, a5);
  }
  return result;
}

uint64_t sub_10189F5EC(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0xD0uLL);
  if (!result)
  {
    return AriMsg::pack(a1, a2 + 1, a4, 0x1CuLL);
  }
  return result;
}

uint64_t sub_10189F658(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 1uLL);
  if (!result)
  {
    return sub_10189F6E4(a1, a2 + 1, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_10189F6E4(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!result)
  {
    return sub_10189F768(a1, a2 + 1, a4, a5, a6);
  }
  return result;
}

uint64_t sub_10189F768(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0x1C8uLL);
  if (!result)
  {
    return sub_10189F7D8(a1, a2 + 1, a4, a5);
  }
  return result;
}

uint64_t sub_10189F7D8(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0xC98uLL);
  if (!result)
  {
    return AriMsg::pack(a1, a2 + 1, a4, 4uLL);
  }
  return result;
}

uint64_t sub_10189F844(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 4uLL);
  if (!result)
  {
    return AriMsg::pack(a1, a2 + 1, a4, 4uLL);
  }
  return result;
}

uint64_t sub_10189F8B0(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 1uLL);
  if (!result)
  {
    return sub_10189F934(a1, a2 + 1, a4, a5, a6);
  }
  return result;
}

uint64_t sub_10189F934(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!result)
  {
    return sub_10189F9A4(a1, a2 + 1, a4, a5);
  }
  return result;
}

uint64_t sub_10189F9A4(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0x26uLL);
  if (!result)
  {
    return AriMsg::pack(a1, a2 + 1, a4, 0x72CuLL);
  }
  return result;
}

uint64_t sub_10189FA10(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!result)
  {
    return AriMsg::pack(a1, a2 + 1, a4, 0x418uLL);
  }
  return result;
}

uint64_t sub_10189FA7C(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 1uLL);
  if (!result)
  {
    return sub_10189FB08(a1, a2 + 1, a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_10189FB08(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0xCuLL);
  if (!result)
  {
    return sub_10189FB8C(a1, a2 + 1, a4, a5, a6);
  }
  return result;
}

uint64_t sub_10189FB8C(AriMsg *a1, unsigned int a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0x1C8uLL);
  if (!result)
  {
    return sub_10189FBFC(a1, a2 + 1, a4, a5);
  }
  return result;
}

uint64_t sub_10189FBFC(AriMsg *a1, unsigned int a2, const void *a3, const void *a4)
{
  uint64_t result = AriMsg::pack(a1, a2, a3, 0x30uLL);
  if (!result)
  {
    return AriMsg::pack(a1, a2 + 1, a4, 4uLL);
  }
  return result;
}

uint64_t sub_10189FC68(AriMsg *a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1156, 0, 0);
  if (!result)
  {
    return AriMsg::unpack(a1, (v5 + 1), a4, 1540, 0, 0);
  }
  return result;
}

BOOL sub_10189FCE4(AriMsg *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28)
{
  int v30 = sub_10189FEF8(a1, a2, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28);
  if (v30)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    long long v31 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v35 = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      long long v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpMeasurePositionReqParams, TNilr = gnss::Emergency::Cplane::PositionRequestFromModem, Trest = <unsigned int *, unsigned short *, IBILpMethodType *, unsigned short *, unsigned char *, IBILpSessionProtocol *, int *, int *, unsigned char *, unsigned char *, unsigned char *, int *, int *, int *, unsigned short *, int *, int *, IBILpEnvironment *, IBILpAdditionalInfo *, unsigned char *, unsigned char *, unsigned char *, IBILpPosProtocol *, unsigned int *>]", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
  else
  {
    sub_1018ED50C(a3, a4);
  }
  return v30 == 0;
}

uint64_t sub_10189FEF8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  int v26 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A0064(a1, (v26 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26);
  }
  return result;
}

uint64_t sub_1018A0064(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  int v25 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 2, 0, 0);
  if (!result)
  {
    return sub_1018A01C0(a1, (v25 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             a25);
  }
  return result;
}

uint64_t sub_1018A01C0(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  int v24 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A030C(a1, (v24 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24);
  }
  return result;
}

uint64_t sub_1018A030C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  int v23 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 2, 0, 0);
  if (!result)
  {
    return sub_1018A0448(a1, (v23 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23);
  }
  return result;
}

uint64_t sub_1018A0448(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  int v22 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A0574(a1, (v22 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22);
  }
  return result;
}

uint64_t sub_1018A0574(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  int v21 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A0690(a1, (v21 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21);
  }
  return result;
}

uint64_t sub_1018A0690(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  int v20 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A079C(a1, (v20 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
  return result;
}

uint64_t sub_1018A079C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  int v19 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A0898(a1, (v19 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  }
  return result;
}

uint64_t sub_1018A0898(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  int v18 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A0984(a1, (v18 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t sub_1018A0984(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  int v17 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A0A60(a1, (v17 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  return result;
}

uint64_t sub_1018A0A60(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A0B34(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  return result;
}

uint64_t sub_1018A0B34(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A0C04(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  }
  return result;
}

uint64_t sub_1018A0C04(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A0CD8(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  }
  return result;
}

uint64_t sub_1018A0CD8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A0DA8(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t sub_1018A0DA8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 2, 0, 0);
  if (!result)
  {
    return sub_1018A0E7C(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t sub_1018A0E7C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A0F40(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t sub_1018A0F40(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  int v15 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A1000(a1, (v15 + 1), a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t sub_1018A1000(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  int v14 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A10B0(a1, (v14 + 1), a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_1018A10B0(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v13 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A1158(a1, (v13 + 1), a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1018A1158(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  int v11 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A11EC(a1, (v11 + 1), a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_1018A11EC(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  int v9 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A1278(a1, (v9 + 1), a4, a5, a6);
  }
  return result;
}

uint64_t sub_1018A1278(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  int v7 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A12F0(a1, (v7 + 1), a4, a5);
  }
  return result;
}

uint64_t sub_1018A12F0(AriMsg *a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return AriMsg::unpack(a1, (v5 + 1), a4, 4, 0, 0);
  }
  return result;
}

BOOL sub_1018A136C(AriMsg *a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5, void *a6, void *a7)
{
  int v9 = sub_1018A1548(a1, a2, a5, a6, a7);
  if (v9)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    uint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpResetDataReqParams, TNilr = gnss::Emergency::Cplane::ResetDataReqParams, Trest = <unsigned int *, int *, IBILpPosProtocol *>]", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    sub_1018EB438(a3, a4);
  }
  return v9 == 0;
}

uint64_t sub_1018A1548(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  int v7 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A12F0(a1, (v7 + 1), a4, a5);
  }
  return result;
}

uint64_t sub_1018A15C0(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A1690(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  }
  return result;
}

uint64_t sub_1018A1690(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A1764(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  }
  return result;
}

uint64_t sub_1018A1764(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 2, 0, 0);
  if (!result)
  {
    return sub_1018A1834(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t sub_1018A1834(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A1908(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t sub_1018A1908(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A19CC(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t sub_1018A19CC(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  int v15 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A1A8C(a1, (v15 + 1), a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t sub_1018A1A8C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  int v14 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 748, 0, 0);
  if (!result)
  {
    return sub_1018A1B3C(a1, (v14 + 1), a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_1018A1B3C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v13 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A1BE4(a1, (v13 + 1), a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1018A1BE4(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  int v11 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 256, 0, 0);
  if (!result)
  {
    return sub_1018A1C78(a1, (v11 + 1), a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_1018A1C78(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  int v9 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A1548(a1, (v9 + 1), a4, a5, a6);
  }
  return result;
}

uint64_t sub_1018A1D04(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  int v17 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A1DE0(a1, (v17 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  return result;
}

uint64_t sub_1018A1DE0(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A1EB4(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  return result;
}

uint64_t sub_1018A1EB4(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A1F84(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  }
  return result;
}

uint64_t sub_1018A1F84(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 2, 0, 0);
  if (!result)
  {
    return sub_1018A2058(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  }
  return result;
}

uint64_t sub_1018A2058(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A2128(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t sub_1018A2128(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A21FC(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t sub_1018A21FC(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A22C0(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t sub_1018A22C0(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  int v15 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A2380(a1, (v15 + 1), a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t sub_1018A2380(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  int v14 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A2430(a1, (v14 + 1), a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_1018A2430(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v13 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A24D8(a1, (v13 + 1), a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1018A24D8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  int v11 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A1C78(a1, (v11 + 1), a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_1018A256C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v13 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A2614(a1, (v13 + 1), a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1018A2614(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  int v11 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A26A8(a1, (v11 + 1), a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_1018A26A8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  int v9 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1536, 0, 0);
  if (!result)
  {
    return sub_1018A1548(a1, (v9 + 1), a4, a5, a6);
  }
  return result;
}

BOOL sub_1018A2734(AriMsg *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  int v13 = sub_1018A2928(a1, a2, a5, a6, a7, a8, a9, a10, a11);
  if (v13)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpGnssAbortReqParams, TNilr = gnss::Emergency::Cplane::GnssAbortReqParams, Trest = <unsigned int *, IBILpPosProtocol *, IBILpSessionProtocol *, unsigned int *, IBILpAbortReason *, unsigned int *, unsigned int *>]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  else
  {
    sub_1018ED0DC(a3, a4);
  }
  return v13 == 0;
}

uint64_t sub_1018A2928(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  int v14 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A29D8(a1, (v14 + 1), a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_1018A29D8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v13 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A2A80(a1, (v13 + 1), a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1018A2A80(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  int v11 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A2B14(a1, (v11 + 1), a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_1018A2B14(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  int v9 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A1548(a1, (v9 + 1), a4, a5, a6);
  }
  return result;
}

BOOL sub_1018A2BA0(AriMsg *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10 = sub_1018A2B14(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpGnssAbortReqParams, TNilr = gnss::Emergency::Cplane::GnssAbortReqParams, Trest = <unsigned int *, IBILpPosProtocol *, IBILpSessionProtocol *, unsigned int *>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    sub_1018ED0DC(a3, a4);
  }
  return v10 == 0;
}

BOOL sub_1018A2D80(AriMsg *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10 = sub_1018A2F60(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = IBIMsLpPosIs801GpsLocationIndCbParam, TNilr = gnss::Emergency::Cplane::PosIs801GpsLocationIndParams, Trest = <unsigned int *, IBILpSessionInfo *, IBILpIs801LocationIndStatus *, IBILpIs801LocationInd *>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    sub_1018EA668(a3, a4);
  }
  return v10 == 0;
}

uint64_t sub_1018A2F60(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  int v9 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A2FEC(a1, (v9 + 1), a4, a5, a6);
  }
  return result;
}

uint64_t sub_1018A2FEC(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  int v7 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 12, 0, 0);
  if (!result)
  {
    return sub_1018A3064(a1, (v7 + 1), a4, a5);
  }
  return result;
}

uint64_t sub_1018A3064(AriMsg *a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return AriMsg::unpack(a1, (v5 + 1), a4, 48, 0, 0);
  }
  return result;
}

BOOL sub_1018A30E0(AriMsg *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  int v12 = sub_1018A32CC(a1, a2, a5, a6, a7, a8, a9, a10);
  if (v12)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpDiscardedPosSessionIndParams, TNilr = gnss::Emergency::Cplane::DiscardedPosSessionIndParams, Trest = <unsigned int *, IBILpSessionInfo *, IBILpDiscardedPosMsgType *, unsigned int *, unsigned int *, IBILpDiscardReason *>]", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  else
  {
    sub_1018EA5F4(a3, a4);
  }
  return v12 == 0;
}

uint64_t sub_1018A32CC(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v13 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A3374(a1, (v13 + 1), a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1018A3374(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  int v11 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 12, 0, 0);
  if (!result)
  {
    return sub_1018A2B14(a1, (v11 + 1), a4, a5, a6, a7);
  }
  return result;
}

BOOL sub_1018A3408(AriMsg *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7)
{
  int v9 = sub_1018A35E4(a1, a2, a5, a6, a7);
  if (v9)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpDiscardedPosSessionIndParams, TNilr = gnss::Emergency::Cplane::DiscardedPosSessionIndParams, Trest = <unsigned int *, IBILpSessionInfo *, IBILpDiscardedPosMsgType *>]", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else
  {
    sub_1018EA5F4(a3, a4);
  }
  return v9 == 0;
}

uint64_t sub_1018A35E4(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  int v7 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A365C(a1, (v7 + 1), a4, a5);
  }
  return result;
}

uint64_t sub_1018A365C(AriMsg *a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 12, 0, 0);
  if (!result)
  {
    return AriMsg::unpack(a1, (v5 + 1), a4, 4, 0, 0);
  }
  return result;
}

BOOL sub_1018A36D8(AriMsg *a1, uint64_t a2, uint64_t a3, _DWORD *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10 = sub_1018A38B8(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = CLIBILpPosLocationRequestStatusIndParams, TNilr = gnss::Emergency::Cplane::PosLocationRequestStatusIndParams, Trest = <unsigned int *, IBILpSessionInfo *, unsigned int *, IBILpLocationRequestStatus *>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    sub_1018EA6E0(a3, a4);
  }
  return v10 == 0;
}

uint64_t sub_1018A38B8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  int v9 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A3944(a1, (v9 + 1), a4, a5, a6);
  }
  return result;
}

uint64_t sub_1018A3944(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  int v7 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 12, 0, 0);
  if (!result)
  {
    return sub_1018A12F0(a1, (v7 + 1), a4, a5);
  }
  return result;
}

uint64_t sub_1018A39BC(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A3A80(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t sub_1018A3A80(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  int v15 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A3B40(a1, (v15 + 1), a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t sub_1018A3B40(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  int v14 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A3BF0(a1, (v14 + 1), a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_1018A3BF0(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v13 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 748, 0, 0);
  if (!result)
  {
    return sub_1018A3C98(a1, (v13 + 1), a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1018A3C98(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  int v11 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 320, 0, 0);
  if (!result)
  {
    return sub_1018A1C78(a1, (v11 + 1), a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_1018A3D2C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  int v9 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A3DB8(a1, (v9 + 1), a4, a5, a6);
  }
  return result;
}

uint64_t sub_1018A3DB8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  int v7 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A3E30(a1, (v7 + 1), a4, a5);
  }
  return result;
}

uint64_t sub_1018A3E30(AriMsg *a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return AriMsg::unpack(a1, (v5 + 1), a4, 28, 0, 0);
  }
  return result;
}

uint64_t sub_1018A3EAC(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26)
{
  int v26 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4018(a1, (v26 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26);
  }
  return result;
}

uint64_t sub_1018A4018(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25)
{
  int v25 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4174(a1, (v25 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24,
             a25);
  }
  return result;
}

uint64_t sub_1018A4174(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  int v24 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A42C0(a1, (v24 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23,
             a24);
  }
  return result;
}

uint64_t sub_1018A42C0(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23)
{
  int v23 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A43FC(a1, (v23 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22,
             a23);
  }
  return result;
}

uint64_t sub_1018A43FC(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22)
{
  int v22 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4528(a1, (v22 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21,
             a22);
  }
  return result;
}

uint64_t sub_1018A4528(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21)
{
  int v21 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4644(a1, (v21 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20,
             a21);
  }
  return result;
}

uint64_t sub_1018A4644(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  int v20 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4750(a1, (v20 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20);
  }
  return result;
}

uint64_t sub_1018A4750(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19)
{
  int v19 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A484C(a1, (v19 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  }
  return result;
}

uint64_t sub_1018A484C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  int v18 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4938(a1, (v18 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
  return result;
}

uint64_t sub_1018A4938(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  int v17 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4A14(a1, (v17 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  }
  return result;
}

uint64_t sub_1018A4A14(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4AE8(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  return result;
}

uint64_t sub_1018A4AE8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4BB8(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  }
  return result;
}

uint64_t sub_1018A4BB8(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4C8C(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  }
  return result;
}

uint64_t sub_1018A4C8C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12, void *a13)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 540, 0, 0);
  if (!result)
  {
    return sub_1018A4D5C(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  }
  return result;
}

uint64_t sub_1018A4D5C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11, void *a12)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 270, 0, 0);
  if (!result)
  {
    return sub_1018A4E30(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11, a12);
  }
  return result;
}

uint64_t sub_1018A4E30(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, void *a11)
{
  int v16 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A4EF4(a1, (v16 + 1), a4, a5, a6, a7, a8, a9, a10, a11);
  }
  return result;
}

uint64_t sub_1018A4EF4(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10)
{
  int v15 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 2, 0, 0);
  if (!result)
  {
    return sub_1018A4FB4(a1, (v15 + 1), a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t sub_1018A4FB4(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  int v14 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 16, 0, 0);
  if (!result)
  {
    return sub_1018A5064(a1, (v14 + 1), a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_1018A5064(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  int v13 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A510C(a1, (v13 + 1), a4, a5, a6, a7, a8);
  }
  return result;
}

uint64_t sub_1018A510C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  int v11 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A51A0(a1, (v11 + 1), a4, a5, a6, a7);
  }
  return result;
}

uint64_t sub_1018A51A0(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  int v9 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 2, 0, 0);
  if (!result)
  {
    return sub_1018A522C(a1, (v9 + 1), a4, a5, a6);
  }
  return result;
}

uint64_t sub_1018A522C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  int v7 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 1, 0, 0);
  if (!result)
  {
    return sub_1018A52A4(a1, (v7 + 1), a4, a5);
  }
  return result;
}

uint64_t sub_1018A52A4(AriMsg *a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 2, 0, 0);
  if (!result)
  {
    return AriMsg::unpack(a1, (v5 + 1), a4, 2, 0, 0);
  }
  return result;
}

BOOL sub_1018A5320(AriMsg *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8)
{
  int v10 = sub_1018A5500(a1, a2, a5, a6, a7, a8);
  if (v10)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344108);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Unpack failed,result,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344108);
      }
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLIceMessageDef::unpackIndexIntoNilr(const AriMsg &, uint32_t, TIbi &, TNilr &, Trest...) [TIbuint64_t i = IBIMsLpWlanMeasurementReqCbParam, TNilr = gnss::Emergency::Cplane::WlanMeasReqParams, Trest = <unsigned int *, IBILpSessionInfo *, unsigned short *, IBILpWlanReqInfo *>]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  else
  {
    sub_1018ED770(a3, a4);
  }
  return v10 == 0;
}

uint64_t sub_1018A5500(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  int v9 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 4, 0, 0);
  if (!result)
  {
    return sub_1018A558C(a1, (v9 + 1), a4, a5, a6);
  }
  return result;
}

uint64_t sub_1018A558C(AriMsg *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  int v7 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 12, 0, 0);
  if (!result)
  {
    return sub_1018A5604(a1, (v7 + 1), a4, a5);
  }
  return result;
}

uint64_t sub_1018A5604(AriMsg *a1, uint64_t a2, void *a3, void *a4)
{
  int v5 = a2;
  uint64_t result = AriMsg::unpack(a1, a2, a3, 2, 0, 0);
  if (!result)
  {
    return AriMsg::unpack(a1, (v5 + 1), a4, 1, 0, 0);
  }
  return result;
}

void sub_1018A5680(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, double a5, double a6)
{
  *(double *)a1 = a5;
  *(double *)(a1 + 8) = a6;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = *a3;
  uint64_t v7 = a3[1];
  *(void *)(a1 + 64) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1018AA11C(a1 + 72, a4);
  sub_1005C3A50(a1 + 104, *(void **)(a1 + 48), (uint64_t)sub_1018A5860, a1);
}

void sub_1018A5814(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 375) < 0) {
    operator delete(*v4);
  }
  sub_1005C3B7C(v3);
  sub_1008530E0(v2);
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 64);
  if (v6) {
    sub_1000DB0A0(v6);
  }
  _Unwind_Resume(a1);
}

void sub_1018A5860(uint64_t a1, int a2, uint64_t a3)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a3 + 48), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023441C8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v9 = 1;
    uint64_t v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceFileDownloader::onFileUpdated", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023441C8);
    }
    uint64_t v7 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      int v11 = 0;
      __int16 v12 = 2082;
      int v13 = "";
      __int16 v14 = 2082;
      int v15 = "activity";
      __int16 v16 = 2050;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceFileDownloader::onFileUpdated\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v9 = 0;
  }
  sub_1018A9A80((void *)a3, v5, a2);
  if (v9) {
    os_activity_scope_leave(&state);
  }
}

void sub_1018A5A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018A5A34(uint64_t a1, int a2)
{
  double v37 = 0.0;
  uint64_t v4 = sub_1000A6958();
  uint64_t v5 = (const char *)(a1 + 352);
  uint64_t v6 = (const char *)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    uint64_t v6 = *(const char **)v5;
  }
  if (sub_1000A699C(v4, v6, &v37))
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if ((*(void *)&v37 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      BOOL v8 = v37 <= 0.0 || Current <= v37;
      if (!v8 && Current - v37 < 1209600.0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        char v9 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = *(void *)(a1 + 56);
          int v11 = (void *)(v10 + 24);
          if (*(char *)(v10 + 47) < 0) {
            int v11 = (void *)*v11;
          }
          *(_DWORD *)buf = 136381699;
          int v49 = v11;
          __int16 v50 = 2050;
          double v51 = Current;
          __int16 v52 = 2050;
          double v53 = v37;
          __int16 v54 = 2050;
          double v55 = v37 + 1209600.0 - Current;
          __int16 v56 = 2050;
          uint64_t v57 = 0x4132750000000000;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GNSS_FILE: not starting assistance file per mobile asset disablement,file,%{private}s,nowTime,%{public}lf,lastDisabledTime,%{public}lf,expireInSec,%{public}lf,disableValidSec,%{public}.1f", buf, 0x34u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023441E8);
          }
          uint64_t v12 = *(void *)(a1 + 56);
          int v13 = (void *)(v12 + 24);
          if (*(char *)(v12 + 47) < 0) {
            int v13 = (void *)*v13;
          }
          int v38 = 136381699;
          uint64_t v39 = v13;
          __int16 v40 = 2050;
          double v41 = Current;
          __int16 v42 = 2050;
          double v43 = v37;
          __int16 v44 = 2050;
          double v45 = v37 + 1209600.0 - Current;
          __int16 v46 = 2050;
          uint64_t v47 = 0x4132750000000000;
          __int16 v14 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::start(BOOL)", "%s\n");
LABEL_64:
          if (v14 != buf) {
            free(v14);
          }
          return;
        }
        return;
      }
    }
    uint64_t v15 = sub_1000A6958();
    if (*(char *)(a1 + 375) < 0) {
      uint64_t v5 = *(const char **)v5;
    }
    sub_1004CF7DC(v15, v5, 0xFFFFFFFFLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    __int16 v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 56);
      int v18 = (void *)(v17 + 24);
      if (*(char *)(v17 + 47) < 0) {
        int v18 = (void *)*v18;
      }
      *(_DWORD *)buf = 136381443;
      int v49 = v18;
      __int16 v50 = 2050;
      double v51 = Current;
      __int16 v52 = 2050;
      double v53 = v37;
      __int16 v54 = 2050;
      double v55 = 1209600.0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: clear mobile asset persistent disablement,expired,file,%{private}s,nowTime,%{public}lf,lastDisabledTime,%{public}lf,disableValidSec,%{public}.1f", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      uint64_t v28 = *(void *)(a1 + 56);
      __int16 v29 = (void *)(v28 + 24);
      if (*(char *)(v28 + 47) < 0) {
        __int16 v29 = (void *)*v29;
      }
      int v38 = 136381443;
      uint64_t v39 = v29;
      __int16 v40 = 2050;
      double v41 = Current;
      __int16 v42 = 2050;
      double v43 = v37;
      __int16 v44 = 2050;
      double v45 = 1209600.0;
      int v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::start(BOOL)", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  if (*(unsigned char *)(a1 + 376))
  {
LABEL_32:
    sub_1018A6478(a1, a2);
    return;
  }
  sub_1005C70E0(a1 + 104);
  uint64_t v36 = 0x404E000000000000;
  uint64_t v19 = *(void *)(a1 + 56);
  int v20 = (const std::string::value_type *)v19;
  if (*(char *)(v19 + 23) < 0) {
    int v20 = *(const std::string::value_type **)v19;
  }
  int v21 = (const std::string::value_type *)(v19 + 24);
  if (*(char *)(v19 + 47) < 0) {
    int v21 = *(const std::string::value_type **)v21;
  }
  if (sub_1005C653C(a1 + 104, v20, v21, (double *)&v36)
    && (sub_1005C6BBC(a1 + 104, (double *)a1, (double *)(a1 + 8)) & 1) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    int v22 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v23 = *(double *)(a1 + 56);
      int v24 = (void *)(*(void *)&v23 + 24);
      if (*(char *)(*(void *)&v23 + 47) < 0) {
        int v24 = (void *)*v24;
      }
      if (*(char *)(*(void *)&v23 + 23) < 0) {
        double v23 = **(double **)&v23;
      }
      double v25 = *(double *)a1;
      double v26 = *(double *)(a1 + 8);
      *(_DWORD *)buf = 136381443;
      int v49 = v24;
      __int16 v50 = 2081;
      double v51 = v23;
      __int16 v52 = 2050;
      double v53 = v25;
      __int16 v54 = 2050;
      double v55 = v26;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: start assistance file,%{private}s,from,%{private}s,cellInterval,%{public}lf,wifiInterval,%{public}lf", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      double v31 = *(double *)(a1 + 56);
      long long v32 = (void *)(*(void *)&v31 + 24);
      if (*(char *)(*(void *)&v31 + 47) < 0) {
        long long v32 = (void *)*v32;
      }
      if (*(char *)(*(void *)&v31 + 23) < 0) {
        double v31 = **(double **)&v31;
      }
      double v33 = *(double *)a1;
      double v34 = *(double *)(a1 + 8);
      int v38 = 136381443;
      uint64_t v39 = v32;
      __int16 v40 = 2081;
      double v41 = v31;
      __int16 v42 = 2050;
      double v43 = v33;
      __int16 v44 = 2050;
      double v45 = v34;
      int v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::start(BOOL)", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    *(unsigned char *)(a1 + 376) = 1;
    goto LABEL_32;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
  }
  int v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "GNSS_FILE: could not setup assistance file updater", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    LOWORD(v38) = 0;
    __int16 v14 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::start(BOOL)", "%s\n");
    goto LABEL_64;
  }
}

uint64_t sub_1018A623C(uint64_t a1)
{
  sub_1018A6294(a1);
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  sub_1005C3B7C(a1 + 104);
  sub_1008530E0((void *)(a1 + 72));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

void sub_1018A6294(uint64_t a1)
{
  sub_1005C70E0(a1 + 104);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v4 = (void *)(v3 + 24);
    if (*(char *)(v3 + 47) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)buf = 136380675;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: stop assistance file,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::stop()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(unsigned char *)(a1 + 376) = 0;
}

uint64_t sub_1018A6478(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = (const char *)(v4 + 24);
  if (*(char *)(v4 + 47) < 0) {
    uint64_t v5 = *(const char **)v5;
  }
  if (!*(unsigned char *)(a1 + 376))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136380675;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "GNSS_FILE: cannot setup download, downloader not active,%{private}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      int v26 = 136380675;
      int v27 = v5;
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
  }
  double v25 = 0.0;
  double Current = CFAbsoluteTimeGetCurrent();
  double v24 = Current;
  if (a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    BOOL v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136380675;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GNSS_FILE: force file download %{private}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return sub_1005C6FFC((double *)(a1 + 104), &v24);
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    int v26 = 136380675;
    int v27 = v5;
    char v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v9);
LABEL_45:
    if (v9 != buf) {
      free(v9);
    }
    return sub_1005C6FFC((double *)(a1 + 104), &v24);
  }
  if (!sub_1000A569C(v5))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file not yet created %s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return sub_1005C6FFC((double *)(a1 + 104), &v24);
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_44;
    }
    goto LABEL_69;
  }
  if (!sub_1004BC384(v5))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    __int16 v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file,%s,sizeBytes,0,download anew", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return sub_1005C6FFC((double *)(a1 + 104), &v24);
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_44;
    }
LABEL_69:
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
LABEL_44:
    int v26 = 136315138;
    int v27 = v5;
    char v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v9);
    goto LABEL_45;
  }
  if (sub_1004BE590(v5, &v25) && (double v10 = *(double *)a1, vabdd_f64(Current, v25) <= *(double *)a1))
  {
    double v15 = v25 + v10;
    double v24 = v25 + v10;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    __int16 v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v33 = 2048;
      double v34 = v15;
      __int16 v35 = 2048;
      double v36 = v15 - Current;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file,%s, attempt to download at %.2f (%.2f seconds away)", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      int v26 = 136315650;
      int v27 = v5;
      __int16 v28 = 2048;
      double v29 = v15;
      __int16 v30 = 2048;
      double v31 = v15 - Current;
      int v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    double Current = v15;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file not yet created, or expired %s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      int v26 = 136315138;
      int v27 = v5;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::setupDownload(BOOL)", "%s\n", v12);
      if (v12 != buf) {
        free(v12);
      }
    }
  }
  uint64_t v17 = *(void *)(a1 + 96);
  if (!v17) {
    return sub_1005C6FFC((double *)(a1 + 104), &v24);
  }
  int v18 = *(std::__shared_weak_count **)(a1 + 64);
  uint64_t v22 = *(void *)(a1 + 56);
  double v23 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = *(void *)(a1 + 96);
    if (!v17) {
      sub_10015E48C();
    }
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, &v22);
  if (v23) {
    sub_1000DB0A0(v23);
  }
  *(double *)buf = Current + 5.0;
  return sub_1005C6FFC((double *)(a1 + 104), (double *)buf);
}

void sub_1018A6DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018A6DD4(id a1)
{
  if (sub_10073C6AC())
  {
    byte_1024890E0 = 1;
LABEL_9:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: #ee enable update download rates on fitness session or tbt navigation", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      *(_WORD *)uint64_t v5 = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLGnssAssistanceFileDownloader::isEeDownloadOnFitnessTbtSupported()_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return;
  }
  sub_1000C7F88(buf);
  v5[0] = 0;
  int v1 = sub_1000D2988(*(uint64_t *)buf, "EnableEeUpdateOnFitnessTbtSession", v5);
  if (v5[0]) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  byte_1024890E0 = v2;
  if (v7)
  {
    sub_1000DB0A0(v7);
    int v2 = byte_1024890E0;
  }
  if (v2) {
    goto LABEL_9;
  }
}

void sub_1018A6FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018A6FE0(double *a1, int a2)
{
  double v10 = 0.0;
  double v11 = 0.0;
  sub_1018A7360(&v11, &v10, a2, 0);
  double v4 = v11;
  if (vabdd_f64(*a1, v11) > 0.000001 || vabdd_f64(a1[1], v10) > 0.000001)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349568;
      double v19 = v4;
      __int16 v20 = 2050;
      double v21 = v10;
      __int16 v22 = 1026;
      int v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: #ee,service change detected,updateRateCellSeconds,%{public}.1f,updateRateWifiSeconds,%{public}.1f,assistanceFileDurationInSec,%{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      int v12 = 134349568;
      double v13 = v4;
      __int16 v14 = 2050;
      double v15 = v10;
      __int16 v16 = 1026;
      int v17 = a2;
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::processAssistanceFileDuration(const int)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    if (sub_1005C6BBC((uint64_t)(a1 + 13), &v11, &v10))
    {
      double v6 = v10;
      *a1 = v11;
      a1[1] = v6;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "GNSS_FILE: could not setup assistance file updater", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        LOWORD(v12) = 0;
        char v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::processAssistanceFileDuration(const int)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
  }
}

void sub_1018A7360(double *a1, double *a2, int a3, int a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024890F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024890F8))
  {
    int v13 = sub_10074404C();
    double v14 = 259200.0;
    if (v13) {
      double v14 = 86400.0;
    }
    qword_1024890F0 = *(void *)&v14;
    __cxa_guard_release(&qword_1024890F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102489108, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102489108))
  {
    if ((sub_10073C674() & 1) != 0 || sub_10073C6AC())
    {
      int v15 = sub_10010145C();
      uint64_t v16 = 0x40BC200000000000;
      if (v15) {
        uint64_t v16 = 0x40E5180000000000;
      }
    }
    else
    {
      uint64_t v16 = 0x40E5180000000000;
    }
    qword_102489100 = v16;
    __cxa_guard_release(&qword_102489108);
  }
  if (qword_102489110 != -1) {
    dispatch_once(&qword_102489110, &stru_102344148);
  }
  *a1 = fmax(*(double *)&qword_1024890F0, 300.0);
  *a2 = fmax(*(double *)&qword_102489100, 300.0);
  if ((a3 - 1) >> 6 <= 0xE0 && ((sub_10073C674() & 1) != 0 || sub_10073C6AC()))
  {
    *a1 = 7200.0;
    double v8 = 3600.0;
  }
  else
  {
    if (!a4) {
      goto LABEL_14;
    }
    if (qword_102489118 != -1) {
      dispatch_once(&qword_102489118, &stru_102344168);
    }
    *a1 = fmax(*(double *)&qword_102479EA0, 300.0);
    double v8 = fmax(*(double *)&qword_102479EA8, 300.0);
  }
  *a2 = v8;
LABEL_14:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
  }
  char v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    double v10 = *a1;
    double v11 = *a2;
    *(_DWORD *)buf = 134349824;
    double v18 = v10;
    __int16 v19 = 2050;
    double v20 = v11;
    __int16 v21 = 1026;
    int v22 = a3;
    __int16 v23 = 1026;
    int v24 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "GNSS_FILE: #ee,updateRateCellSec,%{public}.1f,updateRateWifiSec,%{public}.1f,fileDurationSec,%{public}d,isWorkoutOrTbtSession,%{public}d", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGnssAssistanceFileDownloader::getEeFileDownloadRates(CFTimeInterval &, CFTimeInterval &, const int, const BOOL)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
}

void sub_1018A7704(_Unwind_Exception *a1)
{
}

void sub_1018A7734(id a1)
{
  double v8 = -1.0;
  sub_1000C7F88(&v6);
  int v1 = sub_1000A699C(v6, "GnssEeUpdateRateCellSeconds", &v8);
  if (v8 > 0.0) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (v2) {
    qword_1024890F0 = *(void *)&v8;
  }
  double v5 = -1.0;
  sub_1000C7F88(&v6);
  int v3 = sub_1000A699C(v6, "GnssEeUpdateRateWifiSeconds", &v5);
  if (v5 > 0.0) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (v4) {
    qword_102489100 = *(void *)&v5;
  }
}

void sub_1018A77F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018A7814(id a1)
{
  double v8 = -1.0;
  sub_1000C7F88(&v6);
  int v1 = sub_1000A699C(v6, "GnssEeUpdateRateWorkoutCellSeconds", &v8);
  if (v8 > 0.0) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (v2) {
    qword_102479EA0 = *(void *)&v8;
  }
  double v5 = -1.0;
  sub_1000C7F88(&v6);
  int v3 = sub_1000A699C(v6, "GnssEeUpdateRateWorkoutWifiSeconds", &v5);
  if (v5 > 0.0) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (v4) {
    qword_102479EA8 = *(void *)&v5;
  }
}

void sub_1018A78D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018A78F4(double *a1, int a2)
{
  if (qword_1024890E8 != -1) {
    dispatch_once(&qword_1024890E8, &stru_102344128);
  }
  if (byte_1024890E0)
  {
    double v8 = 0.0;
    double v9 = 0.0;
    sub_1018A7360(&v9, &v8, -1, a2);
    if (vabdd_f64(*a1, v9) > 0.000001 || vabdd_f64(a1[1], v8) > 0.000001)
    {
      if (sub_1005C6BBC((uint64_t)(a1 + 13), &v9, &v8))
      {
        double v4 = v8;
        *a1 = v9;
        a1[1] = v4;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        double v5 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349568;
          double v17 = v9;
          __int16 v18 = 2050;
          double v19 = v8;
          __int16 v20 = 1026;
          int v21 = a2;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: #ee,update assistance file downloader on user-activated fitness session or tbt navigation,cell,%{public}.2f,wifi,%{public}.2f,isWorkoutOrTbtSession,%{public}d", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023441E8);
          }
          int v10 = 134349568;
          double v11 = v9;
          __int16 v12 = 2050;
          double v13 = v8;
          __int16 v14 = 1026;
          int v15 = a2;
          uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateEeFileDownloadRateOnWorkoutOrFocusedNav(const BOOL)", "%s\n");
LABEL_24:
          if (v6 != buf) {
            free(v6);
          }
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        uint64_t v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "GNSS_FILE: #ee,could not update assistance file download rates", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023441E8);
          }
          LOWORD(v10) = 0;
          uint64_t v6 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::updateEeFileDownloadRateOnWorkoutOrFocusedNav(const BOOL)", "%s\n");
          goto LABEL_24;
        }
      }
    }
  }
}

void sub_1018A7C90(double *a1, double *a2, int a3, int a4)
{
  if (a3) {
    double v8 = 604800.0;
  }
  else {
    double v8 = 3600.0;
  }
  if (qword_102489140 != -1) {
    dispatch_once(&qword_102489140, &stru_102344188);
  }
  double v9 = *(double *)&qword_102489120;
  if (!byte_102489128) {
    double v9 = 604800.0;
  }
  *a1 = v9;
  double v10 = *(double *)&qword_102489130;
  if (!byte_102489138) {
    double v10 = v8;
  }
  *a2 = v10;
  if (a4)
  {
    if (qword_102489168 != -1) {
      dispatch_once(&qword_102489168, &stru_1023441A8);
    }
    double v11 = *(double *)&qword_102489148;
    if (!byte_102489150) {
      double v11 = 3600.0;
    }
    *a1 = v11;
    double v12 = *(double *)&qword_102489158;
    if (!byte_102489160) {
      double v12 = 3600.0;
    }
    *a2 = v12;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
  }
  double v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    __int16 v14 = "#rte";
    double v15 = *a1;
    double v16 = *a2;
    if (a3) {
      __int16 v14 = "#rof";
    }
    *(_DWORD *)buf = 136315906;
    double v19 = v14;
    __int16 v20 = 2050;
    double v21 = v15;
    __int16 v22 = 2050;
    double v23 = v16;
    __int16 v24 = 1026;
    int v25 = a4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "GNSS_FILE: %s,updateRateCellSec,%{public}.2f,updateRateWifiSec,%{public}.2f,isWorkoutOrTbtSession,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    double v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLGnssAssistanceFileDownloader::getRteRofFileDownloadRates(CFTimeInterval &, CFTimeInterval &, const BOOL, const BOOL)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
}

void sub_1018A7FBC(id a1)
{
  double v7 = -1.0;
  sub_1000C7F88(&v5);
  int v1 = sub_1000A699C(v5, "GnssRteUpdateRateCellSeconds", &v7);
  if (v7 > 0.0) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2)
  {
    qword_102489120 = fmax(v7, 300.0);
    byte_102489128 = 1;
  }
  double v7 = -1.0;
  sub_1000C7F88(&v5);
  int v3 = sub_1000A699C(v5, "GnssRteUpdateRateWifiSeconds", &v7);
  if (v7 > 0.0) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v4)
  {
    qword_102489130 = fmax(v7, 300.0);
    byte_102489138 = 1;
  }
}

void sub_1018A80B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018A80CC(id a1)
{
  double v7 = -1.0;
  sub_1000C7F88(&v5);
  int v1 = sub_1000A699C(v5, "GnssRteUpdateRateWorkoutCellSeconds", &v7);
  if (v7 > 0.0) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2)
  {
    qword_102489148 = fmax(v7, 300.0);
    byte_102489150 = 1;
  }
  double v7 = -1.0;
  sub_1000C7F88(&v5);
  int v3 = sub_1000A699C(v5, "GnssRteUpdateRateWorkoutWifiSeconds", &v7);
  if (v7 > 0.0) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v4)
  {
    qword_102489158 = fmax(v7, 300.0);
    byte_102489160 = 1;
  }
}

void sub_1018A81C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018A81DC(double *a1, int a2, int a3)
{
  double v14 = 0.0;
  double v15 = 0.0;
  sub_1018A7C90(&v15, &v14, a3, a2);
  if (vabdd_f64(*a1, v15) > 0.000001 || vabdd_f64(a1[1], v14) > 0.000001)
  {
    if (sub_1005C6BBC((uint64_t)(a1 + 13), &v15, &v14))
    {
      double v6 = v14;
      *a1 = v15;
      a1[1] = v6;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      double v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        double v8 = "#rte";
        if (a3) {
          double v8 = "#rof";
        }
        *(_DWORD *)buf = 136315906;
        int v25 = v8;
        __int16 v26 = 2050;
        double v27 = v15;
        __int16 v28 = 2050;
        double v29 = v14;
        __int16 v30 = 1026;
        int v31 = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: %s,update assistance file downloader on user-activated fitness session or tbt navigation,cell,%{public}.2f,wifi,%{public}.2f,isWorkoutOrTbtSession,%{public}d", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        double v9 = "#rte";
        if (a3) {
          double v9 = "#rof";
        }
        int v16 = 136315906;
        double v17 = v9;
        __int16 v18 = 2050;
        double v19 = v15;
        __int16 v20 = 2050;
        double v21 = v14;
        __int16 v22 = 1026;
        int v23 = a2;
        double v10 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateRteRofFileDownloadRateOnWorkoutOrFocusedNav(const BOOL, const BOOL)", "%s\n");
LABEL_29:
        if (v10 != buf) {
          free(v10);
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      double v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        double v12 = "#rte";
        if (a3) {
          double v12 = "#rof";
        }
        *(_DWORD *)buf = 136315138;
        int v25 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "GNSS_FILE: %s,could not update assistance file download rates", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        double v13 = "#rte";
        if (a3) {
          double v13 = "#rof";
        }
        int v16 = 136315138;
        double v17 = v13;
        double v10 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::updateRteRofFileDownloadRateOnWorkoutOrFocusedNav(const BOOL, const BOOL)", "%s\n");
        goto LABEL_29;
      }
    }
  }
}

void sub_1018A85CC(uint64_t a1, double *a2, double *a3, int a4)
{
  *a2 = sub_10073FD68() * 3600.0;
  *a3 = sub_10073FDC0() * 3600.0;
  if (*(unsigned char *)(a1 + 24)) {
    *a2 = *(double *)(a1 + 16);
  }
  if (*(unsigned char *)(a1 + 40)) {
    *a3 = *(double *)(a1 + 32);
  }
  if (a4)
  {
    *a2 = 3600.0;
    *a3 = 3600.0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
  }
  double v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    double v9 = *a2;
    double v10 = *a3;
    *(_DWORD *)buf = 134349568;
    double v13 = v9;
    __int16 v14 = 2050;
    double v15 = v10;
    __int16 v16 = 1026;
    int v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "GNSS_FILE: #rti,updateRateCellSec,%{public}.2f,updateRateWifiSec,%{public}.2f,isWorkoutOrTbtSession,%{public}d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::getRtiDownloadRates(CFTimeInterval &, CFTimeInterval &, const BOOL)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_1018A8828(double *a1, int a2)
{
  double v8 = 0.0;
  double v9 = 0.0;
  sub_1018A85CC((uint64_t)a1, &v9, &v8, a2);
  if (vabdd_f64(*a1, v9) > 0.000001 || vabdd_f64(a1[1], v8) > 0.000001)
  {
    if (sub_1005C6BBC((uint64_t)(a1 + 13), &v9, &v8))
    {
      double v4 = v8;
      *a1 = v9;
      a1[1] = v4;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349568;
        double v17 = v9;
        __int16 v18 = 2050;
        double v19 = v8;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: #rti,update assistance file downloader on user-activated fitness session or tbt navigation,cell,%{public}.2f,wifi,%{public}.2f,isWorkoutOrTbtSession,%{public}d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        int v10 = 134349568;
        double v11 = v9;
        __int16 v12 = 2050;
        double v13 = v8;
        __int16 v14 = 1026;
        int v15 = a2;
        double v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateRtiDownloadRateOnWorkoutOrFocusedNav(const BOOL)", "%s\n");
LABEL_21:
        if (v6 != buf) {
          free(v6);
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      double v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "GNSS_FILE: #rti,could not update assistance file download rates", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        LOWORD(v10) = 0;
        double v6 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::updateRtiDownloadRateOnWorkoutOrFocusedNav(const BOOL)", "%s\n");
        goto LABEL_21;
      }
    }
  }
}

void sub_1018A8B8C(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
  }
  double v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 56);
    double v6 = (void *)(v5 + 24);
    if (*(char *)(v5 + 47) < 0) {
      double v6 = (void *)*v6;
    }
    *(_DWORD *)buf = 136380931;
    uint64_t v39 = v6;
    __int16 v40 = 1026;
    LODWORD(v41) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: update downloader per mobile asset,file,%{private}s,activate,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    uint64_t v21 = *(void *)(a1 + 56);
    __int16 v22 = (void *)(v21 + 24);
    if (*(char *)(v21 + 47) < 0) {
      __int16 v22 = (void *)*v22;
    }
    int v32 = 136380931;
    __int16 v33 = v22;
    __int16 v34 = 1026;
    LODWORD(v35) = a2;
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateDownloaderPerMobileAsset(const BOOL)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (a2)
  {
    if (!*(unsigned char *)(a1 + 376))
    {
      CFAbsoluteTime v31 = 0.0;
      uint64_t v7 = sub_1000A6958();
      double v8 = (const char *)(a1 + 352);
      double v9 = (const char *)(a1 + 352);
      if (*(char *)(a1 + 375) < 0) {
        double v9 = *(const char **)v8;
      }
      if (sub_1000A699C(v7, v9, &v31))
      {
        uint64_t v10 = sub_1000A6958();
        if (*(char *)(a1 + 375) < 0) {
          double v8 = *(const char **)v8;
        }
        sub_1004CF7DC(v10, v8, 0xFFFFFFFFLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        double v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          uint64_t v12 = *(void *)(a1 + 56);
          double v13 = (void *)(v12 + 24);
          if (*(char *)(v12 + 47) < 0) {
            double v13 = (void *)*v13;
          }
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          *(_DWORD *)buf = 136381187;
          uint64_t v39 = v13;
          __int16 v40 = 2050;
          CFAbsoluteTime v41 = Current;
          __int16 v42 = 2050;
          CFAbsoluteTime v43 = v31;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GNSS_FILE: clear mobile asset persistent disablement,re-activate,file,%{private}s,nowTime,%{public}lf,lastDisabledTime,%{public}lf", buf, 0x20u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023441E8);
          }
          uint64_t v27 = *(void *)(a1 + 56);
          __int16 v28 = (void *)(v27 + 24);
          if (*(char *)(v27 + 47) < 0) {
            __int16 v28 = (void *)*v28;
          }
          CFAbsoluteTime v29 = CFAbsoluteTimeGetCurrent();
          int v32 = 136381187;
          __int16 v33 = v28;
          __int16 v34 = 2050;
          CFAbsoluteTime v35 = v29;
          __int16 v36 = 2050;
          CFAbsoluteTime v37 = v31;
          __int16 v30 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateDownloaderPerMobileAsset(const BOOL)", "%s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
      }
      sub_1018A5A34(a1, 0);
    }
  }
  else
  {
    CFAbsoluteTime v31 = CFAbsoluteTimeGetCurrent();
    uint64_t v15 = sub_1000A6958();
    __int16 v16 = (const char *)(a1 + 352);
    if (*(char *)(a1 + 375) < 0) {
      __int16 v16 = *(const char **)v16;
    }
    sub_10016332C(v15, v16, &v31);
    uint64_t v17 = *(void *)sub_1000A6958();
    (*(void (**)(void))(v17 + 944))();
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    __int16 v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v19 = *(void *)(a1 + 56);
      __int16 v20 = (void *)(v19 + 24);
      if (*(char *)(v19 + 47) < 0) {
        __int16 v20 = (void *)*v20;
      }
      *(_DWORD *)buf = 136380931;
      uint64_t v39 = v20;
      __int16 v40 = 2050;
      CFAbsoluteTime v41 = v31;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "GNSS_FILE: set mobile asset persistent disablement,file,%{private}s,nowTime,%{public}lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      uint64_t v24 = *(void *)(a1 + 56);
      int v25 = (void *)(v24 + 24);
      if (*(char *)(v24 + 47) < 0) {
        int v25 = (void *)*v25;
      }
      int v32 = 136380931;
      __int16 v33 = v25;
      __int16 v34 = 2050;
      CFAbsoluteTime v35 = v31;
      __int16 v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateDownloaderPerMobileAsset(const BOOL)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    sub_1018A6294(a1);
  }
}

void sub_1018A917C(uint64_t a1, double a2, double a3)
{
  double v41 = a3;
  double v42 = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
  }
  double v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 56);
    double v8 = (void *)(v7 + 24);
    if (*(char *)(v7 + 47) < 0) {
      double v8 = (void *)*v8;
    }
    *(_DWORD *)buf = 136381187;
    __int16 v50 = v8;
    __int16 v51 = 2050;
    double v52 = a2;
    __int16 v53 = 2050;
    double v54 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "GNSS_FILE: received mobile asset request,downloader rates,file,%{private}s,updateRateCellSec,%{public}.2f,updateRateWifiSec,%{public}.2f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    uint64_t v30 = *(void *)(a1 + 56);
    CFAbsoluteTime v31 = (void *)(v30 + 24);
    if (*(char *)(v30 + 47) < 0) {
      CFAbsoluteTime v31 = (void *)*v31;
    }
    int v43 = 136381187;
    __int16 v44 = v31;
    __int16 v45 = 2050;
    double v46 = v42;
    __int16 v47 = 2050;
    double v48 = v41;
    int v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateRatesPerMobileAsset(CFTimeInterval, CFTimeInterval)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
  }
  double v9 = v42;
  if (v42 < 300.0 || v42 > 172800.0)
  {
    double v10 = 172800.0;
    if (v42 <= 172800.0) {
      double v10 = v42;
    }
    if (v42 < 300.0) {
      double v10 = 300.0;
    }
    double v42 = v10;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    double v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 56);
      double v13 = (void *)(v12 + 24);
      if (*(char *)(v12 + 47) < 0) {
        double v13 = (void *)*v13;
      }
      *(_DWORD *)buf = 136381187;
      __int16 v50 = v13;
      __int16 v51 = 2050;
      double v52 = v9;
      __int16 v53 = 2050;
      double v54 = v42;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#Warning GNSS_FILE: applied sensibility limits to mobile asset,file,%{private}s,updateRateCellSec,rcvd,%{public}.2f,new,%{public}.2f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      uint64_t v33 = *(void *)(a1 + 56);
      __int16 v34 = (void *)(v33 + 24);
      if (*(char *)(v33 + 47) < 0) {
        __int16 v34 = (void *)*v34;
      }
      int v43 = 136381187;
      __int16 v44 = v34;
      __int16 v45 = 2050;
      double v46 = v9;
      __int16 v47 = 2050;
      double v48 = v42;
      CFAbsoluteTime v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateRatesPerMobileAsset(CFTimeInterval, CFTimeInterval)", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
  }
  double v14 = v41;
  if (v41 < 300.0 || v41 > 172800.0)
  {
    double v15 = 172800.0;
    if (v41 <= 172800.0) {
      double v15 = v41;
    }
    if (v41 < 300.0) {
      double v15 = 300.0;
    }
    double v41 = v15;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    __int16 v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 56);
      __int16 v18 = (void *)(v17 + 24);
      if (*(char *)(v17 + 47) < 0) {
        __int16 v18 = (void *)*v18;
      }
      *(_DWORD *)buf = 136381187;
      __int16 v50 = v18;
      __int16 v51 = 2050;
      double v52 = v14;
      __int16 v53 = 2050;
      double v54 = v41;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#Warning GNSS_FILE: applied sensibility limits to mobile asset,file,%{private}s,updateRateWifiSec,rcvd,%{public}.2f,new,%{public}.2f", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      uint64_t v36 = *(void *)(a1 + 56);
      CFAbsoluteTime v37 = (void *)(v36 + 24);
      if (*(char *)(v36 + 47) < 0) {
        CFAbsoluteTime v37 = (void *)*v37;
      }
      int v43 = 136381187;
      __int16 v44 = v37;
      __int16 v45 = 2050;
      double v46 = v14;
      __int16 v47 = 2050;
      double v48 = v41;
      int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateRatesPerMobileAsset(CFTimeInterval, CFTimeInterval)", "%s\n", v38);
      if (v38 != (char *)buf) {
        free(v38);
      }
    }
  }
  if (vabdd_f64(*(double *)a1, v42) > 0.000001 || vabdd_f64(*(double *)(a1 + 8), v41) > 0.000001)
  {
    if (sub_1005C6BBC(a1 + 104, &v42, &v41))
    {
      double v20 = v41;
      double v19 = v42;
      *(double *)a1 = v42;
      *(double *)(a1 + 8) = v20;
      *(double *)(a1 + 16) = v19;
      *(unsigned char *)(a1 + 24) = 1;
      *(double *)(a1 + 32) = v20;
      *(unsigned char *)(a1 + 40) = 1;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      uint64_t v21 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(a1 + 56);
        int v23 = (void *)(v22 + 24);
        if (*(char *)(v22 + 47) < 0) {
          int v23 = (void *)*v23;
        }
        *(_DWORD *)buf = 136381187;
        __int16 v50 = v23;
        __int16 v51 = 2050;
        double v52 = v42;
        __int16 v53 = 2050;
        double v54 = v41;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "GNSS_FILE: update downloader rates per mobile asset,file,%{private}s,updateRateCellSec,%{public}.2f,updateRateWifiSec,%{public}.2f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        uint64_t v24 = *(void *)(a1 + 56);
        int v25 = (void *)(v24 + 24);
        if (*(char *)(v24 + 47) < 0) {
          int v25 = (void *)*v25;
        }
        int v43 = 136381187;
        __int16 v44 = v25;
        __int16 v45 = 2050;
        double v46 = v42;
        __int16 v47 = 2050;
        double v48 = v41;
        __int16 v26 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::updateRatesPerMobileAsset(CFTimeInterval, CFTimeInterval)", "%s\n");
LABEL_80:
        if (v26 != buf) {
          free(v26);
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023441E8);
      }
      uint64_t v27 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(void *)(a1 + 56);
        CFAbsoluteTime v29 = (void *)(v28 + 24);
        if (*(char *)(v28 + 47) < 0) {
          CFAbsoluteTime v29 = (void *)*v29;
        }
        *(_DWORD *)buf = 136380675;
        __int16 v50 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "GNSS_FILE: could not update downloader rates per mobile asset,file,%{private}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023441E8);
        }
        uint64_t v39 = *(void *)(a1 + 56);
        __int16 v40 = (void *)(v39 + 24);
        if (*(char *)(v39 + 47) < 0) {
          __int16 v40 = (void *)*v40;
        }
        int v43 = 136380675;
        __int16 v44 = v40;
        __int16 v26 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::updateRatesPerMobileAsset(CFTimeInterval, CFTimeInterval)", "%s\n");
        goto LABEL_80;
      }
    }
  }
}

void sub_1018A9A80(void *a1, uint64_t a2, int a3)
{
  uint64_t v5 = a1[7];
  double v6 = (const char *)(v5 + 24);
  if (*(char *)(v5 + 47) < 0) {
    double v6 = *(const char **)v6;
  }
  if (a3 == 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    double v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "GNSS_FILE: file download started %s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    int v16 = 136315138;
    uint64_t v17 = v6;
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::onFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v10);
LABEL_46:
    if (v10 != (char *)buf) {
      free(v10);
    }
    return;
  }
  if (a3 == 3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    double v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380675;
      uint64_t v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning GNSSS_FILE: file download failed,%{private}s", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    int v16 = 136380675;
    uint64_t v17 = v6;
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::onFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v10);
    goto LABEL_46;
  }
  if (a3 != 2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    uint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136380931;
      uint64_t v21 = v6;
      __int16 v22 = 1024;
      int v23 = a3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning GNSS_FILE: file,%{private}s,unhandled status,%u", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    int v16 = 136380931;
    uint64_t v17 = v6;
    __int16 v18 = 1024;
    int v19 = a3;
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceFileDownloader::onFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v10);
    goto LABEL_46;
  }
  if (sub_1000A569C(v6) && sub_1004BC384(v6))
  {
    uint64_t v7 = a1[12];
    if (v7)
    {
      double v8 = (std::__shared_weak_count *)a1[8];
      uint64_t v14 = a1[7];
      double v15 = v8;
      if (v8)
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v7 = a1[12];
        if (!v7) {
          sub_10015E48C();
        }
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 48))(v7, &v14);
      if (v15) {
        sub_1000DB0A0(v15);
      }
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
  }
  double v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136380675;
    uint64_t v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "GNSS_FILE: file not created, or 0 bytes!,%{private}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
    int v16 = 136380675;
    uint64_t v17 = v6;
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceFileDownloader::onFileUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)", "%s\n", v10);
    goto LABEL_46;
  }
}

void sub_1018AA09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018AA0BC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1018AA0EC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1018AA11C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1018AA1B4()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023441E8);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"GNSS_FILE: Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
  }
  int v1 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "GNSS_FILE: Assertion failed", "{\"msg%{public}.0s\":\"GNSS_FILE: Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023441E8);
    }
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"GNSS_FILE: Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v3, 0x26u);
  }
}

void *sub_1018AA37C(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = a2;
  sub_1018AF208((uint64_t)(a1 + 1), a3);
  return a1;
}

void sub_1018AA3AC(uint64_t *a1, const char *a2, unsigned int a3, int a4)
{
  if ((int)a3 >= 1)
  {
    if (a2[23] < 0)
    {
      if (*((void *)a2 + 1))
      {
LABEL_4:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344208);
        }
        double v8 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          if (a2[23] >= 0) {
            double v9 = a2;
          }
          else {
            double v9 = *(const char **)a2;
          }
          *(_DWORD *)buf = 136380931;
          *(void *)&uint8_t buf[4] = v9;
          *(_WORD *)&unsigned char buf[12] = 1026;
          *(_DWORD *)&buf[14] = a3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "inject,%{private}s,max size,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344208);
          }
          v83 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v83);
          if (v83 != buf) {
            free(v83);
          }
        }
        if (a4) {
          unsigned int v10 = 2000;
        }
        else {
          unsigned int v10 = 10000;
        }
        if (a2[23] >= 0) {
          double v11 = a2;
        }
        else {
          double v11 = *(const char **)a2;
        }
        uint64_t v12 = fopen(v11, "rb");
        if (v12)
        {
          v96 = v12;
          double v13 = (unsigned __int8 *)malloc_type_malloc(a3 + 10, 0x74291EE4uLL);
          *(void *)buf = off_102344238;
          *(void *)&buf[24] = buf;
          v104 = v13;
          sub_1018AF588((uint64_t)v105, (uint64_t)buf);
          sub_1018AF504(buf);
          uint64_t v97 = (uint64_t)v104;
          if (!v104)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            uint64_t v24 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              if (a2[23] >= 0) {
                int v25 = a2;
              }
              else {
                int v25 = *(const char **)a2;
              }
              *(_DWORD *)buf = 67240451;
              *(_DWORD *)&uint8_t buf[4] = a3;
              *(_WORD *)&uint8_t buf[8] = 2081;
              *(void *)&buf[10] = v25;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "can't allocated %{public}d bytes to (%{private}s)", buf, 0x12u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_144;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 == -1) {
              goto LABEL_251;
            }
            goto LABEL_274;
          }
          v93 = a1;
          unint64_t v14 = 0;
          if (!feof(v12))
          {
            do
            {
              size_t v26 = fread(&v104[v14], 1uLL, a3 - v14, v12);
              if (!v26 && !feof(v12)) {
                goto LABEL_144;
              }
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102344208);
              }
              v14 += v26;
              uint64_t v27 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 67240704;
                *(_DWORD *)&uint8_t buf[4] = a3;
                *(_WORD *)&uint8_t buf[8] = 2050;
                *(void *)&buf[10] = v26;
                *(_WORD *)&buf[18] = 2050;
                *(void *)&buf[20] = v14;
                _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "XTRA read loop max %{public}d read: %{public}zu tot %{public}zu", buf, 0x1Cu);
              }
              uint64_t v12 = v96;
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102344208);
                }
                uint64_t v28 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v28);
                if (v28 != buf) {
                  free(v28);
                }
                uint64_t v12 = v96;
              }
            }
            while (!feof(v12) && v14 < a3);
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344208);
          }
          double v15 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            if (a2[23] >= 0) {
              int v16 = a2;
            }
            else {
              int v16 = *(const char **)a2;
            }
            *(_DWORD *)buf = 136381187;
            *(void *)&uint8_t buf[4] = v16;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v14;
            *(_WORD *)&buf[22] = 1026;
            *(_DWORD *)&buf[24] = a3;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "XTRA file %{private}s read: %{public}zu max %{public}d", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            v84 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v84);
            if (v84 != buf) {
              free(v84);
            }
            uint64_t v12 = v96;
          }
          if (!feof(v12))
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            CFAbsoluteTime v29 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 134349056;
              *(void *)&uint8_t buf[4] = v14;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "read: %{public}lu but not EOF!", buf, 0xCu);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_144;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 == -1) {
              goto LABEL_251;
            }
            goto LABEL_274;
          }
          if (v14 < v10)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            uint64_t v17 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 134349312;
              *(void *)&uint8_t buf[4] = v14;
              *(_WORD *)&unsigned char buf[12] = 1026;
              *(_DWORD *)&buf[14] = v10;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Ignoring too-small XTRA file,%{public}zu,%{public}d", buf, 0x12u);
            }
            if (!sub_10013D1A0(115, 0))
            {
              __int16 v18 = "too_small";
LABEL_98:
              sub_10187A1C8(*v93, (uint64_t)"ee_download", (uint64_t)v18, 0);
LABEL_144:
              sub_1018AF608((uint64_t *)&v104, 0);
              sub_1018AF504(v105);
              sub_1018AEEC8(v12);
              return;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            int v85 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v85);
            if (v85 != buf) {
              free(v85);
            }
            __int16 v18 = "too_small";
            goto LABEL_249;
          }
          if (v14 > a3)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            uint64_t v30 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 134349312;
              *(void *)&uint8_t buf[4] = v14;
              *(_WORD *)&unsigned char buf[12] = 1026;
              *(_DWORD *)&buf[14] = a3;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "Ignoring too-large XTRA file,%{public}zu,%{public}d", buf, 0x12u);
            }
            if (!sub_10013D1A0(115, 0))
            {
              __int16 v18 = "too_large";
              goto LABEL_98;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            v86 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v86);
            if (v86 != buf) {
              free(v86);
            }
            __int16 v18 = "too_large";
LABEL_249:
            uint64_t v12 = v96;
            goto LABEL_98;
          }
          CFAbsoluteTime v31 = (__int32 *)v104;
          unsigned int v32 = *v104;
          if (v32 >= 2)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            int v58 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&uint8_t buf[4] = v32;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_ERROR, "xtra,crcfail,byteOrder,%{public}u", buf, 8u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_139;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 == -1) {
              goto LABEL_255;
            }
            goto LABEL_277;
          }
          int v33 = (char)v104[6];
          if (v33 >= 3)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            __int16 v34 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67240192;
              *(_DWORD *)&uint8_t buf[4] = v33;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "XTRA file,Version,%{public}u", buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102344208);
              }
              v89 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v89);
              if (v89 != buf) {
                free(v89);
              }
            }
            CFAbsoluteTime v35 = v104;
            if (v14)
            {
              unint64_t v36 = 0;
              while (1)
              {
                unsigned int v37 = v35[v36];
                if (v37 >= 2) {
                  break;
                }
                if (v36 + 11 > v14)
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102344208);
                  }
                  int v76 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134349824;
                    *(void *)&uint8_t buf[4] = v36;
                    *(_WORD *)&unsigned char buf[12] = 1026;
                    *(_DWORD *)&buf[14] = 7;
                    *(_WORD *)&buf[18] = 2050;
                    *(void *)&buf[20] = 4;
                    *(_WORD *)&buf[28] = 2050;
                    *(void *)&buf[30] = v14;
                    _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_ERROR, "xtra,crcfail,fileOffset,%{public}zu,kXtra3CrcOffset,%{public}u,sizeof(bufferCrc),%{public}zu,tot,%{public}zu", buf, 0x26u);
                  }
                  if (!sub_10013D1A0(115, 0)) {
                    goto LABEL_139;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    goto LABEL_277;
                  }
                  goto LABEL_255;
                }
                if (v36 + 25 > v14)
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102344208);
                  }
                  __int16 v77 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134349824;
                    *(void *)&uint8_t buf[4] = v36;
                    *(_WORD *)&unsigned char buf[12] = 1026;
                    *(_DWORD *)&buf[14] = 21;
                    *(_WORD *)&buf[18] = 2050;
                    *(void *)&buf[20] = 4;
                    *(_WORD *)&buf[28] = 2050;
                    *(void *)&buf[30] = v14;
                    _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "xtra,crcfail,fileOffset,%{public}zu,kXtra3FileSizeOffset,%{public}u,sizeof(bufferFileSize),%{public}zu,tot,%{public}zu", buf, 0x26u);
                  }
                  if (!sub_10013D1A0(115, 0)) {
                    goto LABEL_139;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    goto LABEL_277;
                  }
                  goto LABEL_255;
                }
                unint64_t v38 = v36 + 29;
                if (v36 + 29 > v14)
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102344208);
                  }
                  int v78 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 134349824;
                    *(void *)&uint8_t buf[4] = v36;
                    *(_WORD *)&unsigned char buf[12] = 1026;
                    *(_DWORD *)&buf[14] = 25;
                    *(_WORD *)&buf[18] = 2050;
                    *(void *)&buf[20] = 4;
                    *(_WORD *)&buf[28] = 2050;
                    *(void *)&buf[30] = v14;
                    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_ERROR, "xtra,crcfail,fileOffset,%{public}zu,kXtra3SignatureOffset,%{public}u,sizeof(bufferSignatureOffset),%{public}zu,tot,%{public}zu", buf, 0x26u);
                  }
                  if (!sub_10013D1A0(115, 0)) {
                    goto LABEL_139;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    goto LABEL_277;
                  }
                  goto LABEL_255;
                }
                uint64_t v39 = (unsigned int *)&v35[v36 + 7];
                unsigned int v98 = *v39;
                unsigned int v40 = *v39;
                if (v35[v36])
                {
                  unsigned int v40 = bswap32(v40);
                  unsigned int v41 = bswap32(*(_DWORD *)&v35[v36 + 21]);
                  unsigned int v42 = bswap32(*(_DWORD *)&v35[v36 + 25]);
                }
                else
                {
                  unsigned int v41 = *(_DWORD *)&v35[v36 + 21];
                  unsigned int v42 = *(_DWORD *)&v35[v36 + 25];
                }
                if (!v41)
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102344208);
                  }
                  __int16 v79 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_FAULT, "xtra,crcfail,fileSize,0", buf, 2u);
                  }
                  if (!sub_10013D1A0(115, 0)) {
                    goto LABEL_139;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    goto LABEL_277;
                  }
                  goto LABEL_255;
                }
                unint64_t v43 = v36 + v41;
                if (v43 > v14)
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102344208);
                  }
                  int v80 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 134349568;
                    *(void *)&uint8_t buf[4] = v36;
                    *(_WORD *)&unsigned char buf[12] = 1026;
                    *(_DWORD *)&buf[14] = v41;
                    *(_WORD *)&buf[18] = 2050;
                    *(void *)&buf[20] = v14;
                    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_FAULT, "xtra,crcfail,fileOffset,%{public}zu,fileSize,%{public}u,tot,%{public}zu", buf, 0x1Cu);
                  }
                  if (!sub_10013D1A0(115, 0)) {
                    goto LABEL_139;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    goto LABEL_277;
                  }
                  goto LABEL_255;
                }
                unint64_t v44 = v36 + v42;
                if (v44 + 69 > v14)
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102344208);
                  }
                  __int16 v81 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 134349824;
                    *(void *)&uint8_t buf[4] = v36;
                    *(_WORD *)&unsigned char buf[12] = 1026;
                    *(_DWORD *)&buf[14] = v42;
                    *(_WORD *)&buf[18] = 1026;
                    *(_DWORD *)&buf[20] = 64;
                    *(_WORD *)&buf[24] = 2050;
                    *(void *)&buf[26] = v14;
                    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_FAULT, "xtra,crcfail,fileOffset,%{public}zu,signOffset,%{public}u,kSizeOfXtra3Signature,%{public}u,tot,%{public}zu", buf, 0x22u);
                  }
                  if (!sub_10013D1A0(115, 0)) {
                    goto LABEL_139;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    goto LABEL_277;
                  }
                  goto LABEL_255;
                }
                unsigned int v92 = v42;
                unsigned int v95 = v40;
                __int16 v45 = &v35[v44];
                double v46 = v45 + 5;
                long long v100 = *(_OWORD *)(v45 + 5);
                long long v101 = *(_OWORD *)(v45 + 21);
                long long v102 = *(_OWORD *)(v45 + 37);
                long long v103 = *(_OWORD *)(v45 + 53);
                v94 = &v35[v36 + 7];
                bzero(v39, 4uLL);
                bzero(v46, 0x40uLL);
                int v48 = sub_1018ACD28(v47, (__int32 *)&v35[v36], v41, v35[v36]);
                unsigned int v49 = v41;
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102344208);
                }
                __int16 v50 = qword_1024193D8;
                if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
                {
                  __int16 v51 = &v35[v36];
                  int v52 = (char)v35[v36 + 43];
                  if (v37)
                  {
                    unsigned int v53 = bswap32(*(unsigned __int16 *)&v35[v38]) >> 16;
                    unsigned int v54 = bswap32(*(_DWORD *)(v51 + 31));
                    unsigned int v55 = bswap32(*(unsigned __int16 *)(v51 + 35)) >> 16;
                    unsigned int v56 = bswap32(*(_DWORD *)(v51 + 37));
                  }
                  else
                  {
                    unsigned int v53 = *(unsigned __int16 *)&v35[v38];
                    unsigned int v54 = *(_DWORD *)(v51 + 31);
                    unsigned int v55 = *(unsigned __int16 *)(v51 + 35);
                    unsigned int v56 = *(_DWORD *)(v51 + 37);
                  }
                  *(_DWORD *)buf = 67242240;
                  *(_DWORD *)&uint8_t buf[4] = v49;
                  *(_WORD *)&uint8_t buf[8] = 1026;
                  *(_DWORD *)&buf[10] = v92;
                  *(_WORD *)&buf[14] = 2050;
                  *(void *)&uint8_t buf[16] = v36;
                  *(_WORD *)&buf[24] = 1026;
                  *(_DWORD *)&buf[26] = v52;
                  *(_WORD *)&buf[30] = 1026;
                  *(_DWORD *)&buf[32] = v95;
                  *(_WORD *)&buf[36] = 1026;
                  *(_DWORD *)v107 = v53;
                  *(_WORD *)&v107[4] = 1026;
                  *(_DWORD *)v108 = v54;
                  *(_WORD *)&v108[4] = 1026;
                  *(_DWORD *)v109 = v55;
                  *(_WORD *)&v109[4] = 1026;
                  unsigned int v110 = v56;
                  _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "fileSize,%{public}d,signatureOffset,%{public}d,fileOffset,%{public}zu,contentType,%{public}u,Checksum,0x%{public}08X,fileWeek,%{public}u,fileMs,%{public}u,StartWeek,%{public}u,StartMs,%{public}u", buf, 0x3Cu);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102344208);
                  }
                  uint64_t v57 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v57);
                  if (v57 != buf) {
                    free(v57);
                  }
                  CFAbsoluteTime v35 = (unsigned __int8 *)v97;
                }
                *(_DWORD *)v94 = v98;
                *double v46 = v100;
                v46[1] = v101;
                v46[2] = v102;
                v46[3] = v103;
                if (v48 != v95)
                {
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102344208);
                  }
                  int v82 = qword_1024193D8;
                  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67240448;
                    *(_DWORD *)&uint8_t buf[4] = v95;
                    *(_WORD *)&uint8_t buf[8] = 1026;
                    *(_DWORD *)&buf[10] = v48;
                    _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "Xtra file crc (0x%{public}08X) does not match the computed crc (0x%{public}08X)", buf, 0xEu);
                  }
                  if (!sub_10013D1A0(115, 0)) {
                    goto LABEL_139;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    goto LABEL_277;
                  }
                  goto LABEL_255;
                }
                unint64_t v36 = v43;
                if (v43 >= v14) {
                  goto LABEL_161;
                }
              }
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102344208);
              }
              int v75 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67240192;
                *(_DWORD *)&uint8_t buf[4] = v37;
                _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "xtra,crcfail,byteOrder,%{public}u", buf, 8u);
              }
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_139;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                goto LABEL_277;
              }
              goto LABEL_255;
            }
LABEL_139:
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            __int16 v59 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "CRC check failed. Not injecting!", buf, 2u);
            }
            uint64_t v12 = v96;
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_144;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 == -1) {
              goto LABEL_251;
            }
LABEL_274:
            dispatch_once(&qword_1024193D0, &stru_102344208);
LABEL_251:
            char v87 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v87);
            if (v87 != buf) {
              free(v87);
            }
            uint64_t v12 = v96;
            goto LABEL_144;
          }
          uint64_t v60 = (unsigned int *)(v104 + 7);
          unsigned int v99 = *(_DWORD *)(v104 + 7);
          unsigned int v61 = bswap32(v99);
          if (*v104) {
            unsigned int v62 = v61;
          }
          else {
            unsigned int v62 = *(_DWORD *)(v104 + 7);
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344208);
          }
          __int16 v63 = qword_1024193D8;
          if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
LABEL_159:
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102344208);
              }
              v91 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v91);
              if (v91 != buf) {
                free(v91);
              }
              CFAbsoluteTime v31 = (__int32 *)v104;
            }
            bzero(v60, 4uLL);
            int v72 = sub_1018ACD28(v71, v31, v14, *(unsigned __int8 *)v31);
            *uint64_t v60 = v99;
            if (v72 == v62)
            {
LABEL_161:
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102344208);
              }
              __int16 v73 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "CRC check successful, Injecting XTRA file", buf, 2u);
              }
              uint64_t v12 = v96;
              if (sub_10013D1A0(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102344208);
                }
                __int16 v90 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v90);
                if (v90 != buf) {
                  free(v90);
                }
                uint64_t v12 = v96;
              }
              sub_1018ACFD8((uint64_t)v93, v97, v14);
              goto LABEL_144;
            }
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            unsigned int v74 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)&uint8_t buf[4] = v62;
              *(_WORD *)&uint8_t buf[8] = 1026;
              *(_DWORD *)&buf[10] = v72;
              _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "Xtra file crc (0x%{public}08X) does not match the computed crc (0x%{public}08X)", buf, 0xEu);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_139;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 == -1)
            {
LABEL_255:
              unsigned int v88 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v88);
              if (v88 != buf) {
                free(v88);
              }
              goto LABEL_139;
            }
LABEL_277:
            dispatch_once(&qword_1024193D0, &stru_102344208);
            goto LABEL_255;
          }
          int v64 = (char)v104[29];
          if (v32)
          {
            unsigned int v65 = bswap32(*(unsigned __int16 *)(v104 + 15)) >> 16;
            unsigned int v66 = bswap32(*(_DWORD *)(v104 + 17));
            unsigned int v67 = bswap32(*(unsigned __int16 *)(v104 + 21)) >> 16;
            unsigned int v68 = bswap32(*(_DWORD *)(v104 + 23));
            if (v33 != 1)
            {
              unsigned int v69 = bswap32(*((unsigned __int16 *)v104 + 15)) >> 16;
              unsigned int v70 = bswap32(*((_DWORD *)v104 + 8));
LABEL_158:
              *(_DWORD *)buf = 67176705;
              *(_DWORD *)&uint8_t buf[4] = v33;
              *(_WORD *)&uint8_t buf[8] = 1026;
              *(_DWORD *)&buf[10] = v64;
              *(_WORD *)&buf[14] = 1026;
              *(_DWORD *)&uint8_t buf[16] = v62;
              *(_WORD *)&buf[20] = 1026;
              *(_DWORD *)&buf[22] = v65;
              *(_WORD *)&buf[26] = 1026;
              *(_DWORD *)&buf[28] = v66;
              *(_WORD *)&buf[32] = 1026;
              *(_DWORD *)&buf[34] = v67;
              *(_WORD *)v107 = 1026;
              *(_DWORD *)&v107[2] = v68;
              *(_WORD *)v108 = 1026;
              *(_DWORD *)&v108[2] = v69;
              *(_WORD *)v109 = 1026;
              *(_DWORD *)&v109[2] = v70;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "XTRA file,Version,%{private}u,content mask,0x%{public}08X,Checksum,0x%{public}08X,fileWeek,%{public}u,fileMs,%{public}u,gpsStartWeek,%{public}u,gpsStartMs,%{public}u,gloStartWeek,%{public}u,gloStartMs,%{public}u", buf, 0x38u);
              goto LABEL_159;
            }
          }
          else
          {
            unsigned int v65 = *(unsigned __int16 *)(v104 + 15);
            unsigned int v66 = *(_DWORD *)(v104 + 17);
            unsigned int v67 = *(unsigned __int16 *)(v104 + 21);
            unsigned int v68 = *(_DWORD *)(v104 + 23);
            if (v33 != 1)
            {
              unsigned int v69 = *((unsigned __int16 *)v104 + 15);
              unsigned int v70 = *((_DWORD *)v104 + 8);
              goto LABEL_158;
            }
          }
          unsigned int v69 = 0;
          unsigned int v70 = 0;
          goto LABEL_158;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344208);
        }
        __int16 v22 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          if (a2[23] >= 0) {
            int v23 = a2;
          }
          else {
            int v23 = *(const char **)a2;
          }
          *(_DWORD *)buf = 136380675;
          *(void *)&uint8_t buf[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "couldn't open %{private}s!", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1)
          {
LABEL_47:
            uint64_t v21 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)", "%s\n", v21);
            if (v21 != buf) {
              free(v21);
            }
            return;
          }
LABEL_272:
          dispatch_once(&qword_1024193D0, &stru_102344208);
          goto LABEL_47;
        }
        return;
      }
    }
    else if (a2[23])
    {
      goto LABEL_4;
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344208);
  }
  int v19 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    if (a2[23] >= 0) {
      double v20 = a2;
    }
    else {
      double v20 = *(const char **)a2;
    }
    *(_DWORD *)buf = 67109379;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 2081;
    *(void *)&buf[10] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "no max xtra msg definition, use 'force' first size(%d) file(%{private}s)", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_47;
    }
    goto LABEL_272;
  }
}

void sub_1018ACC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, FILE *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
}

uint64_t sub_1018ACD28(uint64_t a1, __int32 *a2, unsigned int a3, int a4)
{
  if (a2)
  {
    double v4 = a2;
    if (a4) {
      unsigned int v5 = 24;
    }
    else {
      unsigned int v5 = 0;
    }
    if (a4) {
      unsigned int v6 = -8;
    }
    else {
      unsigned int v6 = 8;
    }
    int32x4_t v7 = vdupq_n_s32(v6);
    uint32x4_t v8 = (uint32x4_t)vmlaq_s32(vdupq_n_s32(v5), v7, (int32x4_t)xmmword_101E44F70);
    v7.i32[0] = *a2;
    uint32x4_t v21 = v8;
    int8x16_t v9 = (int8x16_t)vshlq_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v7.i8)), v8);
    uint8x8_t v10 = (uint8x8_t)vorr_s8(*(int8x8_t *)v9.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL));
    signed int v11 = v10.i32[0] | v10.i32[1];
    __dst[0] = 0;
    if (a3 >= 5)
    {
      unint64_t v12 = a3;
      do
      {
        if (v12 < 8)
        {
          __dst[0] = 0;
          memcpy(__dst, v4 + 1, v12 - 4);
          unsigned int v14 = bswap32(__dst[0]);
        }
        else
        {
          v10.i32[0] = v4[1];
          int8x16_t v13 = (int8x16_t)vshlq_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v10)), v21);
          uint8x8_t v10 = (uint8x8_t)vorr_s8(*(int8x8_t *)v13.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
          unsigned int v14 = v10.i32[0] | v10.i32[1];
        }
        __dst[0] = v14;
        for (int i = 31; i != -1; --i)
        {
          if (v11 >= 0) {
            int v16 = 2 * v11;
          }
          else {
            int v16 = (2 * v11) ^ 0x1BD65062;
          }
          signed int v11 = v16 & 0xFFFFFFFE | (v14 >> i) & 1;
        }
        ++v4;
        v12 -= 4;
      }
      while (v12 > 4);
    }
    if (v11 >= 0) {
      return v11;
    }
    else {
      return v11 ^ 0x8DEB2831;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    __int16 v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__dst[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Invalid parameter", (uint8_t *)__dst, 2u);
    }
    BOOL v19 = sub_10013D1A0(115, 0);
    uint64_t result = 0;
    if (v19)
    {
      bzero(__dst, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      double v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "uint32_t CLXtraInjector::xtraCrc(const void *, uint32_t, uint8_t)", "%s\n", v20);
      if (v20 != (char *)__dst) {
        free(v20);
      }
      return 0;
    }
  }
  return result;
}

void sub_1018ACFD8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 < 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    unint64_t v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "XTRA download - failed", (uint8_t *)&__p, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      signed int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLXtraInjector::sendInjectXtraData(const char *, int)", "%s\n", v11);
      goto LABEL_25;
    }
  }
  else
  {
    char v5 = 0;
    int v6 = 0;
    uint64_t v7 = a1 + 8;
    do
    {
      int v8 = a3 - v6;
      if (a3 - v6 >= 1536) {
        int v8 = 1536;
      }
      int v9 = v8 + v6;
      __p = 0;
      unsigned int v14 = 0;
      uint64_t v15 = 0;
      sub_10186693C((char *)&__p, (char *)(a2 + v6), (char *)(a2 + v6 + v8), v8);
      sub_1018AEE34(v7, v5, a3, (uint64_t)&__p, v9 == a3);
      if (__p)
      {
        unsigned int v14 = __p;
        operator delete(__p);
      }
      ++v5;
      int v6 = v9;
    }
    while (v9 < a3);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    uint8x8_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "XTRA file is sent to BB - ok", (uint8_t *)&__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      signed int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::sendInjectXtraData(const char *, int)", "%s\n", v11);
LABEL_25:
      if (v11 != (char *)&__p) {
        free(v11);
      }
    }
  }
}

void sub_1018AD31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018AD340(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (sub_101878A14(a2, &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      int v3 = __p.__r_.__value_.__r.__words[1];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1018ACFD8(a1, (uint64_t)p_p, v3);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    char v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#rti,#blob,done,sz,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      int v9 = 67240192;
      int v10 = v3;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectRtiDataViaXtraRequest(const std::string &)", "%s\n", v6);
LABEL_27:
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#rti,#blob,file reading failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      LOWORD(v9) = 0;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectRtiDataViaXtraRequest(const std::string &)", "%s\n", v6);
      goto LABEL_27;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1018AD664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018AD68C(uint64_t a1, uint64_t *a2)
{
  memset(&__p, 0, sizeof(__p));
  if (sub_101878A14(a2, &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v3 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      int v3 = __p.__r_.__value_.__r.__words[1];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_1018ACFD8(a1, (uint64_t)p_p, v3);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    char v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      int v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#apc,#blob,done,sz,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      int v9 = 67240192;
      int v10 = v3;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectApcDataViaXtraRequest(const std::string &)", "%s\n", v6);
LABEL_27:
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#apc,#blob,file reading failed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      LOWORD(v9) = 0;
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectApcDataViaXtraRequest(const std::string &)", "%s\n", v6);
      goto LABEL_27;
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1018AD9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018AD9D8(uint64_t a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8)) {
      goto LABEL_25;
    }
    int v6 = *(const char **)a2;
  }
  else
  {
    int v6 = (const char *)a2;
    if (!*(unsigned char *)(a2 + 23))
    {
LABEL_25:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      int8x16_t v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#eph,filename empty", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_41:
          int v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v16);
          if (v16 != buf) {
            free(v16);
          }
          return;
        }
LABEL_144:
        dispatch_once(&qword_1024193D0, &stru_102344208);
        goto LABEL_41;
      }
      return;
    }
  }
  uint64_t v7 = fopen(v6, "rb");
  if (v7)
  {
    int v8 = v7;
    uint64_t v47 = v7;
    *(void *)buf = off_1023442C8;
    *(void *)&buf[24] = buf;
    int v48 = malloc_type_malloc(a3, 0xDB1E208DuLL);
    sub_1018AF588((uint64_t)v49, (uint64_t)buf);
    sub_1018AF504(buf);
    if (!v48)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      int v33 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0) {
          __int16 v34 = (const char *)a2;
        }
        else {
          __int16 v34 = *(const char **)a2;
        }
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = a3;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "#eph,can't allocate %d bytes to buffer,%s", buf, 0x12u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_137;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
LABEL_146:
      }
        dispatch_once(&qword_1024193D0, &stru_102344208);
LABEL_89:
      CFAbsoluteTime v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v35);
      if (v35 != buf) {
        free(v35);
      }
      int v8 = v47;
LABEL_137:
      sub_1018AF608((uint64_t *)&v48, 0);
      sub_1018AF504(v49);
      sub_1018AF068(v8);
      return;
    }
    uint64_t v45 = a1;
    unint64_t v9 = 0;
    if (!feof(v8) && a3)
    {
      unint64_t v9 = 0;
      do
      {
        size_t v10 = fread(&v48[v9], 1uLL, a3 - v9, v8);
        if (!v10 && !feof(v8)) {
          goto LABEL_137;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344208);
        }
        v9 += v10;
        signed int v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = a3;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(void *)&buf[10] = v10;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v9;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#eph,read loop max size %d byes read %lu total bytes %lu", buf, 0x1Cu);
        }
        int v8 = v47;
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344208);
          }
          int v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v12);
          if (v12 != buf) {
            free(v12);
          }
        }
      }
      while (!feof(v47) && v9 < a3);
    }
    uint64_t v17 = &qword_102419000;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    __int16 v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        BOOL v19 = (const char *)a2;
      }
      else {
        BOOL v19 = *(const char **)a2;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v19;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#eph,file %s bytes read %lu max size %d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      unsigned int v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v41);
      if (v41 != buf) {
        free(v41);
      }
      int v8 = v47;
    }
    if (feof(v8)) {
      goto LABEL_57;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    double v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#eph,bytes read %lu but not EOF", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      unsigned int v42 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v42);
      if (v42 != buf) {
        free(v42);
      }
      int v8 = v47;
      if (v9)
      {
LABEL_58:
        unsigned __int8 v21 = 0;
        uint64_t v22 = 0;
        while (1)
        {
          int v46 = v48[v22 + 6];
          unsigned int v23 = v48[v22];
          if (v23 >= 2) {
            break;
          }
          if (v22 + 21 > v9)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            unsigned int v37 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67110144;
              *(_DWORD *)&uint8_t buf[4] = v46;
              *(_WORD *)&uint8_t buf[8] = 2048;
              *(void *)&buf[10] = v22;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 21;
              *(_WORD *)&buf[24] = 2048;
              *(void *)&buf[26] = 4;
              *(_WORD *)&buf[34] = 2048;
              unint64_t v51 = v9;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "#eph,xtraVersion,%u,failed reading fileOffset,%zu,kXtraBroadcastEphemerisFileSizeOffset,%u,sizeof(bufferFileSize),%zu,tot,%zu", buf, 0x2Cu);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_137;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              goto LABEL_146;
            }
            goto LABEL_89;
          }
          unsigned int v24 = bswap32(*(_DWORD *)&v48[v22 + 17]);
          if (v48[v22]) {
            unsigned int v25 = v24;
          }
          else {
            unsigned int v25 = *(_DWORD *)&v48[v22 + 17];
          }
          if (!v25)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            unint64_t v38 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v46;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "#eph,xtraVersion,%u,fileSize is zero", buf, 8u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_137;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              goto LABEL_146;
            }
            goto LABEL_89;
          }
          unint64_t v26 = v22 + v25;
          if (v26 > v9)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            uint64_t v39 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 67109888;
              *(_DWORD *)&uint8_t buf[4] = v46;
              *(_WORD *)&uint8_t buf[8] = 2048;
              *(void *)&buf[10] = v22;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v25;
              *(_WORD *)&buf[24] = 2048;
              *(void *)&buf[26] = v9;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "#eph,xtraVersion,%u,xtra eph file incomplete,fileOffset,%zu,fileSize,%u,tot,%zu", buf, 0x22u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_137;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              goto LABEL_146;
            }
            goto LABEL_89;
          }
          uint64_t v27 = v22 + 25;
          if (v48[v22])
          {
            unsigned int v28 = bswap32(*(unsigned __int16 *)&v48[v27]) >> 16;
            unsigned int v29 = bswap32(*(_DWORD *)&v48[v22 + 27]);
          }
          else
          {
            unsigned int v28 = *(unsigned __int16 *)&v48[v27];
            unsigned int v29 = *(_DWORD *)&v48[v22 + 27];
          }
          int v30 = v48[v22 + 31];
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344208);
          }
          CFAbsoluteTime v31 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67110400;
            *(_DWORD *)&uint8_t buf[4] = v46;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v28;
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&uint8_t buf[16] = v29;
            *(_WORD *)&buf[20] = 1024;
            *(_DWORD *)&buf[22] = v25;
            *(_WORD *)&buf[26] = 2048;
            *(void *)&buf[28] = v22;
            LOWORD(v51) = 1024;
            *(_DWORD *)((char *)&v51 + 2) = v30;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "#eph,xtraVersion,%u,fileGpsWeek,%u,fileGpsMs,%u,fileSize,%d,fileOffset,%zu,providerId,%d", buf, 0x2Au);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344208);
            }
            unsigned int v32 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v32);
            if (v32 != buf) {
              free(v32);
            }
          }
          ++v21;
          v22 += v25;
          int v8 = v47;
          if (v26 >= v9)
          {
            int v40 = v21;
            uint64_t v17 = &qword_102419000;
            goto LABEL_131;
          }
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344208);
        }
        unint64_t v36 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v46;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v23;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#eph,xtraVersion,%u,failed reading byteOrder,%u", buf, 0xEu);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_137;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          goto LABEL_146;
        }
        goto LABEL_89;
      }
    }
    else
    {
LABEL_57:
      if (v9) {
        goto LABEL_58;
      }
    }
    int v40 = 0;
LABEL_131:
    if (v17[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    unint64_t v43 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#eph,file check successful,num_constellations,%{public}d,injecting XTRA eph file", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      unint64_t v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)", "%s\n", v44);
      if (v44 != buf) {
        free(v44);
      }
      int v8 = v47;
    }
    sub_1018ACFD8(v45, (uint64_t)v48, v9);
    goto LABEL_137;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344208);
  }
  unsigned int v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v15 = (const char *)a2;
    }
    else {
      uint64_t v15 = *(const char **)a2;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#eph,couldn't open %s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_41;
    }
    goto LABEL_144;
  }
}

void sub_1018AEDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, FILE *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
}

uint64_t sub_1018AEE34(uint64_t a1, char a2, int a3, uint64_t a4, char a5)
{
  char v9 = a2;
  int v8 = a3;
  char v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, char *, int *, uint64_t, char *))(*(void *)v5 + 48))(v5, &v9, &v8, a4, &v7);
}

void sub_1018AEE98(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

FILE *sub_1018AEEC8(FILE *result)
{
  if (result)
  {
    int v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Closing fp", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)::(anonymous class)::operator()(FILE *) const", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return (FILE *)fclose(v1);
  }
  return result;
}

FILE *sub_1018AF068(FILE *result)
{
  if (result)
  {
    int v1 = result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#eph,Closing fp", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)::(anonymous class)::operator()(FILE *) const", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    return (FILE *)fclose(v1);
  }
  return result;
}

uint64_t sub_1018AF208(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1018AF2A4()
{
}

void *sub_1018AF2B8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_102344238;
  return result;
}

void sub_1018AF2F0(uint64_t a1, void *a2)
{
  *a2 = off_102344238;
}

void sub_1018AF318(uint64_t a1, void **a2)
{
  int v2 = *a2;
  if (*a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Freeing buff", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLXtraInjector::injectXtraDataFromFile(const std::string &, int, BOOL)::(anonymous class)::operator()(char *) const", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    free(v2);
  }
}

uint64_t sub_1018AF4B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018AF4F8()
{
}

void *sub_1018AF504(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1018AF588(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_1018AF608(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)sub_1018AF638((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t sub_1018AF638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_1018AF690()
{
}

void *sub_1018AF6A4()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1023442C8;
  return result;
}

void sub_1018AF6DC(uint64_t a1, void *a2)
{
  *a2 = off_1023442C8;
}

void sub_1018AF704(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344208);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#eph,freeing buffer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344208);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLXtraInjector::injectXtraBroadcastEphemerisDataFromFile(const std::string &, int)::(anonymous class)::operator()(char *) const", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    free(v2);
  }
}

uint64_t sub_1018AF8A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018AF8E4()
{
}

int *sub_1018AF8F0(int *a1, uint64_t a2)
{
  *a1 = 0;
  *(void *)(a1 + 1) = 0x100000015;
  *((unsigned char *)a1 + 12) = 0;
  sub_100103240();
  int v4 = sub_10010145C();
  int v5 = v4;
  *a1 = 0;
  if (*(unsigned char *)(a2 + 7))
  {
    *a1 = 5;
    if (*(_DWORD *)(a2 + 64))
    {
      if (!v4)
      {
        *(void *)a1 = 0x150000000FLL;
        char v7 = (_DWORD *)(a2 + 16);
        if (!*(_DWORD *)(a2 + 16)) {
          goto LABEL_25;
        }
        goto LABEL_21;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102344338);
      }
      int v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "cannot enable MSA on watch", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102344338);
        }
        double v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaNilr::PositionModes::PositionModes(const CLEmergencyController::LocationSettings &)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
    }
  }
  a1[1] = 21;
  char v7 = (_DWORD *)(a2 + 16);
  if (!*(_DWORD *)(a2 + 16)) {
    goto LABEL_25;
  }
  if (v5)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102344338);
    }
    int v8 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "cannot enable MSA on watch", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102344338);
      }
      char v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaNilr::PositionModes::PositionModes(const CLEmergencyController::LocationSettings &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    goto LABEL_25;
  }
LABEL_21:
  uint64_t v10 = 0;
  *(_OWORD *)buf = xmmword_101E45200;
  uint64_t v22 = 0x200000004;
  int v11 = 21;
  do
  {
    uint64_t v12 = *(void *)&buf[v10];
    if ((*v7 & v12) != 0)
    {
      v11 |= HIDWORD(v12);
      a1[1] = v11;
    }
    v10 += 8;
  }
  while (v10 != 24);
LABEL_25:
  if (*(unsigned char *)(a2 + 7) && (*(unsigned char *)a1 & 5) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102344338);
    }
    int8x16_t v13 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v14 = *a1;
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = 5;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "supl support expected at least, 0x%{public}x, found 0x%{public}x", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102344338);
      }
      BOOL v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaNilr::PositionModes::PositionModes(const CLEmergencyController::LocationSettings &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  if ((a1[1] & 0x15) == 0)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102344338);
    }
    uint64_t v15 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_ERROR))
    {
      int v16 = a1[1];
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = 21;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "cp support expected at least, 0x%{public}x, found 0x%{public}x", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102344338);
      }
      __int16 v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaNilr::PositionModes::PositionModes(const CLEmergencyController::LocationSettings &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  return a1;
}

void sub_1018AFF8C(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1018AFFBC(uint64_t a1)
{
  uint64_t v1 = a1;
  operator new();
}

void sub_1018B0178(_Unwind_Exception *a1)
{
}

void sub_1018B0188()
{
  sub_1017C7BE4(v0);
  JUMPOUT(0x1018B0194);
}

uint64_t **sub_1018B019C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v18 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    int v4 = a4;
    int v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1018B2FA8(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102344358);
LABEL_3:
  int v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    uint64_t v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    sub_1018B2D14(v7, __p);
    if (SBYTE3(v23) >= 0) {
      int v11 = __p;
    }
    else {
      int v11 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v25 = 1024;
    unsigned int v26 = v7;
    __int16 v27 = 2080;
    unsigned int v28 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v23) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
    int8x16_t v13 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      int8x16_t v13 = (void *)*v13;
    }
    sub_1018B2D14(v7, v16);
    if (v17 >= 0) {
      int v14 = v16;
    }
    else {
      int v14 = (void **)v16[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v13;
    __int16 v20 = 1024;
    unsigned int v21 = v7;
    __int16 v22 = 2080;
    unsigned int v23 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssIratState>::setStateHandler(State, StateHandler) [T = CLEurekaGnssIratState]", "%s\n", v15);
    if (v15 != buf) {
      free(v15);
    }
  }
  *(void *)buf = &v18;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v18, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_1018B046C(uint64_t a1, unsigned int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0u:
      sub_1018B1350(a1, 1);
      goto LABEL_11;
    case 2u:
      uint64_t result = 1;
      break;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
    case 9u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v5 = qword_1024193D8;
      BOOL v6 = os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v6)
      {
        sub_1018B1464(a2, __p);
        if (v9 >= 0) {
          unsigned int v7 = __p;
        }
        else {
          unsigned int v7 = (void **)__p[0];
        }
        *(_DWORD *)buf = 68289282;
        int v11 = 0;
        __int16 v12 = 2082;
        int8x16_t v13 = "";
        __int16 v14 = 2082;
        uint64_t v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
LABEL_11:
        uint64_t result = 0;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1018B060C(uint64_t a1, unsigned int a2)
{
  switch(a2)
  {
    case 0u:
      sub_1018B1350(a1, 3);
      sub_1018B1490(a1, 6, 300.0);
      return 1;
    case 1u:
      sub_1017C7CD4(a1, 6);
      return 1;
    case 2u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      sub_100134750(__p, "Engage");
      if (v8 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      break;
    case 3u:
      return 0;
    case 4u:
      return 2;
    case 5u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      sub_100134750(__p, "LpmTrigger");
      if (v8 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      break;
    case 6u:
      return 3;
    case 7u:
      return 4;
    case 8u:
    case 9u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 1;
      }
      sub_1018B1464(a2, __p);
      if (v8 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      break;
    default:
      return 1;
  }
  *(_DWORD *)buf = 68289282;
  int v10 = 0;
  __int16 v11 = 2082;
  __int16 v12 = "";
  __int16 v13 = 2082;
  __int16 v14 = v5;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

uint64_t sub_1018B0924(uint64_t a1, unsigned int a2)
{
  uint64_t result = 2;
  switch(a2)
  {
    case 0u:
      sub_1018B1490(a1, 5, 60.0);
      return 2;
    case 1u:
      sub_1017C7CD4(a1, 5);
      return 2;
    case 2u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v5 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 2;
      }
      sub_100134750(__p, "Engage");
      if (v8 >= 0) {
        BOOL v6 = __p;
      }
      else {
        BOOL v6 = (void **)__p[0];
      }
      break;
    case 3u:
      return 0;
    case 5u:
      return 3;
    case 6u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v5 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 2;
      }
      sub_100134750(__p, "NoFix");
      if (v8 >= 0) {
        BOOL v6 = __p;
      }
      else {
        BOOL v6 = (void **)__p[0];
      }
      break;
    case 7u:
      return 4;
    case 8u:
    case 9u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v5 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 2;
      }
      sub_1018B1464(a2, __p);
      if (v8 >= 0) {
        BOOL v6 = __p;
      }
      else {
        BOOL v6 = (void **)__p[0];
      }
      break;
    default:
      return result;
  }
  *(_DWORD *)buf = 68289282;
  int v10 = 0;
  __int16 v11 = 2082;
  __int16 v12 = "";
  __int16 v13 = 2082;
  __int16 v14 = v6;
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return 2;
}

uint64_t sub_1018B0C2C(uint64_t a1, unsigned int a2)
{
  uint64_t result = 3;
  switch(a2)
  {
    case 0u:
      sub_1018B1350(a1, 2);
      return 3;
    case 2u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v5 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 3;
      }
      sub_100134750(__p, "Engage");
      if (v8 >= 0) {
        BOOL v6 = __p;
      }
      else {
        BOOL v6 = (void **)__p[0];
      }
      break;
    case 3u:
      return 0;
    case 5u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v5 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 3;
      }
      sub_100134750(__p, "LpmTrigger");
      if (v8 >= 0) {
        BOOL v6 = __p;
      }
      else {
        BOOL v6 = (void **)__p[0];
      }
      break;
    case 6u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v5 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 3;
      }
      sub_100134750(__p, "NoFix");
      if (v8 >= 0) {
        BOOL v6 = __p;
      }
      else {
        BOOL v6 = (void **)__p[0];
      }
      break;
    case 7u:
      return 4;
    case 8u:
    case 9u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v5 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 3;
      }
      sub_1018B1464(a2, __p);
      if (v8 >= 0) {
        BOOL v6 = __p;
      }
      else {
        BOOL v6 = (void **)__p[0];
      }
      break;
    default:
      return result;
  }
  *(_DWORD *)buf = 68289282;
  int v10 = 0;
  __int16 v11 = 2082;
  __int16 v12 = "";
  __int16 v13 = 2082;
  __int16 v14 = v6;
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return 3;
}

uint64_t sub_1018B0FB8(uint64_t a1, int a2)
{
  uint64_t result = 4;
  switch(a2)
  {
    case 1:
      sub_1017C7CD4(a1, 9);
      return 4;
    case 2:
      return 1;
    case 4:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 4;
      }
      sub_100134750(__p, "Fix");
      if (v7 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      break;
    case 5:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 4;
      }
      sub_100134750(__p, "LpmTrigger");
      if (v7 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      break;
    case 6:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 4;
      }
      sub_100134750(__p, "NoFix");
      if (v7 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      break;
    case 7:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v4 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        return 4;
      }
      sub_100134750(__p, "Disconnected");
      if (v7 >= 0) {
        int v5 = __p;
      }
      else {
        int v5 = (void **)__p[0];
      }
      break;
    case 8:
      sub_1018B1490(a1, 9, 2.0);
      return 4;
    case 9:
      return 0;
    default:
      return result;
  }
  *(_DWORD *)buf = 68289282;
  int v9 = 0;
  __int16 v10 = 2082;
  __int16 v11 = "";
  __int16 v12 = 2082;
  __int16 v13 = v5;
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#irat,GnssIratAssertion,invalid event\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 4;
}

id sub_1018B1350(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344358);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    char v8 = "";
    __int16 v9 = 1026;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#irat,gnssAssert\", \"assertion\":%{public}d}", (uint8_t *)v6, 0x18u);
  }
  return [((*(id *)(a1 + 128))).vendor.proxyForService:@"CLTelephonyService" assertCommCenter:1 with:a2];
}

void *sub_1018B1464@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 9) {
    uint64_t v2 = "EventUnknown";
  }
  else {
    uint64_t v2 = off_1023443D8[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_1018B1490(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  int v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
    unsigned int v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v33 = (void *)*v33;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      unsigned int v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unsigned int v37 = (void *)*v37;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v37;
      unint64_t v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaGnssIratState>::setTimeoutEvent(Event, double) [T = CLEurekaGnssIratState]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
    __int16 v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
    }
    CFAbsoluteTime v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
    }
    unint64_t v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
    __int16 v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      char v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        char v8 = (void *)*v8;
      }
      sub_1018B1464(a2, __p);
      if (v49 >= 0) {
        __int16 v9 = __p;
      }
      else {
        __int16 v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      int v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v10 = (void *)*v10;
      }
      sub_1018B1464(a2, v42);
      if (v45 >= 0) {
        __int16 v11 = v42;
      }
      else {
        __int16 v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      int v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaGnssIratState>::setTimeoutEvent(Event, double) [T = CLEurekaGnssIratState]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        char v17 = (uint64_t *)v13;
      }
      else {
        char v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      int v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344358);
        }
        unsigned int v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          unsigned int v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            unsigned int v23 = (void *)*v23;
          }
          sub_1018B1464(v41, __p);
          if (v49 >= 0) {
            unsigned int v24 = __p;
          }
          else {
            unsigned int v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344358);
          }
          __int16 v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v25 = (void *)*v25;
          }
          sub_1018B1464(v41, v42);
          if (v45 >= 0) {
            unsigned int v26 = v42;
          }
          else {
            unsigned int v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          int v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          __int16 v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaGnssIratState>::setTimeoutEvent(Event, double) [T = CLEurekaGnssIratState]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  BOOL v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    int v18 = v19;
    *(void *)buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1018B2DF4;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344358);
  }
  __int16 v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    unsigned int v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      unsigned int v28 = (void *)*v28;
    }
    sub_1018B1464(a2, buf);
    if (buf[23] >= 0) {
      unsigned int v29 = buf;
    }
    else {
      unsigned int v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    int v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_1018B1464(a2, __p);
    if (v49 >= 0) {
      CFAbsoluteTime v31 = __p;
    }
    else {
      CFAbsoluteTime v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)unsigned int v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    unint64_t v44 = v31;
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

uint64_t sub_1018B1F7C(uint64_t a1)
{
  return sub_1018B1F84(a1, 2);
}

uint64_t sub_1018B1F84(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v85 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_1018B3124();
    goto LABEL_157;
  }
  uint64_t v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_1018B3294(qword_1024193D0 == -1);
    goto LABEL_157;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344358);
  }
  int v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    __int16 v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v7 = (void *)*v7;
    }
    sub_1018B2D14(*(_DWORD *)(a1 + 4), __p);
    int v8 = SHIBYTE(v89);
    __int16 v9 = *(unsigned char **)__p;
    sub_1018B1464(a2, v96);
    int v10 = __p;
    if (v8 < 0) {
      int v10 = v9;
    }
    if (v99 >= 0) {
      __int16 v11 = v96;
    }
    else {
      __int16 v11 = *(unsigned char **)v96;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v92 = 2080;
    v93 = v10;
    __int16 v94 = 2080;
    unsigned int v95 = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    uint64_t v3 = &qword_102419000;
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
    int v58 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v58 = (void *)*v58;
    }
    sub_1018B2D14(*(_DWORD *)(a1 + 4), v96);
    int v59 = v99;
    uint64_t v60 = *(unsigned char **)v96;
    sub_1018B1464(a2, v83);
    unsigned int v61 = v96;
    if (v59 < 0) {
      unsigned int v61 = v60;
    }
    if (v84 >= 0) {
      unsigned int v62 = v83;
    }
    else {
      unsigned int v62 = (void **)v83[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v58;
    __int16 v87 = 2080;
    unsigned int v88 = v61;
    __int16 v89 = 2080;
    __int16 v90 = v62;
    __int16 v63 = (char *)_os_log_send_and_compose_impl();
    if (v84 < 0) {
      operator delete(v83[0]);
    }
    uint64_t v3 = &qword_102419000;
    if (v99 < 0) {
      operator delete(*(void **)v96);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v63);
    if (v63 != buf) {
      free(v63);
    }
  }
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    goto LABEL_28;
  }
  uint64_t v13 = (uint64_t **)(a1 + 8);
  int v14 = *(_DWORD *)(a1 + 4);
  uint64_t v15 = a1 + 16;
  do
  {
    int v16 = *(_DWORD *)(v12 + 32);
    BOOL v17 = v16 < v14;
    if (v16 >= v14) {
      int v18 = (uint64_t *)v12;
    }
    else {
      int v18 = (uint64_t *)(v12 + 8);
    }
    if (!v17) {
      uint64_t v15 = v12;
    }
    uint64_t v12 = *v18;
  }
  while (*v18);
  if (v15 == a1 + 16 || v14 < *(_DWORD *)(v15 + 32))
  {
LABEL_28:
    sub_1018B3410();
    goto LABEL_157;
  }
  BOOL v19 = *(uint64_t (**)(void *, uint64_t))(v15 + 40);
  uint64_t v20 = *(void *)(v15 + 48);
  unsigned int v21 = (void *)(*(void *)(a1 + 32) + (v20 >> 1));
  if (v20) {
    BOOL v19 = *(uint64_t (**)(void *, uint64_t))(*v21 + v19);
  }
  uint64_t v22 = v19(v21, a2);
  uint64_t v23 = v22;
  int v82 = v22;
  if (a2 <= 1 && v22 != v85)
  {
    sub_1018B3860();
    goto LABEL_157;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
    unsigned int v24 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        __int16 v25 = (void *)*v25;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      unsigned int v67 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unsigned int v67 = (void *)*v67;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v67;
      unsigned int v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v68);
      if (v68 != buf) {
        free(v68);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344358);
  }
  unsigned int v26 = qword_1024193D8;
  os_log_type_t v27 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v27))
  {
    unsigned int v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      unsigned int v28 = (void *)*v28;
    }
    sub_1018B2D14(v23, buf);
    if (v94 >= 0) {
      unsigned int v29 = buf;
    }
    else {
      unsigned int v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v87 = 2080;
    unsigned int v88 = v29;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
    int v64 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v64 = (void *)*v64;
    }
    sub_1018B2D14(v23, __p);
    if (v89 >= 0) {
      unsigned int v65 = __p;
    }
    else {
      unsigned int v65 = *(unsigned char **)__p;
    }
    *(_DWORD *)v96 = 136315394;
    *(void *)&v96[4] = v64;
    __int16 v97 = 2080;
    unsigned int v98 = v65;
    unsigned int v66 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v89) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v66);
    if (v66 != buf) {
      free(v66);
    }
  }
  if (v23 != v85)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
    int v30 = qword_1024193D8;
    os_log_type_t v31 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v31))
    {
      unsigned int v32 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unsigned int v32 = (void *)*v32;
      }
      sub_1018B2D14(v85, __p);
      int v33 = v3;
      int v34 = SHIBYTE(v89);
      CFAbsoluteTime v35 = *(unsigned char **)__p;
      sub_100134750(v96, "Exit");
      unint64_t v36 = __p;
      if (v34 < 0) {
        unint64_t v36 = v35;
      }
      if (v99 >= 0) {
        unsigned int v37 = v96;
      }
      else {
        unsigned int v37 = *(unsigned char **)v96;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v32;
      __int16 v92 = 2080;
      v93 = v36;
      __int16 v94 = 2080;
      unsigned int v95 = v37;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%soldState,%s,event,%s", buf, 0x20u);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      uint64_t v3 = v33;
      if (SHIBYTE(v89) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      unsigned int v69 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unsigned int v69 = (void *)*v69;
      }
      sub_1018B2D14(v85, v96);
      unsigned int v70 = v3;
      int v71 = v99;
      int v72 = *(unsigned char **)v96;
      sub_100134750(v83, "Exit");
      __int16 v73 = v96;
      if (v71 < 0) {
        __int16 v73 = v72;
      }
      if (v84 >= 0) {
        unsigned int v74 = v83;
      }
      else {
        unsigned int v74 = (void **)v83[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v69;
      __int16 v87 = 2080;
      unsigned int v88 = v73;
      __int16 v89 = 2080;
      __int16 v90 = v74;
      int v75 = (char *)_os_log_send_and_compose_impl();
      if (v84 < 0) {
        operator delete(v83[0]);
      }
      uint64_t v3 = v70;
      uint64_t v13 = (uint64_t **)(a1 + 8);
      if (v99 < 0) {
        operator delete(*(void **)v96);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v75);
      if (v75 != buf) {
        free(v75);
      }
    }
    uint64_t v38 = *(void *)(a1 + 32);
    *(void *)buf = &v85;
    uint64_t v39 = sub_1000C5658(v13, (int *)&v85, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    unsigned int v40 = v39[5];
    uint64_t v41 = (uint64_t)v39[6];
    unsigned int v42 = (void *)(v38 + (v41 >> 1));
    if (v41) {
      unsigned int v40 = *(uint64_t **)(*v42 + v40);
    }
    int v43 = ((uint64_t (*)(void *, uint64_t))v40)(v42, 1);
    if (v43 == v85)
    {
      *(_DWORD *)(a1 + 4) = v23;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344358);
      }
      unint64_t v44 = qword_1024193D8;
      os_log_type_t v45 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v45))
      {
        int v46 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          int v46 = (void *)*v46;
        }
        sub_1018B2D14(v23, __p);
        __int16 v47 = v3;
        int v48 = SHIBYTE(v89);
        __int16 v49 = *(unsigned char **)__p;
        sub_100134750(v96, "Enter");
        double v50 = __p;
        if (v48 < 0) {
          double v50 = v49;
        }
        if (v99 >= 0) {
          unint64_t v51 = v96;
        }
        else {
          unint64_t v51 = *(unsigned char **)v96;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v46;
        __int16 v92 = 2080;
        v93 = v50;
        __int16 v94 = 2080;
        unsigned int v95 = v51;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%snewState,%s,event,%s", buf, 0x20u);
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        uint64_t v3 = v47;
        if (SHIBYTE(v89) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344358);
        }
        int v76 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          int v76 = (void *)*v76;
        }
        sub_1018B2D14(v23, v96);
        int v77 = v99;
        int v78 = *(unsigned char **)v96;
        sub_100134750(v83, "Enter");
        __int16 v79 = v96;
        if (v77 < 0) {
          __int16 v79 = v78;
        }
        if (v84 >= 0) {
          int v80 = v83;
        }
        else {
          int v80 = (void **)v83[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v76;
        __int16 v87 = 2080;
        unsigned int v88 = v79;
        __int16 v89 = 2080;
        __int16 v90 = v80;
        __int16 v81 = (char *)_os_log_send_and_compose_impl();
        if (v84 < 0) {
          operator delete(v83[0]);
        }
        if (v99 < 0) {
          operator delete(*(void **)v96);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaGnssIratState>::handleEvent(Event) [T = CLEurekaGnssIratState]", "%s\n", v81);
        if (v81 != buf) {
          free(v81);
        }
      }
      uint64_t v52 = *(void *)(a1 + 32);
      *(void *)buf = &v82;
      unsigned int v53 = sub_1000C5658(v13, &v82, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      unsigned int v54 = v53[5];
      uint64_t v55 = (uint64_t)v53[6];
      unsigned int v56 = (void *)(v52 + (v55 >> 1));
      if (v55) {
        unsigned int v54 = *(uint64_t **)(*v56 + v54);
      }
      uint64_t v23 = ((uint64_t (*)(void *, void))v54)(v56, 0);
      if (v23 == v82) {
        goto LABEL_89;
      }
      sub_1018B3580();
    }
    else
    {
      sub_1018B36F0();
    }
LABEL_157:
    __break(1u);
  }
LABEL_89:
  --*(_DWORD *)(a1 + 88);
  return v23;
}

void sub_1018B2C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018B2CF4(uint64_t a1)
{
  return sub_1018B1F84(a1, 4);
}

uint64_t sub_1018B2CFC(uint64_t a1)
{
  return sub_1018B1F84(a1, 3);
}

uint64_t sub_1018B2D04(uint64_t a1)
{
  return sub_1018B1F84(a1, 7);
}

uint64_t sub_1018B2D0C(uint64_t a1)
{
  return sub_1018B1F84(a1, 8);
}

void *sub_1018B2D14@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 4) {
    uint64_t v2 = "StateUnknown";
  }
  else {
    uint64_t v2 = off_102344428[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_1018B2D40(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018B2D74(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1018B2DB0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1018B2DF4(uint64_t a1)
{
  return sub_1018B1F84(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_1018B2E04()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344358);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v0, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fUniverse should not be null", "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344358);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v1, 0x26u);
  }
}

#error "1018B301C: call analysis failed (funcsize=76)"

#error "1018B31A0: call analysis failed (funcsize=73)"

#error "1018B3308: call analysis failed (funcsize=76)"

#error "1018B348C: call analysis failed (funcsize=73)"

#error "1018B35FC: call analysis failed (funcsize=73)"

#error "1018B376C: call analysis failed (funcsize=73)"

#error "1018B38DC: call analysis failed (funcsize=73)"

const char **sub_1018B39D0(const char **a1, const char *a2)
{
  *a1 = "com.apple.locationd.Gnss.XoCalib";
  a1[1] = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344480);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    int v13 = 0;
    __int16 v14 = 2082;
    uint64_t v15 = "";
    __int16 v16 = 1026;
    int v17 = 172800;
    __int16 v18 = 1026;
    int v19 = 60;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#xo XoCalib instantiated\", \"intervalBetweenCalibration\":%{public}d, \"durationOfCalibration\":%{public}d}", buf, 0x1Eu);
  }
  if (!a1[1]) {
    sub_1018B458C(qword_1024193D0 == -1);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344480);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "fCallbackqueue created", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344480);
    }
    __int16 v11 = 0;
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaXoCalib::CLEurekaXoCalib(id<CLIntersiloUniverse>)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  if (v5)
  {
    os_log_type_t v6 = v5;
    xpc_dictionary_set_int64(v5, XPC_ACTIVITY_INTERVAL, 172800);
    xpc_dictionary_set_string(v6, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v6, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    __int16 v7 = *a1;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3321888768;
    handler[2] = sub_1018B3CEC;
    handler[3] = &unk_102344450;
    handler[4] = a1;
    xpc_activity_register(v7, v6, handler);
    xpc_release(v6);
  }
  return a1;
}

void sub_1018B3CEC(uint64_t a1, _xpc_activity_s *a2)
{
}

uint64_t sub_1018B3CF4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

const char **sub_1018B3D08(const char **a1)
{
  return a1;
}

void sub_1018B3D38(uint64_t *a1, xpc_activity_t activity)
{
  if (activity)
  {
    xpc_activity_state_t state = xpc_activity_get_state(activity);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344480);
    }
    xpc_object_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *a1;
      int v21 = 68289538;
      int v22 = 0;
      __int16 v23 = 2082;
      unsigned int v24 = "";
      __int16 v25 = 2082;
      uint64_t v26 = v6;
      __int16 v27 = 1026;
      int v28 = state;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#xo process_Activity\", \"xpcClient\":%{public, location:escape_only}s, \"state\":%{public}d}", (uint8_t *)&v21, 0x22u);
    }
    if (state)
    {
      if (state == 2)
      {
        sub_1018B41F8((uint64_t)a1);
        if (!xpc_activity_set_state(activity, 5))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344480);
          }
          __int16 v7 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
          {
            uint64_t v8 = *a1;
            int v21 = 68289538;
            int v22 = 0;
            __int16 v23 = 2082;
            unsigned int v24 = "";
            __int16 v25 = 2082;
            uint64_t v26 = v8;
            __int16 v27 = 1026;
            int v28 = 2;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#xo,failedToSetState\", \"xpcClient\":%{public, location:escape_only}s, \"state\":%{public}d}", (uint8_t *)&v21, 0x22u);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102344480);
            }
          }
          uint64_t v9 = qword_1024193D8;
          if (os_signpost_enabled((os_log_t)qword_1024193D8))
          {
            uint64_t v10 = *a1;
            int v21 = 68289538;
            int v22 = 0;
            __int16 v23 = 2082;
            unsigned int v24 = "";
            __int16 v25 = 2082;
            uint64_t v26 = v10;
            __int16 v27 = 1026;
            int v28 = 2;
            __int16 v11 = "#xo,failedToSetState";
            uint64_t v12 = "{\"msg%{public}.0s\":\"#xo,failedToSetState\", \"xpcClient\":%{public, location:escape_only}s, \"state\":%{public}d}";
            int v13 = v9;
LABEL_30:
            uint32_t v16 = 34;
            goto LABEL_31;
          }
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344480);
        }
        int v17 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v18 = *a1;
          int v21 = 68289538;
          int v22 = 0;
          __int16 v23 = 2082;
          unsigned int v24 = "";
          __int16 v25 = 2082;
          uint64_t v26 = v18;
          __int16 v27 = 1026;
          int v28 = state;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#xo,unexpectedXpcActivity\", \"xpcClient\":%{public, location:escape_only}s, \"state\":%{public}d}", (uint8_t *)&v21, 0x22u);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344480);
          }
        }
        uint64_t v19 = qword_1024193D8;
        if (os_signpost_enabled((os_log_t)qword_1024193D8))
        {
          uint64_t v20 = *a1;
          int v21 = 68289538;
          int v22 = 0;
          __int16 v23 = 2082;
          unsigned int v24 = "";
          __int16 v25 = 2082;
          uint64_t v26 = v20;
          __int16 v27 = 1026;
          int v28 = state;
          __int16 v11 = "#xo,unexpectedXpcActivity";
          uint64_t v12 = "{\"msg%{public}.0s\":\"#xo,unexpectedXpcActivity\", \"xpcClient\":%{public, location:escape_only}s, \"st"
                "ate\":%{public}d}";
          int v13 = v19;
          goto LABEL_30;
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344480);
    }
    __int16 v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v21 = 68289026;
      int v22 = 0;
      __int16 v23 = 2082;
      unsigned int v24 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#xo,activity is nil\"}", (uint8_t *)&v21, 0x12u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344480);
      }
    }
    uint64_t v15 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      int v21 = 68289026;
      int v22 = 0;
      __int16 v23 = 2082;
      unsigned int v24 = "";
      __int16 v11 = "#xo,activity is nil";
      uint64_t v12 = "{\"msg%{public}.0s\":\"#xo,activity is nil\"}";
      int v13 = v15;
      uint32_t v16 = 18;
LABEL_31:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v11, v12, (uint8_t *)&v21, v16);
    }
  }
}

void sub_1018B41F8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 8) silo].queue;
  if (v2)
  {
    uint64_t v3 = v2;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1018B4430;
    block[3] = &unk_1022A3020;
    block[4] = a1;
    dispatch_async(v2, block);
    dispatch_time_t v4 = dispatch_time(0, 60000000000);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1018B4550;
    v7[3] = &unk_1022A3020;
    unsigned char v7[4] = a1;
    dispatch_after(v4, v3, v7);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344480);
    }
    xpc_object_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"callbackQueue is null, cannot schedule XO calibration\"}", buf, 0x12u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344480);
      }
    }
    uint64_t v6 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)buf = 68289026;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "callbackQueue is null, cannot schedule XO calibration", "{\"msg%{public}.0s\":\"callbackQueue is null, cannot schedule XO calibration\"}", buf, 0x12u);
    }
  }
}

id sub_1018B4430(uint64_t a1)
{
  return sub_1018B443C(*(void *)(a1 + 32), 3);
}

id sub_1018B443C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344480);
  }
  dispatch_time_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 1026;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#xo,assertCommCenter\", \"level\":%{public}d}", (uint8_t *)v6, 0x18u);
  }
  return [(((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)
}

id sub_1018B4550(uint64_t a1)
{
  return sub_1018B443C(*(void *)(a1 + 32), 1);
}

void sub_1018B455C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018B458C(char a1)
{
  if ((a1 & 1) == 0) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v1 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344480);
      }
    }
    uint64_t v2 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "fUniverse should not be null", "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344480);
      }
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"fUniverse should not be null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_102344480);
  }
}

void sub_1018B4754(int *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100134750(&v45, ",,");
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v4 = *a1;
  switch(*a1)
  {
    case 0:
      std::string::assign((std::string *)a2, "UNK,");
      goto LABEL_70;
    case 1:
      std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
      __int16 v9 = std::string::insert(&v43, 0, "GPS,");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if ((v47 & 0x80u) == 0) {
        __int16 v7 = (const std::string::value_type *)&v45;
      }
      else {
        __int16 v7 = v45;
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v8 = v47;
      }
      else {
        std::string::size_type v8 = v46;
      }
      goto LABEL_63;
    case 2:
      std::to_string(&v41, *((unsigned __int8 *)a1 + 4));
      __int16 v11 = std::string::insert(&v41, 0, "GLO,");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      int v13 = std::string::append(&v42, ",");
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v40, *((char *)a1 + 6));
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v15 = &v40;
      }
      else {
        uint64_t v15 = (std::string *)v40.__r_.__value_.__r.__words[0];
      }
      if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v40.__r_.__value_.__l.__size_;
      }
      int v17 = std::string::append(&v48, (const std::string::value_type *)v15, size);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v43, ",");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v39, *((unsigned __int8 *)a1 + 5));
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = &v39;
      }
      else {
        int v21 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v39.__r_.__value_.__l.__size_;
      }
      __int16 v23 = std::string::append(&v44, (const std::string::value_type *)v21, v22);
      std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
      v49[0] = v23->__r_.__value_.__l.__size_;
      *(void *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
      char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      uint64_t v26 = v49[0];
      *(void *)a2 = v24;
      *(void *)(a2 + 8) = v26;
      *(void *)(a2 + 15) = *(void *)((char *)v49 + 7);
      *(unsigned char *)(a2 + 23) = v25;
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_70;
      }
      __int16 v27 = (void *)v41.__r_.__value_.__r.__words[0];
      goto LABEL_69;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_70;
    case 4:
      std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
      int v28 = std::string::insert(&v43, 0, "BDS,");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      if ((v47 & 0x80u) == 0) {
        __int16 v7 = (const std::string::value_type *)&v45;
      }
      else {
        __int16 v7 = v45;
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v8 = v47;
      }
      else {
        std::string::size_type v8 = v46;
      }
      goto LABEL_63;
    case 8:
      std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
      int v30 = std::string::insert(&v43, 0, "GAL,");
      long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v31;
      v30->__r_.__value_.__l.__size_ = 0;
      v30->__r_.__value_.__r.__words[2] = 0;
      v30->__r_.__value_.__r.__words[0] = 0;
      if ((v47 & 0x80u) == 0) {
        __int16 v7 = (const std::string::value_type *)&v45;
      }
      else {
        __int16 v7 = v45;
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v8 = v47;
      }
      else {
        std::string::size_type v8 = v46;
      }
      goto LABEL_63;
    default:
      if (v4 == 16)
      {
        std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
        unsigned int v32 = std::string::insert(&v43, 0, "QZSS,");
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((v47 & 0x80u) == 0) {
          __int16 v7 = (const std::string::value_type *)&v45;
        }
        else {
          __int16 v7 = v45;
        }
        if ((v47 & 0x80u) == 0) {
          std::string::size_type v8 = v47;
        }
        else {
          std::string::size_type v8 = v46;
        }
      }
      else
      {
        if (v4 != 32) {
          goto LABEL_70;
        }
        std::to_string(&v43, *((unsigned __int8 *)a1 + 4));
        xpc_object_t v5 = std::string::insert(&v43, 0, "NVC,");
        long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if ((v47 & 0x80u) == 0) {
          __int16 v7 = (const std::string::value_type *)&v45;
        }
        else {
          __int16 v7 = v45;
        }
        if ((v47 & 0x80u) == 0) {
          std::string::size_type v8 = v47;
        }
        else {
          std::string::size_type v8 = v46;
        }
      }
LABEL_63:
      int v34 = std::string::append(&v44, v7, v8);
      std::string::size_type v35 = v34->__r_.__value_.__r.__words[0];
      v48.__r_.__value_.__r.__words[0] = v34->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v34->__r_.__value_.__r.__words[1] + 7);
      char v36 = HIBYTE(v34->__r_.__value_.__r.__words[2]);
      v34->__r_.__value_.__l.__size_ = 0;
      v34->__r_.__value_.__r.__words[2] = 0;
      v34->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      std::string::size_type v37 = v48.__r_.__value_.__r.__words[0];
      *(void *)a2 = v35;
      *(void *)(a2 + 8) = v37;
      *(void *)(a2 + 15) = *(std::string::size_type *)((char *)v48.__r_.__value_.__r.__words + 7);
      *(unsigned char *)(a2 + 23) = v36;
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      {
        __int16 v27 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_69:
        operator delete(v27);
      }
LABEL_70:
      if (sub_100D68D30(a1)) {
        uint64_t v38 = ",valid";
      }
      else {
        uint64_t v38 = ",malformed";
      }
      std::string::append((std::string *)a2, v38);
      if ((char)v47 < 0) {
        operator delete(v45);
      }
      return;
  }
}

void sub_1018B4C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (*(char *)(v47 + 23) < 0) {
    operator delete(*(void **)v47);
  }
  if (*(char *)(v48 - 97) < 0) {
    operator delete(*(void **)(v48 - 120));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018B4DB0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102489178, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102489178))
  {
    byte_102489170 = sub_10073CE10();
    __cxa_guard_release(&qword_102489178);
  }
  return byte_102489170;
}

void sub_1018B4E0C(_Unwind_Exception *a1)
{
}

uint64_t sub_1018B4E24()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102489188, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102489188))
  {
    byte_102489180 = sub_1000FFEA4() ^ 1;
    __cxa_guard_release(&qword_102489188);
  }
  return byte_102489180;
}

void sub_1018B4E84(_Unwind_Exception *a1)
{
}

uint64_t sub_1018B4E9C(uint64_t a1, qmi::MessageBase *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v6 = 0;
  if (!sub_1018B4EE0(a1, a2, a3, a4, &v6)) {
    sub_1018B86F4(a1);
  }
  return v6;
}

BOOL sub_1018B4EE0(uint64_t a1, qmi::MessageBase *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  sub_10016BC44((uint64_t)&v159);
  if (!*(void *)(a1 + 32))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#gnssmeas,callback is null", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    LOWORD(v167) = 0;
    long long v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v12);
    goto LABEL_329;
  }
  if (*(unsigned char *)(a1 + 728) && v159 < *(double *)(a1 + 720))
  {
    LOBYTE(v167) = 0;
    sub_1017CC7D8(a2, 1, &v167);
    if ((_BYTE)v167)
    {
      if (*(unsigned char *)(a1 + 728))
      {
        if (BYTE1(v167) == 1 && v159 + 0.5 > *(double *)(a1 + 720))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023444A0);
          }
          long long v10 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#gnssmeas,clearing session start wait early based on seqNum", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023444A0);
            }
            LOWORD(v183) = 0;
            v123 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v123);
            if (v123 != (char *)buf) {
              free(v123);
            }
          }
          if (*(unsigned char *)(a1 + 728)) {
            *(unsigned char *)(a1 + 728) = 0;
          }
          goto LABEL_15;
        }
LABEL_68:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        std::string::size_type v24 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#gnssmeas,ignoring measurement indication that may be from previous session", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          return 1;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        LOWORD(v183) = 0;
        long long v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v12);
        goto LABEL_329;
      }
    }
    else if (*(unsigned char *)(a1 + 728))
    {
      goto LABEL_68;
    }
    sub_10020D700();
  }
LABEL_15:
  char v157 = 0;
  sub_1017CC7D8(a2, 47, &v157);
  if (v157 && v158 >= 2u)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    __int16 v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      if (!v157) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v158;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#Warning,ignoring measurement indication with subsequence number %{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    if (!v157) {
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    int v167 = 67240192;
    *(_DWORD *)v168 = v158;
    long long v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v12);
LABEL_329:
    if (v12 != (char *)buf) {
      free(v12);
    }
    return 1;
  }
  __int16 v156 = 0;
  if (!sub_1018B9F98(a1, a2, (BOOL *)&v156 + 1, (BOOL *)&v156)) {
    return 0;
  }
  v155[0] = 0;
  sub_1017CC7D8(a2, 3, v155);
  v153[0] = 0;
  sub_1017CC710(a2, 30, (uint64_t)v153);
  if (!v155[0] || !v153[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    __int16 v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#gnssmeas,system or signal type missing", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      LOWORD(v167) = 0;
      std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v22);
      goto LABEL_100;
    }
    return result;
  }
  int v14 = v155[1];
  if (sub_100740B14()) {
    unsigned int v15 = 7;
  }
  else {
    unsigned int v15 = 6;
  }
  if (v15 <= (v14 - 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    char v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#gnssmeas,bad gnssSystem,%{public}d", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      int v167 = 67240192;
      *(_DWORD *)v168 = v14;
      std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v22);
      goto LABEL_100;
    }
    return result;
  }
  if (!v153[0]) {
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  }
  int v16 = v154;
  int v17 = sub_1018B8BB8(v154);
  unsigned __int8 v152 = v17;
  if (!v17)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      if (!v153[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v154;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#gnssmeas,bad SignalType,%{public}u", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      if (!v153[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      int v167 = 67240192;
      *(_DWORD *)v168 = v154;
      std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v22);
      goto LABEL_100;
    }
    return result;
  }
  v190[0] = 0;
  sub_1018C2A98(a2, 16, v190);
  v150[0] = 0;
  sub_1017CC710(a2, 21, (uint64_t)v150);
  if (!v190[0] || !v150[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    __int16 v27 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#gnssmeas,hardware clock parsing failed", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_99:
      LOWORD(v167) = 0;
      std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v22);
LABEL_100:
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
LABEL_392:
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
    goto LABEL_99;
  }
  if (!HIBYTE(v156)) {
    goto LABEL_154;
  }
  if (!v192)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    int v28 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "#gnssmeas,rtc invalid", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_99;
    }
    goto LABEL_392;
  }
  if (v193 >= *(void *)(a1 + 536))
  {
    *(void *)(a1 + 536) = v193;
    unint64_t v29 = *(void *)(a1 + 544);
    if (v29 && v151 != *(_DWORD *)(a1 + 552))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      std::string v44 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        if (!v150[0]) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        int v45 = *(_DWORD *)(a1 + 552);
        uint64_t v46 = *(void *)(a1 + 544);
        *(_DWORD *)buf = 134349568;
        *(void *)&uint8_t buf[4] = v46;
        *(_WORD *)&unsigned char buf[12] = 1026;
        *(_DWORD *)&buf[14] = v45;
        *(_WORD *)&buf[18] = 1026;
        *(_DWORD *)&buf[20] = v151;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected fine clock reset,clock,%{public}llu,curr_num,%{public}u,new_num,%{public}u", buf, 0x18u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        if (!v150[0]) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        int v47 = *(_DWORD *)(a1 + 552);
        uint64_t v48 = *(void *)(a1 + 544);
        int v167 = 134349568;
        *(void *)v168 = v48;
        *(_WORD *)&v168[8] = 1026;
        *(_DWORD *)&v168[10] = v47;
        *(_WORD *)&v168[14] = 1026;
        *(_DWORD *)&v168[16] = v151;
        std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v22);
        goto LABEL_100;
      }
      return result;
    }
    unint64_t v30 = v191 + 0x40000000;
    if (v29 > v30) {
      unint64_t v30 = *(void *)(a1 + 544);
    }
    unint64_t v31 = (v30 - v191 + 3221225471u) & 0xFFFFFFFF00000000 | v191;
    if (v31 < v29)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unsigned int v32 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        if (!v190[0]) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        uint64_t v33 = *(void *)(a1 + 544);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = v191;
        *(_WORD *)&uint8_t buf[8] = 2050;
        *(void *)&buf[10] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#gnssmeas,fine clock value went unexpectedly backwards or negative,%{public}u,%{public}llu", buf, 0x12u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        if (!v190[0]) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        uint64_t v34 = *(void *)(a1 + 544);
        int v167 = 67240448;
        *(_DWORD *)v168 = v191;
        *(_WORD *)&v168[4] = 2050;
        *(void *)&v168[6] = v34;
        std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v22);
        goto LABEL_100;
      }
      return result;
    }
    *(void *)(a1 + 544) = v31;
    *(_DWORD *)(a1 + 552) = v151;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    std::string::size_type v35 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v36 = *(void *)(a1 + 544);
      uint64_t v37 = *(void *)(a1 + 536);
      *(_DWORD *)buf = 134218496;
      *(void *)&uint8_t buf[4] = v36;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v37;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = v37 - v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#gnssmeas,new epoch,fine clk ms,%llu,rtc ms,%llu,delta ms,%lld", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      uint64_t v136 = *(void *)(a1 + 544);
      uint64_t v137 = *(void *)(a1 + 536);
      int v167 = 134218496;
      *(void *)v168 = v136;
      *(_WORD *)&v168[8] = 2048;
      *(void *)&v168[10] = v137;
      *(_WORD *)&v168[18] = 2048;
      *(void *)&v168[20] = v137 - v136;
      v138 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v138);
      if (v138 != (char *)buf) {
        free(v138);
      }
    }
    *(void *)(a1 + 152) = 1000000 * *(void *)(a1 + 544);
    LOBYTE(v167) = 0;
    uint64_t v38 = sub_1018C2BBC(a2, 28, (char *)&v167);
    if ((_BYTE)v167) {
      *(int8x16_t *)(a1 + 200) = vextq_s8(*(int8x16_t *)&v168[4], *(int8x16_t *)&v168[4], 8uLL);
    }
    *(int8x16_t *)(a1 + 112) = vextq_s8(v160, v160, 8uLL);
    double v39 = v159;
    *(double *)(a1 + 128) = v159;
    *(double *)(a1 + 408) = v39;
    uint64_t v40 = 1000000 * *(void *)(a1 + 536);
    BOOL v146 = sub_1018BAA04((uint64_t)v38, v40);
    if (v146)
    {
      *(double *)(a1 + 136) = sub_1018BABC4((double *)(a1 + 640), v40, *(double *)(a1 + 128));
      *(void *)(a1 + 144) = v41;
      *(void *)(a1 + 416) = *(void *)(a1 + 536);
      buf[0] = 0;
      sub_10183D22C(a2, 45, (uint64_t)buf);
      if (buf[0]) {
        *(_DWORD *)(a1 + 424) = *(_DWORD *)&buf[4];
      }
      LOBYTE(v183) = 0;
      sub_10183D22C(a2, 46, (uint64_t)&v183);
      if ((_BYTE)v183) {
        *(_DWORD *)(a1 + 428) = DWORD1(v183);
      }
      uint64_t v42 = *(void *)(a1 + 72);
      if (v42)
      {
        long long v43 = *(_OWORD *)(v42 + 8);
        *(void *)(a1 + 488) = *(void *)(v42 + 24);
        *(_OWORD *)(a1 + 472) = v43;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      __int16 v49 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(void *)&uint8_t buf[4] = v40;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#gnssmeas,invalid rtc,%{public}llu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        LODWORD(v183) = 134349056;
        *(void *)((char *)&v183 + 4) = v40;
        v140 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v140);
        if (v140 != (char *)buf) {
          free(v140);
        }
      }
    }
    if (!v146) {
      return 0;
    }
LABEL_154:
    if (v152 == 1 && v14 == 1)
    {
      sub_1018BAC30((void *)a1, a2);
    }
    else if (v14 != 1)
    {
LABEL_199:
      if (!*(void *)(a1 + 544))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        unsigned int v65 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#gnssmeas,skip meas,unset rx clock", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023444A0);
          }
          LOWORD(v167) = 0;
          std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v22);
          goto LABEL_100;
        }
        return result;
      }
      sub_1018BBADC(a2, v186);
      if (v186[0]) {
        unint64_t v147 = 0xEEEEEEEEEEEEEEEFLL * ((v189 - v188) >> 3);
      }
      else {
        unint64_t v147 = 0;
      }
      int v145 = v14;
      v148[0] = 0;
      sub_1017CC710(a2, 44, (uint64_t)v148);
      if (v148[0] && v14 != 6)
      {
        int v167 = (int)(round((double)v149 * 0.002) * 5.0);
        *(void *)buf = &v152;
        unsigned int v66 = sub_1018C36FC(a4, &v152, (uint64_t)&unk_101D0B290, (char **)buf);
        *(void *)buf = &v167;
        unsigned int v67 = sub_1000F3C48((uint64_t)(v66 + 3), &v167, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        ++*((_DWORD *)v67 + 5);
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unsigned int v68 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unsigned int v69 = v152 - 1;
        if (v69 > 9) {
          unsigned int v70 = "other";
        }
        else {
          unsigned int v70 = (&off_1023444D8)[(char)v69];
        }
        if (v148[0]) {
          double v71 = (float)((float)v149 * 0.01);
        }
        else {
          double v71 = 0.0;
        }
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v70;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(void *)&buf[14] = v147;
        *(_WORD *)&buf[22] = 2050;
        *(double *)&buf[24] = v71;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "#gnssmeas,%{public}s,num_meas,%{public}zu,jamming_metric_dB,%{public}.2f", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        unsigned int v125 = v152 - 1;
        if (v125 > 9) {
          v126 = "other";
        }
        else {
          v126 = (&off_1023444D8)[(char)v125];
        }
        if (v148[0]) {
          double v134 = (float)((float)v149 * 0.01);
        }
        else {
          double v134 = 0.0;
        }
        int v167 = 136446722;
        *(void *)v168 = v126;
        *(_WORD *)&v168[8] = 2050;
        *(void *)&v168[10] = v147;
        *(_WORD *)&v168[18] = 2050;
        *(double *)&v168[20] = v134;
        v135 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v135);
        if (v135 != (char *)buf) {
          free(v135);
        }
      }
      int v167 = v16;
      *(void *)buf = &v167;
      v144 = sub_101896C68(a1 + 736, &v167, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 3;
      long long v183 = 0u;
      long long v184 = 0u;
      int v185 = 1065353216;
      if (!v147)
      {
        __int32 v74 = 0;
LABEL_303:
        sub_1018C3C4C((uint64_t)v144, (uint64_t)&v183);
        if ((_BYTE)v156)
        {
          if (*(void *)(a1 + 72)) {
            operator new();
          }
          if (*(void *)(a1 + 80)) {
            operator new();
          }
          if (*(void *)(a1 + 96)) {
            operator new();
          }
          if (*(void *)(a1 + 88)) {
            operator new();
          }
          if (*(void *)(a1 + 104)) {
            operator new();
          }
          sub_1000F5BB0(a1 + 688, *(void **)(a1 + 696));
          *(void *)(a1 + 688) = a1 + 696;
          *(void *)(a1 + 704) = 0;
          *(void *)(a1 + 696) = 0;
          sub_101876C40((uint64_t *)(a1 + 112), a3, (uint64_t **)(a1 + 688));
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023444A0);
          }
          v111 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            uint64_t v112 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 4);
            unint64_t v113 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 4);
            unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 3);
            BOOL v115 = *(void *)(a1 + 376) != 0;
            unint64_t v116 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3);
            *(_DWORD *)buf = 134350336;
            *(void *)&uint8_t buf[4] = v112;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(void *)&buf[14] = v113;
            *(_WORD *)&buf[22] = 2050;
            *(void *)&buf[24] = v114;
            *(_WORD *)&buf[32] = 1026;
            *(_DWORD *)&buf[34] = v115;
            *(_WORD *)&unsigned char buf[38] = 2050;
            uint64_t v195 = v116;
            v196.i16[0] = 1026;
            *(__int32 *)((char *)v196.i32 + 2) = v74;
            _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_INFO, "#gnssmeas,sending out,num_meas,%{public}zu,num_svinfo,%{public}zu,num_bandcorr,%{public}zu,has_klobuchar,%{public}d,num_apc_offset,%{public}zu,false_peak_count,%{public}d", buf, 0x36u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023444A0);
            }
            uint64_t v128 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 4);
            unint64_t v129 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 4);
            unint64_t v130 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 3);
            BOOL v131 = *(void *)(a1 + 376) != 0;
            unint64_t v132 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 392) - *(void *)(a1 + 384)) >> 3);
            int v167 = 134350336;
            *(void *)v168 = v128;
            *(_WORD *)&v168[8] = 2050;
            *(void *)&v168[10] = v129;
            *(_WORD *)&v168[18] = 2050;
            *(void *)&v168[20] = v130;
            *(_WORD *)&v168[28] = 1026;
            *(_DWORD *)&v168[30] = v131;
            *(_WORD *)&v168[34] = 2050;
            uint64_t v169 = v132;
            LOWORD(v170) = 1026;
            *(_DWORD *)((char *)&v170 + 2) = v74;
            v133 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v133);
            if (v133 != (char *)buf) {
              free(v133);
            }
          }
          sub_1018BBE10(a1 + 8);
          *a5 = 1;
          uint64_t v201 = 2143289344;
          memset(buf, 0, sizeof(buf));
          int64x2_t v196 = vdupq_n_s64(0x7FF8000000000000uLL);
          uint64_t v195 = -1;
          int64x2_t v197 = v196;
          uint64_t v198 = 0;
          uint64_t v204 = 0x7FF8000000000000;
          int v206 = 0;
          int64x2_t v199 = v196;
          unint64_t v202 = 0x8000000000000000;
          int32x2_t v200 = vdup_n_s32(0x7FC00000u);
          __asm { FMOV            V8.2S, #-1.0 }
          uint64_t v203 = _D8;
          int v205 = -1082130432;
          long long v214 = 0u;
          long long v215 = 0u;
          long long v213 = 0u;
          long long v212 = 0u;
          long long v211 = 0u;
          long long v210 = 0u;
          long long v209 = 0u;
          long long v208 = 0u;
          long long v207 = 0u;
          sub_1018BBE60(a1 + 112, (long long *)buf);
          sub_100E93C68((uint64_t)buf);
          if (*(void *)(a1 + 64))
          {
            sub_1018BC018(a1 + 40);
            *(void *)(a1 + 408) = 0;
            *(void *)(a1 + 416) = 0;
            *(void *)(a1 + 424) = _D8;
            *(void *)(a1 + 432) = 0x7FF8000000000000;
            *(void *)(a1 + 440) = 3212836864;
            *(void *)(a1 + 448) = 0x7FF8000000000000;
            *(void *)(a1 + 456) = 0;
            *(void *)(a1 + 464) = 3212836864;
            *(_WORD *)(a1 + 472) = 0x8000;
            *(void *)(a1 + 480) = 0;
            *(void *)(a1 + 474) = 0;
            *(_WORD *)(a1 + 488) = 0x8000;
            *(_WORD *)(a1 + 494) = 0;
            *(_DWORD *)(a1 + 490) = 0;
          }
          unsigned int v122 = sub_1018BC068((int *)(a1 + 496)) - 1;
          if (v122 < 3) {
            sub_10187A1C8(*(void *)a1, (uint64_t)"SignalTracking", (uint64_t)(&off_1023444C0)[v122], 0);
          }
        }
        sub_1000D7D80((uint64_t)&v183);
        if (v186[0] && v188)
        {
          v189 = v188;
          operator delete(v188);
        }
        return 1;
      }
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      __int32 v74 = 0;
      float64x2_t v143 = (float64x2_t)vdupq_n_s64(0x400AAF6485FFABE7uLL);
      while (1)
      {
        if (!v186[0]) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        int v75 = v188;
        int v76 = &v188[v72];
        unint64_t v77 = *(void *)&v188[v72 + 56];
        if ((v77 & 0x8000000) != 0) {
          break;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        int v78 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          uint64_t v79 = *((void *)v76 + 7);
          *(_DWORD *)buf = 67240704;
          *(_DWORD *)&uint8_t buf[4] = v152;
          *(_WORD *)&uint8_t buf[8] = 2050;
          *(void *)&buf[10] = v73;
          *(_WORD *)&buf[18] = 2050;
          *(void *)&buf[20] = v79;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "#gnssmeas,not fresh,sigtype,%{public}d,idx,%{public}zu,status,%{public}llu", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023444A0);
          }
          uint64_t v106 = *((void *)v76 + 7);
          int v167 = 67240704;
          *(_DWORD *)v168 = v152;
          *(_WORD *)&v168[4] = 2050;
          *(void *)&v168[6] = v73;
          *(_WORD *)&v168[14] = 2050;
          *(void *)&v168[16] = v106;
          v107 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v107);
          if (v107 != (char *)buf) {
            free(v107);
          }
        }
LABEL_288:
        ++v73;
        v72 += 120;
        if (v147 == v73) {
          goto LABEL_303;
        }
      }
      int v167 = 0;
      *(_WORD *)v168 = 0;
      v168[2] = 127;
      *(void *)&v168[4] = 0;
      *(_DWORD *)&v168[11] = 0;
      *(void *)&v168[20] = -1;
      *(void *)&v168[28] = -1;
      float v171 = -1.0;
      HIWORD(v80) = 0;
      long long v172 = xmmword_101D47590;
      float64x2_t v173 = (float64x2_t)xmmword_101D47590;
      float64x2_t v174 = (float64x2_t)xmmword_101D47590;
      char v175 = 1;
      uint64_t v176 = -1;
      uint64_t v177 = -1;
      long long v178 = xmmword_101D47590;
      char v179 = 0;
      v180 = 0;
      float v181 = -1.0;
      __int16 v182 = 0;
      uint64_t v169 = 1000000 * *(void *)(a1 + 544);
      double v170 = NAN;
      unsigned int v81 = 1000000 * v76[28];
      unint64_t v82 = v169 - ((v81 * (unint64_t)*((unsigned __int16 *)v76 + 15)) >> 1) - 1000000 * *((__int16 *)v76 + 13);
      if ((v82 & 0x8000000000000000) == 0)
      {
        unint64_t v83 = v82 + v81 * (unint64_t)*((unsigned __int16 *)v76 + 15);
        if ((v83 & 0x8000000000000000) == 0)
        {
          *(void *)&v168[20] = v82;
          *(void *)&v168[28] = v83;
        }
      }
      char v84 = &v188[v72];
      if ((v188[v72 + 9] & 4) == 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        unsigned int v85 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "#gnssmeas,skip meas,cn0 not valid", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_285;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_245;
        }
LABEL_300:
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
LABEL_245:
        LOWORD(v161) = 0;
        v86 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v86);
        if (v86 != (char *)buf) {
          free(v86);
        }
        goto LABEL_285;
      }
      LOWORD(v80) = *((_WORD *)v84 + 12);
      float v181 = (float)v80 / 10.0;
      HIBYTE(v182) = (v77 & 0x100600F800) == 0;
      unint64_t v87 = sub_1018B8BDC(v145, *(unsigned __int16 *)v84, 0);
      if (v88)
      {
        int v167 = v87;
        v168[2] = BYTE6(v87);
        *(_WORD *)v168 = WORD2(v87);
        if (v152 != 5) {
          goto LABEL_254;
        }
        char v89 = sub_1018B4DB0();
        if (v168[0] > 0x12u) {
          char v90 = v89;
        }
        else {
          char v90 = 0;
        }
        if ((v90 & 1) == 0)
        {
          LODWORD(v87) = v167;
LABEL_254:
          if (v87 == 2)
          {
            v168[1] = 1;
            if ((v84[8] & 1) == 0)
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023444A0);
              }
              v91 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_INFO, "#gnssmeas,skip meas,unknown fcn", buf, 2u);
              }
              if (!sub_10013D1A0(115, 2)) {
                goto LABEL_285;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 == -1) {
                goto LABEL_245;
              }
              goto LABEL_300;
            }
            v168[2] = v75[v72 + 16];
          }
          if (sub_1018B9788((uint64_t)&v75[v72], &v152, (v77 & 0x100600F800) == 0, &v168[4]))
          {
            LOBYTE(v182) = v76[59] & 1;
            if (sub_1018C3970(v144, (unsigned __int16 *)&v75[v72]))
            {
              int v92 = v75[v72 + 100];
              *(void *)buf = &v75[v72];
              BOOL v142 = v92 != *((unsigned __int8 *)sub_1018C3A24((uint64_t)v144, (unsigned __int16 *)&v75[v72], (uint64_t)&unk_101D0B290, (_WORD **)buf)+ 18);
            }
            else
            {
              BOOL v142 = 0;
            }
            char v93 = v75[v72 + 100];
            *(void *)buf = &v75[v72];
            *((unsigned char *)sub_1018C3A24((uint64_t)&v183, (unsigned __int16 *)&v75[v72], (uint64_t)&unk_101D0B290, (_WORD **)buf)+ 18) = v93;
            unint64_t v95 = *((void *)v76 + 7);
            if ((v95 & 0x200) == 0)
            {
              LODWORD(v94) = *(_DWORD *)&v75[v72 + 32];
              double v170 = ((double)v94 + *(float *)&v75[v72 + 36]) * 1000000.0;
              float v171 = *(float *)&v75[v72 + 40] * 1000000.0;
            }
            if ((v95 & 0x410) == 0x10)
            {
              v96.f32[0] = -*(float *)&v75[v72 + 44];
              v96.i32[1] = *(_DWORD *)&v75[v72 + 48];
              float64x2_t v173 = vmulq_f64(vcvtq_f64_f32(v96), v143);
            }
            unint64_t v97 = *((void *)v84 + 1);
            if ((v97 & 4) == 0)
            {
              if ((v95 & 0x20) != 0)
              {
                int v98 = 0;
                goto LABEL_276;
              }
LABEL_284:
              sub_1018BBB28();
            }
            uint64_t v99 = (v97 >> 3) & 1;
            uint64_t v100 = (v95 >> 5) & 1;
            int v98 = v100 & v99;
            if (v100 == v99)
            {
LABEL_282:
              if (!v98) {
                goto LABEL_284;
              }
            }
            else
            {
LABEL_276:
              int v141 = v98;
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023444A0);
              }
              long long v101 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
              {
                unsigned int v102 = *((_DWORD *)v84 + 2);
                unsigned int v103 = *((_DWORD *)v76 + 14);
                *(_DWORD *)buf = 67240704;
                *(_DWORD *)&uint8_t buf[4] = (v102 >> 2) & 1;
                *(_WORD *)&uint8_t buf[8] = 1026;
                *(_DWORD *)&buf[10] = (v102 >> 3) & 1;
                *(_WORD *)&buf[14] = 1026;
                *(_DWORD *)&uint8_t buf[16] = (v103 >> 5) & 1;
                _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "#gnssmeas,fine speed flag disagreement,%{public}d,%{public}d,%{public}d", buf, 0x14u);
              }
              if (!sub_10013D1A0(115, 0))
              {
                int v98 = v141;
                goto LABEL_282;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023444A0);
              }
              unsigned int v108 = *((_DWORD *)v84 + 2);
              int v109 = (*((_DWORD *)v76 + 14) >> 5) & 1;
              int v161 = 67240704;
              int v162 = (v108 >> 2) & 1;
              __int16 v163 = 1026;
              int v164 = (v108 >> 3) & 1;
              __int16 v165 = 1026;
              int v166 = v109;
              unsigned int v110 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v110);
              if (v110 != (char *)buf) {
                free(v110);
              }
              if ((v141 & 1) == 0) {
                goto LABEL_284;
              }
            }
            v104.f32[0] = -*(float *)&v75[v72 + 92];
            v104.i32[1] = *(_DWORD *)&v75[v72 + 96];
            float64x2_t v174 = vmulq_f64(vcvtq_f64_f32(v104), v143);
            char v175 = v142;
            goto LABEL_284;
          }
        }
      }
LABEL_285:
      v105 = v180;
      v180 = 0;
      if (v105) {
        sub_100E93F5C((uint64_t)&v180, v105);
      }
      v74 += (v77 >> 36) & 1;
      goto LABEL_288;
    }
    v186[0] = 0;
    sub_1018C2C2C(a2, 19, v186);
    if (v186[0])
    {
      float v50 = *(float *)&v188;
      double v51 = v187 * 3.33564095;
      *(double *)(a1 + 248) = v51;
      float v52 = v50 * 3.33564095;
      *(float *)(a1 + 256) = v52;
      *(float *)(a1 + 440) = v52;
      double v53 = *(double *)(a1 + 200);
      if ((*(void *)&v53 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
      {
        *(double *)(a1 + 448) = v53;
        *(double *)(a1 + 432) = v51 + v53;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unsigned int v54 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        if (!v186[0]) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        *(_DWORD *)buf = 134349312;
        *(double *)&uint8_t buf[4] = v187;
        *(_WORD *)&unsigned char buf[12] = 2050;
        *(double *)&buf[14] = *(float *)&v188;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "#gnssmeas,RcvrToGps,receiverClkFreqBias,%{public}.9f,receiverClkFreqUnc,%{public}.9f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        if (!v186[0]) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        int v167 = 134349312;
        *(double *)v168 = v187;
        *(_WORD *)&v168[8] = 2050;
        *(double *)&v168[10] = *(float *)&v188;
        v124 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v124);
        if (v124 != (char *)buf) {
          free(v124);
        }
      }
      LOBYTE(v183) = 0;
      sub_1018C2CC8(a2, 17, (unsigned __int8 *)&v183);
      if (!(_BYTE)v183)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        __int16 v63 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#gnssmeas,GnssTime missing", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_191;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        LOWORD(v167) = 0;
        uint64_t v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v60);
        goto LABEL_363;
      }
      float v55 = *((float *)&v183 + 3) * 1000000.0;
      if (fabsf(*((float *)&v183 + 3) * 1000000.0) <= 1000000.0)
      {
        uint64_t v56 = llroundf(v55);
        uint64_t v57 = 1000000 * (DWORD2(v183) + 604800000 * WORD2(v183)) - v56;
        *(void *)(a1 + 232) = v57 - 1000000 * *(void *)(a1 + 544);
        float v58 = *(float *)&v184 * 1000000.0;
        *(float *)(a1 + 240) = -(float)(v55 - (float)v56);
        *(float *)(a1 + 244) = v58;
        *(void *)(a1 + 456) = v57;
        *(float *)(a1 + 464) = v58;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        int v59 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          if (!(_BYTE)v183) {
            __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
          }
          *(_DWORD *)buf = 134349824;
          *(double *)&uint8_t buf[4] = *((float *)&v183 + 3);
          *(_WORD *)&unsigned char buf[12] = 2050;
          *(double *)&buf[14] = *(float *)&v184;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = WORD2(v183);
          *(_WORD *)&buf[28] = 1026;
          *(_DWORD *)&buf[30] = DWORD2(v183);
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEBUG, "#gnssmeas,RcvrToGps,clkTimeBiasMs,%{public}0.6f,clkTimeUncMs,%{public}0.6f,GPS week,%{public}hu,GPS msec,%{public}u", buf, 0x22u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_191;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        if (!(_BYTE)v183) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        int v167 = 134349824;
        *(double *)v168 = *((float *)&v183 + 3);
        *(_WORD *)&v168[8] = 2050;
        *(double *)&v168[10] = *(float *)&v184;
        *(_WORD *)&v168[18] = 1026;
        *(_DWORD *)&v168[20] = WORD2(v183);
        *(_WORD *)&v168[24] = 1026;
        *(_DWORD *)&v168[26] = DWORD2(v183);
        uint64_t v60 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v60);
LABEL_363:
        if (v60 != (char *)buf) {
          free(v60);
        }
LABEL_191:
        int v62 = 0;
        BOOL result = 1;
        goto LABEL_198;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      int v64 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134349056;
        *(double *)&uint8_t buf[4] = v55;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "#gnssmeas,strange system clock time bias,%{public}.6f", buf, 0xCu);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        int v167 = 134349056;
        *(double *)v168 = v55;
        v139 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v139);
        if (v139 != (char *)buf) {
          free(v139);
        }
        BOOL result = 0;
      }
      int v62 = 1;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unsigned int v61 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "#gnssmeas,frequency estimate parsing failed", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        LOWORD(v167) = 0;
        v127 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v127);
        if (v127 != (char *)buf) {
          free(v127);
        }
        BOOL result = 0;
      }
      int v62 = 1;
    }
LABEL_198:
    if (v62) {
      return result;
    }
    goto LABEL_199;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
  }
  long long v18 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    if (!v190[0]) {
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    uint64_t v19 = *(void *)(a1 + 536);
    *(_DWORD *)buf = 134349312;
    *(void *)&uint8_t buf[4] = v193;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&buf[14] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#gnssmeas,rtc went backwards,%{public}llu%{public}llu", buf, 0x16u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    if (!v190[0]) {
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    uint64_t v21 = *(void *)(a1 + 536);
    int v167 = 134349312;
    *(void *)v168 = v193;
    *(_WORD *)&v168[8] = 2050;
    *(void *)&v168[10] = v21;
    std::string::size_type v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::handlePdsGnssMeasurementReportWorker(const pds::gnssMeasurementIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData::JammingMetricHist &, BOOL &)", "%s\n", v22);
    goto LABEL_100;
  }
  return result;
}

void sub_1018B854C(_Unwind_Exception *a1)
{
}

double sub_1018B86F4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gnssmeas,reset", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    int v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::resetGnssMeasIndicationState()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  *(_OWORD *)buf = 0u;
  long long v16 = 0u;
  uint64_t v17 = 0;
  int64x2_t v19 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v18 = -1;
  int64x2_t v20 = v19;
  uint64_t v21 = 0;
  int64x2_t v22 = v19;
  int32x2_t v23 = vdup_n_s32(0x7FC00000u);
  uint64_t v24 = 2143289344;
  unint64_t v25 = 0x8000000000000000;
  __asm { FMOV            V1.2S, #-1.0 }
  uint64_t v26 = _D1;
  uint64_t v27 = 0x7FF8000000000000;
  uint64_t v28 = 3212836864;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  sub_1018BBE60(a1 + 112, (long long *)buf);
  sub_100E93C68((uint64_t)buf);
  *(_WORD *)(a1 + 532) = -1;
  uint64_t v8 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v8) {
    operator delete();
  }
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0;
  if (v9) {
    operator delete();
  }
  uint64_t v10 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v10) {
    operator delete();
  }
  uint64_t v11 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v11) {
    operator delete();
  }
  uint64_t v12 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v12) {
    operator delete();
  }
  *(unsigned char *)(a1 + 672) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  return result;
}

uint64_t sub_1018B89F0(unsigned int a1)
{
  if (a1 >= 5)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      unsigned int v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gnssmeas,unhandled detection method,%{public}d", buf, 8u);
    }
    BOOL v4 = sub_10013D1A0(115, 0);
    unsigned __int8 v2 = 0;
    if (v4)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unsigned __int8 v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::MeasurementDetectionMethod convertQmiDetectionMethodToNative(DetectionMethod)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
      return 0;
    }
  }
  else
  {
    return a1;
  }
  return v2;
}

uint64_t sub_1018B8BB8(int a1)
{
  if ((a1 - 1) > 0x13) {
    return 0;
  }
  else {
    return byte_101E453A0[a1 - 1];
  }
}

unint64_t sub_1018B8BDC(int a1, unsigned int a2, int a3)
{
  if (!a3)
  {
    int v5 = a1;
    switch(a1)
    {
      case 1:
        goto LABEL_14;
      case 2:
        goto LABEL_30;
      case 4:
        goto LABEL_28;
      case 5:
        if (a2 != 255) {
          goto LABEL_24;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        uint64_t v12 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssmeas,ignoring glo with unknown svid", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_12;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        int v13 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<gnss::SvId> convertQmiSvIdToNative(SatSystem, uint16_t, BOOL)", "%s\n");
        break;
      case 6:
        goto LABEL_26;
      case 7:
        goto LABEL_32;
      default:
        goto LABEL_7;
    }
    goto LABEL_48;
  }
  if ((unsigned __int16)(a2 - 1) < 0x20u)
  {
LABEL_14:
    unsigned int v9 = 32;
    int v10 = 1;
    unsigned int v7 = 1;
    unsigned __int8 v8 = a2;
    unsigned int v11 = 1;
  }
  else
  {
    if (a2 < 0x41) {
      goto LABEL_6;
    }
    if (a2 < 0x61)
    {
LABEL_24:
      unsigned __int8 v8 = a2 - 64;
      unsigned int v11 = 65;
      unsigned int v9 = 96;
      unsigned int v7 = 2;
      int v10 = 5;
    }
    else
    {
      if (a2 < 0xC0) {
        goto LABEL_6;
      }
      if (a2 >= 0xC6)
      {
        if (a2 >= 0x108)
        {
          if (a2 >= 0x151)
          {
            if (a2 >= 0x19F)
            {
LABEL_6:
              int v5 = 3;
LABEL_7:
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023444A0);
              }
              unsigned __int8 v6 = qword_1024193D8;
              if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67240192;
                unsigned int v18 = v5;
                _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected system,%{public}d", buf, 8u);
              }
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_12;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023444A0);
              }
              int v13 = (uint8_t *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "std::optional<gnss::SvId> convertQmiSvIdToNative(SatSystem, uint16_t, BOOL)", "%s\n");
LABEL_48:
              if (v13 != buf) {
                free(v13);
              }
LABEL_12:
              unsigned int v7 = 0;
              unsigned __int8 v8 = 0;
              return v7 | ((unint64_t)v8 << 32) | 0x7F000000000000;
            }
LABEL_32:
            unsigned __int8 v8 = a2 + 112;
            unsigned int v11 = 401;
            unsigned int v9 = 414;
            unsigned int v7 = 32;
            int v10 = 7;
          }
          else
          {
LABEL_30:
            unsigned __int8 v8 = a2 - 44;
            unsigned int v11 = 301;
            unsigned int v9 = 336;
            unsigned int v7 = 8;
            int v10 = 2;
          }
        }
        else
        {
LABEL_28:
          unsigned __int8 v8 = a2 + 56;
          unsigned int v11 = 201;
          unsigned int v9 = 263;
          int v10 = 4;
          unsigned int v7 = 4;
        }
      }
      else
      {
LABEL_26:
        unsigned int v11 = 193;
        unsigned int v9 = 197;
        unsigned int v7 = 16;
        int v10 = 6;
        unsigned __int8 v8 = a2;
      }
    }
  }
  if (v9 < a2 || v11 > a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    int v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240704;
      unsigned int v18 = a2;
      __int16 v19 = 1026;
      int v20 = v10;
      __int16 v21 = 1026;
      int v22 = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected svid,%{public}d,%{public}d,%{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      long long v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "std::optional<gnss::SvId> convertQmiSvIdToNative(SatSystem, uint16_t, BOOL)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
  }
  return v7 | ((unint64_t)v8 << 32) | 0x7F000000000000;
}

uint64_t sub_1018B9190(unsigned int a1)
{
  if (a1 < 6 && ((0x27u >> a1) & 1) != 0)
  {
    return (0x30101020201uLL >> (8 * a1));
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    unsigned __int8 v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      unsigned int v8 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected apc reference frequency,%{public}d", buf, 8u);
    }
    BOOL v3 = sub_10013D1A0(115, 0);
    LOBYTE(v4) = 0;
    if (v3)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "gnss::SvReferencePoint convertQmiApcFreqIdToNative(qmi::pds::AntennaPhaseCenterFrequencyId)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
      LOBYTE(v4) = 0;
    }
  }
  return v4;
}

uint64_t sub_1018B9370(int a1, int a2)
{
  if ((a2 - 1) >= 2)
  {
    if (a2 == 5)
    {
      char v8 = a1 - 1;
      if (a1 - 1) < 7 && ((0x6Bu >> v8)) {
        return (0x3030307030903uLL >> (8 * v8));
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unsigned int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        int v16 = a1;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,unexpected qmi gnss system,%{public}d", buf, 8u);
      }
      BOOL v10 = sub_10013D1A0(115, 0);
      LOBYTE(v6) = 0;
      if (!v10) {
        return v6;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_27;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unsigned int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        int v16 = a2;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,unexpected qmi apc reference frequency,%{public}d", buf, 8u);
      }
      BOOL v12 = sub_10013D1A0(115, 0);
      LOBYTE(v6) = 0;
      if (!v12) {
        return v6;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_27:
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "gnss::Band convertQmiSystemAndApcFreqIdToNativeBand(SatSystem, qmi::pds::AntennaPhaseCenterFrequencyId)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
        LOBYTE(v6) = 0;
        return v6;
      }
    }
LABEL_33:
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
    goto LABEL_27;
  }
  char v3 = a1 - 1;
  if (a1 - 1) < 6 && ((0x3Bu >> v3)) {
    return (0x10405010801uLL >> (8 * v3));
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67240192;
    int v16 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,unexpected qmi gnss system,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  LOBYTE(v6) = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_27;
    }
    goto LABEL_33;
  }
  return v6;
}

BOOL sub_1018B9788(uint64_t a1, unsigned char *a2, int a3, unsigned char *a4)
{
  *a4 = *a2;
  if (a3)
  {
    switch(*a2)
    {
      case 1:
      case 3:
      case 5:
      case 6:
      case 7:
      case 0xA:
        a4[1] = *(unsigned char *)(a1 + 56) & 1;
        a4[2] = (~*(_DWORD *)(a1 + 56) & 0xALL) == 0;
        a4[3] = 0;
        goto LABEL_4;
      case 4:
        a4[1] = *(unsigned char *)(a1 + 56) & 1;
        a4[2] = *(unsigned char *)(a1 + 58) & 1;
        a4[3] = (~*(_DWORD *)(a1 + 56) & 0xALL) == 0;
        a4[4] = 0;
        a4[5] = (*(_DWORD *)(a1 + 56) & 0x20000) != 0;
        return 1;
      case 8:
        a4[1] = (~*(_DWORD *)(a1 + 56) & 0xALL) == 0;
        a4[2] = (*(_DWORD *)(a1 + 56) & 0x40000000) != 0;
        a4[3] = *(int *)(a1 + 56) < 0;
LABEL_4:
        a4[4] = (*(unsigned char *)(a1 + 56) & 4) != 0;
        return 1;
      case 9:
        a4[2] = (~*(_DWORD *)(a1 + 56) & 0xALL) == 0;
        a4[7] = (*(_DWORD *)(a1 + 56) & 0x40000000) != 0;
        a4[9] = *(int *)(a1 + 56) < 0;
        a4[10] = (*(unsigned char *)(a1 + 56) & 4) != 0;
        return 1;
      default:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        uint64_t v6 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = *a2;
          *(_DWORD *)buf = 67240192;
          int v10 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,#gnssmeas,unhandled signal type,%{public}d", buf, 8u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023444A0);
          }
          char v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL populateSyncState(const pds::tlv::SvMeasurementAndClockInfo &, const gnss::Band &, const BOOL, gnss::SyncState &)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
          return 0;
        }
        return result;
    }
  }
  return 1;
}

void sub_1018B9A94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = a2;
  uint64_t v10 = a1 + 40;
  sub_10084F664(a1 + 8, a3);
  sub_1008527DC(v10, a4);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 152) = -1;
  _Q0 = vdupq_n_s64(0x7FF8000000000000uLL);
  *(int64x2_t *)(a1 + 160) = _Q0;
  *(int64x2_t *)(a1 + 176) = _Q0;
  *(int64x2_t *)(a1 + 200) = _Q0;
  *(_WORD *)(a1 + 192) = 0;
  *(int32x2_t *)(a1 + 216) = vdup_n_s32(0x7FC00000u);
  *(_DWORD *)(a1 + 224) = 2143289344;
  *(void *)(a1 + 232) = 0x8000000000000000;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 240) = _Q0.i64[0];
  *(void *)(a1 + 248) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 256) = -1082130432;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 424) = _Q0.i64[0];
  *(void *)(a1 + 432) = 0x7FF8000000000000;
  *(_DWORD *)(a1 + 440) = -1082130432;
  *(void *)(a1 + 448) = 0x7FF8000000000000;
  *(void *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 464) = -1082130432;
  *(_WORD *)(a1 + 472) = 0x8000;
  *(unsigned char *)(a1 + 474) = 0;
  *(void *)(a1 + 480) = 0;
  *(_WORD *)(a1 + 488) = 0x8000;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  *(_WORD *)(a1 + 532) = -1;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(unsigned char *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 632) = a7;
  *(unsigned char *)(a1 + 672) = 0;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  operator new();
}

void sub_1018B9E34(_Unwind_Exception *a1)
{
  sub_10071874C(v2 + 736);
  sub_1000F5BB0(v2 + 688, *v5);
  sub_101835390(v4 + 76, 0);
  char v8 = *v6;
  if (*v6)
  {
    *(void *)(v2 + 608) = v8;
    operator delete(v8);
  }
  sub_100E93C68((uint64_t)(v4 + 5));
  sub_1018B9ED0(v4);
  sub_10084FC8C(v3);
  sub_10084FB84(v1);
  _Unwind_Resume(a1);
}

void sub_1018B9EC8()
{
}

uint64_t *sub_1018B9ED0(uint64_t *a1)
{
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    operator delete();
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    operator delete();
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    operator delete();
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  if (v6) {
    operator delete();
  }
  return a1;
}

BOOL sub_1018B9F98(uint64_t a1, qmi::MessageBase *a2, BOOL *a3, BOOL *a4)
{
  v38[0] = 0;
  sub_1017CC7D8(a2, 1, v38);
  v37[0] = 0;
  sub_1017CC7D8(a2, 2, v37);
  if (v38[0]) {
    BOOL v8 = v37[0] == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    unsigned int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#gnssmeas,sequencing missing", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_12;
    }
    goto LABEL_79;
  }
  unsigned int v12 = v38[1];
  int v13 = v37[1];
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
  }
  int v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    unsigned int v46 = v12;
    __int16 v47 = 1024;
    int v48 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gnssmeas,seqNum,%d,maxMessageNum,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    int v39 = 67109376;
    unsigned int v40 = v12;
    __int16 v41 = 1024;
    int v42 = v13;
    long long v36 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  *a3 = v12 == 1;
  unsigned int v15 = *(unsigned __int8 *)(a1 + 532);
  if (v12 != 1)
  {
    if (v15 == 255 || (int v21 = *(unsigned __int8 *)(a1 + 533), v21 == 255))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unint64_t v25 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v26 = *(unsigned __int8 *)(a1 + 532);
        int v27 = *(unsigned __int8 *)(a1 + 533);
        *(_DWORD *)buf = 67240704;
        unsigned int v46 = v26;
        __int16 v47 = 1026;
        int v48 = v27;
        __int16 v49 = 1026;
        unsigned int v50 = v12;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "#gnssmeas,expected first block,numMessages,%{public}d,lastSeqNum,%{public}d,received,%{public}d", buf, 0x14u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        unsigned int v28 = *(unsigned __int8 *)(a1 + 532);
        int v29 = *(unsigned __int8 *)(a1 + 533);
        int v39 = 67240704;
        unsigned int v40 = v28;
        __int16 v41 = 1026;
        int v42 = v29;
        __int16 v43 = 1026;
        unsigned int v44 = v12;
        unsigned int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v11);
        goto LABEL_50;
      }
      return result;
    }
    if (v12 > v15 || v21 + 1 != v12)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      long long v30 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        int v31 = *(unsigned __int8 *)(a1 + 532);
        unsigned int v32 = *(unsigned __int8 *)(a1 + 533);
        *(_DWORD *)buf = 67240704;
        unsigned int v46 = v12;
        __int16 v47 = 1026;
        int v48 = v31;
        __int16 v49 = 1026;
        unsigned int v50 = v32;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected sequence number,%{public}d,maxMessage,%{public}d,lastSeqNum,%{public}d", buf, 0x14u);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        int v33 = *(unsigned __int8 *)(a1 + 532);
        unsigned int v34 = *(unsigned __int8 *)(a1 + 533);
        int v39 = 67240704;
        unsigned int v40 = v12;
        __int16 v41 = 1026;
        int v42 = v33;
        __int16 v43 = 1026;
        unsigned int v44 = v34;
        unsigned int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v11);
        goto LABEL_50;
      }
      return result;
    }
    if (v15 != v13)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      int v22 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v23 = *(unsigned __int8 *)(a1 + 532);
        *(_DWORD *)buf = 67240448;
        unsigned int v46 = v23;
        __int16 v47 = 1026;
        int v48 = v13;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected max message%{public}d,prev,%{public}d", buf, 0xEu);
      }
      BOOL result = sub_10013D1A0(115, 0);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        unsigned int v24 = *(unsigned __int8 *)(a1 + 532);
        int v39 = 67240448;
        unsigned int v40 = v24;
        __int16 v41 = 1026;
        int v42 = v13;
        unsigned int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v11);
        goto LABEL_50;
      }
      return result;
    }
LABEL_55:
    *a4 = v12 == v13;
    if (v12 == v13) {
      *(_WORD *)(a1 + 532) = -1;
    }
    else {
      *(unsigned char *)(a1 + 533) = v12;
    }
    return 1;
  }
  if (v15 == 255 && *(unsigned __int8 *)(a1 + 533) == 255)
  {
    if (v13)
    {
      *(unsigned char *)(a1 + 532) = v13;
      goto LABEL_55;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    long long v35 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "#gnssmeas maxMessageNum expectedly zero\n", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_12:
      LOWORD(v39) = 0;
      unsigned int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v11);
LABEL_50:
      if (v11 != (char *)buf) {
        free(v11);
      }
      return 0;
    }
LABEL_79:
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
    goto LABEL_12;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
  }
  int v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    unsigned int v17 = *(unsigned __int8 *)(a1 + 532);
    int v18 = *(unsigned __int8 *)(a1 + 533);
    *(_DWORD *)buf = 67240448;
    unsigned int v46 = v17;
    __int16 v47 = 1026;
    int v48 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#gnssmeas,unexpected first block,num meas,%{public}d,last seq,%{public}d", buf, 0xEu);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    unsigned int v19 = *(unsigned __int8 *)(a1 + 532);
    int v20 = *(unsigned __int8 *)(a1 + 533);
    int v39 = 67240448;
    unsigned int v40 = v19;
    __int16 v41 = 1026;
    int v42 = v20;
    unsigned int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLEurekaMeasurementProcessor::checkMessageSequencing(const pds::gnssMeasurementIndication::Indication &, BOOL &, BOOL &)", "%s\n", v11);
    goto LABEL_50;
  }
  return result;
}

BOOL sub_1018BAA04(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 - 1;
  if ((unint64_t)(a2 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      uint64_t v8 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rxClockConv,missing rx clock,%{public}llu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL ReceiverClockConversion::isRxClockValid(const uint64_t) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return v2 < 0xFFFFFFFFFFFFFFFELL;
}

double sub_1018BABC4(double *a1, unint64_t a2, double a3)
{
  return *a1 + (double)a2 * 0.000000001;
}

void sub_1018BAC30(void *a1, qmi::MessageBase *a2)
{
  uint64_t v4 = (char **)(a1 + 39);
  uint64_t v5 = (uint64_t)(a1 + 41);
  unint64_t v6 = a1[40];
  unint64_t v7 = a1[41];
  if (v6 >= v7)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)*v4) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*v4) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12) {
      int v13 = (char *)sub_1000DA5D8((uint64_t)(a1 + 41), v12);
    }
    else {
      int v13 = 0;
    }
    int v14 = &v13[24 * v9];
    unsigned int v15 = &v13[24 * v12];
    *(void *)int v14 = 0;
    *((void *)v14 + 1) = 0x7FC0000000000000;
    v14[16] = 1;
    uint64_t v8 = v14 + 24;
    unsigned int v17 = (char *)a1[39];
    int v16 = (char *)a1[40];
    if (v16 != v17)
    {
      do
      {
        long long v18 = *(_OWORD *)(v16 - 24);
        *(v14 - 8) = *(v16 - 8);
        *(_OWORD *)(v14 - 24) = v18;
        v14 -= 24;
        v16 -= 24;
      }
      while (v16 != v17);
      int v16 = *v4;
    }
    a1[39] = v14;
    a1[40] = v8;
    a1[41] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(void *)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0x7FC0000000000000;
    *(unsigned char *)(v6 + 16) = 1;
    uint64_t v8 = (char *)(v6 + 24);
  }
  a1[40] = v8;
  v186[0] = 0;
  sub_1018C3D5C(a2, 31, v186);
  if (v186[0] && (v187 & 1) != 0)
  {
    unsigned int v19 = (int32x2_t *)a1[40];
    unint64_t v20 = a1[41];
    if ((unint64_t)v19 >= v20)
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - *v4) >> 3);
      unint64_t v23 = v22 + 1;
      if (v22 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)*v4) >> 3);
      if (2 * v24 > v23) {
        unint64_t v23 = 2 * v24;
      }
      if (v24 >= 0x555555555555555) {
        unint64_t v25 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v25 = v23;
      }
      unsigned int v26 = (char *)sub_1000DA5D8(v5, v25);
      int v27 = (int32x2_t *)&v26[24 * v22];
      int v29 = &v26[24 * v28];
      v27[2] = 0;
      int32x2_t *v27 = (int32x2_t)0x7FF8000000000000;
      v27[1] = vdup_n_s32(0x7FC00000u);
      int v21 = v27 + 3;
      int v31 = (char *)a1[39];
      long long v30 = (char *)a1[40];
      if (v30 != v31)
      {
        do
        {
          long long v32 = *(_OWORD *)(v30 - 24);
          v27[-1].i8[0] = *(v30 - 8);
          *(_OWORD *)v27[-3].i8 = v32;
          v27 -= 3;
          v30 -= 24;
        }
        while (v30 != v31);
        long long v30 = *v4;
      }
      a1[39] = v27;
      a1[40] = v21;
      a1[41] = v29;
      if (v30) {
        operator delete(v30);
      }
    }
    else
    {
      v19[2] = 0;
      int32x2_t *v19 = (int32x2_t)0x7FF8000000000000;
      v19[1] = vdup_n_s32(0x7FC00000u);
      int v21 = v19 + 3;
    }
    a1[40] = v21;
    v21[-1].i8[0] = 4;
    if (!v186[0]) {
      sub_101A50B74();
    }
    *(double *)&v21[-3] = v188 * 1000000.0;
    if ((v187 & 2) != 0) {
      *(float *)v21[-2].i32 = v189 * 1000000.0;
    }
  }
  v182[0] = 0;
  sub_1018C3D5C(a2, 33, v182);
  if (v182[0] && (v183 & 1) != 0)
  {
    double v34 = v184 * 1000000.0;
    if ((v183 & 2) != 0) {
      float v33 = v185 * 1000000.0;
    }
    else {
      float v33 = NAN;
    }
    unint64_t v36 = a1[40];
    unint64_t v35 = a1[41];
    if (v36 >= v35)
    {
      unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v36 - (void)*v4) >> 3);
      unint64_t v39 = v38 + 1;
      if (v38 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - (void)*v4) >> 3);
      if (2 * v40 > v39) {
        unint64_t v39 = 2 * v40;
      }
      if (v40 >= 0x555555555555555) {
        unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41) {
        int v42 = (char *)sub_1000DA5D8(v5, v41);
      }
      else {
        int v42 = 0;
      }
      __int16 v43 = (float *)&v42[24 * v38];
      unsigned int v44 = &v42[24 * v41];
      *(double *)__int16 v43 = v34;
      v43[2] = v33;
      v43[3] = NAN;
      *((unsigned char *)v43 + 16) = 8;
      long long v37 = (char *)(v43 + 6);
      unsigned int v46 = (char *)a1[39];
      int v45 = (char *)a1[40];
      if (v45 != v46)
      {
        do
        {
          long long v47 = *(_OWORD *)(v45 - 24);
          *((unsigned char *)v43 - 8) = *(v45 - 8);
          *(_OWORD *)(v43 - 6) = v47;
          v43 -= 6;
          v45 -= 24;
        }
        while (v45 != v46);
        int v45 = *v4;
      }
      a1[39] = v43;
      a1[40] = v37;
      a1[41] = v44;
      if (v45) {
        operator delete(v45);
      }
    }
    else
    {
      *(double *)unint64_t v36 = v34;
      *(float *)(v36 + 8) = v33;
      *(_DWORD *)(v36 + 12) = 2143289344;
      *(unsigned char *)(v36 + 16) = 8;
      long long v37 = (char *)(v36 + 24);
    }
    a1[40] = v37;
  }
  else
  {
    float v33 = NAN;
    double v34 = NAN;
  }
  v178[0] = 0;
  sub_1018C3D5C(a2, 32, v178);
  if (v178[0] && (v179 & 1) != 0)
  {
    double v49 = v180 * 1000000.0;
    if ((v179 & 2) != 0) {
      float v48 = v181 * 1000000.0;
    }
    else {
      float v48 = NAN;
    }
    unint64_t v51 = a1[40];
    unint64_t v50 = a1[41];
    if (v51 >= v50)
    {
      unint64_t v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - (void)*v4) >> 3);
      unint64_t v54 = v53 + 1;
      if (v53 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (void)*v4) >> 3);
      if (2 * v55 > v54) {
        unint64_t v54 = 2 * v55;
      }
      if (v55 >= 0x555555555555555) {
        unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56) {
        uint64_t v57 = (char *)sub_1000DA5D8(v5, v56);
      }
      else {
        uint64_t v57 = 0;
      }
      float v58 = (float *)&v57[24 * v53];
      int v59 = &v57[24 * v56];
      *(double *)float v58 = v49;
      v58[2] = v48;
      v58[3] = NAN;
      *((unsigned char *)v58 + 16) = 5;
      float v52 = (char *)(v58 + 6);
      unsigned int v61 = (char *)a1[39];
      uint64_t v60 = (char *)a1[40];
      if (v60 != v61)
      {
        do
        {
          long long v62 = *(_OWORD *)(v60 - 24);
          *((unsigned char *)v58 - 8) = *(v60 - 8);
          *(_OWORD *)(v58 - 6) = v62;
          v58 -= 6;
          v60 -= 24;
        }
        while (v60 != v61);
        uint64_t v60 = *v4;
      }
      a1[39] = v58;
      a1[40] = v52;
      a1[41] = v59;
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      *(double *)unint64_t v51 = v49;
      *(float *)(v51 + 8) = v48;
      *(_DWORD *)(v51 + 12) = 2143289344;
      *(unsigned char *)(v51 + 16) = 5;
      float v52 = (char *)(v51 + 24);
    }
    a1[40] = v52;
  }
  else
  {
    float v48 = NAN;
    double v49 = NAN;
  }
  v174[0] = 0;
  sub_1018C3D5C(a2, 49, v174);
  if (v174[0] && (v175 & 1) != 0)
  {
    double v63 = v176 * 1000000.0;
    if ((v175 & 2) != 0) {
      float v64 = v177 * 1000000.0;
    }
    else {
      float v64 = NAN;
    }
    unint64_t v66 = a1[40];
    unint64_t v65 = a1[41];
    if (v66 >= v65)
    {
      unint64_t v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v66 - (void)*v4) >> 3);
      unint64_t v69 = v68 + 1;
      if (v68 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - (void)*v4) >> 3);
      if (2 * v70 > v69) {
        unint64_t v69 = 2 * v70;
      }
      if (v70 >= 0x555555555555555) {
        unint64_t v71 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v71 = v69;
      }
      if (v71) {
        uint64_t v72 = (char *)sub_1000DA5D8(v5, v71);
      }
      else {
        uint64_t v72 = 0;
      }
      uint64_t v73 = (float *)&v72[24 * v68];
      __int32 v74 = &v72[24 * v71];
      *(double *)uint64_t v73 = v63;
      v73[2] = v64;
      v73[3] = NAN;
      *((unsigned char *)v73 + 16) = 6;
      unsigned int v67 = (char *)(v73 + 6);
      int v76 = (char *)a1[39];
      int v75 = (char *)a1[40];
      if (v75 != v76)
      {
        do
        {
          long long v77 = *(_OWORD *)(v75 - 24);
          *((unsigned char *)v73 - 8) = *(v75 - 8);
          *(_OWORD *)(v73 - 6) = v77;
          v73 -= 6;
          v75 -= 24;
        }
        while (v75 != v76);
        int v75 = *v4;
      }
      a1[39] = v73;
      a1[40] = v67;
      a1[41] = v74;
      if (v75) {
        operator delete(v75);
      }
    }
    else
    {
      *(double *)unint64_t v66 = v63;
      *(float *)(v66 + 8) = v64;
      *(_DWORD *)(v66 + 12) = 2143289344;
      *(unsigned char *)(v66 + 16) = 6;
      unsigned int v67 = (char *)(v66 + 24);
    }
    a1[40] = v67;
  }
  else
  {
    double v63 = NAN;
    float v64 = NAN;
  }
  v170[0] = 0;
  sub_1018C3D5C(a2, 38, v170);
  if (v170[0] && (v171 & 1) != 0)
  {
    int v78 = (int32x2_t *)a1[40];
    unint64_t v79 = a1[41];
    if ((unint64_t)v78 >= v79)
    {
      unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v78 - *v4) >> 3);
      unint64_t v82 = v81 + 1;
      if (v81 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v79 - (void)*v4) >> 3);
      if (2 * v83 > v82) {
        unint64_t v82 = 2 * v83;
      }
      if (v83 >= 0x555555555555555) {
        unint64_t v84 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v84 = v82;
      }
      unsigned int v85 = (char *)sub_1000DA5D8(v5, v84);
      v86 = (int32x2_t *)&v85[24 * v81];
      char v88 = &v85[24 * v87];
      v86[2] = 0;
      int32x2_t *v86 = (int32x2_t)0x7FF8000000000000;
      v86[1] = vdup_n_s32(0x7FC00000u);
      unsigned int v80 = v86 + 3;
      char v90 = (char *)a1[39];
      char v89 = (char *)a1[40];
      if (v89 != v90)
      {
        do
        {
          long long v91 = *(_OWORD *)(v89 - 24);
          v86[-1].i8[0] = *(v89 - 8);
          *(_OWORD *)v86[-3].i8 = v91;
          v86 -= 3;
          v89 -= 24;
        }
        while (v89 != v90);
        char v89 = *v4;
      }
      a1[39] = v86;
      a1[40] = v80;
      a1[41] = v88;
      if (v89) {
        operator delete(v89);
      }
    }
    else
    {
      v78[2] = 0;
      *int v78 = (int32x2_t)0x7FF8000000000000;
      v78[1] = vdup_n_s32(0x7FC00000u);
      unsigned int v80 = v78 + 3;
    }
    a1[40] = v80;
    v80[-1].i8[0] = 3;
    if (!v170[0]) {
      sub_101A50B74();
    }
    *(double *)&v80[-3] = v172 * 1000000.0;
    if ((v171 & 2) != 0) {
      *(float *)v80[-2].i32 = v173 * 1000000.0;
    }
  }
  v166[0] = 0;
  sub_1018C3D5C(a2, 42, v166);
  if (v166[0] && (v167 & 1) != 0 && (*(void *)&v34 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v92 = (int32x2_t *)a1[40];
    unint64_t v93 = a1[41];
    if ((unint64_t)v92 >= v93)
    {
      unint64_t v95 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92 - *v4) >> 3);
      unint64_t v96 = v95 + 1;
      if (v95 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v97 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v93 - (void)*v4) >> 3);
      if (2 * v97 > v96) {
        unint64_t v96 = 2 * v97;
      }
      if (v97 >= 0x555555555555555) {
        unint64_t v98 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v98 = v96;
      }
      uint64_t v99 = (char *)sub_1000DA5D8(v5, v98);
      uint64_t v100 = (int32x2_t *)&v99[24 * v95];
      unsigned int v102 = &v99[24 * v101];
      v100[2] = 0;
      *uint64_t v100 = (int32x2_t)0x7FF8000000000000;
      v100[1] = vdup_n_s32(0x7FC00000u);
      unint64_t v94 = v100 + 3;
      float32x2_t v104 = (char *)a1[39];
      unsigned int v103 = (char *)a1[40];
      if (v103 != v104)
      {
        do
        {
          long long v105 = *(_OWORD *)(v103 - 24);
          v100[-1].i8[0] = *(v103 - 8);
          *(_OWORD *)v100[-3].i8 = v105;
          v100 -= 3;
          v103 -= 24;
        }
        while (v103 != v104);
        unsigned int v103 = *v4;
      }
      a1[39] = v100;
      a1[40] = v94;
      a1[41] = v102;
      if (v103) {
        operator delete(v103);
      }
    }
    else
    {
      v92[2] = 0;
      *int v92 = (int32x2_t)0x7FF8000000000000;
      v92[1] = vdup_n_s32(0x7FC00000u);
      unint64_t v94 = v92 + 3;
    }
    a1[40] = v94;
    v94[-1].i8[0] = 9;
    if (!v166[0]) {
      sub_101A50B74();
    }
    *(double *)&v94[-3] = v34 + v168 * 1000000.0;
    if ((v167 & 2) != 0 && (LODWORD(v33) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      float v106 = hypot(v169 * 1000000.0, v33);
      *(float *)v94[-2].i32 = v106;
    }
  }
  v162[0] = 0;
  sub_1018C3D5C(a2, 40, v162);
  char v107 = sub_1018B4DB0();
  if (v162[0]) {
    char v108 = v107;
  }
  else {
    char v108 = 1;
  }
  if ((v108 & 1) == 0 && (v163 & 1) != 0 && (*(void *)&v49 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    int v109 = (int32x2_t *)a1[40];
    unint64_t v110 = a1[41];
    if ((unint64_t)v109 >= v110)
    {
      unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109 - *v4) >> 3);
      unint64_t v113 = v112 + 1;
      if (v112 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - (void)*v4) >> 3);
      if (2 * v114 > v113) {
        unint64_t v113 = 2 * v114;
      }
      if (v114 >= 0x555555555555555) {
        unint64_t v115 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v115 = v113;
      }
      unint64_t v116 = (char *)sub_1000DA5D8(v5, v115);
      v117 = (int32x2_t *)&v116[24 * v112];
      v119 = &v116[24 * v118];
      v117[2] = 0;
      int32x2_t *v117 = (int32x2_t)0x7FF8000000000000;
      v117[1] = vdup_n_s32(0x7FC00000u);
      v111 = v117 + 3;
      v121 = (char *)a1[39];
      v120 = (char *)a1[40];
      if (v120 != v121)
      {
        do
        {
          long long v122 = *(_OWORD *)(v120 - 24);
          v117[-1].i8[0] = *(v120 - 8);
          *(_OWORD *)v117[-3].i8 = v122;
          v117 -= 3;
          v120 -= 24;
        }
        while (v120 != v121);
        v120 = *v4;
      }
      a1[39] = v117;
      a1[40] = v111;
      a1[41] = v119;
      if (v120) {
        operator delete(v120);
      }
    }
    else
    {
      v109[2] = 0;
      *int v109 = (int32x2_t)0x7FF8000000000000;
      v109[1] = vdup_n_s32(0x7FC00000u);
      v111 = v109 + 3;
    }
    a1[40] = v111;
    v111[-1].i8[0] = 7;
    if (!v162[0]) {
      sub_101A50B74();
    }
    *(double *)&v111[-3] = v49 + v164 * 1000000.0;
    if ((v163 & 2) != 0 && (LODWORD(v48) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      float v123 = hypot(v165 * 1000000.0, v48);
      *(float *)v111[-2].i32 = v123;
    }
  }
  v158[0] = 0;
  sub_1018C3D5C(a2, 50, v158);
  if (v158[0] && (v159 & 1) != 0 && (*(void *)&v63 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v124 = (int32x2_t *)a1[40];
    unint64_t v125 = a1[41];
    if ((unint64_t)v124 >= v125)
    {
      unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * (((char *)v124 - *v4) >> 3);
      unint64_t v128 = v127 + 1;
      if (v127 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v125 - (void)*v4) >> 3);
      if (2 * v129 > v128) {
        unint64_t v128 = 2 * v129;
      }
      if (v129 >= 0x555555555555555) {
        unint64_t v130 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v130 = v128;
      }
      BOOL v131 = (char *)sub_1000DA5D8(v5, v130);
      unint64_t v132 = (int32x2_t *)&v131[24 * v127];
      double v134 = &v131[24 * v133];
      v132[2] = 0;
      *unint64_t v132 = (int32x2_t)0x7FF8000000000000;
      v132[1] = vdup_n_s32(0x7FC00000u);
      v126 = v132 + 3;
      uint64_t v136 = (char *)a1[39];
      v135 = (char *)a1[40];
      if (v135 != v136)
      {
        do
        {
          long long v137 = *(_OWORD *)(v135 - 24);
          v132[-1].i8[0] = *(v135 - 8);
          *(_OWORD *)v132[-3].i8 = v137;
          v132 -= 3;
          v135 -= 24;
        }
        while (v135 != v136);
        v135 = *v4;
      }
      a1[39] = v132;
      a1[40] = v126;
      a1[41] = v134;
      if (v135) {
        operator delete(v135);
      }
    }
    else
    {
      v124[2] = 0;
      int32x2_t *v124 = (int32x2_t)0x7FF8000000000000;
      v124[1] = vdup_n_s32(0x7FC00000u);
      v126 = v124 + 3;
    }
    a1[40] = v126;
    v126[-1].i8[0] = 7;
    if (!v158[0]) {
      sub_101A50B74();
    }
    *(double *)&v126[-3] = v63 + v160 * 1000000.0;
    if ((v159 & 2) != 0 && (LODWORD(v64) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
    {
      float v138 = hypot(v161 * 1000000.0, v64);
      *(float *)v126[-2].i32 = v138;
    }
  }
  v154[0] = 0;
  sub_1018C3D5C(a2, 51, v154);
  if (v154[0] && (v155 & 1) != 0)
  {
    double v139 = v156 * 1000000.0;
    if ((v155 & 2) != 0) {
      float v140 = v157 * 1000000.0;
    }
    else {
      float v140 = NAN;
    }
    unint64_t v142 = a1[40];
    unint64_t v141 = a1[41];
    if (v142 >= v141)
    {
      unint64_t v144 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v142 - (void)*v4) >> 3);
      unint64_t v145 = v144 + 1;
      if (v144 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1001D7FD4();
      }
      unint64_t v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v141 - (void)*v4) >> 3);
      if (2 * v146 > v145) {
        unint64_t v145 = 2 * v146;
      }
      if (v146 >= 0x555555555555555) {
        unint64_t v147 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v147 = v145;
      }
      if (v147) {
        v148 = (char *)sub_1000DA5D8(v5, v147);
      }
      else {
        v148 = 0;
      }
      int v149 = (float *)&v148[24 * v144];
      v150 = &v148[24 * v147];
      *(double *)int v149 = v139;
      v149[2] = v140;
      v149[3] = NAN;
      *((unsigned char *)v149 + 16) = 10;
      float64x2_t v143 = (char *)(v149 + 6);
      unsigned __int8 v152 = (char *)a1[39];
      int v151 = (char *)a1[40];
      if (v151 != v152)
      {
        do
        {
          long long v153 = *(_OWORD *)(v151 - 24);
          *((unsigned char *)v149 - 8) = *(v151 - 8);
          *(_OWORD *)(v149 - 6) = v153;
          v149 -= 6;
          v151 -= 24;
        }
        while (v151 != v152);
        int v151 = *v4;
      }
      a1[39] = v149;
      a1[40] = v143;
      a1[41] = v150;
      if (v151) {
        operator delete(v151);
      }
    }
    else
    {
      *(double *)unint64_t v142 = v139;
      *(float *)(v142 + 8) = v140;
      *(_DWORD *)(v142 + 12) = 2143289344;
      *(unsigned char *)(v142 + 16) = 10;
      float64x2_t v143 = (char *)(v142 + 24);
    }
    a1[40] = v143;
  }
}

void sub_1018BBADC(qmi::MessageBase *a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  sub_1018C2DD4(a1, 29, (uint64_t)a2);
}

void sub_1018BBB0C(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_1017CF46C((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018BBB28()
{
}

_DWORD *sub_1018BBBC0(_DWORD *result, uint64_t a2)
{
  float v2 = *(float *)(a2 + 168);
  int v3 = *(unsigned __int8 *)(a2 + 8);
  if ((v3 - 5) < 2)
  {
    if (v2 > 25.0) {
      ++result[2];
    }
    uint64_t v4 = result + 5;
  }
  else if (v3 == 8)
  {
    if (v2 > 25.0) {
      ++result[1];
    }
    uint64_t v4 = result + 4;
  }
  else
  {
    if (v3 != 1) {
      return result;
    }
    if (v2 > 25.0) {
      ++*result;
    }
    uint64_t v4 = result + 3;
  }
  ++*v4;
  return result;
}

uint64_t sub_1018BBC50(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v17 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) > 0x1745D1745D1745DLL) {
      sub_1001D7FD4();
    }
    unint64_t v19 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0xBA2E8BA2E8BA2ELL) {
      unint64_t v20 = 0x1745D1745D1745DLL;
    }
    else {
      unint64_t v20 = v18;
    }
    v32[4] = v4;
    if (v20) {
      int v21 = (char *)sub_10017EBB8(v4, v20);
    }
    else {
      int v21 = 0;
    }
    unint64_t v22 = &v21[176 * v17];
    v32[0] = v21;
    v32[1] = v22;
    v32[3] = &v21[176 * v20];
    long long v23 = *(_OWORD *)(a2 + 80);
    long long v25 = *(_OWORD *)(a2 + 32);
    long long v24 = *(_OWORD *)(a2 + 48);
    *((_OWORD *)v22 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v22 + 5) = v23;
    *((_OWORD *)v22 + 2) = v25;
    *((_OWORD *)v22 + 3) = v24;
    long long v27 = *(_OWORD *)(a2 + 112);
    long long v26 = *(_OWORD *)(a2 + 128);
    long long v28 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(v22 + 137) = *(_OWORD *)(a2 + 137);
    *((_OWORD *)v22 + 7) = v27;
    *((_OWORD *)v22 + 8) = v26;
    *((_OWORD *)v22 + 6) = v28;
    long long v29 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v22 = *(_OWORD *)a2;
    *((_OWORD *)v22 + 1) = v29;
    uint64_t v30 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = 0;
    *((void *)v22 + 20) = v30;
    LODWORD(v30) = *(_DWORD *)(a2 + 168);
    *((_WORD *)v22 + 86) = *(_WORD *)(a2 + 172);
    *((_DWORD *)v22 + 42) = v30;
    v32[2] = v22 + 176;
    sub_10187B1B4(a1, v32);
    uint64_t v16 = a1[1];
    sub_10187B394((uint64_t)v32);
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 32);
    long long v10 = *(_OWORD *)(a2 + 48);
    long long v11 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v7 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v7 + 80) = v11;
    *(_OWORD *)(v7 + 32) = v9;
    *(_OWORD *)(v7 + 48) = v10;
    long long v12 = *(_OWORD *)(a2 + 96);
    long long v13 = *(_OWORD *)(a2 + 112);
    long long v14 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(v7 + 137) = *(_OWORD *)(a2 + 137);
    *(_OWORD *)(v7 + 112) = v13;
    *(_OWORD *)(v7 + 128) = v14;
    *(_OWORD *)(v7 + 96) = v12;
    uint64_t v15 = *(void *)(a2 + 160);
    *(void *)(a2 + 160) = 0;
    *(void *)(v7 + 160) = v15;
    LODWORD(v15) = *(_DWORD *)(a2 + 168);
    *(_WORD *)(v7 + 172) = *(_WORD *)(a2 + 172);
    *(_DWORD *)(v7 + 168) = v15;
    uint64_t v16 = v7 + 176;
    a1[1] = v7 + 176;
  }
  a1[1] = v16;
  return v16 - 176;
}

void sub_1018BBDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10187B394((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018BBE10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_10015E48C();
  }
  float v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_1018BBE60(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  long long v6 = *(long long *)((char *)a2 + 104);
  long long v7 = *(long long *)((char *)a2 + 120);
  long long v8 = *(long long *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(_OWORD *)(a1 + 136) = v8;
  *(_OWORD *)(a1 + 120) = v7;
  *(_OWORD *)(a1 + 104) = v6;
  long long v9 = *(long long *)((char *)a2 + 40);
  long long v10 = *(long long *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 56) = v10;
  *(_OWORD *)(a1 + 40) = v9;
  sub_1018C2948((void **)(a1 + 152));
  *(_OWORD *)(a1 + 152) = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  *((void *)a2 + 21) = 0;
  sub_1018C2984((void *)(a1 + 176));
  *(_OWORD *)(a1 + 176) = a2[11];
  *(void *)(a1 + 192) = *((void *)a2 + 24);
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  sub_1000F4EBC(a1 + 200, (__n128 *)((char *)a2 + 200));
  uint64_t v11 = *((void *)a2 + 28);
  *((void *)a2 + 28) = 0;
  uint64_t v12 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = v11;
  if (v12) {
    operator delete();
  }
  uint64_t v13 = *((void *)a2 + 29);
  *((void *)a2 + 29) = 0;
  uint64_t v14 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = v13;
  if (v14) {
    operator delete();
  }
  uint64_t v15 = *((void *)a2 + 30);
  *((void *)a2 + 30) = 0;
  uint64_t v16 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = v15;
  if (v16) {
    operator delete();
  }
  uint64_t v17 = *((void *)a2 + 31);
  *((void *)a2 + 31) = 0;
  uint64_t v18 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = v17;
  if (v18) {
    operator delete();
  }
  uint64_t v19 = *((void *)a2 + 32);
  *((void *)a2 + 32) = 0;
  uint64_t v20 = *(void *)(a1 + 256);
  *(void *)(a1 + 256) = v19;
  if (v20) {
    operator delete();
  }
  uint64_t v21 = *((void *)a2 + 33);
  *((void *)a2 + 33) = 0;
  uint64_t v22 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = v21;
  if (v22) {
    operator delete();
  }
  sub_1000F4EBC(a1 + 272, (__n128 *)a2 + 17);
  return a1;
}

uint64_t sub_1018BC018(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_10015E48C();
  }
  float v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_1018BC068(int *a1)
{
  if (a1[4] || *a1 < 5 || a1[2] < 3) {
    a1[7] = 0;
  }
  else {
    ++a1[7];
  }
  if (a1[3] || a1[1] < 3 || a1[2] < 3) {
    a1[6] = 0;
  }
  else {
    ++a1[6];
  }
  if (a1[5] || *a1 < 5 || a1[1] <= 2)
  {
    uint64_t result = 0;
    a1[8] = 0;
  }
  else
  {
    int v2 = a1[8];
    a1[8] = v2 + 1;
    if (v2 < 59)
    {
      uint64_t result = 0;
    }
    else
    {
      uint64_t result = sub_1018B4DB0();
      if (result)
      {
        a1[8] = 0;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        long long v4 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          int v5 = *a1;
          int v6 = a1[1];
          *(_DWORD *)buf = 67240448;
          int v17 = v5;
          __int16 v18 = 1026;
          int v19 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#gnssmeas,detected BeiDou tracking issue,strongGps,%{public}d,strongGal,%{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023444A0);
          }
          uint64_t v15 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaMeasurementProcessor::IssueMonitor::Detection CLEurekaMeasurementProcessor::IssueMonitor::detectIssue()", "%s\n", v15);
          if (v15 != (char *)buf) {
            free(v15);
          }
        }
        uint64_t result = 3;
      }
    }
  }
  if (a1[7] > 59)
  {
    a1[7] = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v8 = *a1;
      int v9 = a1[2];
      *(_DWORD *)buf = 67240448;
      int v17 = v8;
      __int16 v18 = 1026;
      int v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "#gnssmeas,detected Galileo tracking issue,strongGps,%{public}d,strongBds,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaMeasurementProcessor::IssueMonitor::Detection CLEurekaMeasurementProcessor::IssueMonitor::detectIssue()", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    uint64_t result = 2;
  }
  if (a1[6] >= 60)
  {
    a1[6] = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    long long v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v11 = a1[1];
      int v12 = a1[2];
      *(_DWORD *)buf = 67240448;
      int v17 = v11;
      __int16 v18 = 1026;
      int v19 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#gnssmeas,detected GPS tracking issue,strongGal,%{public}d,strongBds,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLEurekaMeasurementProcessor::IssueMonitor::Detection CLEurekaMeasurementProcessor::IssueMonitor::detectIssue()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    uint64_t result = 1;
  }
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  return result;
}

void sub_1018BC5FC(uint64_t a1, qmi::MessageBase *a2)
{
  v98[0] = 0;
  sub_101843A44(a2, 1, (uint64_t)v98);
  v161[0] = 0;
  sub_101843864(a2, 2, (uint64_t)v161);
  v159[0] = 0;
  sub_1017CC774(a2, 3, (uint64_t)v159);
  v157[0] = 0;
  sub_1017CC774(a2, 4, (uint64_t)v157);
  v156[0] = 0;
  sub_1018C3DF8(a2, 16, v156);
  v155[0] = 0;
  sub_1018C3E7C(a2, 17, v155);
  v154[0] = 0;
  sub_1018C4044(a2, 18, v154);
  if (!v159[0]) {
    goto LABEL_76;
  }
  if (!v160 || (v160 & 4) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v30 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      if (!v159[0]) {
        sub_101A50B74();
      }
      if (v98[0]) {
        int v31 = v99;
      }
      else {
        int v31 = -1;
      }
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)long long v122 = v31;
      *(_WORD *)&v122[4] = 2050;
      *(void *)&v122[6] = v160;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#poly,ignoring indication with delete flag,svid,%{public}d,flags_validity,%{public}llu", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      if (!v159[0]) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      if (v98[0]) {
        int v32 = v99;
      }
      else {
        int v32 = -1;
      }
      LODWORD(v102) = 67240448;
      HIDWORD(v102) = v32;
      *(_WORD *)unsigned int v103 = 2050;
      *(void *)&v103[2] = v160;
      long long v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v29);
      goto LABEL_126;
    }
    return;
  }
  if (v157[0] && (v160 & 1) != 0)
  {
    v97[0] = 0;
    sub_10183D22C(a2, 23, (uint64_t)v97);
    v96[0] = 0;
    sub_10183D22C(a2, 25, (uint64_t)v96);
    if (v97[0] && v96[0])
    {
      v120[0] = 0;
      sub_1017CC774(a2, 29, (uint64_t)v120);
      v94[0] = 0;
      sub_10183D22C(a2, 30, (uint64_t)v94);
      v92[0] = 0;
      sub_10183D22C(a2, 31, (uint64_t)v92);
      v90[0] = 0;
      sub_10183D22C(a2, 32, (uint64_t)v90);
      v88[0] = 0;
      sub_10183D22C(a2, 33, (uint64_t)v88);
      v86[0] = 0;
      sub_10183D22C(a2, 34, (uint64_t)v86);
      v84[0] = 0;
      sub_10183D22C(a2, 36, (uint64_t)v84);
      v82[0] = 0;
      sub_10183D22C(a2, 46, (uint64_t)v82);
      v80[0] = 0;
      sub_10183D22C(a2, 47, (uint64_t)v80);
      v78[0] = 0;
      sub_10183D22C(a2, 37, (uint64_t)v78);
      v76[0] = 0;
      sub_10183D22C(a2, 38, (uint64_t)v76);
      v74[0] = 0;
      sub_10183D22C(a2, 48, (uint64_t)v74);
      v72[0] = 0;
      sub_10183D22C(a2, 40, (uint64_t)v72);
      v71[0] = 0;
      sub_10183D22C(a2, 22, (uint64_t)v71);
      v69[0] = 0;
      sub_101843A44(a2, 43, (uint64_t)v69);
      v67[0] = 0;
      sub_1017CC710(a2, 44, (uint64_t)v67);
      v65[0] = 0;
      sub_1017CC710(a2, 45, (uint64_t)v65);
      long long v4 = &qword_102419000;
      int v5 = &qword_102419000;
      if (v98[0] && v161[0] && v71[0] && v120[0] && v156[0] && v155[0] && v154[0])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        int v6 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          if (!v98[0] || !v161[0] || !v157[0] || !v159[0]) {
            __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
          }
          double v7 = 999.0;
          if (v94[0]) {
            double v8 = v95 * 1000000.0;
          }
          else {
            double v8 = 999.0;
          }
          if (v92[0]) {
            double v9 = v93 * 1000000.0;
          }
          else {
            double v9 = 999.0;
          }
          if (v90[0]) {
            double v10 = v91 * 1000000.0;
          }
          else {
            double v10 = 999.0;
          }
          if (v88[0]) {
            double v11 = v89 * 1000000.0;
          }
          else {
            double v11 = 999.0;
          }
          if (v86[0]) {
            double v12 = v87 * 1000000.0;
          }
          else {
            double v12 = 999.0;
          }
          if (v84[0]) {
            double v13 = v85 * 1000000.0;
          }
          else {
            double v13 = 999.0;
          }
          if (v82[0]) {
            double v14 = v83 * 1000000.0;
          }
          else {
            double v14 = 999.0;
          }
          if (v80[0]) {
            double v15 = v81 * 1000000.0;
          }
          else {
            double v15 = 999.0;
          }
          if (v78[0]) {
            double v16 = v79 * 1000000.0;
          }
          else {
            double v16 = 999.0;
          }
          double v17 = v77 * 1000000.0;
          if (!v76[0]) {
            double v17 = 999.0;
          }
          if (v74[0]) {
            double v18 = v75 * 1000000.0;
          }
          else {
            double v18 = 999.0;
          }
          int v19 = v70;
          if (v72[0]) {
            double v7 = v73 * 1000000.0;
          }
          if (!v69[0]) {
            int v19 = -1;
          }
          if (v67[0]) {
            int v20 = v68;
          }
          else {
            int v20 = -1;
          }
          if (v65[0]) {
            int v21 = v66;
          }
          else {
            int v21 = -1;
          }
          *(_DWORD *)buf = 67113728;
          *(_DWORD *)long long v122 = v99;
          *(_WORD *)&v122[4] = 2048;
          *(double *)&v122[6] = v162;
          *(_WORD *)&v122[14] = 2048;
          *(void *)&v122[16] = v158;
          *(_WORD *)float v123 = 2048;
          *(void *)&v123[2] = v160;
          __int16 v124 = 2048;
          double v125 = v8;
          __int16 v126 = 2048;
          double v127 = v9;
          __int16 v128 = 2048;
          double v129 = v10;
          __int16 v130 = 2048;
          double v131 = v11;
          __int16 v132 = 2048;
          double v133 = v12;
          __int16 v134 = 2048;
          double v135 = v13;
          __int16 v136 = 2048;
          double v137 = v14;
          __int16 v138 = 2048;
          double v139 = v15;
          __int16 v140 = 2048;
          double v141 = v16;
          __int16 v142 = 2048;
          double v143 = v17;
          __int16 v144 = 2048;
          double v145 = v18;
          __int16 v146 = 2048;
          double v147 = v7;
          __int16 v148 = 1024;
          int v149 = v19;
          __int16 v150 = 1024;
          int v151 = v20;
          __int16 v152 = 1024;
          int v153 = v21;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssmeas,#poly,svid,%d,refTime.t0,%.3f,flags,%llu,flagsValidity,%llu,IscL1CA,%.3f,IscL2C,%.3f,IscL5I,%.3f,IscL5Q,%.3f,TgdGps,%.3f,TgdB1i,%.3f,TgdB1c,%.3f,IscB1c,%.3f,TgdB2,%.3f,TgdB2a,%.3f,tlvTgdNavic,%.3f,BgdE1E5a,%.3f,ApcRevGpsWeek,%d,ApcRefFreq,%d,EphSource,%d", buf, 0xB0u);
          int v5 = &qword_102419000;
          long long v4 = &qword_102419000;
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023444A0);
          }
          if (!v98[0] || !v161[0] || !v157[0] || !v159[0]) {
            __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
          }
          double v47 = 999.0;
          if (v94[0]) {
            double v48 = v95 * 1000000.0;
          }
          else {
            double v48 = 999.0;
          }
          if (v92[0]) {
            double v49 = v93 * 1000000.0;
          }
          else {
            double v49 = 999.0;
          }
          if (v90[0]) {
            double v50 = v91 * 1000000.0;
          }
          else {
            double v50 = 999.0;
          }
          if (v88[0]) {
            double v51 = v89 * 1000000.0;
          }
          else {
            double v51 = 999.0;
          }
          if (v86[0]) {
            double v52 = v87 * 1000000.0;
          }
          else {
            double v52 = 999.0;
          }
          if (v84[0]) {
            double v53 = v85 * 1000000.0;
          }
          else {
            double v53 = 999.0;
          }
          if (v82[0]) {
            double v54 = v83 * 1000000.0;
          }
          else {
            double v54 = 999.0;
          }
          if (v80[0]) {
            double v55 = v81 * 1000000.0;
          }
          else {
            double v55 = 999.0;
          }
          if (v78[0]) {
            double v56 = v79 * 1000000.0;
          }
          else {
            double v56 = 999.0;
          }
          if (v76[0]) {
            double v57 = v77 * 1000000.0;
          }
          else {
            double v57 = 999.0;
          }
          if (v74[0]) {
            double v58 = v75 * 1000000.0;
          }
          else {
            double v58 = 999.0;
          }
          if (v72[0]) {
            double v47 = v73 * 1000000.0;
          }
          if (v69[0]) {
            int v59 = v70;
          }
          else {
            int v59 = -1;
          }
          if (v67[0]) {
            int v60 = v68;
          }
          else {
            int v60 = -1;
          }
          if (v65[0]) {
            int v61 = v66;
          }
          else {
            int v61 = -1;
          }
          LODWORD(v102) = 67113728;
          HIDWORD(v102) = v99;
          *(_WORD *)unsigned int v103 = 2048;
          *(double *)&v103[2] = v162;
          *(_WORD *)&v103[10] = 2048;
          *(void *)&v103[12] = v158;
          *(_WORD *)&v103[20] = 2048;
          *(void *)&v103[22] = v160;
          *(_WORD *)&v103[30] = 2048;
          *(double *)float32x2_t v104 = v48;
          *(_WORD *)&v104[8] = 2048;
          *(double *)&v104[10] = v49;
          *(_WORD *)&v104[18] = 2048;
          *(double *)&v104[20] = v50;
          *(_WORD *)&v104[28] = 2048;
          *(double *)&v104[30] = v51;
          *(_WORD *)&v104[38] = 2048;
          *(double *)&v104[40] = v52;
          *(_WORD *)long long v105 = 2048;
          *(double *)&v105[2] = v53;
          *(_WORD *)&v105[10] = 2048;
          *(double *)&v105[12] = v54;
          __int16 v106 = 2048;
          *(double *)char v107 = v55;
          *(_WORD *)&v107[8] = 2048;
          double v108 = v56;
          *(_WORD *)int v109 = 2048;
          *(double *)&v109[2] = v57;
          __int16 v110 = 2048;
          double v111 = v58;
          __int16 v112 = 2048;
          double v113 = v47;
          __int16 v114 = 1024;
          int v115 = v59;
          __int16 v116 = 1024;
          int v117 = v60;
          __int16 v118 = 1024;
          int v119 = v61;
          long long v62 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v62);
          if (v62 != (char *)buf) {
            free(v62);
          }
          int v5 = &qword_102419000;
        }
        LODWORD(v102) = 0;
        WORD2(v102) = 0;
        BYTE6(v102) = 127;
        *(void *)unsigned int v103 = 0x7FF8000000000000;
        v103[8] = 0;
        *(_OWORD *)&v103[16] = 0u;
        *(_OWORD *)float32x2_t v104 = 0u;
        *(int64x2_t *)&v104[16] = vdupq_n_s64(0x7FF8000000000000uLL);
        *(_OWORD *)&v104[32] = *(_OWORD *)&v104[16];
        *(int32x2_t *)long long v105 = vdup_n_s32(0x7FC00000u);
        *(void *)&v105[8] = 0;
        *(_WORD *)&v105[16] = 0;
        double v108 = 0.0;
        *(void *)int v109 = 0;
        *(void *)&v107[2] = 0;
        v109[8] = 0;
        if (!v98[0]) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        unint64_t v22 = sub_1018B8BDC(3, v99, 1);
        if (!v23) {
          goto LABEL_173;
        }
        LODWORD(v102) = v22;
        BYTE6(v102) = BYTE6(v22);
        WORD2(v102) = WORD2(v22);
        if (!v157[0]) {
          __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
        }
        if (v158)
        {
          long long v24 = v5;
        }
        else
        {
          if (!sub_100740A24()) {
            goto LABEL_130;
          }
          if (!v65[0])
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023444A0);
            }
            __int16 v43 = v5[123];
            if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
            {
              if (!v157[0] || !v159[0]) {
                __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
              }
              *(_DWORD *)buf = 134218240;
              *(void *)long long v122 = v158;
              *(_WORD *)&v122[8] = 2048;
              *(void *)&v122[10] = v160;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,missing eph_source,flags,%llu,flagsValidity,%llu", buf, 0x16u);
            }
            if (!sub_10013D1A0(115, 0)) {
              goto LABEL_173;
            }
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023444A0);
            }
            if (!v157[0] || !v159[0]) {
              __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
            }
            int v100 = 134218240;
            *(void *)uint64_t v101 = v158;
            *(_WORD *)&v101[8] = 2048;
            *(void *)&v101[10] = v160;
            int v42 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v42);
            goto LABEL_197;
          }
          if (v66 == 1)
          {
LABEL_130:
            long long v24 = v5;
            char v25 = 1;
            goto LABEL_131;
          }
          if (v66 != 3)
          {
            if (v66 != 2)
            {
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023444A0);
              }
              unsigned int v46 = v5[123];
              if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
              {
                if (!v65[0]) {
                  __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
                }
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)long long v122 = v66;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,unexpected eph_source,%u", buf, 8u);
              }
              if (!sub_10013D1A0(115, 0)) {
                goto LABEL_173;
              }
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023444A0);
              }
              if (!v65[0]) {
                __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
              }
              int v100 = 67109120;
              *(_DWORD *)uint64_t v101 = v66;
              int v42 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v42);
LABEL_197:
              if (v42 != (char *)buf) {
                free(v42);
              }
LABEL_173:
              sub_101876990(&v102);
              return;
            }
            long long v24 = v5;
            char v25 = 2;
LABEL_131:
            v103[8] = v25;
            if (v102 != 16)
            {
              double v37 = 0.0;
              if (v102 == 2)
              {
                LOBYTE(v64) = 0;
                sub_1017CC7D8(a2, 19, &v64);
                if ((_BYTE)v64)
                {
                  if (BYTE1(v64) - 15 > 0xFFFFFFF1)
                  {
                    BYTE6(v102) = BYTE1(v64) - 8;
                  }
                  else
                  {
                    int v63 = BYTE1(v64) - 8;
                    if (v4[122] != -1) {
                      dispatch_once(&qword_1024193D0, &stru_1023444A0);
                    }
                    unint64_t v39 = v24[123];
                    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 67240192;
                      *(_DWORD *)long long v122 = v63;
                      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,oob fcn,%{public}d", buf, 8u);
                    }
                    if (sub_10013D1A0(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (v4[122] != -1) {
                        dispatch_once(&qword_1024193D0, &stru_1023444A0);
                      }
                      int v100 = 67240192;
                      *(_DWORD *)uint64_t v101 = v63;
                      unint64_t v40 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v40);
                      if (v40 != (char *)buf) {
                        free(v40);
                      }
                    }
                  }
                }
LABEL_171:
                if (v161[0])
                {
                  *(double *)unsigned int v103 = (v37 + v162) * 1000000000.0;
                  operator new();
                }
                __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
              }
              if (v102 != 1) {
                goto LABEL_171;
              }
            }
            sub_10187A10C(*(void *)(a1 + 632), (uint64_t)&v100);
            if (v101[12])
            {
              if (!v161[0]) {
                __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
              }
              int v38 = v100 - (v162 - *(double *)&v101[4] > 302400.0);
              if (*(double *)&v101[4] - v162 > 302400.0) {
                ++v38;
              }
              double v37 = (double)(604800 * v38);
              goto LABEL_171;
            }
            if (v4[122] != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023444A0);
            }
            unint64_t v41 = v24[123];
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#poly,#Warning,dropping indication due to unreliable approximate GPS time", buf, 2u);
            }
            if (!sub_10013D1A0(115, 2)) {
              goto LABEL_173;
            }
            bzero(buf, 0x65CuLL);
            if (v4[122] != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023444A0);
            }
            LOWORD(v64) = 0;
            int v42 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v42);
            goto LABEL_197;
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023444A0);
          }
          unsigned int v44 = v5[123];
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            if (!v65[0]) {
              __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
            }
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)long long v122 = v66;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,network injected eph,%u", buf, 8u);
          }
          long long v24 = v5;
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023444A0);
            }
            if (!v65[0]) {
              __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
            }
            int v100 = 67109120;
            *(_DWORD *)uint64_t v101 = v66;
            int v45 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v45);
            if (v45 != (char *)buf) {
              free(v45);
            }
            char v25 = 4;
            long long v4 = &qword_102419000;
            goto LABEL_131;
          }
        }
        char v25 = 4;
        goto LABEL_131;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unint64_t v36 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67241728;
        *(_DWORD *)long long v122 = v98[0];
        *(_WORD *)&v122[4] = 1026;
        *(_DWORD *)&v122[6] = v161[0];
        *(_WORD *)&v122[10] = 1026;
        *(_DWORD *)&v122[12] = v71[0];
        *(_WORD *)&v122[16] = 1026;
        *(_DWORD *)&v122[18] = v120[0];
        *(_WORD *)&v122[22] = 1026;
        *(_DWORD *)float v123 = v156[0];
        *(_WORD *)&v123[4] = 1026;
        *(_DWORD *)&v123[6] = v155[0];
        __int16 v124 = 1026;
        LODWORD(v125) = v154[0];
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,missing required tlv,svid,%{public}d,reftime,%{public}d,posunc,%{public}d,health,%{public}d,coeff,%{public}d,%{public}d,%{public}d", buf, 0x2Cu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        LODWORD(v102) = 67241728;
        HIDWORD(v102) = v98[0];
        *(_WORD *)unsigned int v103 = 1026;
        *(_DWORD *)&v103[2] = v161[0];
        *(_WORD *)&v103[6] = 1026;
        *(_DWORD *)&v103[8] = v71[0];
        *(_WORD *)&v103[12] = 1026;
        *(_DWORD *)&v103[14] = v120[0];
        *(_WORD *)&v103[18] = 1026;
        *(_DWORD *)&v103[20] = v156[0];
        *(_WORD *)&v103[24] = 1026;
        *(_DWORD *)&v103[26] = v155[0];
        *(_WORD *)&v103[30] = 1026;
        *(_DWORD *)float32x2_t v104 = v154[0];
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v29);
LABEL_126:
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      float v33 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        if (v98[0]) {
          int v34 = v99;
        }
        else {
          int v34 = -1;
        }
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)long long v122 = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#gnssmeas,#poly,dropping ind without iono or tropo,svid,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        if (v98[0]) {
          int v35 = v99;
        }
        else {
          int v35 = -1;
        }
        LODWORD(v102) = 67240192;
        HIDWORD(v102) = v35;
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v29);
        goto LABEL_126;
      }
    }
  }
  else
  {
LABEL_76:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    long long v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = v160;
      if (!v159[0]) {
        uint64_t v27 = 0;
      }
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)long long v122 = v157[0];
      *(_WORD *)&v122[4] = 1026;
      *(_DWORD *)&v122[6] = v159[0];
      *(_WORD *)&v122[10] = 2050;
      *(void *)&v122[12] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#gnssmeas,#poly,missing source,tlvs,%{public}d,%{public}d,flags_validity,%{public}llu", buf, 0x18u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      uint64_t v28 = v160;
      if (!v159[0]) {
        uint64_t v28 = 0;
      }
      LODWORD(v102) = 67240704;
      HIDWORD(v102) = v157[0];
      *(_WORD *)unsigned int v103 = 1026;
      *(_DWORD *)&v103[2] = v159[0];
      *(_WORD *)&v103[6] = 2050;
      *(void *)&v103[8] = v28;
      long long v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsSvPolynomialReport(const pds::GnssMeasSvPolynomialIndication::Indication &, GNSS::SatelliteVisibilityReport &, GNSS::GnssSessionData &)", "%s\n", v29);
      goto LABEL_126;
    }
  }
}

void sub_1018BE5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
}

_OWORD *sub_1018BE6EC(void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  double v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((char *)v7 - (unsigned char *)*a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      double v14 = (char *)sub_1001D9EDC(v4, v13);
    }
    else {
      double v14 = 0;
    }
    double v15 = &v14[32 * v10];
    double v16 = &v14[32 * v13];
    long long v17 = a2[1];
    *(_OWORD *)double v15 = *a2;
    *((_OWORD *)v15 + 1) = v17;
    double v9 = v15 + 32;
    int v19 = (char *)*a1;
    double v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while (v18 != v19);
      double v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = a2[1];
    *double v7 = *a2;
    v7[1] = v8;
    double v9 = v7 + 2;
  }
  a1[1] = v9;
  return v9 - 2;
}

uint64_t sub_1018BE7DC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)a1 = v4;
  sub_1000F4EBC(a1 + 24, (__n128 *)((char *)a2 + 24));
  uint64_t v5 = *((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v5;
  if (v6) {
    operator delete();
  }
  long long v7 = *(long long *)((char *)a2 + 56);
  long long v8 = *(long long *)((char *)a2 + 72);
  long long v9 = *(long long *)((char *)a2 + 88);
  *(_WORD *)(a1 + 104) = *((_WORD *)a2 + 52);
  *(_OWORD *)(a1 + 88) = v9;
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  sub_1000F4EBC(a1 + 112, (__n128 *)a2 + 7);
  *(unsigned char *)(a1 + 136) = *((unsigned char *)a2 + 136);
  return a1;
}

uint64_t sub_1018BE878(uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v4 = sub_10187B420(a1, (uint64_t)a2);
  }
  else
  {
    sub_1018C4460((uint64_t)a1, a2);
    uint64_t v4 = v3 + 144;
  }
  a1[1] = v4;
  return v4 - 144;
}

void sub_1018BE8BC(uint64_t *a1)
{
  if (a1[85])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    float v33 = a1 + 85;
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *(void *)(*v33 + 24);
      *(_DWORD *)buf = 134349056;
      uint64_t v35 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gnssmeas,dumping svinfo cache,sz,%{public}zu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      uint64_t v30 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::dumpPreRavenCacheIntoNextCallback()", "%s\n", v30);
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
    uint64_t v4 = *v33;
    uint64_t v5 = *(void **)(*v33 + 16);
    if (v5)
    {
      unint64_t v6 = a1[37];
      do
      {
        long long v7 = (long long *)(v5 + 3);
        if (v6 >= a1[38])
        {
          unint64_t v6 = sub_10187B420(a1 + 36, (uint64_t)v7);
        }
        else
        {
          sub_1018C4460((uint64_t)(a1 + 36), v7);
          v6 += 144;
        }
        a1[37] = v6;
        uint64_t v5 = (void *)*v5;
      }
      while (v5);
      uint64_t v4 = *v33;
    }
    if (*(unsigned char *)(v4 + 80)) {
      operator new();
    }
    if (*(void *)(*v33 + 112))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      long long v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(*v33 + 112);
        *(_DWORD *)buf = 134349056;
        uint64_t v35 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gnssmeas,dumping apc_sv_offset cache,sz,%{public}zu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        int v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::dumpPreRavenCacheIntoNextCallback()", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
    }
    uint64_t v10 = *(uint64_t **)(*v33 + 104);
    if (v10)
    {
      unint64_t v11 = (char **)(a1 + 48);
      uint64_t v12 = (unint64_t *)(a1 + 50);
      unint64_t v13 = a1[49];
      do
      {
        double v14 = (long long *)(v10 + 3);
        if (v13 >= *v12)
        {
          unint64_t v17 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - (void)*v11) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0x666666666666666) {
            sub_1001D7FD4();
          }
          if (0x999999999999999ALL * ((uint64_t)(*v12 - (void)*v11) >> 3) > v18) {
            unint64_t v18 = 0x999999999999999ALL * ((uint64_t)(*v12 - (void)*v11) >> 3);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v12 - (void)*v11) >> 3) >= 0x333333333333333) {
            unint64_t v19 = 0x666666666666666;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            long long v20 = (char *)sub_1002E5328((uint64_t)(a1 + 50), v19);
          }
          else {
            long long v20 = 0;
          }
          int v21 = &v20[40 * v17];
          long long v22 = *v14;
          long long v23 = *(_OWORD *)(v10 + 5);
          *((void *)v21 + 4) = v10[7];
          *(_OWORD *)int v21 = v22;
          *((_OWORD *)v21 + 1) = v23;
          char v25 = (char *)a1[48];
          long long v24 = (char *)a1[49];
          uint64_t v26 = (uint64_t)v21;
          if (v24 != v25)
          {
            do
            {
              long long v27 = *(_OWORD *)(v24 - 40);
              long long v28 = *(_OWORD *)(v24 - 24);
              *(void *)(v26 - 8) = *((void *)v24 - 1);
              *(_OWORD *)(v26 - 24) = v28;
              *(_OWORD *)(v26 - 40) = v27;
              v26 -= 40;
              v24 -= 40;
            }
            while (v24 != v25);
            long long v24 = *v11;
          }
          unint64_t v13 = (unint64_t)(v21 + 40);
          a1[48] = v26;
          a1[49] = (uint64_t)(v21 + 40);
          a1[50] = (uint64_t)&v20[40 * v19];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          long long v15 = *v14;
          long long v16 = *(_OWORD *)(v10 + 5);
          *(void *)(v13 + 32) = v10[7];
          *(_OWORD *)unint64_t v13 = v15;
          *(_OWORD *)(v13 + 16) = v16;
          v13 += 40;
        }
        a1[49] = v13;
        uint64_t v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
    sub_101835390(v33, 0);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    long long v29 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#gnssmeas,dumping svinfo cache,empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      int v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::dumpPreRavenCacheIntoNextCallback()", "%s\n", v32);
      if (v32 != (char *)buf) {
        free(v32);
      }
    }
  }
}

void sub_1018BEF2C(uint64_t a1, qmi::MessageBase *a2)
{
  sub_10187A10C(*(void *)(a1 + 632), (uint64_t)&v9);
  if (v10)
  {
    if (v9 > 1355)
    {
      LOBYTE(v8) = 0;
      sub_1017CC710(a2, 16, (uint64_t)&v8);
      v15[0] = 0;
      sub_1018C44F4(a2, 17, v15);
      if ((_BYTE)v8 && v15[0]) {
        operator new();
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240448;
        int v18 = v8;
        __int16 v19 = 1026;
        int v20 = v15[0];
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#timeconv,missing gps/ls,%{public}d,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        int v11 = 67240448;
        int v12 = v8;
        __int16 v13 = 1026;
        LODWORD(v14) = v15[0];
        long long v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsTimeConvReport(const pds::GnssTimeConvIndication::Indication &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      v15[0] = 0;
      sub_1018C46F0(a2, 18, v15);
      if (v15[0]) {
        operator new();
      }
      v15[0] = 0;
      sub_1018C4800(a2, 20, v15);
      if (v15[0]) {
        operator new();
      }
      v15[0] = 0;
      sub_1018C4904(a2, 23, v15);
      if (v15[0]) {
        operator new();
      }
      v15[0] = 0;
      sub_1018C4A34(a2, 26, (uint64_t)v15);
      if (v15[0] && !v16) {
        operator new();
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      uint64_t v3 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67240192;
        int v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gnssmeas,#timeconv,bad week,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        int v11 = 67240192;
        int v12 = v9;
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsTimeConvReport(const pds::GnssTimeConvIndication::Indication &)", "%s\n", v4);
LABEL_42:
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gnssmeas,#timeconv,#Warning,requires time assistance", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      LOWORD(v11) = 0;
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsTimeConvReport(const pds::GnssTimeConvIndication::Indication &)", "%s\n", v4);
      goto LABEL_42;
    }
  }
}

int64_t sub_1018C0698(double *a1)
{
  double v1 = a1[1];
  uint64_t v2 = vcvtmd_s64_f64(v1) + 86400 * (*(int *)a1 - 1);
  v4.var0 = 0;
  v4.var1 = 0.0;
  CNTimeSpan::SetTimeSpan(&v4, v2, v1 - (double)(uint64_t)floor(v1));
  return v4.var0;
}

void sub_1018C06F0(uint64_t a1, double a2, double a3)
{
  uint64_t v9 = 0;
  sub_1004BD8CC((int *)&v9 + 1, &v9, a2);
  BOOL v5 = sub_1004BDA4C(SHIDWORD(v9), v9);
  if (a3 >= 0.0 && !v5)
  {
    sub_10187A1B8(*(void *)(a1 + 632), 604800000000000 * HIDWORD(v9) + 1000000 * v9, (unint64_t)(a3 * 1000000000.0));
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    long long v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssmeas,bad injectTimeAssistance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::injectTimeAssistance(double, double)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1018C08E8(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(*(void *)(a2 + 24) + 1) < 2
    || (unint64_t v4 = *(void *)(a2 + 48), v4 + 1 < 2)
    || (unint64_t)(*(void *)(a2 + 56) + 1) <= 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    BOOL v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a2 + 24);
      uint64_t v7 = *(void *)(a2 + 48);
      uint64_t v8 = *(void *)(a2 + 56);
      *(_DWORD *)buf = 134349568;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v27 = 2050;
      uint64_t v28 = v7;
      __int16 v29 = 2050;
      uint64_t v30 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#rxClockConv,out of range pulse time,%{public}llu,%{public}llu,%{public}llu", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v15 = *(void *)(a2 + 24);
    uint64_t v16 = *(void *)(a2 + 48);
    uint64_t v17 = *(void *)(a2 + 56);
    *(_DWORD *)int v21 = 134349568;
    *(void *)&v21[4] = v15;
    __int16 v22 = 2050;
    uint64_t v23 = v16;
    __int16 v24 = 2050;
    uint64_t v25 = v17;
LABEL_27:
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::injectTimeMarkPulseTime(const GNSS::TimeTransferPulseTime &)", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
    return;
  }
  double v19 = 0.0;
  double v20 = 0.0;
  *(void *)buf = sub_1000D3D90(v4);
  if (sub_100B01398(a1 + 560, (double *)buf, &v20)
    && (*(void *)int v21 = sub_1000D3D90(*(void *)(a2 + 56)), sub_100B01398(a1 + 560, (double *)v21, &v19)))
  {
    double v9 = (v20 + v19) * 0.5;
    sub_1018C0CC8(a1 + 640, *(void *)a1, *(void *)(a2 + 24), v9, vabdd_f64(v19, v20));
    if ((*(unsigned char *)(a1 + 712) || sub_101822038(a2)) && *(float *)(a2 + 8) < 500000000.0) {
      sub_10187A1B8(*(void *)(a1 + 632), *(void *)a2, (unint64_t)(v9 * 1000000000.0));
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    char v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = *(void *)(a2 + 48);
      uint64_t v12 = *(void *)(a2 + 56);
      *(_DWORD *)buf = 134349312;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v27 = 2050;
      uint64_t v28 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#rxClockConv,unable to conv pulse to mct,%{public}llu,%{public}llu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      uint64_t v13 = *(void *)(a2 + 48);
      uint64_t v14 = *(void *)(a2 + 56);
      *(_DWORD *)int v21 = 134349312;
      *(void *)&v21[4] = v13;
      __int16 v22 = 2050;
      uint64_t v23 = v14;
      goto LABEL_27;
    }
  }
}

void sub_1018C0CC8(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  if (sub_1018BAA04(a1, a3))
  {
    double v10 = a4 + (double)(unint64_t)a3 * -0.000000001;
    if (*(unsigned char *)(a1 + 32))
    {
      double v11 = *(double *)a1;
      double v12 = *(double *)(a1 + 16) + vabdd_f64(a4, *(double *)(a1 + 8)) * 0.00002 + a5 + 0.001;
      if (vabdd_f64(v10, *(double *)a1) / v12 > 50.0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        double v13 = v10 - v11;
        uint64_t v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134349824;
          double v22 = v13;
          __int16 v23 = 2050;
          double v24 = v12;
          __int16 v25 = 2050;
          double v26 = v10;
          __int16 v27 = 2050;
          double v28 = a5 + 0.001;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "#rxClockConv,disagreement,%{public}.3f,%{public}.3f,newRxClockToMct,%{public}.4f,newUncSec,%{public}.4f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023444A0);
          }
          double v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void ReceiverClockConversion::feedTimemark(dispatch_queue_t, const uint64_t, const double, const double)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        sub_10187A1C8(a2, (uint64_t)"RxClockConv", (uint64_t)"TimemarkInconsistency", 0);
      }
    }
    *(double *)a1 = v10;
    *(double *)(a1 + 8) = a4;
    *(double *)(a1 + 16) = a5 + 0.001;
    *(unsigned char *)(a1 + 32) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v16 = *(double *)a1;
      double v17 = *(double *)(a1 + 16);
      *(_DWORD *)buf = 134349312;
      double v22 = v16;
      __int16 v23 = 2050;
      double v24 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#rxClockConv,method,timemark,rxClockToMct,%{public}.4f,uncSec,%{public}.4f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_24:
        double v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void ReceiverClockConversion::feedTimemark(dispatch_queue_t, const uint64_t, const double, const double)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
        return;
      }
LABEL_30:
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
      goto LABEL_24;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      double v22 = *(double *)&a3;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#rxClockConv,feedTimemark,invalid rxClockNs,%{public}llu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_24;
      }
      goto LABEL_30;
    }
  }
}

double sub_1018C11E0(uint64_t a1)
{
  sub_101876A40((uint64_t)v3);
  *(_OWORD *)(a1 + 776) = v3[0];
  double result = *(double *)((char *)v3 + 9);
  *(_OWORD *)(a1 + 785) = *(_OWORD *)((char *)v3 + 9);
  return result;
}

void sub_1018C1224(uint64_t a1, qmi::MessageBase *a2)
{
  unint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  v30[0] = 0;
  sub_1018C4B94(a2, 16, (uint64_t)v30);
  if (v30[0]) {
    *(void *)&long long v26 = 604800000000000 * v31 + 1000000 * v32;
  }
  v24[0] = 0;
  sub_10183D22C(a2, 17, (uint64_t)v24);
  v22[0] = 0;
  sub_10183D22C(a2, 18, (uint64_t)v22);
  v20[0] = 0;
  sub_10183D22C(a2, 19, (uint64_t)v20);
  v18[0] = 0;
  sub_10183D22C(a2, 20, (uint64_t)v18);
  v16[0] = 0;
  sub_10183D22C(a2, 21, (uint64_t)v16);
  v14[0] = 0;
  sub_10183D22C(a2, 22, (uint64_t)v14);
  v12[0] = 0;
  sub_10183D22C(a2, 23, (uint64_t)v12);
  v10[0] = 0;
  sub_10183D22C(a2, 24, (uint64_t)v10);
  if (!v24[0] || !v22[0] || !v20[0] || !v18[0] || !v16[0] || !v14[0] || !v12[0] || !v10[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gnssmeas,klobuchar,missing expected TLV", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_30:
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsKlobucharParamReport(const pds::GnssKlobucharParamIndication::Indication &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return;
    }
LABEL_32:
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
    goto LABEL_30;
  }
  *((void *)&v26 + 1) = __PAIR64__(v23, v25);
  *(void *)&long long v27 = __PAIR64__(v19, v21);
  *((void *)&v27 + 1) = __PAIR64__(v15, v17);
  unint64_t v28 = __PAIR64__(v11, v13);
  if (sub_100D695E8((float *)&v26))
  {
    uint64_t v4 = *(void *)(a1 + 680);
    if (!v4) {
      operator new();
    }
    int v5 = *(unsigned __int8 *)(v4 + 80);
    long long v6 = v27;
    *(_OWORD *)(v4 + 40) = v26;
    *(_OWORD *)(v4 + 56) = v6;
    *(void *)(v4 + 72) = v28;
    if (!v5) {
      *(unsigned char *)(v4 + 80) = 1;
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gnssmeas,klobuchar,invalid params", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_30;
    }
    goto LABEL_32;
  }
}

void sub_1018C16C4(void *a1, qmi::MessageBase *a2)
{
  char v65 = 0;
  sub_1017CC7D8(a2, 1, &v65);
  v63[0] = 0;
  sub_101843A44(a2, 17, (uint64_t)v63);
  v61[0] = 0;
  sub_1017CC710(a2, 18, (uint64_t)v61);
  sub_1018C2470(a2, v83);
  if (!v65 || !v63[0] || !v61[0] || !v83[0])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    unsigned int v46 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,missing expected TLVs", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_101;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    *(_WORD *)std::string __p = 0;
    double v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v47);
LABEL_117:
    if (v47 != buf) {
      free(v47);
    }
    goto LABEL_101;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023444A0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    if (!v65 || !v63[0] || !v61[0]) {
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    *(_DWORD *)buf = 67109632;
    *(_DWORD *)&uint8_t buf[4] = v66;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v64;
    LOWORD(v76) = 1024;
    *(_DWORD *)((char *)&v76 + 2) = v62;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssmeas,apc report,apc_system,%d,rev_gps_week,%d,apc_ref_freq,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    if (!v65 || !v63[0] || !v61[0]) {
      __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
    }
    *(_DWORD *)std::string __p = 67109632;
    *(_DWORD *)&__p[4] = v66;
    *(_WORD *)&__p[8] = 1024;
    *(_DWORD *)&__p[10] = v64;
    LOWORD(v68) = 1024;
    *(_DWORD *)((char *)&v68 + 2) = v62;
    double v49 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v49);
    if (v49 != buf) {
      free(v49);
    }
  }
  if (!v65) {
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  }
  int v5 = v66;
  if (sub_100740B14()) {
    unsigned int v6 = 7;
  }
  else {
    unsigned int v6 = 6;
  }
  if (v6 <= (v5 - 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    double v48 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,bad qmiApcSystem,%{public}d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_101;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    *(_DWORD *)std::string __p = 67240192;
    *(_DWORD *)&__p[4] = v5;
    double v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v47);
    goto LABEL_117;
  }
  if (!v61[0]) {
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  }
  char v7 = sub_1018B9190(v62);
  if (!v83[0]) {
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  }
  uint64_t v8 = v84;
  uint64_t v50 = v85;
  if (v84 != v85)
  {
    char v9 = v7;
    double v51 = (float64_t **)(a1 + 48);
    float64x2_t v53 = (float64x2_t)vdupq_n_s64(0x3F50624DD2F1A9FCuLL);
    while (1)
    {
      int v10 = sub_1018B9370(v5, *(_DWORD *)v8);
      unsigned int v11 = *(unsigned __int16 **)(v8 + 8);
      double v12 = *(unsigned __int16 **)(v8 + 16);
      if (v11 != v12) {
        break;
      }
LABEL_86:
      v8 += 32;
      if (v8 == v50) {
        goto LABEL_101;
      }
    }
    int v13 = v10;
    uint64_t v52 = (char)v10 - 1;
    while (1)
    {
      unsigned int v14 = *v11;
      unint64_t v59 = sub_1018B8BDC(v5, v14, 0);
      int v60 = v15;
      if (!(_BYTE)v15) {
        break;
      }
      *(_DWORD *)((char *)v56.f64 + 3) = *(_DWORD *)((char *)&v59 + 3);
      LODWORD(v56.f64[0]) = v59;
      LOBYTE(v56.f64[1]) = v13;
      BYTE1(v56.f64[1]) = v9;
      float64x2_t v57 = vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v11 + 2)), v53);
      double v58 = *((float *)v11 + 3) * 0.001;
      if (!sub_100D69720((uint64_t)&v56))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023444A0);
        }
        double v22 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#gnssmeas,apc_sv_offset,invalid params", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_70;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_34;
        }
LABEL_84:
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
LABEL_34:
        *(_WORD *)std::string __p = 0;
        unsigned int v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v21);
        goto LABEL_82;
      }
      uint64_t v16 = a1[85];
      if (v16)
      {
        *(_DWORD *)buf = v13 | (v14 << 8);
        *(void *)std::string __p = buf;
        unsigned int v17 = sub_1018C5444(v16 + 88, (unsigned int *)buf, (uint64_t)&unk_101D0B290, (_DWORD **)__p);
        double v18 = v58;
        float64x2_t v19 = v57;
        *(float64x2_t *)(v17 + 24) = v56;
        *(float64x2_t *)(v17 + 40) = v19;
        *((double *)v17 + 7) = v18;
      }
      else
      {
        unint64_t v23 = a1[49];
        unint64_t v24 = a1[50];
        if (v23 >= v24)
        {
          unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - (void)*v51) >> 3);
          unint64_t v29 = v28 + 1;
          if (v28 + 1 > 0x666666666666666) {
            sub_1001D7FD4();
          }
          unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (void)*v51) >> 3);
          if (2 * v30 > v29) {
            unint64_t v29 = 2 * v30;
          }
          if (v30 >= 0x333333333333333) {
            unint64_t v31 = 0x666666666666666;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31) {
            unsigned int v32 = (char *)sub_1002E5328((uint64_t)(a1 + 50), v31);
          }
          else {
            unsigned int v32 = 0;
          }
          float v33 = (float64x2_t *)&v32[40 * v28];
          float64x2_t v34 = v56;
          float64x2_t v35 = v57;
          v33[2].f64[0] = v58;
          *float v33 = v34;
          v33[1] = v35;
          double v37 = (float64_t *)a1[48];
          unint64_t v36 = (float64_t *)a1[49];
          int v38 = v33;
          if (v36 != v37)
          {
            do
            {
              float64x2_t v39 = *(float64x2_t *)(v36 - 5);
              float64x2_t v40 = *(float64x2_t *)(v36 - 3);
              v38[-1].f64[1] = *(v36 - 1);
              *(float64x2_t *)((char *)v38 - 24) = v40;
              *(float64x2_t *)((char *)v38 - 40) = v39;
              int v38 = (float64x2_t *)((char *)v38 - 40);
              v36 -= 5;
            }
            while (v36 != v37);
            unint64_t v36 = *v51;
          }
          long long v27 = (char *)&v33[2].f64[1];
          a1[48] = v38;
          a1[49] = (char *)v33 + 40;
          a1[50] = &v32[40 * v31];
          if (v36) {
            operator delete(v36);
          }
        }
        else
        {
          float64x2_t v25 = v56;
          float64x2_t v26 = v57;
          *(double *)(v23 + 32) = v58;
          *(float64x2_t *)unint64_t v23 = v25;
          *(float64x2_t *)(v23 + 16) = v26;
          long long v27 = (char *)(v23 + 40);
        }
        a1[49] = v27;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unint64_t v41 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        if (!(_BYTE)v60) {
          sub_10020D700();
        }
        sub_1018B4754((int *)&v59, (uint64_t)__p);
        int v42 = __p;
        if (v69 < 0) {
          int v42 = *(unsigned char **)__p;
        }
        __int16 v43 = "other";
        if (v52 <= 8u) {
          __int16 v43 = (&off_102344528)[v52];
        }
        *(_DWORD *)buf = 136316162;
        *(void *)&uint8_t buf[4] = v42;
        *(_WORD *)&unsigned char buf[12] = 2080;
        int v76 = v43;
        __int16 v77 = 2048;
        float64_t v78 = v57.f64[0];
        __int16 v79 = 2048;
        float64_t v80 = v57.f64[1];
        __int16 v81 = 2048;
        double v82 = v58;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "#gnssmeas,apc_sv_offset,svid,%s,band,%s,offset_xyz_meters,%.3f,%.3f,%.3f", buf, 0x34u);
        if (SHIBYTE(v69) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_70;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      if (!(_BYTE)v60) {
        sub_10020D700();
      }
      sub_1018B4754((int *)&v59, (uint64_t)v54);
      unsigned int v44 = v54;
      if (v55 < 0) {
        unsigned int v44 = (void **)v54[0];
      }
      int v45 = "other";
      if (v52 <= 8u) {
        int v45 = (&off_102344528)[v52];
      }
      *(_DWORD *)std::string __p = 136316162;
      *(void *)&__p[4] = v44;
      *(_WORD *)&unsigned char __p[12] = 2080;
      int v68 = v45;
      __int16 v69 = 2048;
      float64_t v70 = v57.f64[0];
      __int16 v71 = 2048;
      float64_t v72 = v57.f64[1];
      __int16 v73 = 2048;
      double v74 = v58;
      unsigned int v21 = (char *)_os_log_send_and_compose_impl();
      if (v55 < 0) {
        operator delete(v54[0]);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaMeasurementProcessor::handlePdsAntennaPhaseCenterParamReport(const pds::GnssApcParamIndication::Indication &)", "%s\n", v21);
LABEL_82:
      if (v21 != buf) {
        free(v21);
      }
LABEL_70:
      v11 += 8;
      if (v11 == v12) {
        goto LABEL_86;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    double v20 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#gnssmeas,apc,bad svid", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_70;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      goto LABEL_84;
    }
    goto LABEL_34;
  }
LABEL_101:
  if (v83[0])
  {
    *(void *)buf = &v84;
    sub_1018C29F4((void ***)buf);
  }
}

void sub_1018C23E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (*(unsigned char *)(v41 - 152))
  {
    a41 = v41 - 144;
    sub_1018C29F4((void ***)&a41);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018C2470(qmi::MessageBase *a1@<X0>, unsigned __int8 *a2@<X8>)
{
  *a2 = 0;
  sub_1018C4C1C(a1, 19, a2);
}

void sub_1018C24A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned char *a10)
{
  if (*v10)
  {
    a10 = v10 + 8;
    sub_1018C29F4((void ***)&a10);
    unsigned char *v10 = 0;
  }
  _Unwind_Resume(exception_object);
}

void sub_1018C24D0(uint64_t a1, uint64_t a2)
{
  if ((unint64_t)(a2 + 2000000000) < *(void *)(a1 + 24))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 24);
      *(_DWORD *)buf = 134349312;
      uint64_t v8 = v5;
      __int16 v9 = 2050;
      uint64_t v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rxClockConv,reset detected,lastNs,%{public}llu,currNs,%{public}llu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void ReceiverClockConversion::checkRxClockForHwReset(const uint64_t)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    *(unsigned char *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  *(void *)(a1 + 24) = a2;
}

void sub_1018C26C8(uint64_t a1, unint64_t a2, double a3)
{
  if (!*(unsigned char *)(a1 + 32) || *(double *)(a1 + 16) >= 0.3)
  {
    *(double *)a1 = a3 + (double)a2 * -0.000000001 + -0.03;
    *(double *)(a1 + 8) = a3;
    *(void *)(a1 + 16) = 0x3FD3333333333333;
    *(unsigned char *)(a1 + 32) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023444A0);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v5 = *(double *)a1;
      uint64_t v6 = *(void *)(a1 + 16);
      *(_DWORD *)buf = 134349312;
      double v9 = v5;
      __int16 v10 = 2050;
      uint64_t v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#rxClockConv,method,receipt,rxClockToMct,%{public}.4f,uncSec,%{public}.4f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023444A0);
      }
      char v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void ReceiverClockConversion::useReceiptTime(const uint64_t, const double)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

BOOL sub_1018C28F0(uint64_t a1)
{
  return *(unsigned char *)(a1 + 32) && *(double *)(a1 + 16) < 0.1;
}

void sub_1018C2918(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018C2948(void **a1)
{
  if (*a1)
  {
    sub_100E93EF8((uint64_t)a1, *a1);
    operator delete(*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1018C2984(void *a1)
{
  double v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 18;
        sub_100E93E2C((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1018C29F4(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1018C2A48((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1018C2A48(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    uint64_t v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t sub_1018C2A98(qmi::MessageBase *a1, uint64_t a2, unsigned char *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    LODWORD(v7) = 0;
    BYTE4(v7) = 0;
    *((void *)&v7 + 1) = 0;
    LOBYTE(v8) = 0;
    __int16 v10 = (_DWORD **)v9;
    uint64_t result = sub_1018C2B3C(&v10, v5, (uint64_t)&v7);
    if (result) {
      v9[0] = 0;
    }
    uint64_t v6 = a3 + 8;
    if (*a3)
    {
      *uint64_t v6 = v7;
      a3[24] = v8;
    }
    else
    {
      *uint64_t v6 = v7;
      *((void *)a3 + 3) = v8;
      *a3 = 1;
    }
    if (!v9[0]) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t sub_1018C2B3C(_DWORD ***a1, int a2, uint64_t a3)
{
  if (a2 >= 4)
  {
    uint64_t v3 = *a1;
    *(_DWORD *)a3 = ***a1;
    uint64_t v4 = (unsigned char *)(*v3 + 4);
    *uint64_t v3 = v4;
    if (a2 != 4)
    {
      *(unsigned char *)(a3 + 4) = *v4;
      uint64_t v5 = (void *)(*v3 + 1);
      *uint64_t v3 = v5;
      if ((a2 - 4) >= 9)
      {
        *(void *)(a3 + 8) = *v5;
        uint64_t v6 = (unsigned char *)(*v3 + 8);
        *uint64_t v3 = v6;
        if (a2 != 13)
        {
          *(unsigned char *)(a3 + 16) = *v6;
          ++*v3;
        }
      }
    }
  }
  return (a2 - 14);
}

uint64_t *sub_1018C2BBC(qmi::MessageBase *a1, uint64_t a2, char *a3)
{
  uint64_t result = (uint64_t *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  uint64_t v6 = 0;
  if (v5 < 8)
  {
    uint64_t v7 = 0;
LABEL_7:
    char v8 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = *result;
  if (v5 < 0x10) {
    goto LABEL_7;
  }
  uint64_t v6 = result[1];
  if (v5 != 16) {
    goto LABEL_7;
  }
  char v8 = 1;
LABEL_8:
  int v9 = *a3;
  *((void *)a3 + 1) = v7;
  *((void *)a3 + 2) = v6;
  if (!v9 || (v8 & 1) == 0) {
    *a3 = v8;
  }
  return result;
}

unsigned int *sub_1018C2C2C(qmi::MessageBase *a1, uint64_t a2, char *a3)
{
  uint64_t result = (unsigned int *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 4)
  {
    unsigned int v8 = 0;
    unsigned int v6 = 0;
LABEL_9:
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  unsigned int v6 = *result;
  if (v5 < 8)
  {
    unsigned int v8 = 0;
    goto LABEL_9;
  }
  uint64_t v7 = result[1];
  if ((v5 - 12) > 0xFFFFFFF7)
  {
    unsigned int v8 = 0;
    goto LABEL_10;
  }
  unsigned int v8 = result[2];
  if (v5 != 12)
  {
LABEL_10:
    char v9 = 0;
    goto LABEL_11;
  }
  char v9 = 1;
LABEL_11:
  int v10 = *a3;
  *(void *)(a3 + 4) = v6 | (unint64_t)(v7 << 32);
  *((_DWORD *)a3 + 3) = v8;
  if (!v10 || (v9 & 1) == 0) {
    *a3 = v9;
  }
  return result;
}

uint64_t sub_1018C2CC8(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v7[0] = result;
  v7[1] = v5;
  if (result)
  {
    LOWORD(v9) = 0;
    *((void *)&v9 + 1) = 0;
    DWORD1(v9) = 0;
    unsigned int v8 = (_WORD **)v7;
    uint64_t result = sub_1018C2D48(&v8, v5, (uint64_t)&v9);
    if (result) {
      v7[0] = 0;
    }
    int v6 = *a3;
    *(_OWORD *)(a3 + 4) = v9;
    if (!v6) {
      *a3 = 1;
    }
    if (!v7[0]) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t sub_1018C2D48(_WORD ***a1, int a2, uint64_t a3)
{
  if (a2 < 2) {
    return (a2 - 14);
  }
  uint64_t v3 = *a1;
  *(_WORD *)a3 = ***a1;
  uint64_t v4 = (_DWORD *)(*v3 + 2);
  *uint64_t v3 = v4;
  if (a2 < 6) {
    return (a2 - 14);
  }
  *(_DWORD *)(a3 + 4) = *v4;
  uint64_t v5 = (_DWORD *)(*v3 + 4);
  *uint64_t v3 = v5;
  if ((a2 - 10) >= 0xFFFFFFF8) {
    return (a2 - 14);
  }
  *(_DWORD *)(a3 + 8) = *v5;
  int v6 = (_DWORD *)(*v3 + 4);
  *uint64_t v3 = v6;
  uint64_t result = (a2 - 14);
  if ((a2 - 14) <= 0xFFFFFFF7)
  {
    *(_DWORD *)(a3 + 12) = *v6;
    *v3 += 4;
  }
  return result;
}

void sub_1018C2DD4(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  v8[0] = (unsigned char *)qmi::MessageBase::findTlvValue(a1);
  v8[1] = v4;
  if (v8[0])
  {
    __n128 __p = 0uLL;
    uint64_t v7 = 0;
    if (sub_1018C2E84(v8, (int)v4, &__p)) {
      v8[0] = 0;
    }
    sub_1017CDAAC(a3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!v8[0] && *(unsigned char *)a3)
    {
      uint64_t v5 = *(void **)(a3 + 8);
      if (v5)
      {
        *(void *)(a3 + 16) = v5;
        operator delete(v5);
      }
      *(unsigned char *)a3 = 0;
    }
  }
}

void sub_1018C2E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018C2E84(unsigned char **a1, int a2, void *a3)
{
  long long v9 = a1;
  uint64_t v4 = (a2 - 1);
  if (a2 < 1) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = *(*a1)++;
  }
  sub_1018C2F08((uint64_t)a3, v5);
  int v6 = (_WORD *)*a3;
  uint64_t v7 = (_WORD *)a3[1];
  while (v6 != v7)
  {
    uint64_t v4 = sub_1018C2F44(&v9, v4, v6);
    v6 += 60;
  }
  return v4;
}

void sub_1018C2F08(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_1018C2F94((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 120 * a2;
  }
}

uint64_t sub_1018C2F44(unsigned char ***a1, int a2, _WORD *a3)
{
  BOOL v3 = *a1;
  uint64_t v7 = *a1;
  unsigned int v8 = a3;
  BOOL v4 = __OFSUB__(a2, 2);
  int v5 = a2 - 2;
  if (v5 < 0 == v4)
  {
    *a3 = *(_WORD *)*v3;
    *v3 += 2;
  }
  return sub_1018C3188((uint64_t *)&v8, v5, &v7);
}

void sub_1018C2F94(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0xEEEEEEEEEEEEEEEFLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      int v13 = &v7[120 * a2];
      do
      {
        *(_WORD *)uint64_t v7 = 0;
        *((_DWORD *)v7 + 6) = 0;
        v7[28] = 0;
        *((void *)v7 + 1) = 0;
        *(void *)(v7 + 15) = 0;
        *(void *)(v7 + 38) = 0;
        *(void *)(v7 + 30) = 0;
        *(void *)(v7 + 44) = 0;
        *((void *)v7 + 7) = 0;
        *((void *)v7 + 8) = 0;
        *((_DWORD *)v7 + 18) = 0;
        *((void *)v7 + 10) = 0;
        *((void *)v7 + 11) = 0;
        *(void *)(v7 + 93) = 0;
        *((void *)v7 + 13) = 0;
        *((void *)v7 + 14) = 0;
        v7 += 120;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x222222222222222) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x111111111111111) {
      unint64_t v11 = 0x222222222222222;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      double v12 = (char *)sub_10029BE4C(v4, v11);
    }
    else {
      double v12 = 0;
    }
    unsigned int v14 = &v12[120 * v8];
    int v15 = &v14[120 * a2];
    uint64_t v16 = v14;
    do
    {
      *(_WORD *)uint64_t v16 = 0;
      *((_DWORD *)v16 + 6) = 0;
      v16[28] = 0;
      *((void *)v16 + 1) = 0;
      *(void *)(v16 + 15) = 0;
      *(void *)(v16 + 38) = 0;
      *(void *)(v16 + 30) = 0;
      *(void *)(v16 + 44) = 0;
      *((void *)v16 + 7) = 0;
      *((void *)v16 + 8) = 0;
      *((_DWORD *)v16 + 18) = 0;
      *((void *)v16 + 10) = 0;
      *((void *)v16 + 11) = 0;
      *(void *)(v16 + 93) = 0;
      *((void *)v16 + 13) = 0;
      *((void *)v16 + 14) = 0;
      v16 += 120;
    }
    while (v16 != v15);
    unsigned int v17 = &v12[120 * v11];
    float64x2_t v19 = (char *)*a1;
    double v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 120);
        long long v21 = *(_OWORD *)(v18 - 104);
        long long v22 = *(_OWORD *)(v18 - 88);
        *(_OWORD *)(v14 - 72) = *(_OWORD *)(v18 - 72);
        *(_OWORD *)(v14 - 88) = v22;
        *(_OWORD *)(v14 - 104) = v21;
        *(_OWORD *)(v14 - 120) = v20;
        long long v23 = *(_OWORD *)(v18 - 56);
        long long v24 = *(_OWORD *)(v18 - 40);
        long long v25 = *(_OWORD *)(v18 - 24);
        *((void *)v14 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v25;
        *(_OWORD *)(v14 - 40) = v24;
        *(_OWORD *)(v14 - 56) = v23;
        v14 -= 120;
        v18 -= 120;
      }
      while (v18 != v19);
      double v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

uint64_t sub_1018C3188(uint64_t *a1, int a2, unsigned char ***a3)
{
  uint64_t v3 = *a1;
  if (a2 < 8) {
    goto LABEL_9;
  }
  *(void *)(v3 + 8) = *(void *)**a3;
  **a3 += 8;
  if (a2 == 8) {
    goto LABEL_9;
  }
  *(unsigned char *)(v3 + 16) = *(**a3)++;
  if (a2 == 9
    || (*(unsigned char *)(v3 + 17) = ***a3, ++**a3, a2 == 10)
    || (*(unsigned char *)(v3 + 18) = ***a3, ++**a3, a2 == 11)
    || (*(unsigned char *)(v3 + 19) = ***a3, ++**a3, (a2 - 11) <= 2))
  {
LABEL_9:
    uint64_t v5 = v3;
  }
  else
  {
    *(_WORD *)(v3 + 20) = *(_WORD *)**a3;
    **a3 += 2;
    uint64_t v5 = v3;
    if (a2 != 14) {
      *(unsigned char *)(v3 + 22) = *(**a3)++;
    }
  }
  return sub_1018C32DC(&v5, a2 - 15, (_DWORD ***)a3);
}

uint64_t sub_1018C32DC(uint64_t *a1, int a2, _DWORD ***a3)
{
  uint64_t v3 = *a1;
  if (a2 < 2) {
    goto LABEL_9;
  }
  *(_WORD *)(v3 + 24) = *(_WORD *)**a3;
  **a3 = (_DWORD *)((char *)**a3 + 2);
  if (a2 < 4) {
    goto LABEL_9;
  }
  *(_WORD *)(v3 + 26) = *(_WORD *)**a3;
  **a3 = (_DWORD *)((char *)**a3 + 2);
  if (a2 == 4
    || (*(unsigned char *)(v3 + 28) = *(unsigned char *)**a3, **a3 = (_DWORD *)((char *)**a3 + 1), (a2 - 7) > 0xFFFFFFFC)
    || (*(_WORD *)(v3 + 30) = *(_WORD *)**a3, **a3 = (_DWORD *)((char *)**a3 + 2), (a2 - 11) > 0xFFFFFFF9)
    || (*(_DWORD *)(v3 + 32) = ***a3, ++**a3, (a2 - 15) >= 0xFFFFFFF8))
  {
LABEL_9:
    uint64_t v6 = v3;
    unsigned int v4 = a2 - 19;
  }
  else
  {
    *(_DWORD *)(v3 + 36) = *(**a3)++;
    uint64_t v6 = v3;
    unsigned int v4 = a2 - 19;
    if (v4 <= 0xFFFFFFF7) {
      *(_DWORD *)(v3 + 40) = *(**a3)++;
    }
  }
  return sub_1018C343C(&v6, v4, a3);
}

uint64_t sub_1018C343C(uint64_t *a1, int a2, _DWORD ***a3)
{
  uint64_t v3 = *a1;
  if (a2 < 4) {
    goto LABEL_9;
  }
  *(_DWORD *)(v3 + 44) = *(**a3)++;
  unsigned int v4 = a2 - 8;
  if (a2 < 8) {
    goto LABEL_9;
  }
  *(_DWORD *)(v3 + 48) = *(**a3)++;
  if ((a2 - 16) > 0xFFFFFFF3
    || (*(void *)(v3 + 56) = *(void *)**a3, **a3 += 2, v4 < 0xC)
    || (*(_DWORD *)(v3 + 64) = ***a3, ++**a3, (v4 & 0xFFFFFFF8) == 8)
    || (*(_DWORD *)(v3 + 68) = ***a3, ++**a3, (a2 - 28) >= 0xFFFFFFF8))
  {
LABEL_9:
    uint64_t v7 = v3;
    unsigned int v5 = a2 - 36;
  }
  else
  {
    *(_DWORD *)(v3 + 72) = *(**a3)++;
    uint64_t v7 = v3;
    unsigned int v5 = a2 - 36;
    if (v5 <= 0xFFFFFFF3)
    {
      *(void *)(v3 + 80) = *(void *)**a3;
      **a3 += 2;
    }
  }
  return sub_1018C359C(&v7, v5, a3);
}

uint64_t sub_1018C359C(uint64_t *a1, int a2, _DWORD ***a3)
{
  if (a2 < 4) {
    return (a2 - 29);
  }
  uint64_t v3 = *a1;
  *(_DWORD *)(*a1 + 88) = *(**a3)++;
  if (a2 < 8) {
    return (a2 - 29);
  }
  *(_DWORD *)(v3 + 92) = *(**a3)++;
  if ((a2 - 4) < 8) {
    return (a2 - 29);
  }
  *(_DWORD *)(v3 + 96) = *(**a3)++;
  if (a2 == 12) {
    return (a2 - 29);
  }
  *(unsigned char *)(v3 + 100) = *(unsigned char *)**a3;
  **a3 = (_DWORD *)((char *)**a3 + 1);
  if ((a2 - 17) > 0xFFFFFFFA) {
    return (a2 - 29);
  }
  *(_DWORD *)(v3 + 104) = *(**a3)++;
  if ((a2 - 21) > 0xFFFFFFF7) {
    return (a2 - 29);
  }
  *(_DWORD *)(v3 + 108) = *(**a3)++;
  if ((a2 - 25) >= 0xFFFFFFF8) {
    return (a2 - 29);
  }
  *(_DWORD *)(v3 + 112) = *(**a3)++;
  uint64_t result = (a2 - 29);
  if ((a2 - 29) <= 0xFFFFFFF7) {
    *(_DWORD *)(v3 + 116) = *(**a3)++;
  }
  return result;
}

uint64_t **sub_1018C36FC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(uint64_t ****)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t **)*i)
      {
        unint64_t v12 = (unint64_t)i[1];
        if (v12 == v7)
        {
          if (*((unsigned __int8 *)i + 16) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  unsigned int v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)unsigned int v14 = 0;
  *((void *)v14 + 1) = v7;
  v14[16] = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_100100330(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *long long v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t **)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  sub_10084F514((uint64_t)v24, 0);
  return i;
}

void sub_1018C3958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10084F514((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **sub_1018C3970(void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *sub_1018C3A24(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x18uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = **a4;
  *((unsigned char *)v11 + 18) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1018C3C38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1018C3C4C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  unint64_t v5 = *(void **)a2;
  *(void *)a2 = 0;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  unint64_t v7 = *(void **)a2;
  *(void *)a2 = v4;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v12;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v11;
  int v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(void *)(a1 + 24))
  {
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v15 = *(void *)(*(void *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14) {
        v15 %= v14;
      }
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    unint64_t v16 = *(void *)(a2 + 8);
    unint64_t v17 = *(void *)(*(void *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16) {
        v17 %= v16;
      }
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(void *)(*(void *)a2 + 8 * v17) = a2 + 16;
  }
}

unsigned __int8 *sub_1018C3D5C(qmi::MessageBase *a1, uint64_t a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 1)
  {
    int v8 = 0;
    unsigned int v6 = 0;
LABEL_9:
    uint64_t v7 = 0;
    goto LABEL_10;
  }
  unsigned int v6 = *result;
  if (v5 < 5)
  {
    int v8 = 0;
    goto LABEL_9;
  }
  uint64_t v7 = *(unsigned int *)(result + 1);
  if ((v5 - 9) > 0xFFFFFFF7)
  {
    int v8 = 0;
    goto LABEL_10;
  }
  int v8 = *(_DWORD *)(result + 5);
  if (v5 != 9)
  {
LABEL_10:
    char v9 = 0;
    goto LABEL_11;
  }
  char v9 = 1;
LABEL_11:
  int v10 = *a3;
  *(void *)(a3 + 4) = v6 | (unint64_t)(v7 << 32);
  *((_DWORD *)a3 + 3) = v8;
  if (!v10 || (v9 & 1) == 0) {
    *a3 = v9;
  }
  return result;
}

uint64_t *sub_1018C3DF8(qmi::MessageBase *a1, uint64_t a2, char *a3)
{
  uint64_t result = (uint64_t *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  uint64_t v6 = 0;
  if (v5 < 8)
  {
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = *result;
  if (v5 < 0x10)
  {
LABEL_8:
    uint64_t v8 = 0;
LABEL_9:
    char v9 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = result[1];
  if ((v5 - 24) > 0xFFFFFFEF) {
    goto LABEL_9;
  }
  uint64_t v6 = result[2];
  if (v5 != 24) {
    goto LABEL_9;
  }
  char v9 = 1;
LABEL_10:
  int v10 = *a3;
  *((void *)a3 + 1) = v7;
  *((void *)a3 + 2) = v8;
  *((void *)a3 + 3) = v6;
  if (!v10 || (v9 & 1) == 0) {
    *a3 = v9;
  }
  return result;
}

uint64_t sub_1018C3E7C(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v14[0] = result;
  v14[1] = v5;
  if (result)
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    unint64_t v15 = (void **)v14;
    uint64_t result = sub_1018C3F18(&v15, v5, &v9);
    if (result) {
      v14[0] = 0;
    }
    int v6 = *a3;
    long long v7 = v9;
    *(_OWORD *)(a3 + 24) = v10;
    long long v8 = v12;
    *(_OWORD *)(a3 + 40) = v11;
    *(_OWORD *)(a3 + 56) = v8;
    *((void *)a3 + 9) = v13;
    *(_OWORD *)(a3 + 8) = v7;
    if (!v6) {
      *a3 = 1;
    }
    if (!v14[0]) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t sub_1018C3F18(void ***a1, int a2, void *a3)
{
  if (a2 < 8) {
    return (a2 - 72);
  }
  unint64_t v3 = *a1;
  *a3 = ***a1;
  unint64_t v4 = (void *)(*v3 + 8);
  *unint64_t v3 = v4;
  if (a2 < 0x10) {
    return (a2 - 72);
  }
  a3[1] = *v4;
  uint64_t v5 = (void *)(*v3 + 8);
  *unint64_t v3 = v5;
  if ((a2 - 24) > 0xFFFFFFEF) {
    return (a2 - 72);
  }
  a3[2] = *v5;
  int v6 = (void *)(*v3 + 8);
  *unint64_t v3 = v6;
  if ((a2 - 32) > 0xFFFFFFEF) {
    return (a2 - 72);
  }
  a3[3] = *v6;
  long long v7 = (void *)(*v3 + 8);
  *unint64_t v3 = v7;
  if ((a2 - 40) > 0xFFFFFFEF) {
    return (a2 - 72);
  }
  a3[4] = *v7;
  long long v8 = (void *)(*v3 + 8);
  *unint64_t v3 = v8;
  if ((a2 - 48) > 0xFFFFFFEF) {
    return (a2 - 72);
  }
  a3[5] = *v8;
  long long v9 = (void *)(*v3 + 8);
  *unint64_t v3 = v9;
  if ((a2 - 56) > 0xFFFFFFEF) {
    return (a2 - 72);
  }
  a3[6] = *v9;
  long long v10 = (void *)(*v3 + 8);
  *unint64_t v3 = v10;
  if ((a2 - 64) >= 0xFFFFFFF0) {
    return (a2 - 72);
  }
  a3[7] = *v10;
  long long v11 = (void *)(*v3 + 8);
  *unint64_t v3 = v11;
  uint64_t result = (a2 - 72);
  if ((a2 - 72) <= 0xFFFFFFEF)
  {
    a3[8] = *v11;
    *v3 += 8;
  }
  return result;
}

uint64_t sub_1018C4044(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v7[0] = result;
  v7[1] = v5;
  if (result)
  {
    long long v9 = 0uLL;
    long long v8 = (_DWORD **)v7;
    uint64_t result = sub_10184238C(&v8, v5, &v9);
    if (result) {
      v7[0] = 0;
    }
    int v6 = *a3;
    *(_OWORD *)(a3 + 4) = v9;
    if (!v6) {
      *a3 = 1;
    }
    if (!v7[0]) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t *sub_1018C40BC(uint64_t a1, int *a2)
{
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  int8x8_t v2 = (uint64_t *)(a1 + 8);
  unint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  int v6 = *a2;
  unsigned int v5 = a2[1];
  long long v7 = v2;
  do
  {
    int v8 = *((_DWORD *)v3 + 7);
    if (v8 >= v6)
    {
      if (v6 >= v8)
      {
        if (*((_DWORD *)v3 + 8) < v5) {
          ++v3;
        }
        else {
          long long v7 = v3;
        }
      }
      else
      {
        long long v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    unint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  int v9 = *((_DWORD *)v7 + 7);
  if (v6 < v9 || v9 >= v6 && v5 < *((_DWORD *)v7 + 8)) {
    return v2;
  }
  return v7;
}

uint64_t *sub_1018C4148(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    long long v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  unint64_t v14 = (char *)operator new(0xA8uLL);
  v25[0] = v14;
  v25[1] = a1 + 16;
  *(void *)unint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 152) = 0u;
  *(_OWORD *)(v14 + 136) = 0u;
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  v14[30] = 127;
  *((void *)v14 + 4) = 0x7FF8000000000000;
  *((_OWORD *)v14 + 3) = 0u;
  *((_OWORD *)v14 + 4) = 0u;
  int64x2_t v15 = vdupq_n_s64(0x7FF8000000000000uLL);
  *((int64x2_t *)v14 + 5) = v15;
  *((int64x2_t *)v14 + 6) = v15;
  *((int32x2_t *)v14 + 14) = vdup_n_s32(0x7FC00000u);
  *((_WORD *)v14 + 64) = 0;
  *((void *)v14 + 15) = 0;
  *((void *)v14 + 17) = 0;
  *((void *)v14 + 18) = 0;
  v14[160] = 0;
  *((void *)v14 + 19) = 0;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_100100330(a1, v21);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v23 >= v8) {
          v23 %= v8;
        }
      }
      else
      {
        v23 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (uint64_t *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  sub_1018C4408((uint64_t)v25, 0);
  return i;
}

void sub_1018C43F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1018C4408((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_1018C4408(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_101835474(v2 + 2);
    }
    operator delete(v2);
  }
}

__n128 sub_1018C4460(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *a2;
  *(unsigned char *)(v2 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)uint64_t v2 = v3;
  *(void *)(v2 + 24) = 0;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 24) = *(long long *)((char *)a2 + 24);
  *(void *)(v2 + 40) = *((void *)a2 + 5);
  *(long long *)((char *)a2 + 24) = 0u;
  uint64_t v4 = *((void *)a2 + 6);
  *(long long *)((char *)a2 + 40) = 0u;
  *(void *)(v2 + 48) = v4;
  long long v5 = *(long long *)((char *)a2 + 56);
  long long v6 = *(long long *)((char *)a2 + 72);
  long long v7 = *(long long *)((char *)a2 + 88);
  *(_WORD *)(v2 + 104) = *((_WORD *)a2 + 52);
  *(_OWORD *)(v2 + 88) = v7;
  *(_OWORD *)(v2 + 72) = v6;
  *(_OWORD *)(v2 + 56) = v5;
  *(void *)(v2 + 120) = 0;
  *(void *)(v2 + 128) = 0;
  *(void *)(v2 + 112) = 0;
  __n128 result = (__n128)a2[7];
  *(__n128 *)(v2 + 112) = result;
  *(void *)(v2 + 128) = *((void *)a2 + 16);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 14) = 0;
  *(unsigned char *)(v2 + 136) = *((unsigned char *)a2 + 136);
  *(void *)(a1 + 8) = v2 + 144;
  return result;
}

uint64_t sub_1018C44F4(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    uint64_t v8 = 0;
    *(void *)&long long v7 = 0;
    *(void *)((char *)&v7 + 7) = 0;
    long long v10 = (_DWORD **)v9;
    uint64_t result = sub_1018C457C(&v10, v5, (uint64_t)&v7);
    if (result) {
      v9[0] = 0;
    }
    int v6 = *a3;
    *(_OWORD *)(a3 + 8) = v7;
    *((void *)a3 + 3) = v8;
    if (!v6) {
      *a3 = 1;
    }
    if (!v9[0]) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t sub_1018C457C(_DWORD ***a1, int a2, uint64_t a3)
{
  if (a2 <= 3 || (long long v3 = *a1, *(_DWORD *)a3 = ***a1, v4 = (_DWORD *)(*v3 + 4), *long long v3 = v4, a2 <= 7))
  {
    int v6 = a2 - 8;
    return (v6 - 15);
  }
  *(_DWORD *)(a3 + 4) = *v4;
  uint64_t v5 = (unsigned char *)(*v3 + 4);
  *long long v3 = v5;
  if (a2 == 8)
  {
    int v6 = 0;
    return (v6 - 15);
  }
  *(unsigned char *)(a3 + 8) = *v5;
  uint64_t v8 = (unsigned char *)(*v3 + 1);
  *long long v3 = v8;
  if (a2 == 9)
  {
    int v6 = 1;
    return (v6 - 15);
  }
  *(unsigned char *)(a3 + 9) = *v8;
  uint8x8_t v9 = (unsigned char *)(*v3 + 1);
  *long long v3 = v9;
  if (a2 == 10)
  {
    int v6 = 2;
    return (v6 - 15);
  }
  *(unsigned char *)(a3 + 10) = *v9;
  long long v10 = (unsigned char *)(*v3 + 1);
  *long long v3 = v10;
  if (a2 == 11)
  {
    int v6 = 3;
    return (v6 - 15);
  }
  *(unsigned char *)(a3 + 11) = *v10;
  long long v11 = (unsigned char *)(*v3 + 1);
  *long long v3 = v11;
  if (a2 == 12)
  {
    int v6 = 4;
    return (v6 - 15);
  }
  *(unsigned char *)(a3 + 12) = *v11;
  unint64_t v12 = (unsigned char *)(*v3 + 1);
  *long long v3 = v12;
  if (a2 == 13)
  {
    int v6 = 5;
    return (v6 - 15);
  }
  *(unsigned char *)(a3 + 13) = *v12;
  uint64_t v13 = (unsigned char *)(*v3 + 1);
  *long long v3 = v13;
  if (a2 == 14)
  {
    int v6 = 6;
    return (v6 - 15);
  }
  *(unsigned char *)(a3 + 14) = *v13;
  unint64_t v14 = (void *)(*v3 + 1);
  *long long v3 = v14;
  uint64_t result = (a2 - 23);
  if ((a2 - 23) <= 0xFFFFFFF6)
  {
    *(void *)(a3 + 16) = *v14;
    *v3 += 8;
  }
  return result;
}

uint64_t sub_1018C46F0(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v9[0] = result;
  v9[1] = v5;
  if (result)
  {
    LODWORD(v7) = 0;
    *((void *)&v7 + 1) = 0;
    uint64_t v8 = 0;
    long long v10 = (_WORD **)v9;
    uint64_t result = sub_1018C4774(&v10, v5, (uint64_t)&v7);
    if (result) {
      v9[0] = 0;
    }
    int v6 = *a3;
    *(_OWORD *)(a3 + 8) = v7;
    *((void *)a3 + 3) = v8;
    if (!v6) {
      *a3 = 1;
    }
    if (!v9[0]) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t sub_1018C4774(_WORD ***a1, int a2, uint64_t a3)
{
  if (a2 < 2) {
    return (a2 - 20);
  }
  long long v3 = *a1;
  *(_WORD *)a3 = ***a1;
  uint64_t v4 = (_WORD *)(*v3 + 2);
  *long long v3 = v4;
  if (a2 < 4) {
    return (a2 - 20);
  }
  *(_WORD *)(a3 + 2) = *v4;
  uint64_t v5 = (void *)(*v3 + 2);
  *long long v3 = v5;
  if ((a2 - 12) >= 0xFFFFFFF6) {
    return (a2 - 20);
  }
  *(void *)(a3 + 8) = *v5;
  int v6 = (void *)(*v3 + 8);
  *long long v3 = v6;
  uint64_t result = (a2 - 20);
  if ((a2 - 20) <= 0xFFFFFFEF)
  {
    *(void *)(a3 + 16) = *v6;
    *v3 += 8;
  }
  return result;
}

uint64_t sub_1018C4800(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v8[0] = result;
  v8[1] = v5;
  if (result)
  {
    __int16 v11 = 0;
    int v10 = 0;
    uint8x8_t v9 = (_WORD **)v8;
    uint64_t result = sub_1018C4884(&v9, v5, (uint64_t)&v10);
    if (result) {
      v8[0] = 0;
    }
    int v6 = v10;
    int v7 = *a3;
    *((_WORD *)a3 + 3) = v11;
    *(_DWORD *)(a3 + 2) = v6;
    if (!v7) {
      *a3 = 1;
    }
    if (!v8[0]) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t sub_1018C4884(_WORD ***a1, int a2, uint64_t a3)
{
  if (a2 >= 2)
  {
    long long v3 = *a1;
    *(_WORD *)a3 = ***a1;
    uint64_t v4 = (_WORD *)(*v3 + 2);
    *long long v3 = v4;
    if (a2 >= 4)
    {
      *(_WORD *)(a3 + 2) = *v4;
      uint64_t v5 = (unsigned char *)(*v3 + 2);
      *long long v3 = v5;
      if (a2 != 4)
      {
        *(unsigned char *)(a3 + 4) = *v5;
        int v6 = (unsigned char *)(*v3 + 1);
        *long long v3 = v6;
        if (a2 != 5)
        {
          *(unsigned char *)(a3 + 5) = *v6;
          ++*v3;
        }
      }
    }
  }
  return (a2 - 6);
}

uint64_t sub_1018C4904(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v8[0] = result;
  v8[1] = v5;
  if (result)
  {
    *(_DWORD *)int v10 = 0;
    unsigned char v10[4] = 0;
    *(_DWORD *)&v10[6] = 0;
    uint8x8_t v9 = (_WORD **)v8;
    uint64_t result = sub_1018C498C(&v9, v5, (uint64_t)v10);
    if (result) {
      v8[0] = 0;
    }
    __int16 v6 = *(_WORD *)&v10[8];
    int v7 = *a3;
    *(void *)(a3 + 2) = *(void *)v10;
    *((_WORD *)a3 + 5) = v6;
    if (!v7) {
      *a3 = 1;
    }
    if (!v8[0]) {
      *a3 = 0;
    }
  }
  return result;
}

uint64_t sub_1018C498C(_WORD ***a1, int a2, uint64_t a3)
{
  if (a2 < 2) {
    return (a2 - 9);
  }
  long long v3 = *a1;
  *(_WORD *)a3 = ***a1;
  uint64_t v4 = (_WORD *)(*v3 + 2);
  *long long v3 = v4;
  if (a2 < 4) {
    return (a2 - 9);
  }
  *(_WORD *)(a3 + 2) = *v4;
  uint64_t v5 = (unsigned char *)(*v3 + 2);
  *long long v3 = v5;
  if (a2 == 4) {
    return (a2 - 9);
  }
  *(unsigned char *)(a3 + 4) = *v5;
  __int16 v6 = (_WORD *)(*v3 + 1);
  *long long v3 = v6;
  if ((a2 - 7) >= 0xFFFFFFFD) {
    return (a2 - 9);
  }
  *(_WORD *)(a3 + 6) = *v6;
  int v7 = (_WORD *)(*v3 + 2);
  *long long v3 = v7;
  uint64_t result = (a2 - 9);
  if ((a2 - 9) <= 0xFFFFFFFB)
  {
    *(_WORD *)(a3 + 8) = *v7;
    *v3 += 2;
  }
  return result;
}

uint64_t sub_1018C4A34(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  v8[0] = result;
  v8[1] = v5;
  if (result)
  {
    LODWORD(v10) = 0;
    BYTE4(v10) = 0;
    *(void *)((char *)&v10 + 6) = 0;
    uint8x8_t v9 = (_DWORD **)v8;
    uint64_t result = sub_1018C4AC8(&v9, v5, (uint64_t)&v10);
    if (result) {
      v8[0] = 0;
    }
    uint64_t v6 = v10;
    __int16 v7 = WORD6(v10);
    if (*(unsigned char *)a3)
    {
      *(_DWORD *)(a3 + 12) = DWORD2(v10);
      *(_WORD *)(a3 + 16) = v7;
    }
    else
    {
      *(void *)(a3 + 12) = *((void *)&v10 + 1);
      *(unsigned char *)a3 = 1;
    }
    *(void *)(a3 + 4) = v6;
    if (!v8[0]) {
      *(unsigned char *)a3 = 0;
    }
  }
  return result;
}

uint64_t sub_1018C4AC8(_DWORD ***a1, int a2, uint64_t a3)
{
  if (a2 < 4) {
    return (a2 - 13);
  }
  long long v3 = *a1;
  *(_DWORD *)a3 = ***a1;
  uint64_t v4 = (unsigned char *)(*v3 + 4);
  *long long v3 = v4;
  if (a2 == 4) {
    return (a2 - 13);
  }
  *(unsigned char *)(a3 + 4) = *v4;
  uint64_t v5 = (_WORD *)(*v3 + 1);
  *long long v3 = v5;
  if ((a2 - 7) > 0xFFFFFFFC) {
    return (a2 - 13);
  }
  *(_WORD *)(a3 + 6) = *v5;
  uint64_t v6 = (_WORD *)(*v3 + 2);
  *long long v3 = v6;
  if ((a2 - 9) > 0xFFFFFFFB) {
    return (a2 - 13);
  }
  *(_WORD *)(a3 + 8) = *v6;
  __int16 v7 = (_WORD *)(*v3 + 2);
  *long long v3 = v7;
  if ((a2 - 11) >= 0xFFFFFFFC) {
    return (a2 - 13);
  }
  *(_WORD *)(a3 + 10) = *v7;
  uint64_t v8 = (_WORD *)(*v3 + 2);
  *long long v3 = v8;
  uint64_t result = (a2 - 13);
  if ((a2 - 13) <= 0xFFFFFFFB)
  {
    *(_WORD *)(a3 + 12) = *v8;
    *v3 += 2;
  }
  return result;
}

unsigned __int16 *sub_1018C4B94(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (unsigned __int16 *)qmi::MessageBase::findTlvValue(a1);
  if (!result) {
    return result;
  }
  if (v5 < 2)
  {
    uint64_t v7 = 0;
    unsigned int v6 = 0;
    goto LABEL_8;
  }
  unsigned int v6 = *result;
  if (v5 < 6)
  {
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = *(unsigned int *)(result + 1);
  if (v5 != 6)
  {
LABEL_8:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = result + 3;
LABEL_9:
  unint64_t v9 = v6 | (unint64_t)(v7 << 32);
  if (!*(unsigned char *)a3) {
    *(unsigned char *)a3 = 1;
  }
  *(void *)(a3 + 4) = v9;
  if (!v8) {
    *(unsigned char *)a3 = 0;
  }
  return result;
}

void sub_1018C4C1C(qmi::MessageBase *a1, uint64_t a2, unsigned __int8 *a3)
{
  v7[0] = qmi::MessageBase::findTlvValue(a1);
  v7[1] = v4;
  if (v7[0])
  {
    __n128 v5 = 0uLL;
    uint64_t v6 = 0;
    if (sub_1018C4CCC(v7, v4, (uint64_t *)&v5)) {
      v7[0] = 0;
    }
    sub_1018C5394(a3, &v5);
    uint64_t v8 = &v5;
    sub_1018C29F4((void ***)&v8);
    if (!v7[0])
    {
      if (*a3)
      {
        v5.n128_u64[0] = (unint64_t)(a3 + 8);
        sub_1018C29F4((void ***)&v5);
        *a3 = 0;
      }
    }
  }
}

void sub_1018C4CB0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_1018C29F4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1018C4CCC(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v5 = (a2 - 1);
  if (a2 < 1) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = *(unsigned __int8 *)(*a1)++;
  }
  sub_1018C4D5C(a3, v6);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  while (v8 != v7)
  {
    if ((int)v5 >= 4)
    {
      uint64_t v9 = *a1 + 4;
      *(_DWORD *)uint64_t v8 = *(_DWORD *)*a1;
      *a1 = v9;
    }
    uint64_t v5 = sub_1018C5148((_WORD **)a1, (int)v5 - 4, (void *)(v8 + 8));
    v8 += 32;
  }
  return v5;
}

void sub_1018C4D5C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(void **)(v3 - 24);
        if (v7)
        {
          *(void *)(v3 - 16) = v7;
          operator delete(v7);
        }
        v3 -= 32;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_1018C4DF0(a1, v5);
  }
}

uint64_t sub_1018C4DF0(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = v7 + 32 * a2;
      do
      {
        *(_DWORD *)uint64_t v7 = 0;
        *(void *)(v7 + 16) = 0;
        *(void *)(v7 + 24) = 0;
        *(void *)(v7 + 8) = 0;
        v7 += 32;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    v17[4] = result;
    if (v12) {
      uint64_t v13 = (char *)sub_1001D9EDC(result, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int64x2_t v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    float v16 = &v15[32 * a2];
    do
    {
      *(_DWORD *)int64x2_t v15 = 0;
      *((void *)v15 + 2) = 0;
      *((void *)v15 + 3) = 0;
      *((void *)v15 + 1) = 0;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    sub_1018C4F10(a1, v17);
    return sub_1018C50B4((uint64_t)v17);
  }
  return result;
}

void sub_1018C4EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1018C50B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018C4F10(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1018C4F88((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1018C4F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      int v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(void *)(v7 - 8) = *(void *)(a3 + 24);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_1018C5034((uint64_t)v11);
  return v9;
}

uint64_t sub_1018C5034(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1018C506C(a1);
  }
  return a1;
}

void sub_1018C506C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(void *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_1018C50B4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1018C50EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

uint64_t sub_1018C5148(_WORD **a1, int a2, void *a3)
{
  uint64_t v9 = a1;
  uint64_t v4 = (a2 - 1);
  if (a2 < 1)
  {
    unint64_t v5 = 0;
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)*a1;
    *a1 = (_WORD *)((char *)*a1 + 1);
  }
  sub_1018C51CC((uint64_t)a3, v5);
  uint64_t v6 = (_WORD *)*a3;
  uint64_t v7 = (_WORD *)a3[1];
  while (v6 != v7)
  {
    uint64_t v4 = sub_1018C51FC(&v9, v4, v6);
    v6 += 8;
  }
  return v4;
}

void sub_1018C51CC(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_1018C5258((void **)a1, a2 - v2);
  }
}

uint64_t sub_1018C51FC(_WORD ***a1, int a2, _WORD *a3)
{
  uint64_t v3 = *a1;
  int v4 = a2 - 2;
  if (a2 >= 2) {
    *a3 = *(*v3)++;
  }
  for (uint64_t i = 2; i != 8; i += 2)
  {
    BOOL v6 = __OFSUB__(v4, 4);
    v4 -= 4;
    if (v4 < 0 == v6)
    {
      *(_DWORD *)&a3[i] = *(_DWORD *)*v3;
      *v3 += 2;
    }
  }
  return (a2 - 14);
}

void sub_1018C5258(void **a1, unint64_t a2)
{
  BOOL v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      long long v14 = &v7[16 * a2];
      do
      {
        *(_WORD *)uint64_t v7 = 0;
        *(void *)(v7 + 4) = 0;
        *((_DWORD *)v7 + 3) = 0;
        v7 += 16;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      long long v13 = (char *)sub_1000C571C(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    int64x2_t v15 = &v13[16 * v10];
    float v16 = &v15[16 * a2];
    float v17 = v15;
    do
    {
      *(_WORD *)float v17 = 0;
      *(void *)(v17 + 4) = 0;
      *((_DWORD *)v17 + 3) = 0;
      v17 += 16;
    }
    while (v17 != v16);
    BOOL v18 = &v13[16 * v12];
    unint64_t v20 = (char *)*a1;
    unint64_t v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      unint64_t v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

__n128 sub_1018C5394(unsigned __int8 *a1, __n128 *a2)
{
  int v5 = *a1;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  if (v5)
  {
    sub_1018C5408(v4);
    __n128 result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *((void *)a1 + 3) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
  }
  else
  {
    uint64_t *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    __n128 result = *a2;
    *(__n128 *)(a1 + 8) = *a2;
    *((void *)a1 + 3) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *a1 = 1;
  }
  return result;
}

void sub_1018C5408(uint64_t *a1)
{
  if (*a1)
  {
    sub_1018C2A48(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1018C5444(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  v11[30] = 127;
  *(int64x2_t *)(v11 + 40) = vdupq_n_s64(0x7FF8000000000000uLL);
  *((void *)v11 + 7) = 0x7FF8000000000000;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_100100330(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *(void *)uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1018C5670(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1018C568C(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)buf = a1;
  operator new();
}

void sub_1018C5A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 113) < 0) {
    operator delete(*(void **)(v33 - 136));
  }
  float64x2_t v35 = (std::__shared_weak_count *)*((void *)v30 + 28);
  if (v35) {
    sub_1000DB0A0(v35);
  }
  *(void *)(v33 - 112) = v32;
  sub_1018C96EC((void ***)(v33 - 112));
  sub_1018C95FC(v31);
  qmi::Client::~Client(v30);
  _Unwind_Resume(a1);
}

uint64_t sub_1018C5B24(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    BOOL v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventServerError\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_1018C5C0C(v1 + 40, 2);
}

uint64_t sub_1018C5C0C(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  int v99 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_1018CDD98();
    goto LABEL_197;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_1018CDF08(qword_1024193D0 == -1);
    goto LABEL_197;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  unint64_t v4 = qword_1024193D8;
  os_log_type_t v5 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v5))
  {
    BOOL v6 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      BOOL v6 = (void *)*v6;
    }
    int v7 = *(_DWORD *)(a1 + 4);
    unint64_t v8 = "StateUnknown";
    if (v7 == 1) {
      unint64_t v8 = "Connected";
    }
    if (v7) {
      uint8x8_t v9 = (char *)v8;
    }
    else {
      uint8x8_t v9 = "Disconnected";
    }
    sub_100134750(__p, v9);
    int v10 = SHIBYTE(v103);
    uint64_t v11 = *(unsigned char **)__p;
    sub_1018C94A0(a2, v110);
    unint64_t v12 = __p;
    if (v10 < 0) {
      unint64_t v12 = v11;
    }
    if (v113 >= 0) {
      float v13 = v110;
    }
    else {
      float v13 = *(unsigned char **)v110;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v6;
    __int16 v106 = 2080;
    char v107 = v12;
    __int16 v108 = 2080;
    int v109 = v13;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v113 < 0) {
      operator delete(*(void **)v110);
    }
    if (SHIBYTE(v103) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    unsigned __int16 v64 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      unsigned __int16 v64 = (void *)*v64;
    }
    int v65 = *(_DWORD *)(a1 + 4);
    unsigned __int8 v66 = "StateUnknown";
    if (v65 == 1) {
      unsigned __int8 v66 = "Connected";
    }
    if (v65) {
      unsigned int v67 = (char *)v66;
    }
    else {
      unsigned int v67 = "Disconnected";
    }
    sub_100134750(v110, v67);
    int v68 = v113;
    __int16 v69 = *(unsigned char **)v110;
    sub_1018C94A0(a2, v97);
    float64_t v70 = v110;
    if (v68 < 0) {
      float64_t v70 = v69;
    }
    if (v98 >= 0) {
      __int16 v71 = v97;
    }
    else {
      __int16 v71 = (void **)v97[0];
    }
    *(_DWORD *)__n128 __p = 136315650;
    *(void *)&__p[4] = v64;
    __int16 v101 = 2080;
    uint64_t v102 = v70;
    __int16 v103 = 2080;
    float32x2_t v104 = v71;
    float64_t v72 = (char *)_os_log_send_and_compose_impl();
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v113 < 0) {
      operator delete(*(void **)v110);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v72);
    if (v72 != buf) {
      free(v72);
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    goto LABEL_33;
  }
  BOOL v15 = (uint64_t **)(a1 + 8);
  int v16 = *(_DWORD *)(a1 + 4);
  uint64_t v17 = a1 + 16;
  do
  {
    int v18 = *(_DWORD *)(v14 + 32);
    BOOL v19 = v18 < v16;
    if (v18 >= v16) {
      unint64_t v20 = (uint64_t *)v14;
    }
    else {
      unint64_t v20 = (uint64_t *)(v14 + 8);
    }
    if (!v19) {
      uint64_t v17 = v14;
    }
    uint64_t v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_33:
    sub_1018CE084();
    goto LABEL_197;
  }
  unint64_t v21 = *(uint64_t (**)(void *, uint64_t))(v17 + 40);
  uint64_t v22 = *(void *)(v17 + 48);
  unint64_t v23 = (void *)(*(void *)(a1 + 32) + (v22 >> 1));
  if (v22) {
    unint64_t v21 = *(uint64_t (**)(void *, uint64_t))(*v23 + v21);
  }
  uint64_t v24 = v21(v23, a2);
  uint64_t v25 = v24;
  int v96 = v24;
  if (a2 <= 1 && v24 != v99)
  {
    sub_1018CE4D4();
    goto LABEL_197;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    char v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      long long v27 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long long v27 = (void *)*v27;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      float64_t v78 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        float64_t v78 = (void *)*v78;
      }
      *(_DWORD *)__n128 __p = 136315138;
      *(void *)&__p[4] = v78;
      __int16 v79 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v79);
      if (v79 != buf) {
        free(v79);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  unint64_t v28 = qword_1024193D8;
  os_log_type_t v29 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v29))
  {
    unint64_t v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      unint64_t v30 = (void *)*v30;
    }
    uint64_t v31 = "StateUnknown";
    if (v25 == 1) {
      uint64_t v31 = "Connected";
    }
    if (v25) {
      uint64_t v32 = (char *)v31;
    }
    else {
      uint64_t v32 = "Disconnected";
    }
    sub_100134750(buf, v32);
    if (v108 >= 0) {
      uint64_t v33 = buf;
    }
    else {
      uint64_t v33 = *(unsigned char **)buf;
    }
    *(_DWORD *)__n128 __p = 136315394;
    *(void *)&__p[4] = v30;
    __int16 v101 = 2080;
    uint64_t v102 = v33;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v108) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    __int16 v73 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v73 = (void *)*v73;
    }
    double v74 = "StateUnknown";
    if (v25 == 1) {
      double v74 = "Connected";
    }
    if (v25) {
      float v75 = (char *)v74;
    }
    else {
      float v75 = "Disconnected";
    }
    sub_100134750(__p, v75);
    if (v103 >= 0) {
      int v76 = __p;
    }
    else {
      int v76 = *(unsigned char **)__p;
    }
    *(_DWORD *)__int16 v110 = 136315394;
    *(void *)&v110[4] = v73;
    __int16 v111 = 2080;
    __int16 v112 = v76;
    __int16 v77 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v103) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v77);
    if (v77 != buf) {
      free(v77);
    }
  }
  if (v25 != v99)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    float64x2_t v34 = qword_1024193D8;
    os_log_type_t v35 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v35))
    {
      unint64_t v36 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unint64_t v36 = (void *)*v36;
      }
      double v37 = "StateUnknown";
      if (v99 == 1) {
        double v37 = "Connected";
      }
      if (v99) {
        int v38 = (char *)v37;
      }
      else {
        int v38 = "Disconnected";
      }
      sub_100134750(__p, v38);
      int v39 = SHIBYTE(v103);
      float64x2_t v40 = *(unsigned char **)__p;
      sub_100134750(v110, "Exit");
      uint64_t v41 = __p;
      if (v39 < 0) {
        uint64_t v41 = v40;
      }
      if (v113 >= 0) {
        int v42 = v110;
      }
      else {
        int v42 = *(unsigned char **)v110;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v36;
      __int16 v106 = 2080;
      char v107 = v41;
      __int16 v108 = 2080;
      int v109 = v42;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%soldState,%s,event,%s", buf, 0x20u);
      if (v113 < 0) {
        operator delete(*(void **)v110);
      }
      if (SHIBYTE(v103) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      float64_t v80 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        float64_t v80 = (void *)*v80;
      }
      __int16 v81 = "StateUnknown";
      if (v99 == 1) {
        __int16 v81 = "Connected";
      }
      if (v99) {
        double v82 = (char *)v81;
      }
      else {
        double v82 = "Disconnected";
      }
      sub_100134750(v110, v82);
      int v83 = v113;
      uint64_t v84 = *(unsigned char **)v110;
      sub_100134750(v97, "Exit");
      uint64_t v85 = v110;
      if (v83 < 0) {
        uint64_t v85 = v84;
      }
      if (v98 >= 0) {
        v86 = v97;
      }
      else {
        v86 = (void **)v97[0];
      }
      *(_DWORD *)__n128 __p = 136315650;
      *(void *)&__p[4] = v80;
      __int16 v101 = 2080;
      uint64_t v102 = v85;
      __int16 v103 = 2080;
      float32x2_t v104 = v86;
      float v87 = (char *)_os_log_send_and_compose_impl();
      if (v98 < 0) {
        operator delete(v97[0]);
      }
      BOOL v15 = (uint64_t **)(a1 + 8);
      if (v113 < 0) {
        operator delete(*(void **)v110);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v87);
      if (v87 != buf) {
        free(v87);
      }
    }
    uint64_t v43 = *(void *)(a1 + 32);
    *(void *)buf = &v99;
    unsigned int v44 = sub_1000C5658(v15, &v99, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    int v45 = v44[5];
    uint64_t v46 = (uint64_t)v44[6];
    double v47 = (void *)(v43 + (v46 >> 1));
    if (v46) {
      int v45 = *(uint64_t **)(*v47 + v45);
    }
    int v48 = ((uint64_t (*)(void *, uint64_t))v45)(v47, 1);
    if (v48 == v99)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      double v49 = qword_1024193D8;
      os_log_type_t v50 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v50))
      {
        double v51 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          double v51 = (void *)*v51;
        }
        uint64_t v52 = "StateUnknown";
        if (v25 == 1) {
          uint64_t v52 = "Connected";
        }
        if (v25) {
          float64x2_t v53 = (char *)v52;
        }
        else {
          float64x2_t v53 = "Disconnected";
        }
        sub_100134750(__p, v53);
        int v54 = SHIBYTE(v103);
        char v55 = *(unsigned char **)__p;
        sub_100134750(v110, "Enter");
        float64x2_t v56 = __p;
        if (v54 < 0) {
          float64x2_t v56 = v55;
        }
        if (v113 >= 0) {
          float64x2_t v57 = v110;
        }
        else {
          float64x2_t v57 = *(unsigned char **)v110;
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v51;
        __int16 v106 = 2080;
        char v107 = v56;
        __int16 v108 = 2080;
        int v109 = v57;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "%snewState,%s,event,%s", buf, 0x20u);
        if (v113 < 0) {
          operator delete(*(void **)v110);
        }
        if (SHIBYTE(v103) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344600);
        }
        char v88 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          char v88 = (void *)*v88;
        }
        float v89 = "StateUnknown";
        if (v25 == 1) {
          float v89 = "Connected";
        }
        if (v25) {
          char v90 = (char *)v89;
        }
        else {
          char v90 = "Disconnected";
        }
        sub_100134750(v110, v90);
        int v91 = v113;
        int v92 = *(unsigned char **)v110;
        sub_100134750(v97, "Enter");
        float v93 = v110;
        if (v91 < 0) {
          float v93 = v92;
        }
        if (v98 >= 0) {
          unint64_t v94 = v97;
        }
        else {
          unint64_t v94 = (void **)v97[0];
        }
        *(_DWORD *)__n128 __p = 136315650;
        *(void *)&__p[4] = v88;
        __int16 v101 = 2080;
        uint64_t v102 = v93;
        __int16 v103 = 2080;
        float32x2_t v104 = v94;
        float v95 = (char *)_os_log_send_and_compose_impl();
        if (v98 < 0) {
          operator delete(v97[0]);
        }
        if (v113 < 0) {
          operator delete(*(void **)v110);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLQmiDmsController>::handleEvent(Event) [T = CLQmiDmsController]", "%s\n", v95);
        if (v95 != buf) {
          free(v95);
        }
      }
      uint64_t v58 = *(void *)(a1 + 32);
      *(void *)buf = &v96;
      unint64_t v59 = sub_1000C5658(v15, &v96, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      int v60 = v59[5];
      uint64_t v61 = (uint64_t)v59[6];
      unsigned int v62 = (void *)(v58 + (v61 >> 1));
      if (v61) {
        int v60 = *(uint64_t **)(*v62 + v60);
      }
      uint64_t v25 = ((uint64_t (*)(void *, void))v60)(v62, 0);
      if (v25 == v96) {
        goto LABEL_109;
      }
      sub_1018CE1F4();
    }
    else
    {
      sub_1018CE364();
    }
LABEL_197:
    __break(1u);
  }
LABEL_109:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_1018C6A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018C6AB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    BOOL v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventStarted\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_1018C5C0C(v1 + 40, 3);
}

uint64_t sub_1018C6B9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  unint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    BOOL v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventStopped\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_1018C5C0C(v1 + 40, 2);
}

void sub_1018C6C84(id a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  uint64_t v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    __int16 v3 = 2082;
    unint64_t v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventLowPowerExit\"}", (uint8_t *)v2, 0x12u);
  }
}

void sub_1018C6D5C(id a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  uint64_t v1 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    __int16 v3 = 2082;
    unint64_t v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#dms,kEventLowPower\"}", (uint8_t *)v2, 0x12u);
  }
}

uint64_t **sub_1018C6E34(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v22 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    unint64_t v4 = a4;
    __int16 v5 = a3;
    int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1018CE644(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102344600);
LABEL_3:
  unint64_t v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    int v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      int v10 = (void *)*v10;
    }
    uint64_t v11 = "StateUnknown";
    if (v7 == 1) {
      uint64_t v11 = "Connected";
    }
    if (v7) {
      unint64_t v12 = (char *)v11;
    }
    else {
      unint64_t v12 = "Disconnected";
    }
    sub_100134750(__p, v12);
    if (SBYTE3(v27) >= 0) {
      float v13 = __p;
    }
    else {
      float v13 = *(unsigned char **)__p;
    }
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v29 = 1024;
    int v30 = v7;
    __int16 v31 = 2080;
    uint64_t v32 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v27) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    BOOL v15 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      BOOL v15 = (void *)*v15;
    }
    int v16 = "StateUnknown";
    if (v7 == 1) {
      int v16 = "Connected";
    }
    if (v7) {
      uint64_t v17 = (char *)v16;
    }
    else {
      uint64_t v17 = "Disconnected";
    }
    sub_100134750(v20, v17);
    if (v21 >= 0) {
      int v18 = v20;
    }
    else {
      int v18 = (void **)v20[0];
    }
    *(_DWORD *)__n128 __p = 136315650;
    *(void *)&__p[4] = v15;
    __int16 v24 = 1024;
    int v25 = v7;
    __int16 v26 = 2080;
    long long v27 = v18;
    BOOL v19 = (char *)_os_log_send_and_compose_impl();
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLQmiDmsController>::setStateHandler(State, StateHandler) [T = CLQmiDmsController]", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
  }
  *(void *)buf = &v22;
  __n128 result = sub_1000C5658((uint64_t **)(v6 + 8), &v22, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

BOOL sub_1018C714C(uint64_t a1, int a2)
{
  if (a2 != 5) {
    return a2 == 3;
  }
  BOOL result = 0;
  *(unsigned char *)(a1 + 208) = 1;
  return result;
}

uint64_t sub_1018C7178(uint64_t a1, int a2)
{
  uint64_t result = 1;
  switch(a2)
  {
    case 0:
      if (*(unsigned char *)(a1 + 208)) {
        goto LABEL_3;
      }
      return result;
    case 1:
      sub_1018C76C0(a1 + 40, 6);
      goto LABEL_8;
    case 2:
      return 0;
    case 4:
      goto LABEL_4;
    case 5:
LABEL_3:
      *(_DWORD *)(a1 + 168) = 0;
LABEL_4:
      sub_1018C7560(a1);
      goto LABEL_8;
    case 6:
      sub_1018C7B54(a1);
LABEL_8:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1018C7218()
{
  *(unsigned char *)operator new(1uLL) = 38;
  sub_1018C8B9C();
}

void sub_1018C74BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018C7504(uint64_t a1)
{
  __int16 v3 = *(unsigned char **)(a1 + 216);
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 224);
  *__int16 v3 = 0;
  if (v2) {
    sub_1000DB0A0(v2);
  }
  unint64_t v4 = (void **)(a1 + 176);
  sub_1018C96EC(&v4);
  sub_1018C95FC(a1 + 40);
  qmi::Client::~Client((qmi::Client *)a1);
}

void sub_1018C7560(uint64_t a1)
{
  unint64_t v2 = *(unsigned int *)(a1 + 168);
  uint64_t v3 = *(void *)(a1 + 176);
  if (v2 >= (*(void *)(a1 + 184) - v3) >> 3)
  {
    *(unsigned char *)(a1 + 208) = 0;
    uint64_t v7 = a1 + 40;
    sub_1018C7FF0(v7, 5, 86400.0);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 216);
    __int16 v5 = *(std::__shared_weak_count **)(a1 + 224);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unint64_t v2 = *(unsigned int *)(a1 + 168);
      uint64_t v3 = *(void *)(a1 + 176);
    }
    uint64_t v6 = *(void (****)(void, uint64_t, void *))(v3 + 8 * v2);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3321888768;
    void v8[2] = sub_1018C8ADC;
    void v8[3] = &unk_1023445D0;
    unsigned char v8[4] = a1;
    v8[5] = v4;
    os_log_type_t v9 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (**v6)(v6, a1, v8);
    ++*(_DWORD *)(a1 + 168);
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1018C769C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018C76C0(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      unint64_t v8 = (uint64_t *)v4;
    }
    else {
      unint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (os_log_type_t v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    int v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      unint64_t v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unint64_t v12 = (void *)*v12;
      }
      sub_1018C94A0(a2, __p);
      if (v31 >= 0) {
        float v13 = __p;
      }
      else {
        float v13 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      __int16 v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_1018C94A0(a2, buf);
      if (v25 >= 0) {
        BOOL v15 = buf;
      }
      else {
        BOOL v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      long long v27 = v14;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLQmiDmsController>::cancelTimeoutEvent(Event) [T = CLQmiDmsController]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    uint64_t v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v18 = (void *)*v18;
      }
      sub_1018C94A0(a2, __p);
      if (v31 >= 0) {
        BOOL v19 = __p;
      }
      else {
        BOOL v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      __int16 v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      unint64_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        unint64_t v20 = (void *)*v20;
      }
      sub_1018C94A0(a2, buf);
      if (v25 >= 0) {
        char v21 = buf;
      }
      else {
        char v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      long long v27 = v20;
      __int16 v28 = 2080;
      __int16 v29 = v21;
      int v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void sub_1018C7B54(uint64_t a1)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v4, 0x2Fu);
  v4[4] = a1;
  uint64_t v5 = QMIServiceMsg::create((QMIServiceMsg *)v4, v2);
  int v6 = 25000;
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018C9938;
  aBlock[3] = &unk_10233CB70;
  aBlock[4] = &stru_1023445B0;
  uint64_t v3 = _Block_copy(aBlock);
  unint64_t v8 = v3;
  if (v5)
  {
    qmi::Client::send();
    uint64_t v3 = v8;
  }
  if (v3) {
    _Block_release(v3);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v4);
  sub_1018C7FF0(a1 + 40, 6, 4.0);
}

void sub_1018C7C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_1018C7C60(id a1, const void *a2)
{
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289283;
      int v11 = 0;
      __int16 v12 = 2082;
      float v13 = "";
      __int16 v14 = 2081;
      uint64_t v15 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,sendGetTime,response failed\", \"error\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  else
  {
    sub_1018C7FA4((qmi::MessageBase *)a2, v20);
    if (v20[0])
    {
      int v7 = 0;
      int v8 = 0;
      double v4 = sub_1004BDB28((unint64_t)((double)(((unint64_t)*(unsigned int *)((char *)__p + 2) << 16) | ((unint64_t)*((unsigned __int8 *)__p + 1) << 8) | *(unsigned __int8 *)__p)
                                          * 1.25));
      sub_1004BD8CC(&v8, &v7, v4);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289794;
        int v11 = 0;
        __int16 v12 = 2082;
        float v13 = "";
        __int16 v14 = 2050;
        uint64_t v15 = *(void *)&v4;
        __int16 v16 = 1026;
        int v17 = v8;
        __int16 v18 = 1026;
        int v19 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#dms,gpsTime\", \"now\":\"%{public}f\", \"week\":%{public}u, \"tow\":%{public}u}", buf, 0x28u);
      }
    }
    LOBYTE(v8) = 0;
    sub_1017CC774((qmi::MessageBase *)a2, 16, (uint64_t)&v8);
    if ((_BYTE)v8)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        if (!(_BYTE)v8) {
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        }
        *(_DWORD *)buf = 68289282;
        int v11 = 0;
        __int16 v12 = 2082;
        float v13 = "";
        __int16 v14 = 2050;
        uint64_t v15 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#dms,sysTime\", \"sysTime\":%{public}lld}", buf, 0x1Cu);
      }
    }
    if (v20[0] && __p)
    {
      int v22 = __p;
      operator delete(__p);
    }
  }
}

void sub_1018C7F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20)
{
  if (a18)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1018C7FA4(qmi::MessageBase *a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  sub_1018C97AC(a1, 1, (uint64_t)a2);
}

void sub_1018C7FD4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_1017CF46C((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018C7FF0(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  double v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    uint64_t v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v33 = (void *)*v33;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      double v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        double v37 = (void *)*v37;
      }
      *(_DWORD *)__n128 __p = 136315138;
      *(void *)&__p[4] = v37;
      int v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLQmiDmsController>::setTimeoutEvent(Event, double) [T = CLQmiDmsController]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    float64x2_t v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
    }
    os_log_type_t v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
    }
    unint64_t v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v8 = (void *)*v8;
      }
      sub_1018C94A0(a2, __p);
      if (v49 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v9;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      int v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v10 = (void *)*v10;
      }
      sub_1018C94A0(a2, v42);
      if (v45 >= 0) {
        int v11 = v42;
      }
      else {
        int v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)__n128 __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      int v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLQmiDmsController>::setTimeoutEvent(Event, double) [T = CLQmiDmsController]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        int v17 = (uint64_t *)v13;
      }
      else {
        int v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      __int16 v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344600);
        }
        char v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          __int16 v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v23 = (void *)*v23;
          }
          sub_1018C94A0(v41, __p);
          if (v49 >= 0) {
            __int16 v24 = __p;
          }
          else {
            __int16 v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&buf[22] = 2048;
          *(double *)&buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344600);
          }
          char v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            char v25 = (void *)*v25;
          }
          sub_1018C94A0(v41, v42);
          if (v45 >= 0) {
            int v26 = v42;
          }
          else {
            int v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)__n128 __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          int v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          __int16 v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLQmiDmsController>::setTimeoutEvent(Event, double) [T = CLQmiDmsController]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  int v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    __int16 v18 = v19;
    *(void *)buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1018C9A94;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  long long v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    __int16 v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v28 = (void *)*v28;
    }
    sub_1018C94A0(a2, buf);
    if (buf[23] >= 0) {
      __int16 v29 = buf;
    }
    else {
      __int16 v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)__n128 __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    int v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    int v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v30 = (void *)*v30;
    }
    sub_1018C94A0(a2, __p);
    if (v49 >= 0) {
      char v31 = __p;
    }
    else {
      char v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)int v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    unsigned int v44 = v31;
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_1018C8ADC(void *a1)
{
  unint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    double v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      int v6 = (unsigned char *)a1[5];
      if (v6 && *v6) {
        sub_1018C5C0C(v3 + 40, 4);
      }
      sub_1000DB0A0(v5);
    }
  }
}

void sub_1018C8B5C(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018C8B70(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1018C8B8C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1018C8B9C()
{
}

void sub_1018C8D6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1018C9C54((void **)va);
  _Unwind_Resume(a1);
}

void sub_1018C8DDC()
{
}

void sub_1018C8FAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1018C9C54((void **)va);
  _Unwind_Resume(a1);
}

void sub_1018C901C()
{
}

void sub_1018C91EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1018C9C54((void **)va);
  _Unwind_Resume(a1);
}

void sub_1018C925C()
{
}

void sub_1018C9454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1018C9C54((void **)va);
  _Unwind_Resume(a1);
}

void *sub_1018C94A0@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 6) {
    uint64_t v2 = "EventUnknown";
  }
  else {
    uint64_t v2 = off_1023448D8[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_1018C94CC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018C9500(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1018C953C(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void sub_1018C9580(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102344690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1018C95A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102344690;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1018C95FC(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_1018C966C(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1018C966C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_1018C76C0(a3, *((_DWORD *)v5 + 8));
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          int v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          int v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_1018C96EC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1018C9740(v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_1018C9740(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    double v4 = (void *)*--v3;
    uint64_t result = v4;
    *uint64_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void sub_1018C97AC(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  v8[0] = qmi::MessageBase::findTlvValue(a1);
  v8[1] = v4;
  if (v8[0])
  {
    __n128 __p = 0uLL;
    uint64_t v7 = 0;
    if (sub_1018C985C(v8, v4, __p.n128_u64)) {
      v8[0] = 0;
    }
    sub_1017CDAAC(a3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!v8[0] && *(unsigned char *)a3)
    {
      uint64_t v5 = *(void **)(a3 + 8);
      if (v5)
      {
        *(void *)(a3 + 16) = v5;
        operator delete(v5);
      }
      *(unsigned char *)a3 = 0;
    }
  }
}

void sub_1018C983C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018C985C(void *a1, int a2, unint64_t *a3)
{
  int v4 = a2;
  if (a2 <= 0)
  {
    unint64_t v6 = 0;
    BOOL v8 = a3 + 1;
    uint64_t v7 = (unsigned char *)a3[1];
    uint64_t v9 = (unsigned char *)*a3;
    int v10 = &v7[-*a3];
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(*a1)++;
    BOOL v8 = a3 + 1;
    uint64_t v7 = (unsigned char *)a3[1];
    uint64_t v9 = (unsigned char *)*a3;
    int v10 = &v7[-*a3];
    if (v6 > (unint64_t)v10)
    {
      sub_1004BFB3C(a3, v6 - (void)v10);
      uint64_t v9 = (unsigned char *)*a3;
      uint64_t v7 = (unsigned char *)a3[1];
      goto LABEL_7;
    }
  }
  if ((unint64_t)v10 > v6)
  {
    uint64_t v7 = &v9[v6];
    *BOOL v8 = &v9[v6];
  }
LABEL_7:
  if (v9 == v7) {
    return (v4 - 1);
  }
  int v11 = v9 + v4;
  do
  {
    if (v4 >= 2) {
      *uint64_t v9 = *(unsigned char *)(*a1)++;
    }
    ++v9;
    --v4;
  }
  while (v9 != v7);
  return (v11 + ~v7);
}

void sub_1018C9938(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1018C999C(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1018C9988(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018C999C(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018C9A50(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1017D0410((uint64_t)a2);
  }
}

void sub_1018C9A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

qmi::ResponseBase *sub_1018C9A50(qmi::ResponseBase *a1, const void *a2, unint64_t a3)
{
  int v4 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x2Fu);
  return a1;
}

void sub_1018C9A80(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018C9A94(uint64_t a1)
{
  return sub_1018C5C0C(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t sub_1018C9AA4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1018C9B1C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1018C9B1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1018C9BB4((uint64_t)v13);
  return v11;
}

uint64_t sub_1018C9BB4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1018C9BEC((void *)a1);
  }
  return a1;
}

void *sub_1018C9BEC(void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    qmi::MessageBase *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
    }
    ++v1;
  }
  return result;
}

void **sub_1018C9C54(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_1018C9C8C(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    int v4 = result;
    do
    {
      _DWORD v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_1018C9D00(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(void *)a1 = off_1023446E0;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = *(void *)(a3 + 8) - *(void *)a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_10016989C((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  *(unsigned char *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 49) = a4;
  return a1;
}

void sub_1018C9D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13, 0x5558u);
  *(_DWORD *)sub_1018CAA44((uint64_t)v13, 1) = *(_DWORD *)(a1 + 8);
  void v8[6] = a2;
  uint64_t v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v6);
  int v10 = 25000;
  uint64_t v11 = 0;
  __int16 v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1018C9F90;
  void v8[3] = &unk_102344728;
  unsigned char v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018CACE0;
  aBlock[3] = &unk_10233CB70;
  aBlock[4] = v8;
  uint64_t v7 = _Block_copy(aBlock);
  __int16 v12 = v7;
  if (v9)
  {
    qmi::Client::send();
    uint64_t v7 = v12;
  }
  if (v7) {
    _Block_release(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1018C9EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_1017D0280((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void *sub_1018C9ED0(void *a1)
{
  *a1 = off_1023446E0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018C9F20(void *a1)
{
  *a1 = off_1023446E0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1018C9F90(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(v3 + 8);
      *(_DWORD *)buf = 68289539;
      int v15 = 0;
      LOWORD(__p) = 2082;
      *(void *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v5;
      __int16 v17 = 2081;
      uint64_t v18 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_1018CA1C0(a2, buf);
    if (buf[0])
    {
      sub_1018CA20C(v3, (char **)&__p);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(v3 + 8);
        v9[0] = 68289282;
        v9[1] = 0;
        __int16 v10 = 2082;
        uint64_t v11 = "";
        __int16 v12 = 1026;
        int v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v9, 0x18u);
      }
    }
    if (buf[0] && (void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1018CA194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1018CA1C0(qmi::MessageBase *a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  sub_1018CAD44(a1, 16, (uint64_t)a2);
}

void sub_1018CA1F0(_Unwind_Exception *exception_object)
{
  if (*v1) {
    sub_1017CF46C((uint64_t)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018CA20C(uint64_t a1, char **a2)
{
  sub_1018CADF4(a1, a2, (unint64_t *)&__s2);
  sub_10010F274((uint64_t)v30);
  sub_1018CAF50((uint64_t)__s2, (uint64_t)v33, (uint64_t)v30);
  if (*(unsigned char *)(a1 + 48))
  {
    sub_10010F274((uint64_t)v43);
    sub_1018CAF50(*(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v43);
    if (!memcmp(*(const void **)(a1 + 24), __s2, *(void *)(a1 + 32) - *(void *)(a1 + 24)))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      long long v16 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      int v17 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str();
      std::stringbuf::str();
      uint64_t v18 = v28;
      if (v29 < 0) {
        uint64_t v18 = (void **)v28[0];
      }
      if (v27 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      unint64_t v36 = "";
      __int16 v37 = 1026;
      int v38 = v17;
      __int16 v39 = 2082;
      unsigned int v40 = v18;
      __int16 v41 = 2082;
      int v42 = v19;
      dispatch_time_t v20 = "{\"msg%{public}.0s\":\"#bb.e,#dms,matching\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only"
            "}s, \"receieved\":%{public, location:escape_only}s}";
    }
    else
    {
      if (*(unsigned char *)(a1 + 49))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344600);
        }
        uint64_t v3 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          int v4 = *(_DWORD *)(a1 + 8);
          std::stringbuf::str();
          std::stringbuf::str();
          int v5 = v28;
          if (v29 < 0) {
            int v5 = (void **)v28[0];
          }
          if (v27 >= 0) {
            uint64_t v6 = __p;
          }
          else {
            uint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v35 = 2082;
          unint64_t v36 = "";
          __int16 v37 = 1026;
          int v38 = v4;
          __int16 v39 = 2082;
          unsigned int v40 = v5;
          __int16 v41 = 2082;
          int v42 = v6;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
          if (v29 < 0) {
            operator delete(v28[0]);
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344600);
          }
        }
        int v7 = qword_1024193D8;
        if (!os_signpost_enabled((os_log_t)qword_1024193D8)) {
          goto LABEL_56;
        }
        int v8 = *(_DWORD *)(a1 + 8);
        std::stringbuf::str();
        int v9 = v29;
        __int16 v10 = (void **)v28[0];
        std::stringbuf::str();
        uint64_t v11 = v28;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v27 >= 0) {
          __int16 v12 = __p;
        }
        else {
          __int16 v12 = (void **)__p[0];
        }
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        unint64_t v36 = "";
        __int16 v37 = 1026;
        int v38 = v8;
        __int16 v39 = 2082;
        unsigned int v40 = v11;
        __int16 v41 = 2082;
        int v42 = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning,#bb.e,#dms,mismatch", "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
LABEL_52:
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
LABEL_56:
        *(void *)&v45[6] = v24;
        if (v47 < 0) {
          operator delete((void *)v46[8]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        goto LABEL_59;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      long long v16 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      int v21 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str();
      std::stringbuf::str();
      os_log_type_t v22 = v28;
      if (v29 < 0) {
        os_log_type_t v22 = (void **)v28[0];
      }
      if (v27 >= 0) {
        __int16 v23 = __p;
      }
      else {
        __int16 v23 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      unint64_t v36 = "";
      __int16 v37 = 1026;
      int v38 = v21;
      __int16 v39 = 2082;
      unsigned int v40 = v22;
      __int16 v41 = 2082;
      int v42 = v23;
      dispatch_time_t v20 = "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:es"
            "cape_only}s, \"receieved\":%{public, location:escape_only}s}";
    }
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v20, buf, 0x2Cu);
    goto LABEL_52;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  int v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(_DWORD *)(a1 + 8);
    std::stringbuf::str();
    int v15 = v38 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)__int16 v43 = 68289538;
    *(_DWORD *)&v43[4] = 0;
    __int16 v44 = 2082;
    *(void *)char v45 = "";
    *(_WORD *)&v45[8] = 1026;
    *(_DWORD *)&v45[10] = v14;
    LOWORD(v46[0]) = 2082;
    *(void *)((char *)v46 + 2) = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,readNv\", \"nv\":%{public}d, \"receieved\":%{public, location:escape_only}s}", v43, 0x22u);
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_59:
  *(void *)((char *)v30
  v30[2] = v25;
  if (v31 < 0) {
    operator delete((void *)v30[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if (__s2)
  {
    uint64_t v33 = __s2;
    operator delete(__s2);
  }
}

void sub_1018CA9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a62);
  sub_101A129A8((uint64_t)&a18);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

char *sub_1018CAA44(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    sub_1018CAAF4();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void sub_1018CAAF4()
{
}

void sub_1018CAC24()
{
}

uint64_t sub_1018CAC38()
{
  return 7;
}

uint64_t sub_1018CAC40(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  *a2 += 3;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  uint64_t v4 = *a2 + 4;
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = v4 - (v3 + 3);
  return result;
}

void sub_1018CAC7C()
{
}

void sub_1018CACE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1018640D4(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1018CAD30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018CAD44(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  v8[0] = qmi::MessageBase::findTlvValue(a1);
  v8[1] = v4;
  if (v8[0])
  {
    __n128 __p = 0uLL;
    uint64_t v7 = 0;
    if (sub_101841718(v8, v4, __p.n128_u64)) {
      v8[0] = 0;
    }
    sub_1017CDAAC(a3, &__p);
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (!v8[0] && *(unsigned char *)a3)
    {
      int v5 = *(void **)(a3 + 8);
      if (v5)
      {
        *(void *)(a3 + 16) = v5;
        operator delete(v5);
      }
      *(unsigned char *)a3 = 0;
    }
  }
}

void sub_1018CADD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018CADF4(uint64_t a1@<X0>, char **a2@<X1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  unint64_t v5 = *(void *)(a1 + 16);
  if (a2[1] - *a2 <= v5) {
    uint64_t v6 = a2[1];
  }
  else {
    uint64_t v6 = &(*a2)[v5];
  }
  if (v4 != v6)
  {
    uint64_t v7 = 0;
    do
    {
      char v8 = *v4;
      unint64_t v9 = a3[2];
      if ((unint64_t)v7 >= v9)
      {
        unint64_t v11 = *a3;
        __int16 v12 = &v7[-*a3];
        unint64_t v13 = (unint64_t)(v12 + 1);
        if ((uint64_t)(v12 + 1) < 0) {
          sub_1001D7FD4();
        }
        unint64_t v14 = v9 - v11;
        if (2 * v14 > v13) {
          unint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v15 = v13;
        }
        if (v15) {
          long long v16 = (char *)operator new(v15);
        }
        else {
          long long v16 = 0;
        }
        int v17 = &v12[(void)v16];
        uint64_t v18 = &v12[(void)v16];
        *uint64_t v18 = v8;
        __int16 v10 = v18 + 1;
        if (v7 != (unsigned char *)v11)
        {
          int v19 = &v7[~v11];
          do
          {
            char v20 = *--v7;
            (v19--)[(void)v16] = v20;
          }
          while (v7 != (unsigned char *)v11);
          uint64_t v7 = (unsigned char *)*a3;
          int v17 = v16;
        }
        *a3 = (unint64_t)v17;
        a3[1] = (unint64_t)v10;
        a3[2] = (unint64_t)&v16[v15];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *uint64_t v7 = v8;
        __int16 v10 = v7 + 1;
      }
      a3[1] = (unint64_t)v10;
      ++v4;
      uint64_t v7 = v10;
    }
    while (v4 != v6);
  }
}

void sub_1018CAF30(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018CAF50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      ++v5;
      uint64_t v6 = (void *)std::ostream::operator<<();
      sub_100132EFC(v6, (uint64_t)",", 1);
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_1018CAFC0(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(void *)a1 = off_1023447A8;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = *(void *)(a3 + 8) - *(void *)a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_10016989C((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  *(unsigned char *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 49) = a4;
  return a1;
}

void sub_1018CB034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13, 0x5557u);
  *(_DWORD *)sub_1018CAA44((uint64_t)v13, 1) = *(_DWORD *)(a1 + 8);
  void v8[6] = a2;
  uint64_t v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v6);
  int v10 = 25000;
  uint64_t v11 = 0;
  __int16 v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1018CB250;
  void v8[3] = &unk_102344728;
  unsigned char v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018CB480;
  aBlock[3] = &unk_10233CB70;
  aBlock[4] = v8;
  uint64_t v7 = _Block_copy(aBlock);
  __int16 v12 = v7;
  if (v9)
  {
    qmi::Client::send();
    uint64_t v7 = v12;
  }
  if (v7) {
    _Block_release(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1018CB164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_1017D0280((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void *sub_1018CB190(void *a1)
{
  *a1 = off_1023447A8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018CB1E0(void *a1)
{
  *a1 = off_1023447A8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1018CB250(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(v3 + 8);
      *(_DWORD *)buf = 68289539;
      int v15 = 0;
      LOWORD(__p) = 2082;
      *(void *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v5;
      __int16 v17 = 2081;
      uint64_t v18 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_1018CA1C0(a2, buf);
    if (buf[0])
    {
      sub_1018CA20C(v3, (char **)&__p);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(v3 + 8);
        v9[0] = 68289282;
        v9[1] = 0;
        __int16 v10 = 2082;
        uint64_t v11 = "";
        __int16 v12 = 1026;
        int v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v9, 0x18u);
      }
    }
    if (buf[0] && (void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1018CB454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1018CB480(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_101866050(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1018CB4D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018CB4E4(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(void *)a1 = off_1023447E8;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_10010F834((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(unsigned char *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 49) = a4;
  return a1;
}

void sub_1018CB560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13, 0x5558u);
  *(_DWORD *)sub_1018CAA44((uint64_t)v13, 1) = *(_DWORD *)(a1 + 8);
  void v8[6] = a2;
  uint64_t v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v6);
  int v10 = 25000;
  uint64_t v11 = 0;
  __int16 v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1018CB77C;
  void v8[3] = &unk_102344728;
  unsigned char v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018CACE0;
  aBlock[3] = &unk_10233CB70;
  aBlock[4] = v8;
  int v7 = _Block_copy(aBlock);
  __int16 v12 = v7;
  if (v9)
  {
    qmi::Client::send();
    int v7 = v12;
  }
  if (v7) {
    _Block_release(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1018CB690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_1017D0280((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void *sub_1018CB6BC(void *a1)
{
  *a1 = off_1023447E8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018CB70C(void *a1)
{
  *a1 = off_1023447E8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1018CB77C(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(v3 + 8);
      *(_DWORD *)buf = 68289539;
      int v15 = 0;
      LOWORD(__p) = 2082;
      *(void *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v5;
      __int16 v17 = 2081;
      uint64_t v18 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_1018CA1C0(a2, buf);
    if (buf[0])
    {
      sub_1018CB9AC(v3, (unsigned __int8 **)&__p);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(v3 + 8);
        v9[0] = 68289282;
        v9[1] = 0;
        __int16 v10 = 2082;
        uint64_t v11 = "";
        __int16 v12 = 1026;
        int v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v9, 0x18u);
      }
    }
    if (buf[0] && (void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1018CB980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1018CB9AC(uint64_t a1, unsigned __int8 **a2)
{
  sub_1018CC1E4(a1, a2, (char **)&__s2);
  sub_10010F274((uint64_t)v30);
  sub_1018CC418((uint64_t)__s2, (uint64_t)v33, (uint64_t)v30);
  if (*(unsigned char *)(a1 + 48))
  {
    sub_10010F274((uint64_t)v43);
    sub_1018CC418(*(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v43);
    if (!memcmp(*(const void **)(a1 + 24), __s2, *(void *)(a1 + 32) - *(void *)(a1 + 24)))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      long long v16 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      int v17 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str();
      std::stringbuf::str();
      uint64_t v18 = v28;
      if (v29 < 0) {
        uint64_t v18 = (void **)v28[0];
      }
      if (v27 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      unint64_t v36 = "";
      __int16 v37 = 1026;
      int v38 = v17;
      __int16 v39 = 2082;
      unsigned int v40 = v18;
      __int16 v41 = 2082;
      int v42 = v19;
      char v20 = "{\"msg%{public}.0s\":\"#bb.e,#dms,matching\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only"
            "}s, \"receieved\":%{public, location:escape_only}s}";
    }
    else
    {
      if (*(unsigned char *)(a1 + 49))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344600);
        }
        uint64_t v3 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          int v4 = *(_DWORD *)(a1 + 8);
          std::stringbuf::str();
          std::stringbuf::str();
          int v5 = v28;
          if (v29 < 0) {
            int v5 = (void **)v28[0];
          }
          if (v27 >= 0) {
            uint64_t v6 = __p;
          }
          else {
            uint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v35 = 2082;
          unint64_t v36 = "";
          __int16 v37 = 1026;
          int v38 = v4;
          __int16 v39 = 2082;
          unsigned int v40 = v5;
          __int16 v41 = 2082;
          int v42 = v6;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
          if (v29 < 0) {
            operator delete(v28[0]);
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344600);
          }
        }
        int v7 = qword_1024193D8;
        if (!os_signpost_enabled((os_log_t)qword_1024193D8)) {
          goto LABEL_56;
        }
        int v8 = *(_DWORD *)(a1 + 8);
        std::stringbuf::str();
        int v9 = v29;
        __int16 v10 = (void **)v28[0];
        std::stringbuf::str();
        uint64_t v11 = v28;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v27 >= 0) {
          __int16 v12 = __p;
        }
        else {
          __int16 v12 = (void **)__p[0];
        }
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        unint64_t v36 = "";
        __int16 v37 = 1026;
        int v38 = v8;
        __int16 v39 = 2082;
        unsigned int v40 = v11;
        __int16 v41 = 2082;
        int v42 = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning,#bb.e,#dms,mismatch", "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
LABEL_52:
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
LABEL_56:
        *(void *)&v45[6] = v24;
        if (v47 < 0) {
          operator delete((void *)v46[8]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        goto LABEL_59;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      long long v16 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      int v21 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str();
      std::stringbuf::str();
      os_log_type_t v22 = v28;
      if (v29 < 0) {
        os_log_type_t v22 = (void **)v28[0];
      }
      if (v27 >= 0) {
        __int16 v23 = __p;
      }
      else {
        __int16 v23 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      unint64_t v36 = "";
      __int16 v37 = 1026;
      int v38 = v21;
      __int16 v39 = 2082;
      unsigned int v40 = v22;
      __int16 v41 = 2082;
      int v42 = v23;
      char v20 = "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:es"
            "cape_only}s, \"receieved\":%{public, location:escape_only}s}";
    }
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v20, buf, 0x2Cu);
    goto LABEL_52;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  int v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(_DWORD *)(a1 + 8);
    std::stringbuf::str();
    int v15 = v38 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)__int16 v43 = 68289538;
    *(_DWORD *)&v43[4] = 0;
    __int16 v44 = 2082;
    *(void *)char v45 = "";
    *(_WORD *)&v45[8] = 1026;
    *(_DWORD *)&v45[10] = v14;
    LOWORD(v46[0]) = 2082;
    *(void *)((char *)v46 + 2) = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,readNv\", \"nv\":%{public}d, \"receieved\":%{public, location:escape_only}s}", v43, 0x22u);
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_59:
  *(void *)((char *)v30
  v30[2] = v25;
  if (v31 < 0) {
    operator delete((void *)v30[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if (__s2)
  {
    uint64_t v33 = __s2;
    operator delete(__s2);
  }
}

void sub_1018CC164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a62);
  sub_101A129A8((uint64_t)&a18);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

void sub_1018CC1E4(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (a2[1] - *a2 <= (unint64_t)(4 * v5)) {
    uint64_t v6 = (uint64_t)a2[1];
  }
  else {
    uint64_t v6 = (uint64_t)&(*a2)[4 * v5];
  }
  if (v4 != (unsigned __int8 *)v6)
  {
    int v7 = 0;
    int v8 = a3 + 2;
    do
    {
      int v9 = 0;
      int v10 = 0;
      while (1)
      {
        v10 |= *v4 << v9;
        if (v9 == 24) {
          break;
        }
        ++v4;
        v9 += 8;
        if (v4 == (unsigned __int8 *)v6)
        {
          if (v9)
          {
            if ((unint64_t)v7 >= *v8)
            {
              int v21 = *a3;
              uint64_t v22 = (v7 - *a3) >> 2;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                sub_1001D7FD4();
              }
              uint64_t v24 = *v8 - (void)v21;
              if (v24 >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                int v26 = (char *)sub_10017EA34((uint64_t)(a3 + 2), v25);
                int v21 = *a3;
                int v7 = a3[1];
              }
              else
              {
                int v26 = 0;
              }
              char v27 = &v26[4 * v22];
              __int16 v28 = &v26[4 * v25];
              *(_DWORD *)char v27 = v10;
              char v20 = v27 + 4;
              while (v7 != v21)
              {
                int v29 = *((_DWORD *)v7 - 1);
                v7 -= 4;
                *((_DWORD *)v27 - 1) = v29;
                v27 -= 4;
              }
              *a3 = v27;
              a3[1] = v20;
              a3[2] = v28;
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              *(_DWORD *)int v7 = v10;
              char v20 = v7 + 4;
            }
            a3[1] = v20;
          }
          return;
        }
      }
      if ((unint64_t)v7 >= *v8)
      {
        __int16 v12 = *a3;
        uint64_t v13 = (v7 - *a3) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          sub_1001D7FD4();
        }
        uint64_t v15 = *v8 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          int v17 = (char *)sub_10017EA34((uint64_t)(a3 + 2), v16);
          __int16 v12 = *a3;
          int v7 = a3[1];
        }
        else
        {
          int v17 = 0;
        }
        uint64_t v18 = &v17[4 * v13];
        *(_DWORD *)uint64_t v18 = v10;
        uint64_t v11 = v18 + 4;
        while (v7 != v12)
        {
          int v19 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)int v7 = v10;
        uint64_t v11 = v7 + 4;
      }
      a3[1] = v11;
      ++v4;
      int v7 = v11;
    }
    while (v4 != (unsigned __int8 *)v6);
  }
}

void sub_1018CC3F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018CC418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      v5 += 4;
      uint64_t v6 = (void *)std::ostream::operator<<();
      sub_100132EFC(v6, (uint64_t)",", 1);
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_1018CC488(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(void *)a1 = off_102344828;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_10010F834((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  *(unsigned char *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 49) = a4;
  return a1;
}

void sub_1018CC504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13, 0x5557u);
  *(_DWORD *)sub_1018CAA44((uint64_t)v13, 1) = *(_DWORD *)(a1 + 8);
  void v8[6] = a2;
  uint64_t v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v6);
  int v10 = 25000;
  uint64_t v11 = 0;
  __int16 v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1018CC720;
  void v8[3] = &unk_102344728;
  unsigned char v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018CB480;
  aBlock[3] = &unk_10233CB70;
  aBlock[4] = v8;
  int v7 = _Block_copy(aBlock);
  __int16 v12 = v7;
  if (v9)
  {
    qmi::Client::send();
    int v7 = v12;
  }
  if (v7) {
    _Block_release(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1018CC634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_1017D0280((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void *sub_1018CC660(void *a1)
{
  *a1 = off_102344828;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018CC6B0(void *a1)
{
  *a1 = off_102344828;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1018CC720(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(v3 + 8);
      *(_DWORD *)buf = 68289539;
      int v15 = 0;
      LOWORD(__p) = 2082;
      *(void *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v5;
      __int16 v17 = 2081;
      uint64_t v18 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_1018CA1C0(a2, buf);
    if (buf[0])
    {
      sub_1018CB9AC(v3, (unsigned __int8 **)&__p);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(v3 + 8);
        v9[0] = 68289282;
        v9[1] = 0;
        __int16 v10 = 2082;
        uint64_t v11 = "";
        __int16 v12 = 1026;
        int v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v9, 0x18u);
      }
    }
    if (buf[0] && (void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1018CC924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018CC950(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(void *)a1 = off_102344868;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_100C3D524((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1);
  *(unsigned char *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 49) = a4;
  return a1;
}

void sub_1018CC9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13, 0x5558u);
  *(_DWORD *)sub_1018CAA44((uint64_t)v13, 1) = *(_DWORD *)(a1 + 8);
  void v8[6] = a2;
  uint64_t v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v6);
  int v10 = 25000;
  uint64_t v11 = 0;
  __int16 v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1018CCBE8;
  void v8[3] = &unk_102344728;
  unsigned char v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018CACE0;
  aBlock[3] = &unk_10233CB70;
  aBlock[4] = v8;
  int v7 = _Block_copy(aBlock);
  __int16 v12 = v7;
  if (v9)
  {
    qmi::Client::send();
    int v7 = v12;
  }
  if (v7) {
    _Block_release(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1018CCAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_1017D0280((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void *sub_1018CCB28(void *a1)
{
  *a1 = off_102344868;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018CCB78(void *a1)
{
  *a1 = off_102344868;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1018CCBE8(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(v3 + 8);
      *(_DWORD *)buf = 68289539;
      int v15 = 0;
      LOWORD(__p) = 2082;
      *(void *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v5;
      __int16 v17 = 2081;
      uint64_t v18 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_1018CA1C0(a2, buf);
    if (buf[0])
    {
      sub_1018CCE18(v3, (unsigned __int8 **)&__p);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(v3 + 8);
        v9[0] = 68289282;
        v9[1] = 0;
        __int16 v10 = 2082;
        uint64_t v11 = "";
        __int16 v12 = 1026;
        int v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v9, 0x18u);
      }
    }
    if (buf[0] && (void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1018CCDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1018CCE18(uint64_t a1, unsigned __int8 **a2)
{
  sub_1018CD650(a1, a2, (char **)&__s2);
  sub_10010F274((uint64_t)v30);
  sub_1018CD860((uint64_t)__s2, (uint64_t)v33, (uint64_t)v30);
  if (*(unsigned char *)(a1 + 48))
  {
    sub_10010F274((uint64_t)v43);
    sub_1018CD860(*(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v43);
    if (!memcmp(*(const void **)(a1 + 24), __s2, *(void *)(a1 + 32) - *(void *)(a1 + 24)))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      unint64_t v16 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      int v17 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str();
      std::stringbuf::str();
      uint64_t v18 = v28;
      if (v29 < 0) {
        uint64_t v18 = (void **)v28[0];
      }
      if (v27 >= 0) {
        int v19 = __p;
      }
      else {
        int v19 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      unint64_t v36 = "";
      __int16 v37 = 1026;
      int v38 = v17;
      __int16 v39 = 2082;
      unsigned int v40 = v18;
      __int16 v41 = 2082;
      int v42 = v19;
      char v20 = "{\"msg%{public}.0s\":\"#bb.e,#dms,matching\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only"
            "}s, \"receieved\":%{public, location:escape_only}s}";
    }
    else
    {
      if (*(unsigned char *)(a1 + 49))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102344600);
        }
        uint64_t v3 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          int v4 = *(_DWORD *)(a1 + 8);
          std::stringbuf::str();
          std::stringbuf::str();
          int v5 = v28;
          if (v29 < 0) {
            int v5 = (void **)v28[0];
          }
          if (v27 >= 0) {
            uint64_t v6 = __p;
          }
          else {
            uint64_t v6 = (void **)__p[0];
          }
          *(_DWORD *)buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v35 = 2082;
          unint64_t v36 = "";
          __int16 v37 = 1026;
          int v38 = v4;
          __int16 v39 = 2082;
          unsigned int v40 = v5;
          __int16 v41 = 2082;
          int v42 = v6;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
          if (v29 < 0) {
            operator delete(v28[0]);
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102344600);
          }
        }
        int v7 = qword_1024193D8;
        if (!os_signpost_enabled((os_log_t)qword_1024193D8)) {
          goto LABEL_56;
        }
        int v8 = *(_DWORD *)(a1 + 8);
        std::stringbuf::str();
        int v9 = v29;
        __int16 v10 = (void **)v28[0];
        std::stringbuf::str();
        uint64_t v11 = v28;
        if (v9 < 0) {
          uint64_t v11 = v10;
        }
        if (v27 >= 0) {
          __int16 v12 = __p;
        }
        else {
          __int16 v12 = (void **)__p[0];
        }
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        unint64_t v36 = "";
        __int16 v37 = 1026;
        int v38 = v8;
        __int16 v39 = 2082;
        unsigned int v40 = v11;
        __int16 v41 = 2082;
        int v42 = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning,#bb.e,#dms,mismatch", "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:escape_only}s, \"receieved\":%{public, location:escape_only}s}", buf, 0x2Cu);
LABEL_52:
        if (v27 < 0) {
          operator delete(__p[0]);
        }
        if (v29 < 0) {
          operator delete(v28[0]);
        }
LABEL_56:
        *(void *)&v45[6] = v24;
        if (v47 < 0) {
          operator delete((void *)v46[8]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        goto LABEL_59;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      unint64_t v16 = qword_1024193D8;
      if (!os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_56;
      }
      int v21 = *(_DWORD *)(a1 + 8);
      std::stringbuf::str();
      std::stringbuf::str();
      uint64_t v22 = v28;
      if (v29 < 0) {
        uint64_t v22 = (void **)v28[0];
      }
      if (v27 >= 0) {
        unint64_t v23 = __p;
      }
      else {
        unint64_t v23 = (void **)__p[0];
      }
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      unint64_t v36 = "";
      __int16 v37 = 1026;
      int v38 = v21;
      __int16 v39 = 2082;
      unsigned int v40 = v22;
      __int16 v41 = 2082;
      int v42 = v23;
      char v20 = "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,mismatch\", \"nv\":%{public}d, \"expected\":%{public, location:es"
            "cape_only}s, \"receieved\":%{public, location:escape_only}s}";
    }
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v20, buf, 0x2Cu);
    goto LABEL_52;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344600);
  }
  int v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = *(_DWORD *)(a1 + 8);
    std::stringbuf::str();
    int v15 = v38 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)__int16 v43 = 68289538;
    *(_DWORD *)&v43[4] = 0;
    __int16 v44 = 2082;
    *(void *)char v45 = "";
    *(_WORD *)&v45[8] = 1026;
    *(_DWORD *)&v45[10] = v14;
    LOWORD(v46[0]) = 2082;
    *(void *)((char *)v46 + 2) = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,#dms,readNv\", \"nv\":%{public}d, \"receieved\":%{public, location:escape_only}s}", v43, 0x22u);
    if (SHIBYTE(v38) < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_59:
  *(void *)((char *)v30
  v30[2] = v25;
  if (v31 < 0) {
    operator delete((void *)v30[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if (__s2)
  {
    uint64_t v33 = __s2;
    operator delete(__s2);
  }
}

void sub_1018CD5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a62);
  sub_101A129A8((uint64_t)&a18);
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  _Unwind_Resume(a1);
}

void sub_1018CD650(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, char **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v4 = *a2;
  uint64_t v5 = *(void *)(a1 + 16);
  if (a2[1] - *a2 <= (unint64_t)(2 * v5)) {
    uint64_t v6 = (uint64_t)a2[1];
  }
  else {
    uint64_t v6 = (uint64_t)&(*a2)[2 * v5];
  }
  if (v4 != (unsigned __int8 *)v6)
  {
    int v7 = 0;
    int v8 = a3 + 2;
    while (1)
    {
      __int16 v9 = *v4;
      if (v4 + 1 == (unsigned __int8 *)v6) {
        break;
      }
      __int16 v10 = v9 | (v4[1] << 8);
      if ((unint64_t)v7 >= *v8)
      {
        __int16 v12 = *a3;
        uint64_t v13 = v7 - *a3;
        if (v13 <= -3) {
          sub_1001D7FD4();
        }
        uint64_t v14 = v13 >> 1;
        unint64_t v15 = *v8 - (void)v12;
        if (v15 <= (v13 >> 1) + 1) {
          uint64_t v16 = v14 + 1;
        }
        else {
          uint64_t v16 = *v8 - (void)v12;
        }
        if (v15 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v17 = v16;
        }
        if (v17)
        {
          uint64_t v18 = (char *)sub_100C3D5E0((uint64_t)(a3 + 2), v17);
          __int16 v12 = *a3;
          int v7 = a3[1];
        }
        else
        {
          uint64_t v18 = 0;
        }
        int v19 = &v18[2 * v14];
        *(_WORD *)int v19 = v10;
        uint64_t v11 = v19 + 2;
        while (v7 != v12)
        {
          __int16 v20 = *((_WORD *)v7 - 1);
          v7 -= 2;
          *((_WORD *)v19 - 1) = v20;
          v19 -= 2;
        }
        *a3 = v19;
        a3[1] = v11;
        a3[2] = &v18[2 * v17];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_WORD *)int v7 = v10;
        uint64_t v11 = v7 + 2;
      }
      a3[1] = v11;
      v4 += 2;
      int v7 = v11;
      if (v4 == (unsigned __int8 *)v6) {
        return;
      }
    }
    if ((unint64_t)v7 >= *v8)
    {
      uint64_t v22 = *a3;
      uint64_t v23 = v7 - *a3;
      if (v23 <= -3) {
        sub_1001D7FD4();
      }
      uint64_t v24 = v23 >> 1;
      unint64_t v25 = *v8 - (void)v22;
      if (v25 <= (v23 >> 1) + 1) {
        uint64_t v26 = v24 + 1;
      }
      else {
        uint64_t v26 = *v8 - (void)v22;
      }
      if (v25 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v27 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v27 = v26;
      }
      if (v27)
      {
        __int16 v28 = (char *)sub_100C3D5E0((uint64_t)(a3 + 2), v27);
        uint64_t v22 = *a3;
        int v7 = a3[1];
      }
      else
      {
        __int16 v28 = 0;
      }
      char v29 = &v28[2 * v24];
      int v30 = &v28[2 * v27];
      *(_WORD *)char v29 = v9;
      int v21 = v29 + 2;
      while (v7 != v22)
      {
        __int16 v31 = *((_WORD *)v7 - 1);
        v7 -= 2;
        *((_WORD *)v29 - 1) = v31;
        v29 -= 2;
      }
      *a3 = v29;
      a3[1] = v21;
      a3[2] = v30;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(_WORD *)int v7 = v9;
      int v21 = v7 + 2;
    }
    a3[1] = v21;
  }
}

void sub_1018CD83C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018CD860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      v5 += 2;
      uint64_t v6 = (void *)std::ostream::operator<<();
      sub_100132EFC(v6, (uint64_t)",", 1);
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_1018CD8D0(uint64_t a1, int a2, uint64_t a3, char a4)
{
  *(void *)a1 = off_1023448A8;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  sub_100C3D524((void *)(a1 + 24), *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 1);
  *(unsigned char *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 49) = a4;
  return a1;
}

void sub_1018CD94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13, 0x5557u);
  *(_DWORD *)sub_1018CAA44((uint64_t)v13, 1) = *(_DWORD *)(a1 + 8);
  void v8[6] = a2;
  uint64_t v9 = QMIServiceMsg::create((QMIServiceMsg *)v13, v6);
  int v10 = 25000;
  uint64_t v11 = 0;
  __int16 v12 = 0;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1018CDB68;
  void v8[3] = &unk_102344728;
  unsigned char v8[4] = a3;
  v8[5] = a1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1018CB480;
  aBlock[3] = &unk_10233CB70;
  aBlock[4] = v8;
  int v7 = _Block_copy(aBlock);
  __int16 v12 = v7;
  if (v9)
  {
    qmi::Client::send();
    int v7 = v12;
  }
  if (v7) {
    _Block_release(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
}

void sub_1018CDA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_1017D0280((uint64_t)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void *sub_1018CDAA8(void *a1)
{
  *a1 = off_1023448A8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1018CDAF8(void *a1)
{
  *a1 = off_1023448A8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1018CDB68(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (*((_DWORD *)a2 + 1))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344600);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(_DWORD *)(v3 + 8);
      *(_DWORD *)buf = 68289539;
      int v15 = 0;
      LOWORD(__p) = 2082;
      *(void *)((char *)&__p + 2) = "";
      WORD5(__p) = 1026;
      HIDWORD(__p) = v5;
      __int16 v17 = 2081;
      uint64_t v18 = qmi::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,response failed\", \"nv\":%{public}d, \"error\":%{private, location:escape_only}s}", buf, 0x22u);
    }
  }
  else
  {
    sub_1018CA1C0(a2, buf);
    if (buf[0])
    {
      sub_1018CCE18(v3, (unsigned __int8 **)&__p);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344600);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(v3 + 8);
        v9[0] = 68289282;
        v9[1] = 0;
        __int16 v10 = 2082;
        uint64_t v11 = "";
        __int16 v12 = 1026;
        int v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,#dms,missing value\", \"nv\":%{public}d}", (uint8_t *)v9, 0x18u);
      }
    }
    if (buf[0] && (void)__p)
    {
      *((void *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1018CDD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15)
{
  if (a13)
  {
    if (__p) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

#error "1018CDE14: call analysis failed (funcsize=73)"

#error "1018CDF7C: call analysis failed (funcsize=76)"

#error "1018CE100: call analysis failed (funcsize=73)"

#error "1018CE270: call analysis failed (funcsize=73)"

#error "1018CE3E0: call analysis failed (funcsize=73)"

#error "1018CE550: call analysis failed (funcsize=73)"

#error "1018CE6B8: call analysis failed (funcsize=76)"

double sub_1018CE7C0(uint64_t a1)
{
  *(void *)a1 = off_102344920;
  *(void *)(a1 + 8) = off_1022B2000;
  *(_DWORD *)(a1 + 16) = 43;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = off_1022B2000;
  *(_DWORD *)(a1 + 104) = 43;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  return result;
}

uint64_t sub_1018CE860(uint64_t a1)
{
  *(void *)a1 = off_102344920;
  *(void *)(a1 + 96) = off_1022B2000;
  sub_1000F5BB0(a1 + 160, *(void **)(a1 + 168));
  sub_10041F48C((void *)(a1 + 112));
  *(void *)(a1 + 8) = off_1022B2000;
  sub_1000F5BB0(a1 + 72, *(void **)(a1 + 80));
  sub_10041F48C((void *)(a1 + 24));
  return a1;
}

void sub_1018CE90C(uint64_t a1)
{
  sub_1018CE860(a1);

  operator delete();
}

void sub_1018CE944(uint64_t a1, double *a2)
{
  double v2 = *(double *)((char *)a2 + 28);
  double v3 = *(double *)((char *)a2 + 36);
  double v20 = v3;
  double v21 = v2;
  double v4 = a2[63];
  if ((*(uint64_t *)&v4 <= -1 || ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF)
    && (unint64_t)(*(void *)&v4 - 1) >= 0xFFFFFFFFFFFFFLL
    && (*(void *)&v4 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    if (qword_1024193F0 != -1) {
      dispatch_once(&qword_1024193F0, &stru_102344960);
    }
    uint64_t v9 = qword_1024193F8;
    if (os_log_type_enabled((os_log_t)qword_1024193F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      double v33 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "CLGnssAltitudeFilter,update,invalid timestamp: %{public}.3lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193F0 != -1) {
        dispatch_once(&qword_1024193F0, &stru_102344960);
      }
      int v22 = 134349056;
      double v23 = v4;
LABEL_62:
      uint64_t v18 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAltitudeFilter::update(GNSS::DaemonLocation &)", "%s\n");
LABEL_63:
      if (v18 != buf) {
        free(v18);
      }
      return;
    }
    return;
  }
  if (v2 <= -450.0 || v2 >= 8850.0 || v3 <= 0.0)
  {
    if (qword_1024193F0 != -1) {
      dispatch_once(&qword_1024193F0, &stru_102344960);
    }
    __int16 v10 = qword_1024193F8;
    if (os_log_type_enabled((os_log_t)qword_1024193F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134284033;
      double v33 = v2;
      __int16 v34 = 2049;
      uint64_t v35 = *(void *)&v3;
      __int16 v36 = 2050;
      double v37 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "CLGnssAltitudeFilter,update,invalid altitude,%{private}.3f,altitudeAccuracy,%{private}.3f,timestamp,%{public}.3lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193F0 != -1) {
        dispatch_once(&qword_1024193F0, &stru_102344960);
      }
      int v22 = 134284033;
      double v23 = v2;
      __int16 v24 = 2049;
      uint64_t v25 = *(void *)&v3;
      __int16 v26 = 2050;
      double v27 = v4;
      goto LABEL_62;
    }
    return;
  }
  if (v3 > 20.0)
  {
    if (qword_1024193F0 != -1) {
      dispatch_once(&qword_1024193F0, &stru_102344960);
    }
    uint64_t v8 = qword_1024193F8;
    if (os_log_type_enabled((os_log_t)qword_1024193F8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134284033;
      double v33 = v3;
      __int16 v34 = 2049;
      uint64_t v35 = 0x4034000000000000;
      __int16 v36 = 2050;
      double v37 = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLGnssAltitudeFilter,update,measurement skipped due to large altitude uncertainty,altitudeAccuracy,%{private}.3f,maxAcceptedAltAccuracy,%{private}.3f,timestamp,%{public}.3lf", buf, 0x20u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193F0 != -1) {
      dispatch_once(&qword_1024193F0, &stru_102344960);
    }
    int v22 = 134284033;
    double v23 = v3;
    __int16 v24 = 2049;
    uint64_t v25 = 0x4034000000000000;
    __int16 v26 = 2050;
    double v27 = v4;
    goto LABEL_52;
  }
  if (vabdd_f64(v4, *(double *)(a1 + 184)) > 12.0)
  {
    sub_10041F400((void *)(a1 + 8));
    sub_10041F400((void *)(a1 + 96));
    *(void *)(a1 + 184) = 0;
  }
  sub_10007EEB4(a1 + 8, &v21);
  sub_10007EEB4(a1 + 96, &v20);
  if (sub_10007EDE0((void *)(a1 + 8), 2, &v21)
    && (sub_10007EDE0((void *)(a1 + 96), 2, &v20) & 1) != 0)
  {
    a2[82] = v21;
    a2[83] = v20;
    *(double *)(a1 + 184) = v4;
    if (qword_1024193F0 != -1) {
      dispatch_once(&qword_1024193F0, &stru_102344960);
    }
    int v13 = qword_1024193F8;
    if (os_log_type_enabled((os_log_t)qword_1024193F8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v14 = *(void *)((char *)a2 + 28);
      double v15 = *(double *)((char *)a2 + 36);
      *(_DWORD *)buf = 134350081;
      double v33 = v4;
      __int16 v34 = 2049;
      uint64_t v35 = v14;
      __int16 v36 = 2049;
      double v37 = v15;
      __int16 v38 = 2049;
      double v39 = v21;
      __int16 v40 = 2049;
      double v41 = v20;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLGnssAltitudeFilter,update,timestamp,%{public}.3lf,rawAltitude,%{private}.3f,rawAltitudeUnc,%{private}.3f,medianFilterAltitude,%{private}.3f,medianFilterAltitudeUnc,%{private}.3f", buf, 0x34u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193F0 != -1) {
      dispatch_once(&qword_1024193F0, &stru_102344960);
    }
    uint64_t v16 = *(void *)((char *)a2 + 28);
    double v17 = *(double *)((char *)a2 + 36);
    int v22 = 134350081;
    double v23 = v4;
    __int16 v24 = 2049;
    uint64_t v25 = v16;
    __int16 v26 = 2049;
    double v27 = v17;
    __int16 v28 = 2049;
    double v29 = v21;
    __int16 v30 = 2049;
    double v31 = v20;
LABEL_52:
    uint64_t v18 = (uint8_t *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAltitudeFilter::update(GNSS::DaemonLocation &)", "%s\n");
    goto LABEL_63;
  }
  if (qword_1024193F0 != -1) {
    dispatch_once(&qword_1024193F0, &stru_102344960);
  }
  int v19 = qword_1024193F8;
  if (os_log_type_enabled((os_log_t)qword_1024193F8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 134349056;
    double v33 = v4;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLGnssAltitudeFilter,update,median filter failed,timestamp,%{public}.3lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193F0 != -1) {
      dispatch_once(&qword_1024193F0, &stru_102344960);
    }
    int v22 = 134349056;
    double v23 = v4;
    goto LABEL_62;
  }
}

void sub_1018CF0C0(id a1)
{
  qword_1024193F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "AltitudeSmoother");
}

void sub_1018CF0F0()
{
  sub_100103240();
  if (sub_10073C62C()) {
    sub_1018CF3AC();
  }
  if (sub_10073C750()) {
    sub_1018CF5F4();
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344980);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#Warning,Constructing CLGnssUnknownDevice", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344980);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssDeviceFacade> CLGnssDeviceFacade::create(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
  operator new();
}

void sub_1018CF380()
{
}

void sub_1018CF3AC()
{
}

void sub_1018CF550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_10084FC8C(&a13);
  sub_10084FC08(&a17);
  sub_100850B38(&a21);
  sub_100850AB4(&a25);
  sub_1008524E0(&a29);
  sub_1008522FC(&a33);
  sub_10084FB84((void *)(v33 - 160));
  sub_1008520A8((void *)(v33 - 128));
  operator delete();
}

void sub_1018CF5D4()
{
}

void sub_1018CF5DC()
{
}

void sub_1018CF5E4()
{
}

void sub_1018CF5EC()
{
}

void sub_1018CF5F4()
{
}

void sub_1018CF798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_10084FC8C(&a13);
  sub_10084FC08(&a17);
  sub_100850B38(&a21);
  sub_100850AB4(&a25);
  sub_1008524E0(&a29);
  sub_1008522FC(&a33);
  sub_10084FB84((void *)(v33 - 160));
  sub_1008520A8((void *)(v33 - 128));
  operator delete();
}

void sub_1018CF81C()
{
}

void sub_1018CF824()
{
}

void sub_1018CF82C()
{
}

void sub_1018CF834()
{
}

void sub_1018CF83C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018CF86C(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = off_1023449B0;
  int v7 = (_OWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 8), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *int v7 = v8;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a3 + 16);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a4;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 256) = 0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v10 = v7;
    if (*(char *)(a1 + 31) < 0) {
      __int16 v10 = *(_OWORD **)v7;
    }
    *(void *)buf = 68289539;
    *(_WORD *)uint64_t v16 = 2082;
    *(void *)&int v16[2] = "";
    __int16 v17 = 2081;
    *(void *)uint64_t v18 = v10;
    *(_WORD *)&v18[8] = 2081;
    *(void *)&v18[10] = "BB Controller created";
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  uint64_t v11 = operator new(0x40uLL);
  v11[1] = 0;
  v11[2] = 0;
  *uint64_t v11 = off_102344DE0;
  *(void *)buf = off_102344E30;
  *(void *)uint64_t v16 = a1;
  *(void *)&unsigned char v18[4] = buf;
  void v11[3] = off_102344D30;
  sub_1018D8C04((uint64_t)(v11 + 4), (uint64_t)buf);
  sub_1018D8974(buf);
  __int16 v12 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = v11 + 3;
  *(void *)(a1 + 176) = v11;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  v14[21] = (uint64_t)_NSConcreteStackBlock;
  v14[22] = 3221225472;
  v14[23] = (uint64_t)sub_1018CFE14;
  v14[24] = (uint64_t)&unk_1022A3020;
  v14[25] = a1;
  qmi::Client::setHandler();
  v14[16] = (uint64_t)_NSConcreteStackBlock;
  v14[17] = 3221225472;
  v14[18] = (uint64_t)sub_1018CFF50;
  v14[19] = (uint64_t)&unk_1022A3020;
  v14[20] = a1;
  qmi::Client::setHandler();
  void v14[11] = (uint64_t)_NSConcreteStackBlock;
  v14[12] = 3221225472;
  v14[13] = (uint64_t)sub_1018D0094;
  v14[14] = (uint64_t)&unk_1022A3020;
  v14[15] = a1;
  qmi::Client::setHandler();
  v14[6] = (uint64_t)_NSConcreteStackBlock;
  v14[7] = 3221225472;
  v14[8] = (uint64_t)sub_1018D01D8;
  v14[9] = (uint64_t)&unk_1022A3020;
  v14[10] = a1;
  qmi::Client::setHandler();
  v14[1] = (uint64_t)_NSConcreteStackBlock;
  void v14[2] = 3221225472;
  v14[3] = (uint64_t)sub_1018D0318;
  unsigned char v14[4] = (uint64_t)&unk_1023449C0;
  void v14[5] = a1;
  qmi::Client::setHandler();
  *(void *)buf = v14;
  int v13 = sub_1018D8C9C((uint64_t **)(a1 + 216), v14, (uint64_t)&unk_101D0B290, (void **)buf);
  *(void *)buf = off_102344EC0;
  *(void *)uint64_t v16 = a1;
  *(void *)&unsigned char v18[4] = buf;
  sub_10084E088(buf, (void *)v13 + 9);
  sub_10068280C(buf);
  operator new();
}

void sub_1018CFD1C()
{
}

void sub_1018CFE14(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = (void *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      double v3 = (void *)*v3;
    }
    v5[0] = 68289539;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 2081;
    uint64_t v9 = v3;
    __int16 v10 = 2081;
    uint64_t v11 = "kEventServerError";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v1 + 152) + 56))(*(void *)(v1 + 152));
  sub_1018D06E8(v1, v4);
}

void sub_1018CFF50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = (void *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      double v3 = (void *)*v3;
    }
    v5[0] = 68289539;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 2081;
    uint64_t v9 = v3;
    __int16 v10 = 2081;
    uint64_t v11 = "kEventStarted";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v1 + 152) + 64))(*(void *)(v1 + 152));
  sub_1018D06E8(v1, v4);
  *(_DWORD *)(v1 + 256) = 2;
}

void sub_1018D0094(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = (void *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      double v3 = (void *)*v3;
    }
    v5[0] = 68289539;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 2081;
    uint64_t v9 = v3;
    __int16 v10 = 2081;
    uint64_t v11 = "kEventStopped";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  *(_DWORD *)(v1 + 256) = 3;
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v1 + 152) + 72))(*(void *)(v1 + 152));
  sub_1018D06E8(v1, v4);
}

void sub_1018D01D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = (void *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      double v3 = (void *)*v3;
    }
    v5[0] = 68289539;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    __int16 v8 = 2081;
    uint64_t v9 = v3;
    __int16 v10 = 2081;
    uint64_t v11 = "kEventLowPowerExit";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  *(unsigned char *)(v1 + 208) = 0;
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(v1 + 152) + 96))(*(void *)(v1 + 152));
  sub_1018D06E8(v1, v4);
}

void sub_1018D0318(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      int v5 = (void *)*v5;
    }
    v7[0] = 68289539;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2081;
    uint64_t v11 = v5;
    __int16 v12 = 2081;
    int v13 = "kEventLowPower";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v7, 0x26u);
  }
  *(unsigned char *)(v3 + 208) = 1;
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 152) + 80))(*(void *)(v3 + 152), a2);
  sub_1018D06E8(v3, v6);
}

uint64_t sub_1018D046C(uint64_t a1)
{
  *(void *)a1 = off_1023449B0;
  double v2 = (qmi::Client *)(a1 + 32);
  qmi::Client::stop((qmi::Client *)(a1 + 32));
  qmi::Client::release(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 248);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1018D89F8(a1 + 216, *(void **)(a1 + 224));
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 200);
  if (v4) {
    sub_1000DB0A0(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 176);
  if (v5) {
    sub_1000DB0A0(v5);
  }
  uint64_t v6 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_1008524E0((void *)(a1 + 120));
  sub_100851F6C(a1 + 96, *(void **)(a1 + 104));
  sub_1017C6FF0((void *)(a1 + 64));
  qmi::Client::~Client(v2);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1018D055C(uint64_t a1)
{
  sub_1018D046C(a1);

  operator delete();
}

void *sub_1018D0594(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  int v7 = &v6;
  uint64_t v4 = sub_1018D90A0((uint64_t **)(a1 + 96), &v6, (uint64_t)&unk_101D0B290, &v7);
  return sub_10084E014(v4 + 5, a3);
}

void *sub_1018D05F0(uint64_t a1, uint64_t a2)
{
  return sub_1018D05F8((void *)(a1 + 120), a2);
}

void *sub_1018D05F8(void *a1, uint64_t a2)
{
  sub_101831A78((uint64_t)v4, a2);
  sub_1018D9188(v4, a1);
  sub_1008524E0(v4);
  return a1;
}

void *sub_1018D066C(uint64_t a1, uint64_t a2)
{
  return sub_1018D0674((void *)(a1 + 64), a2);
}

void *sub_1018D0674(void *a1, uint64_t a2)
{
  sub_1018D9980((uint64_t)v4, a2);
  sub_1018D93F4(v4, a1);
  sub_1017C6FF0(v4);
  return a1;
}

void sub_1018D06E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 152);
  (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  if (!sub_1000E9B14(a2, *(void *)(*(void *)v4 - 8)))
  {
    *(void *)(a1 + 160) = *(void *)(*(void *)v4 - 8);
    uint64_t v5 = *(void *)(a2 + 8);
    int v6 = (const char *)v5;
    if (v5 < 0)
    {
      int v7 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v8 = 5381;
      do
      {
        int v6 = (const char *)v8;
        unsigned int v9 = *v7++;
        uint64_t v8 = (33 * v8) ^ v9;
      }
      while (v9);
    }
    __int16 v10 = "N15CLQmiController17DisconnectedStateE";
    if (((unint64_t)"N15CLQmiController17DisconnectedStateE" & 0x8000000000000000) != 0)
    {
      uint64_t v11 = (unsigned __int8 *)((unint64_t)"N15CLQmiController17DisconnectedStateE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v12 = 5381;
      do
      {
        __int16 v10 = (const char *)v12;
        unsigned int v13 = *v11++;
        uint64_t v12 = (33 * v12) ^ v13;
      }
      while (v13);
    }
    if (v6 == v10) {
      operator new();
    }
    uint64_t v14 = *(const char **)(a2 + 8);
    if (v5 < 0)
    {
      double v15 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v16 = 5381;
      do
      {
        uint64_t v14 = (const char *)v16;
        unsigned int v17 = *v15++;
        uint64_t v16 = (33 * v16) ^ v17;
      }
      while (v17);
    }
    uint64_t v18 = "N15CLQmiController17InitializingStateE";
    if (((unint64_t)"N15CLQmiController17InitializingStateE" & 0x8000000000000000) != 0)
    {
      int v19 = (unsigned __int8 *)((unint64_t)"N15CLQmiController17InitializingStateE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v20 = 5381;
      do
      {
        uint64_t v18 = (const char *)v20;
        unsigned int v21 = *v19++;
        uint64_t v20 = (33 * v20) ^ v21;
      }
      while (v21);
    }
    if (v14 == v18) {
      operator new();
    }
    int v22 = *(const char **)(a2 + 8);
    if (v5 < 0)
    {
      double v23 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v24 = 5381;
      do
      {
        int v22 = (const char *)v24;
        unsigned int v25 = *v23++;
        uint64_t v24 = (33 * v24) ^ v25;
      }
      while (v25);
    }
    __int16 v26 = "N15CLQmiController12RunningStateE";
    if (((unint64_t)"N15CLQmiController12RunningStateE" & 0x8000000000000000) != 0)
    {
      double v27 = (unsigned __int8 *)((unint64_t)"N15CLQmiController12RunningStateE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v28 = 5381;
      do
      {
        __int16 v26 = (const char *)v28;
        unsigned int v29 = *v27++;
        uint64_t v28 = (33 * v28) ^ v29;
      }
      while (v29);
    }
    if (v22 == v26) {
      operator new();
    }
    __int16 v30 = *(const char **)(a2 + 8);
    if (v5 < 0)
    {
      double v31 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v32 = 5381;
      do
      {
        __int16 v30 = (const char *)v32;
        unsigned int v33 = *v31++;
        uint64_t v32 = (33 * v32) ^ v33;
      }
      while (v33);
    }
    __int16 v34 = "N15CLQmiController13SleepingStateE";
    if (((unint64_t)"N15CLQmiController13SleepingStateE" & 0x8000000000000000) != 0)
    {
      uint64_t v35 = (unsigned __int8 *)((unint64_t)"N15CLQmiController13SleepingStateE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v36 = 5381;
      do
      {
        __int16 v34 = (const char *)v36;
        unsigned int v37 = *v35++;
        uint64_t v36 = (33 * v36) ^ v37;
      }
      while (v37);
    }
    if (v30 == v34) {
      operator new();
    }
    if (v5 < 0)
    {
      __int16 v38 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v39 = 5381;
      do
      {
        uint64_t v5 = v39;
        unsigned int v40 = *v38++;
        uint64_t v39 = (33 * v39) ^ v40;
      }
      while (v40);
    }
    double v41 = "N15CLQmiController14InitErrorStateE";
    if (((unint64_t)"N15CLQmiController14InitErrorStateE" & 0x8000000000000000) != 0)
    {
      int v42 = (unsigned __int8 *)((unint64_t)"N15CLQmiController14InitErrorStateE" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v43 = 5381;
      do
      {
        double v41 = (const char *)v43;
        unsigned int v44 = *v42++;
        uint64_t v43 = (33 * v43) ^ v44;
      }
      while (v44);
    }
    if ((const char *)v5 == v41) {
      sub_1018D0C98();
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    char v45 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v46 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v46 = (void *)*v46;
      }
      uint64_t v47 = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 16))(*(void *)(a1 + 152));
      uint64_t v48 = *(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v49 = 68289794;
      __int16 v50 = 2082;
      double v51 = "";
      __int16 v52 = 2082;
      float64x2_t v53 = v46;
      __int16 v54 = 2082;
      uint64_t v55 = v47;
      __int16 v56 = 2082;
      uint64_t v57 = v48;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning,#bb.e,unknownState\", \"fService\":%{public, location:escape_only}s, \"oldState\":%{public, location:escape_only}s, \"newState\":%{public, location:escape_only}s}", (uint8_t *)&v49, 0x30u);
    }
  }
}

void sub_1018D0C60()
{
}

void sub_1018D0C98()
{
}

void sub_1018D0CEC()
{
}

void sub_1018D0D10(dispatch_group_t group@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  dispatch_group_enter(group);
  uint64_t v6 = *(void *)(a2 + 240);
  if (v6) {
    sub_1019A5834(v6);
  }
  *a3 = group;
  operator new();
}

void sub_1018D0DA4(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  __cxa_begin_catch(a1);
  sub_1018D9660((uint64_t *)va, v2);
  __cxa_rethrow();
}

void sub_1018D0DBC(_Unwind_Exception *a1)
{
}

void sub_1018D0DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = a1 + 8;
    sub_1018D0FA0(v3, a2, a3);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#bb.e,Send function not set appropriately", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLQmiController::CLQmiControllerClientProxy::send(const QMIServiceMsg &, void (^)(const QMIServiceMsg &)) const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

uint64_t sub_1018D0FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

void sub_1018D0FF4(void *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)double v15 = 0;
    *(_WORD *)&v15[4] = 2082;
    *(void *)&v15[6] = "";
    __int16 v16 = 2081;
    unsigned int v17 = v6;
    __int16 v18 = 2082;
    uint64_t v19 = v7;
    __int16 v20 = 2082;
    unsigned int v21 = "send";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = a1[1];
    __int16 v10 = (void *)(v9 + 8);
    if (*(char *)(v9 + 31) < 0) {
      __int16 v10 = (void *)*v10;
    }
    int v11 = *(unsigned __int16 *)(a2 + 12);
    uint64_t v12 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 136315650;
    *(void *)double v15 = v10;
    *(_WORD *)&v15[8] = 1024;
    *(_DWORD *)&v15[10] = v11;
    __int16 v16 = 2080;
    unsigned int v17 = (void *)v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#bb.e,%s tried to send 0x%04X while in state %s", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    (*(void (**)(void *))(*a1 + 16))(a1);
    unsigned int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLQmiController::State::send(const QMIServiceMsg &, void (^)(const QMIServiceMsg &)) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

uint64_t sub_1018D1340(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)unsigned int v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    *(_WORD *)&v13[14] = 2081;
    *(void *)&v13[16] = v4;
    __int16 v14 = 2082;
    uint64_t v15 = v5;
    __int16 v16 = 2082;
    unsigned int v17 = "run";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[1];
    uint64_t v8 = (void *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 136315394;
    *(void *)unsigned int v13 = v8;
    *(_WORD *)&v13[8] = 2080;
    *(void *)&v13[10] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#bb.e,#warning,%s tried to send message block while in state %s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    (*(void (**)(void *))(*a1 + 16))(a1);
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLQmiController::State::run(std::function<void ()>) const", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return 0;
}

void *sub_1018D1664(void *a1)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v6 = *(void *)(*a1 - 8);
  double result = sub_1018D98F4(a1[1] + 216, &v6);
  uint64_t v3 = a1[1];
  if ((void *)(v3 + 224) != result)
  {
    uint64_t v7 = &v6;
    double result = sub_1018D8C9C((uint64_t **)(v3 + 216), &v6, (uint64_t)&unk_101D0B290, &v7);
    if (result[8])
    {
      uint64_t v4 = (uint64_t **)(a1[1] + 216);
      uint64_t v7 = &v6;
      uint64_t v5 = *((void *)sub_1018D8C9C(v4, &v6, (uint64_t)&unk_101D0B290, &v7) + 8);
      if (!v5) {
        sub_10015E48C();
      }
      return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
    }
  }
  return result;
}

void *sub_1018D1750(void *a1)
{
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v6 = *(void *)(*a1 - 8);
  double result = sub_1018D98F4(a1[1] + 216, &v6);
  uint64_t v3 = a1[1];
  if ((void *)(v3 + 224) != result)
  {
    uint64_t v7 = &v6;
    double result = sub_1018D8C9C((uint64_t **)(v3 + 216), &v6, (uint64_t)&unk_101D0B290, &v7);
    if (result[12])
    {
      uint64_t v4 = (uint64_t **)(a1[1] + 216);
      uint64_t v7 = &v6;
      uint64_t v5 = *((void *)sub_1018D8C9C(v4, &v6, (uint64_t)&unk_101D0B290, &v7) + 12);
      if (!v5) {
        sub_10015E48C();
      }
      return (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
    }
  }
  return result;
}

uint64_t sub_1018D183C(void *a1)
{
  double v2 = *(void **)(a1[1] + 152);
  sub_1018D1664(a1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = (void *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2081;
    uint64_t v12 = v5;
    __int16 v13 = 2082;
    uint64_t v14 = v6;
    __int16 v15 = 2082;
    __int16 v16 = "enter";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return *(void *)(*v2 - 8);
}

uint64_t sub_1018D19A0(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    __int16 v15 = "initializationComplete";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(void *)(**(void **)(a1[1] + 152) - 8);
}

_UNKNOWN **sub_1018D1B00(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    __int16 v15 = "serverError";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

_UNKNOWN **sub_1018D1C4C(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    __int16 v15 = "start";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

_UNKNOWN **sub_1018D1D98(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    __int16 v15 = "stopped";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

uint64_t sub_1018D1EE4(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 136446210;
    *(void *)__int16 v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#bb.e,%{public}s allowing sleep.  Nothing to do", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    (*(void (**)(void *))(*a1 + 16))(a1);
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::type_index CLQmiController::State::sleep(dispatch_group_t)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)__int16 v11 = 0;
    *(_WORD *)&unsigned char v11[4] = 2082;
    *(void *)&v11[6] = "";
    __int16 v12 = 2081;
    uint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = v7;
    __int16 v16 = 2082;
    unsigned int v17 = "sleep";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  return *(void *)(**(void **)(a1[1] + 152) - 8);
}

_UNKNOWN **sub_1018D21E0(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)uint64_t v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    *(_WORD *)&v13[14] = 2081;
    *(void *)&v13[16] = v4;
    __int16 v14 = 2082;
    uint64_t v15 = v5;
    __int16 v16 = 2082;
    unsigned int v17 = "okToSleep";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  if (*(unsigned char *)(a1[1] + 208)) {
  if (qword_1024193D0 != -1)
  }
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = a1[1];
    __int16 v9 = (void *)(v8 + 8);
    if (*(char *)(v8 + 31) < 0) {
      __int16 v9 = (void *)*v9;
    }
    uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 136380931;
    *(void *)uint64_t v13 = v9;
    *(_WORD *)&v13[8] = 2080;
    *(void *)&v13[10] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#bb.e,%{private}s no longer going to sleep.  Stay in state %s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    (*(void (**)(void *))(*a1 + 16))(a1);
    __int16 v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::type_index CLQmiController::State::okToSleep()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return *(_UNKNOWN ***)(**(void **)(a1[1] + 152) - 8);
}

uint64_t sub_1018D2534(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    uint64_t v15 = "wake";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(void *)(**(void **)(a1[1] + 152) - 8);
}

_UNKNOWN **sub_1018D2694(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    uint64_t v15 = "reset";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

uint64_t sub_1018D27E0(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    uint64_t v15 = "initializationError";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning,#bb.e,UnexpectedControllerEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(void *)(**(void **)(a1[1] + 152) - 8);
}

void *sub_1018D2940(void *a1, uint64_t a2)
{
  *a1 = off_1023449F0;
  a1[1] = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = (void *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2081;
    __int16 v12 = v5;
    __int16 v13 = 2082;
    uint64_t v14 = v6;
    __int16 v15 = 2082;
    __int16 v16 = "DisconnectedState";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return a1;
}

void *sub_1018D2AA4(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = off_1023449F0;
  a1[1] = v3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v14 = 2082;
    __int16 v15 = "";
    __int16 v16 = 2081;
    unsigned int v17 = v6;
    __int16 v18 = 2082;
    uint64_t v19 = v7;
    __int16 v20 = 2082;
    unsigned int v21 = "DisconnectedState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  __int16 v8 = (uint64_t **)(a1[1] + 96);
  int v12 = 0;
  *(void *)buf = &v12;
  if (sub_1018D90A0(v8, &v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8])
  {
    __int16 v9 = (uint64_t **)(a1[1] + 96);
    int v12 = 0;
    *(void *)buf = &v12;
    __int16 v10 = sub_1018D90A0(v9, &v12, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8];
    if (!v10) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t *))(*v10 + 48))(v10);
  }
  return a1;
}

void *sub_1018D2CA4(void *a1)
{
  *a1 = off_1023449F0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    __int16 v15 = "~DisconnectedState";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  sub_1018D1750(a1);
  return a1;
}

void sub_1018D2E10(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1018D2E20(void *a1)
{
  sub_1018D2CA4(a1);

  operator delete();
}

_UNKNOWN **sub_1018D2E58(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    __int16 v15 = "start";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

uint64_t sub_1018D2FA4(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    __int16 v15 = "okToSleep";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(void *)(**(void **)(a1[1] + 152) - 8);
}

void *sub_1018D3104(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = off_102344A78;
  a1[1] = v3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v9[0] = 68289795;
    v9[1] = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2081;
    uint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = v7;
    __int16 v16 = 2082;
    unsigned int v17 = "InitializingState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x30u);
  }
  return a1;
}

void *sub_1018D326C(void *a1)
{
  *a1 = off_102344A78;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v16 = 2082;
    *(void *)&int v16[2] = "";
    *(_WORD *)&unsigned char v16[10] = 2081;
    *(void *)&v16[12] = v4;
    *(_WORD *)&v16[20] = 2082;
    *(void *)&v16[22] = v5;
    *(_WORD *)&v16[30] = 2082;
    unsigned int v17 = "~InitializingState";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  uint64_t v6 = a1[1];
  uint64_t v7 = (void *)(v6 + 192);
  uint64_t v8 = *(void *)(v6 + 192);
  if (v8)
  {
    *(void *)buf = 0;
    *(void *)__int16 v16 = buf;
    *(void *)&v16[8] = 0x4012000000;
    *(void *)&v16[16] = sub_100178164;
    *(void *)&v16[24] = sub_100177844;
    __int16 v9 = *(std::__shared_weak_count **)(v6 + 200);
    uint64_t v18 = v8;
    uint64_t v19 = v9;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = a1[1];
      __int16 v11 = *(std::__shared_weak_count **)(v10 + 200);
      *(void *)(v10 + 192) = 0;
      *(void *)(v10 + 200) = 0;
      if (v11) {
        sub_1000DB0A0(v11);
      }
    }
    else
    {
      *uint64_t v7 = 0;
      v7[1] = 0;
    }
    __int16 v12 = *(NSObject **)(a1[1] + 184);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1018D34E0;
    block[3] = &unk_1022B6BE8;
    block[4] = buf;
    dispatch_async(v12, block);
    _Block_object_dispose(buf, 8);
    if (v19) {
      sub_1000DB0A0(v19);
    }
  }
  sub_1018D1750(a1);
  return a1;
}

void sub_1018D34D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1018D34E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  double v2 = *(std::__shared_weak_count **)(v1 + 56);
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  if (v2) {
    sub_1000DB0A0(v2);
  }
}

void sub_1018D3500(void *a1)
{
  sub_1018D326C(a1);

  operator delete();
}

void sub_1018D3538(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[1];
    uint64_t v8 = (void *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0) {
      uint64_t v8 = (void *)*v8;
    }
    uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v13 = 2082;
    *(void *)&void v13[2] = "";
    *(_WORD *)&v13[10] = 2081;
    *(void *)&v13[12] = v8;
    *(_WORD *)&v13[20] = 2082;
    *(void *)&v13[22] = v9;
    *(_WORD *)&v13[30] = 2082;
    __int16 v14 = "send";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  *(void *)buf = _NSConcreteStackBlock;
  *(void *)uint64_t v13 = 3221225472;
  *(void *)&v13[8] = sub_1018D9970;
  *(void *)&v13[16] = &unk_10233CB70;
  *(void *)&unsigned char v13[24] = a3;
  uint64_t v10 = _Block_copy(buf);
  aBlock = v10;
  if (a2)
  {
    qmi::Client::send();
    uint64_t v10 = aBlock;
  }
  if (v10) {
    _Block_release(v10);
  }
}

void sub_1018D3718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017D0280((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018D3740(void *a1)
{
  uint64_t v2 = a1[1];
  sub_1018D1664(a1);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[1];
    uint64_t v5 = (void *)(v4 + 8);
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v8[0] = 68289795;
    v8[1] = 0;
    __int16 v9 = 2082;
    uint64_t v10 = "";
    __int16 v11 = 2081;
    __int16 v12 = v5;
    __int16 v13 = 2082;
    uint64_t v14 = v6;
    __int16 v15 = 2082;
    __int16 v16 = "enter";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v8, 0x30u);
  }
  return *(void *)(**(void **)(v2 + 152) - 8);
}

_UNKNOWN **sub_1018D38A4(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    __int16 v15 = "initializationComplete";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

void sub_1018D39F0(uint64_t a1, NSObject *a2)
{
  sub_1018D0D10(a2, *(void *)(a1 + 8), &v2);
}

_UNKNOWN **sub_1018D3B74(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    __int16 v15 = "initializationError";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
}

void *sub_1018D3CC0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = off_102344B00;
  a1[1] = v3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v9[0] = 68289795;
    v9[1] = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2081;
    uint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = v7;
    __int16 v16 = 2082;
    unsigned int v17 = "RunningState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x30u);
  }
  return a1;
}

void sub_1018D3E28(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  unsigned __int16 v19 = 0;
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[1];
    __int16 v8 = (void *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0) {
      __int16 v8 = (void *)*v8;
    }
    uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2081;
    *(void *)&buf[20] = v8;
    *(_WORD *)&buf[28] = 2082;
    *(void *)&buf[30] = v9;
    *(_WORD *)&unsigned char buf[38] = 2082;
    unsigned int v21 = "send";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  *(void *)int v22 = a1[1] + 32;
  *(void *)&v22[8] = a2;
  *(_DWORD *)&v22[16] = 25000;
  uint64_t v24 = 0;
  unsigned int v25 = 0;
  *(void *)buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 3221225472;
  *(void *)&uint8_t buf[16] = sub_1018D9970;
  *(void *)&buf[24] = &unk_10233CB70;
  *(void *)&buf[32] = a3;
  __int16 v10 = _Block_copy(buf);
  uint64_t v24 = &v19;
  unsigned int v25 = v10;
  if (*(void *)&v22[8])
  {
    qmi::Client::send();
    __int16 v10 = v25;
  }
  if (v10) {
    _Block_release(v10);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  __int16 v11 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v12 = a1[1];
    uint64_t v13 = (void *)(v12 + 8);
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = (void *)*v13;
    }
    int v14 = *(unsigned __int16 *)(a2 + 12);
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v14;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v19;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLQmiController,service,%s,msg,0x%04X,txid,0x%04X", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    uint64_t v15 = a1[1];
    __int16 v16 = (void *)(v15 + 8);
    if (*(char *)(v15 + 31) < 0) {
      __int16 v16 = (void *)*v16;
    }
    int v17 = *(unsigned __int16 *)(a2 + 12);
    *(_DWORD *)int v22 = 136315650;
    *(void *)&unsigned char v22[4] = v16;
    *(_WORD *)&v22[12] = 1024;
    *(_DWORD *)&v22[14] = v17;
    *(_WORD *)&v22[18] = 1024;
    int v23 = v19;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLQmiController::RunningState::send(const QMIServiceMsg &, void (^)(const QMIServiceMsg &)) const", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
}

void sub_1018D41C4(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1018D41F4(void *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v10[0] = 68289795;
    v10[1] = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2081;
    int v14 = v6;
    __int16 v15 = 2082;
    uint64_t v16 = v7;
    __int16 v17 = 2082;
    uint64_t v18 = "run";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x30u);
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v8) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
  return 1;
}

uint64_t sub_1018D4370(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v13 = 2082;
    int v14 = "";
    __int16 v15 = 2081;
    uint64_t v16 = v4;
    __int16 v17 = 2082;
    uint64_t v18 = v5;
    __int16 v19 = 2082;
    __int16 v20 = "enter";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  uint64_t v6 = a1[1];
  sub_1018D1664(a1);
  uint64_t v7 = (uint64_t **)(a1[1] + 96);
  int v11 = 1;
  *(void *)buf = &v11;
  if (sub_1018D90A0(v7, &v11, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8])
  {
    uint64_t v8 = (uint64_t **)(a1[1] + 96);
    int v11 = 1;
    *(void *)buf = &v11;
    uint64_t v9 = sub_1018D90A0(v8, &v11, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8];
    if (!v9) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t *))(*v9 + 48))(v9);
  }
  return *(void *)(**(void **)(v6 + 152) - 8);
}

void sub_1018D4568(uint64_t a1, NSObject *a2)
{
  v2[0] = 0;
  v2[1] = v2;
  _DWORD v2[2] = 0x4012000000;
  v2[3] = sub_100178164;
  v2[4] = sub_100177844;
  sub_1018D0D10(a2, *(void *)(a1 + 8), &v3);
}

void sub_1018D4800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  _Unwind_Resume(a1);
}

void sub_1018D4840(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v2 = *(std::__shared_weak_count **)(v1 + 56);
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  if (v2) {
    sub_1000DB0A0(v2);
  }
}

void *sub_1018D485C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = off_102344B88;
  a1[1] = v3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v9[0] = 68289795;
    v9[1] = 0;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 2081;
    __int16 v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = v7;
    __int16 v16 = 2082;
    __int16 v17 = "SleepingState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x30u);
  }
  return a1;
}

uint64_t sub_1018D49C4(void *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2081;
    int v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    uint64_t v15 = "wake";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  return *(void *)(a1[1] + 160);
}

void sub_1018D4B10(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    v5[0] = 68289539;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2081;
    uint64_t v9 = v3;
    __int16 v10 = 2081;
    int v11 = "setBasebandResetInProgress";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,bbEvent\", \"fService\":%{private, location:escape_only}s, \"event\":%{private, location:escape_only}s}", (uint8_t *)v5, 0x26u);
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 104))(*(void *)(a1 + 152));
  sub_1018D06E8(a1, v4);
}

void *sub_1018D4C4C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *a1 = off_102344C10;
  a1[1] = v3;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[1];
    __int16 v6 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      __int16 v6 = (void *)*v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v9[0] = 68289795;
    v9[1] = 0;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 2081;
    uint64_t v13 = v6;
    __int16 v14 = 2082;
    uint64_t v15 = v7;
    __int16 v16 = 2082;
    __int16 v17 = "InitErrorState";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x30u);
  }
  return a1;
}

void *sub_1018D4DB4(void *a1)
{
  *a1 = off_102344C10;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = (void *)(v3 + 8);
    if (*(char *)(v3 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v7[0] = 68289795;
    v7[1] = 0;
    __int16 v8 = 2082;
    uint64_t v9 = "";
    __int16 v10 = 2081;
    int v11 = v4;
    __int16 v12 = 2082;
    uint64_t v13 = v5;
    __int16 v14 = 2082;
    uint64_t v15 = "~InitErrorState";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v7, 0x30u);
  }
  sub_1018D1750(a1);
  return a1;
}

void sub_1018D4F20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1018D4F30(void *a1)
{
  sub_1018D4DB4(a1);

  operator delete();
}

void sub_1018D4F68(void *a1, uint64_t a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  __int16 v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = a1[1];
    __int16 v8 = (void *)(v7 + 8);
    if (*(char *)(v7 + 31) < 0) {
      __int16 v8 = (void *)*v8;
    }
    uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    *(_DWORD *)buf = 68289795;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v16 = 2082;
    *(void *)&int v16[2] = "";
    *(_WORD *)&unsigned char v16[10] = 2081;
    *(void *)&v16[12] = v8;
    *(_WORD *)&v16[20] = 2082;
    *(void *)&v16[22] = v9;
    *(_WORD *)&v16[30] = 2082;
    __int16 v17 = "send";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  unsigned int v10 = *(unsigned __int16 *)(a2 + 12);
  if (v10 <= 0x3D && ((1 << v10) & 0x3180200000000000) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v16 = 2082;
      *(void *)&int v16[2] = "";
      *(_WORD *)&unsigned char v16[10] = 1026;
      *(_DWORD *)&v16[12] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,Allowing message in InitErrorState as exception\", \"msgId\":%{public}d}", buf, 0x18u);
    }
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)__int16 v16 = 3221225472;
    *(void *)&v16[8] = sub_1018D9970;
    *(void *)&v16[16] = &unk_10233CB70;
    *(void *)&v16[24] = a3;
    __int16 v12 = _Block_copy(buf);
    aBlock = v12;
    if (a2)
    {
      qmi::Client::send();
      __int16 v12 = aBlock;
    }
    if (v12) {
      _Block_release(v12);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)__int16 v16 = 2082;
      *(void *)&int v16[2] = "";
      *(_WORD *)&unsigned char v16[10] = 1026;
      *(_DWORD *)&v16[12] = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,Not allowing message in InitErrorState\", \"msgId\":%{public}d}", buf, 0x18u);
    }
  }
}

void sub_1018D5290(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1017D0280((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1018D52B8(void *a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = a1[1];
    __int16 v6 = (void *)(v5 + 8);
    if (*(char *)(v5 + 31) < 0) {
      __int16 v6 = (void *)*v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
    v10[0] = 68289795;
    v10[1] = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2081;
    __int16 v14 = v6;
    __int16 v15 = 2082;
    uint64_t v16 = v7;
    __int16 v17 = 2082;
    uint64_t v18 = "run";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,smEvent\", \"fService\":%{private, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x30u);
  }
  uint64_t v8 = *(void *)(a2 + 24);
  if (!v8) {
    sub_10015E48C();
  }
  (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
  return 1;
}

void sub_1018D5434(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 248);
  *(void *)(a1 + 240) = v3;
  *(void *)(a1 + 248) = v2;
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_1018D5460(uint64_t a1, void *a2)
{
  sub_100134750(&v4, "PDS");
  sub_100134750(&__p, "QMI-PDS");
  [objc_msgSend(a2, "silo") queue];
  sub_100134750(&v7, "location");
  qmi::Client::create();
  sub_1018CF86C(a1, &v4, (uint64_t)buf, (uint64_t)[objc_msgSend(objc_msgSend(a2, "silo"), "queue")]);
}

void sub_1018D598C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  if (*v36) {
    sub_1000DB0A0(*v36);
  }
  sub_1018D046C(v35);
  _Unwind_Resume(a1);
}

NSObject *sub_1018D5A40(uint64_t a1, void *a2)
{
  uint64_t v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(a1 + 184));
  if (!v3) {
    sub_1018DAB18();
  }
  long long v4 = v3;
  dispatch_source_set_event_handler(v3, a2);
  dispatch_source_set_timer(v4, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  dispatch_resume(v4);
  return v4;
}

void sub_1018D5AB0(uint64_t a1)
{
}

void sub_1018D5AB8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    int v5 = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e, reset timer block\"}", buf, 0x12u);
  }
  *(unsigned char *)(a1 + 280) = 1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _OWORD v3[2] = sub_1018D79C4;
  v3[3] = &unk_1022ACDD8;
  unsigned char v3[4] = a1;
  sub_101854D38((uint64_t *)(a1 + 264), (uint64_t)v3);
}

void sub_1018D5BF0(uint64_t a1)
{
}

void sub_1018D5BF8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 152);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 296), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  if (*(unsigned char *)(a1 + 280)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289283;
      __int16 v22 = 2082;
      int v23 = "";
      __int16 v24 = 2081;
      unsigned int v25 = "sendGetServiceState";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
    }
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    unsigned int v20[2] = sub_1018D7D50;
    v20[3] = &unk_102344CE0;
    unsigned char v20[4] = a1;
    sub_101855738((uint64_t *)(a1 + 264), (uint64_t)v20);
    sub_100103240();
    if ((sub_10073CCBC() & 1) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      long long v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289283;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2081;
        unsigned int v25 = "sendForceReceiverOff";
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1018D7EE4;
      v19[3] = &unk_102344D00;
      v19[4] = a1;
      sub_101857330((uint64_t *)(a1 + 264), 1, (uint64_t)v19);
    }
    sub_100103240();
    if (sub_10073CCBC()) {
      int v5 = 537920322;
    }
    else {
      int v5 = 7599979;
    }
    sub_100103240();
    if (sub_10073E3D4()) {
      v5 |= 0x80280u;
    }
    sub_100103240();
    if (sub_10073CD80()) {
      unsigned int v6 = v5 | 0x800000;
    }
    else {
      unsigned int v6 = v5;
    }
    sub_1018D69C4(a1, v6);
    sub_100103240();
    if (sub_10073E634())
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289283;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2081;
        unsigned int v25 = "sendSetLppConfig";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      sub_100103240();
      if (sub_10073E848()) {
        int v8 = 11;
      }
      else {
        int v8 = 3;
      }
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_1018D8040;
      v18[3] = &unk_102344D00;
      unsigned char v18[4] = a1;
      sub_10185BEDC((uint64_t *)(a1 + 264), v8, (uint64_t)v18);
    }
    sub_100103240();
    if ((sub_10073CCBC() & 1) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      uint64_t v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289283;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2081;
        unsigned int v25 = "sendSetServiceState";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_1018D819C;
      v17[3] = &unk_102344D00;
      v17[4] = a1;
      sub_101855A04((uint64_t *)(a1 + 264), 1, (uint64_t)v17);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      unsigned int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289283;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2081;
        unsigned int v25 = "sendSetAutoTrackingState";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      int v16[2] = sub_1018D82F8;
      v16[3] = &unk_102344D00;
      unsigned char v16[4] = a1;
      sub_10185603C((uint64_t *)(a1 + 264), 0, (uint64_t)v16);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      __int16 v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289283;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2081;
        unsigned int v25 = "sendSvUseInFixReport";
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      unsigned __int8 v15[2] = sub_1018D8454;
      v15[3] = &unk_102344D00;
      v15[4] = a1;
      sub_10185A180((uint64_t *)(a1 + 264), 1, (uint64_t)v15);
    }
    sub_100103240();
    if (sub_10073CCBC())
    {
      uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 48))(*(void *)(a1 + 152));
      sub_1018D06E8(a1, v12);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      __int16 v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t buf = 68289283;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2081;
        unsigned int v25 = "sendSetServiceState";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)&buf, 0x1Cu);
      }
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      void v14[2] = sub_1018D85B0;
      v14[3] = &unk_102344CE0;
      unsigned char v14[4] = a1;
      sub_101855A04((uint64_t *)(a1 + 264), 0, (uint64_t)v14);
    }
    *(unsigned char *)(a1 + 280) = 0;
  }
}

void sub_1018D63C0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v8 = 0;
    __int16 v9 = 2082;
    unsigned int v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,reconnect\"}", buf, 0x12u);
  }
  if (*(_DWORD *)(a1 + 256) == 2)
  {
    *(_DWORD *)(a1 + 256) = 1;
    uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 72))(*(void *)(a1 + 152));
    sub_1018D06E8(a1, v3);
    *(_DWORD *)(a1 + 256) = 3;
    uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 64))(*(void *)(a1 + 152));
    sub_1018D06E8(a1, v4);
    *(_DWORD *)(a1 + 256) = 2;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#bb.e,reconnect,invalid state,can not reconnect", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      unsigned int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLQmiPdsController::reconnect()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

uint64_t sub_1018D6664(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,shutdown\"}", (uint8_t *)v5, 0x12u);
  }
  uint64_t v3 = (qmi::Client *)(a1 + 32);
  qmi::Client::stop(v3);
  sleep(1u);
  qmi::Client::release(v3);
  return sleep(1u);
}

uint64_t sub_1018D6764(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 256) == 2)
  {
    uint64_t v3 = *(void *)(a1 + 152);
    sub_1018DA728((uint64_t)v9, a2);
    uint64_t v10 = a1;
    uint64_t v12 = 0;
    uint64_t v4 = operator new(0x30uLL);
    void *v4 = off_1023451C0;
    sub_1018DAA24((uint64_t)(v4 + 1), (uint64_t)v9);
    void v4[5] = v10;
    uint64_t v12 = v4;
    uint64_t v5 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v3 + 32))(v3, v11);
    sub_10068280C(v11);
    sub_1017C825C(v9);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    __int16 v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning,Client not active", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLQmiPdsController::executeMessageSend(std::function<void (CLQmiPdsMessenger &)>)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    return 0;
  }
  return v5;
}

void sub_1018D6998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_10068280C((uint64_t *)va1);
  sub_1017C825C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1018D69C4(uint64_t a1, unsigned int a2)
{
  long long __p = 0;
  v263 = 0;
  v264 = 0;
  uint64_t v5 = sub_100C3D5E0((uint64_t)&v264, 1);
  __int16 v6 = (char *)&v5[v4];
  _WORD *v5 = (((a2 >> 1) & 1) << 8) | 0x12;
  uint64_t v7 = (char *)(v5 + 1);
  uint64_t v9 = (char *)__p;
  uint64_t v8 = (char *)v263;
  uint64_t v10 = (char *)v5;
  if (v263 != __p)
  {
    do
    {
      __int16 v11 = *((_WORD *)v8 - 1);
      v8 -= 2;
      *((_WORD *)v10 - 1) = v11;
      v10 -= 2;
    }
    while (v8 != v9);
    uint64_t v8 = (char *)__p;
  }
  long long __p = v10;
  v263 = v5 + 1;
  v264 = &v5[v4];
  if (v8)
  {
    operator delete(v8);
    __int16 v6 = (char *)v264;
  }
  v263 = v5 + 1;
  __int16 v12 = a2 & 4;
  if (v7 >= v6)
  {
    uint64_t v14 = v7 - (unsigned char *)__p;
    if (v7 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v15 = v14 >> 1;
    unint64_t v16 = v6 - (unsigned char *)__p;
    if (v16 <= (v14 >> 1) + 1) {
      unint64_t v17 = v15 + 1;
    }
    else {
      unint64_t v17 = v16;
    }
    if (v16 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v18 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v18 = v17;
    }
    if (v18) {
      __int16 v19 = (char *)sub_100C3D5E0((uint64_t)&v264, v18);
    }
    else {
      __int16 v19 = 0;
    }
    __int16 v20 = &v19[2 * v15];
    unsigned int v21 = &v19[2 * v18];
    *(_WORD *)__int16 v20 = (v12 << 6) | 0x13;
    __int16 v13 = (__int16 *)(v20 + 2);
    int v23 = (char *)__p;
    __int16 v22 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v24 = *((_WORD *)v22 - 1);
        v22 -= 2;
        *((_WORD *)v20 - 1) = v24;
        v20 -= 2;
      }
      while (v22 != v23);
      __int16 v22 = (char *)__p;
    }
    long long __p = v20;
    v263 = v13;
    v264 = (__int16 *)v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    v5[1] = (v12 << 6) | 0x13;
    __int16 v13 = v5 + 2;
  }
  v263 = v13;
  __int16 v25 = a2 & 8;
  if (v13 >= v264)
  {
    uint64_t v27 = (char *)v13 - (unsigned char *)__p;
    if ((char *)v13 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v28 = v27 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v27 >> 1) + 1)) {
      uint64_t v29 = v28 + 1;
    }
    else {
      uint64_t v29 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v30 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v30 = v29;
    }
    if (v30) {
      double v31 = (char *)sub_100C3D5E0((uint64_t)&v264, v30);
    }
    else {
      double v31 = 0;
    }
    uint64_t v32 = &v31[2 * v28];
    unsigned int v33 = &v31[2 * v30];
    *(_WORD *)uint64_t v32 = (32 * v25) | 0x14;
    __int16 v26 = (__int16 *)(v32 + 2);
    uint64_t v35 = (char *)__p;
    __int16 v34 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v36 = *((_WORD *)v34 - 1);
        v34 -= 2;
        *((_WORD *)v32 - 1) = v36;
        v32 -= 2;
      }
      while (v34 != v35);
      __int16 v34 = (char *)__p;
    }
    long long __p = v32;
    v263 = v26;
    v264 = (__int16 *)v33;
    if (v34) {
      operator delete(v34);
    }
  }
  else
  {
    *__int16 v13 = (32 * v25) | 0x14;
    __int16 v26 = v13 + 1;
  }
  v263 = v26;
  __int16 v37 = a2 & 0x10;
  if (v26 >= v264)
  {
    uint64_t v39 = (char *)v26 - (unsigned char *)__p;
    if ((char *)v26 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v40 = v39 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v39 >> 1) + 1)) {
      uint64_t v41 = v40 + 1;
    }
    else {
      uint64_t v41 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v42 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v42 = v41;
    }
    if (v42) {
      uint64_t v43 = (char *)sub_100C3D5E0((uint64_t)&v264, v42);
    }
    else {
      uint64_t v43 = 0;
    }
    unsigned int v44 = &v43[2 * v40];
    char v45 = &v43[2 * v42];
    *(_WORD *)unsigned int v44 = (16 * v37) | 0x15;
    __int16 v38 = (__int16 *)(v44 + 2);
    uint64_t v47 = (char *)__p;
    uint64_t v46 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v48 = *((_WORD *)v46 - 1);
        v46 -= 2;
        *((_WORD *)v44 - 1) = v48;
        v44 -= 2;
      }
      while (v46 != v47);
      uint64_t v46 = (char *)__p;
    }
    long long __p = v44;
    v263 = v38;
    v264 = (__int16 *)v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    __int16 *v26 = (16 * v37) | 0x15;
    __int16 v38 = v26 + 1;
  }
  v263 = v38;
  __int16 v49 = a2 & 0x20;
  if (v38 >= v264)
  {
    uint64_t v51 = (char *)v38 - (unsigned char *)__p;
    if ((char *)v38 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v52 = v51 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v51 >> 1) + 1)) {
      uint64_t v53 = v52 + 1;
    }
    else {
      uint64_t v53 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v54 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v54 = v53;
    }
    if (v54) {
      uint64_t v55 = (char *)sub_100C3D5E0((uint64_t)&v264, v54);
    }
    else {
      uint64_t v55 = 0;
    }
    __int16 v56 = &v55[2 * v52];
    uint64_t v57 = &v55[2 * v54];
    *(_WORD *)__int16 v56 = (8 * v49) | 0x16;
    __int16 v50 = (__int16 *)(v56 + 2);
    unint64_t v59 = (char *)__p;
    uint64_t v58 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v60 = *((_WORD *)v58 - 1);
        v58 -= 2;
        *((_WORD *)v56 - 1) = v60;
        v56 -= 2;
      }
      while (v58 != v59);
      uint64_t v58 = (char *)__p;
    }
    long long __p = v56;
    v263 = v50;
    v264 = (__int16 *)v57;
    if (v58) {
      operator delete(v58);
    }
  }
  else
  {
    *__int16 v38 = (8 * v49) | 0x16;
    __int16 v50 = v38 + 1;
  }
  v263 = v50;
  __int16 v61 = a2 & 0x40;
  if (v50 >= v264)
  {
    uint64_t v63 = (char *)v50 - (unsigned char *)__p;
    if ((char *)v50 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v64 = v63 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v63 >> 1) + 1)) {
      uint64_t v65 = v64 + 1;
    }
    else {
      uint64_t v65 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v66 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v66 = v65;
    }
    if (v66) {
      unsigned int v67 = (char *)sub_100C3D5E0((uint64_t)&v264, v66);
    }
    else {
      unsigned int v67 = 0;
    }
    int v68 = &v67[2 * v64];
    __int16 v69 = &v67[2 * v66];
    *(_WORD *)int v68 = (4 * v61) | 0x17;
    unsigned int v62 = (__int16 *)(v68 + 2);
    __int16 v71 = (char *)__p;
    float64_t v70 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v72 = *((_WORD *)v70 - 1);
        v70 -= 2;
        *((_WORD *)v68 - 1) = v72;
        v68 -= 2;
      }
      while (v70 != v71);
      float64_t v70 = (char *)__p;
    }
    long long __p = v68;
    v263 = v62;
    v264 = (__int16 *)v69;
    if (v70) {
      operator delete(v70);
    }
  }
  else
  {
    *__int16 v50 = (4 * v61) | 0x17;
    unsigned int v62 = v50 + 1;
  }
  v263 = v62;
  __int16 v73 = a2 & 0x80;
  if (v62 >= v264)
  {
    uint64_t v75 = (char *)v62 - (unsigned char *)__p;
    if ((char *)v62 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v76 = v75 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v75 >> 1) + 1)) {
      uint64_t v77 = v76 + 1;
    }
    else {
      uint64_t v77 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v78 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v78 = v77;
    }
    if (v78) {
      __int16 v79 = (char *)sub_100C3D5E0((uint64_t)&v264, v78);
    }
    else {
      __int16 v79 = 0;
    }
    float64_t v80 = &v79[2 * v76];
    __int16 v81 = &v79[2 * v78];
    *(_WORD *)float64_t v80 = (2 * v73) | 0x18;
    double v74 = (__int16 *)(v80 + 2);
    int v83 = (char *)__p;
    double v82 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v84 = *((_WORD *)v82 - 1);
        v82 -= 2;
        *((_WORD *)v80 - 1) = v84;
        v80 -= 2;
      }
      while (v82 != v83);
      double v82 = (char *)__p;
    }
    long long __p = v80;
    v263 = v74;
    v264 = (__int16 *)v81;
    if (v82) {
      operator delete(v82);
    }
  }
  else
  {
    *unsigned int v62 = (2 * v73) | 0x18;
    double v74 = v62 + 1;
  }
  v263 = v74;
  __int16 v85 = a2 & 0x100;
  if (v74 >= v264)
  {
    uint64_t v87 = (char *)v74 - (unsigned char *)__p;
    if ((char *)v74 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v88 = v87 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v87 >> 1) + 1)) {
      uint64_t v89 = v88 + 1;
    }
    else {
      uint64_t v89 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v90 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v90 = v89;
    }
    if (v90) {
      int v91 = (char *)sub_100C3D5E0((uint64_t)&v264, v90);
    }
    else {
      int v91 = 0;
    }
    int v92 = &v91[2 * v88];
    float v93 = &v91[2 * v90];
    *(_WORD *)int v92 = v85 | 0x19;
    v86 = (__int16 *)(v92 + 2);
    float v95 = (char *)__p;
    unint64_t v94 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v96 = *((_WORD *)v94 - 1);
        v94 -= 2;
        *((_WORD *)v92 - 1) = v96;
        v92 -= 2;
      }
      while (v94 != v95);
      unint64_t v94 = (char *)__p;
    }
    long long __p = v92;
    v263 = v86;
    v264 = (__int16 *)v93;
    if (v94) {
      operator delete(v94);
    }
  }
  else
  {
    *double v74 = v85 | 0x19;
    v86 = v74 + 1;
  }
  v263 = v86;
  if (v86 >= v264)
  {
    uint64_t v98 = (char *)v86 - (unsigned char *)__p;
    if ((char *)v86 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v99 = v98 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v98 >> 1) + 1)) {
      uint64_t v100 = v99 + 1;
    }
    else {
      uint64_t v100 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v101 = v100;
    }
    if (v101) {
      uint64_t v102 = (char *)sub_100C3D5E0((uint64_t)&v264, v101);
    }
    else {
      uint64_t v102 = 0;
    }
    __int16 v103 = &v102[2 * v99];
    float32x2_t v104 = &v102[2 * v101];
    *(_WORD *)__int16 v103 = ((unsigned __int16)(a2 & 0x200) >> 1) | 0x1A;
    unint64_t v97 = (__int16 *)(v103 + 2);
    __int16 v106 = (char *)__p;
    long long v105 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v107 = *((_WORD *)v105 - 1);
        v105 -= 2;
        *((_WORD *)v103 - 1) = v107;
        v103 -= 2;
      }
      while (v105 != v106);
      long long v105 = (char *)__p;
    }
    long long __p = v103;
    v263 = v97;
    v264 = (__int16 *)v104;
    if (v105) {
      operator delete(v105);
    }
  }
  else
  {
    __int16 *v86 = ((unsigned __int16)(a2 & 0x200) >> 1) | 0x1A;
    unint64_t v97 = v86 + 1;
  }
  v263 = v97;
  unsigned int v108 = a2 & 0x200000;
  if (v97 >= v264)
  {
    uint64_t v110 = (char *)v97 - (unsigned char *)__p;
    if ((char *)v97 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v111 = v110 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v110 >> 1) + 1)) {
      uint64_t v112 = v111 + 1;
    }
    else {
      uint64_t v112 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v113 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v113 = v112;
    }
    if (v113) {
      __int16 v114 = (char *)sub_100C3D5E0((uint64_t)&v264, v113);
    }
    else {
      __int16 v114 = 0;
    }
    int v115 = &v114[2 * v111];
    __int16 v116 = &v114[2 * v113];
    *(_WORD *)int v115 = (v108 >> 13) | 0x1B;
    int v109 = (__int16 *)(v115 + 2);
    __int16 v118 = (char *)__p;
    int v117 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v119 = *((_WORD *)v117 - 1);
        v117 -= 2;
        *((_WORD *)v115 - 1) = v119;
        v115 -= 2;
      }
      while (v117 != v118);
      int v117 = (char *)__p;
    }
    long long __p = v115;
    v263 = v109;
    v264 = (__int16 *)v116;
    if (v117) {
      operator delete(v117);
    }
  }
  else
  {
    *unint64_t v97 = (v108 >> 13) | 0x1B;
    int v109 = v97 + 1;
  }
  v263 = v109;
  unsigned int v120 = a2 & 0x400000;
  if (v109 >= v264)
  {
    uint64_t v122 = (char *)v109 - (unsigned char *)__p;
    if ((char *)v109 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v123 = v122 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v122 >> 1) + 1)) {
      uint64_t v124 = v123 + 1;
    }
    else {
      uint64_t v124 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v125 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v125 = v124;
    }
    if (v125) {
      __int16 v126 = (char *)sub_100C3D5E0((uint64_t)&v264, v125);
    }
    else {
      __int16 v126 = 0;
    }
    double v127 = &v126[2 * v123];
    __int16 v128 = &v126[2 * v125];
    *(_WORD *)double v127 = (v120 >> 14) | 0x1C;
    v121 = (__int16 *)(v127 + 2);
    __int16 v130 = (char *)__p;
    double v129 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v131 = *((_WORD *)v129 - 1);
        v129 -= 2;
        *((_WORD *)v127 - 1) = v131;
        v127 -= 2;
      }
      while (v129 != v130);
      double v129 = (char *)__p;
    }
    long long __p = v127;
    v263 = v121;
    v264 = (__int16 *)v128;
    if (v129) {
      operator delete(v129);
    }
  }
  else
  {
    *int v109 = (v120 >> 14) | 0x1C;
    v121 = v109 + 1;
  }
  v263 = v121;
  if (v121 >= v264)
  {
    uint64_t v133 = (char *)v121 - (unsigned char *)__p;
    if ((char *)v121 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v134 = v133 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v133 >> 1) + 1)) {
      uint64_t v135 = v134 + 1;
    }
    else {
      uint64_t v135 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v136 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v136 = v135;
    }
    if (v136) {
      double v137 = (char *)sub_100C3D5E0((uint64_t)&v264, v136);
    }
    else {
      double v137 = 0;
    }
    __int16 v138 = &v137[2 * v134];
    double v139 = &v137[2 * v136];
    *(_WORD *)__int16 v138 = ((unsigned __int16)(a2 & 0x400) >> 2) | 0x1D;
    __int16 v132 = (__int16 *)(v138 + 2);
    double v141 = (char *)__p;
    __int16 v140 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v142 = *((_WORD *)v140 - 1);
        v140 -= 2;
        *((_WORD *)v138 - 1) = v142;
        v138 -= 2;
      }
      while (v140 != v141);
      __int16 v140 = (char *)__p;
    }
    long long __p = v138;
    v263 = v132;
    v264 = (__int16 *)v139;
    if (v140) {
      operator delete(v140);
    }
  }
  else
  {
    __int16 *v121 = ((unsigned __int16)(a2 & 0x400) >> 2) | 0x1D;
    __int16 v132 = v121 + 1;
  }
  v263 = v132;
  if (v132 >= v264)
  {
    uint64_t v144 = (char *)v132 - (unsigned char *)__p;
    if ((char *)v132 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v145 = v144 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v144 >> 1) + 1)) {
      uint64_t v146 = v145 + 1;
    }
    else {
      uint64_t v146 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v147 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v147 = v146;
    }
    if (v147) {
      __int16 v148 = (char *)sub_100C3D5E0((uint64_t)&v264, v147);
    }
    else {
      __int16 v148 = 0;
    }
    int v149 = &v148[2 * v145];
    __int16 v150 = &v148[2 * v147];
    *(_WORD *)int v149 = ((unsigned __int16)(a2 & 0x1000) >> 4) | 0x1E;
    double v143 = (__int16 *)(v149 + 2);
    __int16 v152 = (char *)__p;
    int v151 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v153 = *((_WORD *)v151 - 1);
        v151 -= 2;
        *((_WORD *)v149 - 1) = v153;
        v149 -= 2;
      }
      while (v151 != v152);
      int v151 = (char *)__p;
    }
    long long __p = v149;
    v263 = v143;
    v264 = (__int16 *)v150;
    if (v151) {
      operator delete(v151);
    }
  }
  else
  {
    *__int16 v132 = ((unsigned __int16)(a2 & 0x1000) >> 4) | 0x1E;
    double v143 = v132 + 1;
  }
  v263 = v143;
  if (v143 >= v264)
  {
    uint64_t v155 = (char *)v143 - (unsigned char *)__p;
    if ((char *)v143 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v156 = v155 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v155 >> 1) + 1)) {
      uint64_t v157 = v156 + 1;
    }
    else {
      uint64_t v157 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v158 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v158 = v157;
    }
    if (v158) {
      char v159 = (char *)sub_100C3D5E0((uint64_t)&v264, v158);
    }
    else {
      char v159 = 0;
    }
    uint64_t v160 = &v159[2 * v156];
    float v161 = &v159[2 * v158];
    *(_WORD *)uint64_t v160 = ((unsigned __int16)(a2 & 0x2000) >> 5) | 0x1F;
    int v154 = (__int16 *)(v160 + 2);
    char v163 = (char *)__p;
    double v162 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v164 = *((_WORD *)v162 - 1);
        v162 -= 2;
        *((_WORD *)v160 - 1) = v164;
        v160 -= 2;
      }
      while (v162 != v163);
      double v162 = (char *)__p;
    }
    long long __p = v160;
    v263 = v154;
    v264 = (__int16 *)v161;
    if (v162) {
      operator delete(v162);
    }
  }
  else
  {
    *double v143 = ((unsigned __int16)(a2 & 0x2000) >> 5) | 0x1F;
    int v154 = v143 + 1;
  }
  v263 = v154;
  if (v154 >= v264)
  {
    uint64_t v166 = (char *)v154 - (unsigned char *)__p;
    if ((char *)v154 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v167 = v166 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v166 >> 1) + 1)) {
      uint64_t v168 = v167 + 1;
    }
    else {
      uint64_t v168 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v169 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v169 = v168;
    }
    if (v169) {
      double v170 = (char *)sub_100C3D5E0((uint64_t)&v264, v169);
    }
    else {
      double v170 = 0;
    }
    char v171 = &v170[2 * v167];
    float v172 = &v170[2 * v169];
    *(_WORD *)char v171 = ((unsigned __int16)(a2 & 0x4000) >> 6) | 0x20;
    float v165 = (__int16 *)(v171 + 2);
    float64x2_t v174 = (char *)__p;
    float v173 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v175 = *((_WORD *)v173 - 1);
        v173 -= 2;
        *((_WORD *)v171 - 1) = v175;
        v171 -= 2;
      }
      while (v173 != v174);
      float v173 = (char *)__p;
    }
    long long __p = v171;
    v263 = v165;
    v264 = (__int16 *)v172;
    if (v173) {
      operator delete(v173);
    }
  }
  else
  {
    *int v154 = ((unsigned __int16)(a2 & 0x4000) >> 6) | 0x20;
    float v165 = v154 + 1;
  }
  v263 = v165;
  if (v165 >= v264)
  {
    uint64_t v177 = (char *)v165 - (unsigned char *)__p;
    if ((char *)v165 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v178 = v177 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v177 >> 1) + 1)) {
      uint64_t v179 = v178 + 1;
    }
    else {
      uint64_t v179 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v180 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v180 = v179;
    }
    if (v180) {
      float v181 = (char *)sub_100C3D5E0((uint64_t)&v264, v180);
    }
    else {
      float v181 = 0;
    }
    __int16 v182 = &v181[2 * v178];
    char v183 = &v181[2 * v180];
    *(_WORD *)__int16 v182 = ((unsigned __int16)(a2 & 0x8000) >> 7) | 0x21;
    float v176 = (__int16 *)(v182 + 2);
    float v185 = (char *)__p;
    float v184 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v186 = *((_WORD *)v184 - 1);
        v184 -= 2;
        *((_WORD *)v182 - 1) = v186;
        v182 -= 2;
      }
      while (v184 != v185);
      float v184 = (char *)__p;
    }
    long long __p = v182;
    v263 = v176;
    v264 = (__int16 *)v183;
    if (v184) {
      operator delete(v184);
    }
  }
  else
  {
    *float v165 = ((unsigned __int16)(a2 & 0x8000) >> 7) | 0x21;
    float v176 = v165 + 1;
  }
  v263 = v176;
  unsigned int v187 = a2 & 0x20000;
  if (v176 >= v264)
  {
    uint64_t v189 = (char *)v176 - (unsigned char *)__p;
    if ((char *)v176 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v190 = v189 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v189 >> 1) + 1)) {
      uint64_t v191 = v190 + 1;
    }
    else {
      uint64_t v191 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v192 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v192 = v191;
    }
    if (v192) {
      unint64_t v193 = (char *)sub_100C3D5E0((uint64_t)&v264, v192);
    }
    else {
      unint64_t v193 = 0;
    }
    v194 = &v193[2 * v190];
    uint64_t v195 = &v193[2 * v192];
    *(_WORD *)v194 = (v187 >> 9) | 0x23;
    float v188 = (__int16 *)(v194 + 2);
    int64x2_t v197 = (char *)__p;
    int64x2_t v196 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v198 = *((_WORD *)v196 - 1);
        v196 -= 2;
        *((_WORD *)v194 - 1) = v198;
        v194 -= 2;
      }
      while (v196 != v197);
      int64x2_t v196 = (char *)__p;
    }
    long long __p = v194;
    v263 = v188;
    v264 = (__int16 *)v195;
    if (v196) {
      operator delete(v196);
    }
  }
  else
  {
    *float v176 = (v187 >> 9) | 0x23;
    float v188 = v176 + 1;
  }
  v263 = v188;
  unsigned int v199 = a2 & 0x80000;
  if (v188 >= v264)
  {
    uint64_t v201 = (char *)v188 - (unsigned char *)__p;
    if ((char *)v188 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v202 = v201 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v201 >> 1) + 1)) {
      uint64_t v203 = v202 + 1;
    }
    else {
      uint64_t v203 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v204 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v204 = v203;
    }
    if (v204) {
      int v205 = (char *)sub_100C3D5E0((uint64_t)&v264, v204);
    }
    else {
      int v205 = 0;
    }
    int v206 = &v205[2 * v202];
    long long v207 = &v205[2 * v204];
    *(_WORD *)int v206 = (v199 >> 11) | 0x2A;
    int32x2_t v200 = (__int16 *)(v206 + 2);
    long long v209 = (char *)__p;
    long long v208 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v210 = *((_WORD *)v208 - 1);
        v208 -= 2;
        *((_WORD *)v206 - 1) = v210;
        v206 -= 2;
      }
      while (v208 != v209);
      long long v208 = (char *)__p;
    }
    long long __p = v206;
    v263 = v200;
    v264 = (__int16 *)v207;
    if (v208) {
      operator delete(v208);
    }
  }
  else
  {
    __int16 *v188 = (v199 >> 11) | 0x2A;
    int32x2_t v200 = v188 + 1;
  }
  v263 = v200;
  unsigned int v211 = a2 & 0x100000;
  if (v200 >= v264)
  {
    uint64_t v213 = (char *)v200 - (unsigned char *)__p;
    if ((char *)v200 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v214 = v213 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v213 >> 1) + 1)) {
      uint64_t v215 = v214 + 1;
    }
    else {
      uint64_t v215 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v216 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v216 = v215;
    }
    if (v216) {
      v217 = (char *)sub_100C3D5E0((uint64_t)&v264, v216);
    }
    else {
      v217 = 0;
    }
    v218 = &v217[2 * v214];
    v219 = &v217[2 * v216];
    *(_WORD *)v218 = (v211 >> 12) | 0x2B;
    long long v212 = (__int16 *)(v218 + 2);
    v221 = (char *)__p;
    v220 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v222 = *((_WORD *)v220 - 1);
        v220 -= 2;
        *((_WORD *)v218 - 1) = v222;
        v218 -= 2;
      }
      while (v220 != v221);
      v220 = (char *)__p;
    }
    long long __p = v218;
    v263 = v212;
    v264 = (__int16 *)v219;
    if (v220) {
      operator delete(v220);
    }
  }
  else
  {
    *int32x2_t v200 = (v211 >> 12) | 0x2B;
    long long v212 = v200 + 1;
  }
  v263 = v212;
  unsigned int v223 = a2 & 0x40000;
  if (v212 >= v264)
  {
    uint64_t v225 = (char *)v212 - (unsigned char *)__p;
    if ((char *)v212 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v226 = v225 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v225 >> 1) + 1)) {
      uint64_t v227 = v226 + 1;
    }
    else {
      uint64_t v227 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v228 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v228 = v227;
    }
    if (v228) {
      v229 = (char *)sub_100C3D5E0((uint64_t)&v264, v228);
    }
    else {
      v229 = 0;
    }
    v230 = &v229[2 * v226];
    v231 = &v229[2 * v228];
    *(_WORD *)v230 = (v223 >> 10) | 0xFF;
    v224 = (__int16 *)(v230 + 2);
    v233 = (char *)__p;
    v232 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v234 = *((_WORD *)v232 - 1);
        v232 -= 2;
        *((_WORD *)v230 - 1) = v234;
        v230 -= 2;
      }
      while (v232 != v233);
      v232 = (char *)__p;
    }
    long long __p = v230;
    v263 = v224;
    v264 = (__int16 *)v231;
    if (v232) {
      operator delete(v232);
    }
  }
  else
  {
    *long long v212 = (v223 >> 10) | 0xFF;
    v224 = v212 + 1;
  }
  v263 = v224;
  unsigned int v235 = a2 & 0x800000;
  if (v224 >= v264)
  {
    uint64_t v237 = (char *)v224 - (unsigned char *)__p;
    if ((char *)v224 - (unsigned char *)__p < -2) {
      goto LABEL_368;
    }
    uint64_t v238 = v237 >> 1;
    if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v237 >> 1) + 1)) {
      uint64_t v239 = v238 + 1;
    }
    else {
      uint64_t v239 = (char *)v264 - (unsigned char *)__p;
    }
    if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v240 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v240 = v239;
    }
    if (v240) {
      v241 = (char *)sub_100C3D5E0((uint64_t)&v264, v240);
    }
    else {
      v241 = 0;
    }
    v242 = (__int16 *)&v241[2 * v238];
    v243 = &v241[2 * v240];
    __int16 *v242 = (v235 >> 15) | 0x24;
    v236 = v242 + 1;
    v245 = (char *)__p;
    v244 = (char *)v263;
    if (v263 != __p)
    {
      do
      {
        __int16 v246 = *((_WORD *)v244 - 1);
        v244 -= 2;
        *--v242 = v246;
      }
      while (v244 != v245);
      v244 = (char *)__p;
    }
    long long __p = v242;
    v263 = v236;
    v264 = (__int16 *)v243;
    if (v244) {
      operator delete(v244);
    }
  }
  else
  {
    __int16 *v224 = (v235 >> 15) | 0x24;
    v236 = v224 + 1;
  }
  v263 = v236;
  unsigned int v247 = a2 & 0x20000000;
  if (v236 < v264)
  {
    __int16 *v236 = (v247 >> 21) | 0xA0;
    v248 = v236 + 1;
    goto LABEL_363;
  }
  uint64_t v249 = (char *)v236 - (unsigned char *)__p;
  if ((char *)v236 - (unsigned char *)__p <= -3) {
LABEL_368:
  }
    sub_1001D7FD4();
  uint64_t v250 = v249 >> 1;
  if ((char *)v264 - (unsigned char *)__p <= (unint64_t)((v249 >> 1) + 1)) {
    uint64_t v251 = v250 + 1;
  }
  else {
    uint64_t v251 = (char *)v264 - (unsigned char *)__p;
  }
  if ((unint64_t)((char *)v264 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v252 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v252 = v251;
  }
  if (v252) {
    v253 = (char *)sub_100C3D5E0((uint64_t)&v264, v252);
  }
  else {
    v253 = 0;
  }
  v254 = (__int16 *)&v253[2 * v250];
  v255 = &v253[2 * v252];
  __int16 *v254 = (v247 >> 21) | 0xA0;
  v248 = v254 + 1;
  v257 = (char *)__p;
  v256 = (char *)v263;
  if (v263 != __p)
  {
    do
    {
      __int16 v258 = *((_WORD *)v256 - 1);
      v256 -= 2;
      *--v254 = v258;
    }
    while (v256 != v257);
    v256 = (char *)__p;
  }
  long long __p = v254;
  v263 = v248;
  v264 = (__int16 *)v255;
  if (v256) {
    operator delete(v256);
  }
LABEL_363:
  v263 = v248;
  v260 = 0;
  uint64_t v261 = 0;
  v259 = 0;
  sub_1018DAAA4((char *)&v259, (__int16 *)__p, v248, ((char *)v248 - (unsigned char *)__p) >> 1);
  sub_101855000((void *)(a1 + 264), (unsigned __int8 **)&v259);
  if (v259)
  {
    v260 = v259;
    operator delete(v259);
  }
  if (__p)
  {
    v263 = (__int16 *)__p;
    operator delete(__p);
  }
}

void sub_1018D7990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018D79C4(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *((_DWORD *)a2 + 1);
  if (v3)
  {
    int v4 = *a2;
    uint64_t v5 = qmi::asString();
    sub_1018D7B3C(v2, (uint64_t)"#bb.e,GPS Reset failed", v4, v3, v5);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    __int16 v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      v9[0] = 68289026;
      v9[1] = 0;
      __int16 v10 = 2082;
      __int16 v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e, trigger init timer\"}", (uint8_t *)v9, 0x12u);
    }
    uint64_t v7 = *(NSObject **)(v2 + 296);
    dispatch_time_t v8 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  }
}

void sub_1018D7B3C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  __int16 v10 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v13 = 68290051;
    int v14 = 0;
    __int16 v15 = 2082;
    unint64_t v16 = "";
    __int16 v17 = 2081;
    uint64_t v18 = a2;
    __int16 v19 = 1026;
    int v20 = a3;
    __int16 v21 = 1026;
    int v22 = a4;
    __int16 v23 = 2081;
    uint64_t v24 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#bb.e,InitError\", \"error\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"ecode\":%{public}d, \"desc\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x32u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
  }
  __int16 v11 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    int v13 = 68290051;
    int v14 = 0;
    __int16 v15 = 2082;
    unint64_t v16 = "";
    __int16 v17 = 2081;
    uint64_t v18 = a2;
    __int16 v19 = 1026;
    int v20 = a3;
    __int16 v21 = 1026;
    int v22 = a4;
    __int16 v23 = 2081;
    uint64_t v24 = a5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,InitError", "{\"msg%{public}.0s\":\"#bb.e,InitError\", \"error\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"ecode\":%{public}d, \"desc\":%{private, location:escape_only}s}", (uint8_t *)&v13, 0x32u);
  }
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 152) + 112))(*(void *)(a1 + 152));
  sub_1018D06E8(a1, v12);
}

void sub_1018D7D50(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *((_DWORD *)a2 + 1);
  int v5 = *(unsigned __int16 *)a2;
  uint64_t v6 = qmi::asString();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 68290051;
    v10[1] = 0;
    __int16 v11 = 2082;
    uint64_t v12 = "";
    __int16 v13 = 2081;
    int v14 = "setGetServiceState";
    __int16 v15 = 1026;
    int v16 = v5;
    __int16 v17 = 1026;
    int v18 = v4;
    __int16 v19 = 2081;
    uint64_t v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v10, 0x32u);
  }
  if (v4 != 26 && v4)
  {
    dispatch_time_t v8 = "#bb.e,ServiceStateResponseError";
  }
  else
  {
    LOBYTE(v10[0]) = 0;
    sub_101842FDC(a2, 1, (uint64_t)v10);
    if (LOBYTE(v10[0])) {
      return;
    }
    dispatch_time_t v8 = "#bb.e,ServiceStateResponseParseError";
  }
  uint64_t v9 = qmi::asString();
  sub_1018D7B3C(v3, (uint64_t)v8, v5, v4, v9);
}

void sub_1018D7EE4(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = *((_DWORD *)a2 + 1);
  uint64_t v5 = qmi::asString();
  uint64_t v6 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2081;
    uint64_t v12 = "sendForceReceiverOff";
    __int16 v13 = 1026;
    int v14 = v3;
    __int16 v15 = 1026;
    int v16 = v4;
    __int16 v17 = 2081;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26) {
      sub_1018D7B3C(v6, (uint64_t)"sendForceReceiverOff", v3, v4, v5);
    }
  }
}

void sub_1018D8040(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = *((_DWORD *)a2 + 1);
  uint64_t v5 = qmi::asString();
  uint64_t v6 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2081;
    uint64_t v12 = "sendSetLppConfig";
    __int16 v13 = 1026;
    int v14 = v3;
    __int16 v15 = 1026;
    int v16 = v4;
    __int16 v17 = 2081;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26) {
      sub_1018D7B3C(v6, (uint64_t)"sendSetLppConfig", v3, v4, v5);
    }
  }
}

void sub_1018D819C(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = *((_DWORD *)a2 + 1);
  uint64_t v5 = qmi::asString();
  uint64_t v6 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2081;
    uint64_t v12 = "sendSetServiceState";
    __int16 v13 = 1026;
    int v14 = v3;
    __int16 v15 = 1026;
    int v16 = v4;
    __int16 v17 = 2081;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26) {
      sub_1018D7B3C(v6, (uint64_t)"sendSetServiceState", v3, v4, v5);
    }
  }
}

void sub_1018D82F8(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = *((_DWORD *)a2 + 1);
  uint64_t v5 = qmi::asString();
  uint64_t v6 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2081;
    uint64_t v12 = "sendSetAutoTrackingState";
    __int16 v13 = 1026;
    int v14 = v3;
    __int16 v15 = 1026;
    int v16 = v4;
    __int16 v17 = 2081;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26) {
      sub_1018D7B3C(v6, (uint64_t)"sendSetAutoTrackingState", v3, v4, v5);
    }
  }
}

void sub_1018D8454(uint64_t a1, unsigned __int16 *a2)
{
  int v3 = *a2;
  int v4 = *((_DWORD *)a2 + 1);
  uint64_t v5 = qmi::asString();
  uint64_t v6 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68290051;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2081;
    uint64_t v12 = "sendSvUseInFixReport";
    __int16 v13 = 1026;
    int v14 = v3;
    __int16 v15 = 1026;
    int v16 = v4;
    __int16 v17 = 2081;
    uint64_t v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x32u);
  }
  if (v4)
  {
    if (v4 != 26) {
      sub_1018D7B3C(v6, (uint64_t)"sendSvUseInFixReport", v3, v4, v5);
    }
  }
}

void sub_1018D85B0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *((_DWORD *)a2 + 1);
  int v4 = *a2;
  uint64_t v5 = qmi::asString();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68290051;
    v9[1] = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2081;
    __int16 v13 = "sendSetServiceState";
    __int16 v14 = 1026;
    int v15 = v4;
    __int16 v16 = 1026;
    int v17 = v3;
    __int16 v18 = 2081;
    uint64_t v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initResponseMsg\", \"msgName\":%{private, location:escape_only}s, \"msgId\":%{public}d, \"eCode\":%{public}d, \"errString\":%{private, location:escape_only}s}", (uint8_t *)v9, 0x32u);
  }
  if (v3 && v3 != 26)
  {
    uint64_t v8 = qmi::asString();
    sub_1018D7B3C(v2, (uint64_t)"#bb.e,sendSetServiceState", v4, v3, v8);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v2 + 152) + 48))(*(void *)(v2 + 152));
    sub_1018D06E8(v2, v7);
  }
}

id sub_1018D874C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 1026;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#bb.e,#irat,assert\", \"level\":%{public}d}", (uint8_t *)v6, 0x18u);
  }
  return [(((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)((id)
}

void *sub_1018D8860(void *a1)
{
  *a1 = off_102344D30;
  sub_1018D8974(a1 + 1);
  return a1;
}

void sub_1018D88A4(void *a1)
{
  *a1 = off_102344D30;
  sub_1018D8974(a1 + 1);

  operator delete();
}

const char *sub_1018D8908()
{
  return "DisconnectedState";
}

const char *sub_1018D8914()
{
  return "InitializingState";
}

const char *sub_1018D8920()
{
  return "RunningState";
}

const char *sub_1018D892C()
{
  return "SleepingState";
}

const char *sub_1018D8938()
{
  return "InitErrorState";
}

void sub_1018D8944(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_1018D8974(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1018D89F8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1018D89F8(a1, *a2);
    sub_1018D89F8(a1, a2[1]);
    sub_10068280C(a2 + 9);
    sub_10068280C(a2 + 5);
    operator delete(a2);
  }
}

void sub_1018D8A60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102344DE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1018D8A80(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102344DE0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1018D8AD4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1018D8B00()
{
}

void *sub_1018D8B14(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102344E30;
  result[1] = v3;
  return result;
}

uint64_t sub_1018D8B5C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102344E30;
  a2[1] = v2;
  return result;
}

uint64_t sub_1018D8B88(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(*(void *)(a1 + 8) + 152) + 24))(*(void *)(*(void *)(a1 + 8) + 152), a2, *a3);
}

uint64_t sub_1018D8BB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018D8BF8()
{
}

uint64_t sub_1018D8C04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

char *sub_1018D8C9C(uint64_t **a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = (void **)sub_1018D8D38((uint64_t)a1, &v10, a2);
  __int16 v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    __int16 v7 = (char *)operator new(0x68uLL);
    *((void *)v7 + 4) = **a4;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    sub_1000EDF90(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_1018D8D38(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        __int16 v7 = v4;
        if (!sub_1018D8DC0(*a3, v4[4])) {
          break;
        }
        int v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_1018D8DC0(v7[4], *a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      int v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    __int16 v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_1018D8DC0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if ((v2 & 0x8000000000000000) != 0 && (v3 & 0x8000000000000000) != 0) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) >> 31;
  }
  else {
    return v2 < v3;
  }
}

void sub_1018D8E04()
{
}

void *sub_1018D8E18(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_102344EC0;
  result[1] = v3;
  return result;
}

uint64_t sub_1018D8E60(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102344EC0;
  a2[1] = v2;
  return result;
}

void sub_1018D8E8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    uint64_t v3 = (void *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    int v6 = 68289539;
    int v7 = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v3;
    __int16 v12 = 2081;
    __int16 v13 = "InitActionNotSet";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#bb.e,initEvent\", \"fService\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&v6, 0x26u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
  }
  int v4 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    uint64_t v5 = (void *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    int v6 = 68289539;
    int v7 = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = v5;
    __int16 v12 = 2081;
    __int16 v13 = "InitActionNotSet";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#bb.e,initEvent", "{\"msg%{public}.0s\":\"#bb.e,initEvent\", \"fService\":%{private, location:escape_only}s, \"error\":%{private, location:escape_only}s}", (uint8_t *)&v6, 0x26u);
  }
}

uint64_t sub_1018D9054(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018D9094()
{
}

uint64_t **sub_1018D90A0(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  __int16 v8 = a1 + 1;
  __int16 v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        int v6 = *v9;
        __int16 v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        __int16 v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    __int16 v12 = operator new(0x48uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((void *)v12 + 8) = 0;
    char v15 = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_100851F14((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void *sub_1018D9188(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1018D93E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_1018D93F4(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1018D9654(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1018D9660(uint64_t *a1, dispatch_group_t group)
{
  uint64_t v2 = *a1;
  if (group)
  {
    dispatch_group_leave(group);
    uint64_t v3 = *(void *)(v2 + 240);
    if (v3) {
      sub_1019A58B4(v3);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "stored nullptr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "auto CLQmiController::delaySleep(dispatch_group_t)::(anonymous class)::operator()(dispatch_group_t) const", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  if (*(unsigned char *)(v2 + 208))
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(v2 + 152) + 88))(*(void *)(v2 + 152));
    sub_1018D06E8(v2, v5);
  }
}

void sub_1018D9850(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1018D9888(uint64_t a1)
{
}

uint64_t sub_1018D98B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

void *sub_1018D98F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_1018D8DC0(v3[4], *a2);
    int v7 = v3 + 1;
    if (!v6)
    {
      int v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1018D8DC0(*a2, v5[4])) {
    return v2;
  }
  return v5;
}

uint64_t sub_1018D9970(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1018D9980(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1018D9A18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *sub_1018D9A98(void *a1)
{
  *a1 = off_102344FA0;
  sub_1017C6FF0(a1 + 1);
  return a1;
}

void sub_1018D9ADC(void *a1)
{
  *a1 = off_102344FA0;
  sub_1017C6FF0(a1 + 1);

  operator delete();
}

void *sub_1018D9B40(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = off_102344FA0;
  sub_1018D9980((uint64_t)(v3 + 1), v2);
  void v3[5] = *(void *)(a1 + 40);
  return v3;
}

void sub_1018D9BA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018D9BBC(uint64_t a1, void *a2)
{
  *a2 = off_102344FA0;
  uint64_t result = sub_1018D9980((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(void *)(a1 + 40);
  return result;
}

void *sub_1018D9C10(uint64_t a1)
{
  return sub_1017C6FF0((void *)(a1 + 8));
}

void sub_1018D9C18(void *a1)
{
  sub_1017C6FF0(a1 + 1);

  operator delete(a1);
}

uint64_t sub_1018D9C54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    LOWORD(v8) = 2082;
    *(void *)((char *)&v8 + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,registration action\"}", buf, 0x12u);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1018D9E54;
  void v6[3] = &unk_102345000;
  unsigned char v6[4] = v2;
  *(void *)uint64_t buf = _NSConcreteStackBlock;
  *(void *)&long long v8 = 3221225472;
  *((void *)&v8 + 1) = sub_1018D9F64;
  __int16 v9 = &unk_10233CB70;
  int v10 = v6;
  qmi::Client::setIndHandler();
  uint64_t v4 = *(void *)(a1 + 32);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v2 + 32);
}

uint64_t sub_1018D9E08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018D9E48()
{
}

void sub_1018D9E54(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289283;
    v3[1] = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    __int16 v6 = 2081;
    int v7 = "pdsReady";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,initIndMsg\", \"msgName\":%{private, location:escape_only}s}", (uint8_t *)v3, 0x1Cu);
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 296), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  sub_1018D5BF8(v1);
}

void sub_1018D9F64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  sub_1018D9FC8(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1018D9FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void sub_1018D9FC8(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    sub_1018DA0C0(a2, __p, v5 - (unsigned char *)__p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_1018DA07C((uint64_t)a2);
  }
}

void sub_1018DA060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018DA07C(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2, 0x60u);
  return a1;
}

void sub_1018DA0AC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_1018DA0C0(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  __int16 v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0x60u);
  return a1;
}

void sub_1018DA0F0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_1018DA108()
{
}

void *sub_1018DA11C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102345040;
  result[1] = v3;
  return result;
}

uint64_t sub_1018DA164(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102345040;
  a2[1] = v2;
  return result;
}

void sub_1018DA190(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  sub_1018D874C(v1, 2);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    __int16 v6 = 2082;
    int v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,trigger reset timer\"}", (uint8_t *)v5, 0x12u);
  }
  uint64_t v3 = *(NSObject **)(v1 + 288);
  dispatch_time_t v4 = dispatch_time(0, 4000000000);
  dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
}

uint64_t sub_1018DA2A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018DA2E4()
{
}

void sub_1018DA2F4()
{
}

void *sub_1018DA308(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023450C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1018DA350(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023450C0;
  a2[1] = v2;
  return result;
}

id sub_1018DA37C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    __int16 v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,cleanup reset and init timers\"}", (uint8_t *)v4, 0x12u);
  }
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 288), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 296), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
  return sub_1018D874C(v1, 1);
}

uint64_t sub_1018DA494(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018DA4D4()
{
}

void sub_1018DA4E4()
{
}

void *sub_1018DA4F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102345140;
  result[1] = v3;
  return result;
}

uint64_t sub_1018DA540(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102345140;
  a2[1] = v2;
  return result;
}

uint64_t **sub_1018DA56C(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(*(void *)(a1 + 8) + 96);
  int v5 = 4;
  *(void *)uint64_t buf = &v5;
  uint64_t result = sub_1018D90A0(v1, &v5, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  if (result[8])
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102344DB0);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v7 = 2082;
      long long v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#bb.e,trigger error handler\"}", buf, 0x12u);
    }
    int v5 = 4;
    *(void *)uint64_t buf = &v5;
    dispatch_time_t v4 = sub_1018D90A0(v1, &v5, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[8];
    if (!v4) {
      sub_10015E48C();
    }
    return (uint64_t **)(*(uint64_t (**)(uint64_t *))(*v4 + 48))(v4);
  }
  return result;
}

uint64_t sub_1018DA6DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018DA71C()
{
}

uint64_t sub_1018DA728(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1018DA7C0(void *a1)
{
  *a1 = off_1023451C0;
  sub_1017C825C(a1 + 1);
  return a1;
}

void sub_1018DA804(void *a1)
{
  *a1 = off_1023451C0;
  sub_1017C825C(a1 + 1);

  operator delete();
}

void *sub_1018DA868(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  *uint64_t v3 = off_1023451C0;
  sub_1018DA728((uint64_t)(v3 + 1), v2);
  void v3[5] = *(void *)(a1 + 40);
  return v3;
}

void sub_1018DA8D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1018DA8E4(uint64_t a1, void *a2)
{
  *a2 = off_1023451C0;
  uint64_t result = sub_1018DA728((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(void *)(a1 + 40);
  return result;
}

void *sub_1018DA938(uint64_t a1)
{
  return sub_1017C825C((void *)(a1 + 8));
}

void sub_1018DA940(void *a1)
{
  sub_1017C825C(a1 + 1);

  operator delete(a1);
}

uint64_t sub_1018DA97C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t sub_1018DA9D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018DAA18()
{
}

uint64_t sub_1018DAA24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

char *sub_1018DAAA4(char *result, __int16 *a2, __int16 *a3, uint64_t a4)
{
  if (a4)
  {
    __int16 v6 = result;
    uint64_t result = sub_100C3D5A0(result, a4);
    __int16 v7 = (_WORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      __int16 v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1018DAAFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018DAB18()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"timer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
    }
    uint64_t v1 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "timer is null", "{\"msg%{public}.0s\":\"timer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102344DB0);
      }
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"timer is null\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_102344DB0);
  }
}

void sub_1018DACE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  sub_101853820(a1 + 16, a3);
  sub_1018DCEEC(a1 + 48, a4);
  sub_1015AF628(a1 + 80, a5);
  *(_DWORD *)(a1 + 112) = 1;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_WORD *)(a1 + 152) = 0;
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "DemEnable", (BOOL *)(a1 + 112));
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (*(unsigned char *)(a1 + 112)) {
    [*(id *)a1 vendor] proxyForService:@"CLDigitalElevationModel"];
  }
  int v12 = 0;
  sub_1000C7F88(buf);
  int v8 = sub_10006EF84(*(uint64_t *)buf, "GpsForceAllowCellularDemDownloads", &v12);
  if (v12 == 1) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v14) {
    sub_1000DB0A0(v14);
  }
  if (v9)
  {
    *(unsigned char *)(a1 + 113) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345230);
    }
    int v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "DEM,GpsForceAllowCellularDemDownloads,1", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345230);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssAssistanceDem::CLGnssAssistanceDem(id<CLIntersiloUniverse>, CLSetCommandToExecute, UndulationCallback, PositionAssistanceCallback)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  sub_101377314();
}

void sub_1018DB008(_Unwind_Exception *a1)
{
  uint64_t v6 = *(void *)(v1 + 160);
  *(void *)(v1 + 160) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100855A70(v4);
  sub_100855AF4(v3);
  sub_1008508E4(v2);
  _Unwind_Resume(a1);
}

void sub_1018DB098(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345250);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceDem::onGpsAssistantNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345250);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceDem::onGpsAssistantNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1018DC8E0((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1018DB254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018DB278(uint64_t a1)
{
  sub_1018DB2F8(a1);

  *(void *)(a1 + 8) = 0;
  uint64_t v2 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_100855A70((void *)(a1 + 80));
  sub_100855AF4((void *)(a1 + 48));
  sub_1008508E4((void *)(a1 + 16));
  return a1;
}

void sub_1018DB2F8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345230);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DEM,stop", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345230);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::stop()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(unsigned char *)(a1 + 153))
  {
    [*(id *)(*(void *)(a1 + 160) + 16) unregister:*(void *)(*(void *)(a1 + 160) + 8) forNotification:4];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345230);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v7 = 0;
      __int16 v8 = 2082;
      int v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DEM,TBA, unregistered for tunnel and bridge assistance notifications\"}", buf, 0x12u);
    }
    *(unsigned char *)(a1 + 153) = 0;
  }
  if (*(unsigned char *)(a1 + 114))
  {
    uint64_t v4 = *(void **)(a1 + 8);
    if (v4) {
      [v4 clear];
    }
  }
  *(unsigned char *)(a1 + 114) = 0;
}

void sub_1018DB544(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345230);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DEM,start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345230);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::start()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (!*(unsigned char *)(a1 + 153))
  {
    [*(id *)(*(void *)(a1 + 160) + 16) register:*(void *)(*(void *)(a1 + 160) + 8) forNotification:4 registrationInfo:0];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345230);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "DEM,TBA,registered for TBA notifications", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345230);
      }
      int v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::start()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(unsigned char *)(a1 + 153) = 1;
  }
  *(unsigned char *)(a1 + 114) = 1;
}

void sub_1018DB82C(uint64_t a1, uint64_t a2, double a3)
{
  if (vabdd_f64(sub_1000D3E50(), *(double *)(a1 + 120)) < a3)
  {
    *(unsigned char *)(a2 + 155) = 1;
    uint64_t v5 = *(void *)(a1 + 136);
    *(double *)(a2 + 160) = *(double *)(a1 + 128) + *(double *)(a1 + 144);
    *(void *)(a2 + 168) = v5;
  }
}

void sub_1018DB888(uint64_t a1, long long *a2, int a3)
{
  uint64_t v42 = a2;
  if (*(unsigned char *)(a1 + 114)
    && *(unsigned char *)(a1 + 112)
    && *(void *)(a1 + 8)
    && *(double *)((char *)a2 + 52) > 0.0
    && *(double *)((char *)a2 + 44) < 45.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345230);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DEM,feeding position", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345230);
      }
      LOWORD(v49[0]) = 0;
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v34);
      if (v34 != buf) {
        free(v34);
      }
    }
    int v41 = 0;
    double v40 = 0.0;
    if ([*(id *)(a1 + 8) syncgetAltitude:a2 rel:&v41 undulation:&v40 feedToAltFilter:1])
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345230);
      }
      int v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "DEM,altitude available", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345230);
        }
        LOWORD(v49[0]) = 0;
        uint64_t v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v35);
        if (v35 != buf) {
          free(v35);
        }
      }
      if (*(void *)(a1 + 72)) {
        sub_1018DC2C0(a1 + 48, 2, v40, *(double *)((char *)a2 + 76));
      }
      double v8 = *((double *)a2 + 67);
      double v9 = *(double *)((char *)a2 + 28);
      if (vabdd_f64(v8, v9) > 150.0)
      {
        if (qword_1024193D0 != -1)
        {
          double v38 = *(double *)((char *)a2 + 28);
          dispatch_once(&qword_1024193D0, &stru_102345230);
          double v9 = v38;
        }
        double v12 = v8 - v9;
        int v13 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          *(double *)&uint8_t buf[4] = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "DEM, large altitude offset between DEM and GPS: %{public}f not feeding to hardware", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345230);
          }
          LODWORD(v49[0]) = 134349056;
          *(double *)((char *)v49 + 4) = v12;
          __int16 v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v14);
          if (v14 != buf) {
            free(v14);
          }
        }
      }
      else
      {
        switch(v41)
        {
          case 1:
            int v10 = 1;
            goto LABEL_44;
          case 2:
            int v10 = 2;
            goto LABEL_44;
          case 3:
            int v10 = 3;
            goto LABEL_44;
          case 4:
            int v10 = 4;
LABEL_44:
            int v39 = v10;
            break;
          default:
            int v39 = 0;
            break;
        }
        if (*(void *)(a1 + 40))
        {
          *(double *)(a1 + 120) = sub_1000D3E50();
          *(_OWORD *)(a1 + 128) = *(long long *)((char *)a2 + 536);
          *(double *)(a1 + 144) = v40;
          long long v21 = a2[6];
          long long v22 = a2[8];
          v49[7] = a2[7];
          v50[0] = v22;
          *(_OWORD *)((char *)v50 + 12) = *(long long *)((char *)a2 + 140);
          long long v23 = a2[2];
          long long v24 = a2[4];
          long long v25 = a2[5];
          v49[3] = a2[3];
          void v49[4] = v24;
          v49[5] = v25;
          v49[6] = v21;
          long long v26 = a2[1];
          v49[0] = *a2;
          v49[1] = v26;
          void v49[2] = v23;
          memcpy(v51, a2 + 10, 0x201uLL);
          v51[65] = *((double *)a2 + 85);
          uint64_t v27 = (std::__shared_weak_count *)*((void *)a2 + 86);
          uint64_t v52 = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v28 = *(long long *)((char *)a2 + 776);
          long long v57 = *(long long *)((char *)a2 + 760);
          *(_OWORD *)uint64_t v58 = v28;
          *(void *)&v58[13] = *(void *)((char *)a2 + 789);
          long long v29 = *(long long *)((char *)a2 + 712);
          long long v53 = *(long long *)((char *)a2 + 696);
          long long v54 = v29;
          long long v30 = *(long long *)((char *)a2 + 744);
          long long v55 = *(long long *)((char *)a2 + 728);
          long long v56 = v30;
          if (a3)
          {
            if (*(unsigned char *)(a1 + 115))
            {
              double v31 = v51[48];
              if ((*(void *)&v51[48] & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && v51[48] < 40.0
                && v51[48] > 0.0)
              {
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_102345230);
                }
                uint64_t v32 = qword_1024193D8;
                if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t buf = 134349312;
                  *(double *)&uint8_t buf[4] = v31;
                  *(_WORD *)&unsigned char buf[12] = 2050;
                  *(void *)&unsigned char buf[14] = 0x4044000000000000;
                  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "DEM,uncertainty inflated,old,%{public}0.3f,new,%{public}0.3f", buf, 0x16u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_102345230);
                  }
                  int v45 = 134349312;
                  double v46 = v31;
                  __int16 v47 = 2050;
                  uint64_t v48 = 0x4044000000000000;
                  __int16 v37 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v37);
                  if (v37 != buf) {
                    free(v37);
                  }
                }
                v51[48] = 40.0;
              }
            }
          }
          unsigned int v44 = 0;
          unsigned int v33 = operator new(0x30uLL);
          *unsigned int v33 = off_102345280;
          v33[1] = &v39;
          v33[2] = v49;
          v33[3] = &v40;
          v33[4] = a1;
          v33[5] = &v42;
          unsigned int v44 = v33;
          sub_1018DC324(a1 + 16);
          sub_100850860(v43);
          if (v52) {
            sub_1000DB0A0(v52);
          }
        }
      }
    }
    else
    {
      if (*(unsigned char *)(a1 + 152)) {
        BOOL v11 = *(unsigned char *)(a1 + 113) != 0;
      }
      else {
        BOOL v11 = 1;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345230);
      }
      char v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = v11;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "DEM,downloadIfNeeded,isGPSSignalQualityGood,%{public}d,allowCenterTileDownloadOverCellular,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345230);
        }
        *(void *)&v49[0] = 67240448;
        WORD4(v49[0]) = 1026;
        *(_DWORD *)((char *)v49 + 10) = v11;
        __int16 v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedPositionAndPopulateGroundAltUncAndClampLongitude(GNSS::DaemonLocation *, const BOOL)", "%s\n", v36);
        if (v36 != buf) {
          free(v36);
        }
      }
      __int16 v16 = *(void **)(a1 + 8);
      long long v17 = a2[7];
      long long v67 = a2[6];
      long long v68 = v17;
      v69[0] = a2[8];
      *(_OWORD *)((char *)v69 + 12) = *(long long *)((char *)a2 + 140);
      long long v18 = a2[3];
      long long v63 = a2[2];
      long long v64 = v18;
      long long v19 = a2[5];
      long long v65 = a2[4];
      long long v66 = v19;
      long long v20 = a2[1];
      long long v61 = *a2;
      long long v62 = v20;
      *(void *)uint64_t buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472;
      *(void *)&uint8_t buf[16] = sub_1018DD230;
      __int16 v60 = &unk_1022C1CA0;
      [v16 downloadIfNeeded:[buf copy] signalQuality:0 allowCenterOverCellular:v11];
    }
  }
}

void sub_1018DC278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17) {
    sub_1000DB0A0(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018DC2C0(uint64_t a1, int a2, double a3, double a4)
{
  double v8 = a3;
  double v7 = a4;
  int v6 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, double *, double *, int *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_1018DC324(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_10015E48C();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *sub_1018DC374(void *result, unsigned int *a2)
{
  if (*((unsigned char *)result + 114))
  {
    uint64_t v2 = result;
    if (*((unsigned char *)result + 112))
    {
      if (result[1])
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345230);
        }
        uint64_t v4 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v5 = *a2;
          unsigned int v6 = a2[1];
          *(_DWORD *)uint64_t buf = 67240448;
          unsigned int v9 = v5;
          __int16 v10 = 1026;
          unsigned int v11 = v6;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,feeding motion,type,%{public}d,confidence,%{public}d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345230);
          }
          double v7 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedMotion(CLMotionActivity)", "%s\n", v7);
          if (v7 != (char *)buf) {
            free(v7);
          }
        }
        return [(id)v2[1] updateMotion:*a2 conf:a2[1]];
      }
    }
  }
  return result;
}

void sub_1018DC568(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      int v3 = a2;
      [v2 updateAirborneActivity:a2];
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345230);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        int v7 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,isAirborne,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345230);
        }
        unsigned int v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedAirborneActivity(const BOOL)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
  }
}

void sub_1018DC72C(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345230);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "DEM,Battery Saver enabled,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345230);
    }
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::feedBatterySaverMode(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  *(unsigned char *)(a1 + 152) = a2;
}

void sub_1018DC8E0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 4)
  {
    if (*(unsigned char *)(a1 + 114) && *(unsigned char *)(a1 + 112) && *(void *)(a1 + 8))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345230);
      }
      unsigned int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a4 + 16);
        uint64_t v8 = *(void *)(a4 + 24);
        int v9 = *(unsigned __int8 *)(a4 + 42);
        int v10 = *(unsigned __int8 *)(a4 + 43);
        int v11 = *(unsigned __int8 *)(a4 + 40);
        int v12 = *(unsigned __int8 *)(a4 + 41);
        uint64_t v13 = *(void *)(a4 + 32);
        *(_DWORD *)uint64_t buf = 134285057;
        uint64_t v45 = v7;
        __int16 v46 = 2049;
        uint64_t v47 = v8;
        __int16 v48 = 1026;
        int v49 = v9;
        __int16 v50 = 1026;
        int v51 = v10;
        __int16 v52 = 1026;
        int v53 = v11;
        __int16 v54 = 1026;
        int v55 = v12;
        __int16 v56 = 2048;
        uint64_t v57 = v13;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DEM,feeding TBA,search based on,lat,%{private}.7lf,lon,%{private}.7lf,isTunnel,%{public}d,isBridge,%{public}d,isCloseToTunnel,%{public}d,isCloseToBridge,%{public}d,radius,%.1lf", buf, 0x38u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345230);
        }
        uint64_t v21 = *(void *)(a4 + 16);
        uint64_t v22 = *(void *)(a4 + 24);
        int v23 = *(unsigned __int8 *)(a4 + 42);
        int v24 = *(unsigned __int8 *)(a4 + 43);
        int v25 = *(unsigned __int8 *)(a4 + 40);
        int v26 = *(unsigned __int8 *)(a4 + 41);
        uint64_t v27 = *(void *)(a4 + 32);
        int v30 = 134285057;
        uint64_t v31 = v21;
        __int16 v32 = 2049;
        uint64_t v33 = v22;
        __int16 v34 = 1026;
        int v35 = v23;
        __int16 v36 = 1026;
        int v37 = v24;
        __int16 v38 = 1026;
        int v39 = v25;
        __int16 v40 = 1026;
        int v41 = v26;
        __int16 v42 = 2048;
        uint64_t v43 = v27;
        long long v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::onGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      __int16 v14 = *(void **)(a1 + 8);
      long long v15 = *(_OWORD *)(a4 + 16);
      v29[0] = *(_OWORD *)a4;
      v29[1] = v15;
      v29[2] = *(_OWORD *)(a4 + 32);
      [v14 updateTunnelBridgeAssistance:v29];
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345230);
    }
    long long v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v18 = *a3;
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v45) = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning, Unsupported notification %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345230);
      }
      int v19 = *a3;
      int v30 = 67109120;
      LODWORD(v31) = v19;
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::onGpsAssistantNotification(int, const CLGpsAssistant_Type::Notification &, const CLGpsAssistant_Type::NotificationData &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
}

void sub_1018DCCD4(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 115) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345230);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a1 + 115);
    *(_DWORD *)uint64_t buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLGnssAssistanceDem,DEMDeweightAreaMonitor,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345230);
    }
    unsigned int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceDem::setInDEMDeweightArea(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1018DCE8C(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018DCEBC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1018DCEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1018DCF88()
{
}

__n128 sub_1018DCF9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v2 = off_102345280;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

__n128 sub_1018DCFF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_102345280;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1018DD038(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  (*(void (**)(uint64_t, void, void, void, double))(*(void *)a2 + 128))(a2, **(unsigned int **)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(v3 + 115), **(double **)(a1 + 24));
  uint64_t v4 = *(void *)(v3 + 104);
  if (v4)
  {
    unsigned int v5 = *(_OWORD ***)(a1 + 40);
    unsigned int v6 = *v5;
    long long v7 = (*v5)[1];
    v25[0] = **v5;
    v25[1] = v7;
    long long v8 = v6[5];
    long long v10 = v6[2];
    long long v9 = v6[3];
    v25[4] = v6[4];
    v25[5] = v8;
    void v25[2] = v10;
    v25[3] = v9;
    long long v12 = v6[7];
    long long v11 = v6[8];
    long long v13 = v6[6];
    *(_OWORD *)&v26[12] = *(_OWORD *)((char *)v6 + 140);
    v25[7] = v12;
    *(_OWORD *)int v26 = v11;
    v25[6] = v13;
    memcpy(v27, v6 + 10, sizeof(v27));
    uint64_t v28 = *((void *)v6 + 85);
    __int16 v14 = (std::__shared_weak_count *)*((void *)v6 + 86);
    long long v29 = v14;
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v4 = *(void *)(v3 + 104);
      long long v15 = *(_OWORD *)((char *)v6 + 696);
      long long v16 = *(_OWORD *)((char *)v6 + 728);
      long long v31 = *(_OWORD *)((char *)v6 + 712);
      long long v32 = v16;
      long long v30 = v15;
      long long v17 = *(_OWORD *)((char *)v6 + 744);
      long long v18 = *(_OWORD *)((char *)v6 + 760);
      long long v19 = *(_OWORD *)((char *)v6 + 776);
      *(void *)&v35[13] = *(void *)((char *)v6 + 789);
      long long v34 = v18;
      *(_OWORD *)int v35 = v19;
      long long v33 = v17;
      if (!v4) {
        sub_10015E48C();
      }
    }
    else
    {
      long long v20 = *(_OWORD *)((char *)v6 + 696);
      long long v21 = *(_OWORD *)((char *)v6 + 728);
      long long v31 = *(_OWORD *)((char *)v6 + 712);
      long long v32 = v21;
      long long v30 = v20;
      long long v22 = *(_OWORD *)((char *)v6 + 744);
      long long v23 = *(_OWORD *)((char *)v6 + 760);
      long long v24 = *(_OWORD *)((char *)v6 + 776);
      *(void *)&v35[13] = *(void *)((char *)v6 + 789);
      long long v34 = v23;
      *(_OWORD *)int v35 = v24;
      long long v33 = v22;
    }
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 48))(v4, v25);
    if (v29) {
      sub_1000DB0A0(v29);
    }
  }
}

void sub_1018DD1CC(_Unwind_Exception *a1)
{
  if (STACK[0x2B0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2B0]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1018DD1E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1018DD224()
{
}

__n128 sub_1018DD230@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 172);
  long long v3 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

void sub_1018DD264()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1018DD2E4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1018DD374(_Unwind_Exception *a1)
{
}

void sub_1018DD38C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1018DD444(_Unwind_Exception *a1)
{
}

void sub_1018DD45C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1018DD504(_Unwind_Exception *a1)
{
}

void sub_1018DD51C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E46164;
      v0[3] = unk_101E46174;
      v0[4] = xmmword_101E46184;
      v0[0] = xmmword_101E46144;
      v0[1] = unk_101E46154;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1018DD5FC(_Unwind_Exception *a1)
{
}

void sub_1018DD614(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1018DDF2C(_Unwind_Exception *a1)
{
  sub_10068280C(v4);
  sub_100E93890(v3);
  sub_10043C994(v2);
  uint64_t v7 = v1[7];
  v1[7] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = v1[6];
  v1[6] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = v1[5];
  v1[5] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v1[4];
  v1[4] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = v1[3];
  v1[3] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *v5;
  uint64_t *v5 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v1[1];
  v1[1] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _Unwind_Resume(a1);
}

void sub_1018DE118(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345310);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    unsigned int v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onGpsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345310);
    }
    long long v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = "activity";
      __int16 v15 = 2050;
      long long v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onGpsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_1018E1FC8((uint64_t)a4);
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1018DE2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018DE2F4(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345310);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    uint64_t v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345310);
    }
    char v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      __int16 v15 = 2082;
      long long v16 = "activity";
      __int16 v17 = 2050;
      long long v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_1018E60DC((uint64_t)a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1018DE4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018DE4C8(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345310);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345310);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      long long v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1018E2FF0((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1018DE684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018DE6A4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345310);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    unsigned int v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345310);
    }
    uint64_t v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = "activity";
      __int16 v15 = 2050;
      __int16 v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_1018E2CE0();
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1018DE844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018DE864(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345310);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    unsigned int v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onCellNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345310);
    }
    uint64_t v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = "activity";
      __int16 v15 = 2050;
      __int16 v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onCellNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_1018E2E68();
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1018DEA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018DEA24(uint64_t a1, _DWORD *a2, CLMotionActivity *a3, id *a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*a4, "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345310);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssEngine::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345310);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      __int16 v17 = "activity";
      __int16 v18 = 2050;
      long long v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssEngine::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1018E3498((uint64_t)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1018DEBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018DEC00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,fRhythmicGnss1HzHeartbeatTimer timer set", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    long long v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRhythmicGnssEngine::CLRhythmicGnssEngine(id<CLIntersiloUniverse>, RhythmicGnssUsageCallback, GnssStateUpdateCallback, RhythmicGnssHeartBeatTimerCallback)_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_1018DED9C(v1);
}

void sub_1018DED9C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  long long v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,onRhythmicGnss1HzHeartbeatTimeout", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  uint64_t v3 = *(void *)(a1 + 264);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    long long v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,onRhythmicGnss1HzHeartbeatTimeout,no client HB callback", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
  }
  if (*(unsigned char *)(a1 + 160))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    unsigned int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = *(double *)(a1 + 272);
      double v7 = *(double *)(a1 + 280);
      double v8 = sub_10016C458();
      *(_DWORD *)uint64_t buf = 134349568;
      double v24 = v6;
      __int16 v25 = 2050;
      double v26 = v7;
      __int16 v27 = 2050;
      double v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGE,HbTimeout,fLastGpsOnTime_s,%{public}.3lf,fLastGpsOffTime_s,%{public}.3lf,CLCommonGetMachContinuousTime,%{public}.3lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      sub_10016C458();
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    if (*(double *)(a1 + 272) > *(double *)(a1 + 280)
      && sub_10016C458() - *(double *)(a1 + 272) >= *(double *)(a1 + 80))
    {
      sub_1018E003C(a1);
    }
    sub_1018DFB7C(a1);
    double v9 = sub_10016C458();
    double v10 = *(double *)(a1 + 272);
    double v11 = *(double *)(a1 + 280);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v12 = v9 - v10;
    double v13 = v11 - v10;
    __int16 v14 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134349568;
      double v24 = v9;
      __int16 v25 = 2050;
      double v26 = v12;
      __int16 v27 = 2050;
      double v28 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLRGE,HbTimeout,curTime,%{public}.3lf,timeSinceLastStart,%{public}.3lf,lastSessionDuration,%{public}.3lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    double v15 = *(double *)(a1 + 272);
    double v16 = *(double *)(a1 + 280);
    if (v15 == v16 || v15 < v16 && v12 >= *(double *)(a1 + 96) + -3.0) {
      sub_1018E06E8(a1, v9);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    __int16 v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CLRGE,HbTimeout,no clients present", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onRhythmicGnss1HzHeartbeatTimeout()", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
    sub_1018DFB7C(a1);
  }
}

uint64_t sub_1018DF534()
{
  uint64_t v0 = sub_1000A6958();
  sub_1004CF870(v0);
  uint64_t v1 = sub_1000A6958();
  sub_1004CF870(v1);
  uint64_t v2 = sub_1000A6958();
  sub_1004CF870(v2);
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)sub_1000A6958() + 944);

  return v3();
}

void sub_1018DF5CC(double *a1)
{
  uint64_t v2 = sub_1000A6958();
  double v3 = a1[52];
  *(void *)uint64_t buf = 0;
  int v4 = sub_1000A6A10(v2, @"TotalActiveGnssSecondsUsedPerDayKeyString", buf);
  double v5 = *(double *)buf;
  if (!v4) {
    double v5 = v3;
  }
  a1[52] = v5;
  uint64_t v6 = sub_1000A6958();
  double v7 = a1[54];
  *(void *)uint64_t buf = 0;
  int v8 = sub_1000A6A10(v6, @"TotalSecondsIntoDayAtLastPowerBudgetStoredKeyString", buf);
  double v9 = *(double *)buf;
  if (!v8) {
    double v9 = v7;
  }
  a1[54] = v9;
  uint64_t v10 = sub_1000A6958();
  double v11 = a1[53];
  *(void *)uint64_t buf = 0;
  int v12 = sub_1000A6A10(v10, @"TotalActiveGnssSecondsUsedByAllRhythmicGnssClientsKeyString", buf);
  double v13 = *(double *)buf;
  if (!v12) {
    double v13 = v11;
  }
  a1[53] = v13;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  __int16 v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *((void *)a1 + 53);
    uint64_t v15 = *((void *)a1 + 54);
    uint64_t v17 = *((void *)a1 + 52);
    *(_DWORD *)uint64_t buf = 134284033;
    *(void *)&uint8_t buf[4] = v17;
    __int16 v20 = 2049;
    uint64_t v21 = v15;
    __int16 v22 = 2050;
    uint64_t v23 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLRGE,readDailyPowerBudgetUsageDataOnDisk,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{private}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{private}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::readDailyPowerBudgetUsageDataOnDisk()", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
}

uint64_t sub_1018DF854(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,deconstructor", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    int v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLRhythmicGnssEngine::~CLRhythmicGnssEngine()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  double v3 = *(void **)(a1 + 168);
  if (v3)
  {
    [v3 invalidate];

    *(void *)(a1 + 168) = 0;
  }
  sub_10068280C((void *)(a1 + 240));
  sub_100E93890((void *)(a1 + 208));
  sub_10043C994((void *)(a1 + 176));
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return a1;
}

void sub_1018DFB6C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_1018DFB7C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160)) {
    double v2 = *(double *)(a1 + 144);
  }
  else {
    double v2 = 3.0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3
    && *(int *)(v3 + 8) >= 1
    && *(double *)(a1 + 272) < *(double *)(a1 + 280)
    && sub_10016C458() - *(double *)(a1 + 280) >= v2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#pah,off,CLRhythmicGnss", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      double v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::releasePowerAssertionAndStopTimer()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    sub_100EBC6AC(*(void *)(a1 + 8));
    int v4 = 1;
  }
  else
  {
    int v4 = 0;
  }
  if (*(int *)(*(void *)(a1 + 8) + 8) > 0 || *(unsigned char *)(a1 + 160) && *(unsigned char *)(a1 + 306))
  {
    int v5 = 0;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CRLGE,stopTimer", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::releasePowerAssertionAndStopTimer()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    [*(id *)(a1 + 168) setNextFireDelay:1.79769313e308 interval:1.79769313e308];
    int v5 = 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    int v13 = v4;
    __int16 v14 = 1024;
    int v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGE,releasePowerAssertionAndStopTimer,releasePowerAssertion,%d,stopTimer,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::releasePowerAssertionAndStopTimer()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_1018E003C(uint64_t a1)
{
  *(double *)(a1 + 376) = vabdd_f64(sub_10016C458(), *(double *)(a1 + 272));
  if (*(unsigned char *)(a1 + 304))
  {
    *(_WORD *)(a1 + 307) = 0;
    if (*(unsigned char *)(a1 + 160))
    {
      *(double *)(a1 + 280) = sub_10016C458();
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      double v2 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = *(void *)(a1 + 120);
        *(_DWORD *)uint64_t buf = 134217984;
        uint64_t v18 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLRGE,scheduling AP wake after,%.3lf,sec", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      sub_1018E49F0(a1);
    }
    if (+[CLGnssProviderAdapter isSupported]
      && *(void *)(a1 + 16))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,CLRhythmicGnss", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
      BOOL v5 = 1;
      sub_1018E4154(a1, 1, 0, *(_DWORD *)(a1 + 88));
      [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:0];
      if (!*(unsigned char *)(a1 + 305))
      {
        double v6 = *(double *)(a1 + 288);
        if (v6 != 0.0) {
          BOOL v5 = v6 > *(double *)(a1 + 296);
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 288);
        uint64_t v9 = *(void *)(a1 + 296);
        *(_DWORD *)uint64_t buf = 134218496;
        uint64_t v18 = v8;
        __int16 v19 = 2048;
        uint64_t v20 = v9;
        __int16 v21 = 1024;
        BOOL v22 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fLastWifiCellOnTime_s,%f,fLastWifiCellOffTime_s,%f,isTimeToStopWifiCellPosition,%d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      if (v5)
      {
        sub_1018E500C(a1);
        sub_1018E54E8(a1);
        *(unsigned char *)(a1 + 305) = 0;
        *(double *)(a1 + 288) = sub_10016C458();
      }
      *(unsigned char *)(a1 + 304) = 0;
      sub_1018E59C4(a1);
      double v10 = *(double *)(a1 + 272);
      double v11 = 0.0;
      if (v10 > 0.0) {
        double v11 = *(double *)(a1 + 280) - v10;
      }
      sub_1018E5BA4(a1, v11, *(double *)(a1 + 432));
      *(double *)(a1 + 432) = sub_101894B38();
      sub_1018E5EB0(a1, v11);
      if (*(void *)(a1 + 200)) {
        sub_10015E508(a1 + 176, v11);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "CLRGE,stopGps,already stopped gps session", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      __int16 v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopGps()", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

BOOL sub_1018E06E8(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 304))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,startGps,already started", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_95;
    }
LABEL_121:
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
LABEL_95:
    LOWORD(v46) = 0;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v18);
LABEL_96:
    if (v18 != buf) {
      free(v18);
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 160))
  {
    if (*(unsigned char *)(a1 + 306))
    {
      if (*(unsigned char *)(a1 + 152)) {
        int isTypeStatic = CLMotionActivity::isTypeStatic();
      }
      else {
        int isTypeStatic = 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(_DWORD *)(a1 + 320);
        if (*(unsigned char *)(a1 + 160)) {
          int v11 = *(unsigned __int8 *)(a1 + 152);
        }
        else {
          int v11 = 0;
        }
        *(_DWORD *)uint64_t buf = 67175425;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)&uint8_t buf[8] = 1025;
        *(_DWORD *)&buf[10] = v11;
        *(_WORD *)&unsigned char buf[14] = 1025;
        *(_DWORD *)&uint8_t buf[16] = CLMotionActivity::isTypeStatic();
        *(_WORD *)&buf[20] = 1025;
        *(_DWORD *)&buf[22] = isTypeStatic;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGE,block RhythmicGnss based on motion state,%{private}d,isStaticDeviceOptimizationEnabled,%{private}d,isStatic,%{private}d,blockRGBasedOnMotionState,%{private}d", buf, 0x1Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v35 = *(_DWORD *)(a1 + 320);
        if (*(unsigned char *)(a1 + 160)) {
          int v36 = *(unsigned __int8 *)(a1 + 152);
        }
        else {
          int v36 = 0;
        }
        int v46 = 67175425;
        *(_DWORD *)uint64_t v47 = v35;
        *(_WORD *)&v47[4] = 1025;
        *(_DWORD *)&v47[6] = v36;
        LOWORD(v48) = 1025;
        *(_DWORD *)((char *)&v48 + 2) = CLMotionActivity::isTypeStatic();
        HIWORD(v48) = 1025;
        *(_DWORD *)int v49 = isTypeStatic;
        int v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v37);
        if (v37 != buf) {
          free(v37);
        }
      }
      if (isTypeStatic) {
        return 0;
      }
      if (sub_1018E3800(a1))
      {
        double v12 = *(double *)(a1 + 272);
        double v13 = a2 - v12;
        double v14 = *(double *)(a1 + 280) - v12;
        if (a2 - v12 >= *(double *)(a1 + 96) - v14)
        {
          if (+[CLGnssProviderAdapter isSupported]
            && *(void *)(a1 + 16))
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023452F0);
            }
            uint64_t v20 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#wigo,on,CLRhythmicGnss", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023452F0);
              }
              LOWORD(v46) = 0;
              __int16 v38 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v38);
              if (v38 != buf) {
                free(v38);
              }
            }
            if (*(unsigned char *)(a1 + 105))
            {
              uint64_t v21 = *(void *)(a1 + 8);
              if (*(int *)(v21 + 8) <= 0)
              {
                sub_100134750(__p, "none");
                sub_100EBBFD8(v21, (uint64_t *)__p);
                if (v45 < 0) {
                  operator delete(__p[0]);
                }
                if (qword_1024193D0 != -1) {
                  dispatch_once(&qword_1024193D0, &stru_1023452F0);
                }
                BOOL v22 = qword_1024193D8;
                if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uint64_t buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#pah,on,CLRhythmicGnss", buf, 2u);
                }
                if (sub_10013D1A0(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1024193D0 != -1) {
                    dispatch_once(&qword_1024193D0, &stru_1023452F0);
                  }
                  LOWORD(v46) = 0;
                  uint64_t v43 = (char *)_os_log_send_and_compose_impl();
                  sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v43);
                  if (v43 != buf) {
                    free(v43);
                  }
                }
              }
            }
            *(void *)(a1 + 328) = -1;
            *(unsigned char *)(a1 + 336) = 0;
            *(void *)(a1 + 344) = 0;
            *(void *)(a1 + 352) = 0xBFF0000000000000;
            *(void *)(a1 + 392) = 0;
            *(_OWORD *)(a1 + 360) = 0u;
            *(_OWORD *)(a1 + 376) = 0u;
            double v23 = *(double *)(a1 + 96);
            *(double *)(a1 + 384) = v23;
            if (*(double *)(a1 + 280) != 0.0) {
              double v23 = sub_10016C458() - *(double *)(a1 + 280);
            }
            *(double *)(a1 + 392) = v23;
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023452F0);
            }
            double v24 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v25 = *(void *)(a1 + 392);
              uint64_t v26 = *(void *)(a1 + 96);
              *(_DWORD *)uint64_t buf = 134349312;
              *(void *)&uint8_t buf[4] = v25;
              *(_WORD *)&unsigned char buf[12] = 2050;
              *(void *)&unsigned char buf[14] = v26;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLRGE,first fix received,realInterSessionDuration_s,%{public}.3lf,intendedInterSessionDuration_s,%{public}.3lf", buf, 0x16u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023452F0);
              }
              uint64_t v39 = *(void *)(a1 + 392);
              double v40 = *(double *)(a1 + 96);
              int v46 = 134349312;
              *(void *)uint64_t v47 = v39;
              *(_WORD *)&v47[8] = 2050;
              double v48 = v40;
              int v41 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v41);
              if (v41 != buf) {
                free(v41);
              }
            }
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023452F0);
            }
            __int16 v27 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "CLRGE,cancelling sleep at start", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_1023452F0);
              }
              LOWORD(v46) = 0;
              __int16 v42 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v42);
              if (v42 != buf) {
                free(v42);
              }
            }
            sub_1018E3D48(a1);
            __asm { FMOV            V0.2D, #-1.0 }
            *(_OWORD *)uint64_t buf = _Q0;
            *(_WORD *)&uint8_t buf[16] = 0;
            if (*(unsigned char *)(a1 + 128)) {
              int v33 = 11;
            }
            else {
              int v33 = 0;
            }
            *(_DWORD *)&buf[20] = v33;
            *(_DWORD *)&unsigned char buf[24] = 0;
            sub_1018E4154(a1, 1, 1, *(_DWORD *)(a1 + 88));
            sub_10012F770();
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023452F0);
          }
          long long v34 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "CLRGE,failed to start GPS", buf, 2u);
          }
          BOOL result = sub_10013D1A0(115, 0);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023452F0);
            }
            LOWORD(v46) = 0;
            uint64_t v18 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v18);
            goto LABEL_96;
          }
        }
        else
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023452F0);
          }
          int v15 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v16 = *(void *)(a1 + 96);
            *(_DWORD *)uint64_t buf = 134349568;
            *(void *)&uint8_t buf[4] = v16;
            *(_WORD *)&unsigned char buf[12] = 2050;
            *(double *)&unsigned char buf[14] = v13;
            *(_WORD *)&buf[22] = 2050;
            *(double *)&unsigned char buf[24] = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "CLRGE,startGps,gps was on within last %{public}.3lf seconds so not turning on again, timeSinceLastStart,%{public}.3lf,lastSessionDuration,%{public}.3lf", buf, 0x20u);
          }
          BOOL result = sub_10013D1A0(115, 2);
          if (result)
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023452F0);
            }
            uint64_t v17 = *(void *)(a1 + 96);
            int v46 = 134349568;
            *(void *)uint64_t v47 = v17;
            *(_WORD *)&v47[8] = 2050;
            double v48 = v13;
            *(_WORD *)int v49 = 2050;
            *(double *)&void v49[2] = v14;
            uint64_t v18 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::startGps(const CFTimeInterval)", "%s\n", v18);
            goto LABEL_96;
          }
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        __int16 v19 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "CLRGE,power budget exceeded in proactive mode", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_95;
          }
          goto LABEL_121;
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGE,startGps,LS toggle off,not starting GPS", buf, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_95;
        }
        goto LABEL_121;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGE,can not startGps as no config", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_95;
      }
      goto LABEL_121;
    }
  }
  return result;
}

void sub_1018E16B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1018E16D8(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "enableRhythmicGnssEngine", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    int v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::enableRhythmicGnssEngine(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  int v5 = *(unsigned __int8 *)(a1 + 160);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    int v9 = *((_DWORD *)a2 + 4);
    uint64_t v10 = a2[3];
    int v11 = *((unsigned __int8 *)a2 + 32);
    int v12 = *((unsigned __int8 *)a2 + 33);
    double v13 = *((double *)a2 + 6);
    if (v13 == 1.79769313e308) {
      double v13 = -1.0;
    }
    int v14 = *((unsigned __int8 *)a2 + 34);
    if (*((double *)a2 + 5) == 1.79769313e308) {
      double v15 = -1.0;
    }
    else {
      double v15 = *((double *)a2 + 5);
    }
    int v16 = *((unsigned __int8 *)a2 + 56);
    int v17 = *((unsigned __int8 *)a2 + 57);
    uint64_t v18 = a2[8];
    uint64_t v19 = a2[9];
    int v20 = *((unsigned __int8 *)a2 + 80);
    *(_DWORD *)uint64_t buf = 134352384;
    uint64_t v40 = v7;
    __int16 v41 = 2050;
    uint64_t v42 = v8;
    __int16 v43 = 1026;
    int v44 = v9;
    __int16 v45 = 2050;
    uint64_t v46 = v10;
    __int16 v47 = 1026;
    int v48 = v11;
    __int16 v49 = 1026;
    int v50 = v12;
    __int16 v51 = 2050;
    double v52 = v13;
    __int16 v53 = 1026;
    int v54 = v14;
    __int16 v55 = 2050;
    double v56 = v15;
    __int16 v57 = 1026;
    int v58 = v16;
    __int16 v59 = 1026;
    int v60 = v17;
    __int16 v61 = 2050;
    uint64_t v62 = v18;
    __int16 v63 = 2050;
    uint64_t v64 = v19;
    __int16 v65 = 1026;
    int v66 = v20;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,enableRhythmicGnssEngine,fRhythmicGnssActiveConfiguration,hAccuracy_m,%{public}.3lff,gpsActiveTimeout_s,%{public}.3lf,powerMode,%{public}d,rhythmicGnssInterSessionInterval_s,%{public}.3lf,wakeAPUp,%{public}d,takePowerAssertion,%{public}d,apWakeBackStopTimeForNextSession_s,%{public}.3lf,isPowerBudgetApplicable,%{public}d,totalPowerBudgetPerDay_s,%{public}.3lf,skipDebounce,%{public}d,useLeechGPSFixesToOffsetRhythmicGnssDutyCycle,%{public}d,wifiCellInterSessionInterval_s,%{public}.3lf,additionalPowerAssertionTime_s,%{public}.3lf,isStaticDeviceOptimizationEnabled,%{public}d", buf, 0x72u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    __int16 v38 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::enableRhythmicGnssEngine(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v38);
    if (v38 != (char *)buf) {
      free(v38);
    }
  }
  if (!v5
    || *(_DWORD *)(a1 + 88) != *((_DWORD *)a2 + 4)
    || *(unsigned __int8 *)(a1 + 104) != *((unsigned __int8 *)a2 + 32)
    || *(double *)(a1 + 80) != *((double *)a2 + 1)
    || *(double *)(a1 + 112) != *((double *)a2 + 5)
    || *(double *)(a1 + 120) != *((double *)a2 + 6)
    || *(double *)(a1 + 96) != *((double *)a2 + 3)
    || *(unsigned __int8 *)(a1 + 152) != *((unsigned __int8 *)a2 + 80))
  {
    double v24 = (_OWORD *)(a1 + 72);
    if (*(unsigned char *)(a1 + 160))
    {
      long long v25 = *((_OWORD *)a2 + 1);
      *double v24 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 88) = v25;
      long long v26 = *((_OWORD *)a2 + 2);
      long long v27 = *((_OWORD *)a2 + 3);
      long long v28 = *((_OWORD *)a2 + 4);
      *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 80);
      *(_OWORD *)(a1 + 120) = v27;
      *(_OWORD *)(a1 + 136) = v28;
      *(_OWORD *)(a1 + 104) = v26;
      if (!v5) {
        goto LABEL_38;
      }
    }
    else
    {
      long long v29 = *((_OWORD *)a2 + 1);
      *double v24 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 88) = v29;
      long long v30 = *((_OWORD *)a2 + 2);
      long long v31 = *((_OWORD *)a2 + 3);
      long long v32 = *((_OWORD *)a2 + 4);
      *(void *)(a1 + 152) = a2[10];
      *(_OWORD *)(a1 + 120) = v31;
      *(_OWORD *)(a1 + 136) = v32;
      *(_OWORD *)(a1 + 104) = v30;
      *(unsigned char *)(a1 + 160) = 1;
      if (!v5)
      {
LABEL_38:
        uint64_t v33 = *(void *)(a1 + 40);
        if (v33)
        {
          [*(id *)(v33 + 16) register:*(void *)(v33 + 8) forNotification:2 registrationInfo:0];
          [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:3 registrationInfo:0];
        }
        uint64_t v34 = *(void *)(a1 + 56);
        if (v34) {
          [*(id *)(v34 + 16) register:*(void *)(v34 + 8) forNotification:1 registrationInfo:0];
        }
        uint64_t v35 = *(void *)(a1 + 48);
        if (v35) {
          [*(id *)(v35 + 16) register:*(void *)(v35 + 8) forNotification:4 registrationInfo:0];
        }
        [*(id *)(a1 + 168) setNextFireDelay:1.0 interval:1.0];
        double v36 = sub_10016C458();
        sub_1018E06E8(a1, v36);
      }
    }
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  uint64_t v21 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "enableRhythmicGnssEngine,no config change", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::enableRhythmicGnssEngine(const CLRhythmicGnssConfiguration::RhythmicGnssConfiguration)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
    return 0;
  }
  return result;
}

void sub_1018E1DAC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "disableRhythmicGnssEngine", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::disableRhythmicGnssEngine()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:2];
    [*(id *)(*(void *)(a1 + 40) + 16) unregister:*(void *)(*(void *)(a1 + 40) + 8) forNotification:3];
  }
  uint64_t v4 = *(void *)(a1 + 56);
  if (v4) {
    [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:1];
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    [*(id *)(v5 + 16) unregister:*(void *)(v5 + 8) forNotification:4];
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 && *(int *)(v6 + 8) <= 0) {
    [*(id *)(a1 + 168) setNextFireDelay:1.79769313e308 interval:1.79769313e308];
  }
  sub_1018E003C(a1);
  if (*(unsigned char *)(a1 + 160)) {
    *(unsigned char *)(a1 + 160) = 0;
  }
}

void sub_1018E1FC8(uint64_t a1)
{
  __chkstk_darwin(a1);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLRGE,received gps update", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    v34[0] = 0;
    int v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  sub_1000EF97C((uint64_t)v34, v2);
  if (*v4 <= 4u && ((1 << *v4) & 0x19) != 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134286849;
      double v83 = v35;
      __int16 v84 = 2049;
      double v85 = v36;
      __int16 v86 = 2050;
      double v87 = v37;
      __int16 v88 = 2050;
      uint64_t v89 = v38;
      __int16 v90 = 2049;
      uint64_t v91 = v39;
      __int16 v92 = 2049;
      uint64_t v93 = v40;
      __int16 v94 = 2049;
      uint64_t v95 = v41;
      __int16 v96 = 2049;
      uint64_t v97 = v42;
      __int16 v98 = 2050;
      uint64_t v99 = v43;
      __int16 v100 = 1025;
      int v101 = v44;
      __int16 v102 = 2050;
      uint64_t v103 = v45;
      __int16 v104 = 2050;
      uint64_t v105 = v45;
      __int16 v106 = 2050;
      uint64_t v107 = v46;
      __int16 v108 = 2049;
      uint64_t v109 = v47;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLRGE,updateLocation,latitude,%{private}.3lf,longitude,%{private}.3lf,horAccuracy,%{public}.3lf,verAccuracy,%{public}.3lf,speed,%{private}.3lf,speedAccuracy,%{private}.3lf,course,%{private}.3lf,courseAccuracy,%{private}.3lf,timestamp,%{public}.3lf,type,%{private}d,timestampGps,%{public}.3lf,timestampGps,%{public}.3lf,machtime,%{public}.3lf,groundAltitude,%{private}.3lf", buf, 0x8Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v54 = 134286849;
      double v55 = v35;
      __int16 v56 = 2049;
      double v57 = v36;
      __int16 v58 = 2050;
      double v59 = v37;
      __int16 v60 = 2050;
      uint64_t v61 = v38;
      __int16 v62 = 2049;
      uint64_t v63 = v39;
      __int16 v64 = 2049;
      uint64_t v65 = v40;
      __int16 v66 = 2049;
      uint64_t v67 = v41;
      __int16 v68 = 2049;
      uint64_t v69 = v42;
      __int16 v70 = 2050;
      uint64_t v71 = v43;
      __int16 v72 = 1025;
      int v73 = v44;
      __int16 v74 = 2050;
      uint64_t v75 = v45;
      __int16 v76 = 2050;
      uint64_t v77 = v45;
      __int16 v78 = 2050;
      uint64_t v79 = v46;
      __int16 v80 = 2049;
      uint64_t v81 = v47;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    if (*(unsigned char *)(v6 + 160))
    {
      if (!*(unsigned char *)(v6 + 307) && v44 == 1)
      {
        *(unsigned char *)(v6 + 307) = 1;
        double v9 = vabdd_f64(sub_10016C458(), *(double *)(v6 + 272));
        if (v9 < 2.0) {
          *(unsigned char *)(v6 + 336) = 1;
        }
        double v10 = v37;
        *(double *)(v6 + 344) = v9;
        *(double *)(v6 + 352) = v10;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          double v83 = v9;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLRGE,first fix received,ttff,%{public}.3lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023452F0);
          }
          int v54 = 134349056;
          double v55 = v9;
          BOOL v22 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v22);
          if (v22 != (char *)buf) {
            free(v22);
          }
        }
      }
      double v12 = sub_10016C458();
      if (*(unsigned char *)(v6 + 160)) {
        double v13 = *(double *)(v6 + 72);
      }
      else {
        double v13 = 30.0;
      }
      if (!*(unsigned char *)(v6 + 308) && sub_1018116FC((uint64_t)v34, vabdd_f64(v12, *(double *)(v6 + 272)), v13))
      {
        *(unsigned char *)(v6 + 308) = 1;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v16 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          double v17 = v37;
          double v18 = vabdd_f64(sub_10016C458(), *(double *)(v6 + 272));
          int v19 = *(unsigned __int8 *)(v6 + 160);
          *(_DWORD *)uint64_t buf = 134349824;
          double v83 = v13;
          __int16 v84 = 2050;
          double v85 = v17;
          __int16 v86 = 2050;
          double v87 = v18;
          __int16 v88 = 1024;
          LODWORD(v89) = v19;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "CLRGE,desiredAccuracy met,default,%{public}.3lf,horAcc,%{public}.3lf,timeToConverge,%{public}.3lf,hasClient,{public}%d", buf, 0x26u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023452F0);
          }
          double v23 = v37;
          double v24 = vabdd_f64(sub_10016C458(), *(double *)(v6 + 272));
          int v25 = *(unsigned __int8 *)(v6 + 160);
          int v54 = 134349824;
          double v55 = v13;
          __int16 v56 = 2050;
          double v57 = v23;
          __int16 v58 = 2050;
          double v59 = v24;
          __int16 v60 = 1024;
          LODWORD(v61) = v25;
          long long v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
      }
      sub_1000EF97C((uint64_t)v27, (uint64_t)v34);
      sub_1018E2A14(v6, (uint64_t)v27);

      if (v32) {
        sub_1000DB0A0(v32);
      }
      if (v31 < 0) {
        operator delete(__p);
      }
      if (v29) {
        sub_1000DB0A0(v29);
      }
      if (v28) {
        sub_1000DB0A0(v28);
      }
      if (*(unsigned char *)(v6 + 307) && *(unsigned char *)(v6 + 308)) {
        sub_1018E003C(v6);
      }
    }
    else
    {
      sub_1018E003C(v6);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLRGE,location update received when no clients", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        LOWORD(v54) = 0;
        double v15 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLRhythmicGnssEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v15);
        if (v15 != (char *)buf) {
          free(v15);
        }
      }
    }
  }

  if (v52) {
    sub_1000DB0A0(v52);
  }
  if (v51 < 0) {
    operator delete(v50);
  }
  if (v49) {
    sub_1000DB0A0(v49);
  }
  if (v48) {
    sub_1000DB0A0(v48);
  }
}

void sub_1018E29AC(_Unwind_Exception *a1)
{
}

void sub_1018E2A14(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 307))
  {
    double v4 = vabdd_f64(sub_10016C458(), *(double *)(a1 + 272)) - *(double *)(a1 + 344);
    double v5 = *(double *)(a2 + 20);
    if (v5 >= 20.0)
    {
      if (v5 >= 40.0)
      {
        if (v5 >= 65.0)
        {
          if (v5 >= 80.0)
          {
            if (v5 >= 100.0)
            {
              if (v5 >= 200.0)
              {
                if (v5 >= 400.0)
                {
                  if (v5 >= 1000.0) {
                    int v6 = 0;
                  }
                  else {
                    int v6 = 8;
                  }
                }
                else
                {
                  int v6 = 7;
                }
              }
              else
              {
                int v6 = 6;
              }
            }
            else
            {
              int v6 = 5;
            }
          }
          else
          {
            int v6 = 4;
          }
        }
        else
        {
          int v6 = 3;
        }
      }
      else
      {
        int v6 = 2;
      }
    }
    else
    {
      int v6 = 1;
    }
    if (v4 >= 5.0)
    {
      if (v4 > 5.0 && v4 < 11.0)
      {
        *(_DWORD *)(a1 + 364) = v6;
      }
      else if (v4 > 10.0 && v4 < 16.0)
      {
        *(_DWORD *)(a1 + 368) = v6;
      }
      else if (v4 > 15.0 && v4 < 21.0)
      {
        *(_DWORD *)(a1 + 372) = v6;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 360) = v6;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLRGE,no CA data as FF not received", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::updateCoreAnalyticsDataAtEachEpoch(const CLLocationProvider_Type::NotificationData)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1018E2CE0()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CLRGE,received Wifi update", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onWifiNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1018E2E68()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "CLRGE,received Cell update", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onCellNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1018E2FF0(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  uint64_t v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)uint64_t buf = 67240192;
    int v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLRGE,LS Notification,type,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (*a3 == 4)
  {
    *(unsigned char *)(a1 + 306) = *(_DWORD *)(a4 + 188) != 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v10 = *(unsigned __int8 *)(a1 + 306);
      *(_DWORD *)uint64_t buf = 67240192;
      int v18 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLRGE,LS,location service enabled,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (*(unsigned char *)(a1 + 306) && *(unsigned char *)(a1 + 160))
    {
      int v11 = *(void **)(a1 + 168);
      if (v11) {
        [v11 setNextFireDelay:1.0 interval:1.0];
      }
    }
    else
    {
      sub_1018E003C(a1);
      sub_1018DFB7C(a1);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v13 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      int v18 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLRGE,#Warning,unhandled LS notification,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
}

void sub_1018E3498(uint64_t a1, uint64_t a2, _DWORD *a3, CLMotionActivity *a4)
{
  if (*a3 == 1)
  {
    if (*(_DWORD *)(a1 + 320) == a4->type)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int type = a4->type;
        *(_DWORD *)uint64_t buf = 67240192;
        int v14 = type;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,motionActivity,not Changed,Type,%{public}u", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
LABEL_19:
        double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 328) = a4->type;
      *(_DWORD *)(a1 + 320) = a4->type;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int v9 = a4->type;
        int v10 = CLMotionActivity::isInVehicle(a4);
        int v11 = *(_DWORD *)(a1 + 320);
        *(_DWORD *)uint64_t buf = 67240960;
        int v14 = v9;
        __int16 v15 = 1026;
        int v16 = v10;
        __int16 v17 = 1026;
        int v18 = v11;
        __int16 v19 = 1026;
        int isTypeStatic = CLMotionActivity::isTypeStatic();
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLRGE,motionActivity,Type,%{public}u,isInVehicle,%{public}d,motionState,%{public}d,isStatic,%{public}d", buf, 0x1Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        CLMotionActivity::isInVehicle(a4);
        CLMotionActivity::isTypeStatic();
        goto LABEL_19;
      }
    }
  }
}

BOOL sub_1018E3800(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    if (*(unsigned char *)(a1 + 106))
    {
      sub_1018E6818((double *)a1);
      double v2 = *(double *)(a1 + 112);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v3 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *(void *)(a1 + 416);
        uint64_t v5 = *(void *)(a1 + 432);
        *(_DWORD *)uint64_t buf = 134349568;
        uint64_t v14 = v4;
        __int16 v15 = 2050;
        uint64_t v16 = v5;
        __int16 v17 = 2050;
        double v18 = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLRGE,power budget,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{public}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{public}.3lf,allowedDurationInSec,%{public}.3lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::hasPowerBudget()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      if (*(double *)(a1 + 416) >= v2)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v6 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,power budget exceeds permitted level or invalid", buf, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (result)
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_22;
          }
          goto LABEL_40;
        }
        return result;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRGE,power budget not applicable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        double v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::hasPowerBudget()", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
    }
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  int v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGE,#warning,hasPowerBudget,no clients", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_22:
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLRhythmicGnssEngine::hasPowerBudget()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return 0;
    }
LABEL_40:
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
    goto LABEL_22;
  }
  return result;
}

void sub_1018E3D48(uint64_t a1)
{
  double v1 = *(double *)(a1 + 312);
  if (v1 != 0.0)
  {
    CFDateRef v5 = CFDateCreate(kCFAllocatorDefault, v1);
    if (IOPMCancelScheduledPowerEvent(v5, @"CLRhythmicGnss", @"wake"))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 312);
        *(_DWORD *)uint64_t buf = 134283521;
        uint64_t v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,System wake couldn't cancel for,%{private}.3lf", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_27:
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::cancelAPWakeRequest()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
LABEL_24:
        CFRelease(v5);
        return;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      int v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 312);
        *(_DWORD *)uint64_t buf = 134283521;
        uint64_t v12 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGE,System wake cancelled for,%{private}.3lf", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_24;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_27;
      }
    }
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
    goto LABEL_27;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLRGE,there is no schedule to wake AP up,so not cancelling", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::cancelAPWakeRequest()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

void sub_1018E4154(uint64_t a1, int a2, char a3, int a4)
{
  uint64_t v8 = *(void *)(a1 + 64);
  if (v8) {
    sub_1019D68F0(v8, a2, a3, a4);
  }
  if (*(void *)(a1 + 232))
  {
    sub_1018E6C98(a1 + 208, a2, a3, a4);
  }
}

void sub_1018E41D8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,startWifiLocation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    CFDateRef v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startWifiLocation(const CFTimeInterval)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(unsigned char *)(a1 + 304))
  {
    if (*(void *)(a1 + 24))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v3 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,register wifi client", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startWifiLocation(const CFTimeInterval)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      [*(id *)(*(void *)(a1 + 24) + 16) register:*(void *)(*(void *)(a1 + 24) + 8) forNotification:0 registrationInfo:0];
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startWifiLocation(const CFTimeInterval)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_1018E45E4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,startCellLocation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    CFDateRef v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startCellLocation(const CFTimeInterval)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(unsigned char *)(a1 + 304))
  {
    if (*(void *)(a1 + 32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v3 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,register cell client", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startCellLocation(const CFTimeInterval)", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      [*(id *)(*(void *)(a1 + 32) + 16) register:*(void *)(*(void *)(a1 + 32) + 8) forNotification:0 registrationInfo:0];
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::startCellLocation(const CFTimeInterval)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_1018E49F0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLRGE,requestAPWake", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::requestAPWake()", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  if (*(unsigned char *)(a1 + 160))
  {
    if (*(double *)(a1 + 120) != 1.79769313e308 || *(unsigned char *)(a1 + 104))
    {
      double Current = CFAbsoluteTimeGetCurrent();
      sub_1018E3D48(a1);
      double v4 = Current + *(double *)(a1 + 120);
      double v5 = v4 - (sub_10016C458() - *(double *)(a1 + 272));
      CFDateRef v6 = CFDateCreate(kCFAllocatorDefault, v5);
      *(double *)(a1 + 312) = v5;
      if (IOPMSchedulePowerEvent(v6, @"CLRhythmicGnss", @"wake"))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        uint64_t v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGE,Couldn't schedule wake event!", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_30;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_44:
          int v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::requestAPWake()", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
LABEL_30:
          CFRelease(v6);
          return;
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v10 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 134283521;
          double v15 = v5;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "CLRGE,System wake now scheduled for,%{private}.3lf", buf, 0xCu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_30;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_44;
        }
      }
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
      goto LABEL_44;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    int v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRGE,requestAPWake,don't wake AP", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_23:
        uint64_t v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::requestAPWake()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
        return;
      }
LABEL_46:
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
      goto LABEL_23;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGE,#warning,requestAPWake,no clients", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_23;
      }
      goto LABEL_46;
    }
  }
}

void sub_1018E500C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,stopWifiLocation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    CFDateRef v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopWifiLocation()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (!*(unsigned char *)(a1 + 304))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_37:
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopWifiLocation()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return;
    }
LABEL_39:
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
    goto LABEL_37;
  }
  if (*(unsigned char *)(a1 + 305))
  {
    if (*(void *)(a1 + 24))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v3 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,unregister wifi client", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopWifiLocation()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      [*(id *)(*(void *)(a1 + 24) + 16) unregister:*(void *)(*(void *)(a1 + 24) + 8) forNotification:0];
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLRGE,Wifi and Cell are not running", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_37;
    }
    goto LABEL_39;
  }
}

void sub_1018E54E8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "CLRGE,stopCellLocation", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    CFDateRef v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopCellLocation()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (!*(unsigned char *)(a1 + 304))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLRGE,gnss is not running", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_37:
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopCellLocation()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return;
    }
LABEL_39:
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
    goto LABEL_37;
  }
  if (*(unsigned char *)(a1 + 305))
  {
    if (*(void *)(a1 + 32))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v3 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,unregister cell client", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::stopCellLocation()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      [*(id *)(*(void *)(a1 + 32) + 16) unregister:*(void *)(*(void *)(a1 + 32) + 8) forNotification:0];
    }
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLRGE,Wifi and Cell are not running", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_37;
    }
    goto LABEL_39;
  }
}

void sub_1018E59C4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    *(_DWORD *)(a1 + 332) = *(_DWORD *)(a1 + 88);
    uint64_t v2 = sub_10071B604();
    sub_1007266AC(v2, (int *)(a1 + 328));
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLRGE,#warning,sendDataToCA,no clients", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::sendRhythmicGnssDataToCoreAnalytics()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_1018E5BA4(uint64_t a1, double a2, double a3)
{
  unsigned int v6 = sub_101894B38();
  double v7 = (double)v6;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v8 = v7 - a2;
  uint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(_DWORD *)(a1 + 400);
    int v11 = *(_DWORD *)(a1 + 404);
    int v12 = *(_DWORD *)(a1 + 408);
    *(_DWORD *)uint64_t buf = 67241984;
    int v18 = v10;
    __int16 v19 = 1026;
    int v20 = v11;
    __int16 v21 = 1026;
    int v22 = v12;
    __int16 v23 = 1026;
    BOOL v24 = v8 <= a3;
    __int16 v25 = 1026;
    BOOL v26 = v7 <= a3;
    __int16 v27 = 2050;
    double v28 = a2;
    __int16 v29 = 1026;
    unsigned int v30 = v6;
    __int16 v31 = 2050;
    double v32 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGE,updateRhythmicGnssPerDayUsage,totalGnssInADay_s,%{public}d, totalLeechedGnssInADay_s,%{public}d,totalProactiveGnssInADay_s,%{public}d,hasDayChangedBeforeThisSession,%{public}d,hasDayChangedAfterThisSession,%{public}d,rhythmicSessionTime,%{public}.3lf,currentSecondsIntoToday,%{public}d,secondsInDayBeforeCurSession,%{public}.3lf", buf, 0x3Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::updateRhythmicGnssPerDayUsageToCoreAnalytics(const double, const double)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  if (v8 <= a3)
  {
    uint64_t v13 = sub_10071B604();
    sub_100726CB4(v13, (int *)(a1 + 400));
    *(void *)(a1 + 404) = 0;
  }
  *(_DWORD *)(a1 + 400) = (int)(*(double *)(a1 + 424) + a2);
  if (*(unsigned char *)(a1 + 336)) {
    *(_DWORD *)(a1 + 404) = (int)((double)*(int *)(a1 + 404) + a2);
  }
  if (v8 > a3 && v7 <= a3)
  {
    *(_DWORD *)(a1 + 408) = (int)((double)*(int *)(a1 + 408) + a2);
    uint64_t v15 = sub_10071B604();
    sub_100726CB4(v15, (int *)(a1 + 400));
    *(void *)(a1 + 400) = 0;
    *(_DWORD *)(a1 + 408) = 0;
  }
}

void sub_1018E5EB0(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 160))
  {
    sub_1018E6818((double *)a1);
    *(double *)(a1 + 432) = sub_101894B38();
    if (*(unsigned char *)(a1 + 106))
    {
      double v4 = 0.0;
      if (!*(unsigned char *)(a1 + 128)) {
        double v4 = sub_1007401C0();
      }
      double v5 = *(double *)(a1 + 416) + v4 + a2;
      *(double *)(a1 + 416) = v5;
      *(_DWORD *)(a1 + 408) = (int)v5;
    }
    *(double *)(a1 + 424) = *(double *)(a1 + 424) + a2;
    sub_1018E6A2C((unsigned char *)a1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    unsigned int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,#warning,updateTotalGnssPowerBudgetUsedInADay,no clients", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::updateTotalGnssPowerBudgetUsedInADay(const double)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_1018E60DC(uint64_t a1, uint64_t a2, int *a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  double v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *a3;
    *(_DWORD *)uint64_t buf = 67240192;
    LODWORD(v19) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLRGE,onDaemonStatusNotification,notification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (*(unsigned char *)(a1 + 160))
  {
    if (*(unsigned char *)(a1 + 306))
    {
      if (*a3 == 2)
      {
        sub_1018E003C(a1);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        int v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = *(void *)(a1 + 312);
          *(_DWORD *)uint64_t buf = 134349056;
          uint64_t v19 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLRGE,system entering sleep,fLastAPWakeRequestTime_s,%{public}.3lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023452F0);
          }
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
        double v13 = *(double *)(a1 + 312);
        if (v13 < CFAbsoluteTimeGetCurrent())
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023452F0);
          }
          uint64_t v14 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "CLRGE,system entering sleep only if last scheduled time is stale", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023452F0);
            }
            __int16 v17 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v17);
            if (v17 != (char *)buf) {
              free(v17);
            }
          }
          sub_1018E49F0(a1);
        }
      }
      else if (*a3 == 3)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023452F0);
        }
        double v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLRGE,system has powered on", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_30;
          }
          goto LABEL_57;
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023452F0);
      }
      uint64_t v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRGE,LS toggle off,not handling AP sleep-wake state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_30;
        }
        goto LABEL_57;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLRGE,onDaemonStatusNotification,no clients", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_30:
        int v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
        return;
      }
LABEL_57:
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
      goto LABEL_30;
    }
  }
}

void sub_1018E6818(double *a1)
{
  double v2 = sub_101894B38();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  uint64_t v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *((void *)a1 + 53);
    uint64_t v4 = *((void *)a1 + 54);
    uint64_t v6 = *((void *)a1 + 52);
    *(_DWORD *)uint64_t buf = 134349824;
    double v9 = v2;
    __int16 v10 = 2050;
    uint64_t v11 = v6;
    __int16 v12 = 2050;
    uint64_t v13 = v4;
    __int16 v14 = 2050;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLRGE,reset power budget,secondsIntoDayCurrent,%{public}.3lf,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{public}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{public}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    double v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::resetProactiveGnssPowerBudgetPerDayIfDayChanged()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (a1[54] > v2)
  {
    a1[52] = 0.0;
    a1[53] = 0.0;
  }
}

void sub_1018E6A2C(unsigned char *a1)
{
  if (a1[106])
  {
    uint64_t v2 = sub_1000A6958();
    sub_100163398(v2, @"TotalActiveGnssSecondsUsedPerDayKeyString", a1 + 416);
  }
  uint64_t v3 = sub_1000A6958();
  sub_100163398(v3, @"TotalSecondsIntoDayAtLastPowerBudgetStoredKeyString", a1 + 432);
  uint64_t v4 = sub_1000A6958();
  sub_100163398(v4, @"TotalActiveGnssSecondsUsedByAllRhythmicGnssClientsKeyString", a1 + 424);
  uint64_t v5 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v5 + 944))();
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023452F0);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *((void *)a1 + 53);
    uint64_t v7 = *((void *)a1 + 54);
    uint64_t v9 = *((void *)a1 + 52);
    *(_DWORD *)uint64_t buf = 134284033;
    uint64_t v12 = v9;
    __int16 v13 = 2049;
    uint64_t v14 = v7;
    __int16 v15 = 2050;
    uint64_t v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "CLRGE,storeDailyPowerBudgetUsageDataOnDisk,fTotalActiveGnssTimeUsedPerDayOfPowerBudget_s,%{private}.3lf,fSecondsIntoDayAtRhythmicPowerBudgetLastBackedup_s,%{private}.3lf,fRhythmicGnssActiveTimeInADay_s,%{public}.3lf", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023452F0);
    }
    __int16 v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLRhythmicGnssEngine::storeDailyPowerBudgetUsageDataOnDisk()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
}

uint64_t sub_1018E6C98(uint64_t a1, int a2, char a3, int a4)
{
  int v8 = a2;
  char v7 = a3;
  int v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *, int *))(*(void *)v4 + 48))(v4, &v8, &v7, &v6);
}

uint64_t sub_1018E6CFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 304);
}

void sub_1018E6D04(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1018E6D34(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1018E6D64(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1018E6DFC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1018E6E7C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1018E6F0C(_Unwind_Exception *a1)
{
}

void sub_1018E6F24()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_1018E6FDC(_Unwind_Exception *a1)
{
}

void sub_1018E6FF4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_1018E709C(_Unwind_Exception *a1)
{
}

uint64_t sub_1018E70B4()
{
  sub_100134750(qword_102489190, "t");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102489190, (void *)&_mh_execute_header);
}

void sub_1018E7114(uint64_t a1)
{
  uint64_t v2 = (char *)sub_1000A6958();
  sub_1000A5670(v2, (uint64_t)v19);
  uint64_t v3 = std::string::append((std::string *)v19, "ligl.bin");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  int64_t v17 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if ((v19[23] & 0x80000000) != 0) {
    operator delete(*(void **)v19);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345330);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)uint64_t v19 = 68289282;
    *(_WORD *)&v19[8] = 2082;
    *(void *)&v19[10] = "";
    *(_WORD *)&v19[18] = 2082;
    *(void *)&v19[20] = "knownACFile,injectknownACfile";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s}", v19, 0x1Cu);
  }
  memset(&__str, 0, sizeof(__str));
  if (!sub_101878A14((uint64_t *)__p, &__str))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      __int16 v10 = __p;
      if (v17 < 0) {
        __int16 v10 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t v19 = 136446210;
      *(void *)&v19[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "knownACFile,failed to read file %{public}s", v19, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_36;
    }
    bzero(v19, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    uint64_t v11 = __p;
    if (v17 < 0) {
      uint64_t v11 = (void **)__p[0];
    }
    LODWORD(v18[0]) = 136446210;
    *(unint64_t *)((char *)v18 + 4) = (unint64_t)v11;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssALD::handleKnownACFileUpdated()", "%s\n", v12);
LABEL_44:
    if (v12 != v19) {
      free(v12);
    }
    goto LABEL_36;
  }
  v18[0] = 0;
  sub_100134750(v19, "#imag");
  char v6 = sub_1018799D0((unint64_t)&__str, 8uLL, v18, (uint64_t *)v19);
  char v7 = v6;
  if ((v19[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v19);
    if (v7) {
      goto LABEL_10;
    }
  }
  else if (v6)
  {
LABEL_10:
    std::string::basic_string((std::string *)v19, &__str, 8uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v14);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = *(std::string *)v19;
    *(void *)uint64_t v19 = 0;
    if (v17 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    if (!sub_1004BE590((const char *)v8, (double *)v19)) {
      *(void *)uint64_t v19 = CFAbsoluteTimeGetCurrent();
    }
    sub_1018E7640(a1, (uint64_t)&__str, (uint64_t *)v19);
    goto LABEL_36;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345330);
  }
  __int16 v13 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "knownACFile,the file integrity failed", v19, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(v19, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    v14[0] = 0;
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssALD::handleKnownACFileUpdated()", "%s\n", v12);
    goto LABEL_44;
  }
LABEL_36:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1018E75C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018E7640(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_100F8B500((uint64_t)v42);
  if (wireless_diagnostics::google::protobuf::MessageLite::ParseFromString())
  {
    unint64_t v5 = v44 / 0xCuLL;
    unint64_t v6 = *(unsigned int *)(a1 + 200);
    if (v5 > v6)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      char v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134217984;
        unint64_t v54 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#imag,al,num locations in file is %zu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345330);
        }
        int v47 = 134217984;
        unint64_t v48 = v6;
        double v36 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v36);
        if (v36 != (char *)buf) {
          free(v36);
        }
      }
      unint64_t v5 = v6;
    }
    long long __p = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    sub_1007F0828(&__p, v5);
    if (v44)
    {
      uint64_t v8 = 8 * v44;
      uint64_t v9 = v43;
      __int16 v10 = &qword_102419000;
      while (1)
      {
        uint64_t v11 = *v9;
        if ((~*(_DWORD *)(*v9 + 36) & 7) != 0) {
          goto LABEL_47;
        }
        uint64_t v12 = *(void *)(v11 + 8);
        if (!v12) {
          uint64_t v12 = *(void *)(qword_10248AFB8 + 8);
        }
        int v13 = *(_DWORD *)(v12 + 24);
        if ((~v13 & 3) != 0 || (v13 & 4) == 0) {
          goto LABEL_47;
        }
        uint64_t v14 = *(void *)(v11 + 16);
        if (!v14) {
          uint64_t v14 = *(void *)(qword_10248AFB8 + 16);
        }
        int v15 = *(_DWORD *)(v14 + 24);
        if ((~v15 & 3) != 0 || (v15 & 4) == 0) {
          goto LABEL_47;
        }
        long long v37 = 0uLL;
        double v38 = 0.0;
        if ((v46 & 2) == 0) {
          goto LABEL_76;
        }
        if (v45 != 1)
        {
          if (v45)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102345330);
            }
            uint64_t v34 = v10[123];
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#imag,al,encodingType is default", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102345330);
              }
              LOWORD(v47) = 0;
              id v33 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v33);
              goto LABEL_92;
            }
          }
          else
          {
LABEL_76:
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102345330);
            }
            double v32 = v10[123];
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)uint64_t buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "#imag,al,encodingType is None", buf, 2u);
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102345330);
              }
              LOWORD(v47) = 0;
              id v33 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v33);
LABEL_92:
              if (v33 != (char *)buf) {
                free(v33);
              }
            }
          }
LABEL_71:
          __int16 v29 = __p;
          goto LABEL_72;
        }
        uint64_t v16 = *(void *)(v11 + 8);
        if (!v16) {
          uint64_t v16 = *(void *)(qword_10248AFB8 + 8);
        }
        double v17 = (double)*(int *)(v16 + 12) / 75.0 + (double)*(int *)(v16 + 8) + *(float *)(v16 + 16) / 5625.0 + -111.0;
        *(double *)&long long v37 = v17;
        uint64_t v18 = *(void *)(v11 + 16);
        if (!v18) {
          uint64_t v18 = *(void *)(qword_10248AFB8 + 16);
        }
        double v19 = (double)*(int *)(v18 + 12) / 75.0 + (double)*(int *)(v18 + 8) + *(float *)(v18 + 16) / 5625.0 + -190.0;
        double v20 = *(double *)(v11 + 24);
        *((double *)&v37 + 1) = v19;
        double v38 = v20;
        if (v17 < -90.0 || v17 > 90.0 || v19 < -180.0 || v19 > 180.0 || v20 <= 0.0) {
          break;
        }
        float v21 = *(float *)(a1 + 204);
        double v22 = *(float *)(a1 + 208);
        if (v20 <= v22) {
          double v22 = v20;
        }
        if (v22 < v21) {
          double v22 = v21;
        }
        double v38 = v22;
        sub_1018E9124(&__p, &v37);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345330);
        }
        __int16 v23 = v10;
        BOOL v24 = v10[123];
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134284033;
          unint64_t v54 = v37;
          __int16 v55 = 2049;
          uint64_t v56 = *((void *)&v37 + 1);
          __int16 v57 = 2048;
          double v58 = v38;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#imag,al,lat,%{private}.6lf,lon,%{private}.6lf,radiusM,%.1f", buf, 0x20u);
        }
        __int16 v10 = v23;
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_47;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          goto LABEL_53;
        }
LABEL_50:
        int v47 = 134284033;
        unint64_t v48 = v37;
        __int16 v49 = 2049;
        uint64_t v50 = *((void *)&v37 + 1);
        __int16 v51 = 2048;
        double v52 = v38;
        BOOL v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
        __int16 v10 = v23;
LABEL_47:
        ++v9;
        v8 -= 8;
        if (!v8) {
          goto LABEL_64;
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      __int16 v23 = v10;
      __int16 v25 = v10[123];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134284033;
        unint64_t v54 = v37;
        __int16 v55 = 2049;
        uint64_t v56 = *((void *)&v37 + 1);
        __int16 v57 = 2048;
        double v58 = v38;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#imag,al,invalid location,lat,%{private}.6lf,lon,%{private}.6lf,radiusM,%.1f", buf, 0x20u);
      }
      __int16 v10 = v23;
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_47;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_50;
      }
LABEL_53:
      dispatch_once(&qword_1024193D0, &stru_102345330);
      goto LABEL_50;
    }
LABEL_64:
    __int16 v29 = __p;
    if (v40 != __p)
    {
      *(void *)&long long v37 = &stru_10241AD28;
      BYTE8(v37) = 1;
      std::__shared_mutex_base::lock(&stru_10241AD28);
      sub_1002A9098((char *)&qword_10241AD08, (char *)__p, (uint64_t)v40, 0xAAAAAAAAAAAAAAABLL * ((v40 - (unsigned char *)__p) >> 3));
      qword_102479EB0 = *a3;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      unsigned int v30 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 134218240;
        unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((v40 - (unsigned char *)__p) >> 3);
        __int16 v55 = 2048;
        uint64_t v56 = qword_102479EB0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#imag,al,len of locVec,%lu,tagged at time,%f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345330);
        }
        int v47 = 134218240;
        unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v40 - (unsigned char *)__p) >> 3);
        __int16 v49 = 2048;
        uint64_t v50 = qword_102479EB0;
        double v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      sub_1018EA11C((uint64_t)&v37);
      goto LABEL_71;
    }
LABEL_72:
    if (v29)
    {
      uint64_t v40 = v29;
      operator delete(v29);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    __int16 v27 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#imag,al,failed to parse known locations proto", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      LOWORD(v47) = 0;
      double v28 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssALD::ingestKnownAC(const std::string &, const CFAbsoluteTime &)", "%s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
  }
  return sub_100F8C608(v42);
}

void sub_1018E82C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100F8C608(&a19);
  _Unwind_Resume(a1);
}

void sub_1018E8334()
{
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&stru_10241AD28;
  v15.__r_.__value_.__s.__data_[8] = 1;
  std::__shared_mutex_base::lock(&stru_10241AD28);
  qword_10241AD10 = qword_10241AD08;
  sub_1018EA11C((uint64_t)&v15);
  uint64_t v0 = (char *)sub_1000A6958();
  sub_1000A5670(v0, (uint64_t)&v15);
  double v1 = std::string::append(&v15, "ligl.bin");
  long long v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  int64_t v12 = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (v12 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if (sub_1000A569C((const char *)v3))
  {
    if (v12 >= 0) {
      long long v4 = __p;
    }
    else {
      long long v4 = (void **)__p[0];
    }
    if (sub_1004BB38C((const char *)v4))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      unint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v6 = __p;
        if (v12 < 0) {
          unint64_t v6 = (void **)__p[0];
        }
        LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "knownACFile deleted %s", (uint8_t *)&v15, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v15, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345330);
        }
        char v7 = __p;
        if (v12 < 0) {
          char v7 = (void **)__p[0];
        }
LABEL_37:
        int v13 = 136315138;
        uint64_t v14 = v7;
        __int16 v10 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssALD::deleteKnownACFile()", "%s\n", (const char *)v10);
        if (v10 != &v15) {
          free(v10);
        }
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v9 = __p;
        if (v12 < 0) {
          uint64_t v9 = (void **)__p[0];
        }
        LODWORD(v15.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)v15.__r_.__value_.__r.__words + 4) = (std::string::size_type)v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "knownACFile error occured while deleting %s", (uint8_t *)&v15, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v15, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345330);
        }
        char v7 = __p;
        if (v12 < 0) {
          char v7 = (void **)__p[0];
        }
        goto LABEL_37;
      }
    }
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1018E870C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1018E874C(uint64_t a1, double *a2, double *a3)
{
  if (!*(unsigned char *)(a1 + 196))
  {
    *(void *)uint64_t buf = &stru_10241AD28;
    char v10 = 1;
    std::__shared_mutex_base::lock(&stru_10241AD28);
LABEL_14:
    qword_10241AD10 = qword_10241AD08;
    sub_1018EA11C((uint64_t)buf);
    return 0;
  }
  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)&qword_102479EB0) >= 604800.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    char v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#imag,al,file validity has expired", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssALD::isKnownAC(const double &, const double &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(void *)uint64_t buf = &stru_10241AD28;
    char v10 = 1;
    std::__shared_mutex_base::lock(&stru_10241AD28);
    goto LABEL_14;
  }
  if (sub_1018E89C0(a1, a2, a3)) {
    return 0;
  }

  return sub_1018E8DD0((double *)a1, a2, a3, 1);
}

BOOL sub_1018E89C0(uint64_t a1, double *a2, double *a3)
{
  if (!*(unsigned char *)(a1 + 197))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    char v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#imag,al,cross check disabled", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_27:
      char v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssALD::didGnssAgreeWithOtherType(const double &, const double &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 0;
    }
LABEL_30:
    dispatch_once(&qword_1024193D0, &stru_102345330);
    goto LABEL_27;
  }
  double v4 = sub_1000F1648((double *)a1, *a2, *a3, *(double *)(a1 + 44), *(double *)(a1 + 52), 0.0);
  if (v4 <= fmin(*(double *)(a1 + 60) * 5.0, 1500.0))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    unint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#imag,al,locations match, separated by,%.1f,m", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssALD::didGnssAgreeWithOtherType(const double &, const double &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    return 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345330);
  }
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 134217984;
    double v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#imag,al,locations mismatch, separated by,%.1f,m", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_27;
    }
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_1018E8DD0(double *a1, double *a2, double *a3, int a4)
{
  double v28 = &stru_10241AD28;
  char v29 = 1;
  std::__shared_mutex_base::lock_shared(&stru_10241AD28);
  uint64_t v8 = (double *)qword_10241AD08;
  uint64_t v9 = qword_10241AD10;
  if (qword_10241AD08 == qword_10241AD10)
  {
LABEL_6:
    uint64_t v11 = 0;
  }
  else
  {
    while (1)
    {
      if (vabdd_f64(*v8, *a2) <= 0.1 && fabs(sub_1011717B4(v8[1], *a3)) <= 0.1)
      {
        double v26 = 0.0;
        double v27 = 0.0;
        uint64_t v25 = 0;
        sub_1000F17A8(a1, &v27, &v26, (double *)&v25, *a2, *a3, 0.0, *v8, v8[1], 0.0);
        double v10 = v26 * v26 + v27 * v27;
        if (v10 <= v8[2] * v8[2]) {
          break;
        }
      }
      v8 += 3;
      if (v8 == (double *)v9) {
        goto LABEL_6;
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    int v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      double v14 = *v8;
      uint64_t v15 = *((void *)v8 + 1);
      uint64_t v16 = *((void *)v8 + 2);
      double v17 = *a2;
      double v18 = *a3;
      *(_DWORD *)uint64_t buf = 67110657;
      int v45 = a4;
      __int16 v46 = 2049;
      double v47 = v14;
      __int16 v48 = 2049;
      uint64_t v49 = v15;
      __int16 v50 = 2050;
      uint64_t v51 = v16;
      __int16 v52 = 2049;
      double v53 = v17;
      __int16 v54 = 2049;
      double v55 = v18;
      __int16 v56 = 2050;
      double v57 = v10;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#imag,al,type,%d,aLat,%{private}.6lf,aLon,%{private}.6lf,aRadius,%{public}.1f,gnssLat,%{private}.6lf,gnssLon.%{private}.6lf,distanceSqM,%{public}.1f", buf, 0x44u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      double v19 = *v8;
      uint64_t v20 = *((void *)v8 + 1);
      uint64_t v21 = *((void *)v8 + 2);
      double v22 = *a2;
      double v23 = *a3;
      int v30 = 67110657;
      int v31 = a4;
      __int16 v32 = 2049;
      double v33 = v19;
      __int16 v34 = 2049;
      uint64_t v35 = v20;
      __int16 v36 = 2050;
      uint64_t v37 = v21;
      __int16 v38 = 2049;
      double v39 = v22;
      __int16 v40 = 2049;
      double v41 = v23;
      __int16 v42 = 2050;
      double v43 = v10;
      BOOL v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssALD::doesThisMatchKnownAC(const double &, const double &, const CLLocationType)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    uint64_t v11 = 1;
  }
  sub_1018EA154((uint64_t)&v28);
  return v11;
}

void sub_1018E9104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_1018EA154((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1018E9124(void **a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      double v14 = (char *)sub_1000DA5D8(v4, v13);
    }
    else {
      double v14 = 0;
    }
    uint64_t v15 = &v14[24 * v10];
    uint64_t v16 = &v14[24 * v13];
    long long v17 = *a2;
    *((void *)v15 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v15 = v17;
    uint64_t v9 = v15 + 24;
    double v19 = (char *)*a1;
    double v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 24);
        *((void *)v15 - 1) = *((void *)v18 - 1);
        *(_OWORD *)(v15 - 24) = v20;
        v15 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      double v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    uint64_t v9 = (char *)(v7 + 24);
  }
  a1[1] = v9;
}

uint64_t sub_1018E924C(uint64_t a1, uint64_t a2)
{
  BOOL v22 = 0;
  if (sub_1000D2988(a2, "IsLocFilteringOn", &v22))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v26) = v22;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,filter on,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      int v23 = 67109120;
      LODWORD(v24) = v22;
      unint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
    int v5 = *(unsigned __int8 *)(a1 + 196);
    int v6 = v22 != v5;
    BOOL v7 = v22 != v5 && v22;
    *(unsigned char *)(a1 + 196) = v22;
  }
  else
  {
    BOOL v7 = 0;
    int v6 = 0;
  }
  BOOL v21 = 0;
  if (sub_1000D2988(a2, "IsLocCrossCheckOn", &v21))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    long long v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v26) = v21;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,crossCheck on,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      int v23 = 67109120;
      LODWORD(v24) = v21;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    *(unsigned char *)(a1 + 197) = v21;
  }
  int v20 = 0;
  if (sub_1004D0870(a2, "MaxNumCoordinatesStored", &v20))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      LODWORD(v26) = v20;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,max loc to store,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      int v23 = 67109120;
      LODWORD(v24) = v20;
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    if ((v20 - 1) <= 0x3E7) {
      *(_DWORD *)(a1 + 200) = v20;
    }
  }
  float v19 = 0.0;
  if (sub_1004D11B0(a2, "MinRadiusM", &v19))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    unint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v26 = v19;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,min radius,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      int v23 = 134217984;
      double v24 = v19;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    if (v19 > 0.0 && v19 < 5000.0) {
      *(float *)(a1 + 204) = v19;
    }
  }
  float v18 = 0.0;
  if (sub_1004D11B0(a2, "MaxRadiusM", &v18))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    unint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 134217984;
      double v26 = v18;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#imag,al,MA,max radius,%f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      int v23 = 134217984;
      double v24 = v18;
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<BOOL> CLGnssALD::setKnownACConfigFromMA(const CLNameValuePair &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    if (v18 > 0.0 && v18 < 5000.0) {
      *(float *)(a1 + 208) = v18;
    }
  }
  return v7 | (v6 << 8);
}

void sub_1018E9A68(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (*(double *)(a2 + 76) >= 0.0 && (sub_1000E6DB4(a2) & 1) != 0)
  {
    int v8 = *(_DWORD *)(a2 + 96);
    if ((v8 - 6) < 3 || v8 == 11 || v8 == 4)
    {
      int v11 = sub_1018E8DD0((double *)a1, (double *)(a2 + 4), (double *)(a2 + 12), v8);
      int v8 = *(_DWORD *)(a2 + 96);
      if (v11)
      {
        if ((v8 - 6) >= 3) {
          unint64_t v12 = "known_coord_wifi";
        }
        else {
          unint64_t v12 = "known_coord_cell";
        }
        sub_10187A1C8(a4, (uint64_t)"imag", (uint64_t)v12, 0);
        int v8 = *(_DWORD *)(a2 + 96);
      }
    }
    BOOL v13 = v8 == 11 || v8 == 4;
    if (v13 && (a3 & 1) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      double v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = *(void *)(a2 + 4);
        uint64_t v16 = *(void *)(a2 + 12);
        uint64_t v17 = *(void *)(a2 + 20);
        int v18 = *(_DWORD *)(a2 + 96);
        *(_DWORD *)uint64_t buf = 134284289;
        uint64_t v30 = v15;
        __int16 v31 = 2049;
        uint64_t v32 = v16;
        __int16 v33 = 2048;
        uint64_t v34 = v17;
        __int16 v35 = 1024;
        int v36 = v18;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#imag,al,ref lat,%{private}.6lf,lon,%{private}.6lf,hUnc,%.1f,type,%d", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345330);
        }
        double v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssALD::injectRefLocation(const CLDaemonLocation &, const BOOL, dispatch_queue_t)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      long long v19 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 40) = v19;
      long long v20 = *(_OWORD *)(a2 + 32);
      long long v21 = *(_OWORD *)(a2 + 48);
      long long v22 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 104) = v22;
      *(_OWORD *)(a1 + 88) = v21;
      *(_OWORD *)(a1 + 72) = v20;
      long long v23 = *(_OWORD *)(a2 + 96);
      long long v24 = *(_OWORD *)(a2 + 112);
      long long v25 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 180) = *(_OWORD *)(a2 + 140);
      *(_OWORD *)(a1 + 168) = v25;
      *(_OWORD *)(a1 + 152) = v24;
      *(_OWORD *)(a1 + 136) = v23;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    double v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "#imag,al,ref loc invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      double v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssALD::injectRefLocation(const CLDaemonLocation &, const BOOL, dispatch_queue_t)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
  }
}

uint64_t sub_1018E9E88(double *a1, double *a2, double *a3, int a4)
{
  if (vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)&qword_102479EB0) >= 604800.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345330);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#imag,al,type,%d KAC file validity has expired", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345330);
      }
      unint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGnssALD::isWiFiOrCellKnownAC(const double &, const double &, const CLLocationType)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    *(void *)uint64_t buf = &stru_10241AD28;
    char v12 = 1;
    std::__shared_mutex_base::lock(&stru_10241AD28);
    qword_10241AD10 = qword_10241AD08;
    sub_1018EA11C((uint64_t)buf);
    return 0;
  }
  else
  {
    return sub_1018E8DD0(a1, a2, a3, a4);
  }
}

void sub_1018EA0EC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1018EA11C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

uint64_t sub_1018EA154(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

void sub_1018EA18C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1018EA20C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1018EA29C(_Unwind_Exception *a1)
{
}

void sub_1018EA2B4(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1018EA2BC(_DWORD *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      int v4 = a1[3];
      *(_DWORD *)(a2 + 8) = a1[2];
      *(unsigned char *)(a2 + 12) = v4;
      sub_1018ED14C(a1 + 4, (int *)(a2 + 16));
      sub_1018EB638((uint64_t)(v3 + 7), a2 + 28);
      sub_1018EBA38(v3 + 13, a2 + 100);
      sub_1018EB894(v3 + 18, (_DWORD *)(a2 + 224));
      sub_1018EB8E8((uint64_t)(v3 + 19), a2 + 228);
      sub_1018ECE4C(v3 + 70, (_DWORD *)(a2 + 432));
      sub_1018ED648((uint64_t)(v3 + 71), a2 + 436);
      *(_DWORD *)a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = (_DWORD *)sub_1018EDCF0();
  }
  uint64_t v5 = sub_1018EDE54(a1);
  sub_1018EA358(v5, v6);
}

void sub_1018EA358(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1018EA360(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 8);
      *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 12);
      sub_1018ED14C((int *)(a1 + 16), (int *)(a2 + 16));
      sub_1018EADFC((_DWORD *)(v3 + 28), a2 + 28);
      sub_1018EA7F8((int *)(v3 + 488), a2 + 484);
      *(_DWORD *)(a2 + 3708) = *(_DWORD *)(v3 + 1400);
      *(_DWORD *)(a2 + 3712) = *(unsigned __int8 *)(v3 + 1404);
      *(_DWORD *)a2 = *(_DWORD *)v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018EDFB8();
  }
  uint64_t v4 = sub_1018EE11C(a1);
  sub_1018EA3E0(v4);
}

void sub_1018EA3E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1018EA3E8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 4);
      *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 8);
      sub_1018ED14C((int *)(a1 + 12), (int *)(a2 + 16));
      sub_1018ED1DC(v3 + 24, a2 + 28);
      sub_1018ED258((_WORD *)(v3 + 64), a2 + 68);
      *(_DWORD *)a2 = *(_DWORD *)v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018EE280();
  }
  uint64_t v4 = sub_1018EE3E4(a1);
  sub_1018EA458(v4, v5);
}

void sub_1018EA458(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 8);
      sub_1018EC604((int *)(a1 + 12), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018EE548();
  }
  uint64_t v4 = sub_1018EE6AC(a1);
  sub_1018EA4A8(v4);
}

void sub_1018EA4A8(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 8);
      sub_1018EC604((int *)(a1 + 12), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018EE810();
  }
  uint64_t v4 = sub_1018EE974(a1);
  sub_1018EA4F8(v4);
}

void sub_1018EA4F8(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 8);
      sub_1018EC604((int *)(a1 + 12), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018EEAD8();
  }
  uint64_t v4 = sub_1018EEC3C(a1);
  sub_1018EA548(v4, v5);
}

void sub_1018EA548(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
}

void sub_1018EA550(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (_DWORD *)a1;
      sub_1018EBA98((int *)(a1 + 4), a2 + 2);
      sub_1018EBCCC(v3 + 2, a2 + 3);
      a2[4] = v3[3];
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018EEDA0();
  }
  uint64_t v4 = sub_1018EEF04(a1);
  sub_1018EA5AC(v4, v5);
}

void sub_1018EA5AC(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (_DWORD *)a1;
      sub_1018EC604((int *)(a1 + 8), a2 + 1);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018EF068();
  }
  uint64_t v4 = sub_1018EF1CC(a1);
  sub_1018EA5F4(v4);
}

void sub_1018EA5F4(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = sub_1018EF330();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v4 = sub_1018EF494(a1);
    sub_1018EA668(v4);
    return;
  }
  uint64_t v3 = a1;
  sub_1018EC604((int *)(a1 + 4), (int *)(a2 + 4));
  sub_1018ECA1C((int *)(v3 + 16), (int *)(a2 + 16));
  *(_DWORD *)a2 = *(_DWORD *)v3;
  *(void *)(a2 + 20) = *(void *)(v3 + 20);

  sub_1018ECC60((int *)(v3 + 28), (_DWORD *)(a2 + 28));
}

void sub_1018EA668(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      sub_1018EC604((int *)(a1 + 4), (int *)(a2 + 4));
      sub_1018EC654((int *)(v3 + 16), (_DWORD *)(a2 + 16));
      *(void *)(a2 + 20) = *(void *)(v3 + 20);
      *(unsigned char *)(a2 + 28) = *(unsigned char *)(v3 + 28);
      *(_WORD *)(a2 + 29) = *(_WORD *)(v3 + 29);
      sub_1018EC838((int *)(v3 + 32), (_DWORD *)(a2 + 32));
      *(_DWORD *)a2 = *(_DWORD *)v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018EF5F8();
  }
  uint64_t v4 = sub_1018EF75C(a1);
  sub_1018EA6E0(v4, v5);
}

void sub_1018EA6E0(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (_DWORD *)a1;
      sub_1018EC604((int *)(a1 + 4), a2 + 1);
      a2[4] = v3[4];
      sub_1018ED328(v3 + 5, a2 + 5);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018EF8C0();
  }
  uint64_t v4 = (unsigned int *)sub_1018EFA24(a1);
  sub_1018EA73C(v4);
}

uint64_t sub_1018EA73C(unsigned int *a1)
{
  uint64_t v1 = (int)a1[1];
  if (v1 > 4) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = qword_101E462E0[v1];
  }
  return v2 | *a1;
}

double sub_1018EA768(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4) == 0;
  int v2 = *(_DWORD *)(a1 + 8);
  if (v2 > 1)
  {
    if (v2 == 2 || v2 == 0x7FFFFFFF)
    {
      int v3 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    if (!v2)
    {
      int v3 = 3;
      goto LABEL_9;
    }
    if (v2 == 1)
    {
      int v3 = 4;
LABEL_9:
      *(_DWORD *)(a2 + 8) = v3;
    }
  }
  *(_WORD *)(a2 + 12) = *(_WORD *)(a1 + 12);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_WORD *)(a2 + 20) = *(_WORD *)(a1 + 20);
  double result = *(double *)(a1 + 24);
  *(double *)(a2 + 24) = result;
  *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 32);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)a2 = *(_DWORD *)a1;
  return result;
}

void sub_1018EA7F8(int *a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018EFB88();
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_9:
    uint64_t v5 = (int *)sub_1018EFCEC(a1);
    sub_1018EA8A4(v5, v6);
    return;
  }
  int v3 = a1;
  sub_1018EA8A4(a1, (_DWORD *)a2);
  *(_DWORD *)(a2 + 4) = v3[1];
  *(_DWORD *)(a2 + 8) = v3[2];
  sub_1018ED19C(v3 + 4, (_DWORD *)(a2 + 12));
  sub_1018EB488((uint64_t)(v3 + 6), a2 + 16);
  int v4 = *((unsigned __int8 *)v3 + 128);
  *(unsigned char *)(a2 + 116) = v4;
  if (v4)
  {
    sub_1018EBF58(v3 + 33, (_DWORD *)(a2 + 120));
    sub_1018EB560((uint64_t)(v3 + 34), a2 + 124);
    bzero((void *)(a2 + 896), 0x918uLL);
  }
}

int *sub_1018EA8A4(int *result, _DWORD *a2)
{
  if (!result)
  {
    double result = (int *)sub_1018EFE50();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v3 = sub_1018EFFB4(result);
    return (int *)sub_1018EA8E4(v3);
  }
  uint64_t v2 = *result;
  if (v2 <= 4) {
    *a2 = dword_101E46308[v2];
  }
  return result;
}

void sub_1018EA8E4(int *a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F0118();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v6 = (int *)sub_1018F027C(a1);
    sub_1018EA960(v6, v7);
    return;
  }
  uint64_t v3 = a1;
  sub_1018EA960(a1, (int *)a2);
  uint64_t v4 = 0;
  *(_WORD *)(a2 + 4) = *((_WORD *)v3 + 2);
  *(unsigned char *)(a2 + 6) = *((unsigned char *)v3 + 6);
  do
  {
    uint64_t v5 = a2 + v4 * 4;
    *(unsigned char *)(v5 + 8) = v3[v4 + 2];
    *(_DWORD *)(v5 + 12) = v3[v4 + 3];
    v4 += 2;
  }
  while (v4 != 30);
  *(_DWORD *)(a2 + 218) = *(int *)((char *)v3 + 218);
}

void sub_1018EA960(int *a1, int *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F03E0();
LABEL_20:
    sub_1018F0544(a1);
LABEL_21:
    dispatch_once(&qword_1024193D0, &stru_102345370);
LABEL_6:
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *v2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345370);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::LcsGanssId *, IBISsLcsGanssId *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return;
  }
  if (!a2) {
    goto LABEL_20;
  }
  uint64_t v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      int v7 = 1;
      goto LABEL_17;
    case 2:
      int v7 = 2;
      goto LABEL_17;
    case 3:
      int v7 = 3;
      goto LABEL_17;
    case 4:
      int v7 = 4;
LABEL_17:
      *a2 = v7;
      break;
    default:
      *a2 = 0x7FFFFFFF;
      uint64_t v3 = &qword_102419000;
      if (qword_1024193D0 == -1) {
        goto LABEL_6;
      }
      goto LABEL_21;
  }
}

uint64_t sub_1018EAB94(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      *(_WORD *)a2 = *(_WORD *)result;
      *(_DWORD *)(a2 + 4) = *(_DWORD *)(result + 4);
      *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
      *(void *)(a2 + 20) = *(void *)(result + 20);
      *(_WORD *)(a2 + 28) = *(_WORD *)(result + 28);
      *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
      *(unsigned char *)(a2 + 36) = *(unsigned char *)(result + 36);
      *(unsigned char *)(a2 + 37) = *(unsigned char *)(result + 37);
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(result + 40);
      return result;
    }
  }
  else
  {
    double result = sub_1018F06A8();
  }
  uint64_t v2 = sub_1018F080C(result);
  return sub_1018EAC10(v2);
}

void sub_1018EAC10(int *a1, _DWORD *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F0970();
    goto LABEL_14;
  }
  if (!a2)
  {
LABEL_14:
    sub_1018F0AD4(a1);
LABEL_15:
    dispatch_once(&qword_1024193D0, &stru_102345370);
    goto LABEL_9;
  }
  uint64_t v2 = a1;
  int v4 = *a1;
  if (*a1 == 2 || v4 == 1)
  {
    *a2 = v4;
    return;
  }
  if (!v4)
  {
    *a2 = 0;
    return;
  }
  uint64_t v3 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    goto LABEL_15;
  }
LABEL_9:
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v6 = *v2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345370);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpMethodType *, gnss::Emergency::Cplane::MethodType *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

_DWORD *sub_1018EADFC(_DWORD *a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = (_DWORD *)sub_1018F0C38();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v6 = sub_1018F0D9C(a1);
    return sub_1018EAEA4(v6, v7);
  }
  uint64_t v3 = a1;
  *(_DWORD *)a2 = *a1;
  *(_DWORD *)(a2 + 4) = a1[1];
  for (uint64_t i = 2; i != 98; i += 6)
    sub_1018EAEA4((uint64_t)&v3[i], a2 + i * 4);
  sub_1018ED19C(v3 + 98, (_DWORD *)(a2 + 392));
  double result = sub_1018EBEF4((uint64_t)(v3 + 99), a2 + 396);
  *(unsigned char *)(a2 + 440) = *((unsigned char *)v3 + 440);
  *(_DWORD *)(a2 + 444) = v3[111];
  *(_DWORD *)(a2 + 448) = v3[112];
  *(_WORD *)(a2 + 452) = *((_WORD *)v3 + 226);
  *(unsigned char *)(a2 + 454) = *((unsigned char *)v3 + 454);
  return result;
}

_DWORD *sub_1018EAEA4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      *(_WORD *)a2 = *(_WORD *)a1;
      *(_DWORD *)(a2 + 2) = *(_DWORD *)(a1 + 2);
      *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 6);
      *(_WORD *)(a2 + 7) = *(_WORD *)(a1 + 7);
      double result = sub_1018ED2F4((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 16);
      *(unsigned char *)(a2 + 20) = *(unsigned char *)(v3 + 20);
      return result;
    }
  }
  else
  {
    a1 = sub_1018F0F00();
  }
  uint64_t v5 = sub_1018F1064(a1);
  return (_DWORD *)sub_1018EAF14(v5);
}

void sub_1018EAF14(uint64_t a1, int *a2, uint64_t a3)
{
  if (!a1)
  {
    a1 = sub_1018F11C8();
    goto LABEL_8;
  }
  if (!a2)
  {
LABEL_8:
    a1 = sub_1018F132C(a1);
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_9:
    int v8 = (int *)sub_1018F1490(a1);
    sub_1018EAFE8(v8, v9);
    return;
  }
  uint64_t v5 = (_DWORD *)a1;
  uint64_t v6 = 0;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  *(_WORD *)(a3 + 8) = *(_WORD *)(a1 + 8);
  *(unsigned char *)(a3 + 10) = *(unsigned char *)(a1 + 10);
  *(unsigned char *)(a3 + 11) = *(unsigned char *)(a1 + 764);
  do
  {
    uint64_t v7 = a3 + v6;
    *(_WORD *)(v7 + 12) = *(_WORD *)(a1 + v6 + 768);
    *(unsigned char *)(v7 + 14) = *(unsigned char *)(a1 + v6 + 770);
    *(void *)(v7 + 16) = *(void *)(a1 + v6 + 772);
    *(unsigned char *)(v7 + 24) = *(unsigned char *)(a1 + v6 + 780);
    v6 += 16;
  }
  while (v6 != 256);
  *(unsigned char *)(a3 + 268) = *(unsigned char *)(a1 + 1024);
  sub_1018EAFE8(a2, (int *)(a3 + 272));
  sub_1018EB208(a2 + 1, (int *)(a3 + 276));
  *(_DWORD *)(a3 + 280) = a2[2];
  *(_DWORD *)a3 = *v5;
}

void sub_1018EAFE8(int *a1, int *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F15F4();
LABEL_19:
    sub_1018F1758(a1);
LABEL_20:
    dispatch_once(&qword_1024193D0, &stru_102345370);
LABEL_6:
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v5 = *v2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345370);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpSessionProtocol *, gnss::Emergency::Cplane::SessionProtocol *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return;
  }
  if (!a2) {
    goto LABEL_19;
  }
  uint64_t v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      int v7 = 1;
      goto LABEL_16;
    case 2:
      int v7 = 2;
      goto LABEL_16;
    case 3:
      int v7 = 3;
LABEL_16:
      *a2 = v7;
      break;
    default:
      uint64_t v3 = &qword_102419000;
      if (qword_1024193D0 == -1) {
        goto LABEL_6;
      }
      goto LABEL_20;
  }
}

void sub_1018EB208(int *a1, int *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F18BC();
LABEL_20:
    sub_1018F1A20(a1);
LABEL_21:
    dispatch_once(&qword_1024193D0, &stru_102345370);
LABEL_6:
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *v2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345370);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpPosProtocol *, gnss::Emergency::Cplane::PosProtocol *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return;
  }
  if (!a2) {
    goto LABEL_20;
  }
  uint64_t v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      int v7 = 1;
      goto LABEL_17;
    case 2:
      int v7 = 2;
      goto LABEL_17;
    case 3:
      int v7 = 3;
      goto LABEL_17;
    case 4:
      int v7 = 4;
LABEL_17:
      *a2 = v7;
      break;
    default:
      *a2 = *a1;
      uint64_t v3 = &qword_102419000;
      if (qword_1024193D0 == -1) {
        goto LABEL_6;
      }
      goto LABEL_21;
  }
}

void sub_1018EB438(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 4);
      sub_1018EB208((int *)(a1 + 8), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018F1B84();
  }
  uint64_t v4 = sub_1018F1CE8(a1);
  sub_1018EB488(v4, v5);
}

uint64_t sub_1018EB488(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = sub_1018F1E4C();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v5 = sub_1018F1FB0(a1);
    return sub_1018EB50C(v5, v6);
  }
  uint64_t v3 = a1;
  sub_1018EB50C(a1, a2);
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(v3 + 32);
  *(_WORD *)(a2 + 34) = *(_WORD *)(v3 + 34);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(v3 + 36);
  *(_WORD *)(a2 + 40) = *(_WORD *)(v3 + 40);
  *(void *)(a2 + 44) = *(void *)(v3 + 44);
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v3 + 52);

  return sub_1018EAB94(v3 + 56, a2 + 56);
}

uint64_t sub_1018EB50C(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      *(void *)a2 = *(void *)result;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
      *(_WORD *)(a2 + 16) = *(_WORD *)(result + 16);
      *(void *)(a2 + 20) = *(void *)(result + 20);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(result + 28);
      return result;
    }
  }
  else
  {
    double result = sub_1018F2114();
  }
  uint64_t v2 = sub_1018F2278(result);
  return sub_1018EB560(v2);
}

_DWORD *sub_1018EB560(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = sub_1018F23DC();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v6 = sub_1018F2540(a1);
    return sub_1018EB5C8(v6, v7);
  }
  uint64_t v3 = a1;
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_WORD *)(a2 + 1) = *(_WORD *)(a1 + 1);
  for (uint64_t i = 4; i != 772; i += 24)
    double result = sub_1018EB5C8(v3 + i, a2 + i);
  return result;
}

_DWORD *sub_1018EB5C8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      *(_WORD *)a2 = *(_WORD *)a1;
      *(unsigned char *)(a2 + 2) = *(unsigned char *)(a1 + 2);
      *(_WORD *)(a2 + 3) = *(_WORD *)(a1 + 3);
      double result = sub_1018ED2F4((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
      *(_WORD *)(a2 + 16) = *(_WORD *)(v3 + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(v3 + 20);
      return result;
    }
  }
  else
  {
    a1 = sub_1018F26A4();
  }
  uint64_t v5 = sub_1018F2808(a1);
  return (_DWORD *)sub_1018EB638(v5);
}

void sub_1018EB638(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      *(_DWORD *)a2 = *(_DWORD *)a1;
      *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 4);
      *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 6);
      sub_1018EB6A8((int *)(a1 + 8), (_DWORD *)(a2 + 8));
      *(void *)(a2 + 60) = *(void *)(v3 + 12);
      *(_WORD *)(a2 + 68) = *(_WORD *)(v3 + 20);
      *(unsigned char *)(a2 + 70) = *(unsigned char *)(v3 + 22);
      return;
    }
  }
  else
  {
    a1 = sub_1018F296C();
  }
  uint64_t v4 = (int *)sub_1018F2AD0(a1);
  sub_1018EB6A8(v4, v5);
}

void sub_1018EB6A8(int *a1, _DWORD *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F2C34();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_13:
    sub_1018F2D98(a1);
LABEL_14:
    dispatch_once(&qword_1024193D0, &stru_102345370);
    goto LABEL_8;
  }
  uint64_t v2 = a1;
  if (*a1 == 1)
  {
    *a2 = 1;
    return;
  }
  if (!*a1)
  {
    *a2 = 0;
    return;
  }
  *a2 = 0x7FFFFFFF;
  uint64_t v3 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v5 = *v2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345370);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::FixType *, IBILpFixType *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

int *sub_1018EB894(int *result, _DWORD *a2)
{
  if (!result)
  {
    double result = (int *)sub_1018F2EFC();
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    uint64_t v4 = sub_1018F3060(result);
    return (int *)sub_1018EB8E8(v4);
  }
  int v2 = *result;
  BOOL v3 = *result > 0xA || ((1 << *result) & 0x72B) == 0;
  if (!v3 || v2 == 255) {
    *a2 = v2;
  }
  return result;
}

unsigned char *sub_1018EB8E8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      *(void *)a2 = *(void *)a1;
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
      *(void *)(a2 + 12) = *(void *)(a1 + 12);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 20);
      *(void *)(a2 + 24) = *(void *)(a1 + 24);
      *(_WORD *)(a2 + 32) = *(_WORD *)(a1 + 32);
      *(_DWORD *)(a2 + 34) = *(_DWORD *)(a1 + 34);
      *(unsigned char *)(a2 + 38) = *(unsigned char *)(a1 + 38);
      *(void *)(a2 + 40) = *(void *)(a1 + 40);
      *(_WORD *)(a2 + 48) = *(_WORD *)(a1 + 48);
      *(_DWORD *)(a2 + 50) = *(_DWORD *)(a1 + 50);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
      *(_WORD *)(a2 + 72) = *(_WORD *)(a1 + 72);
      double result = sub_1018EB9F4((unsigned char *)(a1 + 76), (unsigned char *)(a2 + 76));
      *(unsigned char *)(a2 + 200) = *(unsigned char *)(v3 + 200);
      return result;
    }
  }
  else
  {
    a1 = sub_1018F31C4();
  }
  uint64_t v5 = sub_1018F3328(a1);
  return (unsigned char *)sub_1018EB998(v5, v6);
}

uint64_t sub_1018EB998(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    double result = sub_1018F348C();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v3 = sub_1018F35F0(result);
    return sub_1018EB9F4(v3);
  }
  *(void *)a2 = *(void *)result;
  *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
  *(_DWORD *)(a2 + 10) = *(_DWORD *)(result + 10);
  int v2 = *(_DWORD *)(result + 16) + 1;
  if (v2 <= 3) {
    *(_DWORD *)(a2 + 16) = dword_101D8C9A0[v2];
  }
  return result;
}

unsigned char *sub_1018EB9F4(unsigned char *result, unsigned char *a2)
{
  if (!result)
  {
    double result = (unsigned char *)sub_1018F3754();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v3 = sub_1018F38B8(result);
    return (unsigned char *)sub_1018EBA38(v3);
  }
  *a2 = *result;
  for (uint64_t i = 4; i != 124; i += 8)
    *(void *)&a2[i] = *(void *)&result[i];
  return result;
}

void sub_1018EBA38(int *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      sub_1018EA8A4(a1, (_DWORD *)a2);
      *(_DWORD *)(a2 + 4) = v3[1];
      *(_WORD *)(a2 + 8) = *((_WORD *)v3 + 4);
      sub_1018EB6A8(v3 + 3, (_DWORD *)(a2 + 12));
      *(_WORD *)(a2 + 120) = *((_WORD *)v3 + 8);
      return;
    }
  }
  else
  {
    a1 = (int *)sub_1018F3A1C();
  }
  uint64_t v4 = (int *)sub_1018F3B80(a1);
  sub_1018EBA98(v4, v5);
}

void sub_1018EBA98(int *a1, int *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F3CE4();
LABEL_20:
    sub_1018F3E48(a1);
LABEL_21:
    dispatch_once(&qword_1024193D0, &stru_102345370);
LABEL_6:
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *v2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345370);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::PosProtocol *, IBILpPosProtocol *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return;
  }
  if (!a2) {
    goto LABEL_20;
  }
  int v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      int v7 = 1;
      goto LABEL_17;
    case 2:
      int v7 = 2;
      goto LABEL_17;
    case 3:
      int v7 = 3;
      goto LABEL_17;
    case 4:
      int v7 = 4;
LABEL_17:
      *a2 = v7;
      break;
    default:
      *a2 = 0x7FFFFFFF;
      uint64_t v3 = &qword_102419000;
      if (qword_1024193D0 == -1) {
        goto LABEL_6;
      }
      goto LABEL_21;
  }
}

void sub_1018EBCCC(int *a1, int *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F3FAC();
LABEL_19:
    sub_1018F4110(a1);
LABEL_20:
    dispatch_once(&qword_1024193D0, &stru_102345370);
LABEL_6:
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *v2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345370);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::SessionProtocol *, IBILpSessionProtocol *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return;
  }
  if (!a2) {
    goto LABEL_19;
  }
  int v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      int v7 = 1;
      goto LABEL_16;
    case 2:
      int v7 = 2;
      goto LABEL_16;
    case 3:
      int v7 = 3;
LABEL_16:
      *a2 = v7;
      break;
    default:
      *a2 = 0x7FFFFFFF;
      uint64_t v3 = &qword_102419000;
      if (qword_1024193D0 == -1) {
        goto LABEL_6;
      }
      goto LABEL_20;
  }
}

_DWORD *sub_1018EBEF4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      double result = (_DWORD *)sub_1018EB998(a1, a2);
      *(void *)(a2 + 20) = *(void *)(v3 + 20);
      *(_DWORD *)(a2 + 28) = *(_DWORD *)(v3 + 28);
      *(unsigned char *)(a2 + 32) = *(unsigned char *)(v3 + 32);
      *(_DWORD *)(a2 + 36) = *(_DWORD *)(v3 + 36);
      *(unsigned char *)(a2 + 40) = *(unsigned char *)(v3 + 40);
      return result;
    }
  }
  else
  {
    a1 = sub_1018F4274();
  }
  int v5 = (_DWORD *)sub_1018F43D8(a1);
  return sub_1018EBF58(v5, v6);
}

_DWORD *sub_1018EBF58(_DWORD *result, _DWORD *a2)
{
  if (!result)
  {
    double result = (_DWORD *)sub_1018F453C();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v2 = sub_1018F46A0(result);
    return (_DWORD *)sub_1018EBF8C(v2);
  }
  if (*result <= 5u) {
    *a2 = *result;
  }
  return result;
}

void sub_1018EBF8C(uint64_t a1, int *a2, uint64_t a3)
{
  if (!a1)
  {
    a1 = sub_1018F4804();
    goto LABEL_8;
  }
  if (!a2)
  {
LABEL_8:
    a1 = sub_1018F4968(a1);
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_9:
    uint64_t v7 = sub_1018F4ACC(a1);
    sub_1018EC020(v7, v8);
    return;
  }
  int v5 = (_DWORD *)a1;
  *(unsigned char *)(a3 + 4) = *(unsigned char *)(a1 + 4);
  for (uint64_t i = 2; i != 386; i += 24)
    sub_1018EC020((uint64_t)&v5[i], a3 + i * 4);
  sub_1018EAFE8(a2, (int *)(a3 + 1544));
  sub_1018EB208(a2 + 1, (int *)(a3 + 1548));
  *(_DWORD *)(a3 + 1552) = a2[2];
  *(_DWORD *)a3 = *v5;
}

uint64_t sub_1018EC020(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      *(_OWORD *)a2 = *(_OWORD *)result;
      long long v2 = *(_OWORD *)(result + 32);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(result + 16);
      *(_OWORD *)(a2 + 32) = v2;
      *(void *)(a2 + 48) = *(void *)(result + 48);
      *(_DWORD *)(a2 + 56) = *(_DWORD *)(result + 56);
      *(_WORD *)(a2 + 60) = *(_WORD *)(result + 60);
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(result + 64);
      *(unsigned char *)(a2 + 68) = *(unsigned char *)(result + 68);
      *(_DWORD *)(a2 + 72) = *(_DWORD *)(result + 72);
      *(unsigned char *)(a2 + 76) = *(unsigned char *)(result + 76);
      *(_OWORD *)(a2 + 80) = *(_OWORD *)(result + 80);
      return result;
    }
  }
  else
  {
    double result = sub_1018F4C30();
  }
  uint64_t v3 = sub_1018F4D94(result);
  return sub_1018EC094(v3);
}

void sub_1018EC094(uint64_t a1, int *a2, uint64_t a3)
{
  if (!a1)
  {
    a1 = sub_1018F4EF8();
    goto LABEL_8;
  }
  if (!a2)
  {
LABEL_8:
    a1 = sub_1018F505C(a1);
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_9:
    uint64_t v7 = sub_1018F51C0(a1);
    sub_1018EC148(v7, v8);
    return;
  }
  uint64_t v5 = a1;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
  *(unsigned char *)(a3 + 8) = *(unsigned char *)(a1 + 8);
  sub_1018EC3E4((int *)(a1 + 12), (int *)(a3 + 12));
  for (uint64_t i = 760; i != 1080; i += 20)
    sub_1018EC148(v5 + i, a3 + i - 716);
  *(unsigned char *)(a3 + 364) = *(unsigned char *)(v5 + 1080);
  sub_1018EAFE8(a2, (int *)(a3 + 368));
  sub_1018EB208(a2 + 1, (int *)(a3 + 372));
  *(_DWORD *)(a3 + 376) = a2[2];
  *(_DWORD *)a3 = *(_DWORD *)v5;
}

void sub_1018EC148(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = sub_1018F5324();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    long long v2 = (int *)sub_1018F5488(a1);
    goto LABEL_5;
  }
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 4);
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  *(_WORD *)(a2 + 10) = *(_WORD *)(a1 + 10);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 12);
  long long v2 = (int *)(a1 + 16);
  uint64_t v3 = (int *)(a2 + 16);

LABEL_5:
  sub_1018EC1AC(v2, v3);
}

void sub_1018EC1AC(int *a1, int *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F55EC();
LABEL_22:
    sub_1018F5750(a1);
LABEL_23:
    dispatch_once(&qword_1024193D0, &stru_102345370);
    goto LABEL_14;
  }
  if (!a2) {
    goto LABEL_22;
  }
  long long v2 = a1;
  int v4 = *a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      int v5 = 1;
      goto LABEL_11;
    case 2:
      int v5 = 2;
      goto LABEL_11;
    case 3:
      int v5 = 3;
      goto LABEL_11;
    default:
      if (v4 == 254 || v4 == 255)
      {
        int v5 = 255;
LABEL_11:
        *a2 = v5;
        return;
      }
      uint64_t v3 = &qword_102419000;
      if (qword_1024193D0 != -1) {
        goto LABEL_23;
      }
      break;
  }
LABEL_14:
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v7 = *v2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345370);
    }
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpGpsDopplerUncertExt *, gnss::Emergency::Cplane::GpsDopplerUncMpsExt *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_1018EC3E4(int *a1, int *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F58B4();
LABEL_19:
    sub_1018F5A18(a1);
LABEL_20:
    dispatch_once(&qword_1024193D0, &stru_102345370);
LABEL_6:
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v6 = *v2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345370);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBIClsNetworkType *, gnss::Emergency::Cplane::ClsNetworkType *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return;
  }
  if (!a2) {
    goto LABEL_19;
  }
  long long v2 = a1;
  switch(*a1)
  {
    case 0:
      int v4 = 1;
      goto LABEL_15;
    case 1:
      int v4 = 2;
      goto LABEL_15;
    case 2:
      int v4 = 3;
LABEL_15:
      *a2 = v4;
      break;
    case 3:
      *a2 = 0;
      break;
    default:
      uint64_t v3 = &qword_102419000;
      if (qword_1024193D0 == -1) {
        goto LABEL_6;
      }
      goto LABEL_20;
  }
}

void sub_1018EC604(int *a1, int *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      sub_1018EAFE8(a1, a2);
      sub_1018EB208(v3 + 1, a2 + 1);
      a2[2] = v3[2];
      return;
    }
  }
  else
  {
    a1 = (int *)sub_1018F5B7C();
  }
  uint64_t v4 = sub_1018F5CE0(a1);
  sub_1018EC654(v4);
}

void sub_1018EC654(int *a1, _DWORD *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F5E44();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_13:
    sub_1018F5FA8(a1);
LABEL_14:
    dispatch_once(&qword_1024193D0, &stru_102345370);
    goto LABEL_8;
  }
  long long v2 = a1;
  if (*a1 == 1)
  {
    *a2 = 1;
    return;
  }
  if (!*a1)
  {
    *a2 = 0;
    return;
  }
  uint64_t v3 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v5 = *v2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345370);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpIs801LocationIndStatus *, gnss::Emergency::Cplane::Is801LocationIndStatus *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1018EC838(int *a1, _DWORD *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F610C();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_13:
    sub_1018F6270(a1);
LABEL_14:
    dispatch_once(&qword_1024193D0, &stru_102345370);
    goto LABEL_8;
  }
  long long v2 = a1;
  if (*a1 == 1)
  {
    *a2 = 1;
    return;
  }
  if (!*a1)
  {
    *a2 = 0;
    return;
  }
  uint64_t v3 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v5 = *v2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345370);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpFixType *, gnss::Emergency::Cplane::Is801FixType *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1018ECA1C(int *a1, int *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F63D4();
LABEL_22:
    sub_1018F6538(a1);
LABEL_23:
    dispatch_once(&qword_1024193D0, &stru_102345370);
LABEL_6:
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      int v5 = *v2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345370);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpDiscardedPosMsgType *, gnss::Emergency::Cplane::DiscardedPosMsgType *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return;
  }
  if (!a2) {
    goto LABEL_22;
  }
  long long v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      int v7 = 1;
      goto LABEL_19;
    case 2:
      int v7 = 2;
      goto LABEL_19;
    case 3:
      int v7 = 3;
      goto LABEL_19;
    case 4:
      int v7 = 4;
      goto LABEL_19;
    case 5:
      int v7 = 5;
      goto LABEL_19;
    case 6:
      int v7 = 6;
LABEL_19:
      *a2 = v7;
      break;
    default:
      uint64_t v3 = &qword_102419000;
      if (qword_1024193D0 == -1) {
        goto LABEL_6;
      }
      goto LABEL_23;
  }
}

void sub_1018ECC60(int *a1, _DWORD *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F669C();
    goto LABEL_14;
  }
  if (!a2)
  {
LABEL_14:
    sub_1018F6800(a1);
LABEL_15:
    dispatch_once(&qword_1024193D0, &stru_102345370);
    goto LABEL_9;
  }
  long long v2 = a1;
  int v4 = *a1;
  if (*a1 == 2 || v4 == 1)
  {
    *a2 = v4;
    return;
  }
  if (!v4)
  {
    *a2 = 0;
    return;
  }
  uint64_t v3 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    goto LABEL_15;
  }
LABEL_9:
  int v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    int v6 = *v2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345370);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpDiscardReason *, gnss::Emergency::Cplane::DiscardReason *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

int *sub_1018ECE4C(int *result, _DWORD *a2)
{
  if (!result)
  {
    double result = (int *)sub_1018F6964();
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_9:
    uint64_t v3 = sub_1018F6AC8(result);
    return (int *)sub_1018ECE8C(v3);
  }
  int v2 = *result;
  if (*result < 4 || v2 == 255) {
    *a2 = v2;
  }
  return result;
}

void sub_1018ECE8C(int *a1, int *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F6C2C();
LABEL_23:
    sub_1018F6D90(a1);
LABEL_24:
    dispatch_once(&qword_1024193D0, &stru_102345370);
LABEL_6:
    int v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v5 = *v2;
      *(_DWORD *)uint64_t buf = 67240192;
      int v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unhandled enum value,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345370);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpAbortReason *, gnss::Emergency::Cplane::AbortReason *)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    return;
  }
  if (!a2) {
    goto LABEL_23;
  }
  int v2 = a1;
  switch(*a1)
  {
    case 0:
      *a2 = 0;
      return;
    case 1:
      int v7 = 1;
      goto LABEL_20;
    case 2:
      int v7 = 2;
      goto LABEL_20;
    case 3:
      int v7 = 3;
      goto LABEL_20;
    case 4:
      int v7 = 4;
      goto LABEL_20;
    case 5:
      int v7 = 5;
      goto LABEL_20;
    case 6:
      int v7 = 6;
      goto LABEL_20;
    case 7:
      int v7 = 7;
LABEL_20:
      *a2 = v7;
      break;
    default:
      uint64_t v3 = &qword_102419000;
      if (qword_1024193D0 == -1) {
        goto LABEL_6;
      }
      goto LABEL_24;
  }
}

void sub_1018ED0DC(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      sub_1018EB208((int *)(a1 + 4), (int *)(a2 + 4));
      sub_1018EAFE8((int *)(v3 + 8), (int *)(a2 + 8));
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
      *(_DWORD *)a2 = *(_DWORD *)v3;
      sub_1018ECE8C((int *)(v3 + 16), (int *)(a2 + 16));
      *(void *)(a2 + 20) = *(void *)(v3 + 20);
      return;
    }
  }
  else
  {
    a1 = sub_1018F6EF4();
  }
  int v4 = (int *)sub_1018F7058(a1);
  sub_1018ED14C(v4, v5);
}

void sub_1018ED14C(int *a1, int *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      sub_1018EBCCC(a1, a2);
      sub_1018EBA98(v3 + 1, a2 + 1);
      a2[2] = v3[2];
      return;
    }
  }
  else
  {
    a1 = (int *)sub_1018F71BC();
  }
  int v4 = (int *)sub_1018F7320(a1);
  sub_1018ED19C(v4, v5);
}

int *sub_1018ED19C(int *result, _DWORD *a2)
{
  if (!result)
  {
    double result = (int *)sub_1018F7484();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v3 = sub_1018F75E8(result);
    return (int *)sub_1018ED1DC(v3);
  }
  uint64_t v2 = *result;
  if (v2 <= 4) {
    *a2 = dword_101E4631C[v2];
  }
  return result;
}

uint64_t sub_1018ED1DC(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    double result = sub_1018F774C();
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_9:
    uint64_t v4 = sub_1018F78B0(result);
    return sub_1018ED258(v4);
  }
  uint64_t v2 = 0;
  *(_WORD *)a2 = *(_WORD *)result;
  *(_DWORD *)(a2 + 2) = *(_DWORD *)(result + 2);
  do
  {
    *(unsigned char *)(a2 + 6 + v2) = *(unsigned char *)(result + 6 + v2);
    ++v2;
  }
  while (v2 != 15);
  for (uint64_t i = 0; i != 15; ++i)
    *(unsigned char *)(a2 + 21 + i) = *(unsigned char *)(result + 21 + i);
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(result + 36);
  return result;
}

void sub_1018ED258(_WORD *a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = (_WORD *)sub_1018F7A14();
    goto LABEL_9;
  }
  if (!a2)
  {
LABEL_9:
    int v7 = (_DWORD *)sub_1018F7B78(a1);
    sub_1018ED2F4(v7, v8);
    return;
  }
  uint64_t v3 = a1;
  uint64_t v4 = 0;
  int v5 = a1 + 2;
  *(_WORD *)a2 = *a1;
  do
  {
    sub_1018EA960((int *)&v5[v4], (int *)(a2 + 4 + v4 * 2));
    v4 += 2;
  }
  while (v4 != 16);
  *(_DWORD *)(a2 + 36) = *((_DWORD *)v3 + 9);
  *(_WORD *)(a2 + 40) = v3[20];
  for (uint64_t i = 22; i != 918; i += 112)
    sub_1018EA8E4((int *)&v3[i], a2 + i * 2);
}

_DWORD *sub_1018ED2F4(_DWORD *result, _DWORD *a2)
{
  if (!result)
  {
    double result = (_DWORD *)sub_1018F7CDC();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v2 = sub_1018F7E40(result);
    return (_DWORD *)sub_1018ED328(v2);
  }
  if (*result <= 4u) {
    *a2 = *result;
  }
  return result;
}

void sub_1018ED328(int *a1, _DWORD *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F7FA4();
    goto LABEL_13;
  }
  if (!a2)
  {
LABEL_13:
    sub_1018F8108(a1);
LABEL_14:
    dispatch_once(&qword_1024193D0, &stru_102345370);
    goto LABEL_8;
  }
  uint64_t v2 = a1;
  if (*a1 == 1)
  {
    *a2 = 1;
    return;
  }
  if (!*a1)
  {
    *a2 = 0;
    return;
  }
  uint64_t v3 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    goto LABEL_14;
  }
LABEL_8:
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v5 = *v2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345370);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLIceTranslator::translate(const IBILpLocationRequestStatus *, gnss::Emergency::Cplane::LocationRequestStatus *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_1018ED50C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      *(_WORD *)(a2 + 4) = *(_WORD *)(a1 + 4);
      sub_1018EAC10((int *)(a1 + 8), (_DWORD *)(a2 + 8));
      *(_WORD *)(a2 + 12) = *(_WORD *)(v3 + 12);
      *(unsigned char *)(a2 + 14) = *(unsigned char *)(v3 + 14);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 20);
      *(unsigned char *)(a2 + 20) = *(unsigned char *)(v3 + 28);
      *(_WORD *)(a2 + 21) = *(_WORD *)(v3 + 29);
      *(void *)(a2 + 24) = *(void *)(v3 + 36);
      *(_WORD *)(a2 + 32) = *(_WORD *)(v3 + 44);
      *(_WORD *)(a2 + 34) = *(_WORD *)(v3 + 64);
      *(unsigned char *)(a2 + 36) = *(unsigned char *)(v3 + 66);
      sub_1018EB208((int *)(v3 + 68), (int *)(a2 + 40));
      *(_DWORD *)(a2 + 44) = *(_DWORD *)(v3 + 72);
      *(_DWORD *)a2 = *(_DWORD *)v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018F826C();
  }
  uint64_t v4 = sub_1018F83D0(a1);
  sub_1018ED5B8(v4);
}

void sub_1018ED5B8(uint64_t a1, int *a2, uint64_t a3)
{
  if (!a1)
  {
    a1 = sub_1018F8534();
    goto LABEL_6;
  }
  if (!a2)
  {
LABEL_6:
    a1 = sub_1018F8698(a1);
    goto LABEL_7;
  }
  if (a3)
  {
    int v5 = (_DWORD *)a1;
    *(_DWORD *)(a3 + 4) = *(_DWORD *)(a1 + 4);
    *(void *)(a3 + 8) = *(void *)(a1 + 8);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 16);
    *(_WORD *)(a3 + 20) = *(_WORD *)(a1 + 20);
    sub_1018EAFE8(a2, (int *)(a3 + 24));
    sub_1018EB208(a2 + 1, (int *)(a3 + 28));
    *(_DWORD *)(a3 + 32) = a2[2];
    *(_DWORD *)a3 = *v5;
    return;
  }
LABEL_7:
  uint64_t v6 = sub_1018F87FC(a1);
  sub_1018ED648(v6, v7);
}

uint64_t sub_1018ED648(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      *(void *)a2 = *(void *)result;
      *(_WORD *)(a2 + 8) = *(_WORD *)(result + 8);
      *(_DWORD *)(a2 + 10) = *(_DWORD *)(result + 10);
      *(unsigned char *)(a2 + 14) = *(unsigned char *)(result + 14);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(result + 16);
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 20);
      return result;
    }
  }
  else
  {
    double result = sub_1018F8960();
  }
  uint64_t v2 = sub_1018F8AC4(result);
  return sub_1018ED69C(v2, v3);
}

uint64_t sub_1018ED69C(uint64_t result, _DWORD *a2)
{
  int v2 = *(_DWORD *)(result + 4);
  *a2 = 0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1018ED6A8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  *(unsigned char *)a2 = *(_DWORD *)result == 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 4);
  *(void *)(a2 + 24) = *(void *)(result + 20);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 28);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(result + 32);
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(result + 48);
  do
  {
    *(_DWORD *)(a2 + 60 + v2) = *(_DWORD *)(result + 52 + v2);
    v2 += 4;
  }
  while (v2 != 540);
  for (uint64_t i = 0; i != 270; i += 2)
    *(_WORD *)(a2 + 600 + i) = *(_WORD *)(result + 592 + i);
  uint64_t v4 = 0;
  *(unsigned char *)(a2 + 36) = *(_DWORD *)(result + 864) != 0;
  *(_WORD *)(a2 + 38) = *(_WORD *)(result + 868);
  do
  {
    *(_WORD *)(a2 + 872 + v4) = *(_WORD *)(result + 870 + v4);
    v4 += 2;
  }
  while (v4 != 16);
  *(_WORD *)(a2 + 888) = *(_WORD *)(result + 886);
  *(_DWORD *)(a2 + 890) = *(_DWORD *)(result + 892);
  return result;
}

void sub_1018ED770(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = a1;
      *(_DWORD *)a2 = *(_DWORD *)a1;
      *(_WORD *)(a2 + 16) = *(_WORD *)(a1 + 16);
      sub_1018EC604((int *)(a1 + 4), (int *)(a2 + 4));
      *(unsigned char *)(a2 + 18) = *(unsigned char *)(v3 + 18);
      return;
    }
  }
  else
  {
    a1 = sub_1018F8C28();
  }
  uint64_t v4 = sub_1018F8D8C(a1);
  sub_1018ED7C8(v4, v5);
}

void sub_1018ED7C8(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
}

void sub_1018ED7D0(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 4);
      sub_1018ED14C((int *)(a1 + 8), a2 + 2);
      sub_1018ED868((uint64_t)(v3 + 5), (uint64_t)(a2 + 5));
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018F8EF0();
  }
  uint64_t v4 = (void *)sub_1018F9054(a1);
  sub_1018ED82C(v4, v5);
}

void sub_1018ED82C(void *a1, void *a2)
{
  if (!a1)
  {
    a1 = (void *)sub_1018F91B8();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v5 = sub_1018F931C(a1);
    sub_1018ED868(v5);
    return;
  }
  uint64_t v3 = *a1;
  uint64_t v2 = (int *)(a1 + 1);
  *a2 = v3;
  uint64_t v4 = (int *)(a2 + 1);

  sub_1018EC604(v2, v4);
}

uint64_t sub_1018ED868(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = sub_1018F9480();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v7 = sub_1018F95E4(a1);
    return sub_1018ED90C(v7, v8);
  }
  uint64_t v3 = a1;
  *(unsigned char *)a2 = *(unsigned char *)a1;
  *(_DWORD *)(a2 + 1040) = *(unsigned __int8 *)(a1 + 780);
  sub_1018ED970((int *)(a1 + 784), (_DWORD *)(a2 + 1044));
  *(_DWORD *)(a2 + 1028) = *(unsigned __int8 *)(v3 + 770);
  *(_WORD *)(a2 + 1032) = *(_WORD *)(v3 + 772);
  *(_DWORD *)(a2 + 1034) = *(_DWORD *)(v3 + 774);
  *(unsigned char *)(a2 + 1038) = *(unsigned char *)(v3 + 778);
  uint64_t v4 = a2 + 4;
  for (uint64_t i = 2; i != 770; i += 12)
  {
    uint64_t result = sub_1018ED90C(v3 + i, v4);
    v4 += 16;
  }
  return result;
}

uint64_t sub_1018ED90C(uint64_t result, uint64_t a2)
{
  if (!result)
  {
    uint64_t result = sub_1018F9748();
    goto LABEL_10;
  }
  if (!a2)
  {
LABEL_10:
    uint64_t v4 = sub_1018F98AC(result);
    return sub_1018ED970(v4);
  }
  HIDWORD(v2) = *(_DWORD *)(result + 8);
  LODWORD(v2) = HIDWORD(v2);
  *(_DWORD *)(a2 + 6) = v2 >> 16;
  *(_DWORD *)(a2 + 12) = 0;
  if (*(unsigned char *)(result + 6) && *(unsigned char *)(result + 7)) {
    *(_DWORD *)(a2 + 12) = 1;
  }
  for (uint64_t i = 0; i != 6; ++i)
    *(unsigned char *)(a2 + i) = *(unsigned char *)(result + i);
  return result;
}

void sub_1018ED970(int *a1, _DWORD *a2)
{
  if (!a1)
  {
    a1 = (int *)sub_1018F9A10();
    goto LABEL_12;
  }
  if (!a2)
  {
LABEL_12:
    sub_1018F9B74(a1);
LABEL_13:
    dispatch_once(&qword_1024193D0, &stru_102345370);
    goto LABEL_7;
  }
  unint64_t v2 = a1;
  int v4 = *a1;
  if (*a1 == 2 || v4 == 1)
  {
    *a2 = v4;
    return;
  }
  uint64_t v3 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v6 = *v2;
    *(_DWORD *)uint64_t buf = 67240192;
    int v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#Warning,Unhandled enum value,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345370);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLIceTranslator::translate(const gnss::Emergency::Cplane::WlanErrorCause *, IBILpWlanErrorCause *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
}

void sub_1018EDB50(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    if (a2)
    {
      uint64_t v3 = (_DWORD *)a1;
      a2[1] = *(_DWORD *)(a1 + 4);
      sub_1018EC604((int *)(a1 + 8), a2 + 2);
      *a2 = *v3;
      return;
    }
  }
  else
  {
    a1 = sub_1018F9CD8();
  }
  uint64_t v4 = sub_1018F9E3C(a1);
  sub_1018EDBA0(v4);
}

uint64_t sub_1018EDBA0(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    a1 = sub_1018F9FA0();
    goto LABEL_7;
  }
  if (!a2)
  {
LABEL_7:
    uint64_t v6 = sub_1018FA104(a1);
    return sub_1018EDC34(v6, v7);
  }
  uint64_t v3 = a1;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 4);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 8);
  sub_1018ED14C((int *)(a1 + 12), (int *)(a2 + 16));
  sub_1018EADFC((_DWORD *)(v3 + 24), a2 + 28);
  uint64_t result = sub_1018EDC34(v3 + 480, a2 + 484);
  uint64_t v5 = *(int *)(v3 + 524);
  if (v5 <= 2) {
    *(_DWORD *)(a2 + 532) = dword_101E46334[v5];
  }
  *(_DWORD *)(a2 + 536) = *(unsigned __int8 *)(v3 + 528);
  *(_DWORD *)a2 = *(_DWORD *)v3;
  return result;
}

uint64_t sub_1018EDC34(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      *(void *)a2 = *(void *)result;
      *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
      *(_WORD *)(a2 + 9) = *(_WORD *)(result + 9);
      int v2 = *(unsigned __int8 *)(result + 16);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(result + 12);
      *(_DWORD *)(a2 + 16) = v2;
      *(_DWORD *)(a2 + 20) = *(_DWORD *)(result + 18);
      *(unsigned char *)(a2 + 24) = *(unsigned char *)(result + 22);
      int v3 = *(_DWORD *)(result + 28);
      *(_DWORD *)(a2 + 28) = *(unsigned __int8 *)(result + 24);
      *(_DWORD *)(a2 + 32) = v3;
      *(_WORD *)(a2 + 36) = *(_WORD *)(result + 32);
      *(_DWORD *)(a2 + 40) = *(unsigned __int8 *)(result + 36);
      *(_WORD *)(a2 + 44) = *(_WORD *)(result + 38);
      *(unsigned char *)(a2 + 46) = *(unsigned char *)(result + 40);
      return result;
    }
  }
  else
  {
    uint64_t result = sub_1018FA268();
  }
  uint64_t v4 = sub_1018FA3CC(result);
  return sub_1018EDCB8(v4);
}

uint64_t sub_1018EDCB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1018EDBA0(a1, a2);
}

void sub_1018EDCC0(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

#error "1018EDD68: call analysis failed (funcsize=71)"

#error "1018EDECC: call analysis failed (funcsize=71)"

#error "1018EE030: call analysis failed (funcsize=71)"

#error "1018EE194: call analysis failed (funcsize=71)"

#error "1018EE2F8: call analysis failed (funcsize=71)"

#error "1018EE45C: call analysis failed (funcsize=71)"

#error "1018EE5C0: call analysis failed (funcsize=71)"

#error "1018EE724: call analysis failed (funcsize=71)"

#error "1018EE888: call analysis failed (funcsize=71)"

#error "1018EE9EC: call analysis failed (funcsize=71)"

#error "1018EEB50: call analysis failed (funcsize=71)"

#error "1018EECB4: call analysis failed (funcsize=71)"

#error "1018EEE18: call analysis failed (funcsize=71)"

#error "1018EEF7C: call analysis failed (funcsize=71)"

#error "1018EF0E0: call analysis failed (funcsize=71)"

#error "1018EF244: call analysis failed (funcsize=71)"

#error "1018EF3A8: call analysis failed (funcsize=71)"

#error "1018EF50C: call analysis failed (funcsize=71)"

#error "1018EF670: call analysis failed (funcsize=71)"

#error "1018EF7D4: call analysis failed (funcsize=71)"

#error "1018EF938: call analysis failed (funcsize=71)"

#error "1018EFA9C: call analysis failed (funcsize=71)"

#error "1018EFC00: call analysis failed (funcsize=71)"

#error "1018EFD64: call analysis failed (funcsize=71)"

#error "1018EFEC8: call analysis failed (funcsize=71)"

#error "1018F002C: call analysis failed (funcsize=71)"

#error "1018F0190: call analysis failed (funcsize=71)"

#error "1018F02F4: call analysis failed (funcsize=71)"

#error "1018F0458: call analysis failed (funcsize=71)"

#error "1018F05BC: call analysis failed (funcsize=71)"

#error "1018F0720: call analysis failed (funcsize=71)"

#error "1018F0884: call analysis failed (funcsize=71)"

#error "1018F09E8: call analysis failed (funcsize=71)"

#error "1018F0B4C: call analysis failed (funcsize=71)"

#error "1018F0CB0: call analysis failed (funcsize=71)"

#error "1018F0E14: call analysis failed (funcsize=71)"

#error "1018F0F78: call analysis failed (funcsize=71)"

#error "1018F10DC: call analysis failed (funcsize=71)"

#error "1018F1240: call analysis failed (funcsize=71)"

#error "1018F13A4: call analysis failed (funcsize=71)"

#error "1018F1508: call analysis failed (funcsize=71)"

#error "1018F166C: call analysis failed (funcsize=71)"

#error "1018F17D0: call analysis failed (funcsize=71)"

#error "1018F1934: call analysis failed (funcsize=71)"

#error "1018F1A98: call analysis failed (funcsize=71)"

#error "1018F1BFC: call analysis failed (funcsize=71)"

#error "1018F1D60: call analysis failed (funcsize=71)"

#error "1018F1EC4: call analysis failed (funcsize=71)"

#error "1018F2028: call analysis failed (funcsize=71)"

#error "1018F218C: call analysis failed (funcsize=71)"

#error "1018F22F0: call analysis failed (funcsize=71)"

#error "1018F2454: call analysis failed (funcsize=71)"

#error "1018F25B8: call analysis failed (funcsize=71)"

#error "1018F271C: call analysis failed (funcsize=71)"

#error "1018F2880: call analysis failed (funcsize=71)"

#error "1018F29E4: call analysis failed (funcsize=71)"

#error "1018F2B48: call analysis failed (funcsize=71)"

#error "1018F2CAC: call analysis failed (funcsize=71)"

#error "1018F2E10: call analysis failed (funcsize=71)"

#error "1018F2F74: call analysis failed (funcsize=71)"

#error "1018F30D8: call analysis failed (funcsize=71)"

#error "1018F323C: call analysis failed (funcsize=71)"

#error "1018F33A0: call analysis failed (funcsize=71)"

#error "1018F3504: call analysis failed (funcsize=71)"

#error "1018F3668: call analysis failed (funcsize=71)"

#error "1018F37CC: call analysis failed (funcsize=71)"

#error "1018F3930: call analysis failed (funcsize=71)"

#error "1018F3A94: call analysis failed (funcsize=71)"

#error "1018F3BF8: call analysis failed (funcsize=71)"

#error "1018F3D5C: call analysis failed (funcsize=71)"

#error "1018F3EC0: call analysis failed (funcsize=71)"

#error "1018F4024: call analysis failed (funcsize=71)"

#error "1018F4188: call analysis failed (funcsize=71)"

#error "1018F42EC: call analysis failed (funcsize=71)"

#error "1018F4450: call analysis failed (funcsize=71)"

#error "1018F45B4: call analysis failed (funcsize=71)"

#error "1018F4718: call analysis failed (funcsize=71)"

#error "1018F487C: call analysis failed (funcsize=71)"

#error "1018F49E0: call analysis failed (funcsize=71)"

#error "1018F4B44: call analysis failed (funcsize=71)"

#error "1018F4CA8: call analysis failed (funcsize=71)"

#error "1018F4E0C: call analysis failed (funcsize=71)"

#error "1018F4F70: call analysis failed (funcsize=71)"

#error "1018F50D4: call analysis failed (funcsize=71)"

#error "1018F5238: call analysis failed (funcsize=71)"

#error "1018F539C: call analysis failed (funcsize=71)"

#error "1018F5500: call analysis failed (funcsize=71)"

#error "1018F5664: call analysis failed (funcsize=71)"

#error "1018F57C8: call analysis failed (funcsize=71)"

#error "1018F592C: call analysis failed (funcsize=71)"

#error "1018F5A90: call analysis failed (funcsize=71)"

#error "1018F5BF4: call analysis failed (funcsize=71)"

#error "1018F5D58: call analysis failed (funcsize=71)"

#error "1018F5EBC: call analysis failed (funcsize=71)"

#error "1018F6020: call analysis failed (funcsize=71)"

#error "1018F6184: call analysis failed (funcsize=71)"

#error "1018F62E8: call analysis failed (funcsize=71)"

#error "1018F644C: call analysis failed (funcsize=71)"

#error "1018F65B0: call analysis failed (funcsize=71)"

#error "1018F6714: call analysis failed (funcsize=71)"

#error "1018F6878: call analysis failed (funcsize=71)"

#error "1018F69DC: call analysis failed (funcsize=71)"

#error "1018F6B40: call analysis failed (funcsize=71)"

#error "1018F6CA4: call analysis failed (funcsize=71)"

#error "1018F6E08: call analysis failed (funcsize=71)"

#error "1018F6F6C: call analysis failed (funcsize=71)"

#error "1018F70D0: call analysis failed (funcsize=71)"

#error "1018F7234: call analysis failed (funcsize=71)"

#error "1018F7398: call analysis failed (funcsize=71)"

#error "1018F74FC: call analysis failed (funcsize=71)"

#error "1018F7660: call analysis failed (funcsize=71)"

#error "1018F77C4: call analysis failed (funcsize=71)"

#error "1018F7928: call analysis failed (funcsize=71)"

#error "1018F7A8C: call analysis failed (funcsize=71)"

#error "1018F7BF0: call analysis failed (funcsize=71)"

#error "1018F7D54: call analysis failed (funcsize=71)"

#error "1018F7EB8: call analysis failed (funcsize=71)"

#error "1018F801C: call analysis failed (funcsize=71)"

#error "1018F8180: call analysis failed (funcsize=71)"

#error "1018F82E4: call analysis failed (funcsize=71)"

#error "1018F8448: call analysis failed (funcsize=71)"

#error "1018F85AC: call analysis failed (funcsize=71)"

#error "1018F8710: call analysis failed (funcsize=71)"

#error "1018F8874: call analysis failed (funcsize=71)"

#error "1018F89D8: call analysis failed (funcsize=71)"

#error "1018F8B3C: call analysis failed (funcsize=71)"

#error "1018F8CA0: call analysis failed (funcsize=71)"

#error "1018F8E04: call analysis failed (funcsize=71)"

#error "1018F8F68: call analysis failed (funcsize=71)"

#error "1018F90CC: call analysis failed (funcsize=71)"

#error "1018F9230: call analysis failed (funcsize=71)"

#error "1018F9394: call analysis failed (funcsize=71)"

#error "1018F94F8: call analysis failed (funcsize=71)"

#error "1018F965C: call analysis failed (funcsize=71)"

#error "1018F97C0: call analysis failed (funcsize=71)"

#error "1018F9924: call analysis failed (funcsize=71)"

#error "1018F9A88: call analysis failed (funcsize=71)"

#error "1018F9BEC: call analysis failed (funcsize=71)"

#error "1018F9D50: call analysis failed (funcsize=71)"

#error "1018F9EB4: call analysis failed (funcsize=71)"

#error "1018FA018: call analysis failed (funcsize=71)"

#error "1018FA17C: call analysis failed (funcsize=71)"

#error "1018FA2E0: call analysis failed (funcsize=71)"

#error "1018FA444: call analysis failed (funcsize=71)"

uint64_t sub_1018FA530(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  long long v8 = _Q0;
  *(_OWORD *)a1 = _Q0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_101171D90(a1 + 32);
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v8;
  *(void *)(a1 + 144) = 0xBFF0000000000000;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 208) = v8;
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = 0xBFF0000000000000;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 312) = 1;
  *(_OWORD *)(a1 + 320) = xmmword_101D1C570;
  *(void *)(a1 + 336) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 344) = 0;
  sub_100B5B6AC((_OWORD *)(a1 + 352));
  *(void *)(a1 + 536) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 544) = 0;
  *(void *)(a1 + 560) = 0;
  *(void *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 568) = 0;
  *(void *)(a1 + 640) = 0;
  *(void *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(void *)(a1 + 960) = 0;
  *(void *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(void *)(a1 + 1040) = 0;
  *(void *)(a1 + 1032) = 0;
  *(_DWORD *)(a1 + 1048) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1112) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(void *)(a1 + 1200) = 0;
  *(void *)(a1 + 1192) = 0;
  *(_DWORD *)(a1 + 1208) = 0;
  *(_DWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 704) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_DWORD *)(a1 + 784) = 0;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_DWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_DWORD *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_DWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_DWORD *)(a1 + 1184) = 0;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_OWORD *)(a1 + 1152) = 0u;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(_OWORD *)(a1 + 1260) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1216) = 0u;
  sub_1018FA734((__n128 *)a1);
  return a1;
}

void sub_1018FA6F4(_Unwind_Exception *a1)
{
  sub_10190D0F0(v3);
  sub_100ACE2BC(v2);
  uint64_t v6 = *(void **)(v4 + 56);
  if (v6)
  {
    v1[37] = v6;
    operator delete(v6);
  }
  sub_1018FA8E4(v1);
  _Unwind_Resume(a1);
}

void sub_1018FA734(__n128 *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,RhythmicScaled,resetting odometer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::reset()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  ++a1[79].n128_u32[2];
  sub_1018FF3A8(a1);
  a1[19].n128_u8[8] = 1;
}

void *sub_1018FA8E4(void *a1)
{
  uint64_t v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  return a1;
}

__n128 sub_1018FA928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 32))
  {
    uint64_t v4 = *(void *)(a3 + 16);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)a3;
    *(void *)(a1 + 336) = v4;
  }
  sub_1018FA970(a1 + 152, a2);
  __asm { FMOV            V0.2D, #-1.0 }
  *(__n128 *)a1 = result;
  return result;
}

double sub_1018FA970(uint64_t a1, uint64_t a2)
{
  long double v4 = *(double *)(a2 + 64);
  *(void *)a1 = *(void *)(a2 + 56);
  sub_10005B720(v4);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 176);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 72) = result;
  return result;
}

void sub_1018FA9C8(uint64_t a1)
{
  double v2 = sub_10016C458();
  if (*(unsigned char *)(a1 + 312))
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 168);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 184);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a1 + 200);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 216);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 152);
    *(unsigned char *)(a1 + 312) = 0;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 72);
      uint64_t v5 = *(void *)(a1 + 80);
      uint64_t v7 = *(void *)(a1 + 88);
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v9 = *(void *)(a1 + 136);
      uint64_t v8 = *(void *)(a1 + 144);
      uint64_t v10 = *(void *)(a1 + 104);
      uint64_t v11 = *(void *)(a1 + 112);
      uint64_t v13 = *(void *)(a1 + 120);
      uint64_t v12 = *(void *)(a1 + 128);
      uint64_t v14 = *(void *)(a1 + 320);
      uint64_t v15 = *(void *)(a1 + 328);
      uint64_t v16 = *(void *)(a1 + 336);
      *(_DWORD *)uint64_t buf = 134352129;
      uint64_t v61 = v8;
      __int16 v62 = 2049;
      uint64_t v63 = v4;
      __int16 v64 = 2049;
      uint64_t v65 = v5;
      __int16 v66 = 2050;
      uint64_t v67 = v6;
      __int16 v68 = 2050;
      uint64_t v69 = v7;
      __int16 v70 = 2050;
      uint64_t v71 = v10;
      __int16 v72 = 2050;
      uint64_t v73 = v12;
      __int16 v74 = 2050;
      uint64_t v75 = v9;
      __int16 v76 = 2050;
      uint64_t v77 = v11;
      __int16 v78 = 2050;
      uint64_t v79 = v13;
      __int16 v80 = 2050;
      uint64_t v81 = v14;
      __int16 v82 = 2050;
      uint64_t v83 = v15;
      __int16 v84 = 2050;
      uint64_t v85 = v16;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,ScaledOdom,prevPos,%{public}.3lf,qualified fix received,LL,%{private}.8lf,%{private}.8lf,hunc,%{public}.2lf,altitude,%{public}.2lf,altUnc,%{public}.2lf,course,%{public}.2lf,courseUnc,%{public}.2lf,speed,%{public}.2lf,speedUnc,%{public}.2lf,straightnessTimeStamp,%{public}.2lf,straightnessMetric,%{public}.4lf,straightnessConfidence,%{public}.4lf", buf, 0x84u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_33:
        double v57 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateDistanceAndBatchedLocations()", "%s\n", v57);
        if (v57 != (char *)buf) {
          free(v57);
        }
        return;
      }
LABEL_43:
      dispatch_once(&qword_1024193D0, &stru_102345420);
      goto LABEL_33;
    }
  }
  else
  {
    double v17 = v2;
    if (sub_1018FB340((double *)(a1 + 72)) && (int v18 = (_OWORD *)(a1 + 152), sub_1018FB340((double *)(a1 + 152))))
    {
      if (*(double *)(a1 + 536) < 0.0) {
        *(double *)(a1 + 536) = sub_10016C458();
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      long long v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = *(void *)(a1 + 152);
        uint64_t v21 = *(void *)(a1 + 160);
        uint64_t v23 = *(void *)(a1 + 168);
        uint64_t v22 = *(void *)(a1 + 176);
        uint64_t v25 = *(void *)(a1 + 216);
        uint64_t v24 = *(void *)(a1 + 224);
        uint64_t v26 = *(void *)(a1 + 184);
        uint64_t v27 = *(void *)(a1 + 192);
        uint64_t v29 = *(void *)(a1 + 200);
        uint64_t v28 = *(void *)(a1 + 208);
        uint64_t v30 = *(void *)(a1 + 320);
        uint64_t v31 = *(void *)(a1 + 328);
        uint64_t v32 = *(void *)(a1 + 336);
        *(_DWORD *)uint64_t buf = 134352129;
        uint64_t v61 = v24;
        __int16 v62 = 2049;
        uint64_t v63 = v20;
        __int16 v64 = 2049;
        uint64_t v65 = v21;
        __int16 v66 = 2050;
        uint64_t v67 = v22;
        __int16 v68 = 2050;
        uint64_t v69 = v23;
        __int16 v70 = 2050;
        uint64_t v71 = v26;
        __int16 v72 = 2050;
        uint64_t v73 = v28;
        __int16 v74 = 2050;
        uint64_t v75 = v25;
        __int16 v76 = 2050;
        uint64_t v77 = v27;
        __int16 v78 = 2050;
        uint64_t v79 = v29;
        __int16 v80 = 2050;
        uint64_t v81 = v30;
        __int16 v82 = 2050;
        uint64_t v83 = v31;
        __int16 v84 = 2050;
        uint64_t v85 = v32;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,ScaledOdom,latestPos,%{public}.3lf,qualified fix received,LL,%{private}.8lf,%{private}.8lf,hunc,%{public}.2lf,altitude,%{public}.2lf,altUnc,%{public}.2lf,course,%{public}.2lf,courseUnc,%{public}.2lf,speed,%{public}.2lf,speedUnc,%{public}.2lf,straightnessTimeStamp,%{public}.2lf,straightnessMetric,%{public}.4lf,straightnessConfidence,%{public}.4lf", buf, 0x84u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        double v58 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateDistanceAndBatchedLocations()", "%s\n", v58);
        if (v58 != (char *)buf) {
          free(v58);
        }
      }
      *(double *)a1 = sub_1018FB390((__n128 *)a1, (double *)(a1 + 72), (double *)(a1 + 152), (double *)(a1 + 320), a1 + 536);
      sub_1018FB6C4(a1);
      float64x2_t v33 = vld1q_dup_f64((const double *)a1);
      *(float64x2_t *)(a1 + 16) = vaddq_f64(v33, *(float64x2_t *)(a1 + 16));
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v34 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v35 = *(void *)a1;
        uint64_t v37 = *(void *)(a1 + 16);
        uint64_t v36 = *(void *)(a1 + 24);
        uint64_t v38 = *(void *)(a1 + 144);
        uint64_t v39 = *(void *)(a1 + 224);
        *(_DWORD *)uint64_t buf = 134350080;
        uint64_t v61 = v36;
        __int16 v62 = 2050;
        uint64_t v63 = v35;
        __int16 v64 = 2050;
        uint64_t v65 = v37;
        __int16 v66 = 2050;
        uint64_t v67 = v38;
        __int16 v68 = 2050;
        uint64_t v69 = v39;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,greatestD,%{public}.2lf,deltaGreatestD,%{public}.2lf,totalScaledOdometerDistance,%{public}.2lf,startTime,%{public}.1lf,endTime,%{public}.1lf", buf, 0x34u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        double v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateDistanceAndBatchedLocations()", "%s\n", v59);
        if (v59 != (char *)buf) {
          free(v59);
        }
      }
      sub_1018FC724(a1);
      long long v40 = *(_OWORD *)(a1 + 200);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 184);
      *(_OWORD *)(a1 + 120) = v40;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 216);
      long long v41 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)(a1 + 72) = *v18;
      *(_OWORD *)(a1 + 88) = v41;
      *(void *)(a1 + 160) = 0;
      *(void *)(a1 + 168) = 0;
      *(void *)int v18 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 176) = _Q0;
      *(_OWORD *)(a1 + 192) = _Q0;
      *(_OWORD *)(a1 + 208) = _Q0;
      double v47 = 0.0;
      *(void *)(a1 + 224) = 0xBFF0000000000000;
      if (v17 >= 0.0) {
        double v47 = vabdd_f64(sub_10016C458(), v17) * 1000.0;
      }
      sub_10076AE78((char *)(a1 + 1184), v47);
      sub_1018FC77C((uint64_t *)(a1 + 536));
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      __int16 v48 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v49 = *(void *)(a1 + 72);
        uint64_t v50 = *(void *)(a1 + 80);
        uint64_t v51 = *(void *)(a1 + 88);
        uint64_t v52 = *(void *)(a1 + 144);
        uint64_t v53 = *(void *)(a1 + 152);
        uint64_t v54 = *(void *)(a1 + 160);
        uint64_t v55 = *(void *)(a1 + 168);
        uint64_t v56 = *(void *)(a1 + 224);
        *(_DWORD *)uint64_t buf = 134285313;
        uint64_t v61 = v49;
        __int16 v62 = 2049;
        uint64_t v63 = v50;
        __int16 v64 = 2049;
        uint64_t v65 = v51;
        __int16 v66 = 2050;
        uint64_t v67 = v52;
        __int16 v68 = 2049;
        uint64_t v69 = v53;
        __int16 v70 = 2049;
        uint64_t v71 = v54;
        __int16 v72 = 2049;
        uint64_t v73 = v55;
        __int16 v74 = 2050;
        uint64_t v75 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,invalid co-ordinates or altitude,%{private}.7lf,%{private}.7lf,%{private}.3lf,%{public}.6lf,%{private}.7lf,%{private}.7lf,%{private}.3lf,%{public}.6lf", buf, 0x52u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_33;
        }
        goto LABEL_43;
      }
    }
  }
}

BOOL sub_1018FB340(double *a1)
{
  if (sub_1000EF668(*a1, a1[1])) {
    return 0;
  }
  BOOL result = sub_1000EF68C(*a1, a1[1]);
  if (result) {
    return sub_1000F0E28(a1[2]);
  }
  return result;
}

double sub_1018FB390(__n128 *a1, double *a2, double *a3, double *a4, uint64_t a5)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  long double v25 = -1.0;
  sub_1018FCFF0(a1, (uint64_t)a2, (uint64_t)a3, a4, (double **)&v26, a5, &v25);
  *(_DWORD *)&v22[8] = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  unint64_t v10 = (unint64_t)(v27 - (unsigned char *)v26) >> 3;
  *(void *)uint64_t v22 = v10;
  sub_1018FDD24((uint64_t)a1, a2, a3, (unsigned int *)v22, (uint64_t)&v22[4], (uint64_t)a4, a5, v25);
  uint64_t v11 = *(double **)&v22[4];
  unint64_t v12 = ((unint64_t)v23 - *(void *)&v22[4]) >> 3;
  if (v10 && v12 && v10 == v12)
  {
    double v13 = 0.0;
    if (*(double **)&v22[4] != v23)
    {
      uint64_t v14 = (double *)v26;
      do
      {
        double v15 = *v11++;
        double v16 = v15;
        double v17 = *v14++;
        double v13 = v13 + v16 * v17;
      }
      while (v11 != v23);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67240448;
      int v34 = v10;
      __int16 v35 = 1026;
      int v36 = v12;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "GPSODOM,Rhythmic,featuresAndModelMisMatch,featureCount,%{public}u,numberOfModelCoeff,%{public}u", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      int v29 = 67240448;
      int v30 = v10;
      __int16 v31 = 1026;
      int v32 = v12;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "double CLGpsOdometryRhythmicScaled::estimate3DDeltaDistanceByMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    double v19 = sub_1018FCDBC(a1, a2, a3);
    double v13 = -1.0;
    if (v19 >= 0.0)
    {
      *(_DWORD *)(a5 + 728) = 1;
      a1->n128_u64[1] = 0x4039FD70A3D70A3DLL;
      double v13 = v19 * 1.12;
    }
  }
  if (*(void *)&v22[4])
  {
    uint64_t v23 = *(double **)&v22[4];
    operator delete(*(void **)&v22[4]);
  }
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  return v13;
}

void sub_1018FB684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018FB6C4(uint64_t a1)
{
  LODWORD(v1) = vcvtpd_u64_f64(*(double *)(a1 + 224) - *(double *)(a1 + 144));
  if ((int)v1 > 1)
  {
    if (v1 < 0x259)
    {
      uint64_t v6 = *(void *)(a1 + 232);
      __int16 v119 = (void **)(a1 + 232);
      if ((unint64_t)(0x6F96F96F96F96F97 * ((*(void *)(a1 + 240) - v6) >> 2)) >= 0x259)
      {
        *(void *)(a1 + 240) = v6;
        *(void *)(a1 + 264) = *(void *)(a1 + 256);
      }
      sub_100823940(v119, v1);
      __int16 v118 = (char **)(a1 + 256);
      sub_1018FF290((void **)(a1 + 256), v1);
      double v122 = *(double *)(a1 + 152) - *(double *)(a1 + 72);
      double v123 = sub_1011717B4(*(double *)(a1 + 80), *(double *)(a1 + 160));
      int v7 = 0;
      double v121 = *(double *)(a1 + 168) - *(double *)(a1 + 88);
      double v8 = *(double *)(a1 + 144);
      uint64_t v116 = a1 + 272;
      uint64_t v117 = a1 + 248;
      int v120 = v1 - 2;
      double v125 = (double)(int)v1;
      do
      {
        double v9 = (double)(v7 + 1);
        double v10 = *(double *)(a1 + 72);
        sub_10005B720(*(double *)(a1 + 80) + v123 * (v9 / v125));
        double v128 = v11;
        double v12 = v10 + v122 * (v9 / v125);
        double v13 = *(double *)(a1 + 88) + v121 * (v9 / v125);
        double v8 = v8 + 1.0;
        uint64_t v14 = *(void *)(a1 + 192);
        uint64_t v15 = *(void *)(a1 + 200);
        uint64_t v17 = *(void *)(a1 + 208);
        uint64_t v16 = *(void *)(a1 + 216);
        uint64_t v18 = *(void *)(a1 + 176);
        uint64_t v19 = *(void *)(a1 + 184);
        unint64_t v20 = *(void *)(a1 + 240);
        unint64_t v21 = *(void *)(a1 + 248);
        double v127 = v12;
        double v129 = v13;
        if (v20 >= v21)
        {
          uint64_t v23 = 0x6F96F96F96F96F97 * ((uint64_t)(v20 - (void)*v119) >> 2);
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) > 0x1A41A41A41A41A4) {
            sub_1001D7FD4();
          }
          unint64_t v25 = 0x6F96F96F96F96F97 * ((uint64_t)(v21 - (void)*v119) >> 2);
          if (2 * v25 > v24) {
            unint64_t v24 = 2 * v25;
          }
          if (v25 >= 0xD20D20D20D20D2) {
            unint64_t v26 = 0x1A41A41A41A41A4;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26) {
            uint64_t v27 = (char *)sub_10050FC98(v117, v26);
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v28 = &v27[156 * v23];
          *(_DWORD *)uint64_t v28 = 0xFFFF;
          *(double *)(v28 + 4) = v127;
          *(double *)(v28 + 12) = v128;
          *(void *)(v28 + 20) = v18;
          *(double *)(v28 + 28) = v129;
          *(void *)(v28 + 36) = v19;
          *(void *)(v28 + 44) = v14;
          *(void *)(v28 + 52) = v15;
          *(void *)(v28 + 60) = v17;
          *(void *)(v28 + 68) = v16;
          *(double *)(v28 + 76) = v8;
          *(void *)(v28 + 92) = 0x1BFF00000;
          *(void *)(v28 + 84) = 0;
          *(_OWORD *)(v28 + 132) = xmmword_101E464E4;
          *(_OWORD *)(v28 + 116) = *(_OWORD *)algn_101E464D4;
          *(_OWORD *)(v28 + 100) = xmmword_101E464C4;
          *(void *)(v28 + 148) = 0;
          int v30 = *(char **)(a1 + 232);
          int v29 = *(char **)(a1 + 240);
          __int16 v31 = v28;
          if (v29 != v30)
          {
            do
            {
              long long v32 = *(_OWORD *)(v29 - 156);
              *(_OWORD *)(v31 - 140) = *(_OWORD *)(v29 - 140);
              *(_OWORD *)(v31 - 156) = v32;
              long long v33 = *(_OWORD *)(v29 - 124);
              long long v34 = *(_OWORD *)(v29 - 108);
              long long v35 = *(_OWORD *)(v29 - 92);
              *(_OWORD *)(v31 - 76) = *(_OWORD *)(v29 - 76);
              *(_OWORD *)(v31 - 92) = v35;
              *(_OWORD *)(v31 - 108) = v34;
              *(_OWORD *)(v31 - 124) = v33;
              long long v36 = *(_OWORD *)(v29 - 60);
              long long v37 = *(_OWORD *)(v29 - 44);
              long long v38 = *(_OWORD *)(v29 - 28);
              *((_OWORD *)v31 - 1) = *((_OWORD *)v29 - 1);
              *(_OWORD *)(v31 - 28) = v38;
              *(_OWORD *)(v31 - 44) = v37;
              *(_OWORD *)(v31 - 60) = v36;
              v31 -= 156;
              v29 -= 156;
            }
            while (v29 != v30);
            int v29 = (char *)*v119;
          }
          uint64_t v22 = v28 + 156;
          *(void *)(a1 + 232) = v31;
          *(void *)(a1 + 240) = v28 + 156;
          *(void *)(a1 + 248) = &v27[156 * v26];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v20 = 0xFFFF;
          *(double *)(v20 + 4) = v12;
          *(double *)(v20 + 12) = v11;
          *(void *)(v20 + 20) = v18;
          *(double *)(v20 + 28) = v13;
          *(void *)(v20 + 36) = v19;
          *(void *)(v20 + 44) = v14;
          *(void *)(v20 + 52) = v15;
          *(void *)(v20 + 60) = v17;
          *(void *)(v20 + 68) = v16;
          *(double *)(v20 + 76) = v8;
          *(void *)(v20 + 84) = 0;
          *(void *)(v20 + 92) = 0x1BFF00000;
          *(void *)(v20 + 148) = 0;
          *(_OWORD *)(v20 + 132) = xmmword_101E464E4;
          *(_OWORD *)(v20 + 116) = *(_OWORD *)algn_101E464D4;
          *(_OWORD *)(v20 + 100) = xmmword_101E464C4;
          uint64_t v22 = (char *)(v20 + 156);
        }
        *(void *)(a1 + 240) = v22;
        uint64_t v39 = *(void *)(a1 + 8);
        double v40 = *(double *)a1 / v125;
        double v41 = *(double *)(a1 + 24) + v40 * v9;
        uint64_t v42 = *(void *)(a1 + 184);
        unint64_t v44 = *(void *)(a1 + 264);
        unint64_t v43 = *(void *)(a1 + 272);
        if (v44 >= v43)
        {
          unint64_t v46 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v44 - (void)*v118) >> 4);
          unint64_t v47 = v46 + 1;
          if (v46 + 1 > 0x75075075075075) {
            sub_1001D7FD4();
          }
          unint64_t v48 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v43 - (void)*v118) >> 4);
          if (2 * v48 > v47) {
            unint64_t v47 = 2 * v48;
          }
          if (v48 >= 0x3A83A83A83A83ALL) {
            unint64_t v49 = 0x75075075075075;
          }
          else {
            unint64_t v49 = v47;
          }
          if (v49)
          {
            uint64_t v50 = (char *)sub_10190DC48(v116, v49);
            uint64_t v52 = v51;
          }
          else
          {
            uint64_t v50 = 0;
            uint64_t v52 = 0;
          }
          uint64_t v53 = &v50[560 * v46];
          *(double *)uint64_t v53 = v41;
          *((double *)v53 + 1) = v40;
          *((void *)v53 + 2) = v39;
          *((double *)v53 + 3) = v8;
          memcpy(v53 + 32, &unk_101E46520, 0x158uLL);
          *((double *)v53 + 47) = v129;
          *((void *)v53 + 48) = v42;
          *(_OWORD *)(v53 + 488) = xmmword_101E466E8;
          *(_OWORD *)(v53 + 504) = unk_101E466F8;
          *(_OWORD *)(v53 + 520) = xmmword_101E46708;
          *(_OWORD *)(v53 + 424) = xmmword_101E466A8;
          *(_OWORD *)(v53 + 440) = unk_101E466B8;
          *(_OWORD *)(v53 + 456) = xmmword_101E466C8;
          *(_OWORD *)(v53 + 472) = unk_101E466D8;
          *(_OWORD *)(v53 + 392) = xmmword_101E46688;
          *(_OWORD *)(v53 + 408) = unk_101E46698;
          *((_DWORD *)v53 + 134) = 1;
          *((_DWORD *)v53 + 139) = 0;
          *(_OWORD *)(v53 + 540) = xmmword_101E4671C;
          uint64_t v54 = *(char **)(a1 + 256);
          uint64_t v55 = *(char **)(a1 + 264);
          uint64_t v56 = v53;
          if (v55 != v54)
          {
            do
            {
              v55 -= 560;
              v56 -= 560;
              memcpy(v56, v55, 0x230uLL);
            }
            while (v55 != v54);
            uint64_t v55 = *v118;
          }
          int v45 = v53 + 560;
          *(void *)(a1 + 256) = v56;
          *(void *)(a1 + 264) = v53 + 560;
          *(void *)(a1 + 272) = &v50[560 * v52];
          if (v55) {
            operator delete(v55);
          }
        }
        else
        {
          *(double *)unint64_t v44 = v41;
          *(double *)(v44 + 8) = v40;
          *(void *)(v44 + 16) = v39;
          *(double *)(v44 + 24) = v8;
          memcpy((void *)(v44 + 32), &unk_101E46520, 0x158uLL);
          *(double *)(v44 + 376) = v129;
          *(void *)(v44 + 384) = v42;
          *(_OWORD *)(v44 + 488) = xmmword_101E466E8;
          *(_OWORD *)(v44 + 504) = unk_101E466F8;
          *(_OWORD *)(v44 + 520) = xmmword_101E46708;
          *(_OWORD *)(v44 + 424) = xmmword_101E466A8;
          *(_OWORD *)(v44 + 440) = unk_101E466B8;
          *(_OWORD *)(v44 + 456) = xmmword_101E466C8;
          *(_OWORD *)(v44 + 472) = unk_101E466D8;
          *(_OWORD *)(v44 + 392) = xmmword_101E46688;
          *(_OWORD *)(v44 + 408) = unk_101E46698;
          *(_DWORD *)(v44 + 536) = 1;
          *(_DWORD *)(v44 + 556) = 0;
          int v45 = (char *)(v44 + 560);
          *(_OWORD *)(v44 + 540) = xmmword_101E4671C;
        }
        *(void *)(a1 + 264) = v45;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        double v57 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 134284801;
          double v131 = v127;
          __int16 v132 = 2049;
          double v133 = v128;
          __int16 v134 = 2049;
          double v135 = v129;
          __int16 v136 = 2050;
          long double v137 = v40;
          __int16 v138 = 2050;
          uint64_t v139 = v39;
          __int16 v140 = 2050;
          double v141 = v41;
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,intermediate coordinates,%{private}.7lf,%{private}.7lf,%{private}.3lf,deltaDistance,%{public}.3lf,deltaDistanceUnc,%{public}.3lf,odometer,%{public}.3lf", buf, 0x3Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345420);
          }
          double v59 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateBatchedLocations()", "%s\n", v59);
          if (v59 != (char *)buf) {
            free(v59);
          }
        }
      }
      while (v7++ != v120);
      uint64_t v61 = *(void *)(a1 + 152);
      uint64_t v60 = *(void *)(a1 + 160);
      uint64_t v63 = *(void *)(a1 + 200);
      uint64_t v62 = *(void *)(a1 + 208);
      uint64_t v65 = *(void *)(a1 + 216);
      uint64_t v64 = *(void *)(a1 + 224);
      uint64_t v66 = *(void *)(a1 + 168);
      uint64_t v67 = *(void *)(a1 + 176);
      uint64_t v68 = *(void *)(a1 + 184);
      uint64_t v69 = *(void *)(a1 + 192);
      unint64_t v70 = *(void *)(a1 + 240);
      unint64_t v71 = *(void *)(a1 + 248);
      if (v70 >= v71)
      {
        uint64_t v124 = *(void *)(a1 + 200);
        uint64_t v126 = *(void *)(a1 + 208);
        uint64_t v75 = 0x6F96F96F96F96F97 * ((uint64_t)(v70 - (void)*v119) >> 2);
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) > 0x1A41A41A41A41A4) {
          sub_1001D7FD4();
        }
        unint64_t v77 = 0x6F96F96F96F96F97 * ((uint64_t)(v71 - (void)*v119) >> 2);
        if (2 * v77 > v76) {
          unint64_t v76 = 2 * v77;
        }
        if (v77 >= 0xD20D20D20D20D2) {
          unint64_t v78 = 0x1A41A41A41A41A4;
        }
        else {
          unint64_t v78 = v76;
        }
        if (v78) {
          uint64_t v79 = (char *)sub_10050FC98(v117, v78);
        }
        else {
          uint64_t v79 = 0;
        }
        __int16 v80 = &v79[156 * v75];
        *(_DWORD *)__int16 v80 = 0xFFFF;
        *(void *)(v80 + 4) = v61;
        uint64_t v81 = &v79[156 * v78];
        *(void *)(v80 + 12) = v60;
        *(void *)(v80 + 20) = v67;
        *(void *)(v80 + 28) = v66;
        *(void *)(v80 + 36) = v68;
        *(void *)(v80 + 44) = v69;
        *(void *)(v80 + 52) = v124;
        *(void *)(v80 + 60) = v126;
        *(void *)(v80 + 68) = v65;
        *(void *)(v80 + 76) = v64;
        *(void *)(v80 + 92) = 0x1BFF00000;
        *(void *)(v80 + 84) = 0;
        *(_OWORD *)(v80 + 132) = xmmword_101E464E4;
        *(_OWORD *)(v80 + 116) = *(_OWORD *)algn_101E464D4;
        *(_OWORD *)(v80 + 100) = xmmword_101E464C4;
        *(void *)(v80 + 148) = 0;
        __int16 v72 = v80 + 156;
        uint64_t v83 = *(char **)(a1 + 232);
        __int16 v82 = *(char **)(a1 + 240);
        if (v82 == v83)
        {
          double v73 = v127;
          double v74 = v129;
        }
        else
        {
          double v73 = v127;
          double v74 = v129;
          do
          {
            long long v84 = *(_OWORD *)(v82 - 156);
            *(_OWORD *)(v80 - 140) = *(_OWORD *)(v82 - 140);
            *(_OWORD *)(v80 - 156) = v84;
            long long v85 = *(_OWORD *)(v82 - 124);
            long long v86 = *(_OWORD *)(v82 - 108);
            long long v87 = *(_OWORD *)(v82 - 92);
            *(_OWORD *)(v80 - 76) = *(_OWORD *)(v82 - 76);
            *(_OWORD *)(v80 - 92) = v87;
            *(_OWORD *)(v80 - 108) = v86;
            *(_OWORD *)(v80 - 124) = v85;
            long long v88 = *(_OWORD *)(v82 - 60);
            long long v89 = *(_OWORD *)(v82 - 44);
            long long v90 = *(_OWORD *)(v82 - 28);
            *((_OWORD *)v80 - 1) = *((_OWORD *)v82 - 1);
            *(_OWORD *)(v80 - 28) = v90;
            *(_OWORD *)(v80 - 44) = v89;
            *(_OWORD *)(v80 - 60) = v88;
            v80 -= 156;
            v82 -= 156;
          }
          while (v82 != v83);
          __int16 v82 = (char *)*v119;
        }
        *(void *)(a1 + 232) = v80;
        *(void *)(a1 + 240) = v72;
        *(void *)(a1 + 248) = v81;
        if (v82) {
          operator delete(v82);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v70 = 0xFFFF;
        *(void *)(v70 + 4) = v61;
        *(void *)(v70 + 12) = v60;
        *(void *)(v70 + 20) = v67;
        *(void *)(v70 + 28) = v66;
        *(void *)(v70 + 36) = v68;
        *(void *)(v70 + 44) = v69;
        *(void *)(v70 + 52) = v63;
        *(void *)(v70 + 60) = v62;
        *(void *)(v70 + 68) = v65;
        *(void *)(v70 + 76) = v64;
        *(void *)(v70 + 84) = 0;
        *(void *)(v70 + 92) = 0x1BFF00000;
        *(void *)(v70 + 148) = 0;
        *(_OWORD *)(v70 + 132) = xmmword_101E464E4;
        *(_OWORD *)(v70 + 116) = *(_OWORD *)algn_101E464D4;
        __int16 v72 = (char *)(v70 + 156);
        *(_OWORD *)(v70 + 100) = xmmword_101E464C4;
        double v73 = v127;
        double v74 = v129;
      }
      *(void *)(a1 + 240) = v72;
      double v91 = *(double *)(a1 + 24);
      double v92 = *(double *)a1;
      long double v93 = sub_101171DAC((double *)(a1 + 32), v73, v128, v74, *(double *)(a1 + 152), *(double *)(a1 + 160), *(double *)(a1 + 168));
      uint64_t v94 = *(void *)(a1 + 8);
      uint64_t v95 = *(void *)(a1 + 224);
      uint64_t v96 = *(void *)(a1 + 168);
      uint64_t v97 = *(void *)(a1 + 184);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v98 = v91 + v92;
      uint64_t v99 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v100 = *(double *)(a1 + 152);
        double v101 = *(double *)(a1 + 160);
        double v102 = *(double *)(a1 + 168);
        *(_DWORD *)uint64_t buf = 134284801;
        double v131 = v100;
        __int16 v132 = 2049;
        double v133 = v101;
        __int16 v134 = 2049;
        double v135 = v102;
        __int16 v136 = 2050;
        long double v137 = v93;
        __int16 v138 = 2050;
        uint64_t v139 = v94;
        __int16 v140 = 2050;
        double v141 = v98;
        _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,last coordinate,%{private}.7lf,%{private}.7lf,%{private}.3lf,deltaDistance,%{public}.3lf,deltaDistanceUnc,%{public}.3lf,odometer,%{public}.3lf", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        int v115 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateBatchedLocations()", "%s\n", v115);
        if (v115 != (char *)buf) {
          free(v115);
        }
      }
      unint64_t v104 = *(void *)(a1 + 264);
      unint64_t v103 = *(void *)(a1 + 272);
      if (v104 >= v103)
      {
        unint64_t v106 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v104 - (void)*v118) >> 4);
        if (v106 + 1 > 0x75075075075075) {
          sub_1001D7FD4();
        }
        unint64_t v107 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v103 - (void)*v118) >> 4);
        uint64_t v108 = 2 * v107;
        if (2 * v107 <= v106 + 1) {
          uint64_t v108 = v106 + 1;
        }
        if (v107 >= 0x3A83A83A83A83ALL) {
          unint64_t v109 = 0x75075075075075;
        }
        else {
          unint64_t v109 = v108;
        }
        if (v109) {
          uint64_t v110 = (char *)sub_10190DC48(v116, v109);
        }
        else {
          uint64_t v110 = 0;
        }
        uint64_t v111 = &v110[560 * v106];
        *(double *)uint64_t v111 = v98;
        *((long double *)v111 + 1) = v93;
        uint64_t v112 = &v110[560 * v109];
        *((void *)v111 + 2) = v94;
        *((void *)v111 + 3) = v95;
        memcpy(v111 + 32, &unk_101E46520, 0x158uLL);
        *((void *)v111 + 47) = v96;
        *((void *)v111 + 48) = v97;
        *(_OWORD *)(v111 + 488) = xmmword_101E466E8;
        *(_OWORD *)(v111 + 504) = unk_101E466F8;
        *(_OWORD *)(v111 + 520) = xmmword_101E46708;
        *(_OWORD *)(v111 + 424) = xmmword_101E466A8;
        *(_OWORD *)(v111 + 440) = unk_101E466B8;
        *(_OWORD *)(v111 + 456) = xmmword_101E466C8;
        *(_OWORD *)(v111 + 472) = unk_101E466D8;
        *(_OWORD *)(v111 + 392) = xmmword_101E46688;
        *(_OWORD *)(v111 + 408) = unk_101E46698;
        *((_DWORD *)v111 + 134) = 4;
        *((_DWORD *)v111 + 139) = 0;
        *(_OWORD *)(v111 + 540) = xmmword_101E4671C;
        uint64_t v105 = v111 + 560;
        __int16 v114 = *(char **)(a1 + 256);
        uint64_t v113 = *(char **)(a1 + 264);
        if (v113 != v114)
        {
          do
          {
            v113 -= 560;
            v111 -= 560;
            memcpy(v111, v113, 0x230uLL);
          }
          while (v113 != v114);
          uint64_t v113 = *v118;
        }
        *(void *)(a1 + 256) = v111;
        *(void *)(a1 + 264) = v105;
        *(void *)(a1 + 272) = v112;
        if (v113) {
          operator delete(v113);
        }
      }
      else
      {
        *(double *)unint64_t v104 = v98;
        *(long double *)(v104 + 8) = v93;
        *(void *)(v104 + 16) = v94;
        *(void *)(v104 + 24) = v95;
        memcpy((void *)(v104 + 32), &unk_101E46520, 0x158uLL);
        *(void *)(v104 + 376) = v96;
        *(void *)(v104 + 384) = v97;
        *(_OWORD *)(v104 + 488) = xmmword_101E466E8;
        *(_OWORD *)(v104 + 504) = unk_101E466F8;
        *(_OWORD *)(v104 + 520) = xmmword_101E46708;
        *(_OWORD *)(v104 + 424) = xmmword_101E466A8;
        *(_OWORD *)(v104 + 440) = unk_101E466B8;
        *(_OWORD *)(v104 + 456) = xmmword_101E466C8;
        *(_OWORD *)(v104 + 472) = unk_101E466D8;
        *(_OWORD *)(v104 + 392) = xmmword_101E46688;
        *(_OWORD *)(v104 + 408) = unk_101E46698;
        *(_DWORD *)(v104 + 536) = 4;
        *(_DWORD *)(v104 + 556) = 0;
        uint64_t v105 = (char *)(v104 + 560);
        *(_OWORD *)(v104 + 540) = xmmword_101E4671C;
      }
      *(void *)(a1 + 264) = v105;
    }
    else
    {
      sub_1018FA734((__n128 *)a1);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        LODWORD(v131) = v1;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GPSODOM,Rhythmic,number of updates too high,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_16;
        }
        goto LABEL_115;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    double v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v131) = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,invalid number of updates,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_16:
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::updateBatchedLocations()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return;
      }
LABEL_115:
      dispatch_once(&qword_1024193D0, &stru_102345420);
      goto LABEL_16;
    }
  }
}

void sub_1018FC724(uint64_t a1)
{
  *(void *)(a1 + 280) = 0xBFF0000000000000;
  if (sub_1018FB340((double *)(a1 + 72)) && sub_1018FB340((double *)(a1 + 152))) {
    *(long double *)(a1 + 280) = sub_1000F1648((double *)(a1 + 32), *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 152), *(double *)(a1 + 160), 0.0);
  }
}

void sub_1018FC77C(uint64_t *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[2];
    uint64_t v6 = a1[25];
    uint64_t v7 = a1[22];
    uint64_t v8 = a1[45];
    uint64_t v9 = a1[42];
    uint64_t v10 = a1[65];
    uint64_t v11 = a1[62];
    int v12 = *((_DWORD *)a1 + 182);
    int v13 = *((_DWORD *)a1 + 183);
    *(_DWORD *)uint64_t buf = 134351616;
    uint64_t v31 = v3;
    __int16 v32 = 2050;
    uint64_t v33 = v4;
    __int16 v34 = 2050;
    uint64_t v35 = v5;
    __int16 v36 = 2050;
    uint64_t v37 = v6;
    __int16 v38 = 2050;
    uint64_t v39 = v7;
    __int16 v40 = 2050;
    uint64_t v41 = v8;
    __int16 v42 = 2050;
    uint64_t v43 = v9;
    __int16 v44 = 2050;
    uint64_t v45 = v10;
    __int16 v46 = 2050;
    uint64_t v47 = v11;
    __int16 v48 = 1026;
    int v49 = v12;
    __int16 v50 = 1026;
    int v51 = v13;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,Scaled,analytics,featureValInfo,startMachContinuousTime,%{public}.1lf,distAvgM,%{public}.1lf,distMaxM,%{public}.1lf,heightAvgM,%{public}.1lf,heightMaxM,%{public}.1lf,courseAvgRad,%{public}.1lf,courseMaxRad,%{public}.1lf,straightMetricValAvg,%{public}.1lf,straightMetricValMax,%{public}.1lf,usedRegressionModel,%{public}d,usedFeatures,%{public}d", buf, 0x68u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics::debugLog()", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v14 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = a1[15];
    uint64_t v16 = a1[12];
    uint64_t v17 = a1[35];
    uint64_t v18 = a1[32];
    uint64_t v19 = a1[55];
    uint64_t v20 = a1[52];
    uint64_t v21 = a1[75];
    uint64_t v22 = a1[72];
    *(_DWORD *)uint64_t buf = 134350848;
    uint64_t v31 = v15;
    __int16 v32 = 2050;
    uint64_t v33 = v16;
    __int16 v34 = 2050;
    uint64_t v35 = v17;
    __int16 v36 = 2050;
    uint64_t v37 = v18;
    __int16 v38 = 2050;
    uint64_t v39 = v19;
    __int16 v40 = 2050;
    uint64_t v41 = v20;
    __int16 v42 = 2050;
    uint64_t v43 = v21;
    __int16 v44 = 2050;
    uint64_t v45 = v22;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,Scaled,analytics,featureUncInfo,distUncAvgM,%{public}.1lf,distUncMaxM,%{public}.1lf,heightUncAvgM,%{public}.1lf,heightUncMaxM,%{public}.1lf,courseUncAvgRad,%{public}.1lf,courseUncMaxRad,%{public}.1lf,straightMetricUncAvg,%{public}.1lf,straightMetricUncMax,%{public}.1lf", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics::debugLog()", "%s\n", v28);
    if (v28 != (char *)buf) {
      free(v28);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v23 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v24 = a1[85];
    uint64_t v25 = a1[82];
    int v26 = *((_DWORD *)a1 + 184);
    *(_DWORD *)uint64_t buf = 134349568;
    uint64_t v31 = v24;
    __int16 v32 = 2050;
    uint64_t v33 = v25;
    __int16 v34 = 1026;
    LODWORD(v35) = v26;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,Scaled,analytics,general,processingTimeAvg,%{public}.1lf,processingTimeMax,%{public}.1lf,resetCount,%{public}d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    int v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics::debugLog()", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
}

double sub_1018FCDBC(__n128 *a1, double *a2, double *a3)
{
  double v4 = sub_101171DAC(a1[2].n128_f64, *a2, a2[1], a2[2], *a3, a3[1], a3[2]);
  double v5 = a1[9].n128_f64[0];
  double v6 = -1.0;
  if (v5 >= 0.0)
  {
    double v7 = a1[14].n128_f64[0];
    if (v7 >= 0.0)
    {
      if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && (double v8 = v7 - v5, v8 >= 0.0)
        && v4 <= v8 / 120.0 * 3218.4)
      {
        return v4;
      }
      else
      {
        sub_1018FA734(a1);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        uint64_t v9 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          double v13 = v4;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM,Rhythmic,calculated 3D distance is invalid,%{public}.2lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345420);
          }
          uint64_t v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "double CLGpsOdometryRhythmicScaled::calculate3DIntermittentDistance(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &)", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
      }
    }
  }
  return v6;
}

void sub_1018FCFF0(__n128 *a1, uint64_t a2, uint64_t a3, double *a4, double **a5, uint64_t a6, double *a7)
{
  double v14 = sub_1018FCDBC(a1, (double *)a2, (double *)a3);
  sub_10076AE78((char *)(a6 + 8), v14);
  double v15 = hypot(*(long double *)(a2 + 24), *(long double *)(a3 + 24));
  sub_10076AE78((char *)(a6 + 88), v15);
  if (v14 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "GPSODOM,Rhythmic,Invalid 3D Distance", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      LOWORD(v134) = 0;
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicScaled::extractFeaturesForMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, std::vector<double> &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, double &)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    return;
  }
  unint64_t v18 = (unint64_t)a5[2];
  uint64_t v19 = a5[1];
  if ((unint64_t)v19 >= v18)
  {
    uint64_t v21 = *a5;
    uint64_t v22 = v19 - *a5;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 61) {
      goto LABEL_158;
    }
    uint64_t v24 = v18 - (void)v21;
    if (v24 >> 2 > v23) {
      unint64_t v23 = v24 >> 2;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      int v26 = (char *)sub_1000DA54C((uint64_t)(a5 + 2), v25);
      uint64_t v21 = *a5;
      uint64_t v19 = a5[1];
    }
    else
    {
      int v26 = 0;
    }
    uint64_t v27 = (double *)&v26[8 * v22];
    uint64_t v28 = (double *)&v26[8 * v25];
    double *v27 = v14;
    uint64_t v20 = v27 + 1;
    while (v19 != v21)
    {
      uint64_t v29 = *((void *)v19-- - 1);
      *((void *)v27-- - 1) = v29;
    }
    *a5 = v27;
    a5[1] = v20;
    a5[2] = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    double *v19 = v14;
    uint64_t v20 = v19 + 1;
  }
  a5[1] = v20;
  double v30 = vabdd_f64(*(double *)(a3 + 16), *(double *)(a2 + 16));
  if (v30 <= 8848.86) {
    double v31 = v30;
  }
  else {
    double v31 = 8848.86;
  }
  sub_10076AE78((char *)(a6 + 168), v31);
  double v32 = hypot(*(long double *)(a2 + 32), *(long double *)(a3 + 32));
  sub_10076AE78((char *)(a6 + 248), v32);
  __int16 v34 = a5[1];
  unint64_t v33 = (unint64_t)a5[2];
  if ((unint64_t)v34 >= v33)
  {
    __int16 v36 = *a5;
    uint64_t v37 = v34 - *a5;
    unint64_t v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 61) {
      goto LABEL_158;
    }
    uint64_t v39 = v33 - (void)v36;
    if (v39 >> 2 > v38) {
      unint64_t v38 = v39 >> 2;
    }
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v40 = v38;
    }
    if (v40)
    {
      uint64_t v41 = (char *)sub_1000DA54C((uint64_t)(a5 + 2), v40);
      __int16 v36 = *a5;
      __int16 v34 = a5[1];
    }
    else
    {
      uint64_t v41 = 0;
    }
    __int16 v42 = (double *)&v41[8 * v37];
    uint64_t v43 = (double *)&v41[8 * v40];
    *__int16 v42 = v31;
    uint64_t v35 = v42 + 1;
    while (v34 != v36)
    {
      uint64_t v44 = *((void *)v34-- - 1);
      *((void *)v42-- - 1) = v44;
    }
    *a5 = v42;
    a5[1] = v35;
    a5[2] = v43;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *__int16 v34 = v31;
    uint64_t v35 = v34 + 1;
  }
  a5[1] = v35;
  double v45 = a4[1];
  if ((*(void *)&v45 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v45 > 0.15 ? (BOOL v46 = v45 > 1.0) : (BOOL v46 = 1), v46))
  {
    BOOL v47 = 0;
  }
  else
  {
    double v48 = a4[2];
    BOOL v47 = v48 > 0.25 && ((void)a4[2] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
    if (v48 > 1.0) {
      BOOL v47 = 0;
    }
  }
  a1[21].n128_u8[8] = v47;
  double v50 = *(double *)(a2 + 56);
  if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (double v51 = *(double *)(a3 + 56), (*(void *)&v51 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    || v50 < 0.0
    || v51 < 0.0
    || (double v52 = *(double *)(a2 + 64), v52 <= 0.0)
    || (double v53 = *(double *)(a3 + 64), v53 <= 0.0)
    || v47 && (v52 >= 180.0 || v53 >= 180.0))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v60 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v61 = a1[8].n128_u64[0];
      unint64_t v62 = a1[8].n128_u64[1];
      unint64_t v63 = a1[13].n128_u64[0];
      unint64_t v64 = a1[13].n128_u64[1];
      *(_DWORD *)uint64_t buf = 134284289;
      double v161 = *(double *)&v61;
      __int16 v162 = 2049;
      double v163 = *(double *)&v62;
      __int16 v164 = 2049;
      double v165 = *(double *)&v63;
      __int16 v166 = 2049;
      double v167 = *(double *)&v64;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,CourseError,prevPosCourse,%{private}.2lf,prevPosCourseUnc,%{private}.2lf,latestPosCourse,%{private}.2lf,latestPosCourseUnc,%{private}.2lf", buf, 0x2Au);
    }
    double v55 = -1.0;
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      unint64_t v127 = a1[8].n128_u64[0];
      unint64_t v128 = a1[8].n128_u64[1];
      unint64_t v129 = a1[13].n128_u64[0];
      unint64_t v130 = a1[13].n128_u64[1];
      int v134 = 134284289;
      double v135 = *(double *)&v127;
      __int16 v136 = 2049;
      double v137 = *(double *)&v128;
      __int16 v138 = 2049;
      double v139 = *(double *)&v129;
      __int16 v140 = 2049;
      double v141 = *(double *)&v130;
      double v131 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::extractFeaturesForMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, std::vector<double> &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, double &)", "%s\n", v131);
      if (v131 != (char *)buf) {
        free(v131);
      }
    }
    goto LABEL_81;
  }
  double v54 = fmod(v51 - v50, 360.0);
  if (v54 < 0.0) {
    double v54 = v54 + 360.0;
  }
  if (v54 > 180.0) {
    double v54 = v54 + -360.0;
  }
  double v55 = fabs(v54) * 0.0174532925;
  sub_10076AE78((char *)(a6 + 328), v55);
  double v56 = hypot(*(long double *)(a2 + 64), *(long double *)(a3 + 64));
  sub_10076AE78((char *)(a6 + 408), v56);
  double v58 = a5[1];
  unint64_t v57 = (unint64_t)a5[2];
  if ((unint64_t)v58 >= v57)
  {
    uint64_t v108 = *a5;
    uint64_t v109 = v58 - *a5;
    unint64_t v110 = v109 + 1;
    if (!((unint64_t)(v109 + 1) >> 61))
    {
      uint64_t v111 = v57 - (void)v108;
      if (v111 >> 2 > v110) {
        unint64_t v110 = v111 >> 2;
      }
      if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v112 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v112 = v110;
      }
      if (v112)
      {
        uint64_t v113 = (char *)sub_1000DA54C((uint64_t)(a5 + 2), v112);
        uint64_t v108 = *a5;
        double v58 = a5[1];
      }
      else
      {
        uint64_t v113 = 0;
      }
      __int16 v114 = (double *)&v113[8 * v109];
      int v115 = (double *)&v113[8 * v112];
      *__int16 v114 = v55;
      double v59 = v114 + 1;
      while (v58 != v108)
      {
        uint64_t v116 = *((void *)v58-- - 1);
        *((void *)v114-- - 1) = v116;
      }
      *a5 = v114;
      a5[1] = v59;
      a5[2] = v115;
      if (v108) {
        operator delete(v108);
      }
      goto LABEL_149;
    }
LABEL_158:
    sub_1001D7FD4();
  }
  *double v58 = v55;
  double v59 = v58 + 1;
LABEL_149:
  a5[1] = v59;
LABEL_81:
  if (a1[21].n128_u8[8])
  {
    double v65 = sub_1000F1648(a1[2].n128_f64, *(double *)a2, *(double *)(a2 + 8), *(double *)a3, *(double *)(a3 + 8), *(double *)(a3 + 16));
    double v66 = a4[1];
    if (v66 >= 0.1) {
      double v67 = a4[1];
    }
    else {
      double v67 = 0.1;
    }
    sub_10076AE78((char *)(a6 + 488), v66);
    sub_10076AE78((char *)(a6 + 568), a4[2]);
    double v68 = *(double *)(a2 + 40);
    double v69 = v65 / v67;
    if (v68 < 0.0
      || (double v70 = *(double *)(a3 + 40), v70 < 0.0)
      || (double v71 = *(double *)(a2 + 48), v71 <= 0.0)
      || (double v72 = *(double *)(a3 + 48), v72 >= 1.0)
      || v71 >= 1.0
      || v72 <= 0.0
      || (double v73 = *(double *)(a2 + 72), v73 <= 0.0)
      || (double v74 = *(double *)(a3 + 72), v74 <= 0.0))
    {
      long long v87 = a5[1];
      unint64_t v86 = (unint64_t)a5[2];
      if ((unint64_t)v87 >= v86)
      {
        long long v89 = *a5;
        uint64_t v90 = v87 - *a5;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v92 = v86 - (void)v89;
        if (v92 >> 2 > v91) {
          unint64_t v91 = v92 >> 2;
        }
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v93 = v91;
        }
        if (v93)
        {
          uint64_t v94 = (char *)sub_1000DA54C((uint64_t)(a5 + 2), v93);
          long long v89 = *a5;
          long long v87 = a5[1];
        }
        else
        {
          uint64_t v94 = 0;
        }
        uint64_t v95 = (double *)&v94[8 * v90];
        uint64_t v96 = (double *)&v94[8 * v93];
        *uint64_t v95 = v69;
        long long v88 = v95 + 1;
        while (v87 != v89)
        {
          uint64_t v97 = *((void *)v87-- - 1);
          *((void *)v95-- - 1) = v97;
        }
        *a5 = v95;
        a5[1] = v88;
        a5[2] = v96;
        if (v89) {
          operator delete(v89);
        }
      }
      else
      {
        *long long v87 = v69;
        long long v88 = v87 + 1;
      }
      a5[1] = v88;
    }
    else
    {
      double v75 = sqrt(v72 * v72 + v71 * v71);
      double v76 = vabdd_f64(v74, v73);
      double v77 = fabs(v68 + v70) * 0.5;
      if (v77 >= 1.1176) {
        double v78 = v77;
      }
      else {
        double v78 = 1.1176;
      }
      double v79 = (v78 + v75) * v76;
      double v80 = (v78 - v75) * v76;
      if (v79 >= v69) {
        double v81 = v69;
      }
      else {
        double v81 = (v78 + v75) * v76;
      }
      if (v81 < v80) {
        double v81 = (v78 - v75) * v76;
      }
      double v132 = v76;
      double v133 = v81;
      *a7 = vabdd_f64(v69, v81);
      sub_1018FEAE8((uint64_t)a5, &v133);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      __int16 v82 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        double v83 = *a7;
        *(_DWORD *)uint64_t buf = 134350848;
        double v161 = v69;
        __int16 v162 = 2050;
        double v163 = v78;
        __int16 v164 = 2050;
        double v165 = v75;
        __int16 v166 = 2050;
        double v167 = v132;
        __int16 v168 = 2050;
        double v169 = v80;
        __int16 v170 = 2050;
        double v171 = v79;
        __int16 v172 = 2050;
        double v173 = v133;
        __int16 v174 = 2050;
        double v175 = v83;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,SpeedBasedFilter,avgSpeedBetweenPrevAndLatestPos_mps,%{public}.2lf,propagatedSpeedUnc_mps,%{public}.2lf,dtBetweenPrevAndLatestPos_s,%{public}.2lf,lowerThresholdForSMRD_m,%{public}.2lf,upperThresholdForSMRD_m,%{public}.2lf,SMRD_m,%{public}.2lf,SMRDFiltered_m,%{public}.2lf,absSMRDDistanceChangeByFilter_m,%{public}.2lf", buf, 0x52u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        double v84 = *a7;
        int v134 = 134350848;
        double v135 = v69;
        __int16 v136 = 2050;
        double v137 = v78;
        __int16 v138 = 2050;
        double v139 = v75;
        __int16 v140 = 2050;
        double v141 = v132;
        __int16 v142 = 2050;
        double v143 = v80;
        __int16 v144 = 2050;
        double v145 = v79;
        __int16 v146 = 2050;
        double v147 = v133;
        __int16 v148 = 2050;
        double v149 = v84;
        long long v85 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::extractFeaturesForMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, std::vector<double> &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, double &)", "%s\n", v85);
        if (v85 != (char *)buf) {
          free(v85);
        }
      }
    }
  }
  else
  {
    double v69 = -1.0;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  double v98 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    double v99 = *(double *)(a2 + 24);
    double v100 = *(double *)(a2 + 32);
    double v101 = *(double *)(a3 + 24);
    double v102 = *(double *)(a3 + 32);
    double v103 = *(double *)(a2 + 64);
    uint64_t v104 = *(void *)(a3 + 64);
    uint64_t v106 = *((void *)a4 + 1);
    uint64_t v105 = *((void *)a4 + 2);
    double v107 = *a4;
    *(_DWORD *)uint64_t buf = 134352128;
    double v161 = v14;
    __int16 v162 = 2050;
    double v163 = v99;
    __int16 v164 = 2050;
    double v165 = v101;
    __int16 v166 = 2050;
    double v167 = v31;
    __int16 v168 = 2050;
    double v169 = v100;
    __int16 v170 = 2050;
    double v171 = v102;
    __int16 v172 = 2050;
    double v173 = v55;
    __int16 v174 = 2050;
    double v175 = v103;
    __int16 v176 = 2050;
    uint64_t v177 = v104;
    __int16 v178 = 2050;
    double v179 = v69;
    __int16 v180 = 2050;
    uint64_t v181 = v106;
    __int16 v182 = 2050;
    uint64_t v183 = v105;
    __int16 v184 = 2050;
    double v185 = v107;
    _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,featureInfo,intermittent3DDist,%{public}.2lf,prevPosHorUnc,%{public}.2lf,latestPosHorUnc,%{public}.2lf,absHeightChange,%{public}.2lf,prevPosAltUnc,%{public}.2lf,latestPosAltUnc,%{public}.2lf,courseChange,%{public}.3lf,prevCourseUnc,%{public}.2lf,latestCourseUnc,%{public}.2lf,SMRD,%{public}.2lf,straightnessMetric,%{public}.2lf,confidence,%{public}.2lf,timestamp,%{public}.2lf", buf, 0x84u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    double v117 = *(double *)(a2 + 24);
    double v118 = *(double *)(a2 + 32);
    double v119 = *(double *)(a3 + 24);
    double v120 = *(double *)(a3 + 32);
    double v121 = *(double *)(a2 + 64);
    uint64_t v122 = *(void *)(a3 + 64);
    uint64_t v124 = *((void *)a4 + 1);
    uint64_t v123 = *((void *)a4 + 2);
    double v125 = *a4;
    int v134 = 134352128;
    double v135 = v14;
    __int16 v136 = 2050;
    double v137 = v117;
    __int16 v138 = 2050;
    double v139 = v119;
    __int16 v140 = 2050;
    double v141 = v31;
    __int16 v142 = 2050;
    double v143 = v118;
    __int16 v144 = 2050;
    double v145 = v120;
    __int16 v146 = 2050;
    double v147 = v55;
    __int16 v148 = 2050;
    double v149 = v121;
    __int16 v150 = 2050;
    uint64_t v151 = v122;
    __int16 v152 = 2050;
    double v153 = v69;
    __int16 v154 = 2050;
    uint64_t v155 = v124;
    __int16 v156 = 2050;
    uint64_t v157 = v123;
    __int16 v158 = 2050;
    double v159 = v125;
    uint64_t v126 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::extractFeaturesForMultipleRegression(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, std::vector<double> &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, double &)", "%s\n", v126);
    if (v126 != (char *)buf) {
      free(v126);
    }
  }
  *(_DWORD *)(a6 + 732) = (unint64_t)((char *)a5[1] - (char *)*a5) >> 3;
}

void sub_1018FDD24(uint64_t a1, double *a2, double *a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, long double a8)
{
  if (*a4 - 5 <= 0xFFFFFFFC)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v10 = *a4;
      *(_DWORD *)uint64_t buf = 67240192;
      int v101 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "GPSODOM,Rhythmic,Invalid Feature Count,%{public}u", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      int v11 = *a4;
      LODWORD(v97) = 67240192;
      HIDWORD(v97) = v11;
      int v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    return;
  }
  if (*(void *)(a1 + 288) == *(void *)(a1 + 296))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,modelCoefficient is empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      LOWORD(v97) = 0;
      double v79 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v79);
      if (v79 != (char *)buf) {
        free(v79);
      }
    }
    sub_100B58BA0(a1 + 352);
    sub_1018FEBD0((void *)a1);
  }
  uint64_t v20 = (uint64_t *)(a1 + 288);
  uint64_t v97 = 0;
  double v98 = 0;
  uint64_t v99 = 0;
  if (&v97 == (void **)(a1 + 288))
  {
    uint64_t v21 = 0;
  }
  else
  {
    sub_1002DD194((char *)&v97, *(char **)(a1 + 288), *(void *)(a1 + 296), (uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 3);
    uint64_t v21 = (double *)v97;
    uint64_t v22 = v98;
    if (v97 != v98)
    {
      unint64_t v23 = (double *)v97;
      do
      {
        *unint64_t v23 = *v23 * *v23;
        ++v23;
      }
      while (v23 != v22);
    }
  }
  double v24 = a3[3] * a3[3] + a2[3] * a2[3];
  double v25 = a3[4] * a3[4] + a2[4] * a2[4];
  double v26 = *(double *)(a6 + 16) * *(double *)(a6 + 16);
  int v27 = *a4;
  if (*a4 == 2)
  {
    int v34 = *(unsigned __int8 *)(a1 + 344);
    unsigned int v29 = 2 * v34;
    if (*(unsigned char *)(a1 + 344)) {
      int v35 = 3;
    }
    else {
      int v35 = 2;
    }
    *(_DWORD *)(a7 + 728) = v35;
    if (v34)
    {
      double v32 = v21[3] * 7.18 / v26 + 2.1025 + v21[2] * v24;
      double v33 = 3.967;
    }
    else
    {
      double v32 = v24 * *v21 + 495.0625 + v21[1] * v25;
      double v33 = 1.229;
    }
    goto LABEL_49;
  }
  double v28 = (a3[8] * a3[8] + a2[8] * a2[8]) * 0.0174532925 * 0.0174532925;
  if (v27 == 3)
  {
    int v30 = *(unsigned __int8 *)(a1 + 344);
    if (*(unsigned char *)(a1 + 344)) {
      unsigned int v29 = 7;
    }
    else {
      unsigned int v29 = 4;
    }
    if (*(unsigned char *)(a1 + 344)) {
      int v31 = 5;
    }
    else {
      int v31 = 4;
    }
    *(_DWORD *)(a7 + 728) = v31;
    if (v30)
    {
      double v32 = v21[9] * 7.18 / v26 + 1.8496 + v21[7] * v24 + v21[8] * v25;
      double v33 = 3.518;
    }
    else
    {
      double v32 = v24 * v21[4] + 318.6225 + v21[5] * v25 + v21[6] * v28;
      double v33 = 0.951;
    }
LABEL_49:
    *(double *)(a1 + 8) = sqrt(v32) * v33;
    goto LABEL_50;
  }
  if (v27 == 4)
  {
    *(_DWORD *)(a7 + 728) = 6;
    *(double *)(a1 + 8) = sqrt(v21[13] * 7.18 / v26 + 1.8225 + v21[10] * v24 + v21[11] * v25 + v21[12] * v28) * 3.298;
    unsigned int v29 = 10;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    __int16 v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v37 = *a4;
      *(_DWORD *)uint64_t buf = 67174657;
      int v101 = v37;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,InvalidFeatureCount,%{private}u", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      int v80 = *a4;
      LODWORD(v94) = 67174657;
      HIDWORD(v94) = v80;
      double v81 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v81);
      if (v81 != (char *)buf) {
        free(v81);
      }
    }
    unsigned int v29 = -1;
  }
LABEL_50:
  if (a8 > 0.0 && *(unsigned char *)(a1 + 344)) {
    *(long double *)(a1 + 8) = hypot(*(long double *)(a1 + 8), a8);
  }
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = 0;
  long long v87 = 0;
  long long v88 = 0;
  uint64_t v89 = 0;
  long long __p = 0;
  long long v85 = 0;
  uint64_t v86 = 0;
  sub_1018FF0D4(a1, (uint64_t)&v94, (uint64_t)&v87, (uint64_t)&__p);
  sub_10017C3FC((void **)a5, *a4);
  int v38 = *a4;
  if (v29 < *a4 + v29)
  {
    uint64_t v39 = v29;
    uint64_t v82 = a5 + 16;
    do
    {
      if (*(unsigned char *)(a1 + 344))
      {
        double v40 = (1.0 - *(double *)(a6 + 16)) / 0.15;
        switch(v38)
        {
          case 4:
            double v41 = *(double *)(*v20 + 8 * v39) + *((double *)__p + v39 - v29) * v40;
            uint64_t v43 = *(double **)(a5 + 8);
            unint64_t v61 = *(void *)(a5 + 16);
            if ((unint64_t)v43 >= v61)
            {
              uint64_t v44 = *(double **)a5;
              uint64_t v67 = ((uint64_t)v43 - *(void *)a5) >> 3;
              unint64_t v68 = v67 + 1;
              if ((unint64_t)(v67 + 1) >> 61) {
                sub_1001D7FD4();
              }
              uint64_t v69 = v61 - (void)v44;
              if (v69 >> 2 > v68) {
                unint64_t v68 = v69 >> 2;
              }
              if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v68;
              }
              if (v48)
              {
                int v49 = (char *)sub_1000DA54C(v82, v48);
                uint64_t v44 = *(double **)a5;
                uint64_t v43 = *(double **)(a5 + 8);
              }
              else
              {
                int v49 = 0;
              }
              double v70 = (double *)&v49[8 * v67];
              *double v70 = v41;
              unint64_t v62 = v70 + 1;
              while (v43 != v44)
              {
                uint64_t v73 = *((void *)v43-- - 1);
                *((void *)v70-- - 1) = v73;
              }
              goto LABEL_123;
            }
            break;
          case 3:
            double v41 = *(double *)(*v20 + 8 * v39) + *((double *)v87 + v39 - v29) * v40;
            uint64_t v43 = *(double **)(a5 + 8);
            unint64_t v57 = *(void *)(a5 + 16);
            if ((unint64_t)v43 >= v57)
            {
              uint64_t v44 = *(double **)a5;
              uint64_t v58 = ((uint64_t)v43 - *(void *)a5) >> 3;
              unint64_t v59 = v58 + 1;
              if ((unint64_t)(v58 + 1) >> 61) {
                sub_1001D7FD4();
              }
              uint64_t v60 = v57 - (void)v44;
              if (v60 >> 2 > v59) {
                unint64_t v59 = v60 >> 2;
              }
              if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v59;
              }
              if (v48)
              {
                int v49 = (char *)sub_1000DA54C(v82, v48);
                uint64_t v44 = *(double **)a5;
                uint64_t v43 = *(double **)(a5 + 8);
              }
              else
              {
                int v49 = 0;
              }
              double v70 = (double *)&v49[8 * v58];
              *double v70 = v41;
              unint64_t v62 = v70 + 1;
              while (v43 != v44)
              {
                uint64_t v72 = *((void *)v43-- - 1);
                *((void *)v70-- - 1) = v72;
              }
              goto LABEL_123;
            }
            break;
          case 2:
            double v41 = *(double *)(*v20 + 8 * v39) + *((double *)v94 + v39 - v29) * v40;
            uint64_t v43 = *(double **)(a5 + 8);
            unint64_t v42 = *(void *)(a5 + 16);
            if ((unint64_t)v43 >= v42)
            {
              uint64_t v44 = *(double **)a5;
              uint64_t v45 = ((uint64_t)v43 - *(void *)a5) >> 3;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61) {
                sub_1001D7FD4();
              }
              uint64_t v47 = v42 - (void)v44;
              if (v47 >> 2 > v46) {
                unint64_t v46 = v47 >> 2;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                int v49 = (char *)sub_1000DA54C(v82, v48);
                uint64_t v44 = *(double **)a5;
                uint64_t v43 = *(double **)(a5 + 8);
              }
              else
              {
                int v49 = 0;
              }
              double v70 = (double *)&v49[8 * v45];
              *double v70 = v41;
              unint64_t v62 = v70 + 1;
              while (v43 != v44)
              {
                uint64_t v74 = *((void *)v43-- - 1);
                *((void *)v70-- - 1) = v74;
              }
LABEL_123:
              *(void *)a5 = v70;
              *(void *)(a5 + 8) = v62;
              *(void *)(a5 + 16) = &v49[8 * v48];
              if (v44) {
                operator delete(v44);
              }
              goto LABEL_125;
            }
            break;
          default:
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102345420);
            }
            unint64_t v63 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
            {
              int v64 = *a4;
              *(_DWORD *)uint64_t buf = 67174657;
              int v101 = v64;
              _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,InvalidFeatureCount,%{private}u", buf, 8u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102345420);
              }
              int v65 = *a4;
              int v90 = 67174657;
              int v91 = v65;
              double v66 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v66);
              if (v66 != (char *)buf) {
                free(v66);
              }
            }
            goto LABEL_126;
        }
        *uint64_t v43 = v41;
        double v53 = v43 + 1;
      }
      else
      {
        uint64_t v50 = *v20;
        double v52 = *(double **)(a5 + 8);
        unint64_t v51 = *(void *)(a5 + 16);
        if ((unint64_t)v52 >= v51)
        {
          uint64_t v44 = *(double **)a5;
          uint64_t v54 = ((uint64_t)v52 - *(void *)a5) >> 3;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 61) {
            sub_1001D7FD4();
          }
          uint64_t v56 = v51 - (void)v44;
          if (v56 >> 2 > v55) {
            unint64_t v55 = v56 >> 2;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v55;
          }
          if (v48)
          {
            int v49 = (char *)sub_1000DA54C(v82, v48);
            uint64_t v44 = *(double **)a5;
            double v52 = *(double **)(a5 + 8);
          }
          else
          {
            int v49 = 0;
          }
          double v70 = (double *)&v49[8 * v54];
          *double v70 = *(double *)(v50 + 8 * v39);
          unint64_t v62 = v70 + 1;
          while (v52 != v44)
          {
            uint64_t v71 = *((void *)v52-- - 1);
            *((void *)v70-- - 1) = v71;
          }
          goto LABEL_123;
        }
        *double v52 = *(double *)(v50 + 8 * v39);
        double v53 = v52 + 1;
      }
      unint64_t v62 = v53;
LABEL_125:
      *(void *)(a5 + 8) = v62;
LABEL_126:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v75 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v76 = *(void *)(*v20 + 8 * v39);
        *(_DWORD *)uint64_t buf = 67240448;
        int v101 = v39;
        __int16 v102 = 2050;
        uint64_t v103 = v76;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "GPSODOM,Rhythmic,modelCoefficients,%{public}d,%{public}.6lf", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        uint64_t v77 = *(void *)(*v20 + 8 * v39);
        int v90 = 67240448;
        int v91 = v39;
        __int16 v92 = 2050;
        uint64_t v93 = v77;
        double v78 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::getRegressionModelCoefficients(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLGpsOdometryRhythmic_Types::GpsPoint &, const unsigned int &, std::vector<double> &, const CLGpsOdometryRhythmic_Types::PathStraightnessMetric &, CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics &, const double)", "%s\n", v78);
        if (v78 != (char *)buf) {
          free(v78);
        }
      }
      ++v39;
      int v38 = *a4;
    }
    while (*a4 + v29 > v39);
  }
  if (__p)
  {
    long long v85 = __p;
    operator delete(__p);
  }
  if (v87)
  {
    long long v88 = v87;
    operator delete(v87);
  }
  if (v94)
  {
    uint64_t v95 = v94;
    operator delete(v94);
  }
  if (v97)
  {
    double v98 = (double *)v97;
    operator delete(v97);
  }
}

void sub_1018FEA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1018FEAE8(uint64_t a1, void *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  double v6 = *(void **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    double v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      double v13 = (char *)sub_1000DA54C(v4, v12);
      double v8 = *(void **)a1;
      double v6 = *(void **)(a1 + 8);
    }
    else
    {
      double v13 = 0;
    }
    double v14 = &v13[8 * v9];
    double v15 = &v13[8 * v12];
    *(void *)double v14 = *a2;
    double v7 = v14 + 8;
    while (v6 != v8)
    {
      uint64_t v16 = *--v6;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *double v6 = *a2;
    double v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

void sub_1018FEBD0(void *a1)
{
  if (CLMotionActivity::isTypeWalking())
  {
    sub_100B59E68((uint64_t)(a1 + 44), buf);
    double v2 = (void *)a1[36];
    if (v2)
    {
      a1[37] = v2;
      operator delete(v2);
    }
    *((_OWORD *)a1 + 18) = *(_OWORD *)buf;
    a1[38] = v15;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = (uint64_t)(a1[37] - a1[36]) >> 3;
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GPSODOM,Rhythmic,Distance Multiplier Model Coefficients For Hike/Walk,Size,%{public}lu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_30;
      }
      goto LABEL_32;
    }
  }
  else
  {
    int isTypeRunning = CLMotionActivity::isTypeRunning();
    uint64_t v6 = (uint64_t)(a1 + 44);
    if (isTypeRunning)
    {
      sub_100B59E84(v6, buf);
      double v7 = (void *)a1[36];
      if (v7)
      {
        a1[37] = v7;
        operator delete(v7);
      }
      *((_OWORD *)a1 + 18) = *(_OWORD *)buf;
      a1[38] = v15;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = (uint64_t)(a1[37] - a1[36]) >> 3;
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GPSODOM,Rhythmic,Distance Multiplier Model Coefficients For Run,Size,%{public}lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_30:
          double v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicScaled::setDistanceMultiplierSettings()", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
          return;
        }
LABEL_32:
        dispatch_once(&qword_1024193D0, &stru_102345420);
        goto LABEL_30;
      }
    }
    else
    {
      sub_100B59E68(v6, buf);
      unint64_t v10 = (void *)a1[36];
      if (v10)
      {
        a1[37] = v10;
        operator delete(v10);
      }
      *((_OWORD *)a1 + 18) = *(_OWORD *)buf;
      a1[38] = v15;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = (uint64_t)(a1[37] - a1[36]) >> 3;
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GPSODOM,Rhythmic,Distance Multiplier Model Coefficients For Default,Size,%{public}lu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_30;
        }
        goto LABEL_32;
      }
    }
  }
}

char *sub_1018FF0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long __src = xmmword_101E46340;
  double v7 = &v20;
  double v8 = (char *)&v22;
  uint64_t v9 = (char *)v19;
  unint64_t v10 = &v20;
  unint64_t v21 = 0xBFA42C3C9EECBFB1;
  v19[1] = unk_101E46418;
  long long v20 = xmmword_101E463F0;
  long long v18 = xmmword_101E46350;
  v19[0] = xmmword_101E46408;
  unint64_t v16 = 0xBFA3404EA4A8C155;
  v14[0] = xmmword_101E46440;
  v14[1] = unk_101E46450;
  long long v15 = xmmword_101E46428;
  if (CLMotionActivity::isTypeWalking())
  {
    sub_100B5B760(a2, *(void *)(a2 + 8), (char *)&__src, v24, 2);
  }
  else
  {
    int isTypeRunning = CLMotionActivity::isTypeRunning();
    uint64_t v12 = *(void *)(a2 + 8);
    if (isTypeRunning)
    {
      double v8 = (char *)&v17;
      unint64_t v10 = &v15;
      sub_100B5B760(a2, v12, (char *)&v18, (char *)v19, 2);
      uint64_t v9 = (char *)v14;
      double v7 = &v15;
    }
    else
    {
      sub_100B5B760(a2, v12, (char *)&__src, v24, 2);
      uint64_t v9 = (char *)v19;
      double v7 = &v20;
    }
  }
  sub_100B5B760(a3, *(void *)(a3 + 8), (char *)v7, v8, 3);
  return sub_100B5B760(a4, *(void *)(a4 + 8), v9, (char *)v10, 4);
}

void sub_1018FF290(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAF8AF8AF8AF8AF8BLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x75075075075076) {
      sub_1001D7FD4();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 560;
    uint64_t v6 = (char *)sub_10190DC48(v3, a2);
    double v7 = &v6[560 * v5];
    uint64_t v9 = &v6[560 * v8];
    uint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v10 -= 560;
        v12 -= 560;
        memcpy(v12, v10, 0x230uLL);
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

__n128 sub_1018FF3A8(__n128 *a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  *a1 = result;
  a1[5].n128_u64[0] = 0;
  a1[5].n128_u64[1] = 0;
  a1[4].n128_u64[1] = 0;
  a1[6] = result;
  a1[7] = result;
  a1[8] = result;
  a1[9].n128_u64[0] = 0xBFF0000000000000;
  a1[9].n128_u64[1] = 0;
  a1[10].n128_u64[0] = 0;
  a1[10].n128_u64[1] = 0;
  a1[11] = result;
  a1[12] = result;
  a1[13] = result;
  a1[14].n128_u64[0] = 0xBFF0000000000000;
  a1[1].n128_u64[0] = 0;
  a1[1].n128_u64[1] = 0;
  a1[15].n128_u64[0] = a1[14].n128_u64[1];
  a1[16].n128_u64[1] = a1[16].n128_u64[0];
  a1[17].n128_u64[1] = 0xBFF0000000000000;
  return result;
}

double sub_1018FF3F4(double *a1)
{
  double result = *a1;
  if (*a1 >= 0.0)
  {
    AnalyticsSendEventLazy();
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "GPSODOM,RhythmicScaled,coreanalytics metric submitted", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLScaledOdometerAnalytics::submitCoreAnalyticsMetric()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return sub_1018FF9CC((uint64_t)a1);
  }
  return result;
}

NSDictionary *sub_1018FF5F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v75[0] = @"3DDistanceFeatureValAvg";
  double v2 = *(double *)(v1 + 40);
  BOOL v3 = v2 > 1.0 || v2 <= 0.0;
  unsigned int v4 = llround(v2);
  if (v3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 1;
  }
  v76[0] = +[NSNumber numberWithInt:v5];
  v75[1] = @"3DDistanceFeatureValMax";
  double v6 = *(double *)(v1 + 16);
  BOOL v7 = v6 > 1.0 || v6 <= 0.0;
  unsigned int v8 = llround(v6);
  if (v7) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 1;
  }
  v76[1] = +[NSNumber numberWithInt:v9];
  v75[2] = @"HeightChangeFeatureValAvg";
  double v10 = *(double *)(v1 + 200);
  BOOL v11 = v10 > 1.0 || v10 <= 0.0;
  unsigned int v12 = llround(v10);
  if (v11) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 1;
  }
  v76[2] = +[NSNumber numberWithInt:v13];
  v75[3] = @"HeightChangeFeatureValMax";
  double v14 = *(double *)(v1 + 176);
  BOOL v15 = v14 > 1.0 || v14 <= 0.0;
  unsigned int v16 = llround(v14);
  if (v15) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 1;
  }
  v76[3] = +[NSNumber numberWithInt:v17];
  v75[4] = @"CourseChangeFeatureValAvg";
  double v18 = *(double *)(v1 + 360);
  BOOL v19 = v18 > 1.0 || v18 <= 0.0;
  unsigned int v20 = llround(v18);
  if (v19) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 1;
  }
  unsigned char v76[4] = +[NSNumber numberWithInt:v21];
  v75[5] = @"CourseChangeFeatureValMax";
  double v22 = *(double *)(v1 + 336);
  BOOL v23 = v22 > 1.0 || v22 <= 0.0;
  unsigned int v24 = llround(v22);
  if (v23) {
    uint64_t v25 = v24;
  }
  else {
    uint64_t v25 = 1;
  }
  v76[5] = +[NSNumber numberWithInt:v25];
  v75[6] = @"StraightnessFeatureValAvg";
  double v26 = *(double *)(v1 + 520);
  BOOL v27 = v26 > 1.0 || v26 <= 0.0;
  unsigned int v28 = llround(v26);
  if (v27) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 1;
  }
  v76[6] = +[NSNumber numberWithInt:v29];
  v75[7] = @"StraightnessFeatureValMax";
  double v30 = *(double *)(v1 + 496);
  BOOL v31 = v30 > 1.0 || v30 <= 0.0;
  unsigned int v32 = llround(v30);
  if (v31) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 1;
  }
  v76[7] = +[NSNumber numberWithInt:v33];
  v75[8] = @"3DDistanceFeatureUncAvg";
  double v34 = *(double *)(v1 + 120);
  BOOL v35 = v34 > 1.0 || v34 <= 0.0;
  unsigned int v36 = llround(v34);
  if (v35) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 1;
  }
  v76[8] = +[NSNumber numberWithInt:v37];
  v75[9] = @"3DDistanceFeatureUncMax";
  double v38 = *(double *)(v1 + 96);
  BOOL v39 = v38 > 1.0 || v38 <= 0.0;
  unsigned int v40 = llround(v38);
  if (v39) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 1;
  }
  v76[9] = +[NSNumber numberWithInt:v41];
  v75[10] = @"HeightChangeFeatureUncAvg";
  double v42 = *(double *)(v1 + 280);
  BOOL v43 = v42 > 1.0 || v42 <= 0.0;
  unsigned int v44 = llround(v42);
  if (v43) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = 1;
  }
  v76[10] = +[NSNumber numberWithInt:v45];
  v75[11] = @"HeightChangeFeatureUncMax";
  double v46 = *(double *)(v1 + 256);
  BOOL v47 = v46 > 1.0 || v46 <= 0.0;
  unsigned int v48 = llround(v46);
  if (v47) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 1;
  }
  v76[11] = +[NSNumber numberWithInt:v49];
  v75[12] = @"CourseChangeFeatureUncAvg";
  double v50 = *(double *)(v1 + 440);
  BOOL v51 = v50 > 1.0 || v50 <= 0.0;
  unsigned int v52 = llround(v50);
  if (v51) {
    uint64_t v53 = v52;
  }
  else {
    uint64_t v53 = 1;
  }
  v76[12] = +[NSNumber numberWithInt:v53];
  v75[13] = @"CourseChangeFeatureUncMax";
  double v54 = *(double *)(v1 + 416);
  BOOL v55 = v54 > 1.0 || v54 <= 0.0;
  unsigned int v56 = llround(v54);
  if (v55) {
    uint64_t v57 = v56;
  }
  else {
    uint64_t v57 = 1;
  }
  v76[13] = +[NSNumber numberWithInt:v57];
  v75[14] = @"StraightnessFeatureUncAvg";
  double v58 = *(double *)(v1 + 600);
  BOOL v59 = v58 > 1.0 || v58 <= 0.0;
  unsigned int v60 = llround(v58);
  if (v59) {
    uint64_t v61 = v60;
  }
  else {
    uint64_t v61 = 1;
  }
  v76[14] = +[NSNumber numberWithInt:v61];
  v75[15] = @"StraightnessFeatureUncMax";
  double v62 = *(double *)(v1 + 576);
  BOOL v63 = v62 > 1.0 || v62 <= 0.0;
  unsigned int v64 = llround(v62);
  if (v63) {
    uint64_t v65 = v64;
  }
  else {
    uint64_t v65 = 1;
  }
  v76[15] = +[NSNumber numberWithInt:v65];
  v75[16] = @"NumberOfUsedFeatures";
  v76[16] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 732)];
  v75[17] = @"UsedModelNumber";
  v76[17] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 728)];
  v75[18] = @"TimeTakenToCompleteScaledOdometerProcessingAvg";
  double v66 = *(double *)(v1 + 680);
  BOOL v67 = v66 > 1.0 || v66 <= 0.0;
  unsigned int v68 = llround(v66);
  if (v67) {
    uint64_t v69 = v68;
  }
  else {
    uint64_t v69 = 1;
  }
  v76[18] = +[NSNumber numberWithInt:v69];
  v75[19] = @"TimeTakenToCompleteScaledOdometerProcessingMax";
  double v70 = *(double *)(v1 + 656);
  BOOL v71 = v70 > 1.0 || v70 <= 0.0;
  unsigned int v72 = llround(v70);
  if (v71) {
    uint64_t v73 = v72;
  }
  else {
    uint64_t v73 = 1;
  }
  v76[19] = +[NSNumber numberWithInt:v73];
  return +[NSDictionary dictionaryWithObjects:v76 forKeys:v75 count:20];
}

double sub_1018FF9CC(uint64_t a1)
{
  *(void *)a1 = 0xBFF0000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 536) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(_DWORD *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 592) = 0;
  *(void *)(a1 + 608) = 0;
  *(void *)(a1 + 600) = 0;
  *(void *)(a1 + 616) = 0;
  double result = 0.0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 672) = 0;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 680) = 0;
  *(void *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  return result;
}

BOOL sub_1018FFA88(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[29];
  uint64_t v3 = a1[30];
  if (v2 != v3)
  {
    uint64_t v17 = 0x6F96F96F96F96F97 * ((v3 - v2) >> 2);
    uint64_t v5 = a1[32];
    if (v17 != 0xAF8AF8AF8AF8AF8BLL * ((a1[33] - v5) >> 4)) {
      sub_10190E570();
    }
    *(void *)double v18 = v2;
    uint64_t v16 = v5;
    sub_10190DC94(v18, &v16, (unsigned int *)&v17, buf);
    long long v7 = *(_OWORD *)buf;
    *(void *)uint64_t buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    unsigned int v8 = *(std::__shared_weak_count **)(a2 + 808);
    *(_OWORD *)(a2 + 800) = v7;
    if (v8)
    {
      sub_1000DB0A0(v8);
      if (*(void *)&buf[8]) {
        sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v10 = sub_1010FB9FC(*(int **)(a2 + 800));
      uint64_t v11 = 0x6F96F96F96F96F97 * ((uint64_t)(a1[30] - a1[29]) >> 2);
      *(_DWORD *)uint64_t buf = 134349312;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "GPSODOM,CLGpsOdometryRhythmicBase,Batched locations size,%{public}lu,%{public}lu", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v13 = sub_1010FB9FC(*(int **)(a2 + 800));
      uint64_t v14 = 0x6F96F96F96F96F97 * ((uint64_t)(a1[30] - a1[29]) >> 2);
      *(_DWORD *)double v18 = 134349312;
      *(void *)&unsigned char v18[4] = v13;
      __int16 v19 = 2050;
      uint64_t v20 = v14;
      BOOL v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicBase::getRhythmicGnssBatchedLocations(CLLocationProvider_Type::NotificationData &) const", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
  }
  return v2 != v3;
}

#error "1018FFE20: call analysis failed (funcsize=61)"

void sub_1018FFE50(_Unwind_Exception *a1)
{
  sub_10190DD70(v1, *v2);
  _Unwind_Resume(a1);
}

void sub_1018FFE68(uint64_t a1, double *a2, uint64_t a3, _DWORD *a4, char a5, double a6)
{
  ++a4[2];
  if (!sub_1018FB340(a2))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    __int16 v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v20 = *((void *)a2 + 9);
      double v21 = *a2;
      uint64_t v22 = *((void *)a2 + 1);
      *(_DWORD *)uint64_t buf = 134349569;
      uint64_t v61 = v20;
      __int16 v62 = 2049;
      double v63 = v21;
      __int16 v64 = 2049;
      uint64_t v65 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,invalid location for cacheRoadData,LL,%{private}.7lf,%{private}.7lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v18 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLMMOdometryActivitySettings &, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, double, const BOOL)", "%s\n");
      goto LABEL_72;
    }
    return;
  }
  if (*(unsigned char *)(a1 + 112))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    unsigned int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *((void *)a2 + 9);
      double v14 = *a2;
      uint64_t v15 = *((void *)a2 + 1);
      double v16 = *(double *)(a1 + 48);
      uint64_t v17 = *(void *)(a1 + 56);
      *(_DWORD *)uint64_t buf = 134350081;
      uint64_t v61 = v13;
      __int16 v62 = 2049;
      double v63 = v14;
      __int16 v64 = 2049;
      uint64_t v65 = v15;
      __int16 v66 = 2049;
      double v67 = v16;
      __int16 v68 = 2049;
      uint64_t v69 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,cachingInProgress,LL,%{private}.7lf,%{private}.7lf,prevLL,%{private}.7lf,%{private}.7lf", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_9:
        double v18 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLMMOdometryActivitySettings &, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, double, const BOOL)", "%s\n");
LABEL_72:
        if (v18 != buf) {
          free(v18);
        }
        return;
      }
LABEL_82:
      dispatch_once(&qword_1024193D0, &stru_102345420);
      goto LABEL_9;
    }
    return;
  }
  sub_101900B04((double *)(a1 + 40));
  double v24 = v23;
  if ((a5 & 1) == 0
    && (!*(void *)(a1 + 104)
     || !sub_10190D1D4(*(double *)(a1 + 40), *(double *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56))
     || v24 > 600.0))
  {
    ++a4[4];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    unsigned int v40 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v41 = *((void *)a2 + 9);
      *(_DWORD *)uint64_t buf = 134349568;
      uint64_t v61 = v41;
      __int16 v62 = 2050;
      double v63 = v24;
      __int16 v64 = 2050;
      uint64_t v65 = 0x4082C00000000000;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,no re-cache with non-qualified fix,no data has been cached previously or timeSinceLastCache,%{public}.2lf,is over threshold,%{public}.2lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_9;
      }
      goto LABEL_82;
    }
    return;
  }
  double v25 = *(double *)(a3 + 8);
  double v26 = *(double *)(a3 + 16);
  double v27 = v25 + a2[3] * 3.0;
  if (sub_10190D1D4(*(double *)(a1 + 40), *(double *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56)))
  {
    double v28 = a2[5];
    if (v28 >= 0.0 && a2[6] > 0.0 && v24 > 0.0)
    {
      double v29 = a6 + v24 * v28;
      if (v29 >= v27) {
        double v27 = a6 + v24 * v28;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v30 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = *((void *)a2 + 9);
        *(_DWORD *)uint64_t buf = 134349824;
        uint64_t v61 = v31;
        __int16 v62 = 2050;
        double v63 = v24;
        __int16 v64 = 2050;
        uint64_t v65 = *(void *)&v27;
        __int16 v66 = 2050;
        double v67 = v29;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,cacheRoadData,timeSinceLastCache,%{public}.2lf,radius,%{public}.2lf,speedBasedRadius,%{public}.2lf", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        double v58 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLMMOdometryActivitySettings &, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, double, const BOOL)", "%s\n", v58);
        if (v58 != (char *)buf) {
          free(v58);
        }
      }
    }
  }
  if (!*(void *)(a1 + 104)
    || !sub_10190D1D4(*(double *)(a1 + 40), *(double *)(a1 + 64), *(double *)(a1 + 48), *(double *)(a1 + 56)))
  {
LABEL_55:
    if (v26 >= v27) {
      double v49 = v27;
    }
    else {
      double v49 = v26;
    }
    if (v27 >= v25) {
      double v50 = v49;
    }
    else {
      double v50 = v25;
    }
    sub_101900B58(a1, (uint64_t)a4, a2[9], *a2, a2[1], v50);
    return;
  }
  double v32 = sub_1000F1648((double *)a1, *a2, a2[1], *(double *)(a1 + 48), *(double *)(a1 + 56), 0.0);
  double v33 = v32;
  if (a5)
  {
    if (v32 < 50.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v34 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v35 = *((void *)a2 + 9);
        double v36 = *a2;
        uint64_t v37 = *((void *)a2 + 1);
        double v38 = *(double *)(a1 + 48);
        uint64_t v39 = *(void *)(a1 + 56);
        *(_DWORD *)uint64_t buf = 134350337;
        uint64_t v61 = v35;
        __int16 v62 = 2049;
        double v63 = v36;
        __int16 v64 = 2049;
        uint64_t v65 = v37;
        __int16 v66 = 2049;
        double v67 = v38;
        __int16 v68 = 2049;
        uint64_t v69 = v39;
        __int16 v70 = 2050;
        double v71 = v33;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,skip caching as new location,LL,%{private}.7lf,%{private}.7lf,is too close to prevLL,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf", buf, 0x3Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1) {
          goto LABEL_9;
        }
        goto LABEL_82;
      }
      return;
    }
    goto LABEL_55;
  }
  ++a4[4];
  double v27 = v32 + a6;
  if (v32 + a6 >= *(double *)(a1 + 64))
  {
    ++a4[5];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    double v42 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v43 = *((void *)a2 + 9);
      double v44 = *a2;
      uint64_t v45 = *((void *)a2 + 1);
      double v46 = *(double *)(a1 + 48);
      uint64_t v47 = *(void *)(a1 + 56);
      uint64_t v48 = *(void *)(a1 + 64);
      *(_DWORD *)uint64_t buf = 134350849;
      uint64_t v61 = v43;
      __int16 v62 = 2049;
      double v63 = v44;
      __int16 v64 = 2049;
      uint64_t v65 = v45;
      __int16 v66 = 2049;
      double v67 = v46;
      __int16 v68 = 2049;
      uint64_t v69 = v47;
      __int16 v70 = 2050;
      double v71 = v33;
      __int16 v72 = 2050;
      uint64_t v73 = v48;
      __int16 v74 = 2050;
      double v75 = v33 + a6;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,process re-cache with non-qualified fix,LL,%{private}.7lf,%{private}.7lf,prevLL,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf,lastRadius,%{public}.2lf,radius,%{public}.2lf", buf, 0x52u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      BOOL v59 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CLGpsOdometryRhythmic_Types::GpsPoint &, const CLMMOdometryActivitySettings &, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, double, const BOOL)", "%s\n", v59);
      if (v59 != (char *)buf) {
        free(v59);
      }
    }
    goto LABEL_55;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  BOOL v51 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v52 = *((void *)a2 + 9);
    double v53 = *a2;
    uint64_t v54 = *((void *)a2 + 1);
    double v55 = *(double *)(a1 + 48);
    uint64_t v56 = *(void *)(a1 + 56);
    uint64_t v57 = *(void *)(a1 + 64);
    *(_DWORD *)uint64_t buf = 134350849;
    uint64_t v61 = v52;
    __int16 v62 = 2049;
    double v63 = v53;
    __int16 v64 = 2049;
    uint64_t v65 = v54;
    __int16 v66 = 2049;
    double v67 = v55;
    __int16 v68 = 2049;
    uint64_t v69 = v56;
    __int16 v70 = 2050;
    double v71 = v33;
    __int16 v72 = 2050;
    uint64_t v73 = v57;
    __int16 v74 = 2050;
    double v75 = v33 + a6;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,no re-cache with non-qualified fix, safeRadius is less than previously cached radius,LL,%{private}.7lf,%{private}.7lf,prevLL,%{private}.7lf,%{private}.7lf,distance,%{public}.2lf,lastRadius,%{public}.2lf,safeRadius,%{public}.2lf", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_9;
    }
    goto LABEL_82;
  }
}

BOOL sub_101900B04(double *a1)
{
  return sub_10190D1D4(*a1, a1[3], a1[1], a1[2]);
}

void sub_101900B58(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x3812000000;
  v22[3] = sub_100178174;
  unsigned char v22[4] = nullsub_60;
  v22[5] = "";
  double v23 = -1.0;
  double v23 = sub_10016C458();
  v19[0] = 0;
  v19[1] = v19;
  _OWORD v19[2] = 0x4812000000;
  v19[3] = sub_1019013DC;
  v19[4] = sub_101901418;
  v19[5] = "";
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v20 = v21;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  unint64_t v18[2] = sub_101901428;
  v18[3] = &unk_1023453B8;
  unsigned char v18[4] = v19;
  v18[5] = a1;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_101901620;
  v17[3] = &unk_1023453E0;
  void v17[5] = v22;
  void v17[6] = a1;
  *(double *)&v17[7] = a3;
  v17[8] = a2;
  v17[4] = v19;
  if (sub_10190D1D4(a3, a6, a4, a5))
  {
    *(double *)(a1 + 40) = a3;
    *(double *)(a1 + 48) = a4;
    *(double *)(a1 + 56) = a5;
    *(double *)(a1 + 64) = a6;
    if (!*(void *)(a1 + 120))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      unsigned int v12 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "GPSODOM-MM,Creating maps geocaching OS transaction", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        LOWORD(v24) = 0;
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      *(void *)(a1 + 120) = os_transaction_create();
    }
    ++*(_DWORD *)(a2 + 12);
    *(unsigned char *)(a1 + 112) = 1;
    [*(id *)(a1 + 72) findRoadsNear:v18 radius:v17 handler:a4 completionHandler:a5];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134349825;
      double v33 = a3;
      __int16 v34 = 2049;
      double v35 = a4;
      __int16 v36 = 2049;
      double v37 = a5;
      __int16 v38 = 2050;
      double v39 = a6;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,caching road near,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      int v24 = 134349825;
      double v25 = a3;
      __int16 v26 = 2049;
      double v27 = a4;
      __int16 v28 = 2049;
      double v29 = a5;
      __int16 v30 = 2050;
      double v31 = a6;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)", "%s\n", v14);
LABEL_26:
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349825;
      double v33 = a3;
      __int16 v34 = 2049;
      double v35 = a4;
      __int16 v36 = 2049;
      double v37 = a5;
      __int16 v38 = 2050;
      double v39 = a6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,cacheRoadData,invalid input,ll,%{private}.7lf,%{private}.7lf,radius,%{public}.2lf", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      int v24 = 134349825;
      double v25 = a3;
      __int16 v26 = 2049;
      double v27 = a4;
      __int16 v28 = 2049;
      double v29 = a5;
      __int16 v30 = 2050;
      double v31 = a6;
      double v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)", "%s\n", v14);
      goto LABEL_26;
    }
  }
  _Block_object_dispose(v19, 8);
  sub_10190DD70((uint64_t)&v20, v21[0]);
  _Block_object_dispose(v22, 8);
}

void sub_1019011EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,char a36)
{
  _Block_object_dispose(&a27, 8);
  sub_10190DD70(v36, a34);
  _Block_object_dispose(&a36, 8);
  _Unwind_Resume(a1);
}

void sub_101901234(uint64_t a1)
{
  if (*(void *)(a1 + 120))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GPSODOM-MM,Releasing maps geocaching OS transaction", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::releaseOSTransaction()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }

    *(void *)(a1 + 120) = 0;
  }
}

void *sub_1019013DC(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  unsigned int v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    *uint64_t v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_101901418(uint64_t a1)
{
}

void sub_101901428(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    id v4 = a2;
    if (v4)
    {
      uint64_t v5 = v4;
      if ((unint64_t)[v4 coordinateCount] >= 2)
      {
        unsigned int v6 = [v5 isRoadPedestrianNavigable];
        unsigned int v7 = [v5 walkableSide];
        unsigned int v8 = [v5 isRail];
        if (((v7 - 1 > 2) & ~v6) == 0 && !v8)
        {
          sub_100FFD4D4((uint64_t)v23, v5, 1);
          if (sub_1011DFA10(v3 + 88, (uint64_t)v23)
            && (double v21 = v23,
                *((void *)sub_10190DDD0((uint64_t **)(v3 + 88), (uint64_t)v23, (uint64_t)&unk_101D0B290, &v21) + 7)))
          {
            double v21 = v23;
            uint64_t v9 = sub_10190DDD0((uint64_t **)(v3 + 88), (uint64_t)v23, (uint64_t)&unk_101D0B290, &v21);
            uint64_t v10 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
            double v21 = v23;
            uint64_t v11 = sub_10190DDD0(v10, (uint64_t)v23, (uint64_t)&unk_101D0B290, &v21);
            uint64_t v13 = *((void *)v9 + 7);
            uint64_t v12 = *((void *)v9 + 8);
            if (v12) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
            }
            double v14 = (std::__shared_weak_count *)*((void *)v11 + 8);
            *((void *)v11 + 7) = v13;
            *((void *)v11 + 8) = v12;
            if (v14)
            {
              uint64_t v15 = v14;
LABEL_19:
              sub_1000DB0A0(v15);
            }
          }
          else
          {
            sub_100D25C4C(v5, 1, (std::string **)&v21);
            if (v21 && sub_10039D6C0((uint64_t)v21))
            {
              double v16 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
              int v24 = v23;
              uint64_t v17 = sub_10190DDD0(v16, (uint64_t)v23, (uint64_t)&unk_101D0B290, &v24);
              __int16 v19 = v21;
              double v18 = v22;
              if (v22) {
                atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              uint64_t v20 = (std::__shared_weak_count *)*((void *)v17 + 8);
              *((void *)v17 + 7) = v19;
              *((void *)v17 + 8) = v18;
              if (v20) {
                sub_1000DB0A0(v20);
              }
            }
            uint64_t v15 = v22;
            if (v22) {
              goto LABEL_19;
            }
          }
        }
      }
    }
  }
}

void sub_101901608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_101901620(void *a1, void *a2)
{
  uint64_t v3 = a1[6];
  if (a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[7];
      *(_DWORD *)uint64_t buf = 134349827;
      uint64_t v19 = v6;
      __int16 v20 = 2050;
      id v21 = [a2 code];
      __int16 v22 = 2114;
      double v23 = COERCE_DOUBLE([a2 domain]);
      __int16 v24 = 2113;
      id v25 = [a2 localizedDescription];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning GPSODOM-MM,%{public}.1lf,cacheRoadData reported error,%{public}lld,domain,%{public}@,description,\"%{private}@\"", buf, 0x2Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      double v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)_block_invoke", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    ++*(_DWORD *)(a1[8] + 24);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    unsigned int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = a1[7];
      uint64_t v9 = *(void **)(*(void *)(a1[4] + 8) + 64);
      uint64_t v10 = *(void *)(a1[5] + 8);
      double v11 = 0.0;
      if (*(double *)(v10 + 48) >= 0.0) {
        double v11 = vabdd_f64(sub_10016C458(), *(double *)(v10 + 48)) * 1000.0;
      }
      *(_DWORD *)uint64_t buf = 134349568;
      uint64_t v19 = v8;
      __int16 v20 = 2050;
      id v21 = v9;
      __int16 v22 = 2050;
      double v23 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,cacheRoadData completionHandler called,size,%{public}lu,timeTakenInMS,%{public}.1lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      if (*(double *)(*(void *)(a1[5] + 8) + 48) >= 0.0) {
        sub_10016C458();
      }
      uint64_t v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::cacheRoadData(const CFAbsoluteTime, const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &)_block_invoke", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    uint64_t v12 = *(void *)(a1[4] + 8);
    if (v3 + 88 != v12 + 48) {
      sub_10190DEC0((uint64_t **)(v3 + 88), *(long long **)(v12 + 48), (long long *)(v12 + 56));
    }
    uint64_t v13 = (char *)(a1[8] + 32);
    uint64_t v14 = *(void *)(a1[5] + 8);
    double v15 = 0.0;
    if (*(double *)(v14 + 48) >= 0.0) {
      double v15 = vabdd_f64(sub_10016C458(), *(double *)(v14 + 48)) * 1000.0;
    }
    sub_10076AE78(v13, v15);
    sub_10076AE78((char *)(a1[8] + 112), (double)*(unint64_t *)(v3 + 104));
    [*(id *)(v3 + 72) clearRoadTiles];
  }
  *(unsigned char *)(v3 + 112) = 0;
  sub_101901234(v3);
}

void sub_101901B00(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  if (*(unsigned char *)(a1 + 112))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "GPSODOM-MM,RoadBuffer,findRoadsNear, caching in progress", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      LOWORD(v49) = 0;
      unsigned int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::findRoadsNear(const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, std::map<CLParticleMapMatcherCommon::RoadKey, CLMapRoadPtr> &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        goto LABEL_59;
      }
    }
    return;
  }
  double v14 = sub_10016C458();
  double v47 = 0.0;
  double v48 = 0.0;
  double v45 = 0.0;
  double v46 = 0.0;
  sub_1004BDD98(&v48, &v47, &v46, &v45, a4, a5, a6);
  sub_10005B720(v47);
  double v47 = v15;
  sub_10005B720(v45);
  double v45 = v16;
  sub_10190DD70(a3, *(void **)(a3 + 8));
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v17 = *(void **)(a1 + 88);
  if (v17 == (void *)(a1 + 96))
  {
    BOOL v29 = 1;
    goto LABEL_41;
  }
  do
  {
    uint64_t v18 = v17[7];
    if (!v18) {
      goto LABEL_33;
    }
    uint64_t v19 = *(double **)(v18 + 136);
    __int16 v20 = *(double **)(v18 + 144);
    if (v19 == v20) {
      goto LABEL_33;
    }
    while (1)
    {
      if (*v19 < v48 || *v19 > v46) {
        goto LABEL_30;
      }
      if (v45 <= v47) {
        break;
      }
      double v22 = v19[1];
      if (v22 >= v47 && v22 <= v45) {
        goto LABEL_32;
      }
LABEL_30:
      v19 += 2;
      if (v19 == v20) {
        goto LABEL_33;
      }
    }
    if (v45 >= v47) {
      goto LABEL_30;
    }
    double v24 = v19[1];
    if (v24 >= v45 && v24 <= v47) {
      goto LABEL_30;
    }
LABEL_32:
    sub_10190E1E0((uint64_t **)a3, (uint64_t)(v17 + 4), (uint64_t)(v17 + 4));
LABEL_33:
    __int16 v26 = (void *)v17[1];
    if (v26)
    {
      do
      {
        double v27 = v26;
        __int16 v26 = (void *)*v26;
      }
      while (v26);
    }
    else
    {
      do
      {
        double v27 = (void *)v17[2];
        BOOL v28 = *v27 == (void)v17;
        uint64_t v17 = v27;
      }
      while (!v28);
    }
    uint64_t v17 = v27;
  }
  while (v27 != (void *)(a1 + 96));
  BOOL v29 = *(void *)(a3 + 16) == 0;
LABEL_41:
  if (*(void *)(a1 + 104) && v29) {
    ++*(_DWORD *)(a2 + 192);
  }
  __int16 v30 = (char *)(a2 + 200);
  double v31 = 0.0;
  if (v14 >= 0.0) {
    double v31 = vabdd_f64(sub_10016C458(), v14) * 1000.0;
  }
  sub_10076AE78(v30, v31);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  double v32 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v33 = *(void *)(a3 + 16);
    double v35 = v47;
    double v34 = v48;
    double v36 = 0.0;
    double v38 = v45;
    double v37 = v46;
    if (v14 >= 0.0) {
      double v36 = vabdd_f64(sub_10016C458(), v14) * 1000.0;
    }
    *(_DWORD *)uint64_t buf = 134351105;
    uint64_t v68 = v33;
    __int16 v69 = 2049;
    double v70 = a4;
    __int16 v71 = 2049;
    double v72 = a5;
    __int16 v73 = 2050;
    double v74 = a6;
    __int16 v75 = 2049;
    double v76 = v34;
    __int16 v77 = 2049;
    double v78 = v35;
    __int16 v79 = 2049;
    double v80 = v37;
    __int16 v81 = 2049;
    double v82 = v38;
    __int16 v83 = 2050;
    double v84 = v36;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,RoadBuffer,found roads,size,%{public}ld,searchCoord,%{private}.7lf,%{private}.7lf,radius,%{public}.1lf,min,%{private}.7lf,%{private}.7lf,max,%{private}.7lf,%{private}.7lf,timeTakenInMS,%{public}.2lf", buf, 0x5Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v39 = *(void *)(a3 + 16);
    double v41 = v47;
    double v40 = v48;
    double v42 = 0.0;
    double v44 = v45;
    double v43 = v46;
    if (v14 >= 0.0) {
      double v42 = vabdd_f64(sub_10016C458(), v14) * 1000.0;
    }
    int v49 = 134351105;
    uint64_t v50 = v39;
    __int16 v51 = 2049;
    double v52 = a4;
    __int16 v53 = 2049;
    double v54 = a5;
    __int16 v55 = 2050;
    double v56 = a6;
    __int16 v57 = 2049;
    double v58 = v40;
    __int16 v59 = 2049;
    double v60 = v41;
    __int16 v61 = 2049;
    double v62 = v43;
    __int16 v63 = 2049;
    double v64 = v44;
    __int16 v65 = 2050;
    double v66 = v42;
    unsigned int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::findRoadsNear(const double, const double, const double, CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics &, std::map<CLParticleMapMatcherCommon::RoadKey, CLMapRoadPtr> &)", "%s\n", v7);
    if (v7 != (char *)buf) {
LABEL_59:
    }
      free(v7);
  }
}

void sub_101902080(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,CLMapRoadBufer reset", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMapRoadBuffer::reset()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  id v4 = *(void **)(a1 + 96);
  uint64_t v3 = a1 + 96;
  *(void *)(v3 - 56) = 0xBFF0000000000000;
  *(void *)(v3 - 48) = 0;
  *(void *)(v3 - 40) = 0;
  *(void *)(v3 - 32) = 0xBFF0000000000000;
  sub_10190DD70(v3 - 8, v4);
  *(void *)(v3 - 8) = v3;
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(unsigned char *)(v3 + 16) = 0;
}

void sub_101902238(uint64_t a1)
{
  __asm { FMOV            V0.2D, #-1.0 }
  long long v7 = _Q0;
  *(_OWORD *)a1 = _Q0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_101171D90(a1 + 32);
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v7;
  *(void *)(a1 + 144) = 0xBFF0000000000000;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 192) = v7;
  *(_OWORD *)(a1 + 208) = v7;
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = 0xBFF0000000000000;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 320) = v7;
  *(_OWORD *)(a1 + 336) = v7;
  *(_OWORD *)(a1 + 352) = v7;
  *(unsigned char *)(a1 + 368) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 401) = 0u;
  *(void *)(a1 + 424) = 0;
  sub_100B5B704(a1 + 568);
  *(unsigned char *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 664) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 696) = 0;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_DWORD *)(a1 + 720) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_DWORD *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_DWORD *)(a1 + 1056) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_DWORD *)(a1 + 1136) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_DWORD *)(a1 + 1384) = 0;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_DWORD *)(a1 + 1472) = 0;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_DWORD *)(a1 + 688) = 0;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_DWORD *)(a1 + 856) = 0;
  *(_OWORD *)(a1 + 940) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 1000) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_DWORD *)(a1 + 1112) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1188) = 0u;
  *(_DWORD *)(a1 + 1280) = 0;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_DWORD *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1436) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1524) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(void *)(a1 + 1560) = 0;
  operator new();
}

void sub_1019024A0()
{
}

void sub_10190251C(uint64_t a1)
{
  if (!CLMotionActivity::isTypeWalking())
  {
    uint64_t v6 = (unsigned __int8 *)(a1 + 608);
    if (CLMotionActivity::isTypeRunning())
    {
      sub_100B5A770(a1 + 568, 1, (uint64_t)buf);
      long long v7 = v20;
      *(_OWORD *)uint64_t v6 = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 624) = v7;
      *(_OWORD *)(a1 + 640) = v21;
      *(void *)(a1 + 656) = v22;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int v9 = *v6;
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GPSODOM-MM,set running activity settings,enabled,%{public}d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        goto LABEL_34;
      }
    }
    else
    {
      int isTypeCycling = CLMotionActivity::isTypeCycling();
      uint64_t v11 = a1 + 568;
      if (!isTypeCycling)
      {
        sub_100B5A770(v11, 0, (uint64_t)buf);
        long long v15 = v20;
        *(_OWORD *)uint64_t v6 = *(_OWORD *)buf;
        *(_OWORD *)(a1 + 624) = v15;
        *(_OWORD *)(a1 + 640) = v21;
        *(void *)(a1 + 656) = v22;
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        double v16 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          int v17 = *v6;
          *(_DWORD *)uint64_t buf = 67240192;
          *(_DWORD *)&uint8_t buf[4] = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "GPSODOM-MM,set default activity, using walking settings,enabled,%{public}d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_32;
          }
          goto LABEL_34;
        }
        return;
      }
      sub_100B5A770(v11, 2, (uint64_t)buf);
      long long v12 = v20;
      *(_OWORD *)uint64_t v6 = *(_OWORD *)buf;
      *(_OWORD *)(a1 + 624) = v12;
      *(_OWORD *)(a1 + 640) = v21;
      *(void *)(a1 + 656) = v22;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int v14 = *v6;
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)&uint8_t buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "GPSODOM-MM,set cycling activity settings,enabled,%{public}d", buf, 8u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        goto LABEL_34;
      }
    }
LABEL_32:
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::setActivitySettings()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
    return;
  }
  sub_100B5A770(a1 + 568, 0, (uint64_t)buf);
  long long v2 = v20;
  *(_OWORD *)(a1 + 608) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 624) = v2;
  *(_OWORD *)(a1 + 640) = v21;
  *(void *)(a1 + 656) = v22;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v3 = (unsigned __int8 *)(a1 + 608);
  id v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v5 = *v3;
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GPSODOM-MM,set walking activity settings,enabled,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_32;
    }
LABEL_34:
    dispatch_once(&qword_1024193D0, &stru_102345420);
    goto LABEL_32;
  }
}

void sub_101902A78(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 608))
  {
    double v4 = -1.0;
    if (sub_1018FB340((double *)(a1 + 152))) {
      double v4 = vabdd_f64(*(double *)(a1 + 224), *(double *)(a2 + 16));
    }
    sub_1018FA970(a1 + 152, a2);
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)a1 = _Q0;
    uint64_t v10 = *(void *)(a1 + 424);
    if (v10 && v4 > *(double *)(a1 + 592)) {
      sub_1018FFE68(v10, (double *)(a1 + 152), a1 + 608, (_DWORD *)(a1 + 664), 0, *(double *)(a1 + 600));
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v12 = *(void *)(a1 + 152);
      uint64_t v13 = *(void *)(a1 + 160);
      uint64_t v14 = *(void *)(a1 + 168);
      uint64_t v15 = *(void *)(a1 + 176);
      uint64_t v17 = *(void *)(a1 + 216);
      uint64_t v16 = *(void *)(a1 + 224);
      uint64_t v19 = *(void *)(a1 + 200);
      uint64_t v18 = *(void *)(a1 + 208);
      uint64_t v20 = *(void *)(a1 + 184);
      uint64_t v21 = *(void *)(a1 + 192);
      *(_DWORD *)uint64_t buf = 134351617;
      uint64_t v25 = v16;
      __int16 v26 = 2049;
      uint64_t v27 = v12;
      __int16 v28 = 2049;
      uint64_t v29 = v13;
      __int16 v30 = 2050;
      uint64_t v31 = v18;
      __int16 v32 = 2050;
      uint64_t v33 = v14;
      __int16 v34 = 2050;
      uint64_t v35 = v21;
      __int16 v36 = 2050;
      uint64_t v37 = v15;
      __int16 v38 = 2050;
      uint64_t v39 = v17;
      __int16 v40 = 2050;
      uint64_t v41 = v19;
      __int16 v42 = 2050;
      uint64_t v43 = v20;
      __int16 v44 = 2050;
      double v45 = v4;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,location received,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,speedUnc,%{public}.2lf,altUnc,%{public}.2lf,dT,%{public}.2lf", buf, 0x70u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::update(const GNSS::PerEpochData &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)a1 = _Q0;
  }
}

uint64_t sub_101902D7C(double a1, double a2)
{
  uint64_t result = sub_1003BFEDC(a1, a2);
  if (result)
  {
    if (+[GEOLocationShifter isLocationShiftRequiredForCoordinate:](GEOLocationShifter, "isLocationShiftRequiredForCoordinate:", a1, a2))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134283777;
        double v10 = a1;
        __int16 v11 = 2049;
        double v12 = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "GPSODOM-MM,shifting required,LL,%{private}.7lf,%{private}.7lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        long long v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::isChinaShiftRequired(const double, const double) const", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      return 1;
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134283777;
        double v10 = a1;
        __int16 v11 = 2049;
        double v12 = a2;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "GPSODOM-MM,shifting not required,LL,%{private}.7lf,%{private}.7lf", buf, 0x16u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::isChinaShiftRequired(const double, const double) const", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_1019030C4(uint64_t a1)
{
  double v2 = sub_10016C458();
  if (*(unsigned char *)(a1 + 608))
  {
    double v3 = v2;
    if (sub_1018FB340((double *)(a1 + 152))
      && sub_101902D7C(*(double *)(a1 + 152), *(double *)(a1 + 160)))
    {
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)a1 = _Q0;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 224);
        *(_DWORD *)uint64_t buf = 134349056;
        uint64_t v40 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,qualified fix received,unsupported region", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        __int16 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateDistanceAndBatchedLocations()", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    else
    {
      double v12 = (uint64_t *)(a1 + 664);
      if (*(double *)(a1 + 664) < 0.0) {
        *(double *)double v12 = sub_10016C458();
      }
      if ((sub_101903728(a1) & 1) == 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        uint64_t v13 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = *(void *)(a1 + 224);
          *(_DWORD *)uint64_t buf = 134349056;
          uint64_t v40 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,computeDeltaDistanceAndBatchedLocations failed to compute deltadistance", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345420);
          }
          __int16 v38 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateDistanceAndBatchedLocations()", "%s\n", v38);
          if (v38 != (char *)buf) {
            free(v38);
          }
        }
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)a1 = _Q0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v16 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a1 + 216);
        uint64_t v17 = *(void *)(a1 + 224);
        uint64_t v19 = *(void *)(a1 + 160);
        uint64_t v20 = *(void *)(a1 + 168);
        uint64_t v22 = *(void *)(a1 + 200);
        uint64_t v21 = *(void *)(a1 + 208);
        uint64_t v24 = *(void *)(a1 + 184);
        uint64_t v23 = *(void *)(a1 + 192);
        uint64_t v25 = *(void *)(a1 + 176);
        uint64_t v27 = *(void *)(a1 + 16);
        uint64_t v26 = *(void *)(a1 + 24);
        uint64_t v28 = *(void *)a1;
        uint64_t v30 = *(void *)(a1 + 144);
        uint64_t v29 = *(void *)(a1 + 152);
        *(_DWORD *)uint64_t buf = 134352385;
        uint64_t v40 = v17;
        __int16 v41 = 2049;
        uint64_t v42 = v29;
        __int16 v43 = 2049;
        uint64_t v44 = v19;
        __int16 v45 = 2050;
        uint64_t v46 = v21;
        __int16 v47 = 2050;
        uint64_t v48 = v20;
        __int16 v49 = 2050;
        uint64_t v50 = v23;
        __int16 v51 = 2050;
        uint64_t v52 = v25;
        __int16 v53 = 2050;
        uint64_t v54 = v18;
        __int16 v55 = 2050;
        uint64_t v56 = v22;
        __int16 v57 = 2050;
        uint64_t v58 = v24;
        __int16 v59 = 2050;
        uint64_t v60 = v26;
        __int16 v61 = 2050;
        uint64_t v62 = v27;
        __int16 v63 = 2050;
        uint64_t v64 = v28;
        __int16 v65 = 2050;
        uint64_t v66 = v30;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "GPSODOM-MM,%{public}.1lf,qualified fix received,LL,%{private}.7lf,%{private}.7lf,course,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,speedUnc,%{public}.2lf,altUnc,%{public}.2lf,totalDistance,%{public}.1lf,totalMMOdometerDistance,%{public}.1lf,deltaDistance,%{public}.1lf,prevTime,%{public}.1lf", buf, 0x8Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        uint64_t v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateDistanceAndBatchedLocations()", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
      sub_1018FC724(a1);
      long long v31 = *(_OWORD *)(a1 + 152);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 168);
      long long v32 = *(_OWORD *)(a1 + 200);
      *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 184);
      *(_OWORD *)(a1 + 120) = v32;
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a1 + 216);
      *(_OWORD *)(a1 + 72) = v31;
      uint64_t v33 = *(void *)(a1 + 424);
      if (v33) {
        sub_1018FFE68(v33, (double *)(a1 + 152), a1 + 608, (_DWORD *)(a1 + 664), 1, *(double *)(a1 + 600));
      }
      __int16 v34 = (char *)(a1 + 1448);
      double v35 = 0.0;
      if (v3 >= 0.0) {
        double v35 = vabdd_f64(sub_10016C458(), v3) * 1000.0;
      }
      sub_10076AE78(v34, v35);
      sub_101904974(v12);
    }
  }
  else
  {
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)a1 = _Q0;
  }
}

uint64_t sub_101903728(uint64_t a1)
{
  if (!*(void *)(a1 + 424))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = *(void *)(a1 + 224);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,MapRoadBuffer is not initialized", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_60;
    }
    goto LABEL_131;
  }
  if (!sub_1018FB340((double *)(a1 + 152)))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = *(void *)(a1 + 224);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,latestpos is invalid", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_60;
    }
    goto LABEL_131;
  }
  if (!sub_1018FB340((double *)(a1 + 72)))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v19 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v20 = *(void *)(a1 + 224);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,previous location is invalid,setting now", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v21 = *(void *)(a1 + 224);
    LODWORD(v78[0]) = 134349056;
    *(void *)((char *)v78 + 4) = v21;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v22);
    goto LABEL_116;
  }
  if (!*(void *)(*(void *)(a1 + 424) + 104))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v23 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v24 = *(void *)(a1 + 224);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,empty road buffer,caching again", buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_60;
    }
LABEL_131:
    dispatch_once(&qword_1024193D0, &stru_102345420);
LABEL_60:
    uint64_t v25 = *(void *)(a1 + 224);
    LODWORD(v78[0]) = 134349056;
    *(void *)((char *)v78 + 4) = v25;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v22);
    goto LABEL_116;
  }
  uint64_t v2 = a1 + 288;
  if (!*(unsigned char *)(a1 + 368)
    || !sub_1018FB340((double *)(a1 + 288))
    || vabdd_f64(*(double *)(a1 + 144), *(double *)(a1 + 360)) > 0.001)
  {
    sub_100134750(v66, "Prev");
    BOOL v3 = sub_10190523C(a1, a1 + 72, a1 + 288, (uint64_t *)v66);
    BOOL v4 = v3;
    if ((v67 & 0x80000000) == 0)
    {
      if (v3) {
        goto LABEL_10;
      }
      goto LABEL_62;
    }
    operator delete(v66[0]);
    if (!v4)
    {
LABEL_62:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v26 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v27 = *(void *)(a1 + 224);
        uint64_t v28 = *(void *)(a1 + 144);
        *(_DWORD *)uint64_t buf = 134349312;
        *(void *)&uint8_t buf[4] = v27;
        __int16 v87 = 2050;
        uint64_t v88 = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,unable to compute snap for prev position fix,%{public}.1lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v50 = *(void *)(a1 + 224);
      uint64_t v51 = *(void *)(a1 + 144);
      LODWORD(v78[0]) = 134349312;
      *(void *)((char *)v78 + 4) = v50;
      WORD2(v78[1]) = 2050;
      *(void *)((char *)&v78[1] + 6) = v51;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v22);
LABEL_116:
      if (v22 != buf) {
        free(v22);
      }
      return 0;
    }
  }
LABEL_10:
  memset(v78, 0, sizeof(v78));
  __asm { FMOV            V0.2D, #-1.0 }
  long long v79 = _Q0;
  long long v80 = _Q0;
  long long v81 = _Q0;
  unint64_t v82 = 0xBFF0000000000000;
  char v83 = 0;
  long long v84 = 0u;
  memset(v85, 0, 25);
  sub_100134750(__p, "Crnt");
  BOOL v10 = sub_10190523C(a1, a1 + 152, (uint64_t)v78, (uint64_t *)__p);
  if (v65 < 0) {
    operator delete(__p[0]);
  }
  if (!v10)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    long long v31 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v32 = *(void *)(a1 + 224);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,unable to compute snap for latest position fix", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v52 = *(void *)(a1 + 224);
      int v68 = 134349056;
      uint64_t v69 = v52;
      __int16 v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v53);
      if (v53 != buf) {
        free(v53);
      }
    }
    uint64_t v29 = 0;
    goto LABEL_105;
  }
  sub_1000C59A8((uint64_t *)(a1 + 1544));
  __int16 v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  if (*(unsigned char *)(a1 + 368) && v83 && sub_1018FB340((double *)(a1 + 288)) && sub_1018FB340(v78))
  {
    ++*(_DWORD *)(a1 + 1192);
    if ((sub_1019068DC(a1, a1 + 288, (uint64_t)v78) & 1) == 0)
    {
      ++*(_DWORD *)(a1 + 1196);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v33 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v34 = *(void *)(a1 + 224);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v34;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,unable to build path", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_112;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_31;
      }
      goto LABEL_132;
    }
    if (v62 == v61)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v35 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = *(void *)(a1 + 224);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v36;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,error in constructing route path", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_112;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v37 = *(void *)(a1 + 224);
      int v68 = 134349056;
      uint64_t v69 = v37;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v14);
      goto LABEL_125;
    }
    if (*(unsigned __int8 *)(*(void *)v61 + 16) != *(unsigned __int8 *)(a1 + 416)
      && *(double *)(a1 + 344) >= 0.0
      && *(double *)(a1 + 352) > 0.0
      || *(unsigned __int8 *)(*((void *)v62 - 2) + 16) != LOBYTE(v85[3])
      && *(double *)&v81 >= 0.0
      && *((double *)&v81 + 1) > 0.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      __int16 v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 224);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,reverse path,path constructed is from behind the users direction of travel", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_112;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_31;
      }
LABEL_132:
      dispatch_once(&qword_1024193D0, &stru_102345420);
LABEL_31:
      uint64_t v13 = *(void *)(a1 + 224);
      int v68 = 134349056;
      uint64_t v69 = v13;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v14);
LABEL_125:
      if (v14 != buf) {
        free(v14);
      }
LABEL_112:
      uint64_t v29 = 0;
      goto LABEL_104;
    }
    unint64_t v38 = (v62 - v61) >> 4;
    if ((char **)(a1 + 1544) != &v61)
    {
      sub_10190D330(a1 + 1544, (uint64_t *)v61, (uint64_t *)v62, v38);
      unint64_t v38 = (v62 - v61) >> 4;
    }
    sub_10076AE78((char *)(a1 + 1360), (double)v38);
    if ((sub_101908890((uint64_t *)&v61, (double *)a1, *(double *)(a1 + 408), v85[2]) & 1) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v48 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v49 = *(void *)(a1 + 224);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,computeDistanceTravelledOnThisPath failed", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_112;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v54 = *(void *)(a1 + 224);
      int v68 = 134349056;
      uint64_t v69 = v54;
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v14);
      goto LABEL_125;
    }
    double v39 = vabdd_f64(*(double *)(a1 + 224), *(double *)(a1 + 144));
    if (v39 >= 1.0) {
      double v40 = v39 * 0.02;
    }
    else {
      double v40 = 0.02;
    }
    if (*(double *)a1 * 0.05 >= v40) {
      double v40 = *(double *)a1 * 0.05;
    }
    *(double *)(a1 + 8) = v40;
    sub_1019089E8(a1, a1 + 288, (uint64_t)v78, &v61);
    float64x2_t v41 = vld1q_dup_f64((const double *)a1);
    *(float64x2_t *)(a1 + 16) = vaddq_f64(v41, *(float64x2_t *)(a1 + 16));
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v42 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v43 = *(void *)(a1 + 224);
      double v44 = *(double *)a1;
      uint64_t v46 = *(void *)(a1 + 16);
      uint64_t v45 = *(void *)(a1 + 24);
      uint64_t v47 = *(void *)(a1 + 144);
      *(_DWORD *)uint64_t buf = 134350080;
      *(void *)&uint8_t buf[4] = v43;
      __int16 v87 = 2050;
      uint64_t v88 = v45;
      __int16 v89 = 2050;
      double v90 = v44;
      __int16 v91 = 2050;
      uint64_t v92 = v46;
      __int16 v93 = 2050;
      uint64_t v94 = v47;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,totalDistance,%{public}.2lf,deltaDistance,%{public}.2lf,totalMMOdometerDistance,%{public}.2lf,prevTime,%{public}.1lf", buf, 0x34u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v55 = *(void *)(a1 + 224);
      double v56 = *(double *)a1;
      uint64_t v58 = *(void *)(a1 + 16);
      uint64_t v57 = *(void *)(a1 + 24);
      uint64_t v59 = *(void *)(a1 + 144);
      int v68 = 134350080;
      uint64_t v69 = v55;
      __int16 v70 = 2050;
      uint64_t v71 = v57;
      __int16 v72 = 2050;
      double v73 = v56;
      __int16 v74 = 2050;
      uint64_t v75 = v58;
      __int16 v76 = 2050;
      uint64_t v77 = v59;
      uint64_t v60 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::computeDeltaDistanceAndBatchedLocations()", "%s\n", v60);
      if (v60 != buf) {
        free(v60);
      }
    }
  }
  sub_101909DF4(v2, (uint64_t)v78);
  uint64_t v29 = 1;
LABEL_104:
  *(void *)uint64_t buf = &v61;
  sub_1000C5954((void ***)buf);
LABEL_105:
  if (*((void *)&v84 + 1)) {
    sub_1000DB0A0(*((std::__shared_weak_count **)&v84 + 1));
  }
  return v29;
}

void sub_1019048F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char *a53)
{
  a53 = &a12;
  sub_1000C5954((void ***)&a53);
  if (a47) {
    sub_1000DB0A0(a47);
  }
  _Unwind_Resume(a1);
}

void sub_101904974(uint64_t *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v3 = *a1;
    int v4 = *((_DWORD *)a1 + 2);
    int v5 = *((_DWORD *)a1 + 3);
    int v7 = *((_DWORD *)a1 + 5);
    int v6 = *((_DWORD *)a1 + 6);
    int v8 = *((_DWORD *)a1 + 4);
    uint64_t v9 = a1[8];
    uint64_t v10 = a1[5];
    uint64_t v11 = a1[18];
    uint64_t v12 = a1[15];
    int v13 = *((_DWORD *)a1 + 48);
    uint64_t v14 = a1[29];
    uint64_t v15 = a1[26];
    *(_DWORD *)uint64_t buf = 134352128;
    *(void *)uint64_t v47 = v3;
    *(_WORD *)&v47[8] = 1026;
    *(_DWORD *)uint64_t v48 = v4;
    *(_WORD *)&v48[4] = 1026;
    *(_DWORD *)&v48[6] = v5;
    __int16 v49 = 1026;
    *(_DWORD *)uint64_t v50 = v6;
    *(_WORD *)&v50[4] = 1026;
    *(_DWORD *)&v50[6] = v8;
    *(_WORD *)uint64_t v51 = 1026;
    *(_DWORD *)&v51[2] = v7;
    *(_WORD *)&v51[6] = 2050;
    *(void *)&v51[8] = v9;
    *(_WORD *)&v51[16] = 2050;
    *(void *)uint64_t v52 = v10;
    *(_WORD *)&v52[8] = 2050;
    *(void *)__int16 v53 = v11;
    *(_WORD *)&v53[8] = 2050;
    uint64_t v54 = v12;
    __int16 v55 = 1026;
    int v56 = v13;
    __int16 v57 = 2050;
    uint64_t v58 = v14;
    __int16 v59 = 2050;
    uint64_t v60 = v15;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,map-caching analytics,startTime,%{public}.1lf,mapReq,%{public}d,mapReqProcessed,%{public}d,mapReqFailed,%{public}d,unqualifiedMapReq,%{public}d,unqualifiedMapReqProcessed,%{public}d,cacheTimeAvg,%{public}.1lf,cacheTimeMax,%{public}.1lf,roadCntAvg,%{public}.1lf,roadCntMax,%{public}.1lf,mapDataReqFailures,%{public}d,dataReturnTimeAvg,%{public}.1lf,dataReturnTimeMax,%{public}.1lf", buf, 0x6Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::debugLog()", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v17 = *((_DWORD *)a1 + 70);
    int v18 = *((_DWORD *)a1 + 71);
    uint64_t v19 = a1[40];
    uint64_t v20 = a1[37];
    uint64_t v21 = a1[50];
    uint64_t v22 = a1[47];
    uint64_t v23 = a1[60];
    uint64_t v24 = a1[57];
    *(_DWORD *)uint64_t buf = 67241984;
    *(_DWORD *)uint64_t v47 = v17;
    *(_WORD *)&v47[4] = 1026;
    *(_DWORD *)&v47[6] = v18;
    *(_WORD *)uint64_t v48 = 2050;
    *(void *)&_DWORD v48[2] = v19;
    __int16 v49 = 2050;
    *(void *)uint64_t v50 = v20;
    *(_WORD *)&v50[8] = 2050;
    *(void *)uint64_t v51 = v21;
    *(_WORD *)&v51[8] = 2050;
    *(void *)&v51[10] = v22;
    *(_WORD *)uint64_t v52 = 2050;
    *(void *)&v52[2] = v23;
    *(_WORD *)__int16 v53 = 2050;
    *(void *)&v53[2] = v24;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,snapping analytics,numAttempts,%{public}d,numSuccess,%{public}d,numCandidateAvg,%{public}.1lf,numCandidateMax,%{public}.1lf,snapDistanceAvg,%{public}.1lf,snapDistanceMax,%{public}.1lf,courseDiffAvg,%{public}.1lf,courseDiffMax,%{public}.1lf", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::debugLog()", "%s\n", v43);
    if (v43 != (char *)buf) {
      free(v43);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v25 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v26 = *((_DWORD *)a1 + 132);
    int v27 = *((_DWORD *)a1 + 133);
    uint64_t v28 = a1[71];
    uint64_t v29 = a1[68];
    uint64_t v30 = a1[81];
    uint64_t v31 = a1[78];
    uint64_t v32 = a1[91];
    uint64_t v33 = a1[88];
    *(_DWORD *)uint64_t buf = 67241984;
    *(_DWORD *)uint64_t v47 = v26;
    *(_WORD *)&v47[4] = 1026;
    *(_DWORD *)&v47[6] = v27;
    *(_WORD *)uint64_t v48 = 2050;
    *(void *)&_DWORD v48[2] = v28;
    __int16 v49 = 2050;
    *(void *)uint64_t v50 = v29;
    *(_WORD *)&v50[8] = 2050;
    *(void *)uint64_t v51 = v30;
    *(_WORD *)&v51[8] = 2050;
    *(void *)&v51[10] = v31;
    *(_WORD *)uint64_t v52 = 2050;
    *(void *)&v52[2] = v32;
    *(_WORD *)__int16 v53 = 2050;
    *(void *)&v53[2] = v33;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,astarsearch analytics,numSearch,%{public}d,numFailed,%{public}d,searchTimeAvg,%{public}.1lf,searchTimeMax,%{public}.1lf,iterCountAvg,%{public}.1lf,iterCountMax,%{public}.1lf,numRoadsAvg,%{public}.1lf,numRoadsMax,%{public}.1lf", buf, 0x4Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    double v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::debugLog()", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v34 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v35 = *((_DWORD *)a1 + 194);
    int v36 = *((_DWORD *)a1 + 195);
    uint64_t v37 = a1[102];
    uint64_t v38 = a1[99];
    int v39 = *((_DWORD *)a1 + 216);
    int v40 = *((_DWORD *)a1 + 217);
    int v41 = *((_DWORD *)a1 + 218);
    *(_DWORD *)uint64_t buf = 67241728;
    *(_DWORD *)uint64_t v47 = v35;
    *(_WORD *)&v47[4] = 1026;
    *(_DWORD *)&v47[6] = v36;
    *(_WORD *)uint64_t v48 = 2050;
    *(void *)&_DWORD v48[2] = v37;
    __int16 v49 = 2050;
    *(void *)uint64_t v50 = v38;
    *(_WORD *)&v50[8] = 1026;
    *(_DWORD *)uint64_t v51 = v39;
    *(_WORD *)&v51[4] = 1026;
    *(_DWORD *)&v51[6] = v40;
    *(_WORD *)&v51[10] = 1026;
    *(_DWORD *)&v51[12] = v41;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,general analytics,batchedLocAttemps,%{public}d,batchedLocFailures,%{public}d,processingTimeAvg,%{public}.1lf,processingTimeMax,%{public}.1lf,resetCount,%{public}d,screened,%{public}d,failedScreening,%{public}d", buf, 0x34u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::debugLog()", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
}

BOOL sub_10190523C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *(void *)(a1 + 424);
  if (!v6)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    long long v80 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v81 = *(void *)(a2 + 72);
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v81;
      _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,MapRoadBuffer is not initialized", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v145 = *(void *)(a2 + 72);
      *(_DWORD *)double v173 = 134349056;
      *(void *)&v173[4] = v145;
      __int16 v146 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v146);
      if (v146 != (char *)buf) {
        free(v146);
      }
    }
    return 0;
  }
  ++*(_DWORD *)(a1 + 944);
  double v150 = *(double *)(a1 + 640);
  double v151 = *(double *)(a1 + 632);
  if (v150 >= v151 + *(double *)(a2 + 24) * 2.0) {
    double v8 = v151 + *(double *)(a2 + 24) * 2.0;
  }
  else {
    double v8 = *(double *)(a1 + 640);
  }
  double v171 = 0;
  *(double *)&unint64_t v172 = 0.0;
  __int16 v170 = &v171;
  double v149 = v8;
  sub_101901B00(v6, a1 + 664, (uint64_t)&v170, *(double *)a2, *(double *)(a2 + 8), v8);
  if (*(double *)&v172 == 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    char v83 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v84 = *(void *)(a2 + 72);
      *(_DWORD *)uint64_t buf = 134349824;
      *(void *)&uint8_t buf[4] = v84;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(double *)&unsigned char buf[14] = v149;
      *(_WORD *)&buf[22] = 2050;
      *(double *)&unsigned char buf[24] = v151;
      *(_WORD *)&buf[32] = 2050;
      *(double *)&buf[34] = v150;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,roads not available close to this point,radius,%{public}.1lf,minRadius,%{public}.1lf,maxRadius,%{public}.1lf", buf, 0x2Au);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_129;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v85 = *(void *)(a2 + 72);
    *(_DWORD *)double v173 = 134349824;
    *(void *)&v173[4] = v85;
    *(_WORD *)&v173[12] = 2050;
    *(double *)&v173[14] = v149;
    __int16 v174 = 2050;
    double v175 = v151;
    __int16 v176 = 2050;
    double v177 = v150;
    uint64_t v86 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v86);
    goto LABEL_173;
  }
  sub_10076AE78((char *)(a1 + 952), (double)v172);
  memset(v165, 0, sizeof(v165));
  long long v166 = xmmword_101D1C320;
  char v167 = 0;
  long long v168 = 0u;
  long long v169 = 0u;
  __int16 v152 = (double *)(a2 + 64);
  sub_10053AAC0((uint64_t)v165, (double *)(a2 + 24), (double *)(a2 + 64));
  sub_10053AB70((uint64_t)v165);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 64) = v11;
  *(_OWORD *)(a3 + 16) = v9;
  *(_OWORD *)(a3 + 32) = v10;
  uint64_t v12 = v170;
  if (v170 == &v171)
  {
    *(unsigned char *)(a3 + 80) = 0;
    uint64_t v87 = a3 + 80;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v87 + 24) = _Q0;
    uint64_t v92 = (unsigned char *)v87;
    goto LABEL_104;
  }
  double v13 = *(double *)a2;
  double v14 = *(double *)(a2 + 8);
  double v155 = -1.0;
  do
  {
    uint64_t v15 = v12[7];
    if (!v15)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      __int16 v93 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v94 = *(void *)(a2 + 72);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v94;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,road is nullptr", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_129;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_172;
      }
      goto LABEL_175;
    }
    uint64_t v16 = *(double **)(v15 + 136);
    unint64_t v17 = *(void *)(v15 + 144) - (void)v16;
    if ((int)(v17 >> 4) <= 1)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102345440);
      }
      uint64_t v95 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEBUG, "CLMM,findClosestPointOnRoad,CoordinateCount is <= 1", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102345440);
        }
        *(_WORD *)double v173 = 0;
        double v147 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::findClosestPointOnRoad(CLDistanceCalc &, const int, const std::vector<Coordinate> &, const Coordinate &, double &, double &) [Coordinate = GEOLocationCoordinate2D]", "%s\n", v147);
        if (v147 != (char *)buf) {
          free(v147);
        }
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v96 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v97 = *(void *)(a2 + 72);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v97;
        _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,findClosestPointOnRoad returned false", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_129;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_172;
      }
      goto LABEL_175;
    }
    double v18 = *v16;
    double v19 = v16[1];
    *(void *)&uint8_t buf[8] = 0;
    *(void *)uint64_t buf = 0;
    *(void *)double v173 = 0;
    sub_1000F17A8((double *)(a1 + 32), (double *)buf, (double *)&buf[8], (double *)v173, v13, v14, 0.0, v18, v19, 0.0);
    uint64_t v20 = 0;
    uint64_t v21 = (v17 >> 4) - 1;
    double v22 = 0.0;
    double v23 = -1.0;
    double v24 = 0.0;
    do
    {
      uint64_t v25 = *(void *)(v15 + 136) + v20;
      double v26 = *(double *)(v25 + 16);
      double v27 = *(double *)(v25 + 24);
      *(void *)double v173 = 0;
      *(void *)&v173[8] = 0;
      *(void *)&long long v156 = 0;
      sub_1000F17A8((double *)(a1 + 32), (double *)v173, (double *)&v173[8], (double *)&v156, v13, v14, 0.0, v26, v27, 0.0);
      double v28 = (*(double *)buf - *(double *)v173) * (*(double *)buf - *(double *)v173)
          + (*(double *)&buf[8] - *(double *)&v173[8]) * (*(double *)&buf[8] - *(double *)&v173[8]);
      double v29 = 0.0 - *(double *)buf;
      if (v28 < 0.001)
      {
        double v30 = v29 * v29;
        double v31 = 0.0;
        double v32 = 0.0 - *(double *)&buf[8];
LABEL_13:
        double v33 = v30 + v32 * v32;
        goto LABEL_18;
      }
      double v31 = ((0.0 - *(double *)&buf[8]) * (*(double *)&v173[8] - *(double *)&buf[8])
           + v29 * (*(double *)v173 - *(double *)buf))
          / v28;
      if (v31 >= 0.0)
      {
        if (v31 <= 1.0)
        {
          double v30 = (0.0 - (*(double *)buf + (*(double *)v173 - *(double *)buf) * v31))
              * (0.0 - (*(double *)buf + (*(double *)v173 - *(double *)buf) * v31));
          double v32 = 0.0 - (*(double *)&buf[8] + (*(double *)&v173[8] - *(double *)&buf[8]) * v31);
          goto LABEL_13;
        }
        double v33 = (0.0 - *(double *)v173) * (0.0 - *(double *)v173)
            + (0.0 - *(double *)&v173[8]) * (0.0 - *(double *)&v173[8]);
        double v31 = 1.0;
      }
      else
      {
        double v33 = v29 * v29 + (0.0 - *(double *)&buf[8]) * (0.0 - *(double *)&buf[8]);
        double v31 = 0.0;
      }
LABEL_18:
      double v34 = sqrt(v28);
      double v35 = sqrt(v33);
      BOOL v36 = v23 < 0.0;
      if (v35 < v23) {
        BOOL v36 = 1;
      }
      double v37 = v24 + v34 * v31;
      if (v36)
      {
        double v23 = v35;
        double v22 = v37;
      }
      double v24 = v24 + v34;
      *(void *)uint64_t buf = *(void *)v173;
      *(void *)&uint8_t buf[8] = *(void *)&v173[8];
      v20 += 16;
      --v21;
    }
    while (v21);
    uint64_t v38 = (std::__shared_weak_count *)v12[8];
    if (v24 >= 0.001) {
      double v39 = v22 / v24;
    }
    else {
      double v39 = 0.0;
    }
    v161[0] = *((void **)v12 + 7);
    v161[1] = &v38->__vftable;
    double v162 = -1.0;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v40 = sub_101909E70((double *)(a1 + 32), v161, &v163, &v162, v39);
    if (v38) {
      sub_1000DB0A0(v38);
    }
    if (!v40)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v98 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v99 = *(void *)(a2 + 72);
        *(_DWORD *)uint64_t buf = 134349056;
        *(void *)&uint8_t buf[4] = v99;
        _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,interpolateOnRoad,interpolateProjections returned false", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_129;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_172:
        uint64_t v148 = *(void *)(a2 + 72);
        *(_DWORD *)double v173 = 134349056;
        *(void *)&v173[4] = v148;
        uint64_t v86 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v86);
LABEL_173:
        if (v86 != (char *)buf) {
          free(v86);
        }
LABEL_129:
        BOOL v82 = 0;
        goto LABEL_130;
      }
LABEL_175:
      dispatch_once(&qword_1024193D0, &stru_102345420);
      goto LABEL_172;
    }
    long long v156 = 0uLL;
    *(void *)&long long v157 = 0;
    *((void *)&v157 + 1) = 0x3FF0000000000000;
    long long v158 = 0u;
    long long v159 = 0u;
    int v160 = 0;
    double v41 = v164;
    double v154 = v163;
    sub_1000F17A8((double *)(a1 + 32), (double *)&v158 + 1, (double *)&v158, (double *)&v159, v163, v164, *(double *)(a2 + 16), *(double *)a2, *(double *)(a2 + 8), *(double *)(a2 + 16));
    double v42 = *(double *)(a2 + 56);
    if (v42 >= 0.0)
    {
      double v43 = v162;
      BOOL v44 = v162 >= 0.0;
      if (*v152 > 0.0 && v162 >= 0.0)
      {
        double v45 = v162;
        double v46 = fmod(v42 - v162, 360.0);
        double v43 = v45;
        if (v46 < 0.0) {
          double v46 = v46 + 360.0;
        }
        if (v46 > 180.0) {
          double v46 = v46 + -360.0;
        }
        *((void *)&v159 + 1) = fabs(v46);
        BOOL v44 = 1;
      }
    }
    else
    {
      double v43 = v162;
      BOOL v44 = v162 >= 0.0;
    }
    sub_10053B11C((uint64_t)v165, (uint64_t)&v156);
    if (*(double *)(a2 + 56) >= 0.0 && (*v152 > 0.0 ? (BOOL v47 = v44) : (BOOL v47 = 0), v47))
    {
      memset(buf, 0, 24);
      *(void *)&unsigned char buf[24] = 0x3FF0000000000000;
      memset(&buf[32], 0, 32);
      LODWORD(v211) = 0;
      double v48 = v43;
      sub_100142F58(v43 + 180.0);
      double v50 = v49;
      *(_OWORD *)&buf[32] = v158;
      *(void *)&buf[48] = v159;
      double v51 = fmod(*(double *)(a2 + 56) - v49, 360.0);
      if (v51 < 0.0) {
        double v51 = v51 + 360.0;
      }
      if (v51 > 180.0) {
        double v51 = v51 + -360.0;
      }
      *(void *)&buf[56] = fabs(v51);
      sub_10053B11C((uint64_t)v165, (uint64_t)buf);
      BOOL v52 = *(double *)buf <= *(double *)&v156;
      if (*(double *)buf > *(double *)&v156)
      {
        double v162 = v50;
        long long v158 = *(_OWORD *)&buf[32];
        long long v159 = *(_OWORD *)&buf[48];
        int v160 = LODWORD(v211);
        double v48 = v50;
        long long v156 = *(_OWORD *)buf;
        long long v157 = *(_OWORD *)&buf[16];
      }
    }
    else
    {
      double v48 = v43;
      BOOL v52 = 1;
    }
    double v53 = *(double *)&v156;
    if (*(double *)&v156 > v155)
    {
      *(double *)a3 = v154;
      *(double *)(a3 + 8) = v41;
      *(double *)(a3 + 120) = v39;
      if (*(double *)(a3 + 56) >= 0.0 && *(double *)(a3 + 64) > 0.0 && v48 >= 0.0) {
        *(double *)(a3 + 56) = v48;
      }
      uint64_t v55 = v12[7];
      uint64_t v54 = v12[8];
      if (v54) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
      }
      int v56 = *(std::__shared_weak_count **)(a3 + 96);
      *(void *)(a3 + 88) = v55;
      *(void *)(a3 + 96) = v54;
      if (v56) {
        sub_1000DB0A0(v56);
      }
      *(unsigned char *)(a3 + 128) = v52;
      double v155 = v53;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    __int16 v57 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v58 = a4;
      if (*((char *)a4 + 23) < 0) {
        uint64_t v58 = (uint64_t *)*a4;
      }
      __int16 v59 = (void *)v12[7];
      if (v59) {
        __int16 v59 = (void *)*v59;
      }
      uint64_t v61 = *(void *)(a2 + 64);
      uint64_t v60 = *(void *)(a2 + 72);
      double v62 = *(double *)a2;
      uint64_t v63 = *(void *)(a2 + 8);
      uint64_t v64 = *(void *)(a2 + 24);
      uint64_t v65 = *(void *)(a2 + 56);
      int v66 = *(unsigned __int8 *)(a3 + 128);
      *(_DWORD *)uint64_t buf = 134353411;
      *(void *)&uint8_t buf[4] = v60;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v58;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&unsigned char buf[24] = v62;
      *(_WORD *)&buf[32] = 2049;
      *(void *)&buf[34] = v63;
      *(_WORD *)&buf[42] = 2050;
      *(void *)&buf[44] = v65;
      *(_WORD *)&buf[52] = 2049;
      *(double *)&buf[54] = v154;
      *(_WORD *)&buf[62] = 2049;
      double v211 = v41;
      __int16 v212 = 2050;
      double v213 = v48;
      __int16 v214 = 2050;
      uint64_t v215 = v64;
      __int16 v216 = 2050;
      uint64_t v217 = v61;
      __int16 v218 = 2049;
      double v219 = v155;
      __int16 v220 = 2049;
      v221 = v59;
      __int16 v222 = 2050;
      unint64_t v223 = v172;
      __int16 v224 = 2050;
      double v225 = v39;
      __int16 v226 = 2050;
      double v227 = v149;
      __int16 v228 = 2050;
      double v229 = v151;
      __int16 v230 = 2050;
      double v231 = v150;
      __int16 v232 = 1026;
      LODWORD(v233) = v66;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,%s snap candidate,raw,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,candidate,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,score,%{private}.9lf,roadID,%{private}lld,numRoads,%{public}lu,projection,%{public}.2lf,searchRadius,%{public}.2lf,minRadius,%{public}.1lf,maxRadius,%{public}.1lf,forward,%{public}d", buf, 0xB2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v70 = *(void *)(a2 + 72);
      uint64_t v71 = a4;
      if (*((char *)a4 + 23) < 0) {
        uint64_t v71 = (uint64_t *)*a4;
      }
      double v73 = *(double *)a2;
      double v72 = *(double *)(a2 + 8);
      uint64_t v74 = *(void *)(a2 + 24);
      uint64_t v76 = *(void *)(a2 + 56);
      uint64_t v75 = *(void *)(a2 + 64);
      uint64_t v77 = (void *)v12[7];
      if (v77) {
        uint64_t v77 = (void *)*v77;
      }
      int v78 = *(unsigned __int8 *)(a3 + 128);
      *(_DWORD *)double v173 = 134353411;
      *(void *)&v173[4] = v70;
      *(_WORD *)&v173[12] = 2080;
      *(void *)&v173[14] = v71;
      __int16 v174 = 2049;
      double v175 = v73;
      __int16 v176 = 2049;
      double v177 = v72;
      __int16 v178 = 2050;
      uint64_t v179 = v76;
      __int16 v180 = 2049;
      double v181 = v154;
      __int16 v182 = 2049;
      double v183 = v41;
      __int16 v184 = 2050;
      double v185 = v48;
      __int16 v186 = 2050;
      uint64_t v187 = v74;
      __int16 v188 = 2050;
      uint64_t v189 = v75;
      __int16 v190 = 2049;
      double v191 = v155;
      __int16 v192 = 2049;
      unint64_t v193 = v77;
      __int16 v194 = 2050;
      unint64_t v195 = v172;
      __int16 v196 = 2050;
      double v197 = v39;
      __int16 v198 = 2050;
      double v199 = v149;
      __int16 v200 = 2050;
      double v201 = v151;
      __int16 v202 = 2050;
      double v203 = v150;
      __int16 v204 = 1026;
      LODWORD(v205) = v78;
      long long v79 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v79);
      if (v79 != (char *)buf) {
        free(v79);
      }
    }
    char v67 = (void *)v12[1];
    if (v67)
    {
      do
      {
        int v68 = (void **)v67;
        char v67 = (void *)*v67;
      }
      while (v67);
    }
    else
    {
      do
      {
        int v68 = (void **)v12[2];
        _ZF = *v68 == v12;
        uint64_t v12 = v68;
      }
      while (!_ZF);
    }
    uint64_t v12 = v68;
  }
  while (v68 != &v171);
  *(unsigned char *)(a3 + 80) = 0;
  uint64_t v92 = (unsigned char *)(a3 + 80);
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a3 + 104) = _Q0;
  if (v155 > 0.0 && sub_1018FB340((double *)a3))
  {
    double v102 = sub_1000F1648((double *)(a1 + 32), *(double *)a3, *(double *)(a3 + 8), *(double *)a2, *(double *)(a2 + 8), 0.0);
    *(double *)(a3 + 104) = v102;
    *(unsigned char *)(a3 + 80) = v102 < 20.0;
    if (v102 < 20.0)
    {
      double v103 = *(double *)(a3 + 56);
      if (v103 < 0.0) {
        goto LABEL_144;
      }
      double v104 = *(double *)(a3 + 64);
      if (v104 <= 0.0) {
        goto LABEL_144;
      }
      double v105 = *(double *)(a2 + 56);
      if (v105 < 0.0 || *(double *)(a2 + 64) <= 0.0) {
        goto LABEL_144;
      }
      double v106 = fmod(v105 - v103, 360.0);
      if (v106 < 0.0) {
        double v106 = v106 + 360.0;
      }
      if (v106 > 180.0) {
        double v106 = v106 + -360.0;
      }
      double v107 = fabs(v106);
      *(double *)(a3 + 112) = v107;
      *(unsigned char *)(a3 + 80) = v107 < v104 + 30.0;
      if (v107 < v104 + 30.0) {
LABEL_144:
      }
        ++*(_DWORD *)(a1 + 948);
    }
    sub_10076AE78((char *)(a1 + 1032), v102);
    sub_10076AE78((char *)(a1 + 1112), *(double *)(a3 + 112));
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v108 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v109 = a4;
      if (*((char *)a4 + 23) < 0) {
        uint64_t v109 = (uint64_t *)*a4;
      }
      uint64_t v111 = *(void *)(a2 + 64);
      uint64_t v110 = *(void *)(a2 + 72);
      double v113 = *(double *)a2;
      uint64_t v112 = *(void *)(a2 + 8);
      double v115 = *(double *)a3;
      double v114 = *(double *)(a3 + 8);
      double v116 = *(double *)(a3 + 56);
      unint64_t v118 = *(void *)(a2 + 48);
      uint64_t v117 = *(void *)(a2 + 56);
      double v119 = *(double *)(a2 + 16);
      uint64_t v120 = *(void *)(a2 + 24);
      double v121 = *(void **)(a2 + 40);
      uint64_t v122 = *(void **)(a3 + 88);
      if (*(double *)&v122 != 0.0) {
        uint64_t v122 = *(void **)v122;
      }
      double v123 = *(double *)(a3 + 104);
      uint64_t v124 = *(void *)(a3 + 112);
      int v125 = *(unsigned __int8 *)(a3 + 80);
      uint64_t v126 = *(void *)(a3 + 120);
      *(_DWORD *)uint64_t buf = 134353923;
      *(void *)&uint8_t buf[4] = v110;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v109;
      *(_WORD *)&buf[22] = 2049;
      *(double *)&unsigned char buf[24] = v113;
      *(_WORD *)&buf[32] = 2049;
      *(void *)&buf[34] = v112;
      *(_WORD *)&buf[42] = 2050;
      *(void *)&buf[44] = v117;
      *(_WORD *)&buf[52] = 2049;
      *(double *)&buf[54] = v115;
      *(_WORD *)&buf[62] = 2049;
      double v211 = v114;
      __int16 v212 = 2050;
      double v213 = v116;
      __int16 v214 = 2050;
      uint64_t v215 = v120;
      __int16 v216 = 2050;
      uint64_t v217 = v111;
      __int16 v218 = 2050;
      double v219 = v119;
      __int16 v220 = 2050;
      v221 = v121;
      __int16 v222 = 2050;
      unint64_t v223 = v118;
      __int16 v224 = 2049;
      double v225 = v155;
      __int16 v226 = 2049;
      double v227 = *(double *)&v122;
      __int16 v228 = 2050;
      double v229 = *(double *)&v172;
      __int16 v230 = 2050;
      double v231 = v123;
      __int16 v232 = 2050;
      uint64_t v233 = v124;
      __int16 v234 = 1026;
      int v235 = v125;
      __int16 v236 = 2050;
      uint64_t v237 = v126;
      _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,%s snapped solution,raw,%{private}.7lf,%{private}.7lf,rawCourse,%{public}.2lf,snapped,%{private}.7lf,%{private}.7lf,snapCourse,%{public}.2lf,hunc,%{public}.2lf,courseUnc,%{public}.2lf,altitude,%{public}.2lf,speed,%{public}.2lf,speedUnc,%{public}.2lf,score,%{private}.9lf,roadID,%{private}lld,numRoads,%{public}lu,snapDistance,%{public}.2lf,snapCourseDiff,%{public}.2lf,isSnapValid,%{public}d,projection,%{public}.2lf", buf, 0xC6u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      if (*((char *)a4 + 23) < 0) {
        a4 = (uint64_t *)*a4;
      }
      uint64_t v128 = *(void *)(a2 + 64);
      uint64_t v127 = *(void *)(a2 + 72);
      double v129 = *(double *)a2;
      double v130 = *(double *)(a2 + 8);
      double v132 = *(double *)a3;
      double v131 = *(double *)(a3 + 8);
      double v133 = *(double *)(a3 + 56);
      unint64_t v135 = *(void *)(a2 + 48);
      uint64_t v134 = *(void *)(a2 + 56);
      double v136 = *(double *)(a2 + 16);
      uint64_t v137 = *(void *)(a2 + 24);
      __int16 v138 = *(void **)(a2 + 40);
      double v139 = *(void **)(a3 + 88);
      if (*(double *)&v139 != 0.0) {
        double v139 = *(void **)v139;
      }
      double v140 = *(double *)(a3 + 104);
      uint64_t v141 = *(void *)(a3 + 112);
      int v142 = *(unsigned __int8 *)(a3 + 80);
      uint64_t v143 = *(void *)(a3 + 120);
      *(_DWORD *)double v173 = 134353923;
      *(void *)&v173[4] = v127;
      *(_WORD *)&v173[12] = 2080;
      *(void *)&v173[14] = a4;
      __int16 v174 = 2049;
      double v175 = v129;
      __int16 v176 = 2049;
      double v177 = v130;
      __int16 v178 = 2050;
      uint64_t v179 = v134;
      __int16 v180 = 2049;
      double v181 = v132;
      __int16 v182 = 2049;
      double v183 = v131;
      __int16 v184 = 2050;
      double v185 = v133;
      __int16 v186 = 2050;
      uint64_t v187 = v137;
      __int16 v188 = 2050;
      uint64_t v189 = v128;
      __int16 v190 = 2050;
      double v191 = v136;
      __int16 v192 = 2050;
      unint64_t v193 = v138;
      __int16 v194 = 2050;
      unint64_t v195 = v135;
      __int16 v196 = 2049;
      double v197 = v155;
      __int16 v198 = 2049;
      double v199 = *(double *)&v139;
      __int16 v200 = 2050;
      double v201 = *(double *)&v172;
      __int16 v202 = 2050;
      double v203 = v140;
      __int16 v204 = 2050;
      uint64_t v205 = v141;
      __int16 v206 = 1026;
      int v207 = v142;
      __int16 v208 = 2050;
      uint64_t v209 = v143;
      __int16 v144 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::getSnappedSolution(const CLGpsOdometryRhythmic_Types::GpsPoint &, CLGpsOdometryRhythmic_Types::SnapData &, std::string)", "%s\n", v144);
      if (v144 != (char *)buf) {
        free(v144);
      }
    }
  }
LABEL_104:
  BOOL v82 = *v92 != 0;
LABEL_130:
  sub_10190DD70((uint64_t)&v170, v171);
  return v82;
}

void sub_101906864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,void *a51)
{
}

uint64_t sub_1019068DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 72);
  if (*(unsigned char *)(a2 + 80) && *(void *)(a2 + 88))
  {
    if (*(unsigned char *)(a3 + 80) && *(void *)(a3 + 88)) {
      operator new();
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      buf[0] = 134349056;
      *(void *)&buf[1] = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,destination snap data is invalid", (uint8_t *)buf, 0xCu);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_20:
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmicMapMatched::buildPath(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
      return 0;
    }
LABEL_22:
    dispatch_once(&qword_1024193D0, &stru_102345420);
    goto LABEL_20;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    buf[0] = 134349056;
    *(void *)&buf[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,start snap data is invalid", (uint8_t *)buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  return 0;
}

void sub_1019086D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,char a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void **a57)
{
  if (a17) {
    sub_1000DB0A0(a17);
  }
  a57 = (void **)&a18;
  sub_1000C5954(&a57);
  a57 = (void **)&a21;
  sub_1000C5954(&a57);
  a57 = (void **)&a26;
  sub_1000C5954(&a57);
  sub_10190DD70((uint64_t)&a29, a30);
  if (a47) {
    sub_1000DB0A0(a47);
  }
  if (a49) {
    sub_1000DB0A0(a49);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101908890(uint64_t *a1, double *a2, double a3, double a4)
{
  *a2 = 0.0;
  uint64_t v4 = *a1;
  if (a1[1] == *a1) {
    return 1;
  }
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  while (1)
  {
    long long v11 = (uint64_t **)(v4 + v9);
    double v13 = *v11;
    uint64_t v12 = (std::__shared_weak_count *)v11[1];
    if (v12) {
      break;
    }
    uint64_t v14 = *v13;
    if (!*v13) {
      return 0;
    }
LABEL_7:
    sub_10039C4B4((void *)v14);
    uint64_t v4 = *a1;
    uint64_t v15 = a1[1] - *a1;
    if (*((unsigned char *)v13 + 16)) {
      double v16 = 0.0;
    }
    else {
      double v16 = 1.0;
    }
    unint64_t v17 = v15 >> 4;
    double v18 = a3;
    double v19 = a4;
    if (v15 != 16)
    {
      double v19 = (double)*((unsigned __int8 *)v13 + 16);
      if (v10)
      {
        if (v10 == v17 - 1) {
          double v19 = a4;
        }
        double v18 = v16;
      }
      else
      {
        double v18 = a3;
      }
    }
    *a2 = *a2 + vabdd_f64(v18, v19) * *(double *)(v14 + 40);
    if (v12)
    {
      sub_1000DB0A0(v12);
      uint64_t v4 = *a1;
      unint64_t v17 = (a1[1] - *a1) >> 4;
    }
    ++v10;
    v9 += 16;
    if (v17 <= v10) {
      return 1;
    }
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v14 = *v13;
  if (*v13) {
    goto LABEL_7;
  }
  sub_1000DB0A0(v12);
  return 0;
}

void sub_1019089D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019089E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  double v108 = sub_10016C458();
  uint64_t v103 = a2;
  uint64_t v104 = a3;
  double v8 = *(double *)(a2 + 72);
  double v119 = *(double *)(a3 + 72);
  if (v119 - v8 <= 0.0) {
    return;
  }
  ++*(_DWORD *)(a1 + 1440);
  uint64_t v9 = *a4;
  if (a4[1] == *a4) {
    return;
  }
  unint64_t v10 = 0;
  uint64_t v110 = (char **)(a1 + 232);
  uint64_t v109 = (char **)(a1 + 256);
  double v11 = *(double *)a1 / (v119 - v8);
  double v115 = 0.0;
  double v12 = 0.0;
  double v105 = a4;
  double v118 = v11;
  do
  {
    uint64_t v13 = v9 + 16 * v10;
    uint64_t v15 = *(uint64_t ***)v13;
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 8);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v107 = v14;
    double v16 = (double *)*v15;
    if (!*v15)
    {
      ++*(_DWORD *)(a1 + 1444);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v21 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = (uint64_t)(a4[1] - *a4) >> 4;
        *(_DWORD *)uint64_t buf = 134349568;
        double v161 = v119;
        __int16 v162 = 2050;
        double v163 = *(double *)&v22;
        __int16 v164 = 1026;
        *(_DWORD *)double v165 = v10;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,null road vector,count,%{public}lu,iterations,%{public}d", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        uint64_t v95 = (uint64_t)(a4[1] - *a4) >> 4;
        int v124 = 134349568;
        double v125 = v119;
        __int16 v126 = 2050;
        double v127 = *(double *)&v95;
        __int16 v128 = 1026;
        *(_DWORD *)double v129 = v10;
        uint64_t v96 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v96);
        if (v96 != (char *)buf) {
          free(v96);
        }
      }
      int v23 = 1;
      goto LABEL_130;
    }
    sub_10039C4B4(*v15);
    double v117 = v16[5];
    if (v117 <= 0.0)
    {
      ++*(_DWORD *)(a1 + 1444);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v24 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = (uint64_t)(a4[1] - *a4) >> 4;
        uint64_t v26 = **v15;
        *(_DWORD *)uint64_t buf = 134349825;
        double v161 = v119;
        __int16 v162 = 2050;
        double v163 = *(double *)&v25;
        __int16 v164 = 1026;
        *(_DWORD *)double v165 = v10;
        *(_WORD *)&v165[4] = 2049;
        *(void *)&v165[6] = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,road length is 0,count,%{public}lu,iterations,%{public}d,id,%{private}lld", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        uint64_t v97 = (uint64_t)(a4[1] - *a4) >> 4;
        uint64_t v98 = **v15;
        int v124 = 134349825;
        double v125 = v119;
        __int16 v126 = 2050;
        double v127 = *(double *)&v97;
        __int16 v128 = 1026;
        *(_DWORD *)double v129 = v10;
        *(_WORD *)&v129[4] = 2049;
        *(void *)&v129[6] = v98;
        uint64_t v99 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v99);
        if (v99 != (char *)buf) {
          free(v99);
        }
      }
      int v23 = 4;
      goto LABEL_130;
    }
    unsigned int v17 = *((unsigned __int8 *)v15 + 16);
    if (*((unsigned char *)v15 + 16)) {
      double v18 = 0.0;
    }
    else {
      double v18 = 1.0;
    }
    uint64_t v19 = a4[1] - *a4;
    if (v19 == 16)
    {
      double v18 = *(double *)(v103 + 120);
      double v20 = *(double *)(v104 + 120);
    }
    else
    {
      double v20 = (double)v17;
      if (v10)
      {
        if ((v19 >> 4) - 1 == v10) {
          double v20 = *(double *)(v104 + 120);
        }
      }
      else
      {
        double v18 = *(double *)(v103 + 120);
      }
    }
    double v106 = v18;
    double v116 = v11 / v117;
    while (1)
    {
      if ((!(_BYTE)v17 || v18 >= v20) && ((_BYTE)v17 || v18 <= v20))
      {
LABEL_116:
        int v23 = 0;
        goto LABEL_130;
      }
      double v27 = -(v116 - v12 / v117);
      double v111 = v116 - v12 / v117;
      if ((_BYTE)v17) {
        double v27 = v116 - v12 / v117;
      }
      double v18 = v18 + v27;
      if ((_BYTE)v17 && v18 > v20)
      {
        double v28 = v18 - v20;
      }
      else
      {
        if ((_BYTE)v17 || v18 >= v20)
        {
          double v29 = v8 + 1.0;
          double v12 = 0.0;
          goto LABEL_55;
        }
        double v28 = v20 - v18;
      }
      double v12 = v117 * (v116 - v28);
      if (((uint64_t)(a4[1] - *a4) >> 4) - 1 != v10) {
        goto LABEL_116;
      }
      double v29 = v8 + 1.0;
      if (v8 + 1.0 > v119 || v8 + 2.0 <= v119) {
        goto LABEL_116;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v31 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 134349824;
        double v161 = v8;
        __int16 v162 = 2050;
        double v163 = v18;
        __int16 v164 = 2050;
        *(double *)double v165 = v20;
        *(_WORD *)&v165[8] = 2050;
        *(double *)&v165[10] = v12;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,numerical error in projection computation,projection,%{public}.15lf,projectionEnd,%{public}.15lf, remainingDistanceFromLastRoadVector,%{public}.5lf", buf, 0x2Au);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        int v124 = 134349824;
        double v125 = v8;
        __int16 v126 = 2050;
        double v127 = v18;
        __int16 v128 = 2050;
        *(double *)double v129 = v20;
        *(_WORD *)&v129[8] = 2050;
        *(double *)&v129[10] = v12;
        __int16 v91 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v91);
        if (v91 != (char *)buf) {
          free(v91);
        }
      }
      double v18 = v20;
LABEL_55:
      if (v29 > v119) {
        break;
      }
      double v32 = (std::__shared_weak_count *)v15[1];
      v120[0] = *v15;
      v120[1] = &v32->__vftable;
      double v121 = -1.0;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v33 = sub_101909E70((double *)(a1 + 32), v120, (double *)&v122, &v121, v18);
      if (v32) {
        sub_1000DB0A0(v32);
      }
      if (!v33)
      {
        ++*(_DWORD *)(a1 + 1444);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        uint64_t v94 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          double v161 = v119;
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_ERROR, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,interpolateProjections returned false", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345420);
          }
          int v124 = 134349056;
          double v125 = v119;
          double v102 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v102);
          if (v102 != (char *)buf) {
            free(v102);
          }
        }
        int v23 = 1;
        goto LABEL_129;
      }
      double v34 = v121;
      double v112 = v12;
      if (!*((unsigned char *)v15 + 16))
      {
        sub_100142F58(v121 + 180.0);
        double v34 = v35;
        double v121 = v35;
      }
      uint64_t v37 = v122;
      uint64_t v36 = v123;
      uint64_t v38 = *(void *)(a1 + 216);
      uint64_t v39 = *(void *)(a1 + 168);
      uint64_t v40 = *(void *)(a1 + 176);
      uint64_t v41 = *(void *)(a1 + 184);
      unint64_t v42 = *(void *)(a1 + 240);
      unint64_t v43 = *(void *)(a1 + 248);
      uint64_t v113 = v122;
      uint64_t v114 = v123;
      if (v42 >= v43)
      {
        uint64_t v46 = 0x6F96F96F96F96F97 * ((uint64_t)(v42 - (void)*v110) >> 2);
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) > 0x1A41A41A41A41A4) {
          sub_1001D7FD4();
        }
        unint64_t v48 = 0x6F96F96F96F96F97 * ((uint64_t)(v43 - (void)*v110) >> 2);
        if (2 * v48 > v47) {
          unint64_t v47 = 2 * v48;
        }
        if (v48 >= 0xD20D20D20D20D2) {
          unint64_t v49 = 0x1A41A41A41A41A4;
        }
        else {
          unint64_t v49 = v47;
        }
        if (v49) {
          double v50 = (char *)sub_10050FC98(a1 + 248, v49);
        }
        else {
          double v50 = 0;
        }
        double v51 = &v50[156 * v46];
        *(_DWORD *)double v51 = 0xFFFF;
        *(void *)(v51 + 4) = v113;
        *(void *)(v51 + 12) = v114;
        *(void *)(v51 + 20) = v40;
        *(void *)(v51 + 28) = v39;
        *(void *)(v51 + 36) = v41;
        double v44 = v118;
        *(double *)(v51 + 44) = v118;
        *(void *)(v51 + 52) = 0x3FC3333333333333;
        *(double *)(v51 + 60) = v34;
        *(void *)(v51 + 68) = v38;
        *(double *)(v51 + 76) = v29;
        *(void *)(v51 + 92) = 0x1BFF00000;
        *(void *)(v51 + 84) = 0;
        *(_OWORD *)(v51 + 132) = xmmword_101E464E4;
        *(_OWORD *)(v51 + 116) = *(_OWORD *)algn_101E464D4;
        *(_OWORD *)(v51 + 100) = xmmword_101E464C4;
        *(void *)(v51 + 148) = 0;
        double v53 = *(char **)(a1 + 232);
        BOOL v52 = *(char **)(a1 + 240);
        uint64_t v54 = v51;
        if (v52 != v53)
        {
          do
          {
            long long v55 = *(_OWORD *)(v52 - 156);
            *(_OWORD *)(v54 - 140) = *(_OWORD *)(v52 - 140);
            *(_OWORD *)(v54 - 156) = v55;
            long long v56 = *(_OWORD *)(v52 - 124);
            long long v57 = *(_OWORD *)(v52 - 108);
            long long v58 = *(_OWORD *)(v52 - 92);
            *(_OWORD *)(v54 - 76) = *(_OWORD *)(v52 - 76);
            *(_OWORD *)(v54 - 92) = v58;
            *(_OWORD *)(v54 - 108) = v57;
            *(_OWORD *)(v54 - 124) = v56;
            long long v59 = *(_OWORD *)(v52 - 60);
            long long v60 = *(_OWORD *)(v52 - 44);
            long long v61 = *(_OWORD *)(v52 - 28);
            *((_OWORD *)v54 - 1) = *((_OWORD *)v52 - 1);
            *(_OWORD *)(v54 - 28) = v61;
            *(_OWORD *)(v54 - 44) = v60;
            *(_OWORD *)(v54 - 60) = v59;
            v54 -= 156;
            v52 -= 156;
          }
          while (v52 != v53);
          BOOL v52 = *v110;
        }
        double v45 = v51 + 156;
        *(void *)(a1 + 232) = v54;
        *(void *)(a1 + 240) = v51 + 156;
        *(void *)(a1 + 248) = &v50[156 * v49];
        if (v52) {
          operator delete(v52);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v42 = 0xFFFF;
        *(void *)(v42 + 4) = v37;
        *(void *)(v42 + 12) = v36;
        *(void *)(v42 + 20) = v40;
        *(void *)(v42 + 28) = v39;
        *(void *)(v42 + 36) = v41;
        double v44 = v118;
        *(double *)(v42 + 44) = v118;
        *(void *)(v42 + 52) = 0x3FC3333333333333;
        *(double *)(v42 + 60) = v34;
        *(void *)(v42 + 68) = v38;
        *(double *)(v42 + 76) = v29;
        *(void *)(v42 + 84) = 0;
        *(void *)(v42 + 92) = 0x1BFF00000;
        *(void *)(v42 + 148) = 0;
        *(_OWORD *)(v42 + 132) = xmmword_101E464E4;
        *(_OWORD *)(v42 + 116) = *(_OWORD *)algn_101E464D4;
        *(_OWORD *)(v42 + 100) = xmmword_101E464C4;
        double v45 = (char *)(v42 + 156);
      }
      *(void *)(a1 + 240) = v45;
      double v62 = v44;
      double v115 = v44 + v115;
      double v63 = v115 + *(double *)(a1 + 24);
      uint64_t v64 = *(void *)(a1 + 8);
      uint64_t v65 = *(void *)(a1 + 168);
      uint64_t v66 = *(void *)(a1 + 184);
      if (v29 + 1.0 <= v119) {
        int v67 = 2;
      }
      else {
        int v67 = 3;
      }
      unint64_t v69 = *(void *)(a1 + 264);
      unint64_t v68 = *(void *)(a1 + 272);
      if (v69 >= v68)
      {
        unint64_t v72 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v69 - (void)*v109) >> 4);
        unint64_t v73 = v72 + 1;
        if (v72 + 1 > 0x75075075075075) {
          sub_1001D7FD4();
        }
        unint64_t v74 = 0xAF8AF8AF8AF8AF8BLL * ((uint64_t)(v68 - (void)*v109) >> 4);
        if (2 * v74 > v73) {
          unint64_t v73 = 2 * v74;
        }
        if (v74 >= 0x3A83A83A83A83ALL) {
          unint64_t v75 = 0x75075075075075;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75)
        {
          uint64_t v76 = (char *)sub_10190DC48(a1 + 272, v75);
          uint64_t v78 = v77;
        }
        else
        {
          uint64_t v76 = 0;
          uint64_t v78 = 0;
        }
        long long v79 = &v76[560 * v72];
        *(double *)long long v79 = v63;
        *((double *)v79 + 1) = v118;
        *((void *)v79 + 2) = v64;
        *((double *)v79 + 3) = v29;
        memcpy(v79 + 32, &unk_101E46520, 0x158uLL);
        *((void *)v79 + 47) = v65;
        *((void *)v79 + 48) = v66;
        *(_OWORD *)(v79 + 488) = xmmword_101E466E8;
        *(_OWORD *)(v79 + 504) = unk_101E466F8;
        *(_OWORD *)(v79 + 520) = xmmword_101E46708;
        *(_OWORD *)(v79 + 424) = xmmword_101E466A8;
        *(_OWORD *)(v79 + 440) = unk_101E466B8;
        *(_OWORD *)(v79 + 456) = xmmword_101E466C8;
        *(_OWORD *)(v79 + 472) = unk_101E466D8;
        *(_OWORD *)(v79 + 392) = xmmword_101E46688;
        *(_OWORD *)(v79 + 408) = unk_101E46698;
        *((_DWORD *)v79 + 134) = v67;
        *((_DWORD *)v79 + 139) = 0;
        *(_OWORD *)(v79 + 540) = xmmword_101E4671C;
        long long v80 = *(char **)(a1 + 256);
        uint64_t v81 = *(char **)(a1 + 264);
        BOOL v82 = v79;
        if (v81 != v80)
        {
          do
          {
            v81 -= 560;
            v82 -= 560;
            memcpy(v82, v81, 0x230uLL);
          }
          while (v81 != v80);
          uint64_t v81 = *v109;
        }
        uint64_t v71 = v79 + 560;
        *(void *)(a1 + 256) = v82;
        *(void *)(a1 + 264) = v71;
        *(void *)(a1 + 272) = &v76[560 * v78];
        a4 = v105;
        if (v81) {
          operator delete(v81);
        }
      }
      else
      {
        *(double *)unint64_t v69 = v63;
        *(double *)(v69 + 8) = v62;
        *(void *)(v69 + 16) = v64;
        *(double *)(v69 + 24) = v29;
        memcpy((void *)(v69 + 32), &unk_101E46520, 0x158uLL);
        *(void *)(v69 + 376) = v65;
        *(void *)(v69 + 384) = v66;
        *(_OWORD *)(v69 + 488) = xmmword_101E466E8;
        *(_OWORD *)(v69 + 504) = unk_101E466F8;
        *(_OWORD *)(v69 + 520) = xmmword_101E46708;
        *(_OWORD *)(v69 + 424) = xmmword_101E466A8;
        *(_OWORD *)(v69 + 440) = unk_101E466B8;
        *(_OWORD *)(v69 + 456) = xmmword_101E466C8;
        *(_OWORD *)(v69 + 472) = unk_101E466D8;
        *(_OWORD *)(v69 + 392) = xmmword_101E46688;
        *(_OWORD *)(v69 + 408) = unk_101E46698;
        *(_DWORD *)(v69 + 536) = v67;
        uint64_t v70 = (_OWORD *)(v69 + 540);
        *(_DWORD *)(v69 + 556) = 0;
        uint64_t v71 = (char *)(v69 + 560);
        *uint64_t v70 = xmmword_101E4671C;
      }
      *(void *)(a1 + 264) = v71;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      char v83 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v84 = **v15;
        int v85 = *((unsigned __int8 *)v15 + 16);
        double v86 = 0.0;
        if (v108 >= 0.0) {
          double v86 = vabdd_f64(sub_10016C458(), v108) * 1000.0;
        }
        *(_DWORD *)uint64_t buf = 134353665;
        double v161 = v119;
        __int16 v162 = 2050;
        double v163 = v29;
        __int16 v164 = 2049;
        *(void *)double v165 = v113;
        *(_WORD *)&v165[8] = 2049;
        *(void *)&v165[10] = v114;
        __int16 v166 = 2049;
        double v167 = v34;
        __int16 v168 = 2049;
        uint64_t v169 = v84;
        __int16 v170 = 1026;
        int v171 = v85;
        __int16 v172 = 2050;
        double v173 = v117;
        __int16 v174 = 2050;
        double v175 = v118;
        __int16 v176 = 2050;
        double v177 = v18;
        __int16 v178 = 2050;
        double v179 = v116;
        __int16 v180 = 2050;
        double v181 = v111;
        __int16 v182 = 2050;
        double v183 = v106;
        __int16 v184 = 2050;
        double v185 = v20;
        __int16 v186 = 2050;
        double v187 = v86;
        __int16 v188 = 1026;
        int v189 = v67;
        __int16 v190 = 2050;
        uint64_t v191 = v64;
        __int16 v192 = 2050;
        double v193 = v115;
        __int16 v194 = 2050;
        double v195 = v63;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEBUG, "GPSODOM-MM,%{public}.1lf,Rhythmic,batched coordinates,time,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,course,%{private}.3lf,roadID,%{private}lld,forward,%{public}d,length,%{public}.2lf,deltaDistance,%{public}.3lf,proj,%{public}.15lf,deltaProjOnRoad,%{public}.3lf,deltaProjsUsed,%{public}.3lf,startProj,%{public}.3lf,endProj,%{public}.3lf,timeTakenInMS,%{public}.2lf,batchedLocationFixType,%{public}d,deltaDistUnc,%{public}.3lf,deltaDistAccumulated,%{public}.2lf,odometer,%{public}.2lf", buf, 0xB8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345420);
        }
        uint64_t v87 = **v15;
        int v88 = *((unsigned __int8 *)v15 + 16);
        double v89 = 0.0;
        if (v108 >= 0.0) {
          double v89 = vabdd_f64(sub_10016C458(), v108) * 1000.0;
        }
        int v124 = 134353665;
        double v125 = v119;
        __int16 v126 = 2050;
        double v127 = v29;
        __int16 v128 = 2049;
        *(void *)double v129 = v113;
        *(_WORD *)&v129[8] = 2049;
        *(void *)&v129[10] = v114;
        __int16 v130 = 2049;
        double v131 = v34;
        __int16 v132 = 2049;
        uint64_t v133 = v87;
        __int16 v134 = 1026;
        int v135 = v88;
        __int16 v136 = 2050;
        double v137 = v117;
        __int16 v138 = 2050;
        double v139 = v118;
        __int16 v140 = 2050;
        double v141 = v18;
        __int16 v142 = 2050;
        double v143 = v116;
        __int16 v144 = 2050;
        double v145 = v111;
        __int16 v146 = 2050;
        double v147 = v106;
        __int16 v148 = 2050;
        double v149 = v20;
        __int16 v150 = 2050;
        double v151 = v89;
        __int16 v152 = 1026;
        int v153 = v67;
        __int16 v154 = 2050;
        uint64_t v155 = v64;
        __int16 v156 = 2050;
        double v157 = v115;
        __int16 v158 = 2050;
        double v159 = v63;
        double v90 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v90);
        if (v90 != (char *)buf) {
          free(v90);
        }
      }
      LOBYTE(v17) = *((unsigned char *)v15 + 16);
      double v8 = v29;
      double v11 = v118;
      double v12 = v112;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v92 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      double v93 = *(double *)a1;
      *(_DWORD *)uint64_t buf = 134349568;
      double v161 = v29;
      __int16 v162 = 2050;
      double v163 = v119;
      __int16 v164 = 2050;
      *(double *)double v165 = v93;
      _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,updateBatchedLocations,max time reached for propagation,endTime,%{public}.1lf,deltaDistanceTotal,%{public}.1lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v100 = *(double *)a1;
      int v124 = 134349568;
      double v125 = v29;
      __int16 v126 = 2050;
      double v127 = v119;
      __int16 v128 = 2050;
      *(double *)double v129 = v100;
      int v101 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::updateBatchedLocations(const CLGpsOdometryRhythmic_Types::SnapData &, const CLGpsOdometryRhythmic_Types::SnapData &, CLGpsOdometryRhythmic_Types::CLRoutePathArray &)", "%s\n", v101);
      if (v101 != (char *)buf) {
        free(v101);
      }
    }
    int v23 = 0;
LABEL_129:
    double v8 = v29;
LABEL_130:
    if (v107) {
      sub_1000DB0A0(v107);
    }
    if ((v23 | 4) != 4) {
      break;
    }
    ++v10;
    uint64_t v9 = *a4;
  }
  while (v10 < (uint64_t)(a4[1] - *a4) >> 4);
}

void sub_101909D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_1000DB0A0(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101909DF4(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v8 = *(void *)(a2 + 96);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = v8;
  if (v10) {
    sub_1000DB0A0(v10);
  }
  long long v11 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 113) = *(_OWORD *)(a2 + 113);
  *(_OWORD *)(a1 + 104) = v11;
  return a1;
}

BOOL sub_101909E70(double *a1, void **a2, double *a3, double *a4, double a5)
{
  *a3 = 0.0;
  a3[1] = 0.0;
  *a4 = 0.0;
  long long v5 = *a2;
  if (*a2)
  {
    uint64_t v6 = (v5[18] - v5[17]) >> 4;
    if ((int)v6 <= 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102345440);
      }
      uint64_t v25 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__x[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,CoordinateCount is 0", (uint8_t *)__x, 2u);
      }
      BOOL result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(__x, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_102345440);
      }
      LOWORD(__y[0]) = 0;
    }
    else
    {
      if (v6 == 1) {
        return 1;
      }
      sub_10039C4B4(*a2);
      uint64_t v12 = (uint64_t)(v5[21] - v5[20]) >> 3;
      if (v12 == v6 - 1)
      {
        uint64_t v13 = (uint64_t)*a2;
        sub_10039C4B4((void *)v13);
        if (a5 < 0.000001)
        {
          *(_OWORD *)a3 = *(_OWORD *)*(void *)(v13 + 136);
          double v14 = *a3;
          double v15 = a3[1];
          double v16 = *(double **)(v13 + 136);
LABEL_7:
          double v17 = v16[2];
          double v18 = v16[3];
          __x[0] = 0.0;
          uint64_t v55 = 0;
          __y[0] = 0.0;
          sub_1000F17A8(a1, __x, __y, (double *)&v55, v14, v15, 0.0, v17, v18, 0.0);
          double v19 = atan2(__y[0], __x[0]);
          if (v19 < 0.0) {
            double v19 = v19 + 6.28318531;
          }
          double v20 = v19 * 57.2957795;
          goto LABEL_54;
        }
        if (a5 >= 0.999999)
        {
          *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + 16 * v12);
          double v20 = sub_10071B58C(a1, *(double *)(*(void *)(v13 + 136) + 16 * v12 - 16), *(double *)(*(void *)(v13 + 136) + 16 * v12 - 8), *a3, a3[1]);
LABEL_54:
          *a4 = v20;
          return 1;
        }
        double v27 = (double *)v5[20];
        double v28 = (double *)v5[21];
        if (v27 != v28)
        {
          uint64_t v29 = 0;
          double v30 = 0.0;
          int v31 = 2;
          while (1)
          {
            double v32 = *v27 / *(double *)(v13 + 40);
            if (vabdd_f64(a5, v30 + v32) < 0.000001) {
              break;
            }
            if (v30 + v32 > a5)
            {
              double v47 = (a5 - v30) / v32;
              unint64_t v48 = (double *)(*(void *)(v13 + 136) + v29);
              double v49 = v48[1];
              double v50 = v48[3];
              *a3 = *v48 + (v48[2] - *v48) * v47;
              long double v51 = v49 + sub_1011717B4(v49, v50) * v47;
              a3[1] = v51;
              sub_10005B720(v51);
              *((void *)a3 + 1) = v52;
              double v16 = (double *)(*(void *)(v13 + 136) + v29);
              double v14 = *v16;
              double v15 = v16[1];
              goto LABEL_7;
            }
            ++v27;
            v29 += 16;
            ++v31;
            double v30 = v30 + v32;
            if (v27 == v28) {
              goto LABEL_45;
            }
          }
          if (v31 < (int)v6)
          {
            *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v13 + 136) + v29 + 16);
            double v34 = (double *)(*(void *)(v13 + 136) + v29);
            double v35 = *v34;
            double v36 = v34[1];
            double v37 = *a3;
            double v38 = a3[1];
            __x[0] = 0.0;
            uint64_t v55 = 0;
            __y[0] = 0.0;
            sub_1000F17A8(a1, __x, __y, (double *)&v55, v35, v36, 0.0, v37, v38, 0.0);
            double v39 = atan2(__y[0], __x[0]);
            if (v39 < 0.0) {
              double v39 = v39 + 6.28318531;
            }
            double v40 = v39 * 57.2957795;
            double v41 = *a3;
            double v42 = a3[1];
            uint64_t v43 = *(void *)(v13 + 136) + v29;
            double v44 = *(double *)(v43 + 32);
            double v45 = *(double *)(v43 + 40);
            __x[0] = 0.0;
            uint64_t v55 = 0;
            __y[0] = 0.0;
            sub_1000F17A8(a1, __x, __y, (double *)&v55, v41, v42, 0.0, v44, v45, 0.0);
            double v46 = atan2(__y[0], __x[0]);
            if (v46 < 0.0) {
              double v46 = v46 + 6.28318531;
            }
            sub_1004BAC08(v40, v46 * 57.2957795);
            goto LABEL_54;
          }
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_102345440);
          }
          double v53 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__x[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "CLMM,interpolateProjections,Could not interpolate, incorrect coordinateCount", (uint8_t *)__x, 2u);
          }
          BOOL v54 = sub_10013D1A0(115, 0);
          BOOL result = 0;
          if (v54)
          {
            bzero(__x, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_102345440);
            }
            LOWORD(__y[0]) = 0;
LABEL_18:
            double v24 = (double *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n");
LABEL_36:
            if (v24 != __x) {
              free(v24);
            }
            return 0;
          }
          return result;
        }
LABEL_45:
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102345440);
        }
        BOOL v33 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,Could not interpolate to intended projection", (uint8_t *)__x, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(__x, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102345440);
        }
        LOWORD(__y[0]) = 0;
      }
      else
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102345440);
        }
        uint64_t v26 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          LOWORD(__x[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLMM,interpolateProjections,inconsistent array size", (uint8_t *)__x, 2u);
        }
        BOOL result = sub_10013D1A0(115, 2);
        if (!result) {
          return result;
        }
        bzero(__x, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_102345440);
        }
        LOWORD(__y[0]) = 0;
      }
    }
    double v24 = (double *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGeoAccessCommon::interpolateProjections(CLDistanceCalc &, const RoadPtr, double, Coordinate &, double &) [Coordinate = GEOLocationCoordinate2D, RoadPtr = std::shared_ptr<CLMapRoad>]", "%s\n");
    goto LABEL_36;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_102345440);
  }
  uint64_t v21 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__x[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "CLMM, NULL road", (uint8_t *)__x, 2u);
  }
  BOOL v22 = sub_10013D1A0(115, 0);
  BOOL result = 0;
  if (v22)
  {
    bzero(__x, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_102345440);
    }
    LOWORD(__y[0]) = 0;
    goto LABEL_18;
  }
  return result;
}

BOOL sub_10190A65C(uint64_t a1, double *a2, uint64_t a3, double *a4)
{
  long long v4 = *(void **)a3;
  if (!*(void *)a3) {
    return 0;
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v8;
  if (v9)
  {
    sub_1000DB0A0(v9);
    long long v4 = *(void **)a1;
    uint64_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  }
  v16[0] = v4;
  v16[1] = &v8->__vftable;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v10 = sub_101909E70(a2, v16, &v18, &v17, 0.5);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v10)
  {
    *(void *)uint64_t buf = 0;
    double v12 = v18;
    double v11 = v19;
    sub_1000F17A8(a2, (double *)(a1 + 48), (double *)(a1 + 40), (double *)buf, *a4, a4[1], a4[2], v18, v19, a4[2]);
    *(double *)(a1 + 24) = v12;
    *(double *)(a1 + 32) = v11;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "GPSODOM-MM,Unable to initialize CLRoutePath", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLGpsOdometryRhythmic_Types::CLRoutePath::initialize(CLDistanceCalc &, const CLMapRoadPtr, const GpsPoint &)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  return v10;
}

void sub_10190A8B4(_Unwind_Exception *exception_object)
{
}

BOOL sub_10190A8D4(uint64_t *a1, void *a2)
{
  if (!*a2 || !*a1) {
    return 0;
  }
  if (sub_10190D7AC(a1, (uint64_t)a2)) {
    return 1;
  }

  return sub_10190D89C(a1, (uint64_t)a2);
}

void sub_10190A944(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)(a1[1] - *a1) >= 0x11)
  {
    uint64_t v3 = 0;
    do
    {
      long long v4 = *(_OWORD *)(v1 + 16 * v3);
      long long v8 = v4;
      if (*((void *)&v4 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
        uint64_t v1 = *a1;
      }
      long long v5 = *(_OWORD *)(v1 + 16 * v3 + 16);
      long long v7 = v5;
      if (*((void *)&v5 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (sub_10190D7AC((uint64_t *)v4, (uint64_t)&v7)) {
        *(unsigned char *)(v8 + 16) = 0;
      }
      if (v3 + 1 == ((a1[1] - *a1) >> 4) - 1 && sub_10190D89C((uint64_t *)v7, (uint64_t)&v8)) {
        *(unsigned char *)(v7 + 16) = 0;
      }
      if (*((void *)&v7 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v7 + 1));
      }
      if (*((void *)&v8 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v8 + 1));
      }
      uint64_t v1 = *a1;
      unint64_t v6 = v3 + 2;
      ++v3;
    }
    while (v6 < (a1[1] - *a1) >> 4);
  }
}

void sub_10190AA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10190AA64(uint64_t a1, void *a2)
{
  long long v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  unint64_t v6 = *(void **)a1;
  long long v5 = *(void **)(a1 + 8);
  if (v6 == v5) {
    return 0;
  }
  double v7 = -1.0;
  do
  {
    uint64_t v8 = *v6;
    double v9 = *(double *)(*v6 + 56) + *(double *)(*v6 + 64);
    if (v7 < 0.0 || v9 < v7)
    {
      uint64_t v10 = v6[1];
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      double v11 = (std::__shared_weak_count *)a2[1];
      *a2 = v8;
      a2[1] = v10;
      if (v11) {
        sub_1000DB0A0(v11);
      }
      double v7 = v9;
    }
    v6 += 2;
  }
  while (v6 != v5);
  return v7 >= 0.0;
}

BOOL sub_10190AB18(long long **a1, uint64_t **a2, uint64_t *a3)
{
  if (!*a2) {
    return 0;
  }
  long long v4 = *a1;
  long long v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      double v7 = *a2;
      if ((!*a2 || (uint64_t v8 = **(void ***)v4) == 0 || *v8 != *(void *)*v7) && sub_10190A8D4(v7, v4))
      {
        if (*(void *)v4) {
          sub_10190D54C(a3, v4);
        }
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return *a3 != a3[1];
}

void sub_10190ABC0(uint64_t *a1, void ***a2)
{
  if (*a2)
  {
    uint64_t v4 = *a1;
    uint64_t v3 = (long long *)a1[1];
    if ((long long *)*a1 != v3)
    {
      unint64_t v5 = ((uint64_t)v3 - v4) >> 4;
      if (v5 <= 1) {
        unint64_t v5 = 1;
      }
      for (uint64_t i = *a1; ; i += 16)
      {
        if (*(void *)i)
        {
          double v7 = **(void ***)i;
          if (v7)
          {
            if (*v7 == ***a2) {
              break;
            }
          }
        }
        v4 += 16;
        if (!--v5) {
          return;
        }
      }
      sub_1002CEF3C((uint64_t)&v12, (long long *)(i + 16), v3, i);
      uint64_t v9 = i + v8 - v4;
      for (uint64_t j = a1[1]; v9 != j; j -= 16)
      {
        double v11 = *(std::__shared_weak_count **)(j - 8);
        if (v11) {
          sub_1000DB0A0(v11);
        }
      }
      a1[1] = v9;
    }
  }
}

uint64_t *sub_10190AC8C@<X0>(uint64_t *result@<X0>, void ***a2@<X1>, void *a3@<X8>)
{
  if (*a2)
  {
    for (uint64_t i = *result; i != result[1]; i += 16)
    {
      uint64_t v4 = **(void ***)i;
      if (v4 && *v4 == ***a2)
      {
        uint64_t v5 = *(void *)(i + 8);
        *a3 = *(void *)i;
        a3[1] = v5;
        if (v5) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
        }
        return result;
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

uint64_t sub_10190ACEC(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = (uint64_t *)(v2 - 16);
  if (*(void *)result != v2 && v3 > v1)
  {
    do
    {
      uint64_t v5 = *v1;
      uint64_t *v1 = *v3;
      *uint64_t v3 = v5;
      uint64_t v6 = v1[1];
      v1[1] = v3[1];
      v3[1] = v6;
      v1 += 2;
      v3 -= 2;
    }
    while (v1 < v3);
  }
  return result;
}

void sub_10190AD34(uint64_t a1)
{
  double v2 = *(double *)(a1 + 16);
  if (v2 > 0.0) {
    *(double *)(a1 + 16) = v2 - *(double *)a1;
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)a1 = _Q0;
  *(void *)(a1 + 240) = *(void *)(a1 + 232);
  *(void *)(a1 + 264) = *(void *)(a1 + 256);
  sub_1000C59A8((uint64_t *)(a1 + 1544));
  ++*(_DWORD *)(a1 + 1536);
}

uint64_t sub_10190AD98(uint64_t a1, double a2, double a3, double a4)
{
  double v7 = *(double *)a1;
  double v8 = 10.0;
  if (*(double *)a1 < 10.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 224);
      double v11 = *(double *)a1;
      *(_DWORD *)uint64_t buf = 134349312;
      uint64_t v23 = v10;
      __int16 v24 = 2050;
      double v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,Rhythmic,map-matched odometer simulated failure due to distance less than threshold,%{public}.2lf", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_29;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_44:
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLGpsOdometryRhythmicMapMatched::screenDistance(const double, const double, const double)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
LABEL_29:
      sub_10190AD34(a1);
      return 0;
    }
LABEL_46:
    dispatch_once(&qword_1024193D0, &stru_102345420);
    goto LABEL_44;
  }
  ++*(_DWORD *)(a1 + 1532);
  uint64_t v12 = (*(void *)(a1 + 1552) - *(void *)(a1 + 1544)) >> 4;
  if (a2 <= 0.0) {
    goto LABEL_17;
  }
  if (a2 > 10.0)
  {
    a3 = a3 / a2;
    double v8 = 0.35;
  }
  if ((int)v12 < 3 || a3 >= v8)
  {
LABEL_17:
    BOOL v20 = 1;
  }
  else
  {
    BOOL v20 = v7 > a2 * 0.65;
    if (v7 >= a2 * 1.35) {
      BOOL v20 = 0;
    }
    if (a4 >= 0.0 && !v20)
    {
      BOOL v20 = v7 > a4 * 0.85;
      if (v7 >= a4 * 1.15) {
        BOOL v20 = 0;
      }
    }
  }
  if (a2 < 0.0 || !v20)
  {
    if (!v20) {
      goto LABEL_24;
    }
  }
  else if (v7 <= a2 * 0.3 || v7 >= a2 * 1.7)
  {
LABEL_24:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    double v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 224);
      double v17 = *(double *)a1;
      *(_DWORD *)uint64_t buf = 134350080;
      uint64_t v23 = v16;
      __int16 v24 = 2050;
      double v25 = v17;
      __int16 v26 = 2050;
      double v27 = a2;
      __int16 v28 = 2050;
      double v29 = a4;
      __int16 v30 = 1026;
      int v31 = v12;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "GPSODOM-MM,%{public}.1lf,Rhythmic,map-matched odometer screening failed,mmDistance,%{public}.2lf,scaledDistance,%{public}.2lf,avgDistance,%{public}.2lf,numRoads,%{public}d", buf, 0x30u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_29;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_44;
    }
    goto LABEL_46;
  }
  return 1;
}

void sub_10190B1D0(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 1528);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  double v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM-MM,RhythmicMapMatched,resetting odometer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmicMapMatched::reset()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_1018FF3A8((__n128 *)a1);
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 176) = _Q0;
  *(_OWORD *)(a1 + 192) = _Q0;
  *(_OWORD *)(a1 + 208) = _Q0;
  *(void *)(a1 + 224) = 0xBFF0000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = _Q0;
  *(_OWORD *)(a1 + 112) = _Q0;
  *(void *)(a1 + 144) = 0xBFF0000000000000;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 128) = _Q0;
  sub_10190B3C0(a1 + 288);
  uint64_t v8 = *(void *)(a1 + 424);
  if (v8) {
    sub_101902080(v8);
  }
  sub_1000C59A8((uint64_t *)(a1 + 1544));
}

void sub_10190B3C0(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 24) = _Q0;
  *(_OWORD *)(a1 + 40) = _Q0;
  *(_OWORD *)(a1 + 56) = _Q0;
  *(void *)(a1 + 72) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 80) = 0;
  double v7 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = 0;
}

double sub_10190B420(double *a1)
{
  double result = *a1;
  if (*a1 >= 0.0)
  {
    AnalyticsSendEventLazy();
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GPSODOM-MM,RhythmicMapMatched,coreanalytics metric submitted", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic_Types::CLMMOdometerAnalytics::submitCoreAnalyticsMetric()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return sub_10190BE04((uint64_t)a1);
  }
  return result;
}

NSDictionary *sub_10190B620(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v118[0] = @"mapCachingRequestCount";
  v119[0] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 8)];
  v118[1] = @"mapCachingRequestFailures";
  v119[1] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 24)];
  v118[2] = @"mapCachingRequestProcessed";
  v119[2] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 12)];
  v118[3] = @"percentageOfTimeMapCachingReqIsProcessed";
  int v2 = *(_DWORD *)(v1 + 8);
  if (v2)
  {
    double v3 = (double)*(int *)(v1 + 12) * 100.0 / (double)v2;
    BOOL v4 = v3 > 1.0 || v3 <= 0.0;
    unsigned int v5 = llround(v3);
    if (v4) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 1;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v119[3] = +[NSNumber numberWithInt:v6];
  v118[4] = @"percentageOfMapCachingFailures";
  int v7 = *(_DWORD *)(v1 + 12);
  if (v7)
  {
    double v8 = (double)*(int *)(v1 + 24) * 100.0 / (double)v7;
    BOOL v9 = v8 > 1.0 || v8 <= 0.0;
    unsigned int v10 = llround(v8);
    if (v9) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 1;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  v119[4] = +[NSNumber numberWithInt:v11];
  v118[5] = @"numberOfAStarSearchAttempts";
  v119[5] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 528)];
  v118[6] = @"numberOfAStarSearchFailures";
  v119[6] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 532)];
  v118[7] = @"unqualifiedMapCachingRequestCount";
  v119[7] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 16)];
  v118[8] = @"unqualifiedMapCachingRequestProcessed";
  v119[8] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 20)];
  v118[9] = @"percentageOfUnqualifiedFixMapsCachingReqsProcessed";
  int v12 = *(_DWORD *)(v1 + 16);
  if (v12)
  {
    double v13 = (double)*(int *)(v1 + 20) * 100.0 / (double)v12;
    BOOL v14 = v13 > 1.0 || v13 <= 0.0;
    unsigned int v15 = llround(v13);
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  v119[9] = +[NSNumber numberWithInt:v16];
  v118[10] = @"numberOfBatchedLocationComputationAttempts";
  v119[10] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 776)];
  v118[11] = @"numberOfBatchedLocationComputationFailures";
  v119[11] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 780)];
  v118[12] = @"percentageOfBatchedLocationComputationFailures";
  int v17 = *(_DWORD *)(v1 + 776);
  if (v17)
  {
    double v18 = (double)*(int *)(v1 + 780) * 100.0 / (double)v17;
    BOOL v19 = v18 > 1.0 || v18 <= 0.0;
    unsigned int v20 = llround(v18);
    if (v19) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 1;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  v119[12] = +[NSNumber numberWithInt:v21];
  v118[13] = @"percentageOfEpochsFailedScreening";
  int v22 = *(_DWORD *)(v1 + 868);
  if (v22)
  {
    double v23 = (double)*(int *)(v1 + 872) * 100.0 / (double)v22;
    BOOL v24 = v23 > 1.0 || v23 <= 0.0;
    unsigned int v25 = llround(v23);
    if (v24) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 1;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  v119[13] = +[NSNumber numberWithInt:v26];
  v118[14] = @"numberOfIterationsNeededToCompleteAStarSearchAvg";
  double v27 = *(double *)(v1 + 648);
  BOOL v28 = v27 > 1.0 || v27 <= 0.0;
  unsigned int v29 = llround(v27);
  if (v28) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 1;
  }
  v119[14] = +[NSNumber numberWithInt:v30];
  v118[15] = @"numberOfIterationsNeededToCompleteAStarSearchMax";
  double v31 = *(double *)(v1 + 624);
  BOOL v32 = v31 > 1.0 || v31 <= 0.0;
  unsigned int v33 = llround(v31);
  if (v32) {
    uint64_t v34 = v33;
  }
  else {
    uint64_t v34 = 1;
  }
  v119[15] = +[NSNumber numberWithInt:v34];
  v118[16] = @"numberOfMapsDataRequestsFailures";
  v119[16] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 192)];
  v118[17] = @"numberOfMMOdometerResets";
  v119[17] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 864)];
  v118[18] = @"numberOfRoadsCachedAvg";
  double v35 = *(double *)(v1 + 144);
  BOOL v36 = v35 > 1.0 || v35 <= 0.0;
  unsigned int v37 = llround(v35);
  if (v36) {
    uint64_t v38 = v37;
  }
  else {
    uint64_t v38 = 1;
  }
  v119[18] = +[NSNumber numberWithInt:v38];
  v118[19] = @"numberOfRoadsCachedMax";
  double v39 = *(double *)(v1 + 120);
  BOOL v40 = v39 > 1.0 || v39 <= 0.0;
  unsigned int v41 = llround(v39);
  if (v40) {
    uint64_t v42 = v41;
  }
  else {
    uint64_t v42 = 1;
  }
  v119[19] = +[NSNumber numberWithInt:v42];
  v118[20] = @"numberOfRoadsInRouteConstructedByAStarSearchAvg";
  double v43 = *(double *)(v1 + 728);
  BOOL v44 = v43 > 1.0 || v43 <= 0.0;
  unsigned int v45 = llround(v43);
  if (v44) {
    uint64_t v46 = v45;
  }
  else {
    uint64_t v46 = 1;
  }
  v119[20] = +[NSNumber numberWithInt:v46];
  v118[21] = @"numberOfRoadsInRouteConstructedByAStarSearchMax";
  double v47 = *(double *)(v1 + 704);
  BOOL v48 = v47 > 1.0 || v47 <= 0.0;
  unsigned int v49 = llround(v47);
  if (v48) {
    uint64_t v50 = v49;
  }
  else {
    uint64_t v50 = 1;
  }
  v119[21] = +[NSNumber numberWithInt:v50];
  v118[22] = @"numberOfSnapAttempts";
  v119[22] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 280)];
  v118[23] = @"numberOfSnapCandidatesAvg";
  double v51 = *(double *)(v1 + 320);
  BOOL v52 = v51 > 1.0 || v51 <= 0.0;
  unsigned int v53 = llround(v51);
  if (v52) {
    uint64_t v54 = v53;
  }
  else {
    uint64_t v54 = 1;
  }
  v119[23] = +[NSNumber numberWithInt:v54];
  v118[24] = @"numberOfSnapCandidatesMax";
  double v55 = *(double *)(v1 + 296);
  BOOL v56 = v55 > 1.0 || v55 <= 0.0;
  unsigned int v57 = llround(v55);
  if (v56) {
    uint64_t v58 = v57;
  }
  else {
    uint64_t v58 = 1;
  }
  v119[24] = +[NSNumber numberWithInt:v58];
  v118[25] = @"numberOfSuccessfulSnaps";
  v119[25] = +[NSNumber numberWithInt:*(unsigned int *)(v1 + 284)];
  v118[26] = @"percentageOfAStarSearchFailures";
  int v59 = *(_DWORD *)(v1 + 528);
  if (v59)
  {
    double v60 = (double)*(int *)(v1 + 532) * 100.0 / (double)v59;
    BOOL v61 = v60 > 1.0 || v60 <= 0.0;
    unsigned int v62 = llround(v60);
    if (v61) {
      uint64_t v63 = v62;
    }
    else {
      uint64_t v63 = 1;
    }
  }
  else
  {
    uint64_t v63 = 0;
  }
  v119[26] = +[NSNumber numberWithInt:v63];
  v118[27] = @"percentageOfSnapFailures";
  int v64 = *(_DWORD *)(v1 + 280);
  if (v64)
  {
    double v65 = (double)(v64 - *(_DWORD *)(v1 + 284)) * 100.0 / (double)v64;
    BOOL v66 = v65 > 1.0 || v65 <= 0.0;
    unsigned int v67 = llround(v65);
    if (v66) {
      uint64_t v68 = v67;
    }
    else {
      uint64_t v68 = 1;
    }
  }
  else
  {
    uint64_t v68 = 0;
  }
  v119[27] = +[NSNumber numberWithInt:v68];
  v118[28] = @"snapSolutionCourseDiffFromRawFixAvg";
  double v69 = *(double *)(v1 + 480);
  BOOL v70 = v69 > 1.0 || v69 <= 0.0;
  unsigned int v71 = llround(v69);
  if (v70) {
    uint64_t v72 = v71;
  }
  else {
    uint64_t v72 = 1;
  }
  v119[28] = +[NSNumber numberWithInt:v72];
  v118[29] = @"snapSolutionCourseDiffFromRawFixMax";
  double v73 = *(double *)(v1 + 456);
  BOOL v74 = v73 > 1.0 || v73 <= 0.0;
  unsigned int v75 = llround(v73);
  if (v74) {
    uint64_t v76 = v75;
  }
  else {
    uint64_t v76 = 1;
  }
  v119[29] = +[NSNumber numberWithInt:v76];
  v118[30] = @"snapSolutionDistanceFromRawFixAvg";
  double v77 = *(double *)(v1 + 400);
  BOOL v78 = v77 > 1.0 || v77 <= 0.0;
  unsigned int v79 = llround(v77);
  if (v78) {
    uint64_t v80 = v79;
  }
  else {
    uint64_t v80 = 1;
  }
  v119[30] = +[NSNumber numberWithInt:v80];
  v118[31] = @"snapSolutionDistanceFromRawFixMax";
  double v81 = *(double *)(v1 + 376);
  BOOL v82 = v81 > 1.0 || v81 <= 0.0;
  unsigned int v83 = llround(v81);
  if (v82) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 1;
  }
  v119[31] = +[NSNumber numberWithInt:v84];
  v118[32] = @"timeTakenToCacheMapDataAvg";
  double v85 = *(double *)(v1 + 64);
  BOOL v86 = v85 > 1.0 || v85 <= 0.0;
  unsigned int v87 = llround(v85);
  if (v86) {
    uint64_t v88 = v87;
  }
  else {
    uint64_t v88 = 1;
  }
  v119[32] = +[NSNumber numberWithInt:v88];
  v118[33] = @"timeTakenToCacheMapDataMax";
  double v89 = *(double *)(v1 + 40);
  BOOL v90 = v89 > 1.0 || v89 <= 0.0;
  unsigned int v91 = llround(v89);
  if (v90) {
    uint64_t v92 = v91;
  }
  else {
    uint64_t v92 = 1;
  }
  v119[33] = +[NSNumber numberWithInt:v92];
  v118[34] = @"timeTakenToCompleteAStarSearchAvg";
  double v93 = *(double *)(v1 + 568);
  BOOL v94 = v93 > 1.0 || v93 <= 0.0;
  unsigned int v95 = llround(v93);
  if (v94) {
    uint64_t v96 = v95;
  }
  else {
    uint64_t v96 = 1;
  }
  v119[34] = +[NSNumber numberWithInt:v96];
  v118[35] = @"timeTakenToCompleteAStarSearchMax";
  double v97 = *(double *)(v1 + 544);
  BOOL v98 = v97 > 1.0 || v97 <= 0.0;
  unsigned int v99 = llround(v97);
  if (v98) {
    uint64_t v100 = v99;
  }
  else {
    uint64_t v100 = 1;
  }
  v119[35] = +[NSNumber numberWithInt:v100];
  v118[36] = @"timeTakenToCompleteMMOdometerProcessingAvg";
  double v101 = *(double *)(v1 + 816);
  BOOL v102 = v101 > 1.0 || v101 <= 0.0;
  unsigned int v103 = llround(v101);
  if (v102) {
    uint64_t v104 = v103;
  }
  else {
    uint64_t v104 = 1;
  }
  v119[36] = +[NSNumber numberWithInt:v104];
  v118[37] = @"timeTakenToCompleteMMOdometerProcessingMax";
  double v105 = *(double *)(v1 + 792);
  BOOL v106 = v105 > 1.0 || v105 <= 0.0;
  unsigned int v107 = llround(v105);
  if (v106) {
    uint64_t v108 = v107;
  }
  else {
    uint64_t v108 = 1;
  }
  v119[37] = +[NSNumber numberWithInt:v108];
  v118[38] = @"timeTakenToReturnMapDataFromCachedStoreAvg";
  double v109 = *(double *)(v1 + 232);
  BOOL v110 = v109 > 1.0 || v109 <= 0.0;
  unsigned int v111 = llround(v109);
  if (v110) {
    uint64_t v112 = v111;
  }
  else {
    uint64_t v112 = 1;
  }
  v119[38] = +[NSNumber numberWithInt:v112];
  v118[39] = @"timeTakenToReturnMapDataFromCachedStoreMax";
  double v113 = *(double *)(v1 + 208);
  BOOL v114 = v113 > 1.0 || v113 <= 0.0;
  unsigned int v115 = llround(v113);
  if (v114) {
    uint64_t v116 = v115;
  }
  else {
    uint64_t v116 = 1;
  }
  v119[39] = +[NSNumber numberWithInt:v116];
  return +[NSDictionary dictionaryWithObjects:v119 forKeys:v118 count:40];
}

double sub_10190BE04(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 232) = 0;
  double result = 0.0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(void *)(a1 + 576) = 0;
  *(void *)(a1 + 568) = 0;
  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 632) = 0;
  *(void *)(a1 + 624) = 0;
  *(_DWORD *)(a1 + 640) = 0;
  *(void *)(a1 + 656) = 0;
  *(void *)(a1 + 648) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 728) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 776) = 0;
  *(void *)(a1 + 800) = 0;
  *(void *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = 0;
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_10190BEF4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(_WORD *)(a1 + 8) = 257;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  sub_1000C7F88(buf);
  char v3 = *(unsigned char *)(a1 + 8);
  LOBYTE(v23[0]) = 0;
  int v4 = sub_1000D2988(*(uint64_t *)buf, "EnableRhythmicScaledOdometer", (BOOL *)v23);
  char v5 = v23[0];
  if (!v4) {
    char v5 = v3;
  }
  *(unsigned char *)(a1 + 8) = v5;
  if (v27) {
    sub_1000DB0A0(v27);
  }
  sub_1000C7F88(buf);
  char v6 = *(unsigned char *)(a1 + 9);
  LOBYTE(v23[0]) = 0;
  int v7 = sub_1000D2988(*(uint64_t *)buf, "EnableRhythmicMapMatchedOdometer", (BOOL *)v23);
  char v8 = v23[0];
  if (!v7) {
    char v8 = v6;
  }
  *(unsigned char *)(a1 + 9) = v8;
  if (v27) {
    sub_1000DB0A0(v27);
  }
  if (*(unsigned char *)(a1 + 8)) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 9)) {
    operator new();
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  BOOL v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v10 = *(unsigned __int8 *)(a1 + 8);
    int v11 = *(unsigned __int8 *)(a1 + 9);
    *(_DWORD *)uint64_t buf = 67240448;
    *(_DWORD *)&uint8_t buf[4] = v10;
    LOWORD(v27) = 1026;
    *(_DWORD *)((char *)&v27 + 2) = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GPSODOM-MM,RhythmicOdometer,enableScaledOdometer,%{public}d,enableMapMatchedOdometer,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    int v15 = *(unsigned __int8 *)(a1 + 8);
    int v16 = *(unsigned __int8 *)(a1 + 9);
    v23[0] = 67240448;
    v23[1] = v15;
    __int16 v24 = 1026;
    int v25 = v16;
    LODWORD(v20) = 14;
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGpsOdometryRhythmic::CLGpsOdometryRhythmic(id<CLIntersiloUniverse>)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (!*(void *)(a1 + 40))
  {
    *(void *)(a1 + 40) = [objc_msgSend(*(id *)a1, "silo") newTimer];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    int v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic,coreAnalytics timer created", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      LOWORD(v23[0]) = 0;
      LODWORD(v20) = 2;
      double v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGpsOdometryRhythmic::CLGpsOdometryRhythmic(id<CLIntersiloUniverse>)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    double v13 = *(void **)(a1 + 40);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_10190C4C8;
    v22[3] = &unk_1022A3020;
    unsigned char v22[4] = a1;
    [v13 setHandler:v22, v19, v20, v21];
  }
  return a1;
}

void sub_10190C410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  __int16 v24 = *(void **)(v21 + 48);
  if (v24)
  {
    *(void *)(v21 + 56) = v24;
    operator delete(v24);
  }
  uint64_t v25 = *v22;
  *int v22 = 0;
  if (v25) {
    sub_10190E4CC((uint64_t)v22, v25);
  }
  uint64_t v26 = (void *)*v20;
  void *v20 = 0;
  if (v26) {
    sub_10190E428((uint64_t)v20, v26);
  }
  _Unwind_Resume(exception_object);
}

void sub_10190C4C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic,coreAnalytics timer fire", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    char v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGpsOdometryRhythmic::CLGpsOdometryRhythmic(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_10190C664(v1);
}

void sub_10190C664(uint64_t a1)
{
  sub_10190CA14(a1);
  [*(id *)(a1 + 40) setNextFireDelay:1.79769313e308];
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic,coreanalytics timer,off", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    char v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic::onCoreAnalyticsMetricSubmissionTimerFire()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

uint64_t sub_10190C808(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic deconstructor", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    BOOL v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGpsOdometryRhythmic::~CLGpsOdometryRhythmic()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  char v3 = *(void **)(a1 + 40);
  if (v3)
  {
    [v3 setNextFireDelay:1.79769313e308];
    int v4 = *(void **)(a1 + 40);
    if (v4)
    {
      [v4 invalidate];

      *(void *)(a1 + 40) = 0;
    }
  }
  char v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v6) {
    sub_10190E4CC(a1 + 32, v6);
  }
  int v7 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v7) {
    sub_10190E428(a1 + 24, v7);
  }
  return a1;
}

void sub_10190CA04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

double sub_10190CA14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    double result = sub_10190B420((double *)(v2 + 664));
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    return sub_1018FF3F4((double *)(v4 + 536));
  }
  return result;
}

void sub_10190CA6C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[3];
  if (v5) {
    sub_1018FA928(v5, a2, a3);
  }
  uint64_t v6 = a1[4];
  if (v6) {
    sub_101902A78(v6, a2);
  }
  int v7 = (void *)a1[5];
  if (v7)
  {
    [v7 setNextFireDelay:360.0];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    char v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "GPSODOM-MM,CLGpsOdometryRhythmic,coreanalytics timer,setNextFireDelay", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic::update(const GNSS::PerEpochData &, const std::optional<CLPedometerPathStraightness>)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

void sub_10190CC30(uint64_t a1)
{
  uint64_t v2 = *(double **)(a1 + 24);
  if (v2)
  {
    double v3 = v2[28];
    double v4 = v2[18];
    v2[30] = v2[29];
    v2[33] = v2[32];
    uint64_t v5 = *(void *)(a1 + 24);
    *(void *)(v5 + 24) = *(void *)(a1 + 16);
    sub_1018FA9C8(v5);
    uint64_t v6 = *(double **)(a1 + 24);
    double v7 = v6[35];
    double v8 = *v6;
    double v9 = v6[1];
  }
  else
  {
    double v7 = -1.0;
    double v3 = -1.0;
    double v4 = -1.0;
    double v9 = -1.0;
    double v8 = -1.0;
  }
  int v10 = *(double **)(a1 + 32);
  if (v10)
  {
    double v3 = v10[28];
    double v4 = v10[18];
    v10[30] = v10[29];
    v10[33] = v10[32];
    uint64_t v11 = *(void *)(a1 + 32);
    *(void *)(v11 + 24) = *(void *)(a1 + 16);
    sub_1019030C4(v11);
    int v12 = *(void **)(a1 + 32);
    unint64_t v13 = *v12;
    double v7 = *((double *)v12 + 35);
    uint64_t v14 = (v12[194] - v12[193]) >> 4;
  }
  else
  {
    LODWORD(v14) = 0;
    unint64_t v13 = 0xBFF0000000000000;
  }
  double v15 = sub_10190CFCC((double **)(a1 + 48), v3, 360.0);
  uint64_t v16 = *(void *)(a1 + 32);
  if (v16)
  {
    int v17 = sub_10190AD98(v16, v8, v9, v15);
    double v18 = *(double **)(a1 + 32);
    if (v18)
    {
      double v19 = *v18;
      if (*v18 >= 0.0) {
        goto LABEL_14;
      }
    }
  }
  else
  {
    int v17 = 0;
  }
  uint64_t v20 = *(double **)(a1 + 24);
  if (!v20)
  {
    double v19 = 0.0;
    goto LABEL_17;
  }
  double v19 = *v20;
LABEL_14:
  if (v19 >= 0.0)
  {
LABEL_17:
    *(double *)(a1 + 16) = v19 + *(double *)(a1 + 16);
    sub_10190D05C((char *)(a1 + 48), v3, v19);
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  uint64_t v21 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134351104;
    double v24 = v3;
    __int16 v25 = 2050;
    double v26 = v4;
    __int16 v27 = 2050;
    unint64_t v28 = v13;
    __int16 v29 = 2050;
    double v30 = v8;
    __int16 v31 = 2050;
    double v32 = v7;
    __int16 v33 = 2050;
    double v34 = v15;
    __int16 v35 = 1026;
    int v36 = v17;
    __int16 v37 = 2050;
    double v38 = v19;
    __int16 v39 = 1026;
    int v40 = v14;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "GPSODOM-MM,RhythmicOdometerDistances,crntTime,%{public}.1lf,prevTime,%{public}.1lf,mmDeltaDistance,%{public}.1lf,scaledDeltaDistance,%{public}.1lf,losDeltaDistance,%{public}.1lf,avgDeltaDistance,%{public}.1lf,mmGood,%{public}d,outputDeltaDistance,%{public}.1lf,numberOfRoadsInMMPath,%{public}d", buf, 0x54u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
    int v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsOdometryRhythmic::updateDistanceAndBatchedLocations()", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
}

double sub_10190CFCC(double **a1, double a2, double a3)
{
  double v3 = -1.0;
  if (a2 >= 0.0 && a3 >= 0.0)
  {
    double v4 = *a1;
    uint64_t v5 = a1[1];
    if (*a1 == v5)
    {
      double v8 = 0.0;
      double v7 = 0.0;
    }
    else
    {
      double v6 = a2 - a3;
      double v7 = 0.0;
      double v8 = 0.0;
      do
      {
        double v9 = *v4;
        double v10 = v4[1];
        v4 += 2;
        BOOL v11 = v9 >= a2;
        if (v9 < v6) {
          BOOL v11 = 1;
        }
        if (!v11) {
          double v8 = v8 + 1.0;
        }
        double v12 = -0.0;
        if (!v11) {
          double v12 = v10;
        }
        double v7 = v7 + v12;
      }
      while (v4 != v5);
    }
    if (v8 >= 2.0) {
      return v7 / v8;
    }
    else {
      return -1.0;
    }
  }
  return v3;
}

char *sub_10190D05C(char *result, double a2, double a3)
{
  double v3 = result;
  double v4 = *(char **)result;
  uint64_t v5 = (double *)*((void *)result + 1);
  if (*(double **)result == v5)
  {
LABEL_5:
    if (a2 >= 0.0 && a3 >= 0.0)
    {
      v8.n128_f64[0] = a2;
      v8.n128_f64[1] = a3;
      double result = sub_10190D98C((uint64_t)result, v4, &v8);
      uint64_t v7 = *((void *)v3 + 1);
      if ((unint64_t)(v7 - *(void *)v3) >= 0x1E1) {
        *((void *)v3 + 1) = v7 - 16;
      }
    }
  }
  else
  {
    double v6 = *(double **)result;
    while (vabdd_f64(*v6, a2) >= 0.001)
    {
      v6 += 2;
      if (v6 == v5) {
        goto LABEL_5;
      }
    }
  }
  return result;
}

void *sub_10190D0F0(void *a1)
{
  uint64_t v2 = (void *)a1[88];
  if (v2)
  {
    a1[89] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[78];
  if (v3)
  {
    a1[79] = v3;
    operator delete(v3);
  }
  double v4 = (void *)a1[68];
  if (v4)
  {
    a1[69] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[58];
  if (v5)
  {
    a1[59] = v5;
    operator delete(v5);
  }
  double v6 = (void *)a1[48];
  if (v6)
  {
    a1[49] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[38];
  if (v7)
  {
    a1[39] = v7;
    operator delete(v7);
  }
  __n128 v8 = (void *)a1[28];
  if (v8)
  {
    a1[29] = v8;
    operator delete(v8);
  }
  double v9 = (void *)a1[18];
  if (v9)
  {
    a1[19] = v9;
    operator delete(v9);
  }
  double v10 = (void *)a1[8];
  if (v10)
  {
    a1[9] = v10;
    operator delete(v10);
  }
  return a1;
}

void sub_10190D1A4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

BOOL sub_10190D1D4(double a1, double a2, double a3, double a4)
{
  BOOL result = 0;
  if (a1 > 0.0 && a2 > 0.0) {
    return !sub_1000EF668(a3, a4) && sub_1000EF68C(a3, a4);
  }
  return result;
}

void sub_10190D23C(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void *sub_10190D26C(void *a1)
{
  uint64_t v2 = (void *)a1[105];
  if (v2)
  {
    a1[106] = v2;
    operator delete(v2);
  }
  double v3 = (void *)a1[94];
  if (v3)
  {
    a1[95] = v3;
    operator delete(v3);
  }
  double v4 = (void *)a1[84];
  if (v4)
  {
    a1[85] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[74];
  if (v5)
  {
    a1[75] = v5;
    operator delete(v5);
  }
  double v6 = (void *)a1[63];
  if (v6)
  {
    a1[64] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[53];
  if (v7)
  {
    a1[54] = v7;
    operator delete(v7);
  }
  __n128 v8 = (void *)a1[43];
  if (v8)
  {
    a1[44] = v8;
    operator delete(v8);
  }
  double v9 = (void *)a1[32];
  if (v9)
  {
    a1[33] = v9;
    operator delete(v9);
  }
  double v10 = (void *)a1[21];
  if (v10)
  {
    a1[22] = v10;
    operator delete(v10);
  }
  BOOL v11 = (void *)a1[11];
  if (v11)
  {
    a1[12] = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_10190D330(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  double v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    sub_100D2B43C((uint64_t *)a1);
    if (a4 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_10022F168((void *)a1, v12);
    unint64_t v13 = sub_10190D484(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    double v15 = &a2[2 * v14];
    sub_100D2D21C((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = sub_10190D484(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  sub_100D2D21C((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      double v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        sub_1000DB0A0(v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_10190D474(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10190D47C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_10190D484(uint64_t a1, void *a2, void *a3, void *a4)
{
  double v4 = a4;
  uint64_t v10 = a4;
  double v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  _DWORD v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_10190D514((uint64_t)v7);
  return v4;
}

uint64_t sub_10190D514(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100223AE4(a1);
  }
  return a1;
}

void **sub_10190D54C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    unsigned char v18[4] = result;
    unint64_t v14 = (char *)sub_1000C571C((uint64_t)result, v13);
    double v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)double v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v18[2] = v15 + 16;
    sub_10190D668(a1, v18);
    double v9 = (void *)a1[1];
    BOOL result = sub_1000C5898(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    double v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_10190D654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C5898((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10190D668(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10190D6E0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10190D6E0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10190D774((uint64_t)v12);
  return v10;
}

uint64_t sub_10190D774(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1002CFBC4(a1);
  }
  return a1;
}

BOOL sub_10190D7AC(uint64_t *a1, uint64_t a2)
{
  if (!*(void *)a2) {
    return 0;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v6 = v3 + 136;
  uint64_t v5 = *(double **)(v3 + 136);
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  if (*(double **)(v6 + 8) != v5)
  {
    double v8 = *v5;
    double v9 = v5[1];
  }
  unint64_t v11 = (double **)(**(void **)a2 + 136);
  uint64_t v10 = *v11;
  double v12 = 0.0;
  if (v11[1] != *v11)
  {
    double v7 = *v10;
    double v12 = v10[1];
  }
  if (sub_1004BABDC(v8, v9, v7, v12, 0.0000001)) {
    return 1;
  }
  long long v14 = *(double **)(*a1 + 136);
  double v15 = 0.0;
  double v16 = 0.0;
  double v17 = 0.0;
  if (*(double **)(*a1 + 144) != v14)
  {
    double v16 = *v14;
    double v17 = v14[1];
  }
  uint64_t v18 = *(void *)(**(void **)a2 + 144);
  double v19 = 0.0;
  if (v18 != *(void *)(**(void **)a2 + 136))
  {
    double v15 = *(double *)(v18 - 16);
    double v19 = *(double *)(v18 - 8);
  }

  return sub_1004BABDC(v16, v17, v15, v19, 0.0000001);
}

BOOL sub_10190D89C(uint64_t *a1, uint64_t a2)
{
  if (!*(void *)a2) {
    return 0;
  }
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v5 = *(void *)(v3 + 144);
  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = 0.0;
  if (v5 != *(void *)(v3 + 136))
  {
    double v7 = *(double *)(v5 - 16);
    double v8 = *(double *)(v5 - 8);
  }
  uint64_t v10 = (double **)(**(void **)a2 + 136);
  double v9 = *v10;
  double v11 = 0.0;
  if (v10[1] != *v10)
  {
    double v6 = *v9;
    double v11 = v9[1];
  }
  if (sub_1004BABDC(v7, v8, v6, v11, 0.0000001)) {
    return 1;
  }
  uint64_t v13 = *(void *)(*a1 + 144);
  double v14 = 0.0;
  double v15 = 0.0;
  double v16 = 0.0;
  if (v13 != *(void *)(*a1 + 136))
  {
    double v15 = *(double *)(v13 - 16);
    double v16 = *(double *)(v13 - 8);
  }
  uint64_t v17 = *(void *)(**(void **)a2 + 144);
  double v18 = 0.0;
  if (v17 != *(void *)(**(void **)a2 + 136))
  {
    double v14 = *(double *)(v17 - 16);
    double v18 = *(double *)(v17 - 8);
  }

  return sub_1004BABDC(v15, v16, v14, v18, 0.0000001);
}

char *sub_10190D98C(uint64_t a1, char *__src, __n128 *a3)
{
  double v4 = __src;
  double v6 = *(char **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if ((unint64_t)v6 >= v9)
  {
    double v14 = *(unsigned char **)a1;
    unint64_t v15 = ((uint64_t)&v6[-*(void *)a1] >> 4) + 1;
    if (v15 >> 60) {
      sub_1001D7FD4();
    }
    uint64_t v16 = (__src - v14) >> 4;
    uint64_t v17 = v8 - (void)v14;
    if (v17 >> 3 > v15) {
      unint64_t v15 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v25 = v7;
    if (v18) {
      double v19 = (char *)sub_1000C571C(v7, v18);
    }
    else {
      double v19 = 0;
    }
    long long __p = v19;
    int v22 = &v19[16 * v16];
    double v23 = v22;
    double v24 = &v19[16 * v18];
    sub_10190DB30((__n128 **)&__p, a3);
    double v4 = (char *)sub_10027E248((void **)a1, (uint64_t)&__p, v4);
    if (v23 != v22) {
      v23 += (v22 - v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(__n128 *)long long __src = *a3;
    *(void *)(a1 + 8) = __src + 16;
  }
  else
  {
    uint64_t v10 = __src + 16;
    double v11 = v6 - 16;
    double v12 = v6;
    while (v11 < v6)
    {
      long long v13 = *(_OWORD *)v11;
      v11 += 16;
      *(_OWORD *)double v12 = v13;
      v12 += 16;
    }
    *(void *)(a1 + 8) = v12;
    if (v6 != v10) {
      memmove(&v6[-16 * ((v6 - v10) >> 4)], __src, v6 - v10);
    }
    *(__n128 *)double v4 = *a3;
  }
  return v4;
}

void sub_10190DAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10190DB30(__n128 **a1, __n128 *a2)
{
  double v4 = a1[2];
  if (v4 == a1[3])
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = (char *)v5 - (char *)*a1;
    if (v5 <= *a1)
    {
      if (v4 == *a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = ((char *)v4 - (char *)*a1) >> 3;
      }
      uint64_t v17 = (__n128 *)sub_1000C571C((uint64_t)a1[4], v16);
      double v19 = &v17[v16 >> 2];
      char v20 = a1[1];
      double v4 = v19;
      uint64_t v21 = (char *)a1[2] - (char *)v20;
      if (v21)
      {
        double v4 = (__n128 *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFF0));
        uint64_t v22 = 16 * (v21 >> 4);
        double v23 = (char *)&v17[v16 >> 2];
        do
        {
          long long v24 = (__int128)*v20++;
          *(_OWORD *)double v23 = v24;
          v23 += 16;
          v22 -= 16;
        }
        while (v22);
      }
      uint64_t v25 = *a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[v18];
      if (v25)
      {
        operator delete(v25);
        double v4 = a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 4;
      BOOL v8 = v6 >> 4 < -1;
      uint64_t v9 = (v6 >> 4) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      long long v13 = &v5[-v12];
      int64_t v14 = (char *)v4 - (char *)v5;
      if (v4 != v5)
      {
        memmove(&v5[-v12], v5, (char *)v4 - (char *)v5);
        double v4 = a1[1];
      }
      unint64_t v15 = &v4[v11];
      double v4 = (__n128 *)((char *)v13 + v14);
      a1[1] = v15;
      a1[2] = (__n128 *)((char *)v13 + v14);
    }
  }
  __n128 result = *a2;
  __n128 *v4 = *a2;
  ++a1[2];
  return result;
}

void *sub_10190DC48(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x75075075075076) {
    sub_1001D7FA0();
  }
  return operator new(560 * a2);
}

void *sub_10190DC94@<X0>(void *a1@<X1>, void *a2@<X2>, unsigned int *a3@<X3>, void *a4@<X8>)
{
  BOOL v8 = operator new(0x50uLL);
  __n128 result = sub_10190DD08(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_10190DCF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10190DD08(void *a1, void *a2, void *a3, unsigned int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022C2160;
  sub_1010FB0E4(a1 + 3, *a2, *a3, *a4);
  return a1;
}

void sub_10190DD5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10190DD70(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10190DD70(a1, *a2);
    sub_10190DD70(a1, a2[1]);
    double v4 = (std::__shared_weak_count *)a2[8];
    if (v4) {
      sub_1000DB0A0(v4);
    }
    operator delete(a2);
  }
}

_OWORD *sub_10190DDD0(uint64_t **a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_1011DFB10((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x48uLL);
    uint64_t v9 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 6) = v9;
    sub_1000EDF90(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_10190DE64(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[8];
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t **sub_10190DEC0(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      BOOL v8 = (uint64_t *)v6[1];
    }
    else {
      BOOL v8 = v6;
    }
    int64_t v14 = result;
    unint64_t v15 = v8;
    unint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v17[0] = (uint64_t)(v8 + 4);
          v17[1] = (uint64_t)(v8 + 7);
          sub_10190E034(v17, v9 + 2);
          sub_10136FB60(v5, v16);
          unint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = sub_1002FABD8((uint64_t)v15);
          }
          uint64_t v10 = (long long *)*((void *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = *(long long **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v11 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          BOOL v8 = v16;
          if (v16) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v11);
      }
    }
    __n128 result = (uint64_t **)sub_10190E094((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_10190E0EC(v5, (uint64_t)(a2 + 2));
      uint64_t v12 = (long long *)*((void *)a2 + 1);
      if (v12)
      {
        do
        {
          long long v13 = v12;
          uint64_t v12 = *(long long **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          long long v13 = (long long *)*((void *)a2 + 2);
          BOOL v11 = *(void *)v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_10190E020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10190E094((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10190E034(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  long long v4 = *a2;
  *(unsigned char *)(v3 + 16) = *((unsigned char *)a2 + 16);
  *(_OWORD *)uint64_t v3 = v4;
  uint64_t v5 = (void *)a1[1];
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v6 = *((void *)a2 + 4);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v8 = (std::__shared_weak_count *)v5[1];
  void *v5 = v7;
  v5[1] = v6;
  if (v8) {
    sub_1000DB0A0(v8);
  }
  return a1;
}

uint64_t sub_10190E094(uint64_t a1)
{
  sub_10190DD70(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10190DD70(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_10190E0EC(uint64_t **a1, uint64_t a2)
{
  long long v4 = a1 + 1;
  uint64_t v5 = (uint64_t *)operator new(0x48uLL);
  uint64_t v12 = v5;
  *((_OWORD *)v5 + 2) = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 24);
  v5[6] = *(void *)(a2 + 16);
  v5[7] = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned char v5[8] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v8 = *v4;
  uint64_t v9 = v4;
  if (*v4)
  {
    uint64_t v10 = (uint64_t)(v5 + 4);
    do
    {
      while (1)
      {
        long long v4 = (uint64_t **)v8;
        if (!sub_100FFD56C(v10, (uint64_t)(v8 + 4))) {
          break;
        }
        BOOL v8 = *v4;
        uint64_t v9 = v4;
        if (!*v4) {
          goto LABEL_10;
        }
      }
      BOOL v8 = v4[1];
    }
    while (v8);
    uint64_t v9 = v4 + 1;
  }
LABEL_10:
  sub_1000EDF90(a1, (uint64_t)v4, v9, v12);
  return v12;
}

void sub_10190E1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    sub_10190DE64(v10, __p);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_10190E1E0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void **)sub_1011DFB10((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x48uLL);
    _DWORD v6[2] = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 24);
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *((void *)v6 + 7) = v8;
    uint64_t v9 = *(void *)(a3 + 32);
    *((void *)v6 + 8) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    sub_1000EDF90(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *sub_10190E284(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    sub_10190DD70(v2 + 88, *(void **)(v2 + 96));
    operator delete();
  }
  return result;
}

void sub_10190E2E8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10190E358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_10190E3C4((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10190E378(uint64_t a1)
{
}

uint64_t sub_10190E380(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10190E3C4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 80);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    long long v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      sub_1000DB0A0(v4);
    }
    operator delete();
  }
}

void sub_10190E428(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10190D0F0(a2 + 67);
    uint64_t v3 = (void *)a2[47];
    if (v3)
    {
      a2[48] = v3;
      operator delete(v3);
    }
    long long v4 = (void *)a2[44];
    if (v4)
    {
      a2[45] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)a2[36];
    if (v5)
    {
      a2[37] = v5;
      operator delete(v5);
    }
    uint64_t v6 = (void *)a2[32];
    if (v6)
    {
      a2[33] = v6;
      operator delete(v6);
    }
    uint64_t v7 = (void *)a2[29];
    if (v7)
    {
      a2[30] = v7;
      operator delete(v7);
    }
    operator delete();
  }
}

void sub_10190E4CC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v6 = (void **)(a2 + 1544);
    sub_1000C5954(&v6);
    sub_10190D26C((void *)(a2 + 664));
    sub_1000F5BB0(a2 + 568, *(void **)(a2 + 576));
    sub_10190E284((uint64_t *)(a2 + 424), 0);
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 384);
    if (v3) {
      sub_1000DB0A0(v3);
    }
    long long v4 = *(void **)(a2 + 256);
    if (v4)
    {
      *(void *)(a2 + 264) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(a2 + 232);
    if (v5)
    {
      *(void *)(a2 + 240) = v5;
      operator delete(v5);
    }
    operator delete();
  }
}

void sub_10190E570()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    if (sub_100857B88())
    {
      sub_1001DB29C();
      sub_100219D40((void *)&_mh_execute_header, v0, v2, "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fClientLocationsVector size different from fClientLocationsPrivateVector\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
    }
    uint64_t v0 = *(NSObject **)(v1 + 984);
    if (os_signpost_enabled(v0))
    {
      sub_1001DB29C();
      sub_100219C3C((void *)&_mh_execute_header, v0, v3, v4, "Assertion failed,GPSODOM,fClientLocationsVector size different from fClientLocationsPrivateVector", "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fClientLocationsVector size different from fClientLocationsPrivateVector\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345420);
      }
    }
    if (sub_100857BA8())
    {
      sub_1001DB29C();
      sub_1001DE4F8((void *)&_mh_execute_header, v5, v6, "{\"msg%{public}.0s\":\"Assertion failed,GPSODOM,fClientLocationsVector size different from fClientLocationsPrivateVector\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", v7);
    }
    abort_report_np();
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
}

void sub_10190E6FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v27;
  a24 = v28;
  sub_100857C1C();
  if (!v29) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v30, "{\"msg%{public}.0s\":\"GPSODOM-MM,Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
  }
  __int16 v31 = *(NSObject **)(v26 + 984);
  if (os_signpost_enabled(v31))
  {
    sub_1001DB2F0();
    sub_100219C3C((void *)&_mh_execute_header, v31, v32, v33, "GPSODOM-MM,Assertion failed,fGEOMapFeatureAccess==nil", "{\"msg%{public}.0s\":\"GPSODOM-MM,Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v34, v35, "{\"msg%{public}.0s\":\"GPSODOM-MM,Assertion failed,fGEOMapFeatureAccess==nil\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_10190E864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v27;
  a24 = v28;
  sub_100857C1C();
  if (!v29) {
    dispatch_once(&qword_1024193D0, &stru_102345420);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v30, "{\"msg%{public}.0s\":\"GPSODOM-MM,MapRoadBuffer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
  }
  __int16 v31 = *(NSObject **)(v26 + 984);
  if (os_signpost_enabled(v31))
  {
    sub_1001DB2F0();
    sub_100219C3C((void *)&_mh_execute_header, v31, v32, v33, "GPSODOM-MM,MapRoadBuffer Creation,Assertion failed", "{\"msg%{public}.0s\":\"GPSODOM-MM,MapRoadBuffer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345420);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_1001DE4F8((void *)&_mh_execute_header, v34, v35, "{\"msg%{public}.0s\":\"GPSODOM-MM,MapRoadBuffer Creation,Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

#error "10190EAC4: call analysis failed (funcsize=79)"

#error "10190EC40: call analysis failed (funcsize=79)"

void sub_10190ED2C(uint64_t a1, void *a2)
{
  if (a2)
  {
    *(unsigned char *)(a1 + 3481) = [a2 hasDepartureDate];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345580);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v5 = *(unsigned char *)(a1 + 3481) == 0;
      *(_DWORD *)uint64_t buf = 68289539;
      int v9 = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 1026;
      BOOL v13 = v5;
      __int16 v14 = 2113;
      unint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"BaroAlt,received leeched visit notification\", \"InVisit\":%{public}d, \"visit\":%{private, location:escape_only}@}", buf, 0x22u);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345580);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,#warning,Received null visit", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345580);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onVisit(CLVisit *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_10190EF8C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_101D1C320;
  *(_DWORD *)(a1 + 40) = -1;
  *(_WORD *)(a1 + 44) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 104) = xmmword_101D1C320;
  *(_DWORD *)(a1 + 120) = -1;
  *(_WORD *)(a1 + 124) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = xmmword_101E46940;
  *(_OWORD *)(a1 + 192) = xmmword_101E46950;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 224) = 0;
  *(unsigned char *)(a1 + 244) = 0;
  *(unsigned char *)(a1 + 248) = 0;
  *(unsigned char *)(a1 + 252) = 0;
  *(unsigned char *)(a1 + 256) = 0;
  *(unsigned char *)(a1 + 260) = 0;
  *(unsigned char *)(a1 + 264) = 0;
  *(unsigned char *)(a1 + 276) = 0;
  *(_WORD *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 0;
  *(unsigned char *)(a1 + 296) = 0;
  *(unsigned char *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 308) = 0;
  *(unsigned char *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(unsigned char *)(a1 + 328) = 0;
  *(unsigned char *)(a1 + 332) = 0;
  *(unsigned char *)(a1 + 336) = 0;
  *(unsigned char *)(a1 + 344) = 0;
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 356) = 0;
  *(_WORD *)(a1 + 360) = 0;
  *(unsigned char *)(a1 + 362) = 0;
  *(_WORD *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 268) = 0;
  *(unsigned char *)(a1 + 272) = 0;
  *(void *)(a1 + 364) = 0x500000000;
  *(_WORD *)(a1 + 372) = 0;
  *(_DWORD *)(a1 + 376) = 5;
  *(unsigned char *)(a1 + 380) = 1;
  *(void *)(a1 + 384) = 0x4122750000000000;
  *(_DWORD *)(a1 + 392) = 50;
  *(void *)(a1 + 400) = 0x409C200000000000;
  *(_DWORD *)(a1 + 408) = 60;
  *(void *)(a1 + 416) = 0x403E000000000000;
  *(_DWORD *)(a1 + 424) = 8;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 432) = 0;
  *(unsigned char *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = xmmword_101D1C320;
  *(unsigned char *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = a2;
  *(void *)(a1 + 512) = 0;
  *(unsigned char *)(a1 + 520) = 0;
  sub_100134750(__p, "CLBarometricAltitudeSignificantElevation");
  sub_1008AFE90(a1 + 528, __p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  *(_WORD *)(a1 + 1336) = 0;
  *(unsigned char *)(a1 + 1338) = 0;
  *(void *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(void *)(a1 + 1328) = -1;
  *(_WORD *)(a1 + 1432) = 0;
  *(unsigned char *)(a1 + 1434) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(void *)(a1 + 1424) = -1;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(void *)(a1 + 1536) = 0;
  *(_DWORD *)(a1 + 1544) = -1;
  *(void *)(a1 + 1600) = 0;
  *(void *)(a1 + 1608) = 0;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1580) = 0u;
  sub_100134750((void *)(a1 + 1616), "");
  *(unsigned char *)(a1 + 1688) = 0;
  *(_OWORD *)(a1 + 1656) = 0u;
  *(_OWORD *)(a1 + 1672) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  *(void *)(a1 + 1704) = 0;
  *(void *)(a1 + 1696) = 0;
  *(void *)(a1 + 1712) = 0xBFF0000000000000;
  *(void *)(a1 + 1920) = 0;
  *(void *)(a1 + 1912) = 0;
  *(_DWORD *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1720) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_WORD *)(a1 + 1872) = 0;
  *(void *)(a1 + 1888) = 0;
  *(void *)(a1 + 1880) = 0;
  *(_DWORD *)(a1 + 1904) = 0;
  *(void *)(a1 + 1896) = 0;
  sub_100134750((void *)(a1 + 1928), "");
  *(void *)(a1 + 1960) = 0;
  *(void *)(a1 + 1952) = 0;
  *(_DWORD *)(a1 + 1968) = 0;
  *(void *)(a1 + 1984) = 0;
  *(void *)(a1 + 1976) = 0;
  sub_100134750((void *)(a1 + 1992), "");
  *(unsigned char *)(a1 + 2016) = 0;
  *(_OWORD *)(a1 + 2024) = xmmword_101D1C570;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(void *)(a1 + 2072) = 0;
  *(void *)(a1 + 2080) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(void *)(a1 + 2120) = 0xBFF0000000000000;
  *(void *)(a1 + 2128) = 0;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_DWORD *)(a1 + 2152) = -1;
  *(unsigned char *)(a1 + 2156) = 0;
  *(void *)(a1 + 2264) = 0;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2217) = 0u;
  *(unsigned char *)(a1 + 2256) = 0;
  *(_OWORD *)(a1 + 2240) = 0u;
  *(void *)(a1 + 2272) = 0xBFF0000000000000;
  *(void *)(a1 + 2280) = 0;
  *(void *)(a1 + 2288) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(void *)(a1 + 2344) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 2376) = 0;
  *(_DWORD *)(a1 + 2384) = 0xFFFF;
  *(_OWORD *)(a1 + 2388) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  long long v8 = _Q1;
  *(_OWORD *)(a1 + 2404) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 2420) = _Q1;
  *(_OWORD *)(a1 + 2436) = _Q1;
  *(_OWORD *)(a1 + 2452) = _Q1;
  *(_DWORD *)(a1 + 2468) = 0;
  *(void *)(a1 + 2472) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2496) = 0;
  *(_OWORD *)(a1 + 2480) = 0u;
  *(void *)(a1 + 2500) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 2508) = 0x7FFFFFFF;
  *(unsigned char *)(a1 + 2536) = 0;
  *(_OWORD *)(a1 + 2512) = 0u;
  *(void *)(a1 + 2528) = 0;
  sub_1000DBC34(a1 + 2544);
  *(_DWORD *)(a1 + 3184) = 0xFFFF;
  *(_OWORD *)(a1 + 3188) = 0u;
  *(_OWORD *)(a1 + 3204) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 3220) = v8;
  *(_OWORD *)(a1 + 3236) = v8;
  *(_OWORD *)(a1 + 3252) = v8;
  *(_DWORD *)(a1 + 3268) = 0;
  *(void *)(a1 + 3272) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_DWORD *)(a1 + 3296) = 0;
  *(void *)(a1 + 3300) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 3308) = 0x7FFFFFFF;
  *(void *)(a1 + 3312) = 0;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(unsigned char *)(a1 + 3336) = 0;
  *(void *)(a1 + 3440) = 0;
  *(_OWORD *)(a1 + 3424) = 0u;
  *(_OWORD *)(a1 + 3408) = 0u;
  *(_OWORD *)(a1 + 3392) = 0u;
  *(_OWORD *)(a1 + 3376) = 0u;
  *(_OWORD *)(a1 + 3360) = 0u;
  *(_OWORD *)(a1 + 3344) = 0u;
  *(void *)(a1 + 3448) = 0x7FEFFFFFFFFFFFFFLL;
  *(_DWORD *)(a1 + 3456) = 0;
  *(unsigned char *)(a1 + 3460) = 0;
  *(_DWORD *)(a1 + 3479) = 0;
  *(_OWORD *)(a1 + 3464) = 0u;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_OWORD *)(a1 + 3504) = 0u;
  *(_OWORD *)(a1 + 3516) = 0u;
  *(void *)(a1 + 3552) = 0;
  *(_DWORD *)(a1 + 3560) = 0;
  *(void *)(a1 + 3536) = 0;
  *(void *)(a1 + 3544) = 0;
  *(void *)(a1 + 3584) = 0;
  *(_DWORD *)(a1 + 3592) = 0;
  *(void *)(a1 + 3568) = 0;
  *(void *)(a1 + 3576) = 0;
  *(void *)(a1 + 3608) = 0;
  *(void *)(a1 + 3600) = 0;
  *(void *)(a1 + 3616) = 0;
  *(void *)(a1 + 3624) = 0x4122750000000000;
  *(_OWORD *)(a1 + 3632) = xmmword_101E46960;
  *(void *)(a1 + 3648) = 0x40AC200000000000;
  *(_OWORD *)(a1 + 3656) = 0u;
  *(_OWORD *)(a1 + 3672) = 0u;
  *(_OWORD *)(a1 + 3688) = 0u;
  *(_OWORD *)(a1 + 3704) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_OWORD *)(a1 + 3736) = 0u;
  *(_DWORD *)(a1 + 3752) = 0;
  sub_1019134F8(a1);
  sub_1004A1714();
}

void sub_101913048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  sub_10041F48C((void *)(v12 + 3688));
  uint64_t v15 = *(void *)(v12 + 3680);
  *(void *)(v12 + 3680) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(v12 + 3672);
  *(void *)(v12 + 3672) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(v12 + 3504);
  *(void *)(v12 + 3504) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(void *)(v12 + 3496);
  *(void *)(v12 + 3496) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  sub_1003BE294((void *)(v12 + 3400));
  sub_1003BE294((void *)(v12 + 3352));
  double v19 = *(std::__shared_weak_count **)(v12 + 3072);
  if (v19) {
    sub_1000DB0A0(v19);
  }
  sub_100682438((void *)(v12 + 2352));
  sub_10041F48C(a12);
  uint64_t v20 = *(void *)(v12 + 2280);
  *(void *)(v12 + 2280) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = (uint64_t *)(v12 + 2240);
  uint64_t v22 = *(void *)(v12 + 2248);
  *(void *)(v12 + 2248) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *v21;
  *uint64_t v21 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  sub_101915A9C(v13);
  sub_10041F48C((void *)(v12 + 1440));
  if (*(char *)(v12 + 1223) < 0) {
    operator delete(*(void **)(v12 + 1200));
  }
  uint64_t v24 = *(void *)(v12 + 512);
  *(void *)(v12 + 512) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *(void **)v12;
  *(void *)uint64_t v12 = 0;
  if (v25) {
    sub_10192544C(v12, v25);
  }
  _Unwind_Resume(a1);
}

double sub_1019134F8(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,resetting", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    LOWORD(v27) = 0;
    double v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::reset()", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  *(void *)(a1 + 1240) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  sub_1008AFC80(a1 + 528);
  *(void *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 480) = xmmword_101D1C320;
  if (*(unsigned char *)(a1 + 520))
  {
    [*(id *)(*(void *)(a1 + 512) + 16) unregister:*(void *)(*(void *)(a1 + 512) + 8) forNotification:7];
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,odometer unsubscribed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      LOWORD(v27) = 0;
      uint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::reset()", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  *(unsigned char *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 2160) = 0u;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2208) = 0u;
  *(_OWORD *)(a1 + 2217) = 0u;
  memset(buf, 0, sizeof(buf));
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1544) = 0xFFFFFFFFLL;
  *(void *)(a1 + 1568) = 0;
  *(_OWORD *)(a1 + 1552) = *(_OWORD *)buf;
  *(void *)(a1 + 2120) = 0xBFF0000000000000;
  *(void *)(a1 + 2128) = 0;
  *(void *)(a1 + 2144) = 0;
  *(void *)(a1 + 2136) = 0;
  *(_DWORD *)(a1 + 2152) = -1;
  sub_10191B140(a1);
  if (*(void *)a1) {
    sub_10187C1E4(*(void *)a1);
  }
  sub_10191B428(a1 + 1576);
  *(void *)(a1 + 2024) = 0;
  *(void *)(a1 + 2032) = 0xBFF0000000000000;
  *(void *)(a1 + 2072) = 0;
  *(_OWORD *)(a1 + 2040) = 0u;
  *(_OWORD *)(a1 + 2056) = 0u;
  *(void *)(a1 + 2080) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  sub_1000C7F88(buf);
  LOBYTE(v27) = 0;
  int v4 = sub_1000D2988(*(uint64_t *)buf, "BaroAltCnOutdoorCalTriggerEnabled", (BOOL *)&v27);
  if ((_BYTE)v27) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v5)
  {
    sub_1000C7F88(buf);
    LOBYTE(v27) = 0;
    __int16 v6 = sub_1000D2988(*(uint64_t *)buf, "BaroAltCnOutdoorCalTriggerEnabled", (BOOL *)&v27);
    if ((_BYTE)v27) {
      __int16 v7 = v6;
    }
    else {
      __int16 v7 = 0;
    }
    *(_WORD *)(a1 + 238) = v7 | 0x100;
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    long long v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (!*(unsigned char *)(a1 + 239)) {
        sub_10020D700();
      }
      int v9 = *(unsigned __int8 *)(a1 + 238);
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,BaroAltCnOutdoorCalTriggerEnabled,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      if (!*(unsigned char *)(a1 + 239)) {
        sub_10020D700();
      }
      int v25 = *(unsigned __int8 *)(a1 + 238);
      int v27 = 67240192;
      int v28 = v25;
      uint64_t v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::reset()", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
  }
  sub_1000C7F88(buf);
  int v27 = 0;
  int v10 = sub_10006EF84(*(uint64_t *)buf, "CLBaroAltReferencePressureSource", &v27);
  int v11 = v27;
  if (!v10) {
    int v11 = 0;
  }
  *(_DWORD *)(a1 + 2152) = v11;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v13 = *(_DWORD *)(a1 + 2152);
    *(_DWORD *)uint64_t buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,CLBaroAltReferencePressureSource,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v20 = *(_DWORD *)(a1 + 2152);
    int v27 = 67240192;
    int v28 = v20;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::reset()", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  if (*(_DWORD *)(a1 + 2152))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      int v15 = *(_DWORD *)(a1 + 2152);
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "BaroAlt,unsupported reference pressure source,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      int v23 = *(_DWORD *)(a1 + 2152);
      int v27 = 67240192;
      int v28 = v23;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLBarometricAltimeter::reset()", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  uint64_t v16 = *(void **)(a1 + 2264);
  if (v16) {
    [v16 setNextFireDelay:1.79769313e308];
  }
  *(unsigned char *)(a1 + 3460) = 0;
  uint64_t v17 = 236;
  if (!*(unsigned char *)(a1 + 237)) {
    uint64_t v17 = 360;
  }
  if (*(unsigned char *)(a1 + v17))
  {
    sub_101915E7C((void *)a1);
    *(unsigned char *)(a1 + 3460) = 1;
  }
  sub_10191B6DC(a1);
  *(void *)&double result = sub_100F40DB8(a1 + 2384).n128_u64[0];
  return result;
}

void sub_101913DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_101913DD8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 504), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345540);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10191F3D4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101913F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_101913FB4(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = 244;
    if (!*(unsigned char *)(a1 + 248)) {
      uint64_t v3 = 364;
    }
    int v4 = *(_DWORD *)(a1 + v3);
    uint64_t v5 = 252;
    if (!*(unsigned char *)(a1 + 256)) {
      uint64_t v5 = 376;
    }
    int v6 = *(_DWORD *)(a1 + v5);
    uint64_t v7 = 236;
    if (!*(unsigned char *)(a1 + 237)) {
      uint64_t v7 = 360;
    }
    char v8 = *(unsigned char *)(a1 + v7);
    char v9 = sub_1000A4F84(a1);
    char v10 = sub_10191F054(a1);
    uint64_t v11 = 268;
    if (!*(unsigned char *)(a1 + 269)) {
      uint64_t v11 = 372;
    }
    char v12 = *(unsigned char *)(a1 + v11);
    uint64_t v13 = 270;
    if (!*(unsigned char *)(a1 + 271)) {
      uint64_t v13 = 373;
    }
    char v14 = *(unsigned char *)(a1 + v13);
    int v15 = sub_10191F218(a1);
    uint64_t v16 = 280;
    if (!*(unsigned char *)(a1 + 281)) {
      uint64_t v16 = 380;
    }
    char v17 = *(unsigned char *)(a1 + v16);
    uint64_t v18 = 304;
    if (!*(unsigned char *)(a1 + 308)) {
      uint64_t v18 = 392;
    }
    int v19 = *(_DWORD *)(a1 + v18);
    uint64_t v20 = 288;
    if (!*(unsigned char *)(a1 + 296)) {
      uint64_t v20 = 384;
    }
    uint64_t v21 = *(void *)(a1 + v20);
    uint64_t v22 = 328;
    if (!*(unsigned char *)(a1 + 332)) {
      uint64_t v22 = 408;
    }
    int v23 = *(_DWORD *)(a1 + v22);
    uint64_t v24 = 312;
    if (!*(unsigned char *)(a1 + 320)) {
      uint64_t v24 = 400;
    }
    uint64_t v25 = *(void *)(a1 + v24);
    uint64_t v26 = 336;
    if (!*(unsigned char *)(a1 + 344)) {
      uint64_t v26 = 416;
    }
    uint64_t v27 = *(void *)(a1 + v26);
    uint64_t v28 = 352;
    if (!*(unsigned char *)(a1 + 356)) {
      uint64_t v28 = 424;
    }
    int v29 = *(_DWORD *)(a1 + v28);
    uint64_t v30 = *(void *)a1;
    *(unsigned char *)(v30 + 648) = v8;
    *(unsigned char *)(v30 + 649) = v10;
    *(unsigned char *)(v30 + 650) = v9;
    *(_DWORD *)(v30 + 652) = v4;
    *(_DWORD *)(v30 + 656) = v15;
    *(unsigned char *)(v30 + 660) = v12;
    *(unsigned char *)(v30 + 661) = v14;
    *(_DWORD *)(v30 + 664) = v6;
    *(unsigned char *)(v30 + 668) = v17;
    *(void *)(v30 + 672) = v21;
    *(_DWORD *)(v30 + 680) = v19;
    *(void *)(v30 + 688) = v25;
    *(_DWORD *)(v30 + 696) = v23;
    *(void *)(v30 + 704) = v27;
    *(_DWORD *)(v30 + 712) = v29;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v31 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "BaroAlt,updateHarvestConfigToCore,updated", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v32 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::updateHarvestConfigToCore()", "%s\n");
LABEL_43:
      if (v32 != buf) {
        free(v32);
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v33 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "BaroAlt,updateHarvestConfigToCore,invalid Core", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v32 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBarometricAltimeter::updateHarvestConfigToCore()", "%s\n");
      goto LABEL_43;
    }
  }
  return v1 != 0;
}

void sub_101914400(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 504), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345540);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101920E70(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1019145BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019145DC(uint64_t a1)
{
  if (sub_10073F24C())
  {
    uint64_t v2 = 236;
    if (!*(unsigned char *)(a1 + 237)) {
      uint64_t v2 = 360;
    }
    if (*(unsigned char *)(a1 + v2))
    {
      if (!*(void *)(a1 + 3664)) {
        operator new();
      }
      if (!*(void *)(a1 + 2240)) {
        operator new();
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v3 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,CL Reference Pressure not supported", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        __int16 v10 = 0;
        int v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::initPressureObjects()", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
      if (!*(void *)(a1 + 2264))
      {
        id v8 = [[[*(id *)(a1 + 504) silo] newTimer];
        *(void *)(a1 + 2264) = v8;
        if (!v8) {
          sub_101926434();
        }
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        _DWORD v9[2] = sub_101915CC8;
        v9[3] = &unk_1022A3020;
        void v9[4] = a1;
        [v8 setHandler:v9];
      }
      if (!*(unsigned char *)(a1 + 3460))
      {
        sub_101915E7C((void *)a1);
        *(unsigned char *)(a1 + 3460) = 1;
      }
      return;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,reference Pressure not allowed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_29;
      }
      goto LABEL_41;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,device does not support Baro", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_29:
        __int16 v10 = 0;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::initPressureObjects()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return;
      }
LABEL_41:
      dispatch_once(&qword_102419380, &stru_102345560);
      goto LABEL_29;
    }
  }
}

void sub_101914E9C()
{
}

void sub_101914EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 504), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    uint64_t v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onGpsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345540);
    }
    int v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      char v12 = "";
      __int16 v13 = 2082;
      __int16 v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onGpsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  sub_10191EEB4();
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_101915084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019150A4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 504), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    char v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345540);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_101924654(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_101915260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101915280(uint64_t a1)
{
  sub_1000C7F88(buf);
  *(void *)uint64_t v20 = 0;
  int v2 = sub_1000A699C(*(uint64_t *)buf, "BaroAltCalibrationUploadThresholdForAWeekInSeconds", v20);
  double v3 = *(double *)v20;
  if (!v2) {
    double v3 = 604800.0;
  }
  *(double *)(a1 + 3624) = v3;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  *(void *)uint64_t v20 = 0;
  int v4 = sub_1000A699C(*(uint64_t *)buf, "BaroAltCalibrationUploadThresholdForAMonthInSeconds", v20);
  double v5 = *(double *)v20;
  if (!v4) {
    double v5 = 2626560.0;
  }
  *(double *)(a1 + 3632) = v5;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  *(void *)uint64_t v20 = 0;
  int v6 = sub_1000A699C(*(uint64_t *)buf, "BaroAltCalibrationUploadThresholdFor3MonthsInSeconds", v20);
  double v7 = *(double *)v20;
  if (!v6) {
    double v7 = 7884000.0;
  }
  *(double *)(a1 + 3640) = v7;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  *(void *)uint64_t v20 = 0;
  int v8 = sub_1000A699C(*(uint64_t *)buf, "BaroAltCalibrationCacheThresholdTimeInSeconds", v20);
  double v9 = *(double *)v20;
  if (!v8) {
    double v9 = 3600.0;
  }
  *(double *)(a1 + 3648) = v9;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((*(void *)(a1 + 3624) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    *(void *)(a1 + 3624) = 0x4122750000000000;
  }
  if ((*(void *)(a1 + 3632) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    *(void *)(a1 + 3632) = 0x414409FFFFFFFFFFLL;
  }
  if ((*(void *)(a1 + 3640) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    *(void *)(a1 + 3640) = 0x415E133800000000;
  }
  if ((*(void *)(a1 + 3648) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    *(void *)(a1 + 3648) = 0x40AC200000000000;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  int v10 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 3624);
    uint64_t v12 = *(void *)(a1 + 3632);
    uint64_t v13 = *(void *)(a1 + 3640);
    uint64_t v14 = *(void *)(a1 + 3648);
    *(_DWORD *)uint64_t buf = 134349824;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v12;
    __int16 v28 = 2050;
    uint64_t v29 = v13;
    __int16 v30 = 2050;
    uint64_t v31 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "BaroAlt,BaroAltCalibrationUploadThresholdForAWeekInSeconds,%{public}lf,BaroAltCalibrationUploadThresholdForAMonthInSeconds,%{public}lf,BaroAltCalibrationUploadThresholdFor3MonthsInSeconds,%{public}lf,BaroAltCalibrationCacheThresholdTimeInSeconds,%{public}lf", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v15 = *(void *)(a1 + 3624);
    uint64_t v16 = *(void *)(a1 + 3632);
    uint64_t v17 = *(void *)(a1 + 3640);
    uint64_t v18 = *(void *)(a1 + 3648);
    *(_DWORD *)uint64_t v20 = 134349824;
    *(void *)&unsigned char v20[4] = v15;
    __int16 v21 = 2050;
    uint64_t v22 = v16;
    __int16 v23 = 2050;
    uint64_t v24 = v17;
    __int16 v25 = 2050;
    uint64_t v26 = v18;
    uint64_t v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::prepareCalibrationAnalyticsData()", "%s\n", v19);
    if (v19 != buf) {
      free(v19);
    }
  }
  sub_100134750(buf, "InAWeek");
  sub_101922D74(@"CLBaroAltCalibrationStartMonitoringCFAbsTimeForAWeek", (uint64_t *)buf, a1 + 3512);
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)buf);
  }
  sub_100134750(buf, "InAMonth");
  sub_101922D74(@"CLBaroAltCalibrationStartMonitoringCFAbsTimeForAMonth", (uint64_t *)buf, a1 + 3544);
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)buf);
  }
  sub_100134750(buf, "In3Months");
  sub_101922D74(@"CLBaroAltCalibrationStartMonitoringCFAbsTimeFor3Months", (uint64_t *)buf, a1 + 3576);
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)buf);
  }
  sub_100134750(buf, "InAWeek");
  sub_101922FB0(@"CLBaroAltCalibrationStartMonitoringCFAbsTimeForAWeek", (uint64_t *)buf, a1 + 3512, (uint64_t *)a1);
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)buf);
  }
  sub_100134750(buf, "InAMonth");
  sub_101922FB0(@"CLBaroAltCalibrationStartMonitoringCFAbsTimeForAMonth", (uint64_t *)buf, a1 + 3544, (uint64_t *)a1);
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)buf);
  }
  sub_100134750(buf, "In3Months");
  sub_101922FB0(@"CLBaroAltCalibrationStartMonitoringCFAbsTimeFor3Months", (uint64_t *)buf, a1 + 3576, (uint64_t *)a1);
  if (SHIBYTE(v28) < 0) {
    operator delete(*(void **)buf);
  }
  sub_101923240((int *)a1);
}

void sub_101915774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1019157CC(uint64_t a1)
{
  return sub_1019157D4(*(void *)(a1 + 32));
}

uint64_t sub_1019157D4(uint64_t a1)
{
  long long v8 = 0uLL;
  long long v9 = xmmword_101D1C320;
  *(_DWORD *)int v10 = -1;
  *(_WORD *)&unsigned char v10[4] = 0;
  memset(&v10[8], 0, 40);
  uint64_t result = sub_100155C94(a1, &v8, 0);
  if (result)
  {
    uint64_t v3 = v9;
    if (((unint64_t)v9 & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
      && *(double *)&v9 > 0.0
      && *(void *)(a1 + 2376))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      int v4 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 134218752;
        double v20 = *((double *)&v8 + 1) + *((double *)&v9 + 1);
        __int16 v21 = 2048;
        uint64_t v22 = v3;
        __int16 v23 = 2048;
        uint64_t v24 = *((void *)&v9 + 1);
        __int16 v25 = 1024;
        int v26 = *(_DWORD *)v10;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BaroAlt,callback,alt(hae),%f,altunc,%f,undulation,%f,undulationModel,%d", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        int v11 = 134218752;
        double v12 = *((double *)&v8 + 1) + *((double *)&v9 + 1);
        __int16 v13 = 2048;
        uint64_t v14 = v3;
        __int16 v15 = 2048;
        uint64_t v16 = *((void *)&v9 + 1);
        __int16 v17 = 1024;
        int v18 = *(_DWORD *)v10;
        int v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::triggerBaroAltitudeReport()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      _DWORD v7[2] = *(_OWORD *)v10;
      void v7[3] = *(_OWORD *)&v10[16];
      unsigned char v7[4] = *(_OWORD *)&v10[32];
      v7[0] = v8;
      v7[1] = v9;
      uint64_t v5 = *(void *)(a1 + 2376);
      if (!v5) {
        sub_10015E48C();
      }
      return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v5 + 48))(v5, v7);
    }
  }
  return result;
}

uint64_t sub_101915A9C(uint64_t a1)
{
  if (*(char *)(a1 + 439) < 0) {
    operator delete(*(void **)(a1 + 416));
  }
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*(void **)(a1 + 352));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

void sub_101915AF4(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 504), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_102345540);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    int v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onKFFilteredPressureNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_102345540);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      int v11 = "";
      __int16 v12 = 2082;
      __int16 v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onKFFilteredPressureNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_10191CD8C(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_101915CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_101915CC8(uint64_t a1)
{
}

void sub_101915CD0(uint64_t a1)
{
  [*(id *)(a1 + 2264) setNextFireDelay:1.79769313e308];
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  int v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,gps timer,off", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onActiveGpsRequestTimeout()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_10191B6DC(a1);
}

void sub_101915E7C(void *a1)
{
  double v2 = sub_10016C458();
  double v60 = 0;
  BOOL v61 = 0;
  uint64_t v62 = 0;
  unsigned int v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v54 = 0;
  double v55 = 0;
  uint64_t v56 = 0;
  double v51 = 0;
  BOOL v52 = 0;
  uint64_t v53 = 0;
  BOOL v48 = 0;
  unsigned int v49 = 0;
  uint64_t v50 = 0;
  uint64_t v4 = sub_10191BB48((uint64_t)v3, @"CLBaroAltBaroBiasCFAbsTime", (char **)&v60);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)v60;
    if (v61 == v60)
    {
LABEL_13:
      uint64_t v10 = sub_10191BB48(v4, @"CLBaroAltBaroBias", (char **)&v57);
      if (!v10
        || (uint64_t v11 = sub_10191BB48(v10, @"CLBaroAltBaroBiasUnc", (char **)&v54), !v11)
        || (sub_10191BB48(v11, @"CLBaroAltModeProb", (char **)&v51) & 1) == 0)
      {
        sub_101918F20(a1, 1, v2);
        goto LABEL_64;
      }
      uint64_t v47 = 0;
      uint64_t v12 = sub_1000A6958();
      uint64_t v13 = sub_1000A6A10(v12, @"CLBaroAltUncompensatedAlt", &v47);
      if (v13)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        __int16 v14 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          sub_1000FECE0(@"CLBaroAltUncompensatedAlt", (uint64_t)__p);
          uint64_t v15 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)uint64_t buf = 136446466;
          *(void *)&uint8_t buf[4] = v15;
          __int16 v64 = 2050;
          *(void *)double v65 = v47;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,deprecated,key and value,%{public}lf, is cleared", buf, 0x16u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          sub_1000FECE0(@"CLBaroAltUncompensatedAlt", (uint64_t)buf);
          if (v65[9] >= 0) {
            unsigned int v41 = buf;
          }
          else {
            unsigned int v41 = *(unsigned char **)buf;
          }
          *(_DWORD *)BOOL v70 = 136446466;
          *(void *)&v70[4] = v41;
          __int16 v71 = 2050;
          uint64_t v72 = v47;
          uint64_t v42 = (char *)_os_log_send_and_compose_impl();
          if ((v65[9] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v42);
          if (v42 != __p) {
            free(v42);
          }
        }
        uint64_t v16 = sub_1000A6958();
        uint64_t v13 = sub_1004CF870(v16);
      }
      if (sub_10191BB48(v13, @"CLBaroAltDeviceTemperatureAtCal", (char **)&v48)
        && sub_10191CA30(&v60, &v57, &v54, &v51, &v48))
      {
        sub_10191CD14(a1 + 419);
        __int16 v17 = v60;
        if (v61 != v60)
        {
          unint64_t v18 = 0;
          do
          {
            uint64_t v19 = *((void *)v57 + v18);
            uint64_t v20 = *((void *)v54 + v18);
            uint64_t v21 = *((void *)v51 + v18);
            uint64_t v22 = *((void *)v48 + v18);
            *(void *)long long __p = v17[v18];
            *(void *)&__p[8] = v19;
            *(void *)&__p[16] = v20;
            *(void *)&__p[24] = v21;
            *(void *)unsigned int v75 = v22;
            sub_10187DA04(a1 + 419, (uint64_t)__p);
            ++v18;
            __int16 v17 = v60;
          }
          while (v18 < (v61 - (unsigned char *)v60) >> 3);
        }
        if (a1[424])
        {
          sub_101919C10(a1 + 425, a1 + 419);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          __int16 v23 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            uint64_t v24 = a1[424];
            sub_10187E044(a1 + 419);
            __int16 v25 = v65[9] >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)long long __p = 134349570;
            *(double *)&__p[4] = v2;
            *(_WORD *)&unsigned char __p[12] = 1026;
            *(_DWORD *)&unsigned char __p[14] = v24;
            *(_WORD *)&__p[18] = 2082;
            *(void *)&__p[20] = v25;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,time,%{public}lf,success,1,fBaroBiasHistory,size,%{public}d,content,%{public}s", __p, 0x1Cu);
            if ((v65[9] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102345560);
            }
            uint64_t v43 = a1[424];
            sub_10187E044(a1 + 419);
            if (v73 >= 0) {
              BOOL v44 = v70;
            }
            else {
              BOOL v44 = *(unsigned char **)v70;
            }
            *(_DWORD *)uint64_t buf = 134349570;
            *(double *)&uint8_t buf[4] = v2;
            __int16 v64 = 1026;
            *(_DWORD *)double v65 = v43;
            *(_WORD *)&unsigned char v65[4] = 2082;
            *(void *)&v65[6] = v44;
            unsigned int v45 = (char *)_os_log_send_and_compose_impl();
            if (v73 < 0) {
              operator delete(*(void **)v70);
            }
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v45);
            if (v45 != __p) {
              free(v45);
            }
          }
          sub_101919A9C((uint64_t)a1);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          int v26 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
          {
            uint64_t v27 = a1[267];
            uint64_t v28 = a1[418];
            uint64_t v29 = a1[265];
            uint64_t v30 = a1[268];
            *(_DWORD *)long long __p = 134350080;
            *(double *)&__p[4] = v2;
            *(_WORD *)&unsigned char __p[12] = 2050;
            *(void *)&unsigned char __p[14] = v27;
            *(_WORD *)&__p[22] = 2050;
            *(void *)&__p[24] = v28;
            *(_WORD *)unsigned int v75 = 2050;
            *(void *)&v75[2] = v29;
            __int16 v76 = 2050;
            uint64_t v77 = v30;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,recovered,time,%{public}lf,timeOfRefPresCal,%{public}lf,timeOfLastStoreToDisk,%{public}lf,bias,%{public}lf,biasUnc,%{public}lf", __p, 0x34u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102345560);
            }
            uint64_t v31 = a1[267];
            uint64_t v32 = a1[418];
            uint64_t v33 = a1[265];
            uint64_t v34 = a1[268];
            *(_DWORD *)uint64_t buf = 134350080;
            *(double *)&uint8_t buf[4] = v2;
            __int16 v64 = 2050;
            *(void *)double v65 = v31;
            *(_WORD *)&v65[8] = 2050;
            *(void *)&v65[10] = v32;
            __int16 v66 = 2050;
            uint64_t v67 = v33;
            __int16 v68 = 2050;
            uint64_t v69 = v34;
            uint64_t v35 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v35);
            if (v35 != __p) {
              free(v35);
            }
          }
          goto LABEL_64;
        }
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        double v38 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long __p = 134349056;
          *(double *)&__p[4] = v2;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,time,%{public}lf,no data stored in memory fBaroBiasHistory", __p, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          *(_DWORD *)uint64_t buf = 134349056;
          *(double *)&uint8_t buf[4] = v2;
          uint64_t v46 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v46);
          if (v46 != __p) {
            free(v46);
          }
        }
      }
      sub_101918F20(a1, 1, v2);
      goto LABEL_64;
    }
    unint64_t v6 = (v61 - (unsigned char *)v60) >> 3;
    if (v6 <= 1) {
      unint64_t v6 = 1;
    }
    while (1)
    {
      uint64_t v7 = *v5;
      BOOL v8 = *v5 <= -1 || ((*v5 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 >= 0x3FF;
      if (v8 && (unint64_t)(*v5 - 1) >= 0xFFFFFFFFFFFFFLL) {
        break;
      }
      ++v5;
      if (!--v6) {
        goto LABEL_13;
      }
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v37 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long __p = 134349312;
      *(double *)&__p[4] = v2;
      *(_WORD *)&unsigned char __p[12] = 2050;
      *(void *)&unsigned char __p[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,time,%{public}lf,time invalid,%{public}lf", __p, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      *(_DWORD *)uint64_t buf = 134349312;
      *(double *)&uint8_t buf[4] = v2;
      __int16 v64 = 2050;
      *(void *)double v65 = v7;
      int v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v40);
      if (v40 != __p) {
        free(v40);
      }
    }
    sub_101918F20(a1, 1, v2);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v36 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long __p = 134349056;
      *(double *)&__p[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,time,%{public}lf,no bias stored", __p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      *(_DWORD *)uint64_t buf = 134349056;
      *(double *)&uint8_t buf[4] = v2;
      __int16 v39 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::retrieveBaroBiasFromDisk()", "%s\n", v39);
      if (v39 != __p) {
        free(v39);
      }
    }
    BOOL v61 = v60;
  }
LABEL_64:
  if (v48)
  {
    unsigned int v49 = v48;
    operator delete(v48);
  }
  if (v51)
  {
    BOOL v52 = v51;
    operator delete(v51);
  }
  if (v54)
  {
    double v55 = v54;
    operator delete(v54);
  }
  if (v57)
  {
    uint64_t v58 = v57;
    operator delete(v57);
  }
  if (v60)
  {
    BOOL v61 = v60;
    operator delete(v60);
  }
}

void sub_101916AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  if (a18) {
    operator delete(a18);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101916B60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3504);
  if (v2) {
    [*(id *)(v2 + 16) unregister:*(void *)(v2 + 8) forNotification:1];
  }
  uint64_t v3 = *(void *)(a1 + 3496);
  if (v3) {
    [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:2];
  }
  uint64_t v4 = *(void *)(a1 + 3680);
  if (v4)
  {
    [*(id *)(v4 + 16) unregister:*(void *)(v4 + 8) forNotification:22];
    [*(id *)(*(void *)(a1 + 3680) + 16) unregister:*(void *)(*(void *)(a1 + 3680) + 8) forNotification:5];
  }
  uint64_t v5 = *(void *)(a1 + 2240);
  if (v5)
  {
    *(void *)(a1 + 2240) = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 3664);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    *(void *)(a1 + 3664) = 0;
  }
  uint64_t v7 = *(void **)(a1 + 2264);
  if (v7)
  {
    [v7 invalidate];

    *(void *)(a1 + 2264) = 0;
  }
  BOOL v8 = *(void **)(a1 + 168);
  if (v8)
  {
    [v8 invalidate];

    *(void *)(a1 + 168) = 0;
  }
  sub_101916F10(a1);

  *(void *)(a1 + 3472) = 0;
  *(void *)(a1 + 3464) = 0;
  if (*(unsigned char *)(a1 + 237)) {
    *(unsigned char *)(a1 + 237) = 0;
  }
  if (*(unsigned char *)(a1 + 239)) {
    *(unsigned char *)(a1 + 239) = 0;
  }
  if (*(unsigned char *)(a1 + 241)) {
    *(unsigned char *)(a1 + 241) = 0;
  }
  if (*(unsigned char *)(a1 + 248)) {
    *(unsigned char *)(a1 + 248) = 0;
  }
  if (*(unsigned char *)(a1 + 264)) {
    *(unsigned char *)(a1 + 264) = 0;
  }
  if (*(unsigned char *)(a1 + 269)) {
    *(unsigned char *)(a1 + 269) = 0;
  }
  if (*(unsigned char *)(a1 + 271)) {
    *(unsigned char *)(a1 + 271) = 0;
  }
  if (*(unsigned char *)(a1 + 256)) {
    *(unsigned char *)(a1 + 256) = 0;
  }
  uint64_t v9 = *(void *)(a1 + 3672);
  if (v9) {
    [*(id *)(v9 + 16) unregister:*(void *)(v9 + 8) forNotification:4];
  }

  sub_10041F48C((void *)(a1 + 3688));
  uint64_t v10 = *(void *)(a1 + 3680);
  *(void *)(a1 + 3680) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(a1 + 3672);
  *(void *)(a1 + 3672) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *(void *)(a1 + 3504);
  *(void *)(a1 + 3504) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *(void *)(a1 + 3496);
  *(void *)(a1 + 3496) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  sub_1003BE294((void *)(a1 + 3400));
  sub_1003BE294((void *)(a1 + 3352));
  __int16 v14 = *(std::__shared_weak_count **)(a1 + 3072);
  if (v14) {
    sub_1000DB0A0(v14);
  }
  sub_100682438((void *)(a1 + 2352));
  sub_10041F48C((void *)(a1 + 2296));
  uint64_t v15 = *(void *)(a1 + 2280);
  *(void *)(a1 + 2280) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *(void *)(a1 + 2248);
  *(void *)(a1 + 2248) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *(void *)(a1 + 2240);
  *(void *)(a1 + 2240) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  if (*(char *)(a1 + 2015) < 0) {
    operator delete(*(void **)(a1 + 1992));
  }
  if (*(char *)(a1 + 1951) < 0) {
    operator delete(*(void **)(a1 + 1928));
  }
  if (*(char *)(a1 + 1639) < 0) {
    operator delete(*(void **)(a1 + 1616));
  }
  sub_10041F48C((void *)(a1 + 1440));
  if (*(char *)(a1 + 1223) < 0) {
    operator delete(*(void **)(a1 + 1200));
  }
  uint64_t v18 = *(void *)(a1 + 512);
  *(void *)(a1 + 512) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *(void **)a1;
  *(void *)a1 = 0;
  if (v19) {
    sub_10192544C(a1, v19);
  }
  return a1;
}

void sub_101916F10(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 3480))
  {
    if (*(void *)(a1 + 3472) && *(void *)(a1 + 3464))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v2 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,unsubscribe to leech visits", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopLeechingVisits()", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
      [*(id *)(a1 + 3472) stopLeechingVisitsForClient:*(void *)(a1 + 3464)];
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v3 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,invalid routine proxy or adapter to unsubscribe", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopLeechingVisits()", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
      }
    }
    *(unsigned char *)(a1 + 3480) = 0;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BaroAlt,already stopped leeching visits", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopLeechingVisits()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_101917338(uint64_t a1)
{
  if (*(void *)(a1 + 3472) && *(void *)(a1 + 3464))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v2 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,register to leech visits", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::startLeechingVisits()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    [*(id *)(a1 + 3472) startLeechingVisitsForClient:*(void *)(a1 + 3464)];
    *(unsigned char *)(a1 + 3480) = 1;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,invalid routine proxy or adapter to register", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::startLeechingVisits()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_101917624(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BaroAlt,startPressureSubscription", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::startPressureSubscription()", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v3 = *(void *)(a1 + 2240);
  if (!v3)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Reference pressure is not support", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_35:
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::startPressureSubscription()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return;
    }
LABEL_41:
    dispatch_once(&qword_102419380, &stru_102345560);
    goto LABEL_35;
  }
  if (sub_1000A5140(v3, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)))
  {
    if (sub_1000D2E34(0) && !*(unsigned char *)(a1 + 456))
    {
      uint64_t v4 = sub_1000D2E34(0);
      sub_1009D1EC4(v4, 30, *(void *)(a1 + 3664), -1.0);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v5 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BaroAlt,fMotionCoprocessorDispatcher added", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::startPressureSubscription()", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
      *(unsigned char *)(a1 + 456) = 1;
    }
    *(double *)(a1 + 464) = sub_10016C458();
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,start Baro,pressure not available at location", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_35;
    }
    goto LABEL_41;
  }
}

uint64_t sub_101917B2C(uint64_t a1, double *a2)
{
  if (*a2 >= 0.0)
  {
    uint64_t v6 = 0;
    while (1)
    {
      double v7 = *(double *)&qword_101E46970[v6];
      if (*a2 < v7) {
        break;
      }
      if (++v6 == 34) {
        return 0xFFFFFFFFLL;
      }
    }
    return (int)v7;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      double v4 = *a2;
      *(_DWORD *)uint64_t buf = 134349056;
      double v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "BaroAlt,distanceToLastBiasComputation is negative,%{public}.2f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLBarometricAltimeter::quantizeDistanceFromLastCalibrationLocationForHarvest(const double &) const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_101917D1C(uint64_t a1, double *a2)
{
  if (*a2 >= 0.0)
  {
    uint64_t v6 = 0;
    double v7 = 0.0;
    while (1)
    {
      double v8 = *(double *)((char *)&unk_101E46A80 + v6 * 8 + 8);
      double v9 = *(double *)&qword_101E46AC0[v6];
      int v10 = (int)((*a2 - v7) / v9) + 1;
      if (v10 < (int)llround((v8 - v7) / v9)) {
        break;
      }
      ++v6;
      double v7 = v8;
      if (v6 == 7) {
        return 0xFFFFFFFFLL;
      }
    }
    return (int)(v7 + v9 * (double)v10);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v3 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      double v4 = *a2;
      *(_DWORD *)uint64_t buf = 134349056;
      double v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "BaroAlt,timeToLastBiasComputationS is negative,%{public}.2f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "int CLBarometricAltimeter::quantizeTimeChangeFromLastCalibrationTimeForHarvest(const double &) const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    return 0xFFFFFFFFLL;
  }
}

BOOL sub_101917F48(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  double v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,harvestCalibratedPressure", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::harvestCalibratedPressure(CalibratedPressureCollectionData &, const BOOL, const BOOL)", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  if ((sub_10016CCBC() & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,ref pressure harvest is not allowed on this HW", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_95;
      }
      goto LABEL_107;
    }
    return result;
  }
  if (!sub_101921FA4(a1, *(double *)(a2 + 24), *(double *)(a2 + 32)))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v13 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a2 + 24);
      uint64_t v15 = *(void *)(a2 + 32);
      *(_DWORD *)uint64_t buf = 134283777;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v67 = 2049;
      uint64_t v68 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Data harvest is not allowed at location,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_95;
      }
      goto LABEL_107;
    }
    return result;
  }
  if (a3 && !sub_101921498((void *)a1))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v20 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Data is not ready for harvest", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_95:
      uint64_t v63 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::harvestCalibratedPressure(CalibratedPressureCollectionData &, const BOOL, const BOOL)", "%s\n", v63);
      if (v63 != buf) {
        free(v63);
      }
      return 0;
    }
LABEL_107:
    dispatch_once(&qword_102419380, &stru_102345560);
    goto LABEL_95;
  }
  if ((sub_10191F054(a1) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v16 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Pressure Harvest is not supported", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_95;
      }
      goto LABEL_107;
    }
    return result;
  }
  if (!sub_1000EF68C(*(double *)(a2 + 24), *(double *)(a2 + 32))
    || sub_1000EF668(*(double *)(a2 + 24), *(double *)(a2 + 32))
    || *(float *)(a2 + 60) == 0.0
    || *(float *)(a2 + 8) == 0.0
    || *(float *)(a2 + 12) <= 0.0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v17 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a2 + 24);
      uint64_t v19 = *(void *)(a2 + 32);
      *(_DWORD *)uint64_t buf = 134283777;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v67 = 2049;
      uint64_t v68 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Data not valid for harvest,lat,%{private}.3lf,lon,%{private}.3lf", buf, 0x16u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_95;
      }
      goto LABEL_107;
    }
    return result;
  }
  if ((sub_101921060(a1) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v21 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,client not authorized", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_95;
      }
      goto LABEL_107;
    }
    return result;
  }
  BOOL result = sub_101921B90(a1);
  if (!result) {
    return result;
  }
  if (a4 && !sub_1019216CC(a1))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v62 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,harvest reached permitted limit or time limit", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_95;
    }
    goto LABEL_107;
  }
  sub_101921DD0((uint64_t *)a1, (int *)(a2 + 76));
  uint64_t v10 = *(void *)a1;
  if (*(void *)a1)
  {
    *(void *)uint64_t buf = sub_10016C458();
    double v11 = sub_1000A4CE8(v10, (double *)buf);
  }
  else
  {
    double v11 = 0.0;
  }
  *(double *)(a2 + 16) = v11;
  sub_101922998((uint64_t *)a1, a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  __int16 v23 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *(void *)(a2 + 24);
    uint64_t v24 = *(void *)(a2 + 32);
    double v26 = *(float *)a2;
    double v27 = *(float *)(a2 + 4);
    double v28 = *(float *)(a2 + 8);
    double v29 = *(float *)(a2 + 12);
    uint64_t v30 = *(void *)(a2 + 16);
    double v31 = *(float *)(a2 + 40);
    double v32 = *(float *)(a2 + 44);
    double v33 = *(float *)(a2 + 48);
    double v34 = *(float *)(a2 + 52);
    double v35 = *(float *)(a2 + 56);
    double v36 = *(float *)(a2 + 60);
    double v37 = *(float *)(a2 + 64);
    int v38 = *(_DWORD *)(a2 + 68);
    int v39 = *(_DWORD *)(a2 + 72);
    int v40 = *(unsigned __int8 *)(a2 + 88);
    int v41 = *(unsigned __int8 *)(a2 + 90);
    int v42 = *(unsigned __int8 *)(a2 + 89);
    int v43 = *(_DWORD *)(a1 + 232);
    int v44 = *(_DWORD *)(a2 + 76);
    int v45 = *(_DWORD *)(a2 + 80);
    int v46 = *(_DWORD *)(a2 + 84);
    *(_DWORD *)uint64_t buf = 134289153;
    *(void *)&uint8_t buf[4] = v25;
    __int16 v67 = 2049;
    uint64_t v68 = v24;
    __int16 v69 = 2049;
    double v70 = v26;
    __int16 v71 = 2049;
    double v72 = v27;
    __int16 v73 = 2049;
    double v74 = v28;
    __int16 v75 = 2049;
    double v76 = v29;
    __int16 v77 = 2049;
    uint64_t v78 = v30;
    __int16 v79 = 2049;
    double v80 = v31;
    __int16 v81 = 2049;
    double v82 = v32;
    __int16 v83 = 2049;
    double v84 = v33;
    __int16 v85 = 2049;
    double v86 = v34;
    __int16 v87 = 2049;
    double v88 = v35;
    __int16 v89 = 2049;
    double v90 = v36;
    __int16 v91 = 2049;
    double v92 = v37;
    __int16 v93 = 1025;
    int v94 = v38;
    __int16 v95 = 1025;
    int v96 = v39;
    __int16 v97 = 1025;
    int v98 = v44;
    __int16 v99 = 1025;
    int v100 = v40;
    __int16 v101 = 1025;
    int v102 = v41;
    __int16 v103 = 1025;
    int v104 = v42;
    __int16 v105 = 1024;
    int v106 = v43;
    __int16 v107 = 1025;
    int v108 = v45;
    __int16 v109 = 1025;
    int v110 = v46;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "BaroAlt,Harvesting,lat,%{private}.8f,lon,%{private}.8f,pressurePa,%{private}.1f,pressureUnc,%{private}.1f,calPress,%{private}.1f,calPressUnc,%{private}.1f,timeOfCalb,%{private}.1f,horUnc,%{private}.1f,AltHae,%{private}.1f,AltHaeUn,%{private}.1f,speed,%{private}.1f,speedUnc,%{private}.1f,RefAlt,%{private}.1f,RefAltUnc,%{private}.1f,activityType,%{private}d,actConf,%{private}d,rel,%{private}d,CalBaro,%{private}d,CalOutdorr,%{private}d,mapM,%{private}d,harvestCount,%u,distChangeM,%{private}d,timeChangeSec,%{private}d", buf, 0xC4u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::harvestCalibratedPressure(CalibratedPressureCollectionData &, const BOOL, const BOOL)", "%s\n", v64);
    if (v64 != buf) {
      free(v64);
    }
  }
  id v47 = objc_alloc_init((Class)CLPCalibratedPressureCollectionRequest);
  if (v47)
  {
    BOOL v48 = v47;
    [objc_msgSend(v47, "activity") setType:*(unsigned int *)(a2 + 68)];
    [objc_msgSend(v48, "activity") setConfidence:*(unsigned int *)(a2 + 72)];
    LODWORD(v49) = *(_DWORD *)(a2 + 48);
    [v48 setAltitudeHAEUncM:v49];
    LODWORD(v50) = *(_DWORD *)(a2 + 44);
    [v48 setAltitudeHAEM:v50];
    LODWORD(v51) = *(_DWORD *)(a2 + 8);
    [v48 setCalibratedPressurePa:v51];
    LODWORD(v52) = *(_DWORD *)(a2 + 12);
    [v48 setCalibratedPressureUncPa:v52];
    LODWORD(v53) = *(_DWORD *)a2;
    [v48 setDevicePressurePa:v53];
    LODWORD(v54) = *(_DWORD *)(a2 + 4);
    [v48 setDevicePressureUncPa:v54];
    [objc_msgSend(v48, "calibration") setIsCalibratedBarometricAlt:*(unsigned __int8 *)(a2 + 88)];
    [objc_msgSend(v48, "calibration") setIsMapMatched:*(unsigned __int8 *)(a2 + 89)];
    [objc_msgSend(v48, "calibration") setIsOutdoorContext:*(unsigned __int8 *)(a2 + 90)];
    LODWORD(v55) = *(_DWORD *)(a2 + 40);
    [v48 setHorizontalUncM:v55];
    [v48 setLatitudeDeg:*(double *)(a2 + 24)];
    [v48 setLongitudeDeg:*(double *)(a2 + 32)];
    LODWORD(v56) = *(_DWORD *)(a2 + 60);
    [v48 setReferenceAltM:v56];
    LODWORD(v57) = *(_DWORD *)(a2 + 64);
    [v48 setReferenceAltUncM:v57];
    [v48 setReliability:*(unsigned int *)(a2 + 76)];
    LODWORD(v58) = *(_DWORD *)(a2 + 52);
    [v48 setSpeedMps:v58];
    LODWORD(v59) = *(_DWORD *)(a2 + 56);
    [v48 setSpeedUncMps:v59];
    [v48 setTimestampOfCalibrationS:*(double *)(a2 + 16)];
    [v48 setQuantizedDistChangeSinceLastCalibrationM:*(unsigned int *)(a2 + 80)];
    [v48 setQuantizedTimeChangeSinceLastCalibrationS:*(unsigned int *)(a2 + 84)];
    +[GEOLocationCollectionReporter reportCalibratedPressureCollection:v48];

    ++*(_DWORD *)(a1 + 232);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v60 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "BaroAlt,Harvest data sent", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      double v65 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::harvestCalibratedPressure(CalibratedPressureCollectionData &, const BOOL, const BOOL)", "%s\n", v65);
      if (v65 != buf) {
        free(v65);
      }
    }
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  BOOL v61 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_INFO, "BaroAlt,Invalid data pointer can't harvest", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_95;
    }
    goto LABEL_107;
  }
  return result;
}

uint64_t sub_101918F20(void *a1, int a2, double a3)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    double v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,disk,store,#Warning,time,%{public}lf,resetting", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::resetBaroBiasHistory(const CFTimeInterval, const BOOL)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  if (a2)
  {
    double v7 = (void **)a1[420];
    uint64_t v8 = a1[421];
    a1[424] = 0;
    unint64_t v9 = v8 - (void)v7;
    if (v9 >= 0x11)
    {
      do
      {
        operator delete(*v7);
        double v7 = (void **)(a1[420] + 8);
        a1[420] = v7;
        unint64_t v9 = a1[421] - (void)v7;
      }
      while (v9 > 0x10);
    }
    if (v9 >> 3 == 1)
    {
      uint64_t v10 = 51;
      goto LABEL_13;
    }
    if (v9 >> 3 == 2)
    {
      uint64_t v10 = 102;
LABEL_13:
      a1[423] = v10;
    }
  }
  uint64_t v11 = sub_1000A6958();
  sub_1004CF870(v11);
  uint64_t v12 = sub_1000A6958();
  sub_1004CF870(v12);
  uint64_t v13 = sub_1000A6958();
  sub_1004CF870(v13);
  uint64_t v14 = sub_1000A6958();
  sub_1004CF870(v14);
  uint64_t v15 = sub_1000A6958();
  sub_1004CF870(v15);
  uint64_t v16 = sub_1000A6958();
  return (*(uint64_t (**)(uint64_t))(*(void *)v16 + 944))(v16);
}

void sub_1019191D8(double a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3[5];
  long long __p = 0;
  __int16 v97 = 0;
  int v98 = 0;
  __int16 v93 = 0;
  int v94 = 0;
  __int16 v95 = 0;
  double v90 = 0;
  __int16 v91 = 0;
  double v92 = 0;
  __int16 v87 = 0;
  double v88 = 0;
  __int16 v89 = 0;
  double v84 = 0;
  __int16 v85 = 0;
  double v86 = 0;
  sub_10017C3FC(&__p, (int)v5);
  sub_10017C3FC(&v93, (int)v5);
  sub_10017C3FC(&v90, (int)v5);
  sub_10017C3FC(&v87, (int)v5);
  sub_10017C3FC(&v84, (int)v5);
  uint64_t v6 = a3[1];
  if (a3[2] != v6)
  {
    unint64_t v7 = a3[4];
    uint64_t v8 = (void *)(*(void *)(v6 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66));
    unint64_t v9 = *(void *)(v6 + 8 * ((a3[5] + v7) / 0x66)) + 40 * ((a3[5] + v7) % 0x66);
    if (v8 != (void *)v9)
    {
      int v10 = 0;
      uint64_t v11 = (void *)(v6 + 8 * (v7 / 0x66));
      do
      {
        uint64_t v12 = v97;
        if (v97 >= v98)
        {
          uint64_t v14 = (char *)__p;
          uint64_t v15 = (v97 - (unsigned char *)__p) >> 3;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            goto LABEL_108;
          }
          uint64_t v17 = v98 - (unsigned char *)__p;
          if ((v98 - (unsigned char *)__p) >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)sub_1000DA54C((uint64_t)&v98, v18);
            uint64_t v14 = (char *)__p;
            uint64_t v12 = v97;
          }
          else
          {
            uint64_t v19 = 0;
          }
          double v20 = &v19[8 * v15];
          *(void *)double v20 = *v8;
          uint64_t v13 = v20 + 8;
          while (v12 != v14)
          {
            uint64_t v21 = *((void *)v12 - 1);
            v12 -= 8;
            *((void *)v20 - 1) = v21;
            v20 -= 8;
          }
          long long __p = v20;
          __int16 v97 = v13;
          int v98 = &v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)__int16 v97 = *v8;
          uint64_t v13 = v12 + 8;
        }
        __int16 v97 = v13;
        uint64_t v22 = v94;
        if (v94 >= v95)
        {
          uint64_t v24 = (char *)v93;
          uint64_t v25 = (v94 - (unsigned char *)v93) >> 3;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 61) {
            goto LABEL_108;
          }
          uint64_t v27 = v95 - (unsigned char *)v93;
          if ((v95 - (unsigned char *)v93) >> 2 > v26) {
            unint64_t v26 = v27 >> 2;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          if (v28)
          {
            double v29 = (char *)sub_1000DA54C((uint64_t)&v95, v28);
            uint64_t v24 = (char *)v93;
            uint64_t v22 = v94;
          }
          else
          {
            double v29 = 0;
          }
          uint64_t v30 = &v29[8 * v25];
          *(void *)uint64_t v30 = v8[1];
          __int16 v23 = v30 + 8;
          while (v22 != v24)
          {
            uint64_t v31 = *((void *)v22 - 1);
            v22 -= 8;
            *((void *)v30 - 1) = v31;
            v30 -= 8;
          }
          __int16 v93 = v30;
          int v94 = v23;
          __int16 v95 = &v29[8 * v28];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(void *)int v94 = v8[1];
          __int16 v23 = v22 + 8;
        }
        int v94 = v23;
        double v32 = v91;
        if (v91 >= v92)
        {
          double v34 = (char *)v90;
          uint64_t v35 = (v91 - (unsigned char *)v90) >> 3;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 61) {
            goto LABEL_108;
          }
          uint64_t v37 = v92 - (unsigned char *)v90;
          if ((v92 - (unsigned char *)v90) >> 2 > v36) {
            unint64_t v36 = v37 >> 2;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38)
          {
            int v39 = (char *)sub_1000DA54C((uint64_t)&v92, v38);
            double v34 = (char *)v90;
            double v32 = v91;
          }
          else
          {
            int v39 = 0;
          }
          int v40 = &v39[8 * v35];
          *(void *)int v40 = v8[2];
          double v33 = v40 + 8;
          while (v32 != v34)
          {
            uint64_t v41 = *((void *)v32 - 1);
            v32 -= 8;
            *((void *)v40 - 1) = v41;
            v40 -= 8;
          }
          double v90 = v40;
          __int16 v91 = v33;
          double v92 = &v39[8 * v38];
          if (v34) {
            operator delete(v34);
          }
        }
        else
        {
          *(void *)__int16 v91 = v8[2];
          double v33 = v32 + 8;
        }
        __int16 v91 = v33;
        int v42 = v88;
        if (v88 >= v89)
        {
          int v44 = (char *)v87;
          uint64_t v45 = (v88 - (unsigned char *)v87) >> 3;
          unint64_t v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 61) {
            goto LABEL_108;
          }
          uint64_t v47 = v89 - (unsigned char *)v87;
          if ((v89 - (unsigned char *)v87) >> 2 > v46) {
            unint64_t v46 = v47 >> 2;
          }
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v46;
          }
          if (v48)
          {
            double v49 = (char *)sub_1000DA54C((uint64_t)&v89, v48);
            int v44 = (char *)v87;
            int v42 = v88;
          }
          else
          {
            double v49 = 0;
          }
          double v50 = &v49[8 * v45];
          *(void *)double v50 = v8[3];
          int v43 = v50 + 8;
          while (v42 != v44)
          {
            uint64_t v51 = *((void *)v42 - 1);
            v42 -= 8;
            *((void *)v50 - 1) = v51;
            v50 -= 8;
          }
          __int16 v87 = v50;
          double v88 = v43;
          __int16 v89 = &v49[8 * v48];
          if (v44) {
            operator delete(v44);
          }
        }
        else
        {
          *(void *)double v88 = v8[3];
          int v43 = v42 + 8;
        }
        double v88 = v43;
        double v52 = v85;
        if (v85 >= v86)
        {
          double v54 = (char *)v84;
          uint64_t v55 = (v85 - (unsigned char *)v84) >> 3;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61) {
LABEL_108:
          }
            sub_1001D7FD4();
          uint64_t v57 = v86 - (unsigned char *)v84;
          if ((v86 - (unsigned char *)v84) >> 2 > v56) {
            unint64_t v56 = v57 >> 2;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58)
          {
            double v59 = (char *)sub_1000DA54C((uint64_t)&v86, v58);
            double v54 = (char *)v84;
            double v52 = v85;
          }
          else
          {
            double v59 = 0;
          }
          double v60 = &v59[8 * v55];
          *(void *)double v60 = v8[4];
          double v53 = v60 + 8;
          while (v52 != v54)
          {
            uint64_t v61 = *((void *)v52 - 1);
            v52 -= 8;
            *((void *)v60 - 1) = v61;
            v60 -= 8;
          }
          double v84 = v60;
          __int16 v85 = v53;
          double v86 = &v59[8 * v58];
          if (v54) {
            operator delete(v54);
          }
        }
        else
        {
          *(void *)__int16 v85 = v8[4];
          double v53 = v52 + 8;
        }
        __int16 v85 = v53;
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v62 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          uint64_t v63 = v8[1];
          uint64_t v64 = v8[2];
          uint64_t v65 = v8[3];
          uint64_t v66 = v8[4];
          *(_DWORD *)uint64_t buf = 134350592;
          double v114 = a1;
          __int16 v115 = 1026;
          int v116 = v10;
          __int16 v117 = 1026;
          int v118 = v5;
          __int16 v119 = 2050;
          uint64_t v120 = v63;
          __int16 v121 = 2050;
          uint64_t v122 = v64;
          __int16 v123 = 2050;
          uint64_t v124 = v65;
          __int16 v125 = 2050;
          uint64_t v126 = v66;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "BaroAlt,disk,store,fBaroBiasHistory,time,%{public}.3lf,index,%{public}d,size,%{public}d,bias_pa,%{public}.3lf,biasUnc_m,%{public}.3lf,modeProb,%{public}.3lf,deviceBaroTempAtCalib_C,%{public}.2lf", buf, 0x40u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          uint64_t v68 = v8[1];
          uint64_t v69 = v8[2];
          uint64_t v70 = v8[3];
          uint64_t v71 = v8[4];
          int v99 = 134350592;
          double v100 = a1;
          __int16 v101 = 1026;
          int v102 = v10;
          __int16 v103 = 1026;
          int v104 = v5;
          __int16 v105 = 2050;
          uint64_t v106 = v68;
          __int16 v107 = 2050;
          uint64_t v108 = v69;
          __int16 v109 = 2050;
          uint64_t v110 = v70;
          __int16 v111 = 2050;
          uint64_t v112 = v71;
          double v72 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::saveBaroBiasHistoryToDisk(const CFTimeInterval, const std::deque<BaroBiasEstimate> &)", "%s\n", v72);
          if (v72 != (char *)buf) {
            free(v72);
          }
        }
        v8 += 5;
        if ((void *)((char *)v8 - *v11) == (void *)4080)
        {
          __int16 v67 = (void *)v11[1];
          ++v11;
          uint64_t v8 = v67;
        }
        ++v10;
      }
      while (v8 != (void *)v9);
    }
  }
  id v73 = (id)objc_opt_new();
  sub_10191D54C((double **)&__p);
  id v74 = (id)objc_opt_new();
  sub_10191D54C((double **)&v93);
  id v75 = (id)objc_opt_new();
  sub_10191D54C((double **)&v90);
  id v76 = (id)objc_opt_new();
  sub_10191D54C((double **)&v87);
  id v77 = (id)objc_opt_new();
  sub_10191D54C((double **)&v84);
  uint64_t v78 = sub_1000A6958();
  sub_1004D258C(v78);
  uint64_t v79 = sub_1000A6958();
  sub_1004D258C(v79);
  uint64_t v80 = sub_1000A6958();
  sub_1004D258C(v80);
  uint64_t v81 = sub_1000A6958();
  sub_1004D258C(v81);
  uint64_t v82 = sub_1000A6958();
  sub_1004D258C(v82);
  uint64_t v83 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v83 + 944))(v83);
  if (v84)
  {
    __int16 v85 = (char *)v84;
    operator delete(v84);
  }
  if (v87)
  {
    double v88 = (char *)v87;
    operator delete(v87);
  }
  if (v90)
  {
    __int16 v91 = (char *)v90;
    operator delete(v90);
  }
  if (v93)
  {
    int v94 = (char *)v93;
    operator delete(v93);
  }
  if (__p)
  {
    __int16 v97 = (char *)__p;
    operator delete(__p);
  }
}

void sub_101919A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  if (a26) {
    operator delete(a26);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a32) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_101919A9C(uint64_t a1)
{
  double v17 = 0.0;
  double v18 = 0.0;
  uint64_t v2 = *(void *)(a1 + 3360);
  if (*(void *)(a1 + 3368) == v2
    || (unint64_t v3 = *(void *)(a1 + 3384),
        unint64_t v4 = v3 / 0x66,
        unint64_t v5 = *(void *)(v2 + 8 * (v3 / 0x66)) + 40 * (v3 % 0x66),
        unint64_t v6 = *(void *)(v2 + 8 * ((*(void *)(a1 + 3392) + v3) / 0x66)) + 40 * ((*(void *)(a1 + 3392) + v3) % 0x66),
        v5 == v6))
  {
    result.n128_u64[0] = *(void *)(a1 + 3344);
  }
  else
  {
    unint64_t v7 = (void *)(v2 + 8 * v4);
    result.n128_u64[0] = *(void *)(a1 + 3344);
    double v9 = 0.0;
    do
    {
      double v10 = *(double *)(v5 + 24);
      if (v10 > v9)
      {
        *(void *)(a1 + 2120) = *(void *)(v5 + 8);
        double v11 = *(double *)(v5 + 16);
        if (v11 < 2.5) {
          double v11 = 2.5;
        }
        *(double *)(a1 + 2144) = v11;
        double v12 = *(double *)v5;
        double v17 = v10;
        double v18 = v12;
        *(void *)(a1 + 2128) = *(void *)(v5 + 32);
        double v9 = v10;
      }
      unint64_t v13 = *(void *)v5;
      if (result.n128_f64[0] < *(double *)v5)
      {
        *(void *)(a1 + 3344) = v13;
        result.n128_u64[0] = v13;
      }
      v5 += 40;
      if (v5 - *v7 == 4080)
      {
        unint64_t v14 = v7[1];
        ++v7;
        unint64_t v5 = v14;
      }
    }
    while (v5 != v6);
  }
  *(void *)(a1 + 2136) = result.n128_u64[0];
  uint64_t v15 = *(void *)a1;
  if (*(void *)a1 && result.n128_f64[0] > 0.0)
  {
    result.n128_u64[0] = *(void *)(a1 + 2144);
    if (result.n128_f64[0] > 0.0)
    {
      sub_1018845B4(v15, a1 + 1576, (uint64_t *)(a1 + 2024), (uint64_t *)(a1 + 2136), (uint64_t *)(a1 + 2120), (void *)(a1 + 2128), (uint64_t *)(a1 + 2144), (uint64_t *)&v18, (uint64_t *)&v17);
      long long v16 = *(_OWORD *)(a1 + 2040);
      *(_OWORD *)(a1 + 2072) = *(_OWORD *)(a1 + 2024);
      *(_OWORD *)(a1 + 2088) = v16;
      __n128 result = *(__n128 *)(a1 + 2056);
      *(__n128 *)(a1 + 2104) = result;
    }
  }
  return result;
}

void *sub_101919C10(void *a1, void *a2)
{
  if (a1 != a2)
  {
    unint64_t v3 = a2[4];
    uint64_t v4 = a2[1];
    if (a2[2] == v4)
    {
      unint64_t v5 = 0;
      uint64_t v8 = 0;
      unint64_t v7 = (void *)(v4 + 8 * ((a2[5] + v3) / 0x66));
    }
    else
    {
      unint64_t v5 = (unsigned char *)(*(void *)(v4 + 8 * (v3 / 0x66)) + 40 * (v3 % 0x66));
      unint64_t v6 = a2[5] + v3;
      unint64_t v7 = (void *)(v4 + 8 * (v6 / 0x66));
      uint64_t v8 = (unsigned char *)(*v7 + 40 * (v6 % 0x66));
    }
    sub_1019254D8(a1, (void *)(v4 + 8 * (v3 / 0x66)), v5, v7, v8);
  }
  return a1;
}

void sub_101919CC8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 2240))
  {
    double v4 = sub_10016C458();
    int v21 = 0;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    uint64_t v5 = *(void *)(a1 + 2240);
    double v6 = *(double *)(a2 + 4);
    double v7 = *(double *)(a2 + 12);
    v36[0] = off_1023455B0;
    v36[1] = a1;
    v36[3] = v36;
    LODWORD(a2) = sub_1017AD8D8(v5, (uint64_t)&v18, (uint64_t)v36, v6, v7);
    sub_1017B4478(v36);
    switch((int)a2)
    {
      case 0:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v8 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          double v38 = v4;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,PressureDataManager pressure available,time,%{public}lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          int v22 = 134349056;
          double v23 = v4;
          long long v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
        }
        sub_10191D5B8(a1, (float32x2_t *)&v18);
        break;
      case 1:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        double v11 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          double v38 = v4;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,PressureDataManager pressure Unavailable,time,%{public}lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            goto LABEL_61;
          }
          goto LABEL_59;
        }
        break;
      case 2:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        double v12 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          double v38 = v4;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,PressureDataManager pressure tile not valid,time,%{public}lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            goto LABEL_61;
          }
          goto LABEL_59;
        }
        break;
      case 3:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        unint64_t v13 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          double v38 = v4;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,PressureDataManager pressure Downloading,time,%{public}lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            goto LABEL_61;
          }
          goto LABEL_59;
        }
        break;
      case 4:
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        unint64_t v14 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint64_t buf = 134349056;
          double v38 = v4;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,PressureDataManager AVL file not found,time,%{public}lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
LABEL_61:
          }
            dispatch_once(&qword_102419380, &stru_102345560);
LABEL_59:
          int v22 = 134349056;
          double v23 = v4;
          double v17 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v17);
          if (v17 != (char *)buf) {
            free(v17);
          }
        }
        break;
      default:
        break;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134350593;
      double v38 = v4;
      __int16 v39 = 2049;
      double v40 = *((float *)&v19 + 2);
      __int16 v41 = 2049;
      double v42 = *((float *)&v19 + 3);
      __int16 v43 = 1024;
      int v44 = v21;
      __int16 v45 = 2049;
      double v46 = *((float *)&v20 + 3);
      __int16 v47 = 2049;
      double v48 = *((float *)&v20 + 2);
      __int16 v49 = 2049;
      uint64_t v50 = *((void *)&v18 + 1);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "BaroAlt,QueryReferencePressure for given tile,time,%{public}lf, pressure_pa,%{private}.7lf,pressureUnc,%{private}.7lf,source,%d,Lat,%{private}.7lf,Long,%{private}.7lf,dataDownloadTime,%{private}.7lf", buf, 0x44u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v22 = 134350593;
    double v23 = v4;
    __int16 v24 = 2049;
    double v25 = *((float *)&v19 + 2);
    __int16 v26 = 2049;
    double v27 = *((float *)&v19 + 3);
    __int16 v28 = 1024;
    int v29 = v21;
    __int16 v30 = 2049;
    double v31 = *((float *)&v20 + 3);
    __int16 v32 = 2049;
    double v33 = *((float *)&v20 + 2);
    __int16 v34 = 2049;
    uint64_t v35 = *((void *)&v18 + 1);
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v10);
LABEL_52:
    if (v10 != (char *)buf) {
      free(v10);
    }
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  double v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#Warning,BaroAlt,PressureData is not enabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    LOWORD(v22) = 0;
    double v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)", "%s\n", v10);
    goto LABEL_52;
  }
}

void sub_10191A710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
}

void sub_10191A740(uint64_t a1, uint64_t a2, double a3, double a4)
{
  double v6 = *(double *)(a1 + 2208);
  if (fabs(v6) <= 2.22044605e-16) {
    goto LABEL_4;
  }
  *(double *)(a1 + 2160) = a4 - (*(double *)(a1 + 2216) + *(double *)(a1 + 1240));
  double v7 = a3 - v6;
  *(double *)(a1 + 2168) = v7;
  double v8 = v7 * 0.000555555556 * (v7 * 0.000555555556) + *(double *)(a1 + 2224) * *(double *)(a1 + 2224) + 0.25;
  if (v8 > 0.0)
  {
    *(double *)(a1 + 2176) = sqrt(v8);
    *(double *)(a1 + 2184) = fabs(sub_1000A3D9C(*(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a1 + 2192), *(double *)(a1 + 2200)));
    *(unsigned char *)(a1 + 2232) = 1;
LABEL_4:
    *(_OWORD *)(a1 + 2192) = *(_OWORD *)(a2 + 4);
    uint64_t v9 = *(void *)(a1 + 480);
    *(void *)(a1 + 2216) = *(void *)(a1 + 472);
    *(void *)(a1 + 2224) = v9;
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  double v10 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BaroAlt DriftRate,#Warning,calibratedAltitudeVarianceUsingLastCalibrationEventMSquare unexpectedly negative", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::recordAWDMetrics(const CFTimeInterval, const double, const CLDaemonLocation &)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_10191A974(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v3 = *(void *)(a1 + 2168);
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,BarometricAltitudeCalibrationAnalyticsData,durationSinceLastCalibrationEventSec,%{public}.3lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::recordCalibrationAnalyticsData()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  if (fabs(*(double *)(a1 + 2168)) > *(double *)(a1 + 3648)) {
    sub_101923388((unsigned int *)a1);
  }
}

void sub_10191AB44(uint64_t a1, _DWORD *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 2156);
  *(unsigned char *)(a1 + 2156) = sub_100D33CD4((uint64_t)a2);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    sub_100D335B8(a2, __p);
    uint64_t v6 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    int v7 = *(unsigned __int8 *)(a1 + 2156);
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,emergency state changed,%s,isEmergency,%d", (uint8_t *)&buf, 0x12u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    sub_100D335B8(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v13 = *(unsigned __int8 *)(a1 + 2156);
    int v18 = 136315394;
    long long v19 = p_buf;
    __int16 v20 = 1024;
    int v21 = v13;
    unint64_t v14 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateEmergencyState(CLEmergencyState)", "%s\n", (const char *)v14);
    if (v14 != __p) {
      free(v14);
    }
  }
  if (*(unsigned char *)(a1 + 2156))
  {
    sub_101917624(a1);
    uint64_t v8 = 236;
    if (!*(unsigned char *)(a1 + 237)) {
      uint64_t v8 = 360;
    }
    if (*(unsigned char *)(a1 + v8))
    {
      if (*(void *)a1)
      {
        if (*(double *)(a1 + 2460) > 0.0 && *(double *)(a1 + 2888) > 0.0)
        {
          double v9 = sub_10016C458();
          if (sub_1000A4F34(v9, *(double *)(a1 + 2888), 315360000.0) < 90.0)
          {
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102345560);
            }
            double v10 = qword_102419388;
            if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
            {
              LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "BaroAlt,query ref pressure entering a e911 call", (uint8_t *)__p, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_102419380 != -1) {
                dispatch_once(&qword_102419380, &stru_102345560);
              }
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              long long v16 = (std::string *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateEmergencyState(CLEmergencyState)", "%s\n", (const char *)v16);
              if (v16 != __p) {
                free(v16);
              }
            }
            sub_101919CC8(a1, a1 + 2384);
          }
        }
      }
    }
  }
  if (v4)
  {
    if (!*(unsigned char *)(a1 + 2156))
    {
      [*(id *)(a1 + 168) setNextFireDelay:1.79769313e308];
      *(double *)(a1 + 3616) = sub_10016C458();
    }
  }
  else if (*(unsigned char *)(a1 + 2156))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words + 4) = 0x3FF0000000000000;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt, initializing periodic timer, report baro fixes every %f seconds", (uint8_t *)__p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 0x3FF0000000000000;
      uint64_t v15 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateEmergencyState(CLEmergencyState)", "%s\n", (const char *)v15);
      if (v15 != __p) {
        free(v15);
      }
    }
    [*(id *)(a1 + 168) setNextFireDelay:1.0 interval:1.0];
  }
}

void *sub_10191B0C4(uint64_t a1, uint64_t a2)
{
  return sub_10191B0CC((void *)(a1 + 2352), a2);
}

void *sub_10191B0CC(void *a1, uint64_t a2)
{
  sub_1008A9CD4((uint64_t)v4, a2);
  sub_101925F20(v4, a1);
  sub_100682438(v4);
  return a1;
}

void sub_10191B140(uint64_t a1)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v2 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "BaroAlt,stopPressureSubscription", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopPressureSubscription()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (*(unsigned char *)(a1 + 456) && sub_1000D2E34(0))
  {
    uint64_t v3 = sub_1000D2E34(0);
    sub_1009D26C4(v3, 30, *(void *)(a1 + 3664));
    *(unsigned char *)(a1 + 456) = 0;
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BaroAlt,fMotionCoprocessorDispatcher removed", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopPressureSubscription()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_10191B428(uint64_t a1)
{
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)long long __p = 0u;
  memset(v26, 0, sizeof(v26));
  memset(v24, 0, sizeof(v24));
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  sub_100134750(&v15[1], "");
  LOBYTE(v19) = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  *((void *)&v19 + 1) = 0;
  *(void *)&long long v20 = 0;
  *((void *)&v20 + 1) = 0xBFF0000000000000;
  void v24[2] = 0uLL;
  long long v21 = 0u;
  long long v22 = 0u;
  LODWORD(v23[0]) = 0;
  memset((char *)v23 + 8, 0, 114);
  memset(v24, 0, 28);
  sub_100134750(__p, "");
  memset((char *)v26 + 8, 0, 20);
  v26[2] = 0uLL;
  sub_100134750(&v27, "");
  BYTE8(v28) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void **)(a1 + 32) = v15[0];
  uint64_t v2 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v2);
  }
  *(_OWORD *)uint64_t v2 = *(_OWORD *)&v15[1];
  *(void **)(a1 + 56) = v15[3];
  HIBYTE(v15[3]) = 0;
  LOBYTE(v15[1]) = 0;
  long long v3 = v23[6];
  *(_OWORD *)(a1 + 256) = v23[5];
  *(_OWORD *)(a1 + 272) = v3;
  *(_OWORD *)(a1 + 288) = v23[7];
  *(void *)(a1 + 304) = *(void *)&v24[0];
  long long v4 = v23[2];
  *(_OWORD *)(a1 + 192) = v23[1];
  *(_OWORD *)(a1 + 208) = v4;
  long long v5 = v23[4];
  *(_OWORD *)(a1 + 224) = v23[3];
  *(_OWORD *)(a1 + 240) = v5;
  long long v6 = v21;
  *(_OWORD *)(a1 + 128) = v20;
  *(_OWORD *)(a1 + 144) = v6;
  long long v7 = v23[0];
  *(_OWORD *)(a1 + 160) = v22;
  *(_OWORD *)(a1 + 176) = v7;
  long long v8 = v17;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = v19;
  *(_OWORD *)(a1 + 96) = v18;
  *(_OWORD *)(a1 + 112) = v9;
  long long v10 = *(_OWORD *)((char *)&v24[1] + 8);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)((char *)v24 + 8);
  *(_OWORD *)(a1 + 328) = v10;
  *(void *)(a1 + 344) = *((void *)&v24[2] + 1);
  double v11 = (void **)(a1 + 352);
  if (*(char *)(a1 + 375) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)double v11 = *(_OWORD *)__p;
  *(void *)(a1 + 368) = *(void *)&v26[0];
  BYTE7(v26[0]) = 0;
  LOBYTE(__p[0]) = 0;
  long long v12 = *(_OWORD *)((char *)&v26[1] + 8);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)((char *)v26 + 8);
  *(_OWORD *)(a1 + 392) = v12;
  *(void *)(a1 + 408) = *((void *)&v26[2] + 1);
  int v13 = (_OWORD *)(a1 + 416);
  if (*(char *)(a1 + 439) < 0)
  {
    operator delete(*(void **)(a1 + 416));
    int v14 = SBYTE7(v26[0]);
    *int v13 = v27;
    *(void *)(a1 + 432) = v28;
    BYTE7(v28) = 0;
    LOBYTE(v27) = 0;
    *(unsigned char *)(a1 + 440) = BYTE8(v28);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *int v13 = v27;
    *(void *)(a1 + 432) = v28;
    BYTE7(v28) = 0;
    LOBYTE(v27) = 0;
    *(unsigned char *)(a1 + 440) = BYTE8(v28);
  }
  if (SHIBYTE(v15[3]) < 0) {
    operator delete(v15[1]);
  }
}

void sub_10191B6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10191B6DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2256))
  {
    if (+[CLGnssProviderAdapter isSupported]
      && *(void *)(a1 + 2248))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v2 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v3 = *(void *)(a1 + 2248);
        *(_DWORD *)std::string buf = 134283521;
        uint64_t v11 = v3;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BaroAlt,unregister gps client, %{private}p", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        long long v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopGps()", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      long long v4 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#wigo,off,BaroAlt", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        long long v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopGps()", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
      AnalyticsSendEventLazy();
      [*(id *)(*(void *)(a1 + 2248) + 16) unregister:*(void *)(*(void *)(a1 + 2248) + 8) forNotification:0];
      *(unsigned char *)(a1 + 2256) = 0;
      uint64_t v5 = *(void *)(a1 + 2280);
      if (*(int *)(v5 + 8) >= 1) {
        sub_100EBC6AC(v5);
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    long long v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,already stopped gps session", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      long long v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::stopGps()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

uint64_t sub_10191BB48(uint64_t a1, const __CFString *a2, char **a3)
{
  a3[1] = *a3;
  CFTypeRef v70 = 0;
  uint64_t v5 = sub_1000A6958();
  if (!sub_1004D1D1C(v5, a2, &v70))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    long long v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      long long v19 = v81 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed,key retrieval", buf, 0xCu);
      if (v81 < 0) {
        operator delete(__p[0]);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_123;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    sub_1000FECE0(a2, (uint64_t)buf);
    if (v79 >= 0) {
      long long v20 = buf;
    }
    else {
      long long v20 = *(unsigned char **)buf;
    }
    int v72 = 136446210;
    id v73 = v20;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    if (v79 < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_72;
  }
  long long v6 = (void *)v70;
  if (!v70)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    long long v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      long long v8 = v81 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed,empty array", buf, 0xCu);
      if (v81 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v79 >= 0) {
        uint64_t v61 = buf;
      }
      else {
        uint64_t v61 = *(unsigned char **)buf;
      }
      int v72 = 136446210;
      id v73 = v61;
      uint64_t v62 = (char *)_os_log_send_and_compose_impl();
      if (v79 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::retrieveArrayFromDisk(const CFStringRef, std::vector<double> &) const", "%s\n", v62);
      if (v62 != (char *)__p) {
        free(v62);
      }
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  long long v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    sub_1000FECE0(a2, (uint64_t)__p);
    int v10 = v81;
    uint64_t v11 = (void **)__p[0];
    id v12 = [v6 count];
    int v13 = __p;
    if (v10 < 0) {
      int v13 = v11;
    }
    *(_DWORD *)std::string buf = 136446466;
    *(void *)&uint8_t buf[4] = v13;
    __int16 v77 = 2050;
    id v78 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,key,%{public}s,size,%{public}lu", buf, 0x16u);
    if (v81 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    sub_1000FECE0(a2, (uint64_t)buf);
    int v56 = v79;
    uint64_t v57 = *(unsigned char **)buf;
    id v58 = [v6 count];
    double v59 = buf;
    if (v56 < 0) {
      double v59 = v57;
    }
    int v72 = 136446466;
    id v73 = v59;
    __int16 v74 = 2050;
    id v75 = v58;
    double v60 = (char *)_os_log_send_and_compose_impl();
    if (v79 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::retrieveArrayFromDisk(const CFStringRef, std::vector<double> &) const", "%s\n", v60);
    if (v60 != (char *)__p) {
      free(v60);
    }
  }
  if (![v6 count])
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    long long v21 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      long long v22 = v81 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed,no record", buf, 0xCu);
      if (v81 < 0) {
        operator delete(__p[0]);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_123;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    sub_1000FECE0(a2, (uint64_t)buf);
    if (v79 >= 0) {
      double v23 = buf;
    }
    else {
      double v23 = *(unsigned char **)buf;
    }
    int v72 = 136446210;
    id v73 = v23;
    long long v17 = (char *)_os_log_send_and_compose_impl();
    if (v79 < 0) {
      operator delete(*(void **)buf);
    }
LABEL_72:
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::retrieveArrayFromDisk(const CFStringRef, std::vector<double> &) const", "%s\n", v17);
LABEL_149:
    if (v17 != (char *)__p) {
      free(v17);
    }
    goto LABEL_123;
  }
  if ((unint64_t)[v6 count] >= 0x65)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v14 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      sub_1000FECE0(a2, (uint64_t)__p);
      uint64_t v15 = v81 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,too many entries,cleaning needed", buf, 0xCu);
      if (v81 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      sub_1000FECE0(a2, (uint64_t)buf);
      if (v79 >= 0) {
        long long v16 = buf;
      }
      else {
        long long v16 = *(unsigned char **)buf;
      }
      int v72 = 136446210;
      id v73 = v16;
      long long v17 = (char *)_os_log_send_and_compose_impl();
      if (v79 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_72;
    }
LABEL_123:
    uint64_t v42 = 0;
    goto LABEL_124;
  }
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id v24 = [v6 countByEnumeratingWithState:&v66 objects:v71 count:16];
  if (!v24)
  {
    uint64_t v42 = 1;
    goto LABEL_124;
  }
  uint64_t v25 = *(void *)v67;
  while (2)
  {
    for (uint64_t i = 0; i != v24; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v67 != v25) {
        objc_enumerationMutation(v6);
      }
      long long v27 = *(void **)(*((void *)&v66 + 1) + 8 * i);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        double v52 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          double v53 = __p;
          sub_1000FECE0(a2, (uint64_t)__p);
          if (v81 < 0) {
            double v53 = (void **)__p[0];
          }
          id v54 = [[objc_msgSend(v27, "description") UTF8String];
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v53;
          __int16 v77 = 2082;
          id v78 = v54;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed as not a NSNumber,i,%{public}s", buf, 0x16u);
          if (v81 < 0) {
            operator delete(__p[0]);
          }
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_123;
        }
        bzero(__p, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v63 = buf;
        sub_1000FECE0(a2, (uint64_t)buf);
        if (v79 < 0) {
          uint64_t v63 = *(unsigned char **)buf;
        }
        id v64 = [[objc_msgSend(v27, "description") UTF8String];
        int v72 = 136446466;
        id v73 = v63;
        __int16 v74 = 2082;
        id v75 = v64;
        long long v17 = (char *)_os_log_send_and_compose_impl();
        if (v79 < 0) {
          operator delete(*(void **)buf);
        }
        goto LABEL_148;
      }
      [v27 doubleValue];
      if ((v28 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        __int16 v43 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          sub_1000FECE0(a2, (uint64_t)__p);
          int v44 = v81;
          __int16 v45 = (void **)__p[0];
          [v27 doubleValue];
          __int16 v47 = __p;
          if (v44 < 0) {
            __int16 v47 = v45;
          }
          *(_DWORD *)std::string buf = 136446466;
          *(void *)&uint8_t buf[4] = v47;
          __int16 v77 = 2050;
          id v78 = v46;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "BaroAlt,disk,retrieve,#Warning,key,%{public}s,failed as invalid number,i,%{public}lf", buf, 0x16u);
          if (v81 < 0) {
            operator delete(__p[0]);
          }
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_123;
        }
        bzero(__p, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        sub_1000FECE0(a2, (uint64_t)buf);
        int v48 = v79;
        __int16 v49 = *(unsigned char **)buf;
        [v27 doubleValue];
        uint64_t v51 = buf;
        if (v48 < 0) {
          uint64_t v51 = v49;
        }
        int v72 = 136446466;
        id v73 = v51;
        __int16 v74 = 2050;
        id v75 = v50;
        long long v17 = (char *)_os_log_send_and_compose_impl();
        if (v79 < 0) {
          operator delete(*(void **)buf);
        }
LABEL_148:
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::retrieveArrayFromDisk(const CFStringRef, std::vector<double> &) const", "%s\n", v17);
        goto LABEL_149;
      }
      [v27 doubleValue];
      [v27 doubleValue];
      uint64_t v30 = v29;
      __int16 v32 = a3[1];
      unint64_t v31 = (unint64_t)a3[2];
      if ((unint64_t)v32 >= v31)
      {
        __int16 v34 = *a3;
        uint64_t v35 = (v32 - *a3) >> 3;
        unint64_t v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 61) {
          sub_1001D7FD4();
        }
        uint64_t v37 = v31 - (void)v34;
        if (v37 >> 2 > v36) {
          unint64_t v36 = v37 >> 2;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v38 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v38 = v36;
        }
        if (v38)
        {
          __int16 v39 = (char *)sub_1000DA54C((uint64_t)(a3 + 2), v38);
          __int16 v34 = *a3;
          __int16 v32 = a3[1];
        }
        else
        {
          __int16 v39 = 0;
        }
        double v40 = &v39[8 * v35];
        *(void *)double v40 = v30;
        double v33 = v40 + 8;
        while (v32 != v34)
        {
          uint64_t v41 = *((void *)v32 - 1);
          v32 -= 8;
          *((void *)v40 - 1) = v41;
          v40 -= 8;
        }
        *a3 = v40;
        a3[1] = v33;
        a3[2] = &v39[8 * v38];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        *(void *)__int16 v32 = v29;
        double v33 = v32 + 8;
      }
      a3[1] = v33;
    }
    id v24 = [v6 countByEnumeratingWithState:&v66 objects:v71 count:16];
    uint64_t v42 = 1;
    if (v24) {
      continue;
    }
    break;
  }
LABEL_124:
  return v42;
}

void sub_10191C9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10191CA30(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v10 = (uint64_t)(a1[1] - *a1) >> 3;
  if (v10 == (uint64_t)(a2[1] - *a2) >> 3
    && v10 == (uint64_t)(a3[1] - *a3) >> 3
    && v10 == (uint64_t)(a4[1] - *a4) >> 3
    && v10 == (uint64_t)(a5[1] - *a5) >> 3)
  {
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  id v12 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v13 = (a1[1] - *a1) >> 3;
    uint64_t v14 = (a2[1] - *a2) >> 3;
    uint64_t v15 = (a3[1] - *a3) >> 3;
    uint64_t v16 = (a4[1] - *a4) >> 3;
    uint64_t v17 = (a5[1] - *a5) >> 3;
    *(_DWORD *)std::string buf = 67241216;
    int v20 = v13;
    __int16 v21 = 1026;
    int v22 = v14;
    __int16 v23 = 1026;
    int v24 = v15;
    __int16 v25 = 1026;
    int v26 = v16;
    __int16 v27 = 1026;
    int v28 = v17;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,disk,#Warning,incorrect data size,biasTimestampHistoryCFAbs,%{public}d, biasHistory,%{public}d,biasUncHistory,%{public}d,modeProbHistory,%{public}d,devBaroTempHistory,%{public}d", buf, 0x20u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    long long v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLBarometricAltimeter::areBaroHistoryArraysValid(std::vector<CFAbsoluteTime> &, std::vector<double> &, std::vector<double> &, std::vector<double> &, std::vector<double> &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
    return 0;
  }
  return result;
}

void sub_10191CD14(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = a1[2];
  a1[5] = 0;
  unint64_t v4 = v3 - (void)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v5 = a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = v5 - (void)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    uint64_t v6 = 51;
  }
  else
  {
    if (v4 >> 3 != 2) {
      return;
    }
    uint64_t v6 = 102;
  }
  a1[4] = v6;
}

void sub_10191CD8C(uint64_t a1, uint64_t a2)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  unint64_t v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BaroAlt,onKFFilteredPressureNotification", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onKFFilteredPressureNotification(const CLBarometerCalibration_Types::CMKFFilteredPressureSample *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (a2)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      double v7 = *(float *)a2;
      double v8 = *(float *)(a2 + 40);
      *(_DWORD *)std::string buf = 134349569;
      uint64_t v21 = v6;
      __int16 v22 = 2049;
      double v23 = v7;
      __int16 v24 = 2049;
      double v25 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BaroAlt,pressure update timestamp,%{public}.3lf,filteredPressure,%{private}.3lf,PressureTemperature,%{private}.3lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      long long v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onKFFilteredPressureNotification(const CLBarometerCalibration_Types::CMKFFilteredPressureSample *)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if (*(float *)a2 > 2.2204e-16)
    {
      *(double *)(a1 + 448) = sub_10016C458();
      double v9 = *(float *)a2;
      *(double *)(a1 + 432) = v9;
      *(double *)(a1 + 440) = *(float *)(a2 + 40);
      sub_10191D4E8((void *)a1, v9);
    }
    if (!*(unsigned char *)(a1 + 2156))
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v10 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = *(void *)(a1 + 448);
        double v12 = *(double *)(a1 + 3616);
        double v13 = *(double *)(a1 + 3608);
        *(_DWORD *)std::string buf = 134349568;
        uint64_t v21 = v11;
        __int16 v22 = 2050;
        double v23 = v12;
        __int16 v24 = 2050;
        double v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BaroAlt,baro update time,%{public}.2lf,E911CallStopTime,%{public}.2lf,LastIsAppropriateToCalTime,%{public}.2lf", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        long long v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onKFFilteredPressureNotification(const CLBarometerCalibration_Types::CMKFFilteredPressureSample *)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      if (!*(void *)a1
        || sub_1000A4F34(*(double *)(a1 + 3616), *(double *)(a1 + 448), 315360000.0) >= 300.0
        && sub_1000A4F34(*(double *)(a1 + 3608), *(double *)(a1 + 448), 315360000.0) >= 30.0)
      {
        sub_10191B140(a1);
        return;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v14 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "BaroAlt,E911 ended < 5 mins back or calibration ended < 30sec back", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 == -1)
        {
LABEL_36:
          uint64_t v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onKFFilteredPressureNotification(const CLBarometerCalibration_Types::CMKFFilteredPressureSample *)", "%s\n", v16);
          if (v16 != (char *)buf) {
            free(v16);
          }
          return;
        }
LABEL_52:
        dispatch_once(&qword_102419380, &stru_102345560);
        goto LABEL_36;
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "BaroAlt,pressure data is null", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_36;
      }
      goto LABEL_52;
    }
  }
}

double sub_10191D4E8(void *a1, double a2)
{
  double v6 = a2;
  uint64_t v2 = a1 + 180;
  unint64_t v3 = a1[185];
  if (v3 >= 0xA)
  {
    uint64_t v4 = a1[184];
    a1[185] = v3 - 1;
    a1[184] = v4 + 1;
    sub_10007F07C((uint64_t)(a1 + 180), 1);
  }
  return sub_10017CCF0(v2, &v6);
}

id sub_10191D54C(double **a1)
{
  id v2 = +[NSMutableArray array];
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  while (v4 != v3)
  {
    double v5 = *v4++;
    [v2 addObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v5)]];
  }
  return v2;
}

void sub_10191D5B8(uint64_t a1, float32x2_t *a2)
{
  double v4 = sub_10016C458();
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  double v5 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    double v6 = a2[3].f32[0];
    double v7 = a2[3].f32[1];
    __int32 v8 = a2[6].i32[0];
    double v9 = a2[5].f32[1];
    double v10 = a2[5].f32[0];
    float32x2_t v11 = *a2;
    float32x2_t v12 = a2[2];
    *(_DWORD *)std::string buf = 134350849;
    double v16 = v4;
    __int16 v17 = 2049;
    double v18 = v6;
    __int16 v19 = 2049;
    double v20 = v7;
    __int16 v21 = 1024;
    __int32 v22 = v8;
    __int16 v23 = 2049;
    double v24 = v9;
    __int16 v25 = 2049;
    double v26 = v10;
    __int16 v27 = 2050;
    float32x2_t v28 = v11;
    __int16 v29 = 2050;
    float32x2_t v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "BaroAlt,ServerPressureData for given tile,time,%{public}.3lf, pressure_pa,%{private}.7lf,pressureUnc,%{private}.7lf,source,%d,Lat,%{private}.7lf,Long,%{private}.7lf,PressureCreationTime,%{public}.3lf,tileAge,%{public}.2lf", buf, 0x4Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::updateReferencePressure(const CLPressureDataManager::CLPressureUpdateToBaro &)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  *(float32x2_t *)(a1 + 1488) = a2[1];
  *(float64x2_t *)(a1 + 1496) = vcvtq_f64_f32(a2[3]);
  *(float32x2_t *)(a1 + 1560) = *a2;
  *(float32x2_t *)(a1 + 1568) = a2[2];
  if (a2[6].i32[0]) {
    int v13 = -1;
  }
  else {
    int v13 = 0;
  }
  *(_DWORD *)(a1 + 1544) = v13;
  *(double *)(a1 + 1552) = sub_10016C458();
}

void sub_10191D88C(void *a1@<X1>, std::string *a2@<X8>)
{
  sub_100134750(a2, "");
  uint64_t v4 = a1[1];
  if (a1[2] != v4)
  {
    unint64_t v5 = a1[4];
    double v6 = (void *)(v4 + 8 * (v5 >> 9));
    double v7 = (double *)(*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(void *)(v4 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    while (v7 != (double *)v8)
    {
      std::to_string(&v14, *v7);
      double v9 = std::string::append(&v14, ",");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      int64_t v16 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      if (v16 >= 0) {
        float32x2_t v11 = __p;
      }
      else {
        float32x2_t v11 = (void **)__p[0];
      }
      if (v16 >= 0) {
        std::string::size_type v12 = HIBYTE(v16);
      }
      else {
        std::string::size_type v12 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v11, v12);
      if (SHIBYTE(v16) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      if ((double *)((char *)++v7 - *v6) == (double *)4096)
      {
        int v13 = (double *)v6[1];
        ++v6;
        double v7 = v13;
      }
    }
  }
}

void sub_10191D9B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10191DA04(uint64_t a1, double a2)
{
  uint64_t v2 = 236;
  if (!*(unsigned char *)(a1 + 237)) {
    uint64_t v2 = 360;
  }
  if (!*(unsigned char *)(a1 + v2)
    || (uint64_t v5 = *(void *)(a1 + 2240)) != 0
    && (sub_1000A5140(v5, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)) & 1) == 0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    std::string::size_type v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "BaroAlt,#Warning,RPA is not allowed or not supported at location", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    *(_WORD *)long long __p = 0;
    std::string v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::hasPowerBudgetToTurnOnGps(const CFTimeInterval)", "%s\n", v14);
    if (v14 == (char *)buf) {
      return 0;
    }
LABEL_18:
    free(v14);
    return 0;
  }
  double v6 = (void *)(a1 + 2296);
  unint64_t v7 = *(void *)(a1 + 2336);
  if (v7)
  {
    do
    {
      unint64_t v8 = *(void *)(a1 + 2328);
      double v9 = a2 - *(double *)(*(void *)(*(void *)(a1 + 2304) + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF));
      double v10 = *(double *)(a1 + 2344);
      BOOL v11 = v9 > v10;
      if (v9 <= v10) {
        break;
      }
      *(void *)(a1 + 2336) = v7 - 1;
      *(void *)(a1 + 2328) = v8 + 1;
      sub_10007F07C(a1 + 2296, 1);
      unint64_t v7 = *(void *)(a1 + 2336);
    }
    while (v7);
  }
  else
  {
    BOOL v11 = 1;
  }
  if (*(unsigned char *)(a1 + 496))
  {
    uint64_t v15 = (unsigned int *)(a1 + 252);
    int v16 = *(unsigned __int8 *)(a1 + 256);
    __int16 v17 = (unsigned int *)(a1 + 376);
  }
  else
  {
    uint64_t v15 = (unsigned int *)(a1 + 244);
    int v16 = *(unsigned __int8 *)(a1 + 248);
    __int16 v17 = (unsigned int *)(a1 + 364);
  }
  if (!v16) {
    uint64_t v15 = v17;
  }
  if (v7 >= *v15)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int32 v22 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int v23 = *(_DWORD *)(a1 + 2336);
      sub_10191D88C((void *)(a1 + 2296), (std::string *)__p);
      double v24 = SBYTE3(v44) >= 0 ? __p : *(unsigned char **)__p;
      int v25 = *(unsigned __int8 *)(a1 + 496);
      *(_DWORD *)std::string buf = 134349826;
      double v48 = a2;
      __int16 v49 = 1026;
      int v50 = v23;
      __int16 v51 = 2082;
      double v52 = v24;
      __int16 v53 = 1026;
      int v54 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "BaroAlt,power budget,declined,reason,reached max,time,%{public}lf,recent sessions,%{public}d,queue,%{public}s,fIsRPACalStale,%{public}d", buf, 0x22u);
      if (SBYTE3(v44) < 0) {
        operator delete(*(void **)__p);
      }
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v26 = *(_DWORD *)(a1 + 2336);
    sub_10191D88C((void *)(a1 + 2296), &v39);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v27 = &v39;
    }
    else {
      __int16 v27 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    int v28 = *(unsigned __int8 *)(a1 + 496);
    *(_DWORD *)long long __p = 134349826;
    *(double *)&__p[4] = a2;
    __int16 v41 = 1026;
    int v42 = v26;
    __int16 v43 = 2082;
    int v44 = v27;
    __int16 v45 = 1026;
    int v46 = v28;
    std::string v14 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
LABEL_53:
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::hasPowerBudgetToTurnOnGps(const CFTimeInterval)", "%s\n", v14);
    if (v14 == (char *)buf) {
      return 0;
    }
    goto LABEL_18;
  }
  if (v11)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v18 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 2336);
      *(_DWORD *)std::string buf = 134349312;
      double v48 = a2;
      __int16 v49 = 1026;
      int v50 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,power budget,pass,reason,first recent session,time,%{public}lf,recent sessions,%{public}d", buf, 0x12u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v20 = *(void *)(a1 + 2336);
    *(_DWORD *)long long __p = 134349312;
    *(double *)&__p[4] = a2;
    __int16 v41 = 1026;
    int v42 = v20;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::hasPowerBudgetToTurnOnGps(const CFTimeInterval)", "%s\n", v21);
    if (v21 == (char *)buf) {
      return 1;
    }
    goto LABEL_84;
  }
  if (a2
     - *(double *)(*(void *)(*(void *)(a1 + 2304) + (((v7 + *(void *)(a1 + 2328) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((v7 + *(void *)(a1 + 2328) - 1) & 0x1FF)) > *(double *)(a1 + 2288))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v29 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int v30 = *(_DWORD *)(a1 + 2336);
      sub_10191D88C((void *)(a1 + 2296), (std::string *)__p);
      unint64_t v31 = SBYTE3(v44) >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)std::string buf = 134349570;
      double v48 = a2;
      __int16 v49 = 1026;
      int v50 = v30;
      __int16 v51 = 2082;
      double v52 = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "BaroAlt,power budget,pass,reason,long since last session,time,%{public}lf,recent sessions,%{public}d,queue,%{public}s", buf, 0x1Cu);
      if (SBYTE3(v44) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      return 1;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v35 = *(_DWORD *)(a1 + 2336);
    sub_10191D88C(v6, &v39);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v36 = &v39;
    }
    else {
      unint64_t v36 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long __p = 134349570;
    *(double *)&__p[4] = a2;
    __int16 v41 = 1026;
    int v42 = v35;
    __int16 v43 = 2082;
    int v44 = v36;
    uint64_t v21 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::hasPowerBudgetToTurnOnGps(const CFTimeInterval)", "%s\n", v21);
    if (v21 == (char *)buf) {
      return 1;
    }
LABEL_84:
    free(v21);
    return 1;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  __int16 v32 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v33 = *(_DWORD *)(a1 + 2336);
    sub_10191D88C((void *)(a1 + 2296), (std::string *)__p);
    __int16 v34 = SBYTE3(v44) >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 134349570;
    double v48 = a2;
    __int16 v49 = 1026;
    int v50 = v33;
    __int16 v51 = 2082;
    double v52 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "BaroAlt,power budget,declined,reason,close to last session,time,%{public}lf,recent sessions,%{public}d,queue,%{public}s", buf, 0x1Cu);
    if (SBYTE3(v44) < 0) {
      operator delete(*(void **)__p);
    }
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v37 = *(_DWORD *)(a1 + 2336);
    sub_10191D88C(v6, &v39);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v38 = &v39;
    }
    else {
      unint64_t v38 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long __p = 134349570;
    *(double *)&__p[4] = a2;
    __int16 v41 = 1026;
    int v42 = v37;
    __int16 v43 = 2082;
    int v44 = v38;
    std::string v14 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    goto LABEL_53;
  }
  return result;
}

BOOL sub_10191E3C8(uint64_t a1, int a2, double a3)
{
  double v24 = a3;
  uint64_t v4 = *(void *)(a1 + 2264);
  if (v4)
  {
    [*(id *)(a1 + 2264) setNextFireDelay:*(double *)(a1 + 2272)];
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (*(void *)a1) {
        double v7 = sub_1000A4CE8(*(void *)a1, &v24);
      }
      else {
        double v7 = 0.0;
      }
      uint64_t v9 = *(void *)(a1 + 2272);
      [*(id *)(a1 + 2264) nextFireTime];
      uint64_t v11 = v10;
      [*(id *)(a1 + 2264) nextFireDelay];
      *(_DWORD *)std::string buf = 134350080;
      double v36 = v7;
      __int16 v37 = 2050;
      uint64_t v38 = v9;
      __int16 v39 = 2050;
      uint64_t v40 = v11;
      __int16 v41 = 2050;
      uint64_t v42 = v12;
      __int16 v43 = 1026;
      int v44 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,gps timer,on,now,%{public}.3lf,interval,%{public}.3lf,nextFire,%{public}.3lf,fireDelay,%{public}.3lf,reason,%{public}d", buf, 0x30u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      if (*(void *)a1) {
        double v16 = sub_1000A4CE8(*(void *)a1, &v24);
      }
      else {
        double v16 = 0.0;
      }
      uint64_t v19 = *(void *)(a1 + 2272);
      [*(id *)(a1 + 2264) nextFireTime];
      uint64_t v21 = v20;
      [*(id *)(a1 + 2264) nextFireDelay];
      int v25 = 134350080;
      double v26 = v16;
      __int16 v27 = 2050;
      uint64_t v28 = v19;
      __int16 v29 = 2050;
      uint64_t v30 = v21;
      __int16 v31 = 2050;
      uint64_t v32 = v22;
      __int16 v33 = 1026;
      int v34 = a2;
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::turnOnGps(const CFTimeInterval, enum GpsTurnOnReason)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    sub_10191E8C4(a1, v24);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v13 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a1 + 2272);
      *(_DWORD *)std::string buf = 134349312;
      double v36 = v24;
      __int16 v37 = 2050;
      uint64_t v38 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,active gps started,time,%{public}.3lf,count for %{public}.3lf", buf, 0x16u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return v4 != 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v17 = *(void *)(a1 + 2272);
    int v25 = 134349312;
    double v26 = v24;
    __int16 v27 = 2050;
    uint64_t v28 = v17;
LABEL_31:
    double v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::turnOnGps(const CFTimeInterval, enum GpsTurnOnReason)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
    return v4 != 0;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  unint64_t v8 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67240192;
    LODWORD(v36) = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,#Warning fActiveGpsRequestTimer is invalid,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v25 = 67240192;
    LODWORD(v26) = a2;
    goto LABEL_31;
  }
  return v4 != 0;
}

void sub_10191E8C4(uint64_t a1, double a2)
{
  double v15 = a2;
  if (*(unsigned char *)(a1 + 2256))
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v2 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,already during gps session", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      LOWORD(v16) = 0;
      unint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::startGps(const CFTimeInterval)", "%s\n", v3);
LABEL_34:
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
  else if (+[CLGnssProviderAdapter isSupported] {
         && *(void *)(a1 + 2248))
  }
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 2248);
      *(_DWORD *)std::string buf = 134283521;
      uint64_t v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,register gps client, %{private}p", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v10 = *(void *)(a1 + 2248);
      int v16 = 134283521;
      uint64_t v17 = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::startGps(const CFTimeInterval)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v7 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#wigo,on,BaroAlt", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      LOWORD(v16) = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::startGps(const CFTimeInterval)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    AnalyticsSendEventLazy();
    [*(id *)(*(void *)(a1 + 2248) + 16) register:*(void *)(*(void *)(a1 + 2248) + 8) forNotification:0 registrationInfo:0];
    *(unsigned char *)(a1 + 2256) = 1;
    sub_10017CCF0((void *)(a1 + 2296), &v15);
    uint64_t v8 = *(void *)(a1 + 2280);
    if (*(int *)(v8 + 8) <= 0)
    {
      sub_100134750(__p, "none");
      sub_100EBBFD8(v8, (uint64_t *)__p);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "BaroAlt,failed to start GPS", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      LOWORD(v16) = 0;
      unint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLBarometricAltimeter::startGps(const CFTimeInterval)", "%s\n", v3);
      goto LABEL_34;
    }
  }
}

void sub_10191EE90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10191EEB4()
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v0 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "BaroAlt,received gps update", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

NSDictionary *__cdecl sub_10191F03C(id a1)
{
  return (NSDictionary *)&off_1023978D8;
}

NSDictionary *__cdecl sub_10191F048(id a1)
{
  return (NSDictionary *)&off_102397900;
}

uint64_t sub_10191F054(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2240);
  if (result)
  {
    if (sub_1000A5140(result, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)))
    {
      if (*(unsigned char *)(a1 + 241)) {
        int v3 = *(unsigned __int8 *)(a1 + 240);
      }
      else {
        int v3 = *(unsigned __int8 *)(a1 + 361);
      }
      return v3 != 0;
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v4 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Harvest,pressure not available at location", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isPressureDataHarvestSupported() const", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_10191F218(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2240);
  if (result)
  {
    if (sub_1000A5140(result, *(double *)(a1 + 2388), *(long double *)(a1 + 2396)))
    {
      if (*(unsigned char *)(a1 + 264)) {
        return *(unsigned int *)(a1 + 260);
      }
      else {
        return *(unsigned int *)(a1 + 368);
      }
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      int v3 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Harvest Count,pressure not available at location", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "uint32_t CLBarometricAltimeter::getMaxCountToUploadPerDay() const", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
        return 0;
      }
    }
  }
  return result;
}

void sub_10191F3D4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    sub_1000E9354();
    if (sub_100012960(a4, "RefPressureConfig", v74))
    {
      long long v68 = (unsigned __int8 *)(a1 + 360);
      if ((sub_1000D2988((uint64_t)v74, "ReferencePressureFeatureSupported", (BOOL *)(a1 + 360)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v6 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Ref Support config read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          int v50 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v50);
          if (v50 != (char *)buf) {
            free(v50);
          }
        }
      }
      id v73 = (unsigned char *)(a1 + 361);
      if ((sub_1000D2988((uint64_t)v74, "ReferencePressureDataHarvestEnable", (BOOL *)(a1 + 361)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        double v7 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Harvest feature read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          __int16 v51 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v51);
          if (v51 != (char *)buf) {
            free(v51);
          }
        }
        *id v73 = 0;
      }
      int v72 = (int *)(a1 + 364);
      if ((sub_1004D0870((uint64_t)v74, "BaroAltMaxGpsSessions", (_DWORD *)(a1 + 364)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v8 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Max Gps sessions read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          double v52 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v52);
          if (v52 != (char *)buf) {
            free(v52);
          }
        }
        *int v72 = 0;
      }
      long long v67 = (unsigned __int8 *)(a1 + 362);
      if ((sub_1000D2988((uint64_t)v74, "BaroAlsOutDoorSupported", (BOOL *)(a1 + 362)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v9 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Als outdoor read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          __int16 v53 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v53);
          if (v53 != (char *)buf) {
            free(v53);
          }
        }
      }
      uint64_t v71 = (int *)(a1 + 368);
      if ((sub_1004D0870((uint64_t)v74, "NumberOfAllowedHarvestsPerDay", (_DWORD *)(a1 + 368)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v10 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Max number of harvests per day read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          int v54 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v54);
          if (v54 != (char *)buf) {
            free(v54);
          }
        }
        *uint64_t v71 = 5;
      }
      long long v66 = (unsigned __int8 *)(a1 + 372);
      if ((sub_1000D2988((uint64_t)v74, "BaroAltAllowRefPressureBasedAltToYieldEnabled", (BOOL *)(a1 + 372)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v11 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,baro yield enabled read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          uint64_t v55 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v55);
          if (v55 != (char *)buf) {
            free(v55);
          }
        }
      }
      uint64_t v65 = (unsigned __int8 *)(a1 + 373);
      if ((sub_1000D2988((uint64_t)v74, "EnableReferencePressureHarvestInAllRegions", (BOOL *)(a1 + 373)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v12 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Ref pressure harvest all region read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          int v56 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v56);
          if (v56 != (char *)buf) {
            free(v56);
          }
        }
      }
      CFTypeRef v70 = (int *)(a1 + 376);
      if ((sub_1004D0870((uint64_t)v74, "BaroAltMaxGpsSessionsForRPACal", (_DWORD *)(a1 + 376)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        int v13 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Max Gps sessions for RPA Cal read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          uint64_t v57 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v57);
          if (v57 != (char *)buf) {
            free(v57);
          }
        }
        *CFTypeRef v70 = 5;
      }
      long long v69 = (unsigned char *)(a1 + 380);
      if ((sub_1000D2988((uint64_t)v74, "IsSlowChangingBiasWithMedianEnabled", (BOOL *)(a1 + 380)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        char v14 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,feature flag of slow changing bias with median filter read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          id v58 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v58);
          if (v58 != (char *)buf) {
            free(v58);
          }
        }
        *long long v69 = 1;
      }
      double v15 = (uint64_t *)(a1 + 384);
      if ((sub_1000A699C((uint64_t)v74, "LongMemoryBiasTimeSpan_s", (void *)(a1 + 384)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        int v16 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,long memory bias time read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          double v59 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v59);
          if (v59 != (char *)buf) {
            free(v59);
          }
        }
        *double v15 = 0x4122750000000000;
      }
      uint64_t v17 = (int *)(a1 + 392);
      if ((sub_1004D0870((uint64_t)v74, "LongMemoryBiasMaxElements", (_DWORD *)(a1 + 392)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        double v18 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,Max long mem bias elements read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          double v60 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v60);
          if (v60 != (char *)buf) {
            free(v60);
          }
        }
        *uint64_t v17 = 50;
      }
      uint64_t v19 = (uint64_t *)(a1 + 400);
      if ((sub_1000A699C((uint64_t)v74, "ShortMemoryBiasTimeSpan_s", (void *)(a1 + 400)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v20 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,short memory bias time read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          uint64_t v61 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v61);
          if (v61 != (char *)buf) {
            free(v61);
          }
        }
        uint64_t *v19 = 0x409C200000000000;
      }
      uint64_t v21 = (int *)(a1 + 408);
      if ((sub_1004D0870((uint64_t)v74, "ShortMemoryBiasMaxElements", (_DWORD *)(a1 + 408)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        uint64_t v22 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,short memory bias max elements read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          uint64_t v62 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v62);
          if (v62 != (char *)buf) {
            free(v62);
          }
        }
        *uint64_t v21 = 60;
      }
      int v23 = (uint64_t *)(a1 + 416);
      if ((sub_1000A699C((uint64_t)v74, "ShortMemoryMinTimeInterval_s", (void *)(a1 + 416)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        double v24 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,short memory min time read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          uint64_t v63 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v63);
          if (v63 != (char *)buf) {
            free(v63);
          }
        }
        *int v23 = 0x403E000000000000;
      }
      int v25 = (int *)(a1 + 424);
      if ((sub_1004D0870((uint64_t)v74, "MinLongTermMemoryQueueSize", (_DWORD *)(a1 + 424)) & 1) == 0)
      {
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        double v26 = qword_102419388;
        if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,min long term memory queue size read error", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          LOWORD(v75) = 0;
          id v64 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v64);
          if (v64 != (char *)buf) {
            free(v64);
          }
        }
        int *v25 = 8;
      }
      sub_1019145DC(a1);
      sub_101913FB4(a1);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      __int16 v27 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        int v108 = *v73;
        int v112 = *v67;
        int v116 = *v66;
        int v120 = *v70;
        uint64_t v124 = *v15;
        uint64_t v128 = *v19;
        uint64_t v132 = *v23;
        int v106 = *v68;
        int v110 = *v72;
        int v114 = *v71;
        int v118 = *v65;
        int v122 = *v69;
        int v126 = *v17;
        int v130 = *v21;
        __int16 v123 = 2050;
        __int16 v127 = 2050;
        __int16 v131 = 2050;
        __int16 v107 = 1026;
        __int16 v109 = 1026;
        __int16 v111 = 1026;
        __int16 v113 = 1026;
        __int16 v115 = 1026;
        __int16 v117 = 1026;
        __int16 v119 = 1026;
        __int16 v121 = 1026;
        __int16 v125 = 1026;
        __int16 v129 = 1026;
        __int16 v133 = 1026;
        int v134 = *v25;
        *(_DWORD *)std::string buf = 67243776;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "BaroAlt,MA-OTA,RefPress,%{public}d,Harvested,%{public}d,GpsSessions,%{public}u,ALSOutDoor,%{public}d,NumberOfHarvestPerDay,%{public}u,BaroYield,%{public}d,RefPressureHarvestAllRegion,%{public}d,MaxGpsSessionForRPACal,%{public}d,isSlowChangingBiasWithMedianEnabled,%{public}d,longMemoryBiasTimeSpan_s,%{public}.3lf,longMemoryBiasMaxElements,%{public}d,shortMemoryBiasTimeSpan_s,%{public}.3lf,shortMemoryBiasMaxElements,%{public}d,shortMemoryMinTimeInterval_s,%{public}.3lf,minLongTermMemoryQueueSize,%{public}d", buf, 0x68u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_126;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      int v28 = *v68;
      int v29 = *v73;
      int v30 = *v72;
      int v31 = *v67;
      int v32 = *v71;
      int v33 = *v66;
      int v34 = *v65;
      int v35 = *v70;
      int v36 = *v69;
      uint64_t v37 = *v15;
      int v38 = *v17;
      uint64_t v39 = *v19;
      int v40 = *v21;
      uint64_t v41 = *v23;
      int v42 = *v25;
      int v75 = 67243776;
      int v76 = v28;
      __int16 v77 = 1026;
      int v78 = v29;
      __int16 v79 = 1026;
      int v80 = v30;
      __int16 v81 = 1026;
      int v82 = v31;
      __int16 v83 = 1026;
      int v84 = v32;
      __int16 v85 = 1026;
      int v86 = v33;
      __int16 v87 = 1026;
      int v88 = v34;
      __int16 v89 = 1026;
      int v90 = v35;
      __int16 v91 = 1026;
      int v92 = v36;
      __int16 v93 = 2050;
      uint64_t v94 = v37;
      __int16 v95 = 1026;
      int v96 = v38;
      __int16 v97 = 2050;
      uint64_t v98 = v39;
      __int16 v99 = 1026;
      int v100 = v40;
      __int16 v101 = 2050;
      uint64_t v102 = v41;
      __int16 v103 = 1026;
      int v104 = v42;
      __int16 v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v43);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      __int16 v49 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,MA-OTA,ReferencePressure Config not available", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_126;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      LOWORD(v75) = 0;
      __int16 v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v43);
    }
    if (v43 != (char *)buf) {
      free(v43);
    }
LABEL_126:
    sub_10013F3C4(v74);
    return;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  __int16 v45 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v46 = *a3;
    *(_DWORD *)std::string buf = 67240192;
    int v106 = v46;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Invalid notification,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v47 = *a3;
    int v75 = 67240192;
    int v76 = v47;
    double v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
  }
}

void sub_101920E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_101920E70(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  if (*a3 == 1)
  {
    *(_DWORD *)(a1 + 1316) = *a4;
    *(_DWORD *)(a1 + 1320) = a4[1];
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int v6 = *(_DWORD *)(a1 + 1316);
      int v7 = *(_DWORD *)(a1 + 1320);
      *(_DWORD *)std::string buf = 67240448;
      int v10 = v6;
      __int16 v11 = 1026;
      int v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,motionActNoti,Type,%{public}u,Confidence,%{public}u", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onMotionActivityNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

uint64_t sub_101921060(uint64_t a1)
{
  sub_100134750(__p, (char *)[@"com.apple.locationd.bundle-/System/Library/LocationBundles/AltimeterHarvest.bundle" UTF8String]);
  sub_1000B7144(__p, (uint64_t)v11);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  sub_1000A7FBC((uint64_t)v11, (uint64_t)__p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  }
  int v3 = +[NSString stringWithUTF8String:v2];
  uint64_t v4 = v3;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v4) {
      goto LABEL_8;
    }
LABEL_19:
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,AltimeterAuth Clientkey invalid", (uint8_t *)__p, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_24;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419380 == -1) {
      goto LABEL_41;
    }
    goto LABEL_43;
  }
  if (!v3) {
    goto LABEL_19;
  }
LABEL_8:
  id v5 = [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 504), "vendor"), "proxyForService:", @"CLClientAuthorizationCache"), "syncgetAuthorizationContextIfClientIsNonZonal:", v4];
  if (v5 && ([v5 isNonProvisionallyAuthorizedForServiceTypeMask:16] & 1) != 0)
  {
    uint64_t v6 = 1;
    goto LABEL_25;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  int v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,AltimeterAuth auth failed", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419380 == -1)
    {
LABEL_41:
      int v10 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isAuthorizedToHarvest()", "%s\n", (const char *)v10);
      if (v10 != __p) {
        free(v10);
      }
      goto LABEL_24;
    }
LABEL_43:
    dispatch_once(&qword_102419380, &stru_102345560);
    goto LABEL_41;
  }
LABEL_24:
  uint64_t v6 = 0;
LABEL_25:
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(v19);
  }
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  if (v14 < 0) {
    operator delete(v13);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  return v6;
}

void sub_101921438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
}

BOOL sub_101921498(void *a1)
{
  unint64_t v1 = a1[185];
  if (v1 > 9)
  {
    uint64_t v6 = a1[181];
    unint64_t v7 = a1[184];
    uint64_t v8 = (double **)(v6 + 8 * (v7 >> 9));
    if (a1[182] == v6)
    {
      uint64_t v9 = 0;
      int v10 = 0;
    }
    else
    {
      uint64_t v9 = &(*v8)[v7 & 0x1FF];
      int v10 = (double *)(*(void *)(v6 + 8 * ((v7 + v1) >> 9)) + 8 * (((_WORD)v7 + (_WORD)v1) & 0x1FF));
    }
    sub_1019251B8(v8, v9, v10, buf);
    double v11 = *(double *)buf[3] - *(double *)buf[1];
    return v11 > 0.0 && v11 < 12.0;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v2 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,device pressure queue is empty or < 10", (uint8_t *)buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRecentDevicePressureStable() const", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1019216CC(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1)
  {
    *(void *)std::string buf = sub_10016C458();
    double v3 = sub_1000A4CE8(v2, (double *)buf);
  }
  else
  {
    double v3 = 0.0;
  }
  unsigned int v4 = vabdd_f64(v3, *(double *)(a1 + 1264));
  unsigned int v5 = rand() % 0x1C20u + v3 % 0x15180;
  if (v5 < v4) {
    *(_DWORD *)(a1 + 232) = 0;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    uint64_t v7 = *(void *)(a1 + 1264);
    *(_DWORD *)std::string buf = 67175425;
    *(_DWORD *)&uint8_t buf[4] = v4;
    __int16 v16 = 1025;
    unsigned int v17 = v5;
    __int16 v18 = 2049;
    double v19 = v3;
    __int16 v20 = 2049;
    uint64_t v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "BaroAlt,harvestCalibratedPressure,lastHarvest,%{private}u,TodaySec,%{private}u,CurrentTime,%{private}.1f,timeOfLastCalibrationPressureHarvest_s,%{private}.1f", buf, 0x22u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isPressureHarvestAllowedToday()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  unsigned int v8 = *(_DWORD *)(a1 + 232);
  if (v8 && v4 <= 0x1D)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,multiple harvest not allowed within 0.5 mins", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_33;
      }
      goto LABEL_36;
    }
  }
  else
  {
    if (v8 < sub_10191F218(a1)) {
      return 1;
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      int v12 = *(_DWORD *)(a1 + 232);
      *(_DWORD *)std::string buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,Pressure harvest count,%{public}u,reached allowed limit for day", buf, 8u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_33:
        char v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isPressureHarvestAllowedToday()", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
        return 0;
      }
LABEL_36:
      dispatch_once(&qword_102419380, &stru_102345560);
      goto LABEL_33;
    }
  }
  return result;
}

BOOL sub_101921B90(uint64_t a1)
{
  double v2 = sub_10016C458();
  if (*(void *)a1) {
    double v3 = sub_1000A4F34(v2, *(double *)(a1 + 3656), 315360000.0);
  }
  else {
    double v3 = 1.79769313e308;
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  unsigned int v4 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 3656);
    *(_DWORD *)std::string buf = 67240704;
    BOOL v9 = v3 <= 120.0;
    __int16 v10 = 2050;
    double v11 = v3;
    __int16 v12 = 2050;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "BaroAlt,Pressure harvest,isRTTrafficHarvestRecent,%{public}d,durationSinceLastRealtimeTrafficHarvest_s,%{public}.3lf,fLastTrafficHarvestMCTimestamp_s,%{public}.3lf", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isHarvestAllowedByRecentRealtimeHarvest() const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  return v3 <= 120.0;
}

void sub_101921DD0(uint64_t *a1, int *a2)
{
  *a2 = 1;
  uint64_t v2 = *a1;
  if (*a1)
  {
    if (!*(unsigned char *)(v2 + 97)) {
      return;
    }
    double v3 = *(double *)(v2 + 104);
    if (v3 <= 0.9)
    {
      if (v3 <= 0.7) {
        return;
      }
      int v4 = 2;
    }
    else
    {
      int v4 = 3;
    }
    *a2 = v4;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,fBaroAltCore is nil", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::getReliabilityFromBaroBiasConfiguration(int &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

BOOL sub_101921FA4(uint64_t a1, double a2, double a3)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "BaroAlt,RPAHarvest,countryConfig", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    LOWORD(v31) = 0;
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)", "%s\n", v23);
    if (v23 != buf) {
      free(v23);
    }
  }
  if (*(void *)(a1 + 3488))
  {
    double v7 = sub_1000A3D9C(a2, a3, *(double *)(a1 + 208), *(double *)(a1 + 216));
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    unsigned int v8 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 208);
      uint64_t v10 = *(void *)(a1 + 216);
      int v11 = *(unsigned __int8 *)(a1 + 224);
      *(_DWORD *)std::string buf = 134350337;
      *(double *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2049;
      *(double *)&unsigned char buf[14] = a2;
      *(_WORD *)&unsigned char buf[22] = 2049;
      double v44 = a3;
      __int16 v45 = 2049;
      uint64_t v46 = v9;
      __int16 v47 = 2049;
      uint64_t v48 = v10;
      __int16 v49 = 1025;
      int v50 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BaroAlt,RPAHarvest,distanceFromLastQuery,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,prevLat,%{private}.8lf,prevLon,%{private}.8lf,isInRegion,%{private}d", buf, 0x3Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      uint64_t v24 = *(void *)(a1 + 208);
      uint64_t v25 = *(void *)(a1 + 216);
      int v26 = *(unsigned __int8 *)(a1 + 224);
      int v31 = 134350337;
      double v32 = v7;
      __int16 v33 = 2049;
      double v34 = a2;
      __int16 v35 = 2049;
      double v36 = a3;
      __int16 v37 = 2049;
      uint64_t v38 = v24;
      __int16 v39 = 2049;
      uint64_t v40 = v25;
      __int16 v41 = 1025;
      int v42 = v26;
      __int16 v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
    if (v7 <= 0.0 || v7 > 20000.0)
    {
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x2020000000;
      LOBYTE(v44) = 0;
      float v18 = *(float *)(a1 + 1384);
      id v19 = objc_alloc((Class)CLLocation);
      CLLocationCoordinate2D v20 = CLLocationCoordinate2DMake(a2, a3);
      id v21 = [v19 initWithCoordinate:[+[NSDate date](NSDate, "date")] altitude:v20.latitude horizontalAccuracy:v20.longitude verticalAccuracy:0.0 timestamp:fmax(v18, 20000.0) -1.0];
      char v22 = *(void **)(a1 + 3488);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472;
      v30[2] = sub_1019226CC;
      v30[3] = &unk_102345520;
      unsigned char v30[4] = buf;
      v30[5] = a1;
      [v22 fetchInfoForLocation:v21 withReply:v30];
      *(double *)(a1 + 208) = a2;
      *(double *)(a1 + 216) = a3;
      int v14 = *(unsigned __int8 *)(a1 + 224);
      _Block_object_dispose(buf, 8);
    }
    else
    {
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      __int16 v12 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        int v13 = *(unsigned __int8 *)(a1 + 224);
        *(_DWORD *)std::string buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,RPAHarvest,countryConfig supported,%d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        int v28 = *(unsigned __int8 *)(a1 + 224);
        int v31 = 67109120;
        LODWORD(v32) = v28;
        int v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)", "%s\n", v29);
        if (v29 != buf) {
          free(v29);
        }
      }
      int v14 = *(unsigned __int8 *)(a1 + 224);
    }
    return v14 != 0;
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v15 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "BaroAlt,RPAHarvest,countryConfig failed", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 0);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      LOWORD(v31) = 0;
      unsigned int v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)", "%s\n", v17);
      if (v17 != buf) {
        free(v17);
      }
      return 0;
    }
  }
  return result;
}

void sub_1019226AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1019226CC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  double v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289539;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2113;
    float v18 = a2;
    __int16 v19 = 2113;
    uint64_t v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"BaroAlt,RPAHarvest\", \"config\":%{private, location:escape_only}@, \"info\":%{private, location:escape_only}@}", buf, 0x26u);
  }
  if (a2) {
    BOOL v8 = [a2 objectForKey:@"allowed"] != 0;
  }
  else {
    BOOL v8 = 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v8;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v9 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    int v10 = *(unsigned __int8 *)(v6 + 224);
    int v11 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    *(_DWORD *)std::string buf = 67240448;
    int v14 = v10;
    __int16 v15 = 1026;
    LODWORD(v16) = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,RPAHarvest,isInRegion,%{public}d,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBarometricAltimeter::isRefPressHarvestSupportedAtLocation(const double, const double)_block_invoke", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  *(unsigned char *)(v6 + 224) = *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
}

uint64_t sub_101922998(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = sub_10187FB60(result);
    if (result)
    {
      int v5 = result;
      int v6 = sub_10187FB68((void *)*a1);
      v14[0] = 0;
      if (sub_1001A0BB0((float64_t *)(a2 + 24), (double *)(a2 + 32), v14)) {
        int v7 = v14[0];
      }
      else {
        int v7 = -1;
      }
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      BOOL v8 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = *((_DWORD *)a1 + 58);
        double v10 = *(float *)(a2 + 12);
        *(_DWORD *)std::string buf = 67241217;
        int v24 = v5;
        __int16 v25 = 1026;
        int v26 = v6;
        __int16 v27 = 1026;
        int v28 = v9;
        __int16 v29 = 2050;
        double v30 = v10;
        __int16 v31 = 1025;
        int v32 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BaroAlt,RPAHarvest,metric,biasHistorySize,%{public}d,biasHistoryDuration_s,%{public}d,harvestsInLast24hr,%{public}d,harvestUnc_pa,%{public}.3lf,demDeweightAreaId,%{private}d", buf, 0x24u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        int v11 = *((_DWORD *)a1 + 58);
        double v12 = *(float *)(a2 + 12);
        v14[1] = 67241217;
        _OWORD v14[2] = v5;
        __int16 v15 = 1026;
        int v16 = v6;
        __int16 v17 = 1026;
        int v18 = v11;
        __int16 v19 = 2050;
        double v20 = v12;
        __int16 v21 = 1025;
        int v22 = v7;
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::collectHarvestQualityIndicators(const CalibratedPressureCollectionData &) const", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      return AnalyticsSendEventLazy();
    }
  }
  return result;
}

NSDictionary *sub_101922C68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = @"biasHistorySize";
  v6[0] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v5[1] = @"biasHistoryDuration_s";
  v6[1] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 52)];
  _DWORD v5[2] = @"harvestsInLast24hr";
  _DWORD v6[2] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 232)];
  v5[3] = @"harvestUnc_pa";
  LODWORD(v3) = *(_DWORD *)(*(void *)(a1 + 40) + 12);
  void v6[3] = +[NSNumber numberWithFloat:v3];
  unsigned char v5[4] = @"deweightedAreaID";
  unsigned char v6[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  return +[NSDictionary dictionaryWithObjects:v6 forKeys:v5 count:5];
}

void sub_101922D74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double v15 = 0.0;
  uint64_t v6 = sub_1000A6958();
  if (sub_1000A6A10(v6, a1, &v15))
  {
    double v7 = fabs(v15);
    if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v7 > 2.22044605e-16)
    {
      *(double *)(a3 + 24) = v15;
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      int v9 = qword_102419388;
      if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
      {
        if (*((char *)a2 + 23) >= 0) {
          double v10 = a2;
        }
        else {
          double v10 = (uint64_t *)*a2;
        }
        uint64_t v11 = *(void *)(a3 + 24);
        *(_DWORD *)std::string buf = 136315394;
        __int16 v21 = v10;
        __int16 v22 = 2050;
        uint64_t v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadFromDiskStartMonitoringCalibrationTimeForAnalyticsData,%{public}lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419380 != -1) {
          dispatch_once(&qword_102419380, &stru_102345560);
        }
        if (*((char *)a2 + 23) >= 0) {
          double v12 = a2;
        }
        else {
          double v12 = (uint64_t *)*a2;
        }
        uint64_t v13 = *(void *)(a3 + 24);
        int v16 = 136315394;
        __int16 v17 = v12;
        __int16 v18 = 2050;
        uint64_t v19 = v13;
        int v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::prepareCalibrationAnalyticsData()::(anonymous class)::operator()(const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
      }
    }
  }
}

void sub_101922FB0(const __CFString *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  int v4 = (double *)(a3 + 24);
  if (fabs(*(double *)(a3 + 24)) < 2.22044605e-16
    || (*(void *)(a3 + 24) & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    uint64_t v8 = *a4;
    if (*a4)
    {
      *(void *)std::string buf = CFAbsoluteTimeGetCurrent();
      double v9 = sub_1000A4CE8(v8, (double *)buf);
    }
    else
    {
      double v9 = 0.0;
    }
    double *v4 = v9;
    uint64_t v10 = sub_1000A6958();
    sub_100163398(v10, a1, v4);
    uint64_t v11 = *(void *)sub_1000A6958();
    (*(void (**)(void))(v11 + 944))();
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v12 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v13 = a2;
      }
      else {
        uint64_t v13 = (uint64_t *)*a2;
      }
      double v14 = *v4;
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = v13;
      __int16 v17 = 2050;
      double v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,InitStartMonitoringCalibrationTimeForAnalytics,%{public}lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      double v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::prepareCalibrationAnalyticsData()::(anonymous class)::operator()(const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &, const std::unique_ptr<CLBarometricAltimeterCore> &) const", "%s\n", v15);
      if (v15 != buf) {
        free(v15);
      }
    }
  }
}

void sub_101923240(int *a1)
{
  sub_100134750(__p, "InAWeek");
  sub_1019234D0(@"CLBaroAltCalibrationCountMMForAWeek", @"CLBaroAltCalibrationCountOutdoorContextForAWeek", @"CLBaroAltAppropriateToCalibrateCountForAWeek", @"CLBaroAltCalibrationCountOnlyUsedDEMForAWeek", @"CLBaroAltCalibrationCountUsedDEMandRefPressureForAWeek", (uint64_t *)__p, a1 + 878);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "InAMonth");
  sub_1019234D0(@"CLBaroAltCalibrationCountMMForAMonth", @"CLBaroAltCalibrationCountOutdoorContextForAMonth", @"CLBaroAltAppropriateToCalibrateCountForAMonth", @"CLBaroAltCalibrationCountOnlyUsedDEMForAMonth", @"CLBaroAltCalibrationCountUsedDEMandRefPressureForAMonth", (uint64_t *)__p, a1 + 886);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "In3Months");
  sub_1019234D0(@"CLBaroAltCalibrationCountMMFor3Months", @"CLBaroAltCalibrationCountOutdoorContextFor3Months", @"CLBaroAltAppropriateToCalibrateCountFor3Months", @"CLBaroAltCalibrationCountOnlyUsedDEMFor3Months", @"CLBaroAltCalibrationCountUsedDEMandRefPressureFor3Months", (uint64_t *)__p, a1 + 894);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_101923364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_101923388(unsigned int *a1)
{
  sub_100134750(__p, "InAWeek");
  sub_101923DA4(@"CLBaroAltCalibrationCountMMForAWeek", @"CLBaroAltCalibrationCountOutdoorContextForAWeek", @"CLBaroAltAppropriateToCalibrateCountForAWeek", @"CLBaroAltCalibrationCountOnlyUsedDEMForAWeek", @"CLBaroAltCalibrationCountUsedDEMandRefPressureForAWeek", (uint64_t *)__p, a1 + 878);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "InAMonth");
  sub_101923DA4(@"CLBaroAltCalibrationCountMMForAMonth", @"CLBaroAltCalibrationCountOutdoorContextForAMonth", @"CLBaroAltAppropriateToCalibrateCountForAMonth", @"CLBaroAltCalibrationCountOnlyUsedDEMForAMonth", @"CLBaroAltCalibrationCountUsedDEMandRefPressureForAMonth", (uint64_t *)__p, a1 + 886);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  sub_100134750(__p, "In3Months");
  sub_101923DA4(@"CLBaroAltCalibrationCountMMFor3Months", @"CLBaroAltCalibrationCountOutdoorContextFor3Months", @"CLBaroAltAppropriateToCalibrateCountFor3Months", @"CLBaroAltCalibrationCountOnlyUsedDEMFor3Months", @"CLBaroAltCalibrationCountUsedDEMandRefPressureFor3Months", (uint64_t *)__p, a1 + 894);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1019234AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019234D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, int *a7)
{
  uint64_t v14 = sub_1000A6958();
  *(_DWORD *)std::string buf = 0;
  int v15 = sub_10013E418(v14, a1, buf);
  int v16 = *(_DWORD *)buf;
  if (!v15) {
    int v16 = 0;
  }
  *a7 = v16;
  uint64_t v17 = sub_1000A6958();
  *(_DWORD *)std::string buf = 0;
  int v18 = sub_10013E418(v17, a2, buf);
  int v19 = *(_DWORD *)buf;
  if (!v18) {
    int v19 = 0;
  }
  a7[1] = v19;
  uint64_t v20 = sub_1000A6958();
  *(_DWORD *)std::string buf = 0;
  int v21 = sub_10013E418(v20, a3, buf);
  int v22 = *(_DWORD *)buf;
  if (!v21) {
    int v22 = 0;
  }
  a7[2] = v22;
  uint64_t v23 = sub_1000A6958();
  *(_DWORD *)std::string buf = 0;
  int v24 = sub_10013E418(v23, a4, buf);
  int v25 = *(_DWORD *)buf;
  if (!v24) {
    int v25 = 0;
  }
  a7[3] = v25;
  uint64_t v26 = sub_1000A6958();
  *(_DWORD *)std::string buf = 0;
  int v27 = sub_10013E418(v26, a5, buf);
  int v28 = *(_DWORD *)buf;
  if (!v27) {
    int v28 = 0;
  }
  a7[4] = v28;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  __int16 v29 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      double v30 = a6;
    }
    else {
      double v30 = (uint64_t *)*a6;
    }
    int v31 = *a7;
    *(_DWORD *)std::string buf = 136315394;
    int v50 = v30;
    __int16 v51 = 1026;
    int v52 = v31;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountMM,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  int v32 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      __int16 v33 = a6;
    }
    else {
      __int16 v33 = (uint64_t *)*a6;
    }
    int v34 = a7[1];
    *(_DWORD *)std::string buf = 136315394;
    int v50 = v33;
    __int16 v51 = 1026;
    int v52 = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountOutdoorContext,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v45 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v45);
    if (v45 != (char *)buf) {
      free(v45);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  __int16 v35 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      double v36 = a6;
    }
    else {
      double v36 = (uint64_t *)*a6;
    }
    int v37 = a7[2];
    *(_DWORD *)std::string buf = 136315394;
    int v50 = v36;
    __int16 v51 = 1026;
    int v52 = v37;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadAppropriateToCalibrateCount,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  uint64_t v38 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      __int16 v39 = a6;
    }
    else {
      __int16 v39 = (uint64_t *)*a6;
    }
    int v40 = a7[3];
    *(_DWORD *)std::string buf = 136315394;
    int v50 = v39;
    __int16 v51 = 1026;
    int v52 = v40;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountOnlyUsedDEM,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v47 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v47);
    if (v47 != (char *)buf) {
      free(v47);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  __int16 v41 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      int v42 = a6;
    }
    else {
      int v42 = (uint64_t *)*a6;
    }
    int v43 = a7[4];
    *(_DWORD *)std::string buf = 136315394;
    int v50 = v42;
    __int16 v51 = 1026;
    int v52 = v43;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,ReadCalibrationCountUsedDEMandRefPressure,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v48 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::readCalibrationAnalyticsDataFromDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v48);
    if (v48 != (char *)buf) {
      free(v48);
    }
  }
}

void sub_101923DA4(const __CFString *a1, const __CFString *a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, uint64_t *a6, unsigned int *a7)
{
  uint64_t v14 = sub_1000A6958();
  sub_1004D2C30(v14, a1, a7);
  uint64_t v15 = sub_1000A6958();
  int v16 = a7 + 1;
  sub_1004D2C30(v15, a2, a7 + 1);
  uint64_t v17 = sub_1000A6958();
  int v18 = a7 + 2;
  sub_1004D2C30(v17, a3, a7 + 2);
  uint64_t v19 = sub_1000A6958();
  uint64_t v20 = a7 + 3;
  sub_1004D2C30(v19, a4, a7 + 3);
  uint64_t v21 = sub_1000A6958();
  int v22 = a7 + 4;
  sub_1004D2C30(v21, a5, a7 + 4);
  uint64_t v23 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v23 + 944))();
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  int v24 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      int v25 = a6;
    }
    else {
      int v25 = (uint64_t *)*a6;
    }
    unsigned int v26 = *a7;
    *(_DWORD *)std::string buf = 136315394;
    __int16 v45 = v25;
    __int16 v46 = 1026;
    unsigned int v47 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountMM,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v39 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v39);
    if (v39 != (char *)buf) {
      free(v39);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  int v27 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      int v28 = a6;
    }
    else {
      int v28 = (uint64_t *)*a6;
    }
    unsigned int v29 = *v16;
    *(_DWORD *)std::string buf = 136315394;
    __int16 v45 = v28;
    __int16 v46 = 1026;
    unsigned int v47 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountOutdoorContext,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v40);
    if (v40 != (char *)buf) {
      free(v40);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  double v30 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      int v31 = a6;
    }
    else {
      int v31 = (uint64_t *)*a6;
    }
    unsigned int v32 = *v18;
    *(_DWORD *)std::string buf = 136315394;
    __int16 v45 = v31;
    __int16 v46 = 1026;
    unsigned int v47 = v32;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreAppropriateToCalibrateCount,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    __int16 v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v41);
    if (v41 != (char *)buf) {
      free(v41);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  __int16 v33 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      int v34 = a6;
    }
    else {
      int v34 = (uint64_t *)*a6;
    }
    unsigned int v35 = *v20;
    *(_DWORD *)std::string buf = 136315394;
    __int16 v45 = v34;
    __int16 v46 = 1026;
    unsigned int v47 = v35;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountOnlyUsedDEM,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v42 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v42);
    if (v42 != (char *)buf) {
      free(v42);
    }
  }
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  double v36 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a6 + 23) >= 0) {
      int v37 = a6;
    }
    else {
      int v37 = (uint64_t *)*a6;
    }
    unsigned int v38 = *v22;
    *(_DWORD *)std::string buf = 136315394;
    __int16 v45 = v37;
    __int16 v46 = 1026;
    unsigned int v47 = v38;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "BaroAlt,%s,BarometricAltitudeCalibrationAnalyticsData,StoreCalibrationCountUsedDEMandRefPressure,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v43 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::storeCalibrationAnalyticsDataToDisk()::(anonymous class)::operator()(const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const CFStringRef, const std::string &, BarometricAltitudeCalibrationAnalyticsData &) const", "%s\n", v43);
    if (v43 != (char *)buf) {
      free(v43);
    }
  }
}

void sub_101924654(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  double v7 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *a3;
    *(_DWORD *)std::string buf = 67240192;
    BOOL v16 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,LS Notification,type,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if (*a3 == 4)
  {
    sub_101924A94(a1, *(_DWORD *)(a4 + 188));
    *(_DWORD *)(a1 + 3736) = *(_DWORD *)(a4 + 188);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    double v9 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      BOOL v10 = *(_DWORD *)(a1 + 3736) != 0;
      *(_DWORD *)std::string buf = 67240192;
      BOOL v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "BaroAlt,LS,location service enabled,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1)
      {
LABEL_25:
        uint64_t v14 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v14);
        if (v14 != (char *)buf) {
          free(v14);
        }
        return;
      }
LABEL_27:
      dispatch_once(&qword_102419380, &stru_102345560);
      goto LABEL_25;
    }
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v11 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *a3;
      *(_DWORD *)std::string buf = 67240192;
      BOOL v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BaroAlt,#Warning,unhandled LS notification,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 == -1) {
        goto LABEL_25;
      }
      goto LABEL_27;
    }
  }
}

double sub_101924A94(uint64_t a1, int a2)
{
  if (!a2 && *(_DWORD *)(a1 + 3736) == 1)
  {
    double v21 = sub_10016C458();
    sub_10017CCF0((void *)(a1 + 3688), &v21);
    unint64_t v3 = *(void *)(a1 + 3728);
    if (v3 >= 4)
    {
      uint64_t v4 = *(void *)(a1 + 3720);
      *(void *)(a1 + 3728) = v3 - 1;
      *(void *)(a1 + 3720) = v4 + 1;
      sub_10007F07C(a1 + 3688, 1);
    }
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    int v5 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      double v6 = v21;
      int v7 = *(_DWORD *)(a1 + 3728);
      sub_10191D88C((void *)(a1 + 3688), (std::string *)__p);
      int v8 = SBYTE3(v24) >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)std::string buf = 134349570;
      *(double *)unsigned int v26 = v6;
      *(_WORD *)&v26[8] = 1026;
      *(_DWORD *)&v26[10] = v7;
      __int16 v27 = 2082;
      int v28 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "BaroAlt,LS,time,%{public}.1lf,recent LS toggles,%{public}d,queue,%{public}s", buf, 0x1Cu);
      if (SBYTE3(v24) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      double v15 = v21;
      int v16 = *(_DWORD *)(a1 + 3728);
      sub_10191D88C((void *)(a1 + 3688), &v20);
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v17 = &v20;
      }
      else {
        uint64_t v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long __p = 134349570;
      *(double *)&__p[4] = v15;
      *(_WORD *)&unsigned char __p[12] = 1026;
      *(_DWORD *)&unsigned char __p[14] = v16;
      __int16 v23 = 2082;
      int v24 = v17;
      int v18 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::handleLocationServiceChange(const CLCommonLocationServicesEnabled)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
    if (*(void *)(a1 + 3728) == 3)
    {
      if (*(void *)a1)
      {
        double result = sub_1000A4F34(v21, *(double *)(*(void *)(*(void *)(a1 + 3696) + ((*(void *)(a1 + 3720) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(a1 + 3720) & 0x1FFLL)), 315360000.0);
        if (result < 30.0)
        {
          if (qword_102419380 != -1) {
            dispatch_once(&qword_102419380, &stru_102345560);
          }
          BOOL v10 = qword_102419388;
          if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 67240448;
            *(_DWORD *)unsigned int v26 = 3;
            *(_WORD *)&v26[4] = 2050;
            *(void *)&v26[6] = 0x403E000000000000;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BaroAlt,LS,clear baro cache after receiving %{public}d LS notifications during last %{public}lf seconds", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419380 != -1) {
              dispatch_once(&qword_102419380, &stru_102345560);
            }
            *(void *)long long __p = 0x304020200;
            *(_WORD *)&__p[8] = 2050;
            *(void *)&__p[10] = 0x403E000000000000;
            uint64_t v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::handleLocationServiceChange(const CLCommonLocationServicesEnabled)", "%s\n", v19);
            if (v19 != (char *)buf) {
              free(v19);
            }
          }
          sub_101918F20((void *)a1, 1, v21);
          uint64_t v11 = *(void ***)(a1 + 3696);
          uint64_t v12 = *(void *)(a1 + 3704);
          *(void *)(a1 + 3728) = 0;
          unint64_t v13 = v12 - (void)v11;
          if (v13 >= 0x11)
          {
            do
            {
              operator delete(*v11);
              uint64_t v11 = (void **)(*(void *)(a1 + 3696) + 8);
              *(void *)(a1 + 3696) = v11;
              unint64_t v13 = *(void *)(a1 + 3704) - (void)v11;
            }
            while (v13 > 0x10);
          }
          if (v13 >> 3 == 1)
          {
            uint64_t v14 = 256;
          }
          else
          {
            if (v13 >> 3 != 2) {
              return sub_1019134F8(a1);
            }
            uint64_t v14 = 512;
          }
          *(void *)(a1 + 3720) = v14;
          return sub_1019134F8(a1);
        }
      }
    }
  }
  return result;
}

void sub_101924F78(uint64_t a1, double a2)
{
  *(double *)(a1 + 3656) = a2;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_102345560);
  }
  unint64_t v3 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 134349056;
    double v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "BaroAlt,setRealTimeHarvestTriggered,%{public}.3lf", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBarometricAltimeter::setRealTimeHarvestTriggered(const CFTimeInterval)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_101925128(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_101925158(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_101925188(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

double **sub_1019251B8@<X0>(double **result@<X0>, double *a2@<X1>, double *a3@<X3>, double ***a4@<X8>)
{
  *a4 = result;
  a4[1] = (double **)a2;
  uint64_t v4 = (double **)(a4 + 1);
  a4[2] = result;
  a4[3] = (double **)a2;
  int v5 = (double **)(a4 + 3);
  if (a2 != a3)
  {
    double v6 = a2 + 1;
    int v7 = *result;
    if ((char *)(a2 + 1) - (char *)*result == 4096)
    {
      int v8 = result[1];
      ++result;
      int v7 = v8;
      double v6 = v8;
    }
    if (v6 != a3)
    {
      if (*v6 >= *a2) {
        uint64_t v9 = 3;
      }
      else {
        uint64_t v9 = 1;
      }
      if (*v6 >= *a2) {
        BOOL v10 = v6;
      }
      else {
        BOOL v10 = a2;
      }
      if (*v6 >= *a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = v6;
      }
      a4[2 * (*v6 >= *a2)] = result;
      a4[v9] = (double **)v6;
      while (1)
      {
        uint64_t v12 = v6 + 1;
        if ((char *)(v6 + 1) - (char *)v7 == 4096)
        {
          unint64_t v13 = result[1];
          ++result;
          int v7 = v13;
          uint64_t v14 = result;
          uint64_t v12 = v13;
        }
        else
        {
          uint64_t v14 = result;
        }
        if (v12 == a3) {
          return result;
        }
        double v6 = v12 + 1;
        double result = v14;
        if ((char *)(v12 + 1) - (char *)v7 == 4096)
        {
          double result = v14 + 1;
          double v6 = v14[1];
        }
        if (v6 == a3)
        {
          if (*v12 < *v11 || (a4 += 2, uint64_t v4 = v5, *v12 >= *v10))
          {
            *a4 = v14;
            char *v4 = v12;
          }
          return result;
        }
        double v15 = *v6;
        double v16 = *v12;
        double v17 = *v11;
        if (*v6 >= *v12)
        {
          if (v16 < v17)
          {
            *a4 = v14;
            a4[1] = (double **)v12;
            uint64_t v11 = v12;
          }
          uint64_t v14 = result;
          uint64_t v12 = v6;
          if (v15 >= *v10)
          {
LABEL_30:
            a4[2] = v14;
            NSObject *v5 = v12;
            BOOL v10 = v12;
          }
        }
        else
        {
          if (v15 < v17)
          {
            *a4 = result;
            a4[1] = (double **)v6;
            uint64_t v11 = v6;
          }
          if (v16 >= *v10) {
            goto LABEL_30;
          }
        }
        int v7 = *result;
      }
    }
  }
  return result;
}

NSDictionary *sub_10192531C(uint64_t a1)
{
  v3[0] = @"calibrationCountMM";
  v4[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 44)];
  v3[1] = @"calibrationCountOutdoorContext";
  v4[1] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 48)];
  _DWORD v3[2] = @"appropriateToCalibrateCount";
  _DWORD v4[2] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 52)];
  v3[3] = @"calibrationCountOnlyUsedDEM";
  v4[3] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 56)];
  unsigned char v3[4] = @"calibrationCountUsedDEMandRefPressure";
  void v4[4] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 60)];
  void v3[5] = @"deweightedAreaID";
  void v4[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(a1 + 32) + 72)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:6];
}

void sub_10192544C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1003BE294(a2 + 75);
    sub_1003BE294(a2 + 69);
    uint64_t v3 = a2[68];
    a2[68] = 0;
    if (v3) {
      operator delete();
    }
    uint64_t v4 = (void *)a2[15];
    if (v4)
    {
      a2[16] = v4;
      operator delete(v4);
    }
    operator delete();
  }
}

void *sub_1019254D8(void *a1, void *a2, unsigned char *a3, void *a4, unsigned char *a5)
{
  if (a5 == a3) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = 102 * (a4 - a2)
  }
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3);
  return sub_101925528(a1, a2, a3, v5);
}

void *sub_101925528(void *a1, void *a2, unsigned char *a3, unint64_t a4)
{
  unint64_t v8 = a1[5];
  if (v8 >= a4)
  {
    unint64_t v15 = a1[4];
    uint64_t v16 = a1[1];
    double v17 = (void *)(v16 + 8 * (v15 / 0x66));
    if (a1[2] == v16) {
      unint64_t v18 = 0;
    }
    else {
      unint64_t v18 = *v17 + 40 * (v15 % 0x66);
    }
    int v22 = a2;
    __int16 v23 = a3;
    sub_100176BF4(&v22, a4);
    std::string v20 = (unsigned char **)v22;
    double v21 = v23;
    int v22 = v17;
    __int16 v23 = (unsigned char *)v18;
    sub_10017EC04(a2, a3, v20, v21, (uint64_t)&v22);
    return (void *)sub_101925800((uint64_t)a1, v22, (uint64_t)v23);
  }
  else
  {
    int v22 = a2;
    __int16 v23 = a3;
    sub_100176BF4(&v22, v8);
    uint64_t v9 = (unsigned char **)v22;
    BOOL v10 = (long long *)v23;
    unint64_t v11 = a1[4];
    uint64_t v12 = a1[1];
    unint64_t v13 = (void *)(v12 + 8 * (v11 / 0x66));
    if (a1[2] == v12) {
      unint64_t v14 = 0;
    }
    else {
      unint64_t v14 = *v13 + 40 * (v11 % 0x66);
    }
    int v22 = v13;
    __int16 v23 = (unsigned char *)v14;
    sub_10017EC04(a2, a3, v9, v10, (uint64_t)&v22);
    return sub_101925684(a1, v9, v10, a4 - a1[5]);
  }
}

void *sub_101925684(void *a1, void *a2, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  if (v9 == v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 102 * ((v9 - v8) >> 3) - 1;
  }
  unint64_t v11 = a1[5] + a1[4];
  unint64_t v12 = v10 - v11;
  if (a4 > v12)
  {
    sub_101925968(a1, a4 - v12);
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v11 = a1[4] + a1[5];
  }
  unint64_t v13 = (void *)(v8 + 8 * (v11 / 0x66));
  if (v9 == v8) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = *v13 + 40 * (v11 % 0x66);
  }
  int v24 = (void *)(v8 + 8 * (v11 / 0x66));
  unint64_t v25 = v14;
  double result = sub_100176BF4(&v24, a4);
  uint64_t v16 = v25;
  if (v14 != v25)
  {
    double v17 = v24;
    do
    {
      if (v13 == v17) {
        uint64_t v18 = v16;
      }
      else {
        uint64_t v18 = *v13 + 4080;
      }
      if (v14 == v18)
      {
        uint64_t v18 = v14;
      }
      else
      {
        unint64_t v19 = v14;
        do
        {
          long long v20 = *a3;
          long long v21 = a3[1];
          *(void *)(v19 + 32) = *((void *)a3 + 4);
          *(_OWORD *)unint64_t v19 = v20;
          *(_OWORD *)(v19 + 16) = v21;
          a3 = (long long *)((char *)a3 + 40);
          if ((long long *)((char *)a3 - *a2) == (long long *)4080)
          {
            int v22 = (long long *)a2[1];
            ++a2;
            a3 = v22;
          }
          v19 += 40;
        }
        while (v19 != v18);
      }
      a1[5] -= 0x3333333333333333 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17) {
        break;
      }
      unint64_t v23 = v13[1];
      ++v13;
      unint64_t v14 = v23;
    }
    while (v23 != v16);
  }
  return result;
}

uint64_t sub_101925800(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = (void *)result;
  unint64_t v4 = *(void *)(result + 32);
  unint64_t v5 = v4 + *(void *)(result + 40);
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v7 = *(void *)(result + 16);
  uint64_t v8 = (void *)(v6 + 8 * (v5 / 0x66));
  if (v7 == v6) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *v8 + 40 * (v5 % 0x66);
  }
  if (v9 != a3)
  {
    uint64_t v10 = 102 * (v8 - a2) - 0x3333333333333333 * ((uint64_t)(v9 - *v8) >> 3);
    uint64_t v11 = (a3 - *a2) >> 3;
    uint64_t v12 = v10 + 0x3333333333333333 * v11;
    if (v12 >= 1)
    {
      unint64_t v13 = (void *)(v6 + 8 * (v4 / 0x66));
      if (v7 == v6) {
        unint64_t v14 = 0;
      }
      else {
        unint64_t v14 = *v13 + 40 * (v4 % 0x66);
      }
      if (a3 == v14) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = 102 * (a2 - v13) - 0x3333333333333333 * v11 + 0x3333333333333333 * ((uint64_t)(v14 - *v13) >> 3);
      }
      v16[0] = v13;
      v16[1] = v14;
      sub_100176BF4(v16, v15);
      v3[5] -= v12;
      do
        double result = sub_10017D8E8(v3, 1);
      while ((result & 1) != 0);
    }
  }
  return result;
}

void sub_101925968(void *a1, unint64_t a2)
{
  uint64_t v3 = (char *)a1[2];
  uint64_t v4 = (uint64_t)&v3[-a1[1]];
  if (v4) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = a2 + 1;
  }
  if (v5 % 0x66) {
    unint64_t v6 = v5 / 0x66 + 1;
  }
  else {
    unint64_t v6 = v5 / 0x66;
  }
  unint64_t v7 = a1[4];
  if (v6 >= v7 / 0x66) {
    unint64_t v8 = v7 / 0x66;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v6 <= v7 / 0x66)
  {
    for (a1[4] = v7 - 102 * v8; v8; --v8)
    {
      uint64_t v16 = (void *)a1[1];
      uint64_t v19 = *v16;
      double v17 = (char *)(v16 + 1);
      uint64_t v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        uint64_t v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1) {
            unint64_t v28 = 1;
          }
          else {
            unint64_t v28 = (uint64_t)&v3[-*a1] >> 2;
          }
          unsigned int v29 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v28);
          int v31 = &v29[8 * (v28 >> 2)];
          unsigned int v32 = (uint64_t *)a1[1];
          uint64_t v3 = v31;
          uint64_t v33 = a1[2] - (void)v32;
          if (v33)
          {
            uint64_t v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v34 = 8 * (v33 >> 3);
            unsigned int v35 = &v29[8 * (v28 >> 2)];
            do
            {
              uint64_t v36 = *v32++;
              *(void *)unsigned int v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          int v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            uint64_t v3 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          unint64_t v25 = &v17[-8 * (v24 >> 1)];
          int64_t v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            uint64_t v3 = (char *)a1[1];
          }
          __int16 v27 = &v3[-8 * (v24 >> 1)];
          uint64_t v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(void *)uint64_t v3 = v18;
      uint64_t v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    unint64_t v9 = v6 - v8;
    uint64_t v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF0uLL);
          sub_10017F0B4(a1, __p);
          --v6;
          if (!--v9) {
            goto LABEL_75;
          }
        }
        for (uint64_t i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF0uLL);
          sub_1002D02D8((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8) {
            uint64_t v64 = 101;
          }
          else {
            uint64_t v64 = 102;
          }
          uint64_t v65 = v64 + a1[4];
          a1[4] = v65;
        }
        unint64_t v8 = v6;
      }
      else
      {
LABEL_75:
        uint64_t v65 = a1[4];
      }
      a1[4] = v65 - 102 * v8;
      if (v8)
      {
        long long v66 = (char *)a1[2];
        do
        {
          long long v67 = (void *)a1[1];
          uint64_t v70 = *v67;
          long long v68 = (char *)(v67 + 1);
          uint64_t v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            uint64_t v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1) {
                unint64_t v78 = 1;
              }
              else {
                unint64_t v78 = (uint64_t)&v66[-*a1] >> 2;
              }
              __int16 v79 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v78);
              __int16 v81 = &v79[8 * (v78 >> 2)];
              int v82 = (uint64_t *)a1[1];
              long long v66 = v81;
              uint64_t v83 = a1[2] - (void)v82;
              if (v83)
              {
                long long v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v84 = 8 * (v83 >> 3);
                __int16 v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  uint64_t v86 = *v82++;
                  *(void *)__int16 v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              __int16 v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                long long v66 = (char *)a1[2];
              }
            }
            else
            {
              uint64_t v72 = v71 >> 3;
              BOOL v22 = v71 >> 3 < -1;
              uint64_t v73 = (v71 >> 3) + 2;
              if (v22) {
                uint64_t v74 = v73;
              }
              else {
                uint64_t v74 = v72 + 1;
              }
              int v75 = &v68[-8 * (v74 >> 1)];
              int64_t v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                long long v66 = (char *)a1[1];
              }
              __int16 v77 = &v66[-8 * (v74 >> 1)];
              long long v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(void *)long long v66 = v69;
          long long v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      uint64_t v11 = v4 >> 3;
      unint64_t v12 = v10 >> 2;
      if (v12 <= v9 + v11) {
        unint64_t v13 = v9 + v11;
      }
      else {
        unint64_t v13 = v12;
      }
      unint64_t v14 = v11 - v8;
      __int16 v91 = a1 + 3;
      if (v13) {
        uint64_t v15 = (char *)sub_1000DA54C((uint64_t)(a1 + 3), v13);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v38 = -102 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&long long v90 = __p[1];
      *((void *)&v90 + 1) = &v15[8 * v13];
      do
      {
        int v88 = operator new(0xFF0uLL);
        sub_1000DA434(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        __int16 v39 = (void *)a1[1];
        int v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            int64_t v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0]) {
                unint64_t v48 = 1;
              }
              else {
                unint64_t v48 = (v40 - (char *)__p[0]) >> 2;
              }
              __int16 v49 = (char *)sub_1000DA54C((uint64_t)v91, v48);
              __int16 v51 = (uint64_t *)__p[1];
              int v40 = &v49[8 * (v48 >> 2)];
              uint64_t v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                int v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v53 = 8 * (v52 >> 3);
                int v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  uint64_t v55 = *v51++;
                  *(void *)int v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              int v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(void *)&long long v90 = v40;
              *((void *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                int v40 = (char *)v90;
              }
            }
            else
            {
              uint64_t v42 = v41 >> 3;
              BOOL v22 = v41 >> 3 < -1;
              uint64_t v43 = (v41 >> 3) + 2;
              if (v22) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = v42 + 1;
              }
              __int16 v45 = (char *)__p[1] - 8 * (v44 >> 1);
              int64_t v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                int v40 = (char *)__p[1];
              }
              unsigned int v47 = &v40[-8 * (v44 >> 1)];
              int v40 = &v45[v46];
              __p[1] = v47;
              *(void *)&long long v90 = &v45[v46];
            }
          }
          *(void *)int v40 = *v39;
          int v40 = (char *)(v90 + 8);
          *(void *)&long long v90 = v90 + 8;
          __int16 v39 = (void *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      uint64_t v57 = (void *)a1[2];
      uint64_t v58 = -7 - (void)v57;
      while (v57 != (void *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1002D03F8((uint64_t)__p, v57);
      }
      double v59 = (char *)*a1;
      long long v60 = *(_OWORD *)__p;
      long long v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      long long v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      long long v90 = v62;
      a1[4] += v38;
      if (v57 != (void *)v62) {
        *(void *)&long long v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      }
      if (v59) {
        operator delete(v59);
      }
    }
  }
}

void sub_101925EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_101925F20(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_101926180(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_101926190()
{
}

void *sub_1019261A4(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = off_1023455B0;
  result[1] = v3;
  return result;
}

uint64_t sub_1019261EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023455B0;
  a2[1] = v2;
  return result;
}

void sub_101926218(uint64_t a1, float32x2_t *a2, unsigned char *a3)
{
  if (*a3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    sub_10191D5B8(v3, a2);
  }
  else
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_102345560);
    }
    uint64_t v4 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#Warning,BaroAlt,pressure data not available", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
      unint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "auto CLBarometricAltimeter::queryReferencePressure(const CLDaemonLocation &)::(anonymous class)::operator()(const CLPressureDataManager::CLPressureUpdateToBaro &, BOOL) const", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

uint64_t sub_1019263E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_101926428()
{
}

void sub_101926434()
{
  if (qword_102419380 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
    }
    unint64_t v1 = qword_102419388;
    if (os_signpost_enabled((os_log_t)qword_102419388))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_102345560);
      }
    }
    uint64_t v2 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_102419380, &stru_102345560);
  }
}

void sub_10192660C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10192668C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10192671C(_Unwind_Exception *a1)
{
}

uint64_t sub_101926734()
{
  qword_1024891A8 = 0;
  unk_1024891B0 = 0;
  qword_1024891B8 = 0;
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_1024891A8, (void *)&_mh_execute_header);
}

double sub_101926760(uint64_t a1)
{
  *(void *)a1 = &off_102345640;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 88) = _Q1;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 184) = a1 + 192;
  *(_DWORD *)(a1 + 208) = -1;
  *(void *)(a1 + 244) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(void *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 320) = a1 + 328;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 360) = a1 + 368;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 384) = a1 + 392;
  *(void *)(a1 + 408) = a1 + 416;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_DWORD *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = a1 + 488;
  *(void *)(a1 + 645) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 824) = 11;
  *(void *)(a1 + 828) = -1;
  *(void *)(a1 + 836) = -1;
  *(void *)(a1 + 844) = 0xBF800000BF800000;
  *(_DWORD *)(a1 + 852) = 0;
  *(_WORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(void *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_DWORD *)(a1 + 1040) = 1065353216;
  *(_DWORD *)(a1 + 1048) = 0;
  *(void *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1068) = xmmword_101E44C00;
  *(void *)(a1 + 1088) = 0;
  *(unsigned char *)(a1 + 1096) = 0;
  *(void *)(a1 + 1115) = 0;
  *(_OWORD *)(a1 + 1100) = 0u;
  *(_OWORD *)(a1 + 1124) = xmmword_101D47CB0;
  *(void *)(a1 + 1144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1152) = -1;
  *(unsigned char *)(a1 + 1156) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(unsigned char *)(a1 + 1216) = 1;
  double result = NAN;
  *(void *)(a1 + 1224) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 1240) = 0;
  *(void *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1272) = -1;
  *(void *)(a1 + 1264) = -1;
  *(void *)(a1 + 1256) = -1;
  *(void *)(a1 + 1248) = -1;
  *(void *)(a1 + 1283) = 0;
  *(void *)(a1 + 1276) = 0;
  *(void *)(a1 + 1292) = 0x40A0000042480000;
  *(unsigned char *)(a1 + 1304) = 0;
  *(unsigned char *)(a1 + 1312) = 0;
  *(void *)(a1 + 1336) = 0;
  *(void *)(a1 + 1328) = 0;
  *(void *)(a1 + 1320) = a1 + 1328;
  *(void *)(a1 + 1368) = 0;
  *(void *)(a1 + 1400) = 0;
  *(void *)(a1 + 1432) = 0;
  *(void *)(a1 + 1464) = 0;
  *(void *)(a1 + 1496) = 0;
  *(void *)(a1 + 1528) = 0;
  *(void *)(a1 + 1560) = 0;
  *(void *)(a1 + 1592) = 0;
  *(void *)(a1 + 1624) = 0;
  *(void *)(a1 + 1656) = 0;
  *(_WORD *)(a1 + 1664) = 0;
  *(unsigned char *)(a1 + 1666) = 1;
  return result;
}

uint64_t sub_1019269C0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &off_102345640;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 168) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 88) = _Q1;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 184) = a1 + 192;
  *(_DWORD *)(a1 + 208) = -1;
  *(void *)(a1 + 244) = 0x3F80000000000000;
  *(_OWORD *)(a1 + 228) = 0u;
  *(_OWORD *)(a1 + 212) = 0u;
  *(void *)(a1 + 256) = a1 + 264;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_DWORD *)(a1 + 312) = 1065353216;
  *(_OWORD *)(a1 + 328) = 0u;
  *(void *)(a1 + 320) = a1 + 328;
  *(void *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 360) = a1 + 368;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 384) = a1 + 392;
  *(void *)(a1 + 408) = a1 + 416;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_DWORD *)(a1 + 464) = 1065353216;
  *(_DWORD *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = a1 + 488;
  *(void *)(a1 + 645) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(void *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 824) = 11;
  *(void *)(a1 + 828) = -1;
  *(void *)(a1 + 836) = -1;
  *(void *)(a1 + 844) = 0xBF800000BF800000;
  *(_DWORD *)(a1 + 852) = 0;
  *(_WORD *)(a1 + 856) = 0;
  *(_DWORD *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(void *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_DWORD *)(a1 + 1040) = 1065353216;
  *(_DWORD *)(a1 + 1048) = 0;
  *(void *)(a1 + 1056) = 0;
  *(unsigned char *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1068) = xmmword_101E44C00;
  *(void *)(a1 + 1088) = 0;
  *(unsigned char *)(a1 + 1096) = 0;
  *(void *)(a1 + 1115) = 0;
  *(_OWORD *)(a1 + 1100) = 0u;
  *(_OWORD *)(a1 + 1124) = xmmword_101D47CB0;
  *(void *)(a1 + 1144) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1152) = -1;
  *(unsigned char *)(a1 + 1156) = 0;
  *(void *)(a1 + 1208) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(unsigned char *)(a1 + 1216) = 1;
  *(void *)(a1 + 1224) = 0xFFFFFFFF00000001;
  *(void *)(a1 + 1240) = 0;
  *(void *)(a1 + 1232) = 0;
  *(_DWORD *)(a1 + 1272) = -1;
  *(void *)(a1 + 1264) = -1;
  *(void *)(a1 + 1256) = -1;
  *(void *)(a1 + 1248) = -1;
  *(void *)(a1 + 1283) = 0;
  *(void *)(a1 + 1276) = 0;
  *(void *)(a1 + 1292) = 0x40A0000042480000;
  *(unsigned char *)(a1 + 1304) = 0;
  *(unsigned char *)(a1 + 1312) = 0;
  *(void *)(a1 + 1320) = *a2;
  uint64_t v23 = a1 + 1328;
  uint64_t v24 = a2 + 1;
  uint64_t v25 = a2[1];
  *(void *)(a1 + 1328) = v25;
  uint64_t v26 = a2[2];
  *(void *)(a1 + 1336) = v26;
  if (v26)
  {
    *(void *)(v25 + 16) = v23;
    *a2 = v24;
    *uint64_t v24 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)(a1 + 1320) = v23;
  }
  sub_1018319E0(a1 + 1344, a3);
  sub_10084F664(a1 + 1376, a4);
  sub_100A17630(a1 + 1408, a5);
  sub_101831A78(a1 + 1440, a6);
  *(void *)(a1 + 1496) = 0;
  *(void *)(a1 + 1528) = 0;
  sub_100852564(a1 + 1536, a7);
  sub_1008525FC(a1 + 1568, a8);
  sub_10084F6FC(a1 + 1600, a9);
  sub_1008527DC(a1 + 1632, a10);
  *(unsigned char *)(a1 + 1664) = a11;
  *(unsigned char *)(a1 + 1665) = a12;
  *(unsigned char *)(a1 + 1666) = 1;
  return a1;
}

void sub_101926D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  sub_10084FC08(v12);
  sub_100850B38(v13);
  sub_100850AB4(v15);
  sub_10183C300((void *)(v11 + 1504));
  sub_10065ABCC((void *)(v11 + 1472));
  sub_1008524E0(v16);
  sub_1008522FC(v17);
  sub_10084FB84(v19);
  sub_1008520A8(v18);
  sub_100851F6C(a10, *v14);
  sub_100D69AC4(v10);
  _Unwind_Resume(a1);
}

void sub_101926DA4()
{
}

void sub_101926DAC()
{
}

void sub_101926DB4()
{
}

uint64_t sub_101926DBC(uint64_t a1)
{
  *(void *)a1 = &off_102345640;
  sub_10084FC8C((void *)(a1 + 1632));
  sub_10084FC08((void *)(a1 + 1600));
  sub_100850B38((void *)(a1 + 1568));
  sub_100850AB4((void *)(a1 + 1536));
  sub_10183C300((void *)(a1 + 1504));
  sub_10065ABCC((void *)(a1 + 1472));
  sub_1008524E0((void *)(a1 + 1440));
  sub_1008522FC((void *)(a1 + 1408));
  sub_10084FB84((void *)(a1 + 1376));
  sub_1008520A8((void *)(a1 + 1344));
  sub_100851F6C(a1 + 1320, *(void **)(a1 + 1328));
  sub_100D69AC4(a1 + 8);
  return a1;
}

void *sub_101926E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_101926EA4((void *)(a1 + 1472), a2);

  return sub_101926F18((void *)(a1 + 1504), a3);
}

void *sub_101926EA4(void *a1, uint64_t a2)
{
  sub_10065AB34((uint64_t)v4, a2);
  sub_10192AA30(v4, a1);
  sub_10065ABCC(v4);
  return a1;
}

void *sub_101926F18(void *a1, uint64_t a2)
{
  sub_10183C268((uint64_t)v4, a2);
  sub_10192AC9C(v4, a1);
  sub_10183C300(v4);
  return a1;
}

void *sub_101926F8C(void *a1)
{
  if (a1[187])
  {
    sub_101926FE8((uint64_t)a1, 0);
    sub_100D54664(a1 + 184);
  }

  return sub_10192A9A8(a1 + 188);
}

void sub_101926FE8(uint64_t a1, char a2)
{
  if (*(void *)(a1 + 1496))
  {
    uint64_t v2 = a1 + 1472;
    sub_100180260(v2, a2);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning,#tt,Time transfer state callback is not set.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345948);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDeviceFacade::notifyClientTimeTransferState(BOOL)", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

uint64_t *sub_1019271B8(uint64_t a1, int a2)
{
  int v3 = a2;
  uint64_t v4 = &v3;
  double result = sub_1018D90A0((uint64_t **)(a1 + 1320), &v3, (uint64_t)&unk_101D0B290, &v4)[8];
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 48))(result);
  }
  return result;
}

void sub_101927228(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 1464);
  if (v3)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    uint64_t v5 = *a2;
    unint64_t v6 = v4;
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v3 = *(void *)(a1 + 1464);
      if (!v3) {
        sub_10015E48C();
      }
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
    if (v6) {
      sub_1000DB0A0(v6);
    }
  }
}

void sub_1019272B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1019272CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 1528);
  if (v2)
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v3;
    uint64_t v8 = *(void *)(a2 + 64);
    long long v4 = *(_OWORD *)(a2 + 48);
    _DWORD v7[2] = *(_OWORD *)(a2 + 32);
    void v7[3] = v4;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v2 + 48))(v2, v7);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#tt, Time transfer callback is not set.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345948);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDeviceFacade::notifyClient(GNSS::TimeTransferPulseTime)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_1019274A0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1666))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    long long v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a2 + 4);
      uint64_t v6 = *(void *)(a2 + 12);
      uint64_t v7 = *(void *)(a2 + 20);
      v8[0] = 68289795;
      v8[1] = 0;
      __int16 v9 = 2082;
      uint64_t v10 = "";
      __int16 v11 = 2049;
      uint64_t v12 = v5;
      __int16 v13 = 2049;
      uint64_t v14 = v6;
      __int16 v15 = 2050;
      uint64_t v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#injectPositionAssistance\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"horAcc\":\"%{public}f\"}", (uint8_t *)v8, 0x30u);
    }
    *(unsigned char *)(a1 + 1666) = 0;
  }
}

uint64_t sub_1019275C0(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 1280);
  if ((v1 & 0x20) != 0 || !*(unsigned char *)(result + 1288)) {
    unsigned int v2 = v1 | 0x20;
  }
  else {
    unsigned int v2 = v1 & 0xFFFFFFDF;
  }
  *(_DWORD *)(result + 1284) = v2;
  return result;
}

uint64_t sub_1019275E4(uint64_t a1)
{
  sub_101926760(a1);
  *unsigned int v2 = &off_1023457C0;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  long long v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Created a gnss device for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssUnknownDevice::CLGnssUnknownDevice()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return a1;
}

void sub_10192779C(_Unwind_Exception *a1)
{
  sub_101926DBC(v1);
  _Unwind_Resume(a1);
}

void sub_1019277B8()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to start gnss for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::start(const DeviceOperatingContext_t &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101927940()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to stop gnss for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::stop()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101927AC8()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v2 = 68289026;
    int v3 = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Tried to engage gnss for a target that either does not have gnss or the gnss hardware is unknown\"}", (uint8_t *)&v2, 0x12u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
  }
  uint64_t v1 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    int v2 = 68289026;
    int v3 = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tried to engage gnss for a target that either does not have gnss or the gnss hardware is unknown", "{\"msg%{public}.0s\":\"Tried to engage gnss for a target that either does not have gnss or the gnss hardware is unknown\"}", (uint8_t *)&v2, 0x12u);
  }
}

void sub_101927C34()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    int v2 = 68289026;
    int v3 = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Tried to disengage gnss for a target that either does not have gnss or the gnss hardware is unknown\"}", (uint8_t *)&v2, 0x12u);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
  }
  uint64_t v1 = qword_1024193D8;
  if (os_signpost_enabled((os_log_t)qword_1024193D8))
  {
    int v2 = 68289026;
    int v3 = 0;
    __int16 v4 = 2082;
    uint64_t v5 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tried to disengage gnss for a target that either does not have gnss or the gnss hardware is unknown", "{\"msg%{public}.0s\":\"Tried to disengage gnss for a target that either does not have gnss or the gnss hardware is unknown\"}", (uint8_t *)&v2, 0x12u);
  }
}

uint64_t sub_101927DA0()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to update operating context for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGnssUnknownDevice::isRestartRequired(const DeviceOperatingContext_t &, const DeviceOperatingContext_t &)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_101927F2C(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_101927F34(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    __int16 v4 = a2;
    if (*((char *)a2 + 23) < 0) {
      __int16 v4 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "GNSS_FILE: Tried to inject an assistance file, %{public}s, for a target that either does not have gnss or the gnss hardware is unknown", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceFile(std::string)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1019280FC(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_101928104(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    __int16 v4 = a2;
    if (*((char *)a2 + 23) < 0) {
      __int16 v4 = (uint64_t *)*a2;
    }
    *(_DWORD *)std::string buf = 136446210;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "GNSS_FILE: Tried to inject a RTI file, %{public}s, for a target that either does not have gnss or the gnss hardware is unknown", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectRtiFile(std::string)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_1019282CC()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectTimeAssistance for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectTimeAssistance(CFAbsoluteTime, CFTimeInterval, double)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101928454()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Trying to feed assistance for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1019285DC()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectAssistanceMapVector for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceMapVector(CLGpsAssistant_Type::DirectionOfTravelAssistance)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101928764()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectMapMatchedPosition for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectMapMatchedPosition(CLGpsAssistant_Type::MapMatchedPositionAssistance)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1019288EC()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectAssistanceMotion for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceMotion(CLMotionActivity)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101928A74()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Pedometer Assistance: attempted to provide pedometer speed assistance for a target with unknown or nonexistent GNSS hardware.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistancePedometerSpeed(const CLGNSSPedometerAssistanceCommand &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101928BFC()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Pedometer Assistance: attempted to provide pedometer speed constraint assistance for a target with unknown or nonexistent GNSS hardware.", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistancePedometerSpeedConstraint(const CLGNSSPedometerConstraintAssistanceCommand &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101928D84()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectRawSensorSamples for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectRawSensorSamples(const GNSS::RawSensorSampleVector &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101928F0C()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "No gnss HW or the gnss HW is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceSignalEnv(CLSignalEnvironmentProvider_Type::SignalEnvironmentType)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101929094()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to startTimeTransfer for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::startTimeTransfer(TimeTransferStateCallback, TimeTransferCallback)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10192921C()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to stopTimeTransfer for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::stopTimeTransfer()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1019293A4()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to send timeTransferPulse for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::timeTransferPulse(const BOOL)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10192952C(uint64_t a1, int a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)std::string buf = 67240192;
    int v6 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "does not have gnss or the gnss hardware is unknown,isAllowed,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    __int16 v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::sendAllowGnssDwellDutyCycling(BOOL)", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
}

void sub_1019296D8()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Tried to injectAssistanceDem for a target that either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::injectAssistanceDem(GNSS::ReliabilityIndication, const GNSS::DaemonLocation &, double, BOOL)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101929860()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::enableLocationServices()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_1019299E8()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::disableLocationServices()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101929B70()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::resetPrivacyInfo()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101929CF8()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::onTelephonyNotification(const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_101929E80()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::updateDeviceOperatingContext(const DeviceOperatingContext_t &)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10192A008()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::handleEmergencyStateChange(CLEmergencyState)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10192A190()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10192A318()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::handleNilrLockoutStatus(const BOOL)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10192A4A0()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::resetControlPlaneStatus()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_10192A628()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    int v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLGnssUnknownDevice::getControlPlaneStatusReport(CLGnssControlPlaneStatusReport &)", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
  return 0;
}

void sub_10192A7B4()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345948);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Target either does not have gnss or the gnss hardware is unknown", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345948);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssUnknownDevice::setBasebandCausesL1InterferenceAssertion(BOOL)", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10192A940(uint64_t a1)
{
  sub_101926DBC(a1);

  operator delete();
}

void sub_10192A978(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_10192A9A8(void *a1)
{
  int v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10192AA30(void *result, void *a2)
{
  if (a2 != result)
  {
    int v3 = result;
    __int16 v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10192AC90(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void *sub_10192AC9C(void *result, void *a2)
{
  if (a2 != result)
  {
    int v3 = result;
    __int16 v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        double result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        double result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      double result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10192AEFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10192AF08()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10192AFC0(_Unwind_Exception *a1)
{
}

void sub_10192AFD8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10192B080(_Unwind_Exception *a1)
{
}

void sub_10192B098()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101E46D14;
      v0[3] = unk_101E46D24;
      v0[4] = xmmword_101E46D34;
      v0[0] = xmmword_101E46CF4;
      v0[1] = unk_101E46D04;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10192B178(_Unwind_Exception *a1)
{
}

uint64_t sub_10192B190()
{
  uint64_t result = sub_1004BDA0C();
  dword_10248D870 = result;
  return result;
}

uint64_t sub_10192B1B0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100A3196C(a1, a2);
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_10192B1CC(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  return result;
}

uint64_t sub_10192B1D4(uint64_t a1, uint64_t a2)
{
  double v5 = sub_10016C458();
  if (*(unsigned char *)(a2 + 48)) {
    BOOL v6 = *(_DWORD *)(a2 + 288) >= 2u;
  }
  else {
    BOOL v6 = 0;
  }
  int v7 = !v6;
  int v8 = *(unsigned __int8 *)(a2 + 144);
  if (*(unsigned char *)(a2 + 144))
  {
    double v9 = *(double *)(a2 + 160);
    BOOL v10 = v9 > 0.0 && v9 < 0.5;
    if (v10 && *(double *)(a2 + 152) < 0.25) {
      *(double *)(a1 + 32) = v5;
    }
  }
  if (!v8 || (*(double *)(a2 + 160) > 0.0 ? (BOOL v12 = *(double *)(a2 + 152) <= 1.0) : (BOOL v12 = 1), v12))
  {
    double v13 = *(double *)(a1 + 40);
  }
  else
  {
    *(double *)(a1 + 40) = v5;
    double v13 = v5;
  }
  double v14 = *(double *)(a1 + 32);
  CLMotionActivity::getInit((uint64_t *)v25, v4);
  BYTE12(v26) = 0;
  DWORD2(v26) = 0;
  HIDWORD(v25[0]) = 0;
  if ((v7 & (v14 > v13)) != 0) {
    int v15 = 2;
  }
  else {
    int v15 = 1;
  }
  LODWORD(v25[0]) = v7 & (v14 > v13);
  DWORD1(v25[0]) = v15;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345968);
  }
  uint64_t v16 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void *)(a1 + 40);
    *(_DWORD *)std::string buf = 67110400;
    int v40 = v25[0];
    __int16 v41 = 1024;
    int v42 = v7;
    __int16 v43 = 1024;
    BOOL v44 = v14 > v13;
    __int16 v45 = 2048;
    double v46 = v5;
    __int16 v47 = 2048;
    uint64_t v48 = v17;
    __int16 v49 = 2048;
    uint64_t v50 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "SimModeAsst,motionContext,%d,outage,%d,stationaryMoreRecent,%d,mct,%.1f,lastStationary,%.1f,lastMoving,%.1f", buf, 0x32u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345968);
    }
    uint64_t v21 = *(void *)(a1 + 32);
    uint64_t v22 = *(void *)(a1 + 40);
    int v27 = 67110400;
    int v28 = v25[0];
    __int16 v29 = 1024;
    int v30 = v7;
    __int16 v31 = 1024;
    BOOL v32 = v14 > v13;
    __int16 v33 = 2048;
    double v34 = v5;
    __int16 v35 = 2048;
    uint64_t v36 = v21;
    __int16 v37 = 2048;
    uint64_t v38 = v22;
    uint64_t v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssSimulatorModeAssistance::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  v24[6] = v25[6];
  v24[7] = v25[7];
  char v24[8] = v26;
  void v24[2] = v25[2];
  _OWORD v24[3] = v25[3];
  unsigned char v24[4] = v25[4];
  v24[5] = v25[5];
  v24[0] = v25[0];
  v24[1] = v25[1];
  uint64_t v19 = *(void *)(a1 + 24);
  if (!v19) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(void *)v19 + 48))(v19, v24);
}

void sub_10192B518(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void *sub_10192B548@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xA) {
    int v2 = "UnhandledMethod";
  }
  else {
    int v2 = (&off_1023459A8)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_10192B574@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 9) {
    int v2 = "UnhandledSession";
  }
  else {
    int v2 = (&off_102345A00)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_10192B5A0@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 9) {
    int v2 = "UnhandledProtocol";
  }
  else {
    int v2 = (&off_102345A50)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_10192B5CC@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0x24) {
    int v2 = "UnhandledError";
  }
  else {
    int v2 = (&off_102345B08)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_10192B5F8@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 4) {
    int v2 = "UnhandledTandemCapability";
  }
  else {
    int v2 = (&off_102345C30)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_10192B624@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 4) {
    int v2 = "UnhandledPhoneNumberAvailability";
  }
  else {
    int v2 = (&off_102345C58)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_10192B650@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 2) {
    int v2 = "UnhandledCommunicationType";
  }
  else {
    int v2 = (&off_102345D18)[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_10192B67C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xB) {
    int v2 = "UnhandledAbortCauseType";
  }
  else {
    int v2 = (&off_102345C80)[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_10192B6A8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 48);
  }
  else
  {
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345988);
  }
  double v5 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v93 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(unsigned __int8 *)(a1 + 40);
    int v9 = *(_DWORD *)(a1 + 80);
    sub_10192B548(*(_DWORD *)(a1 + 84), v107);
    if (v108 >= 0) {
      BOOL v10 = v107;
    }
    else {
      BOOL v10 = (void **)v107[0];
    }
    __int16 v91 = v10;
    sub_10192B574(*(_DWORD *)(a1 + 88), v105);
    if (v106 >= 0) {
      __int16 v11 = v105;
    }
    else {
      __int16 v11 = (void **)v105[0];
    }
    __int16 v89 = v11;
    sub_10192B5A0(*(_DWORD *)(a1 + 92), v103);
    if (v104 >= 0) {
      BOOL v12 = v103;
    }
    else {
      BOOL v12 = (void **)v103[0];
    }
    __int16 v87 = v12;
    sub_1001170C0(*(_DWORD *)(a1 + 96), v101);
    if (v102 >= 0) {
      double v13 = v101;
    }
    else {
      double v13 = (void **)v101[0];
    }
    __int16 v85 = v13;
    uint64_t v14 = *(int *)(a1 + 136);
    if (v14 > 3) {
      int v15 = "UnhandledReport";
    }
    else {
      int v15 = (&off_102345CE0)[v14];
    }
    int v73 = *(_DWORD *)(a1 + 100);
    int v75 = *(_DWORD *)(a1 + 104);
    int v77 = *(_DWORD *)(a1 + 108);
    int v79 = *(_DWORD *)(a1 + 112);
    uint64_t v81 = *(void *)(a1 + 120);
    uint64_t v83 = *(void *)(a1 + 128);
    sub_100134750(v99, v15);
    if (v100 >= 0) {
      uint64_t v16 = v99;
    }
    else {
      uint64_t v16 = (void **)v99[0];
    }
    uint64_t v71 = v16;
    float v18 = *(float *)(a1 + 140);
    float v17 = *(float *)(a1 + 144);
    sub_10192B5CC(*(_DWORD *)(a1 + 148), v97);
    uint64_t v19 = (void **)v97[0];
    if (v98 >= 0) {
      uint64_t v19 = v97;
    }
    uint64_t v20 = *(int *)(a1 + 156);
    uint64_t v69 = v19;
    if (v20 > 2) {
      uint64_t v21 = "UnhandledHELOUsage";
    }
    else {
      uint64_t v21 = (&off_102345D00)[v20];
    }
    int v22 = *(unsigned __int8 *)(a1 + 152);
    int v23 = *(unsigned __int8 *)(a1 + 153);
    sub_100134750(__p, v21);
    if (v96 >= 0) {
      uint64_t v24 = __p;
    }
    else {
      uint64_t v24 = (void **)__p[0];
    }
    int v26 = *(_DWORD *)(a1 + 160);
    int v25 = *(_DWORD *)(a1 + 164);
    uint64_t v28 = *(void *)(a1 + 8);
    uint64_t v27 = *(void *)(a1 + 16);
    *(_DWORD *)std::string buf = 68296451;
    int v110 = 0;
    __int16 v111 = 2082;
    int v112 = "";
    __int16 v113 = 2049;
    *(void *)int v114 = v2;
    *(_WORD *)&v114[8] = 2049;
    *(void *)__int16 v115 = v3;
    *(_WORD *)&v115[8] = 2049;
    *(void *)&v115[10] = v4;
    *(_WORD *)&v115[18] = 2050;
    *(void *)&v115[20] = v93;
    *(_WORD *)&v115[28] = 2050;
    *(void *)&v115[30] = v6;
    *(_WORD *)&v115[38] = 2050;
    *(void *)int v116 = v7;
    *(_WORD *)&v116[8] = 1026;
    *(_DWORD *)__int16 v117 = v8;
    *(_WORD *)&v117[4] = 1026;
    *(_DWORD *)&v117[6] = v9;
    *(_WORD *)&v117[10] = 2082;
    *(void *)int v118 = v91;
    *(_WORD *)&v118[8] = 2082;
    *(void *)&v118[10] = v89;
    *(_WORD *)__int16 v119 = 2082;
    *(void *)&v119[2] = v87;
    *(_WORD *)&v119[10] = 2082;
    *(void *)int v120 = v85;
    *(_WORD *)&unsigned char v120[8] = 1025;
    *(_DWORD *)&v120[10] = v73;
    *(_WORD *)&v120[14] = 1025;
    *(_DWORD *)&v120[16] = v75;
    *(_WORD *)&v120[20] = 1025;
    *(_DWORD *)&v120[22] = v77;
    *(_WORD *)&v120[26] = 1025;
    *(_DWORD *)__int16 v121 = v79;
    *(_WORD *)&v121[4] = 2050;
    uint64_t v122 = v81;
    *(_WORD *)__int16 v123 = 2050;
    *(void *)&v123[2] = v83;
    *(_WORD *)uint64_t v124 = 2082;
    *(void *)&v124[2] = v71;
    *(_WORD *)__int16 v125 = 2050;
    *(double *)&v125[2] = v18;
    *(_WORD *)int v126 = 2050;
    *(double *)&v126[2] = v17;
    *(_WORD *)__int16 v127 = 2082;
    *(void *)&v127[2] = v69;
    LOWORD(v128) = 1026;
    *(_DWORD *)((char *)&v128 + 2) = v22;
    HIWORD(v128) = 1026;
    *(_DWORD *)__int16 v129 = v23;
    *(_WORD *)&v129[4] = 2082;
    *(void *)&v129[6] = v24;
    __int16 v130 = 1026;
    int v131 = v26;
    __int16 v132 = 1026;
    int v133 = v25;
    __int16 v134 = 2050;
    uint64_t v135 = v28;
    __int16 v136 = 2050;
    uint64_t v137 = v27;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLEmergencySessionReport part 1\", \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"accuracy\":\"%{public}f\", \"verticalAccuracy\":\"%{public}f\", \"ttff\":\"%{public}f\", \"positionValid\":%{public}hhd, \"source\":%{public}d, \"methodType\":%{public, location:escape_only}s, \"sessionType\":%{public, location:escape_only}s, \"protocol\":%{public, location:escape_only}s, \"rat\":%{public, location:escape_only}s, \"mcc\":%{private}d, \"mnc\":%{private}d, \"sid\":%{private}d, \"nid\":%{private}d, \"requestedTimeout\":\"%{public}f\", \"requestedAccuracy\":\"%{public}f\", \"requestReportType\":%{public, location:escape_only}s, \"transFreq\":\"%{public}f\", \"transBW\":\"%{public}f\", \"errorCode\":%{public, location:escape_only}s, \"HELOEnabled\":%{public}hhd, \"HELOInjected\":%{public}hhd, \"HELOUsed\":%{public, location:escape_only}s, \"sendError\":%{public}d, \"modemError\":%{public}d, \"starttime\":\"%{public}f\", \"stoptime\":\"%{public}f\"}", buf, 0x10Cu);
    if (v96 < 0) {
      operator delete(__p[0]);
    }
    if (v98 < 0) {
      operator delete(v97[0]);
    }
    if (v100 < 0) {
      operator delete(v99[0]);
    }
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    if (v104 < 0) {
      operator delete(v103[0]);
    }
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    if (v108 < 0) {
      operator delete(v107[0]);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102345988);
    }
  }
  __int16 v29 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v90 = *(unsigned __int8 *)(a1 + 168);
    int v88 = *(unsigned __int8 *)(a1 + 169);
    int v86 = *(unsigned __int8 *)(a1 + 170);
    uint64_t v92 = *(void *)(a1 + 176);
    int v94 = *(unsigned __int8 *)(a1 + 184);
    sub_10192B5F8(*(_DWORD *)(a1 + 188), v107);
    int v30 = v108;
    __int16 v31 = (void **)v107[0];
    int v32 = *(_DWORD *)(a1 + 192);
    int v33 = *(unsigned __int8 *)(a1 + 196);
    int v34 = *(unsigned __int8 *)(a1 + 197);
    int v35 = *(_DWORD *)(a1 + 200);
    int v36 = *(_DWORD *)(a1 + 204);
    int v70 = *(_DWORD *)(a1 + 208);
    int v72 = *(unsigned __int8 *)(a1 + 212);
    int v74 = *(_DWORD *)(a1 + 216);
    int v76 = *(_DWORD *)(a1 + 220);
    int v78 = *(_DWORD *)(a1 + 224);
    int v80 = *(_DWORD *)(a1 + 228);
    int v82 = *(_DWORD *)(a1 + 232);
    int v84 = *(_DWORD *)(a1 + 236);
    sub_10192B624(*(_DWORD *)(a1 + 240), v105);
    int v112 = "";
    __int16 v37 = v107;
    if (v30 < 0) {
      __int16 v37 = v31;
    }
    uint64_t v38 = (void **)v105[0];
    if (v106 >= 0) {
      uint64_t v38 = v105;
    }
    *(_DWORD *)int v114 = v90;
    *(_DWORD *)&v114[6] = v88;
    *(_DWORD *)&v115[2] = v86;
    *(void *)&v115[8] = v92;
    *(_DWORD *)&v115[18] = v94;
    *(void *)&v115[24] = v37;
    *(_DWORD *)&v115[34] = v32;
    *(_DWORD *)int v116 = v33;
    *(_DWORD *)&v116[6] = v34;
    *(_DWORD *)&v117[2] = v35;
    *(_WORD *)__int16 v117 = 1025;
    *(_WORD *)&v117[6] = 1025;
    *(_DWORD *)&v117[8] = v36;
    *(_DWORD *)&v118[2] = v70;
    *(_DWORD *)&v118[8] = v72;
    *(_DWORD *)&v118[14] = v74;
    *(_DWORD *)&v119[2] = v76;
    *(_DWORD *)&v119[8] = v78;
    *(_DWORD *)&v120[2] = v80;
    *(_DWORD *)&unsigned char v120[8] = v82;
    *(_DWORD *)&v120[14] = v84;
    __int16 v111 = 2082;
    *(_WORD *)&v115[22] = 2082;
    *(_WORD *)&v120[18] = 2082;
    int v39 = *(unsigned __int8 *)(a1 + 244);
    *(void *)&v120[20] = v38;
    int v40 = *(unsigned __int8 *)(a1 + 245);
    *(_DWORD *)&v121[2] = v39;
    __int16 v113 = 1026;
    *(_WORD *)&v114[4] = 1026;
    *(_WORD *)__int16 v115 = 1026;
    *(_WORD *)&v115[16] = 1026;
    *(_WORD *)&v115[32] = 1026;
    *(_WORD *)&v115[38] = 1026;
    *(_WORD *)&v116[4] = 1026;
    *(_WORD *)int v118 = 1026;
    *(_WORD *)&v118[6] = 1026;
    *(_WORD *)&v118[12] = 1026;
    *(_WORD *)__int16 v119 = 1026;
    *(_WORD *)&v119[6] = 1026;
    *(_WORD *)int v120 = 1026;
    *(_WORD *)&v120[6] = 1026;
    *(_WORD *)&v120[12] = 1026;
    *(_WORD *)__int16 v121 = 1026;
    LOWORD(v122) = 1026;
    *(_DWORD *)((char *)&v122 + 2) = v40;
    uint64_t v41 = *(void *)(a1 + 256);
    *(void *)__int16 v123 = *(void *)(a1 + 248);
    *(void *)uint64_t v124 = v41;
    uint64_t v42 = *(void *)(a1 + 272);
    *(void *)__int16 v125 = *(void *)(a1 + 264);
    *(void *)int v126 = v42;
    *(void *)__int16 v127 = *(void *)(a1 + 912);
    *(_WORD *)&v126[8] = 2049;
    *(_WORD *)&v127[8] = 2049;
    uint64_t v128 = *(void *)(a1 + 920);
    *(_WORD *)&v115[6] = 2050;
    HIWORD(v122) = 2050;
    *(_WORD *)&v123[8] = 2050;
    *(_WORD *)&v124[8] = 2050;
    *(_WORD *)&v125[8] = 2050;
    *(_WORD *)__int16 v129 = 2050;
    *(void *)&v129[2] = *(void *)(a1 + 928);
    *(_DWORD *)std::string buf = 68296451;
    int v110 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLEmergencySessionReport part 2\", \"wifiAssociated\":%{public}hhd, \"isTandemDP\":%{public}hhd, \"isOrbitFileAvailable\":%{public}hhd, \"orbitFileAge\":%{public}llu, \"wasNetworkReachable\":%{public}hhd, \"tandemCapability\":%{public, location:escape_only}s, \"nInstance\":%{public}u, \"isTandemVD\":%{public}hhd, \"isSimPresent\":%{public}hhd, \"subscriberMCC\":%{private}d, \"subscribeMNC\":%{private}d, \"satelliteReportCount\":%{public}u, \"HELORejected\":%{public}hhd, \"heloRejectReason\":%{public}u, \"numValidFixesSent\":%{public}d, \"numNoFixMessagesSent\":%{public}d, \"numSendSuccessForValidFix\":%{public}d, \"numSendFailForValidFixes\":%{public}d, \"lastHttpPostFailureCode\":%{public}d, \"phoneNumbersAvailable\":%{public, location:escape_only}s, \"wasNILRSent\":%{public}hhd, \"isNWRefLocAvailable\":%{public}hhd, \"nwRefLocUncertainity\":\"%{public}f\", \"nwRefLocDeviationFromHELO\":\"%{public}f\", \"nwRefLocDeviationFromCellLocation\":\"%{public}f\", \"nwRefLocDeviationFromFinalFix\":\"%{public}f\", \"nwRefLocLat\":\"%{private}f\", \"nwRefLocLon\":\"%{private}f\", \"nwRefLocConfidence\":\"%{public}f\"}", buf, 0xE8u);
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    if (v108 < 0) {
      operator delete(v107[0]);
    }
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102345988);
    }
  }
  __int16 v43 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v44 = *(int *)(a1 + 936);
    if (v44 > 2) {
      __int16 v45 = "UnhandledCommunicationType";
    }
    else {
      __int16 v45 = (&off_102345D18)[v44];
    }
    sub_100134750(v107, v45);
    if (v108 >= 0) {
      double v46 = v107;
    }
    else {
      double v46 = (void **)v107[0];
    }
    int v47 = *(unsigned __int8 *)(a1 + 940);
    uint64_t v48 = v105;
    sub_10192B67C(*(_DWORD *)(a1 + 944), v105);
    if (v106 < 0) {
      uint64_t v48 = (void **)v105[0];
    }
    __int16 v49 = v103;
    sub_10192B574(*(_DWORD *)(a1 + 948), v103);
    if (v104 < 0) {
      __int16 v49 = (void **)v103[0];
    }
    uint64_t v50 = *(int *)(a1 + 952);
    if (v50 > 2) {
      __int16 v51 = "UnhandledCommunicationType";
    }
    else {
      __int16 v51 = (&off_102345D18)[v50];
    }
    sub_100134750(v101, v51);
    uint64_t v52 = (void **)v101[0];
    if (v102 >= 0) {
      uint64_t v52 = v101;
    }
    uint64_t v53 = (void *)(a1 + 960);
    if (*(char *)(a1 + 983) < 0) {
      uint64_t v53 = (void *)*v53;
    }
    int v54 = *(_DWORD *)(a1 + 956);
    uint64_t v55 = (void *)(a1 + 984);
    if (*(char *)(a1 + 1007) < 0) {
      uint64_t v55 = (void *)*v55;
    }
    int v56 = *(_DWORD *)(a1 + 1008);
    int v57 = *(_DWORD *)(a1 + 1012);
    int v58 = *(unsigned __int8 *)(a1 + 1016);
    int v59 = *(unsigned __int8 *)(a1 + 1017);
    int v60 = *(unsigned __int8 *)(a1 + 1018);
    int v61 = *(_DWORD *)(a1 + 1048);
    int v62 = *(_DWORD *)(a1 + 1052);
    int v63 = *(unsigned __int8 *)(a1 + 1068);
    int v64 = *(unsigned __int8 *)(a1 + 1069);
    int v65 = *(unsigned __int8 *)(a1 + 1070);
    int v66 = *(unsigned __int8 *)(a1 + 1071);
    int v67 = *(unsigned __int8 *)(a1 + 1072);
    int v68 = *(_DWORD *)(a1 + 1076);
    *(_DWORD *)std::string buf = 68294402;
    int v110 = 0;
    __int16 v111 = 2082;
    int v112 = "";
    __int16 v113 = 2082;
    *(void *)int v114 = v46;
    *(_WORD *)&v114[8] = 1026;
    *(_DWORD *)__int16 v115 = v47;
    *(_WORD *)&v115[4] = 2082;
    *(void *)&v115[6] = v48;
    *(_WORD *)&v115[14] = 2082;
    *(void *)&v115[16] = v49;
    *(_WORD *)&v115[24] = 2082;
    *(void *)&v115[26] = v52;
    *(_WORD *)&v115[34] = 1026;
    *(_DWORD *)&v115[36] = v54;
    *(_WORD *)int v116 = 2082;
    *(void *)&v116[2] = v53;
    *(_WORD *)__int16 v117 = 2082;
    *(void *)&v117[2] = v55;
    *(_WORD *)&v117[10] = 1026;
    *(_DWORD *)int v118 = v56;
    *(_WORD *)&v118[4] = 1026;
    *(_DWORD *)&v118[6] = v57;
    *(_WORD *)&v118[10] = 1026;
    *(_DWORD *)&v118[12] = v58;
    *(_WORD *)&v118[16] = 1026;
    *(_DWORD *)__int16 v119 = v59;
    *(_WORD *)&v119[4] = 1026;
    *(_DWORD *)&v119[6] = v60;
    *(_WORD *)&v119[10] = 1026;
    *(_DWORD *)int v120 = v61;
    *(_WORD *)&v120[4] = 1026;
    *(_DWORD *)&v120[6] = v62;
    *(_WORD *)&v120[10] = 1026;
    *(_DWORD *)&v120[12] = v63;
    *(_WORD *)&v120[16] = 1026;
    *(_DWORD *)&v120[18] = v64;
    *(_WORD *)&v120[22] = 1026;
    *(_DWORD *)&v120[24] = v65;
    *(_WORD *)__int16 v121 = 1026;
    *(_DWORD *)&v121[2] = v66;
    LOWORD(v122) = 1026;
    *(_DWORD *)((char *)&v122 + 2) = v67;
    HIWORD(v122) = 1026;
    *(_DWORD *)__int16 v123 = v68;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLEmergencySessionReport part 3\", \"commType\":%{public, location:escape_only}s, \"isInActiveEmergency\":%{public}hhd, \"abortCause\":%{public, location:escape_only}s, \"overridingSessionType\":%{public, location:escape_only}s, \"overridingCommType\":%{public, location:escape_only}s, \"finalFixDeviationFromCellLocation\":%{public}d, \"fCarrierBundleVersion\":%{public, location:escape_only}s, \"fCarrierBundleID\":%{public, location:escape_only}s, \"locConfigCompatibilityVersion\":%{public}d, \"locConfigContentVersion\":%{public}d, \"isSUPLEnabled\":%{public}hhd, \"isDBHEnabled\":%{public}hhd, \"wasDBHLocationSent\":%{public}hhd, \"nwReportedFixDeviationFromDBH\":%{public}d, \"nwReportedFixDeviationFromWifiLocation\":%{public}d, \"fIsWlanFeatureEnabled\":%{public}hhd, \"isLocationSourceEnabled\":%{public}hhd, \"isRssiReportingEnabled\":%{public}hhd, \"wasRssiRequested\":%{public}hhd, \"wasServingApSent\":%{public}hhd, \"finalFixDeviationFromSuplEnd\":%{public}d}", buf, 0xA8u);
    if (v102 < 0) {
      operator delete(v101[0]);
    }
    if (v104 < 0) {
      operator delete(v103[0]);
    }
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    if (v108 < 0) {
      operator delete(v107[0]);
    }
  }
}

void sub_10192C034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a58 < 0) {
    operator delete(a53);
  }
  _Unwind_Resume(exception_object);
}

void sub_10192C0E0(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345988);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10192C1FC(a1 + 280);
    if (v5 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 68289283;
    int v7 = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2081;
    __int16 v11 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd,HELODATA\", \"heloData\":%{private, location:escape_only}s}", buf, 0x1Cu);
    if (v5 < 0) {
      operator delete(__p);
    }
  }
}

uint64_t sub_10192C1FC(uint64_t a1)
{
  sub_10010F274((uint64_t)v33);
  sub_100132EFC(v34, (uint64_t)"isInfoValid,", 12);
  uint64_t v2 = (void *)std::ostream::operator<<();
  sub_100132EFC(v2, (uint64_t)",wasHELOInjected,", 17);
  uint64_t v3 = (void *)std::ostream::operator<<();
  sub_100132EFC(v3, (uint64_t)",wasLastHELOInjected,", 21);
  uint64_t v4 = (void *)std::ostream::operator<<();
  sub_100132EFC(v4, (uint64_t)",wasLastHELORejected,", 21);
  char v5 = (void *)std::ostream::operator<<();
  sub_100132EFC(v5, (uint64_t)",heloRejectReason,", 18);
  uint64_t v6 = (void *)std::ostream::operator<<();
  int v7 = sub_100132EFC(v6, (uint64_t)",lastReceivedHELOLocation,", 26);
  __int16 v8 = (const char *)&v31;
  sub_1000AB340(a1 + 8);
  if (v32 < 0) {
    __int16 v8 = (const char *)v31;
  }
  size_t v9 = strlen(v8);
  __int16 v10 = sub_100132EFC(v7, (uint64_t)v8, v9);
  __int16 v11 = sub_100132EFC(v10, (uint64_t)",lastReceivedCellLocation,", 26);
  BOOL v12 = (const char *)&v29;
  sub_1000AB340(a1 + 164);
  if (v30 < 0) {
    BOOL v12 = (const char *)v29;
  }
  size_t v13 = strlen(v12);
  uint64_t v14 = sub_100132EFC(v11, (uint64_t)v12, v13);
  int v15 = sub_100132EFC(v14, (uint64_t)",lastReceivedWifiLocation,", 26);
  uint64_t v16 = (const char *)&v27;
  sub_1000AB340(a1 + 320);
  if (v28 < 0) {
    uint64_t v16 = (const char *)v27;
  }
  size_t v17 = strlen(v16);
  float v18 = sub_100132EFC(v15, (uint64_t)v16, v17);
  uint64_t v19 = sub_100132EFC(v18, (uint64_t)",lastReceivedLACLocation,", 25);
  uint64_t v20 = a1 + 476;
  p_p = (const char *)&__p;
  sub_1000AB340(v20);
  if (v26 < 0) {
    p_p = (const char *)__p;
  }
  size_t v22 = strlen(p_p);
  sub_100132EFC(v19, (uint64_t)p_p, v22);
  if (v26 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v32 < 0) {
    operator delete(v31);
  }
  std::stringbuf::str();
  *(void *)((char *)v33
  v34[0] = v23;
  if (v35 < 0) {
    operator delete((void *)v34[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10192C550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_101A129A8((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_10192C5D4(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345988);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    v9[0] = 68289026;
    v9[1] = 0;
    LOWORD(v9[2]) = 2082;
    *(void *)((char *)&v9[2] + 2) = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#awd CLEmergencySessionReport::reset\"}", (uint8_t *)v9, 0x12u);
  }
  bzero(v9, 0x4D8uLL);
  sub_10084CBBC((uint64_t)v9);
  memcpy((void *)a1, v9, 0x3C0uLL);
  uint64_t v3 = (void **)(a1 + 960);
  if (*(char *)(a1 + 983) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)uint64_t v3 = v10;
  *(void *)(a1 + 976) = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10) = 0;
  uint64_t v4 = (void **)(a1 + 984);
  if (*(char *)(a1 + 1007) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)uint64_t v4 = v12;
  *(void *)(a1 + 1000) = v13;
  HIBYTE(v13) = 0;
  LOBYTE(v12) = 0;
  *(_OWORD *)(a1 + 1088) = v19;
  *(_OWORD *)(a1 + 1104) = v20;
  *(_OWORD *)(a1 + 1120) = v21[0];
  *(_OWORD *)(a1 + 1040) = v16;
  *(_OWORD *)(a1 + 1056) = v17;
  *(_OWORD *)(a1 + 1072) = v18;
  long long v5 = v15;
  *(_OWORD *)(a1 + 1008) = v14;
  *(_OWORD *)(a1 + 1024) = v5;
  *(_OWORD *)(a1 + 1132) = *(_OWORD *)((char *)v21 + 12);
  uint64_t v6 = (void **)(a1 + 1152);
  if (*(char *)(a1 + 1175) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = __p;
  *(void *)(a1 + 1168) = v23;
  HIBYTE(v23) = 0;
  LOBYTE(__p) = 0;
  int v7 = (_OWORD *)(a1 + 1176);
  if (*(char *)(a1 + 1199) < 0)
  {
    operator delete(*(void **)(a1 + 1176));
    int v8 = SHIBYTE(v23);
    *int v7 = v24;
    *(void *)(a1 + 1192) = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    *(_OWORD *)(a1 + 1200) = v26;
    *(_OWORD *)(a1 + 1216) = v27;
    *(void *)(a1 + 1232) = v28;
    if (v8 < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    *(void *)(a1 + 1192) = v25;
    *int v7 = v24;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    *(_OWORD *)(a1 + 1200) = v26;
    *(_OWORD *)(a1 + 1216) = v27;
    *(void *)(a1 + 1232) = v28;
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)v10);
  }
}

uint64_t sub_10192C880(uint64_t result, int a2, int a3)
{
  if (a2 && (a3 & 1) != 0)
  {
    int v3 = 4;
  }
  else if (a2)
  {
    if ((*(_DWORD *)(result + 240) - 3) >= 2) {
      int v3 = 2;
    }
    else {
      int v3 = 4;
    }
  }
  else if (a3)
  {
    if (((*(_DWORD *)(result + 240) - 2) & 0xFFFFFFFD) != 0) {
      int v3 = 3;
    }
    else {
      int v3 = 4;
    }
  }
  else
  {
    int v3 = 1;
  }
  *(_DWORD *)(result + 240) = v3;
  return result;
}

void sub_10192C8D8(uint64_t a1, uint64_t a2)
{
  int v3 = 4;
  switch(*(_DWORD *)(a2 + 96))
  {
    case 0:
    case 2:
    case 5:
    case 0xC:
    case 0xE:
      if (sub_1000E6DB4(a2))
      {
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102345988);
        }
        uint64_t v4 = qword_1024193E8;
        if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning Valid location with unknown or obsolete type", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193E0 != -1) {
            dispatch_once(&qword_1024193E0, &stru_102345988);
          }
          long long v5 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void Emergency::CLEmergencySessionReport::setPositionSource(const CLDaemonLocation &)", "%s\n", v5);
          if (v5 != (char *)buf) {
            free(v5);
          }
        }
      }
      int v3 = 0;
      goto LABEL_11;
    case 1:
    case 3:
    case 9:
      int v3 = 1;
      goto LABEL_11;
    case 4:
    case 0xA:
    case 0xB:
    case 0xD:
      int v3 = 2;
      goto LABEL_11;
    case 6:
    case 7:
    case 8:
LABEL_11:
      *(_DWORD *)(a1 + 80) = v3;
      break;
    default:
      return;
  }
}

void sub_10192CAFC(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_10192CB2C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 30;
  *(unsigned char *)(a1 + 4) = 1;
  *(void *)(a1 + 8) = off_1022DE6F0;
  *(void *)(a1 + 16) = 30;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 144) = 0;
  sub_1006BAF64((uint64_t)v4, (uint64_t)&unk_10248A250);
  sub_1006B9D8C((void *)(a1 + 152), a2, (uint64_t)v4);
}

void sub_10192CC24(_Unwind_Exception *a1)
{
  sub_1006B9E58(v3);
  *(void *)(v1 + 8) = v2;
  sub_10041F48C((void *)(v1 + 40));
  _Unwind_Resume(a1);
}

void sub_10192CC5C(uint64_t a1)
{
  sub_1000C7F88(buf);
  uint64_t v2 = (unsigned char *)(a1 + 144);
  int v3 = sub_1000D2988(*(uint64_t *)buf, "ForceCPIEnabled", (BOOL *)(a1 + 144));
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D30);
    }
    uint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v5 = *v2;
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CPI,fForceCPIEnabled, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345D30);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsCpiHandler::updateDefaultWrites()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  sub_1000C7F88(buf);
  uint64_t v6 = (BOOL *)(a1 + 145);
  int v7 = sub_1000D2988(*(uint64_t *)buf, "ForceCPIDisabled", v6);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v7)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D30);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      BOOL v9 = *v6;
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CPI,fForceCPIDisabled, %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345D30);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsCpiHandler::updateDefaultWrites()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  if (*v2)
  {
    if (*v6) {
      sub_10192D664();
    }
  }
}

void sub_10192CFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10192D010(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a2 + 96);
  if (v3 == 11 || v3 == 4)
  {
    *(void *)(result + 104) = *(void *)(a3 + 344);
    if (*(_DWORD *)(a2 + 84) > 0x44u) {
      int v5 = 0;
    }
    else {
      int v5 = *(_DWORD *)(result + 112) + 1;
    }
    *(_DWORD *)(result + 112) = v5;
    *(_DWORD *)(result + 136) = 0;
  }
  return result;
}

void sub_10192D050(uint64_t a1)
{
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_101E46D80;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 96) = 0;
  sub_100B0AD14((void *)(a1 + 8));
  *(_DWORD *)(a1 + 140) = 0;
}

void sub_10192D094(uint64_t a1, int a2, int a3, int a4, int a5, double a6, float a7, double a8)
{
  if (sub_10010145C()) {
    double v16 = 15.0;
  }
  else {
    double v16 = 5.0;
  }
  if (a8 <= 10.0 || a2 == 0)
  {
    if ((a8 > 10.0 || a8 < 0.0) && a2 == 0)
    {
      BOOL v22 = 0;
      *(_DWORD *)(a1 + 140) = 0;
      int v21 = 1;
    }
    else
    {
      int v21 = 0;
      unsigned int v20 = *(_DWORD *)(a1 + 140) + 1;
      *(_DWORD *)(a1 + 140) = v20;
      BOOL v22 = v20 > 0x28;
    }
  }
  else
  {
    int v21 = 0;
    *(_DWORD *)(a1 + 140) = 0;
    BOOL v22 = 1;
  }
  uint64_t v23 = (unsigned char *)sub_10067B400();
  double v24 = 15.0;
  if (v23)
  {
    if (v23[1])
    {
      double v24 = 50.0;
      if (!*v23) {
        double v24 = 15.0;
      }
    }
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (!*(unsigned char *)(a1 + 4) || !a3 || v24 < a7)
    {
      *(_DWORD *)(a1 + 112) = 0;
      *(_OWORD *)(a1 + 120) = xmmword_101E46D80;
      *(_DWORD *)(a1 + 136) = 0;
      *(void *)(a1 + 96) = 0;
      sub_100B0AD14((void *)(a1 + 8));
      *(_DWORD *)(a1 + 140) = 0;
      *(unsigned char *)(a1 + 88) = 0;
      goto LABEL_50;
    }
    *(double *)(a1 + 128) = v16;
    if (a7 < 0.0) {
      goto LABEL_40;
    }
    if (*(void *)(a1 + 80))
    {
      if (a6 - *(double *)(a1 + 96) < 3.0)
      {
        *(double *)std::string buf = a7;
        sub_100B0AD90(a1 + 8, (double *)buf);
        *(double *)(a1 + 96) = a6;
        unint64_t v25 = *(void *)(a1 + 80);
        if (v25 >= *(void *)(a1 + 16) && (!v25 || *(double *)(a1 + 24) / (double)v25 < 0.1)) {
          *(void *)(a1 + 128) = 0x403F000000000000;
        }
        goto LABEL_40;
      }
      sub_100B0AD14((void *)(a1 + 8));
    }
    *(double *)std::string buf = a7;
    sub_100B0AD90(a1 + 8, (double *)buf);
    *(double *)(a1 + 96) = a6;
LABEL_40:
    if (*(int *)(a1 + 112) >= 4) {
      *(void *)(a1 + 128) = 0x403F000000000000;
    }
    if (*(_DWORD *)(a1 + 136) >= 5u) {
      *(void *)(a1 + 128) = 0x4056800000000000;
    }
    if (a5 && *(double *)(a1 + 128) < 31.0) {
      *(void *)(a1 + 128) = 0x403F000000000000;
    }
    if (a4 == 2 && *(double *)(a1 + 128) < 11.0) {
      *(void *)(a1 + 128) = 0x4026000000000000;
    }
    goto LABEL_50;
  }
  if (v24 > a7 && *(unsigned char *)(a1 + 4) && a3)
  {
    *(_DWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 120) = xmmword_101E46D80;
    *(_DWORD *)(a1 + 136) = 0;
    *(void *)(a1 + 96) = 0;
    sub_100B0AD14((void *)(a1 + 8));
    *(_DWORD *)(a1 + 140) = 0;
    *(unsigned char *)(a1 + 88) = 1;
    *(double *)(a1 + 128) = v16;
  }
LABEL_50:
  if (a3)
  {
    if (*(unsigned char *)(a1 + 144)) {
      *(unsigned char *)(a1 + 88) = 1;
    }
    if (*(unsigned char *)(a1 + 145))
    {
      int v26 = 0;
      *(unsigned char *)(a1 + 88) = 0;
      double v27 = a6 - *(double *)(a1 + 104);
      goto LABEL_63;
    }
  }
  double v28 = *(double *)(a1 + 104);
  double v27 = a6 - v28;
  if (*(unsigned char *)(a1 + 88) && (double v29 = *(double *)(a1 + 128), a6 - *(double *)(a1 + 120) > v29))
  {
    if (v28 <= 0.0) {
      goto LABEL_60;
    }
    if (v27 > v29)
    {
      if (v27 <= v29 + v29)
      {
LABEL_61:
        int v26 = 1;
        goto LABEL_63;
      }
LABEL_60:
      ++*(_DWORD *)(a1 + 136);
      goto LABEL_61;
    }
    int v26 = 0;
    *(_DWORD *)(a1 + 136) = 0;
  }
  else
  {
    int v26 = 0;
  }
LABEL_63:
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345D30);
  }
  char v30 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v31 = *(void *)(a1 + 128);
    int v32 = *(unsigned __int8 *)(a1 + 88);
    int v33 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)std::string buf = 67111680;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v22;
    *(_WORD *)&unsigned char buf[14] = 1024;
    int v36 = v21;
    __int16 v37 = 2048;
    double v38 = a8;
    __int16 v39 = 1024;
    int v40 = a3;
    __int16 v41 = 2048;
    uint64_t v42 = v31;
    __int16 v43 = 1024;
    int v44 = a4;
    __int16 v45 = 1024;
    int v46 = v32;
    __int16 v47 = 1024;
    int v48 = v26;
    __int16 v49 = 2048;
    double v50 = v27;
    __int16 v51 = 1024;
    int v52 = v33;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CPI,isLowPower,%d,isLowForAWhile,%d,isNotLowForAWhile,%d,ageOfPowerMode,%.1lf,isWiFiPowered,%d,scanInterval,%.1lf,signalEnv,%d,enabled,%d,requestAScan,%d,timeSinceLastWifiLoc,%.1lf,fEmptyResultCounter,%d", buf, 0x50u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D30);
    }
    int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGpsCpiHandler::manageCPI(CFTimeInterval, float, const BOOL, const CFTimeInterval, const BOOL, CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const BOOL)", "%s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  if (v26)
  {
    *(_OWORD *)std::string buf = xmmword_101D29FE0;
    LOBYTE(v36) = 0;
    sub_1006B9E94(a1 + 152, (uint64_t *)buf);
    *(double *)(a1 + 120) = a6;
  }
}

void sub_10192D634(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10192D664()
{
  if (qword_1024193D0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v0 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Only one of fForceCPIEnabled and fForceCPIDisabled can set to be true\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345D30);
      }
    }
    uint64_t v1 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      sub_1001DB29C();
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v1, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Only one of fForceCPIEnabled and fForceCPIDisabled can set to be true", "{\"msg%{public}.0s\":\"Only one of fForceCPIEnabled and fForceCPIDisabled can set to be true\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345D30);
      }
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      sub_1001DB29C();
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Only one of fForceCPIEnabled and fForceCPIDisabled can set to be true\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
LABEL_11:
    dispatch_once(&qword_1024193D0, &stru_102345D30);
  }
}

void sub_10192D83C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10192D8F4(_Unwind_Exception *a1)
{
}

void sub_10192D90C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    _WORD *v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10192D9B4(_Unwind_Exception *a1)
{
}

uint64_t sub_10192D9CC(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  *(void *)(a1 + 33) = 0;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  *(void *)(a1 + 59) = 0;
  sub_101853820(a1 + 72, a2);
  *(unsigned char *)(a1 + 104) = 0;
  int v18 = 0;
  sub_1000C7F88(buf);
  int v3 = sub_10006EF84(*(uint64_t *)buf, "GpsLogInertialSensors", &v18);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v3) {
    *(unsigned char *)(a1 + 64) = v18 == 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345D50);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "GpsLogInertialSensors,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D50);
    }
    int v13 = *(unsigned __int8 *)(a1 + 64);
    int v19 = 67240192;
    int v20 = v13;
    long long v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssAssistanceInertial::CLGnssAssistanceInertial(CLSetCommandToExecute)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  sub_1000C7F88(buf);
  int v6 = sub_10006EF84(*(uint64_t *)buf, "GpsLoggingVerbose", &v18);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v6) {
    *(unsigned char *)(a1 + 65) = v18 == 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345D50);
  }
  int v7 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v8 = *(unsigned __int8 *)(a1 + 65);
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "GpsLoggingVerbose,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D50);
    }
    int v15 = *(unsigned __int8 *)(a1 + 65);
    int v19 = 67240192;
    int v20 = v15;
    double v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssAssistanceInertial::CLGnssAssistanceInertial(CLSetCommandToExecute)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  sub_1000C7F88(buf);
  int v9 = sub_10006EF84(*(uint64_t *)buf, "GpsForceDisableINS", &v18);
  if (v18) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v10)
  {
    *(unsigned char *)(a1 + 66) = 1;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D50);
    }
    uint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning force INS disabled, do not inject sensor data.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345D50);
      }
      LOWORD(v19) = 0;
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssAssistanceInertial::CLGnssAssistanceInertial(CLSetCommandToExecute)", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
  }
  return a1;
}

void sub_10192DF00(_Unwind_Exception *a1)
{
  sub_1008508E4(v1);
  _Unwind_Resume(a1);
}

void sub_10192DF4C(uint64_t a1, uint64_t a2, double a3)
{
  double v6 = sub_1000D3E50();
  if (vabdd_f64(v6, *(double *)(a1 + 8)) < a3) {
    *(unsigned char *)(a2 + 152) = 1;
  }
  if (vabdd_f64(v6, *(double *)(a1 + 32)) < a3) {
    *(unsigned char *)(a2 + 153) = 1;
  }
}

void sub_10192DFB0(uint64_t a1, float **a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    int v3 = *((unsigned __int8 *)*a2 + 8);
    if (v3 == 2)
    {
      *(void *)&long long buf = off_1022E6C40;
      *((void *)&buf + 1) = CFAbsoluteTimeGetCurrent();
      int v15 = *a2;
      long long v14 = a2[1];
      while (v15 != v14)
      {
        *(void *)&v20[7] = *(void *)v15;
        *(void *)&v20[15] = *(void *)(v15 + 3);
        *(float *)&v20[23] = v15[5];
        uint64_t v16 = sub_101282D9C();
        sub_10128431C(v16, (uint64_t)&buf);
        v15 += 6;
      }
    }
    else if (v3 == 1)
    {
      *(void *)&long long buf = off_1022E6BE8;
      *((void *)&buf + 1) = CFAbsoluteTimeGetCurrent();
      int v5 = *a2;
      uint64_t v4 = a2[1];
      while (v5 != v4)
      {
        *(void *)&v20[7] = *(void *)v5;
        *(void *)&v20[15] = *(void *)(v5 + 3);
        *(float *)&v20[23] = v5[5];
        uint64_t v6 = sub_101282D9C();
        sub_10128431C(v6, (uint64_t)&buf);
        v5 += 6;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D50);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3);
      char v9 = *((unsigned char *)*a2 + 8);
      uint64_t v10 = *(void *)*a2;
      double v11 = (*a2)[3];
      double v12 = (*a2)[4];
      double v13 = (*a2)[5];
      LODWORD(buf) = 134350336;
      *(void *)((char *)&buf + 4) = v8;
      WORD6(buf) = 258;
      BYTE14(buf) = v9;
      HIBYTE(buf) = 2;
      char v19 = 8;
      *(void *)int v20 = v10;
      *(_WORD *)&unsigned char v20[8] = 2050;
      *(double *)&v20[10] = v11;
      *(_WORD *)&v20[18] = 2050;
      *(double *)&v20[20] = v12;
      __int16 v21 = 2050;
      double v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "GPSSENSOR,sampleNumber,%{public}zu,sesnorType,%{public}hhu,timestamp,%{public}.3lf,x,%{public}.3f,y,%{public}.3f,z,%{public}.3f", (uint8_t *)&buf, 0x37u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345D50);
      }
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::logIntoBinary(const GNSS::RawSensorSampleVector &)", "%s\n", v17);
      if (v17 != (char *)&buf) {
        free(v17);
      }
    }
  }
}

void sub_10192E330(uint64_t **a1@<X1>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    uint64_t v27 = (uint64_t)(a2 + 2);
    do
    {
      if ((*v3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*((_DWORD *)v3 + 3) & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (v3[2] & 0x7FFFFFFFu) > 0x7F7FFFFF
        || (*((_DWORD *)v3 + 5) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345D50);
        }
        char v9 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v10 = *v3;
          char v11 = *((unsigned char *)v3 + 8);
          double v12 = *((float *)v3 + 3);
          double v13 = *((float *)v3 + 4);
          double v14 = *((float *)v3 + 5);
          *(_DWORD *)long long buf = 134350080;
          uint64_t v29 = v10;
          __int16 v30 = 258;
          char v31 = v11;
          char v32 = 2;
          char v33 = 8;
          double v34 = v12;
          __int16 v35 = 2050;
          double v36 = v13;
          __int16 v37 = 2050;
          double v38 = v14;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "GPSSENSOR,badSample,timeStamp,%{public}.3lf,sensorType,%{public}hhu,x,%{public}.5f,y,%{public}.5f,z,%{public}.5f", buf, 0x2Du);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345D50);
          }
          int v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "GNSS::RawSensorSampleVector CLGnssAssistanceInertial::removeBadSamples(const GNSS::RawSensorSampleVector &)", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
        }
      }
      else
      {
        uint64_t v6 = (char *)a2[1];
        int v5 = (char *)a2[2];
        if (v6 >= v5)
        {
          unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*a2) >> 3);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a2) >> 3);
          if (2 * v17 > v16) {
            unint64_t v16 = 2 * v17;
          }
          if (v17 >= 0x555555555555555) {
            unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18) {
            char v19 = (char *)sub_1000DA5D8(v27, v18);
          }
          else {
            char v19 = 0;
          }
          int v20 = &v19[24 * v15];
          long long v21 = *(_OWORD *)v3;
          *((void *)v20 + 2) = v3[2];
          *(_OWORD *)int v20 = v21;
          uint64_t v23 = (char *)*a2;
          double v22 = (char *)a2[1];
          double v24 = v20;
          if (v22 != *a2)
          {
            do
            {
              long long v25 = *(_OWORD *)(v22 - 24);
              *((void *)v24 - 1) = *((void *)v22 - 1);
              *(_OWORD *)(v24 - 24) = v25;
              v24 -= 24;
              v22 -= 24;
            }
            while (v22 != v23);
            double v22 = (char *)*a2;
          }
          unint64_t v8 = v20 + 24;
          *a2 = v24;
          a2[1] = v20 + 24;
          a2[2] = &v19[24 * v18];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          long long v7 = *(_OWORD *)v3;
          *((void *)v6 + 2) = v3[2];
          *(_OWORD *)uint64_t v6 = v7;
          unint64_t v8 = v6 + 24;
        }
        a2[1] = v8;
      }
      v3 += 3;
    }
    while (v3 != v4);
  }
}

void sub_10192E714(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10192E738(double **a1@<X1>, void **a2@<X8>, double a3@<D0>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = *a1;
  int v5 = a1[1];
  if (*a1 != v5)
  {
    do
    {
      if (*v4 <= a3)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345D50);
        }
        char v11 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          double v12 = *v4;
          *(_DWORD *)long long buf = 134349312;
          double v26 = a3;
          __int16 v27 = 2050;
          double v28 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,ReverseSampleTimestamp,lastTime,%{public}.3lf,timestamp,%{public}.3lf", buf, 0x16u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345D50);
          }
          double v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "GNSS::RawSensorSampleVector CLGnssAssistanceInertial::getSamplesWithMonotonicTimeStamp(CFTimeInterval, const GNSS::RawSensorSampleVector &)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
      }
      else
      {
        unint64_t v8 = (char *)a2[1];
        long long v7 = (char *)a2[2];
        if (v8 >= v7)
        {
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)*a2) >> 3);
          unint64_t v15 = v14 + 1;
          if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_1001D7FD4();
          }
          unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a2) >> 3);
          if (2 * v16 > v15) {
            unint64_t v15 = 2 * v16;
          }
          if (v16 >= 0x555555555555555) {
            unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v17 = v15;
          }
          if (v17) {
            unint64_t v18 = (char *)sub_1000DA5D8((uint64_t)(a2 + 2), v17);
          }
          else {
            unint64_t v18 = 0;
          }
          char v19 = (double *)&v18[24 * v14];
          long long v20 = *(_OWORD *)v4;
          _OWORD v19[2] = v4[2];
          *(_OWORD *)char v19 = v20;
          double v22 = (char *)*a2;
          long long v21 = (double *)a2[1];
          uint64_t v23 = v19;
          if (v21 != *a2)
          {
            do
            {
              long long v24 = *(_OWORD *)(v21 - 3);
              *(v23 - 1) = *(v21 - 1);
              *(_OWORD *)(v23 - 3) = v24;
              v23 -= 3;
              v21 -= 3;
            }
            while (v21 != (double *)v22);
            long long v21 = (double *)*a2;
          }
          uint64_t v10 = (char *)(v19 + 3);
          *a2 = v23;
          a2[1] = v19 + 3;
          a2[2] = &v18[24 * v17];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)v4;
          *((double *)v8 + 2) = v4[2];
          *(_OWORD *)unint64_t v8 = v9;
          uint64_t v10 = v8 + 24;
        }
        a2[1] = v10;
        a3 = *v4;
      }
      v4 += 3;
    }
    while (v4 != v5);
  }
}

void sub_10192EA64(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10192EA88(uint64_t a1, char **a2)
{
  double v3 = *(double *)(a1 + 56);
  if (v3 <= 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D50);
    }
    double v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v14 = *(void *)(a1 + 56);
      *(_DWORD *)long long buf = 134349056;
      uint64_t v33 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "GPSSENSOR,invalidInterval,%{public}.3lf", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345D50);
      }
      uint64_t v27 = *(void *)(a1 + 56);
      int v30 = 134349056;
      uint64_t v31 = v27;
      double v26 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceInertial::mitigateSpuriousGyroSamples(GNSS::RawSensorSampleVector &)", "%s\n");
      goto LABEL_37;
    }
  }
  else if (*(unsigned char *)a1)
  {
    int v5 = *a2;
    unsigned int v6 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
    if (v6 >= 2)
    {
      double v7 = *(double *)(a1 + 32);
      if (v7 <= 0.0 || (double v8 = *(double *)v5 - v7, v28 = *((double *)v5 + 3) - *(double *)v5, v29 = v8, v8 >= v3 * 2.1))
      {
        char v9 = 0;
        char v10 = 0;
        unsigned __int8 v11 = 0;
        unsigned __int8 v12 = 0;
      }
      else
      {
        char v9 = sub_10192EF6C(&v29, &v28, (float *)(a1 + 44), (float *)v5 + 3, (float *)v5 + 9);
        char v10 = sub_10192EF6C(&v29, &v28, (float *)(a1 + 48), (float *)*a2 + 4, (float *)*a2 + 10);
        unsigned __int8 v11 = sub_10192EF6C(&v29, &v28, (float *)(a1 + 52), (float *)*a2 + 5, (float *)*a2 + 11);
        unsigned __int8 v12 = v9 | v10 | v11;
      }
      uint64_t v15 = v6 - 1;
      if (v15 >= 2)
      {
        uint64_t v16 = v15 - 1;
        uint64_t v17 = 36;
        do
        {
          unint64_t v18 = &(*a2)[v17];
          double v19 = *(double *)(v18 - 12);
          double v20 = v19 - *(double *)(v18 - 36);
          double v28 = *(double *)(v18 + 12) - v19;
          double v29 = v20;
          if (v9)
          {
            int v21 = 0;
            if ((v10 & 1) == 0) {
              goto LABEL_18;
            }
          }
          else
          {
            int v21 = sub_10192EF6C(&v29, &v28, (float *)v18 - 6, (float *)v18, (float *)v18 + 6);
            if ((v10 & 1) == 0)
            {
LABEL_18:
              int v22 = sub_10192EF6C(&v29, &v28, (float *)&(*a2)[v17 - 20], (float *)&(*a2)[v17 + 4], (float *)&(*a2)[v17 + 28]);
              if (v11) {
                goto LABEL_22;
              }
              goto LABEL_19;
            }
          }
          int v22 = 0;
          if (v11)
          {
LABEL_22:
            unsigned __int8 v11 = 0;
            goto LABEL_23;
          }
LABEL_19:
          unsigned __int8 v11 = sub_10192EF6C(&v29, &v28, (float *)&(*a2)[v17 - 16], (float *)&(*a2)[v17 + 8], (float *)&(*a2)[v17 + 32]);
LABEL_23:
          unsigned __int8 v12 = (v21 | v22 | (v12 | v11) & 1) != 0;
          char v9 = v21 != 0;
          char v10 = v22 != 0;
          v17 += 24;
          --v16;
        }
        while (v16);
      }
      if ((v12 & 1) != 0 && *(unsigned char *)(a1 + 65))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345D50);
        }
        uint64_t v23 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = *(void *)*a2;
          *(_DWORD *)long long buf = 134349056;
          uint64_t v33 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,Gyro,SpuriousSampleDetected,%{public}.3f", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345D50);
          }
          uint64_t v25 = *(void *)*a2;
          int v30 = 134349056;
          uint64_t v31 = v25;
          double v26 = (uint8_t *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::mitigateSpuriousGyroSamples(GNSS::RawSensorSampleVector &)", "%s\n");
LABEL_37:
          if (v26 != buf) {
            free(v26);
          }
        }
      }
    }
  }
}

uint64_t sub_10192EF6C(double *a1, double *a2, float *a3, float *a4, float *a5)
{
  double v5 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    return 0;
  }
  uint64_t result = 0;
  double v7 = *a2;
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v5 > 0.0 && v7 > 0.0)
  {
    if ((double v8 = (float)(*a4 - *a3) / v5, v9 = (float)(*a5 - *a4) / v7, v8 > 18000.0) && v9 < -18000.0
      || (uint64_t result = 0, v8 < -18000.0) && v9 > 18000.0)
    {
      float v10 = v5 * (float)(*a5 - *a3) / (v5 + v7) + *a3;
      *a4 = v10;
      return 1;
    }
  }
  return result;
}

void sub_10192F03C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 104)) {
    return;
  }
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D50);
    }
    double v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "GPSSENSOR,no inertial sensor samples", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_37:
        LOWORD(v32) = 0;
        unsigned __int8 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
        return;
      }
LABEL_86:
      dispatch_once(&qword_1024193D0, &stru_102345D50);
      goto LABEL_37;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(*(void *)a2 + 8) - 1 < 2)
    {
      sub_10192E330((uint64_t **)a2, &v29);
      if (v29 == v30)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345D50);
        }
        unsigned __int8 v12 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "GPSSENSOR,allSensorSampleBAD", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345D50);
          }
          LOWORD(v32) = 0;
          double v13 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v13);
          if (v13 != (char *)buf) {
            free(v13);
          }
        }
        goto LABEL_73;
      }
      if (*((unsigned char *)v29 + 8) == 1) {
        uint64_t v4 = 8;
      }
      else {
        uint64_t v4 = 32;
      }
      if (*((unsigned char *)v29 + 8) == 1) {
        uint64_t v5 = a1 + 8;
      }
      else {
        uint64_t v5 = a1 + 32;
      }
      sub_10192E738((double **)&v29, &__p, *(double *)(a1 + v4));
      if (__p == v28)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345D50);
        }
        uint64_t v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          char v15 = *((unsigned char *)v30 - 16);
          uint64_t v16 = *(void *)(a1 + v4);
          uint64_t v17 = *(v30 - 3);
          *(_DWORD *)long long buf = 16909056;
          char v39 = v15;
          __int16 v40 = 2050;
          uint64_t v41 = v16;
          __int16 v42 = 2050;
          uint64_t v43 = v17;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,timeReset,eType,%{public}hhu,lastTime,%{public}.3lf,timestamp,%{public}.3lf", buf, 0x19u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345D50);
          }
          char v22 = *((unsigned char *)v30 - 16);
          uint64_t v23 = *(void *)(a1 + v4);
          uint64_t v24 = *(v30 - 3);
          int v32 = 16909056;
          char v33 = v22;
          __int16 v34 = 2050;
          uint64_t v35 = v23;
          __int16 v36 = 2050;
          uint64_t v37 = v24;
          uint64_t v25 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v25);
          if (v25 != (char *)buf) {
            free(v25);
          }
        }
        uint64_t v18 = *(v30 - 1);
        *(_OWORD *)uint64_t v5 = *(_OWORD *)(v30 - 3);
        *(void *)(v5 + 16) = v18;
        goto LABEL_71;
      }
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v28 - (unsigned char *)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3) - v6 < 2)
      {
        if (*((unsigned char *)__p + 8) == 2)
        {
          if (v6 < 2)
          {
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_102345D50);
            }
            double v19 = qword_1024193D8;
            if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,only 1 Gyro sample,no spur dectection", buf, 2u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1024193D0 != -1) {
                dispatch_once(&qword_1024193D0, &stru_102345D50);
              }
              LOWORD(v32) = 0;
              double v26 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v26);
              if (v26 != (char *)buf) {
                free(v26);
              }
            }
          }
          else
          {
            sub_10192EA88(a1, (char **)&__p);
          }
        }
        uint64_t v20 = *((void *)v28 - 1);
        *(_OWORD *)uint64_t v5 = *(_OWORD *)(v28 - 24);
        *(void *)(v5 + 16) = v20;
        sub_10192DFB0(a1, (float **)&__p);
        if (*(void *)(a1 + 96))
        {
          if (!*(unsigned char *)(a1 + 66))
          {
            v31[0] = off_102345D80;
            v31[1] = &__p;
            v31[3] = v31;
            sub_1018DC324(a1 + 72);
            sub_100850860(v31);
          }
          goto LABEL_71;
        }
        if (*(unsigned char *)(a1 + 66)) {
          goto LABEL_71;
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345D50);
        }
        int v21 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "GPSSENSOR,no Device Command To Inject Accel or Gyro", buf, 2u);
        }
        if (!sub_10013D1A0(115, 0)) {
          goto LABEL_71;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345D50);
        }
        LOWORD(v32) = 0;
        double v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v8);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345D50);
        }
        double v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,GPSSENSOR,More than one sample timestamps have issue, sample block discarded", buf, 2u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_71;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345D50);
        }
        LOWORD(v32) = 0;
        double v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::process(const GNSS::RawSensorSampleVector &)", "%s\n", v8);
      }
      if (v8 != (char *)buf) {
        free(v8);
      }
LABEL_71:
      if (__p)
      {
        double v28 = __p;
        operator delete(__p);
      }
LABEL_73:
      if (v29)
      {
        int v30 = v29;
        operator delete(v29);
      }
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D50);
    }
    float v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "GPSSENSOR,type error,neither Accel nor Gyro", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_37;
      }
      goto LABEL_86;
    }
  }
}

void sub_10192FAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_10192FB1C(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 104) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345D50);
  }
  double v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a1 + 104);
    *(_DWORD *)long long buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "GPSSENSOR,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345D50);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceInertial::feedAirborneActivity(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_10192FCD4(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10192FD08()
{
}

void *sub_10192FD1C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102345D80;
  result[1] = v3;
  return result;
}

uint64_t sub_10192FD64(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102345D80;
  a2[1] = v2;
  return result;
}

uint64_t sub_10192FD90(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 136))(a2, *(void *)(a1 + 8));
}

uint64_t sub_10192FDC0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10192FE00()
{
}

void sub_10192FE0C(_DWORD *a1, uint64_t a2, int a3)
{
  *a1 = a3;
  int v4 = "Unknown";
  uint64_t v5 = "Unknown";
  if (a3 == 1) {
    uint64_t v5 = "CLSupl1";
  }
  if (a3 != 255) {
    int v4 = v5;
  }
  if (a3) {
    unint64_t v6 = (char *)v4;
  }
  else {
    unint64_t v6 = "CLSupl0";
  }
  sub_100134750(&__p, v6);
  *(void *)long long buf = a1;
  operator new();
}

void sub_1019304DC()
{
}

void sub_1019304F8(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x101930550);
}

void sub_101930508()
{
}

uint64_t **sub_101930558(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v19 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    int v4 = a4;
    uint64_t v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_10193967C(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_102345DF0);
LABEL_3:
  double v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    float v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      float v10 = (void *)*v10;
    }
    if (v7 > 3) {
      unsigned __int8 v11 = "StateUnknown";
    }
    else {
      unsigned __int8 v11 = off_102346480[v7];
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v24) >= 0) {
      unsigned __int8 v12 = __p;
    }
    else {
      unsigned __int8 v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v26 = 1024;
    unsigned int v27 = v7;
    __int16 v28 = 2080;
    double v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v24) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    uint64_t v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v14 = (void *)*v14;
    }
    sub_1019368C8(v7, v17);
    if (v18 >= 0) {
      char v15 = v17;
    }
    else {
      char v15 = (void **)v17[0];
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v21 = 1024;
    unsigned int v22 = v7;
    __int16 v23 = 2080;
    uint64_t v24 = v15;
    uint64_t v16 = (char *)_os_log_send_and_compose_impl();
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaSupl>::setStateHandler(State, StateHandler) [T = CLEurekaSupl]", "%s\n", v16);
    if (v16 != buf) {
      free(v16);
    }
  }
  *(void *)long long buf = &v19;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v19, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_101930844(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 0:
      sub_1019326C8(a1);
      sub_10193286C(a1);
      return 0;
    case 1:
      sub_10193294C(a1);
      return 0;
    case 2:
      if (*(unsigned char *)(a1 + 136)) {
        return 2;
      }
      if (*(unsigned char *)(a1 + 137)) {
        return 2;
      }
      return 1;
    case 6:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious event received", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_45;
      }
      goto LABEL_52;
    case 7:
      v12[0] = off_102345EA0;
      v12[1] = a1;
      void v12[3] = v12;
      uint64_t v7 = *(void *)(a1 + 1536);
      if (!v7) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v7 + 48))(v7, v12);
      sub_101832920(v12);
      sub_101932E2C(a1, *(void *)(a1 + 1496), 24, (uint64_t)"SuplNotEnabled");
      return 0;
    case 8:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      int v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious event received", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_45;
      }
      goto LABEL_52;
    case 9:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious event received", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_45;
      }
      goto LABEL_52;
    case 10:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      double v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious SummaryStatsReceived event received", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345DF0);
        }
        unsigned __int8 v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Disabled(CLEurekaSupl::Event)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
      goto LABEL_35;
    case 11:
LABEL_35:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      os_log_type_t v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning SUPL disabled, spurious SessionDone event received", buf, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
LABEL_52:
      }
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
LABEL_45:
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Disabled(CLEurekaSupl::Event)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 0;
    default:
      return result;
  }
}

void sub_101930F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101832920((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101930FA4(uint64_t a1, int a2)
{
  uint64_t result = 1;
  switch(a2)
  {
    case 0:
      sub_1019326C8(a1);
      return 1;
    case 3:
      return 0;
    case 4:
      return 2;
    case 6:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning SUPL in idle, spurious event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_43;
      }
      goto LABEL_46;
    case 7:
      v11[0] = off_102345F30;
      v11[1] = a1;
      void v11[3] = v11;
      uint64_t v8 = *(void *)(a1 + 1536);
      if (!v8) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, v11);
      sub_101832920(v11);
      sub_101932E2C(a1, *(void *)(a1 + 1496), 27, (uint64_t)"NotInEmergency");
      return 1;
    case 8:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      int v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning SUPL in idle, spurious event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_43;
      }
      goto LABEL_46;
    case 9:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning SUPL in idle, spurious event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_43;
      }
      goto LABEL_46;
    case 10:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Warning SUPL in idle, spurious SummaryStatsReceived event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_43;
      }
      goto LABEL_46;
    case 11:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      os_log_type_t v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning SUPL in idle, spurious SessionDone event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 1;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_43;
      }
LABEL_46:
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
LABEL_43:
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Idle(CLEurekaSupl::Event)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
      return 1;
    default:
      return result;
  }
}

void sub_101931680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101832920((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1019316CC(uint64_t a1, int a2)
{
  uint64_t result = 2;
  switch(a2)
  {
    case 0:
      sub_1019326C8(a1);
      return 2;
    case 2:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning SUPL ready, spurious event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_30;
      }
      goto LABEL_47;
    case 3:
      return 0;
    case 5:
      if (*(unsigned char *)(a1 + 136)) {
        return 2;
      }
      else {
        return 1;
      }
    case 7:
      uint64_t v9 = *(void *)(a1 + 1496);
      if (!v9)
      {
        sub_101939800(2);
        __break(1u);
LABEL_47:
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
LABEL_30:
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Ready(CLEurekaSupl::Event)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
        return 2;
      }
      if (!sub_101933224(a1, v9))
      {
        v12[0] = off_102346030;
        v12[1] = a1;
        void v12[3] = v12;
        uint64_t v11 = *(void *)(a1 + 1536);
        if (!v11) {
          sub_10015E48C();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v12);
        sub_101832920(v12);
        return 2;
      }
      v13[0] = off_102345FB0;
      v13[1] = a1;
      void v13[3] = v13;
      uint64_t v10 = *(void *)(a1 + 1536);
      if (!v10) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v10 + 48))(v10, v13);
      sub_101832920(v13);
      return 3;
    case 8:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      int v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Warning SUPL ready, spurious event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_30;
      }
      goto LABEL_47;
    case 10:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning SUPL ready, spurious SummaryStatsReceived event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_30;
      }
      goto LABEL_47;
    case 11:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning SUPL ready, spurious SessionDone event received", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_30;
      }
      goto LABEL_47;
    default:
      return result;
  }
}

void sub_101931D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_101832920(va);
  _Unwind_Resume(a1);
}

uint64_t sub_101931D58(uint64_t a1, int a2)
{
  uint64_t result = 3;
  switch(a2)
  {
    case 0:
      sub_101933798(a1 + 3136, *(_DWORD *)a1, 1);
      sub_1019337F4(a1 + 8, 9, 180.0);
      *(unsigned char *)(a1 + 2492) = *(unsigned char *)(a1 + 137);
      goto LABEL_29;
    case 1:
      sub_101933798(a1 + 3136, *(_DWORD *)a1, 0);
      sub_1019342E0(a1 + 8, 9);
      if ((sub_10073CBFC() & 1) == 0)
      {
        v29[0] = off_1023460B0;
        _OWORD v29[3] = v29;
        uint64_t v5 = *(void *)(a1 + 1536);
        if (!v5) {
          sub_10015E48C();
        }
        (*(void (**)(uint64_t, void *))(*(void *)v5 + 48))(v5, v29);
        sub_101832920(v29);
      }
      goto LABEL_29;
    case 3:
      return 0;
    case 7:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Warning Supl, Received new SUPL request while another session is still ongoing and hence denying", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345DF0);
        }
        __int16 v23 = 0;
        double v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Session(CLEurekaSupl::Event)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      v24[0] = off_102346130;
      v24[1] = a1;
      _OWORD v24[3] = v24;
      uint64_t v9 = *(void *)(a1 + 1536);
      if (!v9) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v9 + 48))(v9, v24);
      sub_101832920(v24);
      sub_101932E2C(a1, *(void *)(a1 + 1496), 24, (uint64_t)"AlreadyInSession");
      goto LABEL_29;
    case 9:
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102345E10);
      }
      uint64_t v10 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68289026;
        int v26 = 0;
        __int16 v27 = 2082;
        __int16 v28 = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Supl session timeout\"}", buf, 0x12u);
      }
      *(_DWORD *)(a1 + 1700) = 2;
      sub_10192B6A8(a1 + 1552);
      if (*(void *)(a1 + 3128))
      {
        sub_101832D90((uint64_t)v14, a1 + 1552);
        uint64_t v11 = *(void *)(a1 + 3128);
        if (!v11) {
          sub_10015E48C();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 48))(v11, v14);
        if (v22 < 0) {
          operator delete(__p);
        }
        if (v20 < 0) {
          operator delete(v19);
        }
        if (v18 < 0) {
          operator delete(v17);
        }
        if (v16 < 0) {
          operator delete(v15);
        }
      }
      sub_10192C5D4(a1 + 1552);
      goto LABEL_45;
    case 10:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      int v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#SUPL,#ca,Summary stats received in Session state", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345DF0);
        }
        __int16 v23 = 0;
        unsigned __int8 v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Session(CLEurekaSupl::Event)", "%s\n", v12);
        if (v12 != (char *)buf) {
          free(v12);
        }
      }
      sub_101934774((double *)a1);
LABEL_29:
      uint64_t result = 3;
      break;
    case 11:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#SUPL session, SessionDone event received", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345DF0);
        }
        __int16 v23 = 0;
        uint64_t v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaSupl::State CLEurekaSupl::handler_Session(CLEurekaSupl::Event)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
LABEL_45:
      if (*(unsigned char *)(a1 + 136))
      {
        uint64_t result = 2;
      }
      else if (*(unsigned char *)(a1 + 137))
      {
        uint64_t result = 2;
      }
      else
      {
        uint64_t result = 1;
      }
      break;
    default:
      return result;
  }
  return result;
}

void sub_10193242C(_Unwind_Exception *a1)
{
  sub_101832920((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_101932494(_DWORD *a1, uint64_t a2, int a3)
{
}

uint64_t sub_1019324A0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Supl,Destroyed\n", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLEurekaSupl::~CLEurekaSupl()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_1019326C8(a1);

  *(void *)(a1 + 3224) = 0;
  sub_101833030((void *)(a1 + 3168));
  sub_101833480((void *)(a1 + 3136));
  sub_100850B38((void *)(a1 + 3104));
  if (*(char *)(a1 + 2751) < 0) {
    operator delete(*(void **)(a1 + 2728));
  }
  if (*(char *)(a1 + 2727) < 0) {
    operator delete(*(void **)(a1 + 2704));
  }
  if (*(char *)(a1 + 2559) < 0) {
    operator delete(*(void **)(a1 + 2536));
  }
  if (*(char *)(a1 + 2535) < 0) {
    operator delete(*(void **)(a1 + 2512));
  }
  sub_1018330B4((void *)(a1 + 1512));
  sub_10084DD34(a1 + 144);
  sub_10193859C(a1 + 8);
  return a1;
}

void sub_1019326BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

double sub_1019326C8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Supl,Initialized state machine data\n", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::resetStateData()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  double result = 0.0;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_OWORD *)(a1 + 1496) = 0u;
  return result;
}

void *sub_10193286C(uint64_t a1)
{
  double result = (void *)sub_10073CD80();
  if (result)
  {
    char v3 = sub_101829C28(*(_DWORD *)a1);
    uint64_t v5 = off_1023463B0;
    char v6 = v3;
    uint64_t v7 = &v5;
    uint64_t v4 = *(void *)(a1 + 1536);
    if (!v4) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, uint64_t (***)()))(*(void *)v4 + 48))(v4, &v5);
    return sub_101832920(&v5);
  }
  return result;
}

void sub_101932938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101832920((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_10193294C(uint64_t a1)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  uint64_t v2 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Supl,initializeSupl", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102345E10);
    }
    __int16 v17 = 0;
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::initializeSupl()", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  char v3 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 1140);
    *(_DWORD *)long long buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v24 = 2082;
    *(void *)&void v24[2] = "";
    *(_WORD *)&v24[10] = 2082;
    *(void *)&v24[12] = "initializesupl";
    __int16 v25 = 1026;
    int v26 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s, \"Supl,using udp port config\":%{public}d}", buf, 0x22u);
  }
  if (sub_10073CD80())
  {
    int v5 = sub_101829C28(*(_DWORD *)a1);
    char v6 = v5;
    if (v5 != 255)
    {
      *(void *)long long buf = 0;
      *(void *)uint64_t v24 = 0;
      *(void *)&char v24[8] = 0;
      sub_1004BF998((int)&v17, (unint64_t *)buf, (unsigned __int8 *)(a1 + 1112));
      __p[1] = 0;
      uint64_t v16 = 0;
      __p[0] = 0;
      sub_10016989C(__p, *(const void **)buf, *(uint64_t *)v24, *(void *)v24 - *(void *)buf);
      char v20 = 0;
      uint64_t v7 = operator new(0x28uLL);
      *(void *)uint64_t v7 = off_1023462B0;
      v7[8] = v6;
      *((_OWORD *)v7 + 1) = *(_OWORD *)__p;
      *((void *)v7 + 4) = v16;
      __p[1] = 0;
      uint64_t v16 = 0;
      __p[0] = 0;
      char v20 = v7;
      uint64_t v8 = *(void *)(a1 + 1536);
      if (!v8) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, v19);
      sub_101832920(v19);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (*(void *)buf)
      {
        *(void *)uint64_t v24 = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
    v18[0] = off_102346330;
    v18[1] = a1;
    v18[3] = v18;
    uint64_t v9 = *(void *)(a1 + 1536);
    if (!v9) {
      sub_10015E48C();
    }
    uint64_t v10 = v18;
    (*(void (**)(uint64_t, void *))(*(void *)v9 + 48))(v9, v18);
  }
  else
  {
    v22[0] = off_1023461B0;
    v22[1] = a1;
    v22[3] = v22;
    uint64_t v11 = *(void *)(a1 + 1536);
    if (!v11) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v22);
    sub_101832920(v22);
    v21[0] = off_102346230;
    v21[3] = v21;
    uint64_t v12 = *(void *)(a1 + 1536);
    if (!v12) {
      sub_10015E48C();
    }
    uint64_t v10 = v21;
    (*(void (**)(uint64_t, void *))(*(void *)v12 + 48))(v12, v21);
  }
  return sub_101832920(v10);
}

void sub_101932DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  if (a33) {
    operator delete(a33);
  }
  _Unwind_Resume(exception_object);
}

void sub_101932E2C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  uint64_t v8 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)int v32 = a4;
    *(_WORD *)&v32[8] = 1026;
    *(_DWORD *)&v32[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#Supl,isRejected,reason,%{public}s,errorCode,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102345E10);
    }
    int v27 = 136446466;
    uint64_t v28 = a4;
    __int16 v29 = 1026;
    int v30 = a3;
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::logRejectedSupl(const CLEurekaNilrTypes::SuplInit &, Emergency::SessionErrorCode, const char *)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  sub_10084CBBC((uint64_t)buf);
  double Current = CFAbsoluteTimeGetCurrent();
  int v38 = 1;
  int v10 = *(unsigned __int8 *)(a2 + 72);
  if (v10 == 4) {
    int v11 = 3;
  }
  else {
    int v11 = 0;
  }
  if (v10 == 1) {
    int v11 = 2;
  }
  if (!*(unsigned char *)(a2 + 72)) {
    int v11 = 1;
  }
  if (v10 == 2) {
    int v11 = 4;
  }
  if (v10 == 3) {
    int v11 = 5;
  }
  if (v10 == 5) {
    int v11 = 8;
  }
  if (v10 == 6) {
    int v11 = 7;
  }
  if (v10 == 7) {
    int v11 = 9;
  }
  if (v10 == 8) {
    int v11 = 6;
  }
  *(double *)&v32[4] = Current;
  if (v10 == 9) {
    int v12 = 10;
  }
  else {
    int v12 = v11;
  }
  int v35 = 2;
  int v34 = v12;
  LOBYTE(Current) = *(unsigned char *)(a2 + 200);
  double v37 = (pow(1.1, (double)*(unint64_t *)&Current) + -1.0) * 10.0;
  long double v36 = ldexp(1.0, *(unsigned __int8 *)(a2 + 203));
  char v41 = *(unsigned char *)(a1 + 137);
  int v13 = *(_DWORD *)(a2 + 36);
  unsigned int v14 = v13 + 1;
  int v15 = v13 + 2;
  if (v14 >= 3) {
    int v15 = 0;
  }
  int v38 = v15;
  int v40 = *(_DWORD *)a1;
  int v39 = a3;
  char v33 = 0;
  sub_10192B6A8((uint64_t)buf);
  if (*(void *)(a1 + 3128))
  {
    sub_101832D90((uint64_t)v18, (uint64_t)buf);
    uint64_t v16 = *(void *)(a1 + 3128);
    if (!v16) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v16 + 48))(v16, v18);
    if (v26 < 0) {
      operator delete(__p);
    }
    if (v24 < 0) {
      operator delete(v23);
    }
    if (v22 < 0) {
      operator delete(v21);
    }
    if (v20 < 0) {
      operator delete(v19);
    }
  }
  if (a3 == 27) {
    sub_1019368F4(a1);
  }
  if (v49 < 0) {
    operator delete(v48);
  }
  if (v47 < 0) {
    operator delete(v46);
  }
  if (v45 < 0) {
    operator delete(v44);
  }
  if (v43 < 0) {
    operator delete(v42);
  }
}

void sub_1019331F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10083788C((uint64_t)va);
  sub_10083788C((uint64_t)&STACK[0x510]);
  _Unwind_Resume(a1);
}

uint64_t sub_101933224(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a2 + 8;
    int v6 = *(_DWORD *)(a2 + 36);
    if (*(char *)(a2 + 31) < 0) {
      uint64_t v5 = *(void *)(a2 + 8);
    }
    unsigned int v7 = *(unsigned __int8 *)(a1 + 1144);
    *(_DWORD *)long long buf = 68290306;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "isvalidsupl";
    *(_WORD *)&buf[28] = 1026;
    *(_DWORD *)&buf[30] = v6;
    *(_WORD *)&buf[34] = 2082;
    *(void *)&unsigned char buf[36] = v5;
    *(_WORD *)&buf[44] = 1026;
    *(_DWORD *)&buf[46] = (v7 >> 2) & 1;
    *(_WORD *)&buf[50] = 1026;
    *(_DWORD *)&buf[52] = v7 & 1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s, \"trigger\":%{public}d, \"url\":%{public, location:escape_only}s, \"allowhslpmismatch\":%{public}d, \"allownonemergencysupl\":%{public}d}", buf, 0x38u);
  }
  sub_10084CBBC((uint64_t)buf);
  double Current = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)&buf[136] = 1;
  int v9 = *(unsigned __int8 *)(a2 + 72);
  if (v9 == 4) {
    int v10 = 3;
  }
  else {
    int v10 = 0;
  }
  if (v9 == 1) {
    int v10 = 2;
  }
  if (!*(unsigned char *)(a2 + 72)) {
    int v10 = 1;
  }
  if (v9 == 2) {
    int v10 = 4;
  }
  if (v9 == 3) {
    int v10 = 5;
  }
  if (v9 == 5) {
    int v10 = 8;
  }
  if (v9 == 6) {
    int v10 = 7;
  }
  if (v9 == 7) {
    int v10 = 9;
  }
  if (v9 == 8) {
    int v10 = 6;
  }
  *(double *)&uint8_t buf[8] = Current;
  if (v9 == 9) {
    int v11 = 10;
  }
  else {
    int v11 = v10;
  }
  *(_DWORD *)&buf[84] = v11;
  *(_DWORD *)&buf[88] = 2;
  LOBYTE(Current) = *(unsigned char *)(a2 + 200);
  *(double *)&buf[128] = (pow(1.1, (double)*(unint64_t *)&Current) + -1.0) * 10.0;
  *(void *)&buf[120] = ldexp(1.0, *(unsigned __int8 *)(a2 + 203));
  buf[940] = *(unsigned char *)(a1 + 137);
  int v12 = *(_DWORD *)(a2 + 36);
  unsigned int v13 = v12 + 1;
  int v14 = v12 + 2;
  if (v13 >= 3) {
    int v14 = 0;
  }
  *(_DWORD *)&buf[136] = v14;
  *(_DWORD *)&buf[192] = *(_DWORD *)a1;
  v25[0] = (uint64_t)buf;
  v25[1] = a1;
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  int v15 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)char v26 = 68289794;
    int v27 = 0;
    __int16 v28 = 2082;
    __int16 v29 = "";
    __int16 v30 = 1026;
    *(_DWORD *)uint64_t v31 = *(_DWORD *)&buf[84];
    *(_WORD *)&void v31[4] = 2050;
    *(void *)&v31[6] = *(void *)&buf[128];
    *(_WORD *)&v31[14] = 2050;
    *(void *)&v31[16] = *(void *)&buf[120];
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#awd SUPL init fields\", \"methodtype\":%{public}d, \"requestedAccuracy\":\"%{public}f\", \"requestedtimeout\":\"%{public}f\"}", v26, 0x2Cu);
  }
  if (*(_DWORD *)(a2 + 36) != -1)
  {
    uint64_t v16 = "notSingleShot";
    int v17 = 7;
LABEL_37:
    sub_101936CF4(v25, v17, (uint64_t)v16);
    uint64_t v18 = 0;
    goto LABEL_55;
  }
  uint64_t v19 = *(unsigned __int8 *)(a2 + 31);
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(a2 + 16);
  }
  if (v19)
  {
    unsigned int v20 = *(unsigned __int8 *)(a1 + 1144);
    if ((v20 & 4) == 0 && !sub_10102B2B0((uint64_t *)(a2 + 8), a1 + 1088, (v20 >> 3) & 1))
    {
      uint64_t v16 = "hslpMismatch";
      int v17 = 23;
      goto LABEL_37;
    }
  }
  if (!*(unsigned char *)(a1 + 137) && (*(unsigned char *)(a1 + 1144) & 1) == 0)
  {
    uint64_t v21 = *(unsigned __int8 *)(a2 + 31);
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(a2 + 16);
    }
    if (!v21)
    {
      uint64_t v16 = "nonEmergencySupl";
      goto LABEL_67;
    }
  }
  if (*(_DWORD *)(a2 + 32) == 3 && !*(_DWORD *)(a1 + 1140))
  {
    uint64_t v16 = "udpSuplInitNotAllowed";
LABEL_67:
    int v17 = 24;
    goto LABEL_37;
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  char v22 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)char v26 = 68289538;
    int v27 = 0;
    __int16 v28 = 2082;
    __int16 v29 = "";
    __int16 v30 = 2082;
    *(void *)uint64_t v31 = "Supl,isValidSupl";
    *(_WORD *)&v31[8] = 2082;
    *(void *)&v31[10] = "Pass";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s, \"result\":%{public, location:escape_only}s}", v26, 0x26u);
  }
  memcpy((void *)(a1 + 1552), buf, 0x3C0uLL);
  std::string::operator=((std::string *)(a1 + 2512), &v33);
  std::string::operator=((std::string *)(a1 + 2536), &v34);
  *(_OWORD *)(a1 + 2640) = v40;
  *(_OWORD *)(a1 + 2656) = v41;
  *(_OWORD *)(a1 + 2672) = v42[0];
  long long v23 = v35;
  *(_OWORD *)(a1 + 2576) = v36;
  *(_OWORD *)(a1 + 2592) = v37;
  *(_OWORD *)(a1 + 2608) = v38;
  *(_OWORD *)(a1 + 2624) = v39;
  *(_OWORD *)(a1 + 2684) = *(_OWORD *)((char *)v42 + 12);
  *(_OWORD *)(a1 + 2560) = v23;
  std::string::operator=((std::string *)(a1 + 2704), &v43);
  std::string::operator=((std::string *)(a1 + 2728), &__p);
  *(_OWORD *)(a1 + 2752) = v45;
  *(_OWORD *)(a1 + 2768) = v46;
  *(void *)(a1 + 2784) = v47;
  *(CFAbsoluteTime *)(a1 + 3208) = CFAbsoluteTimeGetCurrent();
  uint64_t v18 = 1;
LABEL_55:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  return v18;
}

void sub_101933778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10083788C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_101933798(uint64_t a1, int a2, char a3)
{
  int v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

void sub_1019337F4(uint64_t a1, signed int a2, double a3)
{
  unsigned int v41 = a2;
  int v4 = *(NSObject **)(a1 + 80);
  if (!v4)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    int v32 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      std::string v33 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        std::string v33 = (void *)*v33;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "%sInvoking timers without callback queue set", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      long long v37 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long long v37 = (void *)*v37;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v37;
      long long v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaSupl>::setTimeoutEvent(Event, double) [T = CLEurekaSupl]", "%s\n", v38);
      if (v38 != buf) {
        free(v38);
      }
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    std::string v34 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
    }
    long long v35 = qword_1024193D8;
    if (os_signpost_enabled((os_log_t)qword_1024193D8))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
    }
    long long v36 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68289539;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = "assert";
      *(_WORD *)&buf[28] = 2081;
      *(void *)&buf[30] = "false";
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np();
    __break(1u);
  }
  if (a3 < 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    unsigned int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      uint64_t v8 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v8 = (void *)*v8;
      }
      sub_10193689C(a2, __p);
      if (v49 >= 0) {
        int v9 = __p;
      }
      else {
        int v9 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v9;
      *(_WORD *)&unsigned char buf[22] = 2050;
      *(double *)&unsigned char buf[24] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "%sCannot start timer, event, %{public}s, timeOutSec, %{public}.2f", buf, 0x20u);
      if (SHIBYTE(v49) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      int v10 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v10 = (void *)*v10;
      }
      sub_10193689C(a2, v42);
      if (v45 >= 0) {
        int v11 = v42;
      }
      else {
        int v11 = *(unsigned char **)v42;
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v10;
      __int16 v47 = 2082;
      int v48 = v11;
      __int16 v49 = 2050;
      double v50 = a3;
      int v12 = (char *)_os_log_send_and_compose_impl();
      if (v45 < 0) {
        operator delete(*(void **)v42);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLStateMachine<CLEurekaSupl>::setTimeoutEvent(Event, double) [T = CLEurekaSupl]", "%s\n", v12);
LABEL_80:
      if (v12 != buf) {
        free(v12);
      }
      return;
    }
    return;
  }
  uint64_t v13 = *(void *)(a1 + 64);
  if (v13)
  {
    uint64_t v14 = a1 + 64;
    do
    {
      signed int v15 = *(_DWORD *)(v13 + 32);
      BOOL v16 = v15 < a2;
      if (v15 >= a2) {
        int v17 = (uint64_t *)v13;
      }
      else {
        int v17 = (uint64_t *)(v13 + 8);
      }
      if (!v16) {
        uint64_t v14 = v13;
      }
      uint64_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 64 && *(_DWORD *)(v14 + 32) <= a2)
    {
      uint64_t v18 = *(NSObject **)(v14 + 40);
      if (v18)
      {
LABEL_37:
        dispatch_time_t v20 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        dispatch_source_set_timer(v18, v20, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345DF0);
        }
        uint64_t v21 = qword_1024193D8;
        os_log_type_t v22 = *(unsigned char *)(a1 + 120);
        if (os_log_type_enabled((os_log_t)qword_1024193D8, v22))
        {
          long long v23 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            long long v23 = (void *)*v23;
          }
          sub_10193689C(v41, __p);
          if (v49 >= 0) {
            char v24 = __p;
          }
          else {
            char v24 = *(unsigned char **)__p;
          }
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = v23;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&unsigned char buf[14] = v24;
          *(_WORD *)&unsigned char buf[22] = 2048;
          *(double *)&unsigned char buf[24] = a3;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%sevent,%s,timeout,%.2f", buf, 0x20u);
          if (SHIBYTE(v49) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_102345DF0);
          }
          __int16 v25 = (void *)(a1 + 96);
          if (*(char *)(a1 + 119) < 0) {
            __int16 v25 = (void *)*v25;
          }
          sub_10193689C(v41, v42);
          if (v45 >= 0) {
            char v26 = v42;
          }
          else {
            char v26 = *(unsigned char **)v42;
          }
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v25;
          __int16 v47 = 2080;
          int v48 = v26;
          __int16 v49 = 2048;
          double v50 = a3;
          int v12 = (char *)_os_log_send_and_compose_impl();
          if (v45 < 0) {
            operator delete(*(void **)v42);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaSupl>::setTimeoutEvent(Event, double) [T = CLEurekaSupl]", "%s\n", v12);
          goto LABEL_80;
        }
        return;
      }
    }
  }
  uint64_t v19 = (uint64_t *)dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, v4);
  if (v19)
  {
    uint64_t v18 = v19;
    *(void *)long long buf = &v41;
    sub_1000FEE0C((uint64_t **)(a1 + 56), (int *)&v41, (uint64_t)&unk_101D0B290, (_DWORD **)buf)[5] = v19;
    dispatch_source_set_timer(v18, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_101938A80;
    handler[3] = &unk_1022B2410;
    handler[4] = a1;
    unsigned int v40 = v41;
    dispatch_source_set_event_handler(v18, handler);
    dispatch_resume(v18);
    goto LABEL_37;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  int v27 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
  {
    __int16 v28 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v28 = (void *)*v28;
    }
    sub_10193689C(a2, buf);
    if (buf[23] >= 0) {
      __int16 v29 = buf;
    }
    else {
      __int16 v29 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v28;
    __int16 v47 = 2082;
    int v48 = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "%scannot create timer, event, %{public}s", __p, 0x16u);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    __int16 v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v30 = (void *)*v30;
    }
    sub_10193689C(a2, __p);
    if (v49 >= 0) {
      uint64_t v31 = __p;
    }
    else {
      uint64_t v31 = *(unsigned char **)__p;
    }
    *(_DWORD *)__int16 v42 = 136315394;
    *(void *)&v42[4] = v30;
    __int16 v43 = 2082;
    int v44 = v31;
    int v12 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v49) < 0) {
      operator delete(*(void **)__p);
    }
    goto LABEL_79;
  }
}

void sub_1019342E0(uint64_t a1, signed int a2)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    goto LABEL_33;
  }
  uint64_t v5 = a1 + 64;
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (int v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    int v10 = qword_1024193D8;
    os_log_type_t v11 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v11))
    {
      int v12 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v12 = (void *)*v12;
      }
      sub_10193689C(a2, __p);
      if (v31 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v23 = 2080;
      char v24 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      uint64_t v14 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v14 = (void *)*v14;
      }
      sub_10193689C(a2, buf);
      if (v25 >= 0) {
        signed int v15 = buf;
      }
      else {
        signed int v15 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v14;
      __int16 v28 = 2080;
      __int16 v29 = v15;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
LABEL_54:
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLEurekaSupl>::cancelTimeoutEvent(Event) [T = CLEurekaSupl]", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
  }
  else
  {
LABEL_33:
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      sub_10193689C(a2, __p);
      if (v31 >= 0) {
        uint64_t v19 = __p;
      }
      else {
        uint64_t v19 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v18;
      __int16 v23 = 2080;
      char v24 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      dispatch_time_t v20 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        dispatch_time_t v20 = (void *)*v20;
      }
      sub_10193689C(a2, buf);
      if (v25 >= 0) {
        uint64_t v21 = buf;
      }
      else {
        uint64_t v21 = *(unsigned char **)buf;
      }
      int v26 = 136315394;
      int v27 = v20;
      __int16 v28 = 2080;
      __int16 v29 = v21;
      BOOL v16 = (char *)_os_log_send_and_compose_impl();
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_54;
    }
  }
}

void sub_101934774(double *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#Supl,#ca,submitSessionStatsToCA", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    LOWORD(v35) = 0;
    int v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::submitSessionStatsToCA()", "%s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  double v3 = sqrt(a1[364] * a1[364] + a1[363] * a1[363]);
  a1[365] = v3;
  int v4 = *((_DWORD *)a1 + 735);
  *(_DWORD *)long long buf = 44;
  v41[0] = v4;
  int v5 = (int)a1[368];
  int v42 = 0;
  v43[0] = 45;
  v43[2] = v5;
  uint8_t v43[8] = 0;
  v43[10] = 46;
  v43[12] = 1;
  int v6 = *((_DWORD *)a1 + 716);
  v43[18] = 0;
  v43[20] = 47;
  v43[22] = v6;
  v43[28] = 0;
  int v7 = *(_DWORD *)a1;
  v43[30] = 79;
  v43[32] = v7;
  float v8 = a1[359];
  v43[38] = 0;
  v43[40] = 68;
  *(float *)&v43[42] = v8;
  float v9 = a1[360];
  v43[48] = 4;
  v43[50] = 69;
  *(float *)&v43[52] = v9;
  v43[58] = 4;
  v43[60] = 70;
  v43[62] = (int)v3;
  v43[68] = 0;
  int v10 = *((unsigned __int8 *)a1 + 2936);
  v43[70] = 71;
  v43[72] = v10;
  v43[78] = 0;
  if (*((unsigned char *)a1 + 2953)) {
    int v11 = 1;
  }
  else {
    int v11 = 2;
  }
  v43[80] = 63;
  v43[82] = v11;
  v43[88] = 0;
  uint64_t v12 = *((void *)a1 + 381);
  if ((v12 & 0x20) != 0) {
    int v13 = 1;
  }
  else {
    int v13 = 2;
  }
  v43[90] = 74;
  v43[92] = v13;
  v43[98] = 0;
  if ((v12 & 0x10) != 0) {
    int v14 = 1;
  }
  else {
    int v14 = 2;
  }
  v43[100] = 67;
  v43[102] = v14;
  v43[108] = 0;
  if ((v12 & 4) != 0) {
    int v15 = 1;
  }
  else {
    int v15 = 2;
  }
  v43[110] = 75;
  v43[112] = v15;
  v43[118] = 0;
  uint64_t v16 = *((void *)a1 + 400);
  if (v16 == -1) {
    int v17 = 2;
  }
  else {
    int v17 = 1;
  }
  v43[120] = 27;
  v43[122] = v17;
  v43[128] = 0;
  v43[130] = 28;
  uint64_t v44 = v16;
  int v45 = 2;
  char v18 = *((unsigned char *)a1 + 137);
  int v46 = 83;
  char v47 = v18;
  int v48 = 7;
  long long v35 = 0;
  long long v36 = 0;
  long long v37 = 0;
  char v31 = (void **)&v35;
  LOBYTE(v32) = 0;
  long long v35 = (char *)operator new(0x280uLL);
  long long v36 = v35;
  long long v37 = v35 + 640;
  long long v36 = (unsigned char *)sub_100682A48((uint64_t)&v37, (uint64_t)buf, (uint64_t)&v49, (uint64_t)v35);
  for (uint64_t i = 608; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  dispatch_time_t v20 = (void *)*((void *)a1 + 403);
  memset(v34, 0, sizeof(v34));
  sub_100682C20(v34, (uint64_t)v35, (uint64_t)v36, 0xCCCCCCCCCCCCCCCDLL * ((v36 - v35) >> 3));
  [v20 setMeasurements:sub_10067C03C(v34)];
  *(void *)long long buf = v34;
  sub_100682B1C((void ***)buf);
  if (*((_DWORD *)a1 + 716) == 1)
  {
    double v21 = a1[402] - a1[401];
    *(_DWORD *)long long buf = 42;
    v41[0] = (int)v21;
    int v42 = 0;
    uint64_t v32 = 0;
    std::string v33 = 0;
    char v31 = 0;
    long long v38 = &v31;
    char v39 = 0;
    char v31 = (void **)operator new(0x28uLL);
    uint64_t v32 = (uint64_t)v31;
    std::string v33 = v31 + 5;
    uint64_t v32 = sub_100682A48((uint64_t)&v33, (uint64_t)buf, (uint64_t)v43, (uint64_t)v31);
    sub_100118010((uint64_t)v41);
    os_log_type_t v22 = (void *)*((void *)a1 + 403);
    memset(v30, 0, sizeof(v30));
    sub_100682C20(v30, (uint64_t)v31, v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (uint64_t)v31) >> 3));
    [v22 setMeasurements:sub_10067C03C(v30)];
    *(void *)long long buf = v30;
    sub_100682B1C((void ***)buf);
    *(void *)long long buf = &v31;
    sub_100682B1C((void ***)buf);
  }
  if (sub_1000EF68C(a1[359], a1[360])
    && !sub_1000EF668(a1[359], a1[360])
    && sub_1000EF68C(a1[371], a1[372])
    && !sub_1000EF668(a1[371], a1[372]))
  {
    long double v23 = sub_1000F1648(a1 + 405, a1[359], a1[360], a1[371], a1[372], 0.0);
    *(_DWORD *)long long buf = 72;
    v41[0] = (int)v23;
    int v42 = 0;
    uint64_t v32 = 0;
    std::string v33 = 0;
    char v31 = 0;
    long long v38 = &v31;
    char v39 = 0;
    char v31 = (void **)operator new(0x28uLL);
    uint64_t v32 = (uint64_t)v31;
    std::string v33 = v31 + 5;
    uint64_t v32 = sub_100682A48((uint64_t)&v33, (uint64_t)buf, (uint64_t)v43, (uint64_t)v31);
    sub_100118010((uint64_t)v41);
    char v24 = (void *)*((void *)a1 + 403);
    memset(v29, 0, sizeof(v29));
    sub_100682C20(v29, (uint64_t)v31, v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (uint64_t)v31) >> 3));
    [v24 setMeasurements:sub_10067C03C(v29)];
    *(void *)long long buf = v29;
    sub_100682B1C((void ***)buf);
    *(void *)long long buf = &v31;
    sub_100682B1C((void ***)buf);
  }
  char v25 = (void *)*((void *)a1 + 403);
  if (byte_10248A8CF < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A8B8, *((unint64_t *)&xmmword_10248A8B8 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_10248A8B8;
    uint64_t v28 = unk_10248A8C8;
  }
  [v25 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  a1[400] = NAN;
  a1[401] = -1.0;
  a1[402] = -1.0;
  sub_101937710((uint64_t)(a1 + 357));
  *(void *)long long buf = &v35;
  sub_100682B1C((void ***)buf);
}

void sub_101934DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char *a36)
{
  a36 = &a24;
  sub_100682B1C((void ***)&a36);
  a36 = &a30;
  sub_100682B1C((void ***)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_101934EC0(uint64_t a1)
{
  *(unsigned char *)(a1 + 1544) = 1;
  return sub_101934ECC(a1);
}

uint64_t sub_101934ECC(uint64_t a1)
{
  sub_100103240();
  if (sub_10073E3D4())
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v3 = *(unsigned __int8 *)(a1 + 151);
      int v4 = (void *)(a1 + 1088);
      int v5 = *(unsigned __int16 *)(a1 + 1136);
      if (*(char *)(a1 + 1111) < 0) {
        int v4 = (void *)*v4;
      }
      unsigned int v6 = *(unsigned __int8 *)(a1 + 1144);
      *(_DWORD *)long long buf = 67110914;
      int v11 = v3;
      __int16 v12 = 1024;
      int v13 = v5;
      __int16 v14 = 2080;
      int v15 = v4;
      __int16 v16 = 1024;
      int v17 = v6 & 1;
      __int16 v18 = 1024;
      int v19 = (v6 >> 1) & 1;
      __int16 v20 = 1024;
      int v21 = (v6 >> 2) & 1;
      __int16 v22 = 1024;
      int v23 = (v6 >> 3) & 1;
      __int16 v24 = 1024;
      int v25 = (v6 >> 4) & 1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Supl,carrierBundleSettings,supported,%d,port,%d,hslp,%s,allowNonEmergencySupl,%d,allowSuplWithoutEmergencyNotification,%d,allowHslpMismatch,%d,allowHslpWildCard,%d,allowNonConformingEslpAddress,%d\n", buf, 0x36u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::updateSupport()", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if (*(unsigned char *)(a1 + 151)) {
      uint64_t v7 = 2;
    }
    else {
      uint64_t v7 = 3;
    }
    return sub_1019351C4(a1 + 8, v7);
  }
  else
  {
    return sub_1019351C4(a1 + 8, 3);
  }
}

uint64_t sub_1019351C4(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v90 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_101939974();
    goto LABEL_169;
  }
  int v3 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_101939AE8(qword_1024193D0 == -1);
    goto LABEL_169;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  int v5 = qword_1024193D8;
  os_log_type_t v6 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v6))
  {
    uint64_t v7 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    uint64_t v8 = *(int *)(a1 + 4);
    if (v8 > 3) {
      float v9 = "StateUnknown";
    }
    else {
      float v9 = off_102346480[v8];
    }
    sub_100134750(__p, v9);
    int v10 = SHIBYTE(v94);
    int v11 = *(unsigned char **)__p;
    sub_10193689C(a2, v101);
    __int16 v12 = __p;
    if (v10 < 0) {
      __int16 v12 = v11;
    }
    if (v104 >= 0) {
      int v13 = v101;
    }
    else {
      int v13 = *(unsigned char **)v101;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v97 = 2080;
    char v98 = v12;
    __int16 v99 = 2080;
    char v100 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    int v3 = &qword_102419000;
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    int v63 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      int v63 = (void *)*v63;
    }
    sub_1019368C8(*(_DWORD *)(a1 + 4), v101);
    int v64 = v104;
    int v65 = *(unsigned char **)v101;
    sub_10193689C(a2, v88);
    int v66 = v101;
    if (v64 < 0) {
      int v66 = v65;
    }
    if (v89 >= 0) {
      int v67 = v88;
    }
    else {
      int v67 = (void **)v88[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v63;
    __int16 v92 = 2080;
    uint64_t v93 = v66;
    __int16 v94 = 2080;
    __int16 v95 = v67;
    int v68 = (char *)_os_log_send_and_compose_impl();
    if (v89 < 0) {
      operator delete(v88[0]);
    }
    int v3 = &qword_102419000;
    if (v104 < 0) {
      operator delete(*(void **)v101);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v68);
    if (v68 != buf) {
      free(v68);
    }
  }
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    goto LABEL_31;
  }
  int v15 = (uint64_t **)(a1 + 8);
  int v16 = *(_DWORD *)(a1 + 4);
  uint64_t v17 = a1 + 16;
  do
  {
    int v18 = *(_DWORD *)(v14 + 32);
    BOOL v19 = v18 < v16;
    if (v18 >= v16) {
      __int16 v20 = (uint64_t *)v14;
    }
    else {
      __int16 v20 = (uint64_t *)(v14 + 8);
    }
    if (!v19) {
      uint64_t v17 = v14;
    }
    uint64_t v14 = *v20;
  }
  while (*v20);
  if (v17 == a1 + 16 || v16 < *(_DWORD *)(v17 + 32))
  {
LABEL_31:
    sub_101939C6C();
    goto LABEL_169;
  }
  int v21 = *(uint64_t (**)(void *, uint64_t))(v17 + 40);
  uint64_t v22 = *(void *)(v17 + 48);
  int v23 = (void *)(*(void *)(a1 + 32) + (v22 >> 1));
  if (v22) {
    int v21 = *(uint64_t (**)(void *, uint64_t))(*v23 + v21);
  }
  uint64_t v24 = v21(v23, a2);
  uint64_t v25 = v24;
  int v87 = v24;
  if (a2 <= 1 && v24 != v90)
  {
    sub_10193A0C8();
    goto LABEL_169;
  }
  if (*(_DWORD *)(a1 + 88) >= 2u)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    int v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v27 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v27 = (void *)*v27;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      int v72 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v72 = (void *)*v72;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v72;
      int v73 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v73);
      if (v73 != buf) {
        free(v73);
      }
    }
  }
  if (v3[122] != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  uint64_t v28 = qword_1024193D8;
  os_log_type_t v29 = *(unsigned char *)(a1 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v29))
  {
    __int16 v30 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      __int16 v30 = (void *)*v30;
    }
    if (v25 > 3) {
      char v31 = "StateUnknown";
    }
    else {
      char v31 = off_102346480[(int)v25];
    }
    sub_100134750(buf, v31);
    if (v99 >= 0) {
      uint64_t v32 = buf;
    }
    else {
      uint64_t v32 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v30;
    __int16 v92 = 2080;
    uint64_t v93 = v32;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v99) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    uint64_t v69 = (void *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0) {
      uint64_t v69 = (void *)*v69;
    }
    sub_1019368C8(v25, __p);
    if (v94 >= 0) {
      int v70 = __p;
    }
    else {
      int v70 = *(unsigned char **)__p;
    }
    *(_DWORD *)__int16 v101 = 136315394;
    *(void *)&v101[4] = v69;
    __int16 v102 = 2080;
    __int16 v103 = v70;
    uint64_t v71 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v94) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  if (v25 != v90)
  {
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    std::string v33 = qword_1024193D8;
    os_log_type_t v34 = *(unsigned char *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v34))
    {
      long long v35 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        long long v35 = (void *)*v35;
      }
      if (v90 > 3) {
        long long v36 = "StateUnknown";
      }
      else {
        long long v36 = off_102346480[v90];
      }
      sub_100134750(__p, v36);
      long long v37 = v3;
      int v38 = SHIBYTE(v94);
      char v39 = *(unsigned char **)__p;
      sub_100134750(v101, "Exit");
      unsigned int v40 = __p;
      if (v38 < 0) {
        unsigned int v40 = v39;
      }
      if (v104 >= 0) {
        unsigned int v41 = v101;
      }
      else {
        unsigned int v41 = *(unsigned char **)v101;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v35;
      __int16 v97 = 2080;
      char v98 = v40;
      __int16 v99 = 2080;
      char v100 = v41;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      int v3 = v37;
      if (SHIBYTE(v94) < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      int v74 = (void *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0) {
        int v74 = (void *)*v74;
      }
      sub_1019368C8(v90, v101);
      int v75 = v3;
      int v76 = v104;
      int v77 = *(unsigned char **)v101;
      sub_100134750(v88, "Exit");
      int v78 = v101;
      if (v76 < 0) {
        int v78 = v77;
      }
      if (v89 >= 0) {
        int v79 = v88;
      }
      else {
        int v79 = (void **)v88[0];
      }
      *(_DWORD *)std::string __p = 136315650;
      *(void *)&__p[4] = v74;
      __int16 v92 = 2080;
      uint64_t v93 = v78;
      __int16 v94 = 2080;
      __int16 v95 = v79;
      int v80 = (char *)_os_log_send_and_compose_impl();
      if (v89 < 0) {
        operator delete(v88[0]);
      }
      int v3 = v75;
      int v15 = (uint64_t **)(a1 + 8);
      if (v104 < 0) {
        operator delete(*(void **)v101);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v80);
      if (v80 != buf) {
        free(v80);
      }
    }
    uint64_t v42 = *(void *)(a1 + 32);
    *(void *)long long buf = &v90;
    __int16 v43 = sub_1000C5658(v15, (int *)&v90, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
    uint64_t v44 = v43[5];
    uint64_t v45 = (uint64_t)v43[6];
    int v46 = (void *)(v42 + (v45 >> 1));
    if (v45) {
      uint64_t v44 = *(uint64_t **)(*v46 + v44);
    }
    int v47 = ((uint64_t (*)(void *, uint64_t))v44)(v46, 1);
    if (v47 == v90)
    {
      *(_DWORD *)(a1 + 4) = v25;
      if (v3[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      int v48 = qword_1024193D8;
      os_log_type_t v49 = *(unsigned char *)(a1 + 120);
      if (os_log_type_enabled((os_log_t)qword_1024193D8, v49))
      {
        double v50 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          double v50 = (void *)*v50;
        }
        if (v25 > 3) {
          __int16 v51 = "StateUnknown";
        }
        else {
          __int16 v51 = off_102346480[(int)v25];
        }
        sub_100134750(__p, v51);
        int v52 = v3;
        int v53 = SHIBYTE(v94);
        int v54 = *(unsigned char **)__p;
        sub_100134750(v101, "Enter");
        uint64_t v55 = __p;
        if (v53 < 0) {
          uint64_t v55 = v54;
        }
        if (v104 >= 0) {
          int v56 = v101;
        }
        else {
          int v56 = *(unsigned char **)v101;
        }
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v50;
        __int16 v97 = 2080;
        char v98 = v55;
        __int16 v99 = 2080;
        char v100 = v56;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "%snewState,%s,event,%s", buf, 0x20u);
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        int v3 = v52;
        if (SHIBYTE(v94) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v3[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_102345DF0);
        }
        uint64_t v81 = (void *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0) {
          uint64_t v81 = (void *)*v81;
        }
        sub_1019368C8(v25, v101);
        int v82 = v104;
        uint64_t v83 = *(unsigned char **)v101;
        sub_100134750(v88, "Enter");
        int v84 = v101;
        if (v82 < 0) {
          int v84 = v83;
        }
        if (v89 >= 0) {
          __int16 v85 = v88;
        }
        else {
          __int16 v85 = (void **)v88[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v81;
        __int16 v92 = 2080;
        uint64_t v93 = v84;
        __int16 v94 = 2080;
        __int16 v95 = v85;
        int v86 = (char *)_os_log_send_and_compose_impl();
        if (v89 < 0) {
          operator delete(v88[0]);
        }
        if (v104 < 0) {
          operator delete(*(void **)v101);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLEurekaSupl>::handleEvent(Event) [T = CLEurekaSupl]", "%s\n", v86);
        if (v86 != buf) {
          free(v86);
        }
      }
      uint64_t v57 = *(void *)(a1 + 32);
      *(void *)long long buf = &v87;
      int v58 = sub_1000C5658(v15, &v87, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      int v59 = v58[5];
      uint64_t v60 = (uint64_t)v58[6];
      int v61 = (void *)(v57 + (v60 >> 1));
      if (v60) {
        int v59 = *(uint64_t **)(*v61 + v59);
      }
      uint64_t v25 = ((uint64_t (*)(void *, void))v59)(v61, 0);
      if (v25 == v87) {
        goto LABEL_101;
      }
      sub_101939DE0();
    }
    else
    {
      sub_101939F54();
    }
LABEL_169:
    __break(1u);
  }
LABEL_101:
  --*(_DWORD *)(a1 + 88);
  return v25;
}

void sub_101935F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

void sub_101935FAC(uint64_t a1, uint64_t *a2, int a3)
{
  sub_10083C6B4(a1 + 144, a2);
  if (*(unsigned char *)(a1 + 1544))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      sub_10101AE9C(a3, __p);
      os_log_type_t v6 = v17 >= 0 ? __p : (void **)__p[0];
      int v7 = *(_DWORD *)a1;
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v6;
      __int16 v13 = 1024;
      int v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Supl,emergency settings changed with reason %s,instance,%d", buf, 0x12u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      sub_10101AE9C(a3, buf);
      int v10 = (char *)_os_log_send_and_compose_impl();
      if (v15 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v10);
      if (v10 != (char *)__p) {
        free(v10);
      }
    }
    sub_101934ECC(a1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      sub_10101AE9C(a3, __p);
      float v9 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Supl,emergency settings changed with reason %s when not started, waiting till start to push", buf, 0xCu);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_102345DF0);
      }
      sub_10101AE9C(a3, buf);
      int v11 = (char *)_os_log_send_and_compose_impl();
      if (v15 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::handleEmergencySettingsChange(const CLEmergencyController::LocationSettings &, CLEmergencyController::SettingsChangedReason)", "%s\n", v11);
      if (v11 != (char *)__p) {
        free(v11);
      }
    }
  }
}

uint64_t sub_1019363A8(uint64_t a1, _DWORD *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100D335B8(a2, __p);
    int v5 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? __p
       : (std::string *)__p[0].__r_.__value_.__r.__words[0];
    int v6 = *(_DWORD *)a1;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v5;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Supl,emergencyState,%s,instance,%d", (uint8_t *)&buf, 0x12u);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    sub_100D335B8(a2, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    int v11 = *(_DWORD *)a1;
    int v14 = 136315394;
    char v15 = p_buf;
    __int16 v16 = 1024;
    int v17 = v11;
    __int16 v12 = (std::string *)_os_log_send_and_compose_impl();
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyStateChange(CLEmergencyState)", "%s\n", (const char *)v12);
    if (v12 != __p) {
      free(v12);
    }
  }
  if (!sub_100D33A54((uint64_t)a2))
  {
    *(unsigned char *)(a1 + 137) = 0;
    goto LABEL_14;
  }
  BOOL v7 = sub_100D33A9C(a2, *(_DWORD *)a1);
  *(unsigned char *)(a1 + 137) = v7;
  if (!v7)
  {
LABEL_14:
    uint64_t v8 = 5;
    return sub_1019351C4(a1 + 8, v8);
  }
  uint64_t v8 = 4;
  return sub_1019351C4(a1 + 8, v8);
}

uint64_t sub_101936620(uint64_t a1, uint64_t a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    uint64_t v8 = "";
    __int16 v9 = 2082;
    int v10 = "handlesuplinit";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x1Cu);
  }
  *(void *)(a1 + 1496) = a2;
  uint64_t result = sub_1019351C4(a1 + 8, 7);
  *(void *)(a1 + 1496) = 0;
  return result;
}

uint64_t sub_10193672C(uint64_t a1, unsigned int *a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  int v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68289282;
    v9[1] = 0;
    __int16 v10 = 2082;
    int v11 = "";
    __int16 v12 = 2082;
    __int16 v13 = "handlesuplend";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s}", (uint8_t *)v9, 0x1Cu);
  }
  *(void *)(a1 + 1504) = a2;
  *(CFAbsoluteTime *)(a1 + 1568) = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(a1 + 3216) = CFAbsoluteTimeGetCurrent();
  double v5 = *(double *)(a1 + 1560);
  *(double *)(a1 + 2792) = v5;
  double v6 = *(double *)(a1 + 1568);
  *(double *)(a1 + 2800) = v6;
  unsigned int v7 = *a2;
  if (!*a2)
  {
    *(double *)(a1 + 1624) = v6 - v5;
    *(_DWORD *)(a1 + 2848) = 311;
    goto LABEL_9;
  }
  *(unsigned char *)(a1 + 1592) = 0;
  *(_DWORD *)(a1 + 2848) = 287;
  if (v7 <= 0xC)
  {
    unsigned int v7 = dword_101E47880[v7 - 1];
LABEL_9:
    *(_DWORD *)(a1 + 1700) = v7;
  }
  uint64_t result = sub_1019351C4(a1 + 8, 8);
  *(void *)(a1 + 1504) = 0;
  return result;
}

void *sub_10193689C@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 0xB) {
    uint64_t v2 = "EventUnknown";
  }
  else {
    uint64_t v2 = off_102346420[a1];
  }
  return sub_100134750(a2, v2);
}

void *sub_1019368C8@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 3) {
    uint64_t v2 = "StateUnknown";
  }
  else {
    uint64_t v2 = off_102346480[a1];
  }
  return sub_100134750(a2, v2);
}

void sub_1019368F4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67241216;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v17 = 1026;
    *(_DWORD *)&uint64_t v17[2] = 2;
    __int16 v18 = 1026;
    int v19 = 0;
    __int16 v20 = 1026;
    int v21 = 0;
    __int16 v22 = 1026;
    int v23 = 1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#Cplane,#ca,submitNonEmergencySuplSessionStatsToCA,posProtocol,%{public}d,sessionProtocol,%{public}d,msgType,%{public}d,methodType,%{public}d,discardReason,%{public}d", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    uint64_t v11 = 67241216;
    uint64_t v12 = 0x402000000020402;
    *(_DWORD *)__int16 v13 = 0;
    *(_WORD *)&void v13[4] = 1026;
    *(_DWORD *)&v13[6] = 0;
    __int16 v14 = 1026;
    int v15 = 1;
    double v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::submitNonEmergencySuplSessionStatsToCA()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  *(_DWORD *)std::string buf = 86;
  *(_DWORD *)int v17 = 0;
  int v24 = 0;
  int v25 = 51;
  int v26 = 2;
  int v27 = 0;
  int v28 = 52;
  int v29 = 0;
  int v30 = 0;
  int v31 = 84;
  int v32 = 1;
  int v33 = 0;
  int v34 = 85;
  int v35 = 0;
  int v36 = 0;
  uint64_t v12 = 0;
  *(void *)__int16 v13 = 0;
  uint64_t v11 = 0;
  v9[3] = (uint64_t)&v11;
  char v10 = 0;
  uint64_t v11 = (uint64_t)operator new(0xC8uLL);
  uint64_t v12 = v11;
  *(void *)__int16 v13 = v11 + 200;
  uint64_t v12 = sub_100682A48((uint64_t)v13, (uint64_t)buf, (uint64_t)&v37, v11);
  for (uint64_t i = 168; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  int v4 = *(void **)(a1 + 3224);
  memset(v9, 0, 24);
  sub_100682C20(v9, v11, v12, 0xCCCCCCCCCCCCCCCDLL * ((v12 - v11) >> 3));
  [v4 setMeasurements:sub_10067C03C(v9)];
  *(void *)std::string buf = v9;
  sub_100682B1C((void ***)buf);
  double v5 = *(void **)(a1 + 3224);
  if (byte_10248A8FF < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A8E8, *((unint64_t *)&xmmword_10248A8E8 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_10248A8E8;
    uint64_t v8 = unk_10248A8F8;
  }
  [v5 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  *(void *)std::string buf = &v11;
  sub_100682B1C((void ***)buf);
}

void sub_101936C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void sub_101936CF4(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v6 = a1[1];
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  unsigned int v7 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289794;
    __int16 v20 = 2082;
    int v21 = "";
    __int16 v22 = 2082;
    int v23 = "Supl,isValidSupl";
    __int16 v24 = 2082;
    int v25 = "Failed";
    __int16 v26 = 2082;
    uint64_t v27 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"E911Event\", \"event\":%{public, location:escape_only}s, \"result\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", (uint8_t *)&buf, 0x30u);
  }
  uint64_t v8 = *a1;
  *(_DWORD *)(v8 + 148) = a2;
  *(unsigned char *)(v8 + 40) = 0;
  sub_10192B6A8(v8);
  if (*(void *)(v6 + 3128))
  {
    sub_101832D90((uint64_t)v10, *a1);
    uint64_t v9 = *(void *)(v6 + 3128);
    if (!v9) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 48))(v9, v10);
    if (v18 < 0) {
      operator delete(__p);
    }
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v12 < 0) {
      operator delete(v11);
    }
  }
}

void sub_101936EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10083788C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_101936ED0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 151)) {
    return sub_10193294C(a1);
  }
  else {
    return sub_10193286C(a1);
  }
}

double sub_101936EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 2808) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 2816) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 2824) = v6;
  uint64_t v7 = a1 + 1552;
  *(void *)(a1 + 1576) = v4;
  *(void *)(a1 + 1584) = v5;
  *(unsigned char *)(a1 + 1592) = 1;
  *(void *)(a1 + 1600) = v6;
  *(_DWORD *)(a1 + 1632) = (*(_DWORD *)(a2 + 136) >> 4) & 2 | (*(_DWORD *)(a2 + 136) >> 5) & 4 | (*(_DWORD *)(a2 + 136) >> 1) & 0x20 | ((*(_DWORD *)(a2 + 136) & 0x1F) != 0);
  long long v8 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 2832) = v8;
  *(_OWORD *)(a1 + 1608) = v8;
  *(_DWORD *)(a1 + 1640) = 2;
  *(_DWORD *)(a1 + 1744) = *(_DWORD *)a1;
  sub_10182E764((std::string *)(a1 + 1552), a1 + 144);
  unsigned int v9 = *(_DWORD *)(a2 + 136);
  if ((v9 & 0x40) == 0)
  {
    double v10 = *(double *)(a2 + 104);
    int v11 = (int)*(double *)(a2 + 96);
    float v12 = *(double *)(a2 + 72);
    *(float *)double v50 = v12;
    *(_DWORD *)uint64_t buf = 39;
    *(_DWORD *)((char *)&v54 + 2) = 4;
    LODWORD(v56) = 40;
    *(_DWORD *)uint64_t v57 = v11;
    *(_DWORD *)((char *)&v61 + 2) = 0;
    int v63 = 41;
    *(_DWORD *)((char *)&v65 + 2) = (int)v10;
    *(_DWORD *)&v69[6] = 0;
    int v70 = 43;
    int v71 = (v9 >> 4) & 2 | (v9 >> 5) & 4 | (v9 >> 1) & 0x20 | ((v9 & 0x1F) != 0);
    int v72 = 0;
    int v48 = 0;
    int v46 = 0;
    uint64_t v47 = 0;
    uint64_t v42 = &v46;
    char v43 = 0;
    int v46 = operator new(0xA0uLL);
    uint64_t v47 = (uint64_t)v46;
    int v48 = (char *)v46 + 160;
    uint64_t v47 = sub_100682A48((uint64_t)&v48, (uint64_t)buf, (uint64_t)&v73, (uint64_t)v46);
    for (uint64_t i = 128; i != -32; i -= 40)
      sub_100118010((uint64_t)&buf[i]);
    char v14 = *(void **)(a1 + 3224);
    memset(v45, 0, sizeof(v45));
    sub_100682C20(v45, (uint64_t)v46, v47, 0xCCCCCCCCCCCCCCCDLL * ((v47 - (uint64_t)v46) >> 3));
    [v14 setMeasurements:sub_10067C03C(v45)];
    *(void *)uint64_t buf = v45;
    sub_100682B1C((void ***)buf);
    *(void *)uint64_t buf = &v46;
    sub_100682B1C((void ***)buf);
  }
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  int v15 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEFAULT))
  {
    sub_10192B5CC(*(_DWORD *)(a1 + 1700), &v46);
    if (SHIBYTE(v48) >= 0) {
      char v16 = &v46;
    }
    else {
      char v16 = v46;
    }
    uint64_t v17 = *(void *)(a1 + 1576);
    uint64_t v18 = *(void *)(a1 + 1584);
    uint64_t v19 = *(void *)(a1 + 1600);
    uint64_t v20 = *(void *)(a1 + 1608);
    uint64_t v29 = *(void *)(a1 + 1616);
    int v30 = *(_DWORD *)(a1 + 1632);
    sub_10192B548(*(_DWORD *)(a1 + 1636), &v42);
    int v21 = v44;
    __int16 v22 = (void **)v42;
    sub_10192B5A0(*(_DWORD *)(a1 + 1644), __p);
    int v23 = &v42;
    __int16 v24 = (void **)__p[0];
    if (v21 < 0) {
      int v23 = v22;
    }
    uint64_t v25 = *(void *)(a1 + 1624);
    if (v41 >= 0) {
      __int16 v24 = __p;
    }
    *(_DWORD *)uint64_t buf = 68291587;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)double v50 = 2082;
    *(void *)&_OWORD v50[2] = "";
    __int16 v51 = 2081;
    int v52 = v16;
    __int16 v53 = 2049;
    uint64_t v54 = v17;
    __int16 v55 = 2049;
    uint64_t v56 = v18;
    *(_WORD *)uint64_t v57 = 2049;
    *(void *)&v57[2] = v19;
    __int16 v58 = 2050;
    uint64_t v59 = v20;
    __int16 v60 = 2050;
    uint64_t v61 = v29;
    __int16 v62 = 1026;
    int v63 = v30;
    __int16 v64 = 2082;
    int v65 = v23;
    __int16 v66 = 2082;
    int v67 = v24;
    __int16 v68 = 2049;
    *(void *)uint64_t v69 = v25;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Supl,Summary Status\", \"status\":%{private, location:escape_only}s, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"alt\":\"%{private}f\", \"acc\":\"%{public}f\", \"vunc\":\"%{public}f\", \"source\":%{public}d, \"method\":%{public, location:escape_only}s, \"protocol\":%{public, location:escape_only}s, \"ttf\":\"%{private}f\"}", buf, 0x72u);
    if (v41 < 0) {
      operator delete(__p[0]);
    }
    if (v44 < 0) {
      operator delete(v42);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(v46);
    }
  }
  sub_10192B6A8(v7);
  if (*(void *)(a1 + 3128))
  {
    sub_101832D90((uint64_t)v31, v7);
    uint64_t v26 = *(void *)(a1 + 3128);
    if (!v26) {
      sub_10015E48C();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v26 + 48))(v26, v31);
    if (v39 < 0) {
      operator delete(v38);
    }
    if (v37 < 0) {
      operator delete(v36);
    }
    if (v35 < 0) {
      operator delete(v34);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
  }
  sub_10192C5D4(v7);
  uint64_t v27 = *(void *)(a1 + 3192);
  if (v27) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 48))(v27, a1 + 2792);
  }
  *(void *)(a1 + 2792) = 0xBFF0000000000000;
  *(void *)(a1 + 2800) = 0xBFF0000000000000;
  *(void *)(a1 + 2816) = 0;
  *(void *)(a1 + 2824) = 0;
  *(void *)(a1 + 2808) = 0;
  *(void *)(a1 + 2832) = 0xBFF0000000000000;
  double result = NAN;
  *(void *)(a1 + 2840) = -1;
  *(_DWORD *)(a1 + 2848) = 0;
  return result;
}

void sub_1019373E0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  if (SLOBYTE(STACK[0x54F]) < 0) {
    operator delete((void *)STACK[0x538]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_101937490(uint64_t a1, long long *a2, uint64_t a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    sub_1019BD4D4(*((void *)a2 + 28), __p);
    uint64_t v7 = v28 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uint64_t buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Supl,#ca,processPdsSessionStatisticsReport,type,%s", buf, 0xCu);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
    sub_1019BD4D4(*((void *)a2 + 28), buf);
    if (v24 >= 0) {
      int v21 = buf;
    }
    else {
      int v21 = *(unsigned char **)buf;
    }
    int v25 = 136315138;
    uint64_t v26 = v21;
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    if (v24 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::processPdsSessionStatisticsReport(CLEurekaNilrTypes::sessionStatisticsReport, uint64_t)", "%s\n", v22);
    if (v22 != (char *)__p) {
      free(v22);
    }
  }
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[3];
  *(_OWORD *)(a1 + 2888) = a2[2];
  *(_OWORD *)(a1 + 2904) = v10;
  *(_OWORD *)(a1 + 2856) = v8;
  *(_OWORD *)(a1 + 2872) = v9;
  long long v11 = a2[4];
  long long v12 = a2[5];
  long long v13 = a2[7];
  *(_OWORD *)(a1 + 2952) = a2[6];
  *(_OWORD *)(a1 + 2968) = v13;
  *(_OWORD *)(a1 + 2920) = v11;
  *(_OWORD *)(a1 + 2936) = v12;
  long long v14 = a2[8];
  long long v15 = a2[9];
  long long v16 = a2[11];
  *(_OWORD *)(a1 + 3016) = a2[10];
  *(_OWORD *)(a1 + 3032) = v16;
  *(_OWORD *)(a1 + 2984) = v14;
  *(_OWORD *)(a1 + 3000) = v15;
  long long v17 = a2[12];
  long long v18 = a2[13];
  long long v19 = a2[14];
  *(unsigned char *)(a1 + 3096) = *((unsigned char *)a2 + 240);
  *(_OWORD *)(a1 + 3064) = v18;
  *(_OWORD *)(a1 + 3080) = v19;
  *(_OWORD *)(a1 + 3048) = v17;
  *(void *)(a1 + 3200) = a3;
  return sub_1019351C4(a1 + 8, 10);
}

double sub_101937710(uint64_t a1)
{
  *(void *)a1 = 0xBFF0000000000000;
  *(void *)(a1 + 8) = 0;
  int64x2_t v1 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  __asm { FMOV            V1.2D, #-1.0 }
  *(int64x2_t *)(a1 + 16) = v1;
  *(_OWORD *)(a1 + 32) = _Q1;
  *(_OWORD *)(a1 + 48) = _Q1;
  *(_OWORD *)(a1 + 64) = _Q1;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 96) = xmmword_101E449F0;
  *(int64x2_t *)(a1 + 112) = v1;
  __asm { FMOV            V0.4S, #-1.0 }
  *(_OWORD *)(a1 + 128) = _Q0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 144) = 0;
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)(a1 + 168) = _Q0;
  *(_DWORD *)(a1 + 176) = -1082130432;
  *(void *)(a1 + 180) = 0;
  *(_DWORD *)(a1 + 188) = -1082130432;
  *(unsigned char *)(a1 + 240) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return result;
}

void sub_101937778(uint64_t a1, char a2)
{
  int v3 = sub_10182E740(a2);
  *(_DWORD *)(a1 + 1636) = v3;
  LODWORD(v10) = 52;
  v11[0] = v3;
  v11[6] = 0;
  uint64_t v7 = 0;
  v8[0] = 0;
  uint64_t v6 = 0;
  v8[1] = &v6;
  char v9 = 0;
  uint64_t v6 = (char *)operator new(0x28uLL);
  uint64_t v7 = v6;
  v8[0] = v6 + 40;
  uint64_t v7 = (unsigned char *)sub_100682A48((uint64_t)v8, (uint64_t)&v10, (uint64_t)&v12, (uint64_t)v6);
  sub_100118010((uint64_t)v11);
  uint64_t v4 = *(void **)(a1 + 3224);
  memset(v5, 0, sizeof(v5));
  sub_100682C20(v5, (uint64_t)v6, (uint64_t)v7, 0xCCCCCCCCCCCCCCCDLL * ((v7 - v6) >> 3));
  [v4 setMeasurements:sub_10067C03C(v5)];
  long long v10 = (void **)v5;
  sub_100682B1C(&v10);
  long long v10 = (void **)&v6;
  sub_100682B1C(&v10);
}

void sub_1019378B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a12;
  sub_100682B1C(&a17);
  _Unwind_Resume(a1);
}

void sub_101937904(uint64_t a1, int a2)
{
  if (qword_1024193E0 != -1) {
    dispatch_once(&qword_1024193E0, &stru_102345E10);
  }
  uint64_t v4 = qword_1024193E8;
  if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
  {
    sub_1019BCAD4(a2, &__p);
    uint64_t v5 = v25 >= 0 ? &__p : (void **)__p;
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#Supl,Emergency Event ,EmergencyEvent,%{public}s", (uint8_t *)&buf, 0xCu);
    if (v25 < 0) {
      operator delete(__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102345E10);
    }
    sub_1019BCAD4(a2, &buf);
    if (v22[0] >= 0) {
      p_long long buf = &buf;
    }
    else {
      p_long long buf = (long long *)buf;
    }
    *(_DWORD *)int v31 = 136446210;
    *(void *)&void v31[4] = p_buf;
    long long v15 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v22[0]) < 0) {
      operator delete((void *)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v15);
    if (v15 != (char *)&__p) {
      free(v15);
    }
  }
  if (a2 == 9)
  {
    if (qword_1024193E0 != -1) {
      dispatch_once(&qword_1024193E0, &stru_102345E10);
    }
    long long v10 = qword_1024193E8;
    if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#Supl,BB Emergency Session end", (uint8_t *)&__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102345E10);
      }
      LOWORD(buf) = 0;
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v17);
      if (v17 != (char *)&__p) {
        free(v17);
      }
    }
    sub_1019351C4(a1 + 8, 11);
  }
  else
  {
    if (a2 == 5)
    {
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102345E10);
      }
      long long v11 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#Supl,BB Emergency Session begin", (uint8_t *)&__p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102345E10);
        }
        LOWORD(buf) = 0;
        long long v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v18);
        if (v18 != (char *)&__p) {
          free(v18);
        }
      }
      *(_DWORD *)(a1 + 1644) = 3;
      LODWORD(__p) = 49;
      int v24 = 3;
      int v26 = 0;
      int v27 = 51;
      int v28 = 2;
      int v29 = 0;
      v22[0] = 0;
      long long buf = 0uLL;
      *(void *)int v31 = &buf;
      v31[8] = 0;
      *(void *)&long long buf = operator new(0x50uLL);
      *((void *)&buf + 1) = buf;
      v22[0] = buf + 80;
      *((void *)&buf + 1) = sub_100682A48((uint64_t)v22, (uint64_t)&__p, (uint64_t)v30, buf);
      for (uint64_t i = 48; i != -32; i -= 40)
        sub_100118010((uint64_t)&__p + i);
      long long v13 = *(void **)(a1 + 3224);
      memset(v19, 0, sizeof(v19));
      sub_100682C20(v19, buf, *((uint64_t *)&buf + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&buf + 1) - buf) >> 3));
      [v13 setMeasurements:sub_10067C03C(v19)];
      char v9 = v19;
    }
    else
    {
      if (a2 != 3) {
        return;
      }
      if (qword_1024193E0 != -1) {
        dispatch_once(&qword_1024193E0, &stru_102345E10);
      }
      uint64_t v6 = qword_1024193E8;
      if (os_log_type_enabled((os_log_t)qword_1024193E8, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Supl,BB Emergency Session begin", (uint8_t *)&__p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1024193E0 != -1) {
          dispatch_once(&qword_1024193E0, &stru_102345E10);
        }
        LOWORD(buf) = 0;
        long long v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLEurekaSupl::process_EmergencyEvent(const qmi::pds::EmergencyEvent)", "%s\n", v16);
        if (v16 != (char *)&__p) {
          free(v16);
        }
      }
      *(_DWORD *)(a1 + 1644) = 1;
      LODWORD(__p) = 49;
      int v24 = 1;
      int v26 = 0;
      int v27 = 51;
      int v28 = 2;
      int v29 = 0;
      v22[0] = 0;
      long long buf = 0uLL;
      *(void *)int v31 = &buf;
      v31[8] = 0;
      *(void *)&long long buf = operator new(0x50uLL);
      *((void *)&buf + 1) = buf;
      v22[0] = buf + 80;
      *((void *)&buf + 1) = sub_100682A48((uint64_t)v22, (uint64_t)&__p, (uint64_t)v30, buf);
      for (uint64_t j = 48; j != -32; j -= 40)
        sub_100118010((uint64_t)&__p + j);
      long long v8 = *(void **)(a1 + 3224);
      memset(v20, 0, sizeof(v20));
      sub_100682C20(v20, buf, *((uint64_t *)&buf + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&buf + 1) - buf) >> 3));
      [v8 setMeasurements:sub_10067C03C(v20)];
      char v9 = v20;
    }
    std::string __p = v9;
    sub_100682B1C((void ***)&__p);
    std::string __p = &buf;
    sub_100682B1C((void ***)&__p);
  }
}

void sub_101938088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void **a21)
{
  a21 = (void **)&a17;
  sub_100682B1C(&a21);
  _Unwind_Resume(a1);
}

void sub_101938138(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_101938168(id a1)
{
  qword_1024193E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_10193819C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1019381D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10193821C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = *a3;
  uint64_t v10 = a3[1];
  *(void *)(a1 + 40) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  long long v11 = (void **)(a1 + 96);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 2;
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8)) {
      goto LABEL_5;
    }
LABEL_20:
    sub_10193A23C(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, v22, v23, v24, v25,
      v26,
      v27,
      v28,
      v29,
      v30);
    uint64_t result = abort_report_np();
    __break(1u);
    return result;
  }
  if (!*(unsigned char *)(a2 + 23)) {
    goto LABEL_20;
  }
LABEL_5:
  if (*(char *)(a2 + 23) >= 0) {
    size_t v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v12 = *(void *)(a2 + 8);
  }
  sub_1001110E4((uint64_t)&v20, v12 + 1);
  if (v21 >= 0) {
    long long v13 = &v20;
  }
  else {
    long long v13 = (long long *)v20;
  }
  if (v12)
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v14 = (const void *)a2;
    }
    else {
      long long v14 = *(const void **)a2;
    }
    memmove(v13, v14, v12);
  }
  *(_WORD *)((char *)v13 + v12) = 44;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  *(_OWORD *)long long v11 = v20;
  *(void *)(a1 + 112) = v21;
  return a1;
}

void sub_101938390(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  sub_1000F5BB0(v3, *(void **)(v1 + 64));
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    sub_1000DB0A0(v7);
  }
  sub_1000F5BB0(v2, *v4);
  _Unwind_Resume(a1);
}

uint64_t sub_1019383D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10193846C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_101938504(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10193859C(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  sub_10193860C(*(void **)(a1 + 56), (void *)(a1 + 64), a1);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_1000F5BB0(v2, *(void **)(a1 + 64));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  sub_1000F5BB0(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

uint64_t sub_10193860C(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      sub_1019342E0(a3, *((_DWORD *)v5 + 8));
      uint64_t v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          uint64_t v5 = v7;
        }
        while (!v8);
      }
      uint64_t v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void sub_101938690()
{
}

void *sub_1019386A4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102345EA0;
  result[1] = v3;
  return result;
}

uint64_t sub_1019386EC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102345EA0;
  a2[1] = v2;
  return result;
}

void *sub_101938718(uint64_t a1, uint64_t a2)
{
  return sub_101817340(a2, 0, *(void *)(*(void *)(a1 + 8) + 1496));
}

uint64_t sub_10193872C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10193876C()
{
}

void sub_10193877C()
{
}

void *sub_101938790(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102345F30;
  result[1] = v3;
  return result;
}

uint64_t sub_1019387D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102345F30;
  a2[1] = v2;
  return result;
}

void *sub_101938804(uint64_t a1, uint64_t a2)
{
  return sub_101817340(a2, 0, *(void *)(*(void *)(a1 + 8) + 1496));
}

uint64_t sub_101938818(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101938858()
{
}

void sub_101938868()
{
}

void *sub_10193887C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102345FB0;
  result[1] = v3;
  return result;
}

uint64_t sub_1019388C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102345FB0;
  a2[1] = v2;
  return result;
}

void *sub_1019388F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((sub_10073CBFC() & 1) == 0)
  {
    sub_10181934C(a2);
    sub_101814948(a2);
  }
  uint64_t v4 = *(void *)(v3 + 1496);

  return sub_101817340(a2, 1u, v4);
}

uint64_t sub_101938948(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101938988()
{
}

void sub_101938998()
{
}

void *sub_1019389AC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346030;
  result[1] = v3;
  return result;
}

uint64_t sub_1019389F4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346030;
  a2[1] = v2;
  return result;
}

void *sub_101938A20(uint64_t a1, uint64_t a2)
{
  return sub_101817340(a2, 0, *(void *)(*(void *)(a1 + 8) + 1496));
}

uint64_t sub_101938A34(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101938A74()
{
}

uint64_t sub_101938A80(uint64_t a1)
{
  return sub_1019351C4(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_101938A94()
{
}

void *sub_101938AA8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1023460B0;
  return result;
}

void sub_101938AE0(uint64_t a1, void *a2)
{
  *a2 = off_1023460B0;
}

void *sub_101938B08(uint64_t a1, uint64_t a2)
{
  return sub_10181446C(a2);
}

uint64_t sub_101938B10(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101938B50()
{
}

void sub_101938B60()
{
}

void *sub_101938B74(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346130;
  result[1] = v3;
  return result;
}

uint64_t sub_101938BBC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346130;
  a2[1] = v2;
  return result;
}

void *sub_101938BE8(uint64_t a1, uint64_t a2)
{
  return sub_101817340(a2, 0, *(void *)(*(void *)(a1 + 8) + 1496));
}

uint64_t sub_101938BFC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101938C3C()
{
}

void sub_101938C4C()
{
}

void *sub_101938C60(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1023461B0;
  result[1] = v3;
  return result;
}

uint64_t sub_101938CA8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1023461B0;
  a2[1] = v2;
  return result;
}

void *sub_101938CD4(uint64_t a1, uint64_t a2)
{
  return sub_1018192AC(a2, *(_DWORD *)(*(void *)(a1 + 8) + 1140));
}

uint64_t sub_101938CE8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101938D28()
{
}

void sub_101938D38()
{
}

void *sub_101938D4C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_102346230;
  return result;
}

void sub_101938D84(uint64_t a1, void *a2)
{
  *a2 = off_102346230;
}

id sub_101938DAC(uint64_t a1, uint64_t a2)
{
  return sub_1018180F4(a2);
}

uint64_t sub_101938DB4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101938DF4()
{
}

void *sub_101938E00(void *a1)
{
  *a1 = off_1023462B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_101938E50(void *a1)
{
  *a1 = off_1023462B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  operator delete();
}

unsigned char *sub_101938EC0(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1023462B0;
  v2[8] = *(unsigned char *)(a1 + 8);
  *((void *)v2 + 3) = 0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 2) = 0;
  sub_10016989C((void *)v2 + 2, *(const void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 24) - *(void *)(a1 + 16));
  return v2;
}

void sub_101938F28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_101938F3C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1023462B0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 16) = 0;
  return sub_10016989C((void *)(a2 + 16), *(const void **)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 24) - *(void *)(a1 + 16));
}

void sub_101938F7C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

void sub_101938F94(void *__p)
{
  uint64_t v2 = (void *)__p[2];
  if (v2)
  {
    __p[3] = v2;
    operator delete(v2);
  }

  operator delete(__p);
}

void sub_101938FD8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_101938FEC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10193902C()
{
}

void sub_10193903C()
{
}

void *sub_101939050(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_102346330;
  result[1] = v3;
  return result;
}

uint64_t sub_101939098(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_102346330;
  a2[1] = v2;
  return result;
}

id sub_1019390C4(uint64_t a1, uint64_t a2)
{
  return sub_10181873C(a2, **(unsigned int **)(a1 + 8));
}

uint64_t sub_1019390D8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101939118()
{
}

void sub_101939128()
{
}

unsigned char *sub_10193913C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = off_1023463B0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_101939188(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1023463B0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void *sub_1019391B8(uint64_t a1, uint64_t a2)
{
  return sub_1018190A4(a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1019391C8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_101939208()
{
}

void sub_101939214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v27;
  a24 = v28;
  uint64_t v30 = v29;
  sub_100857C30();
  if (!v31) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v32, "{\"msg%{public}.0s\":\"Invalid instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
  }
  char v33 = *(NSObject **)(v26 + 984);
  if (os_signpost_enabled(v33))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v33, v34, v35, "Invalid instance", "{\"msg%{public}.0s\":\"Invalid instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v33, v36, "{\"msg%{public}.0s\":\"Invalid instance\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *uint64_t v30 = 48;
  sub_100219E80();
}

void sub_10193938C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v27;
  a24 = v28;
  uint64_t v30 = v29;
  sub_100857C30();
  if (!v31) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v32, "{\"msg%{public}.0s\":\"Invalid SUPL session status callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
  }
  char v33 = *(NSObject **)(v26 + 984);
  if (os_signpost_enabled(v33))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v33, v34, v35, "Invalid SUPL session status callback", "{\"msg%{public}.0s\":\"Invalid SUPL session status callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v33, v36, "{\"msg%{public}.0s\":\"Invalid SUPL session status callback\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *uint64_t v30 = 47;
  sub_100219E80();
}

void sub_101939504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v27;
  a24 = v28;
  uint64_t v30 = v29;
  sub_100857C30();
  if (!v31) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  if (sub_100857BFC())
  {
    sub_100219C98();
    sub_100219D40((void *)&_mh_execute_header, v24, v32, "{\"msg%{public}.0s\":\"SUPL queue assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
  }
  char v33 = *(NSObject **)(v26 + 984);
  if (os_signpost_enabled(v33))
  {
    sub_100219C98();
    sub_100219C3C((void *)&_mh_execute_header, v33, v34, v35, "SUPL queue assertion failed", "{\"msg%{public}.0s\":\"SUPL queue assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (*(void *)(v25 + 976) != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
  }
  if (sub_10151F830())
  {
    sub_100219C98();
    sub_100219D28((void *)&_mh_execute_header, v33, v36, "{\"msg%{public}.0s\":\"SUPL queue assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  *uint64_t v30 = 46;
  sub_100219E80();
}

#error "1019396F0: call analysis failed (funcsize=78)"

#error "101939878: call analysis failed (funcsize=74)"

#error "1019399EC: call analysis failed (funcsize=74)"

#error "101939B5C: call analysis failed (funcsize=78)"

#error "101939CE4: call analysis failed (funcsize=74)"

#error "101939E58: call analysis failed (funcsize=74)"

#error "101939FCC: call analysis failed (funcsize=74)"

#error "10193A140: call analysis failed (funcsize=74)"

void sub_10193A23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  sub_100219E98();
  a23 = v25;
  a24 = v26;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_102345DF0);
  }
  if (sub_100857B88())
  {
    sub_1001DB2F0();
    sub_100219D40((void *)&_mh_execute_header, v24, v27, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
  }
  if (sub_100857BC4())
  {
    sub_1001DB2F0();
    sub_100219C3C((void *)&_mh_execute_header, v24, v28, v29, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_102345DF0);
    }
  }
  if (sub_100857BA8())
  {
    sub_1001DB2F0();
    sub_100219D28((void *)&_mh_execute_header, v24, v30, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", &a9);
  }
  sub_100219E80();
}

void sub_10193A3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10016BC44((uint64_t)v22);
  int v6 = *(_DWORD *)(a1 + 72);
  unint64_t v7 = *(void *)(a1 + 8);
  if ((v6 & 1) == 0) {
    unint64_t v7 = 0;
  }
  *(void *)a2 = v7;
  float v8 = *(float *)(a1 + 16) * 0.000001;
  if ((v6 & 2) == 0) {
    float v8 = 0.0;
  }
  *(float *)(a2 + 44) = v8;
  *(double *)(a2 + 16) = sub_1004BDB28(v7 / 0xF4240) + (double)(v7 % 0xF4240) * 0.000000001;
  double v21 = *(double *)(a1 + 32);
  if (v21 == 0.0 || (*(unsigned char *)(a1 + 72) & 0x20) == 0)
  {
    double v21 = v22[0];
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    char v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,falling back to fix receipt time", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v23) = 0;
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void GNSS::Convert::timeFromProtobuf(const proto::gnss::Time &, GNSS::TimeInfo &, CLUtils::LiveTimeConverter &)", "%s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  *(double *)(a2 + 32) = v21;
  if (!sub_100B01594(a3, &v21, (double *)(a2 + 24)))
  {
    *(double *)(a2 + 24) = sub_1000D3E50() + v22[0] - v21;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Warning,falling back in fix mach abs calc", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v23) = 0;
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void GNSS::Convert::timeFromProtobuf(const proto::gnss::Time &, GNSS::TimeInfo &, CLUtils::LiveTimeConverter &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
  }
  double v11 = v22[0] - v21;
  *(double *)(a2 + 8) = v22[2] - (v22[0] - v21);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  size_t v12 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    double v13 = *(double *)(a2 + 8) - *(double *)(a2 + 16);
    *(_DWORD *)long long buf = 134349312;
    double v28 = v11;
    __int16 v29 = 2050;
    double v30 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#gpsd,fixAgeSeconds,%{public}.4f,pedApparentCfTimeErr,%{public}.4f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v16 = *(double *)(a2 + 8) - *(double *)(a2 + 16);
    int v23 = 134349312;
    double v24 = v11;
    __int16 v25 = 2050;
    double v26 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void GNSS::Convert::timeFromProtobuf(const proto::gnss::Time &, GNSS::TimeInfo &, CLUtils::LiveTimeConverter &)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if ((~*(_DWORD *)(a1 + 72) & 0xC) != 0 || !*(unsigned char *)(a1 + 20))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    long long v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "#gpsd,Time.leapSeconds invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v23) = 0;
      long long v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void GNSS::Convert::timeFromProtobuf(const proto::gnss::Time &, GNSS::TimeInfo &, CLUtils::LiveTimeConverter &)", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    int v14 = 0;
  }
  else
  {
    int v14 = *(_DWORD *)(a1 + 64);
  }
  *(_DWORD *)(a2 + 40) = v14;
}

uint64_t sub_10193AA24(uint64_t result, uint64_t a2)
{
  if ((~*(_DWORD *)(result + 96) & 0x3BF) == 0)
  {
    uint64_t v3 = result;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)(result + 24);
    *(void *)(a2 + 56) = *(void *)(result + 40);
    float64x2_t v4 = *(float64x2_t *)(result + 48);
    *(double *)(a2 + 48) = sqrt(vmlad_n_f64(COERCE_DOUBLE(*(void *)&vmulq_f64(v4, v4).f64[1]), v4.f64[0], v4.f64[0]));
    *(float64x2_t *)(a2 + 64) = vmulq_f64(v4, (float64x2_t)vdupq_n_s64(0x400399999999999AuLL));
    *(void *)(a2 + 80) = *(void *)(result + 64);
    *(_DWORD *)(a2 + 88) = sub_1017E5CA4(*(_DWORD *)(result + 72));
    uint64_t result = sub_1017E5E74(*(_DWORD *)(v3 + 76));
    *(_DWORD *)(a2 + 92) = result;
    double v5 = *(double *)(a2 + 48);
    BOOL v6 = v5 > 0.0;
    if (v5 >= 100000.0) {
      BOOL v6 = 0;
    }
    *(unsigned char *)a2 = v6;
    *(_DWORD *)(a2 + 40) = 1;
    if (fabs(*(double *)(a2 + 32)) < 2.22044605e-16) {
      *(_DWORD *)(a2 + 40) = -1;
    }
  }
  return result;
}

uint64_t sub_10193AB08(uint64_t result, uint64_t a2)
{
  double v3 = *(double *)(result + 8);
  double v2 = *(double *)(result + 16);
  *(double *)(a2 + 8) = v3;
  *(double *)(a2 + 16) = v2;
  if (v3 < 0.0 || v2 < 0.0)
  {
    char v4 = 0;
    *(void *)(a2 + 8) = 0xBFF0000000000000;
  }
  else
  {
    char v4 = 1;
  }
  *(unsigned char *)a2 = v4;
  double v6 = *(double *)(result + 40);
  double v5 = *(double *)(result + 48);
  *(double *)(a2 + 32) = v6;
  *(double *)(a2 + 40) = v5;
  if (v6 < 0.0 || v6 > 360.0 || v5 < 0.0)
  {
    char v7 = 0;
    *(void *)(a2 + 32) = 0xBFF0000000000000;
  }
  else
  {
    char v7 = 1;
  }
  *(unsigned char *)(a2 + 24) = v7;
  double v8 = *(double *)(result + 32);
  *(void *)(a2 + 56) = *(void *)(result + 24);
  *(double *)(a2 + 64) = v8;
  *(unsigned char *)(a2 + 48) = v8 >= 0.0;
  return result;
}

void sub_10193AB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(a1 + 48);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248A348 + 8);
    }
    sub_10193A3AC(v6, a2, a3);
    int v5 = *(_DWORD *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        return;
      }
      goto LABEL_11;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A348 + 16);
  }
  sub_10193AA24(v7, a2 + 48);
  if ((*(_DWORD *)(a1 + 48) & 4) != 0)
  {
LABEL_11:
    uint64_t v8 = *(void *)(a1 + 24);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A348 + 24);
    }
    sub_10193AB08(v8, a2 + 144);
  }
}

void sub_10193AC4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
  sub_1018319E0((uint64_t)v37, a4);
  sub_10084F664((uint64_t)v36, a5);
  sub_100A17630((uint64_t)v35, a6);
  sub_101831A78((uint64_t)v34, a7);
  sub_100852564((uint64_t)v33, a8);
  sub_1008525FC((uint64_t)v32, a9);
  sub_10084F6FC((uint64_t)v31, a10);
  sub_1008527DC((uint64_t)v30, a11);
  sub_1019269C0(a1, a3, (uint64_t)v37, (uint64_t)v36, (uint64_t)v35, (uint64_t)v34, (uint64_t)v33, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, a12, a13);
  sub_10084FC8C(v30);
  sub_10084FC08(v31);
  sub_100850B38(v32);
  sub_100850AB4(v33);
  sub_1008524E0(v34);
  sub_1008522FC(v35);
  sub_10084FB84(v36);
  sub_1008520A8(v37);
  *(void *)a1 = &off_1023464B0;
  *(void *)(a1 + 1672) = 0;
  *(unsigned char *)(a1 + 1680) = 0;
  *(_DWORD *)(a1 + 1684) = 255;
  *(void *)(a1 + 1696) = 0;
  *(void *)(a1 + 1688) = 0;
  *(_DWORD *)(a1 + 1704) = 0;
  sub_1000C7F88(buf);
  LOBYTE(v38) = 0;
  char v20 = sub_1000D2988(*(uint64_t *)buf, "OverrideReliabilityCriteriaForGnssDemos", (BOOL *)&v38);
  if ((_BYTE)v38) {
    char v21 = v20;
  }
  else {
    char v21 = 0;
  }
  if (v29) {
    sub_1000DB0A0(v29);
  }
  *(unsigned char *)(a1 + 1708) = v21;
  *(void *)(a1 + 1712) = 0xC08F400000000000;
  sub_100103240();
  *(unsigned char *)(a1 + 1720) = sub_10073C674();
  sub_100103240();
  *(unsigned char *)(a1 + 1721) = sub_10073C6AC();
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_OWORD *)(a1 + 1768) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1881) = 0u;
  *(_DWORD *)(a1 + 1936) = 1;
  *(unsigned char *)(a1 + 1992) = 0;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_OWORD *)(a1 + 1960) = 0u;
  *(_OWORD *)(a1 + 1976) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 2000) = _Q1;
  *(unsigned char *)(a1 + 2016) = 0;
  *(void *)(a1 + 2024) = 0xBFF0000000000000;
  *(void *)(a1 + 2032) = 0xBFF0000000000000;
  *(unsigned char *)(a1 + 2040) = 0;
  *(_OWORD *)(a1 + 2048) = _Q1;
  *(unsigned char *)(a1 + 2064) = 0;
  *(void *)(a1 + 2120) = 0;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(_OWORD *)(a1 + 2104) = 0u;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(_DWORD *)(a1 + 2128) = 1065353216;
  *(void *)(a1 + 2136) = 0x100000005;
  *(void *)(a1 + 2144) = 0;
  *(void *)(a1 + 2152) = a2;
  *(_OWORD *)(a1 + 2160) = 0u;
  sub_100134750(&__p, "CLGnssDaemonDevice");
  *(void *)long long buf = a1;
  operator new();
}

void sub_10193C610()
{
}

void sub_10193C62C(void *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  JUMPOUT(0x10193C710);
}

void sub_10193C634()
{
}

void sub_10193C63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (a42) {
    sub_1000DB0A0(a42);
  }
  JUMPOUT(0x10193C8F4);
}

void sub_10193C650(_Unwind_Exception *a1)
{
  sub_101960484(v3, 0);
  sub_101926DBC(v1);
  _Unwind_Resume(a1);
}

void sub_10193C910(uint64_t a1, int *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 1784), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1023466D8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssDaemonDevice::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1023466D8);
    }
    char v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      long long v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssDaemonDevice::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10195AA34(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10193CACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_10193CAEC(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  int v20 = a2;
  if (a4 & 1 | (unint64_t)a3)
  {
    char v4 = a4;
    int v5 = a3;
    unsigned int v7 = a2;
    uint64_t v6 = a1;
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101963410(qword_1024193D0 == -1);
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_1023466B8);
LABEL_3:
  uint64_t v8 = qword_1024193D8;
  os_log_type_t v9 = *(unsigned char *)(v6 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v9))
  {
    uint64_t v10 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      uint64_t v10 = (void *)*v10;
    }
    if (v7 > 2) {
      char v11 = "StateUnknown";
    }
    else {
      char v11 = (&off_102346B40)[v7];
    }
    sub_100134750(__p, v11);
    if (SBYTE3(v25) >= 0) {
      size_t v12 = __p;
    }
    else {
      size_t v12 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v27 = 1024;
    unsigned int v28 = v7;
    __int16 v29 = 2080;
    double v30 = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%sstate,%d,%s", buf, 0x1Cu);
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    __int16 v14 = (void *)(v6 + 96);
    if (*(char *)(v6 + 119) < 0) {
      __int16 v14 = (void *)*v14;
    }
    if (v7 > 2) {
      long long v15 = "StateUnknown";
    }
    else {
      long long v15 = (&off_102346B40)[v7];
    }
    sub_100134750(v18, v15);
    if (v19 >= 0) {
      __int16 v16 = v18;
    }
    else {
      __int16 v16 = (void **)v18[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v14;
    __int16 v22 = 1024;
    unsigned int v23 = v7;
    __int16 v24 = 2080;
    __int16 v25 = v16;
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLStateMachine<CLGnssDaemonDevice>::setStateHandler(State, StateHandler) [T = CLGnssDaemonDevice]", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  *(void *)long long buf = &v20;
  uint64_t result = sub_1000C5658((uint64_t **)(v6 + 8), &v20, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
  result[5] = v5;
  result[6] = v4;
  return result;
}

uint64_t sub_10193CDF4(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = 0;
  switch(a2)
  {
    case 0u:
      uint64_t v42 = *(NSObject **)(a1 + 2152);
      v82[0] = _NSConcreteStackBlock;
      v82[1] = 3221225472;
      v82[2] = sub_10195E06C;
      v82[3] = &unk_1022A3020;
      unsigned char v82[4] = a1;
      dispatch_async(v42, v82);
      (*(void (**)(void))(**(void **)(a1 + 1736) + 24))(*(void *)(a1 + 1736));
      sub_10195E078(a1 + 2176, 9, 20.0);
      goto LABEL_122;
    case 1u:
      return v4;
    case 2u:
      unsigned int v35 = *(_DWORD *)(a1 + 2596);
      BOOL v36 = v35 > 0x25;
      uint64_t v37 = (1 << v35) & 0x3C20000010;
      if (v36 || v37 == 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        uint64_t v56 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1018779E8(*(_DWORD *)(a1 + 2596), (uint64_t)&v88);
          uint64_t v57 = (v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v88
              : (std::string *)v88.__r_.__value_.__r.__words[0];
          LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#gpsd,Idle,Request,Dropping,%{public}s", (uint8_t *)&__p, 0xCu);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&v88, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          sub_1018779E8(*(_DWORD *)(a1 + 2596), (uint64_t)&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
          uint64_t v59 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v59);
          if (v59 != &v88) {
            free(v59);
          }
        }
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        char v39 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          sub_1018779E8(*(_DWORD *)(a1 + 2596), (uint64_t)&v88);
          unsigned int v40 = (v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v88
              : (std::string *)v88.__r_.__value_.__r.__words[0];
          LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#gpsd,Idle,Request,sending,%{public}s", (uint8_t *)&__p, 0xCu);
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&v88, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          sub_1018779E8(*(_DWORD *)(a1 + 2596), (uint64_t)&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v67 = &__p;
          }
          else {
            int v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v67;
          __int16 v68 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v68);
          if (v68 != &v88) {
            free(v68);
          }
        }
        sub_101941BEC(a1, a1 + 2576);
      }
      if ((sub_100FCD768() & 1) == 0) {
        sub_101A9BF7C();
      }
      uint64_t v4 = 0;
      *(_DWORD *)(a1 + 2972) |= 4u;
      *(_DWORD *)(a1 + 2596) = 0;
      return v4;
    case 3u:
      if (*(_DWORD *)(a1 + 2984) != 34) {
        goto LABEL_122;
      }
      char v41 = *(NSObject **)(a1 + 2152);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10195EB64;
      block[3] = &unk_1022A3020;
      block[4] = a1;
      dispatch_async(v41, block);
      uint64_t v4 = 1;
      break;
    case 4u:
      if (*(_DWORD *)(a1 + 2984) == 34)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v20 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          sub_100134750(&v88, "GpsdResponseFailureStatusCode");
          int v21 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
          std::string::size_type v22 = v88.__r_.__value_.__r.__words[0];
          sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
          unsigned int v23 = &v88;
          if (v21 < 0) {
            unsigned int v23 = (std::string *)v22;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v24 = &__p;
          }
          else {
            __int16 v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v23;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v24;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#gpsd,Idle,FailedRequest,Recover,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&v88, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          sub_100134750(&__p, "GpsdResponseFailureStatusCode");
          int v70 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v71 = __p.__r_.__value_.__r.__words[0];
          sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
          int v72 = &__p;
          if (v70 < 0) {
            int v72 = (std::string *)v71;
          }
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v83 = 136446466;
          *(void *)&v83[4] = v72;
          *(_WORD *)&v83[12] = 2082;
          *(void *)&v83[14] = p_buf;
          int v74 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v74);
          if (v74 != &v88) {
            free(v74);
          }
        }
        sub_10195ED90((_DWORD *)a1, 0, *(_DWORD *)(a1 + 2984));
        sub_100134750(&buf, "GpsdResponseFailureStatusCode");
        __int16 v25 = std::string::append(&buf, " for request ");
        long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)v83);
        if ((v84 & 0x80u) == 0) {
          __int16 v27 = v83;
        }
        else {
          __int16 v27 = *(const std::string::value_type **)v83;
        }
        if ((v84 & 0x80u) == 0) {
          std::string::size_type v28 = v84;
        }
        else {
          std::string::size_type v28 = *(void *)&v83[8];
        }
        __int16 v29 = std::string::append(&__p, v27, v28);
        long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
        v88.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v30;
        v29->__r_.__value_.__l.__size_ = 0;
        v29->__r_.__value_.__r.__words[2] = 0;
        v29->__r_.__value_.__r.__words[0] = 0;
        uint64_t v31 = (uint64_t)std::string::append(&v88, " in Idle state");
        uint64_t v32 = *(void *)v31;
        v85[0] = *(void *)(v31 + 8);
        *(void *)((char *)v85 + 7) = *(void *)(v31 + 15);
        char v33 = *(unsigned char *)(v31 + 23);
        *(void *)(v31 + 8) = 0;
        *(void *)(v31 + 16) = 0;
        *(void *)uint64_t v31 = 0;
        if (*(char *)(a1 + 2335) < 0) {
          operator delete(*(void **)(a1 + 2312));
        }
        *(void *)(a1 + 2312) = v32;
        *(void *)(a1 + 2320) = v85[0];
        *(void *)(a1 + 2327) = *(void *)((char *)v85 + 7);
        *(unsigned char *)(a1 + 2335) = v33;
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
        if ((char)v84 < 0) {
          operator delete(*(void **)v83);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        uint64_t v4 = 2;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        __int16 v51 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          sub_100134750(&v88, "GpsdResponseFailureStatusCode");
          int v52 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
          std::string::size_type v53 = v88.__r_.__value_.__r.__words[0];
          sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
          uint64_t v54 = &v88;
          if (v52 < 0) {
            uint64_t v54 = (std::string *)v53;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v55 = &__p;
          }
          else {
            __int16 v55 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v54;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v55;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "#gpsd,Idle,FailedRequest,Drop,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v31 = sub_10013D1A0(115, 0);
        if (v31)
        {
          bzero(&v88, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          sub_100134750(&__p, "GpsdResponseFailureStatusCode");
          int v75 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v76 = __p.__r_.__value_.__r.__words[0];
          sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
          int v77 = &__p;
          if (v75 < 0) {
            int v77 = (std::string *)v76;
          }
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v78 = &buf;
          }
          else {
            int v78 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)uint64_t v83 = 136446466;
          *(void *)&v83[4] = v77;
          *(_WORD *)&v83[12] = 2082;
          *(void *)&v83[14] = v78;
          int v79 = (std::string *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v31 = sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v79);
          if (v79 != &v88) {
            free(v79);
          }
        }
        uint64_t v4 = 0;
      }
      sub_10195DEDC(v31, *(_DWORD *)(a1 + 2984));
      *(_DWORD *)(a1 + 2984) = 0;
      return v4;
    case 5u:
    case 6u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        sub_10195ED64(a2, &v88);
        int v6 = SHIBYTE(v88.__r_.__value_.__r.__words[2]);
        std::string::size_type v7 = v88.__r_.__value_.__r.__words[0];
        sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
        uint64_t v8 = &v88;
        if (v6 < 0) {
          uint64_t v8 = (std::string *)v7;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          os_log_type_t v9 = &__p;
        }
        else {
          os_log_type_t v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v8;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsd,Idle,FailedRequest,Recover,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v88, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        sub_10195ED64(a2, &__p);
        int v60 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v61 = __p.__r_.__value_.__r.__words[0];
        sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
        __int16 v62 = &__p;
        if (v60 < 0) {
          __int16 v62 = (std::string *)v61;
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v63 = &buf;
        }
        else {
          int v63 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)uint64_t v83 = 136446466;
        *(void *)&v83[4] = v62;
        *(_WORD *)&v83[12] = 2082;
        *(void *)&v83[14] = v63;
        __int16 v64 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v64);
        if (v64 != &v88) {
          free(v64);
        }
      }
      sub_10195ED90((_DWORD *)a1, 1, *(_DWORD *)(a1 + 2984));
      sub_10195ED64(a2, &buf);
      uint64_t v10 = std::string::append(&buf, " for request ");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)v83);
      if ((v84 & 0x80u) == 0) {
        size_t v12 = v83;
      }
      else {
        size_t v12 = *(const std::string::value_type **)v83;
      }
      if ((v84 & 0x80u) == 0) {
        std::string::size_type v13 = v84;
      }
      else {
        std::string::size_type v13 = *(void *)&v83[8];
      }
      __int16 v14 = std::string::append(&__p, v12, v13);
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v88.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      __int16 v16 = std::string::append(&v88, " in Idle state");
      std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
      v85[0] = v16->__r_.__value_.__l.__size_;
      *(void *)((char *)v85 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
      char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a1 + 2335) < 0) {
        operator delete(*(void **)(a1 + 2312));
      }
      *(void *)(a1 + 2312) = v17;
      *(void *)(a1 + 2320) = v85[0];
      *(void *)(a1 + 2327) = *(void *)((char *)v85 + 7);
      *(unsigned char *)(a1 + 2335) = v18;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
      if ((char)v84 < 0) {
        operator delete(*(void **)v83);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      goto LABEL_37;
    case 7u:
      uint64_t v34 = *(void *)(a1 + 2992);
      if (v34 && *(_DWORD *)(v34 + 8) == 2)
      {
        sub_10195EF78(a1 + 2176, 9);
        sub_101949DCC(a1);
        sub_101941BEC(a1, a1 + 2576);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v48 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v88.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "#gpsd,Idle,Unexpected event,GpsdIndication", (uint8_t *)&v88, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&v88, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          uint64_t v69 = (std::string *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v69);
          if (v69 != &v88) {
            free(v69);
          }
        }
        uint64_t v49 = *(void *)(a1 + 2992);
        *(void *)(a1 + 2992) = 0;
        uint64_t v80 = v49;
        sub_1019420FC((_DWORD *)a1, &v80);
        if (v80) {
          (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
        }
      }
      goto LABEL_122;
    case 8u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v47 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v88.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#gpsd,Idle,Detected GpsdShutdown", (uint8_t *)&v88, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v88, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        __int16 v66 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v66);
        if (v66 != &v88) {
          free(v66);
        }
      }
      (*(void (**)(void))(**(void **)(a1 + 1736) + 24))(*(void *)(a1 + 1736));
      sub_10195E078(a1 + 2176, 9, 20.0);
      goto LABEL_122;
    case 9u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      char v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v88.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#gpsd,Idle,GspdAliveTimer expired,Recover", (uint8_t *)&v88, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&v88, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        int v65 = (std::string *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v65);
        if (v65 != &v88) {
          free(v65);
        }
      }
      sub_10195ED90((_DWORD *)a1, 2, -1);
      std::string::assign((std::string *)(a1 + 2312), "GpsdAliveTimerExpired");
LABEL_37:
      uint64_t v4 = 2;
      break;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      char v43 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        sub_10195ED64(a2, &v88);
        char v44 = (v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v88
            : (std::string *)v88.__r_.__value_.__r.__words[0];
        LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v44;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "#gpsd,Idle,Unexpected event,%{public}s", (uint8_t *)&__p, 0xCu);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v88.__r_.__value_.__l.__data_);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&v88, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        sub_10195ED64(a2, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v45 = &__p;
        }
        else {
          uint64_t v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
        int v46 = (std::string *)_os_log_send_and_compose_impl();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Idle(CLGnssDaemonDevice::Event)", "%s\n", (const char *)v46);
        if (v46 != &v88) {
          free(v46);
        }
      }
LABEL_122:
      uint64_t v4 = 0;
      break;
  }
  return v4;
}

void sub_10193E260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10193E350(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  switch((int)a2)
  {
    case 0:
      sub_10195EF78(a1 + 2176, 9);
      sub_10194BED8(a1);
      return 1;
    case 1:
      return v2;
    case 2:
      if (*(unsigned char *)(a1 + 1680)
        || (int v38 = *(_DWORD *)(a1 + 2596), sub_100D33CD4(a1 + 1684))
        || *(unsigned char *)(a1 + 1665)
        || ((v38 - 8) >= 0xF ? (BOOL v71 = v38 == 27) : (BOOL v71 = 1), !v71))
      {
        sub_101941BEC(a1, a1 + 2576);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v72 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          sub_1018779E8(*(_DWORD *)(a1 + 2596), (uint64_t)v103);
          uint64_t v73 = v103[23] >= 0 ? v103 : *(unsigned char **)v103;
          LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v73;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#gpsd,Ready,Request,Dropping,%s", (uint8_t *)&__p, 0xCu);
          if ((v103[23] & 0x80000000) != 0) {
            operator delete(*(void **)v103);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(v103, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          sub_1018779E8(*(_DWORD *)(a1 + 2596), (uint64_t)&__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
          int v75 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v75);
          if (v75 != v103) {
            free(v75);
          }
        }
      }
      if ((sub_100FCD768() & 1) == 0) {
        sub_101A9BF7C();
      }
      *(_DWORD *)(a1 + 2972) |= 4u;
      *(_DWORD *)(a1 + 2596) = 0;
      return 1;
    case 3:
      int v39 = *(_DWORD *)(a1 + 2984);
      if (v39 > 50)
      {
        if (v39 == 51)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          __int16 v64 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int16 v103 = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "#gpsd,START_EMERGENCY_PREEMPTIVE_SESSION completed", v103, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_144;
          }
          bzero(v103, 0x65CuLL);
          if (qword_1024193D0 == -1) {
            goto LABEL_229;
          }
        }
        else
        {
          if (v39 != 52) {
            goto LABEL_144;
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          std::string::size_type v61 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int16 v103 = 0;
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#gpsd,STOP_EMERGENCY_PREEMPTIVE_SESSION completed", v103, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_144;
          }
          bzero(v103, 0x65CuLL);
          if (qword_1024193D0 == -1)
          {
LABEL_229:
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            unsigned int v90 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v90);
            if (v90 != v103) {
              free(v90);
            }
            goto LABEL_144;
          }
        }
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
        goto LABEL_229;
      }
      if (v39 != 1)
      {
        if (v39 == 2)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          unsigned int v40 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)__int16 v103 = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "#gpsd,stop accepted", v103, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v103, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            std::string v88 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v88);
            if (v88 != v103) {
              free(v88);
            }
          }
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023466F8);
          }
          char v41 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int16 v103 = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@ClxGps, state, 0, GnssDaemonDevice/gpsd", v103, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(v103, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023466F8);
            }
            LOWORD(__p.__r_.__value_.__l.__data_) = 0;
            __int16 v91 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v91);
            if (v91 != v103) {
              free(v91);
            }
          }
          v105[0] = 0;
          long long v104 = 0u;
          memset(v103, 0, sizeof(v103));
          memset(&v105[8], 0, 32);
          *(_DWORD *)&v105[40] = 1;
          long long v106 = 0u;
          long long v107 = 0u;
          long long v108 = 0u;
          v109[0] = 0;
          __asm { FMOV            V1.2D, #-1.0 }
          *(_OWORD *)&v109[8] = _Q1;
          v109[24] = 0;
          long long v110 = _Q1;
          v111[0] = 0;
          *(_OWORD *)&v111[8] = _Q1;
          v111[24] = 0;
          long long v112 = 0u;
          memset(v113, 0, 32);
          *(void *)&long long v115 = 0x100000005;
          long long v46 = *(_OWORD *)&v111[16];
          long long v47 = _Q1;
          *(_OWORD *)(a1 + 2040) = *(_OWORD *)v111;
          *(_OWORD *)(a1 + 2056) = v46;
          *(_OWORD *)(a1 + 2072) = 0u;
          long long v48 = *(_OWORD *)v109;
          long long v49 = *(_OWORD *)&v109[16];
          long long v50 = v107;
          *(_OWORD *)(a1 + 1976) = v108;
          *(_OWORD *)(a1 + 1992) = v48;
          *(_OWORD *)(a1 + 2008) = v49;
          *(_OWORD *)(a1 + 2024) = v47;
          long long v51 = *(_OWORD *)&v105[32];
          long long v52 = v106;
          long long v53 = *(_OWORD *)v105;
          *(_OWORD *)(a1 + 1912) = *(_OWORD *)&v105[16];
          *(_OWORD *)(a1 + 1928) = v51;
          *(_OWORD *)(a1 + 1944) = v52;
          *(_OWORD *)(a1 + 1960) = v50;
          long long v54 = *(_OWORD *)&v103[16];
          long long v55 = v104;
          *(_OWORD *)(a1 + 1848) = *(_OWORD *)v103;
          *(_OWORD *)(a1 + 1864) = v54;
          v113[4] = 0;
          int v114 = 1065353216;
          *((void *)&v115 + 1) = 0;
          *(void *)(a1 + 2088) = v113[0];
          *(_OWORD *)(a1 + 1880) = v55;
          *(_OWORD *)(a1 + 1896) = v53;
          sub_10084E2F4(a1 + 2096, &v113[1]);
          *(_OWORD *)(a1 + 2136) = v115;
          sub_10071874C((uint64_t)&v113[1]);
        }
        goto LABEL_144;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      __int16 v62 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int16 v103 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_INFO, "#gpsd,start completed", v103, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v103, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        char v89 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v89);
        if (v89 != v103) {
          free(v89);
        }
      }
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1023466F8);
      }
      int v63 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int16 v103 = 0;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "@ClxGps, state, 1, GnssDaemonDevice/gpsd", v103, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v103, 0x65CuLL);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1023466F8);
        }
        goto LABEL_229;
      }
LABEL_144:
      sub_10195F418(a1, *(_DWORD *)(a1 + 2984));
      *(_DWORD *)(a1 + 2984) = 0;
      return 1;
    case 4:
      unsigned int v19 = *(_DWORD *)(a1 + 2984);
      BOOL v20 = v19 > 0x33;
      uint64_t v21 = (1 << v19) & 0x8000400000006;
      if (v20 || v21 == 0)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        __int16 v66 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          sub_100134750(v103, "GpsdResponseFailureStatusCode");
          int v67 = v103[23];
          __int16 v68 = *(unsigned char **)v103;
          sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
          uint64_t v69 = v103;
          if (v67 < 0) {
            uint64_t v69 = v68;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v70 = &__p;
          }
          else {
            int v70 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v69;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v70;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "#gpsd,Ready,FailedRequest,Drop,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((v103[23] & 0x80000000) != 0) {
            operator delete(*(void **)v103);
          }
        }
        uint64_t v34 = sub_10013D1A0(115, 0);
        if (v34)
        {
          bzero(v103, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          sub_100134750(&__p, "GpsdResponseFailureStatusCode");
          int v92 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v93 = __p.__r_.__value_.__r.__words[0];
          sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
          __int16 v94 = &__p;
          if (v92 < 0) {
            __int16 v94 = (std::string *)v93;
          }
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_std::string buf = &buf;
          }
          else {
            p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)char v98 = 136446466;
          *(void *)&v98[4] = v94;
          *(_WORD *)&v98[12] = 2082;
          *(void *)&v98[14] = p_buf;
          char v96 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v34 = sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v96);
          if (v96 != v103) {
            free(v96);
          }
        }
        uint64_t v2 = 1;
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        unsigned int v23 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          sub_100134750(v103, "GpsdResponseFailureStatusCode");
          int v24 = v103[23];
          __int16 v25 = *(unsigned char **)v103;
          sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
          long long v26 = v103;
          if (v24 < 0) {
            long long v26 = v25;
          }
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v27 = &__p;
          }
          else {
            __int16 v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#gpsd,Ready,FailedRequest,Recover,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if ((v103[23] & 0x80000000) != 0) {
            operator delete(*(void **)v103);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(v103, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          sub_100134750(&__p, "GpsdResponseFailureStatusCode");
          int v83 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          std::string::size_type v84 = __p.__r_.__value_.__r.__words[0];
          sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
          __int16 v85 = &__p;
          if (v83 < 0) {
            __int16 v85 = (std::string *)v84;
          }
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v86 = &buf;
          }
          else {
            int v86 = (std::string *)buf.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)char v98 = 136446466;
          *(void *)&v98[4] = v85;
          *(_WORD *)&v98[12] = 2082;
          *(void *)&v98[14] = v86;
          int v87 = (char *)_os_log_send_and_compose_impl();
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v87);
          if (v87 != v103) {
            free(v87);
          }
        }
        sub_10195ED90((_DWORD *)a1, 0, *(_DWORD *)(a1 + 2984));
        sub_100134750(&buf, "GpsdResponseFailureStatusCode");
        std::string::size_type v28 = std::string::append(&buf, " for request ");
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)v98);
        if ((v99 & 0x80u) == 0) {
          long long v30 = v98;
        }
        else {
          long long v30 = *(const std::string::value_type **)v98;
        }
        if ((v99 & 0x80u) == 0) {
          std::string::size_type v31 = v99;
        }
        else {
          std::string::size_type v31 = *(void *)&v98[8];
        }
        uint64_t v32 = std::string::append(&__p, v30, v31);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        *(void *)&v103[16] = *((void *)&v32->__r_.__value_.__l + 2);
        *(_OWORD *)__int16 v103 = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        uint64_t v34 = (uint64_t)std::string::append((std::string *)v103, " in Ready state");
        uint64_t v35 = *(void *)v34;
        v100[0] = *(void *)(v34 + 8);
        *(void *)((char *)v100 + 7) = *(void *)(v34 + 15);
        char v36 = *(unsigned char *)(v34 + 23);
        *(void *)(v34 + 8) = 0;
        *(void *)(v34 + 16) = 0;
        *(void *)uint64_t v34 = 0;
        if (*(char *)(a1 + 2335) < 0) {
          operator delete(*(void **)(a1 + 2312));
        }
        *(void *)(a1 + 2312) = v35;
        *(void *)(a1 + 2320) = v100[0];
        *(void *)(a1 + 2327) = *(void *)((char *)v100 + 7);
        *(unsigned char *)(a1 + 2335) = v36;
        if ((v103[23] & 0x80000000) != 0) {
          operator delete(*(void **)v103);
        }
        if ((char)v99 < 0) {
          operator delete(*(void **)v98);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        uint64_t v2 = 2;
      }
      sub_10195DEDC(v34, *(_DWORD *)(a1 + 2984));
      *(_DWORD *)(a1 + 2984) = 0;
      return v2;
    case 5:
    case 6:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        sub_10195ED64(v2, v103);
        int v5 = v103[23];
        int v6 = *(unsigned char **)v103;
        sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&__p);
        std::string::size_type v7 = v103;
        if (v5 < 0) {
          std::string::size_type v7 = v6;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v8 = &__p;
        }
        else {
          uint64_t v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v7;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v8;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gpsd,Ready,FailedRequest,Recover,%{public}s,%{public}s", (uint8_t *)&buf, 0x16u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v103[23] & 0x80000000) != 0) {
          operator delete(*(void **)v103);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(v103, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        sub_10195ED64(v2, &__p);
        int v76 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        std::string::size_type v77 = __p.__r_.__value_.__r.__words[0];
        sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)&buf);
        int v78 = &__p;
        if (v76 < 0) {
          int v78 = (std::string *)v77;
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v79 = &buf;
        }
        else {
          int v79 = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)char v98 = 136446466;
        *(void *)&v98[4] = v78;
        *(_WORD *)&v98[12] = 2082;
        *(void *)&v98[14] = v79;
        uint64_t v80 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v80);
        if (v80 != v103) {
          free(v80);
        }
      }
      sub_10195ED90((_DWORD *)a1, 1, *(_DWORD *)(a1 + 2984));
      sub_10195ED64(v2, &buf);
      os_log_type_t v9 = std::string::append(&buf, " for request ");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)v98);
      if ((v99 & 0x80u) == 0) {
        long long v11 = v98;
      }
      else {
        long long v11 = *(const std::string::value_type **)v98;
      }
      if ((v99 & 0x80u) == 0) {
        std::string::size_type v12 = v99;
      }
      else {
        std::string::size_type v12 = *(void *)&v98[8];
      }
      std::string::size_type v13 = std::string::append(&__p, v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      *(void *)&v103[16] = *((void *)&v13->__r_.__value_.__l + 2);
      *(_OWORD *)__int16 v103 = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      long long v15 = std::string::append((std::string *)v103, " in Ready state");
      std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
      v100[0] = v15->__r_.__value_.__l.__size_;
      *(void *)((char *)v100 + 7) = *(std::string::size_type *)((char *)&v15->__r_.__value_.__r.__words[1] + 7);
      char v17 = HIBYTE(v15->__r_.__value_.__r.__words[2]);
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a1 + 2335) < 0) {
        operator delete(*(void **)(a1 + 2312));
      }
      *(void *)(a1 + 2312) = v16;
      *(void *)(a1 + 2320) = v100[0];
      *(void *)(a1 + 2327) = *(void *)((char *)v100 + 7);
      *(unsigned char *)(a1 + 2335) = v17;
      if ((v103[23] & 0x80000000) != 0) {
        operator delete(*(void **)v103);
      }
      if ((char)v99 < 0) {
        operator delete(*(void **)v98);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      return 2;
    case 7:
      uint64_t v37 = *(void *)(a1 + 2992);
      *(void *)(a1 + 2992) = 0;
      uint64_t v97 = v37;
      sub_1019420FC((_DWORD *)a1, &v97);
      if (v97) {
        (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
      }
      return 1;
    case 8:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v60 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int16 v103 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#gpsd,Ready,#Warning,Detected GpsdShutdown", v103, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v103, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        int v82 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v82);
        if (v82 != v103) {
          free(v82);
        }
      }
      return 0;
    case 9:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      char v18 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int16 v103 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#gpsd,Ready,Unexpected event GpsdAliveTimerExpired", v103, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(v103, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v81 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v81);
        if (v81 != v103) {
          free(v81);
        }
      }
      return 2;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v56 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        sub_10195ED64(v2, v103);
        uint64_t v57 = v103[23] >= 0 ? v103 : *(unsigned char **)v103;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v57;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "#gpsd,Ready,Unexpected event,%{public}s", (uint8_t *)&__p, 0xCu);
        if ((v103[23] & 0x80000000) != 0) {
          operator delete(*(void **)v103);
        }
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(v103, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        sub_10195ED64(v2, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          __int16 v58 = &__p;
        }
        else {
          __int16 v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v58;
        uint64_t v59 = (char *)_os_log_send_and_compose_impl();
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        sub_1004BA5E4("Generic", 1, 0, 0, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Ready(CLGnssDaemonDevice::Event)", "%s\n", v59);
        if (v59 != v103) {
          free(v59);
        }
      }
      return 1;
  }
}

void sub_10193FBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10193FCA8(uint64_t a1, unsigned int a2)
{
  uint64_t result = 2;
  switch(a2)
  {
    case 0u:
      char v18 = *(NSObject **)(a1 + 2152);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10195F40C;
      block[3] = &unk_1022A3020;
      block[4] = a1;
      dispatch_async(v18, block);
      sub_100FCF7D8(a1 + 2576);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      unsigned int v19 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Sending EXIT", v42, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v42, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        *(_WORD *)std::string __p = 0;
        long long v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Recovery(CLGnssDaemonDevice::Event)", "%s\n", v29);
        if (v29 != (char *)v42) {
          free(v29);
        }
      }
      if ((sub_100FCD768() & 1) == 0) {
        sub_101A9BF7C();
      }
      int v20 = *(_DWORD *)(a1 + 2972);
      *(_DWORD *)(a1 + 2596) = 36;
      *(_DWORD *)(a1 + 2972) = v20 | 0x2000004;
      uint64_t v21 = *(void *)(a1 + 2776);
      if (!v21) {
        operator new();
      }
      *(_DWORD *)(v21 + 20) |= 1u;
      std::string::size_type v22 = *(std::string **)(v21 + 8);
      if (v22 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
        operator new();
      }
      std::string::operator=(v22, (const std::string *)(a1 + 2312));
      if (*(char *)(a1 + 2335) < 0)
      {
        **(unsigned char **)(a1 + 2312) = 0;
        *(void *)(a1 + 2320) = 0;
      }
      else
      {
        *(unsigned char *)(a1 + 2312) = 0;
        *(unsigned char *)(a1 + 2335) = 0;
      }
      sub_101941BEC(a1, a1 + 2576);
      return 2;
    case 1u:
      return result;
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      if ((*(_DWORD *)(a1 + 2984) - 35) < 2) {
        return 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v5 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10195ED64(a2, v42);
        int v6 = v43;
        std::string::size_type v7 = *(uint8_t **)v42;
        sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)__p);
        uint64_t v8 = v42;
        if (v6 < 0) {
          uint64_t v8 = v7;
        }
        if (v41 >= 0) {
          os_log_type_t v9 = __p;
        }
        else {
          os_log_type_t v9 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::string buf = 136446466;
        *(void *)&uint8_t buf[4] = v8;
        __int16 v33 = 2082;
        uint64_t v34 = v9;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Unexpected event,%{public}s,%{public}s", buf, 0x16u);
        if (v41 < 0) {
          operator delete(*(void **)__p);
        }
        if (v43 < 0) {
          operator delete(*(void **)v42);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(v42, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      sub_10195ED64(a2, __p);
      int v10 = v41;
      long long v11 = *(unsigned char **)__p;
      sub_1018779E8(*(_DWORD *)(a1 + 2984), (uint64_t)buf);
      std::string::size_type v12 = __p;
      if (v10 < 0) {
        std::string::size_type v12 = v11;
      }
      if (v35 >= 0) {
        std::string::size_type v13 = buf;
      }
      else {
        std::string::size_type v13 = *(unsigned char **)buf;
      }
      int v36 = 136446466;
      uint64_t v37 = v12;
      __int16 v38 = 2082;
      int v39 = v13;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      if (v35 < 0) {
        operator delete(*(void **)buf);
      }
      if (v41 < 0) {
        operator delete(*(void **)__p);
      }
      goto LABEL_79;
    case 7u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      long long v15 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Unexpected event,GpsdIndication", v42, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(v42, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        *(_WORD *)std::string __p = 0;
        std::string::size_type v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Recovery(CLGnssDaemonDevice::Event)", "%s\n", v28);
        if (v28 != (char *)v42) {
          free(v28);
        }
      }
      uint64_t v16 = *(void *)(a1 + 2992);
      *(void *)(a1 + 2992) = 0;
      uint64_t v30 = v16;
      sub_1019420FC((_DWORD *)a1, &v30);
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      return 2;
    case 8u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      char v17 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Detected GpsdShutdown", v42, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(v42, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_61;
      }
      goto LABEL_94;
    case 9u:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      unsigned int v23 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Unexpected event GpsdAliveTimerExpired", v42, 2u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(v42, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_61;
      }
LABEL_94:
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
LABEL_61:
      *(_WORD *)std::string __p = 0;
      int v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Recovery(CLGnssDaemonDevice::Event)", "%s\n", v24);
      if (v24 != (char *)v42) {
        free(v24);
      }
      return 0;
    default:
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      __int16 v25 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10195ED64(a2, v42);
        long long v26 = v43 >= 0 ? v42 : *(uint8_t **)v42;
        *(_DWORD *)std::string __p = 136446210;
        *(void *)&__p[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#gpsd,Recovery,Unexpected event %{public}s", __p, 0xCu);
        if (v43 < 0) {
          operator delete(*(void **)v42);
        }
      }
      if (!sub_10013D1A0(115, 2)) {
        return 2;
      }
      bzero(v42, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      sub_10195ED64(a2, __p);
      if (v41 >= 0) {
        __int16 v27 = __p;
      }
      else {
        __int16 v27 = *(unsigned char **)__p;
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v27;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      if (v41 < 0) {
        operator delete(*(void **)__p);
      }
LABEL_79:
      sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::State CLGnssDaemonDevice::handler_Recovery(CLGnssDaemonDevice::Event)", "%s\n", v14);
      if (v14 != (char *)v42) {
        free(v14);
      }
      return 2;
  }
}

void sub_101940754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1019407E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  sub_10195FFB0((uint64_t)v4, a2);
  sub_10199924C(v2, (uint64_t)v4);
  return sub_1019601C4(v4);
}

void sub_101940858(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1019601C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

id sub_101940874(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#timingadvance,reset timer", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssDaemonDevice::CLGnssDaemonDevice(dispatch_queue_t, std::map<CLGnssDeviceEvent, EventCallback> &&, LocationEventCallback, MeasurementEventCallback, DecodedExtendedEphemerisCallback, SleepCallback, PowerLoggingCallback, EmergencyAWDCallback, DpoCallback, MeasurementFeaturesCallback, BOOL, BOOL)_block_invoke", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  id result = [*(id *)(v1 + 3464) setNextFireDelay:1.79769313e308];
  *(unsigned char *)(v1 + 3456) = 0;
  return result;
}

uint64_t sub_101940A1C(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_101940A60(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13)
{
}

uint64_t sub_101940A84(uint64_t a1)
{
  *(void *)a1 = &off_1023464B0;
  sub_10194C9DC(a1);

  *(void *)(a1 + 1784) = 0;
  uint64_t v2 = *(uint64_t **)(a1 + 3448);
  *(void *)(a1 + 3448) = 0;
  if (v2) {
    sub_101960B3C(a1 + 3448, v2);
  }
  uint64_t v3 = *(void *)(a1 + 3352);
  *(void *)(a1 + 3352) = 0;
  if (v3) {
    operator delete();
  }
  sub_101960AB8((void *)(a1 + 3296));
  sub_101960A34((void *)(a1 + 3264));
  sub_1019609B0((void *)(a1 + 3232));
  sub_10196092C((void *)(a1 + 3200));
  sub_1019608DC((uint64_t *)(a1 + 3192), 0);
  sub_101960858((void *)(a1 + 3160));
  sub_1019607D4((void *)(a1 + 3128));
  sub_101960750((void *)(a1 + 3096));
  sub_1019606CC((void *)(a1 + 3064));
  sub_101960648((void *)(a1 + 3032));
  sub_1019605C4((void *)(a1 + 3000));
  uint64_t v4 = *(void *)(a1 + 2992);
  *(void *)(a1 + 2992) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  sub_100FCF6CC(a1 + 2576);
  int v5 = *(void **)(a1 + 2504);
  if (v5)
  {
    *(void *)(a1 + 2512) = v5;
    operator delete(v5);
  }
  sub_100850B38((void *)(a1 + 2432));
  if (*(char *)(a1 + 2415) < 0) {
    operator delete(*(void **)(a1 + 2392));
  }
  if (*(char *)(a1 + 2375) < 0) {
    operator delete(*(void **)(a1 + 2352));
  }
  if (*(char *)(a1 + 2335) < 0) {
    operator delete(*(void **)(a1 + 2312));
  }
  sub_1019604D4(a1 + 2176);
  sub_10071874C(a1 + 2096);
  if (*(char *)(a1 + 1847) < 0) {
    operator delete(*(void **)(a1 + 1824));
  }
  if (*(char *)(a1 + 1823) < 0) {
    operator delete(*(void **)(a1 + 1800));
  }
  uint64_t v6 = *(void *)(a1 + 1792);
  *(void *)(a1 + 1792) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_1017DBD28((void *)(a1 + 1744));
  uint64_t v7 = *(void *)(a1 + 1736);
  *(void *)(a1 + 1736) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  sub_101960484((uint64_t *)(a1 + 1672), 0);

  return sub_101926DBC(a1);
}

void sub_101940CA0(uint64_t a1)
{
  sub_101940A84(a1);

  operator delete();
}

uint64_t sub_101940CD8(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(a1 + 88);
  unsigned int v88 = *(_DWORD *)(a1 + 4);
  if (!*(void *)(a1 + 32))
  {
    sub_1019635C8();
    goto LABEL_159;
  }
  uint64_t v2 = a1;
  uint64_t v6 = &qword_102419000;
  if (!*(unsigned char *)(a1 + 48))
  {
    sub_101963738(qword_1024193D0 == -1);
    goto LABEL_159;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  unint64_t v4 = (unint64_t)&qword_102419000;
  uint64_t v8 = qword_1024193D8;
  LODWORD(v3) = *(unsigned __int8 *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, *(os_log_type_t *)(v2 + 120)))
  {
    os_log_type_t v9 = (void *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      os_log_type_t v9 = (void *)*v9;
    }
    uint64_t v10 = *(int *)(v2 + 4);
    if (v10 > 2) {
      long long v11 = "StateUnknown";
    }
    else {
      long long v11 = (&off_102346B40)[v10];
    }
    sub_100134750(__p, v11);
    int v12 = SHIBYTE(v92);
    std::string::size_type v13 = *(unsigned char **)__p;
    int v5 = (void **)v99;
    sub_10195ED64(a2, v99);
    long long v14 = __p;
    if (v12 < 0) {
      long long v14 = v13;
    }
    if (v102 >= 0) {
      long long v15 = v99;
    }
    else {
      long long v15 = *(unsigned char **)v99;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v9;
    __int16 v95 = 2080;
    char v96 = v14;
    __int16 v97 = 2080;
    char v98 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v3, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v102 < 0) {
      operator delete(*(void **)v99);
    }
    if (SHIBYTE(v92) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v59 = (void *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      uint64_t v59 = (void *)*v59;
    }
    uint64_t v60 = *(int *)(v2 + 4);
    if (v60 > 2) {
      std::string::size_type v61 = "StateUnknown";
    }
    else {
      std::string::size_type v61 = (&off_102346B40)[v60];
    }
    LODWORD(v3) = *(unsigned __int8 *)(v2 + 120);
    sub_100134750(v99, v61);
    int v62 = v102;
    int v63 = *(unsigned char **)v99;
    int v5 = v86;
    sub_10195ED64(a2, v86);
    __int16 v64 = v99;
    if (v62 < 0) {
      __int16 v64 = v63;
    }
    if (v87 >= 0) {
      int v65 = v86;
    }
    else {
      int v65 = (void **)v86[0];
    }
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v59;
    __int16 v90 = 2080;
    __int16 v91 = v64;
    __int16 v92 = 2080;
    std::string::size_type v93 = v65;
    __int16 v66 = (char *)_os_log_send_and_compose_impl();
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    if (v102 < 0) {
      operator delete(*(void **)v99);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v66);
    if (v66 != buf) {
      free(v66);
    }
  }
  uint64_t v16 = *(void *)(v2 + 16);
  if (!v16) {
    goto LABEL_31;
  }
  char v17 = (uint64_t **)(v2 + 8);
  int v18 = *(_DWORD *)(v2 + 4);
  uint64_t v19 = v2 + 16;
  do
  {
    int v20 = *(_DWORD *)(v16 + 32);
    BOOL v21 = v20 < v18;
    if (v20 >= v18) {
      std::string::size_type v22 = (uint64_t *)v16;
    }
    else {
      std::string::size_type v22 = (uint64_t *)(v16 + 8);
    }
    if (!v21) {
      uint64_t v19 = v16;
    }
    uint64_t v16 = *v22;
  }
  while (*v22);
  if (v19 == v2 + 16 || v18 < *(_DWORD *)(v19 + 32))
  {
LABEL_31:
    sub_1019638B8();
    goto LABEL_159;
  }
  unsigned int v23 = *(uint64_t (**)(void *, uint64_t))(v19 + 40);
  uint64_t v24 = *(void *)(v19 + 48);
  __int16 v25 = (void *)(*(void *)(v2 + 32) + (v24 >> 1));
  if (v24) {
    unsigned int v23 = *(uint64_t (**)(void *, uint64_t))(*v25 + v23);
  }
  uint64_t v26 = v23(v25, a2);
  uint64_t v3 = v26;
  int v85 = v26;
  if (a2 <= 1 && v26 != v88)
  {
    sub_101963D08();
    while (1)
    {
LABEL_159:
      while (1)
      {
        __break(1u);
LABEL_160:
        int v72 = "StateUnknown";
LABEL_161:
        sub_100134750(v99, v72);
        int v75 = v102;
        int v76 = *(unsigned char **)v99;
        sub_100134750(v86, "Exit");
        std::string::size_type v77 = v99;
        if (v75 < 0) {
          std::string::size_type v77 = v76;
        }
        if (v87 >= 0) {
          int v78 = v86;
        }
        else {
          int v78 = (void **)v86[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v5;
        __int16 v90 = 2080;
        __int16 v91 = v77;
        __int16 v92 = 2080;
        std::string::size_type v93 = v78;
        int v79 = (char *)_os_log_send_and_compose_impl();
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v102 < 0) {
          operator delete(*(void **)v99);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v79);
        char v17 = v84;
        if (v79 != buf) {
          free(v79);
        }
LABEL_78:
        uint64_t v40 = *(void *)(v2 + 32);
        *(void *)std::string buf = &v88;
        char v41 = sub_1000C5658(v17, (int *)&v88, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        uint64_t v42 = v41[5];
        uint64_t v43 = (uint64_t)v41[6];
        char v44 = (void *)(v40 + (v43 >> 1));
        if (v43) {
          uint64_t v42 = *(uint64_t **)(*v44 + v42);
        }
        int v45 = ((uint64_t (*)(void *, uint64_t))v42)(v44, 1);
        if (v45 == v88) {
          break;
        }
        sub_101963B98();
      }
      *(_DWORD *)(v2 + 4) = v3;
      if (v6[122] != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      long long v46 = *(NSObject **)(v4 + 984);
      os_log_type_t v47 = *(unsigned char *)(v2 + 120);
      if (os_log_type_enabled(v46, v47))
      {
        int v5 = (void **)(v2 + 96);
        if (*(char *)(v2 + 119) < 0) {
          int v5 = (void **)*v5;
        }
        if (v3 > 2) {
          long long v48 = "StateUnknown";
        }
        else {
          long long v48 = (&off_102346B40)[(int)v3];
        }
        sub_100134750(__p, v48);
        int v49 = SHIBYTE(v92);
        long long v50 = *(unsigned char **)__p;
        sub_100134750(v99, "Enter");
        long long v51 = __p;
        if (v49 < 0) {
          long long v51 = v50;
        }
        if (v102 >= 0) {
          long long v52 = v99;
        }
        else {
          long long v52 = *(unsigned char **)v99;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = v5;
        __int16 v95 = 2080;
        char v96 = v51;
        __int16 v97 = 2080;
        char v98 = v52;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "%snewState,%s,event,%s", buf, 0x20u);
        if (v102 < 0) {
          operator delete(*(void **)v99);
        }
        if (SHIBYTE(v92) < 0) {
          operator delete(*(void **)__p);
        }
        char v17 = v84;
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[122] != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        uint64_t v73 = (void *)(v2 + 96);
        if (*(char *)(v2 + 119) < 0) {
          uint64_t v73 = (void *)*v73;
        }
        if (v3 > 2) {
          int v74 = "StateUnknown";
        }
        else {
          int v74 = (&off_102346B40)[(int)v3];
        }
        sub_100134750(v99, v74);
        unint64_t v4 = v102;
        uint64_t v80 = *(unsigned char **)v99;
        sub_100134750(v86, "Enter");
        uint64_t v81 = v99;
        if ((v4 & 0x80000000) != 0) {
          uint64_t v81 = v80;
        }
        if (v87 >= 0) {
          int v82 = v86;
        }
        else {
          int v82 = (void **)v86[0];
        }
        *(_DWORD *)std::string __p = 136315650;
        *(void *)&__p[4] = v73;
        __int16 v90 = 2080;
        __int16 v91 = v81;
        __int16 v92 = 2080;
        std::string::size_type v93 = v82;
        int v83 = (char *)_os_log_send_and_compose_impl();
        if (v87 < 0) {
          operator delete(v86[0]);
        }
        if (v102 < 0) {
          operator delete(*(void **)v99);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v83);
        if (v83 != buf) {
          free(v83);
        }
      }
      uint64_t v53 = *(void *)(v2 + 32);
      *(void *)std::string buf = &v85;
      long long v54 = sub_1000C5658(v17, &v85, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
      long long v55 = v54[5];
      uint64_t v56 = (uint64_t)v54[6];
      uint64_t v57 = (void *)(v53 + (v56 >> 1));
      if (v56) {
        long long v55 = *(uint64_t **)(*v57 + v55);
      }
      uint64_t v3 = ((uint64_t (*)(void *, void))v55)(v57, 0);
      if (v3 == v85) {
        break;
      }
      sub_101963A28();
    }
    goto LABEL_103;
  }
  if (*(_DWORD *)(v2 + 88) >= 2u)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    __int16 v27 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v28 = (void *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        std::string::size_type v28 = (void *)*v28;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      __int16 v68 = (void *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        __int16 v68 = (void *)*v68;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v68;
      uint64_t v69 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v69);
      if (v69 != buf) {
        free(v69);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  long long v29 = qword_1024193D8;
  os_log_type_t v30 = *(unsigned char *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1024193D8, v30))
  {
    int v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      int v5 = (void **)*v5;
    }
    if (v3 > 2) {
      std::string::size_type v31 = "StateUnknown";
    }
    else {
      std::string::size_type v31 = (&off_102346B40)[(int)v3];
    }
    sub_100134750(buf, v31);
    if (v97 >= 0) {
      uint64_t v32 = buf;
    }
    else {
      uint64_t v32 = *(unsigned char **)buf;
    }
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v5;
    __int16 v90 = 2080;
    __int16 v91 = v32;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v97) < 0) {
      operator delete(*(void **)buf);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0) {
      int v5 = (void **)*v5;
    }
    if (v3 > 2) {
      int v67 = "StateUnknown";
    }
    else {
      int v67 = (&off_102346B40)[(int)v3];
    }
    sub_100134750(__p, v67);
    if (v92 >= 0) {
      int v70 = __p;
    }
    else {
      int v70 = *(unsigned char **)__p;
    }
    *(_DWORD *)unsigned __int8 v99 = 136315394;
    *(void *)&v99[4] = v5;
    __int16 v100 = 2080;
    __int16 v101 = v70;
    BOOL v71 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v92) < 0) {
      operator delete(*(void **)__p);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "State CLStateMachine<CLGnssDaemonDevice>::handleEvent(Event) [T = CLGnssDaemonDevice]", "%s\n", v71);
    if (v71 != buf) {
      free(v71);
    }
  }
  if (v3 != v88)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    __int16 v33 = qword_1024193D8;
    os_log_type_t v34 = *(unsigned char *)(v2 + 120);
    std::string::size_type v84 = (uint64_t **)(v2 + 8);
    if (os_log_type_enabled((os_log_t)qword_1024193D8, v34))
    {
      int v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        int v5 = (void **)*v5;
      }
      if (v88 > 2) {
        char v35 = "StateUnknown";
      }
      else {
        char v35 = (&off_102346B40)[v88];
      }
      sub_100134750(__p, v35);
      int v36 = SHIBYTE(v92);
      uint64_t v37 = *(unsigned char **)__p;
      sub_100134750(v99, "Exit");
      __int16 v38 = __p;
      if (v36 < 0) {
        __int16 v38 = v37;
      }
      if (v102 >= 0) {
        int v39 = v99;
      }
      else {
        int v39 = *(unsigned char **)v99;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v95 = 2080;
      char v96 = v38;
      __int16 v97 = 2080;
      char v98 = v39;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v102 < 0) {
        operator delete(*(void **)v99);
      }
      if (SHIBYTE(v92) < 0) {
        operator delete(*(void **)__p);
      }
      unint64_t v4 = (unint64_t)&qword_102419000;
      char v17 = (uint64_t **)(v2 + 8);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0) {
        int v5 = (void **)*v5;
      }
      if (v88 <= 2)
      {
        int v72 = (&off_102346B40)[v88];
        goto LABEL_161;
      }
      goto LABEL_160;
    }
    goto LABEL_78;
  }
LABEL_103:
  --*(_DWORD *)(v2 + 88);
  return v3;
}

void sub_101941B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_101941B88(uint64_t a1, int a2)
{
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = a2;

  return sub_101940CD8(a1 + 2176, 2);
}

void sub_101941BEC(uint64_t a1, uint64_t a2)
{
  int v5 = *(void (****)(void))(a1 + 1736);
  if (!v5)
  {
    sub_101963E78();
    __break(1u);
LABEL_17:
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
    goto LABEL_8;
  }
  uint64_t v2 = a2;
  unint64_t v6 = *(unsigned int *)(a2 + 20);
  if (v6 >= 0x4D) {
    sub_10000EDDC("bitset test argument out of range");
  }
  if ((*(void *)(a1 + ((v6 >> 3) & 0x1FFFFFF8) + 2160) >> v6))
  {
    uint64_t v7 = **v5;
    v7();
    return;
  }
  uint64_t v3 = &qword_102419000;
  if (qword_1024193D0 != -1) {
    goto LABEL_17;
  }
LABEL_8:
  uint64_t v8 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1018779E8(*(_DWORD *)(v2 + 20), (uint64_t)__p);
    os_log_type_t v9 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gpsd,Request type is disabled,%{public}s", buf, 0xCu);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (v3[122] != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    sub_1018779E8(*(_DWORD *)(v2 + 20), (uint64_t)buf);
    if (v13 >= 0) {
      uint64_t v10 = buf;
    }
    else {
      uint64_t v10 = *(unsigned char **)buf;
    }
    int v14 = 136446210;
    long long v15 = v10;
    long long v11 = (char *)_os_log_send_and_compose_impl();
    if (v13 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::sendRequestViaGpsdClient(const proto::gpsd::Request &)", "%s\n", v11);
    if (v11 != (char *)__p) {
      free(v11);
    }
  }
}

uint64_t sub_101941EA8(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 2984) = a2;
  uint64_t v7 = a1 + 2176;
  if ((a3 - 1) >= 4) {
    uint64_t v8 = 10;
  }
  else {
    uint64_t v8 = (a3 + 2);
  }
  uint64_t result = sub_101940CD8(v7, v8);
  if (a2 == 1)
  {
    *(void *)(a1 + 1248) = a4;
  }
  else if (*(void *)(a1 + 1256) < a4)
  {
    *(void *)(a1 + 1256) = a4;
    *(_DWORD *)(a1 + 1264) = a2;
  }
  *(_DWORD *)(a1 + 2984) = 0;
  return result;
}

uint64_t sub_101941F20(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,gpsdShutdownHandler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::gpsdShutdownHandler()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  (*(void (**)(void))(**(void **)(a1 + 1736) + 24))(*(void *)(a1 + 1736));
  if (*(unsigned char *)(a1 + 1680)) {
    ++*(_DWORD *)(a1 + 1236);
  }
  return sub_101940CD8(a1 + 2176, 8);
}

void sub_1019420FC(_DWORD *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    int v3 = *(_DWORD *)(v2 + 224);
    if (v3)
    {
      int v6 = *(_DWORD *)(v2 + 8);
      switch(v6)
      {
        case 1:
          *a2 = 0;
          uint64_t v48 = v2;
          sub_101942CEC((uint64_t)a1, &v48);
          goto LABEL_76;
        case 2:
          if ((v3 & 0x40) == 0) {
            return;
          }
          uint64_t v9 = *(void *)(v2 + 48);
          if (!v9) {
            uint64_t v9 = *(void *)(qword_10248AFE8 + 48);
          }
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          uint64_t v10 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            int v11 = *(unsigned __int8 *)(v9 + 24);
            int v12 = *(unsigned __int8 *)(v9 + 25);
            int v13 = *(unsigned __int8 *)(v9 + 26);
            double v14 = (double)*(unint64_t *)(v9 + 8) * 0.000000001;
            double v15 = (double)*(unint64_t *)(v9 + 16) * 0.000000001;
            *(_DWORD *)std::string buf = 67110144;
            int v60 = v11;
            __int16 v61 = 1024;
            int v62 = v12;
            __int16 v63 = 1024;
            int v64 = v13;
            __int16 v65 = 2048;
            double v66 = v14;
            __int16 v67 = 2048;
            double v68 = v15;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#gpsd,status,device_init,%d,device_busy,%d,device_active,%d,gpsd_uptime,%f,device_uptime,%f", buf, 0x28u);
          }
          if (!sub_10013D1A0(115, 2)) {
            return;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          int v16 = *(unsigned __int8 *)(v9 + 24);
          int v17 = *(unsigned __int8 *)(v9 + 25);
          int v18 = *(unsigned __int8 *)(v9 + 26);
          double v19 = (double)*(unint64_t *)(v9 + 8) * 0.000000001;
          double v20 = (double)*(unint64_t *)(v9 + 16) * 0.000000001;
          int v49 = 67110144;
          int v50 = v16;
          __int16 v51 = 1024;
          int v52 = v17;
          __int16 v53 = 1024;
          int v54 = v18;
          __int16 v55 = 2048;
          double v56 = v19;
          __int16 v57 = 2048;
          double v58 = v20;
          BOOL v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::processGpsdIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v21);
          goto LABEL_81;
        case 3:
          uint64_t v22 = *a2;
          sub_101946CD8((uint64_t)a1, v22);
          return;
        case 5:
          uint64_t v24 = *a2;
          sub_101947AD0((uint64_t)a1, v24);
          return;
        case 9:
          *a2 = 0;
          uint64_t v47 = v2;
          sub_101944574((uint64_t)a1, &v47);
          goto LABEL_76;
        case 10:
          *a2 = 0;
          uint64_t v46 = v2;
          sub_1019447F8((uint64_t)a1, &v46);
          goto LABEL_76;
        case 11:
          *a2 = 0;
          uint64_t v45 = v2;
          sub_101944BA8((uint64_t)a1, &v45);
          goto LABEL_76;
        case 12:
          *a2 = 0;
          uint64_t v44 = v2;
          sub_10194509C((uint64_t)a1, &v44);
          goto LABEL_76;
        case 13:
          *a2 = 0;
          uint64_t v42 = v2;
          sub_1019458F4((uint64_t)a1, &v42);
          goto LABEL_76;
        case 14:
          *a2 = 0;
          uint64_t v41 = v2;
          sub_101945DB0((uint64_t)a1, &v41);
          goto LABEL_76;
        case 15:
          *a2 = 0;
          uint64_t v40 = v2;
          sub_101946060((uint64_t)a1, &v40);
          goto LABEL_76;
        case 16:
          *a2 = 0;
          uint64_t v39 = v2;
          sub_101946258((uint64_t)a1, &v39);
          goto LABEL_76;
        case 17:
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          __int16 v25 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "#gpsd,EMERG_FT_ASSISTANCE_NEEDED_REPORT", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            LOWORD(v49) = 0;
            __int16 v33 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::processGpsdIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v33);
            if (v33 != (char *)buf) {
              free(v33);
            }
          }
          uint64_t v26 = *a2;
          *a2 = 0;
          uint64_t v38 = v26;
          sub_101948570((uint64_t)a1, (uint64_t)&v38);
          if (v26) {
            (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
          }
          return;
        case 18:
          uint64_t v27 = *a2;
          sub_101946EE4((uint64_t)a1, v27);
          return;
        case 19:
          uint64_t v28 = *a2;
          sub_101947614((uint64_t)a1, v28);
          return;
        case 20:
          *a2 = 0;
          uint64_t v36 = v2;
          sub_101948D58((uint64_t)a1, &v36);
          goto LABEL_76;
        case 21:
          uint64_t v29 = *a2;
          sub_101948240((uint64_t)a1, v29);
          return;
        case 22:
          *a2 = 0;
          uint64_t v37 = v2;
          sub_101948928((uint64_t)a1, &v37);
          goto LABEL_76;
        case 23:
          *a2 = 0;
          uint64_t v35 = v2;
          sub_101949304(a1, &v35);
          goto LABEL_76;
        case 24:
          *a2 = 0;
          uint64_t v34 = v2;
          sub_1019497BC((uint64_t)a1, &v34);
          goto LABEL_76;
        case 25:
          os_log_type_t v30 = (uint64_t *)*((void *)a1 + 416);
          if (v30)
          {
            uint64_t v31 = *v30;
            sub_101999240(v31);
          }
          return;
        case 26:
          *a2 = 0;
          uint64_t v43 = v2;
          sub_10194550C((uint64_t)a1, &v43);
LABEL_76:
          uint64_t v32 = *(void (**)(uint64_t))(*(void *)v2 + 8);
          v32(v2);
          return;
        default:
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          unsigned int v23 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)std::string buf = 67240192;
            int v60 = v6;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#gpsd,unhandled indication,%{public}d", buf, 8u);
          }
          if (!sub_10013D1A0(115, 2)) {
            return;
          }
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          int v49 = 67240192;
          int v50 = v6;
          BOOL v21 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::processGpsdIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v21);
          break;
      }
      goto LABEL_81;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gpsd,processGpsdIndication,no type", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_80;
      }
      goto LABEL_87;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsd,processGpsdIndication,nullptr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_80:
        LOWORD(v49) = 0;
        BOOL v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::processGpsdIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v21);
LABEL_81:
        if (v21 != (char *)buf) {
          free(v21);
        }
        return;
      }
LABEL_87:
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
      goto LABEL_80;
    }
  }
}

void sub_101942C00(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_101942CEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    int v5 = *(_DWORD *)(v2 + 224);
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    uint64_t v6 = *(void *)(v2 + 24);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AFE8 + 24);
    }
    int v7 = *(_DWORD *)(v6 + 48);
    if ((v7 & 2) != 0) {
      char v8 = v7 & 1;
    }
    else {
LABEL_6:
    }
      char v8 = 0;
    if ((v5 & 0x10) == 0 && (v8 & 1) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        unsigned int v12 = *(_DWORD *)(*a2 + 224);
        uint64_t v13 = *(void *)(*a2 + 24);
        if (!v13) {
          uint64_t v13 = *(void *)(qword_10248AFE8 + 24);
        }
        unsigned int v14 = *(_DWORD *)(v13 + 48);
        *(_DWORD *)std::string buf = 67240960;
        *(_DWORD *)&uint8_t buf[4] = (v12 >> 3) & 1;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = (v14 >> 1) & 1;
        LOWORD(v148) = 1026;
        *(_DWORD *)((char *)&v148 + 2) = v14 & 1;
        HIWORD(v148) = 1026;
        *(_DWORD *)double v149 = (v12 >> 4) & 1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#gpsd,handlePvtm,missing expected fields,hasFix,%{public}d,hasPos,%{public}d,hasTime,%{public}d,hasMeas,%{public}d", buf, 0x1Au);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        unsigned int v15 = *(_DWORD *)(*a2 + 224);
        uint64_t v16 = *(void *)(*a2 + 24);
        if (!v16) {
          uint64_t v16 = *(void *)(qword_10248AFE8 + 24);
        }
        unsigned int v17 = *(_DWORD *)(v16 + 48);
        LODWORD(v126) = 67240960;
        DWORD1(v126) = (v15 >> 3) & 1;
        WORD4(v126) = 1026;
        *(_DWORD *)((char *)&v126 + 10) = (v17 >> 1) & 1;
        HIWORD(v126) = 1026;
        LODWORD(v127) = v17 & 1;
        WORD2(v127) = 1026;
        *(_DWORD *)((char *)&v127 + 6) = (v15 >> 4) & 1;
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v10);
LABEL_30:
        if (v10 != buf) {
          free(v10);
        }
        return;
      }
      return;
    }
    double v18 = sub_1018779C0();
    char v19 = v8 ^ 1;
    if (!*(void *)(a1 + 1368)) {
      char v19 = 1;
    }
    if (v19)
    {
LABEL_109:
      if ((v5 & 0x10) != 0 && *(void *)(a1 + 1400))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        double v68 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "#gpsd,handlePvtm,yielding measurements", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          LOWORD(v126) = 0;
          long long v106 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v106);
          if (v106 != buf) {
            free(v106);
          }
        }
        long long v126 = 0u;
        long long v127 = 0u;
        *(void *)uint64_t v128 = 0;
        *(void *)&v128[8] = -1;
        *(int64x2_t *)&v128[16] = vdupq_n_s64(0x7FF8000000000000uLL);
        *(_OWORD *)__int16 v129 = *(_OWORD *)&v128[16];
        *(_WORD *)&v129[16] = 0;
        *(_OWORD *)&v131[4] = *(_OWORD *)&v128[16];
        *((void *)&v133 + 1) = 0x8000000000000000;
        int32x2_t v132 = vdup_n_s32(0x7FC00000u);
        __asm { FMOV            V1.2S, #-1.0 }
        uint64_t v134 = _D1;
        *(void *)uint64_t v135 = 0x7FF8000000000000;
        LODWORD(v133) = 2143289344;
        *(_DWORD *)&v135[8] = -1082130432;
        long long v143 = 0u;
        long long v144 = 0u;
        long long v136 = 0u;
        long long v137 = 0u;
        long long v138 = 0u;
        long long v139 = 0u;
        long long v140 = 0u;
        long long v141 = 0u;
        long long v142 = 0u;
        uint64_t v74 = *(void *)(*a2 + 32);
        if (!v74) {
          uint64_t v74 = *(void *)(qword_10248AFE8 + 32);
        }
        sub_101874C70(v74, (uint64_t)&v126);
        v118[0] = 0;
        v118[1] = 0;
        __int16 v117 = (uint64_t *)v118;
        sub_101876C40((uint64_t *)&v126, a1 + 2096, &v117);
        if (*(unsigned char *)(a1 + 1896)) {
          sub_101876E20((uint64_t)&v126, a1 + 2096, *(double *)(a1 + 1904), *(double *)(a1 + 1912), *(double *)(a1 + 1920), v18);
        }
        int v75 = (unsigned __int8 *)*((void *)&v139 + 1);
        if ((void)v139 == *((void *)&v139 + 1))
        {
          double v79 = 999.0;
          double v78 = 999.0;
          double v77 = 999.0;
        }
        else
        {
          int v76 = (unsigned __int8 *)(v139 + 16);
          double v77 = 999.0;
          double v78 = 999.0;
          double v79 = 999.0;
          do
          {
            if (*v76)
            {
              if ((*((void *)v76 - 2) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
                && (*((_DWORD *)v76 - 2) & 0x7FFFFFFFu) <= 0x7F7FFFFF
                && (*((_DWORD *)v76 - 1) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
              {
                int v120 = (int)(float)(roundf(*((float *)v76 - 1) / 5.0) * 5.0);
                *(void *)std::string buf = v76;
                uint64_t v80 = sub_1018C36FC(a1 + 432, v76, (uint64_t)&unk_101D0B290, (char **)buf);
                *(void *)std::string buf = &v120;
                uint64_t v81 = sub_1000F3C48((uint64_t)(v80 + 3), &v120, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
                ++*((_DWORD *)v81 + 5);
                unsigned int v82 = *v76;
                if (v82 <= 9)
                {
                  if (((1 << v82) & 0x142) != 0)
                  {
                    double v79 = *((float *)v76 - 1);
                  }
                  else if (((1 << v82) & 0x288) != 0)
                  {
                    double v77 = *((float *)v76 - 1);
                  }
                  else if (v82 == 4)
                  {
                    double v78 = *((float *)v76 - 1);
                  }
                }
              }
            }
            int v83 = v76 + 8;
            v76 += 24;
          }
          while (v83 != v75);
        }
        if (sub_100119964())
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          std::string::size_type v84 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string buf = 134349568;
            *(double *)&uint8_t buf[4] = v79;
            *(_WORD *)&unsigned char buf[12] = 2050;
            __int16 v148 = *(const char **)&v78;
            *(_WORD *)double v149 = 2050;
            *(double *)&v149[2] = v77;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#gpsd,handlePvtm,awd_agc_metric_dB,band,L1,%{public}.2f,band,G1,%{public}.2f,band,L5,%{public}.2f", buf, 0x20u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            int v120 = 134349568;
            __int16 v121 = *(const char **)&v79;
            __int16 v122 = 2050;
            __int16 v123 = *(const char **)&v78;
            __int16 v124 = 2050;
            double v125 = v77;
            long long v107 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v107);
            if (v107 != buf) {
              free(v107);
            }
          }
        }
        int v85 = (unsigned int *)*((void *)&v137 + 1);
        for (uint64_t i = (unsigned int *)v138; v85 != i; v85 += 36)
        {
          unsigned int v87 = *v85;
          int v120 = 0;
          unsigned int v116 = 0;
          sub_1018769F4(v85, &v120, &v116);
          if ((v87 & 0xFFFFFFFD) != 0)
          {
            *(void *)std::string buf = *v85 | ((unint64_t)v116 << 32);
            if (v118 != (void **)sub_1018C40BC((uint64_t)&v117, (int *)buf))
            {
              switch(*((unsigned char *)v85 + 16))
              {
                case 1:
                  ++*(_DWORD *)(a1 + 1176);
                  break;
                case 2:
                  ++*(_DWORD *)(a1 + 1168);
                  break;
                case 3:
                  ++*(_DWORD *)(a1 + 1180);
                  break;
                case 4:
                  ++*(_DWORD *)(a1 + 1172);
                  break;
                default:
                  break;
              }
              uint64_t v88 = *((void *)v85 + 14);
              uint64_t v89 = *((void *)v85 + 15);
              while (v88 != v89)
              {
                if (*(unsigned char *)v88 && (*(void *)(v88 + 16) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
                {
                  unsigned int v90 = *(_DWORD *)(v88 + 4);
                  if (v90 >= 2)
                  {
                    if (v90 == 2) {
                      ++*(_DWORD *)(a1 + 1160);
                    }
                  }
                  else
                  {
                    ++*(_DWORD *)(a1 + 1164);
                  }
                }
                v88 += 32;
              }
            }
          }
        }
        uint64_t v91 = *(void *)(a1 + 1400);
        if (!v91) {
          sub_10015E48C();
        }
        (*(void (**)(uint64_t, long long *))(*(void *)v91 + 48))(v91, &v126);
        sub_1000F5BB0((uint64_t)&v117, v118[0]);
        sub_100E93C68((uint64_t)&v126);
      }
      return;
    }
    uint64_t v20 = *(void *)(*a2 + 24);
    if (!v20) {
      uint64_t v20 = *(void *)(qword_10248AFE8 + 24);
    }
    uint64_t v21 = *(void *)(v20 + 16);
    if (!v21) {
      uint64_t v21 = *(void *)(qword_10248A348 + 16);
    }
    double v22 = *(double *)(v21 + 40);
    double v23 = sqrt(*(double *)(v21 + 48) * *(double *)(v21 + 48) + *(double *)(v21 + 56) * *(double *)(v21 + 56));
    if (v22 <= 0.0)
    {
      BOOL v26 = 0;
    }
    else
    {
      BOOL v25 = v23 > 0.0 && (*(void *)&v22 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
      BOOL v26 = v23 <= 400.0 && v25;
    }
    double v27 = fabs(*(double *)(v21 + 8));
    double v28 = fabs(*(double *)(v21 + 16));
    int v113 = sub_101874A2C(*(unsigned int *)(v21 + 76));
    if (*(unsigned char *)(a1 + 1720) || *(unsigned char *)(a1 + 1721)) {
      int v115 = sub_1017E6108(*(_DWORD *)(v21 + 88));
    }
    else {
      int v115 = 5;
    }
    double v29 = v27 + v28;
    int v30 = sub_1017E62CC(*(_DWORD *)(v20 + 40));
    int v31 = v30;
    int v112 = v30;
    if (!*(unsigned char *)(a1 + 1720) && !*(unsigned char *)(a1 + 1721))
    {
      int v33 = 1;
      double v32 = -1.0;
      goto LABEL_58;
    }
    double v32 = -1.0;
    if (*(unsigned char *)(a1 + 1665) || *(unsigned char *)(a1 + 1708))
    {
      int v33 = 1;
LABEL_58:
      BOOL v34 = v26;
      BOOL v35 = v29 >= 0.0001 && v26;
      int v36 = v35 & v33;
      if ((v35 & v33) == 1)
      {
        if ((sub_1000FEF64() || sub_1000FEED0() && *(unsigned char *)(a1 + 1290))
          && *(double *)(v21 + 48) <= *(float *)(a1 + 1292)
          && !*(unsigned char *)(a1 + 3456))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          __int16 v92 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEBUG, "#timingadvance,GNSS is active,query timing advance", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            LOWORD(v126) = 0;
            __int16 v111 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v111);
            if (v111 != buf) {
              free(v111);
            }
          }
          [*(id *)(a1 + 3464) setNextFireDelay:*(float *)(a1 + 1296)];
          sub_101979E70(*(void *)(a1 + 3192));
          char v114 = 1;
          *(unsigned char *)(a1 + 3456) = 1;
        }
        else
        {
          char v114 = 1;
        }
      }
      else
      {
        char v114 = 0;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v37 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        int v38 = *(unsigned __int8 *)(a1 + 1705);
        uint64_t v39 = *(void **)(v20 + 8);
        if (!v39) {
          uint64_t v39 = *(void **)(qword_10248A348 + 8);
        }
        uint64_t v40 = v39[1];
        uint64_t v42 = v39[6];
        uint64_t v41 = v39[7];
        uint64_t v43 = *(void *)(v21 + 8);
        uint64_t v44 = *(void *)(v21 + 16);
        uint64_t v45 = *(void *)(v21 + 24);
        uint64_t v46 = *(void *)(v21 + 40);
        uint64_t v47 = *(void *)(v20 + 32);
        *(_DWORD *)std::string buf = 67244545;
        *(_DWORD *)&uint8_t buf[4] = v36;
        *(_WORD *)&uint8_t buf[8] = 1026;
        *(_DWORD *)&buf[10] = v34;
        LOWORD(v148) = 1026;
        *(_DWORD *)((char *)&v148 + 2) = v29 < 0.0001;
        HIWORD(v148) = 1026;
        *(_DWORD *)double v149 = v33;
        *(_WORD *)&v149[4] = 1026;
        *(_DWORD *)&v149[6] = v38;
        __int16 v150 = 2050;
        double v151 = v32;
        __int16 v152 = 2050;
        uint64_t v153 = v40;
        __int16 v154 = 2050;
        uint64_t v155 = v42;
        __int16 v156 = 2050;
        uint64_t v157 = v41;
        __int16 v158 = 2049;
        uint64_t v159 = v43;
        __int16 v160 = 2049;
        uint64_t v161 = v44;
        __int16 v162 = 2049;
        uint64_t v163 = v45;
        __int16 v164 = 2050;
        double v165 = v23;
        __int16 v166 = 2050;
        uint64_t v167 = v46;
        __int16 v168 = 1026;
        int v169 = v113;
        __int16 v170 = 1026;
        int v171 = v115;
        __int16 v172 = 1026;
        int v173 = v112;
        __int16 v174 = 2050;
        uint64_t v175 = v47;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "#gpsd,pvtm,yield,%{public}d,isPrecise,%{public}d,isNullIsland,%{public}d,isRobust,%{public}d,isContinuous,%{public}d,timeSinceStrongSec,%{public}.1f,gpsTimeNs,%{public}llu,basebandTimeNs,%{public}llu,basebandTimeUncNs,%{public}llu,lat,%{private}.6f,lon,%{private}.6f,altWgs84,%{private}.1f,drms,%{public}.1f,vertUnc,%{public}.1f,rel,%{public}d,content,%{public}d,estTech,%{public}d,spoofFlags,0x%{public}llx", buf, 0x96u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v95 = *(unsigned __int8 *)(a1 + 1705);
        char v96 = *(void **)(v20 + 8);
        if (!v96) {
          char v96 = *(void **)(qword_10248A348 + 8);
        }
        uint64_t v97 = v96[1];
        uint64_t v99 = v96[6];
        uint64_t v98 = v96[7];
        uint64_t v100 = *(void *)(v21 + 8);
        uint64_t v101 = *(void *)(v21 + 16);
        uint64_t v102 = *(void *)(v21 + 24);
        uint64_t v103 = *(void *)(v21 + 40);
        uint64_t v104 = *(void *)(v20 + 32);
        LODWORD(v126) = 67244545;
        DWORD1(v126) = v36;
        WORD4(v126) = 1026;
        *(_DWORD *)((char *)&v126 + 10) = v34;
        HIWORD(v126) = 1026;
        LODWORD(v127) = v29 < 0.0001;
        WORD2(v127) = 1026;
        *(_DWORD *)((char *)&v127 + 6) = v33;
        WORD5(v127) = 1026;
        HIDWORD(v127) = v95;
        *(_WORD *)uint64_t v128 = 2050;
        *(double *)&v128[2] = v32;
        *(_WORD *)&v128[10] = 2050;
        *(void *)&v128[12] = v97;
        *(_WORD *)&v128[20] = 2050;
        *(void *)&v128[22] = v99;
        *(_WORD *)&v128[30] = 2050;
        *(void *)__int16 v129 = v98;
        *(_WORD *)&v129[8] = 2049;
        *(void *)&v129[10] = v100;
        __int16 v130 = 2049;
        *(void *)int v131 = v101;
        *(_WORD *)&v131[8] = 2049;
        *(void *)&v131[10] = v102;
        *(_WORD *)&v131[18] = 2050;
        int32x2_t v132 = *(int32x2_t *)&v23;
        LOWORD(v133) = 2050;
        *(void *)((char *)&v133 + 2) = v103;
        WORD5(v133) = 1026;
        HIDWORD(v133) = v113;
        LOWORD(v134) = 1026;
        *(_DWORD *)((char *)&v134 + 2) = v115;
        HIWORD(v134) = 1026;
        *(_DWORD *)uint64_t v135 = v112;
        *(_WORD *)&v135[4] = 2050;
        *(void *)&v135[6] = v104;
        __int16 v105 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v105);
        if (v105 != buf) {
          free(v105);
        }
      }
      *(void *)(a1 + 1728) |= *(void *)(v20 + 32);
      *(void *)&long long v126 = 0;
      *((void *)&v126 + 1) = &v126;
      *(void *)&long long v127 = 0x16812000000;
      *((void *)&v127 + 1) = sub_100178180;
      *(void *)uint64_t v128 = sub_100177858;
      *(void *)&v128[8] = 0;
      v128[16] = 0;
      char v146 = 0;
      if (v36)
      {
        if (sub_101874980(v115)) {
          *(double *)(a1 + 1712) = v18;
        }
        if (!*(unsigned char *)(a1 + 1705))
        {
          *(unsigned char *)(a1 + 1705) = 1;
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          uint64_t v48 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "#gpsd,handlePvtm,yielding first post-discontinuity fix", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            LOWORD(v120) = 0;
            long long v110 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v110);
            if (v110 != buf) {
              free(v110);
            }
          }
        }
        sub_101952264(*((void *)&v126 + 1) + 48);
        uint64_t v49 = *((void *)&v126 + 1);
        if (!*(unsigned char *)(*((void *)&v126 + 1) + 352)) {
          sub_10020D700();
        }
        int v50 = (long long *)(*((void *)&v126 + 1) + 48);
        sub_10193AB90(v20, *((void *)&v126 + 1) + 48, a1 + 2464);
        *(void *)(v49 + 344) = *(void *)(a1 + 1728);
        uint64_t v51 = *(void *)(v20 + 8);
        if (!v51) {
          uint64_t v51 = *(void *)(qword_10248A348 + 8);
        }
        sub_101951164(a1, v51);
        int v52 = (long long *)(a1 + 1848);
        if (v49 + 48 != a1 + 1848)
        {
          *(_DWORD *)(v49 + 328) = *(_DWORD *)(a1 + 2128);
          sub_10084EEAC((void *)(v49 + 296), *(uint64_t **)(a1 + 2112), 0);
        }
        *(_DWORD *)(v49 + 336) = v115;
        long long v53 = *v50;
        long long v54 = *(_OWORD *)(v49 + 64);
        long long v55 = *(_OWORD *)(v49 + 96);
        *(_OWORD *)(a1 + 1880) = *(_OWORD *)(v49 + 80);
        *(_OWORD *)(a1 + 1896) = v55;
        *int v52 = v53;
        *(_OWORD *)(a1 + 1864) = v54;
        long long v56 = *(_OWORD *)(v49 + 112);
        long long v57 = *(_OWORD *)(v49 + 128);
        long long v58 = *(_OWORD *)(v49 + 160);
        *(_OWORD *)(a1 + 1944) = *(_OWORD *)(v49 + 144);
        *(_OWORD *)(a1 + 1960) = v58;
        *(_OWORD *)(a1 + 1912) = v56;
        *(_OWORD *)(a1 + 1928) = v57;
        long long v59 = *(_OWORD *)(v49 + 176);
        long long v60 = *(_OWORD *)(v49 + 192);
        long long v61 = *(_OWORD *)(v49 + 224);
        *(_OWORD *)(a1 + 2008) = *(_OWORD *)(v49 + 208);
        *(_OWORD *)(a1 + 2024) = v61;
        *(_OWORD *)(a1 + 1976) = v59;
        *(_OWORD *)(a1 + 1992) = v60;
        long long v62 = *(_OWORD *)(v49 + 240);
        long long v63 = *(_OWORD *)(v49 + 256);
        long long v64 = *(_OWORD *)(v49 + 272);
        *(void *)(a1 + 2088) = *(void *)(v49 + 288);
        *(_OWORD *)(a1 + 2056) = v63;
        *(_OWORD *)(a1 + 2072) = v64;
        *(_OWORD *)(a1 + 2040) = v62;
        if (v52 != v50)
        {
          *(_DWORD *)(a1 + 2128) = *(_DWORD *)(v49 + 328);
          sub_10084EEAC((void *)(a1 + 2096), *(uint64_t **)(v49 + 312), 0);
        }
        *(_OWORD *)(a1 + 2136) = *(_OWORD *)(v49 + 336);
        *(void *)(a1 + 1728) = 0;
        if (sub_1000EF668(*(double *)(v49 + 104), *(double *)(v49 + 112)))
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023466F8);
          }
          __int16 v65 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 136380931;
            *(void *)&uint8_t buf[4] = "gps, null";
            *(_WORD *)&unsigned char buf[12] = 2081;
            __int16 v148 = "gpsd";
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023466F8);
            }
            int v120 = 136380931;
            __int16 v121 = "gps, null";
            __int16 v122 = 2081;
            __int16 v123 = "gpsd";
            long long v108 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v108);
            if (v108 != buf) {
              free(v108);
            }
          }
          AnalyticsSendEventLazy();
        }
        if (*(double *)(v49 + 104) == -1.0 && *(double *)(v49 + 112) == -1.0)
        {
          if (qword_1024193A0 != -1) {
            dispatch_once(&qword_1024193A0, &stru_1023466F8);
          }
          double v66 = qword_1024193A8;
          if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)std::string buf = 136380931;
            *(void *)&uint8_t buf[4] = "gps, sentinel";
            *(_WORD *)&unsigned char buf[12] = 2081;
            __int16 v148 = "gpsd";
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "ClxMetric, islands, %{private}s, %{private}s", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193A0 != -1) {
              dispatch_once(&qword_1024193A0, &stru_1023466F8);
            }
            int v120 = 136380931;
            __int16 v121 = "gps, sentinel";
            __int16 v122 = 2081;
            __int16 v123 = "gpsd";
            __int16 v109 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v109);
            if (v109 != buf) {
              free(v109);
            }
          }
          AnalyticsSendEventLazy();
        }
      }
      *(unsigned char *)(a1 + 1705) = v114;
      __int16 v67 = *(NSObject **)(a1 + 2152);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_101952320;
      block[3] = &unk_1022BF788;
      block[4] = &v126;
      void block[5] = a1;
      dispatch_async(v67, block);
      sub_101952384((int64x2_t *)a1, *(void *)(v21 + 80));
      sub_1019524A8(a1, v20);
      _Block_object_dispose(&v126, 8);
      if (v146) {
        sub_10071874C((uint64_t)&v145);
      }
      goto LABEL_109;
    }
    if (sub_10187490C(v30))
    {
      *(unsigned char *)(a1 + 1705) = 0;
      *(void *)(a1 + 1712) = 0xC08F400000000000;
    }
    else if (*(unsigned char *)(a1 + 1705))
    {
      double v32 = v18 - *(double *)(a1 + 1712);
      if (sub_101874980(v115))
      {
        BOOL v93 = 1;
LABEL_184:
        int v33 = sub_10187491C(v113) && v93;
        goto LABEL_58;
      }
      if (v31 == 3)
      {
        if (!v115 || v23 >= 40.0)
        {
          if (v23 >= 100.0) {
            BOOL v93 = v32 < 12.5;
          }
          else {
            BOOL v93 = v32 < 40.5;
          }
          goto LABEL_184;
        }
        double v94 = 600.5;
      }
      else
      {
        if (v31 != 2) {
          goto LABEL_183;
        }
        if (sub_101874990(v115) && v23 < 40.0) {
          double v94 = 10.5;
        }
        else {
          double v94 = 5.5;
        }
      }
      BOOL v93 = v32 < v94;
      goto LABEL_184;
    }
    if (sub_10187495C(v113))
    {
      BOOL v93 = sub_101874980(v115);
      goto LABEL_184;
    }
LABEL_183:
    BOOL v93 = 0;
    goto LABEL_184;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#gpsd,handlePvtm,nullptr", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    LOWORD(v126) = 0;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handlePvtmIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v10);
    goto LABEL_30;
  }
}

void sub_1019444E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a27, 8);
  if (a71) {
    sub_10071874C((uint64_t)&a64);
  }
  _Unwind_Resume(a1);
}

void sub_101944574(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if ((*(unsigned char *)(*a2 + 224) & 0x80) != 0)
  {
    LOBYTE(buf) = 0;
    *((void *)&buf + 1) = 0;
    LODWORD(v16) = -1082130432;
    BYTE4(v16) = 0;
    DWORD2(v16) = 0;
    long long v17 = 0xFFFFFFFFFFFFFFFFLL;
    long long v18 = 0uLL;
    long long v14 = 0uLL;
    uint64_t v6 = *(void *)(v2 + 56);
    if (!v6) {
      uint64_t v6 = *(void *)(qword_10248AFE8 + 56);
    }
    sub_1017DF268(v6, (uint64_t)&buf, &v14);
    int v7 = *(NSObject **)(a1 + 2152);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    long long v9 = buf;
    long long v10 = v16;
    long long v11 = v17;
    long long v12 = v18;
    block[2] = sub_101954420;
    block[3] = &unk_102346660;
    block[4] = a1;
    long long v13 = v14;
    dispatch_async(v7, block);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "handleTimeTransferIndication";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#gpsd,#warning,#tt,no_data,%s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LODWORD(v14) = 136315138;
      *(void *)((char *)&v14 + 4) = "handleTimeTransferIndication";
      unint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleTimeTransferIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v4);
      if (v4 != (char *)&buf) {
        free(v4);
      }
    }
  }
}

void sub_1019447F8(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,handleEmergencySummaryReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    LOWORD(v16[0]) = 0;
    unsigned int v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencySummaryReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  uint64_t v5 = *a2;
  if ((*(unsigned char *)(*a2 + 226) & 2) != 0)
  {
    *(int64x2_t *)long long buf = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    long long v18 = xmmword_101D2A480;
    __asm { FMOV            V0.2D, #-1.0 }
    long long v19 = _Q0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    long long v22 = _Q0;
    unint64_t v23 = 0xBFF0000000000000;
    uint64_t v24 = 0;
    __int16 v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    uint64_t v13 = *(void *)(v5 + 128);
    if (!v13) {
      uint64_t v13 = *(void *)(qword_10248AFE8 + 128);
    }
    sub_1017E2BA4(v13, (uint64_t)buf);
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a1 + 64))(v16, a1);
    sub_10195B45C(a1 + 3160, (uint64_t)buf, v16[0] + 24, 1);
    uint64_t v14 = v16[0];
    v16[0] = 0;
    if (v14) {
      sub_100852AF8((uint64_t)v16, v14);
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencySummaryReport,indication missing summary_report", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v16[0]) = 0;
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencySummaryReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_101944B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    sub_100852AF8((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_101944BA8(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,handleEmergencyPositionReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    long long v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyPositionReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  uint64_t v5 = *a2;
  if (v5)
  {
    if ((*(unsigned char *)(v5 + 226) & 8) != 0)
    {
      *(void *)long long buf = 0;
      uint64_t v18 = -1;
      uint64_t v19 = -1;
      __int16 v20 = 0;
      char v21 = -1;
      v22[0] = -1;
      *(void *)((char *)v22 + 7) = -1;
      void v22[2] = 0xFFFFFFFF00000004;
      __int16 v23 = -1;
      char v24 = -1;
      int v25 = -1;
      __int16 v26 = 0;
      uint64_t v27 = 0x7FFFFFFF000000FFLL;
      int v28 = 0x7FFFFFFF;
      char v29 = -1;
      long long v30 = xmmword_101E37500;
      *(void *)int v31 = 0xFFFFFFFF7FFFFFFFLL;
      *(_DWORD *)((char *)&v31[1] + 3) = -1;
      *(void *)&v31[3] = 0x8000000080000000;
      v31[5] = -1;
      __int16 v32 = -1;
      *(void *)&long long v9 = 0x8000000080000000;
      *((void *)&v9 + 1) = 0x8000000080000000;
      long long v33 = v9;
      __int16 v34 = -1;
      char v35 = -1;
      memset_pattern16(v36, &unk_101E37510, 0x78uLL);
      v36[120] = -1;
      int v37 = 255;
      unsigned char v38[2] = -1;
      v38[0] = -1;
      *(void *)((char *)v38 + 7) = -1;
      int v39 = 0;
      uint64_t v40 = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      uint64_t v15 = *(void *)(v5 + 144);
      if (!v15) {
        uint64_t v15 = *(void *)(qword_10248AFE8 + 144);
      }
      sub_1017E4200(v15, buf);
      sub_10195C60C(a1 + 3064, (uint64_t)buf);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyPositionReport,missing position_report", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_21:
          char v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyPositionReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
          return;
        }
LABEL_31:
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
        goto LABEL_21;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyPositionReport,nullptr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_21;
      }
      goto LABEL_31;
    }
  }
}

void sub_10194509C(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,handleEmergencyMeasurementReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyMeasurementReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  uint64_t v5 = *a2;
  if (*a2 && (*(unsigned char *)(v5 + 226) & 0x10) != 0)
  {
    *(_DWORD *)long long buf = 0;
    uint64_t v16 = -1;
    uint64_t v17 = -1;
    int v18 = -1;
    uint64_t v8 = 28;
    char v15 = 0;
    do
    {
      long long v9 = &buf[v8];
      *(_WORD *)long long v9 = 0x7FFF;
      *(_DWORD *)(v9 + 2) = -1;
      *(_DWORD *)(v9 + 5) = -1;
      *(void *)(v9 + 12) = 0xFFFFFFFF00000004;
      v9[20] = -1;
      v8 += 24;
    }
    while (v9 + 24 != (uint8_t *)&v19);
    int v19 = 0;
    uint64_t v20 = -1;
    int v21 = 33619967;
    __int16 v22 = -1;
    int v26 = -1;
    char v27 = -1;
    uint64_t v23 = -1;
    uint64_t v24 = -1;
    char v25 = -1;
    char v28 = -1;
    *(_DWORD *)((char *)v29 + 7) = -1;
    v29[0] = -1;
    int v30 = 4;
    uint64_t v31 = -1;
    int v32 = 0;
    int v36 = -1;
    uint64_t v37 = -1;
    __int16 v35 = -1;
    uint64_t v34 = -1;
    uint64_t v33 = -1;
    char v38 = -1;
    int v40 = -1;
    uint64_t v41 = -1;
    uint64_t v39 = -1;
    __int16 v42 = -1;
    int v43 = -1;
    __int16 v44 = -1;
    int v48 = -1;
    uint64_t v45 = -1;
    uint64_t v46 = -1;
    __int16 v47 = -1;
    __int16 v49 = -129;
    int v50 = -1;
    char v51 = -1;
    int v52 = 5;
    __int16 v53 = -1;
    char v54 = -1;
    uint64_t v10 = 620;
    do
    {
      long long v11 = &buf[v10];
      *(_DWORD *)long long v11 = -32769;
      void v11[4] = -1;
      *((void *)v11 + 1) = 0xFF00000004;
      *((_WORD *)v11 + 8) = -1;
      *((_DWORD *)v11 + 5) = -1;
      v10 += 24;
    }
    while (v11 + 24 != (uint8_t *)v55);
    v55[1] = -1;
    char v56 = 0;
    uint64_t v12 = *(void *)(v5 + 152);
    if (!v12) {
      uint64_t v12 = *(void *)(qword_10248AFE8 + 152);
    }
    sub_1017E4934(v12, (uint64_t)buf);
    sub_10195C660(a1 + 3096, (uint64_t)buf);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyMeasurementReport,invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyMeasurementReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_10194550C(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,handleEmergencyMeasurementReportWithEstimate", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    long long v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyMeasurementReportWithEstimate(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v5 = *a2;
  if (*a2 && (*(unsigned char *)(v5 + 226) & 0x80) != 0)
  {
    *(_DWORD *)long long buf = 0;
    char v13 = 0;
    uint64_t v14 = -1;
    uint64_t v15 = -1;
    uint64_t v8 = 28;
    int v16 = -1;
    do
    {
      long long v9 = &buf[v8];
      *(_WORD *)long long v9 = 0x7FFF;
      *(_DWORD *)(v9 + 2) = -1;
      *(_DWORD *)(v9 + 5) = -1;
      *(void *)(v9 + 12) = 0xFFFFFFFF00000004;
      v9[20] = -1;
      v8 += 24;
    }
    while (v9 + 24 != (uint8_t *)&v17);
    int v17 = 0;
    uint64_t v18 = -1;
    int v19 = 33619967;
    __int16 v20 = -1;
    int v24 = -1;
    char v25 = -1;
    uint64_t v21 = -1;
    uint64_t v22 = -1;
    char v23 = -1;
    char v26 = -1;
    memset(v27, 255, 11);
    int v28 = -1;
    memset(&v27[12], 255, 11);
    char v29 = 0;
    int v30 = -1;
    char v31 = -1;
    char v32 = 0;
    int v33 = -1;
    __int16 v34 = -1;
    char v35 = 0;
    __int16 v36 = -1;
    char v37 = -1;
    int v38 = 0;
    char v39 = 0;
    uint64_t v10 = *(void *)(v5 + 176);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_10248AFE8 + 176);
    }
    sub_1017E6B74(v10, (uint64_t)buf);
    sub_10195C6B4(a1 + 3128, (uint64_t)buf);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyMeasurementReportWithEstimate,invalid", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyMeasurementReportWithEstimate(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_1019458F4(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,handleEmergencyAssNeededReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyAssNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  uint64_t v5 = *a2;
  if (*a2)
  {
    if ((*(unsigned char *)(v5 + 226) & 0x20) != 0)
    {
      *(_DWORD *)long long buf = 0;
      char v19 = 0;
      uint64_t v20 = -1;
      int v21 = -1;
      __int16 v22 = 0;
      int v23 = -1;
      char v24 = -1;
      memset(v25, 0, 14);
      v25[14] = -1;
      memset(&v25[15], 0, 14);
      long long v9 = &v26;
      uint64_t v10 = 112;
      v25[29] = -1;
      uint64_t v11 = 262;
      v25[33] = 0;
      do
      {
        *(_DWORD *)long long v9 = 5;
        *((_WORD *)v9 + 2) = 0;
        uint64_t v12 = v10;
        *((unsigned char *)v9 + 6) = -1;
        do
        {
          char v13 = &buf[v12];
          *char v13 = -1;
          *((_DWORD *)v13 + 1) = -1;
          v12 += 8;
        }
        while (v13 + 8 != (uint8_t *)(v9 + 16));
        *((_DWORD *)v9 + 32) = -1;
        *((_WORD *)v9 + 66) = -1;
        *(_DWORD *)((char *)v9 + 134) = -256;
        *(uint64_t *)((char *)v9 + 138) = 0;
        v9[18] = 0;
        *((_DWORD *)v9 + 38) = -1;
        uint64_t v14 = v11;
        *((unsigned char *)v9 + 156) = -1;
        do
        {
          uint64_t v15 = &buf[v14];
          *uint64_t v15 = -1;
          *((_WORD *)v15 + 1) = -1;
          v14 += 4;
        }
        while (v15 + 4 != (uint8_t *)((char *)v9 + 218));
        *(_DWORD *)((char *)v9 + 218) = -1;
        v9 += 28;
        v10 += 224;
        v11 += 224;
      }
      while (v9 != &v27);
      uint64_t v16 = *(void *)(v5 + 160);
      if (!v16) {
        uint64_t v16 = *(void *)(qword_10248AFE8 + 160);
      }
      sub_1017E5238(v16, (uint64_t)buf);
      sub_10195C708(a1 + 3000, (uint64_t)buf);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyAssNeededReport,missing asst needed rpt", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_21:
          uint64_t v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyAssNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
          return;
        }
LABEL_37:
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
        goto LABEL_21;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencyAssNeededReport,nullptr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_21;
      }
      goto LABEL_37;
    }
  }
}

void sub_101945DB0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 && (*(unsigned char *)(v2 + 227) & 1) != 0)
  {
    long long buf = xmmword_101D1D180;
    long long v25 = xmmword_101D27D40;
    int64x2_t v26 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
    __asm { FMOV            V1.2D, #-1.0 }
    long long v27 = _Q1;
    *(void *)&long long v28 = 0xBFF0000000000000;
    WORD4(v28) = 0;
    BYTE10(v28) = 0;
    HIDWORD(v28) = 0;
    int64x2_t v29 = v26;
    long long v30 = xmmword_101D2A480;
    *(void *)&long long v31 = 0xBFF0000000000000;
    WORD4(v31) = -1;
    LODWORD(v32) = -1;
    WORD2(v32) = -1;
    *((void *)&v32 + 1) = 0xBFF0000000000000;
    uint64_t v11 = *(_DWORD **)(v2 + 184);
    if (!v11) {
      uint64_t v11 = *(_DWORD **)(qword_10248AFE8 + 184);
    }
    sub_1017E3044(v11, (uint64_t)&buf);
    uint64_t v12 = *(NSObject **)(a1 + 2152);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    long long v18 = v28;
    int64x2_t v19 = v29;
    long long v20 = v30;
    long long v21 = v31;
    long long v22 = v32;
    long long v15 = v25;
    int64x2_t v16 = v26;
    long long v17 = v27;
    block[2] = sub_10195DD0C;
    block[3] = &unk_102346680;
    block[4] = a1;
    long long v14 = buf;
    dispatch_async(v12, block);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencySuplStatusReport,missing", (uint8_t *)&buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      __int16 v23 = 0;
      unint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencySuplStatusReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v4);
      if (v4 != (char *)&buf) {
        free(v4);
      }
    }
  }
}

void sub_101946060(uint64_t a1, void *a2)
{
  if (*a2)
  {
    uint64_t v2 = *(void *)(a1 + 3256);
    if (!v2) {
      sub_10015E48C();
    }
    int v3 = *(void (**)(void))(*(void *)v2 + 48);
    v3();
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v4 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#gpsd,handleEmergencySuplLocationIdNeededReport,nullptr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencySuplLocationIdNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
}

void sub_101946258(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    int v3 = *(_DWORD *)(v2 + 224);
    if ((v3 & 0x10000000) == 0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      unint64_t v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "#gpsd,#nilr,#supl,handleEmergencyDecodedSuplInit g_instance is missing", (uint8_t *)&buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_16:
          LOWORD(v24[0]) = 0;
          uint64_t v6 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v6);
          if (v6 != (char *)&buf) {
            free(v6);
          }
          return;
        }
LABEL_80:
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
        goto LABEL_16;
      }
      return;
    }
    int v9 = *(_DWORD *)(v2 + 216);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unsigned int v10 = v3 & 0x8000000;
    unsigned int v11 = v3 & 0x4000000;
    unsigned int v12 = v3 & 0x2000000;
    char v13 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 67240960;
      HIDWORD(buf) = v11 >> 26;
      __int16 v32 = 1026;
      unsigned int v33 = v12 >> 25;
      __int16 v34 = 1026;
      unsigned int v35 = v10 >> 27;
      LOWORD(v36[0]) = 1026;
      *(_DWORD *)((char *)v36 + 2) = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#gpsd,#nilr,#supl,DecodedSuplInit,has_supl_init_index,%{public}d,has_decoded_supl_init,%{public}d,has_supl_init_decode_result,inst,%{public}d,%{public}d", (uint8_t *)&buf, 0x1Au);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      v24[0] = 67240960;
      v24[1] = v11 >> 26;
      __int16 v25 = 1026;
      unsigned int v26 = v12 >> 25;
      __int16 v27 = 1026;
      unsigned int v28 = v10 >> 27;
      __int16 v29 = 1026;
      int v30 = v9;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v21);
      if (v21 != (char *)&buf) {
        free(v21);
      }
    }
    if (v10)
    {
      uint64_t v15 = *(unsigned int *)(*a2 + 204);
      if (v15 != 1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        long long v18 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#gpsd,#nilr,#supl,SUPL decode failed", (uint8_t *)&buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          LOWORD(v24[0]) = 0;
          __int16 v23 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v23);
          if (v23 != (char *)&buf) {
            free(v23);
          }
        }
        __int16 v32 = 0;
        LOBYTE(v33) = 0;
        LOBYTE(v35) = 0;
        char v38 = 0;
        long long v39 = 0u;
        memset(v40, 0, sizeof(v40));
        uint64_t v41 = 0;
        LODWORD(buf) = 0;
        *(_DWORD *)((char *)&buf + 3) = 0;
        *(_OWORD *)__int16 v36 = 0u;
        memset(v37, 0, 38);
        int v19 = sub_1017E531C(v15);
        sub_10195DCAC(a1 + 3200, v19, v9, 0);
        goto LABEL_55;
      }
      if ((~v3 & 0x6000000) == 0)
      {
        uint64_t v16 = *(void *)(*a2 + 192);
        if (!v16) {
          uint64_t v16 = *(void *)(qword_10248AFE8 + 192);
        }
        sub_1008CFC2C((uint64_t)v24, v16);
        __int16 v32 = 0;
        LOBYTE(v33) = 0;
        LOBYTE(v35) = 0;
        char v38 = 0;
        long long v39 = 0u;
        memset(v40, 0, sizeof(v40));
        uint64_t v41 = 0;
        LODWORD(buf) = 0;
        *(_DWORD *)((char *)&buf + 3) = 0;
        *(_OWORD *)__int16 v36 = 0u;
        memset(v37, 0, 38);
        sub_1017E2F34((uint64_t)v24, (uint64_t)&buf);
        int v17 = sub_1017E531C(1);
        sub_10195DCAC(a1 + 3200, v17, v9, *(_DWORD *)(*a2 + 200));
        if (*(void *)&v40[3])
        {
          *(void *)&v40[5] = *(void *)&v40[3];
          operator delete(*(void **)&v40[3]);
        }
        if (SHIBYTE(v40[2]) < 0) {
          operator delete(*(void **)((char *)&v39 + 4));
        }
        if (*(void **)((char *)&v37[1] + 4))
        {
          *(void **)((char *)&v37[2] + 4) = *(void **)((char *)&v37[1] + 4);
          operator delete(*(void **)((char *)&v37[1] + 4));
        }
        if (SBYTE3(v37[1]) < 0) {
          operator delete(*(void **)((char *)v36 + 4));
        }
        sub_1008CFD28((wireless_diagnostics::google::protobuf::MessageLite *)v24);
        return;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      long long v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#gpsd,#nilr,#supl,Incomplete decoded SUPL payload", (uint8_t *)&buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_54;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v24[0]) = 0;
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v22);
      if (v22 == (char *)&buf)
      {
LABEL_54:
        __int16 v32 = 0;
        LOBYTE(v33) = 0;
        LOBYTE(v35) = 0;
        char v38 = 0;
        long long v39 = 0u;
        memset(v40, 0, sizeof(v40));
        uint64_t v41 = 0;
        LODWORD(buf) = 0;
        *(_DWORD *)((char *)&buf + 3) = 0;
        *(_OWORD *)__int16 v36 = 0u;
        memset(v37, 0, 38);
        sub_10195DCAC(a1 + 3200, 2, v9, 0);
LABEL_55:
        if (*(void *)&v40[3])
        {
          *(void *)&v40[5] = *(void *)&v40[3];
          operator delete(*(void **)&v40[3]);
        }
        if (SHIBYTE(v40[2]) < 0) {
          operator delete(*(void **)((char *)&v39 + 4));
        }
        if (*(void **)((char *)&v37[1] + 4))
        {
          *(void **)((char *)&v37[2] + 4) = *(void **)((char *)&v37[1] + 4);
          operator delete(*(void **)((char *)&v37[1] + 4));
        }
        if (SBYTE3(v37[1]) < 0) {
          operator delete(*(void **)((char *)v36 + 4));
        }
        return;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      long long v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#gpsd,#nilr,#supl,Incomplete decoded SUPL payload", (uint8_t *)&buf, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_54;
      }
      bzero(&buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v24[0]) = 0;
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencyDecodedSuplInit(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v22);
      if (v22 == (char *)&buf) {
        goto LABEL_54;
      }
    }
    free(v22);
    goto LABEL_54;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v5 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsd,#nilr,#supl,handleEmergencyDecodedSuplInit,null", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_16;
    }
    goto LABEL_80;
  }
}

void sub_101946C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_1017D34CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_101946CD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 1560))
  {
    if ((*(unsigned char *)(a2 + 224) & 0x20) != 0)
    {
      uint64_t v11 = 0;
      *(_OWORD *)uint64_t buf = 0u;
      long long v10 = 0u;
      uint64_t v5 = *(void *)(a2 + 40);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_10248AFE8 + 40);
      }
      sub_1017E5504(v5, (double *)buf);
      v7[0] = *(_OWORD *)buf;
      v7[1] = v10;
      uint64_t v8 = v11;
      uint64_t v6 = *(void *)(a1 + 1560);
      if (!v6) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, _OWORD *))(*(void *)v6 + 48))(v6, v7);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v2 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,Indication missing power measurement", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handlePowerMeasurementIndication(const proto::gpsd::Indication &)", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
    }
  }
}

void sub_101946EE4(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 225) & 4) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,#ee,received EE indication but data is empty", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      __int16 v24 = 0;
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleDecodedExtendedEphemerisIndication(const proto::gpsd::Indication &)", "%s\n", v3);
      if (v3 != buf) {
        free(v3);
      }
    }
    return;
  }
  LOBYTE(v24) = 0;
  unint64_t v25 = 0;
  unint64_t v26 = 0;
  unsigned __int8 v27 = 0;
  uint64_t v5 = *(void *)(a2 + 80);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248AFE8 + 80);
  }
  sub_1017E60A0(v5, (uint64_t)&v24);
  if (v24 != 4)
  {
    if (v24 == 3)
    {
      int v7 = 0;
      int v6 = 1;
      goto LABEL_19;
    }
    if ((_BYTE)v24)
    {
      int v7 = 0;
      int v6 = 0;
      goto LABEL_19;
    }
  }
  int v6 = 2;
  int v7 = 1;
LABEL_19:
  if (!v27)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 134349056;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gpsd,#ee,vendor reported integrity failure,dataTimeGpsNs,%{public}llu", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v28 = 134349056;
      *(void *)__int16 v29 = v25;
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleDecodedExtendedEphemerisIndication(const proto::gpsd::Indication &)", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
  }
  if (v27) {
    int v9 = 0;
  }
  else {
    int v9 = 12;
  }
  unsigned __int8 v23 = 0;
  double v10 = sub_10187A068(a1 + 2536, &v23);
  unint64_t v11 = v25;
  unint64_t v12 = v26;
  double v13 = v10 - (double)v25;
  double v22 = v13;
  *(double *)(a1 + 2568) = v13;
  if (v12 <= v11)
  {
    int v14 = 0;
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v14 = v12 - v11;
    uint64_t v15 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v12 - v11;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#gpsd,#ee,Extended ephemeris file data durationSeconds,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v28 = 67109120;
      *(_DWORD *)__int16 v29 = v12 - v11;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleDecodedExtendedEphemerisIndication(const proto::gpsd::Indication &)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v17 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240960;
    *(_DWORD *)&uint8_t buf[4] = v27;
    *(_WORD *)&uint8_t buf[8] = 2050;
    *(double *)&buf[10] = v13;
    __int16 v35 = 1026;
    int v36 = v23;
    __int16 v37 = 1026;
    int v38 = v6;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#gpsd,#ee,decoded EE callback,integrityPassed,%{public}d,data_age_seconds,%{public}.1f,isAgeReliable,%{public}d,fileType,%{public}d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v28 = 67240960;
    *(_DWORD *)__int16 v29 = v27;
    *(_WORD *)&void v29[4] = 2050;
    *(double *)&v29[6] = v13;
    __int16 v30 = 1026;
    int v31 = v23;
    __int16 v32 = 1026;
    int v33 = v6;
    long long v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleDecodedExtendedEphemerisIndication(const proto::gpsd::Indication &)", "%s\n", v20);
    if (v20 != buf) {
      free(v20);
    }
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 64))(buf, a1);
  sub_10188E6C0(a1 + 8, (const char *)(*(void *)buf + 24), v9, v6, &v22);
  uint64_t v18 = *(void *)buf;
  *(void *)uint64_t buf = 0;
  if (v18) {
    sub_100852AF8((uint64_t)buf, v18);
  }
  if (*(void *)(a1 + 1432)) {
    int v19 = v7;
  }
  else {
    int v19 = 0;
  }
  if (v12 > v11 && v19) {
    sub_100A169C8(a1 + 1408, v14);
  }
}

void sub_1019475EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22 = a21;
  a21 = 0;
  if (v22) {
    sub_100852AF8((uint64_t)&a21, v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_101947614(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 225) & 8) != 0)
  {
    unint64_t v14 = 0;
    char v15 = 0;
    uint64_t v5 = *(void *)(a2 + 88);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248AFE8 + 88);
    }
    sub_1017E6078(v5, (uint64_t)&v14);
    if (!v15)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134349056;
        double v21 = *(double *)&v14;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,RTI integrity failure,dataTimeGpsNs,%{public}llu", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v16 = 134349056;
        double v17 = *(double *)&v14;
        unint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleDecodedRtiIndication(const proto::gpsd::Indication &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
    unsigned __int8 v13 = 0;
    double v7 = sub_10187A068(a1 + 2536, &v13);
    double v8 = v7 - (double)v14;
    double v12 = v8;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v9 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 134218240;
      double v21 = v8;
      __int16 v22 = 1024;
      int v23 = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gpsd,RTI,ageSeconds,%f,isAccurate,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v16 = 134218240;
      double v17 = v8;
      __int16 v18 = 1024;
      int v19 = v13;
      double v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleDecodedRtiIndication(const proto::gpsd::Indication &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    sub_10188E6C0(a1 + 8, (const char *)(a1 + 1824), 1, 3, &v12);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,Indication missing decoded Rti", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v16) = 0;
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleDecodedRtiIndication(const proto::gpsd::Indication &)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_101947AD0(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 225) & 2) != 0)
  {
    if (*(void *)(a1 + 3328))
    {
      uint64_t v5 = *(void *)(a2 + 72);
      if (!v5) {
        uint64_t v5 = *(void *)(qword_10248AFE8 + 72);
      }
      sub_1017E5C64(v5, &v16);
      if (*(unsigned char *)(a1 + 3344))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v6 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 67109120;
          int v22 = v16;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,req,%d", buf, 8u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          int v17 = 67109120;
          int v18 = v16;
          double v12 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v12);
          if (v12 != (char *)buf) {
            free(v12);
          }
        }
        double v7 = *(uint64_t **)(a1 + 3328);
        if (v7) {
          sub_101998AE4(*v7, v16);
        }
      }
      else
      {
        if (!*(void *)(a1 + 3352))
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          unint64_t v11 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)uint64_t buf = 67109120;
            int v22 = v16;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,req deferred,%d", buf, 8u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            int v17 = 67109120;
            int v18 = v16;
            char v15 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v15);
            if (v15 != (char *)buf) {
              free(v15);
            }
          }
          operator new();
        }
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v9 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
        {
          int v10 = **(_DWORD **)(a1 + 3352);
          *(_DWORD *)uint64_t buf = 67109376;
          int v22 = v10;
          __int16 v23 = 1024;
          int v24 = v16;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "#gpsd,#xocal,req update,old,%d,new,%d", buf, 0xEu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          int v13 = **(_DWORD **)(a1 + 3352);
          int v17 = 67109376;
          int v18 = v13;
          __int16 v19 = 1024;
          int v20 = v16;
          unint64_t v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
        **(_DWORD **)(a1 + 3352) = v16;
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      double v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#gpsd,#xocal,#Warning,Requested but servicing controller not instantiated", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        LOWORD(v17) = 0;
        int v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v3);
        goto LABEL_29;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,#xocal,Indication missing in request", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v17) = 0;
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleLtlInfoRequestIndication(const proto::gpsd::Indication &)", "%s\n", v3);
LABEL_29:
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_101948240(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 225) & 0x40) != 0)
  {
    if (*(void *)(a1 + 3336))
    {
      uint64_t v4 = *(void *)(a2 + 104);
      if (!v4) {
        uint64_t v4 = *(void *)(qword_10248AFE8 + 104);
      }
      char v5 = *(unsigned char *)(v4 + 8);
      int v6 = *(NSObject **)(a1 + 2152);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1019530BC;
      block[3] = &unk_1022BBA18;
      block[4] = a1;
      char v9 = v5;
      dispatch_async(v6, block);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      double v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gpsd,#cntin,#Warning,RequestedButNoXccProxy", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        __int16 v10 = 0;
        int v3 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)", "%s\n");
        goto LABEL_23;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,#cntin,cntin_clock_control,IndicationMissed", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      __int16 v10 = 0;
      int v3 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleCntinInquiryRequestIndication(const proto::gpsd::Indication &)", "%s\n");
LABEL_23:
      if (v3 != buf) {
        free(v3);
      }
    }
  }
}

void sub_101948570(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,handleFT1xAssNeededReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleFT1xAssNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  if (*(void *)a2)
  {
    if ((*(unsigned char *)(*(void *)a2 + 226) & 0x40) != 0)
    {
      *(_DWORD *)uint64_t buf = 4;
      sub_10195C75C(a1 + 3032, (uint64_t)buf);
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    char v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsd,handleFT1xAssNeededReport,missing FT asst needed rpt", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1)
      {
LABEL_21:
        double v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleFT1xAssNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
        return;
      }
LABEL_29:
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
      goto LABEL_21;
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,handleFT1xAssNeededReport,nullptr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_21;
      }
      goto LABEL_29;
    }
  }
}

void sub_101948928(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2 || (*(unsigned char *)(v2 + 225) & 0x10) == 0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v3 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gpsd,startCompleted,fail,missing data", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    LOWORD(v14) = 0;
LABEL_27:
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleStartCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
    return;
  }
  if (*(_DWORD *)(v2 + 96) == 1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    char v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsd,startCompleted,success", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v14) = 0;
      double v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleStartCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int v6 = *(NSObject **)(a1 + 2152);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10195C7B0;
    block[3] = &unk_1022A3020;
    block[4] = a1;
    dispatch_async(v6, block);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      int v9 = *(_DWORD *)(*a2 + 96);
      *(_DWORD *)uint64_t buf = 67240192;
      int v17 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gpsd,startCompleted,fail,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v10 = *(_DWORD *)(*a2 + 96);
      int v14 = 67240192;
      int v15 = v10;
      goto LABEL_27;
    }
  }
}

void sub_101948D58(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,handleStopCompletedIndication", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleStopCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  sub_10194BED8(a1);
  uint64_t v5 = *a2;
  if (!*a2)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsd,handleStopCompletedIndication,nullptr", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
  if ((*(unsigned char *)(v5 + 225) & 0x20) != 0)
  {
    int v8 = *(_DWORD *)(v5 + 100);
    if (v8 == 1)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#gpsd,stopCompleted,success", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v10 = (uint8_t *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleStopCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n");
        goto LABEL_43;
      }
      return;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 67109120;
      int v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#gpsd,stopCompleted,fail,status=%d", buf, 8u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1)
    {
LABEL_42:
      int v10 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleStopCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n");
LABEL_43:
      if (v10 != buf) {
        free(v10);
      }
      return;
    }
LABEL_45:
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
    goto LABEL_42;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,stopCompleted,statusMissing", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_42;
    }
    goto LABEL_45;
  }
}

void sub_101949304(_DWORD *a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 136315138;
    double v12 = "handleExceptionIndication";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,%s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleExceptionIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v5 = *a2;
  if (*a2)
  {
    if ((*(unsigned char *)(v5 + 225) & 0x80) != 0)
    {
      uint64_t v9 = *(void *)(v5 + 112);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_10248AFE8 + 112);
      }
      sub_100FE82B4(buf, v9);
      sub_10195C828(a1, v14, v13);
      sub_100FE82B8((wireless_diagnostics::google::protobuf::MessageLite *)buf);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 136315138;
        double v12 = "handleExceptionIndication";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,%s,statusMissing", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_21:
          int v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleExceptionIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
          return;
        }
LABEL_31:
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
        goto LABEL_21;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 136315138;
      double v12 = "handleExceptionIndication";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsd,%s,nullptr", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_21;
      }
      goto LABEL_31;
    }
  }
}

void sub_1019497A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100FE82B8((wireless_diagnostics::google::protobuf::MessageLite *)va);
  _Unwind_Resume(a1);
}

void sub_1019497BC(uint64_t a1, uint64_t *a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#gpsd,#wlan,handleEmergencySuplWlanMeasNeededReport", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleEmergencySuplWlanMeasNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v5 = *a2;
  if (*a2)
  {
    if ((*(unsigned char *)(v5 + 227) & 0x20) != 0)
    {
      *(_WORD *)uint64_t buf = -1;
      char v13 = 0;
      uint64_t v9 = *(void *)(v5 + 208);
      if (!v9) {
        uint64_t v9 = *(void *)(qword_10248AFE8 + 208);
      }
      sub_1017E67FC(v9, (uint64_t)buf);
      uint64_t v10 = *(void *)(a1 + 3288);
      if (!v10) {
        sub_10015E48C();
      }
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v10 + 48))(v10, buf);
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v6 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#gpsd,#wlan,Missing wlan_measurement_request", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 == -1)
        {
LABEL_21:
          int v8 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleEmergencySuplWlanMeasNeededReport(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v8);
          if (v8 != (char *)buf) {
            free(v8);
          }
          return;
        }
LABEL_33:
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
        goto LABEL_21;
      }
    }
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    double v7 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#gpsd,#wlan,handleEmergencySuplWlanMeasNeededReport,nullptr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 == -1) {
        goto LABEL_21;
      }
      goto LABEL_33;
    }
  }
}

void sub_101949BC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    *a2 = 0;
    uint64_t v4 = *(void *)(a1 + 2992);
    *(void *)(a1 + 2992) = v2;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    sub_101940CD8(a1 + 2176, 7);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "#gpsd,null indicationPtr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLGnssDaemonDevice::gpsdIndicationHandler(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
}

void sub_101949DCC(uint64_t a1)
{
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 34;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#gpsd,prepareBuildDeviceRequest", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::prepareBuildDeviceRequest()", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
}

uint64_t sub_101949F84(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 1664))
  {
    sub_100FCF7D8(result + 2576);
    if ((sub_100FCD768() & 1) == 0) {
      sub_101A9BF7C();
    }
    int v2 = *(_DWORD *)(v1 + 2972);
    *(_DWORD *)(v1 + 2596) = 24;
    *(_DWORD *)(v1 + 2972) = v2 | 0x200004;
    uint64_t v3 = *(void *)(v1 + 2744);
    if (!v3) {
      operator new();
    }
    *(_DWORD *)(v3 + 20) |= 1u;
    *(unsigned char *)(v3 + 8) = 1;
    sub_1000C7F88(buf);
    v9[0] = 0;
    if (sub_10006EF84(*(uint64_t *)buf, "GpsSimulatorTestModeDefaultWeek", v9)) {
      int v4 = v9[0];
    }
    else {
      int v4 = 2049;
    }
    if (v11) {
      sub_1000DB0A0(v11);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsd,#Warning,setConfigSimulatorMode,week,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      v9[0] = 67240192;
      v9[1] = v4;
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::preStartConfig()", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(_DWORD *)(v3 + 20) |= 2u;
    *(_DWORD *)(v3 + 12) = v4;
    uint64_t result = sub_101940CD8(v1 + 2176, 2);
  }
  if (*(unsigned char *)(v1 + 1706))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#gpsd,preStartConfig,resending airborne", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v9[0]) = 0;
      double v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::preStartConfig()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 272))(v1, 1);
  }
  return result;
}

void sub_10194A378()
{
}

void sub_10194A3B8(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,start initiated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    LOWORD(v47) = 0;
    __int16 v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
  }
  *(unsigned char *)(a1 + 1680) = 1;
  sub_10194AFC0(a1);
  sub_101949F84(a1);
  v54[0] = 0;
  long long v53 = 0u;
  memset(buf, 0, sizeof(buf));
  memset(&v54[8], 0, 32);
  *(_DWORD *)&v54[40] = 1;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  v58[0] = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v58[8] = _Q1;
  v58[24] = 0;
  long long v59 = _Q1;
  v60[0] = 0;
  *(_OWORD *)&v60[8] = _Q1;
  v60[24] = 0;
  long long v61 = 0u;
  memset(v62, 0, sizeof(v62));
  uint64_t v63 = 0;
  int v64 = 1065353216;
  long long v65 = 0x100000005uLL;
  long long v9 = *(_OWORD *)&v60[16];
  *(_OWORD *)(a1 + 2040) = *(_OWORD *)v60;
  *(_OWORD *)(a1 + 2056) = v9;
  *(_OWORD *)(a1 + 2072) = v61;
  *(void *)(a1 + 2088) = *(void *)&v62[0];
  long long v10 = *(_OWORD *)v58;
  *(_OWORD *)(a1 + 1976) = v57;
  *(_OWORD *)(a1 + 1992) = v10;
  long long v11 = v59;
  *(_OWORD *)(a1 + 2008) = *(_OWORD *)&v58[16];
  *(_OWORD *)(a1 + 2024) = v11;
  long long v12 = *(_OWORD *)&v54[32];
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)&v54[16];
  *(_OWORD *)(a1 + 1928) = v12;
  long long v13 = v56;
  *(_OWORD *)(a1 + 1944) = v55;
  *(_OWORD *)(a1 + 1960) = v13;
  long long v14 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 1848) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 1864) = v14;
  long long v15 = *(_OWORD *)v54;
  *(_OWORD *)(a1 + 1880) = v53;
  *(_OWORD *)(a1 + 1896) = v15;
  sub_10084E2F4(a1 + 2096, (uint64_t *)v62 + 1);
  *(_OWORD *)(a1 + 2136) = v65;
  sub_10071874C((uint64_t)v62 + 8);
  *(unsigned char *)(a1 + 1705) = 0;
  *(void *)(a1 + 1712) = 0xC08F400000000000;
  *(void *)(a1 + 1728) = 0;
  *(double *)(a1 + 88) = sub_10016C458();
  ++*(_DWORD *)(a1 + 1240);
  if (*(unsigned char *)(a2 + 5) && (sub_100103240(), sub_10073C674()))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v16 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#gpsd,issue OTA reset before start", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v47) = 0;
      uint64_t v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v46);
      if (v46 != (char *)buf) {
        free(v46);
      }
    }
    sub_10194B17C(a1, 1);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v17 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#gpsd,issue OTA reset not issued before start", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v47) = 0;
      uint64_t v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
  }
  if (sub_100D33D08(a1 + 1684))
  {
    sub_1019275C0(a1);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v18 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      int v19 = *(_DWORD *)(a1 + 1284);
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#gpsd,on start,MA blocked constellation,0x%{public}x", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v42 = *(_DWORD *)(a1 + 1284);
      int v47 = 67240192;
      *(_DWORD *)int v48 = v42;
      int v43 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v43);
      if (v43 != (char *)buf) {
        free(v43);
      }
    }
    sub_10194B3D0(a1, 0, *(_DWORD *)(a1 + 1284));
  }
  else if (!*(unsigned char *)(a1 + 1665))
  {
    sub_100103240();
    if (sub_100119998() && sub_100D33A54(a1 + 1684)) {
      sub_10194B694(a1);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 1;
  sub_100103240();
  if (sub_100119A30())
  {
    int v20 = *(unsigned __int8 *)(a2 + 4);
    BOOL v21 = sub_100740348();
    _ZF = v20 == 0;
    int v23 = v20 != 0;
    if (!v21)
    {
      int v24 = !_ZF;
      int v23 = v24 & sub_100D33A54(a1 + 1684);
    }
    sub_1000C7F88(buf);
    LOBYTE(v47) = 0;
    if (sub_1000D2988(*(uint64_t *)buf, "b13Enable", (BOOL *)&v47)) {
      int v23 = (_BYTE)v47 != 0;
    }
    if (*(void *)&buf[8]) {
      sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v25 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = *(unsigned __int8 *)(a2 + 4);
      *(_DWORD *)uint64_t buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v23;
      *(_WORD *)&uint8_t buf[8] = 1026;
      *(_DWORD *)&buf[10] = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#gpsd,b13Enable,%{public}d,context.fB13,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v44 = *(unsigned __int8 *)(a2 + 4);
      int v47 = 67240448;
      *(_DWORD *)int v48 = v23;
      *(_WORD *)&v48[4] = 1026;
      *(_DWORD *)&v48[6] = v44;
      uint64_t v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
    *(_DWORD *)(a1 + 2972) |= 0x8000000u;
    uint64_t v27 = *(void *)(a1 + 2792);
    if (!v27) {
      operator new();
    }
    *(_DWORD *)(v27 + 24) |= 1u;
    *(unsigned char *)(v27 + 16) = v23;
    *(_DWORD *)(a1 + 2972) |= 0x8000000u;
    *(_DWORD *)(v27 + 24) |= 2u;
    *(unsigned char *)(v27 + 17) = 0;
  }
  else if (*(unsigned char *)(a1 + 1312))
  {
    sub_100103240();
    if (sub_10073C6AC())
    {
      *(_DWORD *)(a1 + 2972) |= 0x8000000u;
      uint64_t v28 = *(void *)(a1 + 2792);
      if (!v28) {
        operator new();
      }
      if (!*(unsigned char *)(a1 + 1312)) {
        sub_10020D700();
      }
      uint64_t v29 = *(void *)(a1 + 1304);
      *(_DWORD *)(v28 + 24) |= 8u;
      *(void *)(v28 + 8) = v29;
    }
  }
  double v30 = *(double *)(a1 + 2568);
  BOOL v31 = (v30 < 0.0 || v30 > 601200.0) && *(unsigned char *)(a1 + 1289) != 0;
  *(_DWORD *)(a1 + 2972) |= 0x8000000u;
  uint64_t v32 = *(void *)(a1 + 2792);
  if (!v32) {
    operator new();
  }
  *(_DWORD *)(v32 + 24) |= 4u;
  *(unsigned char *)(v32 + 18) = v31;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v33 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    uint64_t v34 = *(void *)(a1 + 2568);
    int v35 = *(unsigned __int8 *)(a1 + 1289);
    *(_DWORD *)uint64_t buf = 134349569;
    *(void *)&uint8_t buf[4] = v34;
    *(_WORD *)&unsigned char buf[12] = 1025;
    *(_DWORD *)&unsigned char buf[14] = v35;
    *(_WORD *)&unsigned char buf[18] = 1025;
    *(_DWORD *)&buf[20] = v31;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "#gpsd,last known EE age,%{public}.1f,in region,%{private}d,prioritization,%{private}d", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v38 = *(void *)(a1 + 2568);
    int v39 = *(unsigned __int8 *)(a1 + 1289);
    int v47 = 134349569;
    *(void *)int v48 = v38;
    *(_WORD *)&v48[8] = 1025;
    int v49 = v39;
    __int16 v50 = 1025;
    BOOL v51 = v31;
    int v40 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v40);
    if (v40 != (char *)buf) {
      free(v40);
    }
  }
  sub_101940CD8(a1 + 2176, 2);
  sub_10194B884(a1);
  *(_DWORD *)(a1 + 2340) = 0;
  int v36 = *(unsigned char **)(a1 + 1672);
  if (v36) {
    sub_10194BA90(v36);
  }
}

void sub_10194AF78()
{
}

id sub_10194AFC0(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,registerKeepAlive", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::registerKeepAlive()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1784), "vendor"), "proxyForService:", @"CLDaemonStatus"), "syncgetRegisterPowerKeepAlive:client:dbgMessage:", 1, a1, @"GNSS: Delaying Sleep");
}

uint64_t sub_10194B17C(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 134349056;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,deleteGnssData,deleteFlag,%{public}llu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::deleteGnssData(uint64_t)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  int v5 = *(_DWORD *)(a1 + 2972);
  *(_DWORD *)(a1 + 2596) = 5;
  *(_DWORD *)(a1 + 2972) = v5 | 0x40004;
  uint64_t v6 = *(void *)(a1 + 2720);
  if (!v6) {
    operator new();
  }
  *(_DWORD *)(v6 + 20) |= 1u;
  *(void *)(v6 + 8) = a2;
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10194B3A4()
{
}

uint64_t sub_10194B3D0(uint64_t a1, int a2, int a3)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v6 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109376;
    int v11 = a2;
    __int16 v12 = 1024;
    int v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gpsd,setGnssConstellations,enableflags,0x%x,disableflags,0x%x", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setGnssConstellations(uint32_t, uint32_t)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  sub_100FCCCA0((uint64_t)buf);
  if ((sub_100FCD768() & 1) == 0) {
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  }
  int v14 = 25;
  v16 |= 0x400004u;
  uint64_t v7 = v15;
  if (!v15) {
    operator new();
  }
  *(_DWORD *)(v15 + 20) |= 3u;
  *(_DWORD *)(v7 + 8) = a2;
  *(_DWORD *)(v7 + 12) = a3;
  sub_100FD6EA0(a1 + 2576, (uint64_t)buf);
  sub_101940CD8(a1 + 2176, 2);
  return sub_100FCF6CC(buf);
}

void sub_10194B654()
{
}

uint64_t sub_10194B694(uint64_t a1)
{
  v7[0] = 0;
  uint64_t v2 = *(void *)(a1 + 3192);
  if (v2)
  {
    sub_10197CB60(v2, v7);
    int v3 = v7[0];
  }
  else
  {
    int v3 = 0;
  }
  v7[0] = v3 | *(_DWORD *)(a1 + 1284);
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v9 = v7[0];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#nilr,#gpsd,dis,denylistFlags,0x%{public}x", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    v7[1] = 67240192;
    _OWORD v7[2] = v7[0];
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setGnssConstellationsForEmergency()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_10194B3D0(a1, 0, v7[0]);
}

void sub_10194B884(uint64_t a1)
{
  if (*(char *)(a1 + 1847) < 0)
  {
    sub_1000DC48C(&__dst, *(void **)(a1 + 1824), *(void *)(a1 + 1832));
  }
  else
  {
    long long __dst = *(_OWORD *)(a1 + 1824);
    uint64_t v9 = *(void *)(a1 + 1840);
  }
  (*(void (**)(uint64_t, long long *))(*(void *)a1 + 176))(a1, &__dst);
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__dst);
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 64))(&v5, a1);
  if (*(char *)(v5 + 47) < 0)
  {
    sub_1000DC48C(__p, *(void **)(v5 + 24), *(void *)(v5 + 32));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 24);
    uint64_t v7 = *(void *)(v5 + 40);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 72))(a1, __p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v2 = v5;
  uint64_t v5 = 0;
  if (v2) {
    sub_100852AF8((uint64_t)&v5, v2);
  }
  if (*(char *)(a1 + 1823) < 0)
  {
    sub_1000DC48C(v3, *(void **)(a1 + 1800), *(void *)(a1 + 1808));
  }
  else
  {
    *(_OWORD *)int v3 = *(_OWORD *)(a1 + 1800);
    uint64_t v4 = *(void *)(a1 + 1816);
  }
  (*(void (**)(uint64_t, void **))(*(void *)a1 + 160))(a1, v3);
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_10194BA2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v22 = a15;
  a15 = 0;
  if (v22) {
    sub_100852AF8((uint64_t)&a15, v22);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194BA90(unsigned char *a1)
{
  if (*(unsigned char *)(*(void *)a1 + 1680))
  {
    if (a1[16]) {
      int v2 = 80;
    }
    else {
      int v2 = 0;
    }
    sub_100FCCCA0((uint64_t)v13);
    if ((sub_100FCD768() & 1) == 0) {
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    }
    void v13[5] = 31;
    v15 |= 0x20000004u;
    uint64_t v3 = v14;
    if (!v14) {
      operator new();
    }
    unint64_t v4 = sub_101877458();
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v5 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      unint64_t v17 = v4;
      __int16 v18 = 1026;
      int v19 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#cts,thermalRiskScale,time,%{public}llu,scale,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::sendThermalRiskScale()", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    int v6 = *(_DWORD *)(v3 + 24);
    *(void *)(v3 + 8) = v4;
    *(_DWORD *)(v3 + 24) = v6 | 3;
    *(_DWORD *)(v3 + 16) = v2;
    uint64_t v7 = *(void *)a1;
    sub_100FD6EA0(v7 + 2576, (uint64_t)v13);
    sub_101940CD8(v7 + 2176, 2);
    sub_100FCF6CC(v13);
  }
  else
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v8 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = a1[16];
      *(_DWORD *)uint64_t buf = 67240192;
      LODWORD(v17) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#cts,thermalRiskScale,%{public}d,ignored,notRunning", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v11 = a1[16];
      v13[0] = 67240192;
      v13[1] = v11;
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::ThermalRiskController::sendThermalRiskScale()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

void sub_10194BE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_100FCF6CC(va);
  _Unwind_Resume(a1);
}

id sub_10194BED8(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,deregisterKeepAlive", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::deregisterKeepAlive()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1784), "vendor"), "proxyForService:", @"CLDaemonStatus"), "syncgetRegisterPowerKeepAlive:client:dbgMessage:", 0, a1, @"GNSS: Allowing Sleep");
}

uint64_t sub_10194C094(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,setEmergencyConfig", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setEmergencyConfig(const gnss::Emergency::Config &)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  *(unsigned char *)(a1 + 2344) = *(unsigned char *)a2;
  std::string::operator=((std::string *)(a1 + 2352), (const std::string *)(a2 + 8));
  *(unsigned char *)(a1 + 2376) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 2384) = *(_WORD *)(a2 + 40);
  std::string::operator=((std::string *)(a1 + 2392), (const std::string *)(a2 + 48));
  *(_DWORD *)(a1 + 2416) = *(_DWORD *)(a2 + 72);
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  int v5 = *(_DWORD *)(a1 + 2972);
  *(_DWORD *)(a1 + 2596) = 53;
  *(_DWORD *)(a1 + 2972) = v5 | 0x80000004;
  uint64_t v6 = *(void *)(a1 + 2824);
  if (!v6) {
    operator new();
  }
  sub_1017DFE44((std::string *)a2, v6);
  return sub_101940CD8(a1 + 2176, 2);
}

void sub_10194C2E0()
{
}

uint64_t sub_10194C30C(uint64_t result)
{
  if (*(unsigned char *)(result + 1706))
  {
    uint64_t v1 = (unsigned char *)result;
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    int v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,preStopConfig,stopping airborne", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::preStopConfig()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    uint64_t result = (*(uint64_t (**)(unsigned char *, void))(*(void *)v1 + 272))(v1, 0);
    v1[1706] = 1;
  }
  return result;
}

uint64_t sub_10194C4E4(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gpsd,stop initiated", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::stop()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_10194C30C(a1);
  sub_100FCF7D8(a1 + 2576);
  if ((sub_100FCD768() & 1) == 0) {
    sub_101A9BF7C();
  }
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 2;
  uint64_t result = sub_101940CD8(a1 + 2176, 2);
  *(unsigned char *)(a1 + 1705) = 0;
  *(void *)(a1 + 1712) = 0xC08F400000000000;
  *(unsigned char *)(a1 + 1680) = 0;
  return result;
}

void sub_10194C6CC()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "#gpsd,engage", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::engage()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_10194C854()
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v0 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "#gpsd,disengage", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v1 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::disengage()", "%s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_10194C9DC(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,shutdown", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    unint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::shutdown()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
}

uint64_t sub_10194CB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(unsigned char *)(a3 + 5) != 0) & ~sub_100D33CD4(a1 + 1684);
}

void sub_10194CBD0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(a1 + 1720) || *(unsigned char *)(a1 + 1721))
  {
    sub_10194CCEC(a1, &v5);
    unint64_t v4 = std::string::insert(&v5, 0, "https://iphone-ld.apple.com/xof/");
  }
  else if (sub_10073C774())
  {
    sub_10194CCEC(a1, &v5);
    unint64_t v4 = std::string::insert(&v5, 0, "https://iphone-ld.apple.com/lto/7day/v7/latest/");
  }
  else
  {
    sub_10194CCEC(a1, &v5);
    unint64_t v4 = std::string::insert(&v5, 0, "https://iphone-ld.apple.com/lto/7day/v5/latest/");
  }
  *(_OWORD *)a2 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = *((void *)&v4->__r_.__value_.__l + 2);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_10194CCC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10194CCEC@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*(unsigned char *)(a1 + 1720))
  {
    if (sub_100740ABC()) {
      unint64_t v4 = "GPS_GLO_QZS_GAL_SBA_BDS.xof";
    }
    else {
      unint64_t v4 = "GPS_GLO_QZS_GAL_SBA.xof";
    }
  }
  else if (*(unsigned char *)(a1 + 1721))
  {
    unint64_t v4 = "gnss3.xof";
  }
  else
  {
    unint64_t v4 = "lto2.dat";
  }
  std::string::assign(a2, v4);
  uint64_t result = (std::string *)sub_10194CDB4(a1);
  if (result)
  {
    if (byte_1024891D7 >= 0) {
      uint64_t v6 = (const std::string::value_type *)&qword_1024891C0;
    }
    else {
      uint64_t v6 = (const std::string::value_type *)qword_1024891C0;
    }
    if (byte_1024891D7 >= 0) {
      std::string::size_type v7 = byte_1024891D7;
    }
    else {
      std::string::size_type v7 = qword_1024891C8;
    }
    return std::string::append(a2, v6, v7);
  }
  return result;
}

void sub_10194CD98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10194CDB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1720)) {
    BOOL v1 = 1;
  }
  else {
    BOOL v1 = *(unsigned char *)(a1 + 1721) != 0;
  }
  sub_1000C7F88(&v5);
  BOOL v7 = 0;
  int v2 = sub_1000D2988(v5, "GpsAssistanceFileLZMA", &v7);
  BOOL v3 = v7;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return v3;
  }
  else {
    return v1;
  }
}

void sub_10194CE44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194CE5C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10194CCEC(a1, &v4);
  BOOL v3 = std::string::insert(&v4, 0, "sim_");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_10194CEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194CEE4(uint64_t a1@<X8>)
{
  if (sub_100119964())
  {
    if (sub_100740B14())
    {
      sub_10194CFC0(&v3);
      int v2 = std::string::insert(&v3, 0, "https://iphone-ld.apple.com/rto/v5/latest/");
    }
    else
    {
      sub_10194CFC0(&v3);
      int v2 = std::string::insert(&v3, 0, "https://iphone-ld.apple.com/rto/v4/latest/");
    }
  }
  else
  {
    sub_10194CFC0(&v3);
    int v2 = std::string::insert(&v3, 0, "https://iphone-ld.apple.com/rto/v3/latest/");
  }
  *(_OWORD *)a1 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  *(void *)(a1 + 16) = *((void *)&v2->__r_.__value_.__l + 2);
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
}

void sub_10194CF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194CFC0(std::string *a1@<X8>)
{
  sub_100134750(a1, "rto.dat");
  if (sub_100119964()) {
    int v2 = sub_10016CCBC();
  }
  else {
    int v2 = 0;
  }
  sub_1000C7F88(&v5);
  BOOL v7 = 0;
  if (sub_1000D2988(v5, "GpsAssistanceRteFileLZMA", &v7)) {
    int v2 = v7;
  }
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2)
  {
    if (byte_1024891D7 >= 0) {
      std::string v3 = (const std::string::value_type *)&qword_1024891C0;
    }
    else {
      std::string v3 = (const std::string::value_type *)qword_1024891C0;
    }
    if (byte_1024891D7 >= 0) {
      std::string::size_type v4 = byte_1024891D7;
    }
    else {
      std::string::size_type v4 = qword_1024891C8;
    }
    std::string::append(a1, v3, v4);
  }
}

void sub_10194D080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10194D0B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 1720))
  {
    std::string v3 = "https://iphone-ld.apple.com/xof/current.rti";
  }
  else if (*(unsigned char *)(a1 + 1721))
  {
    std::string v3 = "https://iphone-ld.apple.com/xof/gnss3.rti";
  }
  else if (sub_100740B14())
  {
    std::string v3 = "https://iphone-ld.apple.com/lto/rtistatus6.dat";
  }
  else
  {
    std::string v3 = "https://iphone-ld.apple.com/lto/a/rtistatus5.dat";
  }

  return sub_100134750(a2, v3);
}

void sub_10194D12C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1664))
  {
    sub_1000C7F88(&v24);
    uint64_t v2 = v24.__r_.__value_.__r.__words[0];
    sub_101844E1C((uint64_t)&v21);
    sub_10194CE5C(a1, &v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v3 = &v20;
    }
    else {
      std::string v3 = (std::string *)v20.__r_.__value_.__r.__words[0];
    }
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v20.__r_.__value_.__l.__size_;
    }
    uint64_t v5 = std::string::append(&v21, (const std::string::value_type *)v3, size);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_1005B66DC(v2, "GpsAssistanceFileDstUrl", &__p, (uint64_t)&v23);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (v24.__r_.__value_.__l.__size_) {
      sub_1000DB0A0((std::__shared_weak_count *)v24.__r_.__value_.__l.__size_);
    }
    memset(&v21, 0, sizeof(v21));
    operator new();
  }
  memset(&v21, 0, sizeof(v21));
  sub_1000C7F88(&v23);
  if (sub_1004D1284((uint64_t)v23.__r_.__value_.__l.__data_, "GpsAssistanceFileSrcUrl", &v21))
  {
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v7 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v7 = v21.__r_.__value_.__l.__size_;
    }
    if (v23.__r_.__value_.__l.__size_) {
      sub_1000DB0A0((std::__shared_weak_count *)v23.__r_.__value_.__l.__size_);
    }
    if (v7)
    {
LABEL_30:
      memset(&v20, 0, sizeof(v20));
      sub_1000C7F88(&v23);
      if (sub_1004D1284((uint64_t)v23.__r_.__value_.__l.__data_, "GpsAssistanceFileDstUrl", &v20))
      {
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v8 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v8 = v20.__r_.__value_.__l.__size_;
        }
        if (v23.__r_.__value_.__l.__size_) {
          sub_1000DB0A0((std::__shared_weak_count *)v23.__r_.__value_.__l.__size_);
        }
        if (v8)
        {
LABEL_52:
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          uint64_t v14 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            int v15 = &v21;
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
            }
            int v16 = &v20;
            if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v16 = (std::string *)v20.__r_.__value_.__r.__words[0];
            }
            LODWORD(v23.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v23.__r_.__value_.__r.__words + 4) = (std::string::size_type)v15;
            WORD2(v23.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v23.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v16;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gpsd,#ee,AssistanceFileSourceUrl,%s,AssistanceFileDestUrl,%s", (uint8_t *)&v23, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&v23, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            unint64_t v17 = &v21;
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              unint64_t v17 = (std::string *)v21.__r_.__value_.__r.__words[0];
            }
            __int16 v18 = &v20;
            if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              __int16 v18 = (std::string *)v20.__r_.__value_.__r.__words[0];
            }
            LODWORD(v24.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
            WORD2(v24.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v24.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
            int v19 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::unique_ptr<CLGnssAssistanceFile> CLGnssDaemonDevice::getAssistanceFileInfo() const", "%s\n", (const char *)v19);
            if (v19 != &v23) {
              free(v19);
            }
          }
          operator new();
        }
      }
      else if (v23.__r_.__value_.__l.__size_)
      {
        sub_1000DB0A0((std::__shared_weak_count *)v23.__r_.__value_.__l.__size_);
      }
      sub_101844E1C((uint64_t)&v23);
      sub_10194CCEC(a1, &v24);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v9 = &v24;
      }
      else {
        int v9 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v10 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v10 = v24.__r_.__value_.__l.__size_;
      }
      uint64_t v11 = std::string::append(&v23, (const std::string::value_type *)v9, v10);
      std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
      v25[0] = v11->__r_.__value_.__l.__size_;
      *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
      char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = v12;
      v20.__r_.__value_.__l.__size_ = v25[0];
      *(std::string::size_type *)((char *)&v20.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v25 + 7);
      *((unsigned char *)&v20.__r_.__value_.__s + 23) = v13;
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      goto LABEL_52;
    }
  }
  else if (v23.__r_.__value_.__l.__size_)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v23.__r_.__value_.__l.__size_);
  }
  sub_10194CBD0(a1, (uint64_t)&v23);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  std::string v21 = v23;
  goto LABEL_30;
}

void sub_10194D624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194D788(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1680) || sub_100D33CD4(a1 + 1684) || *(unsigned char *)(a1 + 1665))
  {
    memset(&__str, 0, sizeof(__str));
    if (!sub_101878A14((uint64_t *)a2, &__str))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      std::string::size_type v8 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = a2;
        if (*(char *)(a2 + 23) < 0) {
          uint64_t v9 = *(void *)a2;
        }
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gpsd,#ee,injectAssistanceFile,Could not read,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        if (*(char *)(a2 + 23) < 0) {
          a2 = *(void *)a2;
        }
        int v45 = 136446210;
        std::string::size_type v46 = a2;
        std::string::size_type v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v10);
        if (v10 != buf) {
          free(v10);
        }
      }
      goto LABEL_89;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >> 4 > 0x270)
    {
      if (__str.__r_.__value_.__l.__size_ <= 0xC3500) {
        goto LABEL_38;
      }
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      std::string::size_type v4 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        *(_DWORD *)uint64_t buf = 134349312;
        *(void *)&uint8_t buf[4] = size;
        __int16 v52 = 2050;
        uint64_t v53 = 800000;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "EE file is too large,%{public}zu,%{public}zu", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        std::string::size_type v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v40 = __str.__r_.__value_.__l.__size_;
        }
        int v45 = 134349312;
        std::string::size_type v46 = v40;
        __int16 v47 = 2050;
        uint64_t v48 = 800000;
        uint64_t v41 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v41);
        if (v41 != buf) {
          free(v41);
        }
      }
      id v6 = [objc_msgSend(*(id *)(a1 + 1784), "silo") queue];
      std::string::size_type v7 = "too_large";
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v11 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
      {
        std::string::size_type v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v12 = __str.__r_.__value_.__l.__size_;
        }
        *(_DWORD *)uint64_t buf = 134349312;
        *(void *)&uint8_t buf[4] = v12;
        __int16 v52 = 2050;
        uint64_t v53 = 10000;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "EE file is too small,%{public}zu,%{public}zu", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        std::string::size_type v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v36 = __str.__r_.__value_.__l.__size_;
        }
        int v45 = 134349312;
        std::string::size_type v46 = v36;
        __int16 v47 = 2050;
        uint64_t v48 = 10000;
        __int16 v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v37);
        if (v37 != buf) {
          free(v37);
        }
      }
      id v6 = [[objc_msgSend(*(id *)(a1 + 1784), "silo") queue];
      std::string::size_type v7 = "too_small";
    }
    sub_10187A1C8((uint64_t)v6, (uint64_t)"ee_download", (uint64_t)v7, 0);
LABEL_38:
    double v43 = -1.0;
    char v13 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0) {
      char v13 = *(const char **)a2;
    }
    if (!sub_1004BE590(v13, &v43))
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v14 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v15 = a2;
        if (*(char *)(a2 + 23) < 0) {
          uint64_t v15 = *(void *)a2;
        }
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#gpsd,#ee,could not get file creation time,%{public}s", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        uint64_t v38 = a2;
        if (*(char *)(a2 + 23) < 0) {
          uint64_t v38 = *(void *)a2;
        }
        int v45 = 136446210;
        std::string::size_type v46 = v38;
        int v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v39);
        if (v39 != buf) {
          free(v39);
        }
      }
    }
    uint64_t v42 = 0;
    double v16 = -1.0;
    if (v43 >= 0.0) {
      double v16 = CFAbsoluteTimeGetCurrent() - v43;
    }
    uint64_t v42 = *(void *)&v16;
    *(double *)(a1 + 2568) = v16;
    if (*(char *)(a2 + 23) < 0)
    {
      size_t v23 = *(void *)(a2 + 8);
      BOOL v18 = byte_1024891D7 < 0;
      if (byte_1024891D7 >= 0) {
        size_t v19 = byte_1024891D7;
      }
      else {
        size_t v19 = qword_1024891C8;
      }
      BOOL v20 = v23 > v19;
      size_t v21 = v23 - v19;
      if (!v20) {
        goto LABEL_67;
      }
      uint64_t v22 = *(void *)a2;
    }
    else
    {
      size_t v17 = *(unsigned __int8 *)(a2 + 23);
      BOOL v18 = byte_1024891D7 < 0;
      if (byte_1024891D7 >= 0) {
        size_t v19 = byte_1024891D7;
      }
      else {
        size_t v19 = qword_1024891C8;
      }
      BOOL v20 = v17 > v19;
      size_t v21 = v17 - v19;
      if (!v20)
      {
LABEL_67:
        BOOL v25 = 0;
LABEL_68:
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v26 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v27 = __str.__r_.__value_.__l.__size_;
          }
          *(_DWORD *)uint64_t buf = 134349568;
          *(void *)&uint8_t buf[4] = v27;
          __int16 v52 = 2050;
          uint64_t v53 = v42;
          __int16 v54 = 1026;
          BOOL v55 = v25;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#gpsd,#ee,injectAssistanceFile,size,%{public}zu,file_age_sec,%{public}.3f,is_lzma,%{public}d", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          std::string::size_type v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v34 = __str.__r_.__value_.__l.__size_;
          }
          int v45 = 134349568;
          std::string::size_type v46 = v34;
          __int16 v47 = 2050;
          uint64_t v48 = v42;
          __int16 v49 = 1026;
          BOOL v50 = v25;
          int v35 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v35);
          if (v35 != buf) {
            free(v35);
          }
        }
        if (*(char *)(a2 + 23) < 0) {
          a2 = *(void *)a2;
        }
        sub_100134750(buf, (char *)a2);
        sub_10188E6C0(a1 + 8, buf, 2, 2, (double *)&v42);
        if (SHIBYTE(v54) < 0) {
          operator delete(*(void **)buf);
        }
        sub_100FCF7D8(a1 + 2576);
        if ((sub_100FCD768() & 1) == 0) {
          __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
        }
        int v28 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)(a1 + 2596) = 10;
        *(_DWORD *)(a1 + 2972) = v28 | 0x8004;
        uint64_t v29 = *(void *)(a1 + 2696);
        if (!v29) {
          operator new();
        }
        *(_DWORD *)(v29 + 24) |= 1u;
        double v30 = *(std::string **)(v29 + 8);
        if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        std::string::operator=(v30, &__str);
        if (v25) {
          unsigned int v31 = 2;
        }
        else {
          unsigned int v31 = 1;
        }
        if (!sub_10016E644(v31)) {
          __assert_rtn("set_compression_type", "GpsdProtocol.pb.h", 9290, "::proto::gpsd::CompressionType_IsValid(value)");
        }
        *(_DWORD *)(v29 + 24) |= 2u;
        *(_DWORD *)(v29 + 16) = v31;
        sub_101940CD8(a1 + 2176, 2);
LABEL_89:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        return;
      }
      uint64_t v22 = a2;
    }
    if (v18) {
      std::string v24 = (uint64_t *)qword_1024891C0;
    }
    else {
      std::string v24 = &qword_1024891C0;
    }
    BOOL v25 = memcmp((const void *)(v22 + v21), v24, v19) == 0;
    goto LABEL_68;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v32 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#gpsd,#ee,ignore update outside of session", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    LOWORD(v45) = 0;
    int v33 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v33);
    if (v33 != buf) {
      free(v33);
    }
  }
}

void sub_10194E3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194E428(std::string *a1@<X0>, void *a2@<X8>)
{
  sub_1000C7F88(&v28);
  uint64_t v4 = v28.__r_.__value_.__r.__words[0];
  BOOL v5 = sub_10073C774();
  LOBYTE(v25[0]) = 0;
  if (sub_1000D2988(v4, "ForceEnableGpsAssistanceRte", (BOOL *)v25)) {
    BOOL v5 = LOBYTE(v25[0]) != 0;
  }
  if (v28.__r_.__value_.__l.__size_) {
    sub_1000DB0A0((std::__shared_weak_count *)v28.__r_.__value_.__l.__size_);
  }
  if (v5)
  {
    sub_1000C7F88(&v28);
    uint64_t v6 = v28.__r_.__value_.__r.__words[0];
    sub_10194CEE4((uint64_t)&__p);
    sub_1005B66DC(v6, "GpsAssistanceRteSrcUrl", &__p, (uint64_t)v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v28.__r_.__value_.__l.__size_) {
      sub_1000DB0A0((std::__shared_weak_count *)v28.__r_.__value_.__l.__size_);
    }
    sub_1000C7F88(&v21);
    uint64_t v7 = v21;
    sub_101844E1C((uint64_t)&v28);
    sub_10194CFC0(&v27);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v8 = &v27;
    }
    else {
      std::string::size_type v8 = (std::string *)v27.__r_.__value_.__r.__words[0];
    }
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v27.__r_.__value_.__l.__size_;
    }
    std::string::size_type v10 = std::string::append(&v28, (const std::string::value_type *)v8, size);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    sub_1005B66DC(v7, "GpsAssistanceRteDstUrl", &v20, (uint64_t)&__str);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (v22) {
      sub_1000DB0A0(v22);
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    std::string::size_type v12 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      char v13 = v25;
      if (v26 < 0) {
        char v13 = (void **)v25[0];
      }
      p_str = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      LODWORD(v28.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v28.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      WORD2(v28.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v28.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_str;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gpsd,#rte,GpsAssistanceRteSrcUrl,%s,GpsAssistanceRteDstUrl,%s", (uint8_t *)&v28, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&v28, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      size_t v17 = v25;
      if (v26 < 0) {
        size_t v17 = (void **)v25[0];
      }
      BOOL v18 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        BOOL v18 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      LODWORD(v27.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
      WORD2(v27.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v18;
      size_t v19 = (std::string *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::unique_ptr<CLGnssAssistanceFile> CLGnssDaemonDevice::getRealTimeEphemerisFileInfo() const", "%s\n", (const char *)v19);
      if (v19 != &v28) {
        free(v19);
      }
    }
    std::string::operator=(a1 + 75, &__str);
    operator new();
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v15 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(v28.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#gpsd,#rte,disabled", (uint8_t *)&v28, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v28, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    LOWORD(v25[0]) = 0;
    double v16 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::unique_ptr<CLGnssAssistanceFile> CLGnssDaemonDevice::getRealTimeEphemerisFileInfo() const", "%s\n", (const char *)v16);
    if (v16 != &v28) {
      free(v16);
    }
  }
  *a2 = 0;
}

void sub_10194E928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194EA14(std::string *a1)
{
  memset(&__p, 0, sizeof(__p));
  sub_1000C7F88(&v18);
  if (sub_1004D1284((uint64_t)v18.__r_.__value_.__l.__data_, "GpsAssistanceRtiSrcUrl", &__p))
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (v18.__r_.__value_.__l.__size_) {
      sub_1000DB0A0((std::__shared_weak_count *)v18.__r_.__value_.__l.__size_);
    }
    if (size)
    {
LABEL_14:
      memset(&__str, 0, sizeof(__str));
      sub_1000C7F88(&v18);
      if (sub_1004D1284((uint64_t)v18.__r_.__value_.__l.__data_, "GpsAssistanceRtiDstUrl", &__str))
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v3 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v3 = __str.__r_.__value_.__l.__size_;
        }
        if (v18.__r_.__value_.__l.__size_) {
          sub_1000DB0A0((std::__shared_weak_count *)v18.__r_.__value_.__l.__size_);
        }
        if (v3)
        {
LABEL_41:
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          std::string::size_type v10 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            p_p = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            LODWORD(v18.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v18.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
            WORD2(v18.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v18.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_str;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#gpsd,#ee,GpsAssistanceRtiSrcUrl,%s,GpsAssistanceRtiDstUrl,%s", (uint8_t *)&v18, 0x16u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(&v18, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            char v13 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              char v13 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            uint64_t v14 = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)size_t v19 = 136315394;
            *(void *)&v19[4] = v13;
            *(_WORD *)&v19[12] = 2080;
            *(void *)&v19[14] = v14;
            uint64_t v15 = (std::string *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual std::unique_ptr<CLGnssAssistanceFile> CLGnssDaemonDevice::getRtiFileInfo() const", "%s\n", (const char *)v15);
            if (v15 != &v18) {
              free(v15);
            }
          }
          std::string::operator=(a1 + 76, &__str);
          operator new();
        }
      }
      else if (v18.__r_.__value_.__l.__size_)
      {
        sub_1000DB0A0((std::__shared_weak_count *)v18.__r_.__value_.__l.__size_);
      }
      sub_101844E1C((uint64_t)&v18);
      if (a1[71].__r_.__value_.__s.__data_[16])
      {
        uint64_t v4 = "current.rti";
      }
      else if (a1[71].__r_.__value_.__s.__data_[17])
      {
        uint64_t v4 = "gnss3.rti";
      }
      else
      {
        uint64_t v4 = "rti.dat";
      }
      sub_100134750(v19, v4);
      if ((v20 & 0x80u) == 0) {
        BOOL v5 = v19;
      }
      else {
        BOOL v5 = *(const std::string::value_type **)v19;
      }
      if ((v20 & 0x80u) == 0) {
        std::string::size_type v6 = v20;
      }
      else {
        std::string::size_type v6 = *(void *)&v19[8];
      }
      uint64_t v7 = std::string::append(&v18, v5, v6);
      std::string::size_type v8 = v7->__r_.__value_.__r.__words[0];
      v21[0] = v7->__r_.__value_.__l.__size_;
      *(void *)((char *)v21 + 7) = *(std::string::size_type *)((char *)&v7->__r_.__value_.__r.__words[1] + 7);
      char v9 = HIBYTE(v7->__r_.__value_.__r.__words[2]);
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      __str.__r_.__value_.__r.__words[0] = v8;
      __str.__r_.__value_.__l.__size_ = v21[0];
      *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v21 + 7);
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = v9;
      if ((char)v20 < 0) {
        operator delete(*(void **)v19);
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      goto LABEL_41;
    }
  }
  else if (v18.__r_.__value_.__l.__size_)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v18.__r_.__value_.__l.__size_);
  }
  sub_10194D0B4((uint64_t)a1, &v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v18;
  goto LABEL_14;
}

void sub_10194EE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194EEFC(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 1664))
  {
    if (*(unsigned char *)(a1 + 1680) || sub_100D33CD4(a1 + 1684) || *(unsigned char *)(a1 + 1665))
    {
      memset(&__str, 0, sizeof(__str));
      if (!sub_101878A14((uint64_t *)a2, &__str))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        uint64_t v14 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = a2;
          if (*(char *)(a2 + 23) < 0) {
            uint64_t v15 = *(void *)a2;
          }
          *(_DWORD *)uint64_t buf = 136446210;
          *(void *)&uint8_t buf[4] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#gpsd,#rte,failed to read file,%{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          if (*(char *)(a2 + 23) < 0) {
            a2 = *(void *)a2;
          }
          int v35 = 136446210;
          std::string::size_type v36 = a2;
          double v16 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRealTimeEphemerisFile(std::string)", "%s\n", v16);
          if (v16 != buf) {
            free(v16);
          }
        }
        goto LABEL_70;
      }
      double v33 = -1.0;
      uint64_t v4 = (const char *)a2;
      if (*(char *)(a2 + 23) < 0) {
        uint64_t v4 = *(const char **)a2;
      }
      if (!sub_1004BE590(v4, &v33))
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        BOOL v5 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v6 = a2;
          if (*(char *)(a2 + 23) < 0) {
            uint64_t v6 = *(void *)a2;
          }
          *(_DWORD *)uint64_t buf = 136446210;
          *(void *)&uint8_t buf[4] = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsd,#rte,could not get file creation time,%{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          uint64_t v30 = a2;
          if (*(char *)(a2 + 23) < 0) {
            uint64_t v30 = *(void *)a2;
          }
          int v35 = 136446210;
          std::string::size_type v36 = v30;
          unsigned int v31 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectRealTimeEphemerisFile(std::string)", "%s\n", v31);
          if (v31 != buf) {
            free(v31);
          }
        }
      }
      double v32 = 0.0;
      double v7 = -1.0;
      if (v33 >= 0.0) {
        double v7 = CFAbsoluteTimeGetCurrent() - v33;
      }
      double v32 = v7;
      if (*(char *)(a2 + 23) < 0)
      {
        size_t v17 = *(void *)(a2 + 8);
        BOOL v9 = byte_1024891D7 < 0;
        if (byte_1024891D7 >= 0) {
          size_t v10 = byte_1024891D7;
        }
        else {
          size_t v10 = qword_1024891C8;
        }
        BOOL v11 = v17 > v10;
        size_t v12 = v17 - v10;
        if (!v11) {
          goto LABEL_48;
        }
        uint64_t v13 = *(void *)a2;
      }
      else
      {
        size_t v8 = *(unsigned __int8 *)(a2 + 23);
        BOOL v9 = byte_1024891D7 < 0;
        if (byte_1024891D7 >= 0) {
          size_t v10 = byte_1024891D7;
        }
        else {
          size_t v10 = qword_1024891C8;
        }
        BOOL v11 = v8 > v10;
        size_t v12 = v8 - v10;
        if (!v11)
        {
LABEL_48:
          BOOL v19 = 0;
LABEL_49:
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          unsigned __int8 v20 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
          {
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __str.__r_.__value_.__l.__size_;
            }
            *(_DWORD *)uint64_t buf = 134349568;
            *(void *)&uint8_t buf[4] = size;
            __int16 v42 = 2050;
            double v43 = v32;
            __int16 v44 = 1026;
            BOOL v45 = v19;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#gpsd,#rte,injectRealTimeEphemerisFile,size,%{public}zu,file_age_sec,%{public}.3f,is_lzma,%{public}d", buf, 0x1Cu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
            }
            int v35 = 134349568;
            std::string::size_type v36 = v28;
            __int16 v37 = 2050;
            double v38 = v32;
            __int16 v39 = 1026;
            BOOL v40 = v19;
            uint64_t v29 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRealTimeEphemerisFile(std::string)", "%s\n", v29);
            if (v29 != buf) {
              free(v29);
            }
          }
          if (*(char *)(a2 + 23) < 0) {
            a2 = *(void *)a2;
          }
          sub_100134750(buf, (char *)a2);
          sub_10188E6C0(a1 + 8, buf, 2, 1, &v32);
          if (SHIBYTE(v44) < 0) {
            operator delete(*(void **)buf);
          }
          sub_100FCF7D8(a1 + 2576);
          if ((sub_100FCD768() & 1) == 0) {
            __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
          }
          int v22 = *(_DWORD *)(a1 + 2972);
          *(_DWORD *)(a1 + 2596) = 10;
          *(_DWORD *)(a1 + 2972) = v22 | 0x8004;
          uint64_t v23 = *(void *)(a1 + 2696);
          if (!v23) {
            operator new();
          }
          *(_DWORD *)(v23 + 24) |= 1u;
          std::string v24 = *(std::string **)(v23 + 8);
          if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
            operator new();
          }
          std::string::operator=(v24, &__str);
          if (v19) {
            unsigned int v25 = 2;
          }
          else {
            unsigned int v25 = 1;
          }
          if (!sub_10016E644(v25)) {
            __assert_rtn("set_compression_type", "GpsdProtocol.pb.h", 9290, "::proto::gpsd::CompressionType_IsValid(value)");
          }
          *(_DWORD *)(v23 + 24) |= 2u;
          *(_DWORD *)(v23 + 16) = v25;
          sub_101940CD8(a1 + 2176, 2);
LABEL_70:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          return;
        }
        uint64_t v13 = a2;
      }
      if (v9) {
        std::string v18 = (uint64_t *)qword_1024891C0;
      }
      else {
        std::string v18 = &qword_1024891C0;
      }
      BOOL v19 = memcmp((const void *)(v13 + v12), v18, v10) == 0;
      goto LABEL_49;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    char v26 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#gpsd,#rte,ignore update outside of session", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      LOWORD(v35) = 0;
      std::string v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRealTimeEphemerisFile(std::string)", "%s\n", v27);
      if (v27 != buf) {
        free(v27);
      }
    }
  }
}

void sub_10194F79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194F818(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 1664))
  {
    if (*(unsigned char *)(a1 + 1680) || sub_100D33CD4(a1 + 1684) || *(unsigned char *)(a1 + 1665))
    {
      memset(&__str, 0, sizeof(__str));
      if (sub_101878A14((uint64_t *)a2, &__str))
      {
        sub_100FCF7D8(a1 + 2576);
        if ((sub_100FCD768() & 1) == 0) {
          __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
        }
        int v4 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)(a1 + 2596) = 11;
        *(_DWORD *)(a1 + 2972) = v4 | 0x10004;
        uint64_t v5 = *(void *)(a1 + 2704);
        if (!v5) {
          operator new();
        }
        *(_DWORD *)(v5 + 20) |= 1u;
        uint64_t v6 = *(std::string **)(v5 + 8);
        if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString) {
          operator new();
        }
        std::string::operator=(v6, &__str);
        sub_101940CD8(a1 + 2176, 2);
      }
      else
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        double v7 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = a2;
          if (*(char *)(a2 + 23) < 0) {
            uint64_t v8 = *(void *)a2;
          }
          *(_DWORD *)uint64_t buf = 136446210;
          uint64_t v16 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gpsd,Could not read RTI file,%{public}s", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          if (*(char *)(a2 + 23) < 0) {
            a2 = *(void *)a2;
          }
          int v13 = 136446210;
          uint64_t v14 = a2;
          BOOL v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRtiFile(std::string)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      BOOL v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#rti,ignore update outside of session", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        LOWORD(__str.__r_.__value_.__l.__data_) = 0;
        size_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRtiFile(std::string)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
}

void sub_10194FC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10194FC88(uint64_t a1, uint64_t a2)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  int v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    int v5 = *(unsigned __int8 *)(a2 + 816);
    BOOL v6 = sub_100D33A44(a1 + 1684);
    int v7 = *(_DWORD *)(a2 + 84);
    int v8 = *(_DWORD *)(a2 + 820);
    *(_DWORD *)uint64_t buf = 67109888;
    *(_DWORD *)long long v60 = v5;
    *(_WORD *)&v60[4] = 1024;
    *(_DWORD *)&v60[6] = v6;
    LOWORD(v61) = 1024;
    *(_DWORD *)((char *)&v61 + 2) = v7;
    HIWORD(v61) = 1024;
    *(_DWORD *)long long v62 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gpsd,injectPosition,tightlyCoupled,%d,inEmergency,%d,confidence,%d,assistanceType,%d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    sub_100D33A44(a1 + 1684);
    __int16 v54 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v54);
    if (v54 != (char *)buf) {
      free(v54);
    }
  }
  uint64_t v9 = a1 + 1684;
  if (!sub_100D33A44(a1 + 1684) && *(unsigned char *)(a1 + 1706) && *(unsigned char *)(a1 + 1707))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    size_t v10 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gpsd,dropping airborne pos asst", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 == -1) {
      goto LABEL_44;
    }
    goto LABEL_119;
  }
  if (*(_DWORD *)(a2 + 820) != 2 || sub_100740188())
  {
    BOOL v11 = *(unsigned char *)(a2 + 816) != 0;
    BOOL v12 = *(_DWORD *)(a2 + 84) > 0x41u;
    if ((v11 | !sub_100D33A44(a1 + 1684) | v12) != 1)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      unsigned __int8 v20 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v21 = sub_100D33A44(v9);
        int v22 = *(_DWORD *)(a2 + 84);
        *(_DWORD *)uint64_t buf = 67109376;
        *(_DWORD *)long long v60 = v21;
        *(_WORD *)&v60[4] = 1024;
        *(_DWORD *)&v60[6] = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#gpsd,Not feeding reference position,inCellularEmergency,%d,confidence,%d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        sub_100D33A44(v9);
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          goto LABEL_45;
        }
      }
      return;
    }
    sub_100FCF7D8(a1 + 2576);
    if ((sub_100FCD768() & 1) == 0) {
      sub_101A9BF7C();
    }
    int v13 = *(_DWORD *)(a1 + 2972);
    *(_DWORD *)(a1 + 2596) = 8;
    *(_DWORD *)(a1 + 2972) = v13 | 0xC;
    uint64_t v14 = *(void *)(a1 + 2600);
    if (!v14) {
      operator new();
    }
    unsigned int v15 = sub_1017E5C98(*(_DWORD *)(a2 + 820));
    if (!sub_100165F14(v15)) {
      sub_101A9BFA8();
    }
    int v16 = *(_DWORD *)(v14 + 36);
    *(_DWORD *)(v14 + 16) = v15;
    uint64_t v17 = 504;
    if (*(_DWORD *)(a2 + 820) == 1) {
      uint64_t v17 = 512;
    }
    ++*(void *)(a1 + v17);
    *(_DWORD *)(v14 + 36) = v16 | 3;
    uint64_t v18 = *(void *)(v14 + 8);
    if (!v18) {
      operator new();
    }
    if (*(_DWORD *)(a2 + 132) == 1)
    {
      *(_DWORD *)(v18 + 96) |= 3u;
      long long v19 = *(_OWORD *)(a2 + 4);
    }
    else
    {
      if (*(_DWORD *)(a2 + 136) != 1)
      {
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        unsigned int v25 = qword_1024193D8;
        if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#gpsd,Require WGS84 coordinates for injection", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          long long v58 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v58);
          if (v58 != (char *)buf) {
            free(v58);
          }
        }
        goto LABEL_54;
      }
      *(_DWORD *)(v18 + 96) |= 3u;
      long long v19 = *(_OWORD *)(a2 + 100);
    }
    *(_OWORD *)(v18 + 8) = v19;
LABEL_54:
    int v26 = *(_DWORD *)(v18 + 96);
    *(void *)(v18 + 24) = *(void *)(a2 + 28);
    *(double *)(v18 + 32) = *(float *)(a2 + 476);
    uint64_t v27 = *(void *)(a2 + 36);
    *(_DWORD *)(v18 + 96) = v26 | 0x1C;
    *(void *)(v18 + 40) = v27;
    float v28 = *(float *)(a2 + 200);
    if (v28 <= 0.0
      || (float v29 = *(float *)(a2 + 204), v29 <= 0.0)
      || (float v30 = *(float *)(a2 + 208), v30 < 0.0)
      || v30 > 180.0)
    {
      double v32 = sqrt(*(double *)(a2 + 20) * (*(double *)(a2 + 20) * 0.5));
      *(double *)(v18 + 48) = v32;
      *(double *)(v18 + 56) = v32;
      double v31 = 0.0;
    }
    else
    {
      *(double *)(v18 + 48) = v28 / 2.45;
      *(double *)(v18 + 56) = v29 / 2.45;
      double v31 = v30;
    }
    *(_DWORD *)(v18 + 96) = v26 | 0xFC;
    *(double *)(v18 + 64) = v31;
    unsigned int v33 = *(_DWORD *)(a2 + 800);
    if (v33)
    {
      unsigned int v34 = sub_1017E5CAC(v33);
      if (!sub_100748714(v34)) {
        sub_101A6C6E0();
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v35 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning,#gpsd,unset asst pos reliability", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        long long v57 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v57);
        if (v57 != (char *)buf) {
          free(v57);
        }
      }
      if (!sub_100748714(0xAu)) {
        sub_101A6C6E0();
      }
      unsigned int v34 = 10;
    }
    int v36 = *(_DWORD *)(v18 + 96);
    *(_DWORD *)(v18 + 76) = v34;
    int v37 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(v18 + 96) = v36 | 0x300;
    *(_DWORD *)(v18 + 72) = v37;
    BOOL v39 = *(double *)(a2 + 36) > 0.0 && *(_DWORD *)(a2 + 820) != 2;
    int v40 = *(_DWORD *)(v14 + 36) | 4;
    *(_DWORD *)(v14 + 36) = v40;
    *(unsigned char *)(v14 + 20) = v39;
    double v41 = *(double *)(a2 + 504);
    if (v41 < 1.0)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      __int16 v42 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v43 = *(void *)(a2 + 808);
        *(_DWORD *)uint64_t buf = 134349312;
        *(double *)long long v60 = v41;
        *(_WORD *)&v60[8] = 2050;
        uint64_t v61 = v43;
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#Warning,#gpsd,unset asst pos time,%{public}.3f,age,%{public}.3f", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        long long v56 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v56);
        if (v56 != (char *)buf) {
          free(v56);
        }
      }
      double v41 = sub_10016C458();
      int v40 = *(_DWORD *)(v14 + 36);
    }
    *(_DWORD *)(v14 + 36) = v40 | 8;
    *(void *)(v14 + 24) = (unint64_t)(v41 * 1000000000.0);
    if (*(unsigned char *)(a1 + 1216))
    {
      if ((*(_DWORD *)(a1 + 208) & 0x80000000) != 0)
      {
        *(_DWORD *)(a1 + 1136) = *(_DWORD *)(a2 + 800);
        *(void *)(a1 + 1144) = *(void *)(a2 + 20);
        *(_DWORD *)(a1 + 1152) = *(_DWORD *)(a2 + 820);
        *(_OWORD *)(a1 + 1200) = *(_OWORD *)(a2 + 4);
      }
      *(unsigned char *)(a1 + 1216) = 0;
    }
    if (*(_DWORD *)(a2 + 96) == 4) {
      *(unsigned char *)(a1 + 1156) = 1;
    }
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    __int16 v44 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v45 = *(void *)(v18 + 8);
      uint64_t v46 = *(void *)(v18 + 16);
      uint64_t v47 = *(void *)(v18 + 24);
      uint64_t v49 = *(void *)(v18 + 40);
      uint64_t v48 = *(void *)(v18 + 48);
      uint64_t v50 = *(void *)(a2 + 808);
      int v51 = *(_DWORD *)(a2 + 800);
      int v52 = *(_DWORD *)(a2 + 96);
      int v53 = *(_DWORD *)(a2 + 820);
      *(_DWORD *)uint64_t buf = 134220032;
      *(void *)long long v60 = v45;
      *(_WORD *)&v60[8] = 2048;
      uint64_t v61 = v46;
      *(_WORD *)long long v62 = 2048;
      *(void *)&_OWORD v62[2] = v47;
      __int16 v63 = 2048;
      uint64_t v64 = v48;
      __int16 v65 = 2048;
      uint64_t v66 = v49;
      __int16 v67 = 2048;
      uint64_t v68 = v50;
      __int16 v69 = 1024;
      int v70 = v51;
      __int16 v71 = 1024;
      int v72 = v52;
      __int16 v73 = 1024;
      int v74 = v53;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#gpsd,feeding reference location,lat,%.7lf,lon,%.7lf,alt,%.3lf,hunc,%.3lf,vunc,%.3lf,age,%f,rel,%d,locType,%d,assistType,%d", buf, 0x50u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      BOOL v55 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v55);
      if (v55 != (char *)buf) {
        free(v55);
      }
    }
    sub_101940CD8(a1 + 2176, 2);
    return;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  std::string v24 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#gpsd,dropping TEPA on this platform", buf, 2u);
  }
  if (!sub_10013D1A0(115, 2)) {
    return;
  }
  bzero(buf, 0x65CuLL);
  if (qword_1024193D0 == -1) {
    goto LABEL_44;
  }
LABEL_119:
  dispatch_once(&qword_1024193D0, &stru_1023466B8);
LABEL_44:
  uint64_t v23 = (char *)_os_log_send_and_compose_impl();
  sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectPositionAssistance(const CLGnssPositionAssistanceData &)", "%s\n", v23);
  if (v23 != (char *)buf) {
LABEL_45:
  }
    free(v23);
}

void sub_101950B3C()
{
}

void sub_101950B84(uint64_t a1, double a2, double a3, double a4)
{
  if (a2 <= 0.0 || a3 <= 0.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    BOOL v11 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 134349312;
      *(double *)std::string v24 = a2;
      *(_WORD *)&char v24[8] = 2050;
      double v25 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "#gpsd,Invalid,time,%{public}.3lf,timeUncertainty,%{public}.9lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v20 = 134349312;
      *(double *)BOOL v21 = a2;
      *(_WORD *)&v21[8] = 2050;
      double v22 = a3;
      size_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectTimeAssistance(CFAbsoluteTime, CFTimeInterval, double)", "%s\n", v10);
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v19 = 0;
    sub_1004BD8CC((int *)&v19 + 1, &v19, a2);
    uint64_t v8 = HIDWORD(v19);
    if (HIDWORD(v19) >= dword_10248D870)
    {
      unsigned int v12 = v19;
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      int v13 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)uint64_t buf = 67109632;
        *(_DWORD *)std::string v24 = HIDWORD(v19);
        *(_WORD *)&void v24[4] = 1024;
        *(_DWORD *)&v24[6] = v19;
        LOWORD(v25) = 1024;
        *(_DWORD *)((char *)&v25 + 2) = (a3 * 1000.0);
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#gpsd,feeding,timeAssistance,week,%u,towMs,%u,uncertaintyMs,%u", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v20 = 67109632;
        *(_DWORD *)BOOL v21 = HIDWORD(v19);
        *(_WORD *)&void v21[4] = 1024;
        *(_DWORD *)&v21[6] = v19;
        LOWORD(v22) = 1024;
        *(_DWORD *)((char *)&v22 + 2) = (a3 * 1000.0);
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectTimeAssistance(CFAbsoluteTime, CFTimeInterval, double)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
      sub_100FCF7D8(a1 + 2576);
      if ((sub_100FCD768() & 1) == 0) {
        sub_101A9BF7C();
      }
      int v14 = *(_DWORD *)(a1 + 2972);
      *(_DWORD *)(a1 + 2596) = 9;
      *(_DWORD *)(a1 + 2972) = v14 | 0x14;
      uint64_t v15 = *(void *)(a1 + 2608);
      if (!v15) {
        operator new();
      }
      uint64_t v16 = 604800000000000 * v8 + 1000000 * v12;
      int v17 = *(_DWORD *)(v15 + 36);
      *(void *)(v15 + 8) = v16;
      *(void *)(v15 + 16) = (unint64_t)(a3 * 1000000000.0);
      *(_DWORD *)(v15 + 36) = v17 | 7;
      *(void *)(v15 + 24) = (unint64_t)(a4 * 1000000000.0);
      sub_101940CD8(a1 + 2176, 2);
      sub_10187A1B8(a1 + 2536, v16, (unint64_t)(a4 * 1000000000.0));
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v9 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 67240192;
        *(_DWORD *)std::string v24 = HIDWORD(v19);
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#Warning,invalid,timeTravel,gpsWeek,%{public}u", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v20 = 67240192;
        *(_DWORD *)BOOL v21 = HIDWORD(v19);
        size_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectTimeAssistance(CFAbsoluteTime, CFTimeInterval, double)", "%s\n", v10);
LABEL_20:
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
}

void sub_101951138()
{
}

void sub_101951164(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1664))
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,Warning,Simulator mode,not updating leap second", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateLeapSecond(const proto::gnss::Time &)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else
  {
    float v4 = *(float *)(a2 + 16);
    *(unsigned char *)(a1 + 1704) = v4 < 250000000.0;
    if (*(unsigned char *)(a2 + 20))
    {
      if (v4 < 250000000.0)
      {
        uint64_t v5 = *(unsigned int *)(a2 + 64);
        if (sub_1004BA69C() != v5)
        {
          if (qword_1024193D0 != -1) {
            dispatch_once(&qword_1024193D0, &stru_1023466B8);
          }
          BOOL v6 = qword_1024193D8;
          if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
          {
            double v7 = (double)*(unint64_t *)(a2 + 8) * 0.000001;
            *(_DWORD *)uint64_t buf = 134218240;
            double v11 = v7;
            __int16 v12 = 1024;
            int v13 = v5;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gpsd,GPS_TIME,UpdateLeapSeconds,gpsMs,%f,leapS,%d", buf, 0x12u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1024193D0 != -1) {
              dispatch_once(&qword_1024193D0, &stru_1023466B8);
            }
            uint64_t v9 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssDaemonDevice::updateLeapSecond(const proto::gnss::Time &)", "%s\n", v9);
            if (v9 != (char *)buf) {
              free(v9);
            }
          }
          sub_1004BA750(v5);
        }
      }
    }
  }
}

void sub_1019514CC(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 1680))
  {
    unint64_t v4 = sub_101877458();
    sub_100FCCCA0((uint64_t)v30);
    if ((sub_100FCD768() & 1) == 0) {
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    }
    int v31 = 18;
    v33 |= 0x404u;
    uint64_t v5 = v32;
    if (!v32) {
      operator new();
    }
    *(_DWORD *)(v32 + 32) |= 1u;
    *(void *)(v5 + 8) = v4;
    if (!sub_1001662E0(3u)) {
      __assert_rtn("set_moving_state", "GpsdProtocol.pb.h", 10147, "::proto::gnss::MovingState_IsValid(value)");
    }
    *(_DWORD *)(v5 + 32) |= 4u;
    *(_DWORD *)(v5 + 20) = 3;
    sub_100FCCCA0((uint64_t)v26);
    if ((sub_100FCD768() & 1) == 0) {
      __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
    }
    int v27 = 19;
    v29 |= 0x804u;
    uint64_t v6 = v28;
    if (!v28) {
      operator new();
    }
    *(_DWORD *)(v28 + 24) |= 1u;
    *(void *)(v6 + 8) = v4;
    if (!sub_10023E790(3))
    {
      uint64_t v19 = "::proto::gnss::DeviceMountState_IsValid(value)";
      int v20 = 10219;
      BOOL v21 = "set_mount_state";
      goto LABEL_48;
    }
    *(_DWORD *)(v6 + 24) |= 2u;
    *(_DWORD *)(v6 + 16) = 3;
    if (a2)
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      double v7 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gpsd,enter airborne", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        LOWORD(v34) = 0;
        uint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::feedAirborneActivity(BOOL)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
      *(unsigned char *)(a1 + 1706) = 1;
      *(_DWORD *)(a1 + 2340) = 8;
      if (sub_100748714(0x4Bu))
      {
        int v8 = 75;
LABEL_31:
        *(_DWORD *)(v5 + 32) |= 8u;
        *(_DWORD *)(v5 + 24) = v8;
        unsigned int v12 = sub_101874C50(*(_DWORD *)(a1 + 2340));
        if (sub_100748708(v12))
        {
          *(_DWORD *)(v5 + 32) |= 2u;
          *(_DWORD *)(v5 + 16) = v12;
          if (v12 - 1 > 8) {
            int v13 = 0;
          }
          else {
            int v13 = dword_101E496EC[v12 - 1];
          }
          *(_DWORD *)(a1 + 344) = v13;
          int v14 = *(_DWORD *)(v5 + 20) - 1;
          if (v14 > 2) {
            int v15 = 0;
          }
          else {
            int v15 = dword_101E49710[v14];
          }
          *(_DWORD *)(a1 + 348) = v15;
          if (*(_DWORD *)(v6 + 16) == 2) {
            int v16 = 1;
          }
          else {
            int v16 = 2;
          }
          *(_DWORD *)(a1 + 352) = v16;
          uint64_t v17 = a1 + 2576;
          sub_100FD6EA0(a1 + 2576, (uint64_t)v30);
          uint64_t v18 = a1 + 2176;
          sub_101940CD8(v18, 2);
          sub_100FD6EA0(v17, (uint64_t)v26);
          sub_101940CD8(v18, 2);
          sub_100FCF6CC(v26);
          sub_100FCF6CC(v30);
          return;
        }
        uint64_t v19 = "::proto::gnss::MotionActivityContext_IsValid(value)";
        int v20 = 10124;
        BOOL v21 = "set_context";
LABEL_48:
        __assert_rtn(v21, "GpsdProtocol.pb.h", v20, v19);
      }
    }
    else
    {
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1023466B8);
      }
      size_t v10 = qword_1024193D8;
      if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *(unsigned __int8 *)(a1 + 1706);
        *(_DWORD *)uint64_t buf = 67240192;
        int v37 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#gpsd,exit airborne,current state,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024193D0 != -1) {
          dispatch_once(&qword_1024193D0, &stru_1023466B8);
        }
        int v24 = *(unsigned __int8 *)(a1 + 1706);
        int v34 = 67240192;
        int v35 = v24;
        double v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::feedAirborneActivity(BOOL)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
      *(unsigned char *)(a1 + 1706) = 0;
      *(_DWORD *)(a1 + 2340) = 0;
      if (sub_100748714(0x19u))
      {
        int v8 = 25;
        goto LABEL_31;
      }
    }
    uint64_t v19 = "::proto::gnss::Reliability_IsValid(value)";
    int v20 = 10170;
    BOOL v21 = "set_motion_reliability";
    goto LABEL_48;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1023466B8);
  }
  uint64_t v9 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,session not running,save airborne state", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1023466B8);
    }
    v30[0] = 0;
    double v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::feedAirborneActivity(BOOL)", "%s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  *(unsigned char *)(a1 + 1706) = a2;
}