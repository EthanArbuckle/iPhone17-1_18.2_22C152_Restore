uint64_t sub_100735520(uint64_t result, uint64_t *a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  float v6;

  *(double *)result = a3;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v5 = *(_DWORD *)(result + 8);
    do
    {
      if (*(unsigned char *)(v3 + 24))
      {
        ++*(_DWORD *)(result + 12);
        if (*(float *)(v3 + 20) > 0.0) {
          ++*(_DWORD *)(result + 16);
        }
        if (*(float *)(v3 + 16) >= 20.0) {
          ++*(_DWORD *)(result + 20);
        }
        if (*(float *)(v3 + 8) >= 60.0) {
          ++*(_DWORD *)(result + 24);
        }
        v6 = *(float *)(v3 + 12);
        if (v6 <= 90.0)
        {
          ++*(_DWORD *)(result + 28);
        }
        else if (v6 > 180.0)
        {
          if (v6 > 270.0) {
            ++*(_DWORD *)(result + 40);
          }
          else {
            ++*(_DWORD *)(result + 36);
          }
        }
        else
        {
          ++*(_DWORD *)(result + 32);
        }
      }
      v3 += 28;
      ++v5;
    }
    while (v3 != v4);
    *(_DWORD *)(result + 8) = v5;
  }
  return result;
}

uint64_t sub_100735634(uint64_t a1)
{
  if (*(double *)a1 <= 0.0) {
    return 0;
  }
  int v1 = *(_DWORD *)(a1 + 8);
  if (!v1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 12);
  if (!v2) {
    return 0;
  }
  int v3 = *(_DWORD *)(a1 + 28);
  BOOL v4 = v3 <= 0;
  unint64_t v5 = v3 > 0;
  uint64_t v6 = 1;
  if (!v4) {
    uint64_t v6 = 2;
  }
  if (*(int *)(a1 + 32) > 0) {
    unint64_t v5 = v6;
  }
  if (*(int *)(a1 + 36) > 0) {
    ++v5;
  }
  if (*(int *)(a1 + 40) > 0) {
    ++v5;
  }
  if (v5 >= 3
    && ((double)v2 / (double)v1 * 100.0 >= 50.0
      ? (BOOL v7 = (double)*(int *)(a1 + 20) / (double)v2 * 100.0 < 40.0)
      : (BOOL v7 = 1),
        !v7 || *(int *)(a1 + 24) > 3))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1007356E8(uint64_t result, int a2, double a3, double a4, double a5)
{
  if (a2) {
    *(double *)(result + 40) = a3;
  }
  *(double *)(result + 48) = a3;
  *(double *)(result + 56) = a4;
  *(double *)(result + 64) = a5;
  *(void *)(result + 72) = 0xBFF0000000000000;
  *(void *)(result + 80) = 0;
  *(void *)(result + 88) = 0;
  *(void *)(result + 96) = 0;
  return result;
}

void sub_100735708(uint64_t a1, double *a2, double *a3, double a4, double a5, double a6, double a7)
{
  if (sub_1000EF68C(a5, a6))
  {
    double v14 = *(double *)(a1 + 48);
    if (vabdd_f64(v14, a4) >= 0.001)
    {
      double v16 = *(double *)(a1 + 40);
      if (v16 < 0.0)
      {
        *(double *)(a1 + 40) = a4;
        double v16 = a4;
      }
      if (a7 < 8.0 && !*(_DWORD *)(a1 + 92) && vabdd_f64(a4, v16) < 30.0)
      {
        *(double *)(a1 + 48) = a4;
        *(double *)(a1 + 56) = a5;
        *(double *)(a1 + 64) = a6;
        *(void *)(a1 + 72) = 0xBFF0000000000000;
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        return;
      }
      double v17 = vabdd_f64(a4, v14);
      if (v14 >= 0.0 && v17 <= 5.0)
      {
        ++*(_DWORD *)(a1 + 88);
        *(double *)(a1 + 48) = a4;
        double v20 = sub_1000F1648((double *)a1, *(double *)(a1 + 56), *(double *)(a1 + 64), a5, a6, 0.0);
        if (v20 > 5.0)
        {
          double v21 = sub_1011722DC((double *)a1, *(double *)(a1 + 56), *(double *)(a1 + 64), a5, a6);
          if (v21 >= 0.0)
          {
            *(double *)(a1 + 64) = a6;
            *(double *)(a1 + 72) = v21;
            *(double *)(a1 + 56) = a5;
          }
        }
        unsigned int v22 = *(_DWORD *)(a1 + 92);
        HIDWORD(v23) = 1079574528;
        LODWORD(v23) = *(_DWORD *)(a1 + 88);
        double v24 = *a2;
        double v40 = (double)v22 * 100.0 / (double)v23;
        double v41 = *a3;
        double v25 = *(double *)(a1 + 72);
        double v26 = -1.0;
        if (v25 >= 0.0)
        {
          double v36 = fmod(v24 - v25, 360.0);
          if (v36 < 0.0) {
            double v36 = v36 + 360.0;
          }
          if (v36 > 180.0) {
            double v36 = v36 + -360.0;
          }
          double v26 = fabs(v36);
          if (v24 < 0.0 || v26 > 45.0)
          {
            if (a7 > 5.0 || v24 < 0.0 || *(_DWORD *)(a1 + 84) >= 4u && v40 > 25.0)
            {
              if (a7 > 5.0) {
                ++*(_DWORD *)(a1 + 80);
              }
              if (v24 >= 0.0)
              {
                if (a7 > 20.0 || *(_DWORD *)(a1 + 80) >= 6u)
                {
                  *(_DWORD *)(a1 + 92) = v22 + 1;
                  *a2 = v25;
                  int v38 = *(_DWORD *)(a1 + 84);
                  if (a7 > 5.0) {
                    ++v38;
                  }
                  *(_DWORD *)(a1 + 84) = v38;
                }
              }
              else
              {
                *(_DWORD *)(a1 + 92) = v22 + 1;
                ++*(_DWORD *)(a1 + 100);
                *a2 = v25;
              }
            }
          }
          else if (*(_DWORD *)(a1 + 80) > 4u)
          {
            if (v26 > 22.5 && v41 < v26)
            {
              ++*(_DWORD *)(a1 + 96);
              *a3 = v26;
            }
          }
          else
          {
            *(_DWORD *)(a1 + 80) = 0;
          }
        }
        if (qword_102419360 != -1) {
          dispatch_once(&qword_102419360, &stru_1022C64B8);
        }
        v27 = qword_102419368;
        if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
        {
          double v28 = *a2;
          double v29 = *a3;
          int v30 = *(_DWORD *)(a1 + 88);
          int v31 = *(_DWORD *)(a1 + 92);
          int v32 = *(_DWORD *)(a1 + 96);
          int v33 = *(_DWORD *)(a1 + 100);
          int v35 = *(_DWORD *)(a1 + 80);
          int v34 = *(_DWORD *)(a1 + 84);
          *(_DWORD *)buf = 134353153;
          double v43 = a4;
          __int16 v44 = 2050;
          double v45 = v24;
          __int16 v46 = 2050;
          double v47 = v28;
          __int16 v48 = 2050;
          double v49 = v26;
          __int16 v50 = 2050;
          double v51 = v41;
          __int16 v52 = 2050;
          double v53 = v29;
          __int16 v54 = 2049;
          double v55 = a5;
          __int16 v56 = 2049;
          double v57 = a6;
          __int16 v58 = 2050;
          double v59 = a7;
          __int16 v60 = 2050;
          double v61 = v20;
          __int16 v62 = 1026;
          int v63 = v30;
          __int16 v64 = 1026;
          int v65 = v31;
          __int16 v66 = 1026;
          int v67 = v32;
          __int16 v68 = 1026;
          int v69 = v34;
          __int16 v70 = 2050;
          double v71 = v40;
          __int16 v72 = 1026;
          int v73 = v33;
          __int16 v74 = 1026;
          int v75 = v35;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLCourseScreener,%{public}.2lf,prevCourse,%{public}.2lf,newCourse,%{public}.2lf,diff,%{public}.2lf,prevCourseUnc,%{public}.2lf,newCourseUnc,%{public}.2lf,LL,%{private}.7lf,%{private}.7lf,speed,%{public}.2lf,distance,%{public}.2lf,screenedCount,%{public}d,changedCount,%{public}d,uncChangedCount,%{public}d,highSpeedChangedCount,%{public}d,courseChangedPercentage,%{public}.2lf,invalidCourseCorrected,%{public}d,contCourseChangeRequired,%{public}d", buf, 0x94u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419360 == -1) {
            goto LABEL_65;
          }
          goto LABEL_67;
        }
      }
      else
      {
        *(double *)(a1 + 40) = a4;
        *(double *)(a1 + 48) = a4;
        *(double *)(a1 + 56) = a5;
        *(double *)(a1 + 64) = a6;
        *(void *)(a1 + 72) = 0xBFF0000000000000;
        *(void *)(a1 + 80) = 0;
        *(void *)(a1 + 88) = 0;
        *(void *)(a1 + 96) = 0;
        if (qword_102419360 != -1) {
          dispatch_once(&qword_102419360, &stru_1022C64B8);
        }
        v19 = qword_102419368;
        if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349825;
          double v43 = a4;
          __int16 v44 = 2049;
          double v45 = a5;
          __int16 v46 = 2049;
          double v47 = a6;
          __int16 v48 = 2050;
          double v49 = a7;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLCourseScreener,%{public}.2lf,reset,unable to screen,LL,%{private}.7lf,%{private}.7lf,speed,%{public}.2lf", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419360 == -1)
          {
LABEL_65:
            v39 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLCourseScreener::screenAndCorrectCourse(const CFAbsoluteTime, const double, const double, const double, double &, double &)", "%s\n", v39);
            if (v39 != (char *)buf) {
              free(v39);
            }
            return;
          }
LABEL_67:
          dispatch_once(&qword_102419360, &stru_1022C64B8);
          goto LABEL_65;
        }
      }
    }
    else
    {
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022C64B8);
      }
      v15 = qword_102419368;
      if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        double v43 = a4;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLCourseScreener,%{public}.2lf,duplicate data ignored", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419360 == -1) {
          goto LABEL_65;
        }
        goto LABEL_67;
      }
    }
  }
}

void sub_100735ED4(id a1)
{
  qword_102419368 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

uint64_t sub_100735F04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

double sub_100735F9C()
{
  double result = sub_1004BD97C() + -259200.0;
  dword_10247D328 = result;
  return result;
}

void *sub_100735FCC(uint64_t a1, uint64_t a2)
{
  int v3 = 10;
  double result = (void *)sub_1010455A4(a1, &v3, qword_10247D330, a2);
  *double result = off_1022C64E8;
  result[38] = 0;
  result[39] = 0;
  result[37] = 0;
  return result;
}

uint64_t sub_100736028(uint64_t a1)
{
  *(void *)a1 = off_1022C64E8;
  int v3 = (void **)(a1 + 296);
  sub_100129808(&v3);
  return sub_1010456D8(a1);
}

void sub_100736084(uint64_t a1)
{
  *(void *)a1 = off_1022C64E8;
  int v2 = (void **)(a1 + 296);
  sub_100129808(&v2);
  sub_1010456D8(a1);
  operator delete();
}

uint64_t sub_1007360F4()
{
  return 3;
}

uint64_t sub_1007360FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 296);
  uint64_t v3 = *(void *)(a1 + 304);
  if (v2 != v3)
  {
    unint64_t v5 = a2[1];
    do
    {
      if (v5 >= a2[2])
      {
        unint64_t v5 = sub_100737908(a2, v2);
      }
      else
      {
        sub_1007378A0((uint64_t)a2, v2);
        v5 += 56;
      }
      a2[1] = v5;
      v2 += 56;
    }
    while (v2 != v3);
  }
  return 1;
}

uint64_t sub_100736170(void *a1, FILE *a2)
{
  if (!a2) {
    sub_101A6C4E4(qword_102419630 == -1);
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C6570);
  }
  BOOL v4 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Traversing preload manifest file", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C6570);
    }
    *(_WORD *)__ptr = 0;
    int v63 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v63);
    if (v63 != buf) {
      free(v63);
    }
  }
  memset(&v86, 0, sizeof(v86));
  do
  {
    std::string::size_type v5 = fread(__ptr, 1uLL, 0x400uLL, a2);
    std::string::append(&v86, __ptr, v5);
  }
  while (v5 && !feof(a2) && !ferror(a2));
  if (ferror(a2))
  {
    uint64_t v6 = 0;
    goto LABEL_71;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C6570);
  }
  BOOL v7 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
  {
    std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v86.__r_.__value_.__l.__size_;
    }
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = size;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Preload manifest tile std::string::size_type size = %lu", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C6570);
    }
    std::string::size_type v64 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v64 = v86.__r_.__value_.__l.__size_;
    }
    *(_DWORD *)v101 = 134217984;
    *(void *)&v101[4] = v64;
    int v65 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v65);
    if (v65 != buf) {
      free(v65);
    }
  }
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v9 = &v86;
  }
  else {
    v9 = (std::string *)v86.__r_.__value_.__r.__words[0];
  }
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v10 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v10 = v86.__r_.__value_.__l.__size_;
  }
  v11 = +[NSData dataWithBytes:v9 length:v10];
  id v13 = [objc_alloc((Class)PBDataReader) initWithData:v11];
  double v14 = [TRANSITPbRegionPreloadManifest alloc];
  unsigned __int8 v15 = [(TRANSITPbRegionPreloadManifest *)v14 readFrom:v13];
  if (!v14)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C6570);
    }
    v19 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "failed to allocate transit tile", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_69;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1)
    {
LABEL_154:
      *(_WORD *)v101 = 0;
      double v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v29);
      if (v29 == buf) {
        goto LABEL_69;
      }
LABEL_155:
      free(v29);
      goto LABEL_69;
    }
LABEL_170:
    dispatch_once(&qword_102419630, &stru_1022C6570);
    goto LABEL_154;
  }
  if ((v15 & 1) == 0)
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C6570);
    }
    double v20 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      std::string::size_type v21 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      std::string::size_type v22 = v86.__r_.__value_.__l.__size_;
      (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 16))(buf, a1);
      std::string::size_type v23 = (v21 & 0x80u) == 0 ? v21 : v22;
      double v24 = v111[1] >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)v101 = 134349314;
      *(void *)&v101[4] = v23;
      *(_WORD *)&v101[12] = 2082;
      uint64_t v102 = (uint64_t)v24;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "failed to decode transit tile protobuf, encrypted=%{public}lu tile=%{public}s", v101, 0x16u);
      if ((v111[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_69;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C6570);
    }
    std::string::size_type v25 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    std::string::size_type v26 = v86.__r_.__value_.__l.__size_;
    (*(void (**)(unsigned char *__return_ptr, void *))(*a1 + 16))(v101, a1);
    if ((v25 & 0x80u) == 0) {
      std::string::size_type v27 = v25;
    }
    else {
      std::string::size_type v27 = v26;
    }
    if ((SBYTE1(v103) & 0x80u) == 0) {
      double v28 = v101;
    }
    else {
      double v28 = *(unsigned char **)v101;
    }
    int v91 = 134349314;
    v92 = (unsigned char *)v27;
    __int16 v93 = 2082;
    v94 = v28;
    double v29 = (char *)_os_log_send_and_compose_impl();
    if (SBYTE1(v103) < 0) {
      operator delete(*(void **)v101);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v29);
    if (v29 == buf) {
      goto LABEL_69;
    }
    goto LABEL_155;
  }
  if ([(TRANSITPbRegionPreloadManifest *)v14 hasVersion]
    && [(TRANSITPbRegionPreloadManifest *)v14 hasGenerationTimeSecs]
    && [(TRANSITPbRegionPreloadManifest *)v14 marketsCount])
  {
    [(TRANSITPbRegionPreloadManifest *)v14 generationTimeSecs];
    double v17 = v16;
    if ([(TRANSITPbRegionPreloadManifest *)v14 hasExpirationAgeSecs]) {
      unsigned int v18 = [(TRANSITPbRegionPreloadManifest *)v14 expirationAgeSecs];
    }
    else {
      unsigned int v18 = 15292800;
    }
    double v32 = v17 - kCFAbsoluteTimeIntervalSince1970;
    *((_DWORD *)a1 + 46) = [(TRANSITPbRegionPreloadManifest *)v14 version];
    *(void *)((char *)a1 + 52) = 3865470568200000;
    a1[8] = -1;
    *((double *)a1 + 22) = v32;
    *((_DWORD *)a1 + 50) = v18;
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C6570);
    }
    int v33 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v34 = [(TRANSITPbRegionPreloadManifest *)v14 version];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = v34;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = 1800000;
      uint64_t v110 = 0x800000DBBA00400;
      *(double *)v111 = v32;
      *(_WORD *)&v111[8] = 2048;
      *(double *)v112 = Current - v32;
      *(_WORD *)&v112[8] = 1024;
      unsigned int v113 = v18;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "ver,%d,x,%d,y,%d,generated,%.01lf,age,%.01f,ageThresh,%d", buf, 0x2Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C6570);
      }
      unsigned int v66 = [(TRANSITPbRegionPreloadManifest *)v14 version];
      CFAbsoluteTime v67 = CFAbsoluteTimeGetCurrent();
      *(_DWORD *)v101 = 67110400;
      *(_DWORD *)&v101[4] = v66;
      *(_WORD *)&v101[8] = 1024;
      *(_DWORD *)&v101[10] = 1800000;
      uint64_t v102 = 0x800000DBBA00400;
      double v103 = v32;
      __int16 v104 = 2048;
      *(double *)&v105 = v67 - v32;
      LOWORD(v106) = 1024;
      *(_DWORD *)((char *)&v106 + 2) = v18;
      __int16 v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v68);
      if (v68 != buf) {
        free(v68);
      }
    }
    __int16 v72 = v12;
    int v73 = a1;
    __int16 v74 = a1 + 37;
    sub_10003203C(a1 + 37);
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    double v36 = [(TRANSITPbRegionPreloadManifest *)v14 markets];
    id v37 = [(NSMutableArray *)v36 countByEnumeratingWithState:&v82 objects:v107 count:16];
    if (v37)
    {
      uint64_t v38 = *(void *)v83;
      int v75 = v36;
      do
      {
        v39 = 0;
        do
        {
          if (*(void *)v83 != v38) {
            objc_enumerationMutation(v36);
          }
          double v40 = *(void **)(*((void *)&v82 + 1) + 8 * (void)v39);
          if ([v40 hasNorthWestLatitude]
            && [v40 hasNorthWestLongitude]
            && [v40 hasSouthEastLatitude]
            && [v40 hasSouthEastLongitude])
          {
            long long v81 = 0uLL;
            [v40 northWestLatitude];
            *(void *)&long long v81 = v41;
            [v40 northWestLongitude];
            *((void *)&v81 + 1) = v42;
            __n128 v80 = 0uLL;
            [v40 southEastLatitude];
            v80.n128_u64[0] = v43;
            [v40 southEastLongitude];
            v80.n128_u64[1] = v44;
            sub_100FF5DF4((uint64_t)v101, &v81, &v80);
            if (qword_102419630 != -1) {
              dispatch_once(&qword_102419630, &stru_1022C6570);
            }
            double v45 = qword_102419638;
            if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218752;
              *(void *)&uint8_t buf[4] = v81;
              *(_WORD *)&buf[12] = 2048;
              uint64_t v110 = *((void *)&v81 + 1);
              *(_WORD *)v111 = 2048;
              *(void *)&v111[2] = v80.n128_u64[0];
              *(_WORD *)v112 = 2048;
              *(void *)&v112[2] = v80.n128_u64[1];
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "Reading new market, {%.06lf,%.06lf}, {%.06lf,%.06lf}", buf, 0x2Au);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419630 != -1) {
                dispatch_once(&qword_102419630, &stru_1022C6570);
              }
              int v91 = 134218752;
              v92 = (unsigned char *)v81;
              __int16 v93 = 2048;
              v94 = (unsigned char *)*((void *)&v81 + 1);
              __int16 v95 = 2048;
              __p = (void *)v80.n128_u64[0];
              __int16 v97 = 2048;
              unint64_t v98 = v80.n128_u64[1];
              __int16 v58 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v58);
              if (v58 != buf) {
                free(v58);
              }
            }
            long long v78 = 0u;
            long long v79 = 0u;
            long long v76 = 0u;
            long long v77 = 0u;
            id v46 = [v40 tiles];
            id v47 = [v46 countByEnumeratingWithState:&v76 objects:v100 count:16];
            if (v47)
            {
              char v48 = 0;
              uint64_t v49 = *(void *)v77;
              do
              {
                __int16 v50 = 0;
                do
                {
                  if (*(void *)v77 != v49) {
                    objc_enumerationMutation(v46);
                  }
                  double v51 = *(void **)(*((void *)&v76 + 1) + 8 * (void)v50);
                  if ([v51 hasTileType]
                    && ![v51 tileType]
                    && [v51 hasTileX]
                    && [v51 hasTileY])
                  {
                    *(_DWORD *)buf = 0;
                    sub_10014F674((uint64_t)&v91, buf);
                    LODWORD(v92) = [v51 tileX];
                    HIDWORD(v92) = [v51 tileY];
                    double v52 = sub_10013DAC0((uint64_t)&v91);
                    double v53 = sub_10013DA9C((uint64_t)&v91);
                    if ([v51 hasIsAllowOverCellular]) {
                      char v54 = [v51 isAllowOverCellular];
                    }
                    else {
                      char v54 = 0;
                    }
                    if (qword_102419630 != -1) {
                      dispatch_once(&qword_102419630, &stru_1022C6570);
                    }
                    double v55 = qword_102419638;
                    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)buf = 134218240;
                      *(double *)&uint8_t buf[4] = v52;
                      *(_WORD *)&buf[12] = 2048;
                      uint64_t v110 = *(void *)&v53;
                      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "Adding new tile to market, [%.06lf,%.06lf]", buf, 0x16u);
                    }
                    if (sub_10013D1A0(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_102419630 != -1) {
                        dispatch_once(&qword_102419630, &stru_1022C6570);
                      }
                      int v87 = 134218240;
                      double v88 = v52;
                      __int16 v89 = 2048;
                      double v90 = v53;
                      __int16 v56 = (char *)_os_log_send_and_compose_impl();
                      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v56);
                      if (v56 != buf) {
                        free(v56);
                      }
                    }
                    sub_100FF5DE0((uint64_t)buf, v54, v52, v53);
                    sub_100FF5E10(v101, (long long *)buf);
                    if (v99 < 0) {
                      operator delete(__p);
                    }
                    char v48 = 1;
                  }
                  __int16 v50 = (char *)v50 + 1;
                }
                while (v47 != v50);
                id v57 = [v46 countByEnumeratingWithState:&v76 objects:v100 count:16];
                id v47 = v57;
              }
              while (v57);
              double v36 = v75;
              if (v48) {
                sub_1007375C8(v74, (uint64_t)v101);
              }
            }
            if (*(double *)&v105 != 0.0)
            {
              v106 = v105;
              operator delete(v105);
            }
          }
          v39 = (char *)v39 + 1;
        }
        while (v39 != v37);
        id v59 = [(NSMutableArray *)v36 countByEnumeratingWithState:&v82 objects:v107 count:16];
        id v37 = v59;
      }
      while (v59);
    }
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C6570);
    }
    v12 = v72;
    __int16 v60 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(unsigned char *__return_ptr, void *))(*v73 + 16))(buf, v73);
      double v61 = v111[1] >= 0 ? buf : *(unsigned char **)buf;
      uint64_t v62 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v73[38] - v73[37]) >> 3);
      *(_DWORD *)v101 = 136315394;
      *(void *)&v101[4] = v61;
      *(_WORD *)&v101[12] = 2048;
      uint64_t v102 = v62;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "loaded transit tile %s with %lu regions", v101, 0x16u);
      if ((v111[1] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C6570);
      }
      (*(void (**)(unsigned char *__return_ptr))(*v73 + 16))(v101);
      if ((SBYTE1(v103) & 0x80u) == 0) {
        int v69 = v101;
      }
      else {
        int v69 = *(unsigned char **)v101;
      }
      uint64_t v70 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v73[38] - v73[37]) >> 3);
      int v91 = 136315394;
      v92 = v69;
      __int16 v93 = 2048;
      v94 = (unsigned char *)v70;
      double v71 = (char *)_os_log_send_and_compose_impl();
      if (SBYTE1(v103) < 0) {
        operator delete(*(void **)v101);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLRegionPreloadManifestTile::traverseTileFile(FILE *, const TraverseDetails &)", "%s\n", v71);
      if (v71 != buf) {
        free(v71);
      }
      uint64_t v6 = 1;
      v12 = v72;
    }
    else
    {
      uint64_t v6 = 1;
    }
    goto LABEL_70;
  }
  if (qword_102419630 != -1) {
    dispatch_once(&qword_102419630, &stru_1022C6570);
  }
  int v30 = qword_102419638;
  if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "failed to get fields in manifest", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419630 == -1) {
      goto LABEL_154;
    }
    goto LABEL_170;
  }
LABEL_69:
  uint64_t v6 = 0;
LABEL_70:
LABEL_71:
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_1007374E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1007375C8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v4 = sub_100737908(a1, a2);
  }
  else
  {
    sub_1007378A0((uint64_t)a1, a2);
    uint64_t v4 = v3 + 56;
  }
  a1[1] = v4;
  return v4 - 56;
}

uint64_t sub_10073760C(uint64_t a1)
{
  sub_10010F274((uint64_t)v12);
  uint64_t v2 = sub_100132EFC(v13, (uint64_t)"CLRegionPreloadManifestTile(", 28);
  unint64_t v3 = sub_100132EFC(v2, (uint64_t)"super=", 6);
  sub_1005DBAF4(a1);
  if ((v11 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v11;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  uint64_t v6 = sub_100132EFC(v3, (uint64_t)v4, v5);
  sub_100132EFC(v6, (uint64_t)", numMarkets=", 13);
  BOOL v7 = (void *)std::ostream::operator<<();
  sub_100132EFC(v7, (uint64_t)")", 1);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str();
  *(void *)((char *)v12
  v13[0] = v8;
  if (v14 < 0) {
    operator delete((void *)v13[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100737820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

double sub_100737850()
{
  return 180.0;
}

double sub_10073785C()
{
  return 360.0;
}

uint64_t sub_100737868()
{
  return 256;
}

void sub_100737870(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void *sub_1007378A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 16) = v4;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 32) = 0;
  double result = sub_100737A4C((void *)(v3 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  *(void *)(a1 + 8) = v3 + 56;
  return result;
}

void sub_100737900(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100737908(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  unsigned int v18 = a1 + 2;
  if (v9) {
    std::string::size_type v10 = (char *)sub_10017EA6C(v7, v9);
  }
  else {
    std::string::size_type v10 = 0;
  }
  unsigned __int8 v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  double v16 = v11;
  double v17 = &v10[56 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unsigned __int8 v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  sub_100737A4C((void *)v11 + 4, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  v16 += 56;
  sub_100737AC8(a1, v15);
  uint64_t v13 = a1[1];
  sub_100737C7C((uint64_t)v15);
  return v13;
}

void sub_100737A38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100737C7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100737A4C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_1000DA584(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8 - 7);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100737AAC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100737AC8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100737B40((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100737B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 56;
      *((void *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_100737BFC((uint64_t)v11);
  return v9;
}

uint64_t sub_100737BFC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100737C34(a1);
  }
  return a1;
}

void sub_100737C34(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)(v1 + 32);
    if (v3)
    {
      *(void *)(v1 + 40) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t sub_100737C7C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100737CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    *(void *)(a1 + 16) = v2 - 56;
    uint64_t v5 = *(void **)(v2 - 24);
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

void sub_100737D10()
{
}

void sub_100737D64()
{
}

void sub_100737D88(id a1)
{
}

void sub_100737DDC()
{
}

uint64_t sub_100737DF0()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 182) < 0x2C) & (0xC0000000003uLL >> (dword_10247D340
                                                                                            + 74));
}

BOOL sub_100737E78()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  CFBooleanRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  BOOL v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

BOOL sub_100737EEC()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  int Value = CFBooleanGetValue(v0);
  if (v0) {
    CFRelease(v0);
  }
  return Value != 0;
}

uint64_t sub_100737F38()
{
  if (MGIsDeviceOfType()) {
    return 2;
  }
  int v14 = 1244490093;
  *(_OWORD *)buf = xmmword_101D2B710;
  if (MGIsDeviceOfType()) {
    return 5;
  }
  int v9 = 1377801277;
  *(_OWORD *)long long v8 = xmmword_101D2B724;
  if (MGIsDeviceOfType()) {
    return 5;
  }
  if (MGIsDeviceOfType()) {
    return 19;
  }
  if (MGIsDeviceOfType()) {
    return 20;
  }
  int v14 = 1839812531;
  *(_OWORD *)buf = xmmword_101D2B738;
  if (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType()) {
    return 20;
  }
  if (MGIsDeviceOfType()) {
    return 52;
  }
  int v14 = -435113336;
  *(_OWORD *)buf = xmmword_101D2B74C;
  if (MGIsDeviceOfType()) {
    return 53;
  }
  int v14 = -1997581659;
  *(_OWORD *)buf = xmmword_101D2B760;
  if (MGIsDeviceOfType() & 1) != 0 || (MGIsDeviceOfType()) {
    return 158;
  }
  int v14 = -1441055153;
  *(_OWORD *)buf = xmmword_101D2B774;
  if (MGIsDeviceOfType()) {
    return 159;
  }
  if (MGIsDeviceOfType()) {
    return 160;
  }
  if (MGIsDeviceOfType()) {
    return 3;
  }
  if (MGIsDeviceOfType()) {
    return 6;
  }
  int v14 = 1602014129;
  *(_OWORD *)buf = xmmword_101D2B788;
  if (MGIsDeviceOfType()) {
    return 7;
  }
  int v14 = -810116762;
  *(_OWORD *)buf = xmmword_101D2B79C;
  if (MGIsDeviceOfType()) {
    return 8;
  }
  int v14 = -1195351767;
  *(_OWORD *)buf = xmmword_101D2B7B0;
  if (MGIsDeviceOfType()) {
    return 9;
  }
  if (MGIsDeviceOfType()) {
    return 10;
  }
  if (MGIsDeviceOfType()) {
    return 11;
  }
  int v14 = 1789837692;
  *(_OWORD *)buf = xmmword_101D2B7C4;
  if (MGIsDeviceOfType()) {
    return 13;
  }
  int v14 = 48355600;
  *(_OWORD *)buf = xmmword_101D2B7D8;
  if (MGIsDeviceOfType()) {
    return 14;
  }
  int v14 = -1239654590;
  *(_OWORD *)buf = xmmword_101D2B7EC;
  if (MGIsDeviceOfType()) {
    return 15;
  }
  int v14 = -679691073;
  *(_OWORD *)buf = xmmword_101D2B800;
  if (MGIsDeviceOfType()) {
    return 16;
  }
  int v14 = -1579092758;
  *(_OWORD *)buf = xmmword_101D2B814;
  if (MGIsDeviceOfType()) {
    return 17;
  }
  int v14 = 1430379884;
  *(_OWORD *)buf = xmmword_101D2B828;
  if (MGIsDeviceOfType()) {
    return 18;
  }
  if (MGIsDeviceOfType()) {
    return 21;
  }
  int v14 = -798153473;
  *(_OWORD *)buf = xmmword_101D2B83C;
  if (MGIsDeviceOfType()) {
    return 22;
  }
  int v14 = -776721724;
  *(_OWORD *)buf = xmmword_101D2B850;
  if (MGIsDeviceOfType()) {
    return 23;
  }
  int v14 = -1403227947;
  *(_OWORD *)buf = xmmword_101D2B864;
  if (MGIsDeviceOfType()) {
    return 24;
  }
  int v14 = 729118884;
  *(_OWORD *)buf = xmmword_101D2B878;
  if (MGIsDeviceOfType()) {
    return 25;
  }
  int v14 = 1046806126;
  *(_OWORD *)buf = xmmword_101D2B88C;
  if (MGIsDeviceOfType()) {
    return 26;
  }
  int v9 = -188760945;
  *(_OWORD *)long long v8 = xmmword_101D2B8A0;
  if (MGIsDeviceOfType()) {
    return 26;
  }
  int v14 = -489993439;
  *(_OWORD *)buf = xmmword_101D2B8B4;
  if (MGIsDeviceOfType()) {
    return 27;
  }
  int v14 = 886875686;
  *(_OWORD *)buf = xmmword_101D2B8C8;
  if (MGIsDeviceOfType()) {
    return 28;
  }
  int v14 = -1639077591;
  *(_OWORD *)buf = xmmword_101D2B8DC;
  if (MGIsDeviceOfType()) {
    return 29;
  }
  int v14 = 338555555;
  *(_OWORD *)buf = xmmword_101D2B8F0;
  if (MGIsDeviceOneOfType()) {
    return 30;
  }
  int v14 = 1032708406;
  *(_OWORD *)buf = xmmword_101D2B904;
  if (MGIsDeviceOfType()) {
    return 31;
  }
  int v14 = 729903963;
  *(_OWORD *)buf = xmmword_101D2B918;
  if (MGIsDeviceOfType()) {
    return 32;
  }
  int v14 = 1278131292;
  *(_OWORD *)buf = xmmword_101D2B92C;
  if (MGIsDeviceOfType()) {
    return 33;
  }
  int v14 = -1841712216;
  *(_OWORD *)buf = xmmword_101D2B940;
  if (MGIsDeviceOfType()) {
    return 34;
  }
  int v14 = 1275676051;
  *(_OWORD *)buf = xmmword_101D2B954;
  if (MGIsDeviceOfType()) {
    return 35;
  }
  int v14 = 1908474541;
  *(_OWORD *)buf = xmmword_101D2B968;
  if (MGIsDeviceOfType()) {
    return 36;
  }
  int v14 = -1022451852;
  *(_OWORD *)buf = xmmword_101D2B97C;
  if (MGIsDeviceOfType()) {
    return 62;
  }
  int v14 = 1729782187;
  *(_OWORD *)buf = xmmword_101D2B990;
  if (MGIsDeviceOfType()) {
    return 63;
  }
  if (MGIsDeviceOfType()) {
    return 37;
  }
  int v14 = 368885834;
  *(_OWORD *)buf = xmmword_101D2B9A4;
  if (MGIsDeviceOfType()) {
    return 38;
  }
  int v14 = -414334491;
  *(_OWORD *)buf = xmmword_101D2B9B8;
  if (MGIsDeviceOfType()) {
    return 39;
  }
  if (MGIsDeviceOfType()) {
    return 40;
  }
  int v14 = -526227167;
  *(_OWORD *)buf = xmmword_101D2B9CC;
  if (MGIsDeviceOfType()) {
    return 41;
  }
  int v14 = -1509831889;
  *(_OWORD *)buf = xmmword_101D2B9E0;
  if (MGIsDeviceOfType()) {
    return 42;
  }
  int v14 = 1960366092;
  *(_OWORD *)buf = xmmword_101D2B9F4;
  if (MGIsDeviceOfType()) {
    return 43;
  }
  int v14 = -2114570942;
  *(_OWORD *)buf = xmmword_101D2BA08;
  if (MGIsDeviceOfType()) {
    return 148;
  }
  int v14 = -1527788847;
  *(_OWORD *)buf = xmmword_101D2BA1C;
  if (MGIsDeviceOfType()) {
    return 44;
  }
  int v14 = 1532898719;
  *(_OWORD *)buf = xmmword_101D2BA30;
  if (MGIsDeviceOfType()) {
    return 45;
  }
  int v14 = 996646949;
  *(_OWORD *)buf = xmmword_101D2BA44;
  if (MGIsDeviceOfType()) {
    return 46;
  }
  int v14 = -563086000;
  *(_OWORD *)buf = xmmword_101D2BA58;
  if (MGIsDeviceOfType()) {
    return 47;
  }
  int v14 = 659506830;
  *(_OWORD *)buf = xmmword_101D2BA6C;
  if (MGIsDeviceOfType()) {
    return 48;
  }
  int v14 = 213746202;
  *(_OWORD *)buf = xmmword_101D2BA80;
  if (MGIsDeviceOfType()) {
    return 49;
  }
  int v14 = 289690957;
  *(_OWORD *)buf = xmmword_101D2BA94;
  if (MGIsDeviceOfType()) {
    return 50;
  }
  int v14 = 586720268;
  *(_OWORD *)buf = xmmword_101D2BAA8;
  if (MGIsDeviceOfType()) {
    return 51;
  }
  int v14 = -350584140;
  *(_OWORD *)buf = xmmword_101D2BABC;
  if (MGIsDeviceOfType()) {
    return 54;
  }
  int v14 = 368778837;
  *(_OWORD *)buf = xmmword_101D2BAD0;
  if (MGIsDeviceOfType()) {
    return 55;
  }
  if (MGIsDeviceOfType()) {
    return 56;
  }
  int v14 = -1418383976;
  *(_OWORD *)buf = xmmword_101D2BAE4;
  if (MGIsDeviceOfType()) {
    return 57;
  }
  int v14 = -1213485500;
  *(_OWORD *)buf = xmmword_101D2BAF8;
  if (MGIsDeviceOfType()) {
    return 58;
  }
  if (MGIsDeviceOfType()) {
    return 59;
  }
  int v14 = 1425254930;
  *(_OWORD *)buf = xmmword_101D2BB0C;
  if (MGIsDeviceOfType()) {
    return 60;
  }
  int v14 = 1899561076;
  *(_OWORD *)buf = xmmword_101D2BB20;
  if (MGIsDeviceOfType()) {
    return 61;
  }
  int v14 = -199226823;
  *(_OWORD *)buf = xmmword_101D2BB34;
  if (MGIsDeviceOfType()) {
    return 64;
  }
  int v9 = 1412427398;
  *(_OWORD *)long long v8 = xmmword_101D2BB48;
  if (MGIsDeviceOfType()) {
    return 64;
  }
  int v14 = -1283070668;
  *(_OWORD *)buf = xmmword_101D2BB5C;
  if (MGIsDeviceOfType()) {
    return 65;
  }
  int v9 = 160260070;
  *(_OWORD *)long long v8 = xmmword_101D2BB70;
  if (MGIsDeviceOfType()) {
    return 65;
  }
  int v14 = 1711910369;
  *(_OWORD *)buf = xmmword_101D2BB84;
  if (MGIsDeviceOfType()) {
    return 66;
  }
  int v14 = -1282800328;
  *(_OWORD *)buf = xmmword_101D2BB98;
  if (MGIsDeviceOfType()) {
    return 67;
  }
  int v14 = 897736383;
  *(_OWORD *)buf = xmmword_101D2BBAC;
  if (MGIsDeviceOfType()) {
    return 68;
  }
  int v14 = -453987047;
  *(_OWORD *)buf = xmmword_101D2BBC0;
  if (MGIsDeviceOfType()) {
    return 69;
  }
  int v14 = 450980336;
  *(_OWORD *)buf = xmmword_101D2BBD4;
  if (MGIsDeviceOfType()) {
    return 70;
  }
  int v14 = 414393924;
  *(_OWORD *)buf = xmmword_101D2BBE8;
  if (MGIsDeviceOfType()) {
    return 71;
  }
  int v14 = -996295886;
  *(_OWORD *)buf = xmmword_101D2BBFC;
  if (MGIsDeviceOfType()) {
    return 72;
  }
  int v14 = -337121064;
  *(_OWORD *)buf = xmmword_101D2BC10;
  if (MGIsDeviceOfType()) {
    return 73;
  }
  int v14 = -2092955395;
  *(_OWORD *)buf = xmmword_101D2BC24;
  if (MGIsDeviceOfType()) {
    return 74;
  }
  int v14 = 674998600;
  *(_OWORD *)buf = xmmword_101D2BC38;
  if (MGIsDeviceOfType()) {
    return 75;
  }
  int v14 = 317289457;
  *(_OWORD *)buf = xmmword_101D2BC4C;
  if (MGIsDeviceOfType()) {
    return 76;
  }
  int v14 = 401945557;
  *(_OWORD *)buf = xmmword_101D2BC60;
  if (MGIsDeviceOfType()) {
    return 77;
  }
  int v14 = -232427879;
  *(_OWORD *)buf = xmmword_101D2BC74;
  if (MGIsDeviceOfType()) {
    return 78;
  }
  int v14 = -427474227;
  *(_OWORD *)buf = xmmword_101D2BC88;
  if (MGIsDeviceOfType()) {
    return 79;
  }
  int v9 = 1477534141;
  *(_OWORD *)long long v8 = xmmword_101D2BC9C;
  if (MGIsDeviceOfType()) {
    return 79;
  }
  int v14 = -1843102369;
  *(_OWORD *)buf = xmmword_101D2BCB0;
  if (MGIsDeviceOfType()) {
    return 80;
  }
  if (MGIsDeviceOfType()) {
    return 81;
  }
  int v14 = 470738981;
  *(_OWORD *)buf = xmmword_101D2BCC4;
  if (MGIsDeviceOfType()) {
    return 82;
  }
  if (MGIsDeviceOfType()) {
    return 83;
  }
  int v14 = 710807826;
  *(_OWORD *)buf = xmmword_101D2BCD8;
  if (MGIsDeviceOfType()) {
    return 84;
  }
  if (MGIsDeviceOfType()) {
    return 85;
  }
  int v14 = 1860682089;
  *(_OWORD *)buf = xmmword_101D2BCEC;
  if (MGIsDeviceOfType()) {
    return 86;
  }
  if (MGIsDeviceOfType()) {
    return 87;
  }
  int v14 = -2085056298;
  *(_OWORD *)buf = xmmword_101D2BD00;
  if (MGIsDeviceOfType()) {
    return 88;
  }
  int v14 = 2146530832;
  *(_OWORD *)buf = xmmword_101D2BD14;
  if (MGIsDeviceOfType()) {
    return 89;
  }
  int v14 = -1742178852;
  *(_OWORD *)buf = xmmword_101D2BD28;
  if (MGIsDeviceOfType()) {
    return 90;
  }
  int v14 = 617174804;
  *(_OWORD *)buf = xmmword_101D2BD3C;
  if (MGIsDeviceOfType()) {
    return 91;
  }
  int v14 = 1330813729;
  *(_OWORD *)buf = xmmword_101D2BD50;
  if (MGIsDeviceOfType()) {
    return 92;
  }
  if (MGIsDeviceOfType()) {
    return 93;
  }
  if (MGIsDeviceOfType()) {
    return 94;
  }
  int v14 = 152704997;
  *(_OWORD *)buf = xmmword_101D2BD64;
  if (MGIsDeviceOfType()) {
    return 95;
  }
  int v14 = -338255497;
  *(_OWORD *)buf = xmmword_101D2BD78;
  if (MGIsDeviceOfType()) {
    return 96;
  }
  int v14 = -1040127899;
  *(_OWORD *)buf = xmmword_101D2BD8C;
  if (MGIsDeviceOfType()) {
    return 97;
  }
  int v14 = 283967174;
  *(_OWORD *)buf = xmmword_101D2BDA0;
  if (MGIsDeviceOfType()) {
    return 98;
  }
  int v14 = 1530707451;
  *(_OWORD *)buf = xmmword_101D2BDB4;
  if (MGIsDeviceOfType()) {
    return 99;
  }
  int v14 = -871113647;
  *(_OWORD *)buf = xmmword_101D2BDC8;
  if (MGIsDeviceOfType()) {
    return 100;
  }
  int v14 = 483476120;
  *(_OWORD *)buf = xmmword_101D2BDDC;
  if (MGIsDeviceOfType()) {
    return 101;
  }
  int v14 = 1472775220;
  *(_OWORD *)buf = xmmword_101D2BDF0;
  if (MGIsDeviceOfType()) {
    return 102;
  }
  int v14 = 56502976;
  *(_OWORD *)buf = xmmword_101D2BE04;
  if (MGIsDeviceOfType()) {
    return 103;
  }
  int v14 = 282158961;
  *(_OWORD *)buf = xmmword_101D2BE18;
  if (MGIsDeviceOfType()) {
    return 104;
  }
  int v14 = 1282132887;
  *(_OWORD *)buf = xmmword_101D2BE2C;
  if (MGIsDeviceOfType()) {
    return 105;
  }
  int v14 = -961843768;
  *(_OWORD *)buf = xmmword_101D2BE40;
  if (MGIsDeviceOfType()) {
    return 106;
  }
  int v14 = 1326690998;
  *(_OWORD *)buf = xmmword_101D2BE54;
  if (MGIsDeviceOfType()) {
    return 107;
  }
  int v14 = -441172408;
  *(_OWORD *)buf = xmmword_101D2BE68;
  if (MGIsDeviceOfType()) {
    return 108;
  }
  int v14 = -126099363;
  *(_OWORD *)buf = xmmword_101D2BE7C;
  if (MGIsDeviceOfType()) {
    return 109;
  }
  int v14 = 1756484512;
  *(_OWORD *)buf = xmmword_101D2BE90;
  if (MGIsDeviceOfType()) {
    return 110;
  }
  int v14 = 763775061;
  *(_OWORD *)buf = xmmword_101D2BEA4;
  if (MGIsDeviceOfType()) {
    return 111;
  }
  int v14 = -1092155788;
  *(_OWORD *)buf = xmmword_101D2BEB8;
  if (MGIsDeviceOfType()) {
    return 112;
  }
  int v14 = -557458837;
  *(_OWORD *)buf = xmmword_101D2BECC;
  if (MGIsDeviceOfType()) {
    return 113;
  }
  int v14 = -63049871;
  *(_OWORD *)buf = xmmword_101D2BEE0;
  if (MGIsDeviceOfType()) {
    return 114;
  }
  int v14 = 1730000236;
  *(_OWORD *)buf = xmmword_101D2BEF4;
  if (MGIsDeviceOfType()) {
    return 115;
  }
  int v14 = 406601745;
  *(_OWORD *)buf = xmmword_101D2BF08;
  if (MGIsDeviceOfType()) {
    return 116;
  }
  int v14 = 1530338216;
  *(_OWORD *)buf = xmmword_101D2BF1C;
  if (MGIsDeviceOfType()) {
    return 117;
  }
  int v14 = -1930811061;
  *(_OWORD *)buf = xmmword_101D2BF30;
  if (MGIsDeviceOfType()) {
    return 118;
  }
  int v14 = 1654218604;
  *(_OWORD *)buf = xmmword_101D2BF44;
  if (MGIsDeviceOfType()) {
    return 119;
  }
  int v14 = -182498503;
  *(_OWORD *)buf = xmmword_101D2BF58;
  if (MGIsDeviceOfType()) {
    return 124;
  }
  int v14 = -2030489149;
  *(_OWORD *)buf = xmmword_101D2BF6C;
  if (MGIsDeviceOfType()) {
    return 120;
  }
  int v14 = 841005628;
  *(_OWORD *)buf = xmmword_101D2BF80;
  if (MGIsDeviceOfType()) {
    return 121;
  }
  int v14 = 223445260;
  *(_OWORD *)buf = xmmword_101D2BF94;
  if (MGIsDeviceOfType()) {
    return 122;
  }
  int v14 = 1219348060;
  *(_OWORD *)buf = xmmword_101D2BFA8;
  if (MGIsDeviceOfType()) {
    return 123;
  }
  if (MGIsDeviceOfType()) {
    return 125;
  }
  if (MGIsDeviceOfType()) {
    return 126;
  }
  if (MGIsDeviceOfType()) {
    return 127;
  }
  if (MGIsDeviceOfType()) {
    return 128;
  }
  if (MGIsDeviceOfType()) {
    return 129;
  }
  if (MGIsDeviceOfType()) {
    return 130;
  }
  if (MGIsDeviceOfType()) {
    return 131;
  }
  if (MGIsDeviceOfType()) {
    return 132;
  }
  if (MGIsDeviceOfType()) {
    return 133;
  }
  int v14 = 2030516999;
  *(_OWORD *)buf = xmmword_101D2BFBC;
  *(_OWORD *)long long v8 = xmmword_101D2BFD0;
  int v9 = -1276010597;
  if (MGIsDeviceOneOfType()) {
    return 134;
  }
  int v14 = -762483149;
  *(_OWORD *)buf = xmmword_101D2BFE4;
  *(_OWORD *)long long v8 = xmmword_101D2BFF8;
  int v9 = -1926937532;
  if (MGIsDeviceOneOfType()) {
    return 135;
  }
  int v14 = -1902732724;
  *(_OWORD *)buf = xmmword_101D2C00C;
  *(_OWORD *)long long v8 = xmmword_101D2C020;
  int v9 = -342357580;
  if (MGIsDeviceOneOfType()) {
    return 136;
  }
  int v14 = 300442574;
  *(_OWORD *)buf = xmmword_101D2C034;
  *(_OWORD *)long long v8 = xmmword_101D2C048;
  int v9 = -1294188889;
  if (MGIsDeviceOneOfType()) {
    return 137;
  }
  if (MGIsDeviceOfType()) {
    return 138;
  }
  int v14 = -61007701;
  *(_OWORD *)buf = xmmword_101D2C05C;
  if (MGIsDeviceOfType()) {
    return 139;
  }
  if (MGIsDeviceOfType()) {
    return 140;
  }
  int v14 = -235416490;
  *(_OWORD *)buf = xmmword_101D2C070;
  if (MGIsDeviceOfType()) {
    return 141;
  }
  int v14 = -820493242;
  *(_OWORD *)buf = xmmword_101D2C084;
  if (MGIsDeviceOfType()) {
    return 143;
  }
  int v14 = -1157300313;
  *(_OWORD *)buf = xmmword_101D2C098;
  if (MGIsDeviceOfType()) {
    return 144;
  }
  int v14 = -2132668294;
  *(_OWORD *)buf = xmmword_101D2C0AC;
  if (MGIsDeviceOfType()) {
    return 145;
  }
  if (MGIsDeviceOfType()) {
    return 146;
  }
  if (MGIsDeviceOfType()) {
    return 147;
  }
  if (MGIsDeviceOfType()) {
    return 149;
  }
  if (MGIsDeviceOfType()) {
    return 150;
  }
  int v14 = 1737149739;
  *(_OWORD *)buf = xmmword_101D2C0C0;
  if (MGIsDeviceOfType()) {
    return 151;
  }
  int v14 = 1577888303;
  *(_OWORD *)buf = xmmword_101D2C0D4;
  if (MGIsDeviceOfType()) {
    return 152;
  }
  int v14 = -1918230744;
  *(_OWORD *)buf = xmmword_101D2C0E8;
  if (MGIsDeviceOfType()) {
    return 153;
  }
  int v14 = 1126727276;
  *(_OWORD *)buf = xmmword_101D2C0FC;
  if (MGIsDeviceOfType()) {
    return 154;
  }
  int v14 = 300130091;
  *(_OWORD *)buf = xmmword_101D2C110;
  if (MGIsDeviceOfType()) {
    return 155;
  }
  int v14 = 343814884;
  *(_OWORD *)buf = xmmword_101D2C124;
  if (MGIsDeviceOfType()) {
    return 156;
  }
  int v14 = -1675932945;
  *(_OWORD *)buf = xmmword_101D2C138;
  if (MGIsDeviceOfType()) {
    return 157;
  }
  if (MGIsDeviceOfType()) {
    return 161;
  }
  if (MGIsDeviceOfType()) {
    return 162;
  }
  if (MGIsDeviceOfType()) {
    return 166;
  }
  int v14 = -1840391155;
  *(_OWORD *)buf = xmmword_101D2C14C;
  if (MGIsDeviceOfType()) {
    return 167;
  }
  int v14 = -121925081;
  *(_OWORD *)buf = xmmword_101D2C160;
  if (MGIsDeviceOfType()) {
    return 142;
  }
  int v14 = 1071957977;
  *(_OWORD *)buf = xmmword_101D2C174;
  if (MGIsDeviceOfType()) {
    return 168;
  }
  int v14 = 438437663;
  *(_OWORD *)buf = xmmword_101D2C188;
  if (MGIsDeviceOfType()) {
    return 169;
  }
  int v14 = 1575123478;
  *(_OWORD *)buf = xmmword_101D2C19C;
  if (MGIsDeviceOfType()) {
    return 170;
  }
  int v14 = -382792827;
  *(_OWORD *)buf = xmmword_101D2C1B0;
  if (MGIsDeviceOfType()) {
    return 171;
  }
  int v14 = 123138233;
  *(_OWORD *)buf = xmmword_101D2C1C4;
  if (MGIsDeviceOfType()) {
    return 172;
  }
  int v14 = 681511593;
  *(_OWORD *)buf = xmmword_101D2C1D8;
  if (MGIsDeviceOfType()) {
    return 173;
  }
  if (MGIsDeviceOfType()) {
    return 174;
  }
  if (MGIsDeviceOfType()) {
    return 175;
  }
  int v14 = 713503427;
  *(_OWORD *)buf = xmmword_101D2C1EC;
  if (MGIsDeviceOfType()) {
    return 176;
  }
  int v14 = -1632750650;
  *(_OWORD *)buf = xmmword_101D2C200;
  if (MGIsDeviceOfType()) {
    return 177;
  }
  int v14 = -1820426635;
  *(_OWORD *)buf = xmmword_101D2C214;
  if (MGIsDeviceOfType()) {
    return 178;
  }
  int v14 = -937652876;
  *(_OWORD *)buf = xmmword_101D2C228;
  if (MGIsDeviceOfType()) {
    return 179;
  }
  int v14 = 1874287171;
  *(_OWORD *)buf = xmmword_101D2C23C;
  if (MGIsDeviceOfType()) {
    return 180;
  }
  int v14 = -781324731;
  *(_OWORD *)buf = xmmword_101D2C250;
  if (MGIsDeviceOfType()) {
    return 181;
  }
  int v14 = 1214880059;
  *(_OWORD *)buf = xmmword_101D2C264;
  if (MGIsDeviceOfType()) {
    return 182;
  }
  int v14 = 426359977;
  *(_OWORD *)buf = xmmword_101D2C278;
  if (MGIsDeviceOfType()) {
    return 183;
  }
  if (MGIsDeviceOfType()) {
    return 180;
  }
  if (MGIsDeviceOfType()) {
    return 184;
  }
  if (MGIsDeviceOfType()) {
    return 163;
  }
  if (MGIsDeviceOfType()) {
    return 185;
  }
  if (MGIsDeviceOfType()) {
    return 164;
  }
  if (MGIsDeviceOfType()) {
    return 165;
  }
  int v14 = 345196535;
  *(_OWORD *)buf = xmmword_101D2C28C;
  if (MGIsDeviceOfType()) {
    return 186;
  }
  int v14 = 440949464;
  *(_OWORD *)buf = xmmword_101D2C2A0;
  if (MGIsDeviceOfType()) {
    return 187;
  }
  int v14 = 688565114;
  *(_OWORD *)buf = xmmword_101D2C2B4;
  if (MGIsDeviceOfType()) {
    return 188;
  }
  int v14 = -493418906;
  *(_OWORD *)buf = xmmword_101D2C2C8;
  if (MGIsDeviceOfType()) {
    return 189;
  }
  if (MGIsDeviceOfType()) {
    return 190;
  }
  int v14 = -584398440;
  *(_OWORD *)buf = xmmword_101D2C2DC;
  if (MGIsDeviceOfType()) {
    return 195;
  }
  int v14 = -879476163;
  *(_OWORD *)buf = xmmword_101D2C2F0;
  if (MGIsDeviceOfType()) {
    return 196;
  }
  int v14 = -695298128;
  *(_OWORD *)buf = xmmword_101D2C304;
  *(_OWORD *)long long v8 = xmmword_101D2C318;
  int v9 = 804488105;
  if (MGIsDeviceOneOfType()) {
    return 197;
  }
  int v14 = 1614584579;
  *(_OWORD *)buf = xmmword_101D2C32C;
  *(_OWORD *)long long v8 = xmmword_101D2C340;
  int v9 = 324288768;
  if (MGIsDeviceOneOfType()) {
    return 198;
  }
  int v14 = 460218192;
  *(_OWORD *)buf = xmmword_101D2C354;
  *(_OWORD *)long long v8 = xmmword_101D2C368;
  int v9 = 2144905009;
  if (MGIsDeviceOneOfType()) {
    return 199;
  }
  int v14 = 127894440;
  *(_OWORD *)buf = xmmword_101D2C37C;
  *(_OWORD *)long long v8 = xmmword_101D2C390;
  int v9 = 1070997468;
  if (MGIsDeviceOneOfType()) {
    return 200;
  }
  int v14 = 372777383;
  *(_OWORD *)buf = xmmword_101D2C3A4;
  if (MGIsDeviceOfType()) {
    return 201;
  }
  int v14 = -858079590;
  *(_OWORD *)buf = xmmword_101D2C3B8;
  if (MGIsDeviceOfType()) {
    return 202;
  }
  int v14 = -212523443;
  *(_OWORD *)buf = xmmword_101D2C3CC;
  if (MGIsDeviceOfType()) {
    return 203;
  }
  int v14 = 646100384;
  *(_OWORD *)buf = xmmword_101D2C3E0;
  if (MGIsDeviceOfType()) {
    return 204;
  }
  int v14 = -340360463;
  *(_OWORD *)buf = xmmword_101D2C3F4;
  if (MGIsDeviceOfType()) {
    return 205;
  }
  int v14 = 1605231531;
  *(_OWORD *)buf = xmmword_101D2C408;
  if (MGIsDeviceOfType()) {
    return 206;
  }
  if (MGIsDeviceOfType()) {
    return 207;
  }
  if (MGIsDeviceOfType()) {
    return 208;
  }
  int v14 = -545612308;
  *(_OWORD *)buf = xmmword_101D2C41C;
  if (MGIsDeviceOfType()) {
    return 209;
  }
  int v14 = 1178062702;
  *(_OWORD *)buf = xmmword_101D2C430;
  if (MGIsDeviceOfType()) {
    return 210;
  }
  int v14 = 958549802;
  *(_OWORD *)buf = xmmword_101D2C444;
  if (MGIsDeviceOfType()) {
    return 211;
  }
  int v14 = 1377540371;
  *(_OWORD *)buf = xmmword_101D2C458;
  if (MGIsDeviceOfType()) {
    return 212;
  }
  if (MGIsDeviceOfType()) {
    return 213;
  }
  if (MGIsDeviceOfType()) {
    return 214;
  }
  if (MGIsDeviceOfType()) {
    return 215;
  }
  if (MGIsDeviceOfType()) {
    return 216;
  }
  if (MGIsDeviceOfType()) {
    return 217;
  }
  if (MGIsDeviceOfType()) {
    return 218;
  }
  int v14 = -1431778695;
  *(_OWORD *)buf = xmmword_101D2C46C;
  if (MGIsDeviceOfType()) {
    return 219;
  }
  int v14 = 533419158;
  *(_OWORD *)buf = xmmword_101D2C480;
  if (MGIsDeviceOfType()) {
    return 220;
  }
  int v14 = 1106979518;
  *(_OWORD *)buf = xmmword_101D2C494;
  if (MGIsDeviceOfType()) {
    return 221;
  }
  int v14 = -609570151;
  *(_OWORD *)buf = xmmword_101D2C4A8;
  if (MGIsDeviceOfType()) {
    return 222;
  }
  int v14 = -874769875;
  *(_OWORD *)buf = xmmword_101D2C4BC;
  if (MGIsDeviceOfType()) {
    return 223;
  }
  int v14 = 1223847566;
  *(_OWORD *)buf = xmmword_101D2C4D0;
  if (MGIsDeviceOfType()) {
    return 224;
  }
  int v14 = 185580364;
  *(_OWORD *)buf = xmmword_101D2C4E4;
  if (MGIsDeviceOfType()) {
    return 225;
  }
  if (MGIsDeviceOfType()) {
    return 226;
  }
  int v14 = 1878025452;
  *(_OWORD *)buf = xmmword_101D2C4F8;
  if (MGIsDeviceOfType()) {
    return 227;
  }
  int v14 = 1725957070;
  *(_OWORD *)buf = xmmword_101D2C50C;
  if (MGIsDeviceOfType()) {
    return 228;
  }
  int v14 = 538967431;
  *(_OWORD *)buf = xmmword_101D2C520;
  if (MGIsDeviceOfType()) {
    return 229;
  }
  int v14 = 2060712151;
  *(_OWORD *)buf = xmmword_101D2C534;
  if (MGIsDeviceOfType()) {
    return 230;
  }
  int v14 = 802516499;
  *(_OWORD *)buf = xmmword_101D2C548;
  if (MGIsDeviceOfType()) {
    return 231;
  }
  int v14 = -1919324456;
  *(_OWORD *)buf = xmmword_101D2C55C;
  if (MGIsDeviceOfType()) {
    return 232;
  }
  int v14 = 1127969586;
  *(_OWORD *)buf = xmmword_101D2C570;
  if (MGIsDeviceOfType()) {
    return 233;
  }
  int v14 = 1292009573;
  *(_OWORD *)buf = xmmword_101D2C584;
  if (MGIsDeviceOfType()) {
    return 234;
  }
  if (MGIsDeviceOfType()) {
    return 235;
  }
  if (MGIsDeviceOfType()) {
    return 236;
  }
  if (MGIsDeviceOfType()) {
    return 237;
  }
  if (MGIsDeviceOfType()) {
    return 238;
  }
  if (MGIsDeviceOfType()) {
    return 142;
  }
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (sub_10073AAE4()) {
    return 1;
  }
  if (MGIsDeviceOfType()) {
    return 239;
  }
  int v14 = -12497897;
  *(_OWORD *)buf = xmmword_101D2C598;
  if (MGIsDeviceOfType()) {
    return 240;
  }
  int v14 = -518121279;
  *(_OWORD *)buf = xmmword_101D2C5AC;
  if (MGIsDeviceOfType()) {
    return 241;
  }
  int v14 = -773054213;
  *(_OWORD *)buf = xmmword_101D2C5C0;
  if (MGIsDeviceOfType()) {
    return 242;
  }
  int v14 = -1204420428;
  *(_OWORD *)buf = xmmword_101D2C5D4;
  if (MGIsDeviceOfType()) {
    return 243;
  }
  if (MGIsDeviceOfType()) {
    return 260;
  }
  CFBooleanRef v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    CFTypeID v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138477827;
      *(void *)&uint8_t buf[4] = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "unknown HW model %{private}@; file radar to CoreMotion Factory | 1.0",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      *(_DWORD *)long long v8 = 138477827;
      *(void *)&v8[4] = v1;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    CFRelease(v1);
    return 0;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C6940);
  }
  BOOL v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    sub_1000FECE0(@"HWModelStr", (uint64_t)buf);
    uint64_t v4 = v15 >= 0 ? buf : *(uint8_t **)buf;
    *(_DWORD *)long long v8 = 136380675;
    *(void *)&v8[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "unknown HW model %{private}s; file radar to CoreMotion Factory | 1.0",
      v8,
      0xCu);
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
  }
  uint64_t result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    sub_1000FECE0(@"HWModelStr", (uint64_t)v8);
    if (v10 >= 0) {
      uint64_t v6 = v8;
    }
    else {
      uint64_t v6 = *(uint8_t **)v8;
    }
    int v11 = 136380675;
    char v12 = v6;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    if (v10 < 0) {
      operator delete(*(void **)v8);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "static CLPlatformInfo::Hardware CLPlatformInfo::queryEmbeddedSystemHardware()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
    return 0;
  }
  return result;
}

BOOL sub_10073AAE4()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  CFBooleanRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  BOOL v3 = v2 == CFBooleanGetTypeID() && CFBooleanGetValue(v1) != 0;
  CFRelease(v1);
  return v3;
}

void sub_10073AB58(id a1)
{
  CFBooleanRef v1 = (const __CFBoolean *)MGCopyAnswer();
  if (v1)
  {
    CFBooleanRef v2 = v1;
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID() && CFBooleanGetValue(v2)) {
      int v4 = 4;
    }
    else {
      int v4 = sub_100737F38();
    }
    dword_10247D340 = v4;
    CFRelease(v2);
  }
  else
  {
    dword_10247D340 = sub_100737F38();
  }
}

void *sub_10073ABEC@<X0>(void *a1@<X8>)
{
  CFBooleanRef v2 = (void *)_CFCopyServerVersionDictionary();
  if (!v2) {
    CFBooleanRef v2 = (void *)_CFCopySystemVersionDictionary();
  }
  CFStringRef v3 = (const __CFString *)[v2 objectForKey:_kCFSystemVersionProductVersionKey];
  CFStringRef v4 = (const __CFString *)[v2 objectForKey:_kCFSystemVersionProductNameKey];
  CFStringRef v5 = (const __CFString *)[v2 objectForKey:_kCFSystemVersionBuildVersionKey];
  CFStringRef v6 = @"???";
  if (v4) {
    CFStringRef v7 = v4;
  }
  else {
    CFStringRef v7 = @"???";
  }
  if (v3) {
    CFStringRef v8 = v3;
  }
  else {
    CFStringRef v8 = @"???";
  }
  if (v5) {
    CFStringRef v6 = v5;
  }
  int v9 = +[NSString stringWithFormat:@"%@ %@ (%@)", v7, v8, v6];

  char v10 = [(NSString *)v9 UTF8String];

  return sub_100134750(a1, v10);
}

void *sub_10073ACDC@<X0>(void *a1@<X8>)
{
  CFBooleanRef v2 = (void *)_CFCopyServerVersionDictionary();
  if (!v2) {
    CFBooleanRef v2 = (void *)_CFCopySystemVersionDictionary();
  }
  CFStringRef v3 = (const __CFString *)[v2 objectForKey:_kCFSystemVersionProductVersionKey];
  CFStringRef v4 = (const __CFString *)[v2 objectForKey:_kCFSystemVersionProductNameKey];
  CFStringRef v5 = @"???";
  if (v4) {
    CFStringRef v6 = v4;
  }
  else {
    CFStringRef v6 = @"???";
  }
  if (v3) {
    CFStringRef v5 = v3;
  }
  CFStringRef v7 = +[NSString stringWithFormat:@"%@ %@", v6, v5];

  CFStringRef v8 = [(NSString *)v7 UTF8String];

  return sub_100134750(a1, v8);
}

void sub_10073ADA8(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247D368))
  {
    xmmword_10247D350 = 0uLL;
    unk_10247D360 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D350, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247D368);
  }
  if (qword_10247D370 != -1) {
    dispatch_once(&qword_10247D370, &stru_1022C65F0);
  }
  if (byte_10247D367 < 0)
  {
    long long v2 = xmmword_10247D350;
    sub_1000DC48C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10247D350;
    *(void *)(a1 + 16) = unk_10247D360;
  }
}

void sub_10073AE9C(id a1)
{
  CFDictionaryRef v1 = (const __CFDictionary *)_CFCopyServerVersionDictionary();
  if (v1 || (CFDictionaryRef v1 = (const __CFDictionary *)_CFCopySystemVersionDictionary()) != 0)
  {
    sub_10013FA80((int)v14, v1);
    CFRelease(v1);
    memset(&v13, 0, sizeof(v13));
    memset(&v12, 0, sizeof(v12));
    memset(&v11, 0, sizeof(v11));
    if (!sub_1000A7CF8((uint64_t)v14, _kCFSystemVersionProductNameKey, &v12)) {
      std::string::assign(&v12, "<name>");
    }
    if (!sub_1000A7CF8((uint64_t)v14, _kCFSystemVersionProductVersionKey, &v13)) {
      std::string::assign(&v13, "<version>");
    }
    if (!sub_1000A7CF8((uint64_t)v14, _kCFSystemVersionBuildVersionKey, &v11)) {
      std::string::assign(&v11, "<build>");
    }
    sub_1002F0A00((const void **)&v12.__r_.__value_.__l.__data_, (const void **)&v13.__r_.__value_.__l.__data_, (uint64_t)&v9);
    long long v2 = std::string::append(&v9, "/");
    long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFStringRef v4 = &v11;
    }
    else {
      CFStringRef v4 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v11.__r_.__value_.__l.__size_;
    }
    CFStringRef v6 = std::string::append(&v10, (const std::string::value_type *)v4, size);
    std::string::size_type v7 = v6->__r_.__value_.__r.__words[0];
    v15[0] = v6->__r_.__value_.__l.__size_;
    *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    char v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (byte_10247D367 < 0) {
      operator delete((void *)xmmword_10247D350);
    }
    *(void *)&xmmword_10247D350 = v7;
    *((void *)&xmmword_10247D350 + 1) = v15[0];
    *(void *)((char *)&xmmword_10247D350 + 15) = *(void *)((char *)v15 + 7);
    byte_10247D367 = v8;
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    sub_10013F3C4(v14);
  }
  else
  {
    std::string::assign((std::string *)&xmmword_10247D350, "<null>");
  }
}

void sub_10073B11C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  sub_10013F3C4(v34 - 72);
  _Unwind_Resume(a1);
}

void sub_10073B1A4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D390, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_10247D390);
    a1 = v4;
    if (v3)
    {
      xmmword_10247D378 = 0uLL;
      unk_10247D388 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D378, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10247D390);
      a1 = v4;
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10073B2E4;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  if (qword_10247D398 != -1) {
    dispatch_once(&qword_10247D398, block);
  }
  if (byte_10247D38F < 0)
  {
    sub_1000DC48C((unsigned char *)a2, (void *)xmmword_10247D378, *((unint64_t *)&xmmword_10247D378 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_10247D378;
    *(void *)(a2 + 16) = unk_10247D388;
  }
}

double sub_10073B2E4()
{
  sub_10073B340("hw.model", &v1);
  if (byte_10247D38F < 0) {
    operator delete((void *)xmmword_10247D378);
  }
  double result = *(double *)&v1;
  xmmword_10247D378 = v1;
  unk_10247D388 = v2;
  return result;
}

void *sub_10073B340@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  size_t v5 = 128;
  if (sysctlbyname(a1, v6, &v5, 0, 0)) {
    int v3 = "";
  }
  else {
    int v3 = v6;
  }
  return sub_100134750(a2, v3);
}

void sub_10073B3D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D3B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_10247D3B8);
    a1 = v4;
    if (v3)
    {
      xmmword_10247D3A0 = 0uLL;
      unk_10247D3B0 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D3A0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10247D3B8);
      a1 = v4;
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10073B510;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  if (qword_10247D3C0 != -1) {
    dispatch_once(&qword_10247D3C0, block);
  }
  if (byte_10247D3B7 < 0)
  {
    sub_1000DC48C((unsigned char *)a2, (void *)xmmword_10247D3A0, *((unint64_t *)&xmmword_10247D3A0 + 1));
  }
  else
  {
    *(_OWORD *)a2 = xmmword_10247D3A0;
    *(void *)(a2 + 16) = unk_10247D3B0;
  }
}

double sub_10073B510()
{
  sub_10073B340("hw.machine", &v1);
  if (byte_10247D3B7 < 0) {
    operator delete((void *)xmmword_10247D3A0);
  }
  double result = *(double *)&v1;
  xmmword_10247D3A0 = v1;
  unk_10247D3B0 = v2;
  return result;
}

uint64_t sub_10073B56C()
{
  if (qword_10247D3C8 != -1) {
    dispatch_once(&qword_10247D3C8, &stru_1022C6610);
  }
  return dword_10241D6D4;
}

void sub_10073B5B0(id a1)
{
  CFStringRef v1 = (const __CFString *)MGCopyAnswer();
  if (!v1) {
    return;
  }
  CFStringRef v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 == CFStringGetTypeID())
  {
    if (CFEqual(v2, @"Beta"))
    {
      int v4 = 0;
      goto LABEL_18;
    }
    if (CFEqual(v2, @"Carrier"))
    {
      int v4 = 1;
      goto LABEL_18;
    }
    if (CFEqual(v2, @"Internal"))
    {
      int v4 = 2;
      goto LABEL_18;
    }
    if (CFEqual(v2, @"Desense"))
    {
      int v4 = 3;
      goto LABEL_18;
    }
    if (CFEqual(v2, @"Lite Internal"))
    {
      int v4 = 4;
      goto LABEL_18;
    }
    if (CFEqual(v2, @"Vendor"))
    {
      int v4 = 5;
      goto LABEL_18;
    }
    if (CFEqual(v2, @"NonUI"))
    {
      int v4 = 6;
LABEL_18:
      dword_10241D6D4 = v4;
    }
  }

  CFRelease(v2);
}

void sub_10073B6FC(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D3E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247D3E8))
  {
    xmmword_10247D3D0 = 0uLL;
    unk_10247D3E0 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D3D0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247D3E8);
  }
  if (qword_10247D3F0 != -1) {
    dispatch_once(&qword_10247D3F0, &stru_1022C6630);
  }
  if (byte_10247D3E7 < 0)
  {
    long long v2 = xmmword_10247D3D0;
    sub_1000DC48C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10247D3D0;
    *(void *)(a1 + 16) = unk_10247D3E0;
  }
}

void sub_10073B7F0(id a1)
{
  sub_10053BEF8(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  CFStringRef v2 = sub_1000B73E0((char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v2)
  {
    CFTypeID v3 = CFGetTypeID(v2);
    if (v3 == CFStringGetTypeID())
    {
      CFURLRef v4 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v2, kCFURLPOSIXPathStyle, 0);
      if (v4)
      {
        CFStringRef v5 = (const __CFString *)v4;
        CFStringRef v6 = CFBundleCreate(kCFAllocatorDefault, v4);
        if (v6)
        {
          std::string::size_type v7 = v6;
          CFStringRef ValueForInfoDictionaryKey = (const __CFString *)CFBundleGetValueForInfoDictionaryKey(v6, kCFBundleVersionKey);
          if (ValueForInfoDictionaryKey)
          {
            CFStringRef v9 = ValueForInfoDictionaryKey;
            CFTypeID v10 = CFGetTypeID(ValueForInfoDictionaryKey);
            if (v10 == CFStringGetTypeID())
            {
              sub_1000FECE0(v9, (uint64_t)&__p);
              if (byte_10247D3D0[23] < 0) {
                operator delete(*(void **)byte_10247D3D0);
              }
              *(std::string *)byte_10247D3D0 = __p;
            }
          }
          CFRelease(v2);
          CFStringRef v2 = v5;
        }
        else
        {
          std::string::size_type v7 = (__CFBundle *)v5;
        }
        CFRelease(v2);
        CFStringRef v2 = (CFStringRef)v7;
      }
    }
    CFRelease(v2);
  }
}

void sub_10073B940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10073B95C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D410, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247D410))
  {
    xmmword_10247D3F8 = 0uLL;
    unk_10247D408 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D3F8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247D410);
  }
  if (qword_10247D418 != -1) {
    dispatch_once(&qword_10247D418, &stru_1022C6650);
  }
  if (byte_10247D40F < 0)
  {
    long long v2 = xmmword_10247D3F8;
    sub_1000DC48C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10247D3F8;
    *(void *)(a1 + 16) = unk_10247D408;
  }
}

void sub_10073BA50(id a1)
{
  CFDictionaryRef v1 = IOServiceMatching("IOPlatformExpertDevice");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (MatchingService)
  {
    io_object_t v3 = MatchingService;
    CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(MatchingService, @"IOPlatformSerialNumber", kCFAllocatorDefault, 0);
    if (CFProperty)
    {
      CFStringRef v5 = CFProperty;
      sub_1000FECE0(CFProperty, (uint64_t)&v6);
      if (byte_10247D40F < 0) {
        operator delete((void *)xmmword_10247D3F8);
      }
      xmmword_10247D3F8 = v6;
      unk_10247D408 = v7;
      CFRelease(v5);
    }
    IOObjectRelease(v3);
  }
}

void sub_10073BB0C(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D438, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247D438))
  {
    sub_100134750(&xmmword_10247D420, "NotAvailable");
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D420, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247D438);
  }
  if (qword_10247D440 != -1) {
    dispatch_once(&qword_10247D440, &stru_1022C6670);
  }
  if (byte_10247D437 < 0)
  {
    long long v2 = xmmword_10247D420;
    sub_1000DC48C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10247D420;
    *(void *)(a1 + 16) = unk_10247D430;
  }
}

void sub_10073BC0C(_Unwind_Exception *a1)
{
}

void sub_10073BC24(id a1)
{
  CFStringRef v1 = (const __CFString *)MGCopyAnswer();
  if (v1)
  {
    CFStringRef v2 = v1;
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFStringGetTypeID())
    {
      CFStringGetCString(v2, buffer, 1024, 0x8000100u);
      sub_100134750(&v4, buffer);
      if (byte_10247D437 < 0) {
        operator delete((void *)xmmword_10247D420);
      }
      xmmword_10247D420 = v4;
      unk_10247D430 = v5;
    }
    CFRelease(v2);
  }
}

void sub_10073BD08(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D460, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247D460))
  {
    sub_100134750(&xmmword_10247D448, "");
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D448, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247D460);
  }
  if (qword_10247D468 != -1) {
    dispatch_once(&qword_10247D468, &stru_1022C6690);
  }
  if (byte_10247D45F < 0)
  {
    long long v2 = xmmword_10247D448;
    sub_1000DC48C((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_10247D448;
    *(void *)(a1 + 16) = unk_10247D458;
  }
}

void sub_10073BE08(_Unwind_Exception *a1)
{
}

void sub_10073BE20(id a1)
{
  CFStringRef v1 = (const __CFString *)MGCopyAnswer();
  if (v1)
  {
    CFStringRef v2 = v1;
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFStringGetTypeID())
    {
      sub_1000FECE0(v2, (uint64_t)&v4);
      if (byte_10247D45F < 0) {
        operator delete((void *)xmmword_10247D448);
      }
      xmmword_10247D448 = v4;
      unk_10247D458 = v5;
    }
    CFRelease(v2);
  }
}

void sub_10073BEB4(id a1)
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  int v1 = 7381266;
  switch(dword_10247D340)
  {
    case 1:
    case 191:
    case 192:
    case 193:
    case 194:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
      int v1 = 33562886;
      break;
    case 2:
    case 5:
    case 19:
    case 20:
    case 52:
    case 53:
    case 60:
    case 61:
    case 158:
    case 159:
    case 160:
    case 162:
    case 163:
    case 164:
    case 165:
    case 185:
    case 195:
    case 196:
      int v1 = 532482;
      break;
    case 3:
    case 43:
    case 148:
      break;
    case 4:
      int v1 = 8454;
      break;
    case 6:
    case 166:
    case 167:
      goto LABEL_37;
    case 7:
    case 10:
    case 13:
    case 14:
    case 29:
    case 31:
    case 33:
    case 35:
    case 44:
    case 46:
    case 48:
    case 62:
    case 64:
    case 76:
    case 134:
    case 136:
    case 144:
    case 146:
    case 154:
    case 156:
    case 186:
    case 188:
    case 197:
    case 199:
    case 201:
    case 203:
    case 205:
    case 207:
    case 209:
    case 211:
    case 212:
    case 213:
    case 215:
    case 217:
    case 226:
    case 227:
    case 229:
    case 231:
    case 233:
    case 235:
    case 237:
    case 239:
    case 242:
      int v1 = 7905558;
      break;
    case 8:
    case 11:
    case 12:
    case 15:
    case 16:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
      int v1 = 8236319;
      break;
    case 9:
    case 17:
    case 18:
      int v1 = 16624927;
      break;
    case 21:
      int v1 = 4202498;
      break;
    case 30:
    case 32:
    case 34:
    case 36:
    case 45:
    case 47:
    case 49:
    case 63:
    case 65:
    case 77:
    case 135:
    case 137:
    case 145:
    case 155:
    case 157:
    case 187:
    case 189:
    case 190:
    case 202:
    case 204:
    case 206:
    case 208:
    case 210:
    case 214:
    case 216:
    case 218:
    case 240:
    case 241:
    case 243:
      int v1 = 16624923;
      break;
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      int v1 = 37789954;
      break;
    case 50:
    case 51:
    case 74:
    case 75:
    case 81:
    case 82:
    case 83:
    case 84:
    case 89:
    case 90:
    case 95:
    case 96:
      int v1 = 37789962;
      break;
    case 57:
    case 58:
    case 59:
      int v1 = 8234271;
      break;
    case 66:
    case 67:
    case 85:
    case 86:
    case 87:
    case 88:
    case 91:
    case 92:
    case 93:
    case 94:
    case 97:
    case 98:
      int v1 = 38120715;
      break;
    case 68:
    case 69:
    case 70:
    case 78:
    case 79:
    case 80:
    case 139:
    case 141:
    case 142:
    case 143:
      int v1 = 41788703;
      break;
    case 71:
    case 72:
    case 73:
      int v1 = 41790751;
      break;
    case 99:
    case 100:
    case 103:
    case 104:
    case 107:
    case 108:
    case 111:
    case 112:
    case 116:
    case 117:
    case 120:
    case 121:
    case 126:
    case 127:
    case 130:
    case 131:
      int v1 = 38314250;
      break;
    case 101:
    case 102:
    case 105:
    case 106:
    case 109:
    case 110:
    case 113:
    case 114:
    case 115:
    case 118:
    case 119:
    case 122:
    case 123:
    case 124:
    case 125:
    case 128:
    case 129:
    case 132:
    case 133:
    case 260:
      int v1 = 38645003;
      break;
    case 149:
      int v1 = 4235530;
      break;
    case 150:
    case 151:
    case 152:
    case 153:
      int v1 = 41226;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
      int v1 = 108899615;
      break;
    case 198:
    case 200:
    case 228:
    case 230:
    case 232:
    case 234:
    case 236:
    case 238:
      int v1 = 83733787;
      break;
    default:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      CFStringRef v2 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
      {
        if (qword_10247D348 != -1) {
          dispatch_once(&qword_10247D348, &stru_1022C65D0);
        }
        *(_DWORD *)buf = 67174657;
        int v6 = dword_10247D340;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "unknown hardware type %{private}d", buf, 8u);
      }
      BOOL v3 = sub_10013D1A0(115, 0);
      int v1 = 0;
      if (v3)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C6940);
        }
        if (qword_10247D348 != -1) {
          dispatch_once(&qword_10247D348, &stru_1022C65D0);
        }
        long long v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLPlatformInfo::Provider CLPlatformInfo::getProviders()_block_invoke", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
LABEL_37:
        int v1 = 0;
      }
      break;
  }
  dword_10247D470 = v1;
}

uint64_t sub_10073C62C()
{
  if ((sub_1000FFFBC() & 1) != 0 || (sub_1000FFF30() & 1) != 0 || sub_100119A30()) {
    return 1;
  }

  return sub_10073C6AC();
}

uint64_t sub_10073C674()
{
  if (sub_1000FFFBC()) {
    return 1;
  }

  return sub_1000FFF30();
}

uint64_t sub_10073C6AC()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  if (((dword_10247D340 - 184) > 0x36
     || ((1 << (dword_10247D340 + 72)) & 0x50000000000001) == 0)
    && (dword_10247D340 - 174) >= 2)
  {
    return 0;
  }
  return result;
}

uint64_t sub_10073C750()
{
  uint64_t result = sub_1000FFC30();
  if (result) {
    return !sub_100119998();
  }
  return result;
}

BOOL sub_10073C774()
{
  BOOL result = sub_100119A30();
  if (result) {
    return !sub_100119AE8();
  }
  return result;
}

BOOL sub_10073C798()
{
  if (!sub_100119964()) {
    goto LABEL_6;
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0) {
    BOOL v0 = 1;
  }
  else {
LABEL_6:
  }
    BOOL v0 = sub_10073C870();
  sub_1000C7F88(&v4);
  BOOL v6 = 0;
  int v1 = sub_1000D2988(v4, "supportsTimeFreqFromDiscreteGnss", &v6);
  BOOL v2 = v6;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v1) {
    return v2;
  }
  else {
    return v0;
  }
}

void sub_10073C858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10073C870()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  BOOL result = 1;
  if ((dword_10247D340 - 125) > 4 || ((1 << (dword_10247D340 - 125)) & 0x19) == 0) {
    return dword_10247D340 == 260;
  }
  return result;
}

uint64_t sub_10073C904()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 86) < 0x30) & (0xC073399999E5uLL >> (dword_10247D340
                                                                                            - 86));
}

uint64_t sub_10073C990()
{
  if (sub_10073C9E0() || sub_10073CA58() || (sub_1000FFFBC() & 1) != 0 || (sub_1000FFF30() & 1) != 0) {
    return 1;
  }

  return sub_10073C904();
}

BOOL sub_10073C9E0()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return (dword_10247D340 - 57) < 3;
}

BOOL sub_10073CA58()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return (dword_10247D340 - 68) < 3;
}

uint64_t sub_10073CAD0()
{
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0 != 1) {
    return 0;
  }
  if (sub_1000FFFBC() & 1) != 0 || (sub_1000FFF30()) {
    return 1;
  }

  return sub_10073C6AC();
}

BOOL sub_10073CB54()
{
  if ((sub_1000FFF30() & 1) != 0
    || (sub_1000FFFBC() & 1) != 0
    || (sub_10073C904() & 1) != 0
    || (sub_10073C6AC() & 1) != 0)
  {
    return 1;
  }

  return sub_10073C870();
}

BOOL sub_10073CBA4()
{
  if (sub_10073CA58()
    || (sub_1000FFFBC() & 1) != 0
    || (sub_1000FFF30() & 1) != 0
    || (sub_10073C904() & 1) != 0
    || (sub_10073C6AC() & 1) != 0)
  {
    return 1;
  }

  return sub_10073C870();
}

uint64_t sub_10073CBFC()
{
  if sub_1000FFC30() && !sub_100119998() || sub_100119998() || (sub_10073C6AC()) {
    return 1;
  }
  BOOL v3 = 0;
  if ((sub_1000FFFBC() & 1) != 0
    || (sub_1000FFF30() & 1) != 0
    || sub_100119A70()
    || (uint64_t result = sub_10073C6AC(), result))
  {
    sub_1000C7F88(&v1);
    sub_1000D2988(v1, "GpsdEmergency", &v3);
    if (v2) {
      sub_1000DB0A0(v2);
    }
    return v3;
  }
  return result;
}

void sub_10073CCA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10073CCBC()
{
  uint64_t result = sub_1000FFC30();
  if (result)
  {
    if (sub_1000FFC30())
    {
      return sub_100119998();
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_10073CCFC()
{
  if (sub_10073C990() & 1) != 0 || (sub_10073C6AC()) {
    return 1;
  }

  return sub_10073CCBC();
}

uint64_t sub_10073CD40()
{
  if (sub_1000FFC30() & 1) != 0 || (sub_1000FFFBC()) {
    return 1;
  }

  return sub_1000FFF30();
}

uint64_t sub_10073CD84()
{
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  uint64_t v0 = byte_10247D4A0;
  if ((byte_10247D4A0 & 1) == 0) {
    sub_100737E78();
  }
  return v0;
}

uint64_t sub_10073CDDC()
{
  uint64_t result = sub_1000FFC30();
  if (result)
  {
    if (sub_100119998()) {
      return 0;
    }
    else {
      return sub_1000FFD88() ^ 1;
    }
  }
  return result;
}

uint64_t sub_10073CE10()
{
  uint64_t result = sub_10073CDDC();
  if (result) {
    return (sub_1000FFCFC() & 1) == 0 && !sub_1000FFC88();
  }
  return result;
}

void sub_10073CE44(id a1)
{
  uint64_t v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    BOOL v2 = v1;
    if (CFEqual(v1, @"iPad")) {
      byte_10247D480 = 1;
    }
    CFRelease(v2);
  }
}

BOOL sub_10073CEB4()
{
  return getenv("__OSINSTALL_ENVIRONMENT") != 0;
}

void sub_10073CEDC(id a1)
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  BOOL v1 = 1;
  if ((dword_10247D340 - 244) >= 0x10) {
    BOOL v1 = (dword_10247D340 - 191) < 4 || dword_10247D340 == 1;
  }
  byte_10247D490 = v1;
}

void sub_10073CF48(id a1)
{
  BOOL v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    BOOL v2 = v1;
    if (CFEqual(v1, @"iPhone")) {
      byte_10247D4A0 = 1;
    }
    CFRelease(v2);
  }
}

uint64_t sub_10073CFB8()
{
  if (qword_10247D4B8 != -1) {
    dispatch_once(&qword_10247D4B8, &stru_1022C6730);
  }
  return byte_10247D4B0;
}

void sub_10073CFFC(id a1)
{
  BOOL v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    BOOL v2 = v1;
    if (CFEqual(v1, @"iPod")) {
      byte_10247D4B0 = 1;
    }
    CFRelease(v2);
  }
}

uint64_t sub_10073D06C()
{
  if (qword_10247D4C8 != -1) {
    dispatch_once(&qword_10247D4C8, &stru_1022C6750);
  }
  return byte_10247D4C0;
}

void sub_10073D0B0(id a1)
{
  BOOL v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    BOOL v2 = v1;
    if (CFEqual(v1, @"AppleTV")) {
      byte_10247D4C0 = 1;
    }
    CFRelease(v2);
  }
}

BOOL sub_10073D120()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return (dword_10247D340 & 0xFFFFFFFE) == 166;
}

uint64_t sub_10073D198()
{
  if (qword_10247D4D8 != -1) {
    dispatch_once(&qword_10247D4D8, &stru_1022C6770);
  }
  return byte_10247D4D0;
}

void sub_10073D1DC(id a1)
{
  BOOL v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    BOOL v2 = v1;
    if (CFEqual(v1, @"AudioAccessory")) {
      byte_10247D4D0 = 1;
    }
    CFRelease(v2);
  }
}

BOOL sub_10073D24C()
{
  if (qword_10247D4C8 != -1) {
    dispatch_once(&qword_10247D4C8, &stru_1022C6750);
  }
  if (byte_10247D4C0) {
    return 1;
  }
  if (qword_10247D4D8 != -1) {
    dispatch_once(&qword_10247D4D8, &stru_1022C6770);
  }
  if (byte_10247D4D0) {
    return 1;
  }

  return sub_10073D120();
}

BOOL sub_10073D2E4(uint64_t a1, std::string *a2)
{
  sub_10073B95C((uint64_t)&__str);
  char v3 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::operator=(a2, &__str);
    char v3 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v3 < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return size != 0;
}

void sub_10073D350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10073D36C()
{
  CFBooleanRef v0 = (const __CFBoolean *)MGCopyAnswer();
  if (!v0) {
    return 0;
  }
  CFBooleanRef v1 = v0;
  CFTypeID v2 = CFGetTypeID(v0);
  if (v2 == CFBooleanGetTypeID())
  {
    int Value = CFBooleanGetValue(v1);
    BOOL v4 = Value != 0;
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    uint64_t v5 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      BOOL v9 = Value != 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "isDisableTilesWhileLocked = %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlatformInfo::isDisableTilesWhileLocked()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  CFRelease(v1);
  return v4;
}

uint64_t sub_10073D584(uint64_t a1)
{
  sub_10073B1A4(a1, (uint64_t)__p);
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  int v1 = dword_10247D340;
  if (qword_10247D488 != -1) {
    dispatch_once(&qword_10247D488, &stru_1022C66D0);
  }
  if (byte_10247D480 != 1
    || ((uint64_t v2 = 1, (v1 - 8) > 0x39) || ((1 << (v1 - 8)) & 0x28000A01140079BLL) == 0)
    && v1 != 77)
  {
    uint64_t v2 = 0;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C6940);
  }
  char v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    BOOL v4 = __p;
    if (v9 < 0) {
      BOOL v4 = (void **)__p[0];
    }
    *(_DWORD *)buf = 67109634;
    int v17 = v1;
    __int16 v18 = 2080;
    v19 = v4;
    __int16 v20 = 1024;
    int v21 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CAMP: device id [%d] [%s], camping support [%d]", buf, 0x18u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    BOOL v6 = __p;
    if (v9 < 0) {
      BOOL v6 = (void **)__p[0];
    }
    int v10 = 67109634;
    int v11 = v1;
    __int16 v12 = 2080;
    std::string v13 = v6;
    __int16 v14 = 1024;
    int v15 = v2;
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsCampOnly()", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_10073D844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10073D86C()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  switch(dword_10247D340)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 36:
    case 45:
    case 47:
    case 54:
    case 55:
    case 56:
    case 63:
    case 65:
    case 71:
    case 72:
    case 73:
    case 77:
    case 78:
    case 79:
    case 80:
      return result;
    case 10:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 29:
    case 31:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 64:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 74:
    case 75:
    case 76:
      goto LABEL_8;
    default:
      if (((dword_10247D340 - 139) > 0x2D
         || ((1 << (dword_10247D340 + 117)) & 0x3FFFE000001DLL) == 0)
        && (dword_10247D340 - 219) >= 7)
      {
LABEL_8:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_10073DA3C()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  switch(dword_10247D340)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 36:
    case 44:
    case 45:
    case 47:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 63:
    case 65:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 77:
    case 78:
    case 79:
    case 80:
      return result;
    case 10:
    case 13:
    case 14:
    case 19:
    case 20:
    case 21:
    case 29:
    case 31:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 46:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 60:
    case 61:
    case 62:
    case 64:
    case 66:
    case 67:
    case 74:
    case 75:
    case 76:
      goto LABEL_8;
    default:
      if (((dword_10247D340 - 139) > 0x2D
         || ((1 << (dword_10247D340 + 117)) & 0x3FFFE000001DLL) == 0)
        && (dword_10247D340 - 219) >= 7)
      {
LABEL_8:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_10073DC0C()
{
  if (!sub_1000FFC30() || sub_100119998()) {
    return 0;
  }

  return sub_1000FFC30();
}

uint64_t sub_10073DC4C()
{
  if (qword_10247D4E8 != -1) {
    dispatch_once(&qword_10247D4E8, &stru_1022C6790);
  }
  if (byte_10247D4E0) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = sub_10073C62C();
  }
  byte_10247D4E0 = result;
  return result;
}

void sub_10073DCAC(id a1)
{
  int v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    byte_10247D4E0 = 1;
    CFRelease(v1);
  }
}

uint64_t sub_10073DCF8()
{
  if (sub_10073DD54())
  {
    if (qword_10247D488 != -1) {
      dispatch_once(&qword_10247D488, &stru_1022C66D0);
    }
    char v0 = byte_10247D480 ^ 1;
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t sub_10073DD54()
{
  uint64_t result = sub_10015F708();
  if (result)
  {
    if ((sub_1000FFFBC() & 1) != 0 || (sub_1000FFF30() & 1) != 0 || sub_100119964())
    {
      if (qword_10247D4A8 != -1) {
        dispatch_once(&qword_10247D4A8, &stru_1022C6710);
      }
      if (byte_10247D4A0) {
        return 1;
      }
    }
    if (sub_1000FFC30() && !sub_100119998())
    {
      return 1;
    }
    else
    {
      return sub_10073C6AC();
    }
  }
  return result;
}

uint64_t sub_10073DDE8()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  switch(dword_10247D340)
  {
    case 8:
    case 9:
    case 11:
    case 12:
    case 15:
    case 16:
    case 17:
    case 18:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 30:
    case 32:
    case 34:
    case 36:
    case 45:
    case 47:
    case 49:
    case 50:
    case 51:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 63:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 139:
    case 141:
    case 142:
    case 143:
    case 145:
    case 154:
    case 155:
    case 156:
    case 157:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 202:
    case 204:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 214:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 240:
    case 241:
    case 243:
    case 260:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_10073E258()
{
  if (qword_10247D4F8 != -1) {
    dispatch_once(&qword_10247D4F8, &stru_1022C67B0);
  }
  return byte_10247D4F0;
}

void sub_10073E29C(id a1)
{
  int v1 = (const void *)MGCopyAnswer();
  if (v1)
  {
    uint64_t v2 = v1;
    byte_10247D4F0 = CFEqual(v1, @"NonUI") != 0;
    CFRelease(v2);
  }
}

uint64_t sub_10073E30C()
{
  if (qword_10247D508 != -1) {
    dispatch_once(&qword_10247D508, &stru_1022C67D0);
  }
  return byte_10247D500;
}

void sub_10073E350(id a1)
{
  CFBooleanRef v1 = (const __CFBoolean *)MGCopyAnswer();
  if (v1)
  {
    CFBooleanRef v2 = v1;
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID() && CFBooleanGetValue(v2) == 1) {
      byte_10247D500 = 1;
    }
    CFRelease(v2);
  }
}

uint64_t sub_10073E3D4()
{
  BOOL v6 = 0;
  sub_1000C7F88(buf);
  int v0 = sub_1000D2988(*(uint64_t *)buf, "GpsForceSuplSupportIgnoringHw", &v6);
  if (v6) {
    int v1 = v0;
  }
  else {
    int v1 = 0;
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    CFBooleanRef v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning SUPL: ignoring hw. forceSuplSupport,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      int v7 = 67109120;
      BOOL v8 = v6;
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsSupl()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    char v3 = v6;
  }
  else if (sub_1000FFC30())
  {
    if (qword_10247D488 != -1) {
      dispatch_once(&qword_10247D488, &stru_1022C66D0);
    }
    char v3 = byte_10247D480 ^ 1;
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

void sub_10073E614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10073E634()
{
  BOOL v5 = 0;
  sub_1000C7F88(buf);
  int v0 = sub_1000D2988(*(uint64_t *)buf, "GpsForceLppSupport", &v5);
  if (v5) {
    int v1 = v0;
  }
  else {
    int v1 = 0;
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (!v1) {
    return sub_1000FFC30();
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C6940);
  }
  CFBooleanRef v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning LPP: ignoring hw. forceLppSupport,%d\n", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    int v6 = 67109120;
    BOOL v7 = v5;
    BOOL v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsLpp()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return 1;
}

void sub_10073E828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10073E848()
{
  BOOL v5 = 0;
  sub_1000C7F88(buf);
  int v0 = sub_1000D2988(*(uint64_t *)buf, "GpsForceLPPOverNRSupport", &v5);
  if (v5) {
    int v1 = v0;
  }
  else {
    int v1 = 0;
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v1)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C6980);
    }
    CFBooleanRef v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Test mode, forceLPPOverNRSupport,%d\n", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022C6980);
      }
      int v6 = 67109120;
      BOOL v7 = v5;
      BOOL v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsCplaneOverNr()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return 1;
  }
  else
  {
    uint64_t result = sub_1000FFC30();
    if (result) {
      return sub_1000FFD88() ^ 1;
    }
  }
  return result;
}

void sub_10073EA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10073EA68()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  __int16 v0 = -7;
  switch(dword_10247D340)
  {
    case 7:
    case 8:
    case 9:
    case 13:
    case 14:
    case 15:
    case 16:
    case 23:
    case 31:
      __int16 v0 = -6;
      break;
    case 17:
    case 18:
    case 32:
      return v0;
    case 22:
      __int16 v0 = -4;
      break;
    case 24:
    case 25:
    case 29:
    case 30:
      __int16 v0 = -5;
      break;
    case 27:
    case 28:
    case 43:
    case 62:
    case 63:
      __int16 v0 = -3;
      break;
    case 64:
    case 65:
      __int16 v0 = -2;
      break;
    default:
      __int16 v0 = 0;
      break;
  }
  return v0;
}

BOOL sub_10073EC08()
{
  __int16 v0 = (const void *)MGCopyAnswer();
  int v1 = (const void *)MGCopyAnswer();
  if (v0) {
    CFRelease(v0);
  }
  if (v1) {
    CFRelease(v1);
  }
  if (v0) {
    BOOL v2 = v1 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  return !v2;
}

BOOL sub_10073EC70()
{
  __int16 v0 = (void *)MGCopyAnswer();
  if (v0)
  {
    int v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFNumberGetTypeID())
    {
      unsigned int v3 = [v1 intValue];
      CFRelease(v1);
      if (v3) {
        return 1;
      }
    }
    else
    {
      CFRelease(v1);
    }
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C69A0);
  }
  BOOL v5 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WsbReg, MG-NotSupported", buf, 2u);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C69A0);
    }
    int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLPlatformInfo::supportsWifiScanBuffer()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

uint64_t sub_10073EE50(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10073EEE0;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  if (qword_10247D518 != -1) {
    dispatch_once(&qword_10247D518, block);
  }
  return byte_10247D510;
}

void sub_10073EEE0()
{
  if (qword_10247D478 != -1) {
    dispatch_once(&qword_10247D478, &stru_1022C66B0);
  }
  if ((dword_10247D470 & 0x8000) != 0)
  {
    if (qword_10247D348 != -1) {
      dispatch_once(&qword_10247D348, &stru_1022C65D0);
    }
    char v0 = 1;
    switch(dword_10247D340)
    {
      case 134:
      case 135:
      case 136:
      case 137:
      case 139:
      case 141:
      case 142:
      case 143:
      case 146:
      case 154:
      case 155:
      case 156:
      case 157:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 176:
      case 177:
      case 178:
      case 179:
      case 186:
      case 187:
      case 188:
      case 189:
      case 197:
      case 198:
      case 199:
      case 200:
      case 206:
      case 208:
      case 209:
      case 210:
      case 219:
      case 220:
      case 221:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
        break;
      case 138:
      case 140:
      case 144:
      case 145:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 158:
      case 159:
      case 160:
      case 161:
      case 162:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 174:
      case 175:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 207:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 222:
      case 223:
      case 224:
      case 225:
        goto LABEL_11;
      default:
        if ((dword_10247D340 - 33) > 0x2E
          || ((1 << (dword_10247D340 - 33)) & 0x600000018003) == 0)
        {
LABEL_11:
          char v0 = 0;
        }
        break;
    }
    byte_10247D510 = v0;
  }
}

uint64_t sub_10073F164(uint64_t a1)
{
  if (qword_10247D498 != -1) {
    dispatch_once(&qword_10247D498, &stru_1022C66F0);
  }
  if (byte_10247D490) {
    return 0;
  }
  if (sub_10073EE50(a1)) {
    return 360;
  }
  return 180;
}

uint64_t sub_10073F1D8(uint64_t a1)
{
  if (qword_10247D498 != -1) {
    dispatch_once(&qword_10247D498, &stru_1022C66F0);
  }
  if (byte_10247D490) {
    return 0;
  }
  if (sub_10073EE50(a1)) {
    return 320;
  }
  return 140;
}

uint64_t sub_10073F24C()
{
  if (qword_10247D528 != -1) {
    dispatch_once(&qword_10247D528, &stru_1022C67F0);
  }
  return byte_10247D520;
}

void sub_10073F290(id a1)
{
  CFBooleanRef v1 = (const __CFBoolean *)MGCopyAnswer();
  CFBooleanRef v2 = v1;
  if (v1)
  {
    CFTypeID v3 = CFGetTypeID(v1);
    if (v3 == CFBooleanGetTypeID())
    {
      byte_10247D520 = CFBooleanGetValue(v2) != 0;
LABEL_10:
      CFRelease(v2);
      goto LABEL_11;
    }
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C6940);
  }
  BOOL v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "unexpected MGCopyAnswer answer", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    LOWORD(v10) = 0;
    BOOL v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLPlatformInfo::supportsBarometer()_block_invoke", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (v2) {
    goto LABEL_10;
  }
LABEL_11:
  char v9 = 0;
  sub_1000C7F88(buf);
  int v5 = sub_1000D2988(*(uint64_t *)buf, "ForceSupportBarometer", (BOOL *)&v9);
  if (v13) {
    sub_1000DB0A0(v13);
  }
  if (v5)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    int v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning ForceSupportBarometer,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      int v10 = 67109120;
      int v11 = v9;
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsBarometer()_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    byte_10247D520 = v9;
  }
}

void sub_10073F604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10073F624()
{
  if (!sub_100119AE8()) {
    return 0;
  }
  sub_1000C7F88(&v3);
  unsigned int v5 = 0;
  int v0 = sub_10006EF84(v3, "RavenDailyBudget", &v5);
  uint64_t v1 = v5;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v0) {
    return v1 | (unint64_t)&_mh_execute_header;
  }
  else {
    return 0x100000E10;
  }
}

void sub_10073F6A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10073F6BC()
{
  if (qword_10247D488 != -1) {
    dispatch_once(&qword_10247D488, &stru_1022C66D0);
  }
  if (byte_10247D480) {
    return 1;
  }
  if (qword_10247D5B8 != -1) {
    dispatch_once(&qword_10247D5B8, &stru_1022C68F0);
  }
  return BYTE2(qword_10247D5C0) >> 7;
}

uint64_t sub_10073F740()
{
  BOOL v5 = 0;
  sub_1000C7F88(buf);
  int v0 = sub_1000D2988(*(uint64_t *)buf, "EEDRequestForceHWSupport", &v5);
  if (v5) {
    int v1 = v0;
  }
  else {
    int v1 = 0;
  }
  if (v9) {
    sub_1000DB0A0(v9);
  }
  if (v1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    CFBooleanRef v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#Warning #EED,ignoring hw,forceHWSupport,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      int v6 = 67109120;
      BOOL v7 = v5;
      BOOL v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsEmergencySosLiveVideo()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    return v5;
  }
  else
  {
    if (qword_10247D4A8 != -1) {
      dispatch_once(&qword_10247D4A8, &stru_1022C6710);
    }
    if (byte_10247D4A0 == 1)
    {
      if (sub_1000FF52C()) {
        return 1;
      }
      else {
        return sub_10073C6AC();
      }
    }
    else
    {
      return 0;
    }
  }
}

void sub_10073F98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10073F9AC()
{
  uint64_t result = sub_10073DD54();
  if (result)
  {
    uint64_t result = sub_1000FFC30();
    if (result) {
      return !sub_100119998();
    }
  }
  return result;
}

uint64_t sub_10073F9D8()
{
  BOOL v4 = 0;
  sub_1000C7F88(&v2);
  int v0 = sub_1000D2988(v2, "GnssForceSupportsInsAiding", &v4);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  if (v0) {
    return v4;
  }
  if (sub_100119A30() || (sub_1000FFFBC() & 1) != 0) {
    return 1;
  }
  return sub_1000FFF30();
}

void sub_10073FA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10073FA78()
{
  uint64_t result = sub_100119964();
  if (result)
  {
    if (qword_10247D4A8 != -1) {
      dispatch_once(&qword_10247D4A8, &stru_1022C6710);
    }
    return byte_10247D4A0;
  }
  return result;
}

uint64_t sub_10073FAC4()
{
  if ((sub_1000FFFBC() & 1) != 0 || (uint64_t result = sub_1000FFF30(), result))
  {
    uint64_t result = sub_10073C6AC();
    if (result) {
      return sub_1000FFFBC() ^ 1;
    }
  }
  return result;
}

uint64_t sub_10073FAFC()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  unsigned int v0 = 0;
  switch(dword_10247D340)
  {
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 189:
    case 198:
    case 200:
    case 206:
    case 208:
    case 214:
    case 216:
    case 218:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 228:
    case 230:
    case 232:
    case 234:
    case 236:
    case 238:
    case 240:
    case 241:
    case 243:
      goto LABEL_6;
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 199:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 207:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 215:
    case 217:
    case 219:
    case 226:
    case 227:
    case 229:
    case 231:
    case 233:
    case 235:
    case 237:
    case 239:
    case 242:
      break;
    default:
      if ((dword_10247D340 - 115) <= 0xA && ((1 << (dword_10247D340 - 115)) & 0x601) != 0) {
LABEL_6:
      }
        unsigned int v0 = 1;
      break;
  }
  sub_1000C7F88(&v4);
  BOOL v6 = 0;
  int v1 = sub_1000D2988(v4, "GnssSupportsL5", &v6);
  BOOL v2 = v6;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v1) {
    return v2;
  }
  else {
    return v0;
  }
}

void sub_10073FC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

double sub_10073FD68()
{
  double v0 = 4.0;
  if ((sub_1000FFF30() & 1) == 0 && (!sub_1000FFC30() || sub_100119998()) && !sub_100119964())
  {
    if (sub_10073C6AC()) {
      return 4.0;
    }
    else {
      return 12.0;
    }
  }
  return v0;
}

double sub_10073FDC0()
{
  return 1.0;
}

uint64_t sub_10073FDC8(uint64_t a1)
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 0;
  switch(dword_10247D340)
  {
    case 168:
      *(_OWORD *)a1 = xmmword_101D2B700;
      int v3 = 1083598438;
      goto LABEL_31;
    case 169:
      long long v5 = xmmword_101D2B6F0;
      goto LABEL_13;
    case 170:
      *(_OWORD *)a1 = xmmword_101D2B6D0;
      int v3 = 1085485875;
      goto LABEL_31;
    case 171:
      long long v5 = xmmword_101D2B6E0;
LABEL_13:
      *(_OWORD *)a1 = v5;
      int v3 = 1085276160;
      goto LABEL_31;
    case 172:
      *(_OWORD *)a1 = xmmword_101D2B6A0;
      int v3 = 1083388723;
      goto LABEL_31;
    case 173:
      long long v6 = xmmword_101D2B690;
      goto LABEL_19;
    case 176:
      *(_OWORD *)a1 = xmmword_101D2B680;
      int v3 = 1079613850;
      goto LABEL_31;
    case 177:
      *(_OWORD *)a1 = xmmword_101D2B670;
      int v3 = 1080033280;
      goto LABEL_31;
    case 189:
      long long v6 = xmmword_101D2B660;
LABEL_19:
      *(_OWORD *)a1 = v6;
      int v3 = 1080452710;
      goto LABEL_31;
    case 198:
      long long v7 = xmmword_101D2B6C0;
      goto LABEL_22;
    case 200:
      long long v7 = xmmword_101D2B6B0;
LABEL_22:
      *(_OWORD *)a1 = v7;
      int v3 = 1082340147;
      goto LABEL_31;
    case 206:
    case 208:
      *(_OWORD *)a1 = xmmword_101D2B600;
      int v3 = 1082549862;
      goto LABEL_31;
    case 210:
      long long v8 = xmmword_101D2B650;
      goto LABEL_27;
    case 214:
    case 240:
      *(_DWORD *)(a1 + 16) = 1080872141;
      long long v4 = xmmword_101D2B5D0;
      goto LABEL_35;
    case 216:
    case 241:
      *(_DWORD *)(a1 + 16) = 1080872141;
      long long v4 = xmmword_101D2B5C0;
      goto LABEL_35;
    case 218:
    case 232:
    case 234:
      *(_OWORD *)a1 = xmmword_101D2B580;
      int v3 = 1080872141;
      goto LABEL_31;
    case 219:
      *(_OWORD *)a1 = xmmword_101D2B640;
      int v3 = 1082969293;
      goto LABEL_31;
    case 220:
      long long v8 = xmmword_101D2B630;
      goto LABEL_27;
    case 221:
      long long v8 = xmmword_101D2B620;
LABEL_27:
      *(_OWORD *)a1 = v8;
      int v3 = 1077516698;
      goto LABEL_31;
    case 222:
    case 223:
      *(_OWORD *)a1 = xmmword_101D2B610;
      int v3 = 1082759578;
      goto LABEL_31;
    case 224:
      long long v9 = xmmword_101D2B5A0;
      goto LABEL_30;
    case 225:
      long long v9 = xmmword_101D2B590;
LABEL_30:
      *(_OWORD *)a1 = v9;
      int v3 = 1081711002;
LABEL_31:
      *(_DWORD *)(a1 + 16) = v3;
      goto LABEL_36;
    case 228:
      *(_DWORD *)(a1 + 16) = 1082549862;
      long long v4 = xmmword_101D2B5F0;
      goto LABEL_35;
    case 230:
      *(_DWORD *)(a1 + 16) = 1082549862;
      long long v4 = xmmword_101D2B5E0;
      goto LABEL_35;
    case 243:
      *(_DWORD *)(a1 + 16) = 1080872141;
      long long v4 = xmmword_101D2B5B0;
LABEL_35:
      *(_OWORD *)a1 = v4;
LABEL_36:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100740188()
{
  if (!sub_100119A30()) {
    return 1;
  }

  return sub_100119964();
}

double sub_1007401C0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D538, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247D538))
  {
    qword_10247D530 = 0x4018000000000000;
    __cxa_guard_release(&qword_10247D538);
  }
  if (qword_10247D540 != -1) {
    dispatch_once(&qword_10247D540, &stru_1022C6810);
  }
  return *(double *)&qword_10247D530;
}

void sub_100740244(id a1)
{
  sub_1000C7F88(&v4);
  uint64_t v1 = qword_10247D530;
  uint64_t v6 = 0;
  int v2 = sub_1000A699C(v4, "GnssMinimumDebounceInterval", &v6);
  uint64_t v3 = v6;
  if (!v2) {
    uint64_t v3 = v1;
  }
  qword_10247D530 = v3;
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007402B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007402D0()
{
  if ((sub_10073CDDC() & 1) != 0 || sub_100119964()) {
    return 1;
  }

  return sub_10073C6AC();
}

uint64_t sub_100740310()
{
  if (sub_100119964()) {
    return 1;
  }

  return sub_10073C6AC();
}

BOOL sub_100740348()
{
  BOOL v0 = sub_100119964();
  sub_1000C7F88(&v4);
  BOOL v6 = 0;
  int v1 = sub_1000D2988(v4, "EnableGnssB13FilterInAllSessions", &v6);
  BOOL v2 = v6;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v1) {
    return v2;
  }
  else {
    return v0;
  }
}

void sub_1007403C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007403DC()
{
  if (qword_10247D550 != -1) {
    dispatch_once(&qword_10247D550, &stru_1022C6830);
  }
  if (byte_10247D548)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C69C0);
    }
    BOOL v0 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v2[0] = 68289026;
      v2[1] = 0;
      __int16 v3 = 2082;
      uint64_t v4 = "";
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ALERT Device is currently running Apple Store demo mode\"}", (uint8_t *)v2, 0x12u);
    }
  }
  return byte_10247D548;
}

void sub_1007404EC(id a1)
{
  CFBooleanRef v1 = (const __CFBoolean *)CFPreferencesCopyValue(@"StoreDemoMode", @"com.apple.demo-settings", @"mobile", kCFPreferencesAnyHost);
  if (v1)
  {
    CFBooleanRef v2 = v1;
    byte_10247D548 = CFBooleanGetValue(v1) != 0;
    CFRelease(v2);
  }
}

uint64_t sub_10074056C()
{
  if (qword_10247D560 != -1) {
    dispatch_once(&qword_10247D560, &stru_1022C6850);
  }
  return byte_10247D558;
}

void sub_1007405B0(id a1)
{
  BOOL v7 = 0;
  sub_1000C7F88(buf);
  int v1 = sub_1000D2988(*(uint64_t *)buf, "ForceMultiUser", &v7);
  if (v7) {
    int v2 = v1;
  }
  else {
    int v2 = 0;
  }
  if (v10) {
    sub_1000DB0A0(v10);
  }
  if (v2)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    __int16 v3 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning force multi user", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      *(_WORD *)long long v8 = 0;
      BOOL v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsMultiUser()_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    byte_10247D558 = 1;
  }
  else
  {
    uint64_t v4 = (void *)MKBUserTypeDeviceMode();
    if (v4)
    {
      id v5 = [v4 objectForKey:kMKBDeviceModeKey];
      if ([v5 isEqualToString:kMKBDeviceModeMultiUser]) {
        byte_10247D558 = 1;
      }
    }
  }
}

void sub_1007409D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100740A28()
{
  unsigned int v0 = sub_10073DD54();
  sub_1000C7F88(&v4);
  BOOL v6 = 0;
  int v1 = sub_1000D2988(v4, "EnableRof", &v6);
  BOOL v2 = v6;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v1) {
    return v2;
  }
  else {
    return v0;
  }
}

void sub_100740AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100740ABC()
{
  if ((sub_1000FFF30() & 1) != 0
    || sub_100119A30() && !sub_100119AE8()
    || sub_1000FFC30() && !sub_100119998())
  {
    return 1;
  }

  return sub_10073C6AC();
}

uint64_t sub_100740B14()
{
  sub_1000C7F88(&v6);
  BOOL v8 = 0;
  int v0 = sub_1000D2988(v6, "GnssPlatformEnableNavic", &v8);
  BOOL v1 = v8;
  if (v7) {
    sub_1000DB0A0(v7);
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0 == 1)
  {
    if (sub_1000FF52C() && !sub_1000FFEA4() || (int v2 = sub_10073C6AC()) != 0)
    {
      int v3 = 1;
      if (sub_100119964()) {
        int v2 = 1;
      }
      else {
        int v2 = sub_10073C6AC();
      }
    }
    else
    {
      int v3 = 0;
    }
  }
  else
  {
    int v3 = 0;
    int v2 = 0;
  }
  if (v1) {
    int v4 = v0;
  }
  else {
    int v4 = 0;
  }
  return v2 | v4 & v3;
}

void sub_100740C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100740C1C()
{
  if (sub_1000FFC30() && !sub_100119998()) {
    sub_1000FFC30();
  }
  return 0;
}

uint64_t sub_100740C48()
{
  if (sub_1000FFC30()) {
    sub_100119998();
  }
  return 0;
}

uint64_t sub_100740C6C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100740CFC;
  block[3] = &unk_1022A3020;
  block[4] = a1;
  if (qword_10247D570 != -1) {
    dispatch_once(&qword_10247D570, block);
  }
  return byte_10247D568;
}

void sub_100740CFC()
{
  if (qword_10247D498 != -1) {
    dispatch_once(&qword_10247D498, &stru_1022C66F0);
  }
  int v0 = byte_10247D490;
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0) {
    goto LABEL_12;
  }
  if (qword_10247D488 != -1) {
    dispatch_once(&qword_10247D488, &stru_1022C66D0);
  }
  if (byte_10247D480) {
    goto LABEL_12;
  }
  if (qword_10247D4B8 != -1) {
    dispatch_once(&qword_10247D4B8, &stru_1022C6730);
  }
  if ((byte_10247D4B0 | v0))
  {
LABEL_12:
    if (v0)
    {
      BOOL v1 = 1;
    }
    else
    {
      if (qword_10247D5B8 != -1) {
        dispatch_once(&qword_10247D5B8, &stru_1022C68F0);
      }
      BOOL v1 = (qword_10247D5C0 & 3) != 0;
    }
    byte_10247D568 = v1;
  }
}

uint64_t sub_100740E34()
{
  if (qword_10247D580 != -1) {
    dispatch_once(&qword_10247D580, &stru_1022C6870);
  }
  return byte_10247D578;
}

void sub_100740E78(id a1)
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  byte_10247D578 = (dword_10247D340 > 0x3AuLL) | (0x13FFFFFE03FFFFFuLL >> dword_10247D340) & 1;
}

uint64_t sub_100740EE0()
{
  uint64_t result = sub_100119A30();
  if (result)
  {
    if (qword_10247D338 != -1) {
      dispatch_once(&qword_10247D338, &stru_1022C6590);
    }
    if (qword_10247D4A8 != -1) {
      dispatch_once(&qword_10247D4A8, &stru_1022C6710);
    }
    return byte_10247D4A0;
  }
  return result;
}

uint64_t sub_100740F54()
{
  uint64_t result = sub_10015F708();
  if (result)
  {
    if (qword_10247D4A8 != -1) {
      dispatch_once(&qword_10247D4A8, &stru_1022C6710);
    }
    return byte_10247D4A0;
  }
  return result;
}

uint64_t sub_100740FA4()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return 1;
}

uint64_t sub_100740FE4()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  switch(dword_10247D340)
  {
    case 78:
    case 79:
    case 82:
    case 84:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 154:
    case 155:
    case 156:
    case 157:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 176:
    case 177:
    case 178:
    case 179:
    case 197:
    case 198:
    case 199:
    case 200:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1007412E4()
{
  if (qword_10247D590 != -1) {
    dispatch_once(&qword_10247D590, &stru_1022C6890);
  }
  return byte_10247D588;
}

void sub_100741328(id a1)
{
  CFStringRef v1 = (const __CFString *)MGCopyAnswer();
  if (v1)
  {
    CFStringRef v2 = v1;
    if (CFEqual(v1, @"KH"))
    {
      byte_10247D588 = 1;
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      int v3 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "isKoreaSKU: true", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C6940);
        }
        int v4 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::isDeviceKoreaSKU()_block_invoke", "%s\n", v4);
        if (v4 != (char *)buf) {
          free(v4);
        }
      }
    }
    CFRelease(v2);
  }
}

uint64_t sub_1007414F8()
{
  if (qword_10247D5A0 != -1) {
    dispatch_once(&qword_10247D5A0, &stru_1022C68B0);
  }
  return byte_10247D598;
}

void sub_10074153C(id a1)
{
  byte_10247D598 = [(NSString *)[+[NSProcessInfo processInfo] processName] compare:@"locationd"] == NSOrderedSame;
}

uint64_t sub_10074157C()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 0;
  int v1 = dword_10247D340;
  switch(dword_10247D340)
  {
    case 0:
    case 261:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      BOOL v7 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        int v10 = v1;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Unsupported HW type %d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      BOOL v8 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v8)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          goto LABEL_36;
        }
        goto LABEL_15;
      }
      break;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      int v4 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v10 = v1;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      BOOL v5 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v5)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
LABEL_36:
        }
          dispatch_once(&qword_102419600, &stru_1022C6940);
LABEL_15:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static CLPlatformInfo::MotionProviders CLPlatformInfo::motionProviders()", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        uint64_t result = 0;
      }
      break;
    case 6:
    case 60:
    case 61:
    case 196:
      uint64_t result = 4;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 78:
    case 79:
    case 80:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 168:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
    case 219:
      uint64_t result = 31;
      break;
    case 26:
      uint64_t result = 15;
      break;
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 62:
    case 63:
    case 64:
    case 65:
    case 76:
    case 77:
    case 134:
    case 135:
    case 136:
    case 137:
    case 144:
    case 145:
    case 146:
    case 147:
    case 154:
    case 155:
    case 156:
    case 157:
    case 161:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
      uint64_t result = 23;
      break;
    case 39:
    case 42:
    case 148:
    case 149:
    case 191:
    case 192:
    case 193:
    case 194:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
      uint64_t result = 6;
      break;
    case 50:
    case 51:
    case 66:
    case 67:
    case 74:
    case 75:
    case 82:
    case 84:
    case 86:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 150:
    case 151:
    case 152:
    case 153:
      if (qword_10247D5A8 != -1) {
        dispatch_once(&qword_10247D5A8, &stru_1022C68D0);
      }
      BOOL v2 = byte_10247D5B0 == 0;
      unsigned int v3 = 22;
      goto LABEL_21;
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 260:
      if (qword_10247D5A8 != -1) {
        dispatch_once(&qword_10247D5A8, &stru_1022C68D0);
      }
      BOOL v2 = byte_10247D5B0 == 0;
      unsigned int v3 = 54;
LABEL_21:
      if (v2) {
        uint64_t result = v3;
      }
      else {
        uint64_t result = v3 + 1;
      }
      break;
    case 169:
    case 175:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
      uint64_t result = 63;
      break;
    default:
      return result;
  }
  return result;
}

void sub_100741D5C(id a1)
{
  CFStringRef v5 = @"IOPropertyMatch";
  uint64_t v6 = &off_1023972C0;
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, (CFDictionaryRef)+[NSDictionary dictionaryWithObjects:&v6 forKeys:&v5 count:1]);
  if (MatchingService)
  {
    byte_10247D5B0 = 1;
    IOObjectRelease(MatchingService);
  }
  else
  {
    if (qword_102419090 != -1) {
      dispatch_once(&qword_102419090, &stru_1022C69E0);
    }
    BOOL v2 = qword_102419098;
    if (os_log_type_enabled((os_log_t)qword_102419098, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Compass service missing", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419090 != -1) {
        dispatch_once(&qword_102419090, &stru_1022C69E0);
      }
      unsigned int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::supportsCompass()_block_invoke", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_100741F44(id a1)
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  qword_10247D5C0 = sub_100741F8C();
}

unint64_t sub_100741F8C()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t v0 = 0;
  int v1 = dword_10247D340;
  switch(dword_10247D340)
  {
    case 0:
    case 261:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      std::string v13 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67174657;
        int v20 = v1;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unsupported HW type %{private}d; file a radar to CoreMotion Factory | 1.0",
          buf,
          8u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_9;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      int v17 = 67174657;
      int v18 = v1;
      goto LABEL_75;
    case 2:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 21:
    case 22:
    case 23:
    case 37:
    case 38:
    case 40:
    case 41:
    case 43:
    case 52:
    case 81:
    case 83:
    case 85:
    case 87:
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      BOOL v2 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v20 = v1;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Old hardware,%d is not supported", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C6940);
        }
        int v17 = 67109120;
        int v18 = v1;
LABEL_75:
        double v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "CLPlatformInfo::MotionCapabilities CLPlatformInfo::queryMotionCaps()", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
LABEL_9:
      uint64_t v0 = 0;
      break;
    case 24:
    case 25:
    case 27:
    case 28:
      uint64_t v7 = 2940500222;
      goto LABEL_53;
    case 26:
      uint64_t v14 = 2806282494;
      goto LABEL_69;
    case 29:
      unsigned __int16 v12 = 24577;
      goto LABEL_64;
    case 30:
    case 31:
    case 32:
      unsigned __int16 v12 = 30721;
LABEL_64:
      uint64_t v0 = v12 | 0x21400000u;
      break;
    case 33:
    case 209:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 240:
    case 241:
      unsigned __int16 v3 = 762;
      goto LABEL_15;
    case 34:
    case 154:
    case 155:
    case 156:
    case 157:
    case 188:
    case 189:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 210:
    case 217:
    case 218:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 242:
    case 243:
      unsigned __int16 v3 = 6906;
LABEL_15:
      uint64_t v0 = v3 | 0x31460000u;
      break;
    case 35:
    case 36:
    case 64:
    case 65:
      unsigned __int16 v8 = 30922;
      goto LABEL_27;
    case 39:
    case 42:
      uint64_t v0 = 0x28011654E00ELL;
      break;
    case 44:
      unsigned __int16 v8 = 24826;
LABEL_27:
      uint64_t v0 = v8 | 0x21440000u;
      break;
    case 45:
      uint64_t v0 = 558135546;
      break;
    case 46:
    case 62:
    case 161:
      unsigned __int16 v5 = 24826;
      goto LABEL_49;
    case 47:
    case 63:
      unsigned __int16 v5 = 30970;
      goto LABEL_49;
    case 48:
    case 186:
      uint64_t v0 = 826598138;
      break;
    case 49:
    case 134:
    case 135:
    case 136:
    case 137:
    case 187:
    case 190:
    case 202:
      unsigned __int16 v5 = -1286;
      goto LABEL_49;
    case 50:
    case 51:
      unint64_t v6 = 0x28015654E00ELL;
      goto LABEL_70;
    case 54:
    case 55:
      uint64_t v7 = 3211147518;
LABEL_53:
      unint64_t v9 = v7 & 0xFFFF0000FFFFFFFFLL | 0x2900000000;
      goto LABEL_54;
    case 56:
    case 57:
    case 58:
    case 59:
      unint64_t v9 = 0x8029BF4638FELL;
LABEL_54:
      uint64_t v0 = v9 & 0xFFFFFFFFFFFFLL | 0x101000000000000;
      break;
    case 60:
    case 61:
    case 196:
      uint64_t v0 = 0x200000000;
      break;
    case 66:
    case 67:
    case 74:
    case 75:
      unint64_t v6 = 0x24355E54E00ELL;
      goto LABEL_70;
    case 68:
    case 69:
    case 71:
    case 72:
      uint64_t v10 = 0x1218029BF461AFELL;
      goto LABEL_61;
    case 70:
    case 73:
      uint64_t v11 = 0xC029BF4618FELL;
      goto LABEL_56;
    case 76:
    case 146:
    case 147:
      unsigned __int16 v5 = -7942;
LABEL_49:
      uint64_t v0 = v5 | 0x31440000u;
      break;
    case 77:
    case 145:
      uint64_t v10 = 826604282;
      goto LABEL_61;
    case 78:
    case 79:
    case 80:
    case 142:
      uint64_t v11 = 0x8029BF461AFELL;
LABEL_56:
      uint64_t v0 = v11 & 0xFFFFFFFFFFFFLL | 0x121000000000000;
      break;
    case 82:
    case 84:
      unint64_t v6 = 0x27B55E54E00ELL;
      goto LABEL_70;
    case 86:
    case 88:
      uint64_t v0 = 0x124B55E54E00ELL;
      break;
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
      unint64_t v6 = 0x24B55E54E01ELL;
      goto LABEL_70;
    case 95:
    case 96:
    case 97:
    case 98:
      uint64_t v0 = 0x30924B55E54E01ELL;
      break;
    case 99:
    case 100:
    case 101:
    case 102:
      uint64_t v0 = 0x70934B55E54E01ELL;
      break;
    case 103:
    case 104:
    case 105:
    case 106:
      uint64_t v0 = 0x70934B55E55001ELL;
      break;
    case 107:
    case 108:
    case 109:
    case 110:
      uint64_t v4 = 0x24B55E54E01ELL;
      goto LABEL_12;
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 260:
      uint64_t v4 = 0x34B55E55001ELL;
LABEL_12:
      uint64_t v0 = v4 & 0xFFFFFFFFFFFFLL | 0x70B000000000000;
      break;
    case 138:
    case 139:
    case 140:
    case 141:
    case 143:
    case 219:
      uint64_t v0 = 0x1258029BF461AFELL;
      break;
    case 144:
    case 239:
      uint64_t v10 = 826678010;
LABEL_61:
      uint64_t v0 = v10 - 512;
      break;
    case 148:
      uint64_t v0 = 0x9B746204ELL;
      break;
    case 149:
      uint64_t v14 = 373686414;
LABEL_69:
      unint64_t v6 = v14 & 0xFFFF0000FFFFFFFFLL | 0x900000000;
      goto LABEL_70;
    case 150:
    case 151:
    case 152:
    case 153:
      unint64_t v6 = 0x20355E54E00ELL;
LABEL_70:
      uint64_t v0 = v6 & 0xFFFFFFFFFFFFLL | 0x1000000000000;
      break;
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 176:
    case 177:
      uint64_t v0 = 0x13D8029BF461AFELL;
      break;
    case 175:
    case 220:
    case 221:
    case 222:
    case 223:
      uint64_t v0 = 0x13B8029BF461AFELL;
      break;
    case 178:
    case 179:
    case 180:
    case 181:
      uint64_t v0 = 0x13B8029BF461BFELL;
      break;
    case 182:
    case 183:
    case 184:
    case 224:
    case 225:
      uint64_t v0 = 0x13B8029BF461FFELL;
      break;
    case 191:
    case 192:
    case 193:
    case 194:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
      uint64_t v0 = 277217290;
      break;
    default:
      break;
  }
  LOBYTE(v17) = BYTE1(v0) & 1;
  sub_10006ACBC(buf, "OverrideMotionCapEclipseService", (unsigned __int8 *)&v17, 0);
  return v0 & 0x73FFFBFFFF7FEFFLL | ((unint64_t)buf[1] << 8);
}

uint64_t sub_100742984()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  switch(dword_10247D340)
  {
    case 134:
    case 135:
    case 136:
    case 137:
    case 145:
    case 154:
    case 155:
    case 156:
    case 157:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 197:
    case 198:
    case 199:
    case 200:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
      return result;
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 201:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
      goto LABEL_9;
    default:
      if (dword_10247D340 > 0x3F || ((1 << dword_10247D340) & 0xC003F00000000000) == 0) {
LABEL_9:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_100742C00()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  if (((dword_10247D340 - 188) > 0x37
     || ((1 << (dword_10247D340 + 68)) & 0xC0000300000003) == 0)
    && (dword_10247D340 - 33) >= 2)
  {
    return 0;
  }
  return result;
}

uint64_t sub_100742CA4()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 188) < 0x38) & (0xF000001FE00003uLL >> (dword_10247D340
                                                                                               + 68));
}

uint64_t sub_100742D30()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 205) < 0x23) & (0x40000300FuLL >> (dword_10247D340
                                                                                          + 51));
}

uint64_t sub_100742D90()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  switch(dword_10247D340)
  {
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 78:
    case 79:
    case 80:
    case 103:
    case 104:
    case 105:
    case 106:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 130:
    case 131:
    case 132:
    case 133:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
      return result;
    case 74:
    case 75:
    case 76:
    case 77:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 107:
    case 108:
    case 109:
    case 110:
    case 126:
    case 127:
    case 128:
    case 129:
    case 134:
    case 135:
    case 136:
    case 137:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
      goto LABEL_7;
    default:
      if ((dword_10247D340 - 219) > 0x29
        || ((1 << (dword_10247D340 + 37)) & 0x2000000007FLL) == 0)
      {
LABEL_7:
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

uint64_t sub_100743004()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  BOOL v0 = dword_10247D340 == 260;
  if ((dword_10247D340 - 89) < 4) {
    BOOL v0 = 1;
  }
  return (dword_10247D340 - 95) < 0x27 || v0;
}

BOOL sub_10074306C()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  BOOL result = 1;
  if ((dword_10247D340 - 99) > 0x22
    || ((1 << (dword_10247D340 - 99)) & 0x787FFF0FFLL) == 0)
  {
    return dword_10247D340 == 260;
  }
  return result;
}

uint64_t sub_1007430E8()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 172) < 0x32) & (0x30000000000F7uLL >> (dword_10247D340
                                                                                              + 84));
}

uint64_t sub_100743148()
{
  unsigned __int8 v2 = 0;
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  if (dword_10247D340 == 219) {
    unsigned __int8 v2 = 1;
  }
  sub_10006ACBC(v1, off_10241BC88[0], &v2, 0);
  return v1[1];
}

BOOL sub_1007431C8()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return (dword_10247D340 - 107) < 4;
}

BOOL sub_100743218()
{
  if (qword_10247D5B8 != -1) {
    dispatch_once(&qword_10247D5B8, &stru_1022C68F0);
  }
  return (qword_10247D5C0 & 0x2000) != 0 && (qword_10247D5C0 & 0x8000) == 0;
}

uint64_t sub_100743274()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t result = 1;
  BOOL v1 = (dword_10247D340 - 68) > 0xC || ((1 << (dword_10247D340 - 68)) & 0x1C3F) == 0;
  if (v1 && ((dword_10247D340 - 139) > 4 || ((1 << (dword_10247D340 + 117)) & 0x15) == 0)) {
    return 0;
  }
  return result;
}

uint64_t sub_1007432FC()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 115) < 0x13) & (0x787E1u >> (dword_10247D340 - 115));
}

uint64_t sub_10074335C()
{
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  return 0;
}

uint64_t sub_10074339C()
{
  if (qword_10247D5D0 != -1) {
    dispatch_once(&qword_10247D5D0, &stru_1022C6910);
  }
  return byte_10247D5C8;
}

void sub_1007433E0(id a1)
{
  int v1 = MGGetBoolAnswer();
  byte_10247D5C8 = v1;
  if (v1)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C6940);
    }
    unsigned __int8 v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Booted in to diagnostics mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C6940);
      }
      unsigned __int16 v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLPlatformInfo::inDiagnosticsMode()_block_invoke", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

uint64_t sub_100743580()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0) {
    return 1;
  }
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D4B8 != -1) {
    dispatch_once(&qword_10247D4B8, &stru_1022C6730);
  }
  if (byte_10247D4B0) {
    return 1;
  }
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D488 != -1) {
    dispatch_once(&qword_10247D488, &stru_1022C66D0);
  }
  return byte_10247D480;
}

uint64_t sub_1007436AC()
{
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0) {
    return 1;
  }
  if (qword_10247D488 != -1) {
    dispatch_once(&qword_10247D488, &stru_1022C66D0);
  }
  return byte_10247D480;
}

uint64_t sub_10074372C()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 168) < 0x3A) & (0x3F000000001FFFFuLL >> (dword_10247D340
                                                                                                + 88));
}

uint64_t sub_100743790()
{
  uint64_t result = sub_10073FAFC();
  if (result)
  {
    if (qword_10247D4A8 != -1) {
      dispatch_once(&qword_10247D4A8, &stru_1022C6710);
    }
    return byte_10247D4A0;
  }
  return result;
}

BOOL sub_1007437DC()
{
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0) {
    return 1;
  }

  return sub_100743840();
}

BOOL sub_100743840()
{
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return dword_10247D340 == 70 || dword_10247D340 == 73;
}

BOOL sub_100743894()
{
  if (sub_100119AE8() || (BOOL result = sub_100119A70()))
  {
    return sub_100737E78();
  }
  return result;
}

BOOL sub_1007438D0()
{
  if ((sub_10073CE10() & 1) == 0 && !sub_100119964() && !sub_10073C6AC()) {
    goto LABEL_8;
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0) {
    BOOL v0 = 1;
  }
  else {
LABEL_8:
  }
    BOOL v0 = sub_10073C870();
  sub_1000C7F88(&v4);
  BOOL v6 = 0;
  int v1 = sub_1000D2988(v4, "supportsBBTimeFreqTransfer", &v6);
  BOOL v2 = v6;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v1) {
    return v2;
  }
  else {
    return v0;
  }
}

void sub_1007439A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1007439B8()
{
  if ((sub_10073CDDC() & 1) == 0 && !sub_100119964() && !sub_10073C6AC()) {
    goto LABEL_8;
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0) {
    BOOL v0 = 1;
  }
  else {
LABEL_8:
  }
    BOOL v0 = sub_10073C870();
  sub_1000C7F88(&v4);
  BOOL v6 = 0;
  int v1 = sub_1000D2988(v4, "supportsGnssDisablementAssertion", &v6);
  BOOL v2 = v6;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v1) {
    return v2;
  }
  else {
    return v0;
  }
}

void sub_100743A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100743AA0()
{
  if ((sub_10073CE10() & 1) == 0 && !sub_100119964() && !sub_10073C6AC()) {
    goto LABEL_8;
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0) {
    BOOL v0 = 1;
  }
  else {
LABEL_8:
  }
    BOOL v0 = sub_10073C870();
  sub_1000C7F88(&v4);
  BOOL v6 = 0;
  int v1 = sub_1000D2988(v4, "supportsGnssConcurrency", &v6);
  BOOL v2 = v6;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v1) {
    return v2;
  }
  else {
    return v0;
  }
}

void sub_100743B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100743B88()
{
  sub_1000C7F88(&v5);
  uint64_t v0 = v5;
  if ((sub_10073CDDC() & 1) != 0 || sub_100119964() || sub_10073C6AC())
  {
    if (qword_10247D4A8 != -1) {
      dispatch_once(&qword_10247D4A8, &stru_1022C6710);
    }
    unsigned int v1 = byte_10247D4A0;
  }
  else
  {
    unsigned int v1 = 0;
  }
  BOOL v7 = 0;
  int v2 = sub_1000D2988(v0, "supportsGnssGnssStatusQueryAssertion", &v7);
  BOOL v3 = v7;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return v3;
  }
  else {
    return v1;
  }
}

void sub_100743C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100743C68()
{
  if (!sub_10073CDDC()) {
    goto LABEL_11;
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0 == 1)
  {
    sub_1000C7F88(&v4);
    BOOL v6 = 0;
    int v0 = sub_1000D2988(v4, "enableWwanAntTuneGnssL5Blanking", &v6);
    if (v6) {
      int v1 = v0;
    }
    else {
      int v1 = 0;
    }
    if (v5) {
      sub_1000DB0A0(v5);
    }
    int v2 = 1;
  }
  else
  {
LABEL_11:
    int v1 = 0;
    int v2 = 0;
  }
  return v1 | (v2 << 8);
}

void sub_100743D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100743D34()
{
  if (sub_100743D88()) {
    return 1;
  }
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  return byte_10247D4A0;
}

uint64_t sub_100743D88()
{
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  unsigned int v0 = sub_1000D2988(v3, "EnableRhythmicWakingGnss", &v5);
  BOOL v1 = v5;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    return v0;
  }
  else {
    return 0;
  }
}

void sub_100743DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100743E04()
{
  if (sub_100119964() || (uint64_t result = sub_10073C6AC(), result))
  {
    if (qword_10247D4A8 != -1) {
      dispatch_once(&qword_10247D4A8, &stru_1022C6710);
    }
    return byte_10247D4A0;
  }
  return result;
}

uint64_t sub_100743E58()
{
  sub_1000C7F88(&v3);
  unsigned int v5 = 0;
  int v0 = sub_1004D0870(v3, "ProactiveGnssModePowerBudget", &v5);
  unsigned int v1 = v5;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v0) {
    return v1;
  }
  else {
    return 0;
  }
}

void sub_100743EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100743ED4()
{
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  unsigned int v0 = sub_1000D2988(v3, "ProactiveGnssModeSupported", &v5);
  BOOL v1 = v5;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    return v0;
  }
  else {
    return 0;
  }
}

void sub_100743F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100743F50()
{
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  unsigned int v0 = sub_1000D2988(v3, "SetLocationStreamingDisabled", &v5);
  BOOL v1 = v5;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    return v0;
  }
  else {
    return 0;
  }
}

void sub_100743FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100743FCC()
{
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  int v0 = sub_1000D2988(v3, "externalLocationDisablementAllowed", &v5);
  BOOL v1 = v5;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    return 1;
  }
  else {
    return v0 ^ 1u;
  }
}

void sub_100744034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10074404C()
{
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  if (byte_10247D4A0 == 1 && (sub_1000FFFBC() & 1) == 0) {
    return sub_1000FFF30() ^ 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1007440B0()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t v0 = 0;
  if (((dword_10247D340 - 124) > 0x3B
     || ((1 << (dword_10247D340 - 124)) & 0xFF0000000000003) == 0)
    && ((dword_10247D340 - 189) > 0x36
     || ((1 << (dword_10247D340 + 67)) & 0x60000000000A01) == 0)
    && dword_10247D340 != 115)
  {
    LODWORD(v0) = sub_10073FAFC();
    sub_1000C7F88(&v2);
    BOOL v4 = 0;
    if (sub_1000D2988(v2, "GnssL5AntTunerContentionWithCell", &v4)) {
      uint64_t v0 = v4;
    }
    else {
      uint64_t v0 = v0;
    }
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  return v0;
}

void sub_1007441D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007441EC()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  uint64_t v0 = 0;
  if ((dword_10247D340 - 178) >= 6
    && ((dword_10247D340 - 189) > 0x36
     || ((1 << (dword_10247D340 + 67)) & 0x60000000000A01) == 0))
  {
    LODWORD(v0) = sub_10073FAFC();
    sub_1000C7F88(&v2);
    BOOL v4 = 0;
    if (sub_1000D2988(v2, "GnssL5AntTunerContentionWithWiFi2p4", &v4)) {
      uint64_t v0 = v4;
    }
    else {
      uint64_t v0 = v0;
    }
    if (v3) {
      sub_1000DB0A0(v3);
    }
  }
  return v0;
}

void sub_1007442F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100744308()
{
  uint64_t result = sub_10073FAFC();
  if (result)
  {
    uint64_t result = sub_1000FFC30();
    if (result) {
      return !sub_100119998();
    }
  }
  return result;
}

uint64_t sub_100744334()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 115) < 0xB) & (0x601u >> (dword_10247D340 - 115));
}

uint64_t sub_1007443B8()
{
  if ((sub_10073CE10() & 1) != 0 || sub_100119964() || sub_10073C6AC())
  {
    if (qword_10247D4A8 != -1) {
      dispatch_once(&qword_10247D4A8, &stru_1022C6710);
    }
    unsigned int v0 = byte_10247D4A0;
  }
  else
  {
    unsigned int v0 = 0;
  }
  sub_1000C7F88(&v4);
  BOOL v6 = 0;
  int v1 = sub_1000D2988(v4, "SupportPeriodicRefPosMaintenance", &v6);
  BOOL v2 = v6;
  if (v5) {
    sub_1000DB0A0(v5);
  }
  if (v1) {
    return v2;
  }
  else {
    return v0;
  }
}

void sub_10074447C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100744498()
{
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  unsigned int v0 = sub_1000D2988(v3, "RayTracingTileManagerSupport", &v5);
  BOOL v1 = v5;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    return v0;
  }
  else {
    return 0;
  }
}

void sub_1007444FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100744514()
{
  if (qword_10247D338 != -1) {
    dispatch_once(&qword_10247D338, &stru_1022C6590);
  }
  if (qword_10247D348 != -1) {
    dispatch_once(&qword_10247D348, &stru_1022C65D0);
  }
  return ((dword_10247D340 - 175) < 0x33) & (0x78000000003E1uLL >> (dword_10247D340
                                                                                              + 81));
}

uint64_t sub_10074459C()
{
  sub_1000C7F88(&v3);
  BOOL v5 = 0;
  unsigned int v0 = sub_1000D2988(v3, "GNSSSupportsDynamicL1TuningDesireValue", &v5);
  BOOL v1 = v5;
  if (v4) {
    sub_1000DB0A0(v4);
  }
  if (v1) {
    return v0;
  }
  else {
    return 0;
  }
}

void sub_100744600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100744618()
{
  sub_1000C7F88(&v5);
  uint64_t v0 = v5;
  if (qword_10247D4A8 != -1) {
    dispatch_once(&qword_10247D4A8, &stru_1022C6710);
  }
  unsigned int v1 = byte_10247D4A0;
  BOOL v7 = 0;
  int v2 = sub_1000D2988(v0, "supportsProactiveLocation", &v7);
  BOOL v3 = v7;
  if (v6) {
    sub_1000DB0A0(v6);
  }
  if (v2) {
    return v3;
  }
  else {
    return v1;
  }
}

void sub_1007446C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007446D8(id a1)
{
  qword_102419608 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

void sub_100744708(id a1)
{
  byte_10247D5E0 = 0;
  CFPropertyListRef v2 = CFPreferencesCopyValue(@"StoreDemoMode", @"com.apple.demo-settings", @"mobile", kCFPreferencesAnyHost);
  if (v2)
  {
    BOOL v3 = v2;
    CFAutorelease(v2);
    CFTypeID v4 = CFGetTypeID(v3);
    if (v4 == CFBooleanGetTypeID())
    {
      if (CFBooleanGetValue((CFBooleanRef)v3))
      {
        CFPropertyListRef v5 = CFPreferencesCopyValue(@"FProgramNumber", @"com.apple.demo-settings", @"mobile", kCFPreferencesAnyHost);
        if (v5)
        {
          BOOL v6 = v5;
          CFAutorelease(v5);
          CFTypeID v7 = CFGetTypeID(v6);
          if (v7 == CFNumberGetTypeID())
          {
            int valuePtr = 0;
            if (CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr)) {
              byte_10247D5E0 = valuePtr == 5;
            }
          }
        }
      }
    }
  }
}

void sub_100744820(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_100744850(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_100744880(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1007448B0(id a1)
{
  qword_102419098 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Sensors");
}

BOOL sub_1007448E0(uint64_t a1, uint64_t a2)
{
  return uuid_compare((const unsigned __int8 *)(a1 + 296), (const unsigned __int8 *)(a2 + 64)) != 0;
}

void sub_10074490C(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();

  sub_10074531C(a1, 14, Current);
}

BOOL sub_100744958(uint64_t a1, uint64_t a2)
{
  return !uuid_compare((const unsigned __int8 *)(a1 + 464), (const unsigned __int8 *)(a2 + 72))
      && *(unsigned char *)(a1 + 114) == 0;
}

BOOL sub_1007449A0(uint64_t a1)
{
  return *(void *)(a1 + 344) == 33;
}

uint64_t sub_1007449BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, long long *a7)
{
  *(void *)a1 = &unk_1022C6A00;
  *(void *)(a1 + 8) = 23;
  *(_WORD *)(a1 + 16) = 512;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)a3;
  uint64_t v14 = (const std::string *)(a3 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 40), *(void **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    *(void *)(a1 + 56) = *(void *)(a3 + 32);
    *(_OWORD *)(a1 + 40) = v15;
  }
  sub_1006AC1AC(a1 + 64, (void *)(a3 + 40));
  *(unsigned char *)(a1 + 112) = *(void *)(a3 + 80) > 1uLL;
  *(unsigned char *)(a1 + 113) = a5;
  *(unsigned char *)(a1 + 114) = 0;
  *(void *)(a1 + 120) = a4;
  bzero((void *)(a1 + 128), 0x250uLL);
  *(void *)(a1 + 720) = a6;
  v34[0] = off_1022C6C58;
  v34[1] = a1;
  v34[3] = v34;
  sub_100902AD0(a1 + 728, v34);
  sub_1006A79C8(v34);
  *(void *)(a1 + 784) = *(void *)(a4 + 296);
  long long v16 = *a7;
  long long v17 = a7[2];
  *(_OWORD *)(a1 + 808) = a7[1];
  *(_OWORD *)(a1 + 824) = v17;
  *(_OWORD *)(a1 + 792) = v16;
  uuid_copy((unsigned __int8 *)(a1 + 632), (const unsigned __int8 *)a3);
  std::string::operator=((std::string *)(a1 + 648), v14);
  sub_100744CAC(a2, (uint64_t)v32);
  long long v18 = v32[13];
  *(_OWORD *)(a1 + 424) = v32[12];
  *(_OWORD *)(a1 + 440) = v18;
  *(void *)(a1 + 456) = v33;
  long long v19 = v32[9];
  *(_OWORD *)(a1 + 360) = v32[8];
  *(_OWORD *)(a1 + 376) = v19;
  long long v20 = v32[11];
  *(_OWORD *)(a1 + 392) = v32[10];
  *(_OWORD *)(a1 + 408) = v20;
  long long v21 = v32[5];
  *(_OWORD *)(a1 + 296) = v32[4];
  *(_OWORD *)(a1 + 312) = v21;
  long long v22 = v32[7];
  *(_OWORD *)(a1 + 328) = v32[6];
  *(_OWORD *)(a1 + 344) = v22;
  long long v23 = v32[1];
  *(_OWORD *)(a1 + 232) = v32[0];
  *(_OWORD *)(a1 + 248) = v23;
  long long v24 = v32[3];
  *(_OWORD *)(a1 + 264) = v32[2];
  *(_OWORD *)(a1 + 280) = v24;
  long long v25 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a1 + 608) = v25;
  *(void *)(a1 + 624) = *(void *)(a1 + 456);
  long long v26 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 544) = v26;
  long long v27 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a1 + 576) = v27;
  long long v28 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 480) = v28;
  long long v29 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 512) = v29;
  sub_10132A3C0((void *)(a1 + 128), (long long *)(a1 + 232), (uint64_t)v32);
  sub_1006ACE98(a1 + 672, (uint64_t)v32);
  sub_100663B8C(v32);
  sub_100744D54(a1);
  sub_100744FEC(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_10074531C(a1, 13, Current);
  return a1;
}

void sub_100744C14(_Unwind_Exception *a1)
{
  sub_1007458BC(v4);
  sub_10069592C(v3);
  uint64_t v6 = *(void *)(v1 + 224);
  *(void *)(v1 + 224) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100663B8C((void *)(v1 + 176));
  sub_100663B8C(v2);
  sub_101A27420(v1 + 24);
  _Unwind_Resume(a1);
}

void sub_100744CAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(CFAbsoluteTime *)a2 = CFAbsoluteTimeGetCurrent();
  *(void *)(a2 + 8) = 0xBFF0000000000000;
  *(void *)(a2 + 16) = 23;
  *(void *)(a2 + 24) = 0xBFF0000000000000;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  long long v4 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 208) = v4;
  *(void *)(a2 + 224) = *(void *)(a1 + 160);
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 144) = v5;
  long long v6 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 176) = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 80) = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 112) = v8;
  uuid_copy((unsigned __int8 *)(a2 + 64), (const unsigned __int8 *)a1);

  uuid_copy((unsigned __int8 *)(a2 + 80), (const unsigned __int8 *)(a1 + 16));
}

uint64_t sub_100744D54(uint64_t result)
{
  if (*(unsigned char *)(result + 112))
  {
    uint64_t v1 = result;
    if (!*(void *)(result + 224))
    {
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C6C28);
      }
      CFPropertyListRef v2 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, bringing up CLWorkoutSeriesDetectionModelController", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022C6C28);
        }
        uint64_t v3 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::bringupModelController()", "%s\n", v3);
        if (v3 != (char *)buf) {
          free(v3);
        }
      }
      if (*(unsigned char *)(v1 + 792)) {
        operator new();
      }
      operator new();
    }
  }
  return result;
}

void sub_100744FAC()
{
}

uint64_t sub_100744FEC(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  BOOL v3 = v2 == 3 || v2 == 5;
  if (!v3 && *(void *)(a1 + 456) != 1)
  {
    uint64_t v5 = 1;
    goto LABEL_19;
  }
  if (!*(unsigned char *)(a1 + 112))
  {
LABEL_16:
    uint64_t v5 = 0;
    goto LABEL_19;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  long long v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Disabling power assertion when auto detection is enabled", buf, 2u);
  }
  uint64_t v5 = 0;
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSeriesPredictor::notifyClientsWithPowerAssertionUpdate()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    goto LABEL_16;
  }
LABEL_19:
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  long long v7 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Notifying clients with power assertion update, shouldEnablePowerAssertion,%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    unint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::notifyClientsWithPowerAssertionUpdate()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 720) + 48))(*(void *)(a1 + 720), v5);
}

void sub_10074531C(uint64_t a1, uint64_t a2, double a3)
{
  long long v19 = *(_OWORD *)(a1 + 232);
  uint64_t v20 = a2;
  double v21 = a3;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v6 = *(_OWORD *)(a1 + 440);
  long long v32 = *(_OWORD *)(a1 + 424);
  long long v33 = v6;
  uint64_t v34 = *(void *)(a1 + 456);
  long long v7 = *(_OWORD *)(a1 + 376);
  long long v28 = *(_OWORD *)(a1 + 360);
  long long v29 = v7;
  long long v8 = *(_OWORD *)(a1 + 392);
  long long v31 = *(_OWORD *)(a1 + 408);
  long long v30 = v8;
  long long v9 = *(_OWORD *)(a1 + 312);
  long long v24 = *(_OWORD *)(a1 + 296);
  long long v25 = v9;
  long long v10 = *(_OWORD *)(a1 + 328);
  long long v27 = *(_OWORD *)(a1 + 344);
  long long v26 = v10;
  if (*(void *)(a1 + 344) == 14) {
    *((void *)&v23 + 1) = *(void *)(a1 + 360);
  }
  uuid_copy((unsigned __int8 *)&v24, (const unsigned __int8 *)(a1 + 296));
  uuid_copy((unsigned __int8 *)&v25, (const unsigned __int8 *)(a1 + 312));
  uuid_copy((unsigned __int8 *)&v26, (const unsigned __int8 *)(a1 + 328));
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  int v11 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    double v16 = a3;
    __int16 v17 = 2048;
    uint64_t v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, notify session update, eventTime,%f, eventType,%ld", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::notifyClientsWithWorkoutSessionEvent(CFAbsoluteTime, CMWorkoutEvent)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  switch(a2)
  {
    case 13:
      sub_100902D40(a1 + 728);
      (***(void (****)(void, long long *, uint64_t))(a1 + 720))(*(void *)(a1 + 720), &v19, a1 + 632);
      break;
    case 14:
      if ((void)v27 != 33)
      {
        sub_100902C40(a1 + 728, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1));
        sub_100903014((void *)(a1 + 728));
      }
      (*(void (**)(void, long long *, uint64_t))(**(void **)(a1 + 720) + 16))(*(void *)(a1 + 720), &v19, a1 + 632);
      break;
    case 15:
      sub_100902D40(a1 + 728);
      (*(void (**)(void, long long *, uint64_t))(**(void **)(a1 + 720) + 8))(*(void *)(a1 + 720), &v19, a1 + 632);
      break;
    case 16:
      (*(void (**)(void, long long *, uint64_t))(**(void **)(a1 + 720) + 24))(*(void *)(a1 + 720), &v19, a1 + 632);
      break;
    case 17:
      (*(void (**)(void, long long *, uint64_t))(**(void **)(a1 + 720) + 32))(*(void *)(a1 + 720), &v19, a1 + 632);
      break;
    case 18:
      if ((void)v27 != 33)
      {
        sub_100902C40(a1 + 728, v27, *((uint64_t *)&v27 + 1), v28, *((uint64_t *)&v28 + 1));
        sub_100903014((void *)(a1 + 728));
      }
      (*(void (**)(void, long long *, uint64_t, double))(**(void **)(a1 + 720) + 40))(*(void *)(a1 + 720), &v19, a1 + 632, *(double *)(a1 + 840));
      break;
    default:
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C6C28);
      }
      unsigned __int16 v12 = qword_1024191C8;
      if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 134217984;
        double v16 = *(double *)&a2;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLWorkoutSeriesPredictor, tried to notify invalid event type, eventType, %ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022C6C28);
        }
        std::string v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSeriesPredictor::notifyClientsWithWorkoutSessionEvent(CFAbsoluteTime, CMWorkoutEvent)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      break;
  }
}

uint64_t sub_1007458BC(uint64_t a1)
{
  sub_1006A79C8((void *)(a1 + 24));
  int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1007458FC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v41 = 0;
  long long v40 = 0u;
  long long v39 = 0u;
  long long v38 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  long long v35 = 0u;
  long long v34 = 0u;
  long long v33 = 0u;
  long long v32 = 0u;
  long long v31 = 0u;
  long long v30 = 0u;
  long long v29 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  sub_100744CAC(a2, (uint64_t)&v27);
  if ((void)v34 == 33)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    uint64_t v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(void *)&uint8_t buf[4] = v27;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, client confirmed transition segment, startTime,%f, isManualTransition,%d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C6C28);
      }
      long long v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::feedSetCurrentWorkoutType(const CLMotionStateMediator_Type::WorkoutSettings &, BOOL)", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
    long long v23 = v39;
    long long v24 = v40;
    uint64_t v25 = v41;
    long long v19 = v35;
    long long v20 = v36;
    long long v21 = v37;
    long long v22 = v38;
    long long v15 = v31;
    long long v16 = v32;
    long long v17 = v33;
    long long v18 = v34;
    *(_OWORD *)buf = v27;
    *(_OWORD *)&uint8_t buf[16] = v28;
    long long v13 = v29;
    long long v14 = v30;
    uint64_t v26 = a3;
    uint64_t v6 = a1;
    int v7 = 2;
  }
  else
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    long long v8 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218752;
      *(void *)&uint8_t buf[4] = v34;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&unsigned char buf[14] = *((void *)&v34 + 1);
      *(_WORD *)&buf[22] = 2048;
      *(void *)&buf[24] = v27;
      LOWORD(v13) = 1024;
      *(_DWORD *)((char *)&v13 + 2) = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, client confirmed workout segment, workoutType,%ld, workoutLocationType,%ld, startTime,%f, isManualTransition,%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C6C28);
      }
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::feedSetCurrentWorkoutType(const CLMotionStateMediator_Type::WorkoutSettings &, BOOL)", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }
    long long v23 = v39;
    long long v24 = v40;
    uint64_t v25 = v41;
    long long v19 = v35;
    long long v20 = v36;
    long long v21 = v37;
    long long v22 = v38;
    long long v15 = v31;
    long long v16 = v32;
    long long v17 = v33;
    long long v18 = v34;
    *(_OWORD *)buf = v27;
    *(_OWORD *)&uint8_t buf[16] = v28;
    long long v13 = v29;
    long long v14 = v30;
    uint64_t v26 = a3;
    uint64_t v6 = a1;
    int v7 = 1;
  }
  return sub_1001A34E0(v6, v7, (uint64_t)buf);
}

void sub_100745D9C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 224);
  if (v2)
  {
    sub_100EBFAE4(v2, (uint64_t)&v49);
    BOOL v3 = __p;
    long long v4 = v68;
    if (__p != v68)
    {
      do
      {
        uint64_t v5 = v3[14];
        if (v5 != *(void *)(a1 + 344) || v3[15] != *(void *)(a1 + 352))
        {
          uint64_t v6 = v3[2];
          if (v6 == 21)
          {
            sub_100902AD4((uint64_t **)(a1 + 728), v5, v3[15]);
          }
          else if (v6 == 20)
          {
            sub_100902F64(a1 + 728, v5, v3[15], v3[16], v3[17]);
          }
        }
        v3 += 29;
      }
      while (v3 != v4);
    }
    long long v21 = v50;
    double v7 = v49;
    uint64_t v8 = v51;
    long long v46 = v54;
    long long v47 = v55;
    long long v48 = v56;
    long long v45 = v53;
    long long v44 = v52;
    uint64_t v9 = v57;
    uint64_t v10 = v58;
    uint64_t v11 = v59;
    uint64_t v12 = v60;
    long long v39 = v62;
    long long v38 = v61;
    uint64_t v43 = v66;
    long long v42 = v65;
    long long v41 = v64;
    long long v40 = v63;
    if (v57)
    {
      double v13 = sub_100902EFC((uint64_t *)(a1 + 728), v57, v58);
      double v14 = v13;
      if (v7 < v13) {
        double v13 = v7;
      }
      if (v14 == -1.0) {
        double v15 = v7;
      }
      else {
        double v15 = v13;
      }
      double v16 = *(double *)(a1 + 232);
      if (v15 <= v16)
      {
        double v17 = v16 + 2.22044605e-16;
        if (v15 < v17) {
          double v15 = v17;
        }
        if (qword_1024191C0 != -1) {
          dispatch_once(&qword_1024191C0, &stru_1022C6C28);
        }
        long long v18 = qword_1024191C8;
        if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_FAULT))
        {
          uint64_t v19 = *(void *)(a1 + 232);
          *(_DWORD *)buf = 134218752;
          *(double *)&uint8_t buf[4] = v7;
          *(_WORD *)&buf[12] = 2048;
          *(double *)&unsigned char buf[14] = v14;
          *(_WORD *)&buf[22] = 2048;
          *(void *)&buf[24] = v19;
          *(_WORD *)long long v23 = 2048;
          *(double *)&v23[2] = v15;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "CLWorkoutSeriesPredictor, detected workout time must be later than current segment start time, adjusting detection time, detectedStartTime, %f, prewarmStartTime, %f, currentStartTime, %f, filteredStartTime, %f", buf, 0x2Au);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024191C0 != -1) {
            dispatch_once(&qword_1024191C0, &stru_1022C6C28);
          }
          long long v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLWorkoutSeriesPredictor::feedMotionStateUpdate(const CLWorkoutPredictorActivity &)", "%s\n", v20);
          if (v20 != buf) {
            free(v20);
          }
        }
      }
      *(void *)buf = v8;
      *(double *)&uint8_t buf[8] = v15;
      *(_OWORD *)&uint8_t buf[16] = v21;
      long long v24 = v45;
      long long v25 = v46;
      *(void *)long long v23 = 0xBFF0000000000000;
      long long v26 = v47;
      long long v27 = v48;
      *(_OWORD *)&v23[8] = v44;
      uint64_t v28 = v9;
      uint64_t v29 = v10;
      uint64_t v30 = v11;
      uint64_t v31 = v12;
      uint64_t v37 = v43;
      long long v36 = v42;
      long long v35 = v41;
      long long v34 = v40;
      long long v33 = v39;
      long long v32 = v38;
      sub_1001A34E0(a1, 3, (uint64_t)buf);
    }
    if (__p)
    {
      __int16 v68 = __p;
      operator delete(__p);
    }
  }
}

void sub_100746188(_Unwind_Exception *a1)
{
  int v2 = (void *)STACK[0x850];
  if (STACK[0x850])
  {
    STACK[0x858] = (unint64_t)v2;
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1007461BC(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  BOOL v3 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(CFAbsoluteTime *)&uint8_t buf[4] = Current;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, client confirmed manual pause, startTime,%f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::feedManualPause(const CLMotionStateMediator_Type::WorkoutSettings &)", "%s\n", v5);
    if (v5 != buf) {
      free(v5);
    }
  }
  *(CFAbsoluteTime *)buf = Current;
  return sub_1001A34E0(a1, 4, (uint64_t)buf);
}

uint64_t sub_10074638C(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  BOOL v3 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(CFAbsoluteTime *)&uint8_t buf[4] = Current;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, workout session end, endTime,%f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::endWorkoutSession()", "%s\n", v5);
    if (v5 != buf) {
      free(v5);
    }
  }
  *(CFAbsoluteTime *)buf = Current;
  return sub_1001A34E0(a1, 5, (uint64_t)buf);
}

uint64_t sub_10074655C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112) && *(void *)(a1 + 224))
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    int v2 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Tearing down CLWorkoutSeriesDetectionModelController", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C6C28);
      }
      uint64_t v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::teardownModelController()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    uint64_t v3 = *(void *)(a1 + 224);
    *(void *)(a1 + 224) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  return sub_100902D40(a1 + 728);
}

void sub_100746738(uint64_t a1, unsigned __int8 *a2)
{
  *(unsigned char *)(a1 + 114) = 0;
  long long v4 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a1 + 608) = v4;
  *(void *)(a1 + 624) = *(void *)(a1 + 456);
  long long v5 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 544) = v5;
  long long v6 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a1 + 576) = v6;
  long long v7 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 480) = v7;
  long long v8 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 512) = v8;
  uint64_t v9 = *(void **)(a1 + 224);
  if (v9) {
    sub_100EBECD8(v9, (uint64_t)a2, a2[232]);
  }
  sub_10132A400((int64x2_t *)(a1 + 128), a2, a2[232], (uint64_t)&v20);
  sub_1006ACE98(a1 + 672, (uint64_t)&v20);
  sub_100663B8C(&v20);
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  uint64_t v10 = *(void *)(a1 + 712);
  if (v10)
  {
    unint64_t v11 = *(void *)(*(void *)(a1 + 680) + 8 * ((v10 + *(void *)(a1 + 704) - 1) / 0x11uLL))
        + 232 * ((v10 + *(void *)(a1 + 704) - 1) % 0x11uLL);
    long long v31 = *(_OWORD *)(v11 + 176);
    long long v32 = *(_OWORD *)(v11 + 192);
    long long v33 = *(_OWORD *)(v11 + 208);
    uint64_t v34 = *(void *)(v11 + 224);
    long long v27 = *(_OWORD *)(v11 + 112);
    long long v28 = *(_OWORD *)(v11 + 128);
    long long v29 = *(_OWORD *)(v11 + 144);
    long long v30 = *(_OWORD *)(v11 + 160);
    long long v23 = *(_OWORD *)(v11 + 48);
    long long v24 = *(_OWORD *)(v11 + 64);
    long long v25 = *(_OWORD *)(v11 + 80);
    long long v26 = *(_OWORD *)(v11 + 96);
    long long v20 = *(_OWORD *)v11;
    long long v21 = *(_OWORD *)(v11 + 16);
    long long v22 = *(_OWORD *)(v11 + 32);
  }
  *(void *)(a1 + 456) = v34;
  long long v12 = v21;
  *(_OWORD *)(a1 + 232) = v20;
  *(_OWORD *)(a1 + 248) = v12;
  long long v13 = v33;
  *(_OWORD *)(a1 + 424) = v32;
  *(_OWORD *)(a1 + 440) = v13;
  long long v14 = v29;
  *(_OWORD *)(a1 + 360) = v28;
  *(_OWORD *)(a1 + 376) = v14;
  long long v15 = v31;
  *(_OWORD *)(a1 + 392) = v30;
  *(_OWORD *)(a1 + 408) = v15;
  long long v16 = v25;
  *(_OWORD *)(a1 + 296) = v24;
  *(_OWORD *)(a1 + 312) = v16;
  long long v17 = v27;
  *(_OWORD *)(a1 + 328) = v26;
  *(_OWORD *)(a1 + 344) = v17;
  long long v18 = v23;
  *(_OWORD *)(a1 + 264) = v22;
  *(_OWORD *)(a1 + 280) = v18;
  double Current = CFAbsoluteTimeGetCurrent();
  sub_10074531C(a1, 14, Current);
}

void sub_100746940(uint64_t a1, unsigned __int8 *a2)
{
  long long v4 = *(void **)(a1 + 224);
  if (v4) {
    sub_100EBEF04(v4, a2[232]);
  }
  sub_10132A400((int64x2_t *)(a1 + 128), a2, a2[232], (uint64_t)&v15);
  sub_1006ACE98(a1 + 672, (uint64_t)&v15);
  sub_100663B8C(&v15);
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v5 = *(void *)(a1 + 712);
  if (v5)
  {
    unint64_t v6 = *(void *)(*(void *)(a1 + 680) + 8 * ((v5 + *(void *)(a1 + 704) - 1) / 0x11uLL))
       + 232 * ((v5 + *(void *)(a1 + 704) - 1) % 0x11uLL);
    long long v26 = *(_OWORD *)(v6 + 176);
    long long v27 = *(_OWORD *)(v6 + 192);
    long long v28 = *(_OWORD *)(v6 + 208);
    uint64_t v29 = *(void *)(v6 + 224);
    long long v22 = *(_OWORD *)(v6 + 112);
    long long v23 = *(_OWORD *)(v6 + 128);
    long long v24 = *(_OWORD *)(v6 + 144);
    long long v25 = *(_OWORD *)(v6 + 160);
    long long v18 = *(_OWORD *)(v6 + 48);
    long long v19 = *(_OWORD *)(v6 + 64);
    long long v20 = *(_OWORD *)(v6 + 80);
    long long v21 = *(_OWORD *)(v6 + 96);
    long long v15 = *(_OWORD *)v6;
    long long v16 = *(_OWORD *)(v6 + 16);
    long long v17 = *(_OWORD *)(v6 + 32);
  }
  *(void *)(a1 + 456) = v29;
  long long v7 = v16;
  *(_OWORD *)(a1 + 232) = v15;
  *(_OWORD *)(a1 + 248) = v7;
  long long v8 = v28;
  *(_OWORD *)(a1 + 424) = v27;
  *(_OWORD *)(a1 + 440) = v8;
  long long v9 = v24;
  *(_OWORD *)(a1 + 360) = v23;
  *(_OWORD *)(a1 + 376) = v9;
  long long v10 = v26;
  *(_OWORD *)(a1 + 392) = v25;
  *(_OWORD *)(a1 + 408) = v10;
  long long v11 = v20;
  *(_OWORD *)(a1 + 296) = v19;
  *(_OWORD *)(a1 + 312) = v11;
  long long v12 = v22;
  *(_OWORD *)(a1 + 328) = v21;
  *(_OWORD *)(a1 + 344) = v12;
  long long v13 = v18;
  *(_OWORD *)(a1 + 264) = v17;
  *(_OWORD *)(a1 + 280) = v13;
  double Current = CFAbsoluteTimeGetCurrent();
  sub_10074531C(a1, 14, Current);
}

void sub_100746B0C(uint64_t a1, double *a2)
{
  *(double *)(a1 + 240) = *a2;
  sub_10074655C(a1);
  sub_10132B680((void *)(a1 + 128), (uint64_t)v5, *a2);
  sub_1006ACE98(a1 + 672, (uint64_t)v5);
  sub_100663B8C(v5);
  sub_100744FEC(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_10074531C(a1, 16, Current);
}

void sub_100746B80(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 264) = a2[2];
  *(_OWORD *)(a1 + 248) = v4;
  *(_OWORD *)(a1 + 232) = v3;
  long long v5 = a2[3];
  long long v6 = a2[4];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 312) = a2[5];
  *(_OWORD *)(a1 + 328) = v7;
  *(_OWORD *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 296) = v6;
  long long v8 = a2[7];
  long long v9 = a2[8];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 376) = a2[9];
  *(_OWORD *)(a1 + 392) = v10;
  *(_OWORD *)(a1 + 344) = v8;
  *(_OWORD *)(a1 + 360) = v9;
  long long v11 = a2[11];
  long long v12 = a2[12];
  long long v13 = a2[13];
  uint64_t v14 = *((void *)a2 + 28);
  *(void *)(a1 + 456) = v14;
  *(_OWORD *)(a1 + 424) = v12;
  *(_OWORD *)(a1 + 440) = v13;
  *(_OWORD *)(a1 + 408) = v11;
  long long v15 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a1 + 608) = v15;
  *(void *)(a1 + 624) = v14;
  long long v16 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 544) = v16;
  long long v17 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a1 + 576) = v17;
  long long v18 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a1 + 480) = v18;
  long long v19 = *(_OWORD *)(a1 + 344);
  *(_OWORD *)(a1 + 496) = *(_OWORD *)(a1 + 328);
  *(_OWORD *)(a1 + 512) = v19;
  sub_10132A400((int64x2_t *)(a1 + 128), (unsigned __int8 *)a2, *((unsigned __int8 *)a2 + 232), (uint64_t)v20);
  sub_1006ACE98(a1 + 672, (uint64_t)v20);
  sub_100663B8C(v20);
  sub_100746C58(a1);
}

void sub_100746C58(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  int v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, exiting manual pause", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::exitManualPause(const T *) [T = CLWorkoutSeriesPredictor::EWorkoutConfirmed]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100744D54(a1);
  sub_100744FEC(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_10074531C(a1, 17, Current);
}

void sub_100746E0C(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(_OWORD *)(a1 + 264) = a2[2];
  *(_OWORD *)(a1 + 248) = v4;
  *(_OWORD *)(a1 + 232) = v3;
  long long v5 = a2[3];
  long long v6 = a2[4];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 312) = a2[5];
  *(_OWORD *)(a1 + 328) = v7;
  *(_OWORD *)(a1 + 280) = v5;
  *(_OWORD *)(a1 + 296) = v6;
  long long v8 = a2[7];
  long long v9 = a2[8];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 376) = a2[9];
  *(_OWORD *)(a1 + 392) = v10;
  *(_OWORD *)(a1 + 344) = v8;
  *(_OWORD *)(a1 + 360) = v9;
  long long v11 = a2[11];
  long long v12 = a2[12];
  long long v13 = a2[13];
  *(void *)(a1 + 456) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 424) = v12;
  *(_OWORD *)(a1 + 440) = v13;
  *(_OWORD *)(a1 + 408) = v11;
  sub_10132A400((int64x2_t *)(a1 + 128), (unsigned __int8 *)a2, *((unsigned __int8 *)a2 + 232), (uint64_t)v14);
  sub_1006ACE98(a1 + 672, (uint64_t)v14);
  sub_100663B8C(v14);
  sub_100746EB8(a1);
}

void sub_100746EB8(uint64_t a1)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  int v2 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, exiting manual pause", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    long long v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::exitManualPause(const T *) [T = CLWorkoutSeriesPredictor::ETransitionConfirmed]", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_100744D54(a1);
  sub_100744FEC(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_10074531C(a1, 17, Current);
}

void sub_10074706C(uint64_t a1, long long *a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  long long v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, exiting manual pause into detected transition", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    long long v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::enterSegmentDetectedFromManualPause(const EWorkoutConfirmed *)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  long long v7 = *(_OWORD *)(a1 + 240);
  long long v18 = *(_OWORD *)(a1 + 424);
  long long v19 = *(_OWORD *)(a1 + 440);
  uint64_t v20 = *(void *)(a1 + 456);
  long long v14 = *(_OWORD *)(a1 + 360);
  long long v15 = *(_OWORD *)(a1 + 376);
  long long v16 = *(_OWORD *)(a1 + 392);
  long long v17 = *(_OWORD *)(a1 + 408);
  long long v10 = *(_OWORD *)(a1 + 296);
  long long v11 = *(_OWORD *)(a1 + 312);
  long long v12 = *(_OWORD *)(a1 + 328);
  long long v13 = *(_OWORD *)(a1 + 344);
  long long v8 = *(_OWORD *)(a1 + 264);
  long long v9 = *(_OWORD *)(a1 + 280);
  sub_100746B80(a1, a2);
  *(CFAbsoluteTime *)buf = Current;
  CFAbsoluteTime v22 = Current;
  long long v23 = v7;
  CFAbsoluteTime v24 = Current;
  long long v34 = v17;
  long long v35 = v18;
  long long v36 = v19;
  long long v30 = v13;
  long long v31 = v14;
  long long v32 = v15;
  long long v33 = v16;
  long long v26 = v9;
  long long v27 = v10;
  long long v28 = v11;
  uint64_t v37 = v20;
  long long v29 = v12;
  long long v25 = v8;
  sub_1007472DC(a1, (uint64_t)buf);
}

__n128 sub_1007472DC(uint64_t a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  long long v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a2 + 120);
    uint64_t v6 = *(void *)(a2 + 128);
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)buf = 134218496;
    uint64_t v23 = v5;
    __int16 v24 = 2048;
    uint64_t v25 = v6;
    __int16 v26 = 2048;
    uint64_t v27 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, auto-detected new workout, workoutType,%ld, workoutLocationType,%ld, detectionTime,%f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    long long v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::enterSegmentDetected(const ESegmentDetected *)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
  }
  if (*(unsigned char *)(a1 + 114)) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = *(void *)(a2 + 120) != 33;
  }
  *(unsigned char *)(a1 + 114) = v8;
  sub_10132B038((void *)(a1 + 128), (long long *)(a2 + 8), (uint64_t)buf);
  sub_1006ACE98(a1 + 672, (uint64_t)buf);
  sub_100663B8C(buf);
  sub_100EBF0B0(*(void **)(a1 + 224), a2 + 8);
  long long v9 = *(_OWORD *)(a2 + 8);
  long long v10 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 248) = v10;
  *(_OWORD *)(a1 + 232) = v9;
  long long v11 = *(_OWORD *)(a2 + 56);
  long long v12 = *(_OWORD *)(a2 + 72);
  long long v13 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 328) = v13;
  *(_OWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 296) = v12;
  long long v14 = *(_OWORD *)(a2 + 120);
  long long v15 = *(_OWORD *)(a2 + 136);
  long long v16 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 392) = v16;
  *(_OWORD *)(a1 + 344) = v14;
  *(_OWORD *)(a1 + 360) = v15;
  long long v17 = *(_OWORD *)(a2 + 184);
  long long v18 = *(_OWORD *)(a2 + 200);
  long long v19 = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 456) = *(void *)(a2 + 232);
  *(_OWORD *)(a1 + 424) = v18;
  *(_OWORD *)(a1 + 440) = v19;
  *(_OWORD *)(a1 + 408) = v17;
  *(void *)(a1 + 840) = *(void *)(a1 + 232);
  sub_10074531C(a1, 18, *(double *)a2);
  return result;
}

void sub_100747598(uint64_t a1, double *a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C6C28);
  }
  long long v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutSeriesPredictor, auto-detected current confirmed workout, removing detected transition", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C6C28);
    }
    long long v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutSeriesPredictor::returnToConfirmedWorkout(const ESegmentDetected *)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  sub_10132B0CC((void *)(a1 + 128), (uint64_t)(a2 + 1), (uint64_t)buf);
  sub_1006ACE98(a1 + 672, (uint64_t)buf);
  sub_100663B8C(buf);
  sub_100EBF0B0(*(void **)(a1 + 224), (uint64_t)(a2 + 1));
  unint64_t v5 = *(void *)(a1 + 712) + *(void *)(a1 + 704) - 1;
  unint64_t v6 = *(void *)(*(void *)(a1 + 680) + 8 * (v5 / 0x11)) + 232 * (v5 % 0x11);
  long long v8 = *(_OWORD *)(v6 + 16);
  long long v7 = *(_OWORD *)(v6 + 32);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)v6;
  *(_OWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 264) = v7;
  long long v9 = *(_OWORD *)(v6 + 96);
  long long v11 = *(_OWORD *)(v6 + 48);
  long long v10 = *(_OWORD *)(v6 + 64);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(v6 + 80);
  *(_OWORD *)(a1 + 328) = v9;
  *(_OWORD *)(a1 + 280) = v11;
  *(_OWORD *)(a1 + 296) = v10;
  long long v12 = *(_OWORD *)(v6 + 160);
  long long v14 = *(_OWORD *)(v6 + 112);
  long long v13 = *(_OWORD *)(v6 + 128);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(v6 + 144);
  *(_OWORD *)(a1 + 392) = v12;
  *(_OWORD *)(a1 + 344) = v14;
  *(_OWORD *)(a1 + 360) = v13;
  long long v16 = *(_OWORD *)(v6 + 192);
  long long v15 = *(_OWORD *)(v6 + 208);
  long long v17 = *(_OWORD *)(v6 + 176);
  *(void *)(a1 + 456) = *(void *)(v6 + 224);
  *(_OWORD *)(a1 + 424) = v16;
  *(_OWORD *)(a1 + 440) = v15;
  *(_OWORD *)(a1 + 408) = v17;
  *(CFAbsoluteTime *)(a1 + 840) = CFAbsoluteTimeGetCurrent();
  sub_10074531C(a1, 18, *a2);
}

uint64_t sub_100747808(uint64_t a1, double *a2)
{
  sub_10132B680((void *)(a1 + 128), (uint64_t)&v14, *a2);
  sub_1006ACE98(a1 + 672, (uint64_t)&v14);
  sub_100663B8C(&v14);
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t v4 = *(void *)(a1 + 712);
  if (v4)
  {
    unint64_t v5 = *(void *)(*(void *)(a1 + 680) + 8 * ((v4 + *(void *)(a1 + 704) - 1) / 0x11uLL))
       + 232 * ((v4 + *(void *)(a1 + 704) - 1) % 0x11uLL);
    long long v25 = *(_OWORD *)(v5 + 176);
    long long v26 = *(_OWORD *)(v5 + 192);
    long long v27 = *(_OWORD *)(v5 + 208);
    uint64_t v28 = *(void *)(v5 + 224);
    long long v21 = *(_OWORD *)(v5 + 112);
    long long v22 = *(_OWORD *)(v5 + 128);
    long long v23 = *(_OWORD *)(v5 + 144);
    long long v24 = *(_OWORD *)(v5 + 160);
    long long v17 = *(_OWORD *)(v5 + 48);
    long long v18 = *(_OWORD *)(v5 + 64);
    long long v19 = *(_OWORD *)(v5 + 80);
    long long v20 = *(_OWORD *)(v5 + 96);
    long long v14 = *(_OWORD *)v5;
    long long v15 = *(_OWORD *)(v5 + 16);
    long long v16 = *(_OWORD *)(v5 + 32);
  }
  *(void *)(a1 + 456) = v28;
  long long v6 = v15;
  *(_OWORD *)(a1 + 232) = v14;
  *(_OWORD *)(a1 + 248) = v6;
  long long v7 = v27;
  *(_OWORD *)(a1 + 424) = v26;
  *(_OWORD *)(a1 + 440) = v7;
  long long v8 = v23;
  *(_OWORD *)(a1 + 360) = v22;
  *(_OWORD *)(a1 + 376) = v8;
  long long v9 = v25;
  *(_OWORD *)(a1 + 392) = v24;
  *(_OWORD *)(a1 + 408) = v9;
  long long v10 = v19;
  *(_OWORD *)(a1 + 296) = v18;
  *(_OWORD *)(a1 + 312) = v10;
  long long v11 = v21;
  *(_OWORD *)(a1 + 328) = v20;
  *(_OWORD *)(a1 + 344) = v11;
  long long v12 = v17;
  *(_OWORD *)(a1 + 264) = v16;
  *(_OWORD *)(a1 + 280) = v12;
  *(double *)(a1 + 240) = *a2;
  sub_100744FEC(a1);
  sub_10074531C(a1, 15, *a2);
  return sub_10074655C(a1);
}

void sub_1007479D8(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100747A0C()
{
}

void *sub_100747A20(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_1022C6C58;
  result[1] = v3;
  return result;
}

uint64_t sub_100747A68(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022C6C58;
  a2[1] = v2;
  return result;
}

uint64_t sub_100747A94(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 8) + 720);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 56))();
  }
  return result;
}

uint64_t sub_100747AC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100747B08()
{
}

void sub_100747E28(id a1)
{
  qword_102419208 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PredictedWalkDistance");
}

uint64_t sub_100747E58()
{
  if (qword_10248A330) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A330 + 8))(qword_10248A330);
  }
  if (qword_10248A338) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A338 + 8))(qword_10248A338);
  }
  if (qword_10248A340) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A340 + 8))(qword_10248A340);
  }
  if (qword_10248A348) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A348 + 8))(qword_10248A348);
  }
  if (qword_10248A350) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A350 + 8))(qword_10248A350);
  }
  if (qword_10248A358) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A358 + 8))(qword_10248A358);
  }
  if (qword_10248A360) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A360 + 8))(qword_10248A360);
  }
  if (qword_10248A368) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A368 + 8))(qword_10248A368);
  }
  if (qword_10248A370) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A370 + 8))(qword_10248A370);
  }
  if (qword_10248A378) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A378 + 8))(qword_10248A378);
  }
  if (qword_10248A380) {
    (*(void (**)(uint64_t))(*(void *)qword_10248A380 + 8))(qword_10248A380);
  }
  uint64_t result = qword_10248A388;
  if (qword_10248A388)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)qword_10248A388 + 8);
    return v1();
  }
  return result;
}

void sub_1007480C0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  if ((byte_10247D5E1 & 1) == 0)
  {
    byte_10247D5E1 = 1;
    uint64_t v4 = wireless_diagnostics::google::protobuf::internal::VerifyVersion((wireless_diagnostics::google::protobuf::internal *)0x1E9808, 2005000, (int)"/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GnssTypes.pb.cc", a4);
    sub_100E18714(v4, v5, v6, v7);
    operator new();
  }
}

double sub_10074856C(uint64_t a1)
{
  *(void *)a1 = off_1022C6CF8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  return result;
}

double sub_1007485A8(uint64_t a1)
{
  *(void *)a1 = off_1022C6E60;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  return result;
}

double sub_1007485D8(uint64_t a1)
{
  *(void *)a1 = &off_1022C6F50;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

uint64_t sub_100748608(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022C6FC8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_100748630(uint64_t result)
{
  *(void *)double result = off_1022C7040;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_100748658(uint64_t result)
{
  *(void *)double result = off_1022C70B8;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

double sub_100748680(uint64_t a1)
{
  *(void *)a1 = off_1022C7130;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  return result;
}

uint64_t sub_1007486B0(uint64_t result)
{
  *(void *)double result = off_1022C71A8;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_1007486D8(uint64_t result)
{
  *(void *)(result + 32) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)double result = off_1022C7220;
  *(unsigned char *)(result + 24) = 0;
  return result;
}

BOOL sub_100748708(unsigned int a1)
{
  return a1 < 0xA;
}

BOOL sub_100748714(unsigned int a1)
{
  BOOL result = 1;
  if (a1 > 0x32 || ((1 << a1) & 0x4000002000403) == 0) {
    return a1 == 75;
  }
  return result;
}

uint64_t sub_100748754(unsigned int a1)
{
  return (a1 < 0x10) & (0x807Fu >> a1);
}

void sub_10074876C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v17);
  }
  int v4 = *(_DWORD *)(a2 + 96);
  if (!(_BYTE)v4) {
    goto LABEL_13;
  }
  if (v4)
  {
    uint64_t v10 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 96) |= 1u;
    *(void *)(a1 + 8) = v10;
    int v4 = *(_DWORD *)(a2 + 96);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  uint64_t v11 = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 96) |= 2u;
  *(void *)(a1 + 16) = v11;
  int v4 = *(_DWORD *)(a2 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t v12 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 96) |= 4u;
  *(void *)(a1 + 24) = v12;
  int v4 = *(_DWORD *)(a2 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t v13 = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 96) |= 8u;
  *(void *)(a1 + 32) = v13;
  int v4 = *(_DWORD *)(a2 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_30:
    uint64_t v15 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 96) |= 0x20u;
    *(void *)(a1 + 48) = v15;
    int v4 = *(_DWORD *)(a2 + 96);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t v14 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 96) |= 0x10u;
  *(void *)(a1 + 40) = v14;
  int v4 = *(_DWORD *)(a2 + 96);
  if ((v4 & 0x20) != 0) {
    goto LABEL_30;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_31:
  uint64_t v16 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 96) |= 0x40u;
  *(void *)(a1 + 56) = v16;
  int v4 = *(_DWORD *)(a2 + 96);
  if ((v4 & 0x80) != 0)
  {
LABEL_12:
    uint64_t v5 = *(void *)(a2 + 64);
    *(_DWORD *)(a1 + 96) |= 0x80u;
    *(void *)(a1 + 64) = v5;
    int v4 = *(_DWORD *)(a2 + 96);
  }
LABEL_13:
  if ((v4 & 0xFF00) != 0)
  {
    if ((v4 & 0x100) != 0)
    {
      int v6 = *(_DWORD *)(a2 + 72);
      *(_DWORD *)(a1 + 96) |= 0x100u;
      *(_DWORD *)(a1 + 72) = v6;
      int v4 = *(_DWORD *)(a2 + 96);
    }
    if ((v4 & 0x200) != 0)
    {
      unsigned int v7 = *(_DWORD *)(a2 + 76);
      if (!sub_100748714(v7)) {
        sub_101A6C6E0();
      }
      *(_DWORD *)(a1 + 96) |= 0x200u;
      *(_DWORD *)(a1 + 76) = v7;
      int v4 = *(_DWORD *)(a2 + 96);
    }
    if ((v4 & 0x400) != 0)
    {
      uint64_t v8 = *(void *)(a2 + 80);
      *(_DWORD *)(a1 + 96) |= 0x400u;
      *(void *)(a1 + 80) = v8;
      int v4 = *(_DWORD *)(a2 + 96);
    }
    if ((v4 & 0x800) != 0)
    {
      unsigned int v9 = *(_DWORD *)(a2 + 88);
      if (v9 >= 6) {
        sub_101A6C6B4();
      }
      *(_DWORD *)(a1 + 96) |= 0x800u;
      *(_DWORD *)(a1 + 88) = v9;
    }
  }
}

void sub_100748980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100748998(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6CF8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_1007489B8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6CF8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_100748A0C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A330;
  if (!qword_10248A330)
  {
    sub_1007480C0(0, a2, a3, a4);
    return qword_10248A330;
  }
  return result;
}

void sub_100748A3C()
{
}

uint64_t sub_100748AA0(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 96);
  if ((_BYTE)v1)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  if ((v1 & 0xFF00) != 0)
  {
    *(void *)(result + 72) = 0;
    *(void *)(result + 80) = 0;
    *(_DWORD *)(result + 88) = 0;
  }
  *(_DWORD *)(result + 96) = 0;
  return result;
}

uint64_t sub_100748AD8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)(a1 + 72);
  int v6 = (unint64_t *)(a1 + 80);
  while (2)
  {
    unsigned int v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_59;
        }
        *(void *)long long v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v30;
        }
        *(_DWORD *)(a1 + 96) |= 1u;
        uint64_t v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 != 17) {
          continue;
        }
        *((void *)this + 1) = v10 + 1;
        goto LABEL_15;
      case 2u:
        int v9 = TagFallback & 7;
        if (v9 != 1) {
          goto LABEL_59;
        }
LABEL_15:
        *(void *)long long v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0; {
        *(void *)(a1 + 16) = *(void *)v30;
        }
        *(_DWORD *)(a1 + 96) |= 2u;
        uint64_t v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 != 25) {
          continue;
        }
        *((void *)this + 1) = v11 + 1;
LABEL_20:
        *(void *)long long v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0; {
        *(void *)(a1 + 24) = *(void *)v30;
        }
        *(_DWORD *)(a1 + 96) |= 4u;
        uint64_t v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 != 33) {
          continue;
        }
        *((void *)this + 1) = v12 + 1;
LABEL_25:
        *(void *)long long v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0; {
        *(void *)(a1 + 32) = *(void *)v30;
        }
        *(_DWORD *)(a1 + 96) |= 8u;
        uint64_t v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 41) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_30:
        *(void *)long long v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0; {
        *(void *)(a1 + 40) = *(void *)v30;
        }
        *(_DWORD *)(a1 + 96) |= 0x10u;
        uint64_t v14 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 != 49) {
          continue;
        }
        *((void *)this + 1) = v14 + 1;
LABEL_35:
        *(void *)long long v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0; {
        *(void *)(a1 + 48) = *(void *)v30;
        }
        *(_DWORD *)(a1 + 96) |= 0x20u;
        uint64_t v15 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v15 >= *((void *)this + 2) || *v15 != 57) {
          continue;
        }
        *((void *)this + 1) = v15 + 1;
LABEL_40:
        *(void *)long long v30 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30) & 1) == 0)return 0; {
        *(void *)(a1 + 56) = *(void *)v30;
        }
        *(_DWORD *)(a1 + 96) |= 0x40u;
        uint64_t v16 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v16 >= *((void *)this + 2) || *v16 != 65) {
          continue;
        }
        *((void *)this + 1) = v16 + 1;
LABEL_45:
        *(void *)long long v30 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v30))
        {
          *(void *)(a1 + 64) = *(void *)v30;
          *(_DWORD *)(a1 + 96) |= 0x80u;
          long long v18 = (unsigned char *)*((void *)this + 1);
          unint64_t v17 = *((void *)this + 2);
          if ((unint64_t)v18 < v17 && *v18 == 72)
          {
            long long v19 = v18 + 1;
            *((void *)this + 1) = v19;
LABEL_51:
            if ((unint64_t)v19 >= v17 || *v19 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
              if (!result) {
                return result;
              }
              long long v20 = (unsigned char *)*((void *)this + 1);
              unint64_t v17 = *((void *)this + 2);
            }
            else
            {
              *uint64_t v5 = *v19;
              long long v20 = v19 + 1;
              *((void *)this + 1) = v20;
            }
            *(_DWORD *)(a1 + 96) |= 0x100u;
            if ((unint64_t)v20 < v17 && *v20 == 80)
            {
              long long v21 = v20 + 1;
              *((void *)this + 1) = v21;
LABEL_68:
              v30[0] = 0;
              if ((unint64_t)v21 >= v17 || *v21 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30);
                if (!result) {
                  return result;
                }
                unsigned int v26 = v30[0];
              }
              else
              {
                unsigned int v26 = *v21;
                *((void *)this + 1) = v21 + 1;
              }
              if (sub_100748714(v26))
              {
                *(_DWORD *)(a1 + 96) |= 0x200u;
                *(_DWORD *)(a1 + 76) = v26;
              }
              long long v27 = (unsigned char *)*((void *)this + 1);
              unint64_t v22 = *((void *)this + 2);
              if ((unint64_t)v27 < v22 && *v27 == 88)
              {
                long long v23 = v27 + 1;
                *((void *)this + 1) = v23;
LABEL_78:
                if ((unint64_t)v23 >= v22 || *v23 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
                  if (!result) {
                    return result;
                  }
                  uint64_t v28 = (unsigned char *)*((void *)this + 1);
                  unint64_t v22 = *((void *)this + 2);
                }
                else
                {
                  *int v6 = *v23;
                  uint64_t v28 = v23 + 1;
                  *((void *)this + 1) = v28;
                }
                *(_DWORD *)(a1 + 96) |= 0x400u;
                if ((unint64_t)v28 < v22 && *v28 == 96)
                {
                  long long v24 = v28 + 1;
                  *((void *)this + 1) = v24;
LABEL_86:
                  v30[0] = 0;
                  if ((unint64_t)v24 >= v22 || *v24 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v30);
                    if (!result) {
                      return result;
                    }
                    unsigned int v29 = v30[0];
                  }
                  else
                  {
                    unsigned int v29 = *v24;
                    *((void *)this + 1) = v24 + 1;
                  }
                  if (v29 <= 5)
                  {
                    *(_DWORD *)(a1 + 96) |= 0x800u;
                    *(_DWORD *)(a1 + 88) = v29;
                  }
                  if (*((void *)this + 1) == *((void *)this + 2)
                    && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                  {
                    *((_DWORD *)this + 8) = 0;
                    uint64_t result = 1;
                    *((unsigned char *)this + 36) = 1;
                    return result;
                  }
                }
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_20;
        }
        goto LABEL_59;
      case 4u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_25;
        }
        goto LABEL_59;
      case 5u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_30;
        }
        goto LABEL_59;
      case 6u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_35;
        }
        goto LABEL_59;
      case 7u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_40;
        }
        goto LABEL_59;
      case 8u:
        int v9 = TagFallback & 7;
        if (v9 == 1) {
          goto LABEL_45;
        }
        goto LABEL_59;
      case 9u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_59;
        }
        long long v19 = (char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        goto LABEL_51;
      case 0xAu:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_59;
        }
        long long v21 = (char *)*((void *)this + 1);
        unint64_t v17 = *((void *)this + 2);
        goto LABEL_68;
      case 0xBu:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_59;
        }
        long long v23 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_78;
      case 0xCu:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_59;
        }
        long long v24 = (char *)*((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        goto LABEL_86;
      default:
        int v9 = TagFallback & 7;
LABEL_59:
        if (v9 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10074909C(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 96);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 96);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(double *)(v5 + 48), a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(double *)(v5 + 56), a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x80) == 0)
  {
LABEL_9:
    if ((v6 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, a2, *(double *)(v5 + 64), a3);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x100) == 0)
  {
LABEL_10:
    if ((v6 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, *(_DWORD *)(v5 + 72), a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x200) == 0)
  {
LABEL_11:
    if ((v6 & 0x400) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xB, *(void *)(v5 + 80), a2, a4);
    if ((*(_DWORD *)(v5 + 96) & 0x800) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xA, *(_DWORD *)(v5 + 76), a2, a4);
  int v6 = *(_DWORD *)(v5 + 96);
  if ((v6 & 0x400) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v6 & 0x800) == 0) {
    return result;
  }
LABEL_25:
  int v7 = *(_DWORD *)(v5 + 88);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)0xC, v7, a2, a4);
}

uint64_t sub_100749224(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 96);
  if ((_BYTE)v3)
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x10) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x20) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x40) != 0) {
      v4 += 9;
    }
    if ((v3 & 0x80) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
      if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 96);
      }
      else
      {
        int v7 = 2;
      }
      uint64_t v5 = (v7 + v5);
      if ((v3 & 0x200) == 0)
      {
LABEL_21:
        if ((v3 & 0x400) == 0) {
          goto LABEL_22;
        }
        goto LABEL_34;
      }
    }
    else if ((v3 & 0x200) == 0)
    {
      goto LABEL_21;
    }
    uint64_t v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
    if ((v8 & 0x80000000) != 0)
    {
      int v9 = 11;
    }
    else if (v8 >= 0x80)
    {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 96);
    }
    else
    {
      int v9 = 2;
    }
    uint64_t v5 = (v9 + v5);
    if ((v3 & 0x400) == 0)
    {
LABEL_22:
      if ((v3 & 0x800) == 0) {
        goto LABEL_41;
      }
LABEL_35:
      uint64_t v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 88);
      if ((v10 & 0x80000000) != 0)
      {
        int v11 = 11;
      }
      else if (v10 >= 0x80)
      {
        int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
      }
      else
      {
        int v11 = 2;
      }
      uint64_t v5 = (v11 + v5);
      goto LABEL_41;
    }
LABEL_34:
    uint64_t v5 = v5
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 80), a2)+ 1;
    if ((*(_DWORD *)(a1 + 96) & 0x800) == 0) {
      goto LABEL_41;
    }
    goto LABEL_35;
  }
LABEL_41:
  *(_DWORD *)(a1 + 92) = v5;
  return v5;
}

void sub_10074937C(uint64_t a1, void *lpsrc)
{
  sub_10074876C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100749404()
{
  return 1;
}

void *sub_10074940C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.Position");
}

double sub_10074941C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v6);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 60);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 60))
    {
      double result = *(double *)(a2 + 8);
      *(_DWORD *)(a1 + 60) |= 1u;
      *(double *)(a1 + 8) = result;
      int v5 = *(_DWORD *)(a2 + 60);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_14;
      }
    }
    else if ((*(unsigned char *)(a2 + 60) & 2) == 0)
    {
      goto LABEL_6;
    }
    double result = *(double *)(a2 + 16);
    *(_DWORD *)(a1 + 60) |= 2u;
    *(double *)(a1 + 16) = result;
    int v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
LABEL_14:
    double result = *(double *)(a2 + 24);
    *(_DWORD *)(a1 + 60) |= 4u;
    *(double *)(a1 + 24) = result;
    int v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_8:
      if ((v5 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_16;
    }
LABEL_15:
    double result = *(double *)(a2 + 32);
    *(_DWORD *)(a1 + 60) |= 8u;
    *(double *)(a1 + 32) = result;
    int v5 = *(_DWORD *)(a2 + 60);
    if ((v5 & 0x10) == 0)
    {
LABEL_9:
      if ((v5 & 0x20) == 0) {
        return result;
      }
      goto LABEL_10;
    }
LABEL_16:
    double result = *(double *)(a2 + 40);
    *(_DWORD *)(a1 + 60) |= 0x10u;
    *(double *)(a1 + 40) = result;
    if ((*(_DWORD *)(a2 + 60) & 0x20) == 0) {
      return result;
    }
LABEL_10:
    double result = *(double *)(a2 + 48);
    *(_DWORD *)(a1 + 60) |= 0x20u;
    *(double *)(a1 + 48) = result;
  }
  return result;
}

void sub_100749550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100749568(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6D70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100749588(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6D70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_1007495DC()
{
}

uint64_t sub_100749638(uint64_t result)
{
  if (*(unsigned char *)(result + 60))
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 60) = 0;
  return result;
}

uint64_t sub_100749658(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    int v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_39;
        }
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 8) = v14;
        *(_DWORD *)(a1 + 60) |= 1u;
        uint64_t v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 != 17) {
          continue;
        }
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_39;
        }
LABEL_14:
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 16) = v14;
        *(_DWORD *)(a1 + 60) |= 2u;
        int v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 != 25) {
          continue;
        }
        *((void *)this + 1) = v9 + 1;
LABEL_19:
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 24) = v14;
        *(_DWORD *)(a1 + 60) |= 4u;
        uint64_t v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 != 33) {
          continue;
        }
        *((void *)this + 1) = v10 + 1;
LABEL_24:
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 32) = v14;
        *(_DWORD *)(a1 + 60) |= 8u;
        int v11 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v11 >= *((void *)this + 2) || *v11 != 41) {
          continue;
        }
        *((void *)this + 1) = v11 + 1;
LABEL_29:
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 40) = v14;
        *(_DWORD *)(a1 + 60) |= 0x10u;
        uint64_t v12 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v12 >= *((void *)this + 2) || *v12 != 49) {
          continue;
        }
        *((void *)this + 1) = v12 + 1;
LABEL_34:
        unint64_t v14 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, &v14) & 1) == 0) {
          return 0;
        }
        *(void *)(a1 + 48) = v14;
        *(_DWORD *)(a1 + 60) |= 0x20u;
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_19;
        }
        goto LABEL_39;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_24;
        }
        goto LABEL_39;
      case 5u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_29;
        }
        goto LABEL_39;
      case 6u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_34;
        }
        goto LABEL_39;
      default:
        int v7 = TagFallback & 7;
LABEL_39:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
    return result;
  }
}

uint64_t sub_100749958(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3)
{
  uint64_t v4 = result;
  int v5 = *(_DWORD *)(result + 60);
  if (v5)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v5 = *(_DWORD *)(v4 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v4 + 16), a3);
  int v5 = *(_DWORD *)(v4 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v4 + 24), a3);
  int v5 = *(_DWORD *)(v4 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, a2, *(double *)(v4 + 40), a3);
    if ((*(_DWORD *)(v4 + 60) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v4 + 32), a3);
  int v5 = *(_DWORD *)(v4 + 60);
  if ((v5 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v5 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  double v6 = *(double *)(v4 + 48);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, v6, a3);
}

uint64_t sub_100749A38(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 60);
  if (*(unsigned char *)(a1 + 60))
  {
    unsigned int v2 = ((int)(v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0) {
      v2 += 9;
    }
    if ((v1 & 4) != 0) {
      v2 += 9;
    }
    if ((v1 & 8) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x10) != 0) {
      v2 += 9;
    }
    if ((v1 & 0x20) != 0) {
      uint64_t v1 = v2 + 9;
    }
    else {
      uint64_t v1 = v2;
    }
  }
  *(_DWORD *)(a1 + 56) = v1;
  return v1;
}

double sub_100749A94(uint64_t a1, void *lpsrc)
{
  return sub_10074941C(a1, (uint64_t)lpsrc);
}

uint64_t sub_100749B1C()
{
  return 1;
}

void *sub_100749B24@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.Velocity");
}

void sub_100749B34(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v14);
  }
  int v4 = *(_DWORD *)(a2 + 72);
  if (!(_BYTE)v4) {
    goto LABEL_13;
  }
  if (v4)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(_DWORD *)(a1 + 72) |= 1u;
    *(void *)(a1 + 8) = v7;
    int v4 = *(_DWORD *)(a2 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_6;
  }
  int v8 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 72) |= 2u;
  *(_DWORD *)(a1 + 16) = v8;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  char v9 = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 72) |= 4u;
  *(unsigned char *)(a1 + 20) = v9;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  int v10 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 72) |= 8u;
  *(_DWORD *)(a1 + 64) = v10;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_21:
    uint64_t v12 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 72) |= 0x20u;
    *(void *)(a1 + 32) = v12;
    int v4 = *(_DWORD *)(a2 + 72);
    if ((v4 & 0x40) == 0)
    {
LABEL_11:
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_20:
  uint64_t v11 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 72) |= 0x10u;
  *(void *)(a1 + 24) = v11;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x20) != 0) {
    goto LABEL_21;
  }
LABEL_10:
  if ((v4 & 0x40) == 0) {
    goto LABEL_11;
  }
LABEL_22:
  uint64_t v13 = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 72) |= 0x40u;
  *(void *)(a1 + 40) = v13;
  int v4 = *(_DWORD *)(a2 + 72);
  if ((v4 & 0x80) != 0)
  {
LABEL_12:
    uint64_t v5 = *(void *)(a2 + 48);
    *(_DWORD *)(a1 + 72) |= 0x80u;
    *(void *)(a1 + 48) = v5;
    int v4 = *(_DWORD *)(a2 + 72);
  }
LABEL_13:
  if ((v4 & 0x100) != 0)
  {
    uint64_t v6 = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 72) |= 0x100u;
    *(void *)(a1 + 56) = v6;
  }
}

void sub_100749CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100749CE0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6DE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_100749D00(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6DE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_100749D54()
{
}

uint64_t sub_100749DB8(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 72);
  if ((_BYTE)v1)
  {
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(unsigned char *)(result + 20) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
  }
  if ((v1 & 0xFF00) != 0) {
    *(void *)(result + 56) = 0;
  }
  *(_DWORD *)(result + 72) = 0;
  return result;
}

uint64_t sub_100749DF4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unint64_t *)(a1 + 8);
  uint64_t v6 = (unint64_t *)(a1 + 24);
  uint64_t v7 = (unint64_t *)(a1 + 48);
  int v8 = (unint64_t *)(a1 + 56);
  while (2)
  {
    char v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v9;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v9 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v12 = *((void *)this + 2);
        if ((unint64_t)v13 >= v12 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!result) {
            return result;
          }
          unint64_t v14 = (unsigned char *)*((void *)this + 1);
          unint64_t v12 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v5 = *v13;
          unint64_t v14 = v13 + 1;
          *((void *)this + 1) = v14;
        }
        *(_DWORD *)(a1 + 72) |= 1u;
        if ((unint64_t)v14 < v12 && *v14 == 21)
        {
          *((void *)this + 1) = v14 + 1;
          goto LABEL_37;
        }
        continue;
      case 2u:
        int v11 = TagFallback & 7;
        if (v11 != 5) {
          goto LABEL_28;
        }
LABEL_37:
        v33[0] = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, v33) & 1) == 0) {
          return 0;
        }
        *(_DWORD *)(a1 + 16) = v33[0];
        *(_DWORD *)(a1 + 72) |= 2u;
        long long v23 = (unsigned char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        if ((unint64_t)v23 >= v15 || *v23 != 24) {
          continue;
        }
        uint64_t v16 = v23 + 1;
        *((void *)this + 1) = v16;
LABEL_41:
        v33[0] = 0;
        if ((unint64_t)v16 >= v15 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v33);
          if (!result) {
            return result;
          }
          unsigned int v24 = v33[0];
          long long v25 = (unsigned char *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }
        else
        {
          unsigned int v24 = *v16;
          long long v25 = v16 + 1;
          *((void *)this + 1) = v25;
        }
        *(unsigned char *)(a1 + 20) = v24 != 0;
        *(_DWORD *)(a1 + 72) |= 4u;
        if ((unint64_t)v25 >= v15 || *v25 != 32) {
          continue;
        }
        unint64_t v17 = v25 + 1;
        *((void *)this + 1) = v17;
LABEL_49:
        v33[0] = 0;
        if ((unint64_t)v17 >= v15 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v33);
          if (!result) {
            return result;
          }
          unsigned int v26 = v33[0];
          long long v27 = (unsigned char *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }
        else
        {
          unsigned int v26 = *v17;
          long long v27 = v17 + 1;
          *((void *)this + 1) = v27;
        }
        *(_DWORD *)(a1 + 64) = v26;
        *(_DWORD *)(a1 + 72) |= 8u;
        if ((unint64_t)v27 >= v15 || *v27 != 40) {
          continue;
        }
        long long v18 = v27 + 1;
        *((void *)this + 1) = v18;
LABEL_57:
        if ((unint64_t)v18 >= v15 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!result) {
            return result;
          }
          uint64_t v28 = (unsigned char *)*((void *)this + 1);
          unint64_t v15 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v6 = *v18;
          uint64_t v28 = v18 + 1;
          *((void *)this + 1) = v28;
        }
        *(_DWORD *)(a1 + 72) |= 0x10u;
        if ((unint64_t)v28 >= v15 || *v28 != 49) {
          continue;
        }
        *((void *)this + 1) = v28 + 1;
LABEL_65:
        *(void *)long long v33 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v33) & 1) == 0)return 0; {
        *(void *)(a1 + 32) = *(void *)v33;
        }
        *(_DWORD *)(a1 + 72) |= 0x20u;
        unsigned int v29 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v29 >= *((void *)this + 2) || *v29 != 57) {
          continue;
        }
        *((void *)this + 1) = v29 + 1;
LABEL_69:
        *(void *)long long v33 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v33))
        {
          *(void *)(a1 + 40) = *(void *)v33;
          *(_DWORD *)(a1 + 72) |= 0x40u;
          long long v30 = (unsigned char *)*((void *)this + 1);
          unint64_t v19 = *((void *)this + 2);
          if ((unint64_t)v30 < v19 && *v30 == 64)
          {
            long long v20 = v30 + 1;
            *((void *)this + 1) = v20;
LABEL_73:
            if ((unint64_t)v20 >= v19 || *v20 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
              if (!result) {
                return result;
              }
              long long v31 = (unsigned char *)*((void *)this + 1);
              unint64_t v19 = *((void *)this + 2);
            }
            else
            {
              *uint64_t v7 = *v20;
              long long v31 = v20 + 1;
              *((void *)this + 1) = v31;
            }
            *(_DWORD *)(a1 + 72) |= 0x80u;
            if ((unint64_t)v31 < v19 && *v31 == 72)
            {
              long long v21 = v31 + 1;
              *((void *)this + 1) = v21;
LABEL_81:
              if ((unint64_t)v21 >= v19 || *v21 < 0)
              {
                uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v8);
                if (!result) {
                  return result;
                }
                long long v32 = (unsigned __int8 *)*((void *)this + 1);
                unint64_t v19 = *((void *)this + 2);
              }
              else
              {
                *int v8 = *v21;
                long long v32 = (unsigned __int8 *)(v21 + 1);
                *((void *)this + 1) = v32;
              }
              *(_DWORD *)(a1 + 72) |= 0x100u;
              if (v32 == (unsigned __int8 *)v19
                && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
              {
                *((_DWORD *)this + 8) = 0;
                uint64_t result = 1;
                *((unsigned char *)this + 36) = 1;
                return result;
              }
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        uint64_t v16 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_41;
      case 4u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        unint64_t v17 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_49;
      case 5u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        long long v18 = (char *)*((void *)this + 1);
        unint64_t v15 = *((void *)this + 2);
        goto LABEL_57;
      case 6u:
        int v11 = TagFallback & 7;
        if (v11 == 1) {
          goto LABEL_65;
        }
        goto LABEL_28;
      case 7u:
        int v11 = TagFallback & 7;
        if (v11 == 1) {
          goto LABEL_69;
        }
        goto LABEL_28;
      case 8u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        long long v20 = (char *)*((void *)this + 1);
        unint64_t v19 = *((void *)this + 2);
        goto LABEL_73;
      case 9u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_28;
        }
        long long v21 = (char *)*((void *)this + 1);
        unint64_t v19 = *((void *)this + 2);
        goto LABEL_81;
      default:
        int v11 = TagFallback & 7;
LABEL_28:
        if (v11 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10074A2D0(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 72);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 72);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(float *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(unsigned __int8 *)(v5 + 20), a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 64), a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x10) == 0)
  {
LABEL_6:
    if ((v6 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(void *)(v5 + 24), a2, a4);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, a2, *(double *)(v5 + 32), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 0x80) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)8, *(void *)(v5 + 48), a2, a4);
    if ((*(_DWORD *)(v5 + 72) & 0x100) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)7, a2, *(double *)(v5 + 40), a3);
  int v6 = *(_DWORD *)(v5 + 72);
  if ((v6 & 0x80) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v6 & 0x100) == 0) {
    return result;
  }
LABEL_19:
  uint64_t v7 = *(void *)(v5 + 56);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)9, v7, a2, a4);
}

uint64_t sub_10074A404(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 72);
  if ((_BYTE)v3)
  {
    if (v3)
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 72);
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      v4 += 5;
    }
    if ((v3 & 4) != 0) {
      unsigned int v6 = v4 + 2;
    }
    else {
      unsigned int v6 = v4;
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 64);
      if ((v7 & 0x80000000) != 0)
      {
        int v8 = 11;
      }
      else if (v7 >= 0x80)
      {
        int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 72);
      }
      else
      {
        int v8 = 2;
      }
      v6 += v8;
    }
    if ((v3 & 0x10) != 0)
    {
      v6 += wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 72);
    }
    unsigned int v9 = v6 + 9;
    if ((v3 & 0x20) == 0) {
      unsigned int v9 = v6;
    }
    if ((v3 & 0x40) != 0) {
      uint64_t v5 = v9 + 9;
    }
    else {
      uint64_t v5 = v9;
    }
    if ((v3 & 0x80) != 0)
    {
      uint64_t v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 48), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 72);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  if ((v3 & 0x100) != 0) {
    uint64_t v5 = v5
  }
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 56), a2)+ 1;
  *(_DWORD *)(a1 + 68) = v5;
  return v5;
}

void sub_10074A504(uint64_t a1, void *lpsrc)
{
  sub_100749B34(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074A58C()
{
  return 1;
}

void *sub_10074A594@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.Time");
}

void sub_10074A5A4(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v13);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 48);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 48))
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        operator new();
      }
      uint64_t v6 = *(void *)(a2 + 8);
      if (!v6) {
        uint64_t v6 = *(void *)(qword_10248A348 + 8);
      }
      sub_100749B34(v5, v6);
      int v4 = *(_DWORD *)(a2 + 48);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_20;
      }
    }
    else if ((*(unsigned char *)(a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    *(_DWORD *)(a1 + 48) |= 2u;
    uint64_t v7 = *(void *)(a1 + 16);
    if (!v7) {
      operator new();
    }
    uint64_t v8 = *(void *)(a2 + 16);
    if (!v8) {
      uint64_t v8 = *(void *)(qword_10248A348 + 16);
    }
    sub_10074876C(v7, v8);
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_25;
    }
LABEL_20:
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v9 = *(void *)(a1 + 24);
    if (!v9) {
      operator new();
    }
    uint64_t v10 = *(void *)(a2 + 24);
    if (!v10) {
      uint64_t v10 = *(void *)(qword_10248A348 + 24);
    }
    sub_10074941C(v9, v10);
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
LABEL_26:
      unsigned int v12 = *(_DWORD *)(a2 + 40);
      if (v12 >= 5) {
        sub_101A6C70C();
      }
      *(_DWORD *)(a1 + 48) |= 0x10u;
      *(_DWORD *)(a1 + 40) = v12;
      return;
    }
LABEL_25:
    uint64_t v11 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(void *)(a1 + 32) = v11;
    if ((*(_DWORD *)(a2 + 48) & 0x10) == 0) {
      return;
    }
    goto LABEL_26;
  }
}

void sub_10074A800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void *sub_10074A818(void *result)
{
  if ((void *)qword_10248A348 != result)
  {
    int v1 = result;
    uint64_t v2 = result[1];
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = v1[2];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t result = (void *)v1[3];
    if (result)
    {
      int v4 = *(uint64_t (**)(void))(*result + 8);
      return (void *)v4();
    }
  }
  return result;
}

void sub_10074A8E4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6E60;
  sub_10074A818(a1);

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10074A938(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6E60;
  sub_10074A818(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_10074A9A0(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A348;
  if (!qword_10248A348)
  {
    sub_1007480C0(0, a2, a3, a4);
    return qword_10248A348;
  }
  return result;
}

void sub_10074A9D0()
{
}

uint64_t sub_10074AA28(uint64_t result)
{
  LOBYTE(v1) = *(unsigned char *)(result + 48);
  if ((_BYTE)v1)
  {
    if (*(unsigned char *)(result + 48))
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        int v3 = *(_DWORD *)(v2 + 72);
        if ((_BYTE)v3)
        {
          *(void *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
          *(unsigned char *)(v2 + 20) = 0;
          *(_DWORD *)(v2 + 64) = 0;
          *(_OWORD *)(v2 + 24) = 0u;
          *(_OWORD *)(v2 + 40) = 0u;
        }
        if ((v3 & 0xFF00) != 0) {
          *(void *)(v2 + 56) = 0;
        }
        *(_DWORD *)(v2 + 72) = 0;
        int v1 = *(_DWORD *)(result + 48);
      }
    }
    if ((v1 & 2) != 0)
    {
      uint64_t v4 = *(void *)(result + 16);
      if (v4)
      {
        int v5 = *(_DWORD *)(v4 + 96);
        if ((_BYTE)v5)
        {
          *(_OWORD *)(v4 + 56) = 0u;
          *(_OWORD *)(v4 + 40) = 0u;
          *(_OWORD *)(v4 + 24) = 0u;
          *(_OWORD *)(v4 + 8) = 0u;
        }
        if ((v5 & 0xFF00) != 0)
        {
          *(void *)(v4 + 72) = 0;
          *(void *)(v4 + 80) = 0;
          *(_DWORD *)(v4 + 88) = 0;
        }
        *(_DWORD *)(v4 + 96) = 0;
        int v1 = *(_DWORD *)(result + 48);
      }
    }
    if ((v1 & 4) != 0)
    {
      uint64_t v6 = *(void *)(result + 24);
      if (v6)
      {
        if (*(unsigned char *)(v6 + 60))
        {
          *(_OWORD *)(v6 + 40) = 0u;
          *(_OWORD *)(v6 + 24) = 0u;
          *(_OWORD *)(v6 + 8) = 0u;
        }
        *(_DWORD *)(v6 + 60) = 0;
      }
    }
    *(void *)(result + 32) = 0;
    *(_DWORD *)(result + 40) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10074AAF4(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unint64_t *)(a1 + 32);
  while (1)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 < *((void *)this + 2) && (*v6 & 0x80000000) == 0)
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
      goto LABEL_7;
    }
    unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
    *((_DWORD *)this + 8) = TagFallback;
    if (!TagFallback) {
      return 1;
    }
LABEL_7:
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_22;
        }
        *(_DWORD *)(a1 + 48) |= 1u;
        uint64_t v9 = *(void *)(a1 + 8);
        if (!v9) {
          operator new();
        }
        unsigned int v43 = 0;
        uint64_t v10 = (char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0; {
        }
          }
        else
        {
          unsigned int v43 = *v10;
          *((void *)this + 1) = v10 + 1;
        }
        int v14 = *((_DWORD *)this + 14);
        int v15 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v14 + 1;
        if (v14 >= v15) {
          return 0;
        }
        int v16 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_100749DF4(v9, this, v17) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v16);
        int v18 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v18, 1);
        int v20 = v18 - 1;
        if (v20 < 0 == v19) {
          *((_DWORD *)this + 14) = v20;
        }
        long long v21 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v21 >= *((void *)this + 2) || *v21 != 18) {
          continue;
        }
        *((void *)this + 1) = v21 + 1;
        goto LABEL_35;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 2) {
          goto LABEL_22;
        }
LABEL_35:
        *(_DWORD *)(a1 + 48) |= 2u;
        uint64_t v22 = *(void *)(a1 + 16);
        if (!v22) {
          operator new();
        }
        unsigned int v43 = 0;
        long long v23 = (char *)*((void *)this + 1);
        if ((unint64_t)v23 >= *((void *)this + 2) || *v23 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0; {
        }
          }
        else
        {
          unsigned int v43 = *v23;
          *((void *)this + 1) = v23 + 1;
        }
        int v24 = *((_DWORD *)this + 14);
        int v25 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v24 + 1;
        if (v24 >= v25) {
          return 0;
        }
        int v26 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_100748AD8(v22, this, v27) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v26);
        int v28 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v28, 1);
        int v29 = v28 - 1;
        if (v29 < 0 == v19) {
          *((_DWORD *)this + 14) = v29;
        }
        long long v30 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v30 >= *((void *)this + 2) || *v30 != 26) {
          continue;
        }
        *((void *)this + 1) = v30 + 1;
LABEL_49:
        *(_DWORD *)(a1 + 48) |= 4u;
        uint64_t v31 = *(void *)(a1 + 24);
        if (!v31) {
          operator new();
        }
        unsigned int v43 = 0;
        long long v32 = (char *)*((void *)this + 1);
        if ((unint64_t)v32 >= *((void *)this + 2) || *v32 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43))return 0; {
        }
          }
        else
        {
          unsigned int v43 = *v32;
          *((void *)this + 1) = v32 + 1;
        }
        int v33 = *((_DWORD *)this + 14);
        int v34 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v33 + 1;
        if (v33 >= v34) {
          return 0;
        }
        int v35 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v43);
        if (!sub_100749658(v31, this, v36) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v35);
        int v37 = *((_DWORD *)this + 14);
        BOOL v19 = __OFSUB__(v37, 1);
        int v38 = v37 - 1;
        if (v38 < 0 == v19) {
          *((_DWORD *)this + 14) = v38;
        }
        long long v39 = (unsigned char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v39 < v11 && *v39 == 32)
        {
          unsigned int v12 = v39 + 1;
          *((void *)this + 1) = v12;
LABEL_63:
          if ((unint64_t)v12 >= v11 || *v12 < 0)
          {
            uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
            if (!result) {
              return result;
            }
            long long v40 = (unsigned char *)*((void *)this + 1);
            unint64_t v11 = *((void *)this + 2);
          }
          else
          {
            *int v5 = *v12;
            long long v40 = v12 + 1;
            *((void *)this + 1) = v40;
          }
          *(_DWORD *)(a1 + 48) |= 8u;
          if ((unint64_t)v40 < v11 && *v40 == 40)
          {
            uint64_t v13 = v40 + 1;
            *((void *)this + 1) = v13;
LABEL_71:
            unsigned int v43 = 0;
            if ((unint64_t)v13 >= v11 || *v13 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v43);
              if (!result) {
                return result;
              }
              unsigned int v42 = v43;
            }
            else
            {
              unsigned int v42 = *v13;
              *((void *)this + 1) = v13 + 1;
            }
            if (v42 <= 4)
            {
              *(_DWORD *)(a1 + 48) |= 0x10u;
              *(_DWORD *)(a1 + 40) = v42;
            }
            if (*((void *)this + 1) == *((void *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
          }
        }
        break;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 2) {
          goto LABEL_49;
        }
        goto LABEL_22;
      case 4u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unsigned int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_63;
      case 5u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        uint64_t v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_71;
      default:
        int v8 = TagFallback & 7;
LABEL_22:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10074B06C(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A348 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v8 = *(void *)(v5 + 16);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248A348 + 16);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v8, a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_16:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(v5 + 32), (unint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 48) & 0x10) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_13:
  uint64_t v9 = *(void *)(v5 + 24);
  if (!v9) {
    uint64_t v9 = *(void *)(qword_10248A348 + 24);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v9, a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) != 0) {
    goto LABEL_16;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return result;
  }
LABEL_17:
  int v10 = *(_DWORD *)(v5 + 40);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v10, (int)a2, a4);
}

uint64_t sub_10074B160(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_35;
  }
  if ((*(unsigned char *)(a1 + 48) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 48) & 2) == 0) {
      goto LABEL_18;
    }
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A348 + 8);
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10074A404(v5, a2);
  int v7 = (int)v6;
  if (v6 >= 0x80) {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  }
  else {
    int v8 = 1;
  }
  uint64_t v4 = (v7 + v8 + 1);
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    uint64_t v9 = *(void *)(a1 + 16);
    if (!v9) {
      uint64_t v9 = *(void *)(qword_10248A348 + 16);
    }
    int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100749224(v9, a2);
    int v11 = (int)v10;
    if (v10 >= 0x80) {
      int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    }
    else {
      int v12 = 1;
    }
    uint64_t v4 = (v4 + v11 + v12 + 1);
    int v3 = *(_DWORD *)(a1 + 48);
  }
LABEL_18:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_20;
    }
LABEL_28:
    uint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
    if ((*(_DWORD *)(a1 + 48) & 0x10) == 0) {
      goto LABEL_35;
    }
    goto LABEL_29;
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (!v13) {
    uint64_t v13 = *(void *)(qword_10248A348 + 24);
  }
  int v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100749A38(v13);
  int v15 = (int)v14;
  if (v14 >= 0x80) {
    int v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
  }
  else {
    int v16 = 1;
  }
  uint64_t v4 = (v4 + v15 + v16 + 1);
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 8) != 0) {
    goto LABEL_28;
  }
LABEL_20:
  if ((v3 & 0x10) == 0) {
    goto LABEL_35;
  }
LABEL_29:
  unsigned int v17 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
  if ((v17 & 0x80000000) != 0)
  {
    int v18 = 11;
  }
  else if (v17 >= 0x80)
  {
    int v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v17, a2) + 1;
  }
  else
  {
    int v18 = 2;
  }
  uint64_t v4 = (v18 + v4);
LABEL_35:
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_10074B2D4(uint64_t a1, void *lpsrc)
{
  sub_10074A5A4(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074B35C()
{
  return 1;
}

void *sub_10074B364@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.Fix");
}

void sub_10074B374(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v12);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 48);
  if (!(_BYTE)v4) {
    return;
  }
  if (*(unsigned char *)(a2 + 48))
  {
    char v6 = *(unsigned char *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 1u;
    *(unsigned char *)(a1 + 16) = v6;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 2) == 0)
    {
LABEL_6:
      if ((v4 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_18;
    }
  }
  else if ((*(unsigned char *)(a2 + 48) & 2) == 0)
  {
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 48) |= 2u;
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7) {
    operator new();
  }
  uint64_t v8 = *(void *)(a2 + 8);
  if (!v8) {
    uint64_t v8 = *(void *)(qword_10248A350 + 8);
  }
  sub_100749B34(v7, v8);
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
LABEL_20:
    int v10 = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(_DWORD *)(a1 + 40) = v10;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_9:
      if ((v4 & 0x20) == 0) {
        return;
      }
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_18:
  unsigned int v9 = *(_DWORD *)(a2 + 20);
  if (v9 >= 7) {
    sub_101A6C738();
  }
  *(_DWORD *)(a1 + 48) |= 4u;
  *(_DWORD *)(a1 + 20) = v9;
  int v4 = *(_DWORD *)(a2 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((v4 & 0x10) == 0) {
    goto LABEL_9;
  }
LABEL_21:
  uint64_t v11 = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 48) |= 0x10u;
  *(void *)(a1 + 24) = v11;
  if ((*(_DWORD *)(a2 + 48) & 0x20) != 0)
  {
LABEL_10:
    uint64_t v5 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 0x20u;
    *(void *)(a1 + 32) = v5;
  }
}

void sub_10074B520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10074B538(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022C6ED8;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A350 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10074B5C8(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10074B538(a1);

  operator delete();
}

void sub_10074B600()
{
}

uint64_t sub_10074B658(uint64_t result)
{
  char v1 = *(unsigned char *)(result + 48);
  if (v1)
  {
    *(unsigned char *)(result + 16) = 0;
    if ((v1 & 2) != 0)
    {
      uint64_t v2 = *(void *)(result + 8);
      if (v2)
      {
        int v3 = *(_DWORD *)(v2 + 72);
        if ((_BYTE)v3)
        {
          *(void *)(v2 + 8) = 0;
          *(_DWORD *)(v2 + 16) = 0;
          *(unsigned char *)(v2 + 20) = 0;
          *(_DWORD *)(v2 + 64) = 0;
          *(_OWORD *)(v2 + 24) = 0u;
          *(_OWORD *)(v2 + 40) = 0u;
        }
        if ((v3 & 0xFF00) != 0) {
          *(void *)(v2 + 56) = 0;
        }
        *(_DWORD *)(v2 + 72) = 0;
      }
    }
    *(void *)(result + 28) = 0;
    *(void *)(result + 20) = 0;
    *(void *)(result + 36) = 0;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10074B6BC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unsigned int *)(a1 + 40);
  char v6 = (unint64_t *)(a1 + 24);
  uint64_t v7 = (unint64_t *)(a1 + 32);
  while (2)
  {
    uint64_t v8 = (char *)*((void *)this + 1);
    if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unsigned int v39 = 0;
        int v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v12 >= v11 || *v12 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v39);
          if (!result) {
            return result;
          }
          unsigned int v13 = v39;
          int v14 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          unsigned int v13 = *v12;
          int v14 = v12 + 1;
          *((void *)this + 1) = v14;
        }
        *(unsigned char *)(a1 + 16) = v13 != 0;
        int v15 = *(_DWORD *)(a1 + 48) | 1;
        *(_DWORD *)(a1 + 48) = v15;
        if ((unint64_t)v14 < v11 && *v14 == 18)
        {
          *((void *)this + 1) = v14 + 1;
          goto LABEL_31;
        }
        continue;
      case 2u:
        int v10 = TagFallback & 7;
        if (v10 != 2) {
          goto LABEL_22;
        }
        int v15 = *(_DWORD *)(a1 + 48);
LABEL_31:
        *(_DWORD *)(a1 + 48) = v15 | 2;
        uint64_t v23 = *(void *)(a1 + 8);
        if (!v23) {
          operator new();
        }
        unsigned int v40 = 0;
        int v24 = (char *)*((void *)this + 1);
        if ((unint64_t)v24 >= *((void *)this + 2) || *v24 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v40))return 0; {
        }
          }
        else
        {
          unsigned int v40 = *v24;
          *((void *)this + 1) = v24 + 1;
        }
        int v25 = *((_DWORD *)this + 14);
        int v26 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v25 + 1;
        if (v25 < v26)
        {
          int v27 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v40);
          if (sub_100749DF4(v23, this, v28))
          {
            if (*((unsigned char *)this + 36))
            {
              wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v27);
              int v29 = *((_DWORD *)this + 14);
              BOOL v30 = __OFSUB__(v29, 1);
              int v31 = v29 - 1;
              if (v31 < 0 == v30) {
                *((_DWORD *)this + 14) = v31;
              }
              long long v32 = (unsigned char *)*((void *)this + 1);
              unint64_t v16 = *((void *)this + 2);
              if ((unint64_t)v32 < v16 && *v32 == 24)
              {
                unsigned int v17 = v32 + 1;
                *((void *)this + 1) = v17;
LABEL_45:
                unsigned int v38 = 0;
                if ((unint64_t)v17 >= v16 || *v17 < 0)
                {
                  uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v38);
                  if (!result) {
                    return result;
                  }
                  unsigned int v33 = v38;
                }
                else
                {
                  unsigned int v33 = *v17;
                  *((void *)this + 1) = v17 + 1;
                }
                if (v33 <= 6)
                {
                  *(_DWORD *)(a1 + 48) |= 4u;
                  *(_DWORD *)(a1 + 20) = v33;
                }
                int v34 = (unsigned char *)*((void *)this + 1);
                unint64_t v18 = *((void *)this + 2);
                if ((unint64_t)v34 < v18 && *v34 == 32)
                {
                  BOOL v19 = v34 + 1;
                  *((void *)this + 1) = v19;
LABEL_55:
                  if ((unint64_t)v19 >= v18 || *v19 < 0)
                  {
                    uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
                    if (!result) {
                      return result;
                    }
                    int v35 = (unsigned char *)*((void *)this + 1);
                    unint64_t v18 = *((void *)this + 2);
                  }
                  else
                  {
                    *uint64_t v5 = *v19;
                    int v35 = v19 + 1;
                    *((void *)this + 1) = v35;
                  }
                  *(_DWORD *)(a1 + 48) |= 8u;
                  if ((unint64_t)v35 < v18 && *v35 == 40)
                  {
                    int v20 = v35 + 1;
                    *((void *)this + 1) = v20;
LABEL_63:
                    if ((unint64_t)v20 >= v18 || *v20 < 0)
                    {
                      uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
                      if (!result) {
                        return result;
                      }
                      unsigned int v36 = (unsigned char *)*((void *)this + 1);
                      unint64_t v18 = *((void *)this + 2);
                    }
                    else
                    {
                      *char v6 = *v20;
                      unsigned int v36 = v20 + 1;
                      *((void *)this + 1) = v36;
                    }
                    *(_DWORD *)(a1 + 48) |= 0x10u;
                    if ((unint64_t)v36 < v18 && *v36 == 48)
                    {
                      long long v21 = v36 + 1;
                      *((void *)this + 1) = v21;
LABEL_71:
                      if ((unint64_t)v21 >= v18 || *v21 < 0)
                      {
                        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
                        if (!result) {
                          return result;
                        }
                        int v37 = (unsigned __int8 *)*((void *)this + 1);
                        unint64_t v18 = *((void *)this + 2);
                      }
                      else
                      {
                        *uint64_t v7 = *v21;
                        int v37 = (unsigned __int8 *)(v21 + 1);
                        *((void *)this + 1) = v37;
                      }
                      *(_DWORD *)(a1 + 48) |= 0x20u;
                      if (v37 == (unsigned __int8 *)v18
                        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
                      {
                        *((_DWORD *)this + 8) = 0;
                        uint64_t result = 1;
                        *((unsigned char *)this + 36) = 1;
                        return result;
                      }
                    }
                  }
                }
              }
              continue;
            }
          }
        }
        return 0;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unsigned int v17 = (char *)*((void *)this + 1);
        unint64_t v16 = *((void *)this + 2);
        goto LABEL_45;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        BOOL v19 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_55;
      case 5u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        int v20 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_63;
      case 6u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        long long v21 = (char *)*((void *)this + 1);
        unint64_t v18 = *((void *)this + 2);
        goto LABEL_71;
      default:
        int v10 = TagFallback & 7;
LABEL_22:
        if (v10 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10074BB50(uint64_t result, const wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(unsigned __int8 *)(result + 16), (BOOL)a2, a4);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v7 = *(void *)(v5 + 8);
  if (!v7) {
    uint64_t v7 = *(void *)(qword_10248A350 + 8);
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(_DWORD *)(v5 + 20), (int)a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_14:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, *(void *)(v5 + 24), (unint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 48) & 0x20) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(_DWORD *)(v5 + 40), a2, a4);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_6:
  if ((v6 & 0x20) == 0) {
    return result;
  }
LABEL_15:
  uint64_t v8 = *(void *)(v5 + 32);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)6, v8, (unint64_t)a2, a4);
}

uint64_t sub_10074BC40(uint64_t a1, unint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 48);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_27;
  }
  uint64_t v4 = 2 * (v3 & 1u);
  if ((v3 & 2) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5) {
      uint64_t v5 = *(void *)(qword_10248A350 + 8);
    }
    int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10074A404(v5, a2);
    int v7 = (int)v6;
    if (v6 >= 0x80) {
      int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
    }
    else {
      int v8 = 1;
    }
    uint64_t v4 = (v4 | 1) + v7 + v8;
    int v3 = *(_DWORD *)(a1 + 48);
    if ((v3 & 4) == 0)
    {
LABEL_4:
      if ((v3 & 8) == 0) {
        goto LABEL_5;
      }
LABEL_21:
      unint64_t v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
      if (v11 >= 0x80)
      {
        int v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2) + 1;
        int v3 = *(_DWORD *)(a1 + 48);
      }
      else
      {
        int v12 = 2;
      }
      uint64_t v4 = (v12 + v4);
      if ((v3 & 0x10) == 0)
      {
LABEL_6:
        if ((v3 & 0x20) == 0) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
      goto LABEL_25;
    }
  }
  else if ((v3 & 4) == 0)
  {
    goto LABEL_4;
  }
  unsigned int v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if ((v9 & 0x80000000) != 0)
  {
    int v10 = 11;
  }
  else if (v9 >= 0x80)
  {
    int v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 48);
  }
  else
  {
    int v10 = 2;
  }
  uint64_t v4 = (v10 + v4);
  if ((v3 & 8) != 0) {
    goto LABEL_21;
  }
LABEL_5:
  if ((v3 & 0x10) == 0) {
    goto LABEL_6;
  }
LABEL_25:
  uint64_t v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
  if ((*(_DWORD *)(a1 + 48) & 0x20) != 0) {
LABEL_26:
  }
    uint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
LABEL_27:
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_10074BD6C(uint64_t a1, void *lpsrc)
{
  sub_10074B374(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074BDF4()
{
  return 1;
}

void *sub_10074BDFC@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.TimeTransferData");
}

void sub_10074BE0C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v11);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 52);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 52))
    {
      *(_DWORD *)(a1 + 52) |= 1u;
      uint64_t v6 = *(void *)(a1 + 8);
      if (!v6) {
        operator new();
      }
      uint64_t v7 = *(void *)(a2 + 8);
      if (!v7) {
        uint64_t v7 = *(void *)(qword_10248A358 + 8);
      }
      sub_10074B374(v6, v7);
      int v4 = *(_DWORD *)(a2 + 52);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_17;
      }
    }
    else if ((*(unsigned char *)(a2 + 52) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v8 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 52) |= 2u;
    *(void *)(a1 + 16) = v8;
    int v4 = *(_DWORD *)(a2 + 52);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v9 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 52) |= 4u;
    *(void *)(a1 + 24) = v9;
    int v4 = *(_DWORD *)(a2 + 52);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }
LABEL_18:
    uint64_t v10 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 52) |= 8u;
    *(void *)(a1 + 32) = v10;
    if ((*(_DWORD *)(a2 + 52) & 0x10) == 0) {
      return;
    }
LABEL_9:
    uint64_t v5 = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 52) |= 0x10u;
    *(void *)(a1 + 40) = v5;
  }
}

void sub_10074BF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10074BF98(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  *(void *)this = &off_1022C6F50;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_10248A358 != this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
  }

  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10074C028(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  sub_10074BF98(a1);

  operator delete();
}

uint64_t sub_10074C060(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A358;
  if (!qword_10248A358)
  {
    sub_1007480C0(0, a2, a3, a4);
    return qword_10248A358;
  }
  return result;
}

void sub_10074C090()
{
}

uint64_t sub_10074C0E8(uint64_t result)
{
  uint64_t v1 = result;
  if (*(unsigned char *)(result + 52))
  {
    if (*(unsigned char *)(result + 52))
    {
      uint64_t result = *(void *)(result + 8);
      if (result) {
        uint64_t result = sub_10074B658(result);
      }
    }
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + 32) = 0u;
  }
  *(_DWORD *)(v1 + 52) = 0;
  return result;
}

uint64_t sub_10074C12C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unint64_t *)(a1 + 16);
  uint64_t v6 = (unint64_t *)(a1 + 24);
  uint64_t v7 = (unint64_t *)(a1 + 32);
  uint64_t v8 = (unint64_t *)(a1 + 40);
  while (2)
  {
    uint64_t v9 = (char *)*((void *)this + 1);
    if ((unint64_t)v9 >= *((void *)this + 2) || *v9 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v9;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v9 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v11 = TagFallback & 7;
        if (v11 != 2) {
          goto LABEL_22;
        }
        *(_DWORD *)(a1 + 52) |= 1u;
        uint64_t v12 = *(void *)(a1 + 8);
        if (!v12) {
          operator new();
        }
        unsigned int v32 = 0;
        unsigned int v13 = (char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 < 0)
        {
          if (!wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v32))return 0; {
        }
          }
        else
        {
          unsigned int v32 = *v13;
          *((void *)this + 1) = v13 + 1;
        }
        int v19 = *((_DWORD *)this + 14);
        int v20 = *((_DWORD *)this + 15);
        *((_DWORD *)this + 14) = v19 + 1;
        if (v19 >= v20) {
          return 0;
        }
        int v21 = wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(this, v32);
        if (!sub_10074B6BC(v12, this, v22) || !*((unsigned char *)this + 36)) {
          return 0;
        }
        wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(this, v21);
        int v23 = *((_DWORD *)this + 14);
        BOOL v24 = __OFSUB__(v23, 1);
        int v25 = v23 - 1;
        if (v25 < 0 == v24) {
          *((_DWORD *)this + 14) = v25;
        }
        int v26 = (unsigned char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        if ((unint64_t)v26 >= v14 || *v26 != 16) {
          continue;
        }
        int v15 = v26 + 1;
        *((void *)this + 1) = v15;
        goto LABEL_35;
      case 2u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        int v15 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
LABEL_35:
        if ((unint64_t)v15 >= v14 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!result) {
            return result;
          }
          int v27 = (unsigned char *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v5 = *v15;
          int v27 = v15 + 1;
          *((void *)this + 1) = v27;
        }
        *(_DWORD *)(a1 + 52) |= 2u;
        if ((unint64_t)v27 >= v14 || *v27 != 24) {
          continue;
        }
        unint64_t v16 = v27 + 1;
        *((void *)this + 1) = v16;
LABEL_43:
        if ((unint64_t)v16 >= v14 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!result) {
            return result;
          }
          int v29 = (unsigned char *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v6 = *v16;
          int v29 = v16 + 1;
          *((void *)this + 1) = v29;
        }
        *(_DWORD *)(a1 + 52) |= 4u;
        if ((unint64_t)v29 >= v14 || *v29 != 32) {
          continue;
        }
        unsigned int v17 = v29 + 1;
        *((void *)this + 1) = v17;
LABEL_51:
        if ((unint64_t)v17 >= v14 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v7);
          if (!result) {
            return result;
          }
          BOOL v30 = (unsigned char *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v7 = *v17;
          BOOL v30 = v17 + 1;
          *((void *)this + 1) = v30;
        }
        *(_DWORD *)(a1 + 52) |= 8u;
        if ((unint64_t)v30 >= v14 || *v30 != 40) {
          continue;
        }
        unint64_t v18 = v30 + 1;
        *((void *)this + 1) = v18;
LABEL_59:
        if ((unint64_t)v18 >= v14 || *v18 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v8);
          if (!result) {
            return result;
          }
          int v31 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v14 = *((void *)this + 2);
        }
        else
        {
          *uint64_t v8 = *v18;
          int v31 = (unsigned __int8 *)(v18 + 1);
          *((void *)this + 1) = v31;
        }
        *(_DWORD *)(a1 + 52) |= 0x10u;
        if (v31 != (unsigned __int8 *)v14 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        break;
      case 3u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unint64_t v16 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_43;
      case 4u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unsigned int v17 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_51;
      case 5u:
        int v11 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_22;
        }
        unint64_t v18 = (char *)*((void *)this + 1);
        unint64_t v14 = *((void *)this + 2);
        goto LABEL_59;
      default:
        int v11 = TagFallback & 7;
LABEL_22:
        if (v11 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_10074C524(uint64_t result, wireless_diagnostics::google::protobuf::MessageLite *a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 52);
  if (v6)
  {
    uint64_t v7 = *(void *)(result + 8);
    if (!v7) {
      uint64_t v7 = *(void *)(qword_10248A358 + 8);
    }
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, v7, a2, a4);
    int v6 = *(_DWORD *)(v5 + 52);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(void *)(v5 + 16), (unint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_12:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, *(void *)(v5 + 32), (unint64_t)a2, a4);
    if ((*(_DWORD *)(v5 + 52) & 0x10) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 24), (unint64_t)a2, a4);
  int v6 = *(_DWORD *)(v5 + 52);
  if ((v6 & 8) != 0) {
    goto LABEL_12;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return result;
  }
LABEL_13:
  uint64_t v8 = *(void *)(v5 + 40);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v8, (unint64_t)a2, a4);
}

uint64_t sub_10074C5F8(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 52);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_17;
  }
  if ((*(unsigned char *)(a1 + 52) & 1) == 0)
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 52) & 2) == 0) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
    int v3 = *(_DWORD *)(a1 + 52);
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (!v5) {
    uint64_t v5 = *(void *)(qword_10248A358 + 8);
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10074BC40(v5, a2);
  int v7 = (int)v6;
  if (v6 >= 0x80) {
    int v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  }
  else {
    int v8 = 1;
  }
  uint64_t v4 = (v7 + v8 + 1);
  int v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_13:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0) {
      goto LABEL_15;
    }
LABEL_19:
    uint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
    if ((*(_DWORD *)(a1 + 52) & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v4 = v4
     + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 24), a2)+ 1;
  int v3 = *(_DWORD *)(a1 + 52);
  if ((v3 & 8) != 0) {
    goto LABEL_19;
  }
LABEL_15:
  if ((v3 & 0x10) != 0) {
LABEL_16:
  }
    uint64_t v4 = v4
       + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 40), a2)+ 1;
LABEL_17:
  *(_DWORD *)(a1 + 48) = v4;
  return v4;
}

void sub_10074C6E8(uint64_t a1, void *lpsrc)
{
  sub_10074BE0C(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074C770()
{
  return 1;
}

void *sub_10074C778@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.TimeTransferDataExtend");
}

float sub_10074C788(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(void *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 24);
    }
    if ((v5 & 2) != 0)
    {
      float result = *(float *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(float *)(a1 + 16) = result;
    }
  }
  return result;
}

void sub_10074C834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10074C84C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6FC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10074C86C(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C6FC8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10074C8C0()
{
}

uint64_t sub_10074C910(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    *(void *)(result + 8) = 0;
    *(_DWORD *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10074C928(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (char *)*((void *)this + 1);
        if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
        {
          unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
          *((_DWORD *)this + 8) = TagFallback;
          if (!TagFallback) {
            return 1;
          }
        }
        else
        {
          unint64_t TagFallback = *v6;
          *((_DWORD *)this + 8) = TagFallback;
          *((void *)this + 1) = v6 + 1;
          if (!TagFallback) {
            return 1;
          }
        }
        if (TagFallback >> 3 != 1) {
          break;
        }
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_16;
        }
        uint64_t v10 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!result) {
            return result;
          }
          int v11 = (unsigned char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          *int v5 = *v10;
          int v11 = v10 + 1;
          *((void *)this + 1) = v11;
        }
        *(_DWORD *)(a1 + 24) |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 21)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_24;
        }
      }
      if (TagFallback >> 3 != 2) {
        break;
      }
      int v8 = TagFallback & 7;
      if (v8 != 5) {
        goto LABEL_16;
      }
LABEL_24:
      unsigned int v13 = 0;
      if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v13) & 1) == 0) {
        return 0;
      }
      *(_DWORD *)(a1 + 16) = v13;
      *(_DWORD *)(a1 + 24) |= 2u;
      if (*((void *)this + 1) == *((void *)this + 2)
        && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
      {
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      }
    }
    int v8 = TagFallback & 7;
LABEL_16:
    if (v8 == 4) {
      return 1;
    }
  }
  while ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) != 0);
  return 0;
}

uint64_t sub_10074CAB4(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = a2;
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
  {
    float v7 = *(float *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, v7, a3);
  }
  return result;
}

uint64_t sub_10074CB20(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 24);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 24);
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      uint64_t result = v4 + 5;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

float sub_10074CB7C(uint64_t a1, void *lpsrc)
{
  return sub_10074C788(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074CC04()
{
  return 1;
}

void *sub_10074CC0C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.RawPressureSample");
}

float sub_10074CC1C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v5) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v5)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      uint64_t v6 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 32) |= 1u;
      *(void *)(a1 + 8) = v6;
      int v5 = *(_DWORD *)(a2 + 32);
      if ((v5 & 2) == 0)
      {
LABEL_6:
        if ((v5 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(unsigned char *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    float result = *(float *)(a2 + 16);
    *(_DWORD *)(a1 + 32) |= 2u;
    *(float *)(a1 + 16) = result;
    int v5 = *(_DWORD *)(a2 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_7:
      if ((v5 & 8) == 0) {
        return result;
      }
      goto LABEL_8;
    }
LABEL_12:
    float result = *(float *)(a2 + 20);
    *(_DWORD *)(a1 + 32) |= 4u;
    *(float *)(a1 + 20) = result;
    if ((*(_DWORD *)(a2 + 32) & 8) == 0) {
      return result;
    }
LABEL_8:
    float result = *(float *)(a2 + 24);
    *(_DWORD *)(a1 + 32) |= 8u;
    *(float *)(a1 + 24) = result;
  }
  return result;
}

void sub_10074CD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10074CD28(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C7040;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10074CD48(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C7040;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10074CD9C()
{
}

uint64_t sub_10074CDEC(uint64_t result)
{
  if (*(unsigned char *)(result + 32))
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10074CE04(_DWORD *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = (unint64_t *)(a1 + 2);
  while (2)
  {
    uint64_t v6 = (char *)*((void *)this + 1);
    if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v6;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v6 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v8 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        uint64_t v10 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
          if (!result) {
            return result;
          }
          int v11 = (unsigned char *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          *int v5 = *v10;
          int v11 = v10 + 1;
          *((void *)this + 1) = v11;
        }
        a1[8] |= 1u;
        if ((unint64_t)v11 < v9 && *v11 == 21)
        {
          *((void *)this + 1) = v11 + 1;
          goto LABEL_26;
        }
        continue;
      case 2u:
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_18;
        }
LABEL_26:
        unsigned int v17 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v17) & 1) == 0) {
          return 0;
        }
        a1[4] = v17;
        a1[8] |= 2u;
        unsigned int v13 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v13 >= *((void *)this + 2) || *v13 != 29) {
          continue;
        }
        *((void *)this + 1) = v13 + 1;
LABEL_30:
        unsigned int v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v16) & 1) == 0) {
          return 0;
        }
        a1[5] = v16;
        a1[8] |= 4u;
        unint64_t v14 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v14 >= *((void *)this + 2) || *v14 != 37) {
          continue;
        }
        *((void *)this + 1) = v14 + 1;
LABEL_34:
        unsigned int v15 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(this, &v15))
        {
          a1[6] = v15;
          a1[8] |= 8u;
          if (*((void *)this + 1) == *((void *)this + 2)
            && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
          {
            *((_DWORD *)this + 8) = 0;
            uint64_t result = 1;
            *((unsigned char *)this + 36) = 1;
            return result;
          }
          continue;
        }
        return 0;
      case 3u:
        int v8 = TagFallback & 7;
        if (v8 == 5) {
          goto LABEL_30;
        }
        goto LABEL_18;
      case 4u:
        int v8 = TagFallback & 7;
        if (v8 != 5) {
          goto LABEL_18;
        }
        goto LABEL_34;
      default:
        int v8 = TagFallback & 7;
LABEL_18:
        if (v8 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10074D06C(uint64_t result, unint64_t a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v4 = a2;
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 32);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 32);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v4, *(float *)(v5 + 20), a3);
      if ((*(_DWORD *)(v5 + 32) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v4, *(float *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 32);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:
  float v7 = *(float *)(v5 + 24);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFloat((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v4, v7, a3);
}

uint64_t sub_10074D114(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 32))
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      v4 += 5;
    }
    if ((v3 & 4) != 0) {
      v4 += 5;
    }
    if ((v3 & 8) != 0) {
      uint64_t result = v4 + 5;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 28) = result;
  return result;
}

float sub_10074D188(uint64_t a1, void *lpsrc)
{
  return sub_10074CC1C(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074D210()
{
  return 1;
}

void *sub_10074D218@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.SensorSample3Axis");
}

void sub_10074D228(_DWORD *a1, uint64_t a2)
{
  if ((_DWORD *)a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 32);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 32))
    {
      int v6 = *(_DWORD *)(a2 + 8);
      a1[8] |= 1u;
      a1[2] = v6;
      int v4 = *(_DWORD *)(a2 + 32);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_13;
      }
    }
    else if ((*(unsigned char *)(a2 + 32) & 2) == 0)
    {
      goto LABEL_6;
    }
    int v7 = *(_DWORD *)(a2 + 12);
    a1[8] |= 2u;
    a1[3] = v7;
    int v4 = *(_DWORD *)(a2 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_14;
    }
LABEL_13:
    int v8 = *(_DWORD *)(a2 + 16);
    a1[8] |= 4u;
    a1[4] = v8;
    int v4 = *(_DWORD *)(a2 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
      goto LABEL_9;
    }
LABEL_14:
    int v9 = *(_DWORD *)(a2 + 20);
    a1[8] |= 8u;
    a1[5] = v9;
    if ((*(_DWORD *)(a2 + 32) & 0x10) == 0) {
      return;
    }
LABEL_9:
    int v5 = *(_DWORD *)(a2 + 24);
    a1[8] |= 0x10u;
    a1[6] = v5;
  }
}

void sub_10074D33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10074D354(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C70B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10074D374(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C70B8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

void sub_10074D3C8()
{
}

uint64_t sub_10074D418(uint64_t result)
{
  if (*(unsigned char *)(result + 32))
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 32) = 0;
  return result;
}

uint64_t sub_10074D430(unsigned int *a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  int v5 = a1 + 2;
  int v6 = a1 + 4;
  int v7 = a1 + 5;
  while (2)
  {
    int v8 = (char *)*((void *)this + 1);
    if ((unint64_t)v8 >= *((void *)this + 2) || *v8 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v8;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v8 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        uint64_t v12 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        if ((unint64_t)v12 < v11 && (*v12 & 0x80000000) == 0)
        {
          *int v5 = *v12;
          unsigned int v13 = v12 + 1;
          *((void *)this + 1) = v13;
LABEL_26:
          a1[8] |= 1u;
          if ((unint64_t)v13 < v11 && *v13 == 16)
          {
            unint64_t v14 = v13 + 1;
            *((void *)this + 1) = v14;
            goto LABEL_29;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v5);
        if (result)
        {
          unsigned int v13 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          goto LABEL_26;
        }
        break;
      case 2u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        unint64_t v14 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
LABEL_29:
        unsigned int v25 = 0;
        if ((unint64_t)v14 >= v11 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v25);
          if (!result) {
            return result;
          }
          unsigned int v18 = v25;
          int v19 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          unsigned int v18 = *v14;
          int v19 = v14 + 1;
          *((void *)this + 1) = v19;
        }
        a1[3] = v18;
        a1[8] |= 2u;
        if ((unint64_t)v19 >= v11 || *v19 != 24) {
          continue;
        }
        unsigned int v15 = v19 + 1;
        *((void *)this + 1) = v15;
LABEL_37:
        if ((unint64_t)v15 >= v11 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v6);
          if (!result) {
            return result;
          }
          int v20 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          *int v6 = *v15;
          int v20 = v15 + 1;
          *((void *)this + 1) = v20;
        }
        a1[8] |= 4u;
        if ((unint64_t)v20 >= v11 || *v20 != 32) {
          continue;
        }
        unsigned int v16 = v20 + 1;
        *((void *)this + 1) = v16;
LABEL_45:
        if ((unint64_t)v16 >= v11 || *v16 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v7);
          if (!result) {
            return result;
          }
          int v21 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          *int v7 = *v16;
          int v21 = v16 + 1;
          *((void *)this + 1) = v21;
        }
        a1[8] |= 8u;
        if ((unint64_t)v21 >= v11 || *v21 != 40) {
          continue;
        }
        unsigned int v17 = v21 + 1;
        *((void *)this + 1) = v17;
LABEL_53:
        unsigned int v26 = 0;
        if ((unint64_t)v17 >= v11 || *v17 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v26);
          if (!result) {
            return result;
          }
          unsigned int v22 = v26;
          int v23 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
        }
        else
        {
          unsigned int v22 = *v17;
          int v23 = (unsigned __int8 *)(v17 + 1);
          *((void *)this + 1) = v23;
        }
        a1[6] = -(v22 & 1) ^ (v22 >> 1);
        a1[8] |= 0x10u;
        if (v23 != (unsigned __int8 *)v11 || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10)) {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        unsigned int v15 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_37;
      case 4u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        unsigned int v16 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_45;
      case 5u:
        int v10 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_20;
        }
        unsigned int v17 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_53;
      default:
        int v10 = TagFallback & 7;
LABEL_20:
        if (v10 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

int *sub_10074D784(int *result, unsigned int a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  int v5 = result;
  int v6 = result[8];
  if (v6)
  {
    uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, result[2], a2, a4);
    int v6 = v5[8];
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v5[3], a2, a4);
  int v6 = v5[8];
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v5[5], a2, a4);
    if ((v5[8] & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, v5[4], a2, a4);
  int v6 = v5[8];
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return result;
  }
LABEL_11:
  int v7 = v5[6];

  return (int *)wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, a2, a4);
}

uint64_t sub_10074D848(uint64_t a1, unsigned int a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 32);
  if (!(_BYTE)v3)
  {
    uint64_t v4 = 0;
    goto LABEL_32;
  }
  if (*(unsigned char *)(a1 + 32))
  {
    int v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if (v5 >= 0x80)
    {
      uint64_t v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
      if ((v3 & 2) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v4 = 2;
      if ((v3 & 2) == 0) {
        goto LABEL_16;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
    if ((*(unsigned char *)(a1 + 32) & 2) == 0) {
      goto LABEL_16;
    }
  }
  int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    int v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    int v7 = 2;
  }
  uint64_t v4 = (v7 + v4);
LABEL_16:
  if ((v3 & 4) != 0)
  {
    int v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 16);
    if (v8 >= 0x80)
    {
      int v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
      int v3 = *(_DWORD *)(a1 + 32);
    }
    else
    {
      int v9 = 2;
    }
    uint64_t v4 = (v9 + v4);
    if ((v3 & 8) == 0)
    {
LABEL_18:
      if ((v3 & 0x10) == 0) {
        goto LABEL_32;
      }
      goto LABEL_28;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_18;
  }
  int v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
  if (v10 >= 0x80)
  {
    int v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    int v3 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    int v11 = 2;
  }
  uint64_t v4 = (v11 + v4);
  if ((v3 & 0x10) != 0)
  {
LABEL_28:
    uint64_t v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)((2 * *(_DWORD *)(a1 + 24)) ^ (*(int *)(a1 + 24) >> 31));
    if (v12 >= 0x80) {
      int v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2) + 1;
    }
    else {
      int v13 = 2;
    }
    uint64_t v4 = (v13 + v4);
  }
LABEL_32:
  *(_DWORD *)(a1 + 28) = v4;
  return v4;
}

void sub_10074D970(_DWORD *a1, void *lpsrc)
{
  sub_10074D228(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074D9F8()
{
  return 1;
}

void *sub_10074DA00@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.SvId");
}

void sub_10074DA10(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v10);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 48);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 48))
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 48) |= 1u;
      *(void *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 48);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else if ((*(unsigned char *)(a2 + 48) & 2) == 0)
    {
      goto LABEL_6;
    }
    uint64_t v6 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 48) |= 2u;
    *(void *)(a1 + 16) = v6;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v7 = *(void *)(a2 + 24);
    *(_DWORD *)(a1 + 48) |= 4u;
    *(void *)(a1 + 24) = v7;
    int v4 = *(_DWORD *)(a2 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_8:
      if ((v4 & 0x10) == 0) {
        return;
      }
LABEL_14:
      unsigned int v9 = *(_DWORD *)(a2 + 40);
      if (v9 >= 2) {
        sub_101A6C764();
      }
      *(_DWORD *)(a1 + 48) |= 0x10u;
      *(_DWORD *)(a1 + 40) = v9;
      return;
    }
LABEL_13:
    uint64_t v8 = *(void *)(a2 + 32);
    *(_DWORD *)(a1 + 48) |= 8u;
    *(void *)(a1 + 32) = v8;
    if ((*(_DWORD *)(a2 + 48) & 0x10) == 0) {
      return;
    }
    goto LABEL_14;
  }
}

void sub_10074DB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10074DB48(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C7130;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10074DB68(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C7130;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_10074DBBC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A378;
  if (!qword_10248A378)
  {
    sub_1007480C0(0, a2, a3, a4);
    return qword_10248A378;
  }
  return result;
}

void sub_10074DBEC()
{
}

uint64_t sub_10074DC44(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(_DWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
  }
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10074DC64(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  while (2)
  {
    uint64_t v5 = (char *)*((void *)this + 1);
    if ((unint64_t)v5 >= *((void *)this + 2) || *v5 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v5;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v5 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_29;
        }
        *(void *)unsigned int v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0; {
        *(void *)(a1 + 8) = *(void *)v16;
        }
        *(_DWORD *)(a1 + 48) |= 1u;
        uint64_t v8 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v8 >= *((void *)this + 2) || *v8 != 17) {
          continue;
        }
        *((void *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        int v7 = TagFallback & 7;
        if (v7 != 1) {
          goto LABEL_29;
        }
LABEL_14:
        *(void *)unsigned int v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0; {
        *(void *)(a1 + 16) = *(void *)v16;
        }
        *(_DWORD *)(a1 + 48) |= 2u;
        unsigned int v9 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v9 >= *((void *)this + 2) || *v9 != 25) {
          continue;
        }
        *((void *)this + 1) = v9 + 1;
LABEL_19:
        *(void *)unsigned int v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0; {
        *(void *)(a1 + 24) = *(void *)v16;
        }
        *(_DWORD *)(a1 + 48) |= 4u;
        int v10 = (unsigned char *)*((void *)this + 1);
        if ((unint64_t)v10 >= *((void *)this + 2) || *v10 != 33) {
          continue;
        }
        *((void *)this + 1) = v10 + 1;
LABEL_24:
        *(void *)unsigned int v16 = 0;
        if (wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16))
        {
          *(void *)(a1 + 32) = *(void *)v16;
          *(_DWORD *)(a1 + 48) |= 8u;
          uint64_t v12 = (unsigned char *)*((void *)this + 1);
          unint64_t v11 = *((void *)this + 2);
          if ((unint64_t)v12 < v11 && *v12 == 40)
          {
            int v13 = v12 + 1;
            *((void *)this + 1) = v13;
LABEL_33:
            v16[0] = 0;
            if ((unint64_t)v13 >= v11 || *v13 < 0)
            {
              uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v16);
              if (!result) {
                return result;
              }
              unsigned int v14 = v16[0];
            }
            else
            {
              unsigned int v14 = *v13;
              *((void *)this + 1) = v13 + 1;
            }
            if (v14 <= 1)
            {
              *(_DWORD *)(a1 + 48) |= 0x10u;
              *(_DWORD *)(a1 + 40) = v14;
            }
            if (*((void *)this + 1) == *((void *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              uint64_t result = 1;
              *((unsigned char *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_19;
        }
        goto LABEL_29;
      case 4u:
        int v7 = TagFallback & 7;
        if (v7 == 1) {
          goto LABEL_24;
        }
        goto LABEL_29;
      case 5u:
        int v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_29;
        }
        int v13 = (char *)*((void *)this + 1);
        unint64_t v11 = *((void *)this + 2);
        goto LABEL_33;
      default:
        int v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4) {
          return 1;
        }
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
        continue;
        }
    }
  }
}

uint64_t sub_10074DF30(uint64_t result, int a2, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 48);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, a2, *(double *)(result + 8), a3);
    int v6 = *(_DWORD *)(v5 + 48);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, a2, *(double *)(v5 + 16), a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 4) == 0)
  {
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, a2, *(double *)(v5 + 32), a3);
    if ((*(_DWORD *)(v5 + 48) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteDouble((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, a2, *(double *)(v5 + 24), a3);
  int v6 = *(_DWORD *)(v5 + 48);
  if ((v6 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v6 & 0x10) == 0) {
    return result;
  }
LABEL_11:
  int v7 = *(_DWORD *)(v5 + 40);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)5, v7, a2, a4);
}

uint64_t sub_10074DFF4(uint64_t a1, unsigned int a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 48);
  if (*(unsigned char *)(a1 + 48))
  {
    unsigned int v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0) {
      v4 += 9;
    }
    if ((v3 & 4) != 0) {
      v4 += 9;
    }
    if ((v3 & 8) != 0) {
      uint64_t v5 = v4 + 9;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 0x10) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 40);
      if ((v6 & 0x80000000) != 0)
      {
        int v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      }
      else
      {
        int v7 = 2;
      }
      uint64_t v5 = (v7 + v5);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 44) = v5;
  return v5;
}

void sub_10074E08C(uint64_t a1, void *lpsrc)
{
  sub_10074DA10(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074E114()
{
  return 1;
}

void *sub_10074E11C@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.PwrMeasurement");
}

void sub_10074E12C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v7);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 24);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 24) |= 1u;
      *(void *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 24);
    }
    if ((v4 & 2) != 0)
    {
      char v6 = *(unsigned char *)(a2 + 16);
      *(_DWORD *)(a1 + 24) |= 2u;
      *(unsigned char *)(a1 + 16) = v6;
    }
  }
}

void sub_10074E1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10074E1F0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C71A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10074E210(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C71A8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_10074E264(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A380;
  if (!qword_10248A380)
  {
    sub_1007480C0(0, a2, a3, a4);
    return qword_10248A380;
  }
  return result;
}

void sub_10074E294()
{
}

uint64_t sub_10074E2E4(uint64_t result)
{
  if (*(unsigned char *)(result + 24))
  {
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
  }
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_10074E2FC(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unint64_t *)(a1 + 8);
  while (1)
  {
    while (1)
    {
      char v6 = (char *)*((void *)this + 1);
      if ((unint64_t)v6 >= *((void *)this + 2) || *v6 < 0)
      {
        unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
        *((_DWORD *)this + 8) = TagFallback;
        if (!TagFallback) {
          return 1;
        }
      }
      else
      {
        unint64_t TagFallback = *v6;
        *((_DWORD *)this + 8) = TagFallback;
        *((void *)this + 1) = v6 + 1;
        if (!TagFallback) {
          return 1;
        }
      }
      if (TagFallback >> 3 != 1) {
        break;
      }
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) != 0) {
        goto LABEL_16;
      }
      unint64_t v11 = (char *)*((void *)this + 1);
      unint64_t v9 = *((void *)this + 2);
      if ((unint64_t)v11 >= v9 || *v11 < 0)
      {
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (!result) {
          return result;
        }
        uint64_t v12 = (unsigned char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
      }
      else
      {
        *uint64_t v5 = *v11;
        uint64_t v12 = v11 + 1;
        *((void *)this + 1) = v12;
      }
      *(_DWORD *)(a1 + 24) |= 1u;
      if ((unint64_t)v12 < v9 && *v12 == 16)
      {
        int v10 = v12 + 1;
        *((void *)this + 1) = v10;
LABEL_24:
        unsigned int v16 = 0;
        if ((unint64_t)v10 >= v9 || *v10 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v16);
          if (!result) {
            return result;
          }
          unsigned int v13 = v16;
          unsigned int v14 = (unsigned __int8 *)*((void *)this + 1);
          unint64_t v9 = *((void *)this + 2);
        }
        else
        {
          unsigned int v13 = *v10;
          unsigned int v14 = (unsigned __int8 *)(v10 + 1);
          *((void *)this + 1) = v14;
        }
        *(unsigned char *)(a1 + 16) = v13 != 0;
        *(_DWORD *)(a1 + 24) |= 2u;
        if (v14 == (unsigned __int8 *)v9 && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
        {
          *((_DWORD *)this + 8) = 0;
          uint64_t result = 1;
          *((unsigned char *)this + 36) = 1;
          return result;
        }
      }
    }
    if (TagFallback >> 3 == 2)
    {
      int v8 = TagFallback & 7;
      if ((TagFallback & 7) == 0)
      {
        int v10 = (char *)*((void *)this + 1);
        unint64_t v9 = *((void *)this + 2);
        goto LABEL_24;
      }
    }
    else
    {
      int v8 = TagFallback & 7;
    }
LABEL_16:
    if (v8 == 4) {
      return 1;
    }
    if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3) & 1) == 0)return 0; {
  }
    }
}

uint64_t sub_10074E4B0(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  BOOL v4 = a2;
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 24);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 24);
  }
  if ((v6 & 2) != 0)
  {
    int v7 = *(unsigned __int8 *)(v5 + 16);
    return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, v7, v4, a4);
  }
  return result;
}

uint64_t sub_10074E51C(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 24);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 24))
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 24);
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      uint64_t result = v4 + 2;
    }
    else {
      uint64_t result = v4;
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 20) = result;
  return result;
}

void sub_10074E578(uint64_t a1, void *lpsrc)
{
  sub_10074E12C(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074E600()
{
  return 1;
}

void *sub_10074E608@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.DecodedRti");
}

void sub_10074E618(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage();
    wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<();
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=();
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v9);
  }
  LOBYTE(v4) = *(unsigned char *)(a2 + 36);
  if ((_BYTE)v4)
  {
    if (*(unsigned char *)(a2 + 36))
    {
      uint64_t v5 = *(void *)(a2 + 8);
      *(_DWORD *)(a1 + 36) |= 1u;
      *(void *)(a1 + 8) = v5;
      int v4 = *(_DWORD *)(a2 + 36);
      if ((v4 & 2) == 0)
      {
LABEL_6:
        if ((v4 & 4) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else if ((*(unsigned char *)(a2 + 36) & 2) == 0)
    {
      goto LABEL_6;
    }
    char v6 = *(unsigned char *)(a2 + 24);
    *(_DWORD *)(a1 + 36) |= 2u;
    *(unsigned char *)(a1 + 24) = v6;
    int v4 = *(_DWORD *)(a2 + 36);
    if ((v4 & 4) == 0)
    {
LABEL_7:
      if ((v4 & 8) == 0) {
        return;
      }
LABEL_12:
      unsigned int v8 = *(_DWORD *)(a2 + 28);
      if (!sub_1003DE2E4(v8)) {
        sub_101A6C790();
      }
      *(_DWORD *)(a1 + 36) |= 8u;
      *(_DWORD *)(a1 + 28) = v8;
      return;
    }
LABEL_11:
    uint64_t v7 = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 36) |= 4u;
    *(void *)(a1 + 16) = v7;
    if ((*(_DWORD *)(a2 + 36) & 8) == 0) {
      return;
    }
    goto LABEL_12;
  }
}

void sub_10074E71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_10074E734(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C7220;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

void sub_10074E754(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(void *)a1 = off_1022C7220;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);

  operator delete();
}

uint64_t sub_10074E7A8(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t result = qword_10248A388;
  if (!qword_10248A388)
  {
    sub_1007480C0(0, a2, a3, a4);
    return qword_10248A388;
  }
  return result;
}

void sub_10074E7D8()
{
}

uint64_t sub_10074E830(uint64_t result)
{
  if (*(unsigned char *)(result + 36))
  {
    *(_DWORD *)(result + 28) = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
  }
  *(_DWORD *)(result + 36) = 0;
  return result;
}

uint64_t sub_10074E84C(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  uint64_t v5 = (unint64_t *)(a1 + 8);
  char v6 = (unint64_t *)(a1 + 16);
  while (2)
  {
    uint64_t v7 = (char *)*((void *)this + 1);
    if ((unint64_t)v7 >= *((void *)this + 2) || *v7 < 0)
    {
      unint64_t TagFallback = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = TagFallback;
      if (!TagFallback) {
        return 1;
      }
    }
    else
    {
      unint64_t TagFallback = *v7;
      *((_DWORD *)this + 8) = TagFallback;
      *((void *)this + 1) = v7 + 1;
      if (!TagFallback) {
        return 1;
      }
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unint64_t v11 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        if ((unint64_t)v11 < v10 && (*v11 & 0x80000000) == 0)
        {
          *uint64_t v5 = *v11;
          uint64_t v12 = v11 + 1;
          *((void *)this + 1) = v12;
LABEL_24:
          *(_DWORD *)(a1 + 36) |= 1u;
          if ((unint64_t)v12 < v10 && *v12 == 16)
          {
            unsigned int v13 = v12 + 1;
            *((void *)this + 1) = v13;
            goto LABEL_27;
          }
          continue;
        }
        uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if (result)
        {
          uint64_t v12 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
          goto LABEL_24;
        }
        break;
      case 2u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v13 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
LABEL_27:
        unsigned int v22 = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!result) {
            return result;
          }
          unsigned int v16 = v22;
          unsigned int v17 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          unsigned int v16 = *v13;
          unsigned int v17 = v13 + 1;
          *((void *)this + 1) = v17;
        }
        *(unsigned char *)(a1 + 24) = v16 != 0;
        *(_DWORD *)(a1 + 36) |= 2u;
        if ((unint64_t)v17 >= v10 || *v17 != 24) {
          continue;
        }
        unsigned int v14 = v17 + 1;
        *((void *)this + 1) = v14;
LABEL_35:
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!result) {
            return result;
          }
          unsigned int v18 = (unsigned char *)*((void *)this + 1);
          unint64_t v10 = *((void *)this + 2);
        }
        else
        {
          *char v6 = *v14;
          unsigned int v18 = v14 + 1;
          *((void *)this + 1) = v18;
        }
        *(_DWORD *)(a1 + 36) |= 4u;
        if ((unint64_t)v18 >= v10 || *v18 != 32) {
          continue;
        }
        unsigned int v15 = v18 + 1;
        *((void *)this + 1) = v15;
LABEL_43:
        unsigned int v21 = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          uint64_t result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!result) {
            return result;
          }
          unsigned int v19 = v21;
        }
        else
        {
          unsigned int v19 = *v15;
          *((void *)this + 1) = v15 + 1;
        }
        if (sub_1003DE2E4(v19))
        {
          if (!sub_1003DE2E4(v19)) {
            sub_101A6C790();
          }
          *(_DWORD *)(a1 + 36) |= 8u;
          *(_DWORD *)(a1 + 28) = v19;
        }
        if (*((void *)this + 1) != *((void *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        uint64_t result = 1;
        *((unsigned char *)this + 36) = 1;
        return result;
      case 3u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v14 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_35;
      case 4u:
        int v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0) {
          goto LABEL_18;
        }
        unsigned int v15 = (char *)*((void *)this + 1);
        unint64_t v10 = *((void *)this + 2);
        goto LABEL_43;
      default:
        int v9 = TagFallback & 7;
LABEL_18:
        if (v9 == 4) {
          return 1;
        }
        if (wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, (wireless_diagnostics::google::protobuf::io::CodedInputStream *)TagFallback, a3))continue; {
        return 0;
        }
    }
    return result;
  }
}

uint64_t sub_10074EB40(uint64_t result, unint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  uint64_t v5 = result;
  int v6 = *(_DWORD *)(result + 36);
  if (v6)
  {
    uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)1, *(void *)(result + 8), a2, a4);
    int v6 = *(_DWORD *)(v5 + 36);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)3, *(void *)(v5 + 16), a2, a4);
      if ((*(_DWORD *)(v5 + 36) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)2, *(unsigned __int8 *)(v5 + 24), a2, a4);
  int v6 = *(_DWORD *)(v5 + 36);
  if ((v6 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v6 & 8) == 0) {
    return result;
  }
LABEL_9:
  int v7 = *(_DWORD *)(v5 + 28);

  return wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum((wireless_diagnostics::google::protobuf::internal::WireFormatLite *)4, v7, a2, a4);
}

uint64_t sub_10074EBE8(uint64_t a1, unint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 36);
  if ((_BYTE)v3)
  {
    if (*(unsigned char *)(a1 + 36))
    {
      unsigned int v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 8), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 36);
    }
    else
    {
      unsigned int v4 = 0;
    }
    if ((v3 & 2) != 0) {
      uint64_t v5 = v4 + 2;
    }
    else {
      uint64_t v5 = v4;
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 16), a2)+ 1;
      int v3 = *(_DWORD *)(a1 + 36);
    }
    if ((v3 & 8) != 0)
    {
      int v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
      if ((v6 & 0x80000000) != 0)
      {
        int v7 = 11;
      }
      else if (v6 >= 0x80)
      {
        int v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
      }
      else
      {
        int v7 = 2;
      }
      uint64_t v5 = (v7 + v5);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = v5;
  return v5;
}

void sub_10074EC90(uint64_t a1, void *lpsrc)
{
  sub_10074E618(a1, (uint64_t)lpsrc);
}

uint64_t sub_10074ED18()
{
  return 1;
}

void *sub_10074ED20@<X0>(void *a1@<X8>)
{
  return sub_100134750(a1, "proto.gnss.DecodedExtendedEphemeris");
}

uint64_t sub_10074ED34(uint64_t result, int a2)
{
  *(void *)uint64_t result = off_1022C73B8;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = a2;
  return result;
}

void *sub_10074ED5C(void *a1)
{
  *a1 = off_1022C73B8;
  sub_1004C62FC(a1 + 3, 0);
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

BOOL sub_10074EDB8(uint64_t *a1)
{
  buf[0] = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  sub_10006ACBC(&v20, "AlwaysOnDeviceMotion", buf, 0);
  buf[0] = 1;
  sub_10006ACBC(&v18, "DeviceMotionUseGyroController", buf, 0);
  if (!a1[1])
  {
    uint64_t v2 = sub_1000D3E78();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_10074F21C;
    v17[3] = &unk_1022A3020;
    v17[4] = a1;
    sub_1009E8E94(v2, (uint64_t)v17);
  }
  int v16 = 2;
  int v3 = v21;
  BYTE1(v16) = v21;
  int v4 = v19;
  BYTE2(v16) = v19;
  int v5 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  HIBYTE(v16) = v5;
  if (qword_102419080 != -1) {
    dispatch_once(&qword_102419080, &stru_1022C73F0);
  }
  int v6 = qword_102419088;
  if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1[1] + 16);
    *(_DWORD *)buf = 67109888;
    int v31 = v7;
    __int16 v32 = 1024;
    int v33 = v3;
    __int16 v34 = 1024;
    int v35 = v4;
    __int16 v36 = 1024;
    int v37 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CLDeviceMotionControl-%d] Configuring,enableAlwaysOn,%d,useGyroController,%d,enableVisualLocalization,%d", buf, 0x1Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022C73F0);
    }
    int v12 = *(_DWORD *)(a1[1] + 16);
    int v22 = 67109888;
    int v23 = v12;
    __int16 v24 = 1024;
    int v25 = v3;
    __int16 v26 = 1024;
    int v27 = v4;
    __int16 v28 = 1024;
    int v29 = v5;
    unsigned int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDeviceMotionControl::configure()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  BOOL v8 = sub_10074F3D4(a1, (uint64_t)&v16, (char *)4);
  if (!v8)
  {
    if (qword_102419080 != -1) {
      dispatch_once(&qword_102419080, &stru_1022C73F0);
    }
    int v9 = qword_102419088;
    if (os_log_type_enabled((os_log_t)qword_102419088, OS_LOG_TYPE_INFO))
    {
      int v10 = *(_DWORD *)(a1[1] + 16);
      *(_DWORD *)buf = 67109120;
      int v31 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[CLDeviceMotionControl-%d] Configure failed", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419080 != -1) {
        dispatch_once(&qword_102419080, &stru_1022C73F0);
      }
      int v14 = *(_DWORD *)(a1[1] + 16);
      int v22 = 67109120;
      int v23 = v14;
      unsigned int v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLDeviceMotionControl::configure()", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  return v8;
}

uint64_t sub_10074F21C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (!*(void *)(v1 + 8))
  {
    int v2 = *(_DWORD *)(v1 + 32);
    int v3 = (uint64_t *)sub_100A26784();
    v6[0] = 65292;
    v6[1] = v2;
    char v7 = 0;
    sub_101A46D60(v3, (uint64_t)v6, (uint64_t *)&v8);
    long long v4 = v8;
    long long v8 = 0uLL;
    int v5 = *(std::__shared_weak_count **)(v1 + 16);
    *(_OWORD *)(v1 + 8) = v4;
    if (v5)
    {
      sub_1000DB0A0(v5);
      if (*((void *)&v8 + 1)) {
        sub_1000DB0A0(*((std::__shared_weak_count **)&v8 + 1));
      }
    }
    sub_100A2932C(*(uint64_t **)(v1 + 8), (uint64_t)nullsub_301, v1);
    sub_100A294B4(*(void *)(v1 + 8), (uint64_t)sub_10074F38C, v1);
    sub_100A293C8(*(void *)(v1 + 8), (uint64_t)sub_10074F38C, v1);
    sub_100A29A24(*(void *)(v1 + 8), (uint64_t)sub_10074F38C, v1);
    operator new();
  }
  return result;
}

void sub_10074F34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  operator delete();
}

uint64_t sub_10074F38C(uint64_t a1)
{
  int v2 = *(uint64_t **)(a1 + 24);
  sub_1012B3B9C(v2);
  sub_1012B3F28(v2);

  return sub_10074EDB8(a1);
}

BOOL sub_10074F3D4(uint64_t *a1, uint64_t a2, char *a3)
{
  if (((*(uint64_t (**)(uint64_t *))(*a1 + 16))(a1) & 1) == 0) {
    sub_101A6C7BC();
  }
  int v8 = 0;
  uint64_t v7 = 4;
  return sub_1012B4B18(a1[3], a2, a3, (uint64_t)&v8, (uint64_t)&v7) == 0;
}

void sub_10074F464(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

double sub_10074F494(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 542);
  double v3 = *(double *)(a1 + 448);
  double v4 = *(double *)(a1 + 456);
  double v5 = *(float *)(a1 + 1360) * 1.107 + -0.123;
  double v6 = v4 * (v5 + *(float *)(a1 + 296) * 0.006);
  if (v3 <= 0.0) {
    double v7 = v4 * (v5 + *(float *)(a1 + 296) * 0.006);
  }
  else {
    double v7 = 2.23693991 / v3;
  }
  if (v2 > 5)
  {
    double v8 = 0.0;
  }
  else
  {
    double v8 = v4 * (v5 + *(float *)(a1 + 296) * 0.006);
    if (((1 << v2) & 0x29) == 0)
    {
      double v8 = v4 * (v5 + *(float *)(a1 + 296) * 0.006);
      if (((1 << v2) & 0x14) == 0) {
        double v8 = v7;
      }
    }
  }
  if (qword_102418FF0 != -1) {
    dispatch_once(&qword_102418FF0, &stru_1022C7458);
  }
  int v9 = qword_102418FF8;
  if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 120);
    uint64_t v11 = *(void *)(a1 + 456);
    *(_DWORD *)buf = 134350336;
    uint64_t v15 = v10;
    __int16 v16 = 1026;
    unsigned int v17 = v2;
    __int16 v18 = 2050;
    double v19 = v8;
    __int16 v20 = 2050;
    double v21 = v7;
    __int16 v22 = 2050;
    double v23 = v6;
    __int16 v24 = 2050;
    uint64_t v25 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "beginTime, %{public}f, distanceSource, %{public}d, bestSpeed, %{public}f, pedSpeed, %{public}f, uncalibratedSpeed, %{public}f, currentCadence,%{public}f", buf, 0x3Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022C7458);
    }
    unsigned int v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static double CLFitnessYouthBriskWalkOverride::bestSpeed(const CLNatalieModelInput &)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  return v8;
}

uint64_t sub_10074F750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = sub_10074F494(a3);
  *(_DWORD *)buf = 0;
  double v6 = sub_100706F30((float *)(a3 + 1352), (int *)buf);
  if (v5 <= v6)
  {
    if (v5 <= 0.0) {
      return a2;
    }
    uint64_t v8 = sub_100779764(1, a2);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022C7458);
    }
    uint64_t v11 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a3 + 120);
      *(_DWORD *)buf = 134218752;
      uint64_t v16 = v12;
      __int16 v17 = 1026;
      int v18 = a2;
      __int16 v19 = 1026;
      int v20 = v8;
      __int16 v21 = 2050;
      double v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Overriding youth type for nonzero speed, beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 == -1) {
        goto LABEL_16;
      }
      goto LABEL_20;
    }
  }
  else
  {
    double v7 = v6;
    uint64_t v8 = sub_100779764(2, a2);
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022C7458);
    }
    int v9 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a3 + 120);
      *(_DWORD *)buf = 134219008;
      uint64_t v16 = v10;
      __int16 v17 = 1026;
      int v18 = a2;
      __int16 v19 = 1026;
      int v20 = v8;
      __int16 v21 = 2050;
      double v22 = v5;
      __int16 v23 = 2050;
      double v24 = v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Overriding youth type for brisk walk, beginTime, %f, before, %{public}d, after, %{public}d, speed, %{public}f, speedThreshold, %{public}f", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 == -1)
      {
LABEL_16:
        unsigned int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual CLMotionActivity::TypeYouth CLFitnessYouthBriskWalkOverride::doOverride(CLMotionActivity::TypeYouth, const CLNatalieModelInput &)", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
        return v8;
      }
LABEL_20:
      dispatch_once(&qword_102418FF0, &stru_1022C7458);
      goto LABEL_16;
    }
  }
  return v8;
}

void sub_10074FAF4(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10074FB24(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022C7488;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)(a1 + 28) = 0xA00000000;
  *(_DWORD *)(a1 + 24) = 1031798784;
  *(void *)(a1 + 80) = 0;
  if (a2 != 24)
  {
    if (a2 == 17) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_10074FC88()
{
}

uint64_t sub_10074FD28(uint64_t a1, double *a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D600, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247D600))
  {
    LODWORD(v113[0]) = 8;
    sub_1004F7D80(qword_10247D5E8, v113, 1uLL);
    __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_10247D5E8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247D600);
  }
  __int16 v114 = 0;
  *(_OWORD *)unsigned int v113 = xmmword_101D1E250;
  memset(&v113[2], 0, 135);
  long long v115 = xmmword_101D1E250;
  uint64_t v116 = 0;
  int v117 = 0;
  v119[0] = 0;
  uint64_t v118 = 0;
  *(void *)((char *)v119 + 5) = 0;
  *(void *)((char *)&v119[1] + 6) = 0;
  char v120 = 0;
  memset(&v119[3], 0, 24);
  long long v121 = xmmword_101D1E250;
  uint64_t v122 = 0;
  int v123 = 0;
  unint64_t v124 = 0xFFEFFFFFFFFFFFFFLL;
  int v135 = 0;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v128 = 0u;
  long long v129 = 0u;
  int v130 = 0;
  long long v131 = 0u;
  long long v132 = 0u;
  long long v133 = 0u;
  memset(v134, 0, sizeof(v134));
  uint64_t v136 = 0;
  uint64_t v137 = 0;
  unint64_t v138 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v139 = 0;
  int v140 = 0;
  uint64_t v146 = 0;
  __int16 v147 = 0;
  int v152 = 0;
  int v145 = 0;
  long long v144 = 0u;
  long long v143 = 0u;
  long long v142 = 0u;
  long long v141 = 0u;
  long long v149 = 0u;
  long long v148 = 0u;
  char v150 = 0;
  memset(v151, 0, sizeof(v151));
  unint64_t v153 = 0xFFEFFFFFFFFFFFFFLL;
  long long v172 = 0u;
  long long v171 = 0u;
  long long v170 = 0u;
  long long v169 = 0u;
  long long v168 = 0u;
  long long v167 = 0u;
  long long v166 = 0u;
  long long v165 = 0u;
  long long v164 = 0u;
  long long v163 = 0u;
  long long v162 = 0u;
  long long v161 = 0u;
  long long v160 = 0u;
  long long v159 = 0u;
  long long v158 = 0u;
  long long v157 = 0u;
  long long v156 = 0u;
  long long v155 = 0u;
  long long v154 = 0u;
  uint64_t v173 = 0;
  unint64_t v174 = 0xFFEFFFFFFFFFFFFFLL;
  long long v175 = 0u;
  long long v176 = 0u;
  long long v177 = 0u;
  long long v178 = 0u;
  unint64_t v179 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v180 = 0;
  int v181 = 0;
  uint64_t v182 = 0;
  char v183 = 0;
  unint64_t v184 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v186 = 0;
  uint64_t v185 = 0;
  uint64_t v187 = 0x80000000800000;
  uint64_t v189 = 0;
  uint64_t v188 = 0;
  long long v190 = xmmword_101D1E260;
  uint64_t v191 = 0x80000000800000;
  long long v192 = 0u;
  long long v193 = 0u;
  uint64_t v194 = 0;
  unint64_t v195 = 0xFFEFFFFFFFFFFFFFLL;
  long long v196 = 0u;
  long long v197 = 0u;
  long long v198 = 0u;
  long long v199 = 0u;
  long long v200 = 0u;
  long long v201 = 0u;
  int v202 = 0;
  unint64_t v203 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v204 = 0;
  int v205 = 0;
  unint64_t v206 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v207 = 7;
  unint64_t v208 = 0xFFEFFFFFFFFFFFFFLL;
  char v209 = 0;
  uint64_t v211 = 0;
  uint64_t v210 = 0;
  uint64_t v212 = 0;
  if (sub_100174478(a2, qword_10247D5E8, (uint64_t)v113)) {
    *(unsigned char *)(a1 + 8) = BYTE8(v163) != 0;
  }
  if ((***(uint64_t (****)(void, double *))(a1 + 80))(*(void *)(a1 + 80), a2)) {
    return 2;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247D620, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247D620))
  {
    LODWORD(v13[0]) = 2;
    sub_1004F7D80(qword_10247D608, v13, 1uLL);
    __cxa_atexit((void (*)(void *))sub_1004F7E04, qword_10247D608, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247D620);
  }
  __int16 v14 = 0;
  *(_OWORD *)unsigned int v13 = xmmword_101D1E250;
  memset(&v13[2], 0, 135);
  long long v15 = xmmword_101D1E250;
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t v18 = 0;
  v19[0] = 0;
  *(void *)((char *)v19 + 5) = 0;
  *(void *)((char *)&v19[1] + 6) = 0;
  char v20 = 0;
  memset(&v19[3], 0, 24);
  long long v21 = xmmword_101D1E250;
  uint64_t v22 = 0;
  int v23 = 0;
  unint64_t v24 = 0xFFEFFFFFFFFFFFFFLL;
  int v35 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  int v30 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  memset(v34, 0, sizeof(v34));
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v39 = 0;
  int v40 = 0;
  uint64_t v46 = 0;
  __int16 v47 = 0;
  int v52 = 0;
  int v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v49 = 0u;
  long long v48 = 0u;
  char v50 = 0;
  memset(v51, 0, sizeof(v51));
  unint64_t v53 = 0xFFEFFFFFFFFFFFFFLL;
  long long v72 = 0u;
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  long long v66 = 0u;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  uint64_t v73 = 0;
  unint64_t v74 = 0xFFEFFFFFFFFFFFFFLL;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  unint64_t v79 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v80 = 0;
  int v81 = 0;
  uint64_t v82 = 0;
  char v83 = 0;
  unint64_t v84 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v86 = 0;
  uint64_t v85 = 0;
  uint64_t v87 = 0x80000000800000;
  uint64_t v89 = 0;
  uint64_t v88 = 0;
  long long v90 = xmmword_101D1E260;
  uint64_t v91 = 0x80000000800000;
  long long v92 = 0u;
  long long v93 = 0u;
  uint64_t v94 = 0;
  unint64_t v95 = 0xFFEFFFFFFFFFFFFFLL;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  int v102 = 0;
  unint64_t v103 = 0xFFEFFFFFFFFFFFFFLL;
  __int16 v104 = 0;
  int v105 = 0;
  unint64_t v106 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v107 = 7;
  unint64_t v108 = 0xFFEFFFFFFFFFFFFFLL;
  char v109 = 0;
  uint64_t v111 = 0;
  uint64_t v110 = 0;
  uint64_t v112 = 0;
  if (!sub_100174478(a2, qword_10247D608, (uint64_t)v13)) {
    return 0;
  }
  double v6 = (_WORD *)(a1 + 28);
  uint64_t v5 = *(unsigned __int16 *)(a1 + 28);
  uint64_t v7 = *(unsigned __int16 *)(a1 + 30);
  unint64_t v8 = *(unsigned int *)(a1 + 32);
  uint64_t v9 = v5 + v7 >= v8 ? *(unsigned int *)(a1 + 32) : 0;
  float v4 = *((double *)&v26 + 1);
  *(float *)&v6[2 * (v5 + v7 - v9) + 4] = v4;
  if (v8 <= v7)
  {
    unint64_t v11 = v5 + 1;
    __int16 v12 = v11 >= v8 ? v8 : 0;
    *double v6 = v11 - v12;
  }
  else
  {
    LOWORD(v7) = v7 + 1;
    *(_WORD *)(a1 + 30) = v7;
    LODWORD(v7) = (unsigned __int16)v7;
  }
  *(unsigned char *)(a1 + 12) = 1;
  if (v8 == v7
    && (sub_1007504E8((unsigned __int16 *)(a1 + 28), (unsigned int (*)(float, float))sub_1007506E8, 0) > 13.4112
     || *(unsigned char *)(a1 + 8)
     && sub_1007504E8((unsigned __int16 *)(a1 + 28), (unsigned int (*)(float, float))sub_1007506E8, 0) > 6.7056))
  {
    return 9;
  }
  else
  {
    return 0;
  }
}

void sub_1007503B8(_Unwind_Exception *a1)
{
}

void *sub_1007503E8(void *a1)
{
  *a1 = off_1022C7488;
  uint64_t v2 = a1[10];
  a1[10] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  return a1;
}

void sub_100750458(void *a1)
{
  *a1 = off_1022C7488;
  uint64_t v2 = a1[10];
  a1[10] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }

  operator delete();
}

float sub_1007504E8(unsigned __int16 *a1, unsigned int (*a2)(float, float), unint64_t a3)
{
  unint64_t v6 = a1[1];
  if (!a1[1])
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C74C0);
    }
    unint64_t v11 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C74C0);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "T CMQueue<float>::getComparison(int (*)(const T, const T), size_t) const [T = float]", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  float v7 = *(float *)sub_1004182C4(a1, a3);
  if (v6 > a3)
  {
    do
    {
      unint64_t v8 = (float *)sub_1004182C4(a1, a3);
      float v9 = *v8;
      if (a2(*v8, v7)) {
        float v7 = v9;
      }
      ++a3;
    }
    while (v6 != a3);
  }
  return v7;
}

BOOL sub_1007506E8(float a1, float a2)
{
  return a1 < a2;
}

void sub_1007506F4(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_100750724(uint64_t a1)
{
  if (CFAbsoluteTimeGetCurrent() - *(double *)a1 >= 86400.0)
  {
    if (qword_102418FC0 != -1) {
      dispatch_once(&qword_102418FC0, &stru_1022C74E0);
    }
    double v3 = qword_102418FC8;
    if (os_log_type_enabled((os_log_t)qword_102418FC8, OS_LOG_TYPE_DEBUG))
    {
      int v4 = *(_DWORD *)(a1 + 8);
      double v5 = *(double *)a1;
      *(_DWORD *)buf = 67240704;
      int v9 = v4;
      __int16 v10 = 2048;
      double v11 = v5;
      __int16 v12 = 2050;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[CLSuppressionLogger][counterReset]  suppressionStateMetricsCounter,%{public}d,fTimestampLastSuppressionStateMetricsCounterReset,%f,currentTime,%{public}f", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FC0 != -1) {
        dispatch_once(&qword_102418FC0, &stru_1022C74E0);
      }
      CFAbsoluteTimeGetCurrent();
      float v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLSuppressionLogger::feedSuppressionStateMetrics(const CMMotionCoprocessorReply::SuppressionStateMetrics *)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    CFAbsoluteTime v6 = CFAbsoluteTimeGetCurrent();
    int v2 = 0;
    *(CFAbsoluteTime *)a1 = v6;
  }
  else
  {
    int v2 = *(_DWORD *)(a1 + 8);
  }
  *(_DWORD *)(a1 + 8) = v2 + 1;
  if (v2 < *(_DWORD *)(a1 + 12)) {
    AnalyticsSendEventLazy();
  }
}

NSDictionary *sub_1007509C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v18[0] = @"logSequenceID";
  v19[0] = +[NSNumber numberWithUnsignedLongLong:(unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0)];
  v18[1] = @"isAPAwake";
  v19[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 40) + 1)];
  v18[2] = @"exitedToFSMState";
  v19[2] = +[NSNumber numberWithInt:*(char *)(*(void *)(a1 + 40) + 2)];
  v18[3] = @"sessionFSMState";
  v19[3] = +[NSNumber numberWithInt:*(unsigned __int8 *)(*(void *)(a1 + 40) + 3)];
  v18[4] = @"timeInFSMState";
  v19[4] = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 40) + 4)];
  v18[5] = @"timeStatic";
  v19[5] = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 40) + 36)];
  v18[6] = @"timeFrozen";
  void v19[6] = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 40) + 44)];
  v18[7] = @"timeMoving";
  v19[7] = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 40) + 52)];
  v18[8] = @"meanGravityAngle";
  if (*(float *)(*(void *)(a1 + 40) + 12) >= 1.1755e-38) {
    double v3 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    double v3 = +[NSNull null];
  }
  v19[8] = v3;
  v18[9] = @"meanPocketProbability";
  if (*(float *)(*(void *)(a1 + 40) + 16) >= 1.1755e-38) {
    int v4 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    int v4 = +[NSNull null];
  }
  v19[9] = v4;
  v18[10] = @"meanIlluminance";
  if (*(float *)(*(void *)(a1 + 40) + 20) >= 1.1755e-38) {
    double v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    double v5 = +[NSNull null];
  }
  v19[10] = v5;
  v18[11] = @"proxBaselineAtEntry";
  if (*(float *)(*(void *)(a1 + 40) + 60) >= 1.1755e-38) {
    CFAbsoluteTime v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    CFAbsoluteTime v6 = +[NSNull null];
  }
  v19[11] = v6;
  v18[12] = @"proxBaselineAtExit";
  if (*(float *)(*(void *)(a1 + 40) + 68) >= 1.1755e-38) {
    float v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    float v7 = +[NSNull null];
  }
  v19[12] = v7;
  v18[13] = @"proxBaselineUncertaintyAtEntry";
  if (*(float *)(*(void *)(a1 + 40) + 64) >= 1.1755e-38) {
    unint64_t v8 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    unint64_t v8 = +[NSNull null];
  }
  v19[13] = v8;
  v18[14] = @"proxBaselineUncertaintyAtExit";
  if (*(float *)(*(void *)(a1 + 40) + 72) >= 1.1755e-38) {
    int v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    int v9 = +[NSNull null];
  }
  v19[14] = v9;
  v18[15] = @"maxProxTemperature";
  if (*(float *)(*(void *)(a1 + 40) + 24) >= 1.1755e-38) {
    __int16 v10 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    __int16 v10 = +[NSNull null];
  }
  v19[15] = v10;
  v18[16] = @"minProxTemperature";
  if (*(float *)(*(void *)(a1 + 40) + 28) <= 3.4028e38) {
    double v11 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    double v11 = +[NSNull null];
  }
  v19[16] = v11;
  v18[17] = @"meanProxTemperature";
  if (*(float *)(*(void *)(a1 + 40) + 32) >= 1.1755e-38) {
    __int16 v12 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  else {
    __int16 v12 = +[NSNull null];
  }
  v19[17] = v12;
  v18[18] = @"alwaysOnViewObstructed";
  if (sub_100DFD2AC())
  {
    unsigned __int8 v13 = atomic_load((unsigned __int8 *)(sub_100DFD2AC() + 96));
    __int16 v14 = +[NSNumber numberWithBool:v13 & 1];
  }
  else
  {
    __int16 v14 = +[NSNull null];
  }
  v19[18] = v14;
  v18[19] = @"displayState";
  v19[19] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 20)];
  v18[20] = @"suppressionClientTypes";
  if (sub_100DFD2AC())
  {
    uint64_t v15 = atomic_load((unsigned int *)(sub_100DFD2AC() + 92));
    uint64_t v16 = +[NSNumber numberWithUnsignedInt:v15];
  }
  else
  {
    uint64_t v16 = +[NSNull null];
  }
  v19[20] = v16;
  return +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:21];
}

uint64_t sub_100750E78(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 1);
  if (v2 == 2)
  {
    uint64_t v3 = result;
    uint64_t result = AnalyticsSendEventLazy();
    *(unsigned char *)(v3 + 16) = 0;
  }
  else if (v2 == 1 || !*(unsigned char *)(a2 + 1))
  {
    return AnalyticsSendEventLazy();
  }
  return result;
}

NSDictionary *sub_100750FC8(uint64_t a1)
{
  v11[0] = @"logSequenceID";
  v12[0] = +[NSNumber numberWithUnsignedLongLong:(unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0)];
  v11[1] = @"timeSinceLastMeasurement";
  if (*(void *)(*(void *)(a1 + 32) + 26)) {
    int v2 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
  }
  else {
    int v2 = +[NSNull null];
  }
  v12[1] = v2;
  v11[2] = @"estimate";
  if (*(float *)(*(void *)(a1 + 32) + 6) >= 3.4028e38) {
    uint64_t v3 = +[NSNull null];
  }
  else {
    uint64_t v3 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  void v12[2] = v3;
  void v11[3] = @"uncertainty";
  if (*(float *)(*(void *)(a1 + 32) + 34) >= 3.4028e38) {
    int v4 = +[NSNull null];
  }
  else {
    int v4 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v12[3] = v4;
  v11[4] = @"factoryCalibration";
  if (*(float *)(*(void *)(a1 + 32) + 10) >= 3.4028e38) {
    double v5 = +[NSNull null];
  }
  else {
    double v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v12[4] = v5;
  v11[5] = @"currentLux";
  if (*(float *)(*(void *)(a1 + 32) + 2) >= 3.4028e38) {
    CFAbsoluteTime v6 = +[NSNull null];
  }
  else {
    CFAbsoluteTime v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v12[5] = v6;
  v11[6] = @"proxIntensity";
  if (*(float *)(*(void *)(a1 + 32) + 14) >= 3.4028e38) {
    float v7 = +[NSNull null];
  }
  else {
    float v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v12[6] = v7;
  v11[7] = @"temperature";
  if (*(float *)(*(void *)(a1 + 32) + 18) >= 3.4028e38) {
    unint64_t v8 = +[NSNull null];
  }
  else {
    unint64_t v8 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v12[7] = v8;
  v11[8] = @"temperatureAtLastMeasurement";
  if (*(float *)(*(void *)(a1 + 32) + 22) >= 3.4028e38) {
    int v9 = +[NSNull null];
  }
  else {
    int v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v12[8] = v9;
  return +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:9];
}

NSDictionary *sub_100751248(uint64_t a1)
{
  v12[0] = @"resetTriggered";
  v13[0] = +[NSNumber numberWithBool:1];
  v12[1] = @"logSequenceID";
  v13[1] = +[NSNumber numberWithUnsignedLongLong:(unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0)];
  void v12[2] = @"suiCountSinceLastLog";
  v13[2] = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 32) + 42)];
  v12[3] = @"timeSinceLastMeasurement";
  if (*(void *)(*(void *)(a1 + 32) + 26)) {
    int v2 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:");
  }
  else {
    int v2 = +[NSNull null];
  }
  v13[3] = v2;
  v12[4] = @"estimate";
  if (*(float *)(*(void *)(a1 + 32) + 6) >= 3.4028e38) {
    uint64_t v3 = +[NSNull null];
  }
  else {
    uint64_t v3 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v13[4] = v3;
  v12[5] = @"uncertainty";
  if (*(float *)(*(void *)(a1 + 32) + 34) >= 3.4028e38) {
    int v4 = +[NSNull null];
  }
  else {
    int v4 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v13[5] = v4;
  v12[6] = @"factoryCalibration";
  if (*(float *)(*(void *)(a1 + 32) + 10) >= 3.4028e38) {
    double v5 = +[NSNull null];
  }
  else {
    double v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v13[6] = v5;
  v12[7] = @"currentLux";
  if (*(float *)(*(void *)(a1 + 32) + 2) >= 3.4028e38) {
    CFAbsoluteTime v6 = +[NSNull null];
  }
  else {
    CFAbsoluteTime v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v13[7] = v6;
  v12[8] = @"proxIntensity";
  if (*(float *)(*(void *)(a1 + 32) + 14) >= 3.4028e38) {
    float v7 = +[NSNull null];
  }
  else {
    float v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v13[8] = v7;
  void v12[9] = @"temperature";
  if (*(float *)(*(void *)(a1 + 32) + 18) >= 3.4028e38) {
    unint64_t v8 = +[NSNull null];
  }
  else {
    unint64_t v8 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v13[9] = v8;
  v12[10] = @"temperatureAtLastMeasurement";
  if (*(float *)(*(void *)(a1 + 32) + 22) >= 3.4028e38) {
    int v9 = +[NSNull null];
  }
  else {
    int v9 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v13[10] = v9;
  v12[11] = @"minProxInLast3s";
  if (*(float *)(*(void *)(a1 + 32) + 38) >= 3.4028e38) {
    __int16 v10 = +[NSNull null];
  }
  else {
    __int16 v10 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  void v13[11] = v10;
  return +[NSDictionary dictionaryWithObjects:v13 forKeys:v12 count:12];
}

NSDictionary *sub_100751540(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v10[0] = @"isOutOfBox";
  v11[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 16)];
  v10[1] = @"logSequenceID";
  v11[1] = +[NSNumber numberWithUnsignedLongLong:(unint64_t)(CFAbsoluteTimeGetCurrent() * 1000000.0)];
  v10[2] = @"timeToFirstEstimate";
  v11[2] = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 40) + 50)];
  v10[3] = @"estimate";
  if (*(float *)(*(void *)(a1 + 40) + 6) >= 3.4028e38) {
    uint64_t v3 = +[NSNull null];
  }
  else {
    uint64_t v3 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  void v11[3] = v3;
  v10[4] = @"uncertainty";
  if (*(float *)(*(void *)(a1 + 40) + 34) >= 3.4028e38) {
    int v4 = +[NSNull null];
  }
  else {
    int v4 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v11[4] = v4;
  v10[5] = @"factoryCalibration";
  if (*(float *)(*(void *)(a1 + 40) + 10) >= 3.4028e38) {
    double v5 = +[NSNull null];
  }
  else {
    double v5 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v11[5] = v5;
  v10[6] = @"currentLux";
  if (*(float *)(*(void *)(a1 + 40) + 2) >= 3.4028e38) {
    CFAbsoluteTime v6 = +[NSNull null];
  }
  else {
    CFAbsoluteTime v6 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v11[6] = v6;
  v10[7] = @"proxIntensity";
  if (*(float *)(*(void *)(a1 + 40) + 14) >= 3.4028e38) {
    float v7 = +[NSNull null];
  }
  else {
    float v7 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v11[7] = v7;
  v10[8] = @"temperature";
  if (*(float *)(*(void *)(a1 + 40) + 18) >= 3.4028e38) {
    unint64_t v8 = +[NSNull null];
  }
  else {
    unint64_t v8 = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
  }
  v11[8] = v8;
  return +[NSDictionary dictionaryWithObjects:v11 forKeys:v10 count:9];
}

uint64_t sub_100751794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

void sub_10075179C(id a1)
{
  qword_102418FC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

BOOL sub_1007517CC(void *a1, CFArrayRef *a2)
{
  CFArrayRef theArray = *a2;
  if (*a2)
  {
    int Count = CFArrayGetCount(theArray);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    double v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = Count;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,signalEnvironment,count,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      long long v29 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillSignalEnvironment(const CFArrayRef &)", "%s\n", v29);
      if (v29 != buf) {
        free(v29);
      }
    }
    if (Count >= 1)
    {
      CFIndex v6 = 0;
      float v7 = (void **)(a1 + 3);
      uint64_t v8 = Count;
      while (1)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a2, v6);
        __int16 v10 = ValueAtIndex;
        if (!ValueAtIndex) {
          break;
        }
        sub_100134750(buf, (char *)[ValueAtIndex UTF8String]);
        int v11 = sub_100751D78(buf);
        int v12 = v11;
        __int16 v14 = (char *)a1[4];
        unint64_t v13 = a1[5];
        if ((unint64_t)v14 >= v13)
        {
          int v17 = (char *)*v7;
          uint64_t v18 = (v14 - (unsigned char *)*v7) >> 2;
          unint64_t v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v20 = v13 - (void)v17;
          if (v20 >> 1 > v19) {
            unint64_t v19 = v20 >> 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v19;
          }
          if (v21)
          {
            uint64_t v22 = (char *)sub_10017EA34((uint64_t)(a1 + 5), v21);
            int v17 = (char *)a1[3];
            __int16 v14 = (char *)a1[4];
          }
          else
          {
            uint64_t v22 = 0;
          }
          int v23 = &v22[4 * v18];
          *(_DWORD *)int v23 = v12;
          uint64_t v15 = v23 + 4;
          while (v14 != v17)
          {
            int v24 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          a1[3] = v23;
          a1[4] = v15;
          a1[5] = &v22[4 * v21];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          *(_DWORD *)__int16 v14 = v11;
          uint64_t v15 = v14 + 4;
        }
        a1[4] = v15;
        if (v34 < 0) {
          operator delete(*(void **)buf);
        }
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        long long v25 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          int v26 = *(_DWORD *)(a1[4] - 4);
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v10;
          __int16 v32 = 1026;
          int v33 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,signalEnvironment,%{public}@,%{public}d", buf, 0x12u);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_40;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          goto LABEL_45;
        }
LABEL_43:
        long long v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillSignalEnvironment(const CFArrayRef &)", "%s\n", v27);
        if (v27 != buf) {
          free(v27);
        }
LABEL_40:
        if (++v6 == v8) {
          return theArray != 0;
        }
      }
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      uint64_t v16 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,signalEnvironment,NULL arrayElement", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_40;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_43;
      }
LABEL_45:
      dispatch_once(&qword_102419430, &stru_1022C7500);
      goto LABEL_43;
    }
  }
  return theArray != 0;
}

void sub_100751D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100751D78(unsigned __int8 *a1)
{
  sub_100134750(&__p, "Unavailable");
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = v77;
  int v5 = (char)v77;
  if ((v77 & 0x80u) != 0) {
    uint64_t v4 = v76;
  }
  if (v3 != v4)
  {
    BOOL v15 = 0;
    if (((char)v77 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if ((v77 & 0x80u) == 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if ((v2 & 0x80) != 0)
  {
    BOOL v15 = memcmp(*(const void **)a1, p_p, *((void *)a1 + 1)) == 0;
    goto LABEL_22;
  }
  if (a1[23])
  {
    uint64_t v7 = v2 - 1;
    uint64_t v8 = a1;
    do
    {
      int v10 = *v8++;
      int v9 = v10;
      int v12 = *p_p++;
      int v11 = v12;
      BOOL v13 = v7-- != 0;
      char v14 = v13;
      BOOL v15 = v9 == v11;
    }
    while (v9 == v11 && (v14 & 1) != 0);
LABEL_22:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(__p);
    if (v15) {
      return 0;
    }
    goto LABEL_27;
  }
  BOOL v15 = 1;
  if ((char)v77 < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if (v15) {
    return 0;
  }
LABEL_27:
  sub_100134750(&__p, "Rural");
  uint64_t v17 = a1[23];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = a1[23];
  }
  else {
    uint64_t v18 = *((void *)a1 + 1);
  }
  uint64_t v19 = v77;
  int v20 = (char)v77;
  if ((v77 & 0x80u) != 0) {
    uint64_t v19 = v76;
  }
  if (v18 != v19)
  {
    BOOL v29 = 0;
    if (((char)v77 & 0x80000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_52;
  }
  if ((v77 & 0x80u) == 0) {
    unint64_t v21 = (unsigned __int8 *)&__p;
  }
  else {
    unint64_t v21 = (unsigned __int8 *)__p;
  }
  if ((v17 & 0x80) != 0)
  {
    BOOL v29 = memcmp(*(const void **)a1, v21, *((void *)a1 + 1)) == 0;
    goto LABEL_48;
  }
  if (a1[23])
  {
    uint64_t v22 = v17 - 1;
    int v23 = a1;
    do
    {
      int v25 = *v23++;
      int v24 = v25;
      int v27 = *v21++;
      int v26 = v27;
      BOOL v13 = v22-- != 0;
      char v28 = v13;
      BOOL v29 = v24 == v26;
    }
    while (v24 == v26 && (v28 & 1) != 0);
LABEL_48:
    if ((v20 & 0x80000000) == 0) {
      goto LABEL_49;
    }
LABEL_52:
    operator delete(__p);
    if (v29) {
      return 1;
    }
    goto LABEL_53;
  }
  BOOL v29 = 1;
  if ((char)v77 < 0) {
    goto LABEL_52;
  }
LABEL_49:
  if (v29) {
    return 1;
  }
LABEL_53:
  sub_100134750(&__p, "Urban");
  uint64_t v30 = a1[23];
  if ((v30 & 0x80u) == 0) {
    uint64_t v31 = a1[23];
  }
  else {
    uint64_t v31 = *((void *)a1 + 1);
  }
  uint64_t v32 = v77;
  int v33 = (char)v77;
  if ((v77 & 0x80u) != 0) {
    uint64_t v32 = v76;
  }
  if (v31 != v32)
  {
    BOOL v42 = 0;
    if (((char)v77 & 0x80000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_78;
  }
  if ((v77 & 0x80u) == 0) {
    char v34 = (unsigned __int8 *)&__p;
  }
  else {
    char v34 = (unsigned __int8 *)__p;
  }
  if ((v30 & 0x80) != 0)
  {
    BOOL v42 = memcmp(*(const void **)a1, v34, *((void *)a1 + 1)) == 0;
    goto LABEL_74;
  }
  if (a1[23])
  {
    uint64_t v35 = v30 - 1;
    uint64_t v36 = a1;
    do
    {
      int v38 = *v36++;
      int v37 = v38;
      int v40 = *v34++;
      int v39 = v40;
      BOOL v13 = v35-- != 0;
      char v41 = v13;
      BOOL v42 = v37 == v39;
    }
    while (v37 == v39 && (v41 & 1) != 0);
LABEL_74:
    if ((v33 & 0x80000000) == 0) {
      goto LABEL_75;
    }
LABEL_78:
    operator delete(__p);
    if (v42) {
      return 2;
    }
    goto LABEL_79;
  }
  BOOL v42 = 1;
  if ((char)v77 < 0) {
    goto LABEL_78;
  }
LABEL_75:
  if (v42) {
    return 2;
  }
LABEL_79:
  sub_100134750(&__p, "DenseUrban");
  uint64_t v43 = a1[23];
  if ((v43 & 0x80u) == 0) {
    uint64_t v44 = a1[23];
  }
  else {
    uint64_t v44 = *((void *)a1 + 1);
  }
  uint64_t v45 = v77;
  int v46 = (char)v77;
  if ((v77 & 0x80u) != 0) {
    uint64_t v45 = v76;
  }
  if (v44 == v45)
  {
    if ((v77 & 0x80u) == 0) {
      __int16 v47 = (unsigned __int8 *)&__p;
    }
    else {
      __int16 v47 = (unsigned __int8 *)__p;
    }
    if ((v43 & 0x80) != 0)
    {
      BOOL v55 = memcmp(*(const void **)a1, v47, *((void *)a1 + 1)) == 0;
    }
    else if (a1[23])
    {
      uint64_t v48 = v43 - 1;
      long long v49 = a1;
      do
      {
        int v51 = *v49++;
        int v50 = v51;
        int v53 = *v47++;
        int v52 = v53;
        BOOL v13 = v48-- != 0;
        char v54 = v13;
        BOOL v55 = v50 == v52;
      }
      while (v50 == v52 && (v54 & 1) != 0);
    }
    else
    {
      BOOL v55 = 1;
    }
  }
  else
  {
    BOOL v55 = 0;
  }
  if (v46 < 0)
  {
    operator delete(__p);
    if (v55) {
      return 3;
    }
  }
  else if (v55)
  {
    return 3;
  }
  sub_100134750(&__p, "DenseUrbanCanyon");
  uint64_t v56 = a1[23];
  if ((v56 & 0x80u) == 0) {
    uint64_t v57 = a1[23];
  }
  else {
    uint64_t v57 = *((void *)a1 + 1);
  }
  uint64_t v58 = v77;
  int v59 = (char)v77;
  if ((v77 & 0x80u) != 0) {
    uint64_t v58 = v76;
  }
  if (v57 == v58)
  {
    if ((v77 & 0x80u) == 0) {
      long long v60 = (unsigned __int8 *)&__p;
    }
    else {
      long long v60 = (unsigned __int8 *)__p;
    }
    if ((v56 & 0x80) != 0)
    {
      BOOL v68 = memcmp(*(const void **)a1, v60, *((void *)a1 + 1)) == 0;
    }
    else if (a1[23])
    {
      uint64_t v61 = v56 - 1;
      long long v62 = a1;
      do
      {
        int v64 = *v62++;
        int v63 = v64;
        int v66 = *v60++;
        int v65 = v66;
        BOOL v13 = v61-- != 0;
        char v67 = v13;
        BOOL v68 = v63 == v65;
      }
      while (v63 == v65 && (v67 & 1) != 0);
    }
    else
    {
      BOOL v68 = 1;
    }
  }
  else
  {
    BOOL v68 = 0;
  }
  if (v59 < 0) {
    operator delete(__p);
  }
  if (v68) {
    return 4;
  }
  sub_100134750(&__p, "Foliage");
  uint64_t v69 = a1[23];
  if ((v69 & 0x80u) == 0) {
    uint64_t v70 = a1[23];
  }
  else {
    uint64_t v70 = *((void *)a1 + 1);
  }
  uint64_t v71 = v77;
  int v72 = (char)v77;
  if ((v77 & 0x80u) != 0) {
    uint64_t v71 = v76;
  }
  if (v70 != v71)
  {
LABEL_143:
    uint64_t v16 = 0;
    goto LABEL_147;
  }
  if ((v77 & 0x80u) == 0) {
    uint64_t v73 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v73 = (unsigned __int8 *)__p;
  }
  if ((v69 & 0x80) == 0)
  {
    if (!a1[23])
    {
LABEL_142:
      uint64_t v16 = 6;
      goto LABEL_147;
    }
    while (*a1 == *v73)
    {
      ++a1;
      ++v73;
      if (!--v69) {
        goto LABEL_142;
      }
    }
    goto LABEL_143;
  }
  if (!memcmp(*(const void **)a1, v73, *((void *)a1 + 1))) {
    uint64_t v16 = 6;
  }
  else {
    uint64_t v16 = 0;
  }
LABEL_147:
  if (v72 < 0) {
    operator delete(__p);
  }
  return v16;
}

BOOL sub_10075221C(uint64_t a1, uint64_t *a2, const std::string *a3, CFArrayRef *a4, uint64_t *a5)
{
  if (*a4)
  {
    int Count = CFArrayGetCount(*a4);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    int v10 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0) {
        int v11 = a2;
      }
      else {
        int v11 = (uint64_t *)*a2;
      }
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v12 = a3;
      }
      else {
        int v12 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136446722;
      *(void *)&uint8_t buf[4] = v11;
      __int16 v82 = 2082;
      *(void *)char v83 = v12;
      *(_WORD *)&v83[8] = 1026;
      *(_DWORD *)&v83[10] = Count;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,%{public}s,%{public}s,coordinate count,%{public}d", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      if (*((char *)a2 + 23) >= 0) {
        int v65 = a2;
      }
      else {
        int v65 = (uint64_t *)*a2;
      }
      if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v66 = a3;
      }
      else {
        int v66 = (const std::string *)a3->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)int v72 = 136446722;
      *(void *)&v72[4] = v65;
      __int16 v73 = 2082;
      unint64_t v74 = v66;
      __int16 v75 = 1026;
      int v76 = Count;
      char v67 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillPolygonData(const std::string &, const std::string &, const CFArrayRef &, std::vector<CLMapMatcherOperatingPolygon> &)", "%s\n", v67);
      if (v67 != buf) {
        free(v67);
      }
    }
    std::string __p = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    if (Count < 1)
    {
      return 1;
    }
    else
    {
      BOOL v68 = a5;
      CFIndex v13 = 0;
      BOOL v14 = 0;
      do
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(*a4, v13);
        uint64_t v16 = ValueAtIndex;
        if (ValueAtIndex)
        {
          if ([ValueAtIndex containsString:@","])
          {
            id v17 = [v16 componentsSeparatedByString:@","];
            uint64_t v18 = v17;
            if (!v17 || [v17 count] != (id)2)
            {
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022C7500);
              }
              uint64_t v48 = qword_102419438;
              if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
              {
                int v49 = *((char *)a2 + 23);
                int v50 = (uint64_t *)*a2;
                int v51 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                int v52 = (const std::string *)a3->__r_.__value_.__r.__words[0];
                unsigned int v53 = [v18 count];
                if (v51 >= 0) {
                  char v54 = a3;
                }
                else {
                  char v54 = v52;
                }
                *(_DWORD *)buf = 136446722;
                if (v49 >= 0) {
                  BOOL v55 = a2;
                }
                else {
                  BOOL v55 = v50;
                }
                *(void *)&uint8_t buf[4] = v55;
                __int16 v82 = 2082;
                *(void *)char v83 = v54;
                *(_WORD *)&v83[8] = 1026;
                *(_DWORD *)&v83[10] = v53;
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "CLMM,MA-OTA,%{public}s,%{public}s,invalid split counts in reading coordinate data,%{public}d", buf, 0x1Cu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419430 != -1) {
                  dispatch_once(&qword_102419430, &stru_1022C7500);
                }
                int v56 = *((char *)a2 + 23);
                uint64_t v57 = (uint64_t *)*a2;
                int v58 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
                int v59 = (const std::string *)a3->__r_.__value_.__r.__words[0];
                unsigned int v60 = [v18 count];
                if (v58 >= 0) {
                  uint64_t v61 = a3;
                }
                else {
                  uint64_t v61 = v59;
                }
                *(_DWORD *)int v72 = 136446722;
                if (v56 >= 0) {
                  long long v62 = a2;
                }
                else {
                  long long v62 = v57;
                }
                *(void *)&v72[4] = v62;
                __int16 v73 = 2082;
                unint64_t v74 = v61;
                __int16 v75 = 1026;
                int v76 = v60;
                int v63 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillPolygonData(const std::string &, const std::string &, const CFArrayRef &, std::vector<CLMapMatcherOperatingPolygon> &)", "%s\n", v63);
                if (v63 != buf) {
                  free(v63);
                }
              }
              goto LABEL_111;
            }
            [v18[0] doubleValue];
            uint64_t v20 = v19;
            [objc_msgSend(v18, "objectAtIndexedSubscript:", 1) doubleValue];
            uint64_t v22 = v21;
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022C7500);
            }
            int v23 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
            {
              if (*((char *)a2 + 23) >= 0) {
                int v24 = a2;
              }
              else {
                int v24 = (uint64_t *)*a2;
              }
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v25 = a3;
              }
              else {
                int v25 = (const std::string *)a3->__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136447235;
              *(void *)&uint8_t buf[4] = v24;
              __int16 v82 = 2082;
              *(void *)char v83 = v25;
              *(_WORD *)&v83[8] = 1026;
              *(_DWORD *)&v83[10] = v13;
              *(_WORD *)&v83[14] = 2049;
              *(void *)&v83[16] = v20;
              *(_WORD *)&v83[24] = 2049;
              *(void *)&v83[26] = v22;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,%{public}s,%{public}s,coordinate%{public}d,ll,%{private}.7lf,%{private}.7lf", buf, 0x30u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022C7500);
              }
              if (*((char *)a2 + 23) >= 0) {
                BOOL v42 = a2;
              }
              else {
                BOOL v42 = (uint64_t *)*a2;
              }
              if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v43 = a3;
              }
              else {
                uint64_t v43 = (const std::string *)a3->__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)int v72 = 136447235;
              *(void *)&v72[4] = v42;
              __int16 v73 = 2082;
              unint64_t v74 = v43;
              __int16 v75 = 1026;
              int v76 = v13;
              __int16 v77 = 2049;
              uint64_t v78 = v20;
              __int16 v79 = 2049;
              uint64_t v80 = v22;
              uint64_t v44 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillPolygonData(const std::string &, const std::string &, const CFArrayRef &, std::vector<CLMapMatcherOperatingPolygon> &)", "%s\n", v44);
              if (v44 != buf) {
                free(v44);
              }
            }
            int v26 = v70;
            if (v70 >= v71)
            {
              char v34 = (char *)__p;
              uint64_t v35 = (v70 - (unsigned char *)__p) >> 4;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 60) {
                sub_1001D7FD4();
              }
              uint64_t v37 = v71 - (unsigned char *)__p;
              if ((v71 - (unsigned char *)__p) >> 3 > v36) {
                unint64_t v36 = v37 >> 3;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v38 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                int v39 = (char *)sub_1000C571C((uint64_t)&v71, v38);
                char v34 = (char *)__p;
                int v26 = v70;
              }
              else
              {
                int v39 = 0;
              }
              int v40 = &v39[16 * v35];
              *(void *)int v40 = v20;
              *((void *)v40 + 1) = v22;
              char v41 = v40;
              if (v26 != v34)
              {
                do
                {
                  *((_OWORD *)v41 - 1) = *((_OWORD *)v26 - 1);
                  v41 -= 16;
                  v26 -= 16;
                }
                while (v26 != v34);
                char v34 = (char *)__p;
              }
              int v27 = v40 + 16;
              std::string __p = v41;
              uint64_t v70 = v40 + 16;
              uint64_t v71 = &v39[16 * v38];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *(void *)uint64_t v70 = v20;
              *((void *)v26 + 1) = v22;
              int v27 = v26 + 16;
            }
            uint64_t v70 = v27;
          }
        }
        else
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          char v28 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
          {
            if (*((char *)a2 + 23) >= 0) {
              BOOL v29 = a2;
            }
            else {
              BOOL v29 = (uint64_t *)*a2;
            }
            if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v30 = a3;
            }
            else {
              uint64_t v30 = (const std::string *)a3->__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136446466;
            *(void *)&uint8_t buf[4] = v29;
            __int16 v82 = 2082;
            *(void *)char v83 = v30;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "CLMM,MA-OTA,%{public}s,%{public}s,NULL arrayElements", buf, 0x16u);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022C7500);
            }
            if (*((char *)a2 + 23) >= 0) {
              uint64_t v31 = a2;
            }
            else {
              uint64_t v31 = (uint64_t *)*a2;
            }
            if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v32 = a3;
            }
            else {
              uint64_t v32 = (const std::string *)a3->__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)int v72 = 136446466;
            *(void *)&v72[4] = v31;
            __int16 v73 = 2082;
            unint64_t v74 = v32;
            int v33 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::fillPolygonData(const std::string &, const std::string &, const CFArrayRef &, std::vector<CLMapMatcherOperatingPolygon> &)", "%s\n", v33);
            if (v33 != buf) {
              free(v33);
            }
          }
        }
        BOOL v14 = ++v13 >= Count;
      }
      while (v13 != Count);
      uint64_t v45 = v70;
      if (__p == v70) {
        goto LABEL_112;
      }
      *(void *)buf = 0xBFF0000000000000;
      uint8_t buf[8] = 0;
      memset(&v83[2], 0, 32);
      long long v84 = 0u;
      long long v85 = 0u;
      uint64_t v86 = 0;
      sub_100752C80((uint64_t)buf, a3, (uint64_t **)&__p);
      unint64_t v46 = v68[1];
      if (v46 >= v68[2])
      {
        uint64_t v47 = sub_10075FC90(v68, (uint64_t *)buf);
      }
      else
      {
        sub_10075F8B8((uint64_t)(v68 + 2), v68[1], (uint64_t *)buf);
        uint64_t v47 = v46 + 88;
        v68[1] = v46 + 88;
      }
      v68[1] = v47;
      *(void *)int v72 = &v85;
      sub_1001DCABC((void ***)v72);
      if (*(void *)&v83[26])
      {
        *(void *)&long long v84 = *(void *)&v83[26];
        operator delete(*(void **)&v83[26]);
      }
      if ((v83[25] & 0x80000000) != 0) {
        operator delete(*(void **)&v83[2]);
      }
LABEL_111:
      uint64_t v45 = (char *)__p;
LABEL_112:
      if (v45)
      {
        uint64_t v70 = v45;
        operator delete(v45);
      }
    }
  }
  else
  {
    return 0;
  }
  return v14;
}

void sub_100752C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100752C80(uint64_t a1, const std::string *a2, uint64_t **a3)
{
  sub_1001DCB10((uint64_t *)(a1 + 64));
  CFIndex v6 = (char **)(a1 + 40);
  *(void *)(a1 + 48) = *(void *)(a1 + 40);
  std::string::operator=((std::string *)(a1 + 16), a2);
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  if (*a3 != v8)
  {
    int v9 = (void *)(a1 + 56);
    int v10 = *(char **)(a1 + 48);
    do
    {
      uint64_t v11 = *v7;
      uint64_t v12 = v7[1];
      if ((unint64_t)v10 >= *v9)
      {
        uint64_t v13 = (v10 - *v6) >> 4;
        if ((unint64_t)(v13 + 1) >> 60) {
          sub_1001D7FD4();
        }
        uint64_t v14 = *v9 - (void)*v6;
        uint64_t v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          id v17 = (char *)sub_1000C571C(a1 + 56, v16);
        }
        else {
          id v17 = 0;
        }
        uint64_t v18 = &v17[16 * v13];
        *(void *)uint64_t v18 = v12;
        *((void *)v18 + 1) = v11;
        uint64_t v20 = *(char **)(a1 + 40);
        uint64_t v19 = *(char **)(a1 + 48);
        uint64_t v21 = v18;
        if (v19 != v20)
        {
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
            v21 -= 16;
            v19 -= 16;
          }
          while (v19 != v20);
          uint64_t v19 = *v6;
        }
        int v10 = v18 + 16;
        *(void *)(a1 + 40) = v21;
        *(void *)(a1 + 48) = v18 + 16;
        *(void *)(a1 + 56) = &v17[16 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(void *)int v10 = v12;
        *((void *)v10 + 1) = v11;
        v10 += 16;
      }
      *(void *)(a1 + 48) = v10;
      v7 += 2;
    }
    while (v7 != v8);
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022C7500);
  }
  uint64_t v22 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
  {
    uint64_t v23 = a1 + 16;
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v23 = *(void *)(a1 + 16);
    }
    uint64_t v24 = ((char *)a3[1] - (char *)*a3) >> 4;
    *(_DWORD *)buf = 136446466;
    *(void *)&uint8_t buf[4] = v23;
    __int16 v30 = 2050;
    uint64_t v31 = v24;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Polygon,%{public}s,set with,%{public}lu,coordinates", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    char v28 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingPolygon::setPolygon(const std::string &, const std::vector<CLClientLocationCoordinate> &)", "%s\n", v28);
    if (v28 != buf) {
      free(v28);
    }
  }
  *(void *)buf = 0x3FF0000000000000;
  sub_10075CAE8((double **)(a1 + 40), (double *)buf);
  uint64_t v27 = a1 + 64;
  int v25 = *(double ***)(a1 + 64);
  int v26 = *(double ***)(v27 + 8);
  while (v25 != v26)
  {
    sub_10075CCB4(v25, (double *)buf);
    v25 += 3;
  }
}

uint64_t sub_100752FD8(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 64);
  sub_1001DCABC(&v4);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_100753034(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DA90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247DA90))
  {
    sub_100134750(&qword_10247DA78, "Enabled");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247DA78, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247DA90);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DAB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247DAB0))
  {
    sub_100134750(&qword_10247DA98, "Polygon");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247DA98, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247DAB0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DAD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247DAD0))
  {
    sub_100134750(&qword_10247DAB8, "SkipRegion");
    __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247DAB8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247DAD0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DAF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10247DAF0))
    {
      sub_100134750(&qword_10247DAD8, "SignalEnvironment");
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247DAD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10247DAF0);
    }
  }
  sub_1004CFF34(a2);
}

void sub_100754314(_Unwind_Exception *a1)
{
}

uint64_t sub_1007543BC(uint64_t a1, int a2, int8x16_t *a3)
{
  if (!*(unsigned char *)a1)
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    int v25 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,MM disabled for this country", buf, 2u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (!result) {
      return result;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_57:
      uint64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
      return 0;
    }
LABEL_107:
    dispatch_once(&qword_102419430, &stru_1022C7500);
    goto LABEL_57;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  double v10 = sub_10016C458();
  double v11 = *(double *)(a1 + 8);
  double v12 = vabdd_f64(v10, v11);
  if (v11 >= 0.0) {
    double v13 = v12;
  }
  else {
    double v13 = -1.0;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022C7500);
  }
  uint64_t v14 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = (*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2;
    int v16 = -1171354717 * ((*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 3);
    int v17 = -1171354717 * ((*(void *)(a1 + 80) - *(void *)(a1 + 72)) >> 3);
    int v18 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 67242240;
    int v50 = a2;
    __int16 v51 = 1026;
    BOOL v52 = v6 == v7;
    __int16 v53 = 1026;
    int v54 = v15;
    __int16 v55 = 1026;
    *(_DWORD *)int v56 = v8 == v9;
    *(_WORD *)&v56[4] = 1026;
    *(_DWORD *)&v56[6] = v16;
    __int16 v57 = 1026;
    int v58 = 0;
    __int16 v59 = 1026;
    int v60 = v17;
    __int16 v61 = 2050;
    double v62 = v13;
    __int16 v63 = 1026;
    int v64 = v18;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,initialCheck,signalEnv,%{public}d,isSEOk,%{public}d,size,%{public}d,isPolygonOK,%{public}d,size,%{public}d,isInsideSkippedPolygon,%{public}d,size,%{public}d,dtSinceLastMMStateChangedBasedOnSE,%{public}.1lf,mmStateBasedOnSE,%{public}d", buf, 0x3Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    uint64_t v44 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v44);
    if (v44 != (char *)buf) {
      free(v44);
    }
  }
  if (v6 != v7)
  {
    uint64_t v20 = *(void *)(a1 + 24);
    uint64_t v19 = *(void *)(a1 + 32);
    if (v20 == v19)
    {
      int v23 = 0;
    }
    else
    {
      uint64_t v21 = v20 + 4;
      do
      {
        int v22 = *(_DWORD *)(v21 - 4);
        int v23 = v22 == a2;
        BOOL v24 = v22 == a2 || v21 == v19;
        v21 += 4;
      }
      while (!v24);
    }
    int v27 = *(unsigned __int8 *)(a1 + 16);
    if (v27 != v23 && (*(double *)(a1 + 8) < 0.0 || v13 > 120.0))
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      BOOL v29 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        int v30 = *(unsigned __int8 *)(a1 + 16);
        *(_DWORD *)buf = 67240448;
        int v50 = v30;
        __int16 v51 = 1026;
        BOOL v52 = v23;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,seStateChanged,prevSEState,%{public}d,newSEState,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        unint64_t v46 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v46);
        if (v46 != (char *)buf) {
          free(v46);
        }
      }
      *(unsigned char *)(a1 + 16) = v23;
      *(double *)(a1 + 8) = v10;
      int v27 = v23;
    }
    if (!v27)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      char v34 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240704;
        int v50 = 0;
        __int16 v51 = 1026;
        BOOL v52 = v8 == v9;
        __int16 v53 = 1026;
        int v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,seCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,early return due to failed se check - polygon not checked)", buf, 0x14u);
      }
      uint64_t result = sub_10013D1A0(115, 2);
      if (!result) {
        return result;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_57;
      }
      goto LABEL_107;
    }
  }
  if (v8 == v9)
  {
LABEL_67:
    uint64_t v39 = *(void *)(a1 + 72);
    uint64_t v38 = *(void *)(a1 + 80);
    while (1)
    {
      if (v39 == v38)
      {
        int v40 = 0;
        goto LABEL_80;
      }
      if (sub_100755124(v39, a3)) {
        break;
      }
      v39 += 88;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    char v41 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      BOOL v42 = (void *)(v39 + 16);
      if (*(char *)(v39 + 39) < 0) {
        BOOL v42 = (void *)*v42;
      }
      *(_DWORD *)buf = 67240963;
      int v50 = 1;
      __int16 v51 = 1026;
      BOOL v52 = 1;
      __int16 v53 = 1026;
      int v54 = 1;
      __int16 v55 = 2081;
      *(void *)int v56 = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,skipRegionCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,inside,%{private}s", buf, 0x1Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      uint64_t v48 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v48);
      if (v48 != (char *)buf) {
        free(v48);
      }
    }
    int v40 = 1;
LABEL_80:
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    uint64_t v43 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240704;
      int v50 = 1;
      __int16 v51 = 1026;
      BOOL v52 = 1;
      __int16 v53 = 1026;
      int v54 = v40;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,final,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      uint64_t v45 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v45);
      if (v45 != (char *)buf) {
        free(v45);
      }
    }
    return v40 ^ 1u;
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 48);
    uint64_t v32 = *(void *)(a1 + 56);
    while (v31 != v32)
    {
      if (sub_100755124(v31, a3))
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        unint64_t v36 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v37 = (void *)(v31 + 16);
          if (*(char *)(v31 + 39) < 0) {
            uint64_t v37 = (void *)*v37;
          }
          *(_DWORD *)buf = 67240963;
          int v50 = 1;
          __int16 v51 = 1026;
          BOOL v52 = 1;
          __int16 v53 = 1026;
          int v54 = 0;
          __int16 v55 = 2081;
          *(void *)int v56 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,polygonCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,inside,%{private}s", buf, 0x1Eu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          uint64_t v47 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingRegions::canMapMatch(const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v47);
          if (v47 != (char *)buf) {
            free(v47);
          }
        }
        goto LABEL_67;
      }
      v31 += 88;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    int v33 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240704;
      int v50 = 1;
      __int16 v51 = 1026;
      BOOL v52 = 0;
      __int16 v53 = 1026;
      int v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,polygonCheck,isSEOk,%{public}d,isPolygonOK,%{public}d,isInsideSkippedPolygon,%{public}d,early return due to failed polygon check - skipregion not checked)", buf, 0x14u);
    }
    uint64_t result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        goto LABEL_107;
      }
      goto LABEL_57;
    }
  }
  return result;
}

BOOL sub_100755124(uint64_t a1, int8x16_t *a2)
{
  if (*(double *)a1 > 0.0 && vabdd_f64(sub_10016C458(), *(double *)a1) < 300.0) {
    return *(unsigned char *)(a1 + 8) != 0;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022C7500);
  }
  int v5 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = (void *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)buf = 136380675;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLMM,MA-OTA,Polygon,%{private}s,verified", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingPolygon::isPointInPolygon(const CLClientLocationCoordinate &) const", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  *(double *)a1 = sub_10016C458();
  *(int8x16_t *)buf = vextq_s8(*a2, *a2, 8uLL);
  BOOL result = (int)sub_10075D7F8((double *)buf, a1 + 40) >= 0;
  *(unsigned char *)(a1 + 8) = result;
  return result;
}

void sub_10075535C(uint64_t a1, uint64_t a2, uint64_t a3, CLMotionActivity *a4, int *a5, char *a6, int a7, int8x16_t *a8)
{
  uint64_t v14 = *(void *)(a2 + 76);
  double v15 = *(double *)(a3 + 344);
  double v16 = *(double *)(a2 + 44);
  if (v15 <= 0.0)
  {
    double v15 = sub_10016C458();
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    int v17 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      uint64_t v75 = v14;
      __int16 v76 = 2050;
      *(double *)__int16 v77 = v15;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,overwriting machContinuousTime,machContinuousTime,%{public}.1lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      int v64 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v64);
      if (v64 != (char *)buf) {
        free(v64);
      }
    }
  }
  if (v16 > 45.0)
  {
    *(_DWORD *)(a1 + 4) = 0;
    *(double *)(a1 + 8) = v15;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    int v18 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349568;
      uint64_t v75 = v14;
      __int16 v76 = 2050;
      *(double *)__int16 v77 = v16;
      *(_WORD *)&v77[8] = 2050;
      *(void *)&v77[10] = 0x4046800000000000;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,not matching,non-terrestrial speedMps,%{public}.2lf,threshold,%{public}.1lf", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_14;
      }
      goto LABEL_222;
    }
    return;
  }
  *(unsigned char *)(a1 + 88) = 0;
  if (!sub_100178D5C(a1 + 40, v15, 6.0))
  {
    int v20 = *(_DWORD *)(a1 + 40);
    if (v20 == 3)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      uint64_t v45 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        uint64_t v75 = v14;
        __int16 v76 = 2050;
        *(double *)__int16 v77 = v16;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,cycle matching,routehints,speed,%{public}.2lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        BOOL v68 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v68);
        if (v68 != (char *)buf) {
          free(v68);
        }
      }
      *(double *)(a1 + 32) = v15;
      *(unsigned char *)(a1 + 88) = 1;
      goto LABEL_93;
    }
    if (v20 == 1)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      unint64_t v46 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        uint64_t v75 = v14;
        __int16 v76 = 2050;
        *(double *)__int16 v77 = v16;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,routehints,speed,%{public}.2lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        uint64_t v69 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v69);
        if (v69 != (char *)buf) {
          free(v69);
        }
      }
      *(double *)(a1 + 16) = v15;
      int v32 = 1;
      *(unsigned char *)(a1 + 88) = 1;
      goto LABEL_136;
    }
    if (!v20 && v16 >= 0.0 && v16 < 13.0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      uint64_t v21 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        uint64_t v75 = v14;
        __int16 v76 = 2050;
        *(double *)__int16 v77 = v16;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,routehints,speed,%{public}.2lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        uint64_t v71 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v71);
        if (v71 != (char *)buf) {
          free(v71);
        }
      }
      *(double *)(a1 + 24) = v15;
      *(unsigned char *)(a1 + 88) = 1;
      goto LABEL_49;
    }
  }
  uint64_t v22 = *(int *)(a1 + 4);
  if (!v22
    || ((double v23 = *(double *)(a1 + 8 * v22 + 8), v24 = v15 - v23, v23 > 0.0) ? (v25 = v24 < 3.0) : (v25 = 0), !v25))
  {
    double v26 = *(double *)(a1 + 24);
    BOOL v27 = v15 - v26 < 30.0 && v26 > 0.0;
    if (CLMotionActivity::isTypePedestrian()
      && (a4->confidence > 0 ? (char v28 = 1) : (char v28 = v27), (v28 & 1) != 0)
      || CLMotionActivity::isTypePedestrian())
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      BOOL v29 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        int type = a4->type;
        int v31 = *a5;
        *(_DWORD *)buf = 134350080;
        uint64_t v75 = v14;
        __int16 v76 = 2050;
        *(double *)__int16 v77 = v16;
        *(_WORD *)&v77[8] = 1026;
        *(_DWORD *)&v77[10] = v27;
        *(_WORD *)&v77[14] = 1026;
        *(_DWORD *)&v77[16] = type;
        __int16 v78 = 1026;
        int v79 = v31;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,walking dynamics,speed,%{public}.2lf,wasRecentlyWalking,%{public}d,motion,%{public}d,fitness,%{public}d", buf, 0x28u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        int v66 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v66);
        if (v66 != (char *)buf) {
          free(v66);
        }
      }
      *(double *)(a1 + 24) = v15;
      if (!*(unsigned char *)(a1 + 3) || (sub_10075AB98((uint64_t **)(a1 + 96), (const void **)a6, 2, a7, a8) & 1) == 0)
      {
        *(void *)(a1 + 24) = 0xBFF0000000000000;
        *(double *)(a1 + 8) = v15;
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        int v33 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          int v34 = *(unsigned __int8 *)(a1 + 3);
          if (a6[23] >= 0) {
            uint64_t v35 = a6;
          }
          else {
            uint64_t v35 = *(char **)a6;
          }
          *(_DWORD *)buf = 134349571;
          uint64_t v75 = v14;
          __int16 v76 = 1026;
          *(_DWORD *)__int16 v77 = v34;
          *(_WORD *)&v77[4] = 2081;
          *(void *)&v77[6] = v35;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics, activity based pedestrian map-matching not allowed,%{public}d, or country not supported,%{private}s, setting unknown", buf, 0x1Cu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_135;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_209;
        }
        goto LABEL_225;
      }
      goto LABEL_49;
    }
    double v36 = *(double *)(a1 + 32);
    BOOL v37 = v15 - v36 < 30.0 && v36 > 0.0;
    if CLMotionActivity::isCycling(a4) && (a4->confidence > 0 ? (char v38 = 1) : (char v38 = v37), (v38) {
      || CLMotionActivity::isTypeCycling())
    }
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      uint64_t v39 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        int v40 = a4->type;
        int v41 = *a5;
        *(_DWORD *)buf = 134350080;
        uint64_t v75 = v14;
        __int16 v76 = 2050;
        *(double *)__int16 v77 = v16;
        *(_WORD *)&v77[8] = 1026;
        *(_DWORD *)&v77[10] = v37;
        *(_WORD *)&v77[14] = 1026;
        *(_DWORD *)&v77[16] = v40;
        __int16 v78 = 1026;
        int v79 = v41;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,cycling matching,cycling dynamics,speed,%{public}.2lf,wasRecentlyCycling,%{public}d,motion,%{public}d,fitness,%{public}d", buf, 0x28u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        char v67 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v67);
        if (v67 != (char *)buf) {
          free(v67);
        }
      }
      *(double *)(a1 + 32) = v15;
      if (!*(unsigned char *)(a1 + 1) || (sub_10075AB98((uint64_t **)(a1 + 96), (const void **)a6, 3, a7, a8) & 1) == 0)
      {
        *(void *)(a1 + 32) = 0xBFF0000000000000;
        *(double *)(a1 + 8) = v15;
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        BOOL v42 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          int v43 = *(unsigned __int8 *)(a1 + 1);
          if (a6[23] >= 0) {
            uint64_t v44 = a6;
          }
          else {
            uint64_t v44 = *(char **)a6;
          }
          *(_DWORD *)buf = 134349571;
          uint64_t v75 = v14;
          __int16 v76 = 1026;
          *(_DWORD *)__int16 v77 = v43;
          *(_WORD *)&v77[4] = 2081;
          *(void *)&v77[6] = v44;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics, activity based cycling map-matching not allowed,%{public}d, or country not supported,%{private}s, setting unknown", buf, 0x1Cu);
        }
        if (!sub_10013D1A0(115, 2)) {
          goto LABEL_135;
        }
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1) {
          goto LABEL_209;
        }
        goto LABEL_225;
      }
      goto LABEL_93;
    }
    double v49 = *(double *)(a1 + 16);
    BOOL v50 = v15 - v49 < 30.0 && v49 > 0.0;
    if ((CLMotionActivity::isTypeDriving() & 1) != 0 || CLMotionActivity::isTypeInVehicle())
    {
      int v51 = a4->confidence > 0 || v50;
      if (v51 == 1)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        BOOL v52 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134349568;
          uint64_t v75 = v14;
          __int16 v76 = 2050;
          *(double *)__int16 v77 = v16;
          *(_WORD *)&v77[8] = 1026;
          *(_DWORD *)&v77[10] = v50;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,vehicle dynamics,speed,%{public}.2lf,wasRecentlyDriving,%{public}d", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          int v72 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v72);
          if (v72 != (char *)buf) {
            free(v72);
          }
        }
        *(double *)(a1 + 16) = v15;
        goto LABEL_183;
      }
    }
    if (v27 && *(_DWORD *)(a1 + 4) == 2)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      int v58 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        uint64_t v75 = v14;
        __int16 v76 = 2050;
        *(double *)__int16 v77 = v16;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,pedestrian matching,wasRecentlyWalking,speed,%{public}.2lf", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        __int16 v59 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v59);
        if (v59 != (char *)buf) {
          free(v59);
        }
      }
LABEL_49:
      if (*(unsigned char *)(a1 + 2))
      {
        int v32 = 2;
LABEL_136:
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        __int16 v55 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
        {
          int v56 = *(_DWORD *)(a1 + 4);
          if (a6[23] >= 0) {
            __int16 v57 = a6;
          }
          else {
            __int16 v57 = *(char **)a6;
          }
          *(_DWORD *)buf = 134349827;
          uint64_t v75 = v14;
          __int16 v76 = 1026;
          *(_DWORD *)__int16 v77 = v56;
          *(_WORD *)&v77[4] = 1026;
          *(_DWORD *)&v77[6] = v32;
          *(_WORD *)&v77[10] = 2081;
          *(void *)&v77[12] = v57;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,fDynamics,%{public}d,dynamics,%{public}d,currentCountry,%{private}s", buf, 0x22u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          int v65 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v65);
          if (v65 != (char *)buf) {
            free(v65);
          }
        }
        *(_DWORD *)(a1 + 4) = v32;
        return;
      }
      *(void *)(a1 + 24) = 0xBFF0000000000000;
      *(double *)(a1 + 8) = v15;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      __int16 v53 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349056;
        uint64_t v75 = v14;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics, pedestrian map-matching not allowed, setting unknown", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 == -1)
        {
LABEL_209:
          uint64_t v70 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v70);
          if (v70 != (char *)buf) {
            free(v70);
          }
          goto LABEL_135;
        }
LABEL_225:
        dispatch_once(&qword_102419430, &stru_1022C7500);
        goto LABEL_209;
      }
LABEL_135:
      int v32 = 0;
      goto LABEL_136;
    }
    if (v50 && *(_DWORD *)(a1 + 4) == 1)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      int v60 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        uint64_t v75 = v14;
        __int16 v76 = 2050;
        *(double *)__int16 v77 = v16;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,wasRecentlyDriving,speed,%{public}.2lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_183;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_220;
      }
      goto LABEL_228;
    }
    if (!v37 || *(_DWORD *)(a1 + 4) != 3)
    {
      if (v16 <= 5.55555556) {
        goto LABEL_135;
      }
      *(double *)(a1 + 16) = v15;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      __int16 v63 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349312;
        uint64_t v75 = v14;
        __int16 v76 = 2050;
        *(double *)__int16 v77 = v16;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,vehicle matching,highSpeed,speed,%{public}.2lf", buf, 0x16u);
      }
      if (!sub_10013D1A0(115, 2))
      {
LABEL_183:
        int v32 = 1;
        goto LABEL_136;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1)
      {
LABEL_220:
        __int16 v73 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v73);
        if (v73 != (char *)buf) {
          free(v73);
        }
        goto LABEL_183;
      }
LABEL_228:
      dispatch_once(&qword_102419430, &stru_1022C7500);
      goto LABEL_220;
    }
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    __int16 v61 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      uint64_t v75 = v14;
      __int16 v76 = 2050;
      *(double *)__int16 v77 = v16;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,cycle matching,wasRecentlyCycling,speed,%{public}.2lf", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      double v62 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v62);
      if (v62 != (char *)buf) {
        free(v62);
      }
    }
LABEL_93:
    if (*(unsigned char *)a1)
    {
      int v32 = 3;
      goto LABEL_136;
    }
    *(void *)(a1 + 32) = 0xBFF0000000000000;
    *(double *)(a1 + 8) = v15;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    int v54 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349056;
      uint64_t v75 = v14;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics, cycling map-matching not allowed, setting unknown", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 == -1) {
        goto LABEL_209;
      }
      goto LABEL_225;
    }
    goto LABEL_135;
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022C7500);
  }
  uint64_t v47 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEBUG))
  {
    int v48 = *(_DWORD *)(a1 + 4);
    *(_DWORD *)buf = 134349568;
    uint64_t v75 = v14;
    __int16 v76 = 1026;
    *(_DWORD *)__int16 v77 = v48;
    *(_WORD *)&v77[4] = 2050;
    *(double *)&v77[6] = v24;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "CLMM,%{public}.1lf,operatingDynamics,sticking to last dynamics,%{public}d,timeInCurrentMode,%{public}.1lf", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 == -1)
    {
LABEL_14:
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::determineOperatingDynamics(const CLDaemonLocation &, const CLDaemonLocationPrivate &, const CLMotionActivity &, const CLMotionActivity::Type &, const std::string &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLClientLocationCoordinate &)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
      return;
    }
LABEL_222:
    dispatch_once(&qword_102419430, &stru_1022C7500);
    goto LABEL_14;
  }
}

uint64_t sub_100756EF8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v61 = 0;
  std::string __str = 0;
  uint64_t v62 = 0;
  uint64_t v5 = sub_1007575E0(a3, (uint64_t *)&__str);
  if (v5)
  {
    memset(v45, 0, 24);
    uint64_t v6 = 1;
    do
    {
      uint64_t v7 = &v45[v6];
      v7->__r_.__value_.__s.__data_[0] = 0;
      v7->__r_.__value_.__l.__size_ = 0xBFF0000000000000;
      v7->__r_.__value_.__s.__data_[16] = 0;
      *(_OWORD *)&v7[1].__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)&v7[1].__r_.__value_.__r.__words[2] = 0uLL;
      *(_OWORD *)&v7[2].__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)&v7[3].__r_.__value_.__l.__data_ = 0uLL;
      v6 += 4;
      v7[3].__r_.__value_.__r.__words[2] = 0;
    }
    while (&v7[4] != (std::string *)&v46);
    int v46 = 16777472;
    char v47 = 1;
    int v48 = 0;
    long long v50 = xmmword_101D2C9F0;
    long long v51 = xmmword_101D2CA00;
    int v52 = 400;
    *(void *)&long long v8 = -1;
    *((void *)&v8 + 1) = -1;
    long long v53 = v8;
    long long v54 = v8;
    long long v55 = v8;
    long long v56 = v8;
    long long v57 = v8;
    int v58 = -1;
    long long v59 = xmmword_101D2CA10;
    long long v49 = xmmword_101D2CA20;
    uint64_t v43 = a1;
    if (sub_10016CCBC()) {
      DWORD1(v49) = 4233600;
    }
    unsigned int v42 = v5;
    DWORD2(v53) = 125000;
    DWORD1(v54) = 125000;
    LODWORD(v55) = 125000;
    HIDWORD(v55) = 15000;
    DWORD2(v56) = 25000;
    DWORD1(v57) = -1;
    int v58 = -1;
    std::string::operator=(v45, __str);
    int v44 = a2;
    uint64_t v9 = __str;
    if (0xAAAAAAAAAAAAAAABLL * ((v61 - (uint64_t)__str) >> 3) >= 2)
    {
      double v10 = &v45[4 * a2];
      p_data = (void **)&v10[2].__r_.__value_.__l.__data_;
      p_std::string::size_type size = &v10[2].__r_.__value_.__l.__size_;
      double v13 = &v10[2].__r_.__value_.__r.__words[2];
      unint64_t v14 = 1;
      do
      {
        int v15 = sub_100751D78((unsigned __int8 *)&v9[v14]);
        int v16 = v15;
        int v17 = (char *)*p_size;
        if (*p_size >= *v13)
        {
          uint64_t v19 = (char *)*p_data;
          uint64_t v20 = (v17 - (unsigned char *)*p_data) >> 2;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62) {
            sub_1001D7FD4();
          }
          uint64_t v22 = *v13 - (void)v19;
          if (v22 >> 1 > v21) {
            unint64_t v21 = v22 >> 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v21;
          }
          if (v23)
          {
            double v24 = (char *)sub_10017EA34((uint64_t)v13, v23);
            int v17 = (char *)*p_size;
            uint64_t v19 = (char *)*p_data;
          }
          else
          {
            double v24 = 0;
          }
          BOOL v25 = &v24[4 * v20];
          *(_DWORD *)BOOL v25 = v16;
          int v18 = v25 + 4;
          while (v17 != v19)
          {
            int v26 = *((_DWORD *)v17 - 1);
            v17 -= 4;
            *((_DWORD *)v25 - 1) = v26;
            v25 -= 4;
          }
          *p_data = v25;
          *p_std::string::size_type size = (std::string::size_type)v18;
          *double v13 = (std::string::size_type)&v24[4 * v23];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_DWORD *)int v17 = v15;
          int v18 = v17 + 4;
        }
        *p_std::string::size_type size = (std::string::size_type)v18;
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        BOOL v27 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          char v28 = &__str[v14];
          if (SHIBYTE(v28->__r_.__value_.__r.__words[2]) < 0) {
            char v28 = (std::string *)v28->__r_.__value_.__r.__words[0];
          }
          int v29 = *(_DWORD *)(*p_size - 4);
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = v28;
          __int16 v67 = 1026;
          int v68 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,DefaultsWrite,signalEnvironment,%{public}s,%{public}d", buf, 0x12u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          int v30 = &__str[v14];
          if (SHIBYTE(v30->__r_.__value_.__r.__words[2]) < 0) {
            int v30 = (std::string *)v30->__r_.__value_.__r.__words[0];
          }
          int v31 = *(_DWORD *)(*p_size - 4);
          *(_DWORD *)__int16 v63 = 136446466;
          *(void *)&v63[4] = v30;
          __int16 v64 = 1026;
          int v65 = v31;
          int v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::updateCountrySettingUsingDefaultWriteSEString(const MatcherOperatingDynamicsEnum, const std::string &)", "%s\n", v32);
          if (v32 != buf) {
            free(v32);
          }
        }
        ++v14;
        uint64_t v9 = __str;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v61 - (uint64_t)__str) >> 3) > v14);
    }
    int v33 = (uint64_t **)(v43 + 96);
    if (sub_100040D3C(v43 + 96, (const void **)&v45[0].__r_.__value_.__l.__data_))
    {
      *(void *)__int16 v63 = v45;
      LOBYTE(sub_10017CA70(v33, (const void **)&v45[0].__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (long long **)v63)[12 * v44 + 10]) = 1;
      *(void *)__int16 v63 = v45;
      int v34 = sub_10017CA70(v33, (const void **)&v45[0].__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (long long **)v63);
      if (v34 + 7 != (uint64_t *)v45)
      {
        data = v45[4 * v44 + 2].__r_.__value_.__l.__data_;
        std::string::size_type size = v45[4 * v44 + 2].__r_.__value_.__l.__size_;
        sub_1000FB43C((char *)&v34[12 * v44 + 13], data, size, (uint64_t)(size - (void)data) >> 2);
      }
    }
    else
    {
      sub_10075F550(buf, (long long *)v45, (long long *)v45);
      sub_100760230(v33, (const void **)buf, (long long *)buf);
      for (uint64_t i = 0; i != -384; i -= 96)
      {
        *(void *)__int16 v63 = &v72[i + 48];
        sub_10075F460((void ***)v63);
        *(void *)__int16 v63 = &v72[i + 24];
        sub_10075F460((void ***)v63);
        char v38 = *(void **)&v72[i];
        if (v38)
        {
          *(void *)&v72[i + 8] = v38;
          operator delete(v38);
        }
      }
      if (v71 < 0) {
        operator delete(__p);
      }
      if (v69 < 0) {
        operator delete(*(void **)buf);
      }
    }
    for (unint64_t j = 0; j != -384; j -= 96)
    {
      *(void *)buf = &v45[j / 0x18 + 16];
      sub_10075F460((void ***)buf);
      *(void *)buf = &v45[j / 0x18 + 15];
      sub_10075F460((void ***)buf);
      std::string::pointer v40 = v45[j / 0x18 + 14].__r_.__value_.__l.__data_;
      if (v40)
      {
        v45[j / 0x18 + 14].__r_.__value_.__l.__size_ = (std::string::size_type)v40;
        operator delete(v40);
      }
    }
    if (SHIBYTE(v45[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45[0].__r_.__value_.__l.__data_);
    }
    uint64_t v5 = v42;
  }
  *(void *)buf = &__str;
  sub_1000A7B4C((void ***)buf);
  return v5;
}

void sub_100757534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(__p, a7);
  sub_1007579E8((uint64_t)__p);
  STACK[0x2B0] = (unint64_t)&STACK[0x270];
  sub_1000A7B4C((void ***)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1007575E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a1 + 8);
  }
  if (!v2) {
    return 0;
  }
  sub_10010F274((uint64_t)v22);
  int v5 = *(char *)(a1 + 23);
  if (v5 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)a1;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  sub_100132EFC(v23, v6, v7);
  sub_1000A7BA0(a2);
  while ((*((unsigned char *)&v23[2] + *(void *)(v22[0] - 24)) & 5) == 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v21 = 0;
    long long v8 = sub_10044F5DC(v22, (uint64_t)__p, 0x2Cu);
    int v9 = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5;
    if (!v9)
    {
      unint64_t v10 = a2[1];
      if (v10 >= a2[2])
      {
        uint64_t v12 = sub_1016FD368(a2, (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v21) < 0)
        {
          sub_1000DC48C((unsigned char *)a2[1], __p[0], (unint64_t)__p[1]);
        }
        else
        {
          long long v11 = *(_OWORD *)__p;
          *(void *)(v10 + 16) = v21;
          *(_OWORD *)unint64_t v10 = v11;
        }
        uint64_t v12 = v10 + 24;
        a2[1] = v10 + 24;
      }
      a2[1] = v12;
    }
    if (SHIBYTE(v21) < 0)
    {
      operator delete(__p[0]);
      if (v9) {
        break;
      }
    }
    else if (v9)
    {
      break;
    }
  }
  uint64_t v13 = *a2;
  if (a2[1] == *a2) {
    goto LABEL_33;
  }
  if (*(char *)(v13 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)v13, *(void *)(v13 + 8));
  }
  else
  {
    long long v14 = *(_OWORD *)v13;
    uint64_t v21 = *(void *)(v13 + 16);
    *(_OWORD *)va_list __p = v14;
  }
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if (HIBYTE(v21) == 2) {
      goto LABEL_42;
    }
    if (HIBYTE(v21) == 3)
    {
      int v16 = __p;
      goto LABEL_36;
    }
LABEL_33:
    uint64_t v15 = 0;
    goto LABEL_46;
  }
  if (__p[1] == (void *)2) {
    goto LABEL_42;
  }
  int v16 = (void **)__p[0];
  if (__p[1] != (void *)3)
  {
    uint64_t v15 = 0;
    goto LABEL_45;
  }
LABEL_36:
  if (*(_WORD *)v16 != 20306 || *((unsigned char *)v16 + 2) != 87)
  {
    uint64_t v15 = 0;
    if (v21 < 0) {
      goto LABEL_43;
    }
    goto LABEL_46;
  }
LABEL_42:
  uint64_t v15 = 1;
  if (v21 < 0)
  {
LABEL_43:
    int v16 = (void **)__p[0];
LABEL_45:
    operator delete(v16);
  }
LABEL_46:
  *(void *)((char *)v22
  v23[0] = v18;
  if (v24 < 0) {
    operator delete((void *)v23[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return v15;
}

void sub_100757914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_100757950(uint64_t a1)
{
  for (uint64_t i = 0; i != -384; i -= 96)
  {
    int v5 = (void **)(a1 + i + 408);
    sub_10075F460(&v5);
    int v5 = (void **)(a1 + i + 384);
    sub_10075F460(&v5);
    uint64_t v3 = *(void **)(a1 + i + 360);
    if (v3)
    {
      *(void *)(a1 + i + 368) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1007579E8(uint64_t a1)
{
  for (uint64_t i = 0; i != -384; i -= 96)
  {
    int v5 = (void **)(a1 + i + 384);
    sub_10075F460(&v5);
    int v5 = (void **)(a1 + i + 360);
    sub_10075F460(&v5);
    uint64_t v3 = *(void **)(a1 + i + 336);
    if (v3)
    {
      *(void *)(a1 + i + 344) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100757A70(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v70 = 0;
  std::string __str = 0;
  uint64_t v71 = 0;
  uint64_t v5 = sub_1007575E0(a3, (uint64_t *)&__str);
  if (v5)
  {
    memset(v54, 0, 24);
    uint64_t v6 = 1;
    do
    {
      uint64_t v7 = &v54[v6];
      v7->__r_.__value_.__s.__data_[0] = 0;
      v7->__r_.__value_.__l.__size_ = 0xBFF0000000000000;
      v7->__r_.__value_.__s.__data_[16] = 0;
      *(_OWORD *)&v7[1].__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)&v7[1].__r_.__value_.__r.__words[2] = 0uLL;
      *(_OWORD *)&v7[2].__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)&v7[3].__r_.__value_.__l.__data_ = 0uLL;
      v6 += 4;
      v7[3].__r_.__value_.__r.__words[2] = 0;
    }
    while (&v7[4] != (std::string *)&v55);
    int v55 = 16777472;
    char v56 = 1;
    int v57 = 0;
    long long v59 = xmmword_101D2C9F0;
    long long v60 = xmmword_101D2CA00;
    int v61 = 400;
    *(void *)&long long v8 = -1;
    *((void *)&v8 + 1) = -1;
    long long v62 = v8;
    long long v63 = v8;
    long long v64 = v8;
    long long v65 = v8;
    long long v66 = v8;
    int v67 = -1;
    long long v68 = xmmword_101D2CA10;
    long long v58 = xmmword_101D2CA20;
    int v49 = a2;
    if (sub_10016CCBC()) {
      DWORD1(v58) = 4233600;
    }
    uint64_t v48 = a1;
    DWORD2(v62) = 125000;
    DWORD1(v63) = 125000;
    LODWORD(v64) = 125000;
    HIDWORD(v64) = 15000;
    DWORD2(v65) = 25000;
    DWORD1(v66) = -1;
    int v67 = -1;
    std::string::operator=(v54, __str);
    va_list __p = 0;
    int v52 = 0;
    long long v53 = 0;
    memset(&v50, 0, sizeof(v50));
    int v9 = __str;
    if (v70 != __str)
    {
      unint64_t v10 = 0;
      int v11 = 0;
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)__str) >> 3);
      do
      {
        if (v11)
        {
          int v13 = v11 + 1;
          if (v12 <= v11 + 1) {
            break;
          }
          long long v14 = &v9[v10];
          if (SHIBYTE(v14->__r_.__value_.__r.__words[2]) < 0) {
            long long v14 = (std::string *)v14->__r_.__value_.__r.__words[0];
          }
          double v15 = atof((const char *)v14);
          int v16 = &v9[v13];
          if (SHIBYTE(v16->__r_.__value_.__r.__words[2]) < 0) {
            int v16 = (std::string *)v16->__r_.__value_.__r.__words[0];
          }
          double v17 = atof((const char *)v16);
          double v18 = v17;
          uint64_t v19 = (double *)v52;
          if (v52 >= v53)
          {
            uint64_t v21 = (double *)__p;
            uint64_t v22 = (v52 - (unsigned char *)__p) >> 4;
            unint64_t v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 60) {
              sub_1001D7FD4();
            }
            uint64_t v24 = v53 - (unsigned char *)__p;
            if ((v53 - (unsigned char *)__p) >> 3 > v23) {
              unint64_t v23 = v24 >> 3;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v23;
            }
            if (v25)
            {
              int v26 = (char *)sub_1000C571C((uint64_t)&v53, v25);
              uint64_t v21 = (double *)__p;
              uint64_t v19 = (double *)v52;
            }
            else
            {
              int v26 = 0;
            }
            BOOL v27 = (double *)&v26[16 * v22];
            double *v27 = v15;
            v27[1] = v18;
            char v28 = v27;
            if (v19 != v21)
            {
              do
              {
                *((_OWORD *)v28 - 1) = *((_OWORD *)v19 - 1);
                v28 -= 2;
                v19 -= 2;
              }
              while (v19 != v21);
              uint64_t v21 = (double *)__p;
            }
            uint64_t v20 = (char *)(v27 + 2);
            va_list __p = v28;
            int v52 = (char *)(v27 + 2);
            long long v53 = &v26[16 * v25];
            if (v21) {
              operator delete(v21);
            }
          }
          else
          {
            *(double *)int v52 = v15;
            v19[1] = v17;
            uint64_t v20 = (char *)(v19 + 2);
          }
          int v52 = v20;
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          int v29 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
          {
            int v30 = &v50;
            if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v30 = (std::string *)v50.__r_.__value_.__r.__words[0];
            }
            if (v13 >= 0) {
              int v31 = v13;
            }
            else {
              int v31 = v13 + 1;
            }
            *(_DWORD *)buf = 136446979;
            *(void *)&uint8_t buf[4] = v30;
            __int16 v80 = 1026;
            int v81 = v31 >> 1;
            __int16 v82 = 2049;
            *(double *)char v83 = v15;
            *(_WORD *)&v83[8] = 2049;
            *(double *)&v83[10] = v18;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,DefaultsWrite,polygon,%{public}s,coordinate%{public}d,ll,%{private}.7lf,%{private}.7lf", buf, 0x26u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022C7500);
            }
            int v32 = &v50;
            if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              int v32 = (std::string *)v50.__r_.__value_.__r.__words[0];
            }
            if (v13 >= 0) {
              int v33 = v13;
            }
            else {
              int v33 = v13 + 1;
            }
            *(_DWORD *)__int16 v73 = 136446979;
            *(void *)&v73[4] = v32;
            __int16 v74 = 1026;
            *(_DWORD *)uint64_t v75 = v33 >> 1;
            *(_WORD *)&v75[4] = 2049;
            *(double *)&v75[6] = v15;
            *(_WORD *)&v75[14] = 2049;
            *(double *)&v75[16] = v18;
            int v34 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherOperatingDynamics::updateCountrySettingUsingDefaultWritePolygonString(const MatcherOperatingDynamicsEnum, const std::string &)", "%s\n", v34);
            if (v34 != buf) {
              free(v34);
            }
          }
        }
        else
        {
          std::string::operator=(&v50, &v9[v10]);
          int v13 = 0;
        }
        int v11 = v13 + 1;
        unint64_t v10 = v13 + 1;
        int v9 = __str;
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)__str) >> 3);
      }
      while (v12 > v10);
    }
    *(void *)__int16 v73 = 0xBFF0000000000000;
    v73[8] = 0;
    memset(&v75[2], 0, 32);
    long long v76 = 0u;
    long long v77 = 0u;
    uint64_t v78 = 0;
    sub_100752C80((uint64_t)v73, &v50, (uint64_t **)&__p);
    uint64_t v35 = &v54[4 * a2];
    std::string::size_type size = v35[3].__r_.__value_.__l.__size_;
    p_std::string::size_type size = (uint64_t *)&v35[3].__r_.__value_.__l.__size_;
    uint64_t v37 = size;
    uint64_t v39 = (uint64_t **)(p_size - 1);
    if (size >= p_size[1])
    {
      uint64_t v40 = sub_10075FC90(p_size - 1, (uint64_t *)v73);
    }
    else
    {
      sub_10075F8B8((uint64_t)(p_size + 1), v37, (uint64_t *)v73);
      uint64_t v40 = v37 + 88;
    }
    *p_std::string::size_type size = v40;
    int v41 = (uint64_t **)(v48 + 96);
    if (sub_100040D3C(v48 + 96, (const void **)&v54[0].__r_.__value_.__l.__data_))
    {
      int v72 = v54;
      LOBYTE(sub_10017CA70(v41, (const void **)&v54[0].__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (long long **)&v72)[12 * v49 + 10]) = 1;
      int v72 = v54;
      unsigned int v42 = &sub_10017CA70(v41, (const void **)&v54[0].__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (long long **)&v72)[12 * v49 + 16];
      if (v42 != (uint64_t *)v39) {
        sub_1007603D4((uint64_t)v42, *v39, (uint64_t *)*p_size, 0x2E8BA2E8BA2E8BA3 * ((*p_size - (uint64_t)*v39) >> 3));
      }
    }
    else
    {
      sub_10075F550(buf, (long long *)v54, (long long *)v54);
      sub_100760230(v41, (const void **)buf, (long long *)buf);
      for (uint64_t i = 0; i != -384; i -= 96)
      {
        int v72 = (std::string *)&v85[i + 48];
        sub_10075F460((void ***)&v72);
        int v72 = (std::string *)&v85[i + 24];
        sub_10075F460((void ***)&v72);
        int v44 = *(void **)&v85[i];
        if (v44)
        {
          *(void *)&v85[i + 8] = v44;
          operator delete(v44);
        }
      }
      if (v84 < 0) {
        operator delete(*(void **)&v83[4]);
      }
      if ((v83[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    *(void *)buf = &v77;
    sub_1001DCABC((void ***)buf);
    if (*(void *)&v75[26])
    {
      *(void *)&long long v76 = *(void *)&v75[26];
      operator delete(*(void **)&v75[26]);
    }
    if ((v75[25] & 0x80000000) != 0) {
      operator delete(*(void **)&v75[2]);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (__p)
    {
      int v52 = (char *)__p;
      operator delete(__p);
    }
    for (unint64_t j = 0; j != -384; j -= 96)
    {
      *(void *)buf = &v54[j / 0x18 + 16];
      sub_10075F460((void ***)buf);
      *(void *)buf = &v54[j / 0x18 + 15];
      sub_10075F460((void ***)buf);
      std::string::pointer data = v54[j / 0x18 + 14].__r_.__value_.__l.__data_;
      if (data)
      {
        v54[j / 0x18 + 14].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        operator delete(data);
      }
    }
    if (SHIBYTE(v54[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v54[0].__r_.__value_.__l.__data_);
    }
    uint64_t v5 = v5;
  }
  *(void *)buf = &__str;
  sub_1000A7B4C((void ***)buf);
  return v5;
}

void sub_1007581FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_1007579E8((uint64_t)va);
  STACK[0x330] = (unint64_t)&STACK[0x2A8];
  sub_1000A7B4C((void ***)&STACK[0x330]);
  _Unwind_Resume(a1);
}

void sub_1007582E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 <= 6)
  {
    unint64_t v12 = (int *)(a1 + 12 * a3 + 64);
    if (*(char *)(a4 + 23) >= 0) {
      int v13 = (const char *)a4;
    }
    else {
      int v13 = *(const char **)a4;
    }
    if ((sub_10006EF84(a2, v13, v12) & 1) == 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      long long v14 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        int v28 = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Unable to get enabled road tile radius setting for type,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        unint64_t v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::readRadiusInformation(const CLNameValuePair &, const MatcherLocationOfInterestType, const std::string &, const std::string &, const std::string &)", "%s\n", v23);
        if (v23 != (char *)buf) {
          free(v23);
        }
      }
    }
    if (*(char *)(a5 + 23) >= 0) {
      double v15 = (const char *)a5;
    }
    else {
      double v15 = *(const char **)a5;
    }
    int v16 = (int *)(a1 + 12 * a3 + 68);
    if ((sub_10006EF84(a2, v15, v16) & 1) == 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      double v17 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        int v28 = a3;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Unable to get enabled building tile radius setting for type,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        uint64_t v24 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::readRadiusInformation(const CLNameValuePair &, const MatcherLocationOfInterestType, const std::string &, const std::string &, const std::string &)", "%s\n", v24);
        if (v24 != (char *)buf) {
          free(v24);
        }
      }
    }
    if (*(char *)(a6 + 23) >= 0) {
      double v18 = (const char *)a6;
    }
    else {
      double v18 = *(const char **)a6;
    }
    uint64_t v19 = (int *)(a1 + 12 * a3 + 72);
    if ((sub_10006EF84(a2, v18, v19) & 1) == 0)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      uint64_t v20 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 67240192;
        int v28 = a3;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Unable to get enabled running track tile radius setting for type,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        unint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::readRadiusInformation(const CLNameValuePair &, const MatcherLocationOfInterestType, const std::string &, const std::string &, const std::string &)", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
    }
    if (*v19 > 1000000)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      uint64_t v21 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = *v19;
        *(_DWORD *)buf = 67240704;
        int v28 = v22;
        __int16 v29 = 1026;
        int v30 = 1000000;
        __int16 v31 = 1026;
        int v32 = a3;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning,TrackRun,Track tile download radius,%{public}d,exceeds cap,%{public}d,for type,%{public}d", buf, 0x14u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::readRadiusInformation(const CLNameValuePair &, const MatcherLocationOfInterestType, const std::string &, const std::string &, const std::string &)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      int *v19 = 1000000;
    }
    if (*v12 > 125000) {
      int *v12 = 125000;
    }
    if (*v16 > 125000) {
      *int v16 = 125000;
    }
  }
}

uint64_t sub_100758980(BOOL *a1, uint64_t a2)
{
  if (byte_10247D63F < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10247D628, *((unint64_t *)&xmmword_10247D628 + 1));
  }
  else
  {
    *(_OWORD *)va_list __p = xmmword_10247D628;
    uint64_t v138 = unk_10247D638;
  }
  *a1 = sub_100759E50(a2, (const char *)__p, *a1);
  if (SHIBYTE(v138) < 0) {
    operator delete(__p[0]);
  }
  if (byte_10247D72F < 0)
  {
    sub_1000DC48C(__dst, (void *)xmmword_10247D718, *((unint64_t *)&xmmword_10247D718 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_10247D718;
    uint64_t v136 = unk_10247D728;
  }
  *((_DWORD *)a1 + 4) = sub_10075A05C(a2, (const char *)__dst, 1209600, 43200, 15552000);
  if (SHIBYTE(v136) < 0) {
    operator delete(__dst[0]);
  }
  if (byte_10247D747 < 0)
  {
    sub_1000DC48C(v133, (void *)xmmword_10247D730, *((unint64_t *)&xmmword_10247D730 + 1));
  }
  else
  {
    *(_OWORD *)long long v133 = xmmword_10247D730;
    uint64_t v134 = unk_10247D740;
  }
  *((_DWORD *)a1 + 5) = sub_10075A05C(a2, (const char *)v133, 1209600, 43200, 15552000);
  if (SHIBYTE(v134) < 0) {
    operator delete(v133[0]);
  }
  if (byte_10247D75F < 0)
  {
    sub_1000DC48C(v131, (void *)xmmword_10247D748, *((unint64_t *)&xmmword_10247D748 + 1));
  }
  else
  {
    *(_OWORD *)long long v131 = xmmword_10247D748;
    uint64_t v132 = unk_10247D758;
  }
  *((_DWORD *)a1 + 6) = sub_10075A05C(a2, (const char *)v131, 75, 25, 100);
  if (SHIBYTE(v132) < 0) {
    operator delete(v131[0]);
  }
  if (byte_10247D777 < 0)
  {
    sub_1000DC48C(v129, (void *)xmmword_10247D760, *((unint64_t *)&xmmword_10247D760 + 1));
  }
  else
  {
    *(_OWORD *)long long v129 = xmmword_10247D760;
    uint64_t v130 = unk_10247D770;
  }
  *((_DWORD *)a1 + 7) = sub_10075A05C(a2, (const char *)v129, 50, 25, 100);
  if (SHIBYTE(v130) < 0) {
    operator delete(v129[0]);
  }
  if (byte_10247D78F < 0)
  {
    sub_1000DC48C(v127, (void *)xmmword_10247D778, *((unint64_t *)&xmmword_10247D778 + 1));
  }
  else
  {
    *(_OWORD *)long long v127 = xmmword_10247D778;
    uint64_t v128 = unk_10247D788;
  }
  *((_DWORD *)a1 + 8) = sub_10075A05C(a2, (const char *)v127, 301, 301, 21600);
  if (SHIBYTE(v128) < 0) {
    operator delete(v127[0]);
  }
  if (byte_10247D7A7 < 0)
  {
    sub_1000DC48C(v125, (void *)xmmword_10247D790, *((unint64_t *)&xmmword_10247D790 + 1));
  }
  else
  {
    *(_OWORD *)long long v125 = xmmword_10247D790;
    uint64_t v126 = unk_10247D7A0;
  }
  *((_DWORD *)a1 + 9) = sub_10075A05C(a2, (const char *)v125, 150000, 1000, 3000000);
  if (SHIBYTE(v126) < 0) {
    operator delete(v125[0]);
  }
  if (byte_10247D7BF < 0)
  {
    sub_1000DC48C(v123, (void *)xmmword_10247D7A8, *((unint64_t *)&xmmword_10247D7A8 + 1));
  }
  else
  {
    *(_OWORD *)int v123 = xmmword_10247D7A8;
    uint64_t v124 = unk_10247D7B8;
  }
  *((_DWORD *)a1 + 10) = sub_10075A05C(a2, (const char *)v123, 10000, 10, 300000);
  if (SHIBYTE(v124) < 0) {
    operator delete(v123[0]);
  }
  if (byte_10247D7D7 < 0)
  {
    sub_1000DC48C(v121, (void *)xmmword_10247D7C0, *((unint64_t *)&xmmword_10247D7C0 + 1));
  }
  else
  {
    *(_OWORD *)long long v121 = xmmword_10247D7C0;
    uint64_t v122 = unk_10247D7D0;
  }
  *((_DWORD *)a1 + 11) = sub_10075A05C(a2, (const char *)v121, 150, 2, 900);
  if (SHIBYTE(v122) < 0) {
    operator delete(v121[0]);
  }
  if (byte_10247D96F < 0)
  {
    sub_1000DC48C(v119, (void *)xmmword_10247D958, *((unint64_t *)&xmmword_10247D958 + 1));
  }
  else
  {
    *(_OWORD *)v119 = xmmword_10247D958;
    uint64_t v120 = unk_10247D968;
  }
  *((_DWORD *)a1 + 3) = sub_10075A05C(a2, (const char *)v119, 21600, 1, 86400);
  if (SHIBYTE(v120) < 0) {
    operator delete(v119[0]);
  }
  if (byte_10247D987 < 0)
  {
    sub_1000DC48C(v117, (void *)xmmword_10247D970, *((unint64_t *)&xmmword_10247D970 + 1));
  }
  else
  {
    *(_OWORD *)int v117 = xmmword_10247D970;
    uint64_t v118 = unk_10247D980;
  }
  *((_DWORD *)a1 + 12) = sub_10075A05C(a2, (const char *)v117, 10, 10, 2000);
  if (SHIBYTE(v118) < 0) {
    operator delete(v117[0]);
  }
  if (byte_10247D99F < 0)
  {
    sub_1000DC48C(v115, (void *)xmmword_10247D988, *((unint64_t *)&xmmword_10247D988 + 1));
  }
  else
  {
    *(_OWORD *)long long v115 = xmmword_10247D988;
    uint64_t v116 = unk_10247D998;
  }
  *((_DWORD *)a1 + 13) = sub_10075A05C(a2, (const char *)v115, 100, 10, 2000);
  if (SHIBYTE(v116) < 0) {
    operator delete(v115[0]);
  }
  if (byte_10247D9B7 < 0)
  {
    sub_1000DC48C(v113, (void *)xmmword_10247D9A0, *((unint64_t *)&xmmword_10247D9A0 + 1));
  }
  else
  {
    *(_OWORD *)unsigned int v113 = xmmword_10247D9A0;
    uint64_t v114 = unk_10247D9B0;
  }
  *((_DWORD *)a1 + 14) = sub_10075A05C(a2, (const char *)v113, 4, 10, 2000);
  if (SHIBYTE(v114) < 0) {
    operator delete(v113[0]);
  }
  if (byte_10247D9CF < 0)
  {
    sub_1000DC48C(v111, (void *)xmmword_10247D9B8, *((unint64_t *)&xmmword_10247D9B8 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v111 = xmmword_10247D9B8;
    uint64_t v112 = unk_10247D9C8;
  }
  *((_DWORD *)a1 + 15) = sub_10075A05C(a2, (const char *)v111, 400, 10, 2000);
  if (SHIBYTE(v112) < 0) {
    operator delete(v111[0]);
  }
  if (byte_10247DA47 < 0)
  {
    sub_1000DC48C(v109, (void *)xmmword_10247DA30, *((unint64_t *)&xmmword_10247DA30 + 1));
  }
  else
  {
    *(_OWORD *)char v109 = xmmword_10247DA30;
    uint64_t v110 = unk_10247DA40;
  }
  *((_DWORD *)a1 + 39) = sub_10075A05C(a2, (const char *)v109, 100000, 25000, 1000000);
  if (SHIBYTE(v110) < 0) {
    operator delete(v109[0]);
  }
  if (byte_10247DA5F < 0)
  {
    sub_1000DC48C(v107, (void *)xmmword_10247DA48, *((unint64_t *)&xmmword_10247DA48 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v107 = xmmword_10247DA48;
    uint64_t v108 = unk_10247DA58;
  }
  *((_DWORD *)a1 + 40) = sub_10075A05C(a2, (const char *)v107, 21, 0, 120);
  if (SHIBYTE(v108) < 0) {
    operator delete(v107[0]);
  }
  if (byte_10247D7EF < 0)
  {
    sub_1000DC48C(v105, (void *)xmmword_10247D7D8, *((unint64_t *)&xmmword_10247D7D8 + 1));
  }
  else
  {
    *(_OWORD *)int v105 = xmmword_10247D7D8;
    uint64_t v106 = unk_10247D7E8;
  }
  a1[1] = sub_100759E50(a2, (const char *)v105, a1[1]);
  if (SHIBYTE(v106) < 0) {
    operator delete(v105[0]);
  }
  if (byte_10247D807 < 0)
  {
    sub_1000DC48C(v103, (void *)xmmword_10247D7F0, *((unint64_t *)&xmmword_10247D7F0 + 1));
  }
  else
  {
    *(_OWORD *)unint64_t v103 = xmmword_10247D7F0;
    uint64_t v104 = unk_10247D800;
  }
  a1[2] = sub_100759E50(a2, (const char *)v103, a1[2]);
  if (SHIBYTE(v104) < 0) {
    operator delete(v103[0]);
  }
  if (byte_10247D90F < 0)
  {
    sub_1000DC48C(v101, (void *)xmmword_10247D8F8, *((unint64_t *)&xmmword_10247D8F8 + 1));
  }
  else
  {
    *(_OWORD *)long long v101 = xmmword_10247D8F8;
    uint64_t v102 = unk_10247D908;
  }
  a1[3] = sub_100759E50(a2, (const char *)v101, a1[3]);
  if (SHIBYTE(v102) < 0) {
    operator delete(v101[0]);
  }
  if (byte_10247D9E7 < 0)
  {
    sub_1000DC48C(v99, (void *)xmmword_10247D9D0, *((unint64_t *)&xmmword_10247D9D0 + 1));
  }
  else
  {
    *(_OWORD *)long long v99 = xmmword_10247D9D0;
    uint64_t v100 = unk_10247D9E0;
  }
  a1[4] = sub_100759E50(a2, (const char *)v99, a1[4]);
  if (SHIBYTE(v100) < 0) {
    operator delete(v99[0]);
  }
  unsigned __int8 v98 = a1[6];
  a1[5] = 0;
  if (byte_10247D81F >= 0) {
    uint64_t v4 = (const char *)&qword_10247D808;
  }
  else {
    uint64_t v4 = (const char *)qword_10247D808;
  }
  if (sub_1000D2988(a2, v4, (BOOL *)&v98))
  {
    a1[6] = v98;
    a1[5] = 1;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    uint64_t v5 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      if (byte_10247D81F >= 0) {
        uint64_t v6 = &qword_10247D808;
      }
      else {
        uint64_t v6 = (uint64_t *)qword_10247D808;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)v227 = v6;
      *(_WORD *)&v227[8] = 1026;
      *(_DWORD *)v228 = v98;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      if (byte_10247D81F >= 0) {
        long long v90 = &qword_10247D808;
      }
      else {
        long long v90 = (uint64_t *)qword_10247D808;
      }
      int v139 = 136446466;
      *(void *)int v140 = v90;
      *(_WORD *)&v140[8] = 1026;
      *(_DWORD *)long long v141 = v98;
      uint64_t v91 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::fillFromMobileAssetNVP(const CLNameValuePair &)", "%s\n", v91);
      if (v91 != (char *)buf) {
        free(v91);
      }
    }
  }
  unsigned __int8 v98 = a1[8];
  a1[7] = 0;
  if (byte_10247D87F >= 0) {
    uint64_t v7 = (const char *)&qword_10247D868;
  }
  else {
    uint64_t v7 = (const char *)qword_10247D868;
  }
  if (sub_1000D2988(a2, v7, (BOOL *)&v98))
  {
    a1[8] = v98;
    a1[7] = 1;
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    long long v8 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      if (byte_10247D87F >= 0) {
        int v9 = &qword_10247D868;
      }
      else {
        int v9 = (uint64_t *)qword_10247D868;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)v227 = v9;
      *(_WORD *)&v227[8] = 1026;
      *(_DWORD *)v228 = v98;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      if (byte_10247D87F >= 0) {
        long long v92 = &qword_10247D868;
      }
      else {
        long long v92 = (uint64_t *)qword_10247D868;
      }
      int v139 = 136446466;
      *(void *)int v140 = v92;
      *(_WORD *)&v140[8] = 1026;
      *(_DWORD *)long long v141 = v98;
      long long v93 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::fillFromMobileAssetNVP(const CLNameValuePair &)", "%s\n", v93);
      if (v93 != (char *)buf) {
        free(v93);
      }
    }
  }
  sub_1007582E8((uint64_t)a1, a2, 0, (uint64_t)qword_10247D640, (uint64_t)qword_10247D658, (uint64_t)qword_10247D670);
  sub_1007582E8((uint64_t)a1, a2, 1, (uint64_t)qword_10247D688, (uint64_t)qword_10247D6A0, (uint64_t)qword_10247D6B8);
  sub_1007582E8((uint64_t)a1, a2, 2, (uint64_t)qword_10247D6D0, (uint64_t)qword_10247D6E8, (uint64_t)qword_10247D700);
  *(int32x2_t *)(a1 + 100) = vdup_n_s32(0x1770u);
  sub_1007582E8((uint64_t)a1, a2, 3, (uint64_t)qword_10247D9E8, (uint64_t)qword_10247DA00, (uint64_t)qword_10247DA18);
  *((void *)a1 + 14) = 107374182450000;
  sub_1007582E8((uint64_t)a1, a2, 4, (uint64_t)qword_10247D910, (uint64_t)qword_10247D928, (uint64_t)qword_10247D940);
  *(int32x2_t *)(a1 + 124) = vdup_n_s32(0x186A0u);
  sub_1007582E8((uint64_t)a1, a2, 5, (uint64_t)qword_10247D820, (uint64_t)qword_10247D838, (uint64_t)qword_10247D850);
  *((void *)a1 + 17) = -4294917296;
  sub_1007582E8((uint64_t)a1, a2, 6, (uint64_t)qword_10247D880, (uint64_t)qword_10247D898, (uint64_t)qword_10247D8B0);
  if (byte_10247D8DF < 0)
  {
    sub_1000DC48C(v96, (void *)xmmword_10247D8C8, *((unint64_t *)&xmmword_10247D8C8 + 1));
  }
  else
  {
    *(_OWORD *)long long v96 = xmmword_10247D8C8;
    uint64_t v97 = unk_10247D8D8;
  }
  *((_DWORD *)a1 + 37) = sub_10075A05C(a2, (const char *)v96, 70, 1, 500);
  if (SHIBYTE(v97) < 0) {
    operator delete(v96[0]);
  }
  if (byte_10247D8F7 < 0)
  {
    sub_1000DC48C(v94, (void *)xmmword_10247D8E0, *((unint64_t *)&xmmword_10247D8E0 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v94 = xmmword_10247D8E0;
    uint64_t v95 = unk_10247D8F0;
  }
  *((_DWORD *)a1 + 38) = sub_10075A05C(a2, (const char *)v94, 86400, 43200, 17280000);
  if (SHIBYTE(v95) < 0) {
    operator delete(v94[0]);
  }
  if (qword_102419430 != -1) {
    dispatch_once(&qword_102419430, &stru_1022C7500);
  }
  unint64_t v10 = qword_102419438;
  if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
  {
    int v11 = *((_DWORD *)a1 + 5);
    int v12 = *((_DWORD *)a1 + 6);
    int v14 = *((_DWORD *)a1 + 7);
    int v13 = *((_DWORD *)a1 + 8);
    int v16 = *((_DWORD *)a1 + 9);
    int v15 = *((_DWORD *)a1 + 10);
    BOOL v17 = a1[1];
    BOOL v18 = a1[3];
    int v20 = *((_DWORD *)a1 + 3);
    int v19 = *((_DWORD *)a1 + 4);
    BOOL v21 = a1[4];
    int v22 = *((_DWORD *)a1 + 13);
    int v23 = *((_DWORD *)a1 + 14);
    *(_DWORD *)v227 = *a1;
    BOOL v24 = a1[8];
    *(_DWORD *)&v227[6] = v19;
    int v25 = *((_DWORD *)a1 + 38);
    *(_DWORD *)&v228[2] = v11;
    int v26 = *((_DWORD *)a1 + 40);
    int v230 = v12;
    int v232 = v14;
    int v28 = *((_DWORD *)a1 + 15);
    int v27 = *((_DWORD *)a1 + 16);
    int v234 = v13;
    int v238 = v15;
    int v30 = *((_DWORD *)a1 + 17);
    int v29 = *((_DWORD *)a1 + 18);
    BOOL v242 = v17;
    BOOL v246 = v18;
    int v32 = *((_DWORD *)a1 + 19);
    int v31 = *((_DWORD *)a1 + 20);
    BOOL v250 = v21;
    int v254 = v22;
    int v33 = *((_DWORD *)a1 + 21);
    int v34 = *((_DWORD *)a1 + 22);
    int v258 = v28;
    BOOL v262 = v24;
    int v36 = *((_DWORD *)a1 + 23);
    int v35 = *((_DWORD *)a1 + 24);
    int v266 = v25;
    int v270 = v26;
    int v37 = *((_DWORD *)a1 + 25);
    int v38 = *((_DWORD *)a1 + 26);
    int v274 = v30;
    int v278 = v32;
    int v39 = *((_DWORD *)a1 + 27);
    int v40 = *((_DWORD *)a1 + 28);
    int v282 = v33;
    int v286 = v36;
    int v42 = *((_DWORD *)a1 + 29);
    int v41 = *((_DWORD *)a1 + 30);
    int v290 = v37;
    int v294 = v39;
    int v44 = *((_DWORD *)a1 + 31);
    int v43 = *((_DWORD *)a1 + 32);
    int v298 = v42;
    int v302 = v44;
    int v45 = *((_DWORD *)a1 + 34);
    int v306 = *((_DWORD *)a1 + 33);
    int v47 = *((_DWORD *)a1 + 35);
    int v46 = *((_DWORD *)a1 + 36);
    int v236 = v16;
    int v310 = v47;
    int v48 = *((_DWORD *)a1 + 12);
    int v240 = *((_DWORD *)a1 + 11);
    BOOL v244 = a1[2];
    int v248 = v20;
    int v252 = v48;
    int v256 = v23;
    BOOL v260 = a1[6];
    int v264 = *((_DWORD *)a1 + 37);
    int v268 = *((_DWORD *)a1 + 39);
    int v272 = v27;
    int v276 = v29;
    int v280 = v31;
    int v284 = v34;
    int v288 = v35;
    int v292 = v38;
    int v296 = v40;
    int v300 = v41;
    int v304 = v43;
    int v308 = v45;
    *(_WORD *)&v227[4] = 1026;
    *(_WORD *)v228 = 1026;
    __int16 v229 = 1026;
    __int16 v231 = 1026;
    __int16 v233 = 1026;
    __int16 v235 = 1026;
    __int16 v237 = 1026;
    __int16 v239 = 1026;
    __int16 v241 = 1026;
    __int16 v243 = 1026;
    __int16 v245 = 1026;
    __int16 v247 = 1026;
    __int16 v249 = 1026;
    __int16 v251 = 1026;
    __int16 v253 = 1026;
    __int16 v255 = 1026;
    __int16 v257 = 1026;
    __int16 v259 = 1026;
    __int16 v261 = 1026;
    __int16 v263 = 1026;
    __int16 v265 = 1026;
    __int16 v267 = 1026;
    __int16 v269 = 1026;
    __int16 v271 = 1026;
    __int16 v273 = 1026;
    __int16 v275 = 1026;
    __int16 v277 = 1026;
    __int16 v279 = 1026;
    __int16 v281 = 1026;
    __int16 v283 = 1026;
    __int16 v285 = 1026;
    __int16 v287 = 1026;
    __int16 v289 = 1026;
    __int16 v291 = 1026;
    __int16 v293 = 1026;
    __int16 v295 = 1026;
    __int16 v297 = 1026;
    __int16 v299 = 1026;
    __int16 v301 = 1026;
    __int16 v303 = 1026;
    __int16 v305 = 1026;
    __int16 v307 = 1026;
    __int16 v309 = 1026;
    __int16 v311 = 1026;
    int v312 = v46;
    *(_DWORD *)buf = 67251456;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,CLGMTPS,enabled,%{public}d,refreshPeriod,%{public}d,refreshPeriodNPLOITourist,%{public}d,minBattery,%{public}d,minBatteryAggressive,%{public}d,xpcInterval,%{public}d,downloadSz,%{public}d,uploadSz,%{public}d,downloadTime,%{public}d,insideOut,%{public}d,diskIntensive,%{public}d,touristMode,%{public}d,maxLocAge,%{public}d,nextPLOI,%{public}d,sections,%{public}d,sectionsTourist,%{public}d,sectionsNPLOI,%{public}d,sectionsSE,%{public}d,allowSE,%{public}d,allowAggressive,%{public}d,maxAggressiveSections,%{public}d,timeWindowForMaxAggressive,%{public}d,touristDistance,%{public}d,workoutLookbackDays,%{public}d,home,%{public}d,%{public}d,%{public}d,work,%{public}d,%{public}d,%{public}d,school,%{public}d,%{public}d,%{public}d,nploi,%{public}d,%{public}d,%{public}d,tourist,%{public}d,%{public}d,%{public}d,sigEnv,%{public}d,%{public}d,%{public}d,touristSigEnv,%{public}d,%{public}d,%{public}d", buf, 0x110u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    int v50 = *((_DWORD *)a1 + 5);
    int v51 = *((_DWORD *)a1 + 6);
    int v53 = *((_DWORD *)a1 + 7);
    int v52 = *((_DWORD *)a1 + 8);
    int v54 = *((_DWORD *)a1 + 9);
    int v55 = *((_DWORD *)a1 + 10);
    BOOL v56 = a1[1];
    BOOL v57 = a1[3];
    int v59 = *((_DWORD *)a1 + 3);
    int v58 = *((_DWORD *)a1 + 4);
    BOOL v60 = a1[4];
    int v62 = *((_DWORD *)a1 + 13);
    int v61 = *((_DWORD *)a1 + 14);
    BOOL v63 = a1[8];
    *(_DWORD *)int v140 = *a1;
    int v64 = *((_DWORD *)a1 + 38);
    *(_DWORD *)&v140[6] = v58;
    int v65 = *((_DWORD *)a1 + 40);
    *(_DWORD *)&v141[2] = v50;
    int v143 = v51;
    int v66 = *((_DWORD *)a1 + 15);
    int v67 = *((_DWORD *)a1 + 16);
    int v145 = v53;
    int v147 = v52;
    int v69 = *((_DWORD *)a1 + 17);
    int v68 = *((_DWORD *)a1 + 18);
    int v149 = v54;
    int v151 = v55;
    int v70 = *((_DWORD *)a1 + 19);
    int v71 = *((_DWORD *)a1 + 20);
    BOOL v155 = v56;
    BOOL v159 = v57;
    int v73 = *((_DWORD *)a1 + 21);
    int v72 = *((_DWORD *)a1 + 22);
    BOOL v163 = v60;
    int v167 = v62;
    int v74 = *((_DWORD *)a1 + 23);
    int v75 = *((_DWORD *)a1 + 24);
    int v171 = v66;
    BOOL v175 = v63;
    int v76 = *((_DWORD *)a1 + 25);
    int v77 = *((_DWORD *)a1 + 26);
    int v179 = v64;
    int v183 = v65;
    int v78 = *((_DWORD *)a1 + 27);
    int v79 = *((_DWORD *)a1 + 28);
    int v187 = v69;
    int v191 = v70;
    int v81 = *((_DWORD *)a1 + 29);
    int v80 = *((_DWORD *)a1 + 30);
    int v195 = v73;
    int v199 = v74;
    int v83 = *((_DWORD *)a1 + 31);
    int v82 = *((_DWORD *)a1 + 32);
    int v203 = v76;
    int v207 = v78;
    int v84 = *((_DWORD *)a1 + 33);
    int v85 = *((_DWORD *)a1 + 34);
    int v211 = v81;
    int v215 = v83;
    int v86 = *((_DWORD *)a1 + 35);
    int v87 = *((_DWORD *)a1 + 36);
    int v219 = v84;
    int v223 = v86;
    int v88 = *((_DWORD *)a1 + 12);
    int v153 = *((_DWORD *)a1 + 11);
    BOOL v157 = a1[2];
    int v161 = v59;
    int v165 = v88;
    int v169 = v61;
    BOOL v173 = a1[6];
    int v177 = *((_DWORD *)a1 + 37);
    int v181 = *((_DWORD *)a1 + 39);
    int v185 = v67;
    int v189 = v68;
    int v193 = v71;
    int v197 = v72;
    int v201 = v75;
    int v205 = v77;
    int v209 = v79;
    int v213 = v80;
    int v217 = v82;
    int v221 = v85;
    *(_WORD *)&v140[4] = 1026;
    *(_WORD *)long long v141 = 1026;
    __int16 v142 = 1026;
    __int16 v144 = 1026;
    __int16 v146 = 1026;
    __int16 v148 = 1026;
    __int16 v150 = 1026;
    __int16 v152 = 1026;
    __int16 v154 = 1026;
    __int16 v156 = 1026;
    __int16 v158 = 1026;
    __int16 v160 = 1026;
    __int16 v162 = 1026;
    __int16 v164 = 1026;
    __int16 v166 = 1026;
    __int16 v168 = 1026;
    __int16 v170 = 1026;
    __int16 v172 = 1026;
    __int16 v174 = 1026;
    __int16 v176 = 1026;
    __int16 v178 = 1026;
    __int16 v180 = 1026;
    __int16 v182 = 1026;
    __int16 v184 = 1026;
    __int16 v186 = 1026;
    __int16 v188 = 1026;
    __int16 v190 = 1026;
    __int16 v192 = 1026;
    __int16 v194 = 1026;
    __int16 v196 = 1026;
    __int16 v198 = 1026;
    __int16 v200 = 1026;
    __int16 v202 = 1026;
    __int16 v204 = 1026;
    __int16 v206 = 1026;
    __int16 v208 = 1026;
    __int16 v210 = 1026;
    __int16 v212 = 1026;
    __int16 v214 = 1026;
    __int16 v216 = 1026;
    __int16 v218 = 1026;
    __int16 v220 = 1026;
    __int16 v222 = 1026;
    __int16 v224 = 1026;
    int v225 = v87;
    int v139 = 67251456;
    uint64_t v89 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::CLMapMatcherGeoTilesPrecachingConfig::fillFromMobileAssetNVP(const CLNameValuePair &)", "%s\n", v89);
    if (v89 != (char *)buf) {
      free(v89);
    }
  }
  return 1;
}

void sub_100759C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100759E50(uint64_t a1, const char *a2, BOOL a3)
{
  uint64_t v3 = (uint64_t *)a2;
  BOOL v8 = a3;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (sub_1000D2988(a1, a2, &v8))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    uint64_t v4 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = v3;
      if (*((char *)v3 + 23) < 0) {
        uint64_t v5 = (uint64_t *)*v3;
      }
      *(_DWORD *)buf = 136446466;
      int v14 = v5;
      __int16 v15 = 1026;
      BOOL v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      if (*((char *)v3 + 23) < 0) {
        uint64_t v3 = (uint64_t *)*v3;
      }
      int v9 = 136446466;
      unint64_t v10 = v3;
      __int16 v11 = 1026;
      BOOL v12 = v8;
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLMapMatcherOperatingPolicy::getField(const CLNameValuePair &, const std::string, BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  return v8;
}

uint64_t sub_10075A05C(uint64_t a1, const char *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v7 = a3;
  BOOL v8 = (uint64_t *)a2;
  v14[0] = a3;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  if (sub_10006EF84(a1, a2, v14))
  {
    if (v14[0] >= a4 && v14[0] <= a5)
    {
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      unint64_t v10 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        __int16 v11 = v8;
        if (*((char *)v8 + 23) < 0) {
          __int16 v11 = (uint64_t *)*v8;
        }
        *(_DWORD *)buf = 136446466;
        int v19 = v11;
        __int16 v20 = 1026;
        int v21 = v14[0];
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,read,%{public}s,value,%{public}d", buf, 0x12u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        if (*((char *)v8 + 23) < 0) {
          BOOL v8 = (uint64_t *)*v8;
        }
        v14[1] = 136446466;
        __int16 v15 = v8;
        __int16 v16 = 1026;
        int v17 = v14[0];
        int v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "T CLMapMatcherOperatingPolicy::getField(const CLNameValuePair &, const std::string, T, T, T) [T = int]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
      return v14[0];
    }
  }
  return v7;
}

uint64_t sub_10075A288(uint64_t a1, void *a2)
{
  uint64_t v2 = (long long *)*a2;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3) < 2) {
    return 0;
  }
  if (*((char *)v2 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v6 = *v2;
    uint64_t v60 = *((void *)v2 + 2);
    *(_OWORD *)va_list __p = v6;
  }
  char v7 = HIBYTE(v60);
  if (SHIBYTE(v60) < 0)
  {
    if (__p[1] == (void *)2) {
      goto LABEL_17;
    }
    BOOL v8 = (void **)__p[0];
    if (__p[1] != (void *)3)
    {
      uint64_t v3 = 0;
      goto LABEL_125;
    }
LABEL_12:
    if (*(_WORD *)v8 != 20306 || *((unsigned char *)v8 + 2) != 87)
    {
      uint64_t v3 = 0;
LABEL_122:
      if ((v7 & 0x80) == 0) {
        return v3;
      }
      BOOL v8 = (void **)__p[0];
LABEL_125:
      operator delete(v8);
      return v3;
    }
LABEL_17:
    uint64_t v3 = 1;
    *(unsigned char *)a1 = 1;
    __int16 v11 = a2;
    unint64_t v10 = (long long *)*a2;
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11[1] - (void)v10) >> 3);
    if (v12 >= 2)
    {
      uint64_t v13 = *((unsigned __int8 *)v10 + 47);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *((void *)v10 + 4);
      }
      if (v13)
      {
        __int16 v15 = (char *)v10 + 24;
        if (v14 < 0) {
          __int16 v15 = *(const char **)v15;
        }
        *(_DWORD *)(a1 + 64) = (int)atof(v15);
      }
      if (v12 >= 3)
      {
        uint64_t v16 = *((unsigned __int8 *)v10 + 71);
        int v17 = (char)v16;
        if ((v16 & 0x80u) != 0) {
          uint64_t v16 = *((void *)v10 + 7);
        }
        if (v16)
        {
          BOOL v18 = (const char *)(v10 + 3);
          if (v17 < 0) {
            BOOL v18 = *(const char **)v18;
          }
          *(_DWORD *)(a1 + 68) = (int)atof(v18);
        }
        if (v12 >= 4)
        {
          uint64_t v19 = *((unsigned __int8 *)v10 + 95);
          int v20 = (char)v19;
          if ((v19 & 0x80u) != 0) {
            uint64_t v19 = *((void *)v10 + 10);
          }
          if (v19)
          {
            int v21 = (char *)v10 + 72;
            if (v20 < 0) {
              int v21 = *(const char **)v21;
            }
            *(_DWORD *)(a1 + 76) = (int)atof(v21);
          }
          if (v12 >= 5)
          {
            uint64_t v22 = *((unsigned __int8 *)v10 + 119);
            int v23 = (char)v22;
            if ((v22 & 0x80u) != 0) {
              uint64_t v22 = *((void *)v10 + 13);
            }
            if (v22)
            {
              BOOL v24 = (const char *)(v10 + 6);
              if (v23 < 0) {
                BOOL v24 = *(const char **)v24;
              }
              *(_DWORD *)(a1 + 80) = (int)atof(v24);
            }
            if (v12 >= 6)
            {
              uint64_t v25 = *((unsigned __int8 *)v10 + 143);
              int v26 = (char)v25;
              if ((v25 & 0x80u) != 0) {
                uint64_t v25 = *((void *)v10 + 16);
              }
              if (v25)
              {
                int v27 = (char *)v10 + 120;
                if (v26 < 0) {
                  int v27 = *(const char **)v27;
                }
                *(_DWORD *)(a1 + 88) = (int)atof(v27);
              }
              if (v12 >= 7)
              {
                uint64_t v28 = *((unsigned __int8 *)v10 + 167);
                int v29 = (char)v28;
                if ((v28 & 0x80u) != 0) {
                  uint64_t v28 = *((void *)v10 + 19);
                }
                if (v28)
                {
                  int v30 = (const char *)(v10 + 9);
                  if (v29 < 0) {
                    int v30 = *(const char **)v30;
                  }
                  *(_DWORD *)(a1 + 92) = (int)atof(v30);
                }
                if (v12 >= 8)
                {
                  uint64_t v31 = *((unsigned __int8 *)v10 + 191);
                  int v32 = (char)v31;
                  if ((v31 & 0x80u) != 0) {
                    uint64_t v31 = *((void *)v10 + 22);
                  }
                  if (v31)
                  {
                    int v33 = (char *)v10 + 168;
                    if (v32 < 0) {
                      int v33 = *(const char **)v33;
                    }
                    *(_DWORD *)(a1 + 100) = (int)atof(v33);
                  }
                  if (v12 >= 9)
                  {
                    uint64_t v34 = *((unsigned __int8 *)v10 + 215);
                    int v35 = (char)v34;
                    if ((v34 & 0x80u) != 0) {
                      uint64_t v34 = *((void *)v10 + 25);
                    }
                    if (v34)
                    {
                      int v36 = (const char *)(v10 + 12);
                      if (v35 < 0) {
                        int v36 = *(const char **)v36;
                      }
                      *(_DWORD *)(a1 + 104) = (int)atof(v36);
                    }
                    if (v12 >= 0xA)
                    {
                      uint64_t v37 = *((unsigned __int8 *)v10 + 239);
                      int v38 = (char)v37;
                      if ((v37 & 0x80u) != 0) {
                        uint64_t v37 = *((void *)v10 + 28);
                      }
                      if (v37)
                      {
                        int v39 = (char *)v10 + 216;
                        if (v38 < 0) {
                          int v39 = *(const char **)v39;
                        }
                        *(_DWORD *)(a1 + 112) = (int)atof(v39);
                      }
                      if (v12 >= 0xB)
                      {
                        uint64_t v40 = *((unsigned __int8 *)v10 + 263);
                        int v41 = (char)v40;
                        if ((v40 & 0x80u) != 0) {
                          uint64_t v40 = *((void *)v10 + 31);
                        }
                        if (v40)
                        {
                          int v42 = (const char *)(v10 + 15);
                          if (v41 < 0) {
                            int v42 = *(const char **)v42;
                          }
                          *(_DWORD *)(a1 + 116) = (int)atof(v42);
                        }
                        if (v12 >= 0xC)
                        {
                          uint64_t v43 = *((unsigned __int8 *)v10 + 287);
                          int v44 = (char)v43;
                          if ((v43 & 0x80u) != 0) {
                            uint64_t v43 = *((void *)v10 + 34);
                          }
                          if (v43)
                          {
                            int v45 = (char *)v10 + 264;
                            if (v44 < 0) {
                              int v45 = *(const char **)v45;
                            }
                            *(_DWORD *)(a1 + 72) = (int)atof(v45);
                          }
                          if (v12 >= 0xD)
                          {
                            uint64_t v46 = *((unsigned __int8 *)v10 + 311);
                            int v47 = (char)v46;
                            if ((v46 & 0x80u) != 0) {
                              uint64_t v46 = *((void *)v10 + 37);
                            }
                            if (v46)
                            {
                              int v48 = (const char *)(v10 + 18);
                              if (v47 < 0) {
                                int v48 = *(const char **)v48;
                              }
                              *(_DWORD *)(a1 + 84) = (int)atof(v48);
                            }
                            if (v12 >= 0xE)
                            {
                              uint64_t v49 = *((unsigned __int8 *)v10 + 335);
                              int v50 = (char)v49;
                              if ((v49 & 0x80u) != 0) {
                                uint64_t v49 = *((void *)v10 + 40);
                              }
                              if (v49)
                              {
                                int v51 = (char *)v10 + 312;
                                if (v50 < 0) {
                                  int v51 = *(const char **)v51;
                                }
                                *(_DWORD *)(a1 + 96) = (int)atof(v51);
                              }
                              if (v12 >= 0xF)
                              {
                                uint64_t v52 = *((unsigned __int8 *)v10 + 359);
                                int v53 = (char)v52;
                                if ((v52 & 0x80u) != 0) {
                                  uint64_t v52 = *((void *)v10 + 43);
                                }
                                if (v52)
                                {
                                  int v54 = (const char *)(v10 + 21);
                                  if (v53 < 0) {
                                    int v54 = *(const char **)v54;
                                  }
                                  *(_DWORD *)(a1 + 108) = (int)atof(v54);
                                }
                                if (v12 >= 0x10)
                                {
                                  uint64_t v55 = *((unsigned __int8 *)v10 + 383);
                                  int v56 = (char)v55;
                                  if ((v55 & 0x80u) != 0) {
                                    uint64_t v55 = *((void *)v10 + 46);
                                  }
                                  if (v55)
                                  {
                                    BOOL v57 = (char *)v10 + 360;
                                    if (v56 < 0) {
                                      BOOL v57 = *(const char **)v57;
                                    }
                                    *(_DWORD *)(a1 + 120) = (int)atof(v57);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_122;
  }
  if (HIBYTE(v60) == 2) {
    goto LABEL_17;
  }
  if (HIBYTE(v60) == 3)
  {
    BOOL v8 = __p;
    goto LABEL_12;
  }
  return 0;
}

void sub_10075A6F4(uint64_t **a1, std::string *a2, long long *a3)
{
  if (sub_100040D3C((uint64_t)a1, (const void **)&a2->__r_.__value_.__l.__data_))
  {
    v25[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    long long v6 = sub_10017CA70(a1, (const void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&unk_101D0B290, (long long **)v25);
    long long v7 = *a3;
    long long v8 = a3[2];
    *((_OWORD *)v6 + 30) = a3[1];
    *((_OWORD *)v6 + 31) = v8;
    *((_OWORD *)v6 + 29) = v7;
    long long v9 = a3[3];
    long long v10 = a3[4];
    long long v11 = a3[6];
    *((_OWORD *)v6 + 34) = a3[5];
    *((_OWORD *)v6 + 35) = v11;
    *((_OWORD *)v6 + 32) = v9;
    *((_OWORD *)v6 + 33) = v10;
    long long v12 = a3[7];
    long long v13 = a3[8];
    long long v14 = a3[9];
    *((_DWORD *)v6 + 156) = *((_DWORD *)a3 + 40);
    *((_OWORD *)v6 + 37) = v13;
    *((_OWORD *)v6 + 38) = v14;
    *((_OWORD *)v6 + 36) = v12;
  }
  else
  {
    memset(v25, 0, 24);
    uint64_t v15 = 1;
    do
    {
      uint64_t v16 = &v25[v15];
      v16->__r_.__value_.__s.__data_[0] = 0;
      v16->__r_.__value_.__l.__size_ = 0xBFF0000000000000;
      v16->__r_.__value_.__s.__data_[16] = 0;
      *(_OWORD *)&v16[1].__r_.__value_.__l.__data_ = 0uLL;
      *(_OWORD *)&v16[1].__r_.__value_.__r.__words[2] = 0uLL;
      *(_OWORD *)&v16[2].__r_.__value_.__r.__words[1] = 0uLL;
      *(_OWORD *)&v16[3].__r_.__value_.__l.__data_ = 0uLL;
      v15 += 4;
      v16[3].__r_.__value_.__r.__words[2] = 0;
    }
    while (&v16[4] != (std::string *)v26);
    *(_DWORD *)int v26 = 16777472;
    v26[4] = 1;
    *(_DWORD *)&v26[5] = 0;
    *(_OWORD *)&v26[28] = xmmword_101D2C9F0;
    *(_OWORD *)&v26[44] = xmmword_101D2CA00;
    *(_DWORD *)&v26[60] = 400;
    *(void *)&long long v17 = -1;
    *((void *)&v17 + 1) = -1;
    long long v27 = v17;
    long long v28 = v17;
    long long v29 = v17;
    long long v30 = v17;
    long long v31 = v17;
    *(_DWORD *)int v32 = -1;
    *(_OWORD *)&v32[4] = xmmword_101D2CA10;
    *(_OWORD *)&v26[12] = xmmword_101D2CA20;
    if (sub_10016CCBC()) {
      *(_DWORD *)&v26[16] = 4233600;
    }
    DWORD2(v27) = 125000;
    DWORD1(v28) = 125000;
    LODWORD(v29) = 125000;
    HIDWORD(v29) = 15000;
    DWORD2(v30) = 25000;
    DWORD1(v31) = -1;
    *(_DWORD *)int v32 = -1;
    std::string::operator=(v25, a2);
    long long v18 = a3[9];
    long long v31 = a3[8];
    *(_OWORD *)int v32 = v18;
    *(_DWORD *)&v32[16] = *((_DWORD *)a3 + 40);
    long long v19 = a3[5];
    long long v27 = a3[4];
    long long v28 = v19;
    long long v20 = a3[7];
    long long v29 = a3[6];
    long long v30 = v20;
    long long v21 = a3[1];
    *(_OWORD *)int v26 = *a3;
    *(_OWORD *)&v26[16] = v21;
    long long v22 = a3[3];
    *(_OWORD *)&v26[32] = a3[2];
    *(_OWORD *)&v26[48] = v22;
    sub_10075A9AC(a1, (uint64_t)v25);
    for (unint64_t i = 0; i != -384; i -= 96)
    {
      int v33 = &v25[i / 0x18 + 16];
      sub_10075F460((void ***)&v33);
      int v33 = &v25[i / 0x18 + 15];
      sub_10075F460((void ***)&v33);
      std::string::pointer data = v25[i / 0x18 + 14].__r_.__value_.__l.__data_;
      if (data)
      {
        v25[i / 0x18 + 14].__r_.__value_.__l.__size_ = (std::string::size_type)data;
        operator delete(data);
      }
    }
    if (SHIBYTE(v25[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25[0].__r_.__value_.__l.__data_);
    }
  }
}

void sub_10075A93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = 0;
  while (1)
  {
    *(void *)(v16 - 56) = v15 + v18 + 384;
    sub_10075F460((void ***)(v16 - 56));
    *(void *)(v16 - 56) = v15 + v18 + 360;
    sub_10075F460((void ***)(v16 - 56));
    long long v19 = *(void **)(v15 + v18 + 336);
    if (v19)
    {
      *(void *)(v15 + v18 + 344) = v19;
      operator delete(v19);
    }
    v18 -= 96;
    if (v18 == -384)
    {
      if (a15 < 0) {
        operator delete(__p);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_10075A9AC(uint64_t **a1, uint64_t a2)
{
  if (sub_100040D3C((uint64_t)a1, (const void **)a2))
  {
    v20[0] = (void *)a2;
    uint64_t v4 = sub_10017CA70(a1, (const void **)a2, (uint64_t)&unk_101D0B290, (long long **)v20);
    std::string::operator=((std::string *)(v4 + 7), (const std::string *)a2);
    uint64_t v5 = 0;
    uint64_t v6 = a2 + 56;
    do
    {
      long long v7 = &v4[v5];
      uint64_t v8 = v6 + v5 * 8;
      long long v9 = *(_OWORD *)(v6 + v5 * 8 - 32);
      *((unsigned char *)v7 + 96) = *(unsigned char *)(v6 + v5 * 8 - 16);
      *((_OWORD *)v7 + 5) = v9;
      if (v4 + 7 != (uint64_t *)a2)
      {
        sub_1000FB43C((char *)v7 + 104, *(char **)(v8 - 8), *(void *)v8, (uint64_t)(*(void *)v8 - *(void *)(v8 - 8)) >> 2);
        sub_1007603D4((uint64_t)(v7 + 16), *(uint64_t **)(v8 + 16), *(uint64_t **)(v8 + 24), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v8 + 24) - *(void *)(v8 + 16)) >> 3));
        sub_1007603D4((uint64_t)(v7 + 19), *(uint64_t **)(v8 + 40), *(uint64_t **)(v8 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v8 + 48) - *(void *)(v8 + 40)) >> 3));
      }
      v5 += 12;
    }
    while (v5 != 48);
    long long v10 = *(_OWORD *)(a2 + 408);
    long long v11 = *(_OWORD *)(a2 + 440);
    *((_OWORD *)v4 + 30) = *(_OWORD *)(a2 + 424);
    *((_OWORD *)v4 + 31) = v11;
    *((_OWORD *)v4 + 29) = v10;
    long long v12 = *(_OWORD *)(a2 + 456);
    long long v13 = *(_OWORD *)(a2 + 472);
    long long v14 = *(_OWORD *)(a2 + 504);
    *((_OWORD *)v4 + 34) = *(_OWORD *)(a2 + 488);
    *((_OWORD *)v4 + 35) = v14;
    *((_OWORD *)v4 + 32) = v12;
    *((_OWORD *)v4 + 33) = v13;
    long long v15 = *(_OWORD *)(a2 + 520);
    long long v16 = *(_OWORD *)(a2 + 536);
    long long v17 = *(_OWORD *)(a2 + 552);
    *((_DWORD *)v4 + 156) = *(_DWORD *)(a2 + 568);
    *((_OWORD *)v4 + 37) = v16;
    *((_OWORD *)v4 + 38) = v17;
    *((_OWORD *)v4 + 36) = v15;
  }
  else
  {
    sub_10075F550(v20, (long long *)a2, (long long *)a2);
    sub_100760230(a1, (const void **)v20, (long long *)v20);
    for (uint64_t i = 0; i != -384; i -= 96)
    {
      uint64_t v25 = (void **)&v24[i + 48];
      sub_10075F460(&v25);
      uint64_t v25 = (void **)&v24[i + 24];
      sub_10075F460(&v25);
      long long v19 = *(void **)&v24[i];
      if (v19)
      {
        *(void *)&v24[i + 8] = v19;
        operator delete(v19);
      }
    }
    if (v23 < 0) {
      operator delete(__p);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
  }
}

void sub_10075AB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10075AB98(uint64_t **a1, const void **a2, int a3, int a4, int8x16_t *a5)
{
  uint64_t v8 = (long long *)a2;
  if (sub_100040D3C((uint64_t)a1, a2)
    || (v8 = (long long *)qword_10247DA60, (uint64_t result = sub_100040D3C((uint64_t)a1, (const void **)qword_10247DA60)) != 0))
  {
    long long v12 = v8;
    long long v11 = sub_10017CA70(a1, (const void **)v8, (uint64_t)&unk_101D0B290, &v12);
    return sub_1007543BC((uint64_t)&v11[12 * a3 + 10], a4, a5);
  }
  return result;
}

uint64_t sub_10075AC38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_10075FBA0(a1, *(void **)(a1 + 8));
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *uint64_t v4 = 0;
  CFTypeRef v38 = 0;
  if (sub_1004D1D1C(a2, @"CountryConfiguration", &v38)) {
    sub_10075B960((uint64_t **)a1, (CFArrayRef *)&v38);
  }
  sub_1000E9354(v37);
  if (sub_100012960(a2, "GeneralSettings", v37))
  {
    uint64_t v36 = *(void *)(a1 + 56);
    if (sub_1000A699C((uint64_t)v37, "TrackRunProximityThreshold", &v36))
    {
      *(void *)(a1 + 56) = v36;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      uint64_t v5 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        double v6 = *(double *)(a1 + 56);
        *(_DWORD *)buf = 134349056;
        double v42 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read trackRunProximityThreshold,%{public}.1lf", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        double v17 = *(double *)(a1 + 56);
        int v39 = 134349056;
        double v40 = v17;
        uint64_t v18 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v18);
        if (v18 != (char *)buf) {
          free(v18);
        }
      }
    }
    BOOL v35 = *(unsigned char *)(a1 + 32);
    if (sub_1000D2988((uint64_t)v37, "UseMapDataBufferForMM", &v35))
    {
      *(unsigned char *)(a1 + 32) = v35;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      long long v7 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        int v8 = *(unsigned __int8 *)(a1 + 32);
        *(_DWORD *)buf = 67240192;
        LODWORD(v42) = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read useMapDataBuffer,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        int v19 = *(unsigned __int8 *)(a1 + 32);
        int v39 = 67240192;
        LODWORD(v40) = v19;
        long long v20 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
      }
    }
    BOOL v34 = *(unsigned char *)(a1 + 33);
    if (sub_1000D2988((uint64_t)v37, "UseXPCServiceForMapDataQueriesInMM", &v34))
    {
      *(unsigned char *)(a1 + 33) = v34;
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      long long v9 = qword_102419438;
      if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
      {
        int v10 = *(unsigned __int8 *)(a1 + 33);
        *(_DWORD *)buf = 67240192;
        LODWORD(v42) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read useXPCServiceForMapQueries,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        int v21 = *(unsigned __int8 *)(a1 + 33);
        int v39 = 67240192;
        LODWORD(v40) = v21;
        long long v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v22);
        if (v22 != (char *)buf) {
          free(v22);
        }
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DB10, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_10247DB10))
    {
      sub_100134750(&xmmword_10247DAF8, "MapsRoadDataBufferRadiusVehicle");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247DAF8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10247DB10);
    }
    if (byte_10247DB0F < 0)
    {
      sub_1000DC48C(&__p, (void *)xmmword_10247DAF8, *((unint64_t *)&xmmword_10247DAF8 + 1));
    }
    else
    {
      long long __p = xmmword_10247DAF8;
      uint64_t v33 = unk_10247DB08;
    }
    *(_DWORD *)(a1 + 36) = sub_10075A05C((uint64_t)v37, (const char *)&__p, *(unsigned int *)(a1 + 36), 50, 2500);
    if (SHIBYTE(v33) < 0) {
      operator delete((void *)__p);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DB30, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_10247DB30))
    {
      sub_100134750(&xmmword_10247DB18, "MapsRoadDataBufferRadiusPedestrian");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247DB18, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10247DB30);
    }
    if (byte_10247DB2F < 0)
    {
      sub_1000DC48C(__dst, (void *)xmmword_10247DB18, *((unint64_t *)&xmmword_10247DB18 + 1));
    }
    else
    {
      *(_OWORD *)__dst = xmmword_10247DB18;
      uint64_t v31 = unk_10247DB28;
    }
    *(_DWORD *)(a1 + 40) = sub_10075A05C((uint64_t)v37, (const char *)__dst, *(unsigned int *)(a1 + 40), 50, 2500);
    if (SHIBYTE(v31) < 0) {
      operator delete(__dst[0]);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DB50, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_10247DB50))
    {
      sub_100134750(&xmmword_10247DB38, "MapsRoadDataBufferRadiusBicycle");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247DB38, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10247DB50);
    }
    if (byte_10247DB4F < 0)
    {
      sub_1000DC48C(v28, (void *)xmmword_10247DB38, *((unint64_t *)&xmmword_10247DB38 + 1));
    }
    else
    {
      *(_OWORD *)long long v28 = xmmword_10247DB38;
      uint64_t v29 = unk_10247DB48;
    }
    *(_DWORD *)(a1 + 44) = sub_10075A05C((uint64_t)v37, (const char *)v28, *(unsigned int *)(a1 + 44), 50, 2500);
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DB70, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_10247DB70))
    {
      sub_100134750(&xmmword_10247DB58, "MapsBuildingDataBufferRadiusPedestrian");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247DB58, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10247DB70);
    }
    if (byte_10247DB6F < 0)
    {
      sub_1000DC48C(v26, (void *)xmmword_10247DB58, *((unint64_t *)&xmmword_10247DB58 + 1));
    }
    else
    {
      *(_OWORD *)int v26 = xmmword_10247DB58;
      uint64_t v27 = unk_10247DB68;
    }
    *(_DWORD *)(a1 + 48) = sub_10075A05C((uint64_t)v37, (const char *)v26, *(unsigned int *)(a1 + 48), 5, 1000);
    if (SHIBYTE(v27) < 0) {
      operator delete(v26[0]);
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DB90, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_10247DB90))
    {
      sub_100134750(&xmmword_10247DB78, "MapsBuildingDataBufferRadiusBicycle");
      __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247DB78, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10247DB90);
    }
    if (byte_10247DB8F < 0)
    {
      sub_1000DC48C(v24, (void *)xmmword_10247DB78, *((unint64_t *)&xmmword_10247DB78 + 1));
    }
    else
    {
      *(_OWORD *)BOOL v24 = xmmword_10247DB78;
      uint64_t v25 = unk_10247DB88;
    }
    *(_DWORD *)(a1 + 52) = sub_10075A05C((uint64_t)v37, (const char *)v24, *(unsigned int *)(a1 + 52), 5, 1000);
    if (SHIBYTE(v25) < 0) {
      operator delete(v24[0]);
    }
    double v23 = *(double *)(a1 + 24);
    if (sub_1000A699C((uint64_t)v37, "RoadWidthBufferForFitnessUseCase", &v23))
    {
      if (v23 < 0.0 || v23 > 50.0)
      {
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        long long v15 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349056;
          double v42 = v23;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read invalid roadWidthBufferForFitnessUseCase,%{public}.1lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          int v39 = 134349056;
          double v40 = v23;
          long long v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v14);
          goto LABEL_84;
        }
      }
      else
      {
        *(double *)(a1 + 24) = v23;
        if (qword_102419430 != -1) {
          dispatch_once(&qword_102419430, &stru_1022C7500);
        }
        long long v11 = qword_102419438;
        if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
        {
          double v12 = *(double *)(a1 + 24);
          *(_DWORD *)buf = 134349056;
          double v42 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,GeneralSettings,read roadWidthBufferForFitnessUseCase,%{public}.1lf", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          double v13 = *(double *)(a1 + 24);
          int v39 = 134349056;
          double v40 = v13;
          long long v14 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readConfig(const CLNameValuePair &)", "%s\n", v14);
LABEL_84:
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
      }
    }
  }
  return sub_10013F3C4(v37);
}

void sub_10075B858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,char a49)
{
}

void sub_10075B960(uint64_t **a1, CFArrayRef *a2)
{
  if (*a2)
  {
    int Count = CFArrayGetCount(*a2);
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    uint64_t v3 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = Count;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,CountryConfiguration,numberOfCountries,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(__p[0].__r_.__value_.__r.__words[0]) = Count;
      BOOL v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v34);
      if (v34 != buf) {
        free(v34);
      }
    }
    if (Count >= 1)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*a2, i);
        sub_10013FA80((int)v38, ValueAtIndex);
        memset(__p, 0, 24);
        uint64_t v6 = 1;
        do
        {
          long long v7 = &__p[v6];
          v7->__r_.__value_.__s.__data_[0] = 0;
          v7->__r_.__value_.__l.__size_ = 0xBFF0000000000000;
          v7->__r_.__value_.__s.__data_[16] = 0;
          *(_OWORD *)&v7[1].__r_.__value_.__l.__data_ = 0uLL;
          *(_OWORD *)&v7[1].__r_.__value_.__r.__words[2] = 0uLL;
          *(_OWORD *)&v7[2].__r_.__value_.__r.__words[1] = 0uLL;
          *(_OWORD *)&v7[3].__r_.__value_.__l.__data_ = 0uLL;
          v6 += 4;
          v7[3].__r_.__value_.__r.__words[2] = 0;
        }
        while (&v7[4] != (std::string *)&v50);
        int v50 = 16777472;
        char v51 = 1;
        int v52 = 0;
        long long v54 = xmmword_101D2C9F0;
        long long v55 = xmmword_101D2CA00;
        int v56 = 400;
        *(void *)&long long v8 = -1;
        *((void *)&v8 + 1) = -1;
        long long v57 = v8;
        long long v58 = v8;
        long long v59 = v8;
        long long v60 = v8;
        long long v61 = v8;
        int v62 = -1;
        long long v63 = xmmword_101D2CA10;
        long long v53 = xmmword_101D2CA20;
        if (sub_10016CCBC()) {
          DWORD1(v53) = 4233600;
        }
        DWORD2(v57) = 125000;
        DWORD1(v58) = 125000;
        LODWORD(v59) = 125000;
        HIDWORD(v59) = 15000;
        DWORD2(v60) = 25000;
        DWORD1(v61) = -1;
        int v62 = -1;
        if (sub_1004D1284((uint64_t)v38, "CountryCode", __p))
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          long long v9 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
          {
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v10 = __p;
            }
            else {
              int v10 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136315138;
            *(void *)&uint8_t buf[4] = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,**ReadCountryCode**,%s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022C7500);
            }
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              double v23 = __p;
            }
            else {
              double v23 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            }
            int v45 = 136315138;
            uint64_t v46 = v23;
            BOOL v24 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v24);
            if (v24 != buf) {
              free(v24);
            }
          }
          sub_1000E9354(&v45);
          if (sub_100012960((uint64_t)v38, "EnableActivityBasedPedestrianMapMatching", &v45))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022C7500);
            }
            long long v11 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
            {
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                double v12 = __p;
              }
              else {
                double v12 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = v12;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Reading PedestrianMM settings for,%{public}s", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022C7500);
              }
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v27 = __p;
              }
              else {
                uint64_t v27 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              }
              int v43 = 136446210;
              int v44 = v27;
              long long v28 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v28);
              if (v28 != buf) {
                free(v28);
              }
            }
            sub_100753034((uint64_t)&v48, (uint64_t)&v45);
          }
          sub_1000E9354(&v43);
          if (sub_100012960((uint64_t)v38, "EnableActivityBasedCyclingMapMatching", &v43))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022C7500);
            }
            double v13 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
            {
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v14 = __p;
              }
              else {
                long long v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = v14;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Reading CyclingMM settings for,%{public}s", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022C7500);
              }
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v29 = __p;
              }
              else {
                uint64_t v29 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              }
              int v41 = 136446210;
              double v42 = v29;
              long long v30 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v30);
              if (v30 != buf) {
                free(v30);
              }
            }
            sub_100753034((uint64_t)v49, (uint64_t)&v43);
          }
          sub_1000E9354(&v41);
          if (sub_100012960((uint64_t)v38, "GeoTilesPrecaching", &v41))
          {
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022C7500);
            }
            long long v15 = qword_102419438;
            if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
            {
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v16 = __p;
              }
              else {
                long long v16 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Reading GeoTilesPrecaching settings for,%{public}s", buf, 0xCu);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419430 != -1) {
                dispatch_once(&qword_102419430, &stru_1022C7500);
              }
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v31 = __p;
              }
              else {
                uint64_t v31 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              }
              int v39 = 136446210;
              double v40 = v31;
              int v32 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v32);
              if (v32 != buf) {
                free(v32);
              }
            }
            sub_100758980((BOOL *)&v50, (uint64_t)&v41);
          }
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          double v17 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
          {
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v18 = __p;
            }
            else {
              uint64_t v18 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            }
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Read all settings for,%{public}s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022C7500);
            }
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v25 = __p;
            }
            else {
              uint64_t v25 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            }
            int v39 = 136446210;
            double v40 = v25;
            int v26 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v26);
            if (v26 != buf) {
              free(v26);
            }
          }
          sub_10075A9AC(a1, (uint64_t)__p);
          sub_10013F3C4(&v41);
          sub_10013F3C4(&v43);
          sub_10013F3C4(&v45);
        }
        else
        {
          if (qword_102419430 != -1) {
            dispatch_once(&qword_102419430, &stru_1022C7500);
          }
          int v19 = qword_102419438;
          if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "CLMM,MA-OTA,Unable to get country code", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419430 != -1) {
              dispatch_once(&qword_102419430, &stru_1022C7500);
            }
            LOWORD(v45) = 0;
            long long v20 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v20);
            if (v20 != buf) {
              free(v20);
            }
          }
        }
        for (uint64_t j = 0; j != -384; j -= 96)
        {
          *(void *)buf = &v49[j + 72];
          sub_10075F460((void ***)buf);
          *(void *)buf = &v49[j + 48];
          sub_10075F460((void ***)buf);
          long long v22 = *(void **)&v49[j + 24];
          if (v22)
          {
            *(void *)&v49[j + 32] = v22;
            operator delete(v22);
          }
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        sub_10013F3C4(v38);
      }
    }
  }
  else
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7500);
    }
    uint64_t v33 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "CLMM,MA-OTA,NULL countryConfigArray", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7500);
      }
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      BOOL v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLMapMatcherOperatingPolicy::CLMapMatcherMobileAssetReader::readCountrySpecificConfig(const CFArrayRef &)", "%s\n", v35);
      if (v35 != buf) {
        free(v35);
      }
    }
  }
}

void sub_10075C9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,char a39,uint64_t a40,void *__p)
{
}

void sub_10075CAB8(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_10075CAE8(double **a1, double *a2)
{
  sub_10075CE80(a1);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((unint64_t)((char *)v5 - (char *)*a1) >= 0x40)
  {
    double v6 = *a2;
    long long v7 = v4 + 2;
    if (v4 + 2 == v5)
    {
      double v9 = 0.0;
    }
    else
    {
      unint64_t v8 = 0;
      double v9 = 0.0;
      do
      {
        double v10 = *(v7 - 2);
        double v11 = *v7;
        if (v10 != *v7)
        {
          if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_9;
          }
          double v13 = vabdd_f64(v10, v11);
          double v14 = fabs(v10);
          double v15 = fabs(v11);
          if (v14 < v15) {
            double v14 = v15;
          }
          double v16 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
          if (v13 > v16)
          {
LABEL_9:
            double v9 = v9 + sub_10075D2F4(v7 - 2, v7);
            v8 += sub_10075D548(v7 - 2, v7);
          }
        }
        v7 += 2;
      }
      while (v7 != v5);
      if (v8)
      {
        double v17 = (double)((v8 >> 1) + 1);
        double v18 = fabs(v9);
        double v19 = -v18;
        double v20 = -(v18 - v17 * 6.28318531);
        double v21 = -(v19 + v17 * 6.28318531);
        if (v9 <= 0.0) {
          double v9 = v20;
        }
        else {
          double v9 = v21;
        }
      }
    }
    if (v6 * v6 * v9 < 0.0)
    {
      double v23 = *a1;
      long long v22 = a1[1];
      if (*a1 != v22)
      {
        BOOL v24 = v22 - 2;
        if (v24 > v23)
        {
          uint64_t v25 = v23 + 2;
          do
          {
            long long v26 = *((_OWORD *)v25 - 1);
            *((_OWORD *)v25 - 1) = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v26;
            v24 -= 2;
            BOOL v27 = v25 >= v24;
            v25 += 2;
          }
          while (!v27);
        }
      }
    }
  }
}

void sub_10075CCB4(double **a1, double *a2)
{
  sub_10075CE80(a1);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((unint64_t)((char *)v5 - (char *)*a1) >= 0x40)
  {
    double v6 = *a2;
    long long v7 = v4 + 2;
    if (v4 + 2 == v5)
    {
      double v9 = 0.0;
    }
    else
    {
      unint64_t v8 = 0;
      double v9 = 0.0;
      do
      {
        double v10 = *(v7 - 2);
        double v11 = *v7;
        if (v10 != *v7)
        {
          if ((*(void *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
            || (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
          {
            goto LABEL_9;
          }
          double v13 = vabdd_f64(v10, v11);
          double v14 = fabs(v10);
          double v15 = fabs(v11);
          if (v14 < v15) {
            double v14 = v15;
          }
          double v16 = v14 >= 1.0 ? v14 * 2.22044605e-16 : 2.22044605e-16;
          if (v13 > v16)
          {
LABEL_9:
            double v9 = v9 + sub_10075D2F4(v7 - 2, v7);
            v8 += sub_10075D548(v7 - 2, v7);
          }
        }
        v7 += 2;
      }
      while (v7 != v5);
      if (v8)
      {
        double v17 = (double)((v8 >> 1) + 1);
        double v18 = fabs(v9);
        double v19 = -v18;
        double v20 = -(v18 - v17 * 6.28318531);
        double v21 = -(v19 + v17 * 6.28318531);
        if (v9 <= 0.0) {
          double v9 = v20;
        }
        else {
          double v9 = v21;
        }
      }
    }
    if (v6 * v6 * v9 > 0.0)
    {
      double v23 = *a1;
      long long v22 = a1[1];
      if (*a1 != v22)
      {
        BOOL v24 = v22 - 2;
        if (v24 > v23)
        {
          uint64_t v25 = v23 + 2;
          do
          {
            long long v26 = *((_OWORD *)v25 - 1);
            *((_OWORD *)v25 - 1) = *(_OWORD *)v24;
            *(_OWORD *)BOOL v24 = v26;
            v24 -= 2;
            BOOL v27 = v25 >= v24;
            v25 += 2;
          }
          while (!v27);
        }
      }
    }
  }
}

void sub_10075CE80(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if ((unint64_t)((char *)v2 - (char *)*a1) >= 0x30)
  {
    double v4 = *v1;
    double v30 = v1[1];
    double v31 = v4;
    sub_10075D084(&v31, &v30, 1);
    double v5 = v30;
    double v6 = v31;
    double v31 = *(v2 - 2);
    double v30 = *(v2 - 1);
    sub_10075D084(&v31, &v30, 1);
    if (v6 != v31)
    {
      if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }
      double v11 = vabdd_f64(v6, v31);
      double v12 = fabs(v6);
      double v13 = fabs(v31);
      if (v12 >= v13) {
        double v13 = v12;
      }
      double v14 = v13 >= 1.0 ? v13 * 2.22044605e-16 : 2.22044605e-16;
      if (v11 > v14) {
        goto LABEL_21;
      }
    }
    if (v5 != v30)
    {
      if ((*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
        || (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
      {
        goto LABEL_21;
      }
      double v7 = vabdd_f64(v5, v30);
      double v8 = fabs(v5);
      double v9 = fabs(v30);
      if (v8 >= v9) {
        double v9 = v8;
      }
      double v10 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
      if (v7 > v10)
      {
LABEL_21:
        double v15 = *a1;
        double v16 = a1[1];
        uint64_t v18 = *(void *)*a1;
        uint64_t v17 = *((void *)*a1 + 1);
        unint64_t v19 = (unint64_t)a1[2];
        if ((unint64_t)v16 >= v19)
        {
          uint64_t v21 = ((char *)v16 - (char *)v15) >> 4;
          if ((unint64_t)(v21 + 1) >> 60) {
            sub_1001D7FD4();
          }
          uint64_t v22 = v19 - (void)v15;
          uint64_t v23 = v22 >> 3;
          if (v22 >> 3 <= (unint64_t)(v21 + 1)) {
            uint64_t v23 = v21 + 1;
          }
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v23;
          }
          if (v24) {
            uint64_t v25 = (char *)sub_1000C571C((uint64_t)(a1 + 2), v24);
          }
          else {
            uint64_t v25 = 0;
          }
          long long v26 = &v25[16 * v21];
          BOOL v27 = &v25[16 * v24];
          *(void *)long long v26 = v18;
          *((void *)v26 + 1) = v17;
          double v20 = (double *)(v26 + 16);
          uint64_t v29 = *a1;
          long long v28 = a1[1];
          if (v28 != *a1)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v28 - 1);
              v26 -= 16;
              v28 -= 2;
            }
            while (v28 != v29);
            long long v28 = *a1;
          }
          *a1 = (double *)v26;
          a1[1] = v20;
          a1[2] = (double *)v27;
          if (v28) {
            operator delete(v28);
          }
        }
        else
        {
          *(void *)double v16 = v18;
          *((void *)v16 + 1) = v17;
          double v20 = v16 + 2;
        }
        a1[1] = v20;
      }
    }
  }
}

void sub_10075D084(double *a1, double *a2, int a3)
{
  double v6 = *a1;
  double v7 = fabs(*a1);
  double v8 = 180.0;
  if (v7 == 180.0) {
    goto LABEL_2;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v10 = fabs(v7 + -180.0);
    double v8 = 180.0;
    if (v7 < 180.0) {
      double v7 = 180.0;
    }
    double v11 = v7 >= 1.0 ? v7 * 2.22044605e-16 : 2.22044605e-16;
    if (v10 <= v11) {
      goto LABEL_2;
    }
  }
  double v8 = 180.0;
  if (v6 <= 180.0)
  {
    if (v6 >= -180.0) {
      goto LABEL_3;
    }
    double v8 = fmod(v6 + -180.0, 360.0) + 180.0;
    goto LABEL_2;
  }
  double v6 = fmod(v6 + 180.0, 360.0) + -180.0;
  *a1 = v6;
  if (v6 == -180.0) {
    goto LABEL_2;
  }
  BOOL v12 = ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v12 || *(void *)&v6 == 0)
  {
    double v8 = 180.0;
    double v14 = fabs(v6 + 180.0);
    double v15 = fabs(v6);
    if (v15 < 180.0) {
      double v15 = 180.0;
    }
    double v16 = v15 >= 1.0 ? v15 * 2.22044605e-16 : 2.22044605e-16;
    if (v14 <= v16)
    {
LABEL_2:
      *a1 = v8;
      double v6 = v8;
    }
  }
  if (!a3) {
    goto LABEL_37;
  }
LABEL_3:
  double v9 = fabs(*a2);
  if (v9 == 90.0) {
    goto LABEL_5;
  }
  if ((*(void *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_37;
  }
  double v17 = fabs(v9 + -90.0);
  if (v9 < 90.0) {
    double v9 = 90.0;
  }
  double v18 = v9 >= 1.0 ? v9 * 2.22044605e-16 : 2.22044605e-16;
  if (v17 <= v18)
  {
LABEL_5:
    *a1 = 0.0;
    double v6 = 0.0;
  }
  else
  {
LABEL_37:
    if (v6 <= -180.0) {
      goto LABEL_52;
    }
    if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (v6 <= 180.0) {
        return;
      }
LABEL_49:
      sub_101A6C98C();
    }
  }
  double v19 = fabs(v6 + 180.0);
  double v20 = fabs(v6);
  if (v20 < 180.0) {
    double v20 = 180.0;
  }
  if (v20 >= 1.0) {
    double v21 = v20 * 2.22044605e-16;
  }
  else {
    double v21 = 2.22044605e-16;
  }
  if (v19 <= v21) {
LABEL_52:
  }
    sub_101A6C9B8();
  if (v6 > 180.0 && fabs(v6 + -180.0) > v21) {
    goto LABEL_49;
  }
}

long double sub_10075D2F4(double *a1, double *a2)
{
  double v2 = a1[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v25 = a2;
    uint64_t v29 = a1;
    int v16 = __cxa_guard_acquire(&qword_10241D6E0);
    a2 = v25;
    a1 = v29;
    if (v16)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      a2 = v25;
      a1 = v29;
    }
  }
  double v3 = *(double *)&qword_10241D6D8;
  double v4 = a2[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    long long v26 = a2;
    double v30 = a1;
    double v17 = v3;
    int v18 = __cxa_guard_acquire(&qword_10241D6E0);
    double v3 = v17;
    int v19 = v18;
    a2 = v26;
    a1 = v30;
    if (v19)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v3 = v17;
      a2 = v26;
      a1 = v30;
    }
  }
  double v5 = *(double *)&qword_10241D6D8;
  double v6 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v31 = a1;
    double v20 = v3;
    double v27 = v6;
    int v21 = __cxa_guard_acquire(&qword_10241D6E0);
    double v6 = v27;
    double v3 = v20;
    int v22 = v21;
    a1 = v31;
    if (v22)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v6 = v27;
      double v3 = v20;
      a1 = v31;
    }
  }
  double v7 = *(double *)&qword_10241D6D8;
  double v8 = *a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v24 = v3;
    double v28 = v6;
    double v32 = v7;
    int v23 = __cxa_guard_acquire(&qword_10241D6E0);
    double v6 = v28;
    double v7 = v32;
    double v3 = v24;
    if (v23)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v6 = v28;
      double v7 = v32;
      double v3 = v24;
    }
  }
  double v9 = v6 * v7;
  double v10 = tan(v2 * v3 * 0.5);
  long double v11 = tan(v4 * v5 * 0.5);
  long double v12 = (v10 + v11) / (v10 * v11 + 1.0);
  long double v13 = tan((v9 - v8 * *(double *)&qword_10241D6D8) * 0.5);
  long double v14 = atan(v12 * v13);
  return v14 + v14;
}

BOOL sub_10075D548(double *a1, double *a2)
{
  double v2 = *a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    int v23 = a1;
    uint64_t v29 = a2;
    double v27 = v2;
    int v14 = __cxa_guard_acquire(&qword_10241D6E0);
    double v2 = v27;
    a2 = v29;
    int v15 = v14;
    a1 = v23;
    if (v15)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v2 = v27;
      a1 = v23;
      a2 = v29;
    }
  }
  double v3 = *(double *)&qword_10241D6D8;
  double v4 = *a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v30 = a2;
    double v28 = v2;
    double v20 = v3;
    double v24 = v4;
    int v16 = __cxa_guard_acquire(&qword_10241D6E0);
    double v3 = v20;
    double v4 = v24;
    double v2 = v28;
    a2 = v30;
    if (v16)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v3 = v20;
      double v4 = v24;
      double v2 = v28;
      a2 = v30;
    }
  }
  double v5 = v2 * v3;
  double v6 = floor(v4 * *(double *)&qword_10241D6D8 / 6.28318531);
  double v7 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v31 = a2;
    double v19 = v7;
    double v21 = v5;
    double v25 = v6;
    int v17 = __cxa_guard_acquire(&qword_10241D6E0);
    double v5 = v21;
    double v6 = v25;
    double v7 = v19;
    a2 = v31;
    if (v17)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v5 = v21;
      double v6 = v25;
      double v7 = v19;
      a2 = v31;
    }
  }
  double v8 = v5 - v6 * 6.28318531;
  double v9 = v7 * *(double *)&qword_10241D6D8;
  double v10 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v22 = v9;
    double v26 = v8;
    double v32 = v10;
    int v18 = __cxa_guard_acquire(&qword_10241D6E0);
    double v10 = v32;
    double v9 = v22;
    double v8 = v26;
    if (v18)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v10 = v32;
      double v9 = v22;
      double v8 = v26;
    }
  }
  BOOL result = 0;
  double v12 = v9 - floor(v10 * *(double *)&qword_10241D6D8 / 6.28318531) * 6.28318531;
  if (v8 >= v12) {
    double v13 = v8;
  }
  else {
    double v13 = v12;
  }
  if (v12 < v8) {
    double v8 = v12;
  }
  if (v13 > 3.14159265 && v8 < 3.14159265) {
    return v13 - v8 > 3.14159265;
  }
  return result;
}

uint64_t sub_10075D7F8(double *a1, uint64_t a2)
{
  double v2 = *(double **)a2;
  double v3 = *(double **)(a2 + 8);
  if ((unint64_t)v3 - *(void *)a2 < 0x40) {
    return 0xFFFFFFFFLL;
  }
  char v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  if (v2 + 2 == v3) {
    return 0xFFFFFFFFLL;
  }
  do
  {
    if (!sub_10075D9A4((uint64_t)&v13, a1, v2, v2 + 2, (uint64_t)&v14)) {
      break;
    }
    double v6 = v2 + 4;
    v2 += 2;
  }
  while (v6 != v3);
  if (v16) {
    return 0;
  }
  if (v15 && HIDWORD(v15))
  {
    if ((int)v15 < 1)
    {
      if (!v14) {
        return 0xFFFFFFFFLL;
      }
    }
    else if (!(v14 + HIDWORD(v14)))
    {
      return 0xFFFFFFFFLL;
    }
  }
  else if (!v14)
  {
    return 0xFFFFFFFFLL;
  }
  double v9 = *(double ***)(a2 + 24);
  double v8 = *(double ***)(a2 + 32);
  if (v9 != v8)
  {
    while (1)
    {
      double v10 = *v9;
      long double v11 = v9[1];
      if ((unint64_t)((char *)v11 - (char *)*v9) >= 0x40)
      {
        char v13 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        char v16 = 0;
        if (v10 + 2 != v11)
        {
          do
          {
            if (!sub_10075D9A4((uint64_t)&v13, a1, v10, v10 + 2, (uint64_t)&v14)) {
              break;
            }
            double v12 = v10 + 4;
            v10 += 2;
          }
          while (v12 != v11);
          if (v16) {
            return 0;
          }
          if (v15 && HIDWORD(v15))
          {
            if ((int)v15 < 1)
            {
              if (v14) {
                return 0xFFFFFFFFLL;
              }
            }
            else if (v14 + HIDWORD(v14))
            {
              return 0xFFFFFFFFLL;
            }
          }
          else if (v14)
          {
            return 0xFFFFFFFFLL;
          }
        }
        double v8 = *(double ***)(a2 + 32);
      }
      v9 += 3;
      uint64_t result = 1;
      if (v9 == v8) {
        return result;
      }
    }
  }
  return 1;
}

BOOL sub_10075D9A4(uint64_t a1, double *a2, double *a3, double *a4, uint64_t a5)
{
  __int16 v18 = 0;
  BOOL v17 = 0;
  if (sub_10075E0B0(a2, a3, a4, a5, (BOOL *)&v18 + 1, (BOOL *)&v18, &v17)) {
    return *(unsigned char *)(a5 + 16) == 0;
  }
  unint64_t v11 = sub_10075EC68(a2, a3, a4, HIBYTE(v18), v18, v17);
  unint64_t v16 = v11;
  if (!v11) {
    return *(unsigned char *)(a5 + 16) == 0;
  }
  if ((v11 & 0xFF00000000) == 0)
  {
    if (v11 == 1 || v11 == -1)
    {
      if (HIBYTE(v18)) {
        char v13 = a3;
      }
      else {
        char v13 = a4;
      }
      int v14 = sub_10075DB28(a1, a2, v13, (int *)&v16);
    }
    else
    {
      if (v17)
      {
        if ((int)v11 < 1) {
          int v15 = -1;
        }
        else {
          int v15 = 1;
        }
        if (180.0 - a3[1] - a4[1] <= 180.0) {
          int v15 = -v15;
        }
LABEL_24:
        if ((int)v11 * v15 >= 1) {
          *(_DWORD *)a5 += v11;
        }
        *(_DWORD *)(a5 + 8) += v11;
        return *(unsigned char *)(a5 + 16) == 0;
      }
      int v14 = sub_10075DD40(a3, a4, a2);
    }
    int v15 = v14;
    if (!v14)
    {
      BOOL result = 0;
      *(unsigned char *)(a5 + 16) = 1;
      *(_DWORD *)a5 = 0;
      return result;
    }
    LODWORD(v11) = v16;
    goto LABEL_24;
  }
  *(_DWORD *)(a5 + 4) -= v11;
  *(_DWORD *)(a5 + 12) -= v11;
  return *(unsigned char *)(a5 + 16) == 0;
}

uint64_t sub_10075DB28(uint64_t a1, double *a2, double *a3, int *a4)
{
  double v4 = a2[1];
  double v5 = a3[1];
  if (v4 == v5) {
    return 0;
  }
  if ((*(void *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(void *)&v5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v23 = vabdd_f64(v4, v5);
    double v24 = fabs(v4);
    double v25 = fabs(v5);
    if (v24 < v25) {
      double v24 = v25;
    }
    double v26 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
    if (v23 <= v26) {
      return 0;
    }
  }
  double v9 = *a3;
  v28[0] = *a3;
  v28[1] = v5;
  v27[1] = v5;
  double v10 = -1.0;
  if (*a4 > 0) {
    double v10 = 1.0;
  }
  double v11 = v9 + v10;
  double v12 = fabs(v11);
  double v13 = 180.0;
  if (v12 != 180.0)
  {
    BOOL v14 = ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
       && (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
    if (v14 && *(void *)&v11 != 0) {
      goto LABEL_26;
    }
    double v16 = fabs(v12 + -180.0);
    double v13 = 180.0;
    if (v12 < 180.0) {
      double v12 = 180.0;
    }
    double v17 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
    if (v16 > v17)
    {
LABEL_26:
      double v13 = 180.0;
      if (v11 <= 180.0)
      {
        if (v11 >= -180.0) {
          goto LABEL_11;
        }
        double v13 = fmod(v11 + -180.0, 360.0) + 180.0;
      }
      else
      {
        double v11 = fmod(v11 + 180.0, 360.0) + -180.0;
        if (v11 != -180.0)
        {
          BOOL v18 = ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
             && (*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
          if (v18 && *(void *)&v11 != 0) {
            goto LABEL_11;
          }
          double v13 = 180.0;
          double v20 = fabs(v11 + 180.0);
          double v21 = fabs(v11);
          if (v21 < 180.0) {
            double v21 = 180.0;
          }
          double v22 = v21 >= 1.0 ? v21 * 2.22044605e-16 : 2.22044605e-16;
          if (v20 > v22) {
            goto LABEL_11;
          }
        }
      }
    }
  }
  double v11 = v13;
LABEL_11:
  v27[0] = v11;
  return sub_10075DD40(v28, v27, a2);
}

uint64_t sub_10075DD40(double *a1, double *a2, double *a3)
{
  double v37 = 0.0;
  double v3 = *a1;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    BOOL v18 = a1;
    double v21 = a2;
    double v26 = a3;
    double v17 = v3;
    int v10 = __cxa_guard_acquire(&qword_10241D6E0);
    double v3 = v17;
    a2 = v21;
    a3 = v26;
    int v11 = v10;
    a1 = v18;
    if (v11)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v3 = v17;
      a1 = v18;
      a2 = v21;
      a3 = v26;
    }
  }
  double v37 = v3 * *(double *)&qword_10241D6D8;
  double v36 = 0.0;
  double v4 = a1[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v22 = a2;
    double v27 = a3;
    double v19 = v4;
    int v12 = __cxa_guard_acquire(&qword_10241D6E0);
    double v4 = v19;
    a2 = v22;
    a3 = v27;
    if (v12)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v4 = v19;
      a2 = v22;
      a3 = v27;
    }
  }
  double v36 = v4 * *(double *)&qword_10241D6D8;
  double v35 = 0.0;
  double v5 = *a2;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v23 = a2;
    double v28 = a3;
    double v20 = v5;
    int v13 = __cxa_guard_acquire(&qword_10241D6E0);
    double v5 = v20;
    a2 = v23;
    a3 = v28;
    if (v13)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v5 = v20;
      a2 = v23;
      a3 = v28;
    }
  }
  double v35 = v5 * *(double *)&qword_10241D6D8;
  double v34 = 0.0;
  double v6 = a2[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v29 = a3;
    double v24 = v6;
    int v14 = __cxa_guard_acquire(&qword_10241D6E0);
    double v6 = v24;
    a3 = v29;
    if (v14)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v6 = v24;
      a3 = v29;
    }
  }
  double v34 = v6 * *(double *)&qword_10241D6D8;
  double v33 = 0.0;
  double v7 = *a3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v30 = a3;
    double v25 = v7;
    int v15 = __cxa_guard_acquire(&qword_10241D6E0);
    double v7 = v25;
    a3 = v30;
    if (v15)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v7 = v25;
      a3 = v30;
    }
  }
  double v33 = v7 * *(double *)&qword_10241D6D8;
  double v32 = 0.0;
  double v8 = a3[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D6E0, memory_order_acquire) & 1) == 0)
  {
    double v31 = v8;
    int v16 = __cxa_guard_acquire(&qword_10241D6E0);
    double v8 = v31;
    if (v16)
    {
      qword_10241D6D8 = 0x3F91DF46A2529D39;
      __cxa_guard_release(&qword_10241D6E0);
      double v8 = v31;
    }
  }
  double v32 = v8 * *(double *)&qword_10241D6D8;
  return sub_10075F2AC(&v37, &v36, &v35, &v34, &v33, &v32);
}

uint64_t sub_10075E0B0(double *a1, double *a2, double *a3, uint64_t a4, BOOL *a5, BOOL *a6, BOOL *a7)
{
  double v12 = *a1;
  double v11 = a1[1];
  double v14 = *a2;
  double v13 = a2[1];
  double v16 = *a3;
  double v15 = a3[1];
  double v17 = vabdd_f64(*a1, *a2);
  double v18 = 180.0;
  if (v17 == 180.0) {
    goto LABEL_2;
  }
  double v19 = v12 - v14;
  if (COERCE__INT64(fabs(v12 - v14)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v47 = fabs(v17 + -180.0);
    double v18 = 180.0;
    if (v17 < 180.0) {
      double v17 = 180.0;
    }
    double v48 = v17 >= 1.0 ? v17 * 2.22044605e-16 : 2.22044605e-16;
    if (v47 <= v48) {
      goto LABEL_2;
    }
  }
  double v18 = 180.0;
  if (v19 <= 180.0)
  {
    if (v19 >= -180.0) {
      goto LABEL_3;
    }
    double v18 = fmod(v19 + -180.0, 360.0) + 180.0;
LABEL_2:
    double v19 = v18;
    goto LABEL_3;
  }
  double v19 = fmod(v19 + 180.0, 360.0) + -180.0;
  if (v19 == -180.0) {
    goto LABEL_2;
  }
  BOOL v49 = ((*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v49 || *(void *)&v19 == 0)
  {
    double v18 = 180.0;
    double v51 = fabs(v19 + 180.0);
    double v52 = fabs(v19);
    if (v52 < 180.0) {
      double v52 = 180.0;
    }
    double v53 = v52 >= 1.0 ? v52 * 2.22044605e-16 : 2.22044605e-16;
    if (v51 <= v53) {
      goto LABEL_2;
    }
  }
LABEL_3:
  double v20 = fabs(v19);
  double v21 = 2.22044605e-16;
  if (v20 >= 1.0) {
    double v21 = v20 * 2.22044605e-16;
  }
  BOOL v22 = (*(void *)&v19 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v20 <= v21;
  int v23 = v19 == 0.0 || v22;
  double v24 = vabdd_f64(v12, v16);
  double v25 = 180.0;
  if (v24 == 180.0) {
    goto LABEL_12;
  }
  double v26 = v12 - v16;
  if (COERCE__INT64(fabs(v12 - v16)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v54 = fabs(v24 + -180.0);
    double v25 = 180.0;
    if (v24 < 180.0) {
      double v24 = 180.0;
    }
    double v55 = v24 >= 1.0 ? v24 * 2.22044605e-16 : 2.22044605e-16;
    if (v54 <= v55) {
      goto LABEL_12;
    }
  }
  double v25 = 180.0;
  if (v26 <= 180.0)
  {
    if (v26 >= -180.0) {
      goto LABEL_13;
    }
    double v25 = fmod(v26 + -180.0, 360.0) + 180.0;
LABEL_12:
    double v26 = v25;
    goto LABEL_13;
  }
  double v26 = fmod(v26 + 180.0, 360.0) + -180.0;
  if (v26 == -180.0) {
    goto LABEL_12;
  }
  BOOL v56 = ((*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v56 || *(void *)&v26 == 0)
  {
    double v25 = 180.0;
    double v58 = fabs(v26 + 180.0);
    double v59 = fabs(v26);
    if (v59 < 180.0) {
      double v59 = 180.0;
    }
    double v60 = v59 >= 1.0 ? v59 * 2.22044605e-16 : 2.22044605e-16;
    if (v58 <= v60) {
      goto LABEL_12;
    }
  }
LABEL_13:
  double v27 = fabs(v26);
  double v28 = 2.22044605e-16;
  if (v27 >= 1.0) {
    double v28 = v27 * 2.22044605e-16;
  }
  BOOL v29 = (*(void *)&v26 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v27 <= v28;
  int v30 = v26 == 0.0 || v29;
  double v31 = v12 + dbl_101D2CA30[v12 <= 0.0];
  if (v23) {
    goto LABEL_22;
  }
  double v33 = vabdd_f64(v31, v14);
  double v34 = 180.0;
  if (v33 == 180.0) {
    goto LABEL_24;
  }
  double v35 = v31 - v14;
  double v73 = fabs(v31 - v14);
  unint64_t v74 = (unint64_t)(*(void *)&v73 - 0x10000000000000) >> 53;
  unint64_t v75 = *(void *)&v73 - 1;
  BOOL v76 = v74 > 0x3FE && v75 > 0xFFFFFFFFFFFFELL;
  if (!v76 || COERCE__INT64(v31 - v14) == 0)
  {
    double v78 = fabs(v33 + -180.0);
    double v34 = 180.0;
    if (v33 < 180.0) {
      double v33 = 180.0;
    }
    double v79 = v33 >= 1.0 ? v33 * 2.22044605e-16 : 2.22044605e-16;
    if (v78 <= v79) {
      goto LABEL_24;
    }
  }
  double v34 = 180.0;
  if (v35 > 180.0)
  {
    double v35 = fmod(v35 + 180.0, 360.0) + -180.0;
    if (v35 != -180.0)
    {
      BOOL v80 = ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
         && (*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (v80 && *(void *)&v35 != 0) {
        goto LABEL_25;
      }
      double v34 = 180.0;
      double v82 = fabs(v35 + 180.0);
      double v83 = fabs(v35);
      if (v83 < 180.0) {
        double v83 = 180.0;
      }
      double v84 = v83 >= 1.0 ? v83 * 2.22044605e-16 : 2.22044605e-16;
      if (v82 > v84) {
        goto LABEL_25;
      }
    }
    goto LABEL_24;
  }
  if (v35 < -180.0)
  {
    double v34 = fmod(v35 + -180.0, 360.0) + 180.0;
LABEL_24:
    double v35 = v34;
  }
LABEL_25:
  if (v35 == 0.0) {
    goto LABEL_26;
  }
  if ((*(void *)&v35 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v85 = fabs(v35);
    double v86 = 2.22044605e-16;
    if (v85 >= 1.0) {
      double v86 = v85 * 2.22044605e-16;
    }
    if (v85 <= v86)
    {
LABEL_26:
      int v32 = 0;
      goto LABEL_27;
    }
  }
  double v87 = fabs(v13);
  if (v87 != 90.0)
  {
    if ((*(void *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      BOOL v36 = 0;
    }
    else
    {
      double v88 = fabs(v87 + -90.0);
      if (v87 < 90.0) {
        double v87 = 90.0;
      }
      if (v87 >= 1.0) {
        double v89 = v87 * 2.22044605e-16;
      }
      else {
        double v89 = 2.22044605e-16;
      }
      BOOL v36 = v88 <= v89;
    }
    int v32 = 1;
    goto LABEL_28;
  }
LABEL_22:
  int v32 = 1;
LABEL_27:
  BOOL v36 = 1;
LABEL_28:
  *a5 = v36;
  if (v30) {
    goto LABEL_29;
  }
  double v38 = vabdd_f64(v31, v16);
  double v39 = 180.0;
  if (v38 == 180.0) {
    goto LABEL_31;
  }
  double v40 = v31 - v16;
  double v90 = fabs(v31 - v16);
  unint64_t v91 = (unint64_t)(*(void *)&v90 - 0x10000000000000) >> 53;
  unint64_t v92 = *(void *)&v90 - 1;
  BOOL v93 = v91 > 0x3FE && v92 > 0xFFFFFFFFFFFFELL;
  if (!v93 || COERCE__INT64(v31 - v16) == 0)
  {
    double v95 = fabs(v38 + -180.0);
    double v39 = 180.0;
    if (v38 < 180.0) {
      double v38 = 180.0;
    }
    double v96 = v38 >= 1.0 ? v38 * 2.22044605e-16 : 2.22044605e-16;
    if (v95 <= v96) {
      goto LABEL_31;
    }
  }
  double v39 = 180.0;
  if (v40 <= 180.0)
  {
    if (v40 >= -180.0) {
      goto LABEL_32;
    }
    double v39 = fmod(v40 + -180.0, 360.0) + 180.0;
    goto LABEL_31;
  }
  double v40 = fmod(v40 + 180.0, 360.0) + -180.0;
  if (v40 == -180.0) {
    goto LABEL_31;
  }
  BOOL v97 = ((*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v97 || *(void *)&v40 == 0)
  {
    double v39 = 180.0;
    double v99 = fabs(v40 + 180.0);
    double v100 = fabs(v40);
    if (v100 < 180.0) {
      double v100 = 180.0;
    }
    double v101 = v100 >= 1.0 ? v100 * 2.22044605e-16 : 2.22044605e-16;
    if (v99 <= v101) {
LABEL_31:
    }
      double v40 = v39;
  }
LABEL_32:
  if (v40 == 0.0) {
    goto LABEL_33;
  }
  if ((*(void *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v102 = fabs(v40);
    double v103 = 2.22044605e-16;
    if (v102 >= 1.0) {
      double v103 = v102 * 2.22044605e-16;
    }
    if (v102 <= v103)
    {
LABEL_33:
      int v37 = 0;
      goto LABEL_34;
    }
  }
  double v104 = fabs(v15);
  if (v104 == 90.0)
  {
LABEL_29:
    int v37 = 1;
LABEL_34:
    BOOL v41 = 1;
    goto LABEL_35;
  }
  if ((*(void *)&v15 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    BOOL v41 = 0;
  }
  else
  {
    double v105 = fabs(v104 + -90.0);
    if (v104 < 90.0) {
      double v104 = 90.0;
    }
    if (v104 >= 1.0) {
      double v106 = v104 * 2.22044605e-16;
    }
    else {
      double v106 = 2.22044605e-16;
    }
    BOOL v41 = v105 <= v106;
  }
  int v37 = 1;
LABEL_35:
  *a6 = v41;
  double v42 = vabdd_f64(v16, v14);
  double v43 = 180.0;
  if (v42 == 180.0) {
    goto LABEL_36;
  }
  double v44 = v16 - v14;
  if (COERCE__INT64(fabs(v16 - v14)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v61 = fabs(v42 + -180.0);
    double v43 = 180.0;
    if (v42 < 180.0) {
      double v42 = 180.0;
    }
    double v62 = v42 >= 1.0 ? v42 * 2.22044605e-16 : 2.22044605e-16;
    if (v61 <= v62) {
      goto LABEL_36;
    }
  }
  double v43 = 180.0;
  if (v44 <= 180.0)
  {
    if (v44 >= -180.0) {
      goto LABEL_37;
    }
    double v43 = fmod(v44 + -180.0, 360.0) + 180.0;
LABEL_36:
    double v44 = v43;
    goto LABEL_37;
  }
  double v44 = fmod(v44 + 180.0, 360.0) + -180.0;
  if (v44 == -180.0) {
    goto LABEL_36;
  }
  BOOL v63 = ((*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
     && (*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
  if (!v63 || *(void *)&v44 == 0)
  {
    double v43 = 180.0;
    double v65 = fabs(v44 + 180.0);
    double v66 = fabs(v44);
    if (v66 < 180.0) {
      double v66 = 180.0;
    }
    double v67 = v66 >= 1.0 ? v66 * 2.22044605e-16 : 2.22044605e-16;
    if (v65 <= v67) {
      goto LABEL_36;
    }
  }
LABEL_37:
  if (v44 == 180.0)
  {
    *a7 = 1;
LABEL_39:
    BOOL v45 = *a5 || *a6;
    *a6 = v45;
    *a5 = v45;
    double v46 = fabs(v11);
    if (v46 == 90.0) {
      goto LABEL_40;
    }
    if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      double v71 = fabs(v46 + -90.0);
      if (v46 < 90.0) {
        double v46 = 90.0;
      }
      double v72 = v46 >= 1.0 ? v46 * 2.22044605e-16 : 2.22044605e-16;
      if (v71 <= v72)
      {
LABEL_40:
        *a6 = 1;
        *a5 = 1;
      }
    }
    goto LABEL_216;
  }
  if ((*(void *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    *a7 = 0;
    goto LABEL_216;
  }
  double v68 = fabs(v44 + -180.0);
  double v69 = fabs(v44);
  if (v69 < 180.0) {
    double v69 = 180.0;
  }
  if (v69 >= 1.0) {
    double v70 = v69 * 2.22044605e-16;
  }
  else {
    double v70 = 2.22044605e-16;
  }
  *a7 = v68 <= v70;
  if (v68 <= v70) {
    goto LABEL_39;
  }
LABEL_216:
  uint64_t result = 0;
  if (*a5 && *a6)
  {
    if (*a7)
    {
      if (180.0 - v13 - v15 <= 180.0)
      {
        if (v13 <= v11) {
          char v118 = v23;
        }
        else {
          char v118 = 0;
        }
        if ((v118 & 1) == 0)
        {
          char v119 = v15 <= v11 ? v30 : 0;
          if ((v119 & 1) == 0)
          {
            double v120 = 90.0;
            if (v11 != 90.0)
            {
              if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
                goto LABEL_294;
              }
              double v121 = fabs(v11 + -90.0);
              double v122 = fabs(v11);
              if (v122 < 90.0) {
                double v122 = 90.0;
              }
              double v123 = v122 >= 1.0 ? v122 * 2.22044605e-16 : 2.22044605e-16;
              if (v121 > v123)
              {
LABEL_294:
                if (((v23 | v30) & 1) == 0)
                {
                  if (v11 == -90.0) {
                    return 0;
                  }
                  if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                  {
                    double v124 = fabs(v11 + 90.0);
                    double v125 = fabs(v11);
                    if (v125 >= 90.0) {
                      double v120 = v125;
                    }
                    double v126 = v120 >= 1.0 ? v120 * 2.22044605e-16 : 2.22044605e-16;
                    if (v124 <= v126) {
                      return 0;
                    }
                  }
                }
                return 1;
              }
            }
          }
        }
      }
      else
      {
        if (v13 >= v11) {
          char v108 = v23;
        }
        else {
          char v108 = 0;
        }
        if ((v108 & 1) == 0)
        {
          char v109 = v15 >= v11 ? v30 : 0;
          if ((v109 & 1) == 0 && v11 != -90.0)
          {
            if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
              goto LABEL_244;
            }
            double v110 = 90.0;
            double v111 = fabs(v11 + 90.0);
            double v112 = fabs(v11);
            if (v112 >= 90.0) {
              double v110 = v112;
            }
            double v113 = v110 >= 1.0 ? v110 * 2.22044605e-16 : 2.22044605e-16;
            if (v111 > v113)
            {
LABEL_244:
              if (((v23 | v30) & 1) == 0)
              {
                double v114 = 90.0;
                if (v11 == 90.0) {
                  return 0;
                }
                if ((*(void *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
                {
                  double v115 = fabs(v11 + -90.0);
                  double v116 = fabs(v11);
                  if (v116 >= 90.0) {
                    double v114 = v116;
                  }
                  double v117 = v114 >= 1.0 ? v114 * 2.22044605e-16 : 2.22044605e-16;
                  if (v115 <= v117) {
                    return 0;
                  }
                }
              }
              return 1;
            }
          }
        }
      }
    }
    else if ((v13 > v11 || v15 < v11) && (v15 > v11 || v13 < v11) || ((v32 | v37) & 1) == 0)
    {
      return 1;
    }
    *(unsigned char *)(a4 + 16) = 1;
    return 1;
  }
  return result;
}

unint64_t sub_10075EC68(double *a1, double *a2, double *a3, int a4, int a5, int a6)
{
  double v9 = *a1;
  double v10 = *a2;
  double v11 = *a3;
  double v12 = vabdd_f64(*a1, *a2);
  double v13 = 180.0;
  if (v12 != 180.0)
  {
    double v14 = v9 - v10;
    if (COERCE__INT64(fabs(v9 - v10)) > 0x7FEFFFFFFFFFFFFFLL) {
      goto LABEL_51;
    }
    double v37 = fabs(v12 + -180.0);
    double v13 = 180.0;
    if (v12 < 180.0) {
      double v12 = 180.0;
    }
    double v38 = v12 >= 1.0 ? v12 * 2.22044605e-16 : 2.22044605e-16;
    if (v37 > v38)
    {
LABEL_51:
      double v13 = 180.0;
      if (v14 <= 180.0)
      {
        if (v14 >= -180.0) {
          goto LABEL_3;
        }
        double v13 = fmod(v14 + -180.0, 360.0) + 180.0;
      }
      else
      {
        double v39 = fmod(v14 + 180.0, 360.0);
        double v14 = v39 + -180.0;
        if (v39 + -180.0 != -180.0)
        {
          unint64_t v40 = COERCE__INT64(fabs(v39 + -180.0)) - 1;
          BOOL v41 = (unint64_t)(COERCE__INT64(fabs(v39 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
             && v40 > 0xFFFFFFFFFFFFELL;
          if (v41 && *(void *)&v14 != 0) {
            goto LABEL_3;
          }
          double v13 = 180.0;
          double v43 = fabs(v14 + 180.0);
          double v44 = fabs(v14);
          if (v44 < 180.0) {
            double v44 = 180.0;
          }
          double v45 = v44 >= 1.0 ? v44 * 2.22044605e-16 : 2.22044605e-16;
          if (v43 > v45) {
            goto LABEL_3;
          }
        }
      }
    }
  }
  double v14 = v13;
LABEL_3:
  if (a6)
  {
    unint64_t v15 = 0;
    BOOL v16 = v14 < 0.0;
    goto LABEL_5;
  }
  double v18 = vabdd_f64(v11, v10);
  double v19 = 180.0;
  if (v18 == 180.0) {
    goto LABEL_9;
  }
  double v20 = v11 - v10;
  if (COERCE__INT64(fabs(v11 - v10)) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v51 = fabs(v18 + -180.0);
    double v19 = 180.0;
    if (v18 < 180.0) {
      double v18 = 180.0;
    }
    double v52 = v18 >= 1.0 ? v18 * 2.22044605e-16 : 2.22044605e-16;
    if (v51 <= v52) {
      goto LABEL_9;
    }
  }
  double v19 = 180.0;
  if (v20 <= 180.0)
  {
    if (v20 >= -180.0) {
      goto LABEL_10;
    }
    double v19 = fmod(v20 + -180.0, 360.0) + 180.0;
    goto LABEL_9;
  }
  double v53 = fmod(v20 + 180.0, 360.0);
  double v20 = v53 + -180.0;
  if (v53 + -180.0 == -180.0) {
    goto LABEL_9;
  }
  unint64_t v54 = COERCE__INT64(fabs(v53 + -180.0)) - 1;
  BOOL v55 = (unint64_t)(COERCE__INT64(fabs(v53 + -180.0)) - 0x10000000000000) >> 53 > 0x3FE
     && v54 > 0xFFFFFFFFFFFFELL;
  if (!v55 || *(void *)&v20 == 0)
  {
    double v19 = 180.0;
    double v57 = fabs(v20 + 180.0);
    double v58 = fabs(v20);
    if (v58 < 180.0) {
      double v58 = 180.0;
    }
    double v59 = v58 >= 1.0 ? v58 * 2.22044605e-16 : 2.22044605e-16;
    if (v57 <= v59) {
LABEL_9:
    }
      double v20 = v19;
  }
LABEL_10:
  if ((a4 & 1) == 0 && !a5)
  {
    if (v14 >= 0.0) {
      int v21 = 0;
    }
    else {
      int v21 = -1;
    }
    if (v20 >= 0.0) {
      int v22 = 0;
    }
    else {
      int v22 = -1;
    }
    if (v20 > 0.0) {
      int v23 = 1;
    }
    else {
      int v23 = v22;
    }
    BOOL v24 = v23 == v21;
    if (v14 > 0.0) {
      BOOL v24 = v20 > 0.0;
    }
    double v25 = fabs(v14);
    double v26 = fabs(v20);
    if (v24 && v25 < v26)
    {
      unint64_t v15 = 0;
      BOOL v16 = v20 < 0.0;
LABEL_5:
      if (v16) {
        uint64_t v17 = 4294967294;
      }
      else {
        uint64_t v17 = 2;
      }
      return v15 | v17;
    }
    double v28 = 180.0;
    double v29 = vabdd_f64(v9 + 180.0, v10);
    if (v29 != 180.0)
    {
      double v30 = v9 + 180.0 - v10;
      unint64_t v69 = COERCE__INT64(fabs(v30)) - 1;
      BOOL v70 = (unint64_t)(COERCE__INT64(fabs(v30)) - 0x10000000000000) >> 53 > 0x3FE && v69 > 0xFFFFFFFFFFFFELL;
      if (v70 && *(void *)&v30 != 0) {
        goto LABEL_146;
      }
      double v72 = fabs(v29 + -180.0);
      double v28 = 180.0;
      if (v29 < 180.0) {
        double v29 = 180.0;
      }
      double v73 = v29 >= 1.0 ? v29 * 2.22044605e-16 : 2.22044605e-16;
      if (v72 > v73)
      {
LABEL_146:
        double v28 = 180.0;
        if (v30 <= 180.0)
        {
          if (v30 >= -180.0) {
            goto LABEL_29;
          }
          double v28 = fmod(v30 + -180.0, 360.0) + 180.0;
        }
        else
        {
          double v30 = fmod(v30 + 180.0, 360.0) + -180.0;
          if (v30 != -180.0)
          {
            BOOL v74 = ((*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
               && (*(void *)&v30 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
            if (v74 && *(void *)&v30 != 0) {
              goto LABEL_29;
            }
            double v28 = 180.0;
            double v76 = fabs(v30 + 180.0);
            double v77 = fabs(v30);
            if (v77 < 180.0) {
              double v77 = 180.0;
            }
            double v78 = v77 >= 1.0 ? v77 * 2.22044605e-16 : 2.22044605e-16;
            if (v76 > v78) {
              goto LABEL_29;
            }
          }
        }
      }
    }
    double v30 = v28;
LABEL_29:
    BOOL v31 = v20 > 0.0;
    if (v30 >= 0.0) {
      int v32 = 0;
    }
    else {
      int v32 = -1;
    }
    BOOL v33 = v23 == v32;
    if (v30 <= 0.0) {
      BOOL v31 = v33;
    }
    double v34 = fabs(v30);
    uint64_t v35 = 2;
    if (v20 < 0.0) {
      uint64_t v35 = 4294967294;
    }
    BOOL v36 = &_mh_execute_header;
    if (v34 >= v26)
    {
      uint64_t v35 = 0;
      BOOL v36 = 0;
    }
    if (v31) {
      uint64_t v17 = v35;
    }
    else {
      uint64_t v17 = 0;
    }
    if (v31) {
      unint64_t v15 = (unint64_t)v36;
    }
    else {
      unint64_t v15 = 0;
    }
    return v15 | v17;
  }
  if (v20 >= 0.0) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = 0xFFFFFFFFLL;
  }
  double v46 = 180.0;
  double v47 = v9 + 180.0;
  if (a4) {
    double v48 = v10;
  }
  else {
    double v48 = v11;
  }
  double v49 = vabdd_f64(v48, v47);
  if (v49 == 180.0) {
    goto LABEL_75;
  }
  double v50 = v48 - v47;
  if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    double v60 = fabs(v49 + -180.0);
    double v46 = 180.0;
    if (v49 < 180.0) {
      double v49 = 180.0;
    }
    double v61 = v49 >= 1.0 ? v49 * 2.22044605e-16 : 2.22044605e-16;
    if (v60 <= v61) {
      goto LABEL_75;
    }
  }
  double v46 = 180.0;
  if (v50 > 180.0)
  {
    double v50 = fmod(v50 + 180.0, 360.0) + -180.0;
    if (v50 != -180.0)
    {
      BOOL v62 = ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
         && (*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL;
      if (v62 && *(void *)&v50 != 0) {
        goto LABEL_76;
      }
      double v46 = 180.0;
      double v64 = fabs(v50 + 180.0);
      double v65 = fabs(v50);
      if (v65 < 180.0) {
        double v65 = 180.0;
      }
      double v66 = v65 >= 1.0 ? v65 * 2.22044605e-16 : 2.22044605e-16;
      if (v64 > v66) {
        goto LABEL_76;
      }
    }
    goto LABEL_75;
  }
  if (v50 < -180.0)
  {
    double v46 = fmod(v50 + -180.0, 360.0) + 180.0;
LABEL_75:
    double v50 = v46;
  }
LABEL_76:
  if (v50 == 0.0)
  {
    unint64_t v15 = (unint64_t)&_mh_execute_header;
  }
  else if ((*(void *)&v50 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    unint64_t v15 = 0;
  }
  else
  {
    double v67 = fabs(v50);
    double v68 = 2.22044605e-16;
    if (v67 >= 1.0) {
      double v68 = v67 * 2.22044605e-16;
    }
    unint64_t v15 = (unint64_t)(v67 <= v68) << 32;
  }
  return v15 | v17;
}

uint64_t sub_10075F2AC(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  __double2 v11 = __sincos_stret(*a2);
  __double2 v12 = __sincos_stret(*a1);
  __double2 v13 = __sincos_stret(*a4);
  __double2 v14 = __sincos_stret(*a3);
  __double2 v15 = __sincos_stret(*a6);
  __double2 v16 = __sincos_stret(*a5);
  double v17 = v16.__sinval
      * (v15.__cosval
       * (v11.__sinval * (v13.__cosval * v14.__cosval) - v11.__cosval * v12.__cosval * v13.__sinval))
      + v15.__cosval
      * (v11.__cosval * v12.__sinval * v13.__sinval - v11.__sinval * (v13.__cosval * v14.__sinval))
      * v16.__cosval
      + (v11.__cosval * v12.__cosval * (v13.__cosval * v14.__sinval)
       - v11.__cosval * v12.__sinval * (v13.__cosval * v14.__cosval))
      * v15.__sinval;
  if (v17 == 0.0) {
    return 0;
  }
  if (COERCE_UNSIGNED_INT64(fabs(v16.__sinval* (v15.__cosval* (v11.__sinval * (v13.__cosval * v14.__cosval) - v11.__cosval * v12.__cosval * v13.__sinval))+ v15.__cosval* (v11.__cosval * v12.__sinval * v13.__sinval - v11.__sinval * (v13.__cosval * v14.__sinval))* v16.__cosval+ (v11.__cosval * v12.__cosval * (v13.__cosval * v14.__sinval)- v11.__cosval * v12.__sinval * (v13.__cosval * v14.__cosval))* v15.__sinval)) >= 0x7FF0000000000000)
  {
    if (v17 > 0.0) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    double v19 = fabs(v17);
    double v20 = 2.22044605e-16;
    if (v19 >= 1.0) {
      double v20 = v19 * 2.22044605e-16;
    }
    if (v17 > 0.0) {
      uint64_t result = 1;
    }
    else {
      uint64_t result = 0xFFFFFFFFLL;
    }
    if (v19 <= v20) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10075F404(uint64_t a1)
{
  double v4 = (void **)(a1 + 72);
  sub_10075F460(&v4);
  double v4 = (void **)(a1 + 48);
  sub_10075F460(&v4);
  double v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10075F460(void ***a1)
{
  uint64_t v1 = *a1;
  double v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    double v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_10075F4F8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10075F4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void **)(a2 + 64);
  sub_1001DCABC(&v4);
  double v3 = *(void **)(a2 + 40);
  if (v3)
  {
    *(void *)(a2 + 48) = v3;
    operator delete(v3);
  }
  if (*(char *)(a2 + 39) < 0) {
    operator delete(*(void **)(a2 + 16));
  }
}

unsigned char *sub_10075F550(unsigned char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  sub_10075F5CC(__dst + 24, a3);
  return __dst;
}

void sub_10075F5B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10075F5CC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  uint64_t v5 = 0;
  uint64_t v6 = (uint64_t)a2 + 56;
  do
  {
    double v7 = &__dst[v5];
    long long v8 = *(_OWORD *)(v6 + v5 - 32);
    char v9 = *(unsigned char *)(v6 + v5 - 16);
    *(void *)&__dst[v5 + 48] = 0;
    double v10 = &__dst[v5 + 48];
    *(v10 - 8) = v9;
    *(_OWORD *)(v10 - 24) = v8;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 2) = 0;
    sub_10010F834(v10, *(const void **)(v6 + v5 - 8), *(void *)(v6 + v5), (uint64_t)(*(void *)(v6 + v5) - *(void *)(v6 + v5 - 8)) >> 2);
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 10) = 0;
    __double2 v11 = &__dst[v5 + 72];
    *((void *)v11 + 2) = 0;
    sub_10075F784(v11, *(uint64_t **)(v6 + v5 + 16), *(uint64_t **)(v6 + v5 + 24), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v6 + v5 + 24) - *(void *)(v6 + v5 + 16)) >> 3));
    __double2 v12 = &__dst[v5];
    *((void *)v12 + 12) = 0;
    *((void *)v12 + 13) = 0;
    __double2 v13 = &__dst[v5 + 96];
    *((void *)v13 + 2) = 0;
    sub_10075F784(v13, *(uint64_t **)(v6 + v5 + 40), *(uint64_t **)(v6 + v5 + 48), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v6 + v5 + 48) - *(void *)(v6 + v5 + 40)) >> 3));
    v5 += 96;
  }
  while (v5 != 384);
  long long v14 = *(long long *)((char *)a2 + 408);
  long long v15 = *(long long *)((char *)a2 + 440);
  *(_OWORD *)(__dst + 424) = *(long long *)((char *)a2 + 424);
  *(_OWORD *)(__dst + 440) = v15;
  *(_OWORD *)(__dst + 408) = v14;
  long long v16 = *(long long *)((char *)a2 + 456);
  long long v17 = *(long long *)((char *)a2 + 472);
  long long v18 = *(long long *)((char *)a2 + 504);
  *(_OWORD *)(__dst + 488) = *(long long *)((char *)a2 + 488);
  *(_OWORD *)(__dst + 504) = v18;
  *(_OWORD *)(__dst + 456) = v16;
  *(_OWORD *)(__dst + 472) = v17;
  long long v19 = *(long long *)((char *)a2 + 520);
  long long v20 = *(long long *)((char *)a2 + 536);
  long long v21 = *(long long *)((char *)a2 + 552);
  *((_DWORD *)__dst + 142) = *((_DWORD *)a2 + 142);
  *(_OWORD *)(__dst + 536) = v20;
  *(_OWORD *)(__dst + 552) = v21;
  *(_OWORD *)(__dst + 520) = v19;
  return __dst;
}

void sub_10075F71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v11 + 72);
  sub_10075F460(&a10);
  long long v14 = *(void **)(v10 + v12 + 48);
  if (v14)
  {
    *(void *)(v10 + v12 + 56) = v14;
    operator delete(v14);
  }
  for (; v12; v12 -= 96)
    sub_10075F404(v10 - 72 + v12);
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(a1);
}

void *sub_10075F784(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1000DA770(result, a4);
    uint64_t result = (void *)sub_10075F80C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10075F7EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10075F460(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10075F80C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_10075F8B8(a1, v4, v6);
      v6 += 11;
      uint64_t v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_10075FB14((uint64_t)v9);
  return v4;
}

void sub_10075F8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10075F8B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *(unsigned char *)(a2 + 8) = *((unsigned char *)a3 + 8);
  *(void *)a2 = v5;
  uint64_t v6 = (unsigned char *)(a2 + 16);
  if (*((char *)a3 + 39) < 0)
  {
    sub_1000DC48C(v6, (void *)a3[2], a3[3]);
  }
  else
  {
    long long v7 = *((_OWORD *)a3 + 1);
    *(void *)(a2 + 32) = a3[4];
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  sub_10017C680((void *)(a2 + 40), (const void *)a3[5], a3[6], (a3[6] - a3[5]) >> 4);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  return sub_10075F9A0((void *)(a2 + 64), a3[8], a3[9], 0xAAAAAAAAAAAAAAABLL * ((a3[9] - a3[8]) >> 3));
}

void sub_10075F96C(_Unwind_Exception *exception_object)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10075F9A0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1000DA584(result, a4);
    uint64_t result = sub_10075FA28((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10075FA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1001DCABC(&a9);
  _Unwind_Resume(a1);
}

void *sub_10075FA28(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_10017C680(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_10075FADC((uint64_t)v8);
  return v4;
}

void sub_10075FAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10075FADC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1001DCE1C(a1);
  }
  return a1;
}

uint64_t sub_10075FB14(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10075FB4C((uint64_t *)a1);
  }
  return a1;
}

void sub_10075FB4C(uint64_t *a1)
{
  double v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 88;
      sub_10075F4F8(v5, v3);
    }
    while (v3 != v4);
  }
}

void sub_10075FBA0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10075FBA0(a1, *a2);
    sub_10075FBA0(a1, a2[1]);
    sub_10075FBFC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10075FBFC(uint64_t a1)
{
  for (uint64_t i = 0; i != -384; i -= 96)
  {
    uint64_t v4 = (void **)(a1 + i + 408);
    sub_10075F460(&v4);
    uint64_t v4 = (void **)(a1 + i + 384);
    sub_10075F460(&v4);
    uint64_t v3 = *(void **)(a1 + i + 360);
    if (v3)
    {
      *(void *)(a1 + i + 368) = v3;
      operator delete(v3);
    }
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_10075FC90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_1001D7FD4();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v6 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v6 = v4;
  }
  long long v14 = a1 + 2;
  if (v6) {
    long long v7 = (char *)sub_1000DA8B4((uint64_t)(a1 + 2), v6);
  }
  else {
    long long v7 = 0;
  }
  uint64_t v10 = v7;
  uint64_t v11 = &v7[88 * v3];
  __double2 v13 = &v7[88 * v6];
  sub_10075F8B8((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 88;
  sub_10075FDB8(a1, &v10);
  uint64_t v8 = a1[1];
  sub_10075FFA8(&v10);
  return v8;
}

void sub_10075FDA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10075FFA8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10075FDB8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10075FE30((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10075FE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 88);
      a3 -= 88;
      *(unsigned char *)(v7 - 80) = *(unsigned char *)(a3 + 8);
      *(void *)(v7 - 88) = v8;
      long long v9 = *(_OWORD *)(a3 + 16);
      *(void *)(v7 - 56) = *(void *)(a3 + 32);
      *(_OWORD *)(v7 - 72) = v9;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 32) = *(void *)(a3 + 56);
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 64);
      *(void *)(v7 - 8) = *(void *)(a3 + 80);
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 88;
      *((void *)&v15 + 1) -= 88;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_10075FF1C((uint64_t)v12);
  return v10;
}

uint64_t sub_10075FF1C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10075FF54((uint64_t *)a1);
  }
  return a1;
}

void sub_10075FF54(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_10075F4F8(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **sub_10075FFA8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10075FFDC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    sub_10075F4F8(v4, i - 88);
  }
}

char *sub_100760024@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x278uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v8 = *a2;
  uint64_t result = sub_1007600A4(v6 + 32, &v8);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10076008C(_Unwind_Exception *a1)
{
  sub_1007601D8(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1007600A4(char *__dst, long long **a2)
{
  uint64_t v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)v3, *((void *)v3 + 1));
  }
  else
  {
    long long v4 = *v3;
    *((void *)__dst + 2) = *((void *)v3 + 2);
    *(_OWORD *)__dst = v4;
  }
  bzero(__dst + 24, 0x240uLL);
  uint64_t v5 = 48;
  do
  {
    uint64_t v6 = &__dst[v5];
    *uint64_t v6 = 0;
    *((void *)v6 + 1) = 0xBFF0000000000000;
    v6[16] = 0;
    *(_OWORD *)(v6 + 24) = 0uLL;
    *(_OWORD *)(v6 + 40) = 0uLL;
    *(_OWORD *)(v6 + 56) = 0uLL;
    *(_OWORD *)(v6 + 72) = 0uLL;
    v5 += 96;
    *((void *)v6 + 11) = 0;
  }
  while (v6 + 96 != __dst + 432);
  sub_100197E58((uint64_t)(__dst + 432));
  return __dst;
}

void sub_100760168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = 0;
  while (1)
  {
    a10 = (void **)(v10 + v13 + 408);
    sub_10075F460(&a10);
    a10 = (void **)(v10 + v13 + 384);
    sub_10075F460(&a10);
    long long v14 = *(void **)(v10 + v13 + 360);
    if (v14)
    {
      *(void *)(v10 + v13 + 368) = v14;
      operator delete(v14);
    }
    v13 -= 96;
    if (v13 == -384)
    {
      if (*(char *)(v10 + 47) < 0) {
        operator delete(*v11);
      }
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_1007601D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10075FBFC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_100760230(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v11, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x278uLL);
    v9[1] = a1 + 1;
    sub_1007602E0((uint64_t)(v6 + 4), a3);
    char v10 = 1;
    sub_1000EDF90(a1, v11, v7, v6);
    v9[0] = 0;
    sub_1007601D8((uint64_t)v9, 0);
  }
  return v6;
}

__n128 sub_1007602E0(uint64_t a1, long long *a2)
{
  uint64_t v2 = 0;
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v4 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v4;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  do
  {
    uint64_t v5 = &a2[v2];
    uint64_t v6 = a1 + v2 * 16;
    long long v7 = a2[v2 + 3];
    *(unsigned char *)(v6 + 64) = a2[v2 + 4];
    *(void *)(v6 + 80) = 0;
    *(void *)(v6 + 88) = 0;
    *(void *)(v6 + 72) = 0;
    *(_OWORD *)(v6 + 48) = v7;
    *(_OWORD *)(v6 + 72) = *(long long *)((char *)&a2[v2 + 4] + 8);
    *(void *)(v6 + 88) = *((void *)&a2[v2 + 5] + 1);
    *((void *)v5 + 9) = 0;
    *((void *)v5 + 10) = 0;
    *((void *)v5 + 11) = 0;
    *(void *)(v6 + 96) = 0;
    *(void *)(v6 + 104) = 0;
    *(void *)(v6 + 112) = 0;
    *(_OWORD *)(v6 + 96) = a2[v2 + 6];
    *(void *)(v6 + 112) = *(void *)&a2[v2 + 7];
    *((void *)v5 + 12) = 0;
    *((void *)v5 + 13) = 0;
    *((void *)v5 + 14) = 0;
    *(void *)(v6 + 120) = 0;
    *(void *)(v6 + 128) = 0;
    *(void *)(v6 + 136) = 0;
    *(_OWORD *)(v6 + 120) = *(long long *)((char *)&a2[v2 + 7] + 8);
    *(void *)(v6 + 136) = *((void *)&a2[v2 + 8] + 1);
    *((void *)v5 + 15) = 0;
    *((void *)v5 + 16) = 0;
    *((void *)v5 + 17) = 0;
    v2 += 6;
  }
  while (v2 != 24);
  long long v8 = a2[27];
  long long v9 = a2[29];
  *(_OWORD *)(a1 + 448) = a2[28];
  *(_OWORD *)(a1 + 464) = v9;
  *(_OWORD *)(a1 + 432) = v8;
  long long v10 = a2[30];
  long long v11 = a2[31];
  long long v12 = a2[33];
  *(_OWORD *)(a1 + 512) = a2[32];
  *(_OWORD *)(a1 + 528) = v12;
  *(_OWORD *)(a1 + 480) = v10;
  *(_OWORD *)(a1 + 496) = v11;
  __n128 result = (__n128)a2[34];
  long long v14 = a2[35];
  long long v15 = a2[36];
  *(_DWORD *)(a1 + 592) = *((_DWORD *)a2 + 148);
  *(_OWORD *)(a1 + 560) = v14;
  *(_OWORD *)(a1 + 576) = v15;
  *(__n128 *)(a1 + 544) = result;
  return result;
}

void sub_1007603D4(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_100760578((void **)a1);
    if (a4 > 0x2E8BA2E8BA2E8BALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x5D1745D1745D1746 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x1745D1745D1745DLL) {
      unint64_t v11 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000DA770((void *)a1, v11);
    uint64_t v12 = sub_10075F80C(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    sub_1007605E8((uint64_t)&v17, a2, v13, (uint64_t)v9);
    uint64_t v12 = sub_10075F80C(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_1007605E8((uint64_t)&v18, a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 88;
      sub_10075F4F8(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_100760568(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100760570(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100760578(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_10075F4F8((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_1007605E8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  uint64_t v6 = a2 + 9;
  do
  {
    uint64_t v8 = v6 - 9;
    uint64_t v7 = *(v6 - 9);
    *(unsigned char *)(a4 + 8) = *((unsigned char *)v6 - 64);
    *(void *)a4 = v7;
    std::string::operator=((std::string *)(a4 + 16), (const std::string *)(v6 - 7));
    if ((uint64_t *)a4 != v6 - 9)
    {
      sub_10027C3B4((char *)(a4 + 40), (char *)*(v6 - 4), *(v6 - 3), (*(v6 - 3) - *(v6 - 4)) >> 4);
      sub_1007606A8(a4 + 64, *(v6 - 1), *v6, 0xAAAAAAAAAAAAAAABLL * ((*v6 - *(v6 - 1)) >> 3));
    }
    a4 += 88;
    v6 += 11;
  }
  while (v8 + 11 != v5);
  return v5;
}

void sub_1007606A8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_1001DCCF4((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1001D7FD4();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000DA584((void *)a1, v11);
    uint64_t v12 = sub_10075FA28(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    sub_100760834((int)&v20, a2, v13, v9);
    uint64_t v12 = sub_10075FA28(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_100760834((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      long long v19 = *(void **)(v17 - 24);
      v17 -= 24;
      char v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_100760824(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10076082C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100760834(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        sub_10027C3B4(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 4);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t sub_1007608A4()
{
  sub_100134750(&xmmword_10247D628, "RoadAndBuildingPrecachingEnabled");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D628, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D640, "RoadTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D640, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D658, "BuildingTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D658, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D670, "RunningTrackTilesRadiusInMetersHome");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D670, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D688, "RoadTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D688, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D6A0, "BuildingTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D6A0, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D6B8, "RunningTrackTilesRadiusInMetersWork");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D6B8, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D6D0, "RoadTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D6D0, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D6E8, "BuildingTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D6E8, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D700, "RunningTrackTilesRadiusInMetersSchool");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D700, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D718, "PrecachingTileRefreshPeriodV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D718, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D730, "PrecachingTileRefreshPeriodNPLOIAndTouristV2");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D730, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D748, "PrecachingMinimumBatteryLevel");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D748, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D760, "PrecachingMinimumBatteryLevelAggressiveMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D760, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D778, "PrecachingXPCDownloadInterval");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D778, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D790, "PrecachingDownloadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D790, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D7A8, "PrecachingUploadSizePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D7A8, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D7C0, "PrecachingDownloadTimePerSection");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D7C0, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D7D8, "UseInsideOutTileDownload");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D7D8, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D7F0, "IsDiskIntensiveActivity");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D7F0, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247D808, "PrecachingAllowSignalEnvironmentMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247D808, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D820, "RoadTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D820, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D838, "BuildingTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D838, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D850, "RunningTrackTileDownloadRadiusSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D850, (void *)&_mh_execute_header);
  sub_100134750(&qword_10247D868, "PrecachingAllowAggressiveSettingInTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247D868, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D880, "RoadTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D880, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D898, "BuildingTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D898, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D8B0, "RunningTrackTileDownloadRadiusTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D8B0, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D8C8, "MaxSectionDownloadAllowedForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D8C8, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D8E0, "TimeWindowToCheckForMaxSectionDownloadForTouristSE");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D8E0, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D8F8, "PrecachingAllowTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D8F8, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D910, "RoadTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D910, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D928, "BuildingTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D928, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D940, "RunningTrackTilesRadiusInMetersTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D940, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D958, "MaxLocationAgeForTouristMode");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D958, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D970, "SectionsToDownloadPerXPCCall");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D970, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D988, "SectionsToDownloadPerXPCCallForTourist");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D988, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D9A0, "SectionsToDownloadPerXPCCallForNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D9A0, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D9B8, "SectionsToDownloadPerXPCCallForSignalEnvironment");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D9B8, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247D9D0, "PrecachngAllowNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247D9D0, (void *)&_mh_execute_header);
  sub_100134750(qword_10247D9E8, "RoadTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247D9E8, (void *)&_mh_execute_header);
  sub_100134750(qword_10247DA00, "BuildingTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247DA00, (void *)&_mh_execute_header);
  sub_100134750(qword_10247DA18, "RunningTrackTileDownloadRadiusNPLOI");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247DA18, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247DA30, "DistanceFromHomeForTouristModeMeters");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247DA30, (void *)&_mh_execute_header);
  sub_100134750(&xmmword_10247DA48, "NumDaysLookbackForWorkouts");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_10247DA48, (void *)&_mh_execute_header);
  sub_100134750(qword_10247DA60, "ROW");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247DA60, (void *)&_mh_execute_header);
}

uint64_t sub_10076101C(uint64_t a1)
{
  *(void *)a1 = 0;
  uint64_t v2 = a1 + 32;
  sub_100134750((void *)(a1 + 8), "CLTrackRunGeoMapRunningTrackDataManager");
  sub_101171D90(v2);
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_101D2CA40;
  *(void *)(a1 + 136) = 0x40A3880000000000;
  *(_WORD *)(a1 + 144) = 0;
  id v3 = objc_alloc_init((Class)GEOMapFeatureAccess);
  *(void *)(a1 + 88) = v3;
  if (v3)
  {
    [v3 setAllowNetworkTileLoad:0];
    [*(id *)(a1 + 88) setAllowStaleData:1];
    [*(id *)(a1 + 88) setAllowOfflineData:1];
  }
  sub_1000C7F88(&v11);
  double v4 = *(double *)(a1 + 136);
  double v13 = 0.0;
  int v5 = sub_1000A699C(v11, "MinimumDistanceForNewRunningTrackQueryInTrackRun", &v13);
  double v6 = v13;
  if (!v5) {
    double v6 = v4;
  }
  *(double *)(a1 + 136) = v6;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  sub_1000C7F88(&v11);
  double v7 = *(double *)(a1 + 120);
  double v13 = 0.0;
  int v8 = sub_1000A699C(v11, "RunningTrackQueryRadiusInTrackRun", &v13);
  double v9 = v13;
  if (!v8) {
    double v9 = v7;
  }
  *(double *)(a1 + 120) = v9;
  if (v12) {
    sub_1000DB0A0(v12);
  }
  return a1;
}

void sub_10076115C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  sub_1007632B8(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100761194(uint64_t a1)
{
  sub_10076135C(a1);
  if (*(void *)(a1 + 88))
  {
    if (qword_102419430 != -1) {
      dispatch_once(&qword_102419430, &stru_1022C7598);
    }
    uint64_t v2 = qword_102419438;
    if (os_log_type_enabled((os_log_t)qword_102419438, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGCZ,destroy geocodec malloc zone,CLTrackRunGeoMapRunningTrackDataManager::~CLTrackRunGeoMapRunningTrackDataManager()", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419430 != -1) {
        dispatch_once(&qword_102419430, &stru_1022C7598);
      }
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLTrackRunGeoMapRunningTrackDataManager::~CLTrackRunGeoMapRunningTrackDataManager()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    GEOResetGeoCodecsAllocator();

    *(void *)(a1 + 88) = 0;
  }
  sub_1007632B8(a1);
  return a1;
}

void sub_100761350(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1001C7F8C(a1);
}

void sub_10076135C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80)) {
    *(unsigned char *)(a1 + 80) = 0;
  }
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    sub_100762CEC(v2);
    [*(id *)(a1 + 88) setAllowNetworkTileLoad:0];
    [*(id *)(a1 + 88) setAllowStaleData:1];
    [*(id *)(a1 + 88) setAllowOfflineData:1];
  }
  if (*(unsigned char *)(a1 + 112)) {
    *(unsigned char *)(a1 + 112) = 0;
  }
  *(_WORD *)(a1 + 144) = 0;
  if (*(void *)a1)
  {

    *(void *)a1 = 0;
  }
}

uint64_t sub_1007613DC(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t sub_1007613E8(uint64_t a1, double *a2)
{
  if (*(unsigned char *)(a1 + 112))
  {
    double v3 = sub_1000F1648((double *)(a1 + 32), *a2, a2[1], *(double *)(a1 + 96), *(double *)(a1 + 104), 0.0);
    *(double *)(a1 + 72) = v3;
    *(unsigned char *)(a1 + 80) = 1;
    double v4 = *(double *)(a1 + 136);
    BOOL v5 = v3 >= v4;
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    double v6 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      if (!*(unsigned char *)(a1 + 80)) {
        goto LABEL_24;
      }
      uint64_t v7 = *(void *)(a1 + 72);
      uint64_t v8 = *(void *)(a1 + 136);
      *(_DWORD *)buf = 134349568;
      uint64_t v14 = v7;
      __int16 v15 = 2050;
      uint64_t v16 = v8;
      __int16 v17 = 1026;
      BOOL v18 = v3 >= v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#cltm,fDistanceFromLastQueryLocation_m,%{public}.1f,fMinimumDistanceForNewQuery_m,%{public}.1f,isQueryNeeded,%{public}d", buf, 0x1Cu);
    }
    if (!sub_10013D1A0(115, 2)) {
      return v5;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    if (*(unsigned char *)(a1 + 80))
    {
      double v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTrackRunGeoMapRunningTrackDataManager::IsQueryNeeded(const CLClientLocationCoordinate &) const", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
      return v5;
    }
LABEL_24:
    sub_10020D700();
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022C75B8);
  }
  unint64_t v10 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#cltm,Will query,last query location has no value", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    uint64_t v12 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLTrackRunGeoMapRunningTrackDataManager::IsQueryNeeded(const CLClientLocationCoordinate &) const", "%s\n", v12);
    if (v12 != (char *)buf) {
      free(v12);
    }
  }
  return 1;
}

void sub_100761770(uint64_t a1, double *a2, uint64_t a3, int a4)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022C75B8);
  }
  uint64_t v8 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240192;
    LODWORD(v47) = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#cltm,Setting up RunningTrack data query,forceFullDataQuery,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    int v36 = 67240192;
    LODWORD(v37) = a4;
    BOOL v24 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v24);
    if (v24 != (char *)buf) {
      free(v24);
    }
  }
  uint64_t v9 = 144;
  if (!a4) {
    uint64_t v9 = 145;
  }
  if (*(unsigned char *)(a1 + v9))
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    unint64_t v10 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v47) = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#cltm,Warning,Not querying,query already in progress,forceFullDataQuery,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      }
      int v36 = 67240192;
      LODWORD(v37) = a4;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  else if ((sub_1007613E8(a1, a2) & 1) != 0 || a4)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    uint64_t v12 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v47) = a4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#cltm,Query is needed and will occur,forceFullDataQuery,%{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      }
      int v36 = 67240192;
      LODWORD(v37) = a4;
      double v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    double v14 = *a2;
    double v15 = a2[1];
    long long v35 = *(_OWORD *)a2;
    id v16 = +[NSMutableArray array];
    double v17 = sub_10016C458();
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    BOOL v18 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#cltm,Setting up trackHandler data query", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      }
      LOWORD(v36) = 0;
      double v26 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v26);
      if (v26 != (char *)buf) {
        free(v26);
      }
    }
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472;
    v34[2] = sub_100762060;
    v34[3] = &unk_1022C7528;
    void v34[4] = v16;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_100762320;
    v31[3] = &unk_1022C7550;
    v31[4] = v16;
    v31[5] = a1;
    v31[6] = a3;
    long long v32 = v35;
    double v33 = v17;
    v29[4] = v31;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    unsigned int v30[2] = sub_100762E90;
    v30[3] = &unk_1022C7578;
    v30[4] = v31;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_100762EA4;
    v29[3] = &unk_1022C7578;
    if (*(void *)(a1 + 88))
    {
      sub_100762EB8(a1);
      uint64_t v19 = 120;
      if (a4) {
        uint64_t v19 = 128;
      }
      double v20 = *(double *)(a1 + v19);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      }
      char v21 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v22 = [*(id *)(a1 + 88) allowNetworkTileLoad];
        *(_DWORD *)buf = 134284545;
        double v47 = v14;
        __int16 v48 = 2049;
        double v49 = v15;
        __int16 v50 = 2050;
        double v51 = v20;
        __int16 v52 = 1026;
        int v53 = a4;
        __int16 v54 = 1026;
        unsigned int v55 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#cltm,Querying for tracks,centerCoordinate,%{private}.7lf,%{private}.7lf,radius_m,%{public}.0lf,forceFullDataQuery,%{public}d,allowNetworkTileLoad,%{public}d", buf, 0x2Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 != -1) {
          dispatch_once(&qword_102418FB0, &stru_1022C75B8);
        }
        unsigned int v27 = [*(id *)(a1 + 88) allowNetworkTileLoad];
        int v36 = 134284545;
        double v37 = v14;
        __int16 v38 = 2049;
        double v39 = v15;
        __int16 v40 = 2050;
        double v41 = v20;
        __int16 v42 = 1026;
        int v43 = a4;
        __int16 v44 = 1026;
        unsigned int v45 = v27;
        double v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      if (a4)
      {
        *(unsigned char *)(a1 + 144) = 1;
        int v23 = v30;
      }
      else
      {
        *(unsigned char *)(a1 + 145) = 1;
        int v23 = v29;
      }
      [*(id *)(a1 + 88) findRunningTracksNear:v34 radius:v23 handler:v14 completionHandler:v15];
    }
  }
}

void sub_100762060(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    double v6 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#cltm,RunningTrack data query was unsuccessful", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 == -1)
    {
LABEL_20:
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
      return;
    }
LABEL_22:
    dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    goto LABEL_20;
  }
  id v4 = v3;
  if (objc_msgSend(objc_msgSend(v3, "lanes"), "count"))
  {
    BOOL v5 = *(void **)(a1 + 32);
    [v5 addObject:v4];
    return;
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022C75B8);
  }
  uint64_t v7 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#cltm,Returned track has zero lanes", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 == -1) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
}

void sub_100762320(uint64_t a1, void *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022C75B8);
  }
  uint64_t v7 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 32) count];
    *(_DWORD *)buf = 134349312;
    *(void *)double v29 = v8;
    *(_WORD *)&v29[8] = 1026;
    LODWORD(v30) = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#cltm,Entered completionHandler,tracksFound,%{public}lu,wasFullDataQuery,%{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    [*(id *)(a1 + 32) count];
    int v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  if (a3)
  {
    if (*(unsigned char *)(v6 + 144))
    {
      *(unsigned char *)(v6 + 144) = 0;
      goto LABEL_23;
    }
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    uint64_t v9 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "#cltm,fFullDataQueryInProgress flag already false, not expected.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 == -1)
      {
LABEL_71:
        unsigned int v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
        goto LABEL_23;
      }
LABEL_74:
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      goto LABEL_71;
    }
  }
  else
  {
    if (*(unsigned char *)(v6 + 145))
    {
      *(unsigned char *)(v6 + 145) = 0;
      goto LABEL_23;
    }
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    unint64_t v10 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#cltm,fSparseDataQueryInProgress flag already false, not expected.", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 == -1) {
        goto LABEL_71;
      }
      goto LABEL_74;
    }
  }
LABEL_23:
  if (a2)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    uint64_t v11 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_ERROR))
    {
      id v12 = [a2 code];
      id v13 = [a2 domain];
      id v14 = [a2 localizedDescription];
      *(_DWORD *)buf = 134349571;
      *(void *)double v29 = v12;
      *(_WORD *)&v29[8] = 2114;
      id v30 = v13;
      __int16 v31 = 2113;
      id v32 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#cltm,RunningTrack data query, error:%{public}lld (%{public}@) \"%{private}@\"", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      }
      [a2 code];
      [a2 domain];
      [a2 localizedDescription];
      BOOL v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
  }
  id v15 = [*(id *)(a1 + 32) count];
  if (a2 && !v15)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    id v16 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#cltm,No track data obtained from the query", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      }
      double v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    if (*(unsigned char *)(v6 + 144) || *(unsigned char *)(v6 + 145))
    {
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      }
      double v17 = qword_102418FB8;
      if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = *(unsigned __int8 *)(v6 + 144);
        int v19 = *(unsigned __int8 *)(v6 + 145);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)double v29 = v18;
        *(_WORD *)&v29[4] = 1026;
        *(_DWORD *)&v29[6] = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#cltm,Cannot release CLTrackRunGeoMapRunningTrackDataManager os_transaction nor clear tiles from memory due to another ongoing query,fFullDataQueryInProgress,%{public}d,fSparseDataQueryInProgress,%{public}d", buf, 0xEu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102418FB0 == -1)
        {
LABEL_68:
          double v26 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::QueryAndSerializeRunningTrackData(const CLClientLocationCoordinate &, CLTrackRunController *, const BOOL)_block_invoke", "%s\n", v26);
          if (v26 != (char *)buf) {
            free(v26);
          }
          return;
        }
LABEL_73:
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
        goto LABEL_68;
      }
      return;
    }
LABEL_53:
    sub_100762CEC(*(void **)(v6 + 88));
    if (*(void *)v6)
    {

      *(void *)uint64_t v6 = 0;
    }
    return;
  }
  sub_101491FC8(*(void *)(a1 + 48), *(void **)(a1 + 32), (_OWORD *)(a1 + 56), (double *)(a1 + 72), a3 ^ 1, a2 == 0);
  if (!*(unsigned char *)(v6 + 144) && !*(unsigned char *)(v6 + 145)) {
    goto LABEL_53;
  }
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022C75B8);
  }
  double v20 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = *(unsigned __int8 *)(v6 + 144);
    int v22 = *(unsigned __int8 *)(v6 + 145);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)double v29 = v21;
    *(_WORD *)&v29[4] = 1026;
    *(_DWORD *)&v29[6] = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#cltm,Cannot release CLTrackRunGeoMapRunningTrackDataManager os_transaction nor clear tiles from memory due to another ongoing query,fFullDataQueryInProgress,%{public}d,fSparseDataQueryInProgress,%{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 == -1) {
      goto LABEL_68;
    }
    goto LABEL_73;
  }
}

void sub_100762CEC(void *a1)
{
  if (qword_102418FB0 != -1) {
    dispatch_once(&qword_102418FB0, &stru_1022C75B8);
  }
  uint64_t v2 = qword_102418FB8;
  if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cltm,Clearing track tiles and destroying GeoCodec zone", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    id v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLTrackRunGeoMapRunningTrackDataManager::ClearTrackTilesAndDestroyGeoCodecMallocZone(const GEOMapFeatureAccess *)", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  if (a1)
  {
    [a1 clearRunningTrackTiles];
    GEOResetGeoCodecsAllocator();
  }
}

uint64_t sub_100762E90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100762EA4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100762EB8(uint64_t a1)
{
  if (*(void *)a1)
  {
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    uint64_t v2 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        id v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#cltm,%s,os_transaction already taken, not taking another", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      }
      id v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::ClTrackRunGeoMapDataTransaction::Create()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    BOOL v5 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      BOOL v5 = (void *)*v5;
    }
    *(void *)a1 = [[CLOSTransaction alloc] initWithDescription:v5];
  }
}

uint64_t sub_1007630B4(uint64_t result, _OWORD *a2)
{
  int v2 = *(unsigned __int8 *)(result + 112);
  *(_OWORD *)(result + 96) = *a2;
  if (!v2) {
    *(unsigned char *)(result + 112) = 1;
  }
  return result;
}

void sub_1007630D4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 88);
  if (v3 && [v3 allowNetworkTileLoad] != a2)
  {
    [*(id *)(a1 + 88) setAllowNetworkTileLoad:a2];
    if (qword_102418FB0 != -1) {
      dispatch_once(&qword_102418FB0, &stru_1022C75B8);
    }
    BOOL v5 = qword_102418FB8;
    if (os_log_type_enabled((os_log_t)qword_102418FB8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = [*(id *)(a1 + 88) allowNetworkTileLoad];
      *(_DWORD *)buf = 67240192;
      unsigned int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#cltm,Changed allowNetworkTileLoad to %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FB0 != -1) {
        dispatch_once(&qword_102418FB0, &stru_1022C75B8);
      }
      [*(id *)(a1 + 88) allowNetworkTileLoad];
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLTrackRunGeoMapRunningTrackDataManager::SetNetworkTileLoadState(const BOOL)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

uint64_t sub_1007632B8(uint64_t a1)
{
  if (*(void *)a1)
  {

    *(void *)a1 = 0;
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100763300(id a1)
{
  qword_102419438 = (uint64_t)os_log_create("com.apple.locationd.Position", "MapMatcher");
}

void sub_100763330(id a1)
{
  qword_102418FB8 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackRun");
}

BOOL sub_100763360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6 = sub_100B9BC00((float *)a2);
  float v8 = v7;
  float v10 = v9;
  float v11 = *(float *)(a2 + 16);
  float v12 = *(float *)(a2 + 20);
  float v13 = *(float *)(a2 + 24);
  sub_100B9BD60((float *)a2, v44);
  sub_1004E2FA0((uint64_t)v44, (uint64_t)v45);
  float v14 = sub_1004E301C((uint64_t)v45, (float *)(a2 + 28));
  uint64_t v16 = 0;
  float v17 = 0.0;
  do
  {
    float v17 = v17 + (float)(*(float *)(a2 + 28 + v16) * *(float *)(a2 + 28 + v16));
    v16 += 4;
  }
  while (v16 != 12);
  float v18 = sqrt(v14 * v14 + v15 * v15);
  *(float *)(a1 + 32) = *(float *)(a1 + 32) + v18;
  ++*(void *)(a1 + 40);
  *(float *)a1 = sqrtf(v17) + *(float *)a1;
  unint64_t v19 = *(void *)(a1 + 8) + 1;
  *(void *)(a1 + 8) = v19;
  float v20 = fabsf((float)((float)(v8 * v12) + (float)(v6 * v11)) + (float)(v10 * v13)) + *(float *)(a1 + 16);
  *(float *)(a1 + 16) = v20;
  uint64_t v21 = *(void *)(a1 + 24) + 1;
  *(void *)(a1 + 24) = v21;
  if (v19 >= 0x100)
  {
    if (v21) {
      float v22 = v20 / (float)(unint64_t)v21;
    }
    else {
      float v22 = 0.0;
    }
    uint64_t v23 = *(unsigned __int16 *)(a1 + 108);
    uint64_t v24 = *(unsigned __int16 *)(a1 + 110);
    unint64_t v25 = *(unsigned int *)(a1 + 112);
    if (v23 + v24 >= v25) {
      uint64_t v26 = *(unsigned int *)(a1 + 112);
    }
    else {
      uint64_t v26 = 0;
    }
    *(float *)(a1 + 108 + 4 * (v23 + v24 - v26) + 8) = v22;
    if (v25 <= v24)
    {
      unint64_t v27 = v23 + 1;
      if (v27 < v25) {
        LOWORD(v25) = 0;
      }
      *(_WORD *)(a1 + 108) = v27 - v25;
    }
    else
    {
      *(_WORD *)(a1 + 110) = v24 + 1;
    }
    *(unsigned char *)(a1 + 92) = 1;
    *(_DWORD *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    sub_1004184F0(a1 + 92);
    *(_DWORD *)(a3 + 12) = *(_DWORD *)(a1 + 96);
    unint64_t v28 = *(void *)(a1 + 8);
    if (v28) {
      float v29 = *(float *)a1 / (float)v28;
    }
    else {
      float v29 = 0.0;
    }
    uint64_t v30 = *(unsigned __int16 *)(a1 + 64);
    uint64_t v31 = *(unsigned __int16 *)(a1 + 66);
    unint64_t v32 = *(unsigned int *)(a1 + 68);
    if (v30 + v31 >= v32) {
      uint64_t v33 = *(unsigned int *)(a1 + 68);
    }
    else {
      uint64_t v33 = 0;
    }
    *(float *)(a1 + 64 + 4 * (v30 + v31 - v33) + 8) = v29;
    if (v32 <= v31)
    {
      unint64_t v34 = v30 + 1;
      if (v34 < v32) {
        LOWORD(v32) = 0;
      }
      *(_WORD *)(a1 + 64) = v34 - v32;
    }
    else
    {
      *(_WORD *)(a1 + 66) = v31 + 1;
    }
    *(unsigned char *)(a1 + 48) = 1;
    *(_DWORD *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    sub_1004184F0(a1 + 48);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a1 + 52);
    unint64_t v35 = *(void *)(a1 + 40);
    if (v35) {
      float v36 = *(float *)(a1 + 32) / (float)v35;
    }
    else {
      float v36 = 0.0;
    }
    float v37 = fabsf(v36);
    uint64_t v38 = *(unsigned __int16 *)(a1 + 152);
    uint64_t v39 = *(unsigned __int16 *)(a1 + 154);
    unint64_t v40 = *(unsigned int *)(a1 + 156);
    if (v38 + v39 >= v40) {
      uint64_t v41 = *(unsigned int *)(a1 + 156);
    }
    else {
      uint64_t v41 = 0;
    }
    *(float *)(a1 + 152 + 4 * (v38 + v39 - v41) + 8) = v37;
    if (v40 <= v39)
    {
      unint64_t v42 = v38 + 1;
      if (v42 < v40) {
        LOWORD(v40) = 0;
      }
      *(_WORD *)(a1 + 152) = v42 - v40;
    }
    else
    {
      *(_WORD *)(a1 + 154) = v39 + 1;
    }
    *(unsigned char *)(a1 + 136) = 1;
    *(_DWORD *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    sub_1004184F0(a1 + 136);
    *(_DWORD *)(a3 + 16) = *(_DWORD *)(a1 + 140);
    *(void *)a3 = *(void *)(a2 + 48);
  }
  return v19 > 0xFF;
}

int32x2_t *sub_100763644(int32x2_t *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = (int32x2_t)a2[1];
    *(_OWORD *)__dst->i8 = v3;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  __dst[6] = vdup_n_s32(0xC61C3C00);
  __dst[7].i32[0] = -971228160;
  __dst[8] = (int32x2_t)0xBFF0000000000000;
  return __dst;
}

float *sub_1007636BC(uint64_t a1, float a2, float a3)
{
  return sub_10070453C((float *)(a1 + 48), a2, a3);
}

void sub_1007636C4(id a1)
{
  qword_1024192A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "IndoorOutdoor");
}

void sub_1007637A4(id a1)
{
  qword_10247DBB8 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLSensorMonitorSilo"];
}

id sub_1007648C8(int a1, unsigned int *a2, void *__src, void *a4)
{
  uint64_t v5 = *a2;
  memcpy(v7, __src, sizeof(v7));
  return [a4 onStepNotification:v5 data:v7];
}

void sub_10076491C(uint64_t a1, unsigned int *a2, uint64_t a3, void *a4)
{
  uint64_t v5 = *a2;
  long long v6 = *(_OWORD *)(a3 + 144);
  v13[8] = *(_OWORD *)(a3 + 128);
  v13[9] = v6;
  *(_OWORD *)float v14 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)&v14[15] = *(_OWORD *)(a3 + 175);
  long long v7 = *(_OWORD *)(a3 + 80);
  v13[4] = *(_OWORD *)(a3 + 64);
  v13[5] = v7;
  long long v8 = *(_OWORD *)(a3 + 112);
  v13[6] = *(_OWORD *)(a3 + 96);
  v13[7] = v8;
  long long v9 = *(_OWORD *)(a3 + 16);
  v13[0] = *(_OWORD *)a3;
  v13[1] = v9;
  long long v10 = *(_OWORD *)(a3 + 48);
  v13[2] = *(_OWORD *)(a3 + 32);
  v13[3] = v10;
  uint64_t v16 = 0;
  float v15 = 0;
  float v11 = *(const void **)(a3 + 191);
  uint64_t v12 = *(void *)(a3 + 199);
  uint64_t v17 = 0;
  sub_10016989C(&v15, v11, v12, v12 - (void)v11);
  [a4 onFallSnippetNotification:v5 data:v13];
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_1007649CC(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)(v1 + 191);
  if (v3)
  {
    *(void *)(v1 + 199) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007649E8(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[9];
  v12[8] = a3[8];
  void v12[9] = v5;
  long long v6 = a3[11];
  v12[10] = a3[10];
  v12[11] = v6;
  long long v7 = a3[5];
  v12[4] = a3[4];
  v12[5] = v7;
  long long v8 = a3[7];
  v12[6] = a3[6];
  v12[7] = v8;
  long long v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  long long v10 = a3[3];
  void v12[2] = a3[2];
  void v12[3] = v10;
  return [a4 onOdometerNotification:v4 data:v12];
}

id sub_100764A48(uint64_t a1, unsigned int *a2, _OWORD *a3, void *a4)
{
  uint64_t v4 = *a2;
  long long v5 = a3[1];
  v8[0] = *a3;
  v8[1] = v5;
  long long v6 = a3[3];
  v8[2] = a3[2];
  void v8[3] = v6;
  return [a4 onCatherineNotification:v4 data:v8];
}

id sub_100764A88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return [a4 onDaemonStatusNotification:a2 data:a3];
}

void sub_100765928(uint64_t a1, _xpc_activity_s *a2)
{
  [*(id *)(a1 + 32) onAppUninstallationCheckActivity:a2];
  if (xpc_activity_get_state(a2) == 2 && !xpc_activity_set_state(a2, 4))
  {
    if (qword_102419280 != -1) {
      dispatch_once(&qword_102419280, &stru_1022C7660);
    }
    long long v3 = qword_102419288;
    if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446466;
      long long v6 = "com.apple.locationd.AppUninstallationCheck";
      __int16 v7 = 2050;
      xpc_activity_state_t state = xpc_activity_get_state(a2);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to mark %{public}s activity as Continue. Current state is %{public}ld", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1022C7660);
      }
      xpc_activity_get_state(a2);
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSensorMonitor scheduleAppUninstallationCheck]_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_100765E20(uint64_t a1, void *a2)
{
  if (([*(id *)(a1 + 32) deferXpcActivityIfNecessary:*(void *)(a1 + 40)] & 1) == 0)
  {
    uint64_t v17 = a1;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v4 = [a2 countByEnumeratingWithState:&v18 objects:v30 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v19;
      do
      {
        __int16 v7 = 0;
        do
        {
          if (*(void *)v19 != v6) {
            objc_enumerationMutation(a2);
          }
          long long v8 = *(char **)(*((void *)&v18 + 1) + 8 * (void)v7);
          if (qword_102419280 != -1) {
            dispatch_once(&qword_102419280, &stru_1022C7660);
          }
          long long v9 = qword_102419288;
          if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v27 = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "App deleted: %@", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419280 != -1) {
              dispatch_once(&qword_102419280, &stru_1022C7660);
            }
            int v22 = 138412290;
            uint64_t v23 = v8;
            float v11 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "-[CLSensorMonitor clearConfigurationsForUninstalledApps:]_block_invoke", "%s\n", v11);
            if (v11 != (char *)buf) {
              free(v11);
            }
          }
          if (objc_msgSend(objc_msgSend(v8, "pathExtension"), "isEqualToString:", @"watchkitapp")) {
            long long v8 = (char *)[v8 stringByDeletingPathExtension];
          }
          uint64_t v10 = sub_100F8CC8C();
          sub_100F8F884(v10, (uint64_t)v8);
          __int16 v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v12 = [a2 countByEnumeratingWithState:&v18 objects:v30 count:16];
        id v5 = v12;
      }
      while (v12);
    }
    if (!xpc_activity_set_state(*(xpc_activity_t *)(v17 + 40), 5))
    {
      if (qword_102419280 != -1) {
        dispatch_once(&qword_102419280, &stru_1022C7660);
      }
      float v13 = qword_102419288;
      if (os_log_type_enabled((os_log_t)qword_102419288, OS_LOG_TYPE_FAULT))
      {
        xpc_activity_state_t state = xpc_activity_get_state(*(xpc_activity_t *)(v17 + 40));
        *(_DWORD *)buf = 136446466;
        unint64_t v27 = "com.apple.locationd.AppUninstallationCheck";
        __int16 v28 = 2050;
        xpc_activity_state_t v29 = state;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Failed to mark %{public}s activity as Done. Current state is %{public}ld", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419280 != -1) {
          dispatch_once(&qword_102419280, &stru_1022C7660);
        }
        xpc_activity_state_t v15 = xpc_activity_get_state(*(xpc_activity_t *)(v17 + 40));
        int v22 = 136446466;
        uint64_t v23 = "com.apple.locationd.AppUninstallationCheck";
        __int16 v24 = 2050;
        xpc_activity_state_t v25 = v15;
        uint64_t v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "-[CLSensorMonitor clearConfigurationsForUninstalledApps:]_block_invoke", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
    }
  }
}

Class sub_10076A2E8()
{
  sub_10076A328();
  Class result = objc_getClass("SRSensorWriter");
  qword_10247DBC8 = (uint64_t)result;
  off_10241D7A8 = sub_10076A37C;
  return result;
}

void *sub_10076A328()
{
  Class result = (void *)qword_10247DBD0;
  if (!qword_10247DBD0)
  {
    Class result = dlopen("/System/Library/Frameworks/SensorKit.framework/SensorKit", 2);
    qword_10247DBD0 = (uint64_t)result;
    if (!result)
    {
      Class result = dlopen("/System/Library/PrivateFrameworks/SensorKit.framework/SensorKit", 2);
      qword_10247DBD0 = (uint64_t)result;
    }
  }
  return result;
}

uint64_t sub_10076A37C()
{
  return qword_10247DBC8;
}

uint64_t sub_10076A388()
{
  uint64_t v0 = sub_10076A328();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorPedometerData");
  if (v1)
  {
    uint64_t result = *v1;
    qword_10247DBD8 = result;
  }
  else
  {
    uint64_t result = qword_10247DBD8;
  }
  off_10241D7B0 = sub_10076A3DC;
  return result;
}

uint64_t sub_10076A3DC()
{
  return qword_10247DBD8;
}

void sub_10076A3E8(id a1)
{
  qword_1024195B8 = (uint64_t)os_log_create("com.apple.locationd.Core", "SensorKit");
}

uint64_t sub_10076A418()
{
  uint64_t v0 = sub_10076A328();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorOdometerSuitability");
  if (v1)
  {
    uint64_t result = *v1;
    qword_10247DBE0 = result;
  }
  else
  {
    uint64_t result = qword_10247DBE0;
  }
  off_10241D7B8 = sub_10076A46C;
  return result;
}

uint64_t sub_10076A46C()
{
  return qword_10247DBE0;
}

uint64_t sub_10076A478()
{
  uint64_t v0 = sub_10076A328();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorFallStatistics");
  if (v1)
  {
    uint64_t result = *v1;
    qword_10247DBE8 = result;
  }
  else
  {
    uint64_t result = qword_10247DBE8;
  }
  off_10241D7C0 = sub_10076A4CC;
  return result;
}

uint64_t sub_10076A4CC()
{
  return qword_10247DBE8;
}

uint64_t sub_10076A4D8()
{
  uint64_t v0 = sub_10076A328();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorElevation");
  if (v1)
  {
    uint64_t result = *v1;
    qword_10247DBF0 = result;
  }
  else
  {
    uint64_t result = qword_10247DBF0;
  }
  off_10241D7C8 = sub_10076A52C;
  return result;
}

uint64_t sub_10076A52C()
{
  return qword_10247DBF0;
}

uint64_t sub_10076A538()
{
  uint64_t v0 = sub_10076A328();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorOdometer");
  if (v1)
  {
    uint64_t result = *v1;
    qword_10247DBF8 = result;
  }
  else
  {
    uint64_t result = qword_10247DBF8;
  }
  off_10241D7D0 = sub_10076A58C;
  return result;
}

uint64_t sub_10076A58C()
{
  return qword_10247DBF8;
}

uint64_t sub_10076A598()
{
  uint64_t v0 = sub_10076A328();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorHeartRate");
  if (v1)
  {
    uint64_t result = *v1;
    qword_10247DC00 = result;
  }
  else
  {
    uint64_t result = qword_10247DC00;
  }
  off_10241D7D8 = sub_10076A5EC;
  return result;
}

uint64_t sub_10076A5EC()
{
  return qword_10247DC00;
}

uint64_t sub_10076A5F8()
{
  uint64_t v0 = sub_10076A328();
  uint64_t v1 = (uint64_t *)dlsym(v0, "SRSensorPhysicalActivityEvents");
  if (v1)
  {
    uint64_t result = *v1;
    qword_10247DC08 = result;
  }
  else
  {
    uint64_t result = qword_10247DC08;
  }
  off_10241D7E0 = sub_10076A64C;
  return result;
}

uint64_t sub_10076A64C()
{
  return qword_10247DC08;
}

void sub_10076A658(id a1)
{
  qword_102419288 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

void sub_10076A688(id a1)
{
  qword_1024190F8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_10076A6B8(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

NSDictionary *sub_10076A6E8()
{
  sub_100134750(qword_10247DB98, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247DB98, (void *)&_mh_execute_header);
  v1[0] = +[NSString stringWithUTF8String:"VO2MaxPowerBudgetEstimatorQueryLookbackInterval"];
  v2[0] = &off_102397A40;
  v1[1] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetRefreshInterval"];
  v2[1] = &off_102397A58;
  v1[2] = +[NSString stringWithUTF8String:"VO2MaxDeescalatorExtendAfterHighExertionTimeSeconds"];
  _DWORD v2[2] = &off_102397A70;
  unsigned __int8 v1[3] = +[NSString stringWithUTF8String:"SensitiveEscalationBudgetAllowanceSeconds"];
  v2[3] = &off_102397A88;
  v1[4] = +[NSString stringWithUTF8String:"SensitiveEscalationExtendedBudgetAllowanceSeconds"];
  v2[4] = &off_102397AA0;
  v1[5] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetAllowanceSeconds"];
  v2[5] = &off_102397AB8;
  v1[6] = +[NSString stringWithUTF8String:"SensitiveEscalationGeneralStairsBudgetRefreshInterval"];
  v2[6] = &off_102397AD0;
  uint64_t result = +[NSDictionary dictionaryWithObjects:v2 forKeys:v1 count:7];
  qword_10247DBB0 = (uint64_t)result;
  return result;
}

uint64_t sub_10076A874(_DWORD *a1, CLMotionActivity *this)
{
  ++*a1;
  uint64_t result = CLMotionActivity::isWalking(this);
  if ((result & 1) != 0 || (uint64_t result = CLMotionActivity::isRunning(this), result))
  {
    id v5 = a1 + 1;
LABEL_4:
    ++*v5;
    return result;
  }
  uint64_t result = CLMotionActivity::isCycling(this);
  if (result)
  {
    id v5 = a1 + 2;
    goto LABEL_4;
  }
  uint64_t result = CLMotionActivity::isInVehicle(this);
  if (result)
  {
    id v5 = a1 + 3;
    goto LABEL_4;
  }
  return result;
}

void sub_10076A8F4(uint64_t a1, void **a2, std::string *__str, int a4, uint64_t a5, CLMotionActivity *this)
{
  if (*(double *)(a1 + 40) < 0.0) {
    *(double *)(a1 + 40) = sub_10016C458();
  }
  id v12 = (const void **)(a1 + 48);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 71);
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    uint64_t v14 = *(void *)(a1 + 56);
  }
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  int v16 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (v14 == size)
  {
    if (v16 >= 0) {
      uint64_t v17 = __str;
    }
    else {
      uint64_t v17 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if ((v13 & 0x80) != 0)
    {
      if (!memcmp(*v12, v17, *(void *)(a1 + 56))) {
        goto LABEL_38;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 71)) {
        goto LABEL_38;
      }
      long long v18 = (unsigned __int8 *)(a1 + 48);
      while (*v18 == v17->__r_.__value_.__s.__data_[0])
      {
        ++v18;
        uint64_t v17 = (std::string *)((char *)v17 + 1);
        if (!--v13) {
          goto LABEL_38;
        }
      }
    }
  }
  std::string::operator=((std::string *)(a1 + 48), __str);
  unsigned int v19 = *(_DWORD *)(a1 + 136);
  if (v19)
  {
    sub_10076AE78((char *)(a1 + 152), (double)v19);
    if (*(double *)(a1 + 424) > 0.0 && !sub_1000EF668(*(double *)(a1 + 408), *(double *)(a1 + 416)))
    {
      double v20 = vabdd_f64(*(double *)(a5 + 76), *(double *)(a1 + 424));
      sub_10076AE78((char *)(a1 + 232), v20);
      double v21 = sub_1000F1648((double *)a1, *(double *)(a1 + 408), *(double *)(a1 + 416), *(double *)(a5 + 4), *(double *)(a5 + 12), 0.0);
      sub_10076AE78((char *)(a1 + 312), v21);
      if (qword_102419560 != -1) {
        dispatch_once(&qword_102419560, &stru_1022C76C0);
      }
      int v22 = qword_102419568;
      if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v23 = a2;
        }
        else {
          uint64_t v23 = *a2;
        }
        __int16 v24 = (const void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          __int16 v24 = *v12;
        }
        int v25 = *(_DWORD *)(a1 + 176);
        int v26 = *(_DWORD *)(a1 + 136);
        uint64_t v27 = *(void *)(a5 + 76);
        uint64_t v29 = *(void *)(a1 + 416);
        uint64_t v28 = *(void *)(a1 + 424);
        uint64_t v30 = *(void *)(a5 + 4);
        uint64_t v31 = *(void *)(a5 + 12);
        uint64_t v32 = *(void *)(a1 + 408);
        *(_DWORD *)buf = 136449027;
        double v77 = v23;
        __int16 v78 = 2082;
        double v79 = v24;
        __int16 v80 = 1026;
        int v81 = v25;
        __int16 v82 = 1026;
        int v83 = v26;
        __int16 v84 = 2050;
        double v85 = v20;
        __int16 v86 = 2050;
        double v87 = v21;
        __int16 v88 = 2050;
        uint64_t v89 = v27;
        __int16 v90 = 2050;
        uint64_t v91 = v28;
        __int16 v92 = 2049;
        uint64_t v93 = v30;
        __int16 v94 = 2049;
        uint64_t v95 = v31;
        __int16 v96 = 2049;
        uint64_t v97 = v32;
        __int16 v98 = 2049;
        uint64_t v99 = v29;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "MapsHarvestMetric,%{public}s,newTrip,%{public}s,numTrips,%{public}d,numHarvestedInLastTrip,%{public}d,durationBetweenTrips,%{public}.1lf,distanceBetweenTrip,%{public}.1lf,locationTime,%{public}.1lf,lastLocationTime,%{public}.1lf,LL,%{private}.7lf,%{private}.7lf,lastLL,%{private}.7lf,%{private}.7lf", buf, 0x72u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419560 != -1) {
          dispatch_once(&qword_102419560, &stru_1022C76C0);
        }
        if (*((char *)a2 + 23) >= 0) {
          uint64_t v38 = a2;
        }
        else {
          uint64_t v38 = *a2;
        }
        if (*(char *)(a1 + 71) < 0) {
          id v12 = (const void **)*v12;
        }
        int v39 = *(_DWORD *)(a1 + 176);
        int v40 = *(_DWORD *)(a1 + 136);
        uint64_t v41 = *(void *)(a5 + 76);
        uint64_t v43 = *(void *)(a1 + 416);
        uint64_t v42 = *(void *)(a1 + 424);
        uint64_t v44 = *(void *)(a5 + 4);
        uint64_t v45 = *(void *)(a5 + 12);
        uint64_t v46 = *(void *)(a1 + 408);
        int v52 = 136449027;
        int v53 = v38;
        __int16 v54 = 2082;
        unsigned int v55 = v12;
        __int16 v56 = 1026;
        int v57 = v39;
        __int16 v58 = 1026;
        int v59 = v40;
        __int16 v60 = 2050;
        double v61 = v20;
        __int16 v62 = 2050;
        double v63 = v21;
        __int16 v64 = 2050;
        uint64_t v65 = v41;
        __int16 v66 = 2050;
        uint64_t v67 = v42;
        __int16 v68 = 2049;
        uint64_t v69 = v44;
        __int16 v70 = 2049;
        uint64_t v71 = v45;
        __int16 v72 = 2049;
        uint64_t v73 = v46;
        __int16 v74 = 2049;
        uint64_t v75 = v43;
        double v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapsTracksAndRealTimeHarvestingMetric::update(const std::string &, const std::string &, const BOOL, const CLDaemonLocation &, const CLMotionActivity &)", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
      }
    }
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__p, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    double v51 = a2[2];
  }
  sub_10076AF68(a1, (uint64_t *)__p);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
LABEL_38:
  sub_10076A874((_DWORD *)(a1 + 72), this);
  sub_10076A874((_DWORD *)(a1 + 136), this);
  int v33 = *(_DWORD *)(a5 + 96);
  if ((v33 & 0xFFFFFFF7) == 1) {
    int v34 = a4;
  }
  else {
    int v34 = 3;
  }
  if (v33 == 3) {
    unsigned int v35 = 2;
  }
  else {
    unsigned int v35 = v34;
  }
  if (v35 != 3) {
    sub_10076A874((_DWORD *)(a1 + 16 * v35 + 88), this);
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a5 + 4);
  double v36 = *(double *)(a5 + 76);
  *(double *)(a1 + 424) = v36;
  HIDWORD(v37) = -2023406815 * (int)v36 + 9544368;
  LODWORD(v37) = HIDWORD(v37);
  if ((v37 >> 4) <= 0x123456)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_1000DC48C(__dst, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      double v49 = a2[2];
    }
    sub_10076AF68(a1, (uint64_t *)__dst);
    if (SHIBYTE(v49) < 0) {
      operator delete(__dst[0]);
    }
  }
}

void sub_10076AE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10076AE78(char *result, double a2)
{
  int v2 = result;
  double v12 = a2;
  int v3 = *((_DWORD *)result + 6);
  if (v3)
  {
    double v4 = *((double *)result + 1);
  }
  else
  {
    *((double *)result + 1) = a2;
    *((double *)result + 2) = a2;
    double v4 = a2;
  }
  double v5 = fabs(a2);
  if (v5 > fabs(v4)) {
    *((double *)result + 1) = a2;
  }
  if (v5 < fabs(*((double *)result + 2))) {
    *((double *)result + 2) = a2;
  }
  unsigned int v6 = v3 + 1;
  *((_DWORD *)result + 6) = v6;
  double v7 = *((double *)result + 4);
  double v8 = a2 - v7;
  double v9 = v7 + (a2 - v7) / (double)v6;
  double v10 = *((double *)result + 5) + (a2 - v9) * v8;
  *((double *)result + 4) = v9;
  *((double *)result + 5) = v10;
  *((double *)result + 6) = a2 * a2 / (double)v6 + *((double *)result + 6) - *((double *)result + 6) / (double)v6;
  if (*(int *)result >= 1)
  {
    uint64_t result = sub_10076C3E4((uint64_t)(result + 56), *((char **)result + 7), (char *)&v12);
    uint64_t v11 = *((void *)v2 + 8);
    if (*(int *)v2 < (unint64_t)((v11 - *((void *)v2 + 7)) >> 3)) {
      *((void *)v2 + 8) = v11 - 8;
    }
  }
  return result;
}

void sub_10076AF68(uint64_t a1, uint64_t *a2)
{
  if (qword_102419560 != -1) {
    dispatch_once(&qword_102419560, &stru_1022C76C0);
  }
  double v4 = qword_102419568;
  if (os_log_type_enabled((os_log_t)qword_102419568, OS_LOG_TYPE_DEFAULT))
  {
    double v5 = a2;
    if (*((char *)a2 + 23) < 0) {
      double v5 = (uint64_t *)*a2;
    }
    int v6 = *(_DWORD *)(a1 + 176);
    int v7 = *(_DWORD *)(a1 + 396);
    uint64_t v31 = v5;
    int v8 = *(_DWORD *)(a1 + 404);
    int v37 = v7;
    int v9 = *(_DWORD *)(a1 + 76);
    int v41 = v8;
    int v10 = *(_DWORD *)(a1 + 84);
    int v45 = v9;
    int v11 = *(_DWORD *)(a1 + 92);
    int v49 = v10;
    int v12 = *(_DWORD *)(a1 + 100);
    int v53 = v11;
    int v13 = *(_DWORD *)(a1 + 108);
    int v57 = v12;
    int v14 = *(_DWORD *)(a1 + 116);
    int v61 = v13;
    int v15 = *(_DWORD *)(a1 + 124);
    int v65 = v14;
    int v16 = *(_DWORD *)(a1 + 132);
    int v69 = v15;
    uint64_t v17 = *(void *)(a1 + 184);
    int v73 = v16;
    uint64_t v75 = v17;
    uint64_t v18 = *(void *)(a1 + 160);
    uint64_t v19 = *(void *)(a1 + 168);
    int v33 = v6;
    uint64_t v77 = v18;
    int v81 = v6;
    uint64_t v20 = *(void *)(a1 + 248);
    uint64_t v85 = *(void *)(a1 + 240);
    int v21 = *(_DWORD *)(a1 + 256);
    uint64_t v87 = v20;
    uint64_t v22 = *(void *)(a1 + 344);
    int v89 = v21;
    uint64_t v91 = v22;
    uint64_t v23 = *(void *)(a1 + 328);
    uint64_t v93 = *(void *)(a1 + 320);
    int v97 = *(_DWORD *)(a1 + 336);
    uint64_t v24 = *(void *)(a1 + 448);
    uint64_t v101 = *(void *)(a1 + 440);
    int v25 = *(_DWORD *)(a1 + 456);
    uint64_t v103 = v24;
    LODWORD(v24) = *(_DWORD *)(a1 + 516);
    int v105 = v25;
    int v26 = *(_DWORD *)(a1 + 524);
    int v109 = v24;
    uint64_t v27 = *(void *)(a1 + 424);
    int v113 = v26;
    uint64_t v117 = v27;
    uint64_t v28 = *(void *)(a1 + 416);
    uint64_t v119 = *(void *)(a1 + 408);
    uint64_t v121 = v28;
    int v35 = *(_DWORD *)(a1 + 392);
    int v39 = *(_DWORD *)(a1 + 400);
    int v43 = *(_DWORD *)(a1 + 72);
    int v47 = *(_DWORD *)(a1 + 80);
    int v51 = *(_DWORD *)(a1 + 88);
    int v55 = *(_DWORD *)(a1 + 96);
    int v59 = *(_DWORD *)(a1 + 104);
    int v63 = *(_DWORD *)(a1 + 112);
    int v67 = *(_DWORD *)(a1 + 120);
    int v71 = *(_DWORD *)(a1 + 128);
    uint64_t v79 = v19;
    uint64_t v83 = *(void *)(a1 + 264);
    uint64_t v95 = v23;
    uint64_t v99 = *(void *)(a1 + 464);
    int v107 = *(_DWORD *)(a1 + 512);
    int v111 = *(_DWORD *)(a1 + 520);
    __int16 v32 = 1026;
    __int16 v34 = 1026;
    __int16 v36 = 1026;
    __int16 v38 = 1026;
    __int16 v40 = 1026;
    __int16 v42 = 1026;
    __int16 v44 = 1026;
    __int16 v46 = 1026;
    __int16 v48 = 1026;
    __int16 v50 = 1026;
    __int16 v52 = 1026;
    __int16 v54 = 1026;
    __int16 v56 = 1026;
    __int16 v58 = 1026;
    __int16 v60 = 1026;
    __int16 v62 = 1026;
    __int16 v64 = 1026;
    __int16 v66 = 1026;
    __int16 v68 = 1026;
    __int16 v70 = 1026;
    __int16 v72 = 1026;
    __int16 v80 = 1026;
    __int16 v88 = 1026;
    __int16 v96 = 1026;
    __int16 v104 = 1026;
    __int16 v106 = 1026;
    __int16 v108 = 1026;
    __int16 v110 = 1026;
    __int16 v112 = 1026;
    __int16 v114 = 1026;
    int v115 = *(_DWORD *)(a1 + 528);
    __int16 v74 = 2050;
    __int16 v76 = 2050;
    __int16 v78 = 2050;
    __int16 v82 = 2050;
    __int16 v84 = 2050;
    __int16 v86 = 2050;
    __int16 v90 = 2050;
    __int16 v92 = 2050;
    __int16 v94 = 2050;
    __int16 v98 = 2050;
    __int16 v100 = 2050;
    __int16 v102 = 2050;
    __int16 v116 = 2050;
    __int16 v118 = 2049;
    __int16 v120 = 2049;
    *(_DWORD *)buf = 136457731;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MapsHarvestMetric,%{public}s,tripCount,%{public}d,rcvdTotal,%{public}d,rcvdWalk,%{public}d,rcvdCycling,%{public}d,rcvdVehicle,%{public}d,harvestedTotal,%{public}d,walking,%{public}d,cycling,%{public}d,vehicle,%{public}d,totalRegular,%{public}d,walkingRegular,%{public}d,cyclingRegular,%{public}d,vehicleRegular,%{public}d,totalProactive,%{public}d,walkingProactive,%{public}d,cyclingProactive,%{public}d,vehicleProactive,%{public}d,totalAccessory,%{public}d,walkingAccessory,%{public}d,cyclingAccessory,%{public}d,vehicleAccessory,%{public}d,tripHarvestCntAvg,%{public}.1lf,tripHarvestCntMax,%{public}.1lf,tripHarvestCnttMin,%{public}.1lf,tripHarvestCntEntryCount,%{public}d,tripsTimeGapAvg,%{public}.1lf,tripTimeGapMax,%{public}.1lf,tripsTimeGapMin,%{public}.1lf,tripTimeGapCount,%{public}d,tripDistGapAvg,%{public}.1lf,tripDistGapMax,%{public}.1lf,tripDistGapMin,%{public}.1lf,tripDistGapCount,%{public}d,uploadCountAvg,%{public}.1lf,uploadCntMax,%{public}.1lf,uploadCntMin,%{public}.1lf,numUploads,%{public}d,chargingUploads,%{public}d,proactiveUploads,%{public}d,walkingUploads,%{public}d,cyclingUploads,%{public}d,vehicleUploads,%{public}d,lastLocationTime,%{public}.1lf,lastLL,%{private}.7lf,%{private}.7lf", buf, 0x156u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419560 != -1) {
      dispatch_once(&qword_102419560, &stru_1022C76C0);
    }
    uint64_t v29 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMapsTracksAndRealTimeHarvestingMetric::outputDebugLog(const std::string)", "%s\n", v29);
    if (v29 != (char *)buf) {
      free(v29);
    }
  }
}

void sub_10076B548(uint64_t a1, char *a2)
{
  if (*(double *)(a1 + 40) >= 0.0
    && vabdd_f64(sub_10016C458(), *(double *)(a1 + 40)) >= 86400.0
    && *(_DWORD *)(a1 + 72))
  {
    if (a2[23] >= 0) {
      double v4 = a2;
    }
    else {
      double v4 = *(char **)a2;
    }
    +[NSString stringWithFormat:@"%s", v4];
    int v10 = _NSConcreteStackBlock;
    uint64_t v11 = 3221225472;
    int v12 = sub_10076B700;
    int v13 = &unk_1022C49E8;
    uint64_t v14 = a1;
    uint64_t v15 = a1 + 88;
    uint64_t v16 = a1 + 104;
    uint64_t v17 = a1 + 120;
    AnalyticsSendEventLazy();
    if (a2[23] >= 0) {
      size_t v5 = a2[23];
    }
    else {
      size_t v5 = *((void *)a2 + 1);
    }
    int v6 = __p;
    sub_1001110E4((uint64_t)__p, v5 + 10);
    if (v9 < 0) {
      int v6 = (void **)__p[0];
    }
    if (v5)
    {
      if (a2[23] >= 0) {
        int v7 = a2;
      }
      else {
        int v7 = *(char **)a2;
      }
      memmove(v6, v7, v5);
    }
    strcpy((char *)v6 + v5, ",Submitted");
    sub_10076AF68(a1, (uint64_t *)__p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    sub_10076C22C(a1);
    if (*(double *)(a1 + 40) < 0.0) {
      *(double *)(a1 + 40) = sub_10016C458();
    }
  }
}

void sub_10076B6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_10076B700(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v76[0] = @"tripCount";
  v77[0] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 176)];
  v76[1] = @"totalLocationsReceived";
  v77[1] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 392)];
  v76[2] = @"locReceivedWalking";
  v77[2] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 396)];
  v76[3] = @"locReceivedCycling";
  v77[3] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 400)];
  v76[4] = @"locReceivedVehicle";
  v77[4] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 404)];
  v76[5] = @"harvestCountTotal";
  v77[5] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 72)];
  v76[6] = @"harvestCountWalking";
  v77[6] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 76)];
  v76[7] = @"harvestCountCycling";
  v77[7] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 80)];
  v76[8] = @"harvestCountVehicle";
  v77[8] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 84)];
  v76[9] = @"regularGPSCountTotal";
  v77[9] = +[NSNumber numberWithInt:**(unsigned int **)(a1 + 40)];
  v76[10] = @"regularGPSCountWalking";
  v77[10] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 4)];
  v76[11] = @"regularGPSCountCycling";
  v77[11] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 8)];
  v76[12] = @"regularGPSCountVehicle";
  v77[12] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 40) + 12)];
  v76[13] = @"proactiveGPSCountTotal";
  v77[13] = +[NSNumber numberWithInt:**(unsigned int **)(a1 + 48)];
  v76[14] = @"proactiveGPSCountWalking";
  v77[14] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 4)];
  v76[15] = @"proactiveGPSCountCycling";
  v77[15] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 8)];
  v76[16] = @"proactiveGPSCountVehicle";
  v77[16] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 48) + 12)];
  v76[17] = @"accessoryCountTotal";
  v77[17] = +[NSNumber numberWithInt:**(unsigned int **)(a1 + 56)];
  v76[18] = @"accessoryCountWalking";
  v77[18] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 56) + 4)];
  v76[19] = @"accessoryCountCycling";
  v77[19] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 56) + 8)];
  v76[20] = @"accessoryCountVehicle";
  unsigned char v77[20] = +[NSNumber numberWithInt:*(unsigned int *)(*(void *)(a1 + 56) + 12)];
  v76[21] = @"harvestedPercentage";
  int v3 = *(_DWORD *)(v2 + 392);
  double v4 = 0.0;
  double v5 = 0.0;
  if (v3)
  {
    double v6 = (double)*(int *)(v2 + 72) / (double)v3 * 100.0;
    BOOL v7 = v6 > 1.0 || v6 <= 0.0;
    double v5 = (double)(int)llround(v6);
    if (!v7) {
      double v5 = 1.0;
    }
  }
  v77[21] = +[NSNumber numberWithDouble:v5];
  v76[22] = @"harvestedPercentageWalking";
  int v8 = *(_DWORD *)(v2 + 396);
  if (v8)
  {
    double v9 = (double)*(int *)(v2 + 76) / (double)v8 * 100.0;
    BOOL v10 = v9 > 1.0 || v9 <= 0.0;
    int v11 = llround(v9);
    if (v10) {
      double v4 = (double)v11;
    }
    else {
      double v4 = 1.0;
    }
  }
  v77[22] = +[NSNumber numberWithDouble:v4];
  v76[23] = @"harvestedPercentageCycling";
  int v12 = *(_DWORD *)(v2 + 400);
  double v13 = 0.0;
  double v14 = 0.0;
  if (v12)
  {
    double v15 = (double)*(int *)(v2 + 80) / (double)v12 * 100.0;
    BOOL v16 = v15 > 1.0 || v15 <= 0.0;
    double v14 = (double)(int)llround(v15);
    if (!v16) {
      double v14 = 1.0;
    }
  }
  v77[23] = +[NSNumber numberWithDouble:v14];
  v76[24] = @"harvestedPercentageVehicle";
  int v17 = *(_DWORD *)(v2 + 404);
  if (v17)
  {
    double v18 = (double)*(int *)(v2 + 84) / (double)v17 * 100.0;
    BOOL v19 = v18 > 1.0 || v18 <= 0.0;
    int v20 = llround(v18);
    if (v19) {
      double v13 = (double)v20;
    }
    else {
      double v13 = 1.0;
    }
  }
  v77[24] = +[NSNumber numberWithDouble:v13];
  v76[25] = @"regularGPSPercentage";
  int v21 = *(_DWORD *)(v2 + 72);
  double v22 = 0.0;
  double v23 = 0.0;
  if (v21)
  {
    double v24 = (double)**(int **)(a1 + 40) / (double)v21 * 100.0;
    BOOL v25 = v24 > 1.0 || v24 <= 0.0;
    double v23 = (double)(int)llround(v24);
    if (!v25) {
      double v23 = 1.0;
    }
  }
  v77[25] = +[NSNumber numberWithDouble:v23];
  v76[26] = @"proactiveGPSPercentage";
  int v26 = *(_DWORD *)(v2 + 72);
  if (v26)
  {
    double v27 = (double)**(int **)(a1 + 48) / (double)v26 * 100.0;
    BOOL v28 = v27 > 1.0 || v27 <= 0.0;
    int v29 = llround(v27);
    if (v28) {
      double v22 = (double)v29;
    }
    else {
      double v22 = 1.0;
    }
  }
  v77[26] = +[NSNumber numberWithDouble:v22];
  v76[27] = @"accessoryPercentage";
  int v30 = *(_DWORD *)(v2 + 72);
  double v31 = 0.0;
  double v32 = 0.0;
  if (v30)
  {
    double v33 = (double)**(int **)(a1 + 56) / (double)v30 * 100.0;
    BOOL v34 = v33 > 1.0 || v33 <= 0.0;
    double v32 = (double)(int)llround(v33);
    if (!v34) {
      double v32 = 1.0;
    }
  }
  v77[27] = +[NSNumber numberWithDouble:v32];
  v76[28] = @"walkingPercentage";
  int v35 = *(_DWORD *)(v2 + 72);
  if (v35)
  {
    double v36 = (double)*(int *)(v2 + 76) / (double)v35 * 100.0;
    BOOL v37 = v36 > 1.0 || v36 <= 0.0;
    int v38 = llround(v36);
    if (v37) {
      double v31 = (double)v38;
    }
    else {
      double v31 = 1.0;
    }
  }
  v77[28] = +[NSNumber numberWithDouble:v31];
  v76[29] = @"cyclingPercentage";
  int v39 = *(_DWORD *)(v2 + 72);
  double v40 = 0.0;
  double v41 = 0.0;
  if (v39)
  {
    double v42 = (double)*(int *)(v2 + 80) / (double)v39 * 100.0;
    BOOL v43 = v42 > 1.0 || v42 <= 0.0;
    double v41 = (double)(int)llround(v42);
    if (!v43) {
      double v41 = 1.0;
    }
  }
  v77[29] = +[NSNumber numberWithDouble:v41];
  v76[30] = @"vehiclePercentage";
  int v44 = *(_DWORD *)(v2 + 72);
  if (v44)
  {
    double v45 = (double)*(int *)(v2 + 84) / (double)v44 * 100.0;
    BOOL v46 = v45 > 1.0 || v45 <= 0.0;
    int v47 = llround(v45);
    if (v46) {
      double v40 = (double)v47;
    }
    else {
      double v40 = 1.0;
    }
  }
  v77[30] = +[NSNumber numberWithDouble:v40];
  v76[31] = @"walkingPercentageRegularGPS";
  __int16 v48 = *(int **)(a1 + 40);
  double v49 = 0.0;
  double v50 = 0.0;
  if (*v48)
  {
    double v51 = (double)v48[1] / (double)*v48 * 100.0;
    BOOL v52 = v51 > 1.0 || v51 <= 0.0;
    double v50 = (double)(int)llround(v51);
    if (!v52) {
      double v50 = 1.0;
    }
  }
  v77[31] = +[NSNumber numberWithDouble:v50];
  v76[32] = @"cyclingPercentageRegularGPS";
  int v53 = *(int **)(a1 + 40);
  if (*v53)
  {
    double v54 = (double)v53[2] / (double)*v53 * 100.0;
    BOOL v55 = v54 > 1.0 || v54 <= 0.0;
    int v56 = llround(v54);
    if (v55) {
      double v49 = (double)v56;
    }
    else {
      double v49 = 1.0;
    }
  }
  v77[32] = +[NSNumber numberWithDouble:v49];
  v76[33] = @"vehiclePercentageRegularGPS";
  int v57 = *(int **)(a1 + 40);
  double v58 = 0.0;
  double v59 = 0.0;
  if (*v57)
  {
    double v60 = (double)v57[3] / (double)*v57 * 100.0;
    BOOL v61 = v60 > 1.0 || v60 <= 0.0;
    double v59 = (double)(int)llround(v60);
    if (!v61) {
      double v59 = 1.0;
    }
  }
  v77[33] = +[NSNumber numberWithDouble:v59];
  v76[34] = @"walkingPercentageProactiveGPS";
  __int16 v62 = *(int **)(a1 + 48);
  if (*v62)
  {
    double v63 = (double)v62[1] / (double)*v62 * 100.0;
    BOOL v64 = v63 > 1.0 || v63 <= 0.0;
    int v65 = llround(v63);
    if (v64) {
      double v58 = (double)v65;
    }
    else {
      double v58 = 1.0;
    }
  }
  v77[34] = +[NSNumber numberWithDouble:v58];
  v76[35] = @"cyclingPercentageProactiveGPS";
  __int16 v66 = *(int **)(a1 + 48);
  double v67 = 0.0;
  double v68 = 0.0;
  if (*v66)
  {
    double v69 = (double)v66[2] / (double)*v66 * 100.0;
    BOOL v70 = v69 > 1.0 || v69 <= 0.0;
    double v68 = (double)(int)llround(v69);
    if (!v70) {
      double v68 = 1.0;
    }
  }
  v77[35] = +[NSNumber numberWithDouble:v68];
  v76[36] = @"vehiclePercentageProactiveGPS";
  int v71 = *(int **)(a1 + 48);
  if (*v71)
  {
    double v72 = (double)v71[3] / (double)*v71 * 100.0;
    BOOL v73 = v72 > 1.0 || v72 <= 0.0;
    int v74 = llround(v72);
    if (v73) {
      double v67 = (double)v74;
    }
    else {
      double v67 = 1.0;
    }
  }
  v77[36] = +[NSNumber numberWithDouble:v67];
  v76[37] = @"harvestCountPerTripAverage";
  v77[37] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 184)];
  v76[38] = @"harvestCountPerTripMax";
  v77[38] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 160)];
  v76[39] = @"harvestCountPerTripMin";
  v77[39] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 168)];
  v76[40] = @"tripsTimeGapAvg";
  v77[40] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 264)];
  v76[41] = @"tripsTimeGapMax";
  v77[41] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 240)];
  v76[42] = @"tripsTimeGapMin";
  v77[42] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 248)];
  v76[43] = @"tripsDistanceGapAvg";
  v77[43] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 344)];
  v76[44] = @"tripsDistanceGapMax";
  v77[44] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 320)];
  v76[45] = @"tripsDistanceGapMin";
  v77[45] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 328)];
  v76[46] = @"uploadedCountAvg";
  v77[46] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 464)];
  v76[47] = @"uploadedCountMax";
  v77[47] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 440)];
  v76[48] = @"uploadedCountMin";
  v77[48] = +[NSNumber numberWithInt:(int)*(double *)(v2 + 448)];
  v76[49] = @"numUploads";
  v77[49] = +[NSNumber numberWithInt:*(unsigned int *)(v2 + 456)];
  v76[50] = @"numUploadsWhileCharging";
  v77[50] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 512)];
  v76[51] = @"numProactiveLocationUploads";
  v77[51] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 516)];
  v76[52] = @"numWalkingModeUploads";
  v77[52] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 520)];
  v76[53] = @"numCyclingModeUploads";
  v77[53] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 524)];
  v76[54] = @"numVehicleModeUploads";
  v77[54] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v2 + 528)];
  return +[NSDictionary dictionaryWithObjects:v77 forKeys:v76 count:55];
}

double sub_10076C22C(uint64_t a1)
{
  *(void *)(a1 + 40) = 0xBFF0000000000000;
  std::string::assign((std::string *)(a1 + 48), "");
  double result = 0.0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 336) = 0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 424) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 528) = 0;
  return result;
}

char *sub_10076C2D8(int32x2_t *a1, int a2, uint64_t a3, int a4, unint64_t a5)
{
  double result = sub_10076AE78((char *)&a1[54], (double)*(int *)a3);
  unint64_t v11 = (*(_DWORD *)a3 - a2);
  int v12 = (int)v11 >= 1 && v11 < a5;
  if (a2 < 1) {
    int v12 = 0;
  }
  if (a2 > a5) {
    int v12 = 1;
  }
  a1[64].i32[1] += v12;
  a1[64].i32[0] += a4;
  uint64_t v13 = *(void *)(a3 + 4);
  v14.i64[0] = v13;
  v14.i64[1] = HIDWORD(v13);
  a1[65] = vsub_s32(a1[65], vmovn_s64((int64x2_t)vcgeq_u64(v14, (uint64x2_t)vdupq_n_s64(a5))));
  if (*(unsigned int *)(a3 + 12) < a5) {
    int v15 = a1[66].i32[0];
  }
  else {
    int v15 = a1[66].i32[0] + 1;
  }
  a1[66].i32[0] = v15;
  return result;
}

uint64_t sub_10076C3A4(uint64_t a1, char *a2, CLMotionActivity *a3)
{
  sub_10076B548(a1, a2);

  return sub_10076A874((_DWORD *)(a1 + 392), a3);
}

char *sub_10076C3E4(uint64_t a1, char *__src, char *a3)
{
  int v3 = a3;
  double v4 = __src;
  double v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      sub_1001D7FD4();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      BOOL v19 = (char *)sub_1000DA54C(a1 + 16, v18);
    }
    else {
      BOOL v19 = 0;
    }
    int v20 = &v19[8 * v16];
    long long __p = v19;
    double v27 = v20;
    BOOL v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        double v23 = (char *)sub_1000DA54C(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        double v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        double v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    BOOL v28 = v20 + 8;
    double v4 = sub_10076C628((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    double v9 = __src + 8;
    BOOL v10 = v6 - 8;
    unint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)double v4 = *(void *)v3;
  }
  return v4;
}

void sub_10076C5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10076C628(void **a1, uint64_t a2, char *__src)
{
  double v5 = *(char **)(a2 + 8);
  double v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  BOOL v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_10076C6F0(id a1)
{
  qword_102419568 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

void sub_10076C720(uint64_t a1@<X8>)
{
  sub_100134750(__p, "");
  *(void *)a1 = 0x100000003;
  *(_WORD *)(a1 + 8) = 0;
  uint64_t v2 = (unsigned char *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_1000DC48C(v2, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v5);
    *(void *)(a1 + 40) = 0;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = 0;
  }
}

void sub_10076C7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10076C7C4(uint64_t a1)
{
  sub_10076C720((uint64_t)v3);
  sub_10076C838(a1, (uint64_t)v3, (const char **)&off_1022C76E0);
  if (v5 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_10076C81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10076C838(uint64_t a1, uint64_t a2, const char **a3)
{
  uint64_t v5 = sub_1005F54CC(a1, a2);
  if (sub_10014C3C0(v5))
  {
    sub_1005F7B0C(a1, "BeaconStatus", a3, 0, 0);
  }
  else
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7770);
    }
    double v6 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "iB: state No access to state DB", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7770);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLBeaconMonitorDatabase::CLBeaconMonitorDatabase(const CLSqliteDatabase::SqliteProperties &, const CLSqliteDatabase::ColumnInfo *)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return a1;
}

void sub_10076CA00(_Unwind_Exception *a1)
{
  sub_1005F5850(v1);
  _Unwind_Resume(a1);
}

void sub_10076CA18(uint64_t a1)
{
  if (sub_10014C3C0(a1))
  {
    sub_10010F274((uint64_t)buf);
    uint64_t v2 = sub_100132EFC(&v9, (uint64_t)"DELETE FROM ", 12);
    sub_100132EFC(v2, (uint64_t)"BeaconStatus", 12);
    std::stringbuf::str();
    if (v7 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    sub_10014D518(a1, (uint64_t)p_p);
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7770);
  }
  double v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "iB: state No access to DB", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7770);
    }
    LOWORD(__p) = 0;
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLBeaconMonitorDatabase::clearLocationData()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_10076CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_101A129A8((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_10076CDE4(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v6 = sub_10014C3C0(a1);
  if (v6)
  {
    if (a3 == 2 || a3 == 4)
    {
      unint64_t v7 = sub_10076D7C0(v6, a2);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7770);
      }
      uint64_t v8 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
        uint64_t v9 = SBYTE3(v27) >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)buf = 134284035;
        *(void *)&uint8_t buf[4] = v7;
        __int16 v31 = 1025;
        int v32 = a3;
        __int16 v33 = 2081;
        BOOL v34 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "iB: state store, %{private}lld, %{private}d, %{private}s", buf, 0x1Cu);
        if (SBYTE3(v27) < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1022C7770);
        }
        (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a2 + 16))(v28, a2);
        if (v29 >= 0) {
          int v20 = v28;
        }
        else {
          int v20 = *(uint8_t **)v28;
        }
        *(_DWORD *)long long __p = 134284035;
        *(void *)&__p[4] = v7;
        __int16 v24 = 1025;
        int v25 = a3;
        __int16 v26 = 2081;
        double v27 = v20;
        unint64_t v21 = (char *)_os_log_send_and_compose_impl();
        if (v29 < 0) {
          operator delete(*(void **)v28);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconMonitorDatabase::storeFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &, CLBTLEBeaconRegion_Type::RegionStates)", "%s\n", v21);
        if (v21 != buf) {
          free(v21);
        }
      }
      sub_10010F274((uint64_t)__p);
      BOOL v10 = sub_100132EFC((int *)((char *)&v25 + 2), (uint64_t)"INSERT OR REPLACE INTO ", 23);
      uint64_t v11 = sub_100132EFC(v10, (uint64_t)"BeaconStatus", 12);
      int64_t v12 = sub_100132EFC(v11, (uint64_t)" (", 2);
      uint64_t v13 = sub_100132EFC(v12, (uint64_t)"Key", 3);
      unint64_t v14 = sub_100132EFC(v13, (uint64_t)", ", 2);
      uint64_t v15 = sub_100132EFC(v14, (uint64_t)"State", 5);
      sub_100132EFC(v15, (uint64_t)") VALUES (?, ?)", 15);
      std::stringbuf::str();
      if (SBYTE3(v34) >= 0) {
        uint64_t v16 = buf;
      }
      else {
        uint64_t v16 = *(unsigned char **)buf;
      }
      sub_10014D518(a1, (uint64_t)v16);
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7770);
    }
    unint64_t v18 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "iB: state Invalid for DB", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return 0;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419390 == -1)
    {
LABEL_40:
      *(_WORD *)long long __p = 0;
      unint64_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBeaconMonitorDatabase::storeFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &, CLBTLEBeaconRegion_Type::RegionStates)", "%s\n", v22);
      if (v22 != buf) {
        free(v22);
      }
      return 0;
    }
LABEL_42:
    dispatch_once(&qword_102419390, &stru_1022C7770);
    goto LABEL_40;
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7770);
  }
  uint64_t v17 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "iB: state No access to DB", buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 == -1) {
      goto LABEL_40;
    }
    goto LABEL_42;
  }
  return 0;
}

void sub_10076D748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  sub_101A129A8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

unint64_t sub_10076D7C0(uint64_t a1, uint64_t a2)
{
  sub_100111050((const void **)(a2 + 64), 47, (uint64_t)&v18);
  int v3 = *(char *)(a2 + 63);
  if (v3 >= 0) {
    double v4 = (const std::string::value_type *)(a2 + 40);
  }
  else {
    double v4 = *(const std::string::value_type **)(a2 + 40);
  }
  if (v3 >= 0) {
    std::string::size_type v5 = *(unsigned __int8 *)(a2 + 63);
  }
  else {
    std::string::size_type v5 = *(void *)(a2 + 48);
  }
  BOOL v6 = std::string::append(&v18, v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v19, 47);
  std::string v20 = v19;
  memset(&v19, 0, sizeof(v19));
  int v8 = *(char *)(a2 + 111);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)(a2 + 88);
  }
  else {
    uint64_t v9 = *(const std::string::value_type **)(a2 + 88);
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a2 + 111);
  }
  else {
    std::string::size_type v10 = *(void *)(a2 + 96);
  }
  uint64_t v11 = std::string::append(&v20, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  std::string::size_type v22 = v11->__r_.__value_.__r.__words[2];
  long long v21 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  unint64_t v13 = sub_10011116C((uint64_t)&v20, (char *)&v21);
  unint64_t v14 = sub_10011116C((uint64_t)&v20, (char *)(a2 + 8));
  uint64_t v15 = *(unsigned __int16 *)(a2 + 32);
  uint64_t v16 = *(unsigned __int16 *)(a2 + 34);
  if (SHIBYTE(v22) < 0) {
    operator delete((void *)v21);
  }
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v15) ^ ((0xC6A4A7935BD1E995 * v15) >> 47))) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v14) ^ ((0xC6A4A7935BD1E995 * v14) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v13) ^ ((0xC6A4A7935BD1E995 * v13) >> 47)) + 3864292196u)) + 3864292196u))
         + 3864292196u) ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v16) ^ ((0xC6A4A7935BD1E995 * v16) >> 47))))
       + 3864292196u;
}

void sub_10076D97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10076D9DC(uint64_t a1, uint64_t a2)
{
  BOOL v4 = sub_10014C3C0(a1);
  if (v4)
  {
    unint64_t v5 = sub_10076D7C0(v4, a2);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7770);
    }
    BOOL v6 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      long long v7 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 134283779;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v18 = 2081;
      std::string v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "iB: state remove, %{private}lld, %{private}s", buf, 0x16u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7770);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      if (v20 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconMonitorDatabase::removeFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v16);
      if (v16 != (char *)__p) {
        free(v16);
      }
    }
    sub_10010F274((uint64_t)buf);
    int v8 = sub_100132EFC((void ***)((char *)&v19 + 2), (uint64_t)"DELETE FROM ", 12);
    uint64_t v9 = sub_100132EFC(v8, (uint64_t)"BeaconStatus", 12);
    std::string::size_type v10 = sub_100132EFC(v9, (uint64_t)" WHERE ", 7);
    uint64_t v11 = sub_100132EFC(v10, (uint64_t)"Key", 3);
    sub_100132EFC(v11, (uint64_t)"=?", 2);
    std::stringbuf::str();
    if (v22 >= 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = (void **)__p[0];
    }
    sub_10014D518(a1, (uint64_t)v12);
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7770);
  }
  unint64_t v13 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "iB: state No access to DB", (uint8_t *)__p, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7770);
    }
    *(_WORD *)buf = 0;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBeaconMonitorDatabase::removeFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v15);
    if (v15 != (char *)__p) {
      free(v15);
    }
  }
  return 0;
}

void sub_10076E1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  sub_101A129A8((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10076E238(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10010F274((uint64_t)v9);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    char v6 = 0;
    do
    {
      sub_10076D7C0(v3, v4);
      if (v6) {
        sub_100132EFC(v10, (uint64_t)", ", 2);
      }
      uint64_t v3 = std::ostream::operator<<();
      v4 += 120;
      char v6 = 1;
    }
    while (v4 != v5);
  }
  std::stringbuf::str();
  *(void *)((char *)v9
  v10[0] = v7;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10076E404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_101A129A8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_10076E41C(uint64_t a1, uint64_t *a2)
{
  BOOL v4 = sub_10014C3C0(a1);
  if (v4)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7770);
    }
    uint64_t v5 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      unint64_t v6 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
      LODWORD(buf) = 134349056;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "iB: state scrub, remaining, %{public}lu", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v7 = sub_10013D1A0(115, 2);
    if (v7)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7770);
      }
      unint64_t v25 = 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3);
      LODWORD(__p[0]) = 134349056;
      *(void **)((char *)__p + 4) = (void *)v25;
      __int16 v26 = (char *)_os_log_send_and_compose_impl();
      uint64_t v7 = sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLBeaconMonitorDatabase::scrubFenceStates(const std::vector<CLBTLEBeaconRegion_Type::MonitoredRegion> &)", "%s\n", v26);
      if (v26 != (char *)&buf) {
        free(v26);
      }
    }
    sub_10076E238(v7, a2);
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v34, "DELETE FROM ");
    int v8 = std::string::append(&v34, "BeaconStatus");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    char v33 = 7;
    strcpy(__s, " WHERE ");
    std::string::size_type v10 = std::string::append(&v35, __s, 7uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    long long v12 = std::string::append(&v36, "Key");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v31 = 9;
    strcpy((char *)v30, " NOT IN (");
    unint64_t v14 = std::string::append(&v37, (const std::string::value_type *)v30, 9uLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((v43 & 0x80u) == 0) {
      p_long long buf = (const std::string::value_type *)&buf;
    }
    else {
      p_long long buf = (const std::string::value_type *)buf;
    }
    if ((v43 & 0x80u) == 0) {
      std::string::size_type v17 = v43;
    }
    else {
      std::string::size_type v17 = *((void *)&buf + 1);
    }
    __int16 v18 = std::string::append(&v38, p_buf, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    char v29 = 1;
    strcpy(v28, ")");
    char v20 = std::string::append(&v39, v28, 1uLL);
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    int64_t v41 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if (v29 < 0) {
      operator delete(*(void **)v28);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (v33 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (v41 >= 0) {
      char v22 = __p;
    }
    else {
      char v22 = (void **)__p[0];
    }
    sub_10014D518(a1, (uint64_t)v22);
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7770);
  }
  double v23 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "iB: state can't scrub DB", (uint8_t *)&buf, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7770);
    }
    LOWORD(__p[0]) = 0;
    double v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLBeaconMonitorDatabase::scrubFenceStates(const std::vector<CLBTLEBeaconRegion_Type::MonitoredRegion> &)", "%s\n", v27);
    if (v27 != (char *)&buf) {
      free(v27);
    }
  }
  return v4;
}

void sub_10076E9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10076EAFC(uint64_t a1, uint64_t a2)
{
  BOOL v4 = sub_10014C3C0(a1);
  if (v4)
  {
    sub_10076D7C0(v4, a2);
    *((unsigned char *)&v27.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v27, "SELECT ");
    uint64_t v5 = std::string::append(&v27, "State");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    char v26 = 6;
    strcpy(__s, " FROM ");
    uint64_t v7 = std::string::append(&v28, __s, 6uLL);
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    long long v9 = std::string::append(&v29, "BeaconStatus");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    char v24 = 7;
    strcpy(v23, " WHERE ");
    long long v11 = std::string::append(&v33, v23, 7uLL);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    long long v13 = std::string::append(&v32, "Key");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    char v22 = 2;
    strcpy(v21, "=?");
    long long v15 = std::string::append(&v34, v21, 2uLL);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    int64_t v31 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    if (v22 < 0) {
      operator delete(*(void **)v21);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (v24 < 0) {
      operator delete(*(void **)v23);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (v26 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (v31 >= 0) {
      std::string::size_type v17 = __p;
    }
    else {
      std::string::size_type v17 = (void **)__p[0];
    }
    sub_10014D518(a1, (uint64_t)v17);
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7770);
  }
  __int16 v18 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
  {
    LOWORD(v34.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "iB: state No access to DB", (uint8_t *)&v34, 2u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(&v34, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7770);
    }
    LOWORD(v32.__r_.__value_.__l.__data_) = 0;
    char v20 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "CLBTLEBeaconRegion_Type::RegionStates CLBeaconMonitorDatabase::getFenceState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", (const char *)v20);
    if (v20 != &v34) {
      free(v20);
    }
  }
  return 1;
}

void sub_10076F734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10076F87C(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

uint64_t sub_10076F8AC(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1000;
  *(_WORD *)(a1 + 12) = 0;
  unsigned __int8 v5 = 0;
  sub_10006ACBC(v6, off_10241BC88[0], &v5, 0);
  *(unsigned char *)(a1 + 12) = v6[0];
  unsigned __int8 v3 = 0;
  sub_10006ACBC(v4, off_10241BC90[0], &v3, 0);
  *(unsigned char *)(a1 + 13) = v4[0];
  return a1;
}

uint64_t sub_10076F93C(uint64_t result, double a2)
{
  unsigned int v2 = *(unsigned __int16 *)(result + 10);
  if (!*(_WORD *)(result + 10) || *(double *)result + 86400.0 < a2)
  {
    unsigned int v2 = 0;
    *(double *)double result = a2;
    *(_WORD *)(result + 10) = 0;
  }
  if (v2 < *(unsigned __int16 *)(result + 8))
  {
    *(_WORD *)(result + 10) = v2 + 1;
    return AnalyticsSendEventLazy();
  }
  return result;
}

NSDictionary *sub_10076F9F0(uint64_t a1)
{
  v3[0] = @"exitingSaturation";
  v4[0] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 25)];
  v3[1] = @"shiftInSaturation";
  v4[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 26)];
  v3[2] = @"extendedSaturation";
  v4[2] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 27)];
  v3[3] = @"triggerCount";
  unsigned __int8 v4[3] = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 32) + 17)];
  v3[4] = @"timeSinceLastRemag";
  v4[4] = +[NSNumber numberWithDouble:(double)*(unint64_t *)(*(void *)(a1 + 32) + 9) / 1000000.0];
  v3[5] = @"timeSinceLastRemagTrigger";
  v4[5] = +[NSNumber numberWithDouble:(double)*(unint64_t *)(*(void *)(a1 + 32) + 1) / 1000000.0];
  v3[6] = @"successFlag";
  v4[6] = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 32) + 28)];
  return +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:7];
}

uint64_t sub_10076FB60(uint64_t result, double a2)
{
  unsigned int v2 = *(unsigned __int16 *)(result + 10);
  if (!*(_WORD *)(result + 10) || *(double *)result + 86400.0 < a2)
  {
    unsigned int v2 = 0;
    *(double *)double result = a2;
    *(_WORD *)(result + 10) = 0;
  }
  if (v2 < *(unsigned __int16 *)(result + 8))
  {
    *(_WORD *)(result + 10) = v2 + 1;
    return AnalyticsSendEventLazy();
  }
  return result;
}

NSDictionary *sub_10076FC14(uint64_t a1)
{
  v4[0] = @"hasActiveMagnetometerClientDuringHeatUp";
  uint64_t v2 = *(void *)(a1 + 32);
  v5[0] = +[NSNumber numberWithBool:*(unsigned char *)(*(void *)(a1 + 40) + 2) != 0];
  v4[1] = @"durationOfNonDefaultState";
  v5[1] = +[NSNumber numberWithUnsignedLongLong:*(void *)(*(void *)(a1 + 40) + 4)];
  v4[2] = @"countOfTimesEnteringHeatup";
  v5[2] = +[NSNumber numberWithUnsignedInt:*(unsigned __int8 *)(*(void *)(a1 + 40) + 1)];
  unsigned __int8 v4[3] = @"IsOverrideForBasebandCompassCoexSupportSet";
  v5[3] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 12)];
  v4[4] = @"IsOverrideForBasebandUsageFlagSet";
  v5[4] = +[NSNumber numberWithBool:*(unsigned __int8 *)(v2 + 13)];
  return +[NSDictionary dictionaryWithObjects:v5 forKeys:v4 count:5];
}

uint64_t sub_10076FD2C()
{
  uint64_t result = sub_1000EB1B0();
  if (result) {
    operator new();
  }
  return result;
}

void sub_10076FDA8()
{
}

uint64_t sub_10076FDCC()
{
  if (qword_10247DC10 != -1) {
    dispatch_once(&qword_10247DC10, &stru_1022C7790);
  }
  return qword_10248A390;
}

void sub_10076FE18(void *a1)
{
  sub_1012F6FF8(a1);

  operator delete();
}

double sub_10076FE50(uint64_t a1, int a2, void *a3)
{
  if (a2)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022C7818);
    }
    BOOL v4 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      LODWORD(v13) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "[AccessoryPPG] Unrecognized update interval notification %{public}d", buf, 8u);
    }
    double v5 = 0.0;
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022C7818);
      }
      long long v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccessoryPPG::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_1012F71A4(a1);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022C7818);
    }
    long long v8 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *a3;
      *(_DWORD *)long long buf = 134349056;
      uint64_t v13 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "[AccessoryPPG] Setting update interval to %{public}f", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022C7818);
      }
      long long v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccessoryPPG::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    return *(double *)a3;
  }
  return v5;
}

void sub_10077016C(uint64_t a1)
{
  Dataint Value = (unsigned __int8 *)IOHIDEventGetDataValue();
  Integerint Value = IOHIDEventGetIntegerValue();
  if (!DataValue)
  {
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022C7818);
    }
    uint64_t v13 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "[AccessoryPPG] Invalid payload", buf, 2u);
    }
    if (!sub_10013D1A0(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022C7818);
    }
    LOWORD(v34) = 0;
LABEL_30:
    long long v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLAccessoryPPG::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
    return;
  }
  int v4 = IntegerValue;
  if (IntegerValue == 32)
  {
    unint64_t TimeStamp = IOHIDEventGetTimeStamp();
    double v6 = sub_1000D3D90(TimeStamp);
    *(double *)std::string::size_type v17 = v6;
    uint64_t v7 = *(unsigned __int8 **)(DataValue + 2);
    v17[1] = v7;
    int v8 = *DataValue;
    char v18 = *DataValue;
    unsigned __int8 v19 = DataValue[1];
    __int16 v9 = *((_WORD *)DataValue + 5);
    unsigned __int8 v21 = DataValue[12];
    __int16 v20 = v9;
    LOBYTE(v9) = DataValue[15];
    __int16 v22 = *(_WORD *)(DataValue + 13);
    char v23 = v9;
    __int16 v10 = *((_WORD *)DataValue + 8);
    unsigned __int8 v25 = DataValue[18];
    __int16 v24 = v10;
    __int16 v11 = *(_WORD *)(DataValue + 19);
    unsigned __int8 v27 = DataValue[21];
    __int16 v26 = v11;
    LOBYTE(v11) = DataValue[24];
    __int16 v28 = *((_WORD *)DataValue + 11);
    char v29 = v11;
    LOBYTE(v11) = DataValue[27];
    __int16 v30 = *(_WORD *)(DataValue + 25);
    char v31 = v11;
    __int16 v32 = *((_WORD *)DataValue + 14);
    __int16 v33 = *((_WORD *)DataValue + 15);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022C7818);
    }
    long long v12 = qword_1024190E8;
    if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67241219;
      int v45 = v8;
      __int16 v46 = 2050;
      int v47 = v7;
      __int16 v48 = 2050;
      double v49 = v6;
      __int16 v50 = 1040;
      int v51 = 32;
      __int16 v52 = 2097;
      int v53 = DataValue;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "[AccessoryPPG] frameNum,%{public}d,sensorTime,%{public}llu,timestamp,%{public}20.20f,payload,{%{private}.*P}", buf, 0x2Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190E0 != -1) {
        dispatch_once(&qword_1024190E0, &stru_1022C7818);
      }
      int v34 = 67241219;
      int v35 = v8;
      __int16 v36 = 2050;
      std::string v37 = v7;
      __int16 v38 = 2050;
      double v39 = v6;
      __int16 v40 = 1040;
      int v41 = 32;
      __int16 v42 = 2097;
      unsigned __int8 v43 = DataValue;
      long long v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLAccessoryPPG::onEventData(void *, void *, IOHIDEventRef)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
    sub_1000E7BA0(a1, 0, (uint64_t)v17, 40);
    return;
  }
  if (qword_1024190E0 != -1) {
    dispatch_once(&qword_1024190E0, &stru_1022C7818);
  }
  long long v14 = qword_1024190E8;
  if (os_log_type_enabled((os_log_t)qword_1024190E8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 68157955;
    int v45 = v4;
    __int16 v46 = 2097;
    int v47 = DataValue;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "[AccessoryPPG] Invalid payload: %{private}.*P", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190E0 != -1) {
      dispatch_once(&qword_1024190E0, &stru_1022C7818);
    }
    int v34 = 68157955;
    int v35 = v4;
    __int16 v36 = 2097;
    std::string v37 = DataValue;
    goto LABEL_30;
  }
}

void sub_1007706B0(id a1)
{
  qword_1024190E8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Accessory");
}

id sub_100770834(uint64_t a1, unsigned int *a2, unsigned __int8 *a3, void *a4)
{
  return _[a4 onDarwinNotification:*a2 data:*a3];
}

void sub_100773EB8(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_100773EE8(uint64_t a1)
{
}

void sub_1007741CC(_Unwind_Exception *a1)
{
  sub_100A69E8C(v1);
  _Unwind_Resume(a1);
}

void *sub_100774208(void *a1)
{
  *a1 = off_1022C7908;
  sub_1007756E8((uint64_t)a1);

  return sub_100A69E8C((uint64_t)a1);
}

void sub_100774264(void *a1)
{
  sub_100774208(a1);

  operator delete();
}

uint64_t sub_10077429C()
{
  if (sub_10010145C()) {
    return 0;
  }

  return sub_100B0AEA8();
}

void sub_1007742D4(uint64_t a1, int a2)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022C7970);
  }
  int v4 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67240192;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Legacy compass started. Cover attached %{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022C7970);
    }
    __int16 v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompass6::start(BOOL)", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (!*(void *)(a1 + 200)) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 186))
  {
    if (!*(void *)(a1 + 144))
    {
      uint64_t v5 = sub_10125D0BC();
      *(_DWORD *)long long buf = 7;
      if (sub_10125E060(v5, (int *)buf))
      {
        [[CLDeviceMotionProperties alloc] initWithMode:7];
      }
      else
      {
        uint64_t v6 = sub_10125D0BC();
        *(_DWORD *)long long buf = 15;
        BOOL v7 = sub_10125E060(v6, (int *)buf);
        int v8 = [CLDeviceMotionProperties alloc];
        if (v7) {
          [(CLDeviceMotionProperties *)v8 initWithMode:15];
        }
        else {
          [(CLDeviceMotionProperties *)v8 initWithMode:3];
        }
      }
      operator new();
    }
  }
  else if (!*(void *)(a1 + 136))
  {
    operator new();
  }
  if (!*(void *)(a1 + 152)) {
    operator new();
  }
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 164) = 0;
}

void sub_100774834()
{
}

void sub_1007748AC(long long *a1, uint64_t a2)
{
  long long v84 = *a1;
  uint64_t v85 = *((void *)a1 + 2);
  ++*(_DWORD *)(a2 + 160);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247DC20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247DC20))
  {
    dword_10247DC18 = (int)(1.5 / *(double *)(a2 + 168));
    __cxa_guard_release(&qword_10247DC20);
  }
  uint64_t v3 = *(void *)(a2 + 144);
  if (v3)
  {
    *(_WORD *)&v106[46] = 0;
    int v4 = (os_unfair_lock_s *)(v3 + 140);
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 140));
    long long v5 = *(_OWORD *)(v3 + 96);
    *(_OWORD *)__int16 v106 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)&v106[16] = v5;
    *(_OWORD *)&v106[32] = *(_OWORD *)(v3 + 112);
    *(_DWORD *)&v106[48] = *(_DWORD *)(v3 + 128);
    long long v6 = *(_OWORD *)(v3 + 32);
    *(_OWORD *)long long buf = *(_OWORD *)(v3 + 16);
    *(_OWORD *)&uint8_t buf[16] = v6;
    long long v7 = *(_OWORD *)(v3 + 64);
    *(_OWORD *)int v105 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)&v105[16] = v7;
    int v8 = *(unsigned __int8 *)(v3 + 136);
    os_unfair_lock_unlock(v4);
    if (v8)
    {
      *(float *)(a2 + 188) = sub_100A1D410((double *)&buf[8]);
      *(_DWORD *)(a2 + 192) = v9;
      *(_DWORD *)(a2 + 196) = v10;
      sub_100A6D254(*(void *)(a2 + 200), a2 + 188);
      sub_100A6D270(*(void *)(a2 + 200), (uint64_t *)&buf[8]);
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 136);
    if (v11)
    {
      long long v12 = (os_unfair_lock_s *)(v11 + 44);
      os_unfair_lock_lock((os_unfair_lock_t)(v11 + 44));
      *(_OWORD *)long long buf = *(_OWORD *)(v11 + 16);
      *(void *)&uint8_t buf[16] = *(void *)(v11 + 32);
      int v13 = *(unsigned __int8 *)(v11 + 40);
      os_unfair_lock_unlock(v12);
      if (v13)
      {
        *(void *)(a2 + 188) = *(void *)&buf[8];
        *(_DWORD *)(a2 + 196) = *(_DWORD *)&buf[16];
        sub_100A6D254(*(void *)(a2 + 200), a2 + 188);
      }
    }
  }
  int v81 = -1082130432;
  if (*(float *)(a2 + 188) != 3.4028e38 && sub_100A6C720(*(float32x2_t **)(a2 + 200), (uint64_t *)&v84 + 1))
  {
    if (!sub_100A6D3EC(*(void *)(a2 + 200), (uint64_t)&v75, v20, v21, v22, v23, v24, v25, v26, v27, v14, v15, v16, v17, v18, v19))return; {
    uint64_t v74 = v84;
    }
    __int16 v28 = *(void **)(a2 + 200);
    uint64_t v29 = v28[205];
    int v30 = v29
        ? *(_DWORD *)(*(void *)(v28[201] + (((unint64_t)(v29 + v28[204] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                    + 4 * ((v29 + v28[204] - 1) & 0x3FF))
        : 0;
    int v82 = v30;
    char v83 = *(unsigned char *)(a2 + 28);
    if (*(unsigned char *)(a2 + 185))
    {
      if (*((float *)&v77 + 2) < 0.0)
      {
        *(unsigned char *)(a2 + 185) = 0;
        uint64_t v35 = sub_100B0AEC4();
        sub_100B0B518(v35);
        __int16 v28 = *(void **)(a2 + 200);
      }
    }
    else if (*((float *)&v77 + 2) >= 0.0)
    {
      *(unsigned char *)(a2 + 185) = 1;
    }
    int v36 = sub_100A6DF40((uint64_t)v28);
    unsigned __int8 v73 = v36;
    if (*(unsigned __int8 *)(a2 + 184) != v36)
    {
      sub_1000E7BA0(a2, 1, (uint64_t)&v73, 1);
      *(unsigned char *)(a2 + 184) = v73;
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022C7970);
      }
      std::string v37 = qword_1024190A8;
      if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "CompassAlignment";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v73;
        *(_WORD *)&buf[18] = 2048;
        *(void *)&buf[20] = v84;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Type,%s,compassJustAlignedToStableField,%d,timestamp,%20.20f", buf, 0x1Cu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190A0 != -1) {
          dispatch_once(&qword_1024190A0, &stru_1022C7970);
        }
        *(_DWORD *)__int16 v86 = 136315650;
        *(void *)&v86[4] = "CompassAlignment";
        *(_WORD *)&v86[12] = 1024;
        *(_DWORD *)&v86[14] = v73;
        *(_WORD *)&v86[18] = 2048;
        *(void *)&v86[20] = v84;
        BOOL v70 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "%s\n", v70);
        if (v70 != buf) {
          free(v70);
        }
      }
      if (*(unsigned char *)(a2 + 29))
      {
        *(void *)__int16 v86 = off_1022E7718;
        *(void *)&v86[8] = CFAbsoluteTimeGetCurrent();
        *(void *)&v86[24] = v84;
        v87[0] = v73;
        uint64_t v38 = sub_101282D9C();
        sub_10128431C(v38, (uint64_t)v86);
        sub_10170140C(buf);
        sub_101726EE8((uint64_t)buf);
        v116 |= 1u;
        uint64_t v113 = *(void *)&v86[8];
        uint64_t v39 = v115;
        uint64_t v40 = v84;
        *(unsigned char *)(v115 + 20) |= 1u;
        *(void *)(v39 + 8) = v40;
        uint64_t v41 = v115;
        int v42 = v73;
        *(unsigned char *)(v115 + 20) |= 2u;
        *(_DWORD *)(v41 + 16) = v42;
        if (qword_10248AF88 != -1) {
          dispatch_once(&qword_10248AF88, &stru_1022C79B0);
        }
        if (qword_10248AF90) {
          sub_1019E5150(qword_10248AF90, (uint64_t)buf);
        }
        sub_101706914((PB::Base *)buf);
      }
    }
    float v72 = 0.0;
    uint64_t v71 = 0;
    sub_100A6DF2C(*(void *)(a2 + 200), (uint64_t)&v71);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022C7970);
    }
    unsigned __int8 v43 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 136318722;
      *(void *)&uint8_t buf[4] = "Compass";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&unsigned char buf[14] = *(float *)&v77;
      *(_WORD *)&buf[22] = 2048;
      *(double *)&buf[24] = *((float *)&v77 + 1);
      *(_WORD *)int v105 = 2048;
      *(double *)&v105[2] = *((float *)&v77 + 2);
      *(_WORD *)&v105[10] = 2048;
      *(double *)&v105[12] = *(float *)&v75;
      *(_WORD *)&v105[20] = 2048;
      *(double *)&v105[22] = *((float *)&v75 + 1);
      *(_WORD *)&v105[30] = 2048;
      *(double *)__int16 v106 = v76;
      *(_WORD *)&v106[8] = 2048;
      *(double *)&v106[10] = *(float *)&v71;
      *(_WORD *)&v106[18] = 2048;
      *(double *)&v106[20] = *((float *)&v71 + 1);
      *(_WORD *)&v106[28] = 2048;
      *(double *)&v106[30] = v72;
      *(_WORD *)&v106[38] = 1024;
      *(_DWORD *)&v106[40] = HIDWORD(v77);
      *(_WORD *)&v106[44] = 2048;
      *(double *)&v106[46] = *(float *)&v79;
      __int16 v107 = 2048;
      double v108 = *((float *)&v79 + 1);
      __int16 v109 = 2048;
      double v110 = v80;
      __int16 v111 = 2048;
      uint64_t v112 = v74;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "Type,%s,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f", buf, 0x94u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022C7970);
      }
      *(_DWORD *)__int16 v86 = 136318722;
      *(void *)&v86[4] = "Compass";
      *(_WORD *)&v86[12] = 2048;
      *(double *)&v86[14] = *(float *)&v77;
      *(_WORD *)&v86[22] = 2048;
      *(double *)&v86[24] = *((float *)&v77 + 1);
      *(_WORD *)uint64_t v87 = 2048;
      *(double *)&v87[2] = *((float *)&v77 + 2);
      *(_WORD *)&v87[10] = 2048;
      *(double *)&v87[12] = *(float *)&v75;
      *(_WORD *)__int16 v88 = 2048;
      *(double *)&v88[2] = *((float *)&v75 + 1);
      *(_WORD *)&v88[10] = 2048;
      double v89 = v76;
      *(_WORD *)__int16 v90 = 2048;
      *(double *)&v90[2] = *(float *)&v71;
      *(_WORD *)&v90[10] = 2048;
      double v91 = *((float *)&v71 + 1);
      __int16 v92 = 2048;
      double v93 = v72;
      __int16 v94 = 1024;
      int v95 = HIDWORD(v77);
      __int16 v96 = 2048;
      double v97 = *(float *)&v79;
      __int16 v98 = 2048;
      double v99 = *((float *)&v79 + 1);
      __int16 v100 = 2048;
      double v101 = v80;
      __int16 v102 = 2048;
      uint64_t v103 = v74;
      double v68 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "%s\n", v68);
      if (v68 != buf) {
        free(v68);
      }
    }
    if (*(unsigned char *)(a2 + 29))
    {
      *(void *)__int16 v86 = off_1022E6928;
      *(void *)&v86[8] = CFAbsoluteTimeGetCurrent();
      *(void *)&v86[24] = v74;
      *(void *)&long long v44 = *(void *)((char *)&v77 + 4);
      *((void *)&v44 + 1) = v75;
      *(_OWORD *)&v87[4] = v44;
      *(_DWORD *)uint64_t v87 = v77;
      *(float *)__int16 v88 = v76;
      *(void *)&v88[4] = v71;
      *(float *)&double v89 = v72;
      BYTE4(v89) = BYTE12(v77);
      *(void *)__int16 v90 = v79;
      *(float *)&v90[8] = v80;
      uint64_t v45 = sub_101282D9C();
      sub_10128431C(v45, (uint64_t)v86);
      sub_10170140C(buf);
      sub_101726E58((uint64_t)buf);
      v116 |= 1u;
      uint64_t v113 = *(void *)&v86[8];
      uint64_t v46 = v114;
      uint64_t v47 = v74;
      *(_WORD *)(v114 + 68) |= 1u;
      *(void *)(v46 + 8) = v47;
      uint64_t v48 = v114;
      *(_WORD *)(v114 + 68) |= 0x800u;
      int v49 = DWORD1(v77);
      *(_DWORD *)(v48 + 56) = v77;
      uint64_t v50 = v114;
      *(_WORD *)(v114 + 68) |= 0x2000u;
      *(_DWORD *)(v50 + 64) = v49;
      uint64_t v51 = v114;
      LODWORD(v47) = DWORD2(v77);
      *(_WORD *)(v114 + 68) |= 2u;
      *(_DWORD *)(v51 + 16) = v47;
      uint64_t v52 = v114;
      *(_WORD *)(v114 + 68) |= 0x100u;
      int v53 = HIDWORD(v75);
      *(_DWORD *)(v52 + 44) = v75;
      uint64_t v54 = v114;
      *(_WORD *)(v114 + 68) |= 0x200u;
      *(_DWORD *)(v54 + 48) = v53;
      uint64_t v55 = v114;
      *(float *)&uint64_t v47 = v76;
      *(_WORD *)(v114 + 68) |= 0x400u;
      *(_DWORD *)(v55 + 52) = v47;
      uint64_t v56 = v114;
      *(_WORD *)(v114 + 68) |= 4u;
      int v57 = HIDWORD(v71);
      *(_DWORD *)(v56 + 20) = v71;
      uint64_t v58 = v114;
      *(_WORD *)(v114 + 68) |= 8u;
      *(_DWORD *)(v58 + 24) = v57;
      uint64_t v59 = v114;
      *(float *)&uint64_t v47 = v72;
      *(_WORD *)(v114 + 68) |= 0x10u;
      *(_DWORD *)(v59 + 28) = v47;
      uint64_t v60 = v114;
      int v61 = HIDWORD(v77);
      *(_WORD *)(v114 + 68) |= 0x20u;
      *(_DWORD *)(v60 + 32) = v61;
      uint64_t v62 = v114;
      int v63 = HIDWORD(v79);
      *(_DWORD *)(v114 + 60) = v79;
      *(_WORD *)(v62 + 68) |= 0x1000u;
      uint64_t v64 = v114;
      *(_WORD *)(v114 + 68) |= 0x80u;
      *(_DWORD *)(v64 + 40) = v63;
      uint64_t v65 = v114;
      *(float *)&uint64_t v47 = v80;
      *(_WORD *)(v114 + 68) |= 0x40u;
      *(_DWORD *)(v65 + 36) = v47;
      if (qword_10248AF88 != -1) {
        dispatch_once(&qword_10248AF88, &stru_1022C79B0);
      }
      if (qword_10248AF90) {
        sub_1019E5150(qword_10248AF90, (uint64_t)buf);
      }
      sub_101706914((PB::Base *)buf);
    }
    if (SHIDWORD(v77) <= 0 && *(_DWORD *)(*(void *)(a2 + 200) + 376) <= dword_10247DC18) {
      return;
    }
    sub_1000E7BA0(a2, 0, (uint64_t)&v74, 112);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022C7970);
    }
    __int16 v66 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEBUG))
    {
      int v67 = *(_DWORD *)(*(void *)(a2 + 200) + 376);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v67;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = HIDWORD(v77);
      *(_WORD *)&unsigned char buf[14] = 2048;
      *(void *)&uint8_t buf[16] = v74;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "notified clients. sampleCount,%d,compass.compass.calibrationLevel,%d,compass.timestamp,%f", buf, 0x18u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022C7970);
    }
    int v69 = *(_DWORD *)(*(void *)(a2 + 200) + 376);
    *(_DWORD *)__int16 v86 = 67109632;
    *(_DWORD *)&v86[4] = v69;
    *(_WORD *)&v86[8] = 1024;
    *(_DWORD *)&v86[10] = HIDWORD(v77);
    *(_WORD *)&v86[14] = 2048;
    *(void *)&v86[16] = v74;
    int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "%s\n", v34);
LABEL_67:
    if (v34 != buf) {
      free(v34);
    }
    return;
  }
  if (!*(unsigned char *)(a2 + 164) && *(_DWORD *)(*(void *)(a2 + 200) + 376) > dword_10247DC18)
  {
    *((void *)&v77 + 1) = 3212836864;
    *(void *)&long long v77 = 0;
    float v76 = 0.0;
    char v78 = 0;
    uint64_t v79 = 0;
    float v80 = 0.0;
    int v82 = 0;
    char v83 = 0;
    uint64_t v74 = v84;
    uint64_t v75 = 0;
    *(unsigned char *)(a2 + 164) = 1;
    sub_1000E7BA0(a2, 0, (uint64_t)&v74, 112);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022C7970);
    }
    char v31 = qword_1024190A8;
    if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_INFO))
    {
      double v32 = *(double *)(a2 + 168) * (double)*(int *)(*(void *)(a2 + 200) + 376);
      *(_DWORD *)long long buf = 134349056;
      *(double *)&uint8_t buf[4] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Notify after %{public}.3f seconds of no event.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190A0 != -1) {
        dispatch_once(&qword_1024190A0, &stru_1022C7970);
      }
      double v33 = *(double *)(a2 + 168) * (double)*(int *)(*(void *)(a2 + 200) + 376);
      *(_DWORD *)__int16 v86 = 134349056;
      *(double *)&v86[4] = v33;
      int v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)", "%s\n", v34);
      goto LABEL_67;
    }
  }
}

void sub_1007756B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
}

uint64_t sub_1007756E8(uint64_t a1)
{
  if (qword_1024190A0 != -1) {
    dispatch_once(&qword_1024190A0, &stru_1022C7970);
  }
  uint64_t v2 = qword_1024190A8;
  if (os_log_type_enabled((os_log_t)qword_1024190A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Legacy compass stopped.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190A0 != -1) {
      dispatch_once(&qword_1024190A0, &stru_1022C7970);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLCompass6::stop()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  uint64_t v4 = *(void *)(a1 + 144);
  uint64_t v3 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = 0;
  if (v3)
  {
    uint64_t v5 = sub_100B0AEC4();
    sub_1009D26C4(v5, 0, *(void *)(a1 + 152));
    uint64_t v6 = *(void *)(a1 + 152);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *(void *)(a1 + 152) = 0;
  }
  if (*(unsigned char *)(a1 + 186))
  {
    if (v4)
    {
      uint64_t v7 = sub_10125D0BC();
      sub_10125DDA0(v7, v4);
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  else if (*(void *)(a1 + 136))
  {
    uint64_t v8 = sub_1009EC0A8();
    sub_1009D26C4(v8, 0, *(void *)(a1 + 136));
    uint64_t v9 = *(void *)(a1 + 136);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    *(void *)(a1 + 136) = 0;
  }
  uint64_t result = *(void *)(a1 + 200);
  if (result)
  {
    sub_100A6C71C();
    operator delete();
  }
  *(_DWORD *)(a1 + 188) = 2139095039;
  return result;
}

float sub_100775980(uint64_t a1, double *a2)
{
  uint64_t v2 = *(void *)(a1 + 200);
  if (v2) {
    return sub_100A6D2A8(v2, a2);
  }
  return result;
}

uint64_t sub_100775990(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 200);
  if (result) {
    return sub_100A6D31C(result);
  }
  return result;
}

void sub_1007759A0(id a1)
{
  qword_1024190A8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Compass");
}

void sub_1007759D0(id a1)
{
  qword_102419088 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_100775A04(uint64_t a1)
{
  sub_1019D78CC(a1);

  operator delete();
}

void sub_100775A3C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (os_unfair_lock_s *)(a1 + 44);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 44));
  long long v6 = *a3;
  *(void *)(a1 + 32) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 40) = 1;

  os_unfair_lock_unlock(v5);
}

void sub_100775AA0(uint64_t a1)
{
  sub_1019D78CC(a1);

  operator delete();
}

void sub_100775AD8(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (os_unfair_lock_s *)(a1 + 140);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 140));
  long long v6 = *a3;
  long long v7 = a3[1];
  long long v8 = a3[3];
  *(_OWORD *)(a1 + 48) = a3[2];
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  long long v9 = a3[4];
  long long v10 = a3[5];
  long long v11 = a3[6];
  *(_DWORD *)(a1 + 128) = *((_DWORD *)a3 + 28);
  *(_OWORD *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 112) = v11;
  *(_OWORD *)(a1 + 80) = v9;
  *(unsigned char *)(a1 + 136) = 1;

  os_unfair_lock_unlock(v5);
}

void sub_100775B54(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  sub_100777268(a1 + 160, a3);
  *(_WORD *)(a1 + 192) = 0;
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
  }
  uint64_t v5 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 68289026;
    v8[1] = 0;
    __int16 v9 = 2082;
    long long v10 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,constructor\"}", (uint8_t *)v8, 0x12u);
  }
  int v6 = _os_feature_enabled_impl();
  long long v7 = *(void **)a1;
  if (v6)
  {
    [v7 silo];
    operator new();
  }
  [v7 silo];
  operator new();
}

void sub_100775D6C()
{
}

void sub_100775E58(uint64_t a1, int a2, id *a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
  }
  int v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    int v11 = 0;
    __int16 v12 = 2082;
    int v13 = "";
    __int16 v14 = 1026;
    int v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,tileFileDownloadCallback\", \"download,success\":%{public}hhd}", buf, 0x18u);
  }
  if (a3)
  {
    id v7 = [*a3 silo];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100776B38;
    void v8[3] = &unk_1022C7AC0;
    _OWORD v8[4] = a3;
    v8[5] = a1;
    char v9 = a2;
    v8[6] = a3;
    [v7 async:v8];
  }
}

void sub_100775FB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a2 && a4)
  {
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 72);
    if (v8 != v7)
    {
      if (a3) {
        char v9 = 0;
      }
      else {
        char v9 = 4;
      }
      if (a3)
      {
        if ((_os_feature_enabled_impl() & 1) == 0)
        {
          long long v10 = (const char *)(a1 + 16);
          sub_1002F0A00((const void **)(a1 + 16), (const void **)&unk_10247DC28, (uint64_t)&__p);
          if (v28 >= 0) {
            p_p = (const char *)&__p;
          }
          else {
            p_p = (const char *)__p;
          }
          if (*(char *)(a1 + 39) < 0) {
            long long v10 = *(const char **)v10;
          }
          if (sub_1004BC3D8(p_p, v10))
          {
            if (v28 >= 0) {
              __int16 v12 = (const char *)&__p;
            }
            else {
              __int16 v12 = (const char *)__p;
            }
            sub_1004BEB14(v12);
          }
          if (SHIBYTE(v28) < 0) {
            operator delete(__p);
          }
        }
        int v13 = (const char *)(a1 + 16);
        if (*(char *)(a1 + 39) < 0) {
          int v13 = *(const char **)v13;
        }
        sub_1004BF004(v13, 3);
        uint64_t v8 = *(void *)(a1 + 64);
        uint64_t v7 = *(void *)(a1 + 72);
      }
      sub_1007763D8(a1, (long long *)(v7 - 24), v9, 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3) > 1);
      uint64_t v14 = *(void *)(a1 + 72);
      int v15 = (void **)(v14 - 24);
      if (*(char *)(v14 - 1) < 0) {
        operator delete(*v15);
      }
      *(void *)(a1 + 72) = v15;
      sub_1007764D8(a1);
      return;
    }
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
    }
    double v22 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      long long __p = (void *)68289026;
      __int16 v25 = 2082;
      double v26 = "";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,download callback for unknown request\"}", (uint8_t *)&__p, 0x12u);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
      }
    }
    uint64_t v23 = qword_1024193A8;
    if (os_signpost_enabled((os_log_t)qword_1024193A8))
    {
      long long __p = (void *)68289026;
      __int16 v25 = 2082;
      double v26 = "";
      uint64_t v18 = "CLRayTracingTileDownloader,download callback for unknown request";
      uint64_t v19 = "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,download callback for unknown request\"}";
      double v20 = v23;
      uint32_t v21 = 18;
      goto LABEL_41;
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
    }
    uint64_t v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      long long __p = (void *)68289538;
      __int16 v25 = 2082;
      double v26 = "";
      __int16 v27 = 1026;
      int v28 = a2 == 0;
      __int16 v29 = 1026;
      BOOL v30 = a4 == 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,unexpected nullptr\", \"download pointer null\":%{public}hhd, \"info pointer null\":%{public}hhd}", (uint8_t *)&__p, 0x1Eu);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
      }
    }
    uint64_t v17 = qword_1024193A8;
    if (os_signpost_enabled((os_log_t)qword_1024193A8))
    {
      long long __p = (void *)68289538;
      __int16 v25 = 2082;
      double v26 = "";
      __int16 v27 = 1026;
      int v28 = a2 == 0;
      __int16 v29 = 1026;
      BOOL v30 = a4 == 0;
      uint64_t v18 = "CLRayTracingTileDownloader,unexpected nullptr";
      uint64_t v19 = "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,unexpected nullptr\", \"download pointer null\":%{public}h"
            "hd, \"info pointer null\":%{public}hhd}";
      double v20 = v17;
      uint32_t v21 = 30;
LABEL_41:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v18, v19, (uint8_t *)&__p, v21);
    }
  }
}

void sub_1007763B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007763D8(uint64_t a1, long long *a2, char a3, char a4)
{
  if (*(void *)(a1 + 184))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    v15[4] = (void **)&v14;
    uint64_t v8 = (void **)sub_1000DA5D8((uint64_t)&v14, 1uLL);
    v15[0] = v8;
    v15[1] = v8;
    v15[3] = &v8[3 * v9];
    long long v10 = *a2;
    _DWORD v8[2] = (void *)*((void *)a2 + 2);
    *(_OWORD *)uint64_t v8 = v10;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    void v15[2] = v8 + 3;
    sub_1001D7FEC(&v12, v15);
    uint64_t v11 = v13;
    sub_1001D8184((uint64_t)v15);
    uint64_t v13 = v11;
    sub_100776ADC(a1 + 160, (uint64_t)&v12, a3, a4);
    v15[0] = (void **)&v12;
    sub_1000A7B4C(v15);
  }
}

void sub_1007764AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1001D8184((uint64_t)va1);
  *(void *)(v2 - 40) = va;
  sub_1000A7B4C((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_1007764D8(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile\"}", (uint8_t *)&buf, 0x12u);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
    }
    uint64_t v16 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
    {
      buf.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile,fFileDownloader NULL\"}", (uint8_t *)&buf, 0x12u);
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
      }
    }
    uint64_t v17 = qword_1024193A8;
    if (os_signpost_enabled((os_log_t)qword_1024193A8))
    {
      buf.__r_.__value_.__r.__words[0] = 68289026;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRayTracingTileDownloader,downloadNextOnDemandTile,fFileDownloader NULL", "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile,fFileDownloader NULL\"}", (uint8_t *)&buf, 0x12u);
    }
    return 0;
  }
  if (*(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    *(_WORD *)(v3 + 80) = 257;
    uint64_t v26 = 0x404E000000000000;
    uint64_t v4 = (void *)(a1 + 40);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a1 + 136));
    sub_1002F0A00((const void **)(*(void *)(a1 + 72) - 24), (const void **)&unk_10247DC28, (uint64_t)&buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_std::string buf = &buf;
    }
    else {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)(a1 + 40), (const std::string::value_type *)p_buf, size);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = (char *)sub_1000A6958();
    sub_1000A5670(v7, (uint64_t)&buf);
    uint64_t v8 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
    *(void *)(a1 + 32) = *((void *)&buf.__r_.__value_.__l + 2);
    uint64_t v9 = *(void *)(a1 + 72);
    uint64_t v12 = *(const std::string::value_type **)(v9 - 24);
    uint64_t v10 = v9 - 24;
    uint64_t v11 = v12;
    int v13 = *(char *)(v10 + 23);
    if (v13 >= 0) {
      uint64_t v14 = (const std::string::value_type *)v10;
    }
    else {
      uint64_t v14 = v11;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(v10 + 8);
    }
    std::string::append((std::string *)(a1 + 16), v14, v15);
    memset(&buf, 0, sizeof(buf));
    if (_os_feature_enabled_impl())
    {
      std::string::operator=(&buf, (const std::string *)(a1 + 16));
    }
    else
    {
      sub_1002F0A00((const void **)(a1 + 16), (const void **)&unk_10247DC28, (uint64_t)&v27);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      std::string buf = v27;
    }
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v20 = &buf;
    }
    else {
      double v20 = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    uint64_t v19 = (*(uint64_t (**)(void, void *, std::string *, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v4, v20, &v26);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
    }
    uint32_t v21 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      v27.__r_.__value_.__r.__words[0] = 68289282;
      LOWORD(v27.__r_.__value_.__r.__words[1]) = 2082;
      *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
      WORD1(v27.__r_.__value_.__r.__words[2]) = 1026;
      HIDWORD(v27.__r_.__value_.__r.__words[2]) = v19;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile\", \"isDownloadRequestSuccessful\":%{public}hhd}", (uint8_t *)&v27, 0x18u);
    }
    if ((v19 & 1) == 0)
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
      }
      double v22 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_INFO))
      {
        v27.__r_.__value_.__r.__words[0] = 68289026;
        LOWORD(v27.__r_.__value_.__r.__words[1]) = 2082;
        *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile,request failed\"}", (uint8_t *)&v27, 0x12u);
      }
      sub_1007763D8(a1, (long long *)(*(void *)(a1 + 72) - 24), 4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3) > 1);
      uint64_t v23 = *(void *)(a1 + 72);
      double v24 = (void **)(v23 - 24);
      if (*(char *)(v23 - 1) < 0) {
        operator delete(*v24);
      }
      *(void *)(a1 + 72) = v24;
      if (*(char *)(a1 + 39) < 0)
      {
        **(unsigned char **)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
      }
      else
      {
        *(unsigned char *)(a1 + 16) = 0;
        *(unsigned char *)(a1 + 39) = 0;
      }
      if (*(char *)(a1 + 63) < 0)
      {
        **(unsigned char **)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
      }
      else
      {
        *(unsigned char *)(a1 + 40) = 0;
        *(unsigned char *)(a1 + 63) = 0;
      }
      sub_1007764D8(a1);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    return v19;
  }
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
  }
  uint64_t v18 = qword_1024193A8;
  uint64_t v19 = 0;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    buf.__r_.__value_.__r.__words[0] = 68289026;
    LOWORD(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"";
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadNextOnDemandTile,empty list\"}", (uint8_t *)&buf, 0x12u);
    return 0;
  }
  return v19;
}

void sub_100776AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100776ADC(uint64_t a1, uint64_t a2, char a3, char a4)
{
  char v7 = a3;
  char v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, char *))(*(void *)v4 + 48))(v4, a2, &v7, &v6);
}

void sub_100776B38(uint64_t a1)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
  }
  uint64_t v2 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLRayTracingTileDownloader,Calling tileDownloadCompleted", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
    }
    uint64_t v3 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLRayTracingTileDownloader::tileFileDownloadCallback(CLFileDownload *, BOOL, void *)_block_invoke", "%s\n", v3);
    if (v3 != (char *)buf) {
      free(v3);
    }
  }
  sub_100775FB8(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
}

void sub_100776CDC(uint64_t a1, char a2, char a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
  }
  char v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(unsigned __int8 *)(a1 + 192);
    int v8 = *(unsigned __int8 *)(a1 + 193);
    v9[0] = 68289538;
    v9[1] = 0;
    __int16 v10 = 2082;
    uint64_t v11 = "";
    __int16 v12 = 1026;
    int v13 = v7;
    __int16 v14 = 1026;
    int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,dataConnectivityStatus\", \"fDataConnectivityUp\":%{public}hhd, \"fCellularDataConnectivityUp\":%{public}hhd}", (uint8_t *)v9, 0x1Eu);
  }
  *(unsigned char *)(a1 + 192) = a2;
  *(unsigned char *)(a1 + 193) = a3;
}

void sub_100776DEC(uint64_t a1, uint64_t a2, long long *a3)
{
  if (qword_1024193A0 != -1) {
    dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
  }
  char v6 = qword_1024193A8;
  if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 68289026;
    int v17 = 0;
    __int16 v18 = 2082;
    uint64_t v19 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadTiles\"}", (uint8_t *)&v16, 0x12u);
  }
  if (*(unsigned char *)(a1 + 192) || *(unsigned char *)(a1 + 193))
  {
    if (*(void *)(a1 + 64) == *(void *)(a1 + 72))
    {
      sub_100314FE8((uint64_t *)(a1 + 64));
      *(_OWORD *)(a1 + 64) = *(_OWORD *)a2;
      *(void *)(a1 + 80) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      int v13 = (void **)(a1 + 136);
      if (*(char *)(a1 + 159) < 0) {
        operator delete(*v13);
      }
      long long v14 = *a3;
      *(void *)(a1 + 152) = *((void *)a3 + 2);
      *(_OWORD *)int v13 = v14;
      *((unsigned char *)a3 + 23) = 0;
      *(unsigned char *)a3 = 0;
      std::string::append((std::string *)(a1 + 136), "/");
      sub_1007764D8(a1);
    }
    else
    {
      if (qword_1024193A0 != -1) {
        dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
      }
      int v7 = qword_1024193A8;
      if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
        int v16 = 68289538;
        int v17 = 0;
        __int16 v18 = 2082;
        uint64_t v19 = "";
        __int16 v20 = 2050;
        unint64_t v21 = v8;
        __int16 v22 = 2050;
        unint64_t v23 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadTiles rejecting\", \"existingDownloadListSize\":%{public}ld, \"requestedDownloadListSize\":%{public}ld}", (uint8_t *)&v16, 0x26u);
        if (qword_1024193A0 != -1) {
          dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
        }
      }
      __int16 v10 = qword_1024193A8;
      if (os_signpost_enabled((os_log_t)qword_1024193A8))
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 72) - *(void *)(a1 + 64)) >> 3);
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
        int v16 = 68289538;
        int v17 = 0;
        __int16 v18 = 2082;
        uint64_t v19 = "";
        __int16 v20 = 2050;
        unint64_t v21 = v11;
        __int16 v22 = 2050;
        unint64_t v23 = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CLRayTracingTileDownloader,downloadTiles rejecting", "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadTiles rejecting\", \"existingDownloadListSize\":%{public}ld, \"requestedDownloadListSize\":%{public}ld}", (uint8_t *)&v16, 0x26u);
      }
      if (*(void *)(a1 + 184)) {
        sub_100776ADC(a1 + 160, a2, 1, 0);
      }
    }
  }
  else
  {
    if (qword_1024193A0 != -1) {
      dispatch_once(&qword_1024193A0, &stru_1022C7AE0);
    }
    int v15 = qword_1024193A8;
    if (os_log_type_enabled((os_log_t)qword_1024193A8, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 68289026;
      int v17 = 0;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileDownloader,downloadTiles\"}", (uint8_t *)&v16, 0x12u);
    }
    if (*(void *)(a1 + 184)) {
      sub_100776ADC(a1 + 160, a2, 3, 0);
    }
  }
}

void sub_100777198(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  if (*(char *)(a1 + 39) < 0)
  {
    **(unsigned char **)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 39) = 0;
  }
  if (*(char *)(a1 + 63) < 0)
  {
    **(unsigned char **)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 40) = 0;
    *(unsigned char *)(a1 + 63) = 0;
  }

  sub_1000A7BA0((uint64_t *)(a1 + 64));
}

void sub_100777238(id a1)
{
  qword_1024193A8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_100777268(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100777300(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100777384()
{
  sub_100134750(qword_10247DC28, ".gz");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247DC28, (void *)&_mh_execute_header);
}

uint64_t sub_1007773E4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  if (!*a3) {
    return 4;
  }
  sub_101171D90((uint64_t)v22);
  double v5 = sub_100BAA1A8((double *)(a1 + 4), a2, v22);
  if (v5 >= *((double *)sub_10016363C() + 5))
  {
    if (v5 >= *((double *)sub_10016363C() + 4)) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = 2;
    }
  }
  else
  {
    uint64_t v6 = 3;
  }
  int v21 = v6;
  if (qword_1024193C0 != -1) {
    dispatch_once(&qword_1024193C0, &stru_1022C7B00);
  }
  int v7 = qword_1024193C8;
  if (os_log_type_enabled((os_log_t)qword_1024193C8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
    uint64_t v9 = *(char *)(a2 + 47) >= 0 ? a2 + 24 : *(void *)(a2 + 24);
    sub_100777704(&v21, __p);
    __int16 v10 = v26 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v31 = v8;
    __int16 v32 = 2080;
    uint64_t v33 = v9;
    __int16 v34 = 2048;
    double v35 = v5;
    __int16 v36 = 2080;
    std::string v37 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "converging state change, fence, %s/%s, distance, %.2f, proximity state, %s", buf, 0x2Au);
    if (SHIBYTE(v26) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193C0 != -1) {
      dispatch_once(&qword_1024193C0, &stru_1022C7B00);
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v12 = a2;
    }
    else {
      uint64_t v12 = *(void *)a2;
    }
    int v13 = *(char *)(a2 + 47);
    uint64_t v16 = *(void *)(a2 + 24);
    uint64_t v15 = a2 + 24;
    uint64_t v14 = v16;
    if (v13 < 0) {
      uint64_t v15 = v14;
    }
    sub_100777704(&v21, v19);
    if (v20 >= 0) {
      int v17 = v19;
    }
    else {
      int v17 = (void **)v19[0];
    }
    *(_DWORD *)long long __p = 136315906;
    *(void *)&__p[4] = v12;
    __int16 v24 = 2080;
    uint64_t v25 = v15;
    __int16 v26 = 2048;
    double v27 = v5;
    __int16 v28 = 2080;
    __int16 v29 = v17;
    __int16 v18 = (char *)_os_log_send_and_compose_impl();
    if (v20 < 0) {
      operator delete(v19[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "static CLFenceProximityState CLFenceApproachingClassifier::getFenceProximityState(const CLDaemonLocation &, const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  return v6;
}

void *sub_100777704@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 > 4) {
    double v5 = "Invalid";
  }
  else {
    double v5 = off_1022C7B20[v4];
  }
  return sub_100134750(a2, v5);
}

void sub_100777734(id a1)
{
  qword_1024193C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_100777BD4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        LODWORD(v6) = 0;
        int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v6) = 0;
    }
LABEL_13:
    if (v11 || (v6 & 7) == 4) {
      return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        char v13 = 0;
        unsigned int v14 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 36) |= 4u;
        while (1)
        {
          uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v17 = v16 + 1;
          if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0) {
            goto LABEL_41;
          }
          v13 += 7;
          BOOL v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_43:
        uint64_t v28 = 32;
        goto LABEL_48;
      case 2u:
        *(unsigned char *)(a1 + 36) |= 1u;
        unint64_t v20 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v21 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          uint64_t v21 = 0;
        }
        *(void *)(a1 + 8) = v21;
        goto LABEL_51;
      case 3u:
        char v22 = 0;
        unsigned int v23 = 0;
        uint64_t v15 = 0;
        *(unsigned char *)(a1 + 36) |= 2u;
        while (2)
        {
          uint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
            v15 |= (unint64_t)(v26 & 0x7F) << v22;
            if (v26 < 0)
            {
              v22 += 7;
              BOOL v10 = v23++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v15) = 0;
        }
LABEL_47:
        uint64_t v28 = 16;
LABEL_48:
        *(_DWORD *)(a1 + v28) = v15;
        goto LABEL_51;
      case 4u:
        double v27 = objc_alloc_init(TRANSITPbRegionPreloadMarket);
        [(id)a1 addMarkets:v27];

        if PBReaderPlaceMark() && (sub_1008805FC(v27, a2))
        {
          PBReaderRecallMark();
LABEL_51:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }
        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_51;
    }
  }
}

char *sub_10077875C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  __dst[24] = 0;
  *((void *)__dst + 6) = 0;
  *((void *)__dst + 5) = 0;
  *((void *)__dst + 4) = __dst + 40;
  __dst[56] = 0;
  *((void *)__dst + 8) = 0;
  __dst[72] = 0;
  *((_DWORD *)__dst + 19) = 0;
  return __dst;
}

char *sub_1007787D0@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[23] < 0) {
    return (char *)sub_1000DC48C((unsigned char *)a2, *(void **)result, *((void *)result + 1));
  }
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(void *)(a2 + 16) = *((void *)result + 2);
  return result;
}

uint64_t *sub_1007787F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100778FCC(a2, (const void ***)(a1 + 32));
}

uint64_t sub_100778804(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_10077880C(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

char *sub_100778814(char *__dst, uint64_t a2, long long *a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1000DC48C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v9 = *(void *)(a2 + 16);
  }
  sub_10077875C(__dst, (long long *)__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  unsigned int v5 = __dst + 80;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(v5, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *((void *)__dst + 12) = *((void *)a3 + 2);
    *(_OWORD *)unsigned int v5 = v6;
  }
  return __dst;
}

void sub_1007788B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_1007788E0(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_1007788E0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_100778920(void *result)
{
  result[1] = 0;
  *uint64_t result = result + 1;
  result[5] = 0;
  result[4] = 0;
  result[2] = 0;
  result[3] = result + 4;
  return result;
}

uint64_t *sub_100778940(uint64_t *result, int a2, unint64_t a3)
{
  if (a2 == 1) {
    return sub_1007789CC((uint64_t)result, a3);
  }
  if (!a2) {
    return sub_100778960(result, a3);
  }
  return result;
}

uint64_t *sub_100778960(uint64_t *result, unint64_t a2)
{
  unint64_t v7 = a2;
  uint64_t v2 = (void *)result[1];
  if (!v2) {
    return sub_1002F9B84((uint64_t **)result, &v7, (uint64_t *)&v7);
  }
  long long v3 = result + 1;
  do
  {
    unint64_t v4 = v2[4];
    BOOL v5 = v4 >= a2;
    if (v4 >= a2) {
      long long v6 = v2;
    }
    else {
      long long v6 = v2 + 1;
    }
    if (v5) {
      long long v3 = v2;
    }
    uint64_t v2 = (void *)*v6;
  }
  while (*v6);
  if (v3 == result + 1 || v3[4] > a2) {
    return sub_1002F9B84((uint64_t **)result, &v7, (uint64_t *)&v7);
  }
  return result;
}

uint64_t *sub_1007789CC(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  unint64_t v4 = *(void **)(a1 + 32);
  uint64_t result = (uint64_t *)(a1 + 32);
  long long v3 = v4;
  if (!v4) {
    return sub_1002F9B84((uint64_t **)result - 1, &v9, (uint64_t *)&v9);
  }
  BOOL v5 = result;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      unint64_t v8 = v3;
    }
    else {
      unint64_t v8 = v3 + 1;
    }
    if (v7) {
      BOOL v5 = v3;
    }
    long long v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 == result || v5[4] > a2) {
    return sub_1002F9B84((uint64_t **)result - 1, &v9, (uint64_t *)&v9);
  }
  return result;
}

void sub_100778A38(uint64_t a1, int a2, unint64_t a3)
{
  if (a2 == 1)
  {
    sub_100778ADC(a1, a3);
  }
  else if (!a2)
  {
    sub_100778A58(a1, a3);
  }
}

void sub_100778A58(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    long long v3 = (uint64_t *)(a1 + 8);
    do
    {
      unint64_t v4 = v2[4];
      BOOL v5 = v4 >= a2;
      if (v4 >= a2) {
        unint64_t v6 = v2;
      }
      else {
        unint64_t v6 = v2 + 1;
      }
      if (v5) {
        long long v3 = v2;
      }
      uint64_t v2 = (void *)*v6;
    }
    while (*v6);
    if (v3 != (uint64_t *)(a1 + 8) && v3[4] <= a2)
    {
      sub_1000F0A30((uint64_t **)a1, v3);
      operator delete(v3);
    }
  }
}

void sub_100778ADC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 32);
  long long v3 = *(void **)(a1 + 32);
  if (v3)
  {
    unint64_t v4 = (uint64_t **)(a1 + 24);
    BOOL v5 = v2;
    do
    {
      unint64_t v6 = v3[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = v3;
      }
      else {
        unint64_t v8 = v3 + 1;
      }
      if (v7) {
        BOOL v5 = v3;
      }
      long long v3 = (void *)*v8;
    }
    while (*v8);
    if (v5 != v2 && v5[4] <= a2)
    {
      sub_1000F0A30(v4, v5);
      operator delete(v5);
    }
  }
}

id sub_100778B64(uint64_t a1, uint64_t *a2, void *a3)
{
  if ([a3 objectForKey:@"associatedStoreIdentifiers"])
  {
    v23[0] = 0;
    v23[1] = 0;
    char v22 = v23;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v5 = [a3 objectForKey:@"associatedStoreIdentifiers"];
    id v6 = [v5 countByEnumeratingWithState:&v18 objects:v24 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v7) {
            objc_enumerationMutation(v5);
          }
          sub_100134750(__p, (char *)[*(id *)(*((void *)&v18 + 1) + 8 * i) UTF8String]);
          sub_100645C44((uint64_t **)&v22, (const void **)__p, (uint64_t)__p);
          if (v17 < 0) {
            operator delete(__p[0]);
          }
        }
        id v6 = [v5 countByEnumeratingWithState:&v18 objects:v24 count:16];
      }
      while (v6);
    }
    uint64_t v9 = *a2;
    sub_100778FCC((uint64_t *)&v14, (const void ***)&v22);
    *(unsigned char *)(v9 + 24) = 1;
    if ((void **)(v9 + 32) != &v14) {
      sub_1007790B0((uint64_t **)(v9 + 32), v14, &v15);
    }
    sub_1000DB264((uint64_t)&v14, v15);
    sub_1000DB264((uint64_t)&v22, v23[0]);
  }
  if ([a3 objectForKey:@"muid"]
    && objc_msgSend(objc_msgSend(a3, "objectForKey:", @"muid"), "unsignedLongLongValue"))
  {
    uint64_t v10 = *a2;
    id v11 = [[objc_msgSend(a3, "objectForKey:", @"muid") unsignedLongLongValue];
    *(unsigned char *)(v10 + 56) = 1;
    *(void *)(v10 + 64) = v11;
  }
  id result = [a3 objectForKey:@"resultProviderIdentifier"];
  if (result)
  {
    id result = [[objc_msgSend(a3, "objectForKey:", @"resultProviderIdentifier") intValue];
    if (result)
    {
      uint64_t v13 = *a2;
      id result = [[a3 objectForKey:@"resultProviderIdentifier"] intValue];
      *(unsigned char *)(v13 + 72) = 1;
      *(_DWORD *)(v13 + 76) = result;
    }
  }
  return result;
}

void sub_100778DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,char *a27)
{
}

void sub_100778E00(void *a1, void *a2, void *a3, void *a4)
{
  sub_100134750(v21, (char *)[a2 UTF8String]);
  sub_100134750(__p, (char *)[a3 UTF8String]);
  uint64_t v7 = sub_1007792E4((uint64_t)v21, (uint64_t)__p, &v23);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  unint64_t v8 = v24;
  v18[0] = v23;
  v18[1] = (uint64_t)v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100778B64(v7, v18, a4);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  id v11 = (void *)*a1;
  uint64_t v9 = a1 + 1;
  uint64_t v10 = v11;
  if (v11 != v9)
  {
    do
    {
      uint64_t v12 = v10[4];
      uint64_t v16 = v23;
      char v17 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v12 + 16))(v12, 0, &v16);
      if (v17) {
        sub_1000DB0A0(v17);
      }
      uint64_t v13 = (void *)v10[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v10[2];
          BOOL v15 = *v14 == (void)v10;
          uint64_t v10 = v14;
        }
        while (!v15);
      }
      uint64_t v10 = v14;
    }
    while (v14 != v9);
  }
  if (v24) {
    sub_1000DB0A0(v24);
  }
}

void sub_100778F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v25) {
    sub_1000DB0A0(v25);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 - 48);
  if (v28) {
    sub_1000DB0A0(v28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100778FCC(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100779024(a1, *a2, a2 + 1);
  return a1;
}

void sub_10077900C(_Unwind_Exception *a1)
{
  sub_1000DB264(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100779024(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    id v5 = (uint64_t **)result;
    id v6 = result + 1;
    do
    {
      id result = sub_100645E98(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t **sub_1007790B0(uint64_t **result, void *a2, void *a3)
{
  id v5 = result;
  if (result[2])
  {
    id v6 = *result;
    uint64_t v7 = result[1];
    *id result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    BOOL v15 = result;
    uint64_t v16 = v8;
    char v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_1002FABD8((uint64_t)v8);
      if (a2 != a3)
      {
        BOOL v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          uint64_t v10 = (uint64_t **)sub_1002A5268((uint64_t)v5, &v18, v17 + 4);
          sub_1000EDF90(v5, v18, v10, (uint64_t *)v17);
          char v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_1002FABD8((uint64_t)v16);
          }
          id v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              id v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              BOOL v9 = a2;
            }
            while (!v12);
          }
          unint64_t v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          BOOL v9 = a2;
        }
        while (!v12);
      }
    }
    id result = (uint64_t **)sub_100779234((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      id result = (uint64_t **)sub_10077928C(v5, (uint64_t)(a2 + 4));
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100779220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100779234(uint64_t a1)
{
  sub_1000DB264(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1000DB264(*(void *)a1, (char *)v2);
  }
  return a1;
}

const void **sub_10077928C(uint64_t **a1, uint64_t a2)
{
  sub_100124D18((uint64_t)a1, a2, (uint64_t)&v6);
  uint64_t v3 = (uint64_t **)sub_1002A5268((uint64_t)a1, &v5, v6 + 4);
  sub_1000EDF90(a1, v5, v3, (uint64_t *)v6);
  return v6;
}

uint64_t sub_1007792E4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  id v6 = (char *)operator new(0x80uLL);
  uint64_t result = sub_100779348((uint64_t)v6, a1, a2);
  *a3 = v6 + 24;
  a3[1] = v6;
  return result;
}

void sub_100779334(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100779348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022C7B58;
  sub_10077945C((int)&v5, (char *)(a1 + 24), a2, a3);
  return a1;
}

void sub_1007793A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007793BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C7B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007793DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C7B58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100779430(uint64_t a1)
{
  sub_100779520((uint64_t)&v1, a1 + 24);
}

void sub_10077945C(int a1, char *__dst, uint64_t a3, uint64_t a4)
{
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  *(_OWORD *)long long __p = *(_OWORD *)a4;
  uint64_t v6 = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_100778814(__dst, (uint64_t)v7, (long long *)__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v8) < 0)
  {
    unint64_t v4 = v7[0];
    operator delete(v4);
  }
}

void sub_1007794FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_101A52034((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100779520(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 103) < 0) {
    operator delete(*(void **)(a2 + 80));
  }
  sub_1000DB264(a2 + 32, *(char **)(a2 + 40));
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void *sub_100779584(void *a1, void *a2)
{
  *a1 = [a2 copy];
  return a1;
}

id *sub_1007795B4(id *a1)
{
  if (*a1) {

  }
  return a1;
}

void sub_1007795EC(void *a1, uint64_t a2)
{
  if (&_ADClientAddValueForScalarKey)
  {
    id v3 = [objc_alloc((Class)NSString) initWithFormat:@"%@.%@", *a1, a2];
    ADClientAddValueForScalarKey();
  }
}

void sub_100779674(void *a1, uint64_t a2)
{
  id v2 = [objc_alloc((Class)NSString) initWithFormat:@"%@.%@", *a1, a2];
  ADClientSetValueForScalarKey();
}

void sub_1007796EC(void *a1, uint64_t a2)
{
  id v2 = [objc_alloc((Class)NSString) initWithFormat:@"%@.%@", *a1, a2];
  ADClientPushValueForDistributionKey();
}

uint64_t sub_100779764(uint64_t result, unsigned int a2)
{
  if ((result - 1) > 2) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = dword_101D2CE20[(int)result - 1];
  }
  if (a2 - 1 > 2) {
    unsigned int v3 = 0;
  }
  else {
    unsigned int v3 = dword_101D2CE20[a2 - 1];
  }
  if (v2 <= v3) {
    return a2;
  }
  else {
    return result;
  }
}

void sub_1007797A8(void *a1@<X8>)
{
  v6[0] = 0;
  sub_1000C7F88(buf);
  int v2 = sub_10006EF84(*(uint64_t *)buf, "GpsSignalEnvironmentAiding", v6);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v6[0] == 1) {
    int v3 = 1;
  }
  else {
    int v3 = v2 ^ 1;
  }
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022C7B98);
  }
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67240192;
    *(_DWORD *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLSE,GpsSignalEnvironmentAiding,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C7B98);
    }
    v6[1] = 67240192;
    _DWORD v6[2] = v3;
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static std::unique_ptr<CLGnssAssistanceSignalEnv> CLGnssAssistanceSignalEnv::create(id<CLIntersiloUniverse>, CLGnssAssistanceSignalEnv::CLGnssAssistanceSignalEnvCallback)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  if (v3) {
    operator new();
  }
  *a1 = 0;
}

void sub_1007799F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10077A9C4((uint64_t *)va);
  operator delete();
}

void sub_100779A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = a2;
  sub_10077A92C(a1 + 16, a3);
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  if (*(void *)(a1 + 40))
  {
    if (qword_1024193D0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_101A6CBB4(qword_1024193D0 == -1);
    abort_report_np();
    __break(1u);
  }
  dispatch_once(&qword_1024193D0, &stru_1022C7B98);
LABEL_3:
  unint64_t v4 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLSE,initializing", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C7B98);
    }
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLGnssAssistanceSignalEnv::CLGnssAssistanceSignalEnv(id<CLIntersiloUniverse>, CLGnssAssistanceSignalEnvCallback)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  sub_100DEA43C();
}

void sub_100779CC4(_Unwind_Exception *a1)
{
  sub_10077A9C4(v2);
  uint64_t v4 = *v1;
  *char v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_100779D20(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 8), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7BB8);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceSignalEnv::onSigEnvNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7BB8);
    }
    BOOL v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceSignalEnv::onSigEnvNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10077A4C4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100779EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100779EFC(uint64_t *a1)
{
  sub_10077A9C4(a1 + 2);
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

id sub_100779F5C(uint64_t a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022C7B98);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSE,CLGnssAssistanceSignalEnv,start", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C7B98);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::start()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return [*(id *)(*(void *)a1 + 16) register:*(void *)(*(void *)a1 + 8) forNotification:0 registrationInfo:0];
}

id sub_10077A104(_DWORD *a1)
{
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022C7B98);
  }
  uint64_t v2 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSE,CLGnssAssistanceSignalEnv,stop", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C7B98);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::stop()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  id result = [*(id *)(*(void *)a1 + 16) unregister:*(void *)(*(void *)a1 + 8) forNotification:0];
  a1[12] = 0;
  return result;
}

void sub_10077A2AC(uint64_t a1)
{
  if (sub_10016C458() - *(double *)(a1 + 56) > 60.0)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C7B98);
    }
    uint64_t v2 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLSE,refresh,updateRefTime", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022C7B98);
      }
      int v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::feedPerEpoch(const GNSS::PerEpochData &)", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    sub_10077A464(a1);
  }
}

uint64_t sub_10077A464(uint64_t result)
{
  if (!*(unsigned char *)(result + 64))
  {
    uint64_t v1 = result;
    *(double *)(result + 56) = sub_10016C458();
    int v2 = *(_DWORD *)(v1 + 48);
    return sub_10077A6C0(v1 + 16, v2);
  }
  return result;
}

uint64_t sub_10077A4B8(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 48);
  return result;
}

void sub_10077A4C4(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (!*a3)
  {
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C7B98);
    }
    uint64_t v6 = qword_1024193D8;
    if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(_DWORD *)(a1 + 48);
      int v8 = *a4;
      *(_DWORD *)std::string buf = 67240448;
      int v11 = v7;
      __int16 v12 = 1026;
      int v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLSE,priorSignalEnvironment,%{public}d,newSignalEnvironment,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024193D0 != -1) {
        dispatch_once(&qword_1024193D0, &stru_1022C7B98);
      }
      BOOL v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::onSigEnvNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    if (*(_DWORD *)(a1 + 48) != *a4)
    {
      *(_DWORD *)(a1 + 48) = *a4;
      sub_10077A464(a1);
    }
  }
}

uint64_t sub_10077A6C0(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_10077A714(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 64) = a2;
  if (qword_1024193D0 != -1) {
    dispatch_once(&qword_1024193D0, &stru_1022C7B98);
  }
  int v3 = qword_1024193D8;
  if (os_log_type_enabled((os_log_t)qword_1024193D8, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)std::string buf = 67240192;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "CLSE,fIsAirborne,%{public}d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193D0 != -1) {
      dispatch_once(&qword_1024193D0, &stru_1022C7B98);
    }
    char v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAssistanceSignalEnv::feedAirborneActivity(const BOOL)", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
}

void sub_10077A8CC(id a1)
{
  qword_1024193D8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_10077A8FC(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10077A92C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10077A9C4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10077AA48(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = a2;
  a1[2] = 26;
  sub_10077B4F4((uint64_t)(a1 + 3), a3);
  return a1;
}

void sub_10077AA84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  *uint64_t v1 = 0;
  if (v3) {
    sub_101A6CD74(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10077AAA4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10077AAD4(void *a1)
{
  uint64_t result = (**(uint64_t (***)(void, void))*a1)(*a1, a1[1]);
  int v3 = result;
  if (result)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C7BD8);
    }
    int v4 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      int v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutActiveStateDetector,sending event %d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C7BD8);
      }
      char v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutActiveStateDetector::updateModel()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    return sub_10077AD10((uint64_t)(a1 + 3), 8);
  }
  return result;
}

uint64_t sub_10077AD10(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10015E48C();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10077AD64(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if ((result & 0x100) != 0)
    {
      return sub_10077AAD4(a1);
    }
  }
  return result;
}

uint64_t sub_10077ADD4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
    if (result)
    {
      return sub_10077AAD4(a1);
    }
  }
  return result;
}

uint64_t sub_10077AE44(uint64_t a1, int a2)
{
  if (a2) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C7BD8);
  }
  int v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutActiveStateDetector,sending external active state %d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C7BD8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutActiveStateDetector::feedExternalActiveState(BOOL, CFAbsoluteTime)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return sub_10077AD10(a1 + 24, 8);
}

void sub_10077B05C(uint64_t *a1, uint64_t a2)
{
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C7BD8);
  }
  int v4 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 134349056;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLWorkoutActiveStateDetector,setting workout type to,%{public}ld", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C7BD8);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutActiveStateDetector::setWorkoutType(CMWorkoutType)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a1[2] == a2)
  {
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C7BD8);
    }
    char v5 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[2];
      *(_DWORD *)std::string buf = 134349056;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "CLWorkoutActiveStateDetector,workout type didn't change,%{public}ld", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C7BD8);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutActiveStateDetector::setWorkoutType(CMWorkoutType)", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    return;
  }
  a1[2] = a2;
  if ((unint64_t)(a2 - 5) < 0x3D) {
    goto LABEL_17;
  }
  if (a2 <= 3)
  {
    if ((unint64_t)(a2 - 1) < 3)
    {
LABEL_17:
      uint64_t v8 = *a1;
      *a1 = 0;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 32))(v8);
      }
      return;
    }
    if (a2) {
      return;
    }
    goto LABEL_26;
  }
  if (a2 == 4) {
    sub_10077B45C();
  }
  if (a2 == 66)
  {
LABEL_26:
    uint64_t v9 = *a1;
    *a1 = 0;
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 32))(v9);
    }
    a1[2] = 0;
  }
}

void sub_10077B45C()
{
}

void sub_10077B4A0()
{
}

void sub_10077B4C4(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

uint64_t sub_10077B4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_10077B58C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  sub_10077DC58((uint64_t)&v4, &v2, &v3);
}

void sub_10077B5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = off_1022C7C08;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_1001AE6FC();
}

void sub_10077BCD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  uint64_t v20 = v17[9];
  v17[9] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v17[8];
  v17[8] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = v17[7];
  v17[7] = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = v17[6];
  v17[6] = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v17[5];
  void v17[5] = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v17[4];
  v17[4] = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = v17[3];
  v17[3] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = v17[2];
  void v17[2] = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *v18;
  *__int16 v18 = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_10077BF18(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7D20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7D20);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100686C50(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10077C0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10077C104(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7D20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7D20);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100688618(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10077C2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10077C2F0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7D20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onNetworkLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7D20);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onNetworkLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100688C34(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10077C4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10077C4DC(uint64_t a1, int *a2, int32x2_t *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7D20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7D20);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100688EA0(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10077C6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10077C6C8(uint64_t a1, _DWORD *a2, uint8_t *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7D20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7D20);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1006894F4(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10077C894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10077C8B4(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7D20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7D20);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100688228(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10077CA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10077CAA0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7D20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7D20);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100688440(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10077CC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10077CC8C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7D20);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onOdometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7D20);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      BOOL v15 = "";
      __int16 v16 = 2082;
      char v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onOdometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100687CB8(a4, a1, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10077CE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10077CE78(uint64_t a1)
{
  *(void *)a1 = off_1022C7C08;

  *(void *)(a1 + 104) = 0;
  [*(id *)(a1 + 96) stopMonitoringEmergencyState:CLISP_ME_TOKEN];

  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return a1;
}

void sub_10077D098(uint64_t a1)
{
  sub_10077CE78(a1);

  operator delete();
}

uint64_t sub_10077D0D0(void *a1)
{
  uint64_t v2 = a1[7];
  a1[7] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[6];
  a1[6] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a1[1];
  a1[1] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = a1[5];
  a1[5] = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t result = a1[9];
  a1[9] = 0;
  if (result)
  {
    uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v8();
  }
  return result;
}

id sub_10077D228(uint64_t a1, uint64_t a2)
{
  if (a2 == 12) {
    sub_1005E05AC();
  }
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v2 + 8);
  uint64_t v3 = *(void **)(v2 + 16);

  return [v3 register:v4 forNotification:a2 registrationInfo:0];
}

id sub_10077D2B8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 40) + 16) register:*(void *)(*(void *)(a1 + 40) + 8) forNotification:a2 registrationInfo:0];
}

id sub_10077D2CC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 72) + 16) register:*(void *)(*(void *)(a1 + 72) + 8) forNotification:a2 registrationInfo:0];
}

id sub_10077D2E0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) register:*(void *)(*(void *)(a1 + 16) + 8) forNotification:a2 registrationInfo:0];
}

id sub_10077D2F4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 24) + 16) register:*(void *)(*(void *)(a1 + 24) + 8) forNotification:a2 registrationInfo:0];
}

id sub_10077D308(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 8) + 16) unregister:*(void *)(*(void *)(a1 + 8) + 8) forNotification:a2];
}

id sub_10077D318(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 40) + 16) unregister:*(void *)(*(void *)(a1 + 40) + 8) forNotification:a2];
}

id sub_10077D328(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 72) + 16) unregister:*(void *)(*(void *)(a1 + 72) + 8) forNotification:a2];
}

id sub_10077D338(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 16) + 16) unregister:*(void *)(*(void *)(a1 + 16) + 8) forNotification:a2];
}

id sub_10077D348(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 24) + 16) unregister:*(void *)(*(void *)(a1 + 24) + 8) forNotification:a2];
}

BOOL sub_10077D358(uint64_t a1)
{
  return [[[objc_msgSend(*(id *)(a1 + 88), "vendor") proxyForService:@"CLDataProtectionManager"] syncgetDataAvailability] == 0;
}

id sub_10077D38C(uint64_t a1)
{
  return _[*(id *)(a1 + 104) syncgetIsAssociated];
}

void sub_10077D394(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    *(void *)std::string buf = qword_10248AB78;
    if (byte_10248AB80[23] < 0)
    {
      sub_1000DC48C(&__p, *(void **)byte_10248AB80, *(unint64_t *)&byte_10248AB80[8]);
    }
    else
    {
      long long __p = *(_OWORD *)byte_10248AB80;
      uint64_t v11 = *(void *)&byte_10248AB80[16];
    }
    long long v12 = xmmword_10248AB98;
    long long v13 = xmmword_10248ABA8;
    long long v14 = xmmword_10248ABB8;
    uint64_t v15 = qword_10248ABC8;
    if ([*(id *)(a1 + 104) syncgetAssociatedNetwork:buf])
    {
      *(void *)a3 = *(void *)buf;
      uint64_t v6 = (unsigned char *)(a3 + 8);
      if (SHIBYTE(v11) < 0)
      {
        sub_1000DC48C(v6, (void *)__p, *((unint64_t *)&__p + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v6 = __p;
        *(void *)(a3 + 24) = v11;
      }
      long long v7 = v13;
      *(_OWORD *)(a3 + 32) = v12;
      *(_OWORD *)(a3 + 48) = v7;
      *(_OWORD *)(a3 + 64) = v14;
      *(void *)(a3 + 80) = v15;
      *(unsigned char *)(a3 + 88) = 1;
    }
    else
    {
      sub_1000E23EC((unsigned char *)a3, (uint64_t)&byte_10248AB18);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    if (qword_102419630 != -1) {
      dispatch_once(&qword_102419630, &stru_1022C7D40);
    }
    uint64_t v5 = qword_102419638;
    if (os_log_type_enabled((os_log_t)qword_102419638, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "WIFI_LOC: failed to get power state", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419630 != -1) {
        dispatch_once(&qword_102419630, &stru_1022C7D40);
      }
      uint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual CLWifiService_Type::AssociationState CLWifiLocationProviderExternal::getAssociatedState(BOOL) const", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    sub_1000E23EC((unsigned char *)a3, (uint64_t)&byte_10248AB18);
  }
}

void sub_10077D628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10077D64C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  unsigned int v7 = a2;
  id v8 = [*(id *)(a1 + 104) syncgetStartScanWithType:a2 lowPriority:a3 lowLatency:a4 passive:1 requester:"wlp" channels:a6];
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C7D60);
  }
  uint64_t v9 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = sub_100D54EB0(v7);
    uint64_t v11 = a5;
    if (*((char *)a5 + 23) < 0) {
      uint64_t v11 = (uint64_t *)*a5;
    }
    *(_DWORD *)std::string buf = 136446722;
    uint64_t v15 = v10;
    __int16 v16 = 2082;
    char v17 = v11;
    __int16 v18 = 1026;
    int v19 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@WifiFlow, scanreq, %{public}s, %{public}s, result, %{public}d", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C7D60);
    }
    sub_100D54EB0(v7);
    long long v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual BOOL CLWifiLocationProviderExternal::startWifiScan(CLWifiService_Type::ScanType, BOOL, BOOL, std::string, const std::optional<CLWifiService_Type::Channels> &) const", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  if ((v8 & 1) == 0) {
    sub_1006D4120(4u);
  }
  return v8;
}

id sub_10077D89C(uint64_t a1, uint64_t a2)
{
  id v3 = [[objc_msgSend(*(id *)(a1 + 88), "vendor") proxyForService:@"CLNetworkLocationProvider"];
  uint64_t v4 = +[NSString stringWithUTF8String:a2];

  return [v3 resetRetryCounters:v4];
}

id sub_10077D8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = [[objc_msgSend(*(id *)(a1 + 88), "vendor") proxyForService:@"CLNetworkLocationProvider"];

  return _[v9 syncgetQueryLocationsForWifis:a2 useCache:a3 piggyback:a4 config:a5];
}

uint64_t sub_10077D964(uint64_t a1, uint64_t a2)
{
  return 1;
}

id sub_10077D988(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 104) syncgetSetAutoJoin:a2];
}

BOOL sub_10077D994()
{
  return sub_1001198CC() == 1;
}

uint64_t sub_10077D9B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 80) + 144))(*(void *)(a1 + 80), a2, a3, 0xFFFFFFFFLL);
}

uint64_t sub_10077D9E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 80) + 152))();
}

__n128 sub_10077DA08@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0xB812000000;
  long long v12 = sub_100177990;
  long long v13 = nullsub_54;
  long long v14 = "";
  CLMotionActivity::init(&v15);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10077DB24;
  void v8[3] = &unk_1022C16C0;
  _OWORD v8[4] = &v9;
  sub_1005AEFA4((uint64_t)v8);
  uint64_t v2 = v10;
  long long v3 = *((_OWORD *)v10 + 10);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)v10 + 9);
  *(_OWORD *)(a1 + 112) = v3;
  *(void *)(a1 + 128) = v2[22];
  long long v4 = *((_OWORD *)v2 + 6);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)v2 + 5);
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = *((_OWORD *)v2 + 8);
  *(_OWORD *)(a1 + 64) = *((_OWORD *)v2 + 7);
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = *((_OWORD *)v2 + 4);
  *(_OWORD *)a1 = *((_OWORD *)v2 + 3);
  *(_OWORD *)(a1 + 16) = v6;
  _Block_object_dispose(&v9, 8);
  return result;
}

void sub_10077DB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10077DB24(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 208))(a2, *(void *)(*(void *)(a1 + 32) + 8) + 48);
}

id sub_10077DB5C(uint64_t a1, uint64_t a2, double a3, double a4)
{
  id v7 = [[objc_msgSend(*(id *)(a1 + 88), "vendor") proxyForService:@"CLWifiTilesManager"];
  long long v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  uint64_t v11 = *(void *)(a2 + 32);
  return [v7 requestTileDownloadForLat:v10 lon:a3 details:a4];
}

void sub_10077DBC8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10077DBF8(id a1)
{
  qword_102419638 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10077DC28(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_10077DC58(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  long long v5 = operator new(0x88uLL);
  sub_10077DCBC(v5, a2, a3);
}

void sub_10077DCA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10077DCBC(void *a1, uint64_t *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022C7D90;
  sub_10077B5D4((uint64_t)(a1 + 3), *a2, *a3);
}

void sub_10077DD0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10077DD20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C7D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10077DD40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C7D90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10077DD94(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_10077DDBC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D2CE58;
      v0[3] = unk_101D2CE68;
      v0[4] = xmmword_101D2CE78;
      v0[0] = xmmword_101D2CE38;
      v0[1] = unk_101D2CE48;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10077DE9C(_Unwind_Exception *a1)
{
}

void sub_10077DEB4()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10077DF34()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10077DFC4(_Unwind_Exception *a1)
{
}

void sub_10077DFDC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_102419688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_102419688))
  {
    qword_102419670 = 0;
    qword_102419678 = 0;
    qword_102419680 = 0;
    uint64_t v0 = operator new(6uLL);
    qword_102419678 = (uint64_t)(v0 + 3);
    qword_102419680 = (uint64_t)(v0 + 3);
    *(_DWORD *)uint64_t v0 = 151521030;
    v0[2] = 3082;
    qword_102419670 = (uint64_t)v0;
    __cxa_atexit((void (*)(void *))sub_1001C6FD8, &qword_102419670, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102419688);
  }
}

void sub_10077E094(_Unwind_Exception *a1)
{
}

void sub_10077E0AC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1024196A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1024196A8))
  {
    qword_102419690 = 0;
    qword_102419698 = 0;
    qword_1024196A0 = 0;
    uint64_t v0 = operator new(2uLL);
    qword_102419690 = (uint64_t)v0;
    *uint64_t v0 = 256;
    qword_102419698 = (uint64_t)(v0 + 1);
    qword_1024196A0 = (uint64_t)(v0 + 1);
    __cxa_atexit((void (*)(void *))sub_1001C700C, &qword_102419690, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_1024196A8);
  }
}

void sub_10077E154(_Unwind_Exception *a1)
{
}

uint64_t sub_10077E16C()
{
  sub_100134750(qword_10247DC40, "WifiLocationProvider");

  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_10247DC40, (void *)&_mh_execute_header);
}

uint64_t sub_10077FCD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    long long v4 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    long long v5 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    long long v6 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    id v7 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    long long v8 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    uint64_t v9 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    uint64_t v10 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    uint64_t v11 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    long long v12 = &OBJC_IVAR___ALCLBodyMetrics__pal;
    do
    {
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        uint64_t v16 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v17 = v16 + 1;
        if (v16 == -1 || v17 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v18 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
        v15 |= (unint64_t)(v18 & 0x7F) << v13;
        if ((v18 & 0x80) == 0) {
          goto LABEL_12;
        }
        v13 += 7;
        BOOL v19 = v14++ >= 9;
        if (v19)
        {
          unint64_t v15 = 0;
          int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      int v20 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v15 = 0;
      }
LABEL_14:
      if (v20 || (v15 & 7) == 4) {
        break;
      }
      switch((v15 >> 3))
      {
        case 1u:
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            uint64_t v25 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
              break;
            }
            char v27 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
            v24 |= (unint64_t)(v27 & 0x7F) << v22;
            if ((v27 & 0x80) == 0) {
              goto LABEL_135;
            }
            v22 += 7;
            BOOL v19 = v23++ >= 9;
            if (v19)
            {
              LODWORD(v24) = 0;
              goto LABEL_137;
            }
          }
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_135:
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_137:
          uint64_t v98 = v4[563];
          goto LABEL_178;
        case 2u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x100u;
          while (2)
          {
            uint64_t v36 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v37 = v36 + 1;
            if (v36 == -1 || v37 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37;
              v24 |= (unint64_t)(v38 & 0x7F) << v34;
              if (v38 < 0)
              {
                v34 += 7;
                BOOL v19 = v35++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_141;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_141:
          uint64_t v98 = v6[541];
          goto LABEL_178;
        case 3u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x10000u;
          while (2)
          {
            uint64_t v41 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
              v24 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                BOOL v19 = v40++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_145;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_145:
          uint64_t v98 = v7[542];
          goto LABEL_178;
        case 4u:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x2000u;
          while (2)
          {
            uint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v47 = v46 + 1;
            if (v46 == -1 || v47 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v48 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47;
              v24 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                BOOL v19 = v45++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_149;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_149:
          uint64_t v98 = v8[543];
          goto LABEL_178;
        case 5u:
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x800u;
          while (2)
          {
            uint64_t v51 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v52 = v51 + 1;
            if (v51 == -1 || v52 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v53 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52;
              v24 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                BOOL v19 = v50++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_153;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_153:
          uint64_t v98 = v9[544];
          goto LABEL_178;
        case 6u:
          char v54 = 0;
          unsigned int v55 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x8000u;
          while (2)
          {
            uint64_t v56 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v57 = v56 + 1;
            if (v56 == -1 || v57 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v58 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v56);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v57;
              v24 |= (unint64_t)(v58 & 0x7F) << v54;
              if (v58 < 0)
              {
                v54 += 7;
                BOOL v19 = v55++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_157;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_157:
          uint64_t v98 = v10[545];
          goto LABEL_178;
        case 7u:
          char v59 = 0;
          unsigned int v60 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x400u;
          while (2)
          {
            uint64_t v61 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v62 = v61 + 1;
            if (v61 == -1 || v62 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v63 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v61);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62;
              v24 |= (unint64_t)(v63 & 0x7F) << v59;
              if (v63 < 0)
              {
                v59 += 7;
                BOOL v19 = v60++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_161;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_161:
          uint64_t v98 = v11[546];
          goto LABEL_178;
        case 8u:
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x1000u;
          while (2)
          {
            uint64_t v66 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v67 = v66 + 1;
            if (v66 == -1 || v67 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67;
              v24 |= (unint64_t)(v68 & 0x7F) << v64;
              if (v68 < 0)
              {
                v64 += 7;
                BOOL v19 = v65++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_165;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_165:
          uint64_t v98 = v12[547];
          goto LABEL_178;
        case 9u:
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x4000u;
          while (2)
          {
            uint64_t v71 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v72 = v71 + 1;
            if (v71 == -1 || v72 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v73 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v71);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v72;
              v24 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                BOOL v19 = v70++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_169;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_169:
          uint64_t v98 = 72;
          goto LABEL_178;
        case 0xAu:
          *(_DWORD *)(a1 + v5[540]) |= 0x80u;
          unint64_t v74 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v74 <= 0xFFFFFFFFFFFFFFFBLL && v74 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v74);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v74 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 44;
          goto LABEL_203;
        case 0xBu:
          *(_DWORD *)(a1 + v5[540]) |= 0x10u;
          unint64_t v76 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v76 <= 0xFFFFFFFFFFFFFFFBLL && v76 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v76);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v76 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 32;
          goto LABEL_203;
        case 0xCu:
          *(_DWORD *)(a1 + v5[540]) |= 0x20u;
          unint64_t v77 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v77 <= 0xFFFFFFFFFFFFFFFBLL && v77 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v77);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v77 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 36;
          goto LABEL_203;
        case 0xDu:
          *(_DWORD *)(a1 + v5[540]) |= 0x40u;
          unint64_t v78 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v78 <= 0xFFFFFFFFFFFFFFFBLL && v78 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v78);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v78 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 40;
          goto LABEL_203;
        case 0xEu:
          *(_DWORD *)(a1 + v5[540]) |= 2u;
          unint64_t v79 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v79 <= 0xFFFFFFFFFFFFFFFBLL && v79 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v79);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v79 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 20;
          goto LABEL_203;
        case 0xFu:
          *(_DWORD *)(a1 + v5[540]) |= 4u;
          unint64_t v80 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v80 <= 0xFFFFFFFFFFFFFFFBLL && v80 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v80);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v80 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 24;
          goto LABEL_203;
        case 0x10u:
          *(_DWORD *)(a1 + v5[540]) |= 8u;
          unint64_t v81 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v81 <= 0xFFFFFFFFFFFFFFFBLL && v81 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v81);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v81 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 28;
          goto LABEL_203;
        case 0x11u:
          *(_DWORD *)(a1 + v5[540]) |= 0x100000u;
          unint64_t v82 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v82 <= 0xFFFFFFFFFFFFFFFBLL && v82 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v82);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v82 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 96;
          goto LABEL_203;
        case 0x12u:
          char v83 = 0;
          unsigned int v84 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x200u;
          while (2)
          {
            uint64_t v85 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v86 = v85 + 1;
            if (v85 == -1 || v86 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v87 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v85);
              *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v86;
              v24 |= (unint64_t)(v87 & 0x7F) << v83;
              if (v87 < 0)
              {
                v83 += 7;
                BOOL v19 = v84++ >= 9;
                if (v19)
                {
                  LODWORD(v24) = 0;
                  goto LABEL_173;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v24) = 0;
          }
LABEL_173:
          uint64_t v98 = 52;
          goto LABEL_178;
        case 0x13u:
          *(_DWORD *)(a1 + v5[540]) |= 1u;
          unint64_t v88 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v88 <= 0xFFFFFFFFFFFFFFF7 && v88 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v89 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v88);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v88 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            uint64_t v89 = 0;
          }
          *(void *)(a1 + 8) = v89;
          continue;
        case 0x14u:
          char v90 = 0;
          unsigned int v91 = 0;
          uint64_t v24 = 0;
          *(_DWORD *)(a1 + v5[540]) |= 0x40000u;
          break;
        case 0x15u:
          *(_DWORD *)(a1 + v5[540]) |= 0x20000u;
          unint64_t v95 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v95 <= 0xFFFFFFFFFFFFFFFBLL && v95 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v95);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v95 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 84;
          goto LABEL_203;
        case 0x16u:
          *(_DWORD *)(a1 + v5[540]) |= 0x200000u;
          unint64_t v96 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v96 <= 0xFFFFFFFFFFFFFFFBLL && v96 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v96);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v96 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 100;
          goto LABEL_203;
        case 0x17u:
          *(_DWORD *)(a1 + v5[540]) |= 0x80000u;
          unint64_t v97 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v97 <= 0xFFFFFFFFFFFFFFFBLL && v97 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            int v75 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v97);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v97 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            int v75 = 0;
          }
          uint64_t v99 = 92;
LABEL_203:
          *(_DWORD *)(a1 + v99) = v75;
          continue;
        default:
          uint64_t v28 = v4;
          __int16 v29 = v6;
          BOOL v30 = v7;
          uint64_t v31 = v5;
          __int16 v32 = v8;
          uint64_t result = PBReaderSkipValueWithTag();
          long long v8 = v32;
          long long v5 = v31;
          uint64_t v9 = &OBJC_IVAR___ALCLBodyMetrics__pal;
          id v7 = v30;
          uint64_t v11 = &OBJC_IVAR___ALCLBodyMetrics__pal;
          long long v6 = v29;
          uint64_t v10 = &OBJC_IVAR___ALCLBodyMetrics__pal;
          long long v4 = v28;
          long long v12 = &OBJC_IVAR___ALCLBodyMetrics__pal;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v92 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        unint64_t v93 = v92 + 1;
        if (v92 == -1 || v93 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v94 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v92);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v93;
        v24 |= (unint64_t)(v94 & 0x7F) << v90;
        if ((v94 & 0x80) == 0) {
          goto LABEL_175;
        }
        v90 += 7;
        BOOL v19 = v91++ >= 9;
        if (v19)
        {
          LODWORD(v24) = 0;
          goto LABEL_177;
        }
      }
      *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_175:
      if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v24) = 0;
      }
LABEL_177:
      uint64_t v98 = 88;
LABEL_178:
      *(_DWORD *)(a1 + v98) = v24;
    }
    while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1007825B0(void *a1, void *a2)
{
  long long v3 = sub_1013361CC((uint64_t)a1, a2);
  *long long v3 = off_1022C7E08;
  *((_OWORD *)v3 + 7) = 0u;
  v3[21] = 0;
  v3[20] = v3 + 21;
  v3[22] = 0;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_DWORD *)v3 + 46) = -1;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 17) = 0u;
  *((_WORD *)v3 + 144) = 0;
  *((_WORD *)v3 + 148) = 0;
  *((unsigned char *)v3 + 298) = 0;
  v3[38] = v3 + 39;
  v3[39] = 0;
  v3[40] = 0;
  v3[41] = 0;
  v3[43] = off_1022B6DB8;
  long long v4 = operator new(0x20uLL);
  v4[1] = 0;
  v4[2] = 0;
  *long long v4 = off_1022B6DF0;
  *((_DWORD *)v4 + 6) = 31337;
  a1[44] = v4 + 3;
  a1[45] = v4;
  a1[43] = off_1022C7F70;
  a1[46] = 0;
  sub_100EB2E6C();
}

void sub_100782CC8(_Unwind_Exception *a1)
{
  sub_100789878(v4);
  sub_100789C70((uint64_t *)(v1 + 328), 0);
  sub_100789B30(v1 + 304, *(void **)(v1 + 312));
  sub_100783674(v3);
  sub_1007899D4(v2, *(void **)(v1 + 168));
  uint64_t v7 = *(void *)(v1 + 152);
  *(void *)(v1 + 152) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(v1 + 144);
  *(void *)(v1 + 144) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(v1 + 136);
  *(void *)(v1 + 136) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(v1 + 128);
  *(void *)(v1 + 128) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *(void *)(v1 + 120);
  *(void *)(v1 + 120) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *v5;
  *long long v5 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  sub_1013362B8(v1);
  _Unwind_Resume(a1);
}

void sub_100782E88(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7FA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_100788030(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100783044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100783064(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7FA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    uint64_t v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1007876C0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100783220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100783240(uint64_t a1)
{
}

void sub_100783248(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 296))
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    uint64_t v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = *(unsigned __int8 *)(a1 + 297);
      BOOL v6 = *(void *)(a1 + 328) == 0;
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v8 = 2082;
      uint64_t v9 = "";
      __int16 v10 = 1026;
      int v11 = v5;
      __int16 v12 = 1026;
      BOOL v13 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"iB: Initializing\", \"unlocked\":%{public}d, \"awaiting\":%{public}d}", buf, 0x1Eu);
    }
    sub_1013C034C();
  }
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7FC0);
  }
  uint64_t v1 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "iB: Already initialized", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    uint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::unlockedInitialize()", "%s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

uint64_t sub_100783674(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1007836DC(uint64_t a1)
{
  *(void *)a1 = off_1022C7E08;
  sub_100783E90(a1);
  sub_100789878(a1 + 344);
  sub_100789C70((uint64_t *)(a1 + 328), 0);
  sub_100789B30(a1 + 304, *(void **)(a1 + 312));
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  sub_1007899D4(a1 + 160, *(void **)(a1 + 168));
  uint64_t v2 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return sub_1013362B8(a1);
}

void sub_1007838C4(uint64_t a1)
{
  sub_1007836DC(a1);

  operator delete();
}

void sub_1007838FC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7FA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onAuthorizationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onAuthorizationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1007862F4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100783AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100783AD8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7FA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onBeaconNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onBeaconNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10078594C(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100783C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100783CB4(uint64_t a1, _DWORD *a2, unsigned char *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7FA0);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBTLEFenceManagerConcrete::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    uint64_t v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      unint64_t v15 = "";
      __int16 v16 = 2082;
      unint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBTLEFenceManagerConcrete::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1007878B8(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100783E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100783E90(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }

  *(void *)(a1 + 336) = 0;
}

uint64_t sub_100783F7C(uint64_t a1, uint64_t a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7FC0);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    uint64_t v6 = *(void *)(a1 + 176);
    *(_DWORD *)std::string buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)int v13 = 2082;
    *(void *)&v13[2] = "";
    *(_WORD *)&_OWORD v13[10] = 2081;
    *(void *)&void v13[12] = v5;
    *(_WORD *)&v13[20] = 2050;
    *(void *)&v13[22] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Adding monitored region\", \"region\":%{private, location:escape_only}s, \"totalRegions\":%{public}lu}", buf, 0x26u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLBeaconFenceAuthorizationManager"), "syncgetRemoveFence:", a2];
  unsigned __int8 v7 = [[[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLBeaconFenceAuthorizationManager"] syncgetAddFence:a2];
  memset(v13, 0, sizeof(v13));
  *(void *)std::string buf = off_1022B3D98;
  memset(v14, 0, sizeof(v14));
  memset(&v15, 0, sizeof(v15));
  int v17 = 0;
  __int16 v18 = off_1022B3DE8;
  long long v19 = 0u;
  long long v20 = 0u;
  int v21 = 1;
  std::string::operator=((std::string *)v13, (const std::string *)(a2 + 8));
  *(void *)&v13[24] = *(void *)(a2 + 32);
  std::string::operator=(v14, (const std::string *)(a2 + 40));
  std::string::operator=(&v14[1], (const std::string *)(a2 + 64));
  std::string::operator=(&v15, (const std::string *)(a2 + 88));
  int v16 = *(_DWORD *)(a2 + 112);
  if (v7)
  {
    if (sub_1000FC450())
    {
      sub_1000E9354(v9);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      sub_1004D57AC((uint64_t)v9, "btle_fence_installed", (char *)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      sub_1000FC45C((uint64_t)v9, (uint64_t)"locationd");
      sub_10013F3C4(v9);
    }
    sub_100C83A4C(a2, (unsigned __int8 *)(a1 + 192), *(void **)(a1 + 32));
  }
  else
  {
    int v17 = 3;
  }
  LODWORD(__p[0]) = 0;
  (*(void (**)(uint64_t, void **, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, __p, buf, 0, 0xFFFFFFFFLL, 0);
  __int16 v18 = off_1022B3DE8;
  if (SBYTE7(v20) < 0) {
    operator delete((void *)v19);
  }
  return sub_100111F40((uint64_t)buf);
}

void sub_1007842CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t sub_10078431C(uint64_t a1)
{
  *(void *)(a1 + 128) = off_1022B3DE8;
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }

  return sub_100111F40(a1);
}

void sub_100784380(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v5 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLBeaconFenceAuthorizationManager"];
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (uint64_t *)*a2;
  }
  [v5 syncgetFences:a3 forBundle:[NSString stringWithUTF8String:v6]];
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7FC0);
  }
  unsigned __int8 v7 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = *(void *)(a3 + 16);
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = (uint64_t *)*a2;
    }
    v10[0] = 68289538;
    v10[1] = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2050;
    uint64_t v14 = v8;
    __int16 v15 = 2082;
    int v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Retrieved monitored regions\", \"numRegions\":%{public}lu, \"bundle\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x26u);
  }
}

BOOL sub_1007844D4(uint64_t a1, uint64_t a2)
{
  v4[0] = (uint64_t)v4;
  v4[1] = (uint64_t)v4;
  uint64_t v5 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)a1 + 224))(a1, a2, v4);
  BOOL v2 = v5 != 0;
  sub_10013415C(v4);
  return v2;
}

void sub_100784544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10013415C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100784558(uint64_t a1, uint64_t a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7FC0);
  }
  uint64_t v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
    uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
    uint64_t v6 = *(void *)(a1 + 176);
    *(_DWORD *)std::string buf = 68289539;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)__int16 v13 = 2082;
    *(void *)&v13[2] = "";
    *(_WORD *)&_OWORD v13[10] = 2081;
    *(void *)&void v13[12] = v5;
    *(_WORD *)&v13[20] = 2050;
    *(void *)&v13[22] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Removing monitored region\", \"region\":%{private, location:escape_only}s, \"totalRegions\":%{public}lu}", buf, 0x26u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  unsigned __int8 v7 = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLBeaconFenceAuthorizationManager"] syncgetRemoveFence:a2];
  memset(v13, 0, sizeof(v13));
  *(void *)std::string buf = off_1022B3D98;
  memset(v14, 0, sizeof(v14));
  memset(&v15, 0, sizeof(v15));
  int v17 = 0;
  __int16 v18 = off_1022B3DE8;
  long long v19 = 0u;
  long long v20 = 0u;
  int v21 = 1;
  std::string::operator=((std::string *)v13, (const std::string *)(a2 + 8));
  *(void *)&v13[24] = *(void *)(a2 + 32);
  std::string::operator=(v14, (const std::string *)(a2 + 40));
  std::string::operator=(&v14[1], (const std::string *)(a2 + 64));
  std::string::operator=(&v15, (const std::string *)(a2 + 88));
  int v16 = *(_DWORD *)(a2 + 112);
  if (v7)
  {
    if (sub_1000FC450())
    {
      sub_1000E9354(v9);
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(__p, a2);
      sub_1004D57AC((uint64_t)v9, "btle_fence_uninstalled", (char *)__p);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      sub_1000FC45C((uint64_t)v9, (uint64_t)"locationd");
      sub_10013F3C4(v9);
    }
    sub_100C83DF8(a2, *(void **)(a1 + 32));
  }
  else
  {
    int v17 = 3;
  }
  LODWORD(__p[0]) = 1;
  (*(void (**)(uint64_t, void **, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, __p, buf, 0, 0xFFFFFFFFLL, 0);
  __int16 v18 = off_1022B3DE8;
  if (SBYTE7(v20) < 0) {
    operator delete((void *)v19);
  }
  return sub_100111F40((uint64_t)buf);
}

void sub_100784888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t sub_1007848D8(uint64_t a1, uint64_t a2)
{
  id v4 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLBeaconFenceAuthorizationManager"];
  if (*(char *)(a2 + 63) >= 0) {
    uint64_t v5 = a2 + 40;
  }
  else {
    uint64_t v5 = *(void *)(a2 + 40);
  }
  uint64_t v6 = +[NSString stringWithUTF8String:v5];
  if (*(char *)(a2 + 87) >= 0) {
    uint64_t v7 = a2 + 64;
  }
  else {
    uint64_t v7 = *(void *)(a2 + 64);
  }
  unsigned int v8 = [v4 syncgetCanBundle:v6 performFenceOperationFor:[NSString stringWithUTF8String:v7]];
  if (v8)
  {
    unsigned int v9 = v8;
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    __int16 v10 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
      char v11 = SHIBYTE(v37[1]) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 67240451;
      *(_DWORD *)&uint8_t buf[4] = v9;
      LOWORD(v48) = 2081;
      *(void *)((char *)&v48 + 2) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#Warning Authorization error,%{public}d, while requesting state for region,%{private}s", buf, 0x12u);
      if (SHIBYTE(v37[1]) < 0) {
        operator delete(__p);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7FC0);
      }
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a2 + 16))(buf, a2);
      if (v48 >= 0) {
        unsigned int v23 = buf;
      }
      else {
        unsigned int v23 = *(uint8_t **)buf;
      }
      *(_DWORD *)BOOL v30 = 67240451;
      *(_DWORD *)&v30[4] = v9;
      *(_WORD *)&v30[8] = 2081;
      *(void *)&v30[10] = v23;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      if (SHIBYTE(v48) < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::requestRegionState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v24);
      if (v24 != (char *)&__p) {
        free(v24);
      }
    }
    long long v38 = 0u;
    *(_OWORD *)unint64_t v37 = 0u;
    long long __p = off_1022B3D98;
    memset(v39, 0, sizeof(v39));
    memset(&v40, 0, sizeof(v40));
    int v42 = 0;
    char v43 = off_1022B3DE8;
    long long v44 = 0u;
    long long v45 = 0u;
    int v46 = 1;
    std::string::operator=((std::string *)v37, (const std::string *)(a2 + 8));
    *((void *)&v38 + 1) = *(void *)(a2 + 32);
    std::string::operator=(v39, (const std::string *)(a2 + 40));
    std::string::operator=(&v39[1], (const std::string *)(a2 + 64));
    std::string::operator=(&v40, (const std::string *)(a2 + 88));
    int v12 = *(_DWORD *)(a2 + 112);
    int v46 = 1;
    if (v9 == 2) {
      int v13 = 2;
    }
    else {
      int v13 = 3;
    }
    if (v9 == 1) {
      int v13 = 1;
    }
    int v41 = v12;
    int v42 = v13;
    *(_DWORD *)std::string buf = 3;
    (*(void (**)(uint64_t, uint8_t *, void **, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &__p, 0, 0xFFFFFFFFLL, 0);
    char v43 = off_1022B3DE8;
    if (SBYTE7(v45) < 0) {
      operator delete((void *)v44);
    }
    p_p = &__p;
  }
  else
  {
    long long v49 = 0u;
    long long v48 = 0u;
    memset(v50, 0, sizeof(v50));
    memset(&v51, 0, sizeof(v51));
    *(void *)std::string buf = off_1022B3D98;
    int v53 = 0;
    char v54 = off_1022B3DE8;
    long long v55 = 0u;
    long long v56 = 0u;
    int v57 = 1;
    std::string::operator=((std::string *)&v48, (const std::string *)(a2 + 8));
    *((void *)&v49 + 1) = *(void *)(a2 + 32);
    std::string::operator=(v50, (const std::string *)(a2 + 40));
    std::string::operator=(&v50[1], (const std::string *)(a2 + 64));
    std::string::operator=(&v51, (const std::string *)(a2 + 88));
    int v52 = *(_DWORD *)(a2 + 112);
    long long __p = off_1022B3DE8;
    if (*(char *)(a2 + 31) < 0)
    {
      sub_1000DC48C(v37, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)unint64_t v37 = *(_OWORD *)(a2 + 8);
      *(void *)&long long v38 = *(void *)(a2 + 24);
    }
    *((void *)&v38 + 1) = *(void *)(a2 + 32);
    std::string v15 = sub_10078AD94(a1 + 160, (uint64_t)&__p);
    long long __p = off_1022B3DE8;
    if (SBYTE7(v38) < 0) {
      operator delete(v37[0]);
    }
    if ((void *)(a1 + 168) == v15)
    {
      uint64_t v19 = *(void *)(a1 + 328);
      if (v19)
      {
        int v57 = sub_10076EAFC(v19, a2);
      }
      else
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1022C7FC0);
        }
        long long v20 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
          int v21 = SHIBYTE(v37[1]) >= 0 ? &__p : (void **)__p;
          *(_DWORD *)BOOL v30 = 136380675;
          *(void *)&v30[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning Unable to find region,%{private}s, in the cache", v30, 0xCu);
          if (SHIBYTE(v37[1]) < 0) {
            operator delete(__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1022C7FC0);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(v30, a2);
          if (v31 >= 0) {
            uint64_t v28 = v30;
          }
          else {
            uint64_t v28 = *(unsigned char **)v30;
          }
          int v32 = 136380675;
          uint64_t v33 = v28;
          __int16 v29 = (char *)_os_log_send_and_compose_impl();
          if (v31 < 0) {
            operator delete(*(void **)v30);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::requestRegionState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v29);
          if (v29 != (char *)&__p) {
            free(v29);
          }
        }
        int v57 = 1;
        int v53 = 3;
      }
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7FC0);
      }
      int v16 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
        int v17 = SHIBYTE(v37[1]) >= 0 ? &__p : (void **)__p;
        int v18 = *((_DWORD *)v15 + 24);
        *(_DWORD *)BOOL v30 = 136380931;
        *(void *)&v30[4] = v17;
        *(_WORD *)&v30[12] = 1025;
        *(_DWORD *)&v30[14] = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "iB: Region,%{private}s, has state,%{private}d", v30, 0x12u);
        if (SHIBYTE(v37[1]) < 0) {
          operator delete(__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1022C7FC0);
        }
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a2 + 16))(v30, a2);
        if (v31 >= 0) {
          uint64_t v25 = v30;
        }
        else {
          uint64_t v25 = *(unsigned char **)v30;
        }
        int v26 = *((_DWORD *)v15 + 24);
        int v32 = 136380931;
        uint64_t v33 = v25;
        __int16 v34 = 1025;
        int v35 = v26;
        char v27 = (char *)_os_log_send_and_compose_impl();
        if (v31 < 0) {
          operator delete(*(void **)v30);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::requestRegionState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)", "%s\n", v27);
        if (v27 != (char *)&__p) {
          free(v27);
        }
      }
      int v57 = *((_DWORD *)v15 + 24);
    }
    LODWORD(__p) = 3;
    (*(void (**)(uint64_t, void **, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &__p, buf, 0, 0xFFFFFFFFLL, 0);
    char v54 = off_1022B3DE8;
    if (SBYTE7(v56) < 0) {
      operator delete((void *)v55);
    }
    p_p = buf;
  }
  return sub_100111F40((uint64_t)p_p);
}

void sub_1007852D4(_Unwind_Exception *a1)
{
}

uint64_t sub_100785340(uint64_t a1, uint64_t a2)
{
  id v4 = +[NSMutableSet set];
  uint64_t v5 = *(void **)(a1 + 160);
  uint64_t v6 = (void *)(a1 + 168);
  if (v5 != v6)
  {
    do
    {
      if (*((_DWORD *)v5 + 24) == 2)
      {
        uint64_t v7 = (void *)v5[9];
        if (v7 != v5 + 10)
        {
          do
          {
            if ((v7[18] & 5) != 0)
            {
              unsigned int v8 = v7 + 9;
              if (*((char *)v7 + 95) < 0) {
                unsigned int v8 = (void *)*v8;
              }
              [v4 addObject:[NSString stringWithUTF8String:v8]];
            }
            unsigned int v9 = (void *)v7[1];
            if (v9)
            {
              do
              {
                __int16 v10 = v9;
                unsigned int v9 = (void *)*v9;
              }
              while (v9);
            }
            else
            {
              do
              {
                __int16 v10 = (void *)v7[2];
                BOOL v11 = *v10 == (void)v7;
                uint64_t v7 = v10;
              }
              while (!v11);
            }
            uint64_t v7 = v10;
          }
          while (v10 != v5 + 10);
        }
      }
      int v12 = (void *)v5[1];
      if (v12)
      {
        do
        {
          int v13 = v12;
          int v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (void *)v5[2];
          BOOL v11 = *v13 == (void)v5;
          uint64_t v5 = v13;
        }
        while (!v11);
      }
      uint64_t v5 = v13;
    }
    while (v13 != v6);
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, id))(a2 + 16);

  return v14(a2, v4);
}

uint64_t sub_100785480()
{
  return 1;
}

void sub_100785488(uint64_t a1, const std::string *a2, int a3, int a4, int a5)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7FC0);
  }
  __int16 v10 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v11 = a2;
    }
    else {
      BOOL v11 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    char v31 = v11;
    __int16 v32 = 1024;
    int v33 = a3;
    __int16 v34 = 1024;
    int v35 = a4;
    __int16 v36 = 1024;
    int v37 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "@iB: Simulating Beacon : %s.%d.%d  RegionState : %d", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v15 = a2;
    }
    else {
      std::string v15 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int v21 = 136315906;
    *(void *)&v21[4] = v15;
    *(_WORD *)&v21[12] = 1024;
    *(_DWORD *)&v21[14] = a3;
    *(_WORD *)&v21[18] = 1024;
    *(_DWORD *)&v21[20] = a4;
    LOWORD(v22) = 1024;
    *(_DWORD *)((char *)&v22 + 2) = a5;
    int v16 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::simulateBeaconEvent(const std::string &, int, int, CLBTLEBeaconRegion_Type::RegionStates)", "%s\n", v16);
    if (v16 != (char *)buf) {
      free(v16);
    }
  }
  int v20 = 1;
  *(void *)int v21 = v21;
  *(void *)&std::string::value_type v21[8] = v21;
  *(void *)&v21[16] = 0;
  char v22 = off_1022B3DE8;
  *(_OWORD *)unsigned int v23 = 0u;
  long long v24 = 0u;
  uint64_t v25 = off_1022B3DE8;
  long long v26 = 0u;
  long long v27 = 0u;
  char v29 = 1;
  if (a5 == 4) {
    int v12 = 4;
  }
  else {
    int v12 = 1;
  }
  if (a5 == 2) {
    int v12 = 2;
  }
  int v28 = v12;
  *(_OWORD *)long long __p = 0uLL;
  long long v19 = 0uLL;
  std::string::operator=((std::string *)__p, a2);
  WORD4(v19) = a3;
  WORD5(v19) = a4;
  HIDWORD(v19) = 7;
  std::string::operator=((std::string *)v23, (const std::string *)__p);
  *((void *)&v24 + 1) = *((void *)&v19 + 1);
  sub_10078594C(a1, v13, &v20, (uint64_t)v21);
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7FC0);
  }
  uint64_t v14 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "@iB: Simulating Beacon : beacon notification sent", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    int v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLBTLEFenceManagerConcrete::simulateBeaconEvent(const std::string &, int, int, CLBTLEBeaconRegion_Type::RegionStates)", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  if (SBYTE7(v19) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v25 = off_1022B3DE8;
  if (SBYTE7(v27) < 0) {
    operator delete((void *)v26);
  }
  char v22 = off_1022B3DE8;
  if (SBYTE7(v24) < 0) {
    operator delete(v23[0]);
  }
  sub_1007898E8((uint64_t *)v21);
}

void sub_100785918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_100786268((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_10078594C(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 != 1) {
    return result;
  }
  uint64_t v5 = result;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  memset(&v57, 0, sizeof(v57));
  std::string v51 = off_1022B3D98;
  int v59 = 0;
  unsigned int v60 = off_1022B3DE8;
  long long __src = 0u;
  long long v62 = 0u;
  int v6 = *(_DWORD *)(a4 + 104);
  if (v6 == 4) {
    goto LABEL_6;
  }
  if (v6 != 2)
  {
    int v6 = 1;
LABEL_6:
    LODWORD(v63) = v6;
    goto LABEL_7;
  }
  LODWORD(v63) = 2;
  std::string::operator=((std::string *)&__src, (const std::string *)(a4 + 72));
  *((void *)&v62 + 1) = *(void *)(a4 + 96);
LABEL_7:
  uint64_t v7 = a4 + 24;
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7FC0);
  }
  unsigned int v8 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 16))(__p, a4 + 24);
    int v9 = v50;
    __int16 v10 = (void **)__p[0];
    uint64_t v65 = a4 + 24;
    int v11 = *((_DWORD *)sub_10078B1FC((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101D0B290, &v65) + 24);
    int v12 = __p;
    if (v9 < 0) {
      int v12 = v10;
    }
    uint64_t v13 = *(void *)(v5 + 176);
    *(_DWORD *)std::string buf = 68290051;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)unint64_t v67 = 2082;
    *(void *)&v67[2] = "";
    *(_WORD *)&v67[10] = 2081;
    *(void *)&v67[12] = v12;
    __int16 v68 = 1025;
    int v69 = v11;
    __int16 v70 = 1025;
    int v71 = v63;
    __int16 v72 = 2050;
    uint64_t v73 = v13;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Zone state transition\", \"region\":%{private, location:escape_only}s, \"fromState\":%{private}d, \"toState\":%{private}d, \"totalRegions\":%{public}lu}", buf, 0x32u);
    if (v50 < 0) {
      operator delete(__p[0]);
    }
  }
  *(void *)std::string buf = a4 + 24;
  int v14 = *((_DWORD *)sub_10078B1FC((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101D0B290, (uint64_t *)buf) + 24);
  int v15 = v63;
  BOOL v16 = v14 == 1 || v63 == 1;
  int v40 = v63;
  if (v16)
  {
    BOOL v39 = 0;
  }
  else
  {
    *(void *)std::string buf = a4 + 24;
    int v17 = sub_10078B1FC((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101D0B290, (uint64_t *)buf);
    int v15 = v63;
    BOOL v39 = *((_DWORD *)v17 + 24) != v63;
  }
  *(void *)std::string buf = a4 + 24;
  *((_DWORD *)sub_10078B1FC((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101D0B290, (uint64_t *)buf) + 24) = v15;
  v64[0] = *(_DWORD *)(a4 + 108);
  *(void *)std::string buf = a4 + 24;
  int v18 = (uint64_t *)sub_10078B1FC((uint64_t **)(v5 + 160), a4 + 24, (uint64_t)&unk_101D0B290, (uint64_t *)buf)[9];
  BOOL v20 = v14 != 1 || v40 == 1;
  BOOL v38 = v20;
  while (1)
  {
    int v21 = v18;
    *(void *)std::string buf = v7;
    if (v18 == sub_10078B1FC((uint64_t **)(v5 + 160), v7, (uint64_t)&unk_101D0B290, (uint64_t *)buf) + 10) {
      break;
    }
    std::string::operator=((std::string *)&v52, (const std::string *)(v21 + 5));
    *((void *)&v53 + 1) = v21[8];
    std::string::operator=((std::string *)&v54, (const std::string *)v21 + 3);
    std::string::operator=((std::string *)((char *)&v55 + 8), (const std::string *)v21 + 4);
    std::string::operator=(&v57, (const std::string *)v21 + 5);
    int v58 = *((_DWORD *)v21 + 36);
    sub_100C8416C((uint64_t)&v51, (unsigned __int8 *)(v5 + 192));
    if (v39)
    {
      if (int v22 = *((_DWORD *)v21 + 36), (v22) && v63 == 2 || (v22 & 2) != 0 && v63 == 4)
      {
        *(void *)std::string buf = buf;
        *(void *)unint64_t v67 = buf;
        *(void *)&v67[8] = 0;
        id v23 = [objc_msgSend(*(id *)(v5 + 32), "vendor") proxyForService:@"CLBeaconFenceAuthorizationManager"];
        if ((SBYTE7(v55) & 0x80u) == 0) {
          long long v24 = &v54;
        }
        else {
          long long v24 = (long long *)v54;
        }
        uint64_t v25 = +[NSString stringWithUTF8String:v24];
        if (v56 >= 0) {
          long long v26 = (char *)&v55 + 8;
        }
        else {
          long long v26 = (char *)*((void *)&v55 + 1);
        }
        [v23 syncgetFences:buf forBundle:v25 onBehalfOf:[NSString stringWithUTF8String:v26]];
        HIDWORD(v63) = *(_DWORD *)&v67[8];
        sub_10013415C((uint64_t *)buf);
        *(void *)std::string buf = v21 + 4;
        long long v27 = sub_10078B7E8((uint64_t **)(v5 + 304), (uint64_t)(v21 + 4), (uint64_t)&unk_101D0B290, (uint64_t *)buf);
        *(void *)std::string buf = CFAbsoluteTimeGetCurrent();
        LODWORD(__p[0]) = 0;
        int v28 = sub_10078B970((uint64_t)(v27 + 19), 0, 0, (int *)&v63, (uint64_t)&v60, (int *)&v63 + 1, v64, (double *)buf, (int *)__p);
        v28[1] = v27 + 19;
        uint64_t v29 = v27[19];
        *int v28 = v29;
        *(void *)(v29 + 8) = v28;
        v27[19] = (uint64_t)v28;
        ++v27[21];
        BOOL v30 = *(void **)(v5 + 336);
        if ((SBYTE7(v55) & 0x80u) == 0) {
          char v31 = &v54;
        }
        else {
          char v31 = (long long *)v54;
        }
        __int16 v32 = +[NSString stringWithUTF8String:v31];
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3321888768;
        v41[2] = sub_100787410;
        v41[3] = &unk_1022C7F18;
        v41[4] = v5;
        sub_10048B9C8((uint64_t)v42, (uint64_t)&v51);
        v42[30] = v59;
        char v43 = off_1022B3DE8;
        if (SBYTE7(v62) < 0)
        {
          sub_1000DC48C(&v44, (void *)__src, *((unint64_t *)&__src + 1));
        }
        else
        {
          long long v44 = __src;
          uint64_t v45 = v62;
        }
        uint64_t v46 = *((void *)&v62 + 1);
        uint64_t v47 = v63;
        int v48 = v64[0];
        [v30 handleProvisionalIntermediationForService:0 forClientKey:v32 at:0 withReply:v41];
        char v43 = off_1022B3DE8;
        int v33 = v40;
        if (SHIBYTE(v45) < 0) {
          operator delete((void *)v44);
        }
        sub_100111F40((uint64_t)v42);
LABEL_50:
        if (v33 == 1) {
          goto LABEL_58;
        }
        goto LABEL_51;
      }
    }
    int v33 = v40;
    if (v38) {
      goto LABEL_50;
    }
    *(_DWORD *)std::string buf = 3;
    (*(void (**)(uint64_t, uint8_t *, uint64_t (***)(), void, uint64_t, void))(*(void *)v5 + 152))(v5, buf, &v51, 0, 0xFFFFFFFFLL, 0);
LABEL_51:
    uint64_t v34 = *(void *)(v5 + 328);
    if (v34)
    {
      sub_10076CDE4(v34, (uint64_t)(v21 + 4), v63);
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7FC0);
      }
      int v35 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning iB: state changed before first unlock", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1022C7FC0);
        }
        LOWORD(__p[0]) = 0;
        int v37 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)", "%s\n", v37);
        if (v37 != (char *)buf) {
          free(v37);
        }
      }
    }
LABEL_58:
    __int16 v36 = (uint64_t *)v21[1];
    if (v36)
    {
      do
      {
        int v18 = v36;
        __int16 v36 = (uint64_t *)*v36;
      }
      while (v36);
    }
    else
    {
      do
      {
        int v18 = (uint64_t *)v21[2];
        BOOL v16 = *v18 == (void)v21;
        int v21 = v18;
      }
      while (!v16);
    }
  }
  unsigned int v60 = off_1022B3DE8;
  if (SBYTE7(v62) < 0) {
    operator delete((void *)__src);
  }
  return sub_100111F40((uint64_t)&v51);
}

void sub_1007861E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,char a60)
{
}

uint64_t sub_100786268(uint64_t a1)
{
  *(void *)(a1 + 64) = off_1022B3DE8;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  *(void *)(a1 + 24) = off_1022B3DE8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  sub_1007898E8((uint64_t *)a1);
  return a1;
}

uint64_t sub_1007862F4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 8);
  if (v6 != a4)
  {
    uint64_t v7 = (uint64_t **)(a1 + 160);
    int v41 = (void *)(a1 + 168);
    while (1)
    {
      int v42 = off_1022B3DE8;
      if (*(char *)(v6 + 47) < 0) {
        sub_1000DC48C(&v43, *(void **)(v6 + 24), *(void *)(v6 + 32));
      }
      else {
        std::string v43 = *(std::string *)(v6 + 24);
      }
      uint64_t v8 = v6 + 16;
      uint64_t v44 = *(void *)(v6 + 48);
      if (*a3 == 1) {
        break;
      }
      if (!*a3)
      {
        int v9 = sub_10078AD94((uint64_t)v7, (uint64_t)&v42);
        if (v41 == v9 || !sub_10078AF58((uint64_t)(v9 + 9), v6 + 16))
        {
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1022C7FC0);
          }
          int v21 = qword_102419398;
          if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v8 + 16))(buf, v6 + 16);
            int v22 = buf;
            if (buf[23] < 0) {
              int v22 = *(unsigned char **)buf;
            }
            long long __p = (void *)68289283;
            __int16 v50 = 2082;
            std::string v51 = "";
            __int16 v52 = 2081;
            long long v53 = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Resuming monitoring for fence\", \"region\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          *(void *)std::string buf = off_1022B3DE8;
          *(_OWORD *)&uint8_t buf[8] = 0u;
          long long v55 = 0u;
          std::string::operator=((std::string *)&buf[8], &v43);
          *((void *)&v55 + 1) = v44;
          if ((objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLBTLEBeaconProvider"), "syncgetAddProximityZone:", buf) & 1) == 0)
          {
            if (qword_102419390 != -1) {
              dispatch_once(&qword_102419390, &stru_1022C7FC0);
            }
            id v23 = qword_102419398;
            if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
            {
              (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 16))(&__p, v6 + 16);
              p_p = &__p;
              if (SBYTE3(v53) < 0) {
                p_p = __p;
              }
              *(_DWORD *)uint64_t v45 = 136380675;
              *(void *)&v45[4] = p_p;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Unable to monitor the zone for region,%{private}s", v45, 0xCu);
              if (SBYTE3(v53) < 0) {
                operator delete(__p);
              }
            }
            if (sub_10013D1A0(115, 0))
            {
              bzero(&__p, 0x65CuLL);
              if (qword_102419390 != -1) {
                dispatch_once(&qword_102419390, &stru_1022C7FC0);
              }
              (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v8 + 16))(v45, v6 + 16);
              uint64_t v34 = v45;
              if (v46 < 0) {
                uint64_t v34 = *(unsigned char **)v45;
              }
              int v47 = 136380675;
              int v48 = v34;
              int v35 = (char *)_os_log_send_and_compose_impl();
              if (v46 < 0) {
                operator delete(*(void **)v45);
              }
              sub_1004BA5E4("Generic", 1, 0, 0, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v35);
              if (v35 != (char *)&__p) {
                free(v35);
              }
            }
          }
          long long __p = &v42;
          uint64_t v25 = sub_10078B1FC(v7, (uint64_t)&v42, (uint64_t)&unk_101D0B290, (uint64_t *)&__p);
          sub_10078B488((uint64_t **)v25 + 9, v6 + 16, v6 + 16);
          long long __p = &v42;
          if (*((_DWORD *)sub_10078B1FC(v7, (uint64_t)&v42, (uint64_t)&unk_101D0B290, (uint64_t *)&__p) + 24) != 1) {
            goto LABEL_96;
          }
          uint64_t v26 = *(void *)(a1 + 328);
          if (v26)
          {
            int v27 = sub_10076EAFC(v26, v6 + 16);
            long long __p = &v42;
            *((_DWORD *)sub_10078B1FC(v7, (uint64_t)&v42, (uint64_t)&unk_101D0B290, (uint64_t *)&__p) + 24) = v27;
LABEL_96:
            *(void *)std::string buf = off_1022B3DE8;
            if (SBYTE7(v55) < 0) {
              operator delete(*(void **)&buf[8]);
            }
            goto LABEL_98;
          }
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1022C7FC0);
          }
          char v31 = qword_102419398;
          if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#Warning iB: state kNotificationFenceResume, before first unlock", (uint8_t *)&__p, 2u);
          }
          if (!sub_10013D1A0(115, 2)) {
            goto LABEL_96;
          }
          bzero(&__p, 0x65CuLL);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1022C7FC0);
          }
          *(_WORD *)uint64_t v45 = 0;
          __int16 v32 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v32);
          goto LABEL_121;
        }
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1022C7FC0);
        }
        __int16 v10 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 16))(&__p, v6 + 16);
          int v11 = &__p;
          if (SBYTE3(v53) < 0) {
            int v11 = __p;
          }
          *(_DWORD *)std::string buf = 136380675;
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "iB: Already resumed monitoring for fence,%{private}s", buf, 0xCu);
          if (SBYTE3(v53) < 0) {
            operator delete(__p);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1022C7FC0);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v8 + 16))(buf, v6 + 16);
          int v12 = buf;
          if (buf[23] < 0) {
            int v12 = *(unsigned char **)buf;
          }
          *(_DWORD *)uint64_t v45 = 136380675;
          *(void *)&v45[4] = v12;
          uint64_t v13 = (char *)_os_log_send_and_compose_impl();
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
LABEL_81:
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v13);
          if (v13 != (char *)&__p) {
            free(v13);
          }
        }
      }
LABEL_98:
      int v42 = off_1022B3DE8;
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = *(void *)(v6 + 8);
      if (v6 == a4) {
        goto LABEL_123;
      }
    }
    int v14 = sub_10078AD94((uint64_t)v7, (uint64_t)&v42);
    if (v41 != v14 && sub_10078AF58((uint64_t)(v14 + 9), v6 + 16))
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7FC0);
      }
      int v15 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
      {
        (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v8 + 16))(buf, v6 + 16);
        BOOL v16 = buf;
        if (buf[23] < 0) {
          BOOL v16 = *(unsigned char **)buf;
        }
        long long __p = (void *)68289283;
        __int16 v50 = 2082;
        std::string v51 = "";
        __int16 v52 = 2081;
        long long v53 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Suspending monitoring for fence\", \"region\":%{private, location:escape_only}s}", (uint8_t *)&__p, 0x1Cu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      *(void *)std::string buf = off_1022B3DE8;
      *(_OWORD *)&uint8_t buf[8] = 0u;
      long long v55 = 0u;
      std::string::operator=((std::string *)&buf[8], &v43);
      *((void *)&v55 + 1) = v44;
      if ((objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLBTLEBeaconProvider"), "syncgetRemoveProximityZone:", buf) & 1) == 0)
      {
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1022C7FC0);
        }
        int v17 = qword_102419398;
        if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_FAULT))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 16))(&__p, v6 + 16);
          int v18 = &__p;
          if (SBYTE3(v53) < 0) {
            int v18 = __p;
          }
          *(_DWORD *)uint64_t v45 = 136380675;
          *(void *)&v45[4] = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Unable to unmonitor the zone for fence,%{private}s", v45, 0xCu);
          if (SBYTE3(v53) < 0) {
            operator delete(__p);
          }
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(&__p, 0x65CuLL);
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1022C7FC0);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v8 + 16))(v45, v6 + 16);
          __int16 v36 = v45;
          if (v46 < 0) {
            __int16 v36 = *(unsigned char **)v45;
          }
          int v47 = 136380675;
          int v48 = v36;
          int v37 = (char *)_os_log_send_and_compose_impl();
          if (v46 < 0) {
            operator delete(*(void **)v45);
          }
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v37);
          if (v37 != (char *)&__p) {
            free(v37);
          }
        }
      }
      long long __p = &v42;
      long long v19 = sub_10078B1FC(v7, (uint64_t)&v42, (uint64_t)&unk_101D0B290, (uint64_t *)&__p);
      sub_10078B694((uint64_t **)v19 + 9, v6 + 16);
      long long __p = &v42;
      if (!sub_10078B1FC(v7, (uint64_t)&v42, (uint64_t)&unk_101D0B290, (uint64_t *)&__p)[11]) {
        sub_10078B78C(v7, (uint64_t)&v42);
      }
      if (!*(unsigned char *)(a4 + 28)) {
        goto LABEL_96;
      }
      uint64_t v20 = *(void *)(a1 + 328);
      if (v20)
      {
        sub_10076D9DC(v20, v6 + 16);
        goto LABEL_96;
      }
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7FC0);
      }
      int v33 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "iB: state kNotificationFenceSuspend, before first unlock", (uint8_t *)&__p, 2u);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_96;
      }
      bzero(&__p, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7FC0);
      }
      *(_WORD *)uint64_t v45 = 0;
      __int16 v32 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)", "%s\n", v32);
LABEL_121:
      if (v32 != (char *)&__p) {
        free(v32);
      }
      goto LABEL_96;
    }
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    int v28 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v8 + 16))(&__p, v6 + 16);
      uint64_t v29 = &__p;
      if (SBYTE3(v53) < 0) {
        uint64_t v29 = __p;
      }
      *(_DWORD *)std::string buf = 136380675;
      *(void *)&uint8_t buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "iB: Fence,%{private}s, is not being monitored, the suspension request will be ignored", buf, 0xCu);
      if (SBYTE3(v53) < 0) {
        operator delete(__p);
      }
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_98;
    }
    bzero(&__p, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v8 + 16))(buf, v6 + 16);
    BOOL v30 = buf;
    if (buf[23] < 0) {
      BOOL v30 = *(unsigned char **)buf;
    }
    *(_DWORD *)uint64_t v45 = 136380675;
    *(void *)&v45[4] = v30;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_81;
  }
LABEL_123:
  uint64_t result = sub_1000FC450();
  if (result)
  {
    sub_1000E9354(&v42);
    uint64_t v39 = *(void *)(a4 + 8);
    if (v39 != a4)
    {
      while (*a3 != 1)
      {
        if (!*a3)
        {
          (*(void (**)(void **__return_ptr))(*(void *)(v39 + 16) + 16))(&__p);
          sub_1004D57AC((uint64_t)&v42, "btle_fence_resume", (char *)&__p);
          goto LABEL_129;
        }
LABEL_131:
        uint64_t v39 = *(void *)(v39 + 8);
        if (v39 == a4) {
          goto LABEL_132;
        }
      }
      (*(void (**)(void **__return_ptr))(*(void *)(v39 + 16) + 16))(&__p);
      sub_1004D57AC((uint64_t)&v42, "btle_fence_suspend", (char *)&__p);
LABEL_129:
      if (SBYTE3(v53) < 0) {
        operator delete(__p);
      }
      goto LABEL_131;
    }
LABEL_132:
    sub_1000FC45C((uint64_t)&v42, (uint64_t)"locationd");
    return sub_10013F3C4(&v42);
  }
  return result;
}

void sub_100787348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  *(void *)(v38 - 144) = v37;
  if (*(char *)(v38 - 113) < 0) {
    operator delete(*(void **)(v38 - 136));
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id **sub_100787410(id **result, int a2)
{
  if (a2)
  {
    BOOL v2 = result;
    uint64_t v3 = result[4];
    v8[0] = 2;
    (*((void (**)(id *, _DWORD *, id **, void, uint64_t, void))*v3 + 19))(v3, v8, result + 5, 0, 0xFFFFFFFFLL, 0);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    id v4 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v2 + 10;
      if (*((char *)v2 + 103) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      v8[0] = 68289283;
      v8[1] = 0;
      __int16 v9 = 2082;
      __int16 v10 = "";
      __int16 v11 = 2081;
      int v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Launching application for notification (if necessary)\", \"bundle\":%{private, location:escape_only}s}", (uint8_t *)v8, 0x1Cu);
    }
    id v6 = [[[v3[4] vendor] proxyForService:@"CLApplicationLifecycleManager"];
    uint64_t v7 = v2 + 10;
    if (*((char *)v2 + 103) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    return (id **)[v6 launchApplication:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7) requiringAuthForServiceMask:1];
  }
  return result;
}

unsigned char *sub_1007875A0(uint64_t a1, uint64_t a2)
{
  sub_10048B9C8(a1 + 40, a2 + 40);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(void *)(a1 + 168) = off_1022B3DE8;
  uint64_t result = (unsigned char *)(a1 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a2 + 176), *(void *)(a2 + 184));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)uint64_t result = v5;
  }
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v6 = *(void *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(void *)(a1 + 208) = v6;
  return result;
}

void sub_100787648(_Unwind_Exception *a1)
{
  sub_100111F40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10078765C(uint64_t a1)
{
  *(void *)(a1 + 168) = off_1022B3DE8;
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }

  return sub_100111F40(a1 + 40);
}

void sub_1007876C0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 4 && *(_DWORD *)(a4 + 188) == 0)
  {
    uint64_t v6 = *(void *)(a1 + 328);
    if (v6)
    {
      sub_10076CA18(v6);
    }
    else
    {
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7FC0);
      }
      uint64_t v7 = qword_102419398;
      if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "iB: Warning data can't be cleared yet", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419390 != -1) {
          dispatch_once(&qword_102419390, &stru_1022C7FC0);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
      *(unsigned char *)(a1 + 298) = 1;
    }
  }
}

void sub_1007878B8(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned char *a4)
{
  BOOL v4 = *a3 != 10 || *a4 == 0;
  if (!v4)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    long long v5 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)int v33 = 2082;
      *(void *)&unsigned int v33[2] = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Received display on notification\"}", buf, 0x12u);
    }
    v31[0] = 0;
    v31[1] = 0;
    BOOL v30 = v31;
    uint64_t v6 = *(void **)(a1 + 160);
    if (v6 != (void *)(a1 + 168))
    {
      do
      {
        if (*((_DWORD *)v6 + 24) == 2)
        {
          uint64_t v7 = (void *)v6[9];
          if (v7 != v6 + 10)
          {
            do
            {
              if ((v7[18] & 4) != 0)
              {
                if (qword_102419390 != -1) {
                  dispatch_once(&qword_102419390, &stru_1022C7FC0);
                }
                uint64_t v8 = qword_102419398;
                if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
                {
                  (*(void (**)(void **__return_ptr, void *))(v7[4] + 16))(__p, v7 + 4);
                  __int16 v9 = __p;
                  if (v29 < 0) {
                    __int16 v9 = (void **)__p[0];
                  }
                  *(_DWORD *)std::string buf = 68289283;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)int v33 = 2082;
                  *(void *)&unsigned int v33[2] = "";
                  *(_WORD *)&v33[10] = 2081;
                  *(void *)&v33[12] = v9;
                  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Display turned on, notifying region\", \"region\":%{private, location:escape_only}s}", buf, 0x1Cu);
                  if (v29 < 0) {
                    operator delete(__p[0]);
                  }
                }
                memset(v33, 0, sizeof(v33));
                *(void *)std::string buf = off_1022B3D98;
                memset(v34, 0, sizeof(v34));
                memset(&v35, 0, sizeof(v35));
                int v37 = 0;
                uint64_t v38 = off_1022B3DE8;
                long long v39 = 0u;
                long long v40 = 0u;
                v41[0] = 1;
                std::string::operator=((std::string *)v33, (const std::string *)(v7 + 5));
                *(void *)&v33[24] = v7[8];
                std::string::operator=(v34, (const std::string *)v7 + 3);
                std::string::operator=(&v34[1], (const std::string *)v7 + 4);
                std::string::operator=(&v35, (const std::string *)v7 + 5);
                int v36 = *((_DWORD *)v7 + 36);
                v41[0] = 2;
                LODWORD(__p[0]) = 3;
                (*(void (**)(uint64_t, void **, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, __p, buf, 0, 0xFFFFFFFFLL, 0);
                __p[0] = v7 + 4;
                __int16 v10 = sub_10078B7E8((uint64_t **)(a1 + 304), (uint64_t)(v7 + 4), (uint64_t)&unk_101D0B290, (uint64_t *)__p);
                int v26 = -1;
                int v27 = -1;
                __p[0] = COERCE_VOID_(CFAbsoluteTimeGetCurrent());
                int v25 = 1;
                __int16 v11 = sub_10078B970((uint64_t)(v10 + 19), 0, 0, v41, (uint64_t)&v38, &v27, &v26, (double *)__p, &v25);
                v11[1] = v10 + 19;
                uint64_t v12 = v10[19];
                void *v11 = v12;
                *(void *)(v12 + 8) = v11;
                v10[19] = (uint64_t)v11;
                ++v10[21];
                sub_10010702C((uint64_t **)&v30, (const void **)v7 + 9, (uint64_t)(v7 + 9));
                uint64_t v38 = off_1022B3DE8;
                if (SBYTE7(v40) < 0) {
                  operator delete((void *)v39);
                }
                sub_100111F40((uint64_t)buf);
              }
              uint64_t v13 = (void *)v7[1];
              if (v13)
              {
                do
                {
                  int v14 = v13;
                  uint64_t v13 = (void *)*v13;
                }
                while (v13);
              }
              else
              {
                do
                {
                  int v14 = (void *)v7[2];
                  BOOL v4 = *v14 == (void)v7;
                  uint64_t v7 = v14;
                }
                while (!v4);
              }
              uint64_t v7 = v14;
            }
            while (v14 != v6 + 10);
          }
        }
        int v15 = (void *)v6[1];
        if (v15)
        {
          do
          {
            BOOL v16 = v15;
            int v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            BOOL v16 = (void *)v6[2];
            BOOL v4 = *v16 == (void)v6;
            uint64_t v6 = v16;
          }
          while (!v4);
        }
        uint64_t v6 = v16;
      }
      while (v16 != (void *)(a1 + 168));
      int v17 = (uint64_t *)v30;
      if (v30 != v31)
      {
        do
        {
          if (qword_102419390 != -1) {
            dispatch_once(&qword_102419390, &stru_1022C7FC0);
          }
          int v18 = qword_102419398;
          if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEFAULT))
          {
            long long v19 = v17 + 4;
            if (*((char *)v17 + 55) < 0) {
              long long v19 = (void *)*v19;
            }
            *(_DWORD *)std::string buf = 68289283;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)int v33 = 2082;
            *(void *)&unsigned int v33[2] = "";
            *(_WORD *)&v33[10] = 2081;
            *(void *)&v33[12] = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"@iB: Launching application for notification (if necessary)\", \"bundle\":%{private, location:escape_only}s}", buf, 0x1Cu);
          }
          id v20 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLApplicationLifecycleManager"];
          int v21 = v17 + 4;
          if (*((char *)v17 + 55) < 0) {
            int v21 = (void *)*v21;
          }
          [v20 launchApplication:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21) requiringAuthForServiceMask:1];
          int v22 = (char *)v17[1];
          if (v22)
          {
            do
            {
              id v23 = (char **)v22;
              int v22 = *(char **)v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              id v23 = (char **)v17[2];
              BOOL v4 = *v23 == (char *)v17;
              int v17 = (uint64_t *)v23;
            }
            while (!v4);
          }
          int v17 = (uint64_t *)v23;
        }
        while (v23 != v31);
      }
    }
    sub_1000DB264((uint64_t)&v30, v31[0]);
  }
}

void sub_100787EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,char *a27)
{
}

void *sub_100787EFC@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

BOOL sub_100787F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  uint64_t v6 = a6[23];
  uint64_t v7 = *((void *)a6 + 1);
  if ((v6 & 0x80u) == 0) {
    uint64_t v8 = a6[23];
  }
  else {
    uint64_t v8 = *((void *)a6 + 1);
  }
  uint64_t v9 = *(unsigned __int8 *)(a4 + 63);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(a4 + 48);
  }
  if (v8 != v9) {
    return v8 == 0;
  }
  uint64_t v13 = *(unsigned __int8 **)(a4 + 40);
  __int16 v11 = (unsigned __int8 *)(a4 + 40);
  uint64_t v12 = v13;
  if (v10 >= 0) {
    int v14 = v11;
  }
  else {
    int v14 = v12;
  }
  if ((v6 & 0x80) != 0)
  {
    int v15 = memcmp(*(const void **)a6, v14, *((void *)a6 + 1));
    uint64_t v8 = v7;
    if (!v15) {
      return 1;
    }
    return v8 == 0;
  }
  if (a6[23])
  {
    while (*a6 == *v14)
    {
      ++a6;
      ++v14;
      if (!--v6) {
        return 1;
      }
    }
    return v8 == 0;
  }
  return 1;
}

uint64_t sub_100788020()
{
  return 1;
}

uint64_t sub_100788028()
{
  return 1;
}

void sub_100788030(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 1)
  {
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    uint64_t v6 = qword_102419398;
    if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(unsigned __int8 *)(a1 + 297);
      int v8 = *(unsigned __int8 *)(a4 + 4);
      BOOL v9 = *(void *)(a1 + 328) == 0;
      *(_DWORD *)std::string buf = 67240704;
      *(_DWORD *)&uint8_t buf[4] = v7;
      LOWORD(v30) = 1026;
      *(_DWORD *)((char *)&v30 + 2) = v8;
      HIWORD(v30) = 1026;
      LODWORD(v31) = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "iB: state kNotificationDeviceUnlockedSinceBoot, from, %{public}d, to, %{public}d, start, %{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419390 != -1) {
        dispatch_once(&qword_102419390, &stru_1022C7FC0);
      }
      int v20 = *(unsigned __int8 *)(a1 + 297);
      int v21 = *(unsigned __int8 *)(a4 + 4);
      BOOL v22 = *(void *)(a1 + 328) == 0;
      LODWORD(v24) = 67240704;
      HIDWORD(v24) = v20;
      __int16 v25 = 1026;
      int v26 = v21;
      __int16 v27 = 1026;
      BOOL v28 = v22;
      id v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    int v10 = *(unsigned __int8 *)(a4 + 4);
    *(unsigned char *)(a1 + 297) = v10;
    if (v10)
    {
      [*(id *)(*(void *)(a1 + 136) + 16) unregister:*(void *)(*(void *)(a1 + 136) + 8) forNotification:1];
      sub_100788394(a1, (uint64_t)"kNotificationDeviceUnlockedSinceBoot");
      if (*(void *)(a1 + 176))
      {
        *(void *)std::string buf = 0;
        unint64_t v30 = 0;
        unint64_t v31 = 0;
        __int16 v11 = *(void **)(a1 + 160);
        if (v11 != (void *)(a1 + 168))
        {
          unint64_t v12 = 0;
          do
          {
            uint64_t v13 = (void *)v11[9];
            if (v13 != v11 + 10)
            {
              do
              {
                uint64_t v14 = (uint64_t)(v13 + 4);
                if (v12 >= v31)
                {
                  unint64_t v12 = sub_10078BEF0((uint64_t *)buf, v14);
                }
                else
                {
                  sub_10048B9C8(v12, v14);
                  v12 += 120;
                }
                unint64_t v30 = v12;
                int v15 = (void *)v13[1];
                if (v15)
                {
                  do
                  {
                    BOOL v16 = v15;
                    int v15 = (void *)*v15;
                  }
                  while (v15);
                }
                else
                {
                  do
                  {
                    BOOL v16 = (void *)v13[2];
                    BOOL v17 = *v16 == (void)v13;
                    uint64_t v13 = v16;
                  }
                  while (!v17);
                }
                uint64_t v13 = v16;
              }
              while (v16 != v11 + 10);
            }
            int v18 = (void *)v11[1];
            if (v18)
            {
              do
              {
                long long v19 = v18;
                int v18 = (void *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                long long v19 = (void *)v11[2];
                BOOL v17 = *v19 == (void)v11;
                __int16 v11 = v19;
              }
              while (!v17);
            }
            __int16 v11 = v19;
          }
          while (v19 != (void *)(a1 + 168));
        }
        sub_10076E41C(*(void *)(a1 + 328), (uint64_t *)buf);
        long long v24 = buf;
        sub_10078BE30((void ***)&v24);
      }
    }
  }
}

void sub_100788360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  a11 = (void **)&a15;
  sub_10078BE30(&a11);
  _Unwind_Resume(a1);
}

void sub_100788394(uint64_t a1, uint64_t a2)
{
  if (qword_102419390 != -1) {
    dispatch_once(&qword_102419390, &stru_1022C7FC0);
  }
  BOOL v4 = qword_102419398;
  if (os_log_type_enabled((os_log_t)qword_102419398, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void *)(a1 + 328);
    int v6 = *(unsigned __int8 *)(a1 + 297);
    *(_DWORD *)std::string buf = 134284035;
    uint64_t v9 = v5;
    __int16 v10 = 1026;
    int v11 = v6;
    __int16 v12 = 2082;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "iB: createStateDatabase, fStateDatabase, %{private}p, fDeviceUnlockedSinceBoot, %{public}d, reason, %{public}s", buf, 0x1Cu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419390 != -1) {
      dispatch_once(&qword_102419390, &stru_1022C7FC0);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLBTLEFenceManagerConcrete::createStateDatabase(const char *)", "%s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  if (!*(void *)(a1 + 328))
  {
    if (*(unsigned char *)(a1 + 297)) {
      operator new();
    }
  }
}

void sub_1007885D8()
{
}

uint64_t sub_100788604(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_10078864C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_100788694(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1007886DC(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241D928, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_10241D928);
    a1 = v4;
    if (v3)
    {
      qword_10241D910 = 0;
      *(void *)algn_10241D918 = 0;
      qword_10241D920 = 0;
      __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10241D910, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241D928);
      a1 = v4;
    }
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 96);

  return v1();
}

BOOL sub_1007887B8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v5;
    }
    else {
      uint64_t v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    __int16 v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)std::string buf = 136446466;
      long long v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C7FA0);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_100788A3C(uint64_t a1, int *a2, uint64_t a3)
{
  sub_10078A814(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10078BC58((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_100788AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100788AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v5 = off_1022B3D98;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v14 = off_1022B3DE8;
  long long v16 = 0u;
  long long __p = 0u;
  int v17 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t (***)(), uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
  uint64_t v14 = off_1022B3DE8;
  if (SBYTE7(v16) < 0) {
    operator delete((void *)__p);
  }
  return sub_100111F40((uint64_t)&v5);
}

void sub_100788BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10078431C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100788BDC(uint64_t a1, unsigned int *a2, uint64_t a3, int a4)
{
  if (*(unsigned char *)(a1 + 108)) {
    return;
  }
  long long v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  os_activity_scope_enter(v8, &state);

  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C7FA0);
  }
  long long v9 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    long long v10 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      long long v10 = (void *)*v10;
    }
    long long v11 = (std::__shared_weak_count *)*a2;
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2082;
    *(void *)&buf[20] = "activity";
    __int16 v23 = 2082;
    long long v24 = v10;
    __int16 v25 = 2050;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (!v12) {
    goto LABEL_18;
  }
  int v13 = *a2;
  uint64_t v14 = (uint64_t **)(a1 + 64);
  do
  {
    int v15 = *(_DWORD *)(v12 + 32);
    BOOL v16 = v15 < v13;
    if (v15 >= v13) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (!v16) {
      uint64_t v14 = (uint64_t **)v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 == (uint64_t **)(a1 + 64) || v13 < *((_DWORD *)v14 + 8))
  {
LABEL_18:
    __int16 v27 = v28;
    memset(v28, 0, sizeof(v28));
    char v29 = 0;
    sub_10078A4E4((uint64_t)buf, a2, (uint64_t)&v27);
    uint64_t v14 = sub_10078A368((uint64_t **)(a1 + 56), (__n128 *)buf);
    if (v26) {
      sub_1000DB0A0(v26);
    }
    sub_10078A7B0((uint64_t)&buf[8], *(char **)&buf[16]);
    if (v29) {
      sub_1000DB0A0(v29);
    }
    sub_10078A7B0((uint64_t)&v27, v28[0]);
  }
  if (!a4)
  {
    BOOL v20 = (std::__shared_weak_count *)v14[9];
    v14[8] = 0;
    v14[9] = 0;
    if (!v20) {
      goto LABEL_29;
    }
LABEL_28:
    sub_1000DB0A0(v20);
    goto LABEL_29;
  }
  sub_10078A814(a3, buf);
  long long v18 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  int v19 = (std::__shared_weak_count *)v14[9];
  *((_OWORD *)v14 + 4) = v18;
  if (v19)
  {
    sub_1000DB0A0(v19);
    BOOL v20 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8]) {
      goto LABEL_28;
    }
  }
LABEL_29:
  if (v14[7]) {
    sub_100789D38();
  }
  os_activity_scope_leave(&state);
}

void sub_1007891AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
}

void sub_1007891F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    BOOL v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      int v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v3 = (void *)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C7FA0);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C7FA0);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)std::string buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C7FA0);
      }
      BOOL v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    long long v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        long long v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022C7FA0);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              long long v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                long long v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)std::string buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C7FA0);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::listClients() [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            uint64_t v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                uint64_t v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                long long v9 = v15;
              }
              while (!v16);
            }
            long long v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        long long v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            long long v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            long long v8 = v19;
          }
          while (!v16);
        }
        long long v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1007897A4(uint64_t a1)
{
  sub_100789878(a1);

  operator delete();
}

void sub_1007897DC(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
}

void sub_100789818(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100789848(id a1)
{
  qword_102419398 = (uint64_t)os_log_create("com.apple.locationd.Position", "Proximity");
}

void *sub_100789878(uint64_t a1)
{
  *(void *)a1 = off_1022C7F70;
  sub_10012E3E4(a1);
  [*(id *)(a1 + 24) setValid:0];

  *(void *)(a1 + 24) = 0;

  return sub_10012E38C((void *)a1);
}

void sub_1007898E8(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_10078995C((uint64_t)(v3 + 2));
        operator delete(v3);
        int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_10078995C(uint64_t a1)
{
  *(void *)(a1 + 32) = off_1022B3DE8;
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_1007899D4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1007899D4(a1, *a2);
    sub_1007899D4(a1, a2[1]);
    sub_100789A30((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100789A30(uint64_t a1)
{
  sub_100789AA0(a1 + 40, *(void **)(a1 + 48));
  *(void *)a1 = off_1022B3DE8;
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void sub_100789AA0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100789AA0(a1, *a2);
    sub_100789AA0(a1, a2[1]);
    (*(void (**)(void))a2[4])();
    operator delete(a2);
  }
}

void sub_100789B30(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100789B30(a1, *a2);
    sub_100789B30(a1, a2[1]);
    sub_100789B98(a2 + 19);
    sub_100111F40((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100789B98(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    int v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        sub_100789C0C((uint64_t)(v3 + 2));
        operator delete(v3);
        int v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_100789C0C(uint64_t a1)
{
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8) = off_1022B3DE8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_100789C70(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100616554(result);
    operator delete();
  }
  return result;
}

uint64_t sub_100789CC0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_10078A7B0(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

uint64_t sub_100789CFC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  sub_10078A7B0(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_100789D38()
{
}

void sub_100789E4C()
{
  sub_100111F40(v0);
  operator delete();
}

void sub_100789E80(void *a1, int *a2, void *a3)
{
  if (!*((unsigned char *)a1 + 108))
  {
    uint64_t v5 = a1 + 8;
    uint64_t v4 = a1[8];
    if (v4)
    {
      int v8 = *a2;
      long long v9 = a1 + 8;
      do
      {
        int v10 = *(_DWORD *)(v4 + 32);
        BOOL v11 = v10 < v8;
        if (v10 >= v8) {
          int v12 = (uint64_t *)v4;
        }
        else {
          int v12 = (uint64_t *)(v4 + 8);
        }
        if (!v11) {
          long long v9 = (void *)v4;
        }
        uint64_t v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        long long v49 = v9;
        id v13 = sub_10078AB1C(a3);
        (*(void (**)(void *, int *, id, void *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        uint64_t v14 = (void *)v9[5];
        if (v14 != v9 + 6)
        {
          int v15 = a1 + 11;
          BOOL v16 = a1 + 1;
          do
          {
            uint64_t v17 = *v15;
            if (!*v15) {
              goto LABEL_25;
            }
            int v18 = *((_DWORD *)v14 + 8);
            int v19 = a1 + 11;
            do
            {
              int v20 = *(_DWORD *)(v17 + 32);
              BOOL v21 = v20 < v18;
              if (v20 >= v18) {
                BOOL v22 = (uint64_t *)v17;
              }
              else {
                BOOL v22 = (uint64_t *)(v17 + 8);
              }
              if (!v21) {
                int v19 = (uint64_t *)v17;
              }
              uint64_t v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (int v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              int v48 = v19;
              sub_10078A270(a1, (uint64_t)&v48, (uint64_t)&v49, a3);
              uint64_t v27 = a1[8];
              if (!v27) {
                return;
              }
              int v28 = *a2;
              char v29 = v5;
              do
              {
                int v30 = *(_DWORD *)(v27 + 32);
                BOOL v31 = v30 < v28;
                if (v30 >= v28) {
                  __int16 v32 = (uint64_t *)v27;
                }
                else {
                  __int16 v32 = (uint64_t *)(v27 + 8);
                }
                if (!v31) {
                  char v29 = (void *)v27;
                }
                uint64_t v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8)) {
                return;
              }
              long long v49 = v29;
              uint64_t v34 = v29[6];
              uint64_t v14 = v29 + 6;
              uint64_t v33 = v34;
              if (v34)
              {
                std::string v35 = v14;
                uint64_t v36 = v33;
                do
                {
                  int v37 = *(_DWORD *)(v36 + 32);
                  BOOL v38 = v37 < v23;
                  if (v37 >= v23) {
                    long long v39 = (uint64_t *)v36;
                  }
                  else {
                    long long v39 = (uint64_t *)(v36 + 8);
                  }
                  if (!v38) {
                    std::string v35 = (void *)v36;
                  }
                  uint64_t v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    int v40 = *(_DWORD *)(v33 + 32);
                    BOOL v41 = v23 < v40;
                    if (v23 >= v40) {
                      int v42 = (uint64_t *)(v33 + 8);
                    }
                    else {
                      int v42 = (uint64_t *)v33;
                    }
                    if (v41) {
                      uint64_t v14 = (void *)v33;
                    }
                    uint64_t v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  std::string v43 = (void *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      uint64_t v14 = v43;
                      std::string v43 = (void *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v14 = (void *)v35[2];
                      BOOL v44 = *v14 == (void)v35;
                      std::string v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              int v48 = a1 + 11;
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C7FA0);
              }
              long long v24 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                __int16 v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  __int16 v25 = (void *)*v16;
                }
                int v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)std::string buf = 136446466;
                long long v55 = v25;
                __int16 v56 = 1026;
                int v57 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022C7FA0);
                }
                uint64_t v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0) {
                  uint64_t v45 = (void *)*v16;
                }
                int v46 = *((_DWORD *)v14 + 8);
                int v50 = 136446466;
                std::string v51 = v45;
                __int16 v52 = 1026;
                int v53 = v46;
                int v47 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v47);
                if (v47 != (char *)buf) {
                  free(v47);
                }
              }
            }
          }
          while (v14 != v49 + 6);
        }
      }
    }
  }
}

unsigned char *sub_10078A270(unsigned char *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (!result[108])
  {
    uint64_t v7 = result;
    uint64_t v8 = *(unsigned int *)(*(void *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(void *)a3 + 32);
    id v9 = sub_10078AB1C(a4);
    uint64_t v10 = *(void *)a3 + 80;
    BOOL v11 = (uint64_t **)(*(void *)a3 + 40);
    uint64_t v14 = (int *)(*(void *)a2 + 32);
    int v12 = sub_1000EAEE4(v11, v14, (uint64_t)&unk_101D0B290, &v14);
    uint64_t result = (unsigned char *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(void *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if (result) {
      return [*(id *)(*(void *)a2 + 64) onNotification:*(unsigned int *)(*(void *)a3 + 32) withData:a4 v13];
    }
  }
  return result;
}

uint64_t **sub_10078A368(uint64_t **a1, __n128 *a2)
{
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (__n128 *)operator new(0x58uLL);
  v12[0] = v5;
  v12[1] = v4;
  sub_100448178(v5 + 2, a2);
  char v13 = 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    int v8 = *v6;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v7;
        int v10 = *((_DWORD *)v7 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v7 = *v9;
        uint64_t v4 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v7 = v9[1];
      if (!v7)
      {
        uint64_t v4 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v9 = v4;
LABEL_10:
    sub_1000EDF90(a1, (uint64_t)v9, v4, (uint64_t *)v5);
    v12[0] = 0;
    id v9 = (uint64_t **)v5;
  }
  sub_10078A448((uint64_t)v12, 0);
  return v9;
}

void sub_10078A448(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10078A4A0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_10078A4A0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  int v3 = *(char **)(a1 + 16);

  sub_10078A7B0(a1 + 8, v3);
}

uint64_t sub_10078A4E4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  sub_10078A53C((uint64_t *)(a1 + 8), a3);
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 40);
  return a1;
}

uint64_t *sub_10078A53C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10078A594(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_10078A57C(_Unwind_Exception *a1)
{
  sub_10078A7B0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10078A594(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = sub_10078A620(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10078A620(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  long long v6 = (uint64_t **)sub_1002CF4AC(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_10078A6A4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void *sub_10078A6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x40uLL);
  *(void *)(a3 + 8) = v5;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 16) = 0;
  v6[8] = *(_DWORD *)a2;
  uint64_t result = v6 + 10;
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)(a2 + 8);
    result[2] = *(void *)(a2 + 24);
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10078A734(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10078A750(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10078A750(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0) {
      operator delete(__p[5]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_10078A7B0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10078A7B0(a1, *(void *)a2);
    sub_10078A7B0(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void *sub_10078A814@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xD0uLL);
  uint64_t result = sub_10078A870(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10078A85C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_10078A870(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022C7FF0;
  sub_10078A980((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_10078A8CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10078A8E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C7FF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10078A900(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C7FF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10078A954(uint64_t a1)
{
  return sub_10078AA30((uint64_t)&v2, a1 + 24);
}

unsigned char *sub_10078A980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10048B9C8(a2, a3);
  *(_DWORD *)(a2 + 120) = *(_DWORD *)(a3 + 120);
  *(void *)(a2 + 128) = off_1022B3DE8;
  uint64_t result = (unsigned char *)(a2 + 136);
  if (*(char *)(a3 + 159) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)(a3 + 136), *(void *)(a3 + 144));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 136);
    *(void *)(a2 + 152) = *(void *)(a3 + 152);
    *(_OWORD *)uint64_t result = v6;
  }
  *(void *)(a2 + 160) = *(void *)(a3 + 160);
  uint64_t v7 = *(void *)(a3 + 168);
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(a3 + 176);
  *(void *)(a2 + 168) = v7;
  return result;
}

void sub_10078AA1C(_Unwind_Exception *a1)
{
  sub_100111F40(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10078AA30(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 128) = off_1022B3DE8;
  if (*(char *)(a2 + 159) < 0) {
    operator delete(*(void **)(a2 + 136));
  }

  return sub_100111F40(a2);
}

uint64_t sub_10078AA94(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    *(void *)(v1 + 128) = off_1022B3DE8;
    if (*(char *)(v1 + 159) < 0) {
      operator delete(*(void **)(v1 + 136));
    }
    sub_100111F40(v1);
    operator delete();
  }
  return result;
}

id sub_10078AB1C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_10078AB7C(a1);
}

id sub_10078AB7C(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C8030);
      }
      uint64_t v3 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D2CFA8 & 0x7FFFFFFFFFFFFFFFLL;
      char v4 = v3;
      os_log_type_t v5 = OS_LOG_TYPE_ERROR;
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C8030);
      }
      uint64_t v7 = qword_102418F98;
      if (!os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT)) {
        return 0;
      }
      int v8 = 134218498;
      id v9 = v2;
      __int16 v10 = 2048;
      uint64_t v11 = 0;
      __int16 v12 = 2080;
      unint64_t v13 = 0x8000000101D2CFA8 & 0x7FFFFFFFFFFFFFFFLL;
      char v4 = v7;
      os_log_type_t v5 = OS_LOG_TYPE_FAULT;
    }
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
    return 0;
  }

  return [a1 cppObjectPtr];
}

void sub_10078AD64(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void *sub_10078AD94(uint64_t a1, uint64_t a2)
{
  id v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  os_log_type_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = sub_10078AE10((uint64_t)(v3 + 4), a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      os_log_type_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_10078AE10(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

BOOL sub_10078AE10(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 36);
  int v3 = *(_DWORD *)(a2 + 36);
  if (v2 != v3) {
    return v2 < v3;
  }
  if ((v2 & 1) == 0) {
    goto LABEL_3;
  }
  __int16 v10 = (const void **)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 31);
  if (v11 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    size_t v12 = *(void *)(a1 + 16);
  }
  int v13 = *(char *)(a2 + 31);
  if (v13 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a2 + 31);
  }
  else {
    size_t v14 = *(void *)(a2 + 16);
  }
  if (v13 >= 0) {
    int v15 = (unsigned __int8 *)(a2 + 8);
  }
  else {
    int v15 = *(unsigned __int8 **)(a2 + 8);
  }
  if (v12 != v14) {
    goto LABEL_29;
  }
  if ((*(unsigned char *)(a1 + 31) & 0x80) != 0)
  {
    if (!memcmp(*v10, v15, *(void *)(a1 + 16))) {
      goto LABEL_3;
    }
LABEL_29:
    if (v11 >= 0) {
      int v19 = (const void *)(a1 + 8);
    }
    else {
      int v19 = *v10;
    }
    if (v14 >= v12) {
      size_t v20 = v12;
    }
    else {
      size_t v20 = v14;
    }
    int v21 = memcmp(v19, v15, v20);
    if (v21) {
      return v21 < 0;
    }
    else {
      return v12 < v14;
    }
  }
  if (*(unsigned char *)(a1 + 31))
  {
    BOOL v16 = v15;
    uint64_t v17 = (unsigned __int8 *)(a1 + 8);
    uint64_t v18 = *(unsigned __int8 *)(a1 + 31);
    while (*v17 == *v16)
    {
      ++v17;
      ++v16;
      if (!--v18) {
        goto LABEL_3;
      }
    }
    goto LABEL_29;
  }
LABEL_3:
  if ((v2 & 2) == 0
    || (unsigned int v6 = *(unsigned __int16 *)(a1 + 32), v7 = *(unsigned __int16 *)(a2 + 32), v8 = v6 >= v7, v6 == v7))
  {
    if ((v2 & 4) == 0) {
      return 0;
    }
    BOOL v8 = *(unsigned __int16 *)(a1 + 34) >= *(unsigned __int16 *)(a2 + 34);
  }
  return !v8;
}

uint64_t sub_10078AF58(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      if ((sub_10078AFC4(a2, (uint64_t)(v2 + 4)) & 1) == 0)
      {
        if (!sub_10078AFC4((uint64_t)(v2 + 4), a2)) {
          return v4;
        }
        ++v2;
      }
      int v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_10078AFC4(uint64_t a1, uint64_t a2)
{
  int v2 = (const void **)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 87);
  }
  else {
    size_t v4 = *(void *)(a1 + 72);
  }
  int v5 = *(char *)(a2 + 87);
  if (v5 >= 0) {
    size_t v6 = *(unsigned __int8 *)(a2 + 87);
  }
  else {
    size_t v6 = *(void *)(a2 + 72);
  }
  if (v5 >= 0) {
    unsigned int v7 = (unsigned __int8 *)(a2 + 64);
  }
  else {
    unsigned int v7 = *(unsigned __int8 **)(a2 + 64);
  }
  if (v4 != v6) {
    goto LABEL_35;
  }
  if ((*(unsigned char *)(a1 + 87) & 0x80) != 0)
  {
    if (memcmp(*v2, v7, *(void *)(a1 + 72))) {
      goto LABEL_35;
    }
  }
  else if (*(unsigned char *)(a1 + 87))
  {
    __int16 v10 = v7;
    char v11 = (unsigned __int8 *)(a1 + 64);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 87);
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v12) {
        goto LABEL_18;
      }
    }
    goto LABEL_35;
  }
LABEL_18:
  int v2 = (const void **)(a1 + 40);
  char v3 = *(unsigned char *)(a1 + 63);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(a1 + 63);
  }
  else {
    size_t v4 = *(void *)(a1 + 48);
  }
  int v13 = *(char *)(a2 + 63);
  if (v13 >= 0) {
    size_t v6 = *(unsigned __int8 *)(a2 + 63);
  }
  else {
    size_t v6 = *(void *)(a2 + 48);
  }
  if (v13 >= 0) {
    unsigned int v7 = (unsigned __int8 *)(a2 + 40);
  }
  else {
    unsigned int v7 = *(unsigned __int8 **)(a2 + 40);
  }
  if (v4 != v6) {
    goto LABEL_35;
  }
  if ((*(unsigned char *)(a1 + 63) & 0x80) != 0)
  {
    if (!memcmp(*v2, v7, *(void *)(a1 + 48))) {
      goto LABEL_49;
    }
LABEL_35:
    if (v3 >= 0) {
      uint64_t v17 = v2;
    }
    else {
      uint64_t v17 = *v2;
    }
    if (v6 >= v4) {
      size_t v18 = v4;
    }
    else {
      size_t v18 = v6;
    }
    int v19 = memcmp(v17, v7, v18);
    BOOL v20 = v4 >= v6;
    goto LABEL_42;
  }
  if (*(unsigned char *)(a1 + 63))
  {
    size_t v14 = v7;
    int v15 = (unsigned __int8 *)(a1 + 40);
    uint64_t v16 = *(unsigned __int8 *)(a1 + 63);
    while (*v15 == *v14)
    {
      ++v15;
      ++v14;
      if (!--v16) {
        goto LABEL_49;
      }
    }
    goto LABEL_35;
  }
LABEL_49:
  int v23 = (const void **)(a1 + 88);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 111);
  size_t v25 = *(void *)(a1 + 96);
  if ((v24 & 0x80u) == 0) {
    size_t v26 = *(unsigned __int8 *)(a1 + 111);
  }
  else {
    size_t v26 = *(void *)(a1 + 96);
  }
  char v29 = *(unsigned __int8 **)(a2 + 88);
  int v28 = (unsigned __int8 *)(a2 + 88);
  uint64_t v27 = v29;
  int v30 = (char)v28[23];
  if (v30 >= 0) {
    size_t v31 = v28[23];
  }
  else {
    size_t v31 = *((void *)v28 + 1);
  }
  if (v30 < 0) {
    int v28 = v27;
  }
  if (v26 == v31)
  {
    if ((v24 & 0x80) != 0)
    {
      uint64_t result = memcmp(*v23, v28, v25);
      if (!result) {
        return result;
      }
    }
    else
    {
      if (!v24) {
        return 0;
      }
      __int16 v32 = v28;
      uint64_t v33 = v23;
      uint64_t v34 = v24;
      while (*(unsigned __int8 *)v33 == *v32)
      {
        uint64_t result = 0;
        uint64_t v33 = (const void **)((char *)v33 + 1);
        ++v32;
        if (!--v34) {
          return result;
        }
      }
    }
  }
  if ((v24 & 0x80u) == 0) {
    std::string v35 = v23;
  }
  else {
    std::string v35 = *v23;
  }
  if (v31 >= v26) {
    size_t v36 = v26;
  }
  else {
    size_t v36 = v31;
  }
  int v19 = memcmp(v35, v28, v36);
  BOOL v20 = v26 >= v31;
LABEL_42:
  unsigned int v21 = !v20;
  if (v19) {
    return v19 < 0;
  }
  else {
    return v21;
  }
}

uint64_t *sub_10078B1FC(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  size_t v6 = (uint64_t **)sub_10078B2A8((uint64_t)a1, &v11, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    sub_10078B33C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v11, v8, v10[0]);
    unsigned int v7 = v10[0];
    v10[0] = 0;
    sub_10078B430((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_10078B2A8(uint64_t a1, void *a2, uint64_t a3)
{
  int v5 = (void *)(a1 + 8);
  size_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!sub_10078AE10(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        size_t v4 = (void *)*v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_10078AE10(v8, a3)) {
        break;
      }
      int v5 = v7 + 1;
      size_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_10078B33C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  size_t v6 = operator new(0x68uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_10078B3A8((uint64_t)v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10078B390(_Unwind_Exception *a1)
{
  sub_10078B430(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_10078B3A8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1022B3DE8;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = a1 + 48;
  *(_DWORD *)(a1 + 64) = 1;
  return a1;
}

void sub_10078B430(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100789A30((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_10078B488(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (uint64_t **)sub_10078B51C((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = v5;
    sub_10078B5B0((uint64_t)a1, a3, (uint64_t)v9);
    sub_1000EDF90(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    sub_10078B61C((uint64_t)v9, 0);
  }
  return v6;
}

void *sub_10078B51C(uint64_t a1, void *a2, uint64_t a3)
{
  long long v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!sub_10078AFC4(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        uint64_t v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_10078AFC4(v8, a3)) {
        break;
      }
      long long v5 = v7 + 1;
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_10078B5B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x98uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_10048B9C8((uint64_t)v6 + 32, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10078B604(_Unwind_Exception *a1)
{
  sub_10078B61C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_10078B61C(uint64_t a1, uint64_t a2)
{
  int v2 = *(void (****)(void))a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      (*v2[4])();
    }
    operator delete(v2);
  }
}

uint64_t sub_10078B694(uint64_t **a1, uint64_t a2)
{
  char v3 = sub_10078B710((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = (void (***)(void))v3;
  sub_1000F0A30(a1, v3);
  (*v4[4])();
  operator delete(v4);
  return 1;
}

void *sub_10078B710(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)(a1 + 8);
  char v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    int v6 = sub_10078AFC4((uint64_t)(v3 + 4), a2);
    unsigned int v7 = v3 + 1;
    if (!v6)
    {
      unsigned int v7 = v3;
      uint64_t v5 = v3;
    }
    char v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_10078AFC4(a2, (uint64_t)(v5 + 4))) {
    return v2;
  }
  return v5;
}

uint64_t sub_10078B78C(uint64_t **a1, uint64_t a2)
{
  char v3 = sub_10078AD94((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_1000F0A30(a1, v3);
  sub_100789A30((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *sub_10078B7E8(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v6 = (uint64_t **)sub_10078B51C((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_10078B880((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t sub_10078B880@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  int v6 = operator new(0xB0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_10048B9C8((uint64_t)(v6 + 4), *a2);
  v6[19] = v6 + 19;
  v6[20] = v6 + 19;
  v6[21] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_10078B8F4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10078B910(v3, v2);
  _Unwind_Resume(a1);
}

void sub_10078B910(uint64_t a1, uint64_t *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_100789B98(__p + 19);
    sub_100111F40((uint64_t)(__p + 4));
  }
  if (__p)
  {
    operator delete(__p);
  }
}

void *sub_10078B970(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, int *a6, int *a7, double *a8, int *a9)
{
  uint64_t v16 = operator new(0x60uLL);
  *uint64_t v16 = a2;
  v16[1] = a3;
  sub_10078BA10((uint64_t)(v16 + 2), *a4, a5, *a6, *a7, *a9, *a8);
  return v16;
}

void sub_10078B9FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10078BA10(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, double a7)
{
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = off_1022B3DE8;
  if (*(char *)(a3 + 31) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v13 = *(_OWORD *)(a3 + 8);
    *(void *)(a1 + 32) = *(void *)(a3 + 24);
    *(_OWORD *)(a1 + 16) = v13;
  }
  *(void *)(a1 + 40) = *(void *)(a3 + 32);
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a5;
  *(double *)(a1 + 56) = a7;
  *(_DWORD *)(a1 + 64) = a6;
  *(void *)(a1 + 72) = [[CLOSTransaction alloc] initWithDescription:"Pending iBeacon notification"];
  return a1;
}

void sub_10078BAF0(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v3;
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10078BB10()
{
}

void sub_10078BC24()
{
  sub_100111F40(v0);
  operator delete();
}

uint64_t **sub_10078BC58(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  int v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    int v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        int v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x58uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_OWORD *)v12 + 4) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((void *)v12 + 9) = 0;
    *((void *)v12 + 10) = 0;
    *((void *)v12 + 5) = v12 + 12;
    *((void *)v12 + 8) = 0;
    char v15 = 1;
    sub_1000EDF90(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    sub_10078A448((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

uint64_t sub_10078BD58(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1)
  {
    *(void *)(v1 + 128) = off_1022B3DE8;
    if (*(char *)(v1 + 159) < 0) {
      operator delete(*(void **)(v1 + 136));
    }
    sub_100111F40(v1);
    operator delete();
  }
  return result;
}

uint64_t *sub_10078BDE0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000F0A30(a1, a2);
  sub_100789B98(a2 + 19);
  sub_100111F40((uint64_t)(a2 + 4));
  operator delete(a2);
  return v3;
}

void sub_10078BE30(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = v4 - 120;
      unsigned int v7 = v4 - 120;
      uint64_t v8 = v4 - 120;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 120;
        (*v9)(v7);
        v6 -= 120;
        BOOL v10 = v7 == v2;
        unsigned int v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10078BEF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x111111111111111) {
    unint64_t v9 = 0x222222222222222;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    BOOL v10 = (char *)sub_10029BE4C(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  long long v13 = v10;
  size_t v14 = &v10[120 * v4];
  uint64_t v16 = &v10[120 * v9];
  sub_10048B9C8((uint64_t)v14, a2);
  char v15 = v14 + 120;
  sub_10078BFF8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10078C0FC((uint64_t)&v13);
  return v11;
}

void sub_10078BFE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10078C0FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10078BFF8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10078C070((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10078C070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0; a3 + i != a5; sub_10048B9C8(i + a7, i + a3))
    i -= 120;
  return a6;
}

uint64_t sub_10078C0FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 120);
    *(void *)(a1 + 16) = i - 120;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10078C168(uint64_t a1)
{
  if (*(int *)(a1 + 4) > 19 || *(int *)a1 > 4) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = *(double *)(a1 + 8) > (double)*(int *)(a1 + 44) || *(unsigned char *)(a1 + 16) != 0;
  }
  if (*(double *)(a1 + 24) < 0.0
    || (uint64_t v3 = sub_10016BA10(), *(_DWORD *)buf = 1, vabdd_f64(sub_10016BA54(v3, buf), *(double *)(a1 + 24)) > 5.0))
  {
    BOOL v2 = 0;
  }
  unint64_t v4 = (unsigned char *)sub_10067B400();
  if (v4)
  {
    uint64_t v5 = v4;
    if (v4[1])
    {
      if (v2 == (*v4 != 0)) {
        return;
      }
    }
    else if (!v2)
    {
      return;
    }
    *(double *)(a1 + 32) = sub_10016C458();
    v5[1] = v2;
  }
  else
  {
    if (qword_102419510 != -1) {
      dispatch_once(&qword_102419510, &stru_1022C8050);
    }
    uint64_t v6 = qword_102419518;
    if (os_log_type_enabled((os_log_t)qword_102419518, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#fusion,CLLCFusionCarPlayFlags unexpectedly returned nullptr", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419510 != -1) {
        dispatch_once(&qword_102419510, &stru_1022C8050);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLLCFusionCarPlayConditions::updateConditions()", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

void sub_10078C3B0(BOOL *a1, uint64_t a2)
{
  BOOL v14 = *a1;
  if (sub_1000D2988(a2, "EnableLCFusionForCarPlay", &v14))
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022C8070);
    }
    uint64_t v3 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v4 = *a1;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v4;
      LOWORD(v20) = 1026;
      *(_DWORD *)((char *)&v20 + 2) = v14;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LCFusionCarPlay mobile assets read,EnableLCFusionForCarPlay,prev,%{public}d,read,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022C8070);
      }
      BOOL v9 = *a1;
      int v15 = 67240448;
      BOOL v16 = v9;
      __int16 v17 = 1026;
      BOOL v18 = v14;
      BOOL v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLCFusionCarPlayFlags::readMobileAssetConfiguration(const CLNameValuePair &)", "%s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
    BOOL v5 = v14;
    *a1 = v14;
  }
  else
  {
    BOOL v5 = *a1;
  }
  BOOL v13 = v5;
  sub_1000C7F88(buf);
  int v6 = sub_1000D2988(*(uint64_t *)buf, "EnableLCFusionForCarPlay", &v13);
  if (v20) {
    sub_1000DB0A0(v20);
  }
  if (v6)
  {
    if (qword_102419360 != -1) {
      dispatch_once(&qword_102419360, &stru_1022C8070);
    }
    uint64_t v7 = qword_102419368;
    if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v8 = *a1;
      *(_DWORD *)std::string buf = 67240448;
      *(_DWORD *)&uint8_t buf[4] = v8;
      LOWORD(v20) = 1026;
      *(_DWORD *)((char *)&v20 + 2) = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LCFusionCarPlay defaults write read,EnableLCFusionForCarPlay,prev,%{public}d,read,%{public}d", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022C8070);
      }
      BOOL v11 = *a1;
      int v15 = 67240448;
      BOOL v16 = v11;
      __int16 v17 = 1026;
      BOOL v18 = v13;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLLCFusionCarPlayFlags::readMobileAssetConfiguration(const CLNameValuePair &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    *a1 = v13;
  }
}

void sub_10078C76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1000DB0A0(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10078C78C(_DWORD *a1, uint64_t a2)
{
  sub_1000E9354(v15);
  if (sub_100012960(a2, "LCFusionCarPlayConfig", v15))
  {
    BOOL v4 = (BOOL *)sub_10067B400();
    if (v4) {
      sub_10078C3B0(v4, (uint64_t)v15);
    }
    int v14 = a1[10];
    if (sub_10006EF84((uint64_t)v15, "LCFusionForCarPlayToggleHysteresis", &v14))
    {
      a1[10] = v14;
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022C8070);
      }
      BOOL v5 = qword_102419368;
      if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v19 = v14;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "LCFusionCarPlay mobile assets read, ConditionSwitchHysteresisTime,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419360 != -1) {
          dispatch_once(&qword_102419360, &stru_1022C8070);
        }
        int v16 = 67240192;
        int v17 = v14;
        BOOL v9 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLCFusionCarPlayConditions::readMobileAssetConfiguration(const CLNameValuePair &)", "%s\n", v9);
        if (v9 != (char *)buf) {
          free(v9);
        }
      }
    }
    int v13 = a1[11];
    if (sub_10006EF84((uint64_t)v15, "LowBatteryThreshold", &v13))
    {
      a1[11] = v13;
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022C8070);
      }
      int v6 = qword_102419368;
      if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v19 = v13;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "LCFusionCarPlay mobile assets read, LowBatteryThreshold,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419360 != -1) {
          dispatch_once(&qword_102419360, &stru_1022C8070);
        }
        int v16 = 67240192;
        int v17 = v13;
        BOOL v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLCFusionCarPlayConditions::readMobileAssetConfiguration(const CLNameValuePair &)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
    int v12 = a1[12];
    if (sub_10006EF84((uint64_t)v15, "ProactiveMinSessionIntervalRecoveryMode", &v12))
    {
      a1[12] = v12;
      if (qword_102419360 != -1) {
        dispatch_once(&qword_102419360, &stru_1022C8070);
      }
      uint64_t v7 = qword_102419368;
      if (os_log_type_enabled((os_log_t)qword_102419368, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 67240192;
        int v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "LCFusionCarPlay mobile assets read, ProactiveMinSessionIntervalRecoveryMode,%{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419360 != -1) {
          dispatch_once(&qword_102419360, &stru_1022C8070);
        }
        int v16 = 67240192;
        int v17 = v12;
        BOOL v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLLCFusionCarPlayConditions::readMobileAssetConfiguration(const CLNameValuePair &)", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
  }
  return sub_10013F3C4(v15);
}

void sub_10078CCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10013F3C4(va);
  _Unwind_Resume(a1);
}

void sub_10078CCD4()
{
}

void sub_10078CCDC(id a1)
{
  qword_102419518 = (uint64_t)os_log_create("com.apple.locationd.Position", "LCFusion");
}

void sub_10078CD0C(id a1)
{
  qword_102419368 = (uint64_t)os_log_create("com.apple.locationd.Position", "GpsAccessory");
}

uint64_t sub_10078CD3C(uint64_t a1)
{
  return a1;
}

void sub_10078CD68(uint64_t a1, int a2)
{
  double v3 = *(double *)(a1 + 8);
  double v4 = v3 * 0.75 + 0.2;
  double v5 = v3 * 0.75 + 0.125;
  if (a2 == 2) {
    double v5 = v4;
  }
  *(double *)(a1 + 8) = v5;
  if (qword_102419380 != -1) {
    dispatch_once(&qword_102419380, &stru_1022C8090);
  }
  int v6 = qword_102419388;
  if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    *(_DWORD *)std::string buf = 134349056;
    uint64_t v10 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DeviceProximityProcessor,fGnssLowAvailableProb,%{public}0.2f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C8090);
    }
    BOOL v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAvailabilityPredictor::DeviceProximityProcessor::runPredictionFilter(const CLDeviceProximityState, const CFTimeInterval)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
}

void sub_10078CF44(uint64_t a1, int a2, double a3)
{
  if (vabdd_f64(a3, *(double *)(a1 + 16)) > 6.0)
  {
    if (qword_102419380 != -1) {
      dispatch_once(&qword_102419380, &stru_1022C8090);
    }
    int v6 = qword_102419388;
    if (os_log_type_enabled((os_log_t)qword_102419388, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v7 = *(void *)(a1 + 16);
      *(_DWORD *)std::string buf = 134349312;
      double v10 = a3;
      __int16 v11 = 2050;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "DeviceProximityProcessor,FilterReset,timestamp,%{public}.2f,lastTimestamp,%{public}.2f", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419380 != -1) {
        dispatch_once(&qword_102419380, &stru_1022C8090);
      }
      BOOL v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLGnssAvailabilityPredictor::DeviceProximityProcessor::measurementInput(const CLDeviceProximityState, const CFTimeInterval)", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)a1 = 0;
  }
  *(double *)(a1 + 16) = a3;
  sub_10078CD68(a1, a2);
}

_OWORD *sub_10078D14C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0u;
  a1[1] = 0u;
  sub_10078D568((uint64_t)(a1 + 2), a3);
  sub_100103240();
  if (sub_10016CCBC()) {
    operator new();
  }
  sub_100103240();
  if (sub_100743840()) {
    operator new();
  }
  return a1;
}

void sub_10078D338(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_10078D928((uint64_t *)va);
  operator delete();
}

uint64_t *sub_10078D404(uint64_t *a1)
{
  BOOL v2 = a1 + 4;
  sub_10078D9AC(a1 + 4);
  sub_100682594(v2);
  sub_10078D650(a1 + 3, 0);
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    operator delete();
  }
  sub_10078D600(a1 + 1, 0);
  uint64_t v4 = *a1;
  *a1 = 0;
  if (v4) {
    operator delete();
  }
  return a1;
}

double sub_10078D49C(uint64_t *a1, _DWORD *a2, double *a3)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    *a2 = *(_DWORD *)(v3 + 24);
    double result = *(double *)(v3 + 16);
    *a3 = result;
  }
  return result;
}

void sub_10078D4B8(id a1)
{
  qword_102419388 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

uint64_t sub_10078D4E8(uint64_t a1, int *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 16 * a3;
    do
    {
      sub_1002CF424((uint64_t **)a1, v4, a2, a2);
      a2 += 4;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_10078D550(_Unwind_Exception *a1)
{
  sub_1000F5BB0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_10078D568(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10078D600(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100C78FF0();
    operator delete();
  }
  return result;
}

uint64_t sub_10078D650(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10098BF48();
    operator delete();
  }
  return result;
}

void sub_10078D6A4()
{
}

void *sub_10078D6B8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022C80C0;
  result[1] = v3;
  return result;
}

uint64_t sub_10078D700(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022C80C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10078D72C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10078D76C()
{
}

void *sub_10078D778(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10078D800()
{
}

void *sub_10078D814(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_1022C8150;
  result[1] = v3;
  return result;
}

uint64_t sub_10078D85C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1022C8150;
  a2[1] = v2;
  return result;
}

uint64_t sub_10078D888(uint64_t a1, int *a2, double *a3)
{
  double v3 = *a3;
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  sub_10078CF44(v4[2], *a2, *a3);

  return sub_1000A4414(v4, v3);
}

uint64_t sub_10078D8DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10078D91C()
{
}

void *sub_10078D928(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10078D9AC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10078DA34()
{
  v1[4] = xmmword_101D2D020;
  v1[5] = unk_101D2D030;
  v1[6] = xmmword_101D2D040;
  v1[0] = xmmword_101D2CFE0;
  v1[1] = unk_101D2CFF0;
  v1[2] = xmmword_101D2D000;
  unsigned __int8 v1[3] = unk_101D2D010;
  sub_10078D4E8((uint64_t)&unk_10248A398, (int *)v1, 7);
  return __cxa_atexit((void (*)(void *))sub_10078CD3C, &unk_10248A398, (void *)&_mh_execute_header);
}

uint64_t sub_10078ED9C(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v8 = v7 + 1;
      if (v7 == -1 || v8 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v9 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v10 = v5++ >= 9;
      if (v10)
      {
        unint64_t v6 = 0;
        uint64_t v11 = OBJC_IVAR___PBDataReader__error;
        int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    uint64_t v11 = OBJC_IVAR___PBDataReader__error;
    int v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0;
    }
LABEL_13:
    if (v12 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v14 = 0;
        unsigned int v15 = 0;
        uint64_t v16 = 0;
        while (1)
        {
          uint64_t v17 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v18 = v17 + 1;
          if (v17 == -1 || v18 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v19 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
          v16 |= (unint64_t)(v19 & 0x7F) << v14;
          if ((v19 & 0x80) == 0) {
            goto LABEL_64;
          }
          v14 += 7;
          BOOL v10 = v15++ >= 9;
          if (v10)
          {
            LODWORD(v16) = 0;
            goto LABEL_66;
          }
        }
        *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_64:
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_66:
        uint64_t v44 = 24;
        goto LABEL_79;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        while (2)
        {
          uint64_t v24 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v25 = v24 + 1;
          if (v24 == -1 || v25 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v26 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              BOOL v10 = v22++ >= 9;
              if (v10)
              {
                uint64_t v23 = 0;
                goto LABEL_70;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v23 = 0;
        }
LABEL_70:
        *(unsigned char *)(a1 + 48) = v23 != 0;
        continue;
      case 3u:
        unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v45 = 16;
        goto LABEL_84;
      case 4u:
        unint64_t v29 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + v11) = 1;
          uint64_t v28 = 0;
        }
        uint64_t v45 = 8;
LABEL_84:
        *(void *)(a1 + v45) = v28;
        continue;
      case 5u:
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 52) |= 0x10u;
        while (2)
        {
          uint64_t v32 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          unint64_t v33 = v32 + 1;
          if (v32 == -1 || v33 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            char v34 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v33;
            v16 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v10 = v31++ >= 9;
              if (v10)
              {
                LODWORD(v16) = 0;
                goto LABEL_74;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v16) = 0;
        }
LABEL_74:
        uint64_t v44 = 44;
        goto LABEL_79;
      case 6u:
        char v35 = 0;
        unsigned int v36 = 0;
        uint64_t v16 = 0;
        *(unsigned char *)(a1 + 52) |= 8u;
        break;
      case 7u:
        *(unsigned char *)(a1 + 52) |= 2u;
        unint64_t v40 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v40 <= 0xFFFFFFFFFFFFFFFBLL && v40 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v41 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v41 = 0;
        }
        uint64_t v46 = 32;
        goto LABEL_91;
      case 8u:
        *(unsigned char *)(a1 + 52) |= 4u;
        unint64_t v42 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v42 <= 0xFFFFFFFFFFFFFFFBLL && v42 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v41 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v41 = 0;
        }
        uint64_t v46 = 36;
        goto LABEL_91;
      case 9u:
        *(unsigned char *)(a1 + 52) |= 1u;
        unint64_t v43 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v43 <= 0xFFFFFFFFFFFFFFFBLL && v43 + 4 <= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          int v41 = *(_DWORD *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          int v41 = 0;
        }
        uint64_t v46 = 28;
LABEL_91:
        *(_DWORD *)(a1 + v46) = v41;
        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        continue;
    }
    while (1)
    {
      uint64_t v37 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      unint64_t v38 = v37 + 1;
      if (v37 == -1 || v38 > *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v39 = *(unsigned char *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
      v16 |= (unint64_t)(v39 & 0x7F) << v35;
      if ((v39 & 0x80) == 0) {
        goto LABEL_76;
      }
      v35 += 7;
      BOOL v10 = v36++ >= 9;
      if (v10)
      {
        LODWORD(v16) = 0;
        goto LABEL_78;
      }
    }
    *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_76:
    if (*(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      LODWORD(v16) = 0;
    }
LABEL_78:
    uint64_t v44 = 40;
LABEL_79:
    *(_DWORD *)(a1 + v44) = v16;
  }
  return *(unsigned char *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

CFRunLoopTimerRef *sub_10078FD70(CFRunLoopTimerRef *a1)
{
  uint64_t result = sub_100A26838(a1, 1, 1);
  *uint64_t result = (CFRunLoopTimerRef)off_1022C8208;
  return result;
}

void sub_10078FDB0(uint64_t a1)
{
  sub_100A26928(a1);

  operator delete();
}

void *sub_10078FDE8(void *a1, uint64_t a2, uint64_t a3)
{
  sub_100418AD4((uint64_t)v6, a3);
  sub_10070665C(a1, a2, (uint64_t)v6);
  sub_100418A50(v6);
  *a1 = off_1022C8240;
  return a1;
}

void sub_10078FE84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100418A50((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10078FEA4(uint64_t result, double a2)
{
  if (*(double *)(result + 40) > a2) {
    a2 = *(double *)(result + 40);
  }
  *(double *)(result + 40) = a2;
  return result;
}

void *sub_10078FEB8(uint64_t a1)
{
  __int16 v13 = 0;
  uint64_t v11 = 0;
  double v12 = 0.0;
  uint64_t v2 = (double *)(a1 + 40);
  double v3 = operator new(0x20uLL);
  *double v3 = off_1022C8290;
  v3[1] = &v12;
  v3[2] = (char *)&v13 + 1;
  v3[3] = &v13;
  v14[3] = v3;
  char v4 = sub_1007066AC(a1, v2, &v11, (uint64_t)v14, 60.0);
  uint64_t result = sub_100418CB0(v14);
  if (v4)
  {
    if (v12 / 60.0 >= 4.40208912)
    {
      uint64_t v10 = 0;
      double v7 = *(double *)(a1 + 40) + 60.0;
      v9[0] = *(void *)(a1 + 40);
      *(double *)&v9[1] = v7;
      *(double *)&_DWORD v9[2] = v12 / 60.0;
      LOWORD(v10) = 2;
      BYTE2(v10) = HIBYTE(v13);
      BYTE3(v10) = v13;
      uint64_t v8 = *(void *)(a1 + 32);
      if (!v8) {
        sub_10015E48C();
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *, double))(*(void *)v8 + 48))(v8, v9, v12 / 60.0);
      double v6 = *v2 + 60.0;
    }
    else
    {
      double v6 = *(double *)(v11 + 8);
    }
    *uint64_t v2 = v6;
  }
  return result;
}

void sub_100790030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_100790050()
{
}

__n128 sub_100790064(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1022C8290;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_1007900B8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1022C8290;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1007900F0(uint64_t result, uint64_t a2, double *a3)
{
  double v3 = *(BOOL **)(result + 16);
  **(double **)(result + 8) = **(double **)(result + 8) + *(double *)(a2 + 16) * *a3;
  *double v3 = (*v3 | *(unsigned __int8 *)(a2 + 28)) != 0;
  **(unsigned char **)(result + 24) = (**(unsigned __int8 **)(result + 24) | *(unsigned __int8 *)(a2 + 29)) != 0;
  return result;
}

uint64_t sub_100790140(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100790180()
{
}

uint64_t sub_10079018C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_100793550((uint64_t *)(a1 + 96), 0);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100790220(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_1000DC48C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst + 24, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)(__dst + 24) = v6;
  }
  *((void *)__dst + 6) = 0x100000002;
  *((_WORD *)__dst + 28) = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_1000DC48C(__dst + 64, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 10) = *((void *)a3 + 2);
    *((_OWORD *)__dst + 4) = v7;
  }
  *((void *)__dst + 11) = 0;
  operator new();
}

void sub_1007904CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v23 = *(void *)(v18 + 104);
  *(void *)(v18 + 104) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  sub_100793550(v21, 0);
  if (*(char *)(v18 + 87) < 0) {
    operator delete(*v20);
  }
  if (*(char *)(v18 + 47) < 0) {
    operator delete(*v19);
  }
  if (*(char *)(v18 + 23) < 0) {
    operator delete(*(void **)v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100790598(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (!v2 || !sub_10014C3C0(v2)) {
    sub_100792CC8();
  }
  uint64_t result = sub_10095E0C4(*(void *)(a1 + 96));
  if ((result & 1) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 96);
    return sub_10095E040(v4);
  }
  return result;
}

uint64_t sub_10079064C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 104);
  if (result) {
    return sub_10014C3C0(result);
  }
  return result;
}

uint64_t sub_100790660(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2 && sub_10014C3C0(v2))
  {
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
    *(_OWORD *)&v22.__r_.__value_.__r.__words[1] = xmmword_101D04970;
    strcpy(v22.__r_.__value_.__l.__data_, "INSERT OR REPLACE INTO ");
    int v3 = *(char *)(a1 + 23);
    if (v3 >= 0) {
      uint64_t v4 = (const std::string::value_type *)a1;
    }
    else {
      uint64_t v4 = *(const std::string::value_type **)a1;
    }
    if (v3 >= 0) {
      std::string::size_type v5 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v5 = *(void *)(a1 + 8);
    }
    long long v6 = std::string::append(&v22, v4, v5);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v23, " (");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    sub_10006116C((uint64_t)__p);
    if ((v21 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v11 = v21;
    }
    else {
      std::string::size_type v11 = (std::string::size_type)__p[1];
    }
    double v12 = std::string::append(&v24, (const std::string::value_type *)v10, v11);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v14 = std::string::append(&v27, ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    int64_t v26 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)unint64_t v25 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (v26 >= 0) {
      uint64_t v16 = v25;
    }
    else {
      uint64_t v16 = (void **)v25[0];
    }
    sub_10014D518(*(void *)(a1 + 104), (uint64_t)v16);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C8300);
  }
  uint64_t v17 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v27.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v27, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v27, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C8300);
    }
    LOWORD(v25[0]) = 0;
    char v19 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTileHeaderDatabase::saveWifiTileHeader(const CLWifiTileHeaderEntry &, std::optional<CLWifiTileParser::MemoryMappedFileHandle *>)", "%s\n", (const char *)v19);
    if (v19 != &v27) {
      free(v19);
    }
  }
  return 0;
}

void sub_100790D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100790E64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2 && sub_10014C3C0(v2))
  {
    *((unsigned char *)&v22.__r_.__value_.__s + 23) = 12;
    strcpy((char *)&v22, "DELETE FROM ");
    int v3 = *(char *)(a1 + 23);
    if (v3 >= 0) {
      uint64_t v4 = (const std::string::value_type *)a1;
    }
    else {
      uint64_t v4 = *(const std::string::value_type **)a1;
    }
    if (v3 >= 0) {
      std::string::size_type v5 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v5 = *(void *)(a1 + 8);
    }
    long long v6 = std::string::append(&v22, v4, v5);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v23, " WHERE ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v24, "TileX");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    double v12 = std::string::append(&v25, " = ? AND ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    char v14 = std::string::append(&v26, "TileY");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v29, " = ? ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    int64_t v28 = v16->__r_.__value_.__r.__words[2];
    long long __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if (v28 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    sub_10014D518(*(void *)(a1 + 104), (uint64_t)p_p);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C8300);
  }
  char v19 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v29.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v29, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v29, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C8300);
    }
    LOWORD(__p) = 0;
    unsigned __int8 v21 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTileHeaderDatabase::deleteByTileXY(const WifiTileXY &)", "%s\n", (const char *)v21);
    if (v21 != &v29) {
      free(v21);
    }
  }
  return 0;
}

void sub_1007913A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  if (a51 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10079148C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  *a2 = 0;
  a2[144] = 0;
  uint64_t v3 = *(void *)(a1 + 104);
  if (v3 && sub_10014C3C0(v3))
  {
    *((unsigned char *)&v38.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v38, "SELECT ");
    sub_10006116C((uint64_t)__p);
    if ((v37 & 0x80u) == 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    if ((v37 & 0x80u) == 0) {
      std::string::size_type v5 = v37;
    }
    else {
      std::string::size_type v5 = (std::string::size_type)__p[1];
    }
    long long v6 = std::string::append(&v38, (const std::string::value_type *)v4, v5);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    char v35 = 6;
    strcpy(__s, " FROM ");
    uint64_t v8 = std::string::append(&v39, __s, 6uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    int v10 = *(char *)(a1 + 23);
    if (v10 >= 0) {
      long long v11 = (const std::string::value_type *)a1;
    }
    else {
      long long v11 = *(const std::string::value_type **)a1;
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v12 = *(void *)(a1 + 8);
    }
    long long v13 = std::string::append(&v40, v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    char v33 = 7;
    strcpy(v32, " WHERE ");
    long long v15 = std::string::append(&v41, v32, 7uLL);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    long long v17 = std::string::append(&v42, "TileX");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    char v31 = 7;
    strcpy(v30, "=? AND ");
    char v19 = std::string::append(&v43, v30, 7uLL);
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    unsigned __int8 v21 = std::string::append(&v44, "TileY");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    char v29 = 2;
    strcpy(v28, "=?");
    std::string v23 = std::string::append(&v47, v28, 2uLL);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    int64_t v46 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v45 = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (v29 < 0) {
      operator delete(*(void **)v28);
    }
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
    if (v31 < 0) {
      operator delete(*(void **)v30);
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (v33 < 0) {
      operator delete(*(void **)v32);
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (v35 < 0) {
      operator delete(*(void **)__s);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if ((char)v37 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (v46 >= 0) {
      std::string v25 = v45;
    }
    else {
      std::string v25 = (void **)v45[0];
    }
    sub_10014D518(*(void *)(a1 + 104), (uint64_t)v25);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C8300);
  }
  std::string v26 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v47.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v47, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v47, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C8300);
    }
    LOWORD(v45[0]) = 0;
    std::string v27 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "std::optional<CLWifiTileHeaderEntry> CLWifiTileHeaderDatabase::selectByTileXY(const WifiTileXY &)", "%s\n", (const char *)v27);
    if (v27 != &v47) {
      free(v27);
    }
  }
}

void sub_100791BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  if (a64 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100791D5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  if (v2 && sub_10014C3C0(v2))
  {
    *((unsigned char *)&v14.__r_.__value_.__s + 23) = 21;
    strcpy((char *)&v14, "SELECT COUNT(*) FROM ");
    int v3 = *(char *)(a1 + 23);
    if (v3 >= 0) {
      uint64_t v4 = (const std::string::value_type *)a1;
    }
    else {
      uint64_t v4 = *(const std::string::value_type **)a1;
    }
    if (v3 >= 0) {
      std::string::size_type v5 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v5 = *(void *)(a1 + 8);
    }
    long long v6 = std::string::append(&v14, v4, v5);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    uint64_t v8 = std::string::append(&v17, ";");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    int64_t v16 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long __p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (v16 >= 0) {
      int v10 = __p;
    }
    else {
      int v10 = (void **)__p[0];
    }
    sub_10014D518(*(void *)(a1 + 104), (uint64_t)v10);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C8300);
  }
  long long v11 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v17.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v17, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v17, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C8300);
    }
    LOWORD(__p[0]) = 0;
    long long v13 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "int CLWifiTileHeaderDatabase::countTileHeaders()", "%s\n", (const char *)v13);
    if (v13 != &v17) {
      free(v13);
    }
  }
  return 0;
}

void sub_100792174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100792200(uint64_t a1, int a2)
{
  sub_100134750(&__p, "AccessTimestamp");
  uint64_t v4 = sub_100792290(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_100792274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100792290(uint64_t a1, int a2, std::string *this)
{
  if (std::string::compare(this, "AccessTimestamp") && std::string::compare(this, "GizmoSyncTimestamp")) {
    sub_101A6CDFC();
  }
  uint64_t v5 = *(void *)(a1 + 104);
  if (v5 && sub_10014C3C0(v5))
  {
    *((unsigned char *)&v32.__r_.__value_.__s + 23) = 7;
    strcpy((char *)&v32, "UPDATE ");
    int v6 = *(char *)(a1 + 23);
    if (v6 >= 0) {
      long long v7 = (const std::string::value_type *)a1;
    }
    else {
      long long v7 = *(const std::string::value_type **)a1;
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      std::string::size_type v8 = *(void *)(a1 + 8);
    }
    long long v9 = std::string::append(&v32, v7, v8);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    long long v11 = std::string::append(&v33, " SET ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v34.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    int v13 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v13 >= 0) {
      std::string v14 = this;
    }
    else {
      std::string v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v13 >= 0) {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    int64_t v16 = std::string::append(&v34, (const std::string::value_type *)v14, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append(&v35, " = ? WHERE ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    long long v20 = std::string::append(&v36, "TileX");
    long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    long long v22 = std::string::append(&v37, " = ? AND ");
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v38, "TileY");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::string v26 = std::string::append(&v41, " = ?");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    int64_t v40 = v26->__r_.__value_.__r.__words[2];
    long long __p = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v41.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (v40 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    sub_10014D518(*(void *)(a1 + 104), (uint64_t)p_p);
  }
  if (qword_1024193B0 != -1) {
    dispatch_once(&qword_1024193B0, &stru_1022C8300);
  }
  char v29 = qword_1024193B8;
  if (os_log_type_enabled((os_log_t)qword_1024193B8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v41.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "not connected to wifi #tile header table", (uint8_t *)&v41, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&v41, 0x65CuLL);
    if (qword_1024193B0 != -1) {
      dispatch_once(&qword_1024193B0, &stru_1022C8300);
    }
    LOWORD(__p) = 0;
    char v31 = (std::string *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWifiTileHeaderDatabase::updateTimestampByTileXY(cl::chrono::CFAbsoluteTimeClock::time_point, const WifiTileXY &, const std::string &)", "%s\n", (const char *)v31);
    if (v31 != &v41) {
      free(v31);
    }
  }
  return 0;
}

void sub_100792B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  if (a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100792C38(uint64_t a1, int a2)
{
  sub_100134750(&__p, "GizmoSyncTimestamp");
  uint64_t v4 = sub_100792290(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_100792CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100792CC8()
{
}

void sub_10079315C(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1007931C4(uint64_t a1)
{
}

void sub_1007931E4(uint64_t a1@<X0>, void *a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
}

void sub_1007931EC(uint64_t a1)
{
}

void sub_1007931F4(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  sub_100134750(buf, "SELECT NAME FROM sqlite_master WHERE type='table' AND name LIKE 'wifi_tile_%'");
  if (v7 >= 0) {
    uint64_t v2 = buf;
  }
  else {
    uint64_t v2 = *(uint8_t **)buf;
  }
  sub_10014D518(*(void *)(a1 + 104), (uint64_t)v2);
}

void sub_100793484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::string __p = &a19;
  sub_1000A7B4C((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100793520(id a1)
{
  qword_1024193B8 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

uint64_t sub_100793550(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10095D9CC();
    operator delete();
  }
  return result;
}

void sub_1007935D4()
{
  qword_10247DC58 = (uint64_t)"TileX";
  dword_10247DC60 = 1;
  word_10247DC64 = 1;
  byte_10247DC68 = 0;
  byte_10247DC80 = 0;
  qword_10247DC88 = (uint64_t)"TileY";
  dword_10247DC90 = 1;
  word_10247DC94 = 1;
  byte_10247DC98 = 0;
  byte_10247DCB0 = 0;
  qword_10247DCB8 = (uint64_t)"SouthwestLatitude";
  dword_10247DCC0 = 2;
  word_10247DCC4 = 0;
  byte_10247DCC8 = 0;
  byte_10247DCE0 = 0;
  qword_10247DCE8 = (uint64_t)"SouthwestLongitude";
  dword_10247DCF0 = 2;
  word_10247DCF4 = 0;
  byte_10247DCF8 = 0;
  byte_10247DD10 = 0;
  qword_10247DD18 = (uint64_t)"DeltaLatitude";
  dword_10247DD20 = 2;
  word_10247DD24 = 0;
  byte_10247DD28 = 0;
  byte_10247DD40 = 0;
  qword_10247DD48 = (uint64_t)"DeltaLongitude";
  dword_10247DD50 = 2;
  word_10247DD54 = 0;
  byte_10247DD58 = 0;
  byte_10247DD70 = 0;
  qword_10247DD78 = (uint64_t)"Altitude";
  dword_10247DD80 = 2;
  word_10247DD84 = 0;
  byte_10247DD88 = 0;
  byte_10247DDA0 = 0;
  qword_10247DDA8 = (uint64_t)"MinimumAltitude";
  dword_10247DDB0 = 2;
  word_10247DDB4 = 0;
  byte_10247DDB8 = 0;
  byte_10247DDD0 = 0;
  qword_10247DDD8 = (uint64_t)"MaximumAltitude";
  dword_10247DDE0 = 2;
  word_10247DDE4 = 0;
  byte_10247DDE8 = 0;
  byte_10247DE00 = 0;
  qword_10247DE08 = (uint64_t)"GenerationTimestamp";
  dword_10247DE10 = 1;
  word_10247DE14 = 0;
  byte_10247DE18 = 0;
  byte_10247DE30 = 0;
  qword_10247DE38 = (uint64_t)"ExpirationAge";
  dword_10247DE40 = 1;
  word_10247DE44 = 0;
  byte_10247DE48 = 0;
  byte_10247DE60 = 0;
  qword_10247DE68 = (uint64_t)"Version";
  dword_10247DE70 = 1;
  word_10247DE74 = 0;
  byte_10247DE78 = 0;
  byte_10247DE90 = 0;
  qword_10247DE98 = (uint64_t)"Flags";
  dword_10247DEA0 = 1;
  word_10247DEA4 = 0;
  byte_10247DEA8 = 0;
  byte_10247DEC0 = 0;
  qword_10247DEC8 = (uint64_t)"NumberOfIndexEntries";
  dword_10247DED0 = 1;
  word_10247DED4 = 0;
  byte_10247DED8 = 0;
  byte_10247DEF0 = 0;
  qword_10247DEF8 = (uint64_t)"AccessTimestamp";
  dword_10247DF00 = 1;
  word_10247DF04 = 0;
  byte_10247DF08 = 0;
  byte_10247DF20 = 0;
  qword_10247DF28 = (uint64_t)"GizmoSyncTimestamp";
  dword_10247DF30 = 1;
  word_10247DF34 = 0;
  byte_10247DF38 = 0;
  byte_10247DF50 = 0;
  qword_10247DF58 = (uint64_t)"NumberOfInputPoints";
  dword_10247DF60 = 1;
  word_10247DF64 = 0;
  byte_10247DF68 = 0;
  byte_10247DF80 = 0;
  qword_10247DF88 = 0;
  dword_10247DF90 = 5;
  word_10247DF94 = 0;
  byte_10247DF98 = 0;
  byte_10247DFB0 = 0;
}

void sub_1007937DC()
{
}

void sub_100793850(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_1000DB0A0(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100793890(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_1000DB0A0(v2);
  }
  return a1;
}

uint64_t sub_1007938C0@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return sub_10107ACD8(*a1, a2, (void **)a3);
}

void sub_1007938F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double sub_100793910(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 88) + *(double *)(a2 + 56);
  uint64_t v4 = *(void *)(a2 + 80);
  double v5 = *(double *)(a1 + 120) + *(double *)(a2 + 88);
  *(void *)long long v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)&v12[8] = *(_OWORD *)(a2 + 40);
  *(double *)&v12[24] = v3;
  long long v13 = *(_OWORD *)(a2 + 64);
  *(void *)&long long v14 = v4;
  *((double *)&v14 + 1) = v5;
  uuid_copy((unsigned __int8 *)&v11 + 8, (const unsigned __int8 *)(a1 + 16));
  sub_10107BC78(*(uint64_t **)a1, (uint64_t)&v10);
  long long v6 = *(_OWORD *)&v12[16];
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = v14;
  *(_OWORD *)(a1 + 96) = v13;
  *(_OWORD *)(a1 + 112) = v7;
  double result = *(double *)&v10;
  long long v9 = v11;
  *(_OWORD *)(a1 + 32) = v10;
  *(_OWORD *)(a1 + 48) = v9;
  return result;
}

void sub_1007939D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 == 1)
  {
    uuid_parse("00000000-0000-0000-0000-000000000000", (unsigned __int8 *)(a1 + 16));
  }
  else if (!v3)
  {
    uuid_copy((unsigned __int8 *)(a1 + 16), (const unsigned __int8 *)(a2 + 64));
    sub_100793A58(a1);
  }
}

void sub_100793A58(uint64_t a1)
{
  std::string __p = 0;
  long long v11 = 0;
  uint64_t v12 = 0;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  if (sub_10107C69C(*(void *)a1, 1, &__p) != 100 || __p == v11)
  {
    uint64_t v22 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v15 = 0;
  }
  else
  {
    long long v3 = *(v11 - 5);
    long long v20 = *(v11 - 6);
    long long v21 = v3;
    uint64_t v22 = *((void *)v11 - 8);
    long long v4 = *(_OWORD *)((char *)v11 - 24);
    long long v13 = *(_OWORD *)((char *)v11 - 40);
    long long v14 = v4;
    uint64_t v15 = *((void *)v11 - 1);
  }
  *(_OWORD *)std::string buf = v20;
  long long v17 = v21;
  *(_OWORD *)&v19[8] = v13;
  *(void *)&long long v18 = v22;
  *(_OWORD *)&v19[24] = v14;
  *(void *)&v19[40] = v15;
  *((CFAbsoluteTime *)&v18 + 1) = Current;
  *(CFAbsoluteTime *)long long v19 = Current;
  uuid_copy((unsigned __int8 *)&v17 + 8, (const unsigned __int8 *)(a1 + 16));
  sub_10107BC78(*(uint64_t **)a1, (uint64_t)buf);
  long long v5 = *(_OWORD *)v19;
  *(_OWORD *)(a1 + 64) = v18;
  *(_OWORD *)(a1 + 80) = v5;
  long long v6 = *(_OWORD *)&v19[32];
  *(_OWORD *)(a1 + 96) = *(_OWORD *)&v19[16];
  *(_OWORD *)(a1 + 112) = v6;
  long long v7 = v17;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 48) = v7;
  if (qword_102419180 != -1) {
    dispatch_once(&qword_102419180, &stru_1022C8320);
  }
  std::string::size_type v8 = qword_102419188;
  if (os_log_type_enabled((os_log_t)qword_102419188, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Setting up first session entry", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419180 != -1) {
      dispatch_once(&qword_102419180, &stru_1022C8320);
    }
    long long v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLSkiDataStore::setupFirstEntry()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
  if (__p)
  {
    long long v11 = __p;
    operator delete(__p);
  }
}

void sub_100793CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100793CEC(id a1)
{
  qword_102419188 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Skiing");
}

void sub_100793D1C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100793D84(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_101A61910(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100793D9C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t sub_100793DCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *sub_100793E10(void *result, uint64_t a2)
{
  *uint64_t result = off_1022C83C8;
  result[1] = a2;
  return result;
}

id sub_100793E30(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLTelephonyService"];

  return _[v1 syncgetCellTransmitStatus];
}

id sub_100793E68(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLTelephonyService"];

  return _[v1 syncgetRegistrationStatus];
}

id sub_100793EA0(uint64_t a1, uint64_t a2)
{
  id v3 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLTelephonyService"];

  return _[v3 syncgetRegistrationStatusForSim:a2];
}

id sub_100793EE8(uint64_t a1)
{
  id v1 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLTelephonyService"];

  return [v1 syncgetIsRegisteredOnCell];
}

id sub_100793F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLTelephonyService"];

  return [v5 syncgetServingCells:a2 addNeighborCells:a3];
}

id sub_100793F70(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLTelephonyService"];

  return _[v1 syncgetRadioAccessTechnology];
}

id sub_100793FA8(uint64_t a1, uint64_t a2)
{
  id v3 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLTelephonyService"];

  return _[v3 syncgetRadioAccessTechnologyForSim:a2];
}

id sub_100793FF0(uint64_t a1)
{
  id v1 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLTelephonyService"];

  return [v1 syncgetRefreshCellMonitor];
}

id sub_100794028(uint64_t a1, uint64_t a2)
{
  id v3 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLTelephonyService"];

  return _[v3 syncgetServingGsmCell:a2];
}

id sub_100794070(uint64_t a1, uint64_t a2)
{
  id v3 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLTelephonyService"];

  return _[v3 syncgetSignalStrength:a2];
}

id sub_1007940B8(uint64_t a1, uint64_t a2)
{
  id v3 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLTelephonyService"];

  return _[v3 syncgetSignalStrengthForSim:a2];
}

id sub_100794100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLTelephonyService" forClient:@"CLHarvesterService"];

  return [v5 fetchSignalStrengthMeasurementForSim:a2 withReply:a3];
}

id sub_100794158(uint64_t a1, uint64_t a2)
{
  id v3 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLTelephonyService" forClient:@"CLHarvesterService"];

  return _[v3 fetchIratStreamingInfoWithReply:a2];
}

double sub_1007941A8(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLClientManager"), "syncgetNonSystemLocationClientKey");
  if (v3)
  {
    sub_100134750(&v5, (char *)[v3 UTF8String]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    double result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

void sub_10079421C(uint64_t a1, uint64_t a2)
{
  id v5 = 0;
  [objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLTelephonyService") syncgetCopyServingOperator:&v5];
  if (v5)
  {
    sub_100134750(&v3, (char *)[v5 UTF8String]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v3;
    *(void *)(a2 + 16) = v4;
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
}

id sub_1007942C8(uint64_t a1, uint64_t a2)
{
  id v3 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLTelephonyService"];

  return _[v3 syncgetCopyServingOperatorForSim:a2];
}

void sub_100794310(uint64_t a1, uint64_t a2)
{
  id v5 = 0;
  [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", @"CLTelephonyService"), "syncgetCopyServingProviderFromCarrierBundle:", &v5];
  if (v5)
  {
    sub_100134750(&v3, (char *)[v5 UTF8String]);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(_OWORD *)a2 = v3;
    *(void *)(a2 + 16) = v4;
  }
  else if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
}

id sub_1007943BC(uint64_t a1, uint64_t a2)
{
  id v3 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLTelephonyService"];

  return _[v3 syncgetCopyServingProviderFromCarrierBundleForSim:a2];
}

id sub_100794404(uint64_t a1, long long *a2, _OWORD *a3)
{
  id v6 = objc_alloc((Class)CLLocation);
  long long v7 = a3[7];
  v15[6] = a3[6];
  v15[7] = v7;
  v16[0] = a3[8];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)a3 + 140);
  long long v8 = a3[3];
  void v15[2] = a3[2];
  v15[3] = v8;
  long long v9 = a3[5];
  v15[4] = a3[4];
  v15[5] = v9;
  long long v10 = a3[1];
  v15[0] = *a3;
  v15[1] = v10;
  id v11 = [v6 initWithClientLocation:v15];
  id v12 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLNetworkLocationProvider"];
  long long v13 = a2[1];
  long long v18 = *a2;
  long long v19 = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_100794BF0;
  v17[3] = &unk_1022C84C8;
  return [v12 setLocation_GSM:v11 forCell:[v17 copy]];
}

id sub_100794508(uint64_t a1, long long *a2, _OWORD *a3)
{
  id v6 = objc_alloc((Class)CLLocation);
  long long v7 = a3[7];
  v15[6] = a3[6];
  v15[7] = v7;
  v16[0] = a3[8];
  *(_OWORD *)((char *)v16 + 12) = *(_OWORD *)((char *)a3 + 140);
  long long v8 = a3[3];
  void v15[2] = a3[2];
  v15[3] = v8;
  long long v9 = a3[5];
  v15[4] = a3[4];
  v15[5] = v9;
  long long v10 = a3[1];
  v15[0] = *a3;
  v15[1] = v10;
  id v11 = [v6 initWithClientLocation:v15];
  id v12 = [objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLNetworkLocationProvider"];
  long long v13 = a2[1];
  long long v18 = *a2;
  long long v19 = v13;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  void v17[2] = sub_100794BFC;
  v17[3] = &unk_1022C84E8;
  return [v12 setLocation_SCDMA:v11 forCell:[v17 copy]];
}

id sub_10079460C(uint64_t a1, long long *a2, _OWORD *a3)
{
  id v6 = objc_alloc((Class)CLLocation);
  long long v7 = a3[7];
  v16[6] = a3[6];
  v16[7] = v7;
  v17[0] = a3[8];
  *(_OWORD *)((char *)v17 + 12) = *(_OWORD *)((char *)a3 + 140);
  long long v8 = a3[3];
  _OWORD v16[2] = a3[2];
  v16[3] = v8;
  long long v9 = a3[5];
  v16[4] = a3[4];
  v16[5] = v9;
  long long v10 = a3[1];
  v16[0] = *a3;
  v16[1] = v10;
  id v11 = [v6 initWithClientLocation:v16];
  id v12 = [objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLNetworkLocationProvider"];
  long long v13 = a2[3];
  long long v21 = a2[2];
  long long v22 = v13;
  long long v23 = a2[4];
  uint64_t v24 = *((void *)a2 + 10);
  long long v14 = a2[1];
  long long v19 = *a2;
  long long v20 = v14;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  uint64_t v18[2] = sub_100794C08;
  v18[3] = &unk_1022C8508;
  return [v12 setLocation_LTE:v11 forCell:[v18 copy]];
}

void sub_100794738(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  id v6 = objc_alloc((Class)CLLocation);
  long long v7 = a3[7];
  v53[6] = a3[6];
  v53[7] = v7;
  v54[0] = a3[8];
  *(_OWORD *)((char *)v54 + 12) = *(_OWORD *)((char *)a3 + 140);
  long long v8 = a3[3];
  v53[2] = a3[2];
  v53[3] = v8;
  long long v9 = a3[5];
  v53[4] = a3[4];
  v53[5] = v9;
  long long v10 = a3[1];
  v53[0] = *a3;
  v53[1] = v10;
  id v11 = [v6 initWithClientLocation:v53];
  id v12 = [[[*(id *)(a1 + 8) vendor] proxyForService:@"CLNetworkLocationProvider"];
  int v24 = *(_DWORD *)a2;
  std::string v26 = 0;
  uint64_t v27 = 0;
  long long v25 = 0;
  sub_10010F834(&v25, *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  long long v13 = *(_OWORD *)(a2 + 208);
  long long v38 = *(_OWORD *)(a2 + 192);
  v39[0] = v13;
  *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)(a2 + 220);
  long long v14 = *(_OWORD *)(a2 + 144);
  long long v34 = *(_OWORD *)(a2 + 128);
  long long v35 = v14;
  long long v15 = *(_OWORD *)(a2 + 176);
  long long v36 = *(_OWORD *)(a2 + 160);
  long long v37 = v15;
  long long v16 = *(_OWORD *)(a2 + 80);
  long long v30 = *(_OWORD *)(a2 + 64);
  long long v31 = v16;
  long long v17 = *(_OWORD *)(a2 + 112);
  long long v32 = *(_OWORD *)(a2 + 96);
  long long v33 = v17;
  long long v18 = *(_OWORD *)(a2 + 48);
  long long v28 = *(_OWORD *)(a2 + 32);
  long long v29 = v18;
  if (*(char *)(a2 + 263) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a2 + 240), *(void *)(a2 + 248));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 240);
    uint64_t v41 = *(void *)(a2 + 256);
  }
  long long v19 = *(_OWORD *)(a2 + 408);
  long long v50 = *(_OWORD *)(a2 + 392);
  long long v51 = v19;
  long long v20 = *(_OWORD *)(a2 + 344);
  long long v46 = *(_OWORD *)(a2 + 328);
  long long v47 = v20;
  long long v21 = *(_OWORD *)(a2 + 376);
  long long v48 = *(_OWORD *)(a2 + 360);
  long long v49 = v21;
  long long v22 = *(_OWORD *)(a2 + 280);
  long long v42 = *(_OWORD *)(a2 + 264);
  long long v43 = v22;
  long long v23 = *(_OWORD *)(a2 + 312);
  long long v44 = *(_OWORD *)(a2 + 296);
  long long v45 = v23;
  int v52 = *(_DWORD *)(a2 + 424);
  [v12 setLocation_CDMA:v11 forCell:sub_100794908(&v24)];
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)__p);
  }
  if (v25)
  {
    std::string v26 = v25;
    operator delete(v25);
  }
}

void sub_1007948DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100794908(int *a1)
{
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  void v15[2] = sub_100794C2C;
  v15[3] = &unk_1022C8528;
  int v16 = *a1;
  long long v18 = 0;
  uint64_t v19 = 0;
  long long v17 = 0;
  sub_10010F834(&v17, *((const void **)a1 + 1), *((void *)a1 + 2), (uint64_t)(*((void *)a1 + 2) - *((void *)a1 + 1)) >> 2);
  long long v2 = *((_OWORD *)a1 + 13);
  long long v30 = *((_OWORD *)a1 + 12);
  v31[0] = v2;
  *(_OWORD *)((char *)v31 + 12) = *(_OWORD *)(a1 + 55);
  long long v3 = *((_OWORD *)a1 + 9);
  long long v26 = *((_OWORD *)a1 + 8);
  long long v27 = v3;
  long long v4 = *((_OWORD *)a1 + 11);
  long long v28 = *((_OWORD *)a1 + 10);
  long long v29 = v4;
  long long v5 = *((_OWORD *)a1 + 5);
  long long v22 = *((_OWORD *)a1 + 4);
  long long v23 = v5;
  long long v6 = *((_OWORD *)a1 + 7);
  long long v24 = *((_OWORD *)a1 + 6);
  long long v25 = v6;
  long long v7 = *((_OWORD *)a1 + 3);
  long long v20 = *((_OWORD *)a1 + 2);
  long long v21 = v7;
  if (*((char *)a1 + 263) < 0)
  {
    sub_1000DC48C(&__p, *((void **)a1 + 30), *((void *)a1 + 31));
  }
  else
  {
    long long __p = *((_OWORD *)a1 + 15);
    uint64_t v33 = *((void *)a1 + 32);
  }
  long long v8 = *(_OWORD *)(a1 + 102);
  long long v42 = *(_OWORD *)(a1 + 98);
  long long v43 = v8;
  long long v9 = *(_OWORD *)(a1 + 86);
  long long v38 = *(_OWORD *)(a1 + 82);
  long long v39 = v9;
  long long v10 = *(_OWORD *)(a1 + 94);
  long long v40 = *(_OWORD *)(a1 + 90);
  long long v41 = v10;
  long long v11 = *(_OWORD *)(a1 + 70);
  long long v34 = *(_OWORD *)(a1 + 66);
  long long v35 = v11;
  long long v12 = *(_OWORD *)(a1 + 78);
  long long v36 = *(_OWORD *)(a1 + 74);
  long long v37 = v12;
  int v44 = a1[106];
  id v13 = [v15 copy];
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  if (v17)
  {
    long long v18 = v17;
    operator delete(v17);
  }
  return v13;
}

void sub_100794A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100794AA4(uint64_t a1, long long *a2, _OWORD *a3)
{
  id v6 = objc_alloc((Class)CLLocation);
  long long v7 = a3[7];
  v17[6] = a3[6];
  v17[7] = v7;
  v18[0] = a3[8];
  *(_OWORD *)((char *)v18 + 12) = *(_OWORD *)((char *)a3 + 140);
  long long v8 = a3[3];
  _OWORD v17[2] = a3[2];
  v17[3] = v8;
  long long v9 = a3[5];
  void v17[4] = a3[4];
  void v17[5] = v9;
  long long v10 = a3[1];
  v17[0] = *a3;
  v17[1] = v10;
  id v11 = [v6 initWithClientLocation:v17];
  id v12 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLNetworkLocationProvider"];
  long long v13 = a2[3];
  long long v22 = a2[2];
  long long v23 = v13;
  long long v14 = a2[5];
  long long v24 = a2[4];
  long long v25 = v14;
  long long v15 = a2[1];
  long long v20 = *a2;
  long long v21 = v15;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_100794EC4;
  v19[3] = &unk_1022C8558;
  return [v12 setLocation_NR:v11 forCell:[v19 copy]];
}

id sub_100794BB8(uint64_t a1)
{
  id v1 = [[objc_msgSend(*(id *)(a1 + 8), "vendor") proxyForService:@"CLWifiService"];

  return _[v1 syncgetIsAssociated];
}

__n128 sub_100794BF0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

__n128 sub_100794BFC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

__n128 sub_100794C08@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v2;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(void *)(a2 + 80) = *(void *)(a1 + 112);
  __n128 result = *(__n128 *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

__n128 sub_100794C2C@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  sub_10010F834((void *)(a2 + 8), *(const void **)(a1 + 40), *(void *)(a1 + 48), (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2);
  long long v4 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 224);
  *(_OWORD *)(a2 + 208) = v4;
  *(_OWORD *)(a2 + 220) = *(_OWORD *)(a1 + 252);
  long long v5 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = v5;
  long long v6 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 192);
  *(_OWORD *)(a2 + 176) = v6;
  long long v7 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v7;
  long long v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v9;
  long long v10 = (unsigned char *)(a2 + 240);
  if (*(char *)(a1 + 295) < 0)
  {
    sub_1000DC48C(v10, *(void **)(a1 + 272), *(void *)(a1 + 280));
  }
  else
  {
    *(_OWORD *)long long v10 = *(_OWORD *)(a1 + 272);
    *(void *)(a2 + 256) = *(void *)(a1 + 288);
  }
  *(_DWORD *)(a2 + 424) = *(_DWORD *)(a1 + 456);
  long long v11 = *(_OWORD *)(a1 + 440);
  *(_OWORD *)(a2 + 392) = *(_OWORD *)(a1 + 424);
  *(_OWORD *)(a2 + 408) = v11;
  long long v12 = *(_OWORD *)(a1 + 376);
  *(_OWORD *)(a2 + 328) = *(_OWORD *)(a1 + 360);
  *(_OWORD *)(a2 + 344) = v12;
  long long v13 = *(_OWORD *)(a1 + 408);
  *(_OWORD *)(a2 + 360) = *(_OWORD *)(a1 + 392);
  *(_OWORD *)(a2 + 376) = v13;
  long long v14 = *(_OWORD *)(a1 + 312);
  *(_OWORD *)(a2 + 264) = *(_OWORD *)(a1 + 296);
  *(_OWORD *)(a2 + 280) = v14;
  __n128 result = *(__n128 *)(a1 + 344);
  *(_OWORD *)(a2 + 296) = *(_OWORD *)(a1 + 328);
  *(__n128 *)(a2 + 312) = result;
  return result;
}

void sub_100794D1C(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100794D38(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = a1 + 40;
  *(_DWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_10010F834((void *)(a1 + 40), *(const void **)(a2 + 40), *(void *)(a2 + 48), (uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 2);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 80);
  long long v7 = *(_OWORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v5 + 88) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v5 + 72) = v8;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  long long v9 = *(_OWORD *)(a2 + 144);
  long long v10 = *(_OWORD *)(a2 + 160);
  long long v11 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(v5 + 152) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(v5 + 136) = v11;
  *(_OWORD *)(v5 + 120) = v10;
  *(_OWORD *)(v5 + 104) = v9;
  long long v12 = *(_OWORD *)(a2 + 208);
  long long v13 = *(_OWORD *)(a2 + 224);
  long long v14 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(v5 + 212) = *(_OWORD *)(a2 + 252);
  *(_OWORD *)(v5 + 200) = v14;
  *(_OWORD *)(v5 + 184) = v13;
  *(_OWORD *)(v5 + 168) = v12;
  long long v15 = (unsigned char *)(v5 + 232);
  if (*(char *)(a2 + 295) < 0)
  {
    sub_1000DC48C(v15, *(void **)(a2 + 272), *(void *)(a2 + 280));
  }
  else
  {
    long long v16 = *(_OWORD *)(a2 + 272);
    *(void *)(v5 + 248) = *(void *)(a2 + 288);
    *(_OWORD *)long long v15 = v16;
  }
  long long v17 = *(_OWORD *)(a2 + 296);
  long long v18 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(_OWORD *)(a1 + 328) = v18;
  *(_OWORD *)(a1 + 296) = v17;
  long long v19 = *(_OWORD *)(a2 + 344);
  long long v20 = *(_OWORD *)(a2 + 360);
  long long v21 = *(_OWORD *)(a2 + 392);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 392) = v21;
  *(_OWORD *)(a1 + 344) = v19;
  *(_OWORD *)(a1 + 360) = v20;
  __n128 result = *(__n128 *)(a2 + 408);
  long long v23 = *(_OWORD *)(a2 + 424);
  long long v24 = *(_OWORD *)(a2 + 440);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_OWORD *)(a1 + 424) = v23;
  *(_OWORD *)(a1 + 440) = v24;
  *(__n128 *)(a1 + 408) = result;
  return result;
}

void sub_100794E50(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100794E6C(uint64_t a1)
{
  if (*(char *)(a1 + 295) < 0) {
    operator delete(*(void **)(a1 + 272));
  }
  long long v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

__n128 sub_100794EC4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = v2;
  long long v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v5;
  return result;
}

void sub_100794EE0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_100794F60()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_100794FF0(_Unwind_Exception *a1)
{
}

void sub_1007950B8(id a1)
{
  qword_10247DFD0 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLCountryTrackerSilo"];
}

void sub_1007957CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100795814(uint64_t a1)
{
  return [*(id *)(a1 + 32) refreshSettings];
}

id sub_10079581C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _[a4 onManagerNotification:a2 data:a3];
}

id sub_10079582C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) onLocationUnknownTimer];
}

id sub_100795834(uint64_t a1)
{
  if (qword_1024194E0 != -1) {
    dispatch_once(&qword_1024194E0, &stru_1022C8628);
  }
  long long v2 = qword_1024194E8;
  if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    __int16 v5 = 2082;
    long long v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"reverting to cheap location only\"}", (uint8_t *)v4, 0x12u);
  }
  return [*(id *)(a1 + 32) requestLocationWithDesiredAccuracy:kCLLocationAccuracyBystander];
}

void sub_100795924(id a1, NSString *a2, NSDictionary *a3)
{
  if (a3 && [(NSDictionary *)a3 count])
  {
    id v5 = [objc_alloc((Class)NSString) initWithData:-[NSDictionary objectForKeyedSubscript:](a3, "objectForKeyedSubscript:", @"com.apple.RegulatoryDomain.peer_status.countryCode") encoding:4];
    unsigned int v16 = 0;
    [a3 objectForKeyedSubscript:@"com.apple.RegulatoryDomain.peer_status.priority"] getBytes:&v16 length:4;
    double v15 = 0.0;
    [a3 objectForKeyedSubscript:@"com.apple.RegulatoryDomain.peer_status.timestamp"] getBytes:&v15 length:8;
    long long v6 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v15];
    id v7 = +[NSMutableDictionary dictionary];
    [v7 setObject:v5 forKeyedSubscript:@"com.apple.RegulatoryDomain.peer_status.countryCode"];
    [v7 setObject:+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v16) forKeyedSubscript:@"com.apple.RegulatoryDomain.peer_status.priority"];
    [v7 setObject:v6 forKeyedSubscript:@"com.apple.RegulatoryDomain.peer_status.timestamp"];
    unsigned __int8 v14 = 0;
    [a3 objectForKeyedSubscript:@"com.apple.RegulatoryDomain.peer_status.isDisputed"] getBytes:&v14 length:1;
    [v7 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v14) forKeyedSubscript:@"com.apple.RegulatoryDomain.peer_status.isDisputed"];
    if (qword_1024194E0 != -1) {
      dispatch_once(&qword_1024194E0, &stru_1022C8628);
    }
    long long v8 = qword_1024194E8;
    if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_DEFAULT))
    {
      long long v9 = [(NSString *)a2 UTF8String];
      id v10 = [v5 UTF8String];
      double v11 = v15;
      uint64_t v12 = v16;
      long long v13 = +[NSNumber numberWithBool:v14];
      *(_DWORD *)std::string buf = 68290562;
      int v19 = 0;
      __int16 v20 = 2082;
      long long v21 = "";
      __int16 v22 = 2082;
      long long v23 = v9;
      __int16 v24 = 2082;
      id v25 = v10;
      __int16 v26 = 2114;
      long long v27 = v6;
      __int16 v28 = 2050;
      double v29 = v11;
      __int16 v30 = 2050;
      uint64_t v31 = v12;
      __int16 v32 = 2114;
      uint64_t v33 = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"received a peer update, forwarding...\", \"deviceID\":%{public, location:escape_only}s, \"country\":%{public, location:escape_only}s, \"timestamp\":%{public, location:escape_only}@, \"timestampVal\":\"%{public}f\", \"priority\":%{public}lu, \"disputed?\":%{public, location:escape_only}@}", buf, 0x4Eu);
    }
    id v17 = v7;
    +[NSArray arrayWithObjects:&v17 count:1];
    RDUpdateCountryCodeFromPeerInfo();
  }
  else
  {
    _RDUpdateCountryCodeFromPeer(a2, 0);
  }
}

id sub_100795C2C(uint64_t a1)
{
  if (qword_1024194E0 != -1) {
    dispatch_once(&qword_1024194E0, &stru_1022C8628);
  }
  long long v2 = qword_1024194E8;
  if (os_log_type_enabled((os_log_t)qword_1024194E8, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) timeToActiveGiveup];
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    long long v9 = "";
    __int16 v10 = 1026;
    int v11 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"timeout elapsed with no locations for current country, requesting low-cost active update\", \"duration\":%{public}d}", (uint8_t *)v7, 0x18u);
  }
  [*(id *)(a1 + 32) requestLocationWithDesiredAccuracy:kCLLocationAccuracyKilometer];
  int v4 = *(void **)(a1 + 32);
  id v5 = (void *)v4[4];
  [v4 timeToActiveGiveup];
  return [v5 setNextFireDelay:];
}

void sub_100795F64(uint64_t a1)
{
}

void sub_100797008(id a1)
{
  qword_1024194E8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Country");
}

uint64_t sub_100797038()
{
  sub_100134750(&qword_10247DFB8, "CountryTracker");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_10247DFB8, (void *)&_mh_execute_header);
}

void *sub_100797098(uint64_t a1, uint64_t a2)
{
  __n128 result = (void *)sub_1015399DC(a1, a2);
  *__n128 result = off_1022C8658;
  return result;
}

void *sub_1007970CC(void *result)
{
  *__n128 result = off_1022C86D0;
  return result;
}

void sub_1007970EC(void *a1)
{
  *a1 = off_1022C86D0;
  operator delete();
}

void sub_10079711C(uint64_t a1, void *a2)
{
}

void sub_10079762C()
{
}

void sub_10079781C()
{
}

void sub_100797AD0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C8978);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onCompanionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C8978);
    }
    long long v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      double v15 = "";
      __int16 v16 = 2082;
      id v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onCompanionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10079A7B4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_100797C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_100797CAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [*(id *)(v3 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  _DWORD v7[2] = sub_100797D6C;
  v7[3] = &unk_1022C8850;
  uint64_t v6 = *a2;
  id v5 = (std::__shared_weak_count *)a2[1];
  v7[4] = v3;
  v7[5] = v6;
  __int16 v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v4 async:v7];
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_100797D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100797D6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  v4[0] = *(long long ***)(a1 + 40);
  v4[1] = (long long **)v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100797DF8(v2, v4);
  if (v3)
  {
    sub_1000DB0A0((std::__shared_weak_count *)v3);
  }
}

void sub_100797DE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100797DF8(uint64_t a1, long long ***a2)
{
  __int16 v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v2 = **a2;
  if (v2 != (*a2)[1])
  {
    uint64_t v5 = a1 + 1368;
    uint64_t v6 = **a2;
    do
    {
      long long v15 = *v6;
      long long v16 = v6[1];
      uint64_t v17 = *((void *)v6 + 4);
      long long v13 = *(long long *)((char *)v6 + 44);
      int v14 = *((_DWORD *)v6 + 15);
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v21 = v15;
      long long v22 = v16;
      *(void *)long long v23 = v17;
      *(_DWORD *)&std::string::value_type v23[8] = 1;
      *(_DWORD *)&v23[28] = v14;
      *(_OWORD *)&v23[12] = v13;
      int v12 = 8;
      (*(void (**)(uint64_t, int *, long long *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v12, &v21, 0, 0xFFFFFFFFLL, 0);
      sub_1012E8AF0(v5, v2, (void **)&v18);
      v2 += 4;
      v6 += 4;
    }
    while (v6 != (*a2)[1]);
    __int16 v8 = v18;
    uint64_t v7 = v19;
    if (v18 != v19)
    {
      do
      {
        if (*((unsigned char *)v8 + 61))
        {
          long long v30 = 0u;
          long long v31 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          long long v9 = *v8;
          long long v10 = v8[1];
          long long v11 = v8[3];
          *(_OWORD *)long long v23 = v8[2];
          *(_OWORD *)&v23[16] = v11;
          long long v21 = v9;
          long long v22 = v10;
          LODWORD(v15) = 7;
          (*(void (**)(uint64_t, long long *, long long *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v15, &v21, 0, 0xFFFFFFFFLL, 0);
        }
        v8 += 4;
      }
      while (v8 != v7);
      uint64_t v7 = v18;
    }
    if (v7)
    {
      uint64_t v19 = v7;
      operator delete(v7);
    }
  }
}

void sub_100797FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100798008(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = [*(id *)(v3 + 32) silo];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  _DWORD v7[2] = sub_1007980C8;
  v7[3] = &unk_1022C88A0;
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v7[4] = v3;
  v7[5] = v6;
  __int16 v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  [v4 async:v7];
  if (v8) {
    sub_1000DB0A0(v8);
  }
}

void sub_1007980B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1000DB0A0(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007980C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  v4[0] = *(uint64_t **)(a1 + 40);
  v4[1] = (uint64_t *)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100798154(v2, v4);
  if (v3)
  {
    sub_1000DB0A0(v3);
  }
}

void sub_10079813C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100798154(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = *v2;
    uint64_t v4 = v2[1];
    if (*v2 != v4)
    {
      uint64_t v6 = a1 + 3752;
      do
      {
        uint64_t v7 = *(unsigned int *)(v3 + 8);
        double v12 = *(double *)v3;
        double v8 = v12;
        long long v25 = 0u;
        long long v26 = 0u;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        long long v16 = 0u;
        int v13 = v7;
        int v14 = 1;
        v15[0] = sub_10079AD54(v6, (uint64_t)&v12);
        v15[1] = v9;
        LODWORD(v12) = 5;
        (*(void (**)(uint64_t, double *, void *, void, uint64_t, void))(*(void *)a1 + 152))(a1, &v12, v15, 0, 0xFFFFFFFFLL, 0);
        long long v11 = objc_alloc_init(ALActivityLog);
        [(ALActivityLog *)v11 setTimestamp:v8];
        [(ALActivityLog *)v11 setCoarseElevation:objc_alloc_init(ALCMCoarseElevation)];
        [(ALCMCoarseElevation *)[(ALActivityLog *)v11 coarseElevation] setElevationAscended:v7];
        [(ALCMCoarseElevation *)[(ALActivityLog *)v11 coarseElevation] setSource:1];
        [[+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v11];
        v3 += 16;
      }
      while (v3 != v4);
    }
  }
}

uint64_t sub_1007982E4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100798300(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_1000DB0A0(v1);
  }
}

void sub_100798310(unsigned __int8 *a1, int a2)
{
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022C89B8);
  }
  uint64_t v4 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = a1[1128];
    *(_DWORD *)std::string buf = 67240448;
    int v8 = v5;
    __int16 v9 = 1026;
    int v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Update location authorization, current, %{public}d, new, %{public}d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::updateStateOnAuthorization(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  if (a1[1128] != a2)
  {
    sub_100798BA4((uint64_t)a1);
    sub_10079781C(a1);
    a1[1128] = a2;
    (*(void (**)(unsigned __int8 *))(*(void *)a1 + 232))(a1);
  }
}

void sub_100798528(float *a1, uint64_t a2)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C8978);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v7 = 1;
    uint64_t v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onFlightSegment", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C8978);
    }
    int v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v9 = 0;
      __int16 v10 = 2082;
      long long v11 = "";
      __int16 v12 = 2082;
      int v13 = "activity";
      __int16 v14 = 2050;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onFlightSegment\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v7 = 0;
  }
  sub_10079CA24(a2, a1);
  if (v7) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007986DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007986FC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C8978);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C8978);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      long long v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10079C670(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007988B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1007988D8(void *a1)
{
  sub_10079D264(a1 + 9, 0);
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_10079891C(uint64_t a1)
{
  *(void *)a1 = off_1022C8720;
  *(void *)(a1 + 920) = off_1022C8830;
  sub_100798BA4(a1);
  if (sub_1000D2E34(0))
  {
    uint64_t v2 = sub_1000D2E34(0);
    sub_1009D26C4(v2, 28, *(void *)(a1 + 3928));
    uint64_t v3 = *(void *)(a1 + 3928);
    *(void *)(a1 + 3928) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  uint64_t v4 = *(void *)(a1 + 1168);
  *(void *)(a1 + 1168) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  *(void *)(a1 + 3992) = 0;
  uint64_t v5 = *(void *)(a1 + 3928);
  *(void *)(a1 + 3928) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 3920);
  *(void *)(a1 + 3920) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 3912);
  *(void *)(a1 + 3912) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 3904);
  *(void *)(a1 + 3904) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *(void *)(a1 + 3896);
  *(void *)(a1 + 3896) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *(void *)(a1 + 3888);
  *(void *)(a1 + 3888) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  sub_10079D264((uint64_t *)(a1 + 3872), 0);
  char v11 = *(void **)(a1 + 3824);
  if (v11)
  {
    *(void *)(a1 + 3832) = v11;
    operator delete(v11);
  }
  sub_1012E841C(a1 + 1368);
  sub_100C0AB60(a1 + 1176);
  uint64_t v12 = *(void *)(a1 + 1168);
  *(void *)(a1 + 1168) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }

  return sub_10049FFA8(a1);
}

uint64_t sub_100798BA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 3888);
  *(void *)(a1 + 3888) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 3896);
  *(void *)(a1 + 3896) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 3912);
  *(void *)(a1 + 3912) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  [*(id *)(a1 + 1136) releaseAccuracyEnablementAssertionForClient:CLISP_ME_TOKEN];

  *(void *)(a1 + 1136) = 0;
  uint64_t result = *(void *)(a1 + 3920);
  if (result)
  {
    *(void *)(a1 + 3920) = 0;
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v6();
  }
  return result;
}

uint64_t sub_100798CC0(uint64_t a1)
{
  return sub_10079891C(a1 - 920);
}

void sub_100798CC8(uint64_t a1)
{
  sub_10079891C(a1);

  operator delete();
}

void sub_100798D00(uint64_t a1)
{
  sub_10079891C(a1 - 920);

  operator delete();
}

id sub_100798D3C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100798DB4;
  unsigned __int8 v4[3] = &unk_1022BBA18;
  v4[4] = a1;
  char v5 = a2;
  return [v2 async:v4];
}

id sub_100798DB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40))
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022C8998);
    }
    uint64_t v2 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Enabling kNotificationOdometerUpdateElevation from companion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022C8998);
      }
      char v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::updatePhoneWorkoutElevationSubscription(BOOL)_block_invoke", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
    *(_DWORD *)std::string buf = 3;
    return [*(id *)(*(void *)(v1 + 1168) + 16) register:*(void *)(*(void *)(v1 + 1168) + 8) forNotification:sub_1005E2A3C(buf) registrationInfo:0];
  }
  else
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022C8998);
    }
    uint64_t v4 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Disabling kNotificationOdometerUpdateElevation from companion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022C8998);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::updatePhoneWorkoutElevationSubscription(BOOL)_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    *(_DWORD *)std::string buf = 3;
    return [*(id *)(*(void *)(v1 + 1168) + 16) unregister:*(void *)(*(void *)(v1 + 1168) + 8) forNotification:sub_1005E2A3C(buf)];
  }
}

id sub_1007990BC(uint64_t a1, uint64_t a2)
{
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022C89B8);
  }
  uint64_t v4 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Added client for cycling workout distance updates", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::registerForCyclingWorkoutDistanceUpdates(id<CLOdometerNotifierClientProtocol>)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [*(id *)(a1 + 3880) addObject:a2];
}

id sub_100799260(uint64_t a1, uint64_t a2)
{
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022C89B8);
  }
  uint64_t v4 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removed client from cycling workout distance updates", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::unregisterForCyclingWorkoutDistanceUpdates(id<CLOdometerNotifierClientProtocol>)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [*(id *)(a1 + 3880) removeObject:a2];
}

void sub_100799404(uint64_t a1)
{
  uint64_t v2 = sub_1000D2E34(0);
  *(_DWORD *)std::string buf = 5;
  if (!sub_1001072EC(a1, (int *)buf, 1))
  {
    if (v2) {
      (*(void (**)(uint64_t, void))(*(void *)(v2 + 72) + 40))(v2 + 72, 0);
    }
    *(_DWORD *)std::string buf = 5;
    [*(id *)(*(void *)(a1 + 1168) + 16) unregister:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:sub_1005E2A3C(buf)];
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022C8998);
    }
    uint64_t v6 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "CoarseElevation,src,phone,0,watch,0", buf, 2u);
    }
    if (!sub_10013D1A0(115, 2)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 != -1) {
      goto LABEL_45;
    }
LABEL_43:
    uint64_t v9 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::updateCoarseElevationSubscription()", "%s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
    return;
  }
  if (!*(unsigned char *)(a1 + 3985))
  {
    if (*(unsigned char *)(a1 + 1130) || !v2)
    {
      if (!v2) {
        goto LABEL_36;
      }
    }
    else if ((*(unsigned int (**)(uint64_t))(*(void *)(v2 + 72) + 16))(v2 + 72) {
           && (sub_1000A16E8() & 0x1000000000) != 0)
    }
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 72) + 40))(v2 + 72, 1);
      *(_DWORD *)std::string buf = 5;
      [*(id *)(*(void *)(a1 + 1168) + 16) unregister:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:sub_1005E2A3C(buf)];
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022C8998);
      }
      uint64_t v7 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CoarseElevation,src,phone,0,watch,1", buf, 2u);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        goto LABEL_45;
      }
      goto LABEL_43;
    }
    (*(void (**)(uint64_t, void))(*(void *)(v2 + 72) + 40))(v2 + 72, 0);
LABEL_36:
    *(_DWORD *)std::string buf = 5;
    [*(id *)(*(void *)(a1 + 1168) + 16) register:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:sub_1005E2A3C(buf) registrationInfo:0];
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022C8998);
    }
    uint64_t v8 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CoarseElevation,src,phone,1,watch,0", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 == -1) {
        goto LABEL_43;
      }
      goto LABEL_45;
    }
    return;
  }
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 72);
    uint64_t v3 = v2 + 72;
    if ((*(unsigned int (**)(uint64_t))(v4 + 16))(v3))
    {
      if ((sub_1000A16E8() & 0x1000000000) != 0) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 40))(v3, 1);
      }
    }
  }
  *(_DWORD *)std::string buf = 5;
  [*(id *)(*(void *)(a1 + 1168) + 16) register:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:sub_1005E2A3C(buf) registrationInfo:0];
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022C8998);
  }
  char v5 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "CoarseElevation,phone,1,watch,1", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024190D0 == -1) {
      goto LABEL_43;
    }
LABEL_45:
    dispatch_once(&qword_1024190D0, &stru_1022C8998);
    goto LABEL_43;
  }
}

void sub_1007999F8(unsigned char *a1)
{
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022C89B8);
  }
  uint64_t v2 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = a1[1128];
    *(_DWORD *)std::string buf = 2;
    int v4 = sub_1001072EC((uint64_t)a1, (int *)buf, 1);
    int v5 = a1[1131];
    *(_DWORD *)std::string buf = 67240704;
    int v17 = v3;
    __int16 v18 = 1026;
    int v19 = v4;
    __int16 v20 = 1026;
    int v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Updating odometer state, authorized, %{public}d, has active clients, %{public}d, workout distance controller, %{public}d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    int v7 = a1[1128];
    v11[0] = 2;
    int v8 = sub_1001072EC((uint64_t)a1, v11, 1);
    int v9 = a1[1131];
    v11[0] = 67240704;
    v11[1] = v7;
    __int16 v12 = 1026;
    int v13 = v8;
    __int16 v14 = 1026;
    int v15 = v9;
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLOdometerNotifierWatch::updateOdometerState()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (a1[1128] && ((*(_DWORD *)std::string buf = 2, sub_1001072EC((uint64_t)a1, (int *)buf, 1)) || a1[1131])) {
    sub_100799C80((uint64_t)a1);
  }
  else {
    sub_10079A018(a1);
  }
  *(_DWORD *)std::string buf = 3;
  int v6 = sub_1001072EC((uint64_t)a1, (int *)buf, 1);
  sub_1012E9458((uint64_t)(a1 + 1368), v6);
  sub_100799404((uint64_t)a1);
}

void sub_100799C80(uint64_t a1)
{
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022C89B8);
  }
  uint64_t v2 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Enable GPS; Start GPS subscription", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    int v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::enableGPS()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = *(void *)(a1 + 3920);
  if (v3) {
    [*(id *)(v3 + 16) register:*(void *)(v3 + 8) forNotification:41 registrationInfo:0];
  }
  if (*(unsigned char *)(a1 + 1144))
  {
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    int v4 = qword_102419158;
    if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Switching to GPS leech, rhythmic waking mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022C89B8);
      }
      int v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::enableGPS()", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    [*(id *)(a1 + 1136) releaseAccuracyEnablementAssertionForClient:CLISP_ME_TOKEN];
    [*(id *)(*(void *)(a1 + 3888) + 16) unregister:*(void *)(*(void *)(a1 + 3888) + 8) forNotification:0];
    [*(id *)(*(void *)(a1 + 3888) + 16) register:*(void *)(*(void *)(a1 + 3888) + 8) forNotification:5 registrationInfo:0];
    [*(id *)(*(void *)(a1 + 3912) + 16) register:*(void *)(*(void *)(a1 + 3912) + 8) forNotification:23 registrationInfo:0];
    sub_100C0C518(a1 + 1176, 1);
  }
  else
  {
    [*(id *)(*(void *)(a1 + 3888) + 16) unregister:*(void *)(*(void *)(a1 + 3888) + 8) forNotification:5];
    [*(id *)(*(void *)(a1 + 3912) + 16) unregister:*(void *)(*(void *)(a1 + 3912) + 8) forNotification:23];
    [*(id *)(*(void *)(a1 + 3888) + 16) register:*(void *)(*(void *)(a1 + 3888) + 8) forNotification:0 registrationInfo:0];
    sub_100C0C518(a1 + 1176, -1);
    [*(id *)(a1 + 1136) takeAccuracyEnablementAssertionForClient:CLISP_ME_TOKEN withDesiredAccuracy:-1.0];
  }
  *(unsigned char *)(a1 + 1129) = 1;
}

unsigned char *sub_10079A018(unsigned char *result)
{
  if (result[1129])
  {
    uint64_t v1 = result;
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    uint64_t v2 = qword_102419158;
    if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Disable GPS; Stop GPS subscription", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022C89B8);
      }
      int v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::disableGPS()", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    [*(id *)(*((void *)v1 + 486) + 16) unregister:*(void *)(*((void *)v1 + 486) + 8) forNotification:0];
    [*(id *)(*((void *)v1 + 486) + 16) unregister:*(void *)(*((void *)v1 + 486) + 8) forNotification:5];
    [*(id *)(*((void *)v1 + 489) + 16) unregister:*(void *)(*((void *)v1 + 489) + 8) forNotification:23];
    sub_100C0C518((uint64_t)(v1 + 1176), -1);
    uint64_t result = [*((id *)v1 + 142) releaseAccuracyEnablementAssertionForClient:CLISP_ME_TOKEN];
    uint64_t v3 = *((void *)v1 + 490);
    if (v3) {
      uint64_t result = [*(id *)(v3 + 16) unregister:*(void *)(v3 + 8) forNotification:41];
    }
    v1[1129] = 0;
    v1[1145] = 0;
  }
  return result;
}

void sub_10079A220(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C8978);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C8978);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10079B068((unsigned __int8 *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10079A3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10079A3FC(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C8978);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onSignalEnvironmentNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C8978);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onSignalEnvironmentNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10079C614(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10079A5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10079A5D8(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C8978);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    int v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLOdometerNotifierWatch::onRhythmicGnssModeOfOperationStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C8978);
    }
    int v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2082;
      int v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLOdometerNotifierWatch::onRhythmicGnssModeOfOperationStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_10079CFB8((unsigned char *)a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_10079A794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_10079A7B4(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v6 = *a3;
  if (*a3 == 8)
  {
    *(_DWORD *)std::string buf = 5;
    if (!sub_1001072EC(a1, (int *)buf, 1)
      || *(unsigned char *)(a1 + 3985) && (sub_1000A16E8() & 0x1000000000) != 0)
    {
      *(_DWORD *)std::string buf = 5;
      [*(id *)(*(void *)(a1 + 1168) + 16) unregister:*(void *)(*(void *)(a1 + 1168) + 8) forNotification:sub_1005E2A3C(buf)];
    }
    else
    {
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v30 = 0u;
      *(void *)std::string buf = sub_10079AD54(a1 + 3752, a4);
      uint64_t v29 = v12;
      LODWORD(v22[0]) = 5;
      (*(void (**)(uint64_t, _OWORD *, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, v22, buf, 0, 0xFFFFFFFFLL, 0);
      __int16 v14 = objc_alloc_init(ALActivityLog);
      [(ALActivityLog *)v14 setTimestamp:*(double *)a4];
      [(ALActivityLog *)v14 setCoarseElevation:objc_alloc_init(ALCMCoarseElevation)];
      [(ALCMCoarseElevation *)[(ALActivityLog *)v14 coarseElevation] setElevationAscended:*(unsigned int *)(a4 + 8)];
      [(ALCMCoarseElevation *)[(ALActivityLog *)v14 coarseElevation] setSource:*(unsigned int *)(a4 + 12)];
      [+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance") proxyForService:@"CLActivityLogger"] logData:v14;
    }
  }
  else if (v6 == 6)
  {
    if (*(unsigned char *)a4) {
      BOOL v15 = *(unsigned char *)(a4 + 1) == 0;
    }
    else {
      BOOL v15 = 1;
    }
    int v16 = !v15;
    int v17 = *(unsigned __int8 *)(a4 + 16);
    if (*(unsigned char *)(a4 + 16)) {
      int v18 = v16;
    }
    else {
      int v18 = 0;
    }
    if (*(unsigned __int8 *)(a1 + 1130) != v18)
    {
      *(unsigned char *)(a1 + 1130) = v18;
      sub_100799404(a1);
    }
    sub_1012E9640(a1 + 1368, v16, v17 != 0);
  }
  else if (v6 == 4)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v8 = Current;
    if (*(unsigned char *)(a1 + 1444))
    {
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v9 = *(_OWORD *)(a4 + 16);
      v23[0] = *(_OWORD *)a4;
      v23[1] = v9;
      long long v10 = *(_OWORD *)(a4 + 48);
      v23[2] = *(_OWORD *)(a4 + 32);
      v23[3] = v10;
      sub_1012E8420(a1 + 1368, (uint64_t)v23, (uint64_t)&v24);
      memset(&v22[4], 0, 128);
      v22[0] = v24;
      v22[1] = v25;
      void v22[2] = v26;
      v22[3] = v27;
      if (v8 - *(double *)(a1 + 1152) > 15.0)
      {
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022C8998);
        }
        char v11 = qword_1024190D8;
        if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "watch:notifying elevation entry from phone", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1024190D0 != -1) {
            dispatch_once(&qword_1024190D0, &stru_1022C8998);
          }
          __int16 v20 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v20);
          if (v20 != (char *)buf) {
            free(v20);
          }
        }
        *(double *)(a1 + 1152) = v8;
      }
      *(_DWORD *)std::string buf = 7;
      (*(void (**)(uint64_t, uint8_t *, _OWORD *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, v22, 0, 0xFFFFFFFFLL, 0);
    }
    else if (Current - *(double *)(a1 + 1152) > 15.0)
    {
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022C8998);
      }
      uint64_t v19 = qword_1024190D8;
      if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "elevation update from phone, source unavailable", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1024190D0 != -1) {
          dispatch_once(&qword_1024190D0, &stru_1022C8998);
        }
        LOWORD(v22[0]) = 0;
        int v21 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)", "%s\n", v21);
        if (v21 != (char *)buf) {
          free(v21);
        }
      }
      *(double *)(a1 + 1152) = v8;
    }
  }
}

uint64_t sub_10079AD54(uint64_t a1, uint64_t a2)
{
  double v4 = *(double *)a2;
  double v5 = *(double *)(a1 + 32);
  if (*(double *)a2 <= v5) {
    goto LABEL_18;
  }
  int v6 = *(_DWORD *)(a2 + 12);
  uint64_t v7 = a1 + 16;
  if (!v6) {
    uint64_t v7 = a1;
  }
  int v8 = *(_DWORD *)(a2 + 8) - *(_DWORD *)(v7 + 8);
  if (v8 < 0) {
    int v8 = *(_DWORD *)(v7 + 8) - *(_DWORD *)(a2 + 8);
  }
  if (v6 == *(_DWORD *)(a1 + 44))
  {
    int v9 = *(_DWORD *)(a1 + 40);
    BOOL v10 = v8 >= 0x12C;
    int v11 = 300;
  }
  else
  {
    if (v4 - *(double *)(a1 + 16 * (v6 != 0)) <= 200.0)
    {
      if (v8 >= 0x12C) {
        int v8 = 300;
      }
      unsigned int v12 = *(_DWORD *)(a1 + 40) + (fmin(v4 - v5, 180.0) * (double)v8 / 180.0);
      goto LABEL_17;
    }
    int v9 = *(_DWORD *)(a1 + 40);
    BOOL v10 = v8 >= 0xC8;
    int v11 = 200;
  }
  if (v10) {
    int v8 = v11;
  }
  unsigned int v12 = v9 + v8;
LABEL_17:
  *(double *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = v12;
  *(_DWORD *)(a1 + 44) = v6;
LABEL_18:
  if (*(_DWORD *)(a2 + 12)) {
    int v13 = (_OWORD *)(a1 + 16);
  }
  else {
    int v13 = (_OWORD *)a1;
  }
  *int v13 = *(_OWORD *)a2;
  sub_100103240();
  if (sub_10073E30C())
  {
    if (qword_1024190D0 != -1) {
      dispatch_once(&qword_1024190D0, &stru_1022C8998);
    }
    __int16 v14 = qword_1024190D8;
    if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEFAULT))
    {
      double v15 = *(double *)a2;
      int v16 = *(_DWORD *)(a2 + 8);
      int v17 = *(_DWORD *)(a2 + 12);
      uint64_t v18 = *(void *)(a1 + 32);
      int v19 = *(_DWORD *)(a1 + 40);
      int v20 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)std::string buf = 134219264;
      double v24 = v15;
      __int16 v25 = 1024;
      int v26 = v16;
      __int16 v27 = 1024;
      int v28 = v17;
      __int16 v29 = 2048;
      uint64_t v30 = v18;
      __int16 v31 = 1024;
      int v32 = v19;
      __int16 v33 = 1024;
      int v34 = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "onCoarseElevation,startTime,%.3f,ascended,%d,source,%d,fused,startTime,%.3f,ascended,%d,source,%d", buf, 0x2Eu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024190D0 != -1) {
        dispatch_once(&qword_1024190D0, &stru_1022C8998);
      }
      long long v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLCoarseElevationChangeEntry CLCoarseElevationFusion::feedSample(const CLCoarseElevationChangeEntry &)", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
    }
  }
  return *(void *)(a1 + 32);
}

void sub_10079B068(unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v7 = *a3;
  if (*a3 <= 13)
  {
    if (v7)
    {
      if (v7 == 5)
      {
        sub_10079B518(a1, 1);
        return;
      }
      goto LABEL_29;
    }
    int v8 = 1;
LABEL_11:
    int v9 = *(int **)(a4 + 800);
    if (v9 && (unint64_t)sub_1010FB9FC(v9) >= 2)
    {
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022C89B8);
      }
      BOOL v10 = qword_102419158;
      if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v11 = sub_1010FB9FC(*(int **)(a4 + 800));
        *(_DWORD *)std::string buf = 134349056;
        uint64_t v23 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Location batch notification size %{public}ld", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419150 != -1) {
          dispatch_once(&qword_102419150, &stru_1022C89B8);
        }
        uint64_t v18 = sub_1010FB9FC(*(int **)(a4 + 800));
        int v20 = 134349056;
        uint64_t v21 = v18;
        int v19 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v19);
        if (v19 != (char *)buf) {
          free(v19);
        }
      }
      if (sub_1010FB9FC(*(int **)(a4 + 800)))
      {
        unint64_t v12 = 0;
        do
        {
          sub_1010FB258(*(void *)(a4 + 800), v12, (uint64_t)&v20);
          sub_1010FB770(*(void *)(a4 + 800), v12, (uint64_t)buf);
          sub_10079B59C((uint64_t)a1, (uint64_t)&v20, (uint64_t)buf);
          if (v24) {
            sub_1000DB0A0(v24);
          }
          ++v12;
        }
        while (v12 < sub_1010FB9FC(*(int **)(a4 + 800)));
      }
    }
    else
    {
      sub_10079B59C((uint64_t)a1, a4, a4 + 160);
    }
    sub_10079B518(a1, v8);
    return;
  }
  if (v7 != 14)
  {
    if (v7 != 23)
    {
LABEL_29:
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022C89B8);
      }
      __int16 v14 = qword_102419158;
      if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_ERROR))
      {
        int v15 = *a3;
        *(_DWORD *)std::string buf = 67240192;
        LODWORD(v23) = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#Warning Received unhandled location provider notification, %{public}d", buf, 8u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419150 != -1) {
          dispatch_once(&qword_102419150, &stru_1022C89B8);
        }
        int v16 = *a3;
        int v20 = 67240192;
        LODWORD(v21) = v16;
        int v17 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLOdometerNotifierWatch::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v17);
        if (v17 != (char *)buf) {
          free(v17);
        }
      }
      return;
    }
    int v8 = 2;
    goto LABEL_11;
  }
  int v13 = sub_1004A1418((uint64_t)a1);

  sub_100798310(a1, v13);
}

void sub_10079B4F8(_Unwind_Exception *a1)
{
  if (STACK[0x2C0]) {
    sub_1000DB0A0((std::__shared_weak_count *)STACK[0x2C0]);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_10079B518(unsigned char *result, int a2)
{
  if (result[1147])
  {
    memset(v3, 0, sizeof(v3));
    int v2 = 9;
    LODWORD(v3[0]) = a2;
    return (unsigned char *)(*(uint64_t (**)(unsigned char *, int *, _OWORD *, void, uint64_t, void))(*(void *)result
                                                                                                 + 152))(result, &v2, v3, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_10079B59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (long long *)(a3 + 360);
  if (sub_100B7CA64())
  {
    uint64_t v7 = sub_100B7CA64();
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v9 = *(void *)(a3 + 24);
    *(CFAbsoluteTime *)__int16 v68 = Current;
    *((void *)&v68[0] + 1) = v9;
    v68[1] = *(_OWORD *)(a2 + 4);
    uint64_t v69 = *(void *)(a2 + 20);
    long long v10 = *v6;
    long long v70 = v6[1];
    char v71 = 0;
    long long v72 = v10;
    char v73 = 0;
    sub_100B7CB48(v7, v68);
  }
  if (qword_1024190D0 != -1) {
    dispatch_once(&qword_1024190D0, &stru_1022C8998);
  }
  uint64_t v11 = qword_1024190D8;
  if (os_log_type_enabled((os_log_t)qword_1024190D8, OS_LOG_TYPE_DEBUG))
  {
    int v12 = *(_DWORD *)(a3 + 352);
    *(_DWORD *)std::string buf = 68289283;
    *(_DWORD *)double v123 = 0;
    *(_WORD *)&v123[4] = 2082;
    *(void *)&v123[6] = "";
    *(_WORD *)&v123[14] = 1025;
    *(_DWORD *)&v123[16] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLElevationAWDAggregator\", \"Origin Device\":%{private}d}", buf, 0x18u);
  }
  if (sub_1001A58C0())
  {
    uint64_t v13 = sub_1001A58C0();
    sub_101433040(v13, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a3 + 376), *(double *)(a3 + 384));
  }
  if ((*(_DWORD *)(a2 + 96) | 2) != 3) {
    goto LABEL_15;
  }
  double v14 = *(double *)a3;
  if (!sub_101811BF4(*(_DWORD *)(a3 + 616)) || v14 < 0.0) {
    goto LABEL_15;
  }
  if (*(unsigned char *)(a1 + 1145))
  {
    double v15 = *(double *)(a3 + 8);
    if (v15 < 0.0 || (double v16 = *(double *)(a3 + 16), v16 < 0.0))
    {
LABEL_15:
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022C89B8);
      }
      int v17 = qword_102419158;
      if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *(void *)(a2 + 76);
        uint64_t v19 = *(void *)(a2 + 28);
        double v21 = *(double *)a3;
        uint64_t v20 = *(void *)(a3 + 8);
        uint64_t v22 = *(void *)(a2 + 44);
        uint64_t v23 = *(void *)(a2 + 52);
        double v24 = *(double *)(a3 + 16);
        uint64_t v25 = *(void *)(a3 + 24);
        int v26 = *(_DWORD *)(a3 + 352);
        int v27 = *(_DWORD *)(a2 + 96);
        int v28 = *(_DWORD *)(a3 + 616);
        *(_DWORD *)std::string buf = 134286337;
        *(void *)double v123 = v20;
        *(_WORD *)&v123[8] = 2050;
        *(void *)&v123[10] = v18;
        *(_WORD *)&v123[18] = 2049;
        uint64_t v124 = v19;
        __int16 v125 = 2049;
        double v126 = v21;
        __int16 v127 = 2050;
        double v128 = v24;
        __int16 v129 = 2049;
        uint64_t v130 = v22;
        __int16 v131 = 2050;
        uint64_t v132 = v23;
        __int16 v133 = 2050;
        uint64_t v134 = v25;
        __int16 v135 = 2049;
        uint64_t v136 = v22;
        __int16 v137 = 1026;
        *(_DWORD *)uint64_t v138 = v26;
        *(_WORD *)&v138[4] = 1026;
        *(_DWORD *)&v138[6] = v27;
        *(_WORD *)int v139 = 1026;
        *(_DWORD *)&v139[2] = v28;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Drop entry! distance, %{private}.8f, startTime, %{public}.8f, gps altitude, %{private}.8f, odometer, %{private}.8f, accuracy, %{public}.8f, gpsSpeed, %{private}.8f, gpsSpeedAccuracy, %{public}.8f, timestampGps, %{public}.8f, rawSpeed, %{private}.8f, originDevice, %{public}d, locationType, %{public}d, batchedLocationFixType, %{public}d", buf, 0x6Eu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419150 != -1) {
          dispatch_once(&qword_102419150, &stru_1022C89B8);
        }
        uint64_t v40 = *(void *)(a2 + 76);
        uint64_t v41 = *(void *)(a2 + 28);
        double v43 = *(double *)a3;
        uint64_t v42 = *(void *)(a3 + 8);
        uint64_t v44 = *(void *)(a2 + 44);
        uint64_t v45 = *(void *)(a2 + 52);
        double v46 = *(double *)(a3 + 16);
        uint64_t v47 = *(void *)(a3 + 24);
        int v48 = *(_DWORD *)(a3 + 352);
        int v49 = *(_DWORD *)(a2 + 96);
        int v50 = *(_DWORD *)(a3 + 616);
        int v74 = 134286337;
        uint64_t v75 = v42;
        __int16 v76 = 2050;
        uint64_t v77 = v40;
        __int16 v78 = 2049;
        uint64_t v79 = v41;
        __int16 v80 = 2049;
        double v81 = v43;
        __int16 v82 = 2050;
        double v83 = v46;
        __int16 v84 = 2049;
        uint64_t v85 = v44;
        __int16 v86 = 2050;
        uint64_t v87 = v45;
        __int16 v88 = 2050;
        uint64_t v89 = v47;
        __int16 v90 = 2049;
        uint64_t v91 = v44;
        __int16 v92 = 1026;
        *(_DWORD *)unint64_t v93 = v48;
        *(_WORD *)&v93[4] = 1026;
        *(_DWORD *)&v93[6] = v49;
        *(_WORD *)char v94 = 1026;
        *(_DWORD *)&v94[2] = v50;
        long long v51 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::notifyLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v51);
        if (v51 != (char *)buf) {
          free(v51);
        }
      }
      return;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 1145) = 1;
    double v15 = *(double *)(a3 + 8);
    double v16 = *(double *)(a3 + 16);
  }
  long long v66 = 0u;
  *(_OWORD *)&v65[16] = 0u;
  *(_OWORD *)uint64_t v65 = 0u;
  memset(&v64[16], 0, 32);
  *(_OWORD *)uint64_t v64 = 0u;
  *(void *)&long long v53 = *(void *)(a2 + 76);
  *((double *)&v53 + 1) = v15;
  uint64_t v29 = *(void *)(a2 + 28);
  double v54 = v16;
  uint64_t v55 = v29;
  uint64_t v56 = *(void *)(a2 + 44);
  uint64_t v57 = v56;
  uint64_t v30 = *(void *)(a2 + 52);
  double v58 = *(double *)a3;
  uint64_t v59 = v30;
  uint64_t v31 = *(void *)(a3 + 344);
  uint64_t v60 = *(void *)(a3 + 24);
  uint64_t v61 = v31;
  int v32 = *(_DWORD *)(a3 + 352);
  int v62 = 0;
  int v63 = v32;
  *(_DWORD *)uint64_t v64 = *(_DWORD *)(a2 + 96);
  long long v33 = *(_OWORD *)(a3 + 496);
  long long v34 = *v6;
  *(_OWORD *)&v64[8] = v6[1];
  *(_OWORD *)&v64[24] = v33;
  uint64_t v35 = *(void *)(a2 + 68);
  *(double *)&v64[40] = *(double *)(a2 + 60) * 0.0174532924;
  *(void *)uint64_t v65 = v35;
  *(_OWORD *)&v65[8] = v34;
  int v36 = *(_DWORD *)(a1 + 1160);
  *(_DWORD *)&v65[24] = *(_DWORD *)(a3 + 616);
  *(_DWORD *)&v65[28] = v36;
  LOBYTE(v66) = *(unsigned char *)(a3 + 288);
  DWORD2(v66) = *(_DWORD *)(a3 + 276);
  uint64_t v67 = *(void *)(a3 + 280);
  double v37 = CFAbsoluteTimeGetCurrent();
  if (sub_10079BE88(a1 + 928, (double *)(a1 + 1120), &v53, v37))
  {
    sub_1004A15EC(a1, (uint64_t)&v53);
    uint64_t v56 = v38;
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    long long v39 = qword_102419158;
    if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134289665;
      *(void *)double v123 = *((void *)&v53 + 1);
      *(_WORD *)&v123[8] = 2050;
      *(void *)&v123[10] = v53;
      *(_WORD *)&v123[18] = 2049;
      uint64_t v124 = v55;
      __int16 v125 = 2049;
      double v126 = v58;
      __int16 v127 = 2050;
      double v128 = v54;
      __int16 v129 = 2049;
      uint64_t v130 = v56;
      __int16 v131 = 2050;
      uint64_t v132 = v59;
      __int16 v133 = 2050;
      uint64_t v134 = v60;
      __int16 v135 = 2050;
      uint64_t v136 = v61;
      __int16 v137 = 2049;
      *(void *)uint64_t v138 = v57;
      *(_WORD *)&v138[8] = 1026;
      *(_DWORD *)int v139 = v63;
      *(_WORD *)&v139[4] = 1026;
      int v140 = *(_DWORD *)v64;
      __int16 v141 = 2049;
      uint64_t v142 = *(void *)&v64[8];
      __int16 v143 = 2050;
      uint64_t v144 = *(void *)&v64[16];
      __int16 v145 = 2049;
      uint64_t v146 = *(void *)&v64[24];
      __int16 v147 = 2050;
      uint64_t v148 = *(void *)&v64[32];
      __int16 v149 = 2049;
      uint64_t v150 = *(void *)&v64[40];
      __int16 v151 = 2050;
      uint64_t v152 = *(void *)v65;
      __int16 v153 = 2049;
      uint64_t v154 = *(void *)&v65[8];
      __int16 v155 = 2049;
      uint64_t v156 = *(void *)&v65[16];
      __int16 v157 = 1024;
      int v158 = *(_DWORD *)&v65[24];
      __int16 v159 = 1026;
      int v160 = *(_DWORD *)&v65[28];
      __int16 v161 = 1026;
      int v162 = v66;
      __int16 v163 = 1025;
      int v164 = DWORD2(v66);
      __int16 v165 = 2049;
      uint64_t v166 = v67;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Notifying odometer clients, distance, %{private}.8f, startTime, %{public}.8f, gps altitude, %{private}.8f, odometer, %{private}.8f, accuracy, %{public}.8f, gpsSpeed, %{private}.8f, gpsSpeedAccuracy, %{public}.8f, timestampGps, %{public}.8f, machContinuousTime, %{public}.8f, rawSpeed, %{private}.8f, originDevice, %{public}d, locationType, %{public}d, groundAltitude, %{private}.8f, groundAltitudeUncertainty, %{public}.8f, smoothedGPSAltitude, %{private}.8f, smoothedGPSAltitudeUncertainty, %{public}.8f, gpsCourseRadians, %{private}.8f, gpsCourseAccuracy, %{public}.8f, slope, %{private}.4f, maxAbsSlope, %{private}.4f, batchedLocationFixType, %d, signalEnv, %{public}d, trackRunOdometerHasBeenCorrected, %{public}d, trackProximity, %{private}d, distanceToTrackMeters, %{private}.1f", buf, 0xE4u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022C89B8);
      }
      int v74 = 134289665;
      uint64_t v75 = *((void *)&v53 + 1);
      __int16 v76 = 2050;
      uint64_t v77 = v53;
      __int16 v78 = 2049;
      uint64_t v79 = v55;
      __int16 v80 = 2049;
      double v81 = v58;
      __int16 v82 = 2050;
      double v83 = v54;
      __int16 v84 = 2049;
      uint64_t v85 = v56;
      __int16 v86 = 2050;
      uint64_t v87 = v59;
      __int16 v88 = 2050;
      uint64_t v89 = v60;
      __int16 v90 = 2050;
      uint64_t v91 = v61;
      __int16 v92 = 2049;
      *(void *)unint64_t v93 = v57;
      *(_WORD *)&v93[8] = 1026;
      *(_DWORD *)char v94 = v63;
      *(_WORD *)&v94[4] = 1026;
      int v95 = *(_DWORD *)v64;
      __int16 v96 = 2049;
      uint64_t v97 = *(void *)&v64[8];
      __int16 v98 = 2050;
      uint64_t v99 = *(void *)&v64[16];
      __int16 v100 = 2049;
      uint64_t v101 = *(void *)&v64[24];
      __int16 v102 = 2050;
      uint64_t v103 = *(void *)&v64[32];
      __int16 v104 = 2049;
      uint64_t v105 = *(void *)&v64[40];
      __int16 v106 = 2050;
      uint64_t v107 = *(void *)v65;
      __int16 v108 = 2049;
      uint64_t v109 = *(void *)&v65[8];
      __int16 v110 = 2049;
      uint64_t v111 = *(void *)&v65[16];
      __int16 v112 = 1024;
      int v113 = *(_DWORD *)&v65[24];
      __int16 v114 = 1026;
      int v115 = *(_DWORD *)&v65[28];
      __int16 v116 = 1026;
      int v117 = v66;
      __int16 v118 = 1025;
      int v119 = DWORD2(v66);
      __int16 v120 = 2049;
      uint64_t v121 = v67;
      int v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::notifyLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v52);
      if (v52 != (char *)buf) {
        free(v52);
      }
    }
    sub_1012E9900(a1 + 1368, (uint64_t)&v53);
    *(_DWORD *)std::string buf = 4;
    (*(void (**)(uint64_t, uint8_t *, long long *, void, uint64_t, void))(*(void *)a1 + 152))(a1, buf, &v53, 0, 0xFFFFFFFFLL, 0);
    sub_100E69AD4(a1 + 3800, &v53);
  }
}

BOOL sub_10079BE88(uint64_t a1, double *a2, long long *a3, double a4)
{
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022C89B8);
  }
  int v8 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_INFO))
  {
    uint64_t v9 = *((void *)a3 + 6);
    *(_DWORD *)std::string buf = 134283521;
    uint64_t v49 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Incoming odometer, %{private}.8f", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    double v46 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLOdometerNotifierWatch::updateOdometerWithEntry(CLOdometerEntry &, double &, CLOdometerEntry &, CFAbsoluteTime)", "%s\n", v46);
    if (v46 != (char *)buf) {
      free(v46);
    }
  }
  double v10 = *(double *)(a1 + 64);
  if (v10 <= 0.0 || (double v11 = *((double *)a3 + 8), v11 <= 0.0)) {
    double v12 = *(double *)a3 - *(double *)a1;
  }
  else {
    double v12 = v11 - v10;
  }
  if (v12 > 0.0 && *(double *)a3 + 15.0 >= a4)
  {
    if (*((_DWORD *)a3 + 21) == *(_DWORD *)(a1 + 84) && *((_DWORD *)a3 + 22) == *(_DWORD *)(a1 + 88))
    {
      double v22 = *((double *)a3 + 6);
      double v23 = *(double *)(a1 + 48);
      if (v22 >= v23)
      {
        double v31 = v22 - v23;
LABEL_37:
        long long v37 = *a3;
        long long v38 = a3[1];
        long long v39 = a3[3];
        *(_OWORD *)(a1 + 32) = a3[2];
        *(_OWORD *)(a1 + 48) = v39;
        *(_OWORD *)a1 = v37;
        *(_OWORD *)(a1 + 16) = v38;
        long long v40 = a3[4];
        long long v41 = a3[5];
        long long v42 = a3[7];
        *(_OWORD *)(a1 + 96) = a3[6];
        *(_OWORD *)(a1 + 112) = v42;
        *(_OWORD *)(a1 + 64) = v40;
        *(_OWORD *)(a1 + 80) = v41;
        long long v43 = a3[8];
        long long v44 = a3[9];
        long long v45 = a3[11];
        *(_OWORD *)(a1 + 160) = a3[10];
        *(_OWORD *)(a1 + 176) = v45;
        *(_OWORD *)(a1 + 128) = v43;
        *(_OWORD *)(a1 + 144) = v44;
        *a2 = v31 + *a2;
        *((double *)a3 + 1) = v31;
        *((double *)a3 + 6) = *a2;
        return 1;
      }
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022C89B8);
      }
      double v24 = qword_102419158;
      if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *(void *)(a1 + 64);
        uint64_t v26 = *((void *)a3 + 8);
        double v27 = *(double *)a1;
        double v28 = *(double *)a3;
        uint64_t v29 = *(void *)(a1 + 48);
        uint64_t v30 = *((void *)a3 + 6);
        *(_DWORD *)std::string buf = 134350337;
        uint64_t v49 = v25;
        __int16 v50 = 2050;
        uint64_t v51 = v26;
        __int16 v52 = 2050;
        *(double *)long long v53 = v27;
        *(_WORD *)&_OWORD v53[8] = 2050;
        double v54 = v28;
        __int16 v55 = 2049;
        uint64_t v56 = v29;
        __int16 v57 = 2049;
        uint64_t v58 = v30;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Source may have reset. Gps,%{public}.2lf,%{public}.2lf,startTime,%{public}.2lf,%{public}.2lf,odometer,%{private}.2lf,%{private}.2lf", buf, 0x3Eu);
      }
      double v31 = 0.0;
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419150 == -1)
      {
LABEL_45:
        uint64_t v47 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLOdometerNotifierWatch::updateOdometerWithEntry(CLOdometerEntry &, double &, CLOdometerEntry &, CFAbsoluteTime)", "%s\n", v47);
        if (v47 != (char *)buf) {
          free(v47);
        }
        goto LABEL_37;
      }
    }
    else
    {
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022C89B8);
      }
      int v32 = qword_102419158;
      if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = *(void *)(a1 + 48);
        uint64_t v34 = *((void *)a3 + 6);
        int v35 = *(_DWORD *)(a1 + 88);
        int v36 = *((_DWORD *)a3 + 22);
        *(_DWORD *)std::string buf = 134284289;
        uint64_t v49 = v33;
        __int16 v50 = 2049;
        uint64_t v51 = v34;
        __int16 v52 = 1026;
        *(_DWORD *)long long v53 = v35;
        *(_WORD *)&v53[4] = 1026;
        *(_DWORD *)&v53[6] = v36;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Odometer source change,previous,%{private}lf,current,%{private}lf,previousType,%{public}d,type,%{public}d", buf, 0x22u);
      }
      double v31 = 0.0;
      if (!sub_10013D1A0(115, 2)) {
        goto LABEL_37;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419150 == -1) {
        goto LABEL_45;
      }
    }
    dispatch_once(&qword_102419150, &stru_1022C89B8);
    goto LABEL_45;
  }
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022C89B8);
  }
  uint64_t v13 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 64);
    uint64_t v15 = *((void *)a3 + 8);
    double v16 = *(double *)a1;
    double v17 = *(double *)a3;
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v19 = *((void *)a3 + 6);
    *(_DWORD *)std::string buf = 134350337;
    uint64_t v49 = v14;
    __int16 v50 = 2050;
    uint64_t v51 = v15;
    __int16 v52 = 2050;
    *(double *)long long v53 = v16;
    *(_WORD *)&_OWORD v53[8] = 2050;
    double v54 = v17;
    __int16 v55 = 2049;
    uint64_t v56 = v18;
    __int16 v57 = 2049;
    uint64_t v58 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Current odometer sample fails time check. Gps,%{public}.2lf,%{public}.2lf,startTime,%{public}.2lf,%{public}.2lf,odometer,%{private}.2lf,%{private}.2lf", buf, 0x3Eu);
  }
  BOOL result = sub_10013D1A0(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    double v21 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static BOOL CLOdometerNotifierWatch::updateOdometerWithEntry(CLOdometerEntry &, double &, CLOdometerEntry &, CFAbsoluteTime)", "%s\n", v21);
    if (v21 != (char *)buf) {
      free(v21);
    }
    return 0;
  }
  return result;
}

void sub_10079C614(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  if (!*a3)
  {
    *(_DWORD *)(a1 + 1160) = *a4;
    if (sub_100B7CA64())
    {
      uint64_t v5 = sub_100B7CA64();
      int v6 = *a4;
      sub_100B7CAAC(v5, v6);
    }
  }
}

uint64_t sub_10079C670(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 2)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(a4 + 16);
    if ((unint64_t)(v6 - 13) >= 2)
    {
      if (v6 == 15)
      {
        BOOL v7 = 0;
        *(unsigned char *)(result + 1144) = 0;
      }
      else
      {
        BOOL v7 = *(unsigned char *)(result + 1144) != 0;
      }
    }
    else
    {
      BOOL v7 = *(void *)(a4 + 224) == 1;
      *(unsigned char *)(result + 1144) = v7;
    }
    sub_1012E9908(result + 1368, v7);
    sub_100E69B2C(v5 + 3800, a4);
    int v8 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 232);
    return v8(v5);
  }
  return result;
}

uint64_t sub_10079C738(unsigned char *a1, char a2)
{
  a1[1131] = a2;
  return (*(uint64_t (**)(void))(*(void *)a1 + 232))();
}

uint64_t sub_10079C760(uint64_t a1, char a2)
{
  *(unsigned char *)(a1 + 211) = a2;
  return (*(uint64_t (**)(uint64_t))(*(void *)(a1 - 920) + 232))(a1 - 920);
}

void sub_10079C790(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = 0;
  double v16 = 0;
  uint64_t v17 = 0;
  sub_10079DC90(&v15, *(const void **)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 6));
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = *(void **)(a1 + 3880);
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v3);
        }
        BOOL v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        uint64_t v9 = 0;
        uint64_t v10 = 0;
        long long __p = 0;
        sub_10079DC90(&__p, v15, (uint64_t)v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - (unsigned char *)v15) >> 6));
        [v7 onCyclingDistanceUpdate:sub_10079C948((uint64_t)&__p)];
        if (__p)
        {
          uint64_t v9 = __p;
          operator delete(__p);
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v11 objects:v18 count:16];
    }
    while (v4);
  }
  if (v15)
  {
    double v16 = v15;
    operator delete(v15);
  }
}

void sub_10079C904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10079C948(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_10079DD0C;
  v3[3] = &unk_1022C8C70;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  long long __p = 0;
  sub_10079DC90(&__p, *(const void **)a1, *(void *)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6));
  id v1 = [v3 copy];
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
  return v1;
}

void sub_10079CA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10079CA1C(uint64_t a1, uint64_t a2)
{
}

id sub_10079CA24(uint64_t a1, float *a2)
{
  if (qword_102419150 != -1) {
    dispatch_once(&qword_102419150, &stru_1022C89B8);
  }
  id v4 = qword_102419158;
  if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    double v7 = a2[8];
    *(_DWORD *)std::string buf = 134349568;
    uint64_t v24 = v5;
    __int16 v25 = 2050;
    uint64_t v26 = v6;
    __int16 v27 = 2050;
    double v28 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received flight segment,start,%{public}f,end,%{public}f,rate,%{public}f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    uint64_t v12 = *(void *)a2;
    uint64_t v13 = *((void *)a2 + 1);
    double v14 = a2[8];
    int v17 = 134349568;
    uint64_t v18 = v12;
    __int16 v19 = 2050;
    uint64_t v20 = v13;
    __int16 v21 = 2050;
    double v22 = v14;
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onFlightSegment(const CLElevationFlightSegment *)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  int v8 = &HKQuantityTypeIdentifierStairDescentSpeed;
  if (a2[8] > 0.0) {
    int v8 = &HKQuantityTypeIdentifierStairAscentSpeed;
  }
  uint64_t v9 = +[HKQuantitySample quantitySampleWithType:quantity:startDate:endDate:metadata:](HKQuantitySample, "quantitySampleWithType:quantity:startDate:endDate:metadata:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", *v8), +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit unitFromString:](HKUnit, "unitFromString:", @"m/s"), fabsf(a2[8])), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)a2), +[NSDate dateWithTimeIntervalSinceReferenceDate:*((double *)a2 + 1)], 0);
  uint64_t v10 = *(void **)(a1 + 3992);
  double v16 = v9;
  return [v10 saveObjects:[+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v16, 1) withCompletion:&stru_1022C88F0];
}

void sub_10079CCF4(id a1, BOOL a2, NSError *a3)
{
  if (a2)
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022C89D8);
    }
    uint64_t v3 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "AscentDescentRate successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022C89D8);
      }
      id v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onFlightSegment(const CLElevationFlightSegment *)_block_invoke", "%s\n");
LABEL_19:
      if (v4 != buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102418FF0 != -1) {
      dispatch_once(&qword_102418FF0, &stru_1022C89D8);
    }
    uint64_t v6 = qword_102418FF8;
    if (os_log_type_enabled((os_log_t)qword_102418FF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 138543362;
      int v8 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "HKHealthStore, AscentDescentRate, saveObjects failed on, %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FF0 != -1) {
        dispatch_once(&qword_102418FF0, &stru_1022C89D8);
      }
      id v4 = (uint8_t *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLOdometerNotifierWatch::onFlightSegment(const CLElevationFlightSegment *)_block_invoke", "%s\n");
      goto LABEL_19;
    }
  }
}

void sub_10079CFB8(unsigned char *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 41)
  {
    long long v5 = *(_OWORD *)(a4 + 1464);
    long long v15 = *(_OWORD *)(a4 + 1448);
    long long v16 = v5;
    uint64_t v6 = a1[1146];
    v14[0] = v15;
    v14[1] = v5;
    BOOL v7 = sub_101811C0C(v6, (uint64_t)v14);
    v13[0] = v15;
    v13[1] = v16;
    int v8 = sub_101811C30((uint64_t)v13);
    int v9 = sub_101811C3C(v7, v8);
    if (qword_102419150 != -1) {
      dispatch_once(&qword_102419150, &stru_1022C89B8);
    }
    uint64_t v10 = qword_102419158;
    if (os_log_type_enabled((os_log_t)qword_102419158, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67240704;
      BOOL v24 = v7;
      __int16 v25 = 1026;
      int v26 = v8;
      __int16 v27 = 1026;
      int v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Received operation status, isRhythmicActive, %{public}d, is1HzGnssActive, %{public}d, inRhythmicMode, %{public}d", buf, 0x14u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419150 != -1) {
        dispatch_once(&qword_102419150, &stru_1022C89B8);
      }
      int v17 = 67240704;
      BOOL v18 = v7;
      __int16 v19 = 1026;
      int v20 = v8;
      __int16 v21 = 1026;
      int v22 = v9;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLOdometerNotifierWatch::onRhythmicGnssModeOfOperationStatusNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    int v11 = a1[1147];
    a1[1147] = v9;
    if (!v11)
    {
      if (v9) {
        sub_10079B518(a1, 3);
      }
    }
    a1[1146] = v7;
  }
}

void sub_10079D204(id a1)
{
  qword_102418FD8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10079D234(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10079D264(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100FFC42C();
    operator delete();
  }
  return result;
}

void sub_10079D2B4(id a1)
{
  qword_1024190D8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_10079D2E4(id a1)
{
  qword_102419158 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_10079D314(id a1)
{
  qword_102418FF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

void sub_10079D348()
{
}

void *sub_10079D35C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_1022C8A08;
  return result;
}

void sub_10079D394(uint64_t a1, void *a2)
{
  *a2 = off_1022C8A08;
}

double sub_10079D3BC(uint64_t a1, double **a2)
{
  int v2 = *a2;
  double result = **a2;
  double v4 = 0.0;
  while (v2 != a2[1])
  {
    double v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_10079D3E8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10079D428()
{
}

void sub_10079D438()
{
}

void *sub_10079D44C()
{
  double result = operator new(0x10uLL);
  *double result = off_1022C8A88;
  return result;
}

void sub_10079D484(uint64_t a1, void *a2)
{
  *a2 = off_1022C8A88;
}

double sub_10079D4AC(uint64_t a1, double **a2)
{
  int v2 = a2[1];
  double result = **a2;
  double v4 = 0.0;
  if (*a2 != v2)
  {
    long long v5 = *a2;
    do
    {
      double v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_10079D4FC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10079D53C()
{
}

void sub_10079D54C()
{
}

void *sub_10079D560()
{
  double result = operator new(0x10uLL);
  *double result = off_1022C8B08;
  return result;
}

void sub_10079D598(uint64_t a1, void *a2)
{
  *a2 = off_1022C8B08;
}

BOOL sub_10079D5C0(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_10079D5D0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10079D610()
{
}

void sub_10079D620()
{
}

void *sub_10079D634()
{
  double result = operator new(0x10uLL);
  *double result = off_1022C8B88;
  return result;
}

void sub_10079D66C(uint64_t a1, void *a2)
{
  *a2 = off_1022C8B88;
}

BOOL sub_10079D694(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_10079D6AC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10079D6EC()
{
}

void *sub_10079D6F8(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  *a1 = off_10234BF80;
  id v9 = a5;
  *a1 = off_1022C8C08;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  id v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  _OWORD v14[2] = 0x2020000000;
  char v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_10079D880;
  aBlock[3] = &unk_1022B6BE8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_10079D894;
  void v12[3] = &unk_1022B6C10;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_10079D858(_Unwind_Exception *a1)
{
  sub_1019D78CC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10079D880(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

BOOL sub_10079D894(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) == 0;
}

void sub_10079D8B0(uint64_t a1)
{
  sub_10079DBB8(a1);

  operator delete();
}

id sub_10079D8E8(void *a1, int a2, void *__src, unint64_t a4)
{
  if (a4 >= 0x38) {
    size_t v8 = 56;
  }
  else {
    size_t v8 = a4;
  }
  memcpy(__dst, __src, v8);
  if (a4 >= 0x39)
  {
    if (qword_102418FD0 != -1) {
      dispatch_once(&qword_102418FD0, &stru_1022C8958);
    }
    id v9 = qword_102418FD8;
    if (os_log_type_enabled((os_log_t)qword_102418FD8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315906;
      unint64_t v33 = 0x8000000101D2DA0BLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v34 = 2048;
      uint64_t v35 = 56;
      __int16 v36 = 2048;
      unint64_t v37 = a4;
      __int16 v38 = 1024;
      int v39 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "SIZE MISMATCH: %s=%lu vs sz=%zu notification=%d", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102418FD0 != -1) {
        dispatch_once(&qword_102418FD0, &stru_1022C8958);
      }
      int v24 = 136315906;
      unint64_t v25 = 0x8000000101D2DA0BLL & 0x7FFFFFFFFFFFFFFFLL;
      __int16 v26 = 2048;
      uint64_t v27 = 56;
      __int16 v28 = 2048;
      unint64_t v29 = a4;
      __int16 v30 = 1024;
      int v31 = a2;
      char v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLMotionNotifier::SiloDispatcher<CLElevationFlightSegment>::dispatchData(int, const void *, size_t) [T = CLElevationFlightSegment]", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  uint64_t v11 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v12 = a1[6];
  uint64_t v13 = (void *)a1[4];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _OWORD v16[2] = sub_10079DC34;
  v16[3] = &unk_1022C8C50;
  v16[4] = v12;
  v16[5] = v11;
  long long v17 = __dst[0];
  long long v18 = __dst[1];
  long long v19 = __dst[2];
  uint64_t v20 = v23;
  uint64_t v21 = v10;
  return [v13 async:v16];
}

uint64_t sub_10079DBB8(uint64_t a1)
{
  *(void *)a1 = off_1022C8C08;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  return sub_1019D78CC(a1);
}

uint64_t sub_10079DC34(void *a1)
{
  uint64_t result = (*(uint64_t (**)(void))(a1[4] + 16))();
  if (result)
  {
    uint64_t v3 = (uint64_t (*)(void *, uint64_t))a1[5];
    uint64_t v4 = a1[13];
    return v3(a1 + 6, v4);
  }
  return result;
}

void *sub_10079DC90(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100330FA4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10079DCF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10079DD0C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return sub_10079DC90(a2, *(const void **)(a1 + 32), *(void *)(a1 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 6));
}

void *sub_10079DD34(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v2 = (void *)(a1 + 32);
  _DWORD v2[2] = 0;
  return sub_10079DC90(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 6));
}

void sub_10079DD5C(uint64_t a1)
{
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void sub_10079DD74()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D2D628;
      v0[3] = unk_101D2D638;
      v0[4] = xmmword_101D2D648;
      v0[0] = xmmword_101D2D608;
      v0[1] = unk_101D2D618;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_10079DE54(_Unwind_Exception *a1)
{
}

void sub_10079DE6C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_10079DEEC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_10079DF7C(_Unwind_Exception *a1)
{
}

uint64_t sub_10079DF94()
{
  qword_10247DFE0 = (uint64_t)off_1022C8A08;
  qword_10247DFF8 = (uint64_t)&qword_10247DFE0;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_10247DFE0, (void *)&_mh_execute_header);
  qword_10247E000 = (uint64_t)off_1022C8A88;
  qword_10247E018 = (uint64_t)&qword_10247E000;
  __cxa_atexit((void (*)(void *))sub_10049ED98, &qword_10247E000, (void *)&_mh_execute_header);
  qword_10247E020 = (uint64_t)off_1022C8B08;
  qword_10247E038 = (uint64_t)&qword_10247E020;
  __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_10247E020, (void *)&_mh_execute_header);
  qword_10247E040 = (uint64_t)off_1022C8B88;
  qword_10247E058 = (uint64_t)&qword_10247E040;

  return __cxa_atexit((void (*)(void *))sub_10049ED9C, &qword_10247E040, (void *)&_mh_execute_header);
}

uint64_t sub_10079E0B4(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = 0;
  sub_101285AF8(a1 + 16);
  *(_DWORD *)(a1 + 61680) = 16;
  return a1;
}

uint64_t sub_10079E0F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10079EB3C((int *)a1, a2);
  if (!v5) {
    return v5;
  }
  uint64_t v6 = (int *)(a1 + 61680);
  int v7 = *(_DWORD *)(a1 + 61680);
  if (v7)
  {
    *(void *)__int16 v55 = off_1022AD658;
    unsigned int v8 = sub_1003B8DD8();
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
    }
    id v9 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "CNNWorkoutClass,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
      }
      int v69 = 67109120;
      unsigned int v70 = v8;
      __int16 v52 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v52);
      if (v52 != buf) {
        free(v52);
      }
    }
    int v7 = *v6;
  }
  if ((v7 & 0x10) != 0)
  {
    *(void *)__int16 v55 = off_1022DBFB0;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    memset(&v55[8], 0, 128);
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    int v68 = 0;
    unsigned int v10 = sub_100ABE990((uint64_t)v55, a1 + 16);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
    }
    uint64_t v11 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "GBTWorkoutClass,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
      }
      int v69 = 67109120;
      unsigned int v70 = v10;
      long long v53 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v53);
      if (v53 != buf) {
        free(v53);
      }
    }
    if ((*v6 & 0x100) == 0) {
      goto LABEL_23;
    }
    goto LABEL_18;
  }
  unsigned int v10 = 5;
  if ((v7 & 0x100) != 0)
  {
LABEL_18:
    sub_1013F206C((uint64_t)v55);
    unsigned int v12 = sub_1013F20B4((uint64_t)v55, (uint64_t *)(a1 + 16));
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
    }
    uint64_t v13 = qword_1024191C8;
    if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "LRWorkoutClass,%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1024191C0 != -1) {
        dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
      }
      int v69 = 67109120;
      unsigned int v70 = v12;
      double v54 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v54);
      if (v54 != buf) {
        free(v54);
      }
    }
  }
LABEL_23:
  if (v10 == 1)
  {
    if (*(float *)(a1 + 64) >= -48.0
      && *(float *)(a1 + 276) <= 30.0
      && *(float *)(a1 + 260) <= 0.5
      && *(float *)(a1 + 124) <= 10.0)
    {
      unsigned int v10 = 1;
    }
    else
    {
      unsigned int v10 = 5;
    }
  }
  else if (!v10)
  {
    if ((sub_1000A16E8() & 0x40000000) != 0) {
      unsigned int v10 = 0;
    }
    else {
      unsigned int v10 = 5;
    }
  }
  a3[1] = sub_1003B8DB8(v10);
  *a3 = *(void *)(a1 + 8);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
  }
  double v14 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = sub_1003B8DB8(v10);
    uint64_t v17 = *a3;
    uint64_t v16 = a3[1];
    *(_DWORD *)std::string buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = v15;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v16;
    *(_WORD *)&unsigned char buf[28] = 2048;
    *(void *)&buf[30] = v17;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Tier2WorkoutClass,%d,CMWorkoutType,%ld,SmoothedCMWorkoutType,%ld,startTime,%f", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
    }
    uint64_t v34 = sub_1003B8DB8(v10);
    uint64_t v36 = *a3;
    uint64_t v35 = a3[1];
    *(_DWORD *)__int16 v55 = 67109888;
    *(_DWORD *)&v55[4] = v10;
    *(_WORD *)&v55[8] = 2048;
    *(void *)&v55[10] = v34;
    *(_WORD *)&v55[18] = 2048;
    *(void *)&v55[20] = v35;
    *(_WORD *)&v55[28] = 2048;
    *(void *)&v55[30] = v36;
    unint64_t v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v37);
    if (v37 != buf) {
      free(v37);
    }
  }
  sub_10141207C(a1 + 16, (uint64_t)buf);
  long long v18 = *(_OWORD *)&buf[16];
  *((_OWORD *)a3 + 1) = *(_OWORD *)buf;
  *((_OWORD *)a3 + 2) = v18;
  *((_OWORD *)a3 + 3) = *(_OWORD *)&buf[32];
  *((_DWORD *)a3 + 16) = *(_DWORD *)(a1 + 696);
  *((_DWORD *)a3 + 17) = *(_DWORD *)(a1 + 700);
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
  }
  long long v19 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEFAULT))
  {
    double v20 = *((float *)a3 + 7);
    double v21 = *((float *)a3 + 8);
    double v22 = *((float *)a3 + 9);
    double v23 = *((float *)a3 + 10);
    double v24 = *((float *)a3 + 11);
    double v25 = *((float *)a3 + 12);
    double v26 = *((float *)a3 + 13);
    double v27 = *((float *)a3 + 14);
    uint64_t v28 = a3[2];
    double v29 = *((float *)a3 + 6);
    double v30 = *((float *)a3 + 16);
    double v31 = *((float *)a3 + 17);
    uint64_t v32 = *a3;
    *(_DWORD *)std::string buf = 134221056;
    *(double *)&uint8_t buf[4] = v20;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&unsigned char buf[14] = v21;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&unsigned char buf[24] = v22;
    *(_WORD *)&unsigned char buf[32] = 2048;
    *(double *)&buf[34] = v23;
    *(_WORD *)&buf[42] = 2048;
    *(double *)&buf[44] = v24;
    __int16 v72 = 2048;
    double v73 = v25;
    __int16 v74 = 2048;
    double v75 = v26;
    __int16 v76 = 2048;
    double v77 = v27;
    __int16 v78 = 2048;
    uint64_t v79 = v28;
    __int16 v80 = 2048;
    double v81 = v29;
    __int16 v82 = 2048;
    double v83 = v30;
    __int16 v84 = 2048;
    double v85 = v31;
    __int16 v86 = 2048;
    uint64_t v87 = v32;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "XGBoostWorkoutPrediction,otherProb,%f,indoorCyclingProb,%f,outdoorCyclingProb,%f,swimmingProb,%f,runningProb,%f,walkingProb,%f,rowingProb,%f,ellipticalProb,%f,type,%ld,conf,%f,yawRange,%f,yawRangeStd,%f,startTime,%f", buf, 0x84u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
    }
    double v38 = *((float *)a3 + 7);
    double v39 = *((float *)a3 + 8);
    double v40 = *((float *)a3 + 9);
    double v41 = *((float *)a3 + 10);
    double v42 = *((float *)a3 + 11);
    double v43 = *((float *)a3 + 12);
    double v44 = *((float *)a3 + 13);
    double v45 = *((float *)a3 + 14);
    uint64_t v46 = a3[2];
    double v47 = *((float *)a3 + 6);
    double v48 = *((float *)a3 + 16);
    double v49 = *((float *)a3 + 17);
    uint64_t v50 = *a3;
    *(_DWORD *)__int16 v55 = 134221056;
    *(double *)&v55[4] = v38;
    *(_WORD *)&v55[12] = 2048;
    *(double *)&v55[14] = v39;
    *(_WORD *)&v55[22] = 2048;
    *(double *)&v55[24] = v40;
    *(_WORD *)&v55[32] = 2048;
    *(double *)&v55[34] = v41;
    *(_WORD *)&v55[42] = 2048;
    *(double *)&v55[44] = v42;
    *(_WORD *)&v55[52] = 2048;
    *(double *)&v55[54] = v43;
    *(_WORD *)&v55[62] = 2048;
    *(double *)&v55[64] = v44;
    *(_WORD *)&v55[72] = 2048;
    *(double *)&v55[74] = v45;
    *(_WORD *)&v55[82] = 2048;
    *(void *)&v55[84] = v46;
    *(_WORD *)&v55[92] = 2048;
    *(double *)&v55[94] = v47;
    *(_WORD *)&v55[102] = 2048;
    *(double *)&v55[104] = v48;
    *(_WORD *)&v55[112] = 2048;
    *(double *)&v55[114] = v49;
    *(_WORD *)&v55[122] = 2048;
    *(void *)&v55[124] = v50;
    uint64_t v51 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLWorkoutPredictorTier2Classifier::update(const CLWorkoutPredictorDMInput &, CLWorkoutClassifier_Type::WorkoutClassifierResult &)", "%s\n", v51);
    if (v51 != buf) {
      free(v51);
    }
  }
  *(void *)(a1 + 8) = 0;
  return v5;
}

uint64_t sub_10079EB3C(int *a1, uint64_t a2)
{
  if (*((double *)a1 + 1) == 0.0) {
    *((void *)a1 + 1) = *(void *)(a2 + 48);
  }
  v26.i32[0] = sub_100B9BC00((float *)a2);
  v26.i32[1] = v4;
  int v27 = v5;
  float32x2_t v24 = *(float32x2_t *)(a2 + 16);
  int v25 = *(_DWORD *)(a2 + 24);
  uint64_t v22 = *(void *)(a2 + 28);
  float v23 = *(float *)(a2 + 36);
  uint64_t v20 = 1065353216;
  int v21 = 0;
  sub_100B9BDB0((float *)a2, v18);
  v19[0] = sub_1004E301C((uint64_t)v18, (float *)&v24);
  v19[1] = v6;
  v19[2] = v7;
  sub_100B9BDB0((float *)a2, v18);
  v17[0] = sub_1004E301C((uint64_t)v18, (float *)&v22);
  v17[1] = v8;
  _OWORD v17[2] = v9;
  int v10 = a1[1];
  if (!v10)
  {
    sub_100B9BC00((float *)a2);
    v26.f32[1] = -v11;
    v24.f32[1] = -v24.f32[1];
    *(float *)&uint64_t v22 = -*(float *)&v22;
    int v10 = a1[1];
  }
  int v12 = *a1;
  if (*a1 == v10)
  {
    v26.f32[0] = -sub_100B9BC00((float *)a2);
    v24.f32[0] = -v24.f32[0];
    *((float *)&v22 + 1) = -*((float *)&v22 + 1);
    LODWORD(v20) = -1082130432;
    int v12 = *a1;
  }
  if (v12 == 1) {
    float v23 = -v23;
  }
  sub_100B9BDB0((float *)a2, v18);
  v16[0] = sub_1004E301C((uint64_t)v18, (float *)&v20);
  v16[1] = v13;
  _OWORD v16[2] = v14;
  return sub_101285CB0((uint64_t)(a1 + 4), &v24, (float *)&v22, &v26, v19, v17, v16);
}

void sub_10079ECC4(int *a1, void *a2)
{
  *(void *)a1 = *a2;
  if (qword_1024191C0 != -1) {
    dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
  }
  uint64_t v3 = qword_1024191C8;
  if (os_log_type_enabled((os_log_t)qword_1024191C8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = *a1;
    int v5 = a1[1];
    *(_DWORD *)std::string buf = 67109376;
    int v8 = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "DeviceOrientation,%d,%d", buf, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1024191C0 != -1) {
      dispatch_once(&qword_1024191C0, &stru_1022C8CA0);
    }
    float v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLWorkoutPredictorTier2Classifier::setDeviceOrientation(const CLGizmoOrientation &)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_10079EE98(id a1)
{
  qword_1024191C8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_10079EEC8(uint64_t *a1)
{
  if (qword_102419000 != -1) {
    dispatch_once(&qword_102419000, &stru_1022C8CC0);
  }
  int v2 = qword_102419008;
  if (os_log_type_enabled((os_log_t)qword_102419008, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    int v5 = *((_DWORD *)a1 + 4);
    int v6 = *((_DWORD *)a1 + 5);
    int v7 = *((_DWORD *)a1 + 6);
    double v8 = *((float *)a1 + 7);
    int v10 = *((_DWORD *)a1 + 8);
    int v9 = *((_DWORD *)a1 + 9);
    int v11 = *((_DWORD *)a1 + 10);
    int v12 = *((_DWORD *)a1 + 11);
    int v14 = *((_DWORD *)a1 + 12);
    int v13 = *((_DWORD *)a1 + 13);
    *(_DWORD *)std::string buf = 136321026;
    uint64_t v17 = "startTime";
    __int16 v18 = 2048;
    uint64_t v19 = v3;
    __int16 v20 = 2080;
    int v21 = "endTime";
    __int16 v22 = 2048;
    uint64_t v23 = v4;
    __int16 v24 = 2080;
    int v25 = "avgInterCalibrationTime";
    __int16 v26 = 1024;
    int v27 = v5;
    __int16 v28 = 2080;
    double v29 = "pctTurnsRejected";
    __int16 v30 = 1024;
    int v31 = v6;
    __int16 v32 = 2080;
    unint64_t v33 = "poolLength";
    __int16 v34 = 1024;
    int v35 = v7;
    __int16 v36 = 2080;
    unint64_t v37 = "avgLapCorrection";
    __int16 v38 = 2048;
    double v39 = v8;
    __int16 v40 = 2080;
    double v41 = "numLaps";
    __int16 v42 = 1024;
    int v43 = v10;
    __int16 v44 = 2080;
    double v45 = "numLapInsertions";
    __int16 v46 = 1024;
    int v47 = v9;
    __int16 v48 = 2080;
    double v49 = "numLapsForConvergence";
    __int16 v50 = 1024;
    int v51 = v11;
    __int16 v52 = 2080;
    long long v53 = "pctStrokesFailCurvature";
    __int16 v54 = 1024;
    int v55 = v12;
    __int16 v56 = 2080;
    long long v57 = "pctStrokesFailMA";
    __int16 v58 = 1024;
    int v59 = v14;
    __int16 v60 = 2080;
    long long v61 = "pctStrokesFailAccel";
    __int16 v62 = 1024;
    int v63 = v13;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SessionStats,%s,%f,%s,%f,%s,%u,%s,%u,%s,%u,%s,%f,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u", buf, 0xCEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419000 != -1) {
      dispatch_once(&qword_102419000, &stru_1022C8CC0);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMetricCollectorBase::logStats(const CLSwimSessionStats &)", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_10079F304(id a1)
{
  qword_102419008 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_10079F338(uint64_t a1)
{
  int v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

CLClientManagerAuthorizationContext *sub_10079F36C(uint64_t a1)
{
  LOBYTE(v3) = 0;
  qword_10247E0A8 = -[CLClientManagerAuthorizationContext initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:]([CLClientManagerAuthorizationContext alloc], "initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:", 0, 5, 5, *(void *)(a1 + 32), *(void *)(a1 + 40), 0, v3);
  LOBYTE(v4) = 0;
  uint64_t result = -[CLClientManagerAuthorizationContext initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:]([CLClientManagerAuthorizationContext alloc], "initWithInUseLevel:registrationResult:transientAwareRegistrationResult:serviceMaskTuple:diagnosticMask:authorizedForWidgetUpdates:", 0, 4, 4, *(void *)(a1 + 32), *(void *)(a1 + 40), 0, v4);
  qword_10247E0B0 = (uint64_t)result;
  return result;
}

BOOL sub_10079F3F0(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247E0F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10247E0F0))
  {
    sub_100134750(&qword_10247E0C0, "com.apple.NanoUniverse.AegirProxyApp");
    sub_100134750(qword_10247E0D8, "com.apple.weather");
    __cxa_atexit((void (*)(void *))sub_10079F50C, &qword_10247E0C0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10247E0F0);
  }
  int v2 = (const char *)[a1 clientAnchor].UTF8String;
  uint64_t v3 = "";
  if (v2) {
    uint64_t v3 = v2;
  }
  int v5 = v3;
  return sub_1002E93EC((unsigned __int8 *)&qword_10247E0C0, (unsigned __int8 *)&qword_10247E0F0, &v5)
       - (unsigned __int8 *)&qword_10247E0C0 != 48;
}

void sub_10079F4DC(_Unwind_Exception *a1)
{
  if (byte_10247E0D7 < 0) {
    sub_101A6D008();
  }
  __cxa_guard_abort(&qword_10247E0F0);
  _Unwind_Resume(a1);
}

uint64_t sub_10079F50C(uint64_t a1)
{
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    if (*(char *)(a1 + i + 47) < 0) {
      operator delete(*(void **)(a1 + i + 24));
    }
  }
  return a1;
}

uint64_t sub_1007A0008(uint64_t a1)
{
  *(void *)a1 = off_1022C8CF0;
  sub_1007E24B8(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_1007A0050(uint64_t a1)
{
  *(void *)a1 = off_1022C8CF0;
  sub_1007E24B8(a1 + 16, *(void **)(a1 + 24));

  operator delete();
}

id sub_1007A00B8(uint64_t a1, void *a2, NSMutableDictionary *a3)
{
  id v4 = a2;
  unsigned int v6 = [a2 isValidCKP];
  if (a3 && v6)
  {
    id v4 = sub_100103E24(a1, (uint64_t)v4);
    BOOL v7 = sub_1001193DC(a1, (uint64_t)v4);
    uint64_t v8 = sub_10012276C(*(void *)(a1 + 376), v4);
    a3 = +[NSMutableDictionary dictionaryWithDictionary:a3];
    [(NSMutableDictionary *)a3 setObject:+[NSNumber numberWithBool:v7] forKeyedSubscript:@"BigSwitchState"];
    [(NSMutableDictionary *)a3 setObject:+[NSNumber numberWithUnsignedInt:v8] forKeyedSubscript:@"InUseLevel"];
  }
  int v9 = *(void **)(a1 + 1072);
  id v10 = [v4 legacyClientKey];

  return [v9 setPersistentStoreDictionary:a3 forClient:v10];
}

void sub_1007A01B4(uint64_t a1, unint64_t *a2)
{
  int v2 = (std::__shared_weak_count *)a2[1];
  unint64_t v3 = *a2;
  id v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_10017CC88(a1 + 16, &v3);
  if (v4) {
    sub_1000DB0A0(v4);
  }
}

void sub_1007A0208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007A0220(void *a1)
{
  int v2 = a1 + 3;
  sub_1007E24B8((uint64_t)(a1 + 2), (void *)a1[3]);
  a1[2] = v2;
  a1[4] = 0;
  *int v2 = 0;
  unint64_t v3 = *(void **)(a1[1] + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007A02BC;
  v5[3] = &unk_1022C8D28;
  v5[4] = a1;
  return [v3 iterateAllAnchorKeyPathsWithBlock:v5];
}

void sub_1007A02BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_1007A0318(v3, a2);
  sub_1007A03D8(v3, a2);
  sub_1007A0498(v3, a2);

  sub_1007A0558(v3, a2);
}

void sub_1007A0318(uint64_t a1, uint64_t a2)
{
  if (sub_1007E2558(a1, a2))
  {
    sub_100050830(*(void *)(a1 + 8), a2, &v6);
    if (sub_1007E2558(a1, a2))
    {
      uint64_t v4 = v6;
      int v5 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_10009AB24((uint64_t **)(a1 + 16), (unint64_t *)&v4, &v4);
      if (v5) {
        sub_1000DB0A0(v5);
      }
    }
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
}

void sub_1007A03AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A03D8(uint64_t a1, uint64_t a2)
{
  if (sub_1007E2848(a1, a2))
  {
    sub_1007E2914(*(uint64_t **)(a1 + 8), a2, &v6);
    if (sub_1007E2848(a1, a2))
    {
      uint64_t v4 = v6;
      int v5 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_10009AB24((uint64_t **)(a1 + 16), (unint64_t *)&v4, &v4);
      if (v5) {
        sub_1000DB0A0(v5);
      }
    }
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
}

void sub_1007A046C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A0498(uint64_t a1, uint64_t a2)
{
  if (sub_100096D2C(a1, a2))
  {
    sub_1007E321C(*(uint64_t **)(a1 + 8), a2, &v6);
    if (sub_100096D2C(a1, a2))
    {
      uint64_t v4 = v6;
      int v5 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_10009AB24((uint64_t **)(a1 + 16), (unint64_t *)&v4, &v4);
      if (v5) {
        sub_1000DB0A0(v5);
      }
    }
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
}

void sub_1007A052C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A0558(uint64_t a1, uint64_t a2)
{
  if (sub_1007E3B24(a1, a2))
  {
    sub_1000176FC(*(uint64_t **)(a1 + 8), a2, &v6);
    if (sub_1007E3B24(a1, a2))
    {
      uint64_t v4 = v6;
      int v5 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_10009AB24((uint64_t **)(a1 + 16), (unint64_t *)&v4, &v4);
      if (v5) {
        sub_1000DB0A0(v5);
      }
    }
    if (v7) {
      sub_1000DB0A0(v7);
    }
  }
}

void sub_1007A05EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007A0618(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007A06A8;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247E0F8 != -1) {
    dispatch_once(&qword_10247E0F8, block);
  }
  return qword_10248A3B0;
}

void sub_1007A06A8()
{
}

void sub_1007A06F4()
{
}

void sub_1007A0718(uint64_t a1, CLConnection *a2, CLConnectionMessage **a3, void *a4)
{
  uint64_t v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", objc_opt_class(), 0);
  id v9 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a3, v8) objectForKey:@"kCLConnectionMessageClientKeyForIdentityValidation"];
  id v10 = sub_100103E24(a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:v9]);
  uint64_t UniqueRemotePid = CLConnection::getUniqueRemotePid(a2);
  if (sub_1007A4CD0(a1, (uint64_t)v10, UniqueRemotePid))
  {
    if ((*((char *)a4 + 23) & 0x80000000) == 0)
    {
      int v12 = *((unsigned __int8 *)a4 + 23);
      if (v12 != 14)
      {
        if (v12 != 19)
        {
          if (v12 == 25)
          {
            if (*a4 != 0x6E6F697461636F4CLL
              || a4[1] != 0x4872657461647055
              || a4[2] != 0x616369726F747369
              || *((unsigned char *)a4 + 24) != 108)
            {
              if (*a4 != 0x756F72676B636142
                || a4[1] != 0x697669746341646ELL
                || a4[2] != 0x6F69737365537974
                || *((unsigned char *)a4 + 24) != 110)
              {
                goto LABEL_81;
              }
LABEL_109:
              operator new();
            }
LABEL_94:
            operator new();
          }
LABEL_81:
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v36 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            id v37 = [v9 UTF8String];
            __int16 v38 = *((char *)a4 + 23) >= 0 ? a4 : (void *)*a4;
            *(_DWORD *)std::string buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            v46[0] = 2082;
            *(void *)&v46[1] = "";
            __int16 v47 = 2082;
            id v48 = v37;
            __int16 v49 = 2082;
            uint64_t v50 = (uint64_t)v38;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#locationUpdater unknnown DaemonIdentifiable client type\", \"Client\":%{public, location:escape_only}s, \"ClientType\":%{public, location:escape_only}s}", buf, 0x26u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          double v39 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            id v40 = [v9 UTF8String];
            if (*((char *)a4 + 23) >= 0) {
              double v41 = a4;
            }
            else {
              double v41 = (void *)*a4;
            }
            *(_DWORD *)std::string buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            v46[0] = 2082;
            *(void *)&v46[1] = "";
            __int16 v47 = 2082;
            id v48 = v40;
            __int16 v49 = 2082;
            uint64_t v50 = (uint64_t)v41;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#locationUpdater unknnown DaemonIdentifiable client type", "{\"msg%{public}.0s\":\"#locationUpdater unknnown DaemonIdentifiable client type\", \"Client\":%{public, location:escape_only}s, \"ClientType\":%{public, location:escape_only}s}", buf, 0x26u);
          }
          return;
        }
        BOOL v30 = *a4 == 0x6E6F697461636F4CLL
           && a4[1] == 0x4C72657461647055
           && *(void *)((char *)a4 + 11) == 0x6576694C72657461;
        __int16 v28 = a4;
        if (!v30)
        {
LABEL_74:
          uint64_t v31 = *v28;
          uint64_t v32 = v28[1];
          uint64_t v33 = *(uint64_t *)((char *)v28 + 11);
          if (v31 == 0x756363416C6C7546 && v32 == 0x7373655379636172 && v33 == 0x6E6F697373655379) {
            operator new();
          }
          goto LABEL_81;
        }
LABEL_96:
        operator new();
      }
      if (*a4 != 0x5365636976726553 || *(void *)((char *)a4 + 6) != 0x6E6F697373655365) {
        goto LABEL_81;
      }
LABEL_95:
      operator new();
    }
    uint64_t v18 = a4[1];
    if (v18 == 19)
    {
      BOOL v19 = *(void *)*a4 == 0x6E6F697461636F4CLL && *(void *)(*a4 + 8) == 0x4C72657461647055;
      if (v19 && *(void *)(*a4 + 11) == 0x6576694C72657461) {
        goto LABEL_96;
      }
    }
    if (v18 == 25)
    {
      if (*(void *)*a4 == 0x6E6F697461636F4CLL
        && *(void *)(*a4 + 8) == 0x4872657461647055
        && *(void *)(*a4 + 16) == 0x616369726F747369
        && *(unsigned char *)(*a4 + 24) == 108)
      {
        goto LABEL_94;
      }
      uint64_t v18 = a4[1];
    }
    if (v18 == 14)
    {
      if (*(void *)*a4 == 0x5365636976726553 && *(void *)(*a4 + 6) == 0x6E6F697373655365) {
        goto LABEL_95;
      }
      uint64_t v18 = a4[1];
    }
    if (v18 == 25)
    {
      if (*(void *)*a4 == 0x756F72676B636142
        && *(void *)(*a4 + 8) == 0x697669746341646ELL
        && *(void *)(*a4 + 16) == 0x6F69737365537974
        && *(unsigned char *)(*a4 + 24) == 110)
      {
        goto LABEL_109;
      }
      uint64_t v18 = a4[1];
    }
    if (v18 != 19) {
      goto LABEL_81;
    }
    __int16 v28 = (uint64_t *)*a4;
    goto LABEL_74;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v17 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    v46[0] = 2082;
    *(void *)&v46[1] = "";
    __int16 v47 = 2082;
    id v48 = [v9 UTF8String];
    __int16 v49 = 2050;
    uint64_t v50 = UniqueRemotePid;
    __int16 v51 = 1026;
    int v52 = (unsigned __int16)UniqueRemotePid;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Cannot create DaemonIdentifiableClient\", \"IdentityToBeValidated\":%{public, location:escape_only}s, \"ConnectedClientUniquePid\":%{public}lld, \"ConnectedClientPid\":%{public}d}", buf, 0x2Cu);
  }
}

void sub_1007A0F44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_1007A0FD8(uint64_t a1, CLConnection *a2, CLConnectionMessage **a3)
{
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v10 = objc_opt_class();
  uint64_t v11 = objc_opt_class();
  uint64_t v12 = objc_opt_class();
  int v13 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v5, v6, v7, v8, v9, v10, v11, v12, objc_opt_class(), 0);
  id v14 = [[(id)CLConnectionMessage::getDictionaryOfClasses(*a3, v13) objectForKey:@"kCLConnectionMessageClientKeyForIdentityValidation"];
  id v15 = sub_100103E24(a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:v14]);
  uint64_t UniqueRemotePid = CLConnection::getUniqueRemotePid(a2);
  if (sub_1007A4CD0(a1, (uint64_t)v15, UniqueRemotePid)) {
    operator new();
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v17 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    long long __p = (void *)68289794;
    v20[0] = 2082;
    *(void *)&v20[1] = "";
    v20[5] = 2082;
    id v21 = [v14 UTF8String];
    __int16 v22 = 2050;
    uint64_t v23 = UniqueRemotePid;
    __int16 v24 = 1026;
    int v25 = (unsigned __int16)UniqueRemotePid;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Cannot create DaemonIdentifiableMonitor\", \"IdentityToBeValidated\":%{public, location:escape_only}s, \"ConnectedClientUniquePid\":%{public}lld, \"ConnectedClientPid\":%{public}d}", (uint8_t *)&__p, 0x2Cu);
  }
}

void sub_1007A1320(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void sub_1007A1364()
{
}

void sub_1007A16B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A16F4()
{
}

void sub_1007A1A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A1A84()
{
}

void sub_1007A1DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A1E14()
{
}

void sub_1007A2164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A21A4()
{
}

void sub_1007A24F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A2534()
{
}

void sub_1007A2884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A28C4()
{
}

void sub_1007A2C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A2C54()
{
}

void sub_1007A2FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A2FE4()
{
}

void sub_1007A3334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A3374()
{
}

void sub_1007A36C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A3704()
{
}

void sub_1007A3A54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A3A94()
{
}

void sub_1007A3DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A3E24()
{
}

void sub_1007A4174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A41B4(uint64_t a1, uint64_t a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v4 = qword_102419538;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    uint64_t v7 = CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*(char *)(v7 + 23) >= 0) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = *(void *)v7;
    }
    *(_DWORD *)std::string buf = 68289538;
    int v13 = 0;
    __int16 v14 = 2082;
    id v15 = "";
    __int16 v16 = 2082;
    uint64_t v17 = v6;
    __int16 v18 = 2082;
    uint64_t v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received message from #CoreLocationAgent\", \"User\":%{public, location:escape_only}s, \"message\":%{public, location:escape_only}s}", buf, 0x26u);
  }
  uint64_t v9 = *(CLConnectionMessage **)a2;
  uint64_t v10 = *(void *)(a2 + 8);
  v11[0] = v9;
  v11[1] = (CLConnectionMessage *)v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1007A4318(v5, v11);
  if (v10) {
    sub_1000DB0A0((std::__shared_weak_count *)v10);
  }
}

void sub_1007A4300(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A4318(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v3 = (void *)CLConnectionMessage::name(*a2);
  int v4 = *((char *)v3 + 23);
  if (v4 < 0)
  {
    if (v3[1] != 38) {
      goto LABEL_7;
    }
    uint64_t v3 = (void *)*v3;
  }
  else if (v4 != 38)
  {
LABEL_7:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v6 = CLConnectionMessage::name(*a2);
      uint64_t v7 = *(char *)(v6 + 23) >= 0 ? v6 : *(void *)v6;
      int v25 = 68289282;
      int v26 = 0;
      __int16 v27 = 2082;
      __int16 v28 = "";
      __int16 v29 = 2082;
      uint64_t v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CoreLocationAgent defaultMessageHandler received un-handled messaeg\", \"message\":%{public, location:escape_only}s}", (uint8_t *)&v25, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v8 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v9 = CLConnectionMessage::name(*a2);
      if (*(char *)(v9 + 23) >= 0) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = *(void *)v9;
      }
      int v25 = 68289282;
      int v26 = 0;
      __int16 v27 = 2082;
      __int16 v28 = "";
      __int16 v29 = 2082;
      uint64_t v30 = v10;
      uint64_t v11 = "#CoreLocationAgent defaultMessageHandler received un-handled messaeg";
      uint64_t v12 = "{\"msg%{public}.0s\":\"#CoreLocationAgent defaultMessageHandler received un-handled messaeg\", \"message\":%"
            "{public, location:escape_only}s}";
      int v13 = v8;
      goto LABEL_20;
    }
    return;
  }
  if (memcmp(v3, "kCLConnectionMessageAuthPromptResponse", 0x26uLL)) {
    goto LABEL_7;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  id v16 = [Dictionary allKeys];
  if ([v16 containsObject:@"uuid"]
    && [v16 containsObject:@"pid"]
    && ([v16 containsObject:@"response"] & 1) != 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v18 = CLConnectionMessage::name(*a2);
      uint64_t v19 = *(char *)(v18 + 23) >= 0 ? v18 : *(void *)v18;
      int v25 = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      __int16 v28 = "";
      __int16 v29 = 2082;
      uint64_t v30 = v19;
      __int16 v31 = 2114;
      uint64_t v32 = Dictionary;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt response from #CoreLocationAgent is not yet supported on this platform\", \"message\":%{public, location:escape_only}s, \"resposne\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v20 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v21 = CLConnectionMessage::name(*a2);
      if (*(char *)(v21 + 23) >= 0) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = *(void *)v21;
      }
      int v25 = 68289538;
      int v26 = 0;
      __int16 v27 = 2082;
      __int16 v28 = "";
      __int16 v29 = 2082;
      uint64_t v30 = v22;
      __int16 v31 = 2114;
      uint64_t v32 = Dictionary;
      uint64_t v11 = "#AuthPrompt response from #CoreLocationAgent is not yet supported on this platform";
      uint64_t v12 = "{\"msg%{public}.0s\":\"#AuthPrompt response from #CoreLocationAgent is not yet supported on this platform\","
            " \"message\":%{public, location:escape_only}s, \"resposne\":%{public, location:escape_only}@}";
      int v13 = v20;
      uint32_t v14 = 38;
      goto LABEL_21;
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v23 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v25 = 68289282;
      int v26 = 0;
      __int16 v27 = 2082;
      __int16 v28 = "";
      __int16 v29 = 2114;
      uint64_t v30 = (uint64_t)Dictionary;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt auth response from #CoreLocationAgent is malformed. Don't apply auth-response\", \"resposne\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v24 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v25 = 68289282;
      int v26 = 0;
      __int16 v27 = 2082;
      __int16 v28 = "";
      __int16 v29 = 2114;
      uint64_t v30 = (uint64_t)Dictionary;
      uint64_t v11 = "#AuthPrompt auth response from #CoreLocationAgent is malformed. Don't apply auth-response";
      uint64_t v12 = "{\"msg%{public}.0s\":\"#AuthPrompt auth response from #CoreLocationAgent is malformed. Don't apply auth-resp"
            "onse\", \"resposne\":%{public, location:escape_only}@}";
      int v13 = v24;
LABEL_20:
      uint32_t v14 = 28;
LABEL_21:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v11, v12, (uint8_t *)&v25, v14);
    }
  }
}

void sub_1007A47F0()
{
}

void sub_1007A4B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_1000DB0A0(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007A4B80(id *a1, uint64_t a2)
{
  int v4 = sub_100122128((uint64_t)a1, a2, &xmmword_101D82EB8);

  return sub_1001490E0(a1, a2, (uint64_t)v4);
}

void sub_1007A4BCC(uint64_t a1, CLConnection *a2, std::__shared_weak_count *a3)
{
  uint64_t v6 = *(void **)(a1 + 824);
  if (!v6) {
    goto LABEL_12;
  }
  BOOL v5 = a3;
  uint64_t v3 = a2;
  uint64_t v4 = a1;
  uint64_t v7 = (void *)(a1 + 824);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == (void *)(a1 + 824) || v7[4] > (unint64_t)a2) {
LABEL_12:
  }
    sub_101A6D600();
  if (!sub_100BD4E7C(v7[5]))
  {
    int v13 = (_Unwind_Exception *)sub_101A6D770();
    if (v5) {
      sub_1000DB0A0(v5);
    }
    _Unwind_Resume(v13);
  }
  sub_100036F24(v4, v3);
  uint64_t v11 = v5->__vftable;
  shared_owners = (std::__shared_weak_count *)v5->__shared_owners_;
  v14[0] = v11;
  v14[1] = shared_owners;
  if (shared_owners) {
    atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000B0B44(v4, v3, (uint64_t)v14);
  if (shared_owners)
  {
    sub_1000DB0A0(shared_owners);
  }
}

id sub_1007A4CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = sub_100103E24(a1, a2);
  id v6 = [*(id *)(a1 + 360) objectForKey:v5];
  id v7 = [v6 containsObject:[NSNumber numberWithLongLong:a3]];
  if (v7)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 68289794;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2114;
      id v19 = v5;
      __int16 v20 = 2050;
      uint64_t v21 = a3;
      __int16 v22 = 1026;
      int v23 = (unsigned __int16)a3;
      BOOL v9 = "{\"msg%{public}.0s\":\"#identityValidation successful\", \"Identity\":%{public, location:escape_only}@, \"Con"
           "nectedClientUniquePid\":%{public}lld, \"ConnectedClientPid\":%{public}d}";
      uint64_t v10 = v8;
      uint32_t v11 = 44;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, v11);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 68290050;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2114;
      id v19 = v5;
      __int16 v20 = 2050;
      uint64_t v21 = a3;
      __int16 v22 = 1026;
      int v23 = (unsigned __int16)a3;
      __int16 v24 = 2114;
      id v25 = v6;
      BOOL v9 = "{\"msg%{public}.0s\":\"#warning #identityValidation Identity invalid for connected client\", \"Identity\":%{p"
           "ublic, location:escape_only}@, \"ConnectedClientUniquePid\":%{public}lld, \"ConnectedClientPid\":%{public}d, "
           "\"AllowedUniquePids\":%{public, location:escape_only}@}";
      uint64_t v10 = v12;
      uint32_t v11 = 54;
      goto LABEL_10;
    }
  }
  return v7;
}

void sub_1007A4ED4(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, void *a5, int a6)
{
  id v29 = objc_alloc_init((Class)NSAutoreleasePool);
  id v11 = sub_100103E24(a1, a2);
  if (([*(id *)(a1 + 136) dictionaryExistsAtKeyPath:v11] & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v15 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_38;
    }
    if (*((char *)a3 + 23) >= 0) {
      __int16 v16 = a3;
    }
    else {
      __int16 v16 = (uint64_t *)*a3;
    }
    *(_DWORD *)std::string buf = 68289794;
    int v31 = 0;
    __int16 v32 = 2082;
    uint64_t v33 = "";
    __int16 v34 = 2114;
    id v35 = v11;
    __int16 v36 = 2082;
    id v37 = v16;
    __int16 v38 = 1026;
    unsigned int v39 = a4;
    uint64_t v17 = "{\"msg%{public}.0s\":\"skip persisting #dic for rehydration. Client not found\", \"Client\":%{public, location"
          ":escape_only}@, \"dic\":%{public, location:escape_only}s, \"dicType\":%{public}d}";
LABEL_13:
    __int16 v18 = v15;
    uint32_t v19 = 44;
LABEL_37:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
    goto LABEL_38;
  }
  if (a6 && ![a5 count])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v15 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_38;
    }
    if (*((char *)a3 + 23) >= 0) {
      __int16 v27 = a3;
    }
    else {
      __int16 v27 = (uint64_t *)*a3;
    }
    *(_DWORD *)std::string buf = 68289794;
    int v31 = 0;
    __int16 v32 = 2082;
    uint64_t v33 = "";
    __int16 v34 = 2114;
    id v35 = v11;
    __int16 v36 = 2082;
    id v37 = v27;
    __int16 v38 = 1026;
    unsigned int v39 = a4;
    uint64_t v17 = "{\"msg%{public}.0s\":\"skip persisting #dic for rehydration, payload is empty\", \"Client\":%{public, location"
          ":escape_only}@, \"dic\":%{public, location:escape_only}s, \"dicType\":%{public}d}";
    goto LABEL_13;
  }
  uint64_t v12 = [+[NSNumber numberWithUnsignedInt:a4] stringValue];
  id v13 = [[objc_msgSend(*(id *)(a1 + 136), "dictionaryForKey:atKeyPath:defaultValue:", @"DIC", v11, +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary")) mutableCopy];
  if ([v13 objectForKeyedSubscript:v12]) {
    id v14 = [[v13 objectForKeyedSubscript:v12] mutableCopy];
  }
  else {
    id v14 = +[NSMutableDictionary dictionary];
  }
  __int16 v20 = v14;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v21 = a3;
  }
  else {
    uint64_t v21 = (uint64_t *)*a3;
  }
  if (a6)
  {
    [v14 removeObjectForKey:[NSString stringWithUTF8String:v21]];
    if (*((char *)a3 + 23) >= 0) {
      __int16 v22 = a3;
    }
    else {
      __int16 v22 = (uint64_t *)*a3;
    }
    [v20 setObject:a5 forKeyedSubscript:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22)];
  }
  else
  {
    [v14 removeObjectForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v21)];
  }
  if ([v20 count]) {
    [v13 setObject:v20 forKeyedSubscript:v12];
  }
  else {
    [v13 removeObjectForKey:v12];
  }
  id v23 = [v13 count];
  __int16 v24 = *(void **)(a1 + 136);
  if (v23) {
    [v24 setDictionary:v13 forKey:@"DIC" atKeyPath:v11];
  }
  else {
    [v24 removeValueForKey:@"DIC" atKeyPath:v11];
  }
  [*(id *)(a1 + 136) persist];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v25 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) >= 0) {
      int v26 = a3;
    }
    else {
      int v26 = (uint64_t *)*a3;
    }
    *(_DWORD *)std::string buf = 68290306;
    int v31 = 0;
    __int16 v32 = 2082;
    uint64_t v33 = "";
    __int16 v34 = 2114;
    id v35 = v11;
    __int16 v36 = 2082;
    id v37 = v26;
    __int16 v38 = 1026;
    unsigned int v39 = a4;
    __int16 v40 = 1026;
    int v41 = a6;
    __int16 v42 = 2114;
    int v43 = a5;
    uint64_t v17 = "{\"msg%{public}.0s\":\"updated persistent-store for #dic rehydration\", \"Client\":%{public, location:escape_o"
          "nly}@, \"dic\":%{public, location:escape_only}s, \"dicType\":%{public}d, \"coming\":%{public}hhd, \"Rehydratio"
          "nPayload\":%{public, location:escape_only}@}";
    __int16 v18 = v25;
    uint32_t v19 = 60;
    goto LABEL_37;
  }
LABEL_38:
}

void sub_1007A532C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1007A5368(uint64_t a1)
{
  int v2 = *(CLConnectionServer **)(a1 + 808);
  if (v2)
  {
    CLConnectionServer::~CLConnectionServer(v2);
    operator delete();
  }
  sub_1007A53D4(a1);
  uint64_t v3 = *(CLConnection **)(a1 + 936);
  if (v3)
  {
    CLConnection::deferredDelete(v3);
    *(void *)(a1 + 936) = 0;
  }
  [*(id *)(a1 + 248) invalidate];

  *(void *)(a1 + 248) = 0;
}

void sub_1007A53D4(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 816);
  if (v3 != (void *)(a1 + 824))
  {
    do
    {
      uint64_t v4 = (void *)v3[1];
      id v5 = v3;
      if (v4)
      {
        do
        {
          id v6 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          id v6 = (void *)v5[2];
          BOOL v7 = *v6 == (void)v5;
          id v5 = v6;
        }
        while (!v7);
      }
      sub_1001B469C(a1, (CLConnection *)v3[4]);
      uint64_t v3 = v6;
    }
    while (v6 != (void *)(a1 + 824));
  }
}

void sub_1007A5470(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v3 isValidCKP])
  {
    uint64_t v4 = *(void **)(a1 + 816);
    if (v4 != (void *)(a1 + 824))
    {
      do
      {
        id v5 = (void *)v4[1];
        id v6 = v4;
        if (v5)
        {
          do
          {
            BOOL v7 = v5;
            id v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            BOOL v7 = (void *)v6[2];
            BOOL v8 = *v7 == (void)v6;
            id v6 = v7;
          }
          while (!v8);
        }
        BOOL v9 = (CLConnection *)v4[4];
        if (objc_msgSend(sub_100138248(v4[5], 0), "isEqual:", v3)) {
          sub_1001B469C(a1, v9);
        }
        uint64_t v4 = v7;
      }
      while (v7 != (void *)(a1 + 824));
    }
  }
}

uint64_t sub_1007A5528(uint64_t a1, char a2, uint64_t *a3)
{
  char v9 = a2;
  sub_1000C7F88(&v7);
  sub_1000EA52C(v7, @"LocationServicesEnabledIn8.0", &v9);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  sub_1000C7F88(&v7);
  sub_10051F604(v7);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  sub_10051F6A8((uint64_t)&v7, @"com.apple.locationd.notbackedup", 0, @"mobile");
  sub_1000EA52C((uint64_t)&v7, @"LocationServicesEnabledIn8.0", &v9);
  sub_10051F604((uint64_t)&v7);
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.locationd/Prefs", 0, 0, 1u);
  sub_1007A564C(a1, a3, 1);
  return sub_10051F740(&v7);
}

void sub_1007A5620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A564C(uint64_t a1, uint64_t *a2, int a3)
{
  sub_1004BDF6C();
  uint64_t v6 = sub_1001198CC();
  int v7 = sub_1004BE040();
  if ([*(id *)(a1 + 120) locationServicesEnabledStatus] != v6
    || *(unsigned __int8 *)(a1 + 800) != v7)
  {
    [*(id *)(a1 + 120) setLocationServicesEnabledStatus:v6];
    *(unsigned char *)(a1 + 800) = v7;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v9 = [*(id *)(a1 + 120) locationServicesEnabledStatus];
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "GPS_NETWORK: currentStatus(%d) isGpsControlledByNetwork(%d)", buf, 0xEu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      unsigned int v20 = [*(id *)(a1 + 120) locationServicesEnabledStatus];
      *(_DWORD *)__int16 v34 = 67109376;
      *(_DWORD *)&void v34[4] = v20;
      *(_WORD *)id v35 = 1024;
      *(_DWORD *)&v35[2] = v7;
      uint64_t v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::checkLocationServicesEnabledState(const std::string &, BOOL)", "%s\n", v21);
      if (v21 != (char *)buf) {
        free(v21);
      }
    }
    if (a3)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v10 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync sending kNotificationLocationServicesStatus\"}", buf, 0x12u);
      }
      [*(id *)(a1 + 1536) sendGlobalAuthStatus:sub_1001198FC()];
    }
    sub_1007AA5C0(a1);
    *(_OWORD *)__int16 v27 = 0u;
    memset(v28, 0, 19);
    long long v25 = 0u;
    *(_OWORD *)int v26 = 0u;
    memset(buf, 0, sizeof(buf));
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    memset(__p, 0, 27);
    unsigned int v33 = [*(id *)(a1 + 120) locationServicesEnabledStatus];
    *(_DWORD *)__int16 v34 = 4;
    (*(void (**)(uint64_t, uint8_t *, uint8_t *, uint64_t, uint64_t, void))(*(void *)a1 + 152))(a1, v34, buf, 1, 0xFFFFFFFFLL, 0);
    sub_1007A53D4(a1);
    for (uint64_t i = *(uint64_t **)(a1 + 992); i; uint64_t i = (uint64_t *)*i)
    {
      uint64_t v12 = i + 2;
      if (*((char *)i + 39) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      id v13 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12))];
      if ([v13 isValidCKP])
      {
        id v14 = sub_100068950(a1, (uint64_t)v13, &xmmword_101D82EB8);
        sub_100138BE0(a1, (uint64_t)v13, (uint64_t)v14);
      }
    }
    uint64_t v15 = *(void **)(a1 + 136);
    *(void *)__int16 v34 = _NSConcreteStackBlock;
    *(void *)id v35 = 3221225472;
    *(void *)&v35[8] = sub_1007DC838;
    *(void *)&v35[16] = &unk_1022C9578;
    uint64_t v36 = a1;
    char v37 = 0;
    [v15 iterateAllAnchorKeyPathsWithBlock:v34];
    sub_1007A6574(a1);
    sub_1007A69D4(a1);
    v23[0] = &__kCFBooleanFalse;
    v22[0] = @"IsResetEvent";
    v22[1] = @"EventSource";
    if (*((char *)a2 + 23) >= 0) {
      __int16 v16 = a2;
    }
    else {
      __int16 v16 = (uint64_t *)*a2;
    }
    v23[1] = +[NSString stringWithUTF8String:v16];
    void v22[2] = @"Enabled";
    v23[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(a1 + 120) locationServicesEnabledStatus] == 1);
    uint64_t v17 = +[NSDictionary dictionaryWithObjects:v23 forKeys:v22 count:3];
    if (qword_102419620 != -1) {
      dispatch_once(&qword_102419620, &stru_1022C97C8);
    }
    __int16 v18 = qword_102419628;
    if (os_log_type_enabled((os_log_t)qword_102419628, OS_LOG_TYPE_DEBUG))
    {
      *(void *)__int16 v34 = 68289282;
      *(_WORD *)id v35 = 2082;
      *(void *)&v35[2] = "";
      *(_WORD *)&v35[10] = 2114;
      *(void *)&v35[12] = v17;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#checkLocationServicesEnabledState #CoreAnalytics\", \"Bigswitch Analytics\":%{public, location:escape_only}@}", v34, 0x1Cu);
    }
    AnalyticsSendEvent();
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CLAuthorizationStatusChangedNotification, 0, 0, 0);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v31) < 0) {
      operator delete(*((void **)&v30 + 1));
    }
    if (SBYTE7(v30) < 0) {
      operator delete((void *)v29);
    }
    if ((v28[15] & 0x80000000) != 0) {
      operator delete(v27[1]);
    }
    if (SHIBYTE(v27[0]) < 0) {
      operator delete(v26[0]);
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_1007A5C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1007A5C78(uint64_t a1)
{
  return *(void *)(a1 + 272) != 0;
}

uint64_t sub_1007A5C88(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 272);
  if (v1) {
    return *v1;
  }
  else {
    return 5;
  }
}

id sub_1007A5CA0(uint64_t a1)
{
  id result = +[CLClientKeyPath nullClientKeyPath];
  uint64_t v3 = *(void *)(a1 + 272);
  if (v3) {
    return *(id *)(v3 + 8);
  }
  return result;
}

id sub_1007A5CD8(uint64_t a1, uint64_t a2)
{
  id v3 = [[-[NSArray objectAtIndexedSubscript:](sub_100122964(a1, a2), "objectAtIndexedSubscript:", 0) intValue];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289538;
    v6[1] = 0;
    __int16 v7 = 2082;
    BOOL v8 = "";
    __int16 v9 = 2114;
    uint64_t v10 = a2;
    __int16 v11 = 2050;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client static registration result\", \"Client\":%{public, location:escape_only}@, \"registration\":%{public, location:CLClientRegistrationResult}lld}", (uint8_t *)v6, 0x26u);
  }
  return v3;
}

id sub_1007A5DF0(uint64_t a1, uint64_t a2)
{
  id v3 = [[-[NSArray objectAtIndexedSubscript:](sub_100122964(a1, a2), "objectAtIndexedSubscript:", 1) intValue];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289538;
    v6[1] = 0;
    __int16 v7 = 2082;
    BOOL v8 = "";
    __int16 v9 = 2114;
    uint64_t v10 = a2;
    __int16 v11 = 2050;
    uint64_t v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client Effective registration result\", \"Client\":%{public, location:escape_only}@, \"registration\":%{public, location:CLClientRegistrationResult}lld}", (uint8_t *)v6, 0x26u);
  }
  return v3;
}

id sub_1007A5F08(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  int v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    int v7 = 0;
    __int16 v8 = 2082;
    __int16 v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"checkVisitMonitoringStopped\"}", buf, 0x12u);
  }
  id v3 = *(void **)(a1 + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007A6038;
  v5[3] = &unk_1022C8D28;
  v5[4] = a1;
  return [v3 iterateAllAnchorKeyPathsWithBlock:v5];
}

uint64_t sub_1007A6038(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1007A6194;
  v7[3] = &unk_1022C8D78;
  v7[4] = v3;
  [v4 iterateIdentitiesRelatedToKeyPath:a2 withBlock:v7];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    int v9 = 0;
    __int16 v10 = 2082;
    __int16 v11 = "";
    __int16 v12 = 2114;
    uint64_t v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stop visit monitoring for client\", \"ckp\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  return sub_1007A6298(v3, a2, 6);
}

uint64_t sub_1007A6194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    __int16 v7 = 2082;
    __int16 v8 = "";
    __int16 v9 = 2114;
    uint64_t v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"stop visit monitoring for related client\", \"relatedCkp\":%{public, location:escape_only}@}", (uint8_t *)v6, 0x1Cu);
  }
  return sub_1007A6298(v3, a2, 6);
}

uint64_t sub_1007A6298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  uint64_t result = (uint64_t)[v5 isValidCKP];
  if (result)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_100101464(a3, &v18, &v17);
    int v7 = [*(id *)(a1 + 136) intForKey:v18 atKeyPath:v5 defaultValue:0xFFFFFFFFLL];
    int v8 = [*(id *)(a1 + 136) intForKey:v17 atKeyPath:v5 defaultValue:0xFFFFFFFFLL];
    if (v7 != -1 && ((v9 = (double)v7, double v10 = (double)v8, v8 == -1) || v10 < v9))
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v12 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = off_1022C8D98[a3];
        *(_DWORD *)std::string buf = 136447234;
        long long v30 = v13;
        __int16 v31 = 2050;
        double v32 = v9;
        __int16 v33 = 2050;
        double v34 = v10;
        __int16 v35 = 2114;
        id v36 = v5;
        __int16 v37 = 2050;
        CFAbsoluteTime v38 = Current;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#warning %{public}s time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}@ - setting to %{public}.2f", buf, 0x34u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v15 = off_1022C8D98[a3];
        int v19 = 136447234;
        unsigned int v20 = v15;
        __int16 v21 = 2050;
        double v22 = v9;
        __int16 v23 = 2050;
        double v24 = v10;
        __int16 v25 = 2114;
        id v26 = v5;
        __int16 v27 = 2050;
        CFAbsoluteTime v28 = Current;
        __int16 v16 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::checkServiceStopped(CLClientKeyPath *, CLClientServiceType)", "%s\n", v16);
        if (v16 != (char *)buf) {
          free(v16);
        }
      }
      double v14 = CFAbsoluteTimeGetCurrent();
      sub_1001005FC(a1, (uint64_t)v5, a3, 0, 0, 0, v14);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id sub_1007A6574(uint64_t a1)
{
  id v2 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLBTLEFenceManager"];
  uint64_t v3 = *(void **)(a1 + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007A6608;
  v5[3] = &unk_1022C8E48;
  v5[4] = v2;
  void v5[5] = a1;
  return [v3 iterateAllAnchorKeyPathsWithBlock:v5];
}

uint64_t sub_1007A6608(uint64_t a1, void *a2)
{
  unsigned int v4 = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  do
  {
    unsigned int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v6 = sub_1007A69A8(v4);
    sub_100101464(v6, &v21, &v20);
    [*(id *)(v5 + 136) doubleForKey:v21 atKeyPath:a2 defaultValue:-1.0];
    double v8 = v7;
    uint64_t result = (uint64_t)[*(id *)(v5 + 136) doubleForKey:v20 atKeyPath:a2 defaultValue:-1.0];
    if (v8 != -1.0)
    {
      double v11 = v10;
      if (v10 == -1.0 || v10 < v8)
      {
        if (v4 - 1 >= 3)
        {
          if (v4) {
            goto LABEL_18;
          }
          uint64_t result = (uint64_t)[*(id *)(a1 + 32) syncgetHasMonitoredRegions:objc_msgSend(a2, "legacyClientKey")];
          if (result) {
            goto LABEL_18;
          }
        }
        else
        {
          [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v5 + 32), "vendor"), "proxyForService:", @"CLFenceManager"), "syncgetHasMonitoredFences:", objc_msgSend(a2, "legacyClientKey")];
        }
        CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        double v14 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = off_1022C8D98[sub_1007A69A8(v4)];
          *(_DWORD *)std::string buf = 136447234;
          __int16 v33 = v15;
          __int16 v34 = 2050;
          double v35 = v8;
          __int16 v36 = 2050;
          double v37 = v11;
          __int16 v38 = 2114;
          unsigned int v39 = a2;
          __int16 v40 = 2050;
          CFAbsoluteTime v41 = Current;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#warning %{public}s region time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}@ - setting to %{public}.2f", buf, 0x34u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v18 = off_1022C8D98[sub_1007A69A8(v4)];
          int v22 = 136447234;
          __int16 v23 = v18;
          __int16 v24 = 2050;
          double v25 = v8;
          __int16 v26 = 2050;
          double v27 = v11;
          __int16 v28 = 2114;
          long long v29 = a2;
          __int16 v30 = 2050;
          CFAbsoluteTime v31 = Current;
          int v19 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::checkRegionsStopped()_block_invoke", "%s\n", v19);
          if (v19 != (char *)buf) {
            free(v19);
          }
        }
        uint64_t v16 = sub_1007A69A8(v4);
        double v17 = CFAbsoluteTimeGetCurrent();
        uint64_t result = sub_1001005FC(v5, (uint64_t)a2, v16, 0, 0, 0, v17);
      }
    }
LABEL_18:
    ++v4;
  }
  while (v4 != 4);
  return result;
}

uint64_t sub_1007A69A8(unsigned int a1)
{
  if (a1 < 4) {
    return qword_101D2E028[a1];
  }
  uint64_t v2 = sub_101A6DA50();
  return sub_1007A69D4(v2);
}

void sub_1007A69D4(uint64_t a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = (int *)&v4;
  uint64_t v6 = 0x2020000000;
  int v7 = 0;
  uint64_t v2 = *(void **)(a1 + 136);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1007A6AA4;
  v3[3] = &unk_1022C8E70;
  void v3[4] = &v4;
  v3[5] = a1;
  [v2 iterateAllAnchorKeyPathsWithBlock:v3];
  if (v5[6] >= 1) {
    sub_1007A6C10(a1);
  }
  _Block_object_dispose(&v4, 8);
}

void sub_1007A6A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1007A6AA4(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  id result = [*(id *)(v4 + 136) hasValueForKey:@"RangeTimeStarted" atKeyPath:a2];
  if (result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      v7[0] = 68289282;
      v7[1] = 0;
      __int16 v8 = 2082;
      double v9 = "";
      __int16 v10 = 2114;
      id v11 = [a2 legacyClientKey];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"stop range for client\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
    }
    [*(id *)(v4 + 136) removeValueForKey:@"RangeTimeStarted" atKeyPath:a2];
    id result = [*(id *)(v4 + 136) setDouble:@"RangeTimeStopped" forKey:a2 atKeyPath:CFAbsoluteTimeGetCurrent()];
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  return result;
}

id sub_1007A6C10(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 68289026;
    int v9 = 0;
    __int16 v10 = 2082;
    id v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Scheduling pending app status event\"}", buf, 0x12u);
  }
  uint64_t v3 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_10017B1A0;
  v7[3] = &unk_1022A3020;
  v7[4] = a1;
  [v3 afterInterval:v7 async:sub_1001C2630(1)];
  uint64_t v4 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1007DD164;
  unsigned __int8 v6[3] = &unk_1022A3020;
  void v6[4] = a1;
  return [v4 afterInterval:v6 async:sub_1001C2630(2)];
}

uint64_t sub_1007A6DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_1007A6298(v3, a2, 11);

  return sub_1007A6298(v3, a2, 3);
}

uint64_t sub_1007A6DF8(uint64_t a1, uint64_t a2)
{
  id v4 = sub_100138248(a2, 0);
  unsigned int v5 = sub_1007A7028(a1, (uint64_t)v4, 5, 10.0);
  id v6 = sub_100138248(a2, 0);
  unsigned int v7 = sub_1007A7028(a1, (uint64_t)v6, 3, -1.0);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v8 = v5 | v7;
  int v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 67109632;
    int v13 = v5 | v7;
    __int16 v14 = 1024;
    unsigned int v15 = v5;
    __int16 v16 = 1024;
    unsigned int v17 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "mayTakeProcessAssertion,%d,background,%d,slc,%d", buf, 0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::mayTakeProcessAssertion(CLDaemonClient *)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return v8;
}

id sub_1007A7028(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v7 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  id result = [v7 isValidCKP];
  if (result)
  {
    int v13 = 0;
    uint64_t v14 = 0;
    sub_100101464(a3, &v14, &v13);
    [*(id *)(a1 + 136) doubleForKey:v14 atKeyPath:v7 defaultValue:-1.0];
    double v10 = v9;
    [*(id *)(a1 + 136) doubleForKey:v13 atKeyPath:v7 defaultValue:-1.0];
    id result = (id)(v10 != -1.0 && (v11 != -1.0 ? (v12 = v11 < v10) : (v12 = 1), v12)
               || vabdd_f64(v11, CFAbsoluteTimeGetCurrent()) < a4);
  }
  return result;
}

void sub_1007A7100(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  id v9 = sub_100103D58(a1, a2);
  double v10 = sub_100068950(a1, (uint64_t)v9, &xmmword_101D82EB8);
  if ([(CLClientManagerAuthorizationContext *)v10 isAuthorizedForServiceTypeMask:4112])
  {
    if ([*(id *)(a1 + 120) locationRestricted])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      double v11 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289282;
        int v27 = 0;
        __int16 v28 = 2082;
        long long v29 = "";
        __int16 v30 = 2114;
        id v31 = v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#transcriptSession skip prompting. Restrictions enabled\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      NSErrorUserInfoKey v36 = NSDebugDescriptionErrorKey;
      CFStringRef v37 = @"Restrictions are enabled.  Changing authorization isn't allowed";
      (*(void (**)(uint64_t, void, NSError *))(a5 + 16))(a5, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 18, +[NSDictionary dictionaryWithObjects:&v37 forKeys:&v36 count:1]));
    }
    else if (*(void *)(a1 + 272))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(unsigned int **)(a1 + 272);
        uint64_t v15 = *((void *)v14 + 1);
        uint64_t v16 = *v14;
        *(_DWORD *)std::string buf = 68289794;
        int v27 = 0;
        __int16 v28 = 2082;
        long long v29 = "";
        __int16 v30 = 2114;
        id v31 = v9;
        __int16 v32 = 2114;
        uint64_t v33 = v15;
        __int16 v34 = 2050;
        uint64_t v35 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession skip prompting. InflightPromptAuthorizationRequest found.\", \"Client\":%{public, location:escape_only}@, \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x30u);
      }
      NSErrorUserInfoKey v24 = NSDebugDescriptionErrorKey;
      CFStringRef v25 = @"App is already presenting the user with an authorization prompt";
      (*(void (**)(uint64_t, void, NSError *))(a5 + 16))(a5, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 18, +[NSDictionary dictionaryWithObjects:&v25 forKeys:&v24 count:1]));
    }
    else
    {
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472;
      v23[2] = sub_1007A76F0;
      void v23[3] = &unk_1022C8E98;
      _OWORD v23[4] = a5;
      sub_100134750(__p, "");
      sub_1007E1DB0((uint64_t)v22, a4, (uint64_t)v9, v23, (long long *)__p);
      BOOL v17 = sub_1007A7700(a1, (uint64_t)v9, 0, (uint64_t)v22, a3);
      sub_1007E1E64((uint64_t)v22);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (!v17)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v18 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 68289282;
          int v27 = 0;
          __int16 v28 = 2082;
          long long v29 = "";
          __int16 v30 = 2114;
          id v31 = v9;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Could not post #transcriptSession\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        int v19 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          *(_DWORD *)std::string buf = 68289282;
          int v27 = 0;
          __int16 v28 = 2082;
          long long v29 = "";
          __int16 v30 = 2114;
          id v31 = v9;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning Could not post #transcriptSession", "{\"msg%{public}.0s\":\"#Warning Could not post #transcriptSession\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289538;
      int v27 = 0;
      __int16 v28 = 2082;
      long long v29 = "";
      __int16 v30 = 2114;
      id v31 = v9;
      __int16 v32 = 1026;
      LODWORD(v33) = [(CLClientManagerAuthorizationContext *)v10 registrationResult];
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#transcriptSession #Warning skip prompting .No point in prompting if the user doesn't want them to get access to precise current location \", \"Client\":%{public, location:escape_only}@, \"RegistrationResult\":%{public}d}", buf, 0x22u);
    }
    NSErrorUserInfoKey v38 = NSDebugDescriptionErrorKey;
    CFStringRef v39 = @"Registration Result should be WIU or Always to enable Transcript Session";
    (*(void (**)(uint64_t, void, NSError *))(a5 + 16))(a5, 0, +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 18, +[NSDictionary dictionaryWithObjects:&v39 forKeys:&v38 count:1]));
  }
}

void sub_1007A76BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1007A76F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

BOOL sub_1007A7700(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = sub_100103E24(a1, a2);
  id v10 = sub_100103D58(a1, (uint64_t)v9);
  sub_10009D93C(a1, v10, 1);
  if (&SBUserNotificationPendInSetupIfNotAllowedKey) {
    BOOL v11 = &SBUserNotificationHideOnClonedDisplay == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (v11
    || &SBUserNotificationDefaultButtonTag == 0
    || &SBUserNotificationExtensionItemsKey == 0
    || &SBUserNotificationExtensionIdentifierKey == 0)
  {
    return 0;
  }
  unsigned int v15 = *(_DWORD *)a4;
  CFStringRef cf = sub_1007B7CEC(a1, v9, a3);
  if (!cf)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v9;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"createClientUserNotification: BundleDisplayName nil\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v18 = qword_102419538;
    BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
    if (!result) {
      return result;
    }
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v9;
    unsigned int v20 = "createClientUserNotification: BundleDisplayName nil";
    char v21 = "{\"msg%{public}.0s\":\"createClientUserNotification: BundleDisplayName nil\", \"Client\":%{public, location:escape_only}@}";
LABEL_28:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v20, v21, buf, 0x1Cu);
    return 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v16 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v9;
    __int16 v140 = 1026;
    LODWORD(v141) = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CUN Creating client user notification for client\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public}d}", buf, 0x22u);
  }
  uint64_t v134 = +[NSMutableDictionary dictionaryWithDictionary:a5];
  if (*(char *)(a4 + 39) < 0)
  {
    sub_1000DC48C(buf, *(void **)(a4 + 16), *(void *)(a4 + 24));
  }
  else
  {
    *(_OWORD *)std::string buf = *(_OWORD *)(a4 + 16);
    *(void *)&uint8_t buf[16] = *(void *)(a4 + 32);
  }
  if (buf[23] >= 0) {
    int v22 = buf;
  }
  else {
    int v22 = *(unsigned char **)buf;
  }
  __int16 v127 = +[NSString stringWithUTF8String:v22];
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  CFErrorRef errorPtr = 0;
  sub_100103240();
  if (sub_10016CCBC())
  {
    CFURLRef v23 = (const __CFURL *)sub_1001BEA24([v9 bundleId]);
    NSErrorUserInfoKey v24 = CFBundleCreate(kCFAllocatorDefault, v23);
    if (v24)
    {
      uint64_t v25 = sub_1001BA55C();
      CFStringRef v26 = sub_100041DC4(v25, v24, @"NSLocationUsageDescriptionCarplay", 0);
      CFRelease(v24);
      if (v26) {
        CFRelease(v26);
      }
    }
  }
  int v27 = _os_feature_enabled_impl();
  if (v27) {
    unsigned int v28 = [*(id *)(a1 + 136) BOOLForKey:@"AuthorizationPromptOptionTypeNegative" atKeyPath:v9 defaultValue:0];
  }
  else {
    unsigned int v28 = 0;
  }
  uint64_t v29 = 0;
  int v30 = 0;
  switch(v15)
  {
    case 0u:
    case 0xAu:
    case 0xFu:
      CFRelease(cf);
      return 0;
    case 1u:
    case 3u:
      double v126 = +[NSString stringWithUTF8String:"com.apple.corelocation.CoreLocationTemporaryPreciseAuthPromptPlugin"];
      uint64_t v43 = sub_1001BA55C();
      CFStringRef format = (CFStringRef)sub_100802D54(v43, @"LOCATION_CLIENT_PERMISSION_PLAIN_WHEN_IN_USE_TITLE");
      CFAllocatorRef alloc = kCFAllocatorDefault;
      CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", format, &errorPtr, cf);
      uint64_t v44 = sub_1001BA55C();
      CFStringRef v45 = @"LOCATION_CLIENT_PERMISSION_WHENINUSE_BUTTON";
      if (v27) {
        CFStringRef v46 = @"LOCATION_CLIENT_PERMISSION_WHENINUSE_BUTTON";
      }
      else {
        CFStringRef v46 = @"LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON";
      }
      if (v27)
      {
        CFStringRef v45 = @"LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON";
        CFStringRef v47 = @"LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON";
      }
      else
      {
        CFStringRef v47 = @"LOCATION_CLIENT_PERMISSION_NEVER_BUTTON";
      }
      if (v28) {
        CFStringRef v48 = @"LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON";
      }
      else {
        CFStringRef v48 = v46;
      }
      if (v28) {
        CFStringRef v49 = @"LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON";
      }
      else {
        CFStringRef v49 = v45;
      }
      if (v28) {
        CFStringRef v50 = @"LOCATION_CLIENT_PERMISSION_NEVER_BUTTON";
      }
      else {
        CFStringRef v50 = v47;
      }
      CFTypeRef v132 = (CFTypeRef)sub_100802D54(v44, v48);
      uint64_t v51 = sub_1001BA55C();
      __int16 v40 = (const void *)sub_100802D54(v51, v49);
      uint64_t v52 = sub_1001BA55C();
      long long v53 = (const void *)sub_100802D54(v52, v50);
      __int16 v54 = (__CFBundle *)sub_1007B83B4(a1, (uint64_t)v9);
      if (v54)
      {
        __int16 v129 = sub_1007B847C(a1, v9, v54, 1u, 0, v127);
        CFRelease(v54);
        int v125 = 0;
        goto LABEL_114;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022C97E8);
      }
      __int16 v92 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v9;
        _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022C97E8);
        }
      }
      uint64_t v18 = qword_102419528;
      BOOL result = os_signpost_enabled((os_log_t)qword_102419528);
      if (result) {
        goto LABEL_222;
      }
      return result;
    case 2u:
    case 4u:
    case 5u:
      uint64_t v31 = sub_1001BA55C();
      CFStringRef v32 = @"LOCATION_CLIENT_PERMISSION_WHENINUSE_BUTTON";
      if (!v27) {
        CFStringRef v32 = @"LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON";
      }
      if (v28) {
        CFStringRef v33 = @"LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON";
      }
      else {
        CFStringRef v33 = v32;
      }
      uint64_t v29 = sub_100802D54(v31, v33);
      uint64_t v34 = sub_1001BA55C();
      [(NSMutableDictionary *)v134 setObject:(id)sub_100802D54(v34, @"PRECISE_ON_PILL_BUTTON_TITLE") forKeyedSubscript:@"PreciseButtonOnTitle"];
      uint64_t v35 = sub_1001BA55C();
      [(NSMutableDictionary *)v134 setObject:(id)sub_100802D54(v35, @"PRECISE_OFF_PILL_BUTTON_TITLE") forKeyedSubscript:@"PreciseButtonOffTitle"];
      uint64_t v36 = sub_1001BA55C();
      [(NSMutableDictionary *)v134 setObject:(id)sub_100802D54(v36, @"ONLY_HERE_PILL_BUTTON_TITLE") forKeyedSubscript:@"OnlyHereTitle"];
      int v30 = 1;
      goto LABEL_50;
    case 6u:
      double v126 = +[NSString stringWithUTF8String:"com.apple.corelocation.CoreLocationRepromptAlwaysAuthPromptPlugin"];
      id v63 = [[-[NSMutableDictionary objectForKey:](v134, "objectForKey:", @"LocationCount") unsignedLongValue];
      long long v64 = (void *)sub_1001BA55C();
      if (v63)
      {
        CFStringRef format = sub_100802D58(v64, @"LOCATION_CLIENT_PERMISSION_REPROMPT_OTHER");
        CFAllocatorRef alloc = kCFAllocatorDefault;
        CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%lu %@", format, &errorPtr, v63, cf);
      }
      else
      {
        CFStringRef format = sub_100802D58(v64, @"LOCATION_REPROMPT_ALWAYS_TITLE");
        CFAllocatorRef alloc = kCFAllocatorDefault;
        CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", format, &errorPtr, cf);
      }
      uint64_t v96 = sub_1001BA55C();
      CFTypeRef v132 = (CFTypeRef)sub_100802D54(v96, @"LOCATION_CLIENT_PERMISSION_WHENINUSE_ONLY_BUTTON");
      uint64_t v97 = sub_1001BA55C();
      __int16 v40 = (const void *)sub_100802D54(v97, @"LOCATION_CLIENT_PERMISSION_KEEP_ALWAYS_BUTTON");
      __int16 v129 = sub_1007B7FA0(a1, (uint64_t)v9);
      goto LABEL_124;
    case 7u:
    case 8u:
      uint64_t v55 = sub_1001BA55C();
      CFStringRef format = (CFStringRef)sub_100802D54(v55, @"LOCATION_CLIENT_PERMISSION_UPGRADE_WHENINUSE_ALWAYS");
      CFAllocatorRef alloc = kCFAllocatorDefault;
      CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", format, &errorPtr, cf);
      uint64_t v56 = sub_1001BA55C();
      CFTypeRef v132 = (CFTypeRef)sub_100802D54(v56, @"LOCATION_CLIENT_PERMISSION_KEEP_WHENINUSE_BUTTON");
      uint64_t v57 = sub_1001BA55C();
      __int16 v40 = (const void *)sub_100802D54(v57, @"LOCATION_CLIENT_PERMISSION_ALWAYS_BUTTON");
      __int16 v129 = sub_1007B7FA0(a1, (uint64_t)v9);
      goto LABEL_94;
    case 9u:
      double v126 = +[NSString stringWithUTF8String:"com.apple.corelocation.CoreLocationTemporaryPreciseAuthPromptPlugin"];
      uint64_t v65 = sub_1001BA55C();
      CFStringRef format = (CFStringRef)sub_100802D54(v65, @"LOCATION_CLIENT_PERMISSION_TEMPORARY_PRECISE_TITLE");
      CFAllocatorRef alloc = kCFAllocatorDefault;
      CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", format, &errorPtr, cf);
      uint64_t v66 = sub_1001BA55C();
      CFTypeRef v132 = (CFTypeRef)sub_100802D54(v66, @"LOCATION_CLIENT_PERMISSION_TEMPORARY_PRECISE_YES_BUTTON");
      uint64_t v67 = sub_1001BA55C();
      __int16 v40 = (const void *)sub_100802D54(v67, @"LOCATION_CLIENT_PERMISSION_TEMPORARY_PRECISE_NO_BUTTON");
      __int16 v129 = (__CFString *)[[-[NSMutableDictionary objectForKey:](v134, "objectForKey:", @"UsageDescription") copy];
      if (v129 || !v127) {
        goto LABEL_92;
      }
      int v68 = (__CFBundle *)sub_1007B83B4(a1, (uint64_t)v9);
      int v69 = v68;
      if (v68)
      {
        CFAutorelease(v68);
        id v70 = [(__CFDictionary *)CFBundleGetInfoDictionary(v69) objectForKeyedSubscript:@"NSLocationTemporaryUsageDescriptionDictionary"];
        if (!v70)
        {
          sub_1007B8A50((unsigned int *)a4, (uint64_t)+[NSString stringWithFormat:@"Info.plist is missing the %@ key", @"NSLocationTemporaryUsageDescriptionDictionary"]);
          return 0;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          sub_1007B8A50((unsigned int *)a4, (uint64_t)+[NSString stringWithFormat:@"Info.plist value for %@ key is not a dictionary", @"NSLocationTemporaryUsageDescriptionDictionary"]);
          return 0;
        }
        id v71 = [v70 objectForKeyedSubscript:v127];
        if (!v71)
        {
          sub_1007B8A50((unsigned int *)a4, @"The purposeKey provided isn't present in the app's Info.plist dictionary of temporary usage descriptions");
          return 0;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          sub_1007B8A50((unsigned int *)a4, @"The purposeKey provided names an entry in Info.plist which isn't a string");
          return 0;
        }
        uint64_t v72 = sub_1001BA55C();
        __int16 v129 = (__CFString *)sub_100041DC4(v72, v69, v127, 1);
        if (!v129) {
          __int16 v129 = (__CFString *)[v71 copy];
        }
LABEL_92:
        [(NSMutableDictionary *)v134 setObject:@"UserLocationIsPrecise" forKeyedSubscript:@"UserLocationIsPrecise"];
LABEL_124:
        long long v53 = 0;
        int v125 = 0;
        goto LABEL_125;
      }
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022C97E8);
      }
      uint64_t v124 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v9;
        _os_log_impl((void *)&_mh_execute_header, v124, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022C97E8);
        }
      }
      uint64_t v18 = qword_102419528;
      BOOL result = os_signpost_enabled((os_log_t)qword_102419528);
      if (!result) {
        return result;
      }
      goto LABEL_222;
    case 0xBu:
LABEL_50:
      int v125 = v30;
      CFTypeRef v132 = (CFTypeRef)v29;
      double v126 = +[NSString stringWithUTF8String:"com.apple.corelocation.CoreLocationVanillaWhenInUseAuthPromptPlugin"];
      uint64_t v37 = sub_1001BA55C();
      CFStringRef format = (CFStringRef)sub_100802D54(v37, @"LOCATION_CLIENT_PERMISSION_WHENINUSE");
      CFAllocatorRef alloc = kCFAllocatorDefault;
      CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", format, &errorPtr, cf);
      if (![*(id *)(a1 + 136) BOOLForKey:@"IsAppClip" atKeyPath:v9 defaultValue:0])
      {
        uint64_t v58 = sub_1001BA55C();
        if (v28)
        {
          uint64_t v59 = sub_100802D54(v58, @"LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON");
        }
        else
        {
          if (v27)
          {
            __int16 v40 = (const void *)sub_100802D54(v58, @"LOCATION_CLIENT_PERMISSION_ONETIME_BUTTON");
            CFStringRef v42 = @"LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON";
            goto LABEL_112;
          }
          uint64_t v59 = sub_100802D54(v58, @"LOCATION_CLIENT_PERMISSION_WHENINUSE_BUTTON");
        }
        __int16 v40 = (const void *)v59;
        goto LABEL_111;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      NSErrorUserInfoKey v38 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v9;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Client is #appclip\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      uint64_t v39 = sub_1001BA55C();
      __int16 v40 = (const void *)sub_100802D54(v39, @"LOCATION_CLIENT_PERMISSION_WHENINUSE_UNTIL_TOMORROW_BUTTON");
      char v41 = v28 | v27;
      if (v28) {
        CFStringRef v42 = @"LOCATION_CLIENT_PERMISSION_NEVER_BUTTON";
      }
      else {
        CFStringRef v42 = @"LOCATION_CLIENT_PERMISSION_NOT_THIS_TIME_BUTTON";
      }
      if ((v41 & 1) == 0) {
LABEL_111:
      }
        CFStringRef v42 = @"LOCATION_CLIENT_PERMISSION_NEVER_BUTTON";
LABEL_112:
      uint64_t v93 = sub_1001BA55C();
      long long v53 = (const void *)sub_100802D54(v93, v42);
      char v94 = (__CFBundle *)sub_1007B83B4(a1, (uint64_t)v9);
      if (!v94)
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022C97E8);
        }
        int v95 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v9;
          _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022C97E8);
          }
        }
        uint64_t v18 = qword_102419528;
        BOOL result = os_signpost_enabled((os_log_t)qword_102419528);
        if (!result) {
          return result;
        }
LABEL_222:
        *(_DWORD *)std::string buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v9;
        unsigned int v20 = "#AuthPrompt couldn't get bundle for client";
        char v21 = "{\"msg%{public}.0s\":\"#AuthPrompt couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}";
        goto LABEL_28;
      }
      __int16 v129 = sub_1007B847C(a1, v9, v94, 1u, 0, v127);
      CFRelease(v94);
LABEL_114:
      *(unsigned char *)(a4 + 4) = v28;
LABEL_125:
      CFTypeRef v62 = v132;
      CFStringRef v60 = value;
      if (errorPtr)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        __int16 v98 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          id v99 = [[-[__CFError localizedDescription](errorPtr, "localizedDescription") UTF8String];
          *(_DWORD *)std::string buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v9;
          __int16 v140 = 2082;
          id v141 = v99;
          _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Error, couldn't create prompt for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        __int16 v100 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          id v101 = [[-[__CFError localizedDescription](errorPtr, "localizedDescription") UTF8String];
          *(_DWORD *)std::string buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v9;
          __int16 v140 = 2082;
          id v141 = v101;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v100, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Error, couldn't create prompt for client due to error returned by CFStringCreateStringWithValidatedFormat.", "{\"msg%{public}.0s\":\"#Error, couldn't create prompt for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        }

        return 0;
      }
      unsigned int v128 = 32;
      if (v129)
      {
        char v102 = 0;
        goto LABEL_149;
      }
      long long v61 = v40;
LABEL_139:
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v40 = v61;
      CFTypeRef v132 = v62;
      CFStringRef value = v60;
      uint64_t v103 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v9;
        __int16 v140 = 1026;
        LODWORD(v141) = v15;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, unable to copy purpose string from client\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public}d}", buf, 0x22u);
      }
      if ((objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](v134, "objectForKeyedSubscript:", @"isAutoPrompting"), "BOOLValue") & 1) == 0)
      {
        __int16 v129 = 0;
        CFAllocatorRef alloc = kCFAllocatorDefault;
        char v102 = 1;
LABEL_149:
        Mutable = CFDictionaryCreateMutable(alloc, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        CFDictionarySetValue(Mutable, SBUserNotificationPendInSetupIfNotAllowedKey, kCFBooleanTrue);
        if (!*(unsigned char *)(a1 + 232)) {
          CFDictionarySetValue(Mutable, SBUserNotificationHideOnClonedDisplay, kCFBooleanTrue);
        }
        if (value)
        {
          CFDictionarySetValue(Mutable, kCFUserNotificationAlertHeaderKey, value);
          CFRelease(value);
        }
        if (format) {
          CFRelease(format);
        }
        if (v132)
        {
          CFDictionarySetValue(Mutable, kCFUserNotificationAlternateButtonTitleKey, v132);
          CFRelease(v132);
        }
        if (v40)
        {
          CFDictionarySetValue(Mutable, kCFUserNotificationOtherButtonTitleKey, v40);
          CFRelease(v40);
        }
        if (v53)
        {
          CFDictionarySetValue(Mutable, kCFUserNotificationDefaultButtonTitleKey, v53);
          CFRelease(v53);
        }
        if (v15 <= 0x10)
        {
          if (((1 << v15) & 0x1EEBF) == 0)
          {
            CFDictionarySetValue(Mutable, SBUserNotificationAllowedApplicationsKey, &off_102397AE8);
LABEL_182:
            CFDictionarySetValue(Mutable, SBUserNotificationDefaultButtonTag, +[NSNumber numberWithInt:v128]);
            CFDictionarySetValue(Mutable, SBUserNotificationButtonLayoutDirectionKey, +[NSNumber numberWithInt:1]);
            if ((v125 & _os_feature_enabled_impl()) == 1) {
              [(NSMutableDictionary *)v134 setObject:&__kCFBooleanTrue forKeyedSubscript:@"CLAuthPromptShowOnlyHerePill"];
            }
            if (v126 && sub_1004BDFF8())
            {
              id v110 = [NSExtensionItem extensionItemForDict:[objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v9) dictionary] withName:cf withPayload:v134];
              *(void *)error = 0;
              id v138 = v110;
              uint64_t v111 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSArray arrayWithObjects:&v138 count:1], 1, error);
              if (*(void *)error)
              {
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022C9768);
                }
                __int16 v112 = qword_102419538;
                if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)std::string buf = 68289283;
                  *(_DWORD *)&uint8_t buf[4] = 0;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&buf[10] = "";
                  *(_WORD *)&buf[18] = 2113;
                  *(void *)&buf[20] = *(void *)error;
                  _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Failed archiving extension item\", \"error\":%{private, location:escape_only}@}", buf, 0x1Cu);
                }
              }
              else
              {
                int v113 = v111;
                CFDictionarySetValue(Mutable, SBUserNotificationExtensionIdentifierKey, v126);
                CFDictionarySetValue(Mutable, SBUserNotificationExtensionItemsKey, v113);
              }
            }
            if ((v102 & 1) == 0)
            {
              CFDictionarySetValue(Mutable, kCFUserNotificationAlertMessageKey, v129);
              CFRelease(v129);
            }
            CFRelease(cf);
            [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
            double v115 = v114;
            error[0] = 0;
            unsigned int v116 = *(_DWORD *)a4;
            int v117 = CFUserNotificationCreate(alloc, 0.0, 0x20uLL, error, Mutable);
            CFRelease(Mutable);
            if (v117)
            {
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              __int16 v118 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)std::string buf = 68289538;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(void *)&buf[20] = v9;
                __int16 v140 = 1026;
                LODWORD(v141) = v116;
                _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CUN Created client user notification for client\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public}d}", buf, 0x22u);
              }
              RunLoopSource = CFUserNotificationCreateRunLoopSource(alloc, v117, (CFUserNotificationCallBack)sub_1007DBD74, 0);
              if (RunLoopSource)
              {
                sub_1007DBDFC(a4, v117, v115);
                CFRelease(v117);
                __int16 v120 = (__CFRunLoop *)sub_1001C2710();
                CFRunLoopAddSource(v120, RunLoopSource, kCFRunLoopCommonModes);
                CFRelease(RunLoopSource);
                operator new();
              }
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              double v122 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)std::string buf = 68289282;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(void *)&buf[20] = v9;
                _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CUN Could not create runloop source for  CFUserNotification\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022C9768);
                }
              }
              double v123 = qword_102419538;
              if (os_signpost_enabled((os_log_t)qword_102419538))
              {
                *(_DWORD *)std::string buf = 68289282;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = "";
                *(_WORD *)&buf[18] = 2114;
                *(void *)&buf[20] = v9;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v123, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CUN Could not create runloop source for  CFUserNotification", "{\"msg%{public}.0s\":\"#CUN Could not create runloop source for  CFUserNotification\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
              }
              CFRelease(v117);
              return 0;
            }
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            uint64_t v121 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)std::string buf = 68289282;
              *(_DWORD *)&uint8_t buf[4] = 0;
              *(_WORD *)&uint8_t buf[8] = 2082;
              *(void *)&buf[10] = "";
              *(_WORD *)&buf[18] = 2114;
              *(void *)&buf[20] = v9;
              _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CUN Could not create CFUserNotification\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            uint64_t v18 = qword_102419538;
            if (!os_signpost_enabled((os_log_t)qword_102419538)) {
              return 0;
            }
            *(_DWORD *)std::string buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(void *)&buf[20] = v9;
            unsigned int v20 = "#CUN Could not create CFUserNotification";
            char v21 = "{\"msg%{public}.0s\":\"#CUN Could not create CFUserNotification\", \"Client\":%{public, location:escape_only}@}";
            goto LABEL_28;
          }
          sub_100103240();
          if (!sub_1001B7C64()
            || (objc_msgSend(objc_msgSend(v9, "clientAnchor"), "isEqualToString:", @"com.apple.weather") & 1) == 0)
          {
            if (a3)
            {
              if (sub_10079F3F0(v9))
              {
                CFDictionarySetValue(Mutable, kCFUserNotificationAlertTopMostKey, &__kCFBooleanTrue);
                CFDictionarySetValue(Mutable, SBUserNotificationForcesModalAlertAppearance, &__kCFBooleanTrue);
                CFDictionarySetValue(Mutable, SBUserNotificationDisplayActionButtonOnLockScreen, &__kCFBooleanTrue);
              }
            }
            else if ([v9 bundleId] {
                   && (objc_msgSend(-[NSMutableDictionary objectForKeyedSubscript:](v134, "objectForKeyedSubscript:", @"IsWebClip"), "BOOLValue") & 1) == 0)
            }
            {
              id v142 = [v9 bundleId];
              uint64_t v107 = +[NSArray arrayWithObjects:&v142 count:1];
              CFDictionarySetValue(Mutable, SBUserNotificationAllowedApplicationsKey, v107);
            }
          }
        }
        if (v15 - 13 <= 1)
        {
          CFDictionarySetValue(Mutable, SBUserNotificationAllowInSetupKey, &__kCFBooleanTrue);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v108 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_INFO, "#CUN LocationButton prompt allowed during buddy-setup", buf, 2u);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            LOWORD(error[0]) = 0;
            uint64_t v109 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::createAndPostClientUserNotification(CLClientKeyPath *, NSString *, CLClientManager_Type::AuthorizationRequest, NSDictionary *)", "%s\n", v109);
            if (v109 != buf) {
              free(v109);
            }
          }
        }
        goto LABEL_182;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v104 = qword_102419538;
      BOOL v105 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
      BOOL result = 0;
      if (v105)
      {
        *(_DWORD *)std::string buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v9;
        __int16 v140 = 1026;
        LODWORD(v141) = v15;
        _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning #autoPrompt fail to createAndPostClientUserNotification - purpose(UsageDescription) is NULL\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public}d}", buf, 0x22u);
        return 0;
      }
      return result;
    case 0xCu:
      uint64_t v73 = sub_1001BA55C();
      CFStringRef format = (CFStringRef)sub_100802D54(v73, @"LOCATION_CLIENT_PERMISSION_INCIDENTAL_USE_MODE_TITLE");
      CFAllocatorRef alloc = kCFAllocatorDefault;
      CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", format, &errorPtr, cf);
      uint64_t v74 = sub_1001BA55C();
      CFTypeRef v132 = (CFTypeRef)sub_100802D54(v74, @"LOCATION_CLIENT_PERMISSION_INCIDENTAL_USE_MODE_YES_BUTTON");
      uint64_t v75 = sub_1001BA55C();
      __int16 v40 = (const void *)sub_100802D54(v75, @"LOCATION_CLIENT_PERMISSION_INCIDENTAL_USE_MODE_NO_BUTTON");
      uint64_t v76 = sub_1001BA55C();
      __int16 v129 = (__CFString *)sub_100802D54(v76, @"LOCATION_CLIENT_PERMISSION_INCIDENTAL_USE_MODE_PURPOSE");
LABEL_94:
      double v126 = 0;
      goto LABEL_124;
    case 0xDu:
      uint64_t v77 = sub_1001BA55C();
      CFStringRef format = (CFStringRef)sub_100802D54(v77, @"LOCATION_CLIENT_PERMISSION_PLAIN_TITLE_FOR_LOCATION_BUTTONS");
      uint64_t v78 = sub_1001BA55C();
      __int16 v129 = (__CFString *)sub_100802D54(v78, @"LOCATION_CLIENT_PERMISSION_EXPLANATION_FOR_LOCATION_BUTTONS");
      uint64_t v79 = sub_1001BA55C();
      CFTypeRef v132 = (CFTypeRef)sub_100802D54(v79, @"LOCATION_CLIENT_PERMISSION_ALLOW_LOCATION_BUTTONS");
      uint64_t v80 = sub_1001BA55C();
      __int16 v40 = (const void *)sub_100802D54(v80, @"LOCATION_CLIENT_PERMISSION_DENY_LOCATION_BUTTONS");
      double v126 = +[NSString stringWithUTF8String:"com.apple.corelocation.CoreLocationTemporaryPreciseAuthPromptPlugin"];
      CFAllocatorRef alloc = kCFAllocatorDefault;
      CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", format, &errorPtr, cf);
      goto LABEL_124;
    case 0xEu:
      uint64_t v81 = sub_1001BA55C();
      CFStringRef format = (CFStringRef)sub_100802D54(v81, @"LOCATION_CLIENT_PERMISSION_TITLE_FOR_LOCATION_BUTTONS");
      uint64_t v82 = sub_1001BA55C();
      __int16 v129 = (__CFString *)sub_100802D54(v82, @"LOCATION_CLIENT_PERMISSION_EXPLANATION_FOR_LOCATION_BUTTONS");
      uint64_t v83 = sub_1001BA55C();
      CFTypeRef v132 = (CFTypeRef)sub_100802D54(v83, @"LOCATION_CLIENT_PERMISSION_ALLOW_LOCATION_BUTTONS");
      uint64_t v84 = sub_1001BA55C();
      __int16 v40 = (const void *)sub_100802D54(v84, @"LOCATION_CLIENT_PERMISSION_DENY_LOCATION_BUTTONS");
      uint64_t v85 = sub_1001BA55C();
      [(NSMutableDictionary *)v134 setObject:(id)sub_100802D54(v85, @"PRECISE_ON_PILL_BUTTON_TITLE") forKeyedSubscript:@"PreciseButtonOnTitle"];
      uint64_t v86 = sub_1001BA55C();
      [(NSMutableDictionary *)v134 setObject:(id)sub_100802D54(v86, @"PRECISE_OFF_PILL_BUTTON_TITLE") forKeyedSubscript:@"PreciseButtonOffTitle"];
      double v126 = +[NSString stringWithUTF8String:"com.apple.corelocation.CoreLocationVanillaWhenInUseAuthPromptPlugin"];
      CFAllocatorRef alloc = kCFAllocatorDefault;
      CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", format, &errorPtr, cf);
      goto LABEL_124;
    case 0x10u:
      double v126 = +[NSString stringWithUTF8String:"com.apple.corelocation.CoreLocationRepromptAlwaysAuthPromptPlugin"];
      uint64_t v87 = (void *)sub_1001BA55C();
      CFStringRef format = sub_100802D58(v87, @"LOCATION_CLIENT_TRANSCRIPT_TITLE");
      CFAllocatorRef alloc = kCFAllocatorDefault;
      CFStringRef value = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", format, &errorPtr, cf);
      __int16 v129 = (__CFString *)[[-[NSMutableDictionary objectForKey:](v134, "objectForKey:", @"UsageDescription") copy];
      if (!v129)
      {
        __int16 v88 = (void *)sub_1001BA55C();
        CFStringRef v89 = sub_100802D58(v88, @"LOCATION_CLIENT_TRANSCRIPT_USAGE_DESCRIPTION");
        __int16 v129 = (__CFString *)CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", v89, &errorPtr, cf);
        CFRelease(v89);
      }
      uint64_t v90 = sub_1001BA55C();
      CFTypeRef v132 = (CFTypeRef)sub_100802D54(v90, @"LOCATION_CLIENT_TRANSCRIPT_YES_BUTTON");
      uint64_t v91 = sub_1001BA55C();
      __int16 v40 = (const void *)sub_100802D54(v91, @"LOCATION_CLIENT_TRANSCRIPT_NO_BUTTON");
      goto LABEL_124;
    default:
      CFStringRef v60 = 0;
      CFStringRef format = 0;
      double v126 = 0;
      long long v61 = 0;
      CFTypeRef v62 = 0;
      long long v53 = 0;
      unsigned int v128 = 0;
      int v125 = 0;
      goto LABEL_139;
  }
}

void sub_1007A9510(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

void sub_1007A9598(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v3 isValidCKP])
  {
    id v4 = (void *)(a1 + 976);
    if (v3)
    {
      [v3 cppClientKey];
    }
    else
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v13 = 0;
    }
    unsigned int v5 = sub_100103284(v4, (unsigned __int8 *)__p);
    id v6 = v5;
    if (SHIBYTE(v13) < 0)
    {
      operator delete(__p[0]);
      if (!v6) {
        return;
      }
    }
    else if (!v5)
    {
      return;
    }
    for (uint64_t i = (void *)*((void *)v6 + 7); i; uint64_t i = (void *)*i)
    {
      uint64_t v8 = (std::__shared_weak_count *)i[4];
      if (v8)
      {
        id v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = i[3];
          if (v11) {
            sub_100703080(v11);
          }
          sub_1000DB0A0(v10);
        }
      }
    }
    sub_10017FA3C(v4, v6, (uint64_t)__p);
    sub_1007E2624((uint64_t)__p, 0);
  }
}

void sub_1007A9680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007A96AC(uint64_t a1)
{
  for (uint64_t i = *(void **)(a1 + 992); i; uint64_t i = (void *)*i)
  {
    for (uint64_t j = (void *)i[7]; j; uint64_t j = (void *)*j)
    {
      id v4 = (std::__shared_weak_count *)j[4];
      if (v4)
      {
        unsigned int v5 = std::__shared_weak_count::lock(v4);
        if (v5)
        {
          id v6 = v5;
          uint64_t v7 = j[3];
          if (v7) {
            sub_100703080(v7);
          }
          sub_1000DB0A0(v6);
        }
      }
    }
  }

  sub_1007E44B8(a1 + 976);
}

void sub_1007A9730(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

void sub_1007A9744(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    id v4 = a2;
  }
  else {
    id v4 = (uint64_t *)*a2;
  }
  if (![[[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)) isValidCKP]]) return; {
  unsigned int v5 = (void *)(a1 + 976);
  }
  id v6 = sub_100103284(v5, (unsigned __int8 *)a2);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = v6 + 40;
  id v9 = sub_1007E4554((void *)v6 + 5, a2 + 6);
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = (std::__shared_weak_count *)v9[4];
    if (v11)
    {
      uint64_t v12 = v9[3];
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = std::__shared_weak_count::lock(v11);
      if (v13)
      {
        uint64_t v14 = v13;
        if (v12)
        {
          sub_1000DB0A0(v13);
          std::__shared_weak_count::__release_weak(v11);
          return;
        }
        sub_1007E4668(v8, v10);
        sub_1000DB0A0(v14);
      }
      else
      {
        sub_1007E4668(v8, v10);
      }
      std::__shared_weak_count::__release_weak(v11);
    }
    else
    {
      sub_1007E4668(v8, v9);
    }
  }
  if (!*((void *)v7 + 8))
  {
    sub_10017FA3C(v5, v7, (uint64_t)v15);
    sub_1007E2624((uint64_t)v15, 0);
  }
}

uint64_t sub_1007A98C0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7 = sub_1007A69A8(a3);
  double Current = CFAbsoluteTimeGetCurrent();

  return sub_1001005FC(a1, a2, v7, a4, 0, 0, Current);
}

uint64_t sub_1007A9928(uint64_t a1, uint64_t a2, int a3)
{
  double Current = CFAbsoluteTimeGetCurrent();

  return sub_1001005FC(a1, a2, 6, a3, 0, 0, Current);
}

void sub_1007A9984(id *a1, uint64_t a2, double *a3)
{
  id v6 = [a1[17] registeredKeyPathForClientIdentifier:a2];
  if ([v6 isValidCKP])
  {
    [a1[17] setDouble:@"TimeMissing" forKey:v6 atKeyPath:*a3];
    uint64_t v7 = sub_100122128((uint64_t)a1, (uint64_t)v6, &xmmword_101D82EB8);
    sub_1001490E0(a1, (uint64_t)v6, (uint64_t)v7);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2114;
      uint64_t v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"How can an app be missing if we don't have an entry for it?\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    id v9 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v10 = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2114;
      uint64_t v15 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "How can an app be missing if we don't have an entry for it?", "{\"msg%{public}.0s\":\"How can an app be missing if we don't have an entry for it?\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v10, 0x1Cu);
    }
  }
}

id sub_1007A9BA8(id *a1, uint64_t a2)
{
  id v3 = [a1[17] registeredKeyPathForClientIdentifier:a2];
  id result = [v3 isValidCKP];
  if (result)
  {
    [a1[17] removeValueForKey:@"TimeMissing" atKeyPath:v3];
    unsigned int v5 = sub_100122128((uint64_t)a1, (uint64_t)v3, &xmmword_101D82EB8);
    return (id)sub_1001490E0(a1, (uint64_t)v3, (uint64_t)v5);
  }
  return result;
}

id sub_1007A9C34(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  id result = [v3 isValidCKP];
  if (result)
  {
    unsigned int v5 = *(void **)(a1 + 136);
    return [v5 intForKey:@"PromptedSettings" atKeyPath:v3 defaultValue:0];
  }
  return result;
}

id sub_1007A9CA0(uint64_t a1, uint64_t a2)
{
  id v3 = sub_100103E24(a1, a2);
  [*(id *)(a1 + 136) setInt:[*(id *)(a1 + 136) intForKey:@"PromptedSettings" defaultValue:0]+ 1 forKey:@"PromptedSettings" atKeyPath:v3];
  [*(id *)(a1 + 136) persist];
  id v4 = *(void **)(a1 + 136);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100124700;
  unsigned __int8 v6[3] = &unk_1022C8FD8;
  void v6[4] = v3;
  void v6[5] = a1;
  return [v4 iterateIdentitiesRelatedToKeyPath:v3 withBlock:v6];
}

void sub_1007A9D70(uint64_t a1, void *a2, int a3, uint64_t *a4)
{
  if (![a2 isValidCKP]) {
    return;
  }
  if ([*(id *)(a1 + 136) isKeyPathRegisteredSystemService:a2])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      long long __p = (void *)68289282;
      *(_WORD *)char v21 = 2082;
      *(void *)&v21[2] = "";
      *(_WORD *)&v21[10] = 2114;
      *(void *)&v21[12] = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ClearClient removing client entry for System Service\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    id v9 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      long long __p = (void *)68289282;
      *(_WORD *)char v21 = 2082;
      *(void *)&v21[2] = "";
      *(_WORD *)&v21[10] = 2114;
      *(void *)&v21[12] = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ClearClient removing client entry for System Service", "{\"msg%{public}.0s\":\"#ClearClient removing client entry for System Service\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    }
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  int v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    long long __p = (void *)68289282;
    *(_WORD *)char v21 = 2082;
    *(void *)&v21[2] = "";
    *(_WORD *)&v21[10] = 2114;
    *(void *)&v21[12] = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient removing client entry\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
  }
  sub_1007A9598(a1, (uint64_t)a2);
  if (a3)
  {
    int v11 = (const char *)[a2 legacyClientKey];
    __int16 v12 = v11 ? (char *)v11 : "";
    sub_100134750(&__p, v12);
    sub_1007AA250(a1, (uint64_t *)&__p, a4);
    if ((v21[15] & 0x80000000) != 0) {
      operator delete(__p);
    }
  }
  uint64_t v13 = (char *)[[objc_msgSend(a2, "clientAnchor") UTF8String];
  if (v13) {
    __int16 v14 = v13;
  }
  else {
    __int16 v14 = "";
  }
  sub_100134750(&__p, v14);
  uint64_t v15 = sub_100103284(qword_10247E060, (unsigned __int8 *)&__p);
  uint64_t v16 = v15;
  if ((v21[15] & 0x80000000) != 0)
  {
    operator delete(__p);
    if (v16) {
      goto LABEL_25;
    }
LABEL_30:
    id v19 = [*(id *)(a1 + 416) objectForKey:a2];
    if (v19)
    {
      sub_1007AA4A4(a1, a2, v19, 1);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      BOOL v17 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_40;
      }
      long long __p = (void *)68289282;
      *(_WORD *)char v21 = 2082;
      *(void *)&v21[2] = "";
      *(_WORD *)&v21[10] = 2114;
      *(void *)&v21[12] = a2;
      uint64_t v18 = "{\"msg%{public}.0s\":\"#ClearClient Completely removed attribution for client\", \"Client\":%{public, locati"
            "on:escape_only}@}";
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      BOOL v17 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_40;
      }
      long long __p = (void *)68289282;
      *(_WORD *)char v21 = 2082;
      *(void *)&v21[2] = "";
      *(_WORD *)&v21[10] = 2114;
      *(void *)&v21[12] = a2;
      uint64_t v18 = "{\"msg%{public}.0s\":\"#ClearClient client is not attributed. No special deattribution needed\", \"Client\":"
            "%{public, location:escape_only}@}";
    }
    goto LABEL_39;
  }
  if (!v15) {
    goto LABEL_30;
  }
LABEL_25:
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  BOOL v17 = qword_102419538;
  if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_40;
  }
  long long __p = (void *)68289282;
  *(_WORD *)char v21 = 2082;
  *(void *)&v21[2] = "";
  *(_WORD *)&v21[10] = 2114;
  *(void *)&v21[12] = a2;
  uint64_t v18 = "{\"msg%{public}.0s\":\"#ClearClient attribution unavailable client\", \"Client\":%{public, location:escape_only}@}";
LABEL_39:
  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&__p, 0x1Cu);
LABEL_40:
  [*(id *)(a1 + 136) removeDictionaryAtKeyPath:a2, __p, *(_OWORD *)v21, *(void *)&v21[16]];
  [*(id *)(a1 + 136) persist];
  sub_100134750(&__p, "");
  sub_1001341F0(a1, a2, (uint64_t)&__p);
  if ((v21[15] & 0x80000000) != 0) {
    operator delete(__p);
  }
}

void sub_1007AA228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007AA250(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_100103240();
  if (sub_100106424())
  {
    id v6 = objc_alloc_init(CLCompanionSyncAuthObject);
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = (uint64_t *)*a2;
    }
    [(CLCompanionSyncAuthObject *)v6 setClientKey:+[NSString stringWithUTF8String:v7]];
    [(CLCompanionSyncAuthObject *)v6 setOperationType:3];
    uint64_t v8 = *(void **)(a1 + 1536);
    if (*((char *)a3 + 23) >= 0) {
      id v9 = a3;
    }
    else {
      id v9 = (uint64_t *)*a3;
    }
    [v8 deleteObject:v6 withSyncSessionReason:[NSString stringWithUTF8String:v9]];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      if (*((char *)a2 + 23) >= 0) {
        int v11 = a2;
      }
      else {
        int v11 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string buf = 136446210;
      __int16 v14 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#authsync deleteObject: %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::synchronizeAuthorizationChangeTypeDelete(const std::string &, const std::string &)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
}

id sub_1007AA4A4(uint64_t a1, void *a2, void *a3, char a4)
{
  [objc_msgSend(a3, "attributionTimer") nextFireDelay];
  double v9 = v8;
  [objc_msgSend(a3, "attributionTimer") invalidate];
  if (v9 < 1.79769313e308) {
    sub_1007AD488(a1, a2, (uint64_t)[a3 attributionIdentifier], a4);
  }
  int v10 = *(void **)(a1 + 416);

  return [v10 removeObjectForKey:a2];
}

id sub_1007AA540(id *a1)
{
  sub_1007A96AC((uint64_t)a1);
  [a1[17] clear];
  [a1[135] removeAllObjects];
  [a1[134] setClientsAuthorizationMap:[a1[135] copy]];
  [0 isValidCKP];
  id v2 = a1[134];
  id v3 = [0 legacyClientKey];

  return [v2 setPersistentStoreDictionary:0 forClient:v3];
}

id sub_1007AA5C0(uint64_t a1)
{
  [*(id *)(a1 + 1080) removeAllObjects];
  [0 isValidCKP];
  [*(id *)(a1 + 1072) setPersistentStoreDictionary:0 forClient:[0 legacyClientKey]];
  id v2 = *(void **)(a1 + 136);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1007AA668;
  unsigned __int8 v4[3] = &unk_1022C8D28;
  v4[4] = a1;
  return [v2 iterateAllAnchorKeyPathsWithBlock:v4];
}

uint64_t sub_1007AA668(uint64_t a1, uint64_t a2)
{
  id v3 = *(id **)(a1 + 32);
  id v4 = sub_100122128((uint64_t)v3, a2, &xmmword_101D82EB8);

  return sub_1001490E0(v3, a2, (uint64_t)v4);
}

BOOL sub_1007AA6B8(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (([a2 isValidCKP] & 1) == 0 && !objc_msgSend(*(id *)(a1 + 1096), "count"))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v18 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#IncidentalPrompt skip prompting. No client for incidental prompt", buf, 2u);
    }
    BOOL result = sub_10013D1A0(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v32 = 0;
      id v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::considerPromptingForIncidentalUse(CLClientKeyPath *)", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
      return 0;
    }
    return result;
  }
  if (([v2 isValidCKP] & 1) == 0) {
    id v2 = [*(id *)(a1 + 1096) lastObject];
  }
  id v4 = sub_100103E24(a1, (uint64_t)v2);
  unsigned int v5 = sub_1001C2654([*(id *)(a1 + 136) readonlyStoreAtKeyPath:v4]);
  if (v5 != 1)
  {
    unsigned int v6 = v5;
    if (v5)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v12 = qword_102419538;
      BOOL result = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO);
      if (!result) {
        return result;
      }
      *(_DWORD *)std::string buf = 68289538;
      int v34 = 0;
      __int16 v35 = 2082;
      uint64_t v36 = "";
      __int16 v37 = 2114;
      id v38 = v4;
      __int16 v39 = 2050;
      uint64_t v40 = v6;
      int v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. IncidentalUseMode should be UnDetermined\", \"Clien"
            "t\":%{public, location:escape_only}@, \"IncidentalUseMode\":%{public, location:CLClientIncidentalUseMode}lld}";
      uint64_t v13 = v12;
      os_log_type_t v14 = OS_LOG_TYPE_INFO;
      uint32_t v15 = 38;
      goto LABEL_52;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v34 = 0;
      __int16 v35 = 2082;
      uint64_t v36 = "";
      __int16 v37 = 2114;
      id v38 = v4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#IncidentalPrompt Ineligible marking as NotDetermined\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1007ACDB0(a1, 1, (uint64_t)v4);
  }
  double v8 = sub_100068950(a1, (uint64_t)v4, &xmmword_101D82EB8);
  if ([(CLClientManagerAuthorizationContext *)v8 registrationResult] != 1)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v16 = qword_102419538;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO);
    if (!result) {
      return result;
    }
    unsigned int v17 = [(CLClientManagerAuthorizationContext *)v8 registrationResult];
    *(_DWORD *)std::string buf = 68289538;
    int v34 = 0;
    __int16 v35 = 2082;
    uint64_t v36 = "";
    __int16 v37 = 2114;
    id v38 = v4;
    __int16 v39 = 1026;
    LODWORD(v40) = v17;
    int v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. Registration Result should be WIU\", \"Client\":%{pub"
          "lic, location:escape_only}@, \"RegistrationResult\":%{public}d}";
    uint64_t v13 = v16;
    os_log_type_t v14 = OS_LOG_TYPE_INFO;
    uint32_t v15 = 34;
    goto LABEL_52;
  }
  if ([*(id *)(a1 + 120) locationRestricted])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v9 = qword_102419538;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_DWORD *)std::string buf = 68289282;
      int v34 = 0;
      __int16 v35 = 2082;
      uint64_t v36 = "";
      __int16 v37 = 2114;
      id v38 = v4;
      int v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. Restrictions enabled\", \"Client\":%{public, locati"
            "on:escape_only}@}";
LABEL_51:
      uint64_t v13 = v9;
      os_log_type_t v14 = OS_LOG_TYPE_INFO;
      uint32_t v15 = 28;
      goto LABEL_52;
    }
    return result;
  }
  if (([*(id *)(a1 + 1096) containsObject:v4] & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unsigned int v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v34 = 0;
      __int16 v35 = 2082;
      uint64_t v36 = "";
      __int16 v37 = 2114;
      id v38 = v4;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#IncidentalPrompt client queued\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    [*(id *)(a1 + 1096) addObject:v4];
  }
  if (*(unsigned char *)(a1 + 1060))
  {
    if (!*(void *)(a1 + 272))
    {
      sub_100134750(__p, "");
      sub_1007E1DB0((uint64_t)v31, 12, (uint64_t)v4, 0, (long long *)__p);
      BOOL v26 = sub_1007A7700(a1, (uint64_t)v4, 0, (uint64_t)v31, 0);
      sub_1007E1E64((uint64_t)v31);
      if (v30 < 0) {
        operator delete(__p[0]);
      }
      if (v26) {
        return 1;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v27 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 68289282;
        int v34 = 0;
        __int16 v35 = 2082;
        uint64_t v36 = "";
        __int16 v37 = 2114;
        id v38 = v4;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Could not post #IncidentalUsePrompt\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      unsigned int v28 = qword_102419538;
      BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
      if (result)
      {
        *(_DWORD *)std::string buf = 68289282;
        int v34 = 0;
        __int16 v35 = 2082;
        uint64_t v36 = "";
        __int16 v37 = 2114;
        id v38 = v4;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning Could not post #IncidentalUsePrompt", "{\"msg%{public}.0s\":\"#Warning Could not post #IncidentalUsePrompt\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        return 0;
      }
      return result;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v21 = qword_102419538;
    BOOL v22 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v22) {
      return result;
    }
    CFURLRef v23 = *(unsigned int **)(a1 + 272);
    uint64_t v24 = *((void *)v23 + 1);
    uint64_t v25 = *v23;
    *(_DWORD *)std::string buf = 68289794;
    int v34 = 0;
    __int16 v35 = 2082;
    uint64_t v36 = "";
    __int16 v37 = 2114;
    id v38 = v4;
    __int16 v39 = 2114;
    uint64_t v40 = v24;
    __int16 v41 = 2050;
    uint64_t v42 = v25;
    int v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. InflightPromptAuthorizationRequest found.\", \"Client"
          "\":%{public, location:escape_only}@, \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestTyp"
          "e\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
    uint64_t v13 = v21;
    os_log_type_t v14 = OS_LOG_TYPE_DEFAULT;
    uint32_t v15 = 48;
LABEL_52:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v11, buf, v15);
    return 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v9 = qword_102419538;
  BOOL result = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO);
  if (result)
  {
    *(_DWORD *)std::string buf = 68289282;
    int v34 = 0;
    __int16 v35 = 2082;
    uint64_t v36 = "";
    __int16 v37 = 2114;
    id v38 = v4;
    int v11 = "{\"msg%{public}.0s\":\"#IncidentalPrompt skip prompting. Not at homescreen.\", \"Client\":%{public, location:escape_only}@}";
    goto LABEL_51;
  }
  return result;
}

void sub_1007AAF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1007AAF38(uint64_t a1, uint64_t *a2)
{
  id v4 = a2;
  if (*((char *)a2 + 23) < 0) {
    id v4 = (uint64_t *)*a2;
  }
  unsigned int v5 = +[NSString stringWithUTF8String:v4];
  id v6 = [*(id *)(a1 + 584) objectForKey:v5];
  if (v6)
  {
    [v6 doubleValue];
    double Current = v7;
  }
  else
  {
    double Current = CFAbsoluteTimeGetCurrent();
    [*(id *)(a1 + 584) setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:")](NSNumber, "numberWithDouble:") forKey:v5];
  }
  id v9 = +[NSMutableDictionary dictionary];
  int v11 = (uint64_t *)qword_10247E088;
  for (uint64_t i = qword_10247E090; v11 != (uint64_t *)i; ++v11)
  {
    uint64_t v12 = *v11;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    sub_100101464(v12, &v19, &v18);
    uint64_t v13 = v19;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    os_log_type_t v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint32_t v15 = a2;
      if (*((char *)a2 + 23) < 0) {
        uint32_t v15 = (uint64_t *)*a2;
      }
      *(_DWORD *)std::string buf = 68289794;
      int v21 = 0;
      __int16 v22 = 2082;
      CFURLRef v23 = "";
      __int16 v24 = 2082;
      uint64_t v25 = v15;
      __int16 v26 = 2050;
      uint64_t v27 = v12;
      __int16 v28 = 1026;
      int v29 = 1;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#usesync munged starttime for watch\", \"client\":%{public, location:escape_only}s, \"service\":%{public, location:CLClientServiceType}lld, \"isReceivingLocation\":%{public}hhd}", buf, 0x2Cu);
    }
    [v9 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current)] forKey:v13];
  }
  sub_1007AB170();
  return [*(id *)(a1 + 1528) client:v17 didChangeUsageData:v9];
}

uint64_t sub_1007AB170()
{
  uint64_t v0 = sub_1000A6958();
  sub_1004D258C(v0);
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_1000A6958() + 944);

  return v1();
}

uint64_t sub_1007AB1EC(uint64_t a1, uint64_t a2)
{
  id v3 = [sub_100103E24(a1, a2) legacyClientKey];
  sub_100134750(__p, (char *)[v3 UTF8String]);
  sub_1007AB2CC(a1, (uint64_t *)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  [*(id *)(a1 + 584) removeObjectForKey:v3];
  sub_100134750(v5, (char *)[v3 UTF8String]);
  sub_1001052CC((void *)(a1 + 616), (unsigned __int8 *)v5);
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return sub_1007AB170();
}

void sub_1007AB29C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007AB2CC(uint64_t a1, uint64_t *a2)
{
  id v3 = a2;
  if (*((char *)a2 + 23) < 0) {
    id v3 = (uint64_t *)*a2;
  }
  id v4 = +[NSString stringWithUTF8String:v3];
  id v5 = +[NSMutableDictionary dictionary];
  char v8 = (uint64_t *)qword_10247E088;
  uint64_t v7 = qword_10247E090;
  if (qword_10247E088 != qword_10247E090)
  {
    *(void *)&long long v6 = 68289026;
    long long v19 = v6;
    do
    {
      uint64_t v9 = *v8;
      int v21 = 0;
      uint64_t v22 = 0;
      sub_100101464(v9, &v22, &v21);
      int v11 = v21;
      uint64_t v10 = v22;
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v12 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v13 = a2;
        if (*((char *)a2 + 23) < 0) {
          uint64_t v13 = (uint64_t *)*a2;
        }
        *(_DWORD *)std::string buf = 68289538;
        int v24 = 0;
        __int16 v25 = 2082;
        __int16 v26 = "";
        __int16 v27 = 2082;
        __int16 v28 = v13;
        __int16 v29 = 2050;
        uint64_t v30 = v9;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#usesync send stoptime due to expiry of temp assertion\", \"client\":%{public, location:escape_only}s, \"service\":%{public, location:CLClientServiceType}lld}", buf, 0x26u);
      }
      double Current = CFAbsoluteTimeGetCurrent();
      id v15 = [*(id *)(a1 + 584) objectForKey:v4];
      if (v15)
      {
        [v15 doubleValue];
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v17 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = v19;
          int v24 = 0;
          __int16 v25 = 2082;
          __int16 v26 = "";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync #Warning Missing start time but stop location usage sync is called\"}", buf, 0x12u);
        }
        double v16 = Current + -10.0;
      }
      [v5 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v16, v19) forKey:v10];
      [v5 setObject:[NSNumber numberWithDouble:Current] forKey:v11];
      ++v8;
    }
    while (v8 != (uint64_t *)v7);
  }
  return [*(id *)(a1 + 1528) client:v4 didChangeUsageData:v5];
}

void sub_1007AB578(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if ([a2 subIdentityType] == 122)
  {
    unsigned int v5 = [*(id *)(v4 + 136) intForKey:@"TemporaryAuthorization" atKeyPath:a2 defaultValue:0];
    if (v5)
    {
      if ((v5 & 5) != 0)
      {
        sub_100134750(__p, "ClientRemoved");
        sub_1007A9D70(v4, a2, 1, (uint64_t *)__p);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        long long v6 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 68289282;
          int v11 = 0;
          __int16 v12 = 2082;
          uint64_t v13 = "";
          __int16 v14 = 2114;
          id v15 = a2;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth  tmp authorized zone deleted\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v7 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 68289282;
          int v11 = 0;
          __int16 v12 = 2082;
          uint64_t v13 = "";
          __int16 v14 = 2114;
          id v15 = a2;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth key deleted for zone\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        [*(id *)(v4 + 136) removeValueForKey:@"TemporaryAuthorization" atKeyPath:a2];
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    }
  }
}

void sub_1007AB7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007AB7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v5 isValidCKP])
  {
    id v6 = [*(id *)(a1 + 136) intForKey:@"IncidentalUseMode" atKeyPath:v5 defaultValue:0];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#IncidentalUseMode able to get client's incidental use mode", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      char v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::getIncidentalUseMode(CLClientKeyPath *, void (^)(CLClientIncidentalUseMode))", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  else
  {
    id v6 = 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  char v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v13 = (int)v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#IncidentalUseMode  returning with value:%d", buf, 8u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::getIncidentalUseMode(CLClientKeyPath *, void (^)(CLClientIncidentalUseMode))", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  return (*(uint64_t (**)(uint64_t, id))(a3 + 16))(a3, v6);
}

void sub_1007ABAF8(uint64_t a1, int a2, void *a3)
{
  if (objc_opt_class())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v16) = 2082;
      *(void *)((char *)&v16 + 2) = "";
      WORD5(v16) = 1026;
      HIDWORD(v16) = a2;
      LOWORD(v17) = 2114;
      *(void *)((char *)&v17 + 2) = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Reported\", \"utility\":%{public}d, \"date\":%{public, location:escape_only}@}", buf, 0x22u);
    }
    CFDateRef v7 = (const __CFDate *)[a3 dateByAddingTimeInterval:-600.0];
    id v8 = [objc_alloc((Class)NSDateInterval) initWithStartDate:v7 endDate:a3];
    double AbsoluteTime = CFDateGetAbsoluteTime(v7);
    if (AbsoluteTime < CFAbsoluteTimeGetCurrent())
    {
      id v10 = [objc_alloc((Class)RTStoredLocationEnumerationOptions) initWithDateInterval:v8 horizontalAccuracy:0 batchSize:0 boundingBoxLocation:14 type:0.0];
      [v10 setSmoothingRequired:1];
      *(void *)std::string buf = 0;
      *(void *)&long long v16 = buf;
      *((void *)&v16 + 1) = 0x3052000000;
      *(void *)&long long v17 = sub_1001779D4;
      *((void *)&v17 + 1) = sub_100177370;
      uint64_t v18 = 0;
      id v11 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLRoutineMonitor" forClient:@"CLClientManager"];
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      _OWORD v13[2] = sub_1007ABDF8;
      v13[3] = &unk_1022C8EE8;
      v13[5] = buf;
      v13[6] = a1;
      v13[4] = v8;
      int v14 = a2;
      [v11 enumerateStoredLocationsWithOptions:v10 withReply:v13];
      _Block_object_dispose(buf, 8);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v16) = 2082;
      *(void *)((char *)&v16 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007ABDD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1007ABDF8(uint64_t a1, void *a2, uint64_t a3, int a4)
{
  if (a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v29 = 68289282;
      int v30 = 0;
      __int16 v31 = 2082;
      __int16 v32 = "";
      __int16 v33 = 2114;
      *(void *)int v34 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Got error fetching locations from CoreRoutine\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v29, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    id v6 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v29 = 68289282;
      int v30 = 0;
      __int16 v31 = 2082;
      __int16 v32 = "";
      __int16 v33 = 2114;
      *(void *)int v34 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LocationUtilityEvent Got error fetching locations from CoreRoutine", "{\"msg%{public}.0s\":\"#LocationUtilityEvent Got error fetching locations from CoreRoutine\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&v29, 0x1Cu);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 48);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = 68289538;
      int v30 = 0;
      __int16 v31 = 2082;
      __int16 v32 = "";
      __int16 v33 = 1026;
      *(_DWORD *)int v34 = a4;
      *(_WORD *)&void v34[4] = 1026;
      *(_DWORD *)&v34[6] = [a2 count];
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Reply back from CoreRoutine\", \"enumerationCompleted\":%{public}d, \"count\":%{public}d}", (uint8_t *)&v29, 0x1Eu);
    }
    if (a4)
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
      {
        [objc_msgSend(*(id *)(v10 + 560), "startDate") timeIntervalSinceReferenceDate];
        double v13 = v12;
        [objc_msgSend(*(id *)(v10 + 560), "endDate") timeIntervalSinceReferenceDate];
        double v15 = v14;
        double v16 = v13 + (v14 - v13) * 0.5;
        [objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "timestamp") timeIntervalSinceReferenceDate];
        if (v17 <= v16)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v25 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            id v26 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) timestamp];
            int v29 = 68290050;
            __int16 v31 = 2082;
            int v30 = 0;
            __int16 v32 = "";
            __int16 v33 = 2114;
            *(void *)int v34 = v26;
            *(_WORD *)&uint8_t v34[8] = 2050;
            double v35 = v16;
            __int16 v36 = 2050;
            double v37 = v13;
            __int16 v38 = 2050;
            double v39 = v15;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Location timestamp is earlier than or equal to last interval in archive. Will not persist.\", \"lastLocation.timestamp\":%{public, location:escape_only}@, \"lastLocationUtilityEventIntervalInArchiveMidPoint\":\"%{public}.6f\", \"lastLocationUtilityEventIntervalInArchiveStartTime\":\"%{public}.6f\", \"lastLocationUtilityEventIntervalInArchiveEndTime\":\"%{public}.6f\"}", (uint8_t *)&v29, 0x3Au);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          __int16 v27 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            id v28 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) timestamp];
            int v29 = 68290050;
            __int16 v31 = 2082;
            int v30 = 0;
            __int16 v32 = "";
            __int16 v33 = 2114;
            *(void *)int v34 = v28;
            *(_WORD *)&uint8_t v34[8] = 2050;
            double v35 = v16;
            __int16 v36 = 2050;
            double v37 = v13;
            __int16 v38 = 2050;
            double v39 = v15;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v27, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#LocationUtilityEvent Location timestamp is earlier than or equal to last interval in archive. Will not persist.", "{\"msg%{public}.0s\":\"#LocationUtilityEvent Location timestamp is earlier than or equal to last interval in archive. Will not persist.\", \"lastLocation.timestamp\":%{public, location:escape_only}@, \"lastLocationUtilityEventIntervalInArchiveMidPoint\":\"%{public}.6f\", \"lastLocationUtilityEventIntervalInArchiveStartTime\":\"%{public}.6f\", \"lastLocationUtilityEventIntervalInArchiveEndTime\":\"%{public}.6f\"}", (uint8_t *)&v29, 0x3Au);
          }
        }
        else
        {
          *(double *)&CFDateRef v18 = COERCE_DOUBLE([[objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "timestamp") dateByAddingTimeInterval:-0.5];
          *(double *)&CFDateRef v19 = COERCE_DOUBLE([[objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), "timestamp") dateByAddingTimeInterval:0.5];
          id v20 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
          [v20 setStartTime:CFDateGetAbsoluteTime(v18)];
          [v20 setStopTime:CFDateGetAbsoluteTime(v19)];
          [v20 setScore:*(unsigned int *)(a1 + 56)];
          [*(id *)(v10 + 552) writeSecondaryObject:v20 toField:1];
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          int v21 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            id v22 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) timestamp];
            int v29 = 68289794;
            int v30 = 0;
            __int16 v31 = 2082;
            __int16 v32 = "";
            __int16 v33 = 2114;
            *(void *)int v34 = v22;
            *(_WORD *)&uint8_t v34[8] = 2114;
            double v35 = *(double *)&v18;
            __int16 v36 = 2114;
            double v37 = *(double *)&v19;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Persist utility event interval\", \"lastLocation.timestamp\":%{public, location:escape_only}@, \"locationUtilityEventIntervalStart\":%{public, location:escape_only}@, \"locationUtilityEventIntervalEnd\":%{public, location:escape_only}@}", (uint8_t *)&v29, 0x30u);
          }

          *(void *)(v10 + 560) = [objc_alloc((Class)NSDateInterval) initWithStartDate:v18 endDate:v19];
        }
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        CFURLRef v23 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = *(void *)(a1 + 32);
          int v29 = 68289282;
          int v30 = 0;
          __int16 v31 = 2082;
          __int16 v32 = "";
          __int16 v33 = 2114;
          *(void *)int v34 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent No locations in interval.\", \"interval\":%{public, location:escape_only}@}", (uint8_t *)&v29, 0x1Cu);
        }
      }
    }
    else if ([a2 count])
    {

      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [a2 lastObject];
    }
  }
}

id sub_1007AC460(uint64_t a1, uint64_t a2)
{
  if (objc_opt_class())
  {
    obuint64_t j = +[NSMutableArray array];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v23 = 0;
      __int16 v24 = 2082;
      __int16 v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Retrieval request\", \"lookBackWindowStartDate\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (a2)
    {
      id v5 = *(void **)(a1 + 552);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472;
      v21[2] = sub_1007AC998;
      v21[3] = &unk_1022C8F10;
      v21[4] = a2;
      v21[5] = obj;
      sub_1007AC7C4(v5, 0, (uint64_t)v21);
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v6 = [obj countByEnumeratingWithState:&v17 objects:v32 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v18;
        do
        {
          char v9 = 0;
          do
          {
            if (*(void *)v18 != v8) {
              objc_enumerationMutation(obj);
            }
            uint64_t v10 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v9);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            id v11 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              id v12 = [v10 startDate];
              id v13 = [v10 endDate];
              *(_DWORD *)std::string buf = 68289794;
              int v23 = 0;
              __int16 v24 = 2082;
              __int16 v25 = "";
              __int16 v26 = 2114;
              uint64_t v27 = a2;
              __int16 v28 = 2114;
              id v29 = v12;
              __int16 v30 = 2114;
              id v31 = v13;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Retrieved interval\", \"lookBackWindowStartDate\":%{public, location:escape_only}@, \"intervalStartDate\":%{public, location:escape_only}@, \"intervalEndDate\":%{public, location:escape_only}@}", buf, 0x30u);
            }
            char v9 = (char *)v9 + 1;
          }
          while (v7 != v9);
          id v7 = [obj countByEnumeratingWithState:&v17 objects:v32 count:16];
        }
        while (v7);
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      int v23 = 0;
      __int16 v24 = 2082;
      __int16 v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
    return 0;
  }
  return obj;
}

void sub_1007AC7C4(void *a1, uint64_t a2, uint64_t a3)
{
  if (objc_opt_class())
  {
    *(void *)std::string buf = 0;
    *(void *)&long long v10 = buf;
    *((void *)&v10 + 1) = 0x2020000000;
    uint64_t v11 = 0;
    v8[0] = 0;
    v8[1] = v8;
    _DWORD v8[2] = 0x2020000000;
    void v8[3] = 0;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1007BC5FC;
    v7[3] = &unk_1022C9168;
    void v7[6] = buf;
    v7[7] = v8;
    v7[4] = a2;
    void v7[5] = a3;
    [a1 iterateSecondaryData:[a1 mappedSecondaryData] forField:1 withHandler:v7];
    _Block_object_dispose(v8, 8);
    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v10) = 2082;
      *(void *)((char *)&v10 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007AC974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1007AC998(uint64_t a1, double a2, double a3)
{
  [*(id *)(a1 + 32) timeIntervalSinceReferenceDate];
  if ((a3 - a2) * 0.5 + a2 >= v6)
  {
    [*(id *)(a1 + 40) addObject:[objc_alloc((Class)NSDateInterval) initWithStartDate:objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a2) endDate:objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", a3)]];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      v9[0] = 68289794;
      v9[1] = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      uint64_t v13 = v8;
      __int16 v14 = 1026;
      int v15 = (int)a2;
      __int16 v16 = 1026;
      int v17 = (int)a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationUtilityEvent Retrieved interval prior\", \"lookBackWindowStartDate\":%{public, location:escape_only}@, \"startTime\":%{public}d, \"endTime\":%{public}d}", (uint8_t *)v9, 0x28u);
    }
  }
}

void sub_1007ACB34(uint64_t a1, uint64_t a2)
{
  id v3 = sub_100103E24(a1, a2);
  if (![*(id *)(a1 + 120) locationRestricted])
  {
LABEL_6:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    goto LABEL_8;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)char v9 = 2082;
    *(void *)&_DWORD v9[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning location services settings are frozen by restrictions - resetting\"}", buf, 0x12u);
    goto LABEL_6;
  }
LABEL_8:
  id v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)char v9 = 2082;
    *(void *)&_DWORD v9[2] = "";
    *(_WORD *)&v9[10] = 2114;
    *(void *)&v9[12] = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"resetting and disconnecting client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  sub_1007A5470(a1, (uint64_t)v3);
  if (v3)
  {
    [v3 cppClientKey];
  }
  else
  {
    *(void *)std::string buf = 0;
    *(void *)char v9 = 0;
    *(void *)&v9[8] = 0;
  }
  sub_1001055EC((uint64_t **)(a1 + 728), (const void **)buf);
  if ((v9[15] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v3) {
      goto LABEL_15;
    }
  }
  else if (v3)
  {
LABEL_15:
    [v3 cppClientKey];
    goto LABEL_18;
  }
  *(void *)std::string buf = 0;
  *(void *)char v9 = 0;
  *(void *)&v9[8] = 0;
LABEL_18:
  sub_1001055EC((uint64_t **)(a1 + 752), (const void **)buf);
  if ((v9[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_100134750(__p, "ClientRemoved");
  sub_1007A9D70(a1, v3, 1, (uint64_t *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1007ACD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007ACDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:];
  id v7 = [v6 isValidCKP];
  if (v7)
  {
    [*(id *)(a1 + 136) setInt:a2 forKey:@"IncidentalUseMode" atKeyPath:v6];
    [*(id *)(a1 + 136) persist];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#IncidentalUseMode able to SET client's incidental use mode:%d", buf, 8u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::setIncidentalUseMode(CLClientIncidentalUseMode, CLClientKeyPath *)", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    sub_100134750(buf, "");
    sub_1001341F0(a1, v6, (uint64_t)buf);
    if (SBYTE3(v17) < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    char v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2114;
      uint64_t v17 = a3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to find client to update #IncidentalUseMode\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    __int16 v10 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v14 = 2082;
      int v15 = "";
      __int16 v16 = 2114;
      uint64_t v17 = a3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to find client to update #IncidentalUseMode", "{\"msg%{public}.0s\":\"Unable to find client to update #IncidentalUseMode\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  return v7;
}

void sub_1007AD110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007AD134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = sub_100103D58(a1, a3);
  [*(id *)(a1 + 136) setInt:a2 forKey:@"LocationButtonUseMode" atKeyPath:v5];
  [*(id *)(a1 + 136) persist];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    v8[0] = 68289538;
    v8[1] = 0;
    __int16 v9 = 2082;
    __int16 v10 = "";
    __int16 v11 = 2114;
    id v12 = v5;
    __int16 v13 = 2050;
    uint64_t v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#LocationButtonUseMode updated\", \"Client\":%{public, location:escape_only}@, \"Mode\":%{public, location:CLClientLocationButtonUseMode}lld}", (uint8_t *)v8, 0x26u);
  }
  return 1;
}

void sub_1007AD294(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(unsigned char *)(a1 + 72))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      int v9 = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = v4;
      __int16 v15 = 2114;
      uint64_t v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution Attribution timer fired\", \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x26u);
    }
  }
  sub_1007AD488(v2, *(void **)(a1 + 48), (uint64_t)[*(id *)(a1 + 40) attributionIdentifier], 0);
  if (![*(id *)(a1 + 40) totalAttributionCount])
  {
    [objc_msgSend(*(id *)(a1 + 40), "attributionTimer") invalidate];
    [*(id *)(a1 + 56) removeObjectForKey:*(void *)(a1 + 32)];
    if (*(unsigned char *)(a1 + 72))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v6 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v7 = *(void *)(a1 + 32);
        uint64_t v8 = *(void *)(a1 + 40);
        int v9 = 68289538;
        int v10 = 0;
        __int16 v11 = 2082;
        id v12 = "";
        __int16 v13 = 2114;
        uint64_t v14 = v7;
        __int16 v15 = 2114;
        uint64_t v16 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution No subscriptions remaining; removing AttributionRecord for cli"
          "ent\", \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}",
          (uint8_t *)&v9,
          0x26u);
      }
    }
  }
}

void sub_1007AD488(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  sub_100103240();
  if (sub_1001037EC())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      int v9 = [+[NSUUID UUID] UUIDString];
      *(_DWORD *)std::string buf = 68289794;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2114;
      long long v19 = a2;
      __int16 v20 = 2114;
      uint64_t v21 = a3;
      __int16 v22 = 2082;
      int v23 = [(NSString *)v9 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#SystemStatus Publishing receiving location interval end\", \"Client\":%{public, location:escape_only}@, \"AttributionIdentifier\":%{public, location:escape_only}@, \"MessageUUID\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    else
    {
      int v9 = 0;
    }
    int v10 = *(void **)(a1 + 400);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_1007AE18C;
    void v12[3] = &unk_1022C8F88;
    v12[4] = a3;
    char v13 = a4;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    int v11[2] = sub_1007AE4A0;
    void v11[3] = &unk_10229FED8;
    v11[4] = v9;
    [v10 updateVolatileData:v12 completion:v11];
    if (_os_feature_enabled_impl()) {
      sub_100138C88(a1, *(void **)(a1 + 544), (void *)(a1 + 504), a2);
    }
  }
}

void sub_1007AD690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100103240();
  if (!sub_1001037EC()) {
    return;
  }
  id v6 = sub_100103E24(a1, a2);
  id v7 = [v6 clientAnchor];
  if (!v7) {
    goto LABEL_5;
  }
  sub_100134750(&__p, (char *)[v7 UTF8String]);
  uint64_t v8 = sub_100103284(qword_10247E060, (unsigned __int8 *)&__p);
  int v9 = v8;
  if ((v28[3] & 0x80000000) != 0)
  {
    operator delete(__p);
    if (v9)
    {
LABEL_5:
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v10 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
      {
        long long __p = (void *)68289282;
        __int16 v25 = 2082;
        __int16 v26 = "";
        __int16 v27 = 2114;
        *(void *)__int16 v28 = v6;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting deattribution for attribution-unavailable client. Aborting deattribution\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      __int16 v11 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        long long __p = (void *)68289282;
        __int16 v25 = 2082;
        __int16 v26 = "";
        __int16 v27 = 2114;
        *(void *)__int16 v28 = v6;
        id v12 = "#SystemStatusAttribution attempting deattribution for attribution-unavailable client. Aborting deattribution";
        char v13 = "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting deattribution for attribution-unavailable clien"
              "t. Aborting deattribution\", \"Client\":%{public, location:escape_only}@}";
LABEL_12:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v12, v13, (uint8_t *)&__p, 0x1Cu);
        return;
      }
      return;
    }
  }
  else if (v8)
  {
    goto LABEL_5;
  }
  id v14 = [objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v6) dictionary];
  uint64_t v15 = sub_100104034(v6, v14);
  if (!v15) {
    return;
  }
  if (v15 != 2) {
    goto LABEL_23;
  }
  id v6 = (id)qword_10247E100;
  if (*(void *)(a1 + 424) != 1)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      long long __p = (void *)68289282;
      __int16 v25 = 2082;
      __int16 v26 = "";
      __int16 v27 = 2114;
      *(void *)__int16 v28 = v6;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution deattribution for System Service; defaulting to Traffic for reco"
        "rd keeping\", \"SystemService\":%{public, location:escape_only}@}",
        (uint8_t *)&__p,
        0x1Cu);
    }
LABEL_23:
    int v16 = 1;
    goto LABEL_24;
  }
  int v16 = 0;
LABEL_24:
  id v18 = [*(id *)(a1 + 416) objectForKey:v6];
  long long v19 = v18;
  if (v18)
  {
    [v18 decrementAttributionCountForServiceType:a3];
    if (v16)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v20 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        long long __p = (void *)68289794;
        __int16 v25 = 2082;
        __int16 v26 = "";
        __int16 v27 = 1026;
        *(_DWORD *)__int16 v28 = a3;
        *(_WORD *)&v28[4] = 2114;
        *(void *)&v28[6] = v6;
        __int16 v29 = 2114;
        __int16 v30 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution #AttributionRecord servicetype count decremented\", \"ServiceType\":%{public}d, \"Client\":%{public, location:escape_only}@, \"Record\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x2Cu);
      }
      if ([v19 totalAttributionCount]) {
        return;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v21 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        long long __p = (void *)68289282;
        __int16 v25 = 2082;
        __int16 v26 = "";
        __int16 v27 = 2114;
        *(void *)__int16 v28 = v6;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatusAttribution No subscriptions remaining after deattribution; removing Attri"
          "butionRecord for client and ending system status attribution\", \"Client\":%{public, location:escape_only}@}",
          (uint8_t *)&__p,
          0x1Cu);
      }
    }
    else if ([v19 totalAttributionCount])
    {
      return;
    }
    char v23 = (sub_100101E40(v14) & 6) == 0 || !sub_1001193DC(a1, (uint64_t)v6);
    sub_1007AA4A4(a1, v6, v19, v23);
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v22 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
  {
    long long __p = (void *)68289282;
    __int16 v25 = 2082;
    __int16 v26 = "";
    __int16 v27 = 2114;
    *(void *)__int16 v28 = v6;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting to deattribute unattributed client. Aborting deattribution.\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  __int16 v11 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    long long __p = (void *)68289282;
    __int16 v25 = 2082;
    __int16 v26 = "";
    __int16 v27 = 2114;
    *(void *)__int16 v28 = v6;
    id v12 = "#SystemStatusAttribution attempting to deattribute unattributed client. Aborting deattribution.";
    char v13 = "{\"msg%{public}.0s\":\"#SystemStatusAttribution attempting to deattribute unattributed client. Aborting deattr"
          "ibution.\", \"Client\":%{public, location:escape_only}@}";
    goto LABEL_12;
  }
}

void sub_1007ADC40(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    id v3 = [*(id *)(a1 + 32) UTF8String];
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    id v6 = "";
    __int16 v7 = 2082;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatus Received and processed interval beginning message\", \"MessageUUID\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
}

void sub_1007ADD2C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  if (objc_opt_class())
  {
    memset(&__p, 0, sizeof(__p));
    if ([a4 isValidCKP])
    {
      id v8 = sub_100103E24(a1, (uint64_t)a4);
      if (v8) {
        [v8 cppClientKey];
      }
      else {
        memset(buf, 0, 24);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = *(std::string *)buf;
    }
    else
    {
      std::string::assign(&__p, (const std::string::value_type *)[@"com.apple.locationd.all-location-clients-stop" UTF8String]);
    }
    *(void *)std::string buf = &__p;
    int v10 = sub_100338698(a3, (unsigned __int8 *)&__p, (uint64_t)&unk_101D0B290, (long long **)buf);
    if (*((double *)v10 + 5) == 0.0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v11 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 68289283;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2081;
        *(void *)&buf[20] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Updating location consumption info on start\", \"Client\":%{private, location:escape_only}s}", buf, 0x1Cu);
      }
      *((CFAbsoluteTime *)v10 + 5) = CFAbsoluteTimeGetCurrent();
      id v13 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        id v14 = &__p;
      }
      else {
        id v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      [v13 setClientKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14, __p.__r_.__value_.__r.__words[0], __p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2])];
      [v13 setStartTime:*((double *)v10 + 5)];
      [a2 writeSecondaryObject:v13 toField:1];
      if (a1 + 784 != sub_10012FFE0(a1 + 776, (const void **)&__p.__r_.__value_.__l.__data_))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v15 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          int v16 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Faulting for backtrace explaining usage score increment\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        uint64_t v17 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          id v18 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            id v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2082;
          *(void *)&buf[20] = v18;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Faulting for backtrace explaining usage score increment", "{\"msg%{public}.0s\":\"Faulting for backtrace explaining usage score increment\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007AE160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007AE18C(uint64_t a1, void *a2, void *a3)
{
  if (objc_msgSend(objc_msgSend(a2, "attributions"), "containsObject:", *(void *)(a1 + 32)))
  {
    [a2 removeAttribution:*(void *)(a1 + 32)];
    [a3 setUserInitiated:*(unsigned __int8 *)(a1 + 40)];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v14 = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SystemStatus removing attribution that doesn't exist!\", \"AttributionIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    id v8 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v14 = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatus removing attribution that doesn't exist!", "{\"msg%{public}.0s\":\"#SystemStatus removing attribution that doesn't exist!\", \"AttributionIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
    }
  }
  if (objc_msgSend(objc_msgSend(a2, "attributions"), "containsObject:", *(void *)(a1 + 32)))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v14 = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SystemStatus removed attribution but it still exists!\", \"AttributionIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    id v12 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 68289282;
      int v15 = 0;
      __int16 v16 = 2082;
      uint64_t v17 = "";
      __int16 v18 = 2114;
      uint64_t v19 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatus removed attribution but it still exists!", "{\"msg%{public}.0s\":\"#SystemStatus removed attribution but it still exists!\", \"AttributionIdentifier\":%{public, location:escape_only}@}", (uint8_t *)&v14, 0x1Cu);
    }
  }
}

void sub_1007AE4A0(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    id v3 = [*(id *)(a1 + 32) UTF8String];
    v4[0] = 68289282;
    v4[1] = 0;
    __int16 v5 = 2082;
    id v6 = "";
    __int16 v7 = 2082;
    id v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#SystemStatus Received and processed interval end message\", \"MessageUUID\":%{public, location:escape_only}s}", (uint8_t *)v4, 0x1Cu);
  }
}

BOOL sub_1007AE58C(uint64_t a1, uint64_t a2)
{
  if ([*(id *)(a1 + 120) locationRestricted])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v4 = qword_102419538;
    BOOL result = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO);
    if (result)
    {
      *(_DWORD *)std::string buf = 68289282;
      int v23 = 0;
      __int16 v24 = 2082;
      __int16 v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = a2;
      id v6 = "{\"msg%{public}.0s\":\"#LocationButtonFirstUsage skip prompting. Restrictions enabled\", \"Client\":%{public,"
           " location:escape_only}@}";
      __int16 v7 = v4;
      os_log_type_t v8 = OS_LOG_TYPE_INFO;
      uint32_t v9 = 28;
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, buf, v9);
      return 0;
    }
    return result;
  }
  if (!*(void *)(a1 + 272))
  {
    if ([objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", a2) boolForKey:@"DefaultAccuracyReduced" defaultValue:0])int v15 = 13; {
    else
    }
      int v15 = 14;
    sub_100134750(__p, "");
    sub_1007E1DB0((uint64_t)v21, v15, a2, 0, (long long *)__p);
    BOOL v16 = sub_1007A7700(a1, a2, 0, (uint64_t)v21, 0);
    sub_1007E1E64((uint64_t)v21);
    if (v20 < 0)
    {
      operator delete(__p[0]);
      if (v16) {
        return 1;
      }
    }
    else if (v16)
    {
      return 1;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 68289282;
      int v23 = 0;
      __int16 v24 = 2082;
      __int16 v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Could not post #LocationButtonFirstUsage\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    __int16 v18 = qword_102419538;
    BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
    if (result)
    {
      *(_DWORD *)std::string buf = 68289282;
      int v23 = 0;
      __int16 v24 = 2082;
      __int16 v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning Could not post #LocationButtonFirstUsage", "{\"msg%{public}.0s\":\"#Warning Could not post #LocationButtonFirstUsage\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      return 0;
    }
    return result;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v10 = qword_102419538;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v11)
  {
    id v12 = *(unsigned int **)(a1 + 272);
    uint64_t v13 = *((void *)v12 + 1);
    uint64_t v14 = *v12;
    *(_DWORD *)std::string buf = 68289794;
    int v23 = 0;
    __int16 v24 = 2082;
    __int16 v25 = "";
    __int16 v26 = 2114;
    uint64_t v27 = a2;
    __int16 v28 = 2114;
    uint64_t v29 = v13;
    __int16 v30 = 2050;
    uint64_t v31 = v14;
    id v6 = "{\"msg%{public}.0s\":\"#LocationButtonFirstUsage skip prompting. InflightPromptAuthorizationRequest found.\", \""
         "Client\":%{public, location:escape_only}@, \"inflightClient\":%{public, location:escape_only}@, \"inflightReque"
         "stType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
    __int16 v7 = v10;
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
    uint32_t v9 = 48;
    goto LABEL_11;
  }
  return result;
}

void sub_1007AE91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1007AE950(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  id v10 = sub_100103D58(a1, a2);
  unsigned int v11 = [*(id *)(a1 + 136) intForKey:@"LocationButtonUseMode" atKeyPath:v10 defaultValue:0];
  unsigned int v12 = [(CLClientManagerAuthorizationContext *)sub_100068950(a1, (uint64_t)v10, &xmmword_101D82EB8) transientAwareRegistrationResult];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v13 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    std::string __p = (void *)68290562;
    __int16 v22 = 2082;
    int v23 = "";
    __int16 v24 = 2114;
    id v25 = v10;
    __int16 v26 = 1026;
    int v27 = a4;
    __int16 v28 = 1026;
    int v29 = a5;
    __int16 v30 = 1026;
    int v31 = a6;
    __int16 v32 = 2050;
    uint64_t v33 = v11;
    __int16 v34 = 1026;
    unsigned int v35 = v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth Explicit temporary authorization request received\", \"Client\":%{public, location:escape_only}@, \"Granted\":%{public}hhd, \"UsingLocationButton\":%{public}hhd, \"VoiceInteractionEnabled\":%{public}hhd, \"LocationButtonUseMode\":%{public, location:CLClientLocationButtonUseMode}lld, \"TransientAwareRegistrationResult\":%{public}d}", (uint8_t *)&__p, 0x3Eu);
  }
  if (a5 && (a4 & 1) == 0)
  {
    sub_101A6DBB8();
    __break(1u);
    goto LABEL_29;
  }
  if (!a5) {
    goto LABEL_16;
  }
  if (v12 != 4 && v12 != 2 || (a6 & 1) == 0 && v11)
  {
    if (v11 == 1)
    {
      if (qword_102419530 == -1)
      {
LABEL_14:
        uint64_t v14 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        std::string __p = (void *)68289282;
        __int16 v22 = 2082;
        int v23 = "";
        __int16 v24 = 2114;
        id v25 = v10;
        int v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth could not be granted , #LocationButtonUse denied\", \"Client\":%{pub"
              "lic, location:escape_only}@}";
        BOOL v16 = v14;
        uint32_t v17 = 28;
        goto LABEL_26;
      }
LABEL_29:
      dispatch_once(&qword_102419530, &stru_1022C9768);
      goto LABEL_14;
    }
LABEL_16:
    sub_1007AECF8(*(void **)(a1 + 136), (uint64_t)v10, 1, a4);
    __int16 v18 = *(_DWORD **)(a1 + 272);
    if (v18 && (*(_DWORD *)(a1 + 312) == 2 || *v18 == 1))
    {
      [*(id *)(a1 + 136) setInt:2 forKey:@"CorrectiveCompensationEnabled" atKeyPath:v10];
      [*(id *)(a1 + 136) persist];
    }
    sub_100134750(&__p, "");
    sub_1001341F0(a1, v10, (uint64_t)&__p);
    if (SBYTE3(v25) < 0) {
      operator delete(__p);
    }
    return;
  }
  BOOL v19 = sub_1007AE58C(a1, (uint64_t)v10);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v20 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    std::string __p = (void *)68289538;
    __int16 v22 = 2082;
    int v23 = "";
    __int16 v24 = 2114;
    id v25 = v10;
    __int16 v26 = 1026;
    int v27 = v19;
    int v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth #LocationButtonUse prompting status\", \"Client\":%{public, location:esc"
          "ape_only}@, \"PromptingStatus\":%{public}hhd}";
    BOOL v16 = v20;
    uint32_t v17 = 34;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&__p, v17);
  }
}

void sub_1007AECD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007AECF8(void *a1, uint64_t a2, int a3, int a4)
{
  if (![a1 registeredKeyPathForClientIdentifier:a2]) {
    [a1 registerClient:a2 fromAuthSync:0];
  }
  unsigned int v8 = [a1 intForKey:@"TemporaryAuthorization" atKeyPath:a2 defaultValue:0];
  if (a4)
  {
    uint64_t v9 = v8 | a3;
LABEL_6:
    return [a1 setInt:v9 forKey:@"TemporaryAuthorization" atKeyPath:a2];
  }
  uint64_t v9 = v8 & ~a3;
  if ((v8 & ~a3) != 0) {
    goto LABEL_6;
  }

  return [a1 removeValueForKey:@"TemporaryAuthorization" atKeyPath:a2];
}

void sub_1007AEDD0(uint64_t a1, void *a2, int a3)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    std::string __p = (void *)68289538;
    __int16 v11 = 2082;
    unsigned int v12 = "";
    __int16 v13 = 2114;
    uint64_t v14 = a2;
    __int16 v15 = 1026;
    int v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth-Precise\", \"Client\":%{public, location:escape_only}@, \"granted\":%{public}hhd}", (uint8_t *)&__p, 0x22u);
  }
  __int16 v7 = (void **)(a1 + 136);
  if (a3) {
    int v8 = 2;
  }
  else {
    int v8 = 8;
  }
  if (a3) {
    int v9 = 8;
  }
  else {
    int v9 = 2;
  }
  sub_1007AECF8(*(void **)(a1 + 136), (uint64_t)a2, v8, 1);
  sub_1007AECF8(*v7, (uint64_t)a2, v9, 0);
  [*v7 persist];
  sub_100134750(&__p, "");
  sub_1001341F0(a1, a2, (uint64_t)&__p);
  if (SBYTE3(v14) < 0) {
    operator delete(__p);
  }
}

void sub_1007AEF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007AEF6C(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  memset(&v87, 0, sizeof(v87));
  if (a4)
  {
    id v7 = sub_100103D58(a1, a4);
    id v8 = v7;
    if (v7) {
      [v7 cppClientKey];
    }
    else {
      memset(buf, 0, 24);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    std::string v87 = *(std::string *)buf;
  }
  else
  {
    std::string::assign(&v87, "*nobody*");
    id v8 = 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  int v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = "-";
    uint64_t v11 = *(void *)(a1 + 696);
    if (a2) {
      id v10 = "+";
    }
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v11;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLEEA Emergency clients %d %s 1", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v76 = "-";
    uint64_t v77 = *(void *)(a1 + 696);
    if (a2) {
      uint64_t v76 = "+";
    }
    int v88 = 67109378;
    LODWORD(v89[0]) = v77;
    WORD2(v89[0]) = 2080;
    *(void *)((char *)v89 + 6) = v76;
    uint64_t v78 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v78);
    if (v78 != buf) {
      free(v78);
    }
  }
  if (a2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unsigned int v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v13 = &v87;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v13 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#CLEEA adding emergency client,%{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v79 = &v87;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v79 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      int v88 = 136446210;
      v89[0] = v79;
      uint64_t v80 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v80);
      if (v80 != buf) {
        free(v80);
      }
    }
    uint64_t v14 = *(void *)(a1 + 696);
    BOOL v85 = v14 == 0;
    unsigned int v86 = a2;
    if (v14)
    {
      __int16 v15 = v8;
      int v16 = *(void **)(a1 + 680);
      if (v16 != (void *)(a1 + 688))
      {
        do
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint32_t v17 = v16 + 4;
          __int16 v18 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v19 = v16 + 4;
            if (*((char *)v16 + 55) < 0) {
              BOOL v19 = (void *)*v17;
            }
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#CLEEA %{public}s is still an emergency client", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            if (*((char *)v16 + 55) < 0) {
              uint32_t v17 = (void *)*v17;
            }
            int v88 = 136446210;
            v89[0] = v17;
            int v23 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v23);
            if (v23 != buf) {
              free(v23);
            }
          }
          uint64_t v20 = (void *)v16[1];
          if (v20)
          {
            do
            {
              uint64_t v21 = v20;
              uint64_t v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v21 = (void *)v16[2];
              BOOL v22 = *v21 == (void)v16;
              int v16 = v21;
            }
            while (!v22);
          }
          int v16 = v21;
        }
        while (v21 != (void *)(a1 + 688));
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v38 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#CLEEA First emergency client connected", buf, 2u);
      }
      __int16 v15 = v8;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        LOWORD(v88) = 0;
        uint64_t v83 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v83);
        if (v83 != buf) {
          free(v83);
        }
      }
    }
    sub_10077928C((uint64_t **)(a1 + 680), (uint64_t)&v87);
    double v39 = v15;
    uint64_t v40 = v86;
    if (!a3) {
      goto LABEL_155;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v41 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v42 = &v87;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v42 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v42;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLEPTO adding beneficiary for deauthorization override \", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_10077928C((uint64_t **)(a1 + 704), (uint64_t)&v87);
    __int16 v30 = v39;
    uint64_t v43 = *(void **)(a1 + 704);
    if (v43 != (void *)(a1 + 712))
    {
      do
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v44 = v43 + 4;
        CFStringRef v45 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          CFStringRef v46 = v43 + 4;
          if (*((char *)v43 + 55) < 0) {
            CFStringRef v46 = (void *)*v44;
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#CLEPTO (+) : %{public}s is still a beneficiary for deauthorization override", buf, 0xCu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          if (*((char *)v43 + 55) < 0) {
            uint64_t v44 = (void *)*v44;
          }
          int v88 = 136446210;
          v89[0] = v44;
          CFStringRef v49 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v49);
          if (v49 != buf) {
            free(v49);
          }
        }
        CFStringRef v47 = (void *)v43[1];
        if (v47)
        {
          do
          {
            CFStringRef v48 = v47;
            CFStringRef v47 = (void *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            CFStringRef v48 = (void *)v43[2];
            BOOL v22 = *v48 == (void)v43;
            uint64_t v43 = v48;
          }
          while (!v22);
        }
        uint64_t v43 = v48;
      }
      while (v48 != (void *)(a1 + 712));
    }
LABEL_154:
    double v39 = v30;
    uint64_t v40 = v86;
LABEL_155:
    if (v85)
    {
      sub_1004BDF60(v40);
      sub_100134750(buf, "com.apple.locationd.CLEEA");
      sub_1007A564C(a1, (uint64_t *)buf, 1);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      [objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", @"CLEmergencyController"), "onCLEmergencyEnablementAssertion:", v40];
    }
    if (v39)
    {
      sub_100134750(buf, "");
      sub_1001341F0(a1, v39, (uint64_t)buf);
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    goto LABEL_174;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v24 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    id v25 = &v87;
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      id v25 = (std::string *)v87.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#CLEEA removing emergency client,%{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v81 = &v87;
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v81 = (std::string *)v87.__r_.__value_.__r.__words[0];
    }
    int v88 = 136446210;
    v89[0] = v81;
    uint64_t v82 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v82);
    if (v82 != buf) {
      free(v82);
    }
  }
  __int16 v26 = (void *)(a1 + 680);
  uint64_t v27 = sub_10012FFE0(a1 + 680, (const void **)&v87.__r_.__value_.__l.__data_);
  __int16 v28 = (void *)(a1 + 688);
  if (a1 + 688 == v27)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    CFStringRef v50 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v51 = &v87;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v51 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      uint64_t v52 = *(void *)(a1 + 696);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v51;
      __int16 v91 = 1026;
      int v92 = v52;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLEEA Trying to remove emergency beneficiary which doesn't exist\", \"MissingClientKey\":%{public, location:escape_only}s, \"TotalMultisetSize\":%{public}d}", buf, 0x22u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    long long v53 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      __int16 v54 = &v87;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        __int16 v54 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      uint64_t v55 = *(void *)(a1 + 696);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v54;
      __int16 v91 = 1026;
      int v92 = v55;
      uint64_t v56 = "#CLEEA Trying to remove emergency beneficiary which doesn't exist";
      uint64_t v57 = "{\"msg%{public}.0s\":\"#CLEEA Trying to remove emergency beneficiary which doesn't exist\", \"MissingClientK"
            "ey\":%{public, location:escape_only}s, \"TotalMultisetSize\":%{public}d}";
      goto LABEL_173;
    }
  }
  else
  {
    sub_100645C00((uint64_t **)(a1 + 680), v27);
    uint64_t v29 = *(void *)(a1 + 696);
    BOOL v85 = v29 == 0;
    unsigned int v86 = 0;
    if (v29)
    {
      __int16 v30 = v8;
      int v31 = (void *)*v26;
      if ((void *)*v26 != v28)
      {
        do
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v32 = v31 + 4;
          uint64_t v33 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v34 = v31 + 4;
            if (*((char *)v31 + 55) < 0) {
              __int16 v34 = (void *)*v32;
            }
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = v34;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#CLEEA %{public}s is still an emergency client", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            if (*((char *)v31 + 55) < 0) {
              __int16 v32 = (void *)*v32;
            }
            int v88 = 136446210;
            v89[0] = v32;
            double v37 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v37);
            if (v37 != buf) {
              free(v37);
            }
          }
          unsigned int v35 = (void *)v31[1];
          if (v35)
          {
            do
            {
              __int16 v36 = v35;
              unsigned int v35 = (void *)*v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              __int16 v36 = (void *)v31[2];
              BOOL v22 = *v36 == (void)v31;
              int v31 = v36;
            }
            while (!v22);
          }
          int v31 = v36;
        }
        while (v36 != v28);
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v58 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#CLEEA Last emergency client disconnected", buf, 2u);
      }
      __int16 v30 = v8;
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        LOWORD(v88) = 0;
        uint64_t v84 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v84);
        if (v84 != buf) {
          free(v84);
        }
      }
    }
    if (!a3) {
      goto LABEL_154;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v59 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v60 = &v87;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        CFStringRef v60 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v60;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLEPTO removing beneficiary for deauthorization override\", \"Client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    long long v61 = (void *)(a1 + 704);
    uint64_t v62 = sub_10012FFE0(a1 + 704, (const void **)&v87.__r_.__value_.__l.__data_);
    id v63 = (void *)(a1 + 712);
    if (a1 + 712 != v62)
    {
      sub_100645C00((uint64_t **)(a1 + 704), v62);
      long long v64 = (void *)*v61;
      if ((void *)*v61 != v63)
      {
        do
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v65 = v64 + 4;
          uint64_t v66 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v67 = v64 + 4;
            if (*((char *)v64 + 55) < 0) {
              uint64_t v67 = (void *)*v65;
            }
            *(_DWORD *)std::string buf = 136446210;
            *(void *)&uint8_t buf[4] = v67;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#CLEPTO (-) : %{public}s is still a beneficiary for deauthorization override", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            if (*((char *)v64 + 55) < 0) {
              uint64_t v65 = (void *)*v65;
            }
            int v88 = 136446210;
            v89[0] = v65;
            id v70 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientEmergencyEnablementTransition(BOOL, BOOL, CLClientKeyPath *)", "%s\n", v70);
            if (v70 != buf) {
              free(v70);
            }
          }
          int v68 = (void *)v64[1];
          if (v68)
          {
            do
            {
              int v69 = v68;
              int v68 = (void *)*v68;
            }
            while (v68);
          }
          else
          {
            do
            {
              int v69 = (void *)v64[2];
              BOOL v22 = *v69 == (void)v64;
              long long v64 = v69;
            }
            while (!v22);
          }
          long long v64 = v69;
        }
        while (v69 != v63);
      }
      goto LABEL_154;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v71 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v72 = &v87;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v72 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      uint64_t v73 = *(void *)(a1 + 720);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v72;
      __int16 v91 = 1026;
      int v92 = v73;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CLEPTO Trying to remove deauthorizationOverride beneficiary which doesn't exist\", \"MissingClientKey\":%{public, location:escape_only}s, \"TotalMultisetSize\":%{public}d}", buf, 0x22u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    long long v53 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v74 = &v87;
      if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v74 = (std::string *)v87.__r_.__value_.__r.__words[0];
      }
      uint64_t v75 = *(void *)(a1 + 720);
      *(_DWORD *)std::string buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2082;
      *(void *)&buf[20] = v74;
      __int16 v91 = 1026;
      int v92 = v75;
      uint64_t v56 = "#CLEPTO Trying to remove deauthorizationOverride beneficiary which doesn't exist";
      uint64_t v57 = "{\"msg%{public}.0s\":\"#CLEPTO Trying to remove deauthorizationOverride beneficiary which doesn't exist\", \""
            "MissingClientKey\":%{public, location:escape_only}s, \"TotalMultisetSize\":%{public}d}";
LABEL_173:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v56, v57, buf, 0x22u);
    }
  }
LABEL_174:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
}

void sub_1007B0330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007B03B4(uint64_t a1, uint64_t a2)
{
  if ((sub_1000F08D4() & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v12 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Considering whether to mark client, %@, for always power use", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markAlwaysAuthorizationUsedForClient(CLClientKeyPath *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    unsigned int v5 = sub_1007A5DF0(a1, a2);
    if (v5)
    {
      unsigned int v6 = v5;
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        id v8 = sub_1004BF6E8(v6);
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v12 = a2;
        __int16 v13 = 2080;
        uint64_t v14 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Not marking client %@ as having used Always-powers (not Always authorized (%s))", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        sub_1004BF6E8(v6);
        id v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markAlwaysAuthorizationUsedForClient(CLClientKeyPath *)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
}

void sub_1007B06F4(uint64_t a1)
{
  sub_10053B99C(0, &v36);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v36.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    sub_101A6DD28(v2, v3, v4, v5, v6, v7, v8, v9, v22, v23, v24, v25, v26, (uint64_t)v27, v28, *((uint64_t *)&v28 + 1), v29, *((uint64_t *)&v29 + 1), v30,
      *((uint64_t *)&v30 + 1),
      v31,
      *((uint64_t *)&v31 + 1),
      v32,
      v33[0]);
    abort_report_np();
    __break(1u);
  }
  sub_1001110E4((uint64_t)__p, size + 17);
  if (v35 >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v12 = &v36;
  }
  else {
    uint64_t v12 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  memmove(v11, v12, size);
  strcpy((char *)v11 + size, "significant.plist");
  if (v35 >= 0) {
    __int16 v13 = __p;
  }
  else {
    __int16 v13 = (void **)__p[0];
  }
  if (sub_1000A569C((const char *)v13))
  {
    sub_1000E9354(v33);
    if (v35 >= 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    sub_1004CEA84((uint64_t)v33, (uint64_t)v14);
    __int16 v15 = (void *)sub_1000E9358((uint64_t)v33);
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v16 = [v15 countByEnumeratingWithState:&v28 objects:v37 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v29;
      do
      {
        for (uint64_t i = 0; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v17) {
            objc_enumerationMutation(v15);
          }
          uint64_t v19 = *(void *)(*((void *)&v28 + 1) + 8 * i);
          id v20 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", v19)];
          if ([v20 isValidCKP])
          {
            sub_1000176FC((uint64_t *)a1, (uint64_t)v20, &v26);
            sub_1010AB584(v26, [v15 objectForKeyedSubscript:v19]);
            if (v27) {
              sub_1000DB0A0(v27);
            }
          }
        }
        id v16 = [v15 countByEnumeratingWithState:&v28 objects:v37 count:16];
      }
      while (v16);
    }
    if (v35 >= 0) {
      uint64_t v21 = __p;
    }
    else {
      uint64_t v21 = (void **)__p[0];
    }
    sub_1004BB38C((const char *)v21);
    sub_10013F3C4(v33);
  }
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
}

void sub_1007B097C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1007B09FC(uint64_t a1)
{
  sub_100103240();
  uint64_t result = sub_10010145C();
  if ((result & 1) == 0)
  {
    id v3 = +[NSMutableArray array];
    uint64_t v4 = *(void **)(a1 + 136);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1007B0B04;
    v7[3] = &unk_1022C9000;
    v7[4] = v3;
    [v4 iterateAllAnchorKeyPathsWithBlock:v7];
    id v5 = [[objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLAppMonitor" forClient:@"CLClientManager"];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_1007B0B64;
    unsigned __int8 v6[3] = &unk_1022C9020;
    void v6[4] = a1;
    return (uint64_t)[v5 checkApplications:v3 withReply:v6];
  }
  return result;
}

id sub_1007B0B04(uint64_t a1, void *a2)
{
  id result = [a2 bundleId];
  if (result)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = [a2 legacyClientKey];
    return [v5 addObject:v6];
  }
  return result;
}

unsigned char *sub_1007B0B64(uint64_t a1, void *a2, void *a3, void *a4)
{
  return sub_1007B0B6C(*(double **)(a1 + 32), a2, a3, a4);
}

unsigned char *sub_1007B0B6C(double *a1, void *a2, void *a3, void *a4)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [a2 count];
    uint64_t v8 = (char *)[a2 count];
    uint64_t v9 = &v8[(void)[a3 count]];
    *(_DWORD *)std::string buf = 134218240;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = (char *)[a4 count] + (void)v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ClearClient installation check found %ld uninstalled apps (amongst %ld bundle IDs)", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v53 = [a2 count];
    __int16 v54 = (char *)[a2 count];
    id v55 = [a3 count];
    LODWORD(v78[0]) = 134218240;
    *(void **)((char *)v78 + 4) = v53;
    WORD2(v78[1]) = 2048;
    *(void **)((char *)&v78[1] + 6) = &v54[(void)v55 + (unint64_t)[a4 count]];
    uint64_t v56 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::handleAppInstallationStatus(NSArray<NSString *> *, NSArray<NSString *> *, NSArray<NSString *> *)", "%s\n", v56);
    if (v56 != (char *)buf) {
      free(v56);
    }
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v74 = 0.0;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  id v10 = [a2 countByEnumeratingWithState:&v70 objects:v84 count:16];
  if (!v10)
  {
    double v12 = -1.0;
    goto LABEL_96;
  }
  uint64_t v11 = *(void *)v71;
  double v12 = -1.0;
  do
  {
    __int16 v13 = 0;
    do
    {
      if (*(void *)v71 != v11) {
        objc_enumerationMutation(a2);
      }
      uint64_t v14 = *(void *)(*((void *)&v70 + 1) + 8 * (void)v13);
      id v15 = objc_alloc_init((Class)NSAutoreleasePool);
      id v16 = sub_100103E24((uint64_t)a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:v14 anchorType:105]);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 138412290;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "#ClearClient %@ is missing ", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        LODWORD(v78[0]) = 138412290;
        *(void **)((char *)v78 + 4) = v16;
        long long v28 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::handleAppInstallationStatus(NSArray<NSString *> *, NSArray<NSString *> *, NSArray<NSString *> *)", "%s\n", v28);
        if (v28 != (char *)buf) {
          free(v28);
        }
      }
      double v74 = 2.22507386e-308;
      if (sub_1007B1CFC((uint64_t)a1, (uint64_t)v16, &v74))
      {
        double v18 = v74;
        double v19 = Current - v74;
        if (Current - v74 >= a1[30])
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          id v20 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = *((void *)a1 + 30);
            *(_DWORD *)std::string buf = 68289794;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(void *)&buf[20] = v16;
            *(_WORD *)&unsigned char buf[28] = 2050;
            *(double *)&buf[30] = v19;
            *(_WORD *)&buf[38] = 2050;
            *(void *)&uint8_t buf[40] = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient Deleting entry as client has been missing beyond safe harbor threshold\", \"Client\":%{public, location:escape_only}@, \"missingTimeDuration_s\":\"%{public}.09f\", \"safe harbor threshold_s\":\"%{public}.09f\"}", buf, 0x30u);
          }
          sub_100134750(__p, "ClientRemoved");
          sub_1007A9D70((uint64_t)a1, v16, 1, (uint64_t *)__p);
          if (v69 < 0) {
            operator delete(__p[0]);
          }
          memset(v87, 0, 35);
          *(_OWORD *)unsigned int v86 = 0u;
          memset(buf, 0, sizeof(buf));
          long long v88 = 0u;
          memset(v89, 0, 59);
          if (v16)
          {
            [v16 clientName];
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
            uint64_t v83 = 0;
            memset(v82, 0, sizeof(v82));
            *(_OWORD *)uint64_t v81 = 0uLL;
            *(_OWORD *)uint64_t v79 = 0uLL;
            memset(v80, 0, sizeof(v80));
            memset(v78, 0, sizeof(v78));
          }
          *(_OWORD *)std::string buf = *(_OWORD *)v78;
          *(void **)&uint8_t buf[16] = v78[2];
          HIBYTE(v78[2]) = 0;
          LOBYTE(v78[0]) = 0;
          if ((char)buf[47] < 0) {
            operator delete(*(void **)&buf[24]);
          }
          *(_OWORD *)&unsigned char buf[24] = *(_OWORD *)&v78[3];
          *(void **)&uint8_t buf[40] = v78[5];
          HIBYTE(v78[5]) = 0;
          LOBYTE(v78[3]) = 0;
          if (SHIBYTE(v87[0]) < 0) {
            operator delete(v86[0]);
          }
          *(_OWORD *)unsigned int v86 = *(_OWORD *)v79;
          v87[0] = v80[0];
          HIBYTE(v80[0]) = 0;
          LOBYTE(v79[0]) = 0;
          if (SHIBYTE(v87[3]) < 0) {
            operator delete(v87[1]);
          }
          *(_OWORD *)&v87[1] = *(_OWORD *)&v80[1];
          v87[3] = v80[3];
          HIBYTE(v80[3]) = 0;
          LOBYTE(v80[1]) = 0;
          LOWORD(v87[4]) = v80[4];
          BYTE2(v87[4]) = BYTE2(v80[4]);
          if (SBYTE7(v89[0]) < 0) {
            operator delete((void *)v88);
          }
          long long v88 = *(_OWORD *)&v80[5];
          *(void **)&v89[0] = v80[7];
          HIBYTE(v80[7]) = 0;
          LOBYTE(v80[5]) = 0;
          if (SHIBYTE(v89[1]) < 0) {
            operator delete(*((void **)&v89[0] + 1));
          }
          char v27 = 0;
          *(_OWORD *)((char *)v89 + 8) = *(_OWORD *)v81;
          *((void *)&v89[1] + 1) = *(void *)&v82[0];
          BYTE7(v82[0]) = 0;
          LOBYTE(v81[0]) = 0;
          if (SBYTE7(v89[3]) < 0)
          {
            operator delete(*(void **)&v89[2]);
            char v27 = BYTE7(v82[0]);
          }
          v89[2] = *(_OWORD *)((char *)v82 + 8);
          *(void *)&void v89[3] = *((void *)&v82[1] + 1);
          HIBYTE(v82[1]) = 0;
          BYTE8(v82[0]) = 0;
          WORD4(v89[3]) = v83;
          BYTE10(v89[3]) = BYTE2(v83);
          if (v27 < 0) {
            operator delete(v81[0]);
          }
          if (SHIBYTE(v80[7]) < 0) {
            operator delete(v80[5]);
          }
          if (SHIBYTE(v80[3]) < 0) {
            operator delete(v80[1]);
          }
          if (SHIBYTE(v80[0]) < 0) {
            operator delete(v79[0]);
          }
          if (SHIBYTE(v78[5]) < 0) {
            operator delete(v78[3]);
          }
          if (SHIBYTE(v78[2]) < 0) {
            operator delete(v78[0]);
          }
          LODWORD(v78[0]) = 1;
          (*(void (**)(double *, void **, uint8_t *, void, uint64_t, void))(*(void *)a1 + 152))(a1, v78, buf, 0, 0xFFFFFFFFLL, 0);
          if (SBYTE7(v89[3]) < 0) {
            operator delete(*(void **)&v89[2]);
          }
          if (SHIBYTE(v89[1]) < 0) {
            operator delete(*((void **)&v89[0] + 1));
          }
          if (SBYTE7(v89[0]) < 0) {
            operator delete((void *)v88);
          }
          if (SHIBYTE(v87[3]) < 0) {
            operator delete(v87[1]);
          }
          if (SHIBYTE(v87[0]) < 0) {
            operator delete(v86[0]);
          }
          if ((char)buf[47] < 0) {
            operator delete(*(void **)&buf[24]);
          }
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
          goto LABEL_44;
        }
      }
      else
      {
        double v19 = 0.0;
        double v18 = v74;
      }
      if (v18 == 2.22507386e-308)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint8_t v22 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v16;
          *(_WORD *)&unsigned char buf[28] = 2050;
          *(double *)&buf[30] = Current;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient Marking client as missing\", \"Client\":%{public, location:escape_only}@, \"missingTime_s\":\"%{public}.09f\"}", buf, 0x26u);
        }
        sub_1007A9984((id *)a1, (uint64_t)v16, &Current);
        uint64_t v23 = (void *)*((void *)a1 + 17);
        *(void *)std::string buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472;
        *(void *)&uint8_t buf[16] = sub_100124700;
        *(void *)&unsigned char buf[24] = &unk_1022C8FD8;
        *(void *)&uint8_t buf[40] = a1;
        *(void *)&uint8_t buf[32] = v16;
        [v23 iterateIdentitiesRelatedToKeyPath:v16 withBlock:buf];
      }
      if (a1[30] - v19 < v12 || v12 == -1.0) {
        double v12 = a1[30] - v19;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v25 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v26 = *((void *)a1 + 30);
        *(_DWORD *)std::string buf = 138412802;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(double *)&unsigned char buf[14] = v19;
        *(_WORD *)&buf[22] = 2048;
        *(void *)&unsigned char buf[24] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "%@ has been missing for %.3fs (safe harbor threshold: %.3fs)", buf, 0x20u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        long long v29 = (void *)*((void *)a1 + 30);
        LODWORD(v78[0]) = 138412802;
        *(void **)((char *)v78 + 4) = v16;
        WORD2(v78[1]) = 2048;
        *(void **)((char *)&v78[1] + 6) = *(void **)&v19;
        HIWORD(v78[2]) = 2048;
        v78[3] = v29;
        long long v30 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::handleAppInstallationStatus(NSArray<NSString *> *, NSArray<NSString *> *, NSArray<NSString *> *)", "%s\n", v30);
        if (v30 != (char *)buf) {
          free(v30);
        }
      }
LABEL_44:

      __int16 v13 = (char *)v13 + 1;
    }
    while (v10 != v13);
    id v31 = [a2 countByEnumeratingWithState:&v70 objects:v84 count:16];
    id v10 = v31;
  }
  while (v31);
LABEL_96:
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id v32 = [a3 countByEnumeratingWithState:&v64 objects:v77 count:16];
  if (v32)
  {
    uint64_t v33 = *(void *)v65;
    do
    {
      __int16 v34 = 0;
      do
      {
        if (*(void *)v65 != v33) {
          objc_enumerationMutation(a3);
        }
        uint64_t v35 = *(void *)(*((void *)&v64 + 1) + 8 * (void)v34);
        id v36 = objc_alloc_init((Class)NSAutoreleasePool);
        id v37 = sub_100103E24((uint64_t)a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:v35 anchorType:105]);
        if (sub_1007B1CFC((uint64_t)a1, (uint64_t)v37, &v74))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v38 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v39 = *((void *)a1 + 30);
            *(_DWORD *)std::string buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(void *)&buf[20] = v37;
            *(_WORD *)&unsigned char buf[28] = 2050;
            *(void *)&buf[30] = v39;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient Client restored within safe harbor threshold - keeping\", \"Client\":%{public, location:escape_only}@, \"safe harbor threshold_s\":\"%{public}.09f\"}", buf, 0x26u);
          }
          sub_1007A9BA8((id *)a1, (uint64_t)v37);
          uint64_t v40 = (void *)*((void *)a1 + 17);
          *(void *)std::string buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472;
          *(void *)&uint8_t buf[16] = sub_100124700;
          *(void *)&unsigned char buf[24] = &unk_1022C8FD8;
          *(void *)&uint8_t buf[40] = a1;
          *(void *)&uint8_t buf[32] = v37;
          [v40 iterateIdentitiesRelatedToKeyPath:v37 withBlock:buf];
        }

        __int16 v34 = (char *)v34 + 1;
      }
      while (v32 != v34);
      id v32 = [a3 countByEnumeratingWithState:&v64 objects:v77 count:16];
    }
    while (v32);
  }
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  id v41 = [a4 countByEnumeratingWithState:&v60 objects:v76 count:16];
  if (v41)
  {
    uint64_t v42 = *(void *)v61;
    do
    {
      uint64_t v43 = 0;
      do
      {
        if (*(void *)v61 != v42) {
          objc_enumerationMutation(a4);
        }
        uint64_t v44 = *(void *)(*((void *)&v60 + 1) + 8 * (void)v43);
        id v45 = objc_alloc_init((Class)NSAutoreleasePool);
        id v46 = sub_100103E24((uint64_t)a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithClientAnchor:v44 anchorType:105]);
        if (sub_1007B1CFC((uint64_t)a1, (uint64_t)v46, &v74))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          CFStringRef v47 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v48 = *((void *)a1 + 30);
            *(_DWORD *)std::string buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = "";
            *(_WORD *)&buf[18] = 2114;
            *(void *)&buf[20] = v46;
            *(_WORD *)&unsigned char buf[28] = 2050;
            *(void *)&buf[30] = v48;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient Client restored (remotely) within safe harbor threshold - keeping\", \"Client\":%{public, location:escape_only}@, \"safe harbor threshold_s\":\"%{public}.09f\"}", buf, 0x26u);
          }
          sub_1007A9BA8((id *)a1, (uint64_t)v46);
        }
        [*((id *)a1 + 17) setBool:1 forKey:@"SyncedAuthForUninstalledApp" atKeyPath:v46];

        uint64_t v43 = (char *)v43 + 1;
      }
      while (v41 != v43);
      id v41 = [a4 countByEnumeratingWithState:&v60 objects:v76 count:16];
    }
    while (v41);
  }
  CFStringRef v49 = (void *)*((void *)a1 + 31);
  if (v12 == -1.0)
  {
    [v49 setNextFireDelay:1.79769313e308];
  }
  else
  {
    [v49 nextFireDelay];
    if (v12 < v50)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v51 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 134217984;
        *(double *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#ClearClient updated AppUninstallTimer; next timer will fire in %.3fs",
          buf,
          0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        LODWORD(v78[0]) = 134217984;
        *(void **)((char *)v78 + 4) = *(void **)&v12;
        uint64_t v57 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::handleAppInstallationStatus(NSArray<NSString *> *, NSArray<NSString *> *, NSArray<NSString *> *)", "%s\n", v57);
        if (v57 != (char *)buf) {
          free(v57);
        }
      }
      [*((id *)a1 + 31) setNextFireDelay:v12];
    }
  }
  [*((id *)a1 + 17) persist];
  sub_1007A6C10((uint64_t)a1);
  return sub_100105FDC(a1);
}

void sub_1007B1C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1007B1CFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v5 isValidCKP])
  {
    id v6 = [objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5) dictionary];
    return sub_100EC7198(v6, a3);
  }
  else
  {
    *a3 = 0x10000000000000;
    return 0;
  }
}

BOOL sub_1007B1D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = sub_100103E24(a1, a2);
  if (!&SBUserNotificationPendInSetupIfNotAllowedKey) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v7;
  uint64_t v10 = sub_1001BA55C();
  uint64_t v11 = (void *)sub_100802D54(v10, @"LOCATION_ACCURACY");
  if (a3 == 1)
  {
    uint64_t v13 = sub_1001BA55C();
    CFStringRef v14 = @"IMPROVE_LOCATION_ACCURACY_BLUETOOTH";
LABEL_10:
    id v15 = (void *)sub_100802D54(v13, v14);
    goto LABEL_11;
  }
  if (!a3)
  {
    int v12 = MGGetBoolAnswer();
    uint64_t v13 = sub_1001BA55C();
    if (v12) {
      CFStringRef v14 = @"IMPROVE_LOCATION_ACCURACY_WLAN";
    }
    else {
      CFStringRef v14 = @"IMPROVE_LOCATION_ACCURACY_WIFI";
    }
    goto LABEL_10;
  }
  id v15 = 0;
LABEL_11:
  uint64_t v16 = sub_1001BA55C();
  uint64_t v17 = (void *)sub_100802D54(v16, @"OK");
  uint64_t v18 = sub_1001BA55C();
  double v19 = (void *)sub_100802D54(v18, @"SETTINGS");
  id v20 = v19;
  if (v11 && v15 && v17 && v19)
  {
    keys = (void *)SBUserNotificationPendInSetupIfNotAllowedKey;
    *(void *)uint64_t v35 = kCFUserNotificationAlertHeaderKey;
    *(void *)&v35[8] = kCFUserNotificationAlertMessageKey;
    *(void *)&v35[16] = kCFUserNotificationDefaultButtonTitleKey;
    CFStringRef v36 = kCFUserNotificationAlternateButtonTitleKey;
    values[0] = kCFBooleanTrue;
    values[1] = v11;
    values[2] = v15;
    values[3] = v17;
    values[4] = v19;
    CFDictionaryRef v21 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)values, 5, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v21)
    {
      SInt32 error = 0;
      uint8_t v22 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, &error, v21);
      CFRelease(v21);
    }
    else
    {
      uint8_t v22 = 0;
    }
    goto LABEL_20;
  }
  uint8_t v22 = 0;
  if (v19) {
LABEL_20:
  }
    CFRelease(v20);
  if (v17) {
    CFRelease(v17);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v22)
  {
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v22, (CFUserNotificationCallBack)sub_1007DBD74, 0);
    if (RunLoopSource)
    {
      uint64_t v24 = (__CFRunLoop *)sub_1001C2710();
      CFRunLoopAddSource(v24, RunLoopSource, kCFRunLoopCommonModes);
      CFRelease(RunLoopSource);
      CFRetain(v22);
      sub_1007D1754(a4);
      *(void *)(a4 + 24) = v22;
      sub_100134750(__p, "");
      sub_1007E1DB0((uint64_t)&keys, 15, v9, 0, (long long *)__p);
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
      uint64_t v26 = v25;
      CFRetain(v22);
      if (cf) {
        CFRelease(cf);
      }
      CFTypeRef cf = v22;
      uint64_t v38 = v26;
      operator new();
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    long long v29 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      keys = (void *)68289282;
      *(_WORD *)uint64_t v35 = 2082;
      *(void *)&v35[2] = "";
      *(_WORD *)&v35[10] = 2114;
      *(void *)&v35[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not create runloop source for ImproveAccuracyPrefs notification\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&keys, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    long long v30 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      keys = (void *)68289282;
      *(_WORD *)uint64_t v35 = 2082;
      *(void *)&v35[2] = "";
      *(_WORD *)&v35[10] = 2114;
      *(void *)&v35[12] = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not create runloop source for ImproveAccuracyPrefs notification", "{\"msg%{public}.0s\":\"Could not create runloop source for ImproveAccuracyPrefs notification\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&keys, 0x1Cu);
    }
    CFRelease(v22);
    return 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  char v27 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
  {
    keys = (void *)68289282;
    *(_WORD *)uint64_t v35 = 2082;
    *(void *)&v35[2] = "";
    *(_WORD *)&v35[10] = 2114;
    *(void *)&v35[12] = v9;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Could not create ImproveAccuracyPrefs notification\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&keys, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  long long v28 = qword_102419538;
  BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
  if (result)
  {
    keys = (void *)68289282;
    *(_WORD *)uint64_t v35 = 2082;
    *(void *)&v35[2] = "";
    *(_WORD *)&v35[10] = 2114;
    *(void *)&v35[12] = v9;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not create ImproveAccuracyPrefs notification", "{\"msg%{public}.0s\":\"Could not create ImproveAccuracyPrefs notification\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&keys, 0x1Cu);
    return 0;
  }
  return result;
}

void sub_1007B2340(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

id sub_1007B2398(uint64_t a1, long long *a2, uint64_t a3)
{
  if (*(void *)(a1 + 1144)) {
    goto LABEL_50;
  }
  id v6 = objc_alloc((Class)NSDictionary);
  sub_10053BE74(&v78);
  sub_100134750(&v71, off_10241D9F8);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    id v7 = &v71;
  }
  else {
    id v7 = (std::string *)v71.__r_.__value_.__r.__words[0];
  }
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v71.__r_.__value_.__l.__size_;
  }
  uint64_t v9 = std::string::append(&v78, (const std::string::value_type *)v7, size);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  int64_t v77 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v77 >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  *(void *)(a1 + 1144) = [v6 initWithContentsOfFile:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11)];
  if (SHIBYTE(v77) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
  int v12 = *(void **)(a1 + 1144);
  if (v12)
  {
    *(void *)(a1 + 1152) = [objc_msgSend(objc_msgSend(v12, "allKeys"), "sortedArrayUsingComparator:", &stru_1022C9060)];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      id v14 = [[objc_msgSend(*(id *)(a1 + 1144), "description") UTF8String];
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "DAR map: %s", (uint8_t *)__p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v45 = [[objc_msgSend(*(id *)(a1 + 1144), "description") UTF8String];
      LODWORD(v78.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
      id v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", v46);
      if (v46 != (char *)__p) {
        free(v46);
      }
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v15 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      id v16 = [[objc_msgSend(*(id *)(a1 + 1152), "description") UTF8String];
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "DAR map sorted keys: %s", (uint8_t *)__p, 0xCu);
    }
    if (!sub_10013D1A0(115, 2)) {
      goto LABEL_50;
    }
    bzero(__p, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v17 = [[objc_msgSend(*(id *)(a1 + 1152), "description") UTF8String];
    LODWORD(v78.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)v17;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", v18);
    if (v18 == (char *)__p) {
      goto LABEL_50;
    }
LABEL_92:
    free(v18);
    goto LABEL_50;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  double v19 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    sub_10053BE74(&v78);
    sub_100134750(&v71, off_10241D9F8);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      id v20 = &v71;
    }
    else {
      id v20 = (std::string *)v71.__r_.__value_.__r.__words[0];
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v21 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v21 = v71.__r_.__value_.__l.__size_;
    }
    uint8_t v22 = std::string::append(&v78, (const std::string::value_type *)v20, v21);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    int64_t v77 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    uint64_t v24 = __p;
    if (v77 < 0) {
      uint64_t v24 = (void **)__p[0];
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v24;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "DAR: could not read map file %{public}s", (uint8_t *)&buf, 0xCu);
    if (SHIBYTE(v77) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
  }
  if (sub_10013D1A0(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    sub_10053BE74(&v71);
    sub_100134750(&buf, off_10241D9F8);
    if ((v73 & 0x80u) == 0) {
      p_long long buf = (const std::string::value_type *)&buf;
    }
    else {
      p_long long buf = (const std::string::value_type *)buf;
    }
    if ((v73 & 0x80u) == 0) {
      std::string::size_type v48 = v73;
    }
    else {
      std::string::size_type v48 = *((void *)&buf + 1);
    }
    CFStringRef v49 = std::string::append(&v71, p_buf, v48);
    long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = v50;
    v49->__r_.__value_.__l.__size_ = 0;
    v49->__r_.__value_.__r.__words[2] = 0;
    v49->__r_.__value_.__r.__words[0] = 0;
    uint64_t v51 = &v78;
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v51 = (std::string *)v78.__r_.__value_.__r.__words[0];
    }
    int v74 = 136446210;
    uint64_t v75 = v51;
    uint64_t v18 = (char *)_os_log_send_and_compose_impl();
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v78.__r_.__value_.__l.__data_);
    }
    if ((char)v73 < 0) {
      operator delete((void *)buf);
    }
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v71.__r_.__value_.__l.__data_);
    }
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", v18);
    if (v18 != (char *)__p) {
      goto LABEL_92;
    }
  }
LABEL_50:
  v67[0] = _NSConcreteStackBlock;
  v67[1] = 3221225472;
  int v68 = sub_1007B2FBC;
  char v69 = &unk_1022C9088;
  uint64_t v70 = a3;
  if (*(void *)(a1 + 1144))
  {
    if (*(double *)(a1 + 1180) == -1.0
      || vabdd_f64(*(double *)(a1 + 1236), *(double *)((char *)a2 + 76)) > 604800.0
      || sub_1000A3D9C(*(double *)(a1 + 1164), *(double *)(a1 + 1172), *(double *)((char *)a2 + 4), *(double *)((char *)a2 + 12)) > 500.0)
    {
      long long v25 = a2[7];
      long long v26 = a2[8];
      long long v27 = a2[5];
      long long v62 = a2[6];
      long long v63 = v25;
      v64[0] = v26;
      *(_OWORD *)((char *)v64 + 12) = *(long long *)((char *)a2 + 140);
      long long v28 = a2[3];
      long long v29 = a2[4];
      long long v30 = a2[1];
      long long v58 = a2[2];
      long long v59 = v28;
      long long v60 = v29;
      long long v61 = v27;
      long long v56 = *a2;
      long long v57 = v30;
      id v31 = *(void **)(a1 + 1552);
      *(void *)&long long v28 = *(void *)((char *)a2 + 4);
      *(void *)&long long v29 = *(void *)((char *)a2 + 12);
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472;
      v55[2] = sub_1007B33D8;
      v55[3] = &unk_1022C90D0;
      v55[4] = v67;
      v55[5] = a1;
      return [v31 getNumberOfInputApsUsedInWifiTileForCoordinate:v55 withReply:*(double *)&v28, *(double *)&v29];
    }
    else
    {
      uint64_t v38 = *(void **)(a1 + 1320);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v39 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(__p[0]) = 134217984;
        *(void **)((char *)__p + 4) = v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "DAR: applying cached quantization %f", (uint8_t *)__p, 0xCu);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        LODWORD(v78.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = (std::string::size_type)v38;
        uint64_t v52 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", v52);
        if (v52 != (char *)__p) {
          free(v52);
        }
      }
      long long v40 = a2[7];
      v53[6] = a2[6];
      v53[7] = v40;
      v54[0] = a2[8];
      *(_OWORD *)((char *)v54 + 12) = *(long long *)((char *)a2 + 140);
      long long v41 = a2[3];
      v53[2] = a2[2];
      v53[3] = v41;
      long long v42 = a2[5];
      v53[4] = a2[4];
      v53[5] = v42;
      long long v43 = a2[1];
      v53[0] = *a2;
      v53[1] = v43;
      return (id)v68((uint64_t)v67, (uint64_t)v53, *(double *)&v38);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v33 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 134217984;
      *(void **)((char *)__p + 4) = (void *)0x3FB999999999999ALL;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#Warning DAR: applying default quantization %f", (uint8_t *)__p, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LODWORD(v78.__r_.__value_.__l.__data_) = 134217984;
      *(std::string::size_type *)((char *)v78.__r_.__value_.__r.__words + 4) = 0x3FB999999999999ALL;
      uint64_t v44 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)", "%s\n", v44);
      if (v44 != (char *)__p) {
        free(v44);
      }
    }
    long long v34 = a2[7];
    v65[6] = a2[6];
    v65[7] = v34;
    v66[0] = a2[8];
    *(_OWORD *)((char *)v66 + 12) = *(long long *)((char *)a2 + 140);
    long long v35 = a2[3];
    v65[2] = a2[2];
    v65[3] = v35;
    long long v36 = a2[5];
    v65[4] = a2[4];
    v65[5] = v36;
    long long v37 = a2[1];
    v65[0] = *a2;
    v65[1] = v37;
    return (id)v68((uint64_t)v67, (uint64_t)v65, 0.1);
  }
}

void sub_1007B2EC8(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  _Unwind_Resume(a1);
}

int64_t sub_1007B2F50(id a1, id a2, id a3)
{
  id v5 = [a2 integerValue];
  if ((uint64_t)v5 > (uint64_t)[a3 integerValue]) {
    return 1;
  }
  id v7 = [a2 integerValue];
  if ((uint64_t)v7 >= (uint64_t)[a3 integerValue]) {
    return 0;
  }
  else {
    return -1;
  }
}

uint64_t sub_1007B2FBC(uint64_t a1, uint64_t a2, double a3)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a2 + 4);
    uint64_t v7 = *(void *)(a2 + 12);
    uint64_t v8 = *(void *)(a2 + 20);
    *(_DWORD *)long long buf = 134218496;
    uint64_t v38 = v6;
    __int16 v39 = 2048;
    uint64_t v40 = v7;
    __int16 v41 = 2048;
    uint64_t v42 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "DAR: original location: %.8f, %.8f, %.2f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v20 = *(void *)(a2 + 4);
    uint64_t v21 = *(void *)(a2 + 12);
    uint64_t v22 = *(void *)(a2 + 20);
    int v31 = 134218496;
    uint64_t v32 = v20;
    __int16 v33 = 2048;
    uint64_t v34 = v21;
    __int16 v35 = 2048;
    uint64_t v36 = v22;
    long long v23 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke", "%s\n", v23);
    if (v23 != (char *)buf) {
      free(v23);
    }
  }
  *(float64x2_t *)(a2 + 4) = vmulq_n_f64(vrndaq_f64(vdivq_f64(*(float64x2_t *)(a2 + 4), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0))), a3);
  *(double *)(a2 + 20) = sqrt(a3 * a3 * 5000000000.0 + *(double *)(a2 + 20) * *(double *)(a2 + 20));
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void *)(a2 + 4);
    uint64_t v11 = *(void *)(a2 + 12);
    uint64_t v12 = *(void *)(a2 + 20);
    *(_DWORD *)long long buf = 134218496;
    uint64_t v38 = v10;
    __int16 v39 = 2048;
    uint64_t v40 = v11;
    __int16 v41 = 2048;
    uint64_t v42 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "DAR:  reduced location: %.8f, %.8f, %.2f", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v24 = *(void *)(a2 + 4);
    uint64_t v25 = *(void *)(a2 + 12);
    uint64_t v26 = *(void *)(a2 + 20);
    int v31 = 134218496;
    uint64_t v32 = v24;
    __int16 v33 = 2048;
    uint64_t v34 = v25;
    __int16 v35 = 2048;
    uint64_t v36 = v26;
    long long v27 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke", "%s\n", v27);
    if (v27 != (char *)buf) {
      free(v27);
    }
  }
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = objc_alloc((Class)CLLocation);
  long long v15 = *(_OWORD *)(a2 + 112);
  v29[6] = *(_OWORD *)(a2 + 96);
  v29[7] = v15;
  v30[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(a2 + 140);
  long long v16 = *(_OWORD *)(a2 + 48);
  v29[2] = *(_OWORD *)(a2 + 32);
  v29[3] = v16;
  long long v17 = *(_OWORD *)(a2 + 80);
  v29[4] = *(_OWORD *)(a2 + 64);
  void v29[5] = v17;
  long long v18 = *(_OWORD *)(a2 + 16);
  v29[0] = *(_OWORD *)a2;
  v29[1] = v18;
  return (*(uint64_t (**)(uint64_t, id))(v13 + 16))(v13, [v14 initWithClientLocation:v29]);
}

uint64_t sub_1007B33D8(void *a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v4 = a1[5];
  id v5 = (-[NSNumber stringValue](+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a2), "stringValue"), 0, [*(id *)(v4 + 1152) count], 1024, &stru_1022C90A8);
  if (v5 == [*(id *)(v4 + 1152) count]
    || objc_msgSend(objc_msgSend(*(id *)(v4 + 1152), "objectAtIndex:", v5), "integerValue") != (id)v2)
  {
    --v5;
  }
  [objc_msgSend(*(id *)(v4 + 1144), "objectForKey:", objc_msgSend(*(id *)(v4 + 1152), "objectAtIndex:", v5)) doubleValue];
  double v7 = v6;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218240;
    double v12 = v7;
    __int16 v13 = 1024;
    int v14 = v2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "DAR: applying new quantization %f based on ap count %d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  if (v2)
  {
    memmove((void *)(v4 + 1160), a1 + 6, 0x9CuLL);
    *(double *)(v4 + 1320) = v7;
  }
  return (*(uint64_t (**)(double))(a1[4] + 16))(v7);
}

int64_t sub_1007B36B0(id a1, id a2, id a3)
{
  id v5 = [a2 integerValue];
  if ((uint64_t)v5 > (uint64_t)[a3 integerValue]) {
    return 1;
  }
  id v7 = [a2 integerValue];
  if ((uint64_t)v7 >= (uint64_t)[a3 integerValue]) {
    return 0;
  }
  else {
    return -1;
  }
}

void sub_1007B371C(uint64_t a1, CLConnection *a2)
{
  id v5 = *(void **)(a1 + 848);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v4 = a2;
  int v2 = (uint64_t **)(a1 + 840);
  id v3 = (uint64_t *)(a1 + 848);
  do
  {
    unint64_t v6 = v5[4];
    BOOL v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v5 + 1;
    }
    if (v7) {
      id v3 = v5;
    }
    id v5 = (void *)*v8;
  }
  while (*v8);
  if (v3 == (uint64_t *)(a1 + 848) || v3[4] > (unint64_t)a2)
  {
LABEL_12:
    sub_101A6DE80();
    __break(1u);
  }
  uint64_t v9 = v3[5];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    CLConnection::getName((uint64_t *)__p, v4);
    uint64_t v11 = v19 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Client %{public}s disconnected", buf, 0xCu);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    CLConnection::getName((uint64_t *)buf, v4);
    if (v15 >= 0) {
      double v12 = buf;
    }
    else {
      double v12 = *(unsigned char **)buf;
    }
    int v16 = 136446210;
    long long v17 = v12;
    __int16 v13 = (char *)_os_log_send_and_compose_impl();
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::destroyGenericClient(CLConnection *)", "%s\n", v13);
    if (v13 != (char *)__p) {
      free(v13);
    }
  }
  sub_1000F0A30(v2, v3);
  operator delete(v3);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
}

void sub_1007B39D0(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 912);
  id v3 = (void *)(a1 + 920);
  if (v2 != (void *)(a1 + 920))
  {
    while (1)
    {
      unint64_t v6 = v2[4];
      if ((*(unsigned int (**)(uint64_t, unint64_t))(a2 + 16))(a2, v6)) {
        break;
      }
      BOOL v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          BOOL v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          int v2 = v8;
        }
        while (!v9);
      }
      int v2 = v8;
      if (v8 == v3) {
        return;
      }
    }
    *(void *)(v6 + 8) = mach_continuous_time();
    sub_1007B3BD8(a1, v6);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022C97E8);
    }
    uint64_t v10 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2050;
      unint64_t v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic consuming a matching butterfly\", \"eaten\":\"%{public}p\"}", (uint8_t *)&v12, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022C97E8);
      }
    }
    uint64_t v11 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2050;
      unint64_t v17 = v6;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic consuming a matching butterfly", "{\"msg%{public}.0s\":\"#dic consuming a matching butterfly\", \"eaten\":\"%{public}p\"}", (uint8_t *)&v12, 0x1Cu);
    }
  }
}

void sub_1007B3BD8(uint64_t a1, unint64_t a2)
{
  id v3 = *(void **)(a1 + 920);
  if (!v3) {
    goto LABEL_12;
  }
  id v5 = (uint64_t **)(a1 + 912);
  unint64_t v6 = (uint64_t *)(a1 + 920);
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = v3;
    }
    else {
      BOOL v9 = v3 + 1;
    }
    if (v8) {
      unint64_t v6 = v3;
    }
    id v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 == (uint64_t *)(a1 + 920) || v6[4] > a2) {
LABEL_12:
  }
    sub_101A6DFF0(a2);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v16 = 2082;
    unint64_t v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = sub_10014D19C(a2);
    __int16 v20 = 2050;
    unint64_t v21 = a2;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"destroying #dic\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  uint64_t v11 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v12 = sub_10014D19C(a2);
    *(_DWORD *)long long buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v16 = 2082;
    unint64_t v17 = "";
    __int16 v18 = 2114;
    uint64_t v19 = v12;
    __int16 v20 = 2050;
    unint64_t v21 = a2;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "destroying #dic", "{\"msg%{public}.0s\":\"destroying #dic\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
  }
  sub_100134750(buf, (char *)[+[NSString stringWithFormat:@"%p", a2] UTF8String]);
  uint64_t v13 = sub_10014D19C(a2);
  unsigned int v14 = (*(uint64_t (**)(unint64_t))(*(void *)a2 + 24))(a2);
  sub_1007A4ED4(a1, v13, (uint64_t *)buf, v14, 0, 0);
  sub_1000F0A30(v5, v6);
  operator delete(v6);
  (*(void (**)(unint64_t))(*(void *)a2 + 8))(a2);
  if (SBYTE3(v19) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1007B3EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007B3ED8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 144) = v2;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1007B3F70;
  unsigned __int8 v4[3] = &unk_1022A3020;
  v4[4] = a1;
  [v2 setHandler:v4];
  return [*(id *)(a1 + 144) setNextFireDelay:600.0];
}

id sub_1007B3F70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [*(id *)(v1 + 136) persist];
  id v2 = *(void **)(v1 + 144);

  return [v2 setNextFireDelay:600.0];
}

void *sub_1007B3FB4@<X0>(_DWORD *a1@<X1>, void *a2@<X8>)
{
  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_100134750(a2, __str);
}

uint64_t sub_1007B4030()
{
  return 1;
}

uint64_t sub_1007B4038()
{
  return 1;
}

id sub_1007B4040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  unint64_t v7 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v4, v5, v6, objc_opt_class(), 0);

  return +[NSKeyedUnarchiver unarchivedObjectOfClasses:v7 fromData:a1 error:a2];
}

NSData *sub_1007B40F8(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  [v2 setObject:&off_102392A98 forKeyedSubscript:@"version"];
  id v3 = +[NSMutableDictionary dictionary];
  uint64_t v4 = *(void **)(a1 + 136);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1007B4374;
  void v9[3] = &unk_1022C8E48;
  v9[4] = v3;
  v9[5] = a1;
  [v4 iterateAllAnchorKeyPathsWithBlock:v9];
  [v2 setObject:v3 forKeyedSubscript:@"clients"];
  [v2 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", sub_1001198FC() == 1)] forKeyedSubscript:@"global"];
  uint64_t v8 = 0;
  BOOL result = +[NSKeyedArchiver archivedDataWithRootObject:v2 requiringSecureCoding:1 error:&v8];
  if (v8)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2114;
      uint64_t v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"failed to archive authorization decisions\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    unint64_t v7 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)long long buf = 68289282;
      int v11 = 0;
      __int16 v12 = 2082;
      uint64_t v13 = "";
      __int16 v14 = 2114;
      uint64_t v15 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "failed to archive authorization decisions", "{\"msg%{public}.0s\":\"failed to archive authorization decisions\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return 0;
  }
  return result;
}

void sub_1007B4374(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (a2)
  {
    [a2 clientName];
  }
  else
  {
    uint64_t v19 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    *(_OWORD *)__int16 v16 = 0u;
    long long v13 = 0u;
    *(_OWORD *)__int16 v14 = 0u;
    *(_OWORD *)int v11 = 0u;
    *(_OWORD *)__int16 v12 = 0u;
    *(_OWORD *)BOOL v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)uint64_t v8 = 0u;
  }
  id v5 = [a2 legacyClientKey:v8[0] v8[1] v9[0]];
  sub_1000A84C8((uint64_t)v8);
  if (v15 >= 0) {
    uint64_t v6 = &v14[1];
  }
  else {
    uint64_t v6 = (void **)v14[1];
  }
  if ([+[NSString stringWithUTF8String:v6] hasPrefix:@"com.apple."])
  {
    goto LABEL_11;
  }
  unint64_t v7 = (void *)HIBYTE(v12[0]);
  if (SHIBYTE(v12[0]) < 0) {
    unint64_t v7 = v11[1];
  }
  if (v7) {
LABEL_11:
  }
    [*(id *)(a1 + 32) setObject:objc_msgSend(objc_msgSend(*(id *)(v4 + 136), "readonlyStoreAtKeyPath:", a2), "dictionary") forKeyedSubscript:v5];
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  if (SHIBYTE(v12[0]) < 0) {
    operator delete(v11[0]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  if (SHIBYTE(v9[0]) < 0) {
    operator delete(v8[0]);
  }
}

void sub_1007B44E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

NSError *sub_1007B44F8(uint64_t a1, uint64_t a2, void *a3)
{
  memset(&__s1, 0, sizeof(__s1));
  uint64_t v5 = sub_1000A6958();
  if (!sub_1000A7CF8(v5, @"kAuthorizationDecisionsConfirmationToken", &__s1)) {
    goto LABEL_10;
  }
  uint64_t v6 = (const char *)[a3 UUIDString];
  size_t v7 = strlen(v6);
  size_t v8 = v7;
  char v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7 != HIBYTE(__s1.__r_.__value_.__r.__words[2])) {
      goto LABEL_10;
    }
    if (v7 != -1)
    {
      p_s1 = &__s1;
      goto LABEL_9;
    }
LABEL_26:
    sub_1002E93D4();
  }
  if (v7 != __s1.__r_.__value_.__l.__size_) {
    goto LABEL_10;
  }
  if (v7 == -1) {
    goto LABEL_26;
  }
  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
LABEL_9:
  if (!memcmp(p_s1, v6, v8))
  {
    long long v13 = 0;
    if ((v9 & 0x80) == 0) {
      return v13;
    }
    goto LABEL_22;
  }
LABEL_10:
  __int16 v16 = 0;
  sub_1007B4040(a2, (uint64_t)&v16);
  if (v16)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [[-[NSError description](v16, "description") UTF8String];
      *(_DWORD *)long long buf = 68289282;
      int v19 = 0;
      __int16 v20 = 2082;
      unint64_t v21 = "";
      __int16 v22 = 2082;
      id v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Attempting to apply archived auth decisions; early return due to failure to unarchive aut"
        "horization decisions\", \"errorDesc\":%{public, location:escape_only}s}",
        buf,
        0x1Cu);
    }
    long long v13 = v16;
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289026;
      int v19 = 0;
      __int16 v20 = 2082;
      unint64_t v21 = "";
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Did not fail to unarchive authorization decisions! This is unexpected unless the archive came from a Sydro or earlier device. Early returning because this function must no-op.\"}", buf, 0x12u);
    }
    long long v13 = +[NSError errorWithDomain:kCLErrorDomainPrivate code:5 userInfo:0];
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_22:
  }
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1007B4764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a2) {
    sub_1001C7F8C(exception_object);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007B4798(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v4 isValidCKP])
  {
    uint64_t v5 = *(void **)(a1 + 136);
    return [v5 intForKey:@"CorrectiveCompensationEnabled" atKeyPath:v4 defaultValue:0];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    size_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#compensation failed to load persistent store for client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    size_t v8 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v9 = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      id v12 = "";
      __int16 v13 = 2114;
      uint64_t v14 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#compensation failed to load persistent store for client", "{\"msg%{public}.0s\":\"#compensation failed to load persistent store for client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v9, 0x1Cu);
    }
    return 0;
  }
}

void sub_1007B4998(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  id v3 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    v7[0] = 68289282;
    v7[1] = 0;
    __int16 v8 = 2082;
    int v9 = "";
    __int16 v10 = 2114;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"stopped receiving location information\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
  }
  dispatch_source_cancel((dispatch_source_t)[*(id *)(v2 + 392) objectForKeyedSubscript:*(void *)(a1 + 32)]);
  [*(id *)(v2 + 392) removeObjectForKey:*(void *)(a1 + 32)];
  [objc_msgSend(*(id *)(v2 + 432), "objectForKeyedSubscript:", *(void *)(a1 + 32)) end];
  [*(id *)(v2 + 432) setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
  uint64_t v5 = *(void *)(a1 + 32);
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1001005FC(v2, v5, 10, 0, 0, 0, Current);
  sub_100138C88(v2, *(void **)(v2 + 480), (void *)(v2 + 440), *(void **)(a1 + 32));
}

void sub_1007B4B04(uint64_t a1, char a2)
{
  uint64_t v2 = *(int **)(a1 + 272);
  if (!v2)
  {
LABEL_6:
    sub_1007B5C18(a1, a2);
    return;
  }
  int v3 = *v2;
  switch(v3)
  {
    case 15:
      sub_1007B570C((void *)a1, a2);
      break;
    case 10:
      sub_1007B543C(a1, a2);
      break;
    case 6:
      sub_1007B4B38(a1, a2);
      return;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_1007B4B38(uint64_t a1, char a2)
{
  id v3 = sub_100103E24(a1, *(void *)(*(void *)(a1 + 272) + 8));
  std::string::size_type v4 = a2 & 3;
  if (v4 == 2) {
    goto LABEL_4;
  }
  if (v4 == 1)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User has selected 'WIU' on #reprompt for %{public}@, changing authorization.", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LODWORD(v27.__r_.__value_.__l.__data_) = 138543362;
      *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
      id v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onClientTrialRepromptNotification(CFOptionFlags)", "%s\n", v23);
      if (v23 != buf) {
        free(v23);
      }
    }
    sub_1007C7A1C(a1, (uint64_t)v3, 4u, 0, v7, 1, 1);
    goto LABEL_21;
  }
  if ((a2 & 3) != 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2050;
      *(void *)&unsigned char buf[14] = v4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#warning No user response to #reprompt for client %{public}@ (flags 0x%{public}lx)", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LODWORD(v27.__r_.__value_.__l.__data_) = 138543618;
      *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
      WORD2(v27.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 6) = v4;
      uint64_t v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onClientTrialRepromptNotification(CFOptionFlags)", "%s\n", v24);
      if (v24 != buf) {
        free(v24);
      }
    }
LABEL_21:
    int v25 = 0;
    goto LABEL_22;
  }
LABEL_4:
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User has authorized continued access for %@ at #reprompt", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    LODWORD(v27.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
    __int16 v22 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onClientTrialRepromptNotification(CFOptionFlags)", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  int v25 = 1;
LABEL_22:
  [*(id *)(a1 + 136) setDouble:@"ConsumptionPeriodBegin" forKey:v3 atKeyPath:CFAbsoluteTimeGetCurrent()];
  sub_10053B99C(0, &v27);
  int v9 = std::string::append(&v27, "locScoreInfoReport");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v9->__r_.__value_.__l + 2);
  *(_OWORD *)long long buf = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (buf[23] >= 0) {
    uint64_t v11 = buf;
  }
  else {
    uint64_t v11 = *(unsigned char **)buf;
  }
  id v12 = +[NSString stringWithUTF8String:v11];
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  unsigned int v13 = [*(id *)(a1 + 136) intForKey:@"ConsumptionCoolingRate" atKeyPath:v3 defaultValue:0];
  int v14 = [*(id *)(a1 + 136) intForKey:@"NextConsumptionThresholdScore" atKeyPath:v3 defaultValue:0];
  id v15 = [*(id *)(a1 + 136) intForKey:@"NextNextConsumptionThresholdScore" atKeyPath:v3 defaultValue:0];
  if (v25)
  {
    if (v3) {
      [v3 cppClientKey];
    }
    else {
      memset(buf, 0, 24);
    }
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    int v16 = *((_DWORD *)sub_100105304(a1 + 440, buf, (uint64_t)&unk_101D0B290, (long long **)&v27) + 12);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    [*(id *)(a1 + 136) setInt:v15 forKey:@"NextConsumptionThresholdScore" atKeyPath:v3];
    [*(id *)(a1 + 136) removeValueForKey:@"NextNextConsumptionThresholdScore" atKeyPath:v3];
    if (v13 + 1 < 2) {
      unsigned int v17 = v13 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if ((float)((float)v14 + (float)v14) < (float)(int)v15) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v17;
    }
    [*(id *)(a1 + 136) setInt:v18 forKey:@"ConsumptionCoolingRate" atKeyPath:v3];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v19 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68290562;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v3;
      __int16 v29 = 1026;
      int v30 = v14;
      __int16 v31 = 1026;
      int v32 = (int)v15;
      __int16 v33 = 1026;
      int v34 = v16;
      __int16 v35 = 1026;
      unsigned int v36 = v13;
      __int16 v37 = 1026;
      int v38 = v18;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting #reprompt thresholds\", \"Client\":%{public, location:escape_only}@, \"priorThreshold\":%{public}d, \"newThreshold\":%{public}d, \"currentUsage\":%{public}d, \"priorCooling\":%{public}d, \"newCooling\":%{public}d}", buf, 0x3Au);
    }
  }
  [*(id *)(a1 + 136) persist];
  AnalyticsSendEventLazy();
  v27.__r_.__value_.__r.__words[0] = 0;
  if (![+[NSFileManager defaultManager] removeItemAtPath:v12 error:&v27])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v27.__r_.__value_.__r.__words[0];
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Got error removing #reprompt checkpoint file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  return sub_1007DB360((uint64_t *)(a1 + 272), 0);
}

void sub_1007B53EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007B543C(uint64_t a1, char a2)
{
  id v4 = sub_100103E24(a1, *(void *)(*(void *)(a1 + 272) + 8));
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v5 = qword_102419538;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    *(_DWORD *)long long buf = 68289538;
    *(_DWORD *)unsigned int v13 = 0;
    *(_WORD *)&v13[4] = 2082;
    *(void *)&v13[6] = "";
    *(_WORD *)&v13[14] = 2114;
    *(void *)&v13[16] = v4;
    __int16 v14 = 1026;
    int v15 = a2 & 3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt User responded on BigSwitch prompt\", \"Client\":%{public, location:escape_only}@, \"response\":%{public}d}", buf, 0x22u);
  }
  uint64_t v7 = (unsigned int **)(a1 + 272);
  uint64_t v8 = a2 & 3;
  if (!v8 || v8 == 2) {
    goto LABEL_9;
  }
  if (v8 == 1)
  {
    sub_1007DD758(v6, "prefs:root=Privacy&path=LOCATION");
LABEL_9:
    sub_1007A9CA0(a1, (uint64_t)v4);
    goto LABEL_15;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  int v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543618;
    *(void *)unsigned int v13 = v4;
    *(_WORD *)&v13[8] = 2050;
    *(void *)&_OWORD v13[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#warning no user response to client %{public}@ (flags 0x%{public}lx)", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onClientPrefsNotification(CFOptionFlags)", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
LABEL_15:
  sub_1007DD47C(*v7);
  return sub_1007DB360((uint64_t *)v7, 0);
}

void sub_1007B570C(void *a1, char a2)
{
  id v4 = sub_100103E24((uint64_t)a1, *(void *)(a1[34] + 8));
  uint64_t v5 = *(const void **)(a1[34] + 48);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  BOOL v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v34 = 2082;
    __int16 v35 = "";
    __int16 v36 = 2114;
    id v37 = v4;
    __int16 v38 = 1026;
    int v39 = a2 & 3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt User responded on ImproveAccuracyPrefs prompt\", \"Client\":%{public, location:escape_only}@, \"response\":%{public}d}", buf, 0x22u);
  }
  uint64_t v7 = a1[129];
  uint64_t v8 = a1[130];
  if (v7 != v8)
  {
    int v9 = (unsigned int **)(a1 + 34);
    while (1)
    {
      long long v10 = *(const void **)(v7 + 24);
      if (v10)
      {
        uint64_t v11 = CFEqual(v10, v5);
        uint64_t v8 = a1[130];
        if (v11) {
          break;
        }
      }
      v7 += 32;
      if (v7 == v8) {
        goto LABEL_10;
      }
    }
    if (v7 != v8)
    {
      uint64_t v14 = a2 & 3;
      if (!v14 || v14 == 2) {
        goto LABEL_54;
      }
      if (v14 != 1)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        int v16 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v17 = "Unknown";
          if (*(void *)v7 == 1) {
            unsigned int v17 = "Bluetooth";
          }
          if (*(void *)v7) {
            uint64_t v18 = (char *)v17;
          }
          else {
            uint64_t v18 = "Wifi";
          }
          sub_100134750(buf, v18);
          if (SBYTE3(v37) >= 0) {
            int v19 = buf;
          }
          else {
            int v19 = *(uint8_t **)buf;
          }
          *(_DWORD *)int v25 = 136446466;
          *(void *)&v25[4] = v19;
          __int16 v26 = 2050;
          uint64_t v27 = v14;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#warning no user response for improve accuracy prefs notification %{public}s (flags 0x%{public}lx)", v25, 0x16u);
          if (SBYTE3(v37) < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v20 = "Unknown";
          if (*(void *)v7 == 1) {
            __int16 v20 = "Bluetooth";
          }
          if (*(void *)v7) {
            unint64_t v21 = (char *)v20;
          }
          else {
            unint64_t v21 = "Wifi";
          }
          sub_100134750(v25, v21);
          if (v28 >= 0) {
            __int16 v22 = v25;
          }
          else {
            __int16 v22 = *(unsigned char **)v25;
          }
          int v29 = 136446466;
          int v30 = v22;
          __int16 v31 = 2050;
          uint64_t v32 = v14;
          id v23 = (char *)_os_log_send_and_compose_impl();
          if (v28 < 0) {
            operator delete(*(void **)v25);
          }
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onImproveAccuracyPrefsNotification(CFOptionFlags)", "%s\n", v23);
          if (v23 != (char *)buf) {
            free(v23);
          }
        }
        goto LABEL_55;
      }
      if (*(void *)v7)
      {
        if (*(void *)v7 != 1)
        {
LABEL_54:
          double Current = CFAbsoluteTimeGetCurrent();
          sub_1007D17F0((double *)v7, Current);
LABEL_55:
          sub_1007D1754(v7);
          sub_1007DD47C(*v9);
          sub_1007DB360((uint64_t *)v9, 0);
          return;
        }
        int v15 = "prefs:root=Bluetooth";
      }
      else
      {
        int v15 = "prefs:root=WIFI";
      }
      sub_1007DD758(v11, v15);
      goto LABEL_54;
    }
  }
LABEL_10:
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v12 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v34 = 2082;
    __int16 v35 = "";
    __int16 v36 = 2050;
    id v37 = (id)v5;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"ImproveAccuracyNotification object not created for notification\", \"notification\":\"%{public}p\"}", buf, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  unsigned int v13 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v34 = 2082;
    __int16 v35 = "";
    __int16 v36 = 2050;
    id v37 = (id)v5;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "ImproveAccuracyNotification object not created for notification", "{\"msg%{public}.0s\":\"ImproveAccuracyNotification object not created for notification\", \"notification\":\"%{public}p\"}", buf, 0x1Cu);
  }
}

void sub_1007B5C18(uint64_t a1, char a2)
{
  id v4 = (unsigned int **)(a1 + 272);
  uint64_t v5 = sub_100103E24(a1, *(void *)(*(void *)(a1 + 272) + 8));
  if ([v5 isValidCKP])
  {
LABEL_6:
    uint64_t v8 = **v4;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    goto LABEL_9;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  BOOL v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *((void *)*v4 + 1);
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v90 = 2082;
    *(void *)&v90[2] = "";
    *(_WORD *)&v90[10] = 2114;
    *(void *)&unsigned char v90[12] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning onClientUserNotification fInflightPromptAuthorizationRequest failed to evaluate to a real, registered client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    goto LABEL_6;
  }
  uint64_t v8 = **v4;
LABEL_9:
  int v9 = qword_102419538;
  int v10 = a2 & 3;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v90 = 2082;
    *(void *)&v90[2] = "";
    *(_WORD *)&v90[10] = 2114;
    *(void *)&unsigned char v90[12] = v5;
    *(_WORD *)&v90[20] = 1026;
    *(_DWORD *)&v90[22] = v8;
    *(_WORD *)&v90[26] = 1026;
    *(_DWORD *)&v90[28] = a2 & 3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt User responded to prompt for client\", \"client\":%{public, location:escape_only}@, \"requestType\":%{public}d, \"response\":%{public}d}", buf, 0x28u);
  }
  if (v10 == 3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v90 = 2082;
      *(void *)&v90[2] = "";
      *(_WORD *)&v90[10] = 2114;
      *(void *)&unsigned char v90[12] = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt User dismissed prompt for client\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    v93[0] = @"ClientKey";
    v94[0] = [v5 userlessClientKeyPath];
    v93[1] = @"RequestType";
    v94[1] = +[NSNumber numberWithUnsignedInt:v8];
    v93[2] = @"Dismissed";
    v94[2] = &__kCFBooleanTrue;
    +[NSDictionary dictionaryWithObjects:v94 forKeys:v93 count:3];
    AnalyticsSendEvent();
    sub_1007B8A50(*v4, @"The user dismissed the prompt");
    sub_1007DB360((uint64_t *)v4, 0);
    return;
  }
  int v12 = *((unsigned __int8 *)*v4 + 4);
  int v13 = _os_feature_enabled_impl();
  uint64_t v14 = *v4;
  if (*((char *)*v4 + 39) < 0)
  {
    sub_1000DC48C(__p, *((void **)v14 + 2), *((void *)v14 + 3));
  }
  else
  {
    *(_OWORD *)std::string __p = *((_OWORD *)v14 + 1);
    uint64_t v84 = *((void *)v14 + 4);
  }
  switch((int)v8)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 11:
      if (v12)
      {
        if ((a2 & 3) != 0)
        {
          if (v10 != 1) {
            goto LABEL_35;
          }
          goto LABEL_39;
        }
LABEL_40:
        int v15 = 0;
        unsigned int v81 = 2;
        goto LABEL_41;
      }
      if (v13)
      {
        if ((a2 & 3) == 0)
        {
LABEL_35:
          unsigned int v81 = 0;
          int v10 = 1;
          char v19 = 1;
          int v15 = 1;
          goto LABEL_42;
        }
        if (v10 != 1)
        {
          unsigned int v81 = 0;
          int v15 = 0;
          int v10 = 1;
LABEL_41:
          char v19 = 1;
LABEL_42:
          if (*(_DWORD *)(a1 + 312) == 3)
          {
            *(unsigned char *)(a1 + 233) = 1;
            *(void *)long long buf = 0;
            *(void *)uint64_t v90 = buf;
            *(void *)&v90[8] = 0x2020000000;
            *(void *)&v90[16] = 0;
            __int16 v20 = *(void **)(a1 + 136);
            v82[0] = _NSConcreteStackBlock;
            v82[1] = 3221225472;
            _OWORD v82[2] = sub_1007DD438;
            v82[3] = &unk_1022C95C8;
            v82[4] = buf;
            [v20 iterateIdentitiesRelatedToKeyPath:v5 withBlock:v82];
            unint64_t v21 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"%@-%@", @"cl-user-zone", [+[NSNumber numberWithUnsignedInteger:*(void *)(*(void *)v90 + 24) + 1] stringValue]);
            _Block_object_dispose(buf, 8);
            if (!v10)
            {
LABEL_44:
              if ((v8 - 1) < 2) {
                char v22 = 1;
              }
              else {
                char v22 = v19;
              }
              if (v22)
              {
                uint64_t v23 = 0;
              }
              else
              {
                id v26 = sub_100103D58(a1, (uint64_t)v5);
                sub_1007DC2D0(a1, (uint64_t)v26, 0, 0);
                uint64_t v23 = 2;
              }
              goto LABEL_138;
            }
          }
          else
          {
            unint64_t v21 = 0;
            if (!v10) {
              goto LABEL_44;
            }
          }
          if (v15)
          {
            sub_1007AECF8(*(void **)(a1 + 136), (uint64_t)v5, 4, 1);
            [*(id *)(a1 + 136) setBool:1 forKey:@"AuthorizationPromptOptionTypeNegative" atKeyPath:v5];
            if (v12) {
              uint64_t v23 = 14;
            }
            else {
              uint64_t v23 = 13;
            }
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            uint64_t v24 = qword_102419538;
            if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_138;
            }
            *(_DWORD *)long long buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)uint64_t v90 = 2082;
            *(void *)&v90[2] = "";
            *(_WORD *)&v90[10] = 2114;
            *(void *)&unsigned char v90[12] = v5;
            int v25 = "{\"msg%{public}.0s\":\"#TemporaryAuth Client has been granted temporary negative status\", \"Client\":"
                  "%{public, location:escape_only}@}";
          }
          else
          {
            if (v21) {
              uint64_t v5 = [v5 clientKeyPathWithReplacementSubIdentityId:v21 subIdentityType:122];
            }
            sub_1007AECF8(*(void **)(a1 + 136), (uint64_t)v5, 1, 1);
            [*(id *)(a1 + 136) removeValueForKey:@"AuthorizationPromptOptionTypeNegative" atKeyPath:v5];
            if (v12) {
              uint64_t v23 = 12;
            }
            else {
              uint64_t v23 = 1;
            }
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            uint64_t v24 = qword_102419538;
            if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_138;
            }
            *(_DWORD *)long long buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)uint64_t v90 = 2082;
            *(void *)&v90[2] = "";
            *(_WORD *)&v90[10] = 2114;
            *(void *)&unsigned char v90[12] = v5;
            int v25 = "{\"msg%{public}.0s\":\"#TemporaryAuth Client has been granted temporary positive status\", \"ClientKey"
                  "\":%{public, location:escape_only}@}";
          }
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0x1Cu);
LABEL_138:
          int v63 = *(_DWORD *)(a1 + 312) - 1;
          if (v63 > 2) {
            unsigned int v64 = 0;
          }
          else {
            unsigned int v64 = dword_101D2E048[v63];
          }
          if ((v8 & 0xFFFFFFFD) == 1) {
            uint64_t v37 = 2;
          }
          else {
            uint64_t v37 = v64;
          }
          long long v65 = (void *)HIBYTE(v84);
          if (v84 < 0) {
            long long v65 = __p[1];
          }
          if (v65)
          {
            sub_1007DC03C(a1, (uint64_t)v5, (uint64_t *)__p);
          }
          else
          {
            id v66 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:v5];
            if ([v66 isValidCKP]) {
              [*(id *)(a1 + 136) removeValueForKey:@"AuthorizationPurposeKey" atKeyPath:v66];
            }
          }
          goto LABEL_167;
        }
      }
      else
      {
        if ((a2 & 3) == 0) {
          goto LABEL_40;
        }
        if (v10 == 1)
        {
LABEL_39:
          unsigned int v81 = 0;
          int v15 = 0;
          goto LABEL_41;
        }
      }
      int v10 = 0;
      char v19 = 0;
      int v15 = 0;
      unsigned int v81 = 4;
      goto LABEL_42;
    case 7:
    case 8:
      if (v10 == 1)
      {
        uint64_t v18 = 0;
        unsigned int v81 = 4;
      }
      else
      {
        if (v10 != 2)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          std::string v78 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 68290051;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)uint64_t v90 = 2082;
            *(void *)&v90[2] = "";
            *(_WORD *)&v90[10] = 2114;
            *(void *)&unsigned char v90[12] = v5;
            *(_WORD *)&v90[20] = 1026;
            *(_DWORD *)&v90[22] = a2 & 3;
            *(_WORD *)&v90[26] = 2082;
            *(void *)&v90[28] = "assert";
            __int16 v91 = 2081;
            int v92 = "false";
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Impossible response to WhenInUse Upgrade to Always prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v79 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            *(_DWORD *)long long buf = 68290051;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)uint64_t v90 = 2082;
            *(void *)&v90[2] = "";
            *(_WORD *)&v90[10] = 2114;
            *(void *)&unsigned char v90[12] = v5;
            *(_WORD *)&v90[20] = 1026;
            *(_DWORD *)&v90[22] = a2 & 3;
            *(_WORD *)&v90[26] = 2082;
            *(void *)&v90[28] = "assert";
            __int16 v91 = 2081;
            int v92 = "false";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v79, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Impossible response to WhenInUse Upgrade to Always prompt", "{\"msg%{public}.0s\":\"Impossible response to WhenInUse Upgrade to Always prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v80 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 68290051;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)uint64_t v90 = 2082;
            *(void *)&v90[2] = "";
            *(_WORD *)&v90[10] = 2114;
            *(void *)&unsigned char v90[12] = v5;
            *(_WORD *)&v90[20] = 1026;
            *(_DWORD *)&v90[22] = a2 & 3;
            *(_WORD *)&v90[26] = 2082;
            *(void *)&v90[28] = "assert";
            __int16 v91 = 2081;
            int v92 = "false";
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Impossible response to WhenInUse Upgrade to Always prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
          }
          goto LABEL_209;
        }
        unsigned int v81 = 3;
        uint64_t v18 = 1;
      }
      if (*(void *)(a1 + 264))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        std::string::size_type v48 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v49 = *(void *)(a1 + 288) != 0;
          *(_DWORD *)long long buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)uint64_t v90 = 2082;
          *(void *)&v90[2] = "";
          *(_WORD *)&v90[10] = 2114;
          *(void *)&unsigned char v90[12] = v5;
          *(_WORD *)&v90[20] = 2050;
          *(void *)&v90[22] = v81;
          *(_WORD *)&v90[30] = 1026;
          *(_DWORD *)&v90[32] = v49;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#provisional prompt response\", \"Client\":%{public, location:escape_only}@, \"GrantedStatus\":%{public, location:CLClientAuthorizationStatus}lld, \"FollowupPending\":%{public}hhd}", buf, 0x2Cu);
        }
        [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
        double v51 = v50;
        double v52 = *(double *)(a1 + 304);
        *(void *)(a1 + 304) = 0;
        double v53 = -1.0;
        [*(id *)(a1 + 136) doubleForKey:@"ProvisionalMonitoringBegin" atKeyPath:v5 defaultValue:-1.0];
        double v55 = v54;
        if (v54 != -1.0)
        {
          double Current = CFAbsoluteTimeGetCurrent();
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          double v53 = Current - v55;
          long long v57 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 68289538;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)uint64_t v90 = 2082;
            *(void *)&v90[2] = "";
            *(_WORD *)&v90[10] = 2114;
            *(void *)&unsigned char v90[12] = v5;
            *(_WORD *)&v90[20] = 2050;
            *(double *)&v90[22] = v53;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#provisional total duration\", \"ClientKey\":%{public, location:escape_only}@, \"duration\":\"%{public}f\"}", buf, 0x26u);
          }
        }
        uint64_t v58 = *(void *)(a1 + 288);
        if (v58)
        {
          (*(void (**)(uint64_t, uint64_t))(v58 + 16))(v58, v18);

          *(void *)(a1 + 288) = 0;
          uint64_t v23 = 3;
        }
        else
        {
          uint64_t v23 = 0;
        }
        id v72 = sub_100103D58(a1, (uint64_t)v5);
        sub_1007DC2D0(a1, (uint64_t)v72, 1, 0);
        uint64_t v37 = 0;
        double v35 = v51 - v52;
        goto LABEL_170;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      long long v61 = qword_102419538;
      double v35 = -1.0;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v62 = *(void *)(a1 + 288) != 0;
        *(_DWORD *)long long buf = 68289794;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v90 = 2082;
        *(void *)&v90[2] = "";
        *(_WORD *)&v90[10] = 2114;
        *(void *)&unsigned char v90[12] = v5;
        *(_WORD *)&v90[20] = 2050;
        *(void *)&v90[22] = v81;
        *(_WORD *)&v90[30] = 1026;
        *(_DWORD *)&v90[32] = v62;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Non-#provisional WIU to Always #AuthPrompt prompt response\", \"ClientKey\":%{public, location:escape_only}@, \"GrantedStatus\":%{public, location:CLClientAuthorizationStatus}lld, \"BypassingSomeoneElseOnDeck\":%{public}hhd}", buf, 0x2Cu);
      }
      uint64_t v23 = 0;
      uint64_t v37 = 0;
      goto LABEL_169;
    case 9:
      uint64_t v38 = a2 & 3;
      if (v38 == 1) {
        uint64_t v23 = 4;
      }
      else {
        uint64_t v23 = 5;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v39 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = "NO";
        *(_DWORD *)long long buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(void *)&v90[2] = "";
        *(_WORD *)uint64_t v90 = 2082;
        if (v38 == 1) {
          uint64_t v40 = "YES";
        }
        *(_WORD *)&v90[10] = 2114;
        *(void *)&unsigned char v90[12] = v5;
        *(_WORD *)&v90[20] = 2082;
        *(void *)&v90[22] = v40;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Temporary relief from #compensation response\", \"ClientKey\":%{public, location:escape_only}@, \"TempPrecise\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      if (v38 == 1) {
        int v41 = 2;
      }
      else {
        int v41 = 8;
      }
      sub_1007AECF8(*(void **)(a1 + 136), (uint64_t)v5, v41, 1);
      uint64_t v42 = sub_100101E40([*(id *)(a1 + 136) readOnlyStoreAtKeyPath:v5].dictionary);
      uint64_t v43 = v42;
      uint64_t v44 = CKSyncEngine_ptr;
      if (v42)
      {
        if (v42 == 2)
        {
          int v45 = 4;
          goto LABEL_177;
        }
        if (v42 == 4)
        {
          int v45 = 3;
LABEL_177:
          unsigned int v81 = v45;
          goto LABEL_187;
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        unsigned __int8 v73 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)long long buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)uint64_t v90 = 2082;
          *(void *)&v90[2] = "";
          *(_WORD *)&v90[10] = 2114;
          *(void *)&unsigned char v90[12] = v5;
          *(_WORD *)&v90[20] = 2050;
          *(void *)&v90[22] = v43;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unexpected authorization status for #TemporaryAuth precise promptee\", \"ClientKey\":%{public, location:escape_only}@, \"AuthMask\":%{public}lu}", buf, 0x26u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        int v74 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          *(_DWORD *)long long buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)uint64_t v90 = 2082;
          *(void *)&v90[2] = "";
          *(_WORD *)&v90[10] = 2114;
          *(void *)&unsigned char v90[12] = v5;
          *(_WORD *)&v90[20] = 2050;
          *(void *)&v90[22] = v43;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v74, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unexpected authorization status for #TemporaryAuth precise promptee", "{\"msg%{public}.0s\":\"Unexpected authorization status for #TemporaryAuth precise promptee\", \"ClientKey\":%{public, location:escape_only}@, \"AuthMask\":%{public}lu}", buf, 0x26u);
        }
        unsigned int v81 = 2;
        uint64_t v44 = CKSyncEngine_ptr;
      }
      else
      {
        unsigned int v81 = 0;
      }
LABEL_187:
      [v44[341] numberWithBool:v38 == 1];
      uint64_t v37 = 0;
LABEL_168:
      double v35 = -1.0;
LABEL_169:
      double v53 = -1.0;
LABEL_170:
      v85[0] = @"ClientKey";
      v86[0] = [v5 userlessClientKeyPath];
      v85[1] = @"Special";
      v86[1] = +[NSNumber numberWithUnsignedInt:v23];
      v85[2] = @"RequestType";
      v86[2] = +[NSNumber numberWithUnsignedInt:v8];
      v85[3] = @"GrantedStatus";
      v86[3] = +[NSNumber numberWithUnsignedInt:v81];
      v85[4] = @"CCStatus";
      v86[4] = +[NSNumber numberWithUnsignedInt:v37];
      v85[5] = @"OnDeckDuration";
      v86[5] = +[NSNumber numberWithDouble:v35];
      v85[6] = @"ProvisionalMonitoringDuration";
      v86[6] = +[NSNumber numberWithDouble:v53];
      +[NSDictionary dictionaryWithObjects:v86 forKeys:v85 count:7];
      AnalyticsSendEvent();
      sub_1007C7A1C(a1, (uint64_t)v5, v81, v37, v71, 1, 1);
      sub_1007DD47C(*v4);
      sub_1007DB360((uint64_t *)v4, 0);
      goto LABEL_171;
    case 12:
      uint64_t v32 = a2 & 3;
      if (v32 == 1) {
        uint64_t v23 = 6;
      }
      else {
        uint64_t v23 = 7;
      }
      if ((a2 & 3) == 1) {
        uint64_t v33 = 3;
      }
      else {
        uint64_t v33 = 2;
      }
      [*(id *)(a1 + 136) setInt:v33 forKey:@"IncidentalUseMode" atKeyPath:v5];
      +[NSNumber numberWithBool:v32 == 1];
      [*(id *)(a1 + 1096) removeObject:v5];
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v34 = qword_102419538;
      double v35 = -1.0;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v36 = "Disallowed";
        *(_DWORD *)long long buf = 68289538;
        *(void *)&v90[2] = "";
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v90 = 2082;
        if (v32 == 1) {
          __int16 v36 = "Allowed";
        }
        *(_WORD *)&v90[10] = 2114;
        *(void *)&unsigned char v90[12] = v5;
        *(_WORD *)&v90[20] = 2082;
        *(void *)&v90[22] = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt response\", \"ClientKey\":%{public, location:escape_only}@, \"IncidentalUseMode\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      uint64_t v37 = 0;
      unsigned int v81 = 4;
      goto LABEL_169;
    case 13:
    case 14:
      if (v10 == 2)
      {
        int v17 = 0;
        uint64_t v16 = 0;
LABEL_104:
        [*(id *)(a1 + 136) setInt:v16 forKey:@"LocationButtonUseMode" atKeyPath:v5];
        id v46 = *(void **)(a1 + 136);
        if (v17)
        {
          sub_1007AECF8(v46, (uint64_t)v5, 1, 1);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          CFStringRef v47 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)uint64_t v90 = 2082;
            *(void *)&v90[2] = "";
            *(_WORD *)&v90[10] = 2114;
            *(void *)&unsigned char v90[12] = v5;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth granted temporary auth , allowed chosen on #LocationButtonUse prompt\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          }
          unsigned int v81 = 0;
          uint64_t v23 = 8;
        }
        else
        {
          unint64_t v59 = sub_100101E40([objc_msgSend(objc_msgSend(v46, "readonlyStoreAtKeyPath:", v5), "dictionary");
          if (v59 >= 5) {
            int v60 = 2;
          }
          else {
            int v60 = dword_101D2E054[v59];
          }
          unsigned int v81 = v60;
          uint64_t v23 = 9;
        }
        int v69 = *(_DWORD *)(a1 + 312) - 1;
        if (v69 > 2) {
          unsigned int v70 = 0;
        }
        else {
          unsigned int v70 = dword_101D2E048[v69];
        }
        if (v8 == 13) {
          uint64_t v37 = 2;
        }
        else {
          uint64_t v37 = v70;
        }
LABEL_167:
        *(_DWORD *)(a1 + 312) = 0;
        goto LABEL_168;
      }
      if (v10 == 1)
      {
        uint64_t v16 = 2;
        int v17 = 1;
        goto LABEL_104;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v75 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v90 = 2082;
        *(void *)&v90[2] = "";
        *(_WORD *)&v90[10] = 2114;
        *(void *)&unsigned char v90[12] = v5;
        *(_WORD *)&v90[20] = 1026;
        *(_DWORD *)&v90[22] = a2 & 3;
        *(_WORD *)&v90[26] = 2082;
        *(void *)&v90[28] = "assert";
        __int16 v91 = 2081;
        int v92 = "false";
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Impossible response to LocationButtonUse prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      uint64_t v76 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        *(_DWORD *)long long buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v90 = 2082;
        *(void *)&v90[2] = "";
        *(_WORD *)&v90[10] = 2114;
        *(void *)&unsigned char v90[12] = v5;
        *(_WORD *)&v90[20] = 1026;
        *(_DWORD *)&v90[22] = a2 & 3;
        *(_WORD *)&v90[26] = 2082;
        *(void *)&v90[28] = "assert";
        __int16 v91 = 2081;
        int v92 = "false";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v76, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Impossible response to LocationButtonUse prompt", "{\"msg%{public}.0s\":\"Impossible response to LocationButtonUse prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      int64_t v77 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 68290051;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v90 = 2082;
        *(void *)&v90[2] = "";
        *(_WORD *)&v90[10] = 2114;
        *(void *)&unsigned char v90[12] = v5;
        *(_WORD *)&v90[20] = 1026;
        *(_DWORD *)&v90[22] = a2 & 3;
        *(_WORD *)&v90[26] = 2082;
        *(void *)&v90[28] = "assert";
        __int16 v91 = 2081;
        int v92 = "false";
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Impossible response to LocationButtonUse prompt\", \"client\":%{public, location:escape_only}@, \"flags\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x36u);
      }
LABEL_209:
      abort_report_np();
      __break(1u);
LABEL_210:
      dispatch_once(&qword_102419530, &stru_1022C9768);
LABEL_72:
      v87[0] = 67240448;
      v87[1] = a2 & 3;
      __int16 v88 = 1026;
      *(_DWORD *)((char *)v5 + 10) = v8;
      __int16 v31 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::onClientUserNotification(CFOptionFlags)", "%s\n", v31);
      if (v31 != (char *)buf) {
        free(v31);
      }
LABEL_171:
      if (SHIBYTE(v84) < 0) {
        operator delete(__p[0]);
      }
      return;
    case 16:
      uint64_t v27 = a2 & 3;
      if (v27 == 1) {
        uint64_t v23 = 10;
      }
      else {
        uint64_t v23 = 11;
      }
      unint64_t v28 = sub_100101E40([objc_msgSend(*(id *)(a1 + 136), "readonlyStoreAtKeyPath:", v5) dictionary]);
      if (v28 > 4) {
        int v29 = 2;
      }
      else {
        int v29 = dword_101D2E054[v28];
      }
      unsigned int v81 = v29;
      +[NSNumber numberWithBool:v27 == 1];
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      long long v67 = qword_102419538;
      double v35 = -1.0;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        int v68 = "Disallowed";
        *(_DWORD *)long long buf = 68289538;
        *(void *)&v90[2] = "";
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v90 = 2082;
        if (v27 == 1) {
          int v68 = "Allowed";
        }
        *(_WORD *)&v90[10] = 2114;
        *(void *)&unsigned char v90[12] = v5;
        *(_WORD *)&v90[20] = 2082;
        *(void *)&v90[22] = v68;
        _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt response\", \"ClientKey\":%{public, location:escape_only}@, \"IncidentalUseMode\":%{public, location:escape_only}s}", buf, 0x26u);
      }
      uint64_t v37 = 0;
      goto LABEL_169;
    default:
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v30 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)long long buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = a2 & 3;
        *(_WORD *)uint64_t v90 = 1026;
        *(_DWORD *)&v90[2] = v8;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_FAULT, "#AuthPrompt Received response (%{public}d) for invalid/unrecognized response type (%{public}d)", buf, 0xEu);
      }
      if (!sub_10013D1A0(115, 0)) {
        goto LABEL_171;
      }
      uint64_t v5 = v87;
      bzero(buf, 0x65CuLL);
      if (qword_102419530 == -1) {
        goto LABEL_72;
      }
      goto LABEL_210;
  }
}

void sub_1007B7C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007B7CAC(uint64_t a1, uint64_t a2)
{
  id v3 = sub_100103D58(a1, a2);

  sub_10009D93C(a1, v3, 1);
}

CFStringRef sub_1007B7CEC(uint64_t a1, void *a2, void *a3)
{
  sub_100103240();
  int v6 = sub_10010145C();
  if (!a3 || !v6) {
    goto LABEL_5;
  }
  sub_100134750(&__p, (char *)[a3 UTF8String]);
  BOOL v7 = sub_1012098A8((uint64_t **)&__p);
  BOOL v8 = v7;
  if (SBYTE3(v28) < 0)
  {
    operator delete(__p);
    if (!v8) {
      goto LABEL_8;
    }
LABEL_5:
    id v9 = [*(id *)(a1 + 136) stringForKey:@"PlatformSpecificBundleId" atKeyPath:a2 defaultValue:0];
    if (!v9) {
      id v9 = [a2 bundleId];
    }
LABEL_11:
    id v13 = +[NSMutableArray array];
    uint64_t v14 = sub_1001BA55C();
    int v15 = (void *)sub_100802EC0(v14);
    if (v15) {
      [v13 addObject:v15];
    }
    if (v9)
    {
      uint64_t v23 = 0;
      id v16 = [objc_alloc((Class)LSApplicationRecord) initWithBundleIdentifier:v9 allowPlaceholder:0 error:&v23];
      if (v23)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        int v17 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
        {
          id v18 = [v9 UTF8String];
          std::string __p = (void *)68289538;
          __int16 v25 = 2082;
          id v26 = "";
          __int16 v27 = 2082;
          id v28 = v18;
          __int16 v29 = 2114;
          uint64_t v30 = v23;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Could not get LSApplicationRecord from cfDisplayIdentifier\", \"cfDisplayIdentifier\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x26u);
        }
      }
      if (v16)
      {
        CFStringRef v19 = (const __CFString *)[v16 localizedNameWithPreferredLocalizations:v13];
        CFStringRef v12 = v19;
        if (v19)
        {
          CFRetain(v19);
LABEL_26:

          return v12;
        }
      }
      __int16 v20 = (__CFString *)sub_101209378(v9);
      CFStringRef v21 = sub_1007D9B50(v20);
    }
    else
    {
      if (![a2 bundlePath])
      {
        CFStringRef v12 = 0;
        goto LABEL_26;
      }
      CFStringRef v21 = sub_1007D9B50((__CFString *)[a2 bundlePath]);
    }
    CFStringRef v12 = v21;
    goto LABEL_26;
  }
  if (v7) {
    goto LABEL_5;
  }
LABEL_8:
  int v10 = sub_101209404(a3);
  if (!v10)
  {
    id v9 = 0;
    goto LABEL_11;
  }
  uint64_t v11 = sub_1001BA55C();
  CFStringRef v12 = sub_100041DC4(v11, v10, _kCFBundleDisplayNameKey, 0);
  CFRelease(v10);
  return v12;
}

void sub_1007B7F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CFString *sub_1007B7FA0(uint64_t a1, uint64_t a2)
{
  id v3 = sub_100103E24(a1, a2);
  CFErrorRef errorPtr = 0;
  id v4 = (__CFBundle *)sub_1007B83B4(a1, (uint64_t)v3);
  if (!v4)
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022C97E8);
    }
    uint64_t v5 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      int v20 = 0;
      __int16 v21 = 2082;
      char v22 = "";
      __int16 v23 = 2114;
      id v24 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"copyCombinedClientPurpose couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022C97E8);
      }
    }
    int v6 = qword_102419528;
    if (os_signpost_enabled((os_log_t)qword_102419528))
    {
      *(_DWORD *)long long buf = 68289282;
      int v20 = 0;
      __int16 v21 = 2082;
      char v22 = "";
      __int16 v23 = 2114;
      id v24 = v3;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "copyCombinedClientPurpose couldn't get bundle for client", "{\"msg%{public}.0s\":\"copyCombinedClientPurpose couldn't get bundle for client\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  BOOL v7 = sub_1007B847C(a1, v3, v4, 0, 1, 0);
  if (v7)
  {
    BOOL v8 = v7;
    goto LABEL_11;
  }
  BOOL v8 = sub_1007B847C(a1, v3, v4, 0, 0, 0);
  if (!v8)
  {
LABEL_11:
    CFStringRef v9 = 0;
    if (!v4) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  int v15 = sub_1007B847C(a1, v3, v4, 1u, 0, 0);
  uint64_t v16 = sub_1001BA55C();
  if (v15)
  {
    CFStringRef v9 = (const __CFString *)sub_100802D54(v16, @"LOCATION_CLIENT_PERMISSION_MESSAGE");
    CFStringRef v17 = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@ %@", v9, &errorPtr, v8, v15);
  }
  else
  {
    CFStringRef v9 = (const __CFString *)sub_100802D54(v16, @"LOCATION_CLIENT_PERMISSION_MESSAGE_REDUCED");
    CFStringRef v17 = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", v9, &errorPtr, v8);
  }
  BOOL v8 = (__CFString *)v17;
  if (v4) {
LABEL_12:
  }
    CFRelease(v4);
LABEL_13:
  if (v9) {
    CFRelease(v9);
  }
  if (errorPtr)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      id v11 = [[-[__CFError localizedDescription](errorPtr, "localizedDescription") UTF8String];
      *(_DWORD *)long long buf = 68289538;
      int v20 = 0;
      __int16 v21 = 2082;
      char v22 = "";
      __int16 v23 = 2114;
      id v24 = v3;
      __int16 v25 = 2082;
      id v26 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Error, couldn't copyCombinedClientPurpose for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    CFStringRef v12 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      id v13 = [[-[__CFError localizedDescription](errorPtr, "localizedDescription") UTF8String];
      *(_DWORD *)long long buf = 68289538;
      int v20 = 0;
      __int16 v21 = 2082;
      char v22 = "";
      __int16 v23 = 2114;
      id v24 = v3;
      __int16 v25 = 2082;
      id v26 = v13;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Error, couldn't copyCombinedClientPurpose for client due to error returned by CFStringCreateStringWithValidatedFormat.", "{\"msg%{public}.0s\":\"#Error, couldn't copyCombinedClientPurpose for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
    }
  }
  return v8;
}

id sub_1007B83B4(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if (result)
  {
    id v4 = result;
    id v5 = [*(id *)(a1 + 136) stringForKey:@"BundleId" atKeyPath:result defaultValue:0];
    id v6 = [*(id *)(a1 + 136) stringForKey:@"PlatformSpecificBundleId" atKeyPath:v4 defaultValue:0];
    CFStringRef v7 = (const __CFString *)[*(id *)(a1 + 136) stringForKey:@"BundlePath" atKeyPath:v4 defaultValue:0];
    return (id)sub_10120A238(v6, v5, v7, 0);
  }
  return result;
}

__CFString *sub_1007B847C(uint64_t a1, void *a2, __CFBundle *a3, unsigned int a4, int a5, __CFString *a6)
{
  if (!a3) {
    return 0;
  }
  if (a4 >= 2)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543618;
      id v28 = a2;
      __int16 v29 = 1026;
      LODWORD(v30) = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Requesting client (%{public}@) purpose for unsupported registration type %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFStringRef CLClientManager::copyClientPurposeForRegistrationResult(CLClientKeyPath *, CFBundleRef, CLClientRegistrationResult, BOOL, CFStringRef)", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    return 0;
  }
  if (a5)
  {
    uint64_t v12 = sub_1001BA55C();
    id v13 = &off_1022B5DF8;
LABEL_11:
    CFStringRef v14 = sub_100041DC4(v12, a3, *v13, 0);
    goto LABEL_15;
  }
  if (!a4)
  {
    uint64_t v23 = sub_1001BA55C();
    CFStringRef v9 = (__CFString *)sub_100041DC4(v23, a3, @"NSLocationAlwaysUsageDescription", 0);
    if (v9) {
      goto LABEL_16;
    }
    uint64_t v12 = sub_1001BA55C();
    id v13 = &off_1022B5DE0;
    goto LABEL_11;
  }
  id v16 = [(__CFString *)a6 length];
  uint64_t v12 = sub_1001BA55C();
  if (!v16)
  {
    id v13 = &off_1022B5DF0;
    goto LABEL_11;
  }
  CFStringRef v14 = sub_1008027A8(v12, a3, @"NSLocationAuthorizationPurposeDescriptionDictionary", a6, 0);
LABEL_15:
  CFStringRef v9 = (__CFString *)v14;
  if (v14)
  {
LABEL_16:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    CFStringRef v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412546;
      id v28 = a2;
      __int16 v29 = 2080;
      id v30 = [(__CFString *)v9 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "purpose string from %@'s bundle: '%s'", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      [(__CFString *)v9 UTF8String];
      __int16 v25 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CFStringRef CLClientManager::copyClientPurposeForRegistrationResult(CLClientKeyPath *, CFBundleRef, CLClientRegistrationResult, BOOL, CFStringRef)", "%s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    return v9;
  }
  id v19 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if (![v19 isValidCKP]) {
    return 0;
  }
  id v20 = [*(id *)(a1 + 136) stringForKey:@"Purpose" atKeyPath:v19 defaultValue:0];
  CFStringRef v9 = 0;
  if (a4 != 1)
  {
    __int16 v21 = v20;
    if (v20)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      char v22 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 138412546;
        id v28 = v19;
        __int16 v29 = 2080;
        id v30 = [v21 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "purpose string from %@'s property: '%s'", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        [v21 UTF8String];
        id v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CFStringRef CLClientManager::copyClientPurposeForRegistrationResult(CLClientKeyPath *, CFBundleRef, CLClientRegistrationResult, BOOL, CFStringRef)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
      }
      CFRetain(v21);
      return (__CFString *)v21;
    }
  }
  return v9;
}

void sub_1007B8A50(unsigned int *a1, uint64_t a2)
{
  if (a2)
  {
    NSErrorUserInfoKey v4 = NSDebugDescriptionErrorKey;
    uint64_t v5 = a2;
    id v3 = +[NSDictionary dictionaryWithObjects:&v5 forKeys:&v4 count:1];
  }
  else
  {
    id v3 = 0;
  }
  +[NSError errorWithDomain:kCLErrorDomain code:18 userInfo:v3];
  sub_1007DD47C(a1);
}

void sub_1007B8B08(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007E1FA0;
  block[3] = &unk_10229FED8;
  block[4] = a1;
  if (qword_10247E170 != -1) {
    dispatch_once(&qword_10247E170, block);
  }
}

uint64_t sub_1007B8B90(uint64_t a1, uint64_t a2, unsigned int *a3, NSDictionary *a4)
{
  uint64_t v8 = *a3;
  id v9 = sub_100138248(a2, 0);
  int v10 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 96))(a2);
  id v11 = sub_100122964(a1, (uint64_t)v9);
  uint64_t v12 = (uint64_t)[v11 objectAtIndexedSubscript:0];
  id v13 = [[-[NSArray objectAtIndexedSubscript:](v11, "objectAtIndexedSubscript:", 1) intValue];
  int v14 = sub_100BD6378(a2);
  if (v12 == 2 && (sub_100BD6370(a2) & v14 & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v49 = 2082;
      *(void *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(void *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing prompt because the client asked us not to\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    goto LABEL_24;
  }
  if ([*(id *)(a1 + 120) locationRestricted])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v15 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v49 = 2082;
      *(void *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(void *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt location services settings are frozen by restrictions - denying\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1007B8A50(a3, @"Restrictions are enabled.  Changing authorization isn't allowed");
    uint64_t v12 = 2;
    if (v13 <= 8 && ((1 << (char)v13) & 0x103) != 0) {
      return (uint64_t)v13;
    }
    return v12;
  }
  if ([*(id *)(a1 + 120) locationServicesEnabledStatus])
  {
    if (v12 > 4 || v12 == 3) {
      return v12;
    }
    if (*(void *)(a1 + 272))
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v16 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        id v17 = +[CLClientKeyPath nullClientKeyPath];
        id v18 = *(unsigned int **)(a1 + 272);
        if (v18)
        {
          id v17 = (id)*((void *)v18 + 1);
          uint64_t v19 = *v18;
        }
        else
        {
          uint64_t v19 = 5;
        }
        *(_DWORD *)long long buf = 68290050;
        *(_WORD *)BOOL v49 = 2082;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(void *)&v49[2] = "";
        *(_WORD *)&v49[10] = 2114;
        *(void *)&v49[12] = v9;
        *(_WORD *)&v49[20] = 2050;
        *(void *)&v49[22] = v8;
        *(_WORD *)&v49[30] = 2114;
        uint64_t v50 = (uint64_t)v17;
        __int16 v51 = 2050;
        uint64_t v52 = v19;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring request because authorization in progress\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inflightClientKey\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x3Au);
      }
      sub_1007B8A50(a3, @"App is already presenting the user with an authorization prompt");
      return v12;
    }
    if ([*(id *)(a1 + 120) locationServicesEnabledStatus] != 1) {
      return v12;
    }
    if (v8 <= 0xB)
    {
      if (((1 << v8) & 0xB9E) != 0)
      {
        if (sub_100BEB460(a2))
        {
          sub_100BD4E6C(a2);
          char v22 = sub_1000B5784();
          unsigned int v23 = sub_101209314([(CLClientKeyPath *)v22 bundleId]);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          id v24 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 68289794;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)BOOL v49 = 2082;
            *(void *)&v49[2] = "";
            *(_WORD *)&v49[10] = 2114;
            *(void *)&v49[12] = v22;
            *(_WORD *)&v49[20] = 2114;
            *(void *)&v49[22] = v9;
            *(_WORD *)&v49[30] = 1026;
            LODWORD(v50) = v23;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt check if #webClip\", \"NaturalIdentity\":%{public, location:escape_only}@, \"Client\":%{public, location:escape_only}@, \"isWebClip\":%{public}hhd}", buf, 0x2Cu);
          }
          if (v23)
          {
            CFStringRef v44 = @"IsWebClip";
            int v45 = +[NSNumber numberWithBool:1];
            a4 = +[NSDictionary dictionaryWithObjects:&v45 forKeys:&v44 count:1];
          }
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        __int16 v25 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)BOOL v49 = 2082;
          *(void *)&v49[2] = "";
          *(_WORD *)&v49[10] = 1026;
          *(_DWORD *)&v49[12] = v8;
          *(_WORD *)&v49[16] = 2114;
          *(void *)&v49[18] = v9;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Showing #AuthPrompt\", \"requestType\":%{public}d, \"Client\":%{public, location:escape_only}@}", buf, 0x22u);
        }
        sub_1007E1FD0((uint64_t)v42, (uint64_t)a3);
        BOOL v26 = sub_1007A7700(a1, (uint64_t)v9, v10, (uint64_t)v42, (uint64_t)a4);
        sub_1007E1E64((uint64_t)v42);
        if (v26) {
          goto LABEL_77;
        }
        return v12;
      }
      if (v8 == 5)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v38 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
          return v12;
        }
        *(_DWORD *)long long buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)BOOL v49 = 2082;
        *(void *)&v49[2] = "";
        *(_WORD *)&v49[10] = 2114;
        *(void *)&v49[12] = v9;
        int v39 = "{\"msg%{public}.0s\":\"#AuthPrompt #Notice ERROR: Client is depending on legacy on-demand authorization, w"
              "hich is not supported for new apps\", \"Client\":%{public, location:escape_only}@}";
LABEL_92:
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v39, buf, 0x1Cu);
        return v12;
      }
      if (v8 == 10)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v38 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
          return v12;
        }
        *(_DWORD *)long long buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)BOOL v49 = 2082;
        *(void *)&v49[2] = "";
        *(_WORD *)&v49[10] = 2114;
        *(void *)&v49[12] = v9;
        int v39 = "{\"msg%{public}.0s\":\"#AuthPrompt Client requested a big switch prompt, but the big switch is already on\""
              ", \"Client\":%{public, location:escape_only}@}";
        goto LABEL_92;
      }
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v40 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "#AuthPrompt Unrecognized/invalid request type: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v46 = 67240192;
      int v47 = v8;
      int v41 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "CLTypeRegistrationResult CLClientManager::requestClientAuthorization(CLDaemonClient *, CLClientManager_Type::AuthorizationRequest, NSDictionary *)", "%s\n", v41);
      if (v41 != (char *)buf) {
        free(v41);
      }
    }
    return v12;
  }
  if (sub_1000F08D4())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v21 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v49 = 2082;
      *(void *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(void *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing big switch re-enable prompt on OSX\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return 2;
  }
  if ((sub_100BD6370(a2) & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v31 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v49 = 2082;
      *(void *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(void *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing big switch re-enable prompt because the client asked us not to\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
LABEL_24:
    sub_1007B8A50(a3, @"App asked us not to show prompts");
    return 2;
  }
  if ((v14 & 1) == 0
    && (!sub_100BD6388(a2) || (int)sub_1007A9C34(a1, (uint64_t)v9) >= *(_DWORD *)(a1 + 944)))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v33 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v49 = 2082;
      *(void *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(void *)&v49[12] = v9;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Not showing big switch re-enable prompt because the client has asked for too many\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    sub_1007B8A50(a3, @"App asked us too many times to show big switch re-enable prompt.");
    return 2;
  }
  if (*(void *)(a1 + 272))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v27 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = +[CLClientKeyPath nullClientKeyPath];
      __int16 v29 = *(unsigned int **)(a1 + 272);
      if (v29)
      {
        id v28 = (id)*((void *)v29 + 1);
        uint64_t v30 = *v29;
      }
      else
      {
        uint64_t v30 = 5;
      }
      *(_DWORD *)long long buf = 68290050;
      *(_WORD *)BOOL v49 = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(void *)&v49[12] = v9;
      *(_WORD *)&v49[20] = 2050;
      *(void *)&v49[22] = v8;
      *(_WORD *)&v49[30] = 2114;
      uint64_t v50 = (uint64_t)v28;
      __int16 v51 = 2050;
      uint64_t v52 = v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring request because authorization in progress -- not showing big switch re-enable prompt\", \"Client\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x3Au);
    }
    sub_1007B8A50(a3, @"App is already presenting the user with an authorization prompt");
    return 2;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v34 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)BOOL v49 = 2082;
    *(void *)&v49[2] = "";
    *(_WORD *)&v49[10] = 2114;
    *(void *)&v49[12] = v9;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Showing big switch #AuthPrompt\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  *a3 = 10;
  sub_1007E1FD0((uint64_t)v43, (uint64_t)a3);
  BOOL v35 = sub_1007B9900(a1, (uint64_t)v9, v10, (uint64_t)v43);
  sub_1007E1E64((uint64_t)v43);
  uint64_t v12 = 2;
  if (v35)
  {
    LODWORD(v8) = 10;
LABEL_77:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v36 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)BOOL v49 = 2082;
      *(void *)&v49[2] = "";
      *(_WORD *)&v49[10] = 2114;
      *(void *)&v49[12] = v9;
      *(_WORD *)&v49[20] = 2050;
      *(void *)&v49[22] = v8;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt posted\", \"Client\":%{public, location:escape_only}@, \"type\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
    }
    uint64_t v37 = *(void **)(a1 + 136);
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)BOOL v49 = 3221225472;
    *(void *)&v49[8] = sub_100124700;
    *(void *)&v49[16] = &unk_1022C8FD8;
    *(void *)&v49[24] = v9;
    uint64_t v50 = a1;
    [v37 iterateIdentitiesRelatedToKeyPath:v9 withBlock:buf];
  }
  return v12;
}

void sub_1007B98D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  sub_1007E1E64((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1007B9900(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = sub_100103E24(a1, a2);
  if (!&SBUserNotificationPendInSetupIfNotAllowedKey) {
    return 0;
  }
  id v8 = v7;
  CFStringRef v9 = sub_1007B7CEC(a1, v7, a3);
  if (!v9)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v18 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 68289282;
      *(_DWORD *)uint64_t v40 = 0;
      *(_WORD *)&v40[4] = 2082;
      *(void *)&v40[6] = "";
      __int16 v41 = 2114;
      id v42 = v8;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"createClientPrefsNotification: BundleDisplayName nil\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v19 = qword_102419538;
    BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
    if (!result) {
      return result;
    }
    *(_DWORD *)long long buf = 68289282;
    *(_DWORD *)uint64_t v40 = 0;
    *(_WORD *)&v40[4] = 2082;
    *(void *)&v40[6] = "";
    __int16 v41 = 2114;
    id v42 = v8;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "createClientPrefsNotification: BundleDisplayName nil", "{\"msg%{public}.0s\":\"createClientPrefsNotification: BundleDisplayName nil\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    return 0;
  }
  CFStringRef v10 = v9;
  CFErrorRef errorPtr = 0;
  uint64_t v11 = sub_1001BA55C();
  CFStringRef v12 = (const __CFString *)sub_100802D54(v11, @"LOCATION_DISABLED");
  CFStringRef v13 = CFStringCreateStringWithValidatedFormat(kCFAllocatorDefault, 0, @"%@", v12, &errorPtr, v10);
  if (errorPtr)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      id v15 = [[-[__CFError localizedDescription](errorPtr, "localizedDescription") UTF8String];
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)uint64_t v40 = 0;
      *(_WORD *)&v40[4] = 2082;
      *(void *)&v40[6] = "";
      __int16 v41 = 2114;
      id v42 = v8;
      __int16 v43 = 2082;
      id v44 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Error, couldn't createAndPostClientPrefsNotification for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    id v16 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      id v17 = [[-[__CFError localizedDescription](errorPtr, "localizedDescription") UTF8String];
      *(_DWORD *)long long buf = 68289538;
      *(_DWORD *)uint64_t v40 = 0;
      *(_WORD *)&v40[4] = 2082;
      *(void *)&v40[6] = "";
      __int16 v41 = 2114;
      id v42 = v8;
      __int16 v43 = 2082;
      id v44 = v17;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Error, couldn't createAndPostClientPrefsNotification for client due to error returned by CFStringCreateStringWithValidatedFormat.", "{\"msg%{public}.0s\":\"#Error, couldn't createAndPostClientPrefsNotification for client due to error returned by CFStringCreateStringWithValidatedFormat.\", \"Client\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
    }

    return 0;
  }
  CFStringRef v21 = v13;
  uint64_t v22 = sub_1001BA55C();
  unsigned int v23 = (void *)sub_100802D54(v22, @"LOCATION_DISABLED_SETTINGS");
  uint64_t v24 = sub_1001BA55C();
  __int16 v25 = (void *)sub_100802D54(v24, @"LOCATION_DISABLED_CANCEL");
  keys[0] = (void *)SBUserNotificationPendInSetupIfNotAllowedKey;
  keys[1] = (void *)kCFUserNotificationAlertHeaderKey;
  keys[2] = (void *)kCFUserNotificationAlternateButtonTitleKey;
  keys[3] = (void *)kCFUserNotificationDefaultButtonTitleKey;
  values[0] = kCFBooleanTrue;
  values[1] = (void *)v21;
  values[2] = v23;
  values[3] = v25;
  CFDictionaryRef v26 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (v12) {
    CFRelease(v12);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (v25) {
    CFRelease(v25);
  }
  CFRelease(v10);
  SInt32 error = 0;
  __int16 v27 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0, &error, v26);
  CFRelease(v26);
  if (v27)
  {
    RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v27, (CFUserNotificationCallBack)sub_1007DBD74, 0);
    if (RunLoopSource)
    {
      __int16 v29 = (__CFRunLoop *)sub_1001C2710();
      CFRunLoopAddSource(v29, RunLoopSource, kCFRunLoopCommonModes);
      CFRelease(RunLoopSource);
      [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
      sub_1007DBDFC(a4, v27, v30);
      CFRelease(v27);
      operator new();
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v33 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      *(void *)uint64_t v40 = v8;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "Could not create runloop source for client prefs notification for %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v37 = 138543362;
      id v38 = v8;
      __int16 v34 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLClientManager::createAndPostClientPrefsNotification(CLClientKeyPath *, NSString *, CLClientManager_Type::AuthorizationRequest)", "%s\n", v34);
      if (v34 != (char *)buf) {
        free(v34);
      }
    }
    CFRelease(v27);
    return 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v31 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)uint64_t v40 = v8;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Could not create client prefs notification for %{public}@", buf, 0xCu);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v37 = 138543362;
    id v38 = v8;
    uint64_t v32 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLClientManager::createAndPostClientPrefsNotification(CLClientKeyPath *, NSString *, CLClientManager_Type::AuthorizationRequest)", "%s\n", v32);
    if (v32 != (char *)buf) {
      free(v32);
    }
    return 0;
  }
  return result;
}

void sub_1007BA0CC()
{
}

NSDictionary *sub_1007BA0F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = sub_1001198FC();
  uint64_t v30 = 0;
  __int16 v31 = &v30;
  uint64_t v32 = 0x2020000000;
  char v33 = 1;
  uint64_t v26 = 0;
  __int16 v27 = &v26;
  uint64_t v28 = 0x2020000000;
  char v29 = 1;
  uint64_t v22 = 0;
  unsigned int v23 = &v22;
  uint64_t v24 = 0x2020000000;
  char v25 = 1;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000;
  char v21 = 1;
  uint64_t v14 = 0;
  id v15 = &v14;
  uint64_t v16 = 0x2020000000;
  char v17 = 1;
  id v3 = +[NSMutableArray array];
  NSErrorUserInfoKey v4 = *(void **)(v1 + 136);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _OWORD v13[2] = sub_1007BA52C;
  v13[3] = &unk_1022C9120;
  v13[4] = v3;
  v13[5] = @"Authorization";
  v13[6] = &v30;
  void v13[7] = &v26;
  v13[8] = &v22;
  v13[9] = &v18;
  _OWORD v13[10] = &v14;
  void v13[11] = v1;
  [v4 iterateAllAnchorKeyPathsWithBlock:v13];
  double v5 = log2((double)(int)[*(id *)(v1 + 136) clientCount]);
  if ([v3 count])
  {
    [*(id *)(v1 + 40) currentLatchedAbsoluteTimestamp];
    id v7 = [v3 objectAtIndexedSubscript:(int)v6 % (int)objc_msgSend(v3, "count")];
    id v8 = [*(id *)(v1 + 136) intForKey:@"Authorization" atKeyPath:v7 defaultValue:0];
    id v9 = [*(id *)(v1 + 136) intForKey:@"CorrectiveCompensationEnabled" atKeyPath:v7 defaultValue:0];
    id v10 = [*(id *)(v1 + 136) intForKey:@"IncidentalUseMode" atKeyPath:v7 defaultValue:0];
    v34[0] = @"BigSwitchEnabled";
    v35[0] = +[NSNumber numberWithBool:v2 == 1];
    v34[1] = @"AggLog2ClientCount";
    v35[1] = +[NSNumber numberWithInt:(int)v5];
    std::string v34[2] = @"AggNoSSDisabled";
    v35[2] = +[NSNumber numberWithBool:*((unsigned __int8 *)v23 + 24)];
    v34[3] = @"ClientKey";
    v35[3] = [NSString stringWithUTF8String:[objc_msgSend(objc_msgSend(v7, "userlessClientKeyPath"), "UTF8String")]];
    void v34[4] = @"AuthMask";
    v35[4] = +[NSNumber numberWithInt:v8];
    void v34[5] = @"AggNoIUEligible";
    v35[5] = +[NSNumber numberWithBool:*((unsigned __int8 *)v19 + 24)];
    v34[6] = @"AggNoIUDenied";
    v35[6] = +[NSNumber numberWithBool:*((unsigned __int8 *)v15 + 24)];
    v34[7] = @"IUMode";
    v35[7] = +[NSNumber numberWithInt:v10];
    uint8_t v34[8] = @"AggNoAlwaysApps";
    v35[8] = +[NSNumber numberWithBool:*((unsigned __int8 *)v31 + 24)];
    v34[9] = @"AggNoChosenCCOn";
    v35[9] = +[NSNumber numberWithBool:*((unsigned __int8 *)v27 + 24)];
    unsigned char v34[10] = @"CCStatus";
    v35[10] = +[NSNumber numberWithInt:v9];
    uint64_t v11 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:11];
  }
  else
  {
    uint64_t v11 = 0;
  }
  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v26, 8);
  _Block_object_dispose(&v30, 8);
  return v11;
}

void sub_1007BA4C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_1007BA52C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 88);
  id v5 = [a2 legacyClientKey];
  if ([*(id *)(v4 + 136) hasValueForKey:@"SupportedAuthorizationMask" atKeyPath:a2]&& (objc_msgSend(*(id *)(v4 + 136), "hasValueForKey:atKeyPath:", @"TimeMissing", a2) & 1) == 0)
  {
    [*(id *)(a1 + 32) addObject:a2];
  }
  unsigned int v6 = [*(id *)(v4 + 136) intForKey:*(void *)(a1 + 40) atKeyPath:a2 defaultValue:0];
  unsigned int v7 = [*(id *)(v4 + 136) intForKey:@"CorrectiveCompensationEnabled" atKeyPath:a2 defaultValue:0];
  unsigned int v8 = [*(id *)(v4 + 136) intForKey:@"IncidentalUseMode" atKeyPath:a2 defaultValue:0];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    BOOL v9 = v6 == 4;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    if (a2)
    {
      [a2 clientName];
      if (BYTE1(v20))
      {
LABEL_14:
        if (SHIBYTE(v24) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v22[0]);
        }
        if (SHIBYTE(v21) < 0) {
          operator delete(*((void **)&v20 + 1));
        }
        if (SHIBYTE(v19) < 0) {
          operator delete(v18[1]);
        }
        if (SHIBYTE(v18[0]) < 0) {
          operator delete(v17[0]);
        }
        if (SHIBYTE(v16) < 0) {
          operator delete(v15[1]);
        }
        if (SHIBYTE(v15[0]) < 0) {
          operator delete(v14[0]);
        }
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v25 = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      *(_OWORD *)uint64_t v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      *(_OWORD *)char v17 = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      *(_OWORD *)id v15 = 0u;
      long long v16 = 0u;
      *(_OWORD *)uint64_t v14 = 0u;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
    goto LABEL_14;
  }
LABEL_28:
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
    BOOL v10 = v7 == 2;
  }
  else {
    BOOL v10 = 0;
  }
  if (v10)
  {
    sub_100134750(v14, (char *)[v5 UTF8String]);
    if (sub_10151F9F8((void **)v14))
    {
      unsigned __int8 v11 = sub_101209DBC(v5);
      if (SHIBYTE(v15[0]) < 0) {
        operator delete(v14[0]);
      }
      if ((v11 & 1) == 0) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
      }
    }
    else if (SHIBYTE(v15[0]) < 0)
    {
      operator delete(v14[0]);
    }
  }
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
    BOOL v12 = v6 == 1;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12
    && ([@"com.apple.locationd.bundle-/System/Library/LocationBundles/WifiCalling.bundle" isEqualToString:v5] & 1) == 0)
  {
    if (a2)
    {
      [a2 clientName];
      if (BYTE1(v20)) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 0;
      }
    }
    else
    {
      uint64_t v25 = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v24 = 0u;
      long long v21 = 0u;
      *(_OWORD *)uint64_t v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      *(_OWORD *)char v17 = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      *(_OWORD *)id v15 = 0u;
      long long v16 = 0u;
      *(_OWORD *)uint64_t v14 = 0u;
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(*((void **)&v20 + 1));
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[1]);
    }
    if (SHIBYTE(v18[0]) < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[1]);
    }
    if (SHIBYTE(v15[0]) < 0) {
      operator delete(v14[0]);
    }
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
  if (*(unsigned char *)(v13 + 24) || *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24))
  {
    if (v8)
    {
      *(unsigned char *)(v13 + 24) = 0;
      if (v8 == 2) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
      }
    }
  }
}

void sub_1007BA884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007BA8A0(uint64_t a1)
{
  long long v56 = [[CLOSTransaction alloc] initWithDescription:"CLClientManager::getInternalState"];
  id v61 = [[objc_msgSend(*(id *)(a1 + 136), "getStateSummary") cl_deepMutableCopy];
  id v2 = +[NSMutableDictionary dictionary];
  obuint64_t j = +[NSMutableArray array];
  long long v68 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  id v3 = *(void **)(a1 + 1080);
  id v4 = [v3 countByEnumeratingWithState:&v68 objects:v73 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v69;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v69 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v68 + 1) + 8 * i);
        unsigned int v8 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", [*(id *)(a1 + 1080) objectForKeyedSubscript:v7]);
        [v2 setObject:[objc_msgSend(*(id *)(a1 + 1080), "objectForKeyedSubscript:", v7) getStateSummary] forKeyedSubscript:v8];
        id v9 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", v7)];
        if ([v9 isValidCKP]) {
          [objc_msgSend(v61, "objectForKeyedSubscript:", objc_msgSend(v9, "clientKey")) setObject:v8 forKeyedSubscript:@"AuthContext"];
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v68 objects:v73 count:16];
    }
    while (v4);
  }
  id v60 = +[NSMutableDictionary dictionary];
  BOOL v10 = *(void **)(a1 + 816);
  if (v10 != (void *)(a1 + 824))
  {
    do
    {
      uint64_t v11 = v10[5];
      BOOL v12 = +[NSNumber numberWithUnsignedLong:v11];
      [v60 setObject:sub_100BEB468(v11) forKeyedSubscript:v12];
      id v13 = [[objc_msgSend(v60, "objectForKeyedSubscript:", v12) objectForKeyedSubscript:@"AuthContext"];
      if (v13 && ![v2 objectForKeyedSubscript:v13]) {
        [obj addObject:sub_100BD60A8(v11)];
      }
      uint64_t v14 = (void *)v10[1];
      if (v14)
      {
        do
        {
          id v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          id v15 = (void *)v10[2];
          BOOL v16 = *v15 == (void)v10;
          BOOL v10 = v15;
        }
        while (!v16);
      }
      BOOL v10 = v15;
    }
    while (v15 != (void *)(a1 + 824));
  }
  id v59 = +[NSMutableDictionary dictionary];
  char v17 = *(void **)(a1 + 888);
  if (v17 != (void *)(a1 + 896))
  {
    do
    {
      uint64_t v18 = v17[5];
      long long v19 = +[NSNumber numberWithUnsignedLong:v18];
      [v59 setObject:sub_1011C1130((CLConnection **)v18) forKeyedSubscript:v19];
      id v20 = [[[v59 objectForKeyedSubscript:v19] objectForKeyedSubscript:@"AuthContext"];
      if (v20 && ![v2 objectForKeyedSubscript:v20]) {
        [obj addObject:*(void *)(v18 + 40)];
      }
      long long v21 = (void *)v17[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          long long v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v17[2];
          BOOL v16 = *v22 == (void)v17;
          char v17 = v22;
        }
        while (!v16);
      }
      char v17 = v22;
    }
    while (v22 != (void *)(a1 + 896));
  }
  id v58 = +[NSMutableDictionary dictionary];
  unsigned int v23 = *(void **)(a1 + 912);
  if (v23 != (void *)(a1 + 920))
  {
    do
    {
      uint64_t v24 = v23[4];
      uint64_t v25 = +[NSNumber numberWithUnsignedLong:v24];
      [v58 setObject:sub_1011C1130((CLConnection **)v24) forKeyedSubscript:v25];
      id v26 = [[[v58 objectForKeyedSubscript:v25] objectForKeyedSubscript:@"AuthContext"];
      if (v26 && ![v2 objectForKeyedSubscript:v26]) {
        [obj addObject:*(void *)(v24 + 40)];
      }
      __int16 v27 = (void *)v23[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          __int16 v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (void *)v23[2];
          BOOL v16 = *v28 == (void)v23;
          unsigned int v23 = v28;
        }
        while (!v16);
      }
      unsigned int v23 = v28;
    }
    while (v28 != (void *)(a1 + 920));
  }
  id v29 = +[NSMutableDictionary dictionary];
  for (uint64_t j = *(void **)(a1 + 992); j; uint64_t j = (void *)*j)
  {
    for (k = (void *)j[7]; k; k = (void *)*k)
    {
      uint64_t v32 = (std::__shared_weak_count *)k[4];
      if (v32)
      {
        char v33 = std::__shared_weak_count::lock(v32);
        if (v33)
        {
          __int16 v34 = v33;
          BOOL v35 = (void *)k[3];
          if (v35)
          {
            __int16 v36 = +[NSNumber numberWithUnsignedLong:k[3]];
            [v29 setObject:(*(uint64_t (**)(void *))(*v35 + 32))(v35) forKeyedSubscript:v36];
            id v37 = [[objc_msgSend(v29, "objectForKeyedSubscript:", v36) objectForKeyedSubscript:@"AuthContext"];
            if (v37)
            {
              if (![v2 objectForKeyedSubscript:v37]) {
                [obj addObject:v35[17]];
              }
            }
          }
          sub_1000DB0A0(v34);
        }
      }
    }
  }
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  id v38 = [obj countByEnumeratingWithState:&v64 objects:v72 count:16];
  if (v38)
  {
    uint64_t v39 = *(void *)v65;
    do
    {
      for (m = 0; m != v38; m = (char *)m + 1)
      {
        if (*(void *)v65 != v39) {
          objc_enumerationMutation(obj);
        }
        __int16 v41 = *(void **)(*((void *)&v64 + 1) + 8 * (void)m);
        id v42 = +[NSNumber numberWithUnsignedLong:v41];
        if (![v2 objectForKeyedSubscript:v42]) {
          [v2 setObject:[v41 getStateSummary] forKeyedSubscript:v42];
        }
      }
      id v38 = [obj countByEnumeratingWithState:&v64 objects:v72 count:16];
    }
    while (v38);
  }
  id v57 = +[NSMutableDictionary dictionary];
  id obja = +[NSMutableDictionary dictionary];
  __int16 v43 = *(void **)(a1 + 840);
  if (v43 != (void *)(a1 + 848))
  {
    do
    {
      id v44 = (const void *)v43[5];
      uint64_t v45 = (*(uint64_t (**)(const void *))(*(void *)v44 + 32))(v44);
      if (v45)
      {
        int v46 = +[NSNumber numberWithUnsignedLong:v44];
        std::string::size_type v48 = obja;
        if (v47
        {
          [v48 setObject:v45 forKeyedSubscript:v46];
        }
      }
      uint64_t v50 = (void *)v43[1];
      if (v50)
      {
        do
        {
          __int16 v51 = v50;
          uint64_t v50 = (void *)*v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          __int16 v51 = (void *)v43[2];
          BOOL v16 = *v51 == (void)v43;
          __int16 v43 = v51;
        }
        while (!v16);
      }
      __int16 v43 = v51;
    }
    while (v51 != (void *)(a1 + 848));
  }
  id v52 = +[NSMutableDictionary dictionary];
  [v52 setObject:+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent()) forKeyedSubscript:@"CollectTimestamp"];
  id v53 = objc_alloc_init((Class)NSDateFormatter);
  [v53 setDateFormat:@"yyyy-MM-dd HH:mm:ssZ"];
  [v52 setObject:objc_msgSend(v53, "stringFromDate:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", CFAbsoluteTimeGetCurrent())) forKeyedSubscript:@"CollectTime"];
  [v52 setObject:-[NSProcessInfo operatingSystemVersionString](+[NSProcessInfo processInfo](NSProcessInfo, "processInfo"), "operatingSystemVersionString") forKeyedSubscript:@"BuildVersion"];
  id v54 = +[NSMutableDictionary dictionary];
  [v54 setObject:v61 forKeyedSubscript:@"AuthorizationDatabaseState"];
  [v54 setObject:sub_100C6431C(*(void *)(a1 + 376)) forKeyedSubscript:@"InUseLevelTrackerState"];
  [v54 setObject:v2 forKeyedSubscript:@"AuthorizationContextStates"];
  [v54 setObject:v60 forKeyedSubscript:@"DaemonClientStates"];
  [v54 setObject:v59 forKeyedSubscript:@"DaemonIdentifiableClientStates"];
  [v54 setObject:v58 forKeyedSubscript:@"DaemonIdentifiableClientWithoutConnectionStates"];
  [v54 setObject:v29 forKeyedSubscript:@"PersistentSubscriptionStates"];
  [v54 setObject:v57 forKeyedSubscript:@"InUseAssertionStates"];
  [v54 setObject:obja forKeyedSubscript:@"EmergencyAssertionStates"];
  [v54 setObject:v52 forKeyedSubscript:@"CollectionMetadata"];

  return v54;
}

void sub_1007BB134(_Unwind_Exception *a1)
{
  sub_1000DB0A0(v1);
  _Unwind_Resume(a1);
}

void sub_1007BB154(uint64_t a1, void *a2, void *a3)
{
  id v6 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if (v6)
  {
    uint64_t v7 = v6;
    id v37 = a3;
    if (qword_10247E118 != -1) {
      dispatch_once(&qword_10247E118, &stru_1022C9140);
    }
    [*(id *)(a1 + 40) currentLatchedAbsoluteTimestamp];
    double v9 = v8 / 86400.0;
    unint64_t v10 = (unint64_t)v9;
    if (qword_10247E108 == (unint64_t)v9) {
      goto LABEL_19;
    }
    qword_10247E108 = (unint64_t)v9;
    [(id)qword_10247E110 removeAllObjects];
    id v11 = +[NSMutableArray array];
    BOOL v12 = *(void **)(a1 + 136);
    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472;
    v46[2] = sub_1007BBB0C;
    v46[3] = &unk_1022C8E48;
    v46[4] = v11;
    _WORD v46[5] = a1;
    [v12 iterateAllAnchorKeyPathsWithBlock:v46];
    id v13 = [v11 count];
    if (v13)
    {
      unint64_t v14 = (unint64_t)v13;
      uint64_t v15 = 5;
      unint64_t v16 = v10;
      do
      {
        id v17 = [v11 objectAtIndex:v16 % v14];
        [(id)qword_10247E110 addObject:v17];
        v16 += v10;
        --v15;
      }
      while (v15);
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      uint64_t v18 = (void *)qword_10247E110;
      id v19 = [(id)qword_10247E110 countByEnumeratingWithState:&v42 objects:v56 count:16];
      if (v19)
      {
        id v20 = v19;
        uint64_t v21 = *(void *)v43;
        do
        {
          uint64_t v22 = 0;
          do
          {
            if (*(void *)v43 != v21) {
              objc_enumerationMutation(v18);
            }
            unsigned int v23 = *(void **)(*((void *)&v42 + 1) + 8 * (void)v22);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            uint64_t v24 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 68289538;
              int v49 = 0;
              __int16 v50 = 2082;
              __int16 v51 = "";
              __int16 v52 = 2114;
              id v53 = v23;
              __int16 v54 = 1026;
              int v55 = v14;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"MetricForFunctionCalls: adding client of the day\", \"ckp\":%{public, location:escape_only}@, \"totalClients\":%{public}d}", buf, 0x22u);
            }
            uint64_t v22 = (char *)v22 + 1;
          }
          while (v20 != v22);
          id v20 = [v18 countByEnumeratingWithState:&v42 objects:v56 count:16];
        }
        while (v20);
      }
LABEL_19:
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      uint64_t v25 = (void *)qword_10247E110;
      id v26 = [(id)qword_10247E110 countByEnumeratingWithState:&v38 objects:v47 count:16];
      if (v26)
      {
        id v27 = v26;
        uint64_t v28 = *(void *)v39;
        do
        {
          id v29 = 0;
          do
          {
            if (*(void *)v39 != v28) {
              objc_enumerationMutation(v25);
            }
            uint64_t v30 = *(void **)(*((void *)&v38 + 1) + 8 * (void)v29);
            if (objc_msgSend(objc_msgSend(v30, "clientAnchor"), "isEqualToString:", objc_msgSend(v7, "clientAnchor")))
            {
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              __int16 v31 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 68289282;
                int v49 = 0;
                __int16 v50 = 2082;
                __int16 v51 = "";
                __int16 v52 = 2114;
                id v53 = v7;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"MetricForFunctionCalls: sending metrics for client\", \"ckp\":%{public, location:escape_only}@}", buf, 0x1Cu);
              }
              unint64_t v32 = [(unint64_t)[v37 objectForKeyedSubscript:@"kCLConnectionMessageFunctionBitmapKey"] unsignedIntegerValue];
              id v33 = +[NSMutableDictionary dictionary];
              [v33 setObject:objc_msgSend(v30, "userlessClientKeyPath") forKeyedSubscript:@"client"];
              [v33 setObject:objc_msgSend(v37, "objectForKeyedSubscript:", @"kCLConnectionMessageTotalFunctionCallsKey") forKeyedSubscript:@"invocationCount"];
              [v33 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v32 & 1)] forKeyedSubscript:@"LSEnabled"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 1) & 1) forKeyedSubscript:@"APIAvailable_G"];
              [v33 setObject:[NSNumber numberWithBool:((v32 >> 2) & 1)] forKeyedSubscript:@"StartLocation"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 3) & 1) forKeyedSubscript:@"StopLocation"];
              [v33 setObject:[NSNumber numberWithBool:((v32 >> 4) & 1)] forKeyedSubscript:@"ReqLocation"];
              [v33 setObject:[NSNumber numberWithBool:((v32 >> 5) & 1)] forKeyedSubscript:@"Deferred_G"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 6) & 1) forKeyedSubscript:@"StartHeading"];
              [v33 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 7) & 1)] forKeyedSubscript:@"StopHeading"];
              [v33 setObject:[NSNumber numberWithBool:((v32 >> 8) & 1)] forKeyedSubscript:@"StartSLC"];
              [v33 setObject:[NSNumber numberWithBool:((v32 >> 9) & 1)] forKeyedSubscript:@"StopSLC"];
              [v33 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 10) & 1)] forKeyedSubscript:@"StartPushes"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 11) & 1) forKeyedSubscript:@"StopPushes"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 12) & 1) forKeyedSubscript:@"StartRegion"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 13) & 1) forKeyedSubscript:@"StopRegion"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 14) & 1) forKeyedSubscript:@"RegionState"];
              [v33 setObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 15) & 1) forKeyedSubscript:@"MaxRegionDistance"];
              [v33 setObject:[NSNumber numberWithBool:((v32 >> 16) & 1)] forKeyedSubscript:@"Regions"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 17) & 1) forKeyedSubscript:@"Ranging_G"];
              [v33 setObject:[NSNumber numberWithBool:((v32 >> 18) & 1)] forKeyedSubscript:@"Historical"];
              [v33 setObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 19) & 1) forKeyedSubscript:@"AuthStatus"];
              [v33 setObject:[+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 20) & 1)] forKeyedSubscript:@"AccuracyAuth"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 21) & 1) forKeyedSubscript:@"WidgetAuth"];
              [v33 setObject:[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 22) & 1) forKeyedSubscript:@"RequestWIU"];
              [v33 setObject:[NSNumber numberWithBool:((v32 >> 23) & 1)] forKeyedSubscript:@"RequestAlways"];
              [v33 setObject:+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", (v32 >> 24) & 1) forKeyedSubscript:@"RequestAccuracy"];
              AnalyticsSendEvent();
            }
            id v29 = (char *)v29 + 1;
          }
          while (v27 != v29);
          id v27 = [v25 countByEnumeratingWithState:&v38 objects:v47 count:16];
        }
        while (v27);
      }
      return;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v36 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 68289282;
      int v49 = 0;
      __int16 v50 = 2082;
      __int16 v51 = "";
      __int16 v52 = 2114;
      id v53 = a2;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"MetricForFunctionCalls: No clients considered for metrics today.\", \"ckp\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v34 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 68289282;
      int v49 = 0;
      __int16 v50 = 2082;
      __int16 v51 = "";
      __int16 v52 = 2114;
      id v53 = a2;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Client is not registered. Skip metric for function calls\", \"ckp\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    BOOL v35 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)long long buf = 68289282;
      int v49 = 0;
      __int16 v50 = 2082;
      __int16 v51 = "";
      __int16 v52 = 2114;
      id v53 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client is not registered. Skip metric for function calls", "{\"msg%{public}.0s\":\"Client is not registered. Skip metric for function calls\", \"ckp\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
}

void sub_1007BBAE0(id a1)
{
  qword_10247E110 = (uint64_t)+[NSMutableSet set];
}

id sub_1007BBB0C(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(*(void *)(a1 + 40) + 136) BOOLForKey:@"isSystemService" atKeyPath:a2 defaultValue:0];
  if ((result & 1) == 0)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    return [v5 addObject:a2];
  }
  return result;
}

void sub_1007BBB78(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v12 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v12 isValidCKP])
  {
    sub_1007BBD00(a1, (uint64_t)v12, a3, a4, a5, a6);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v13 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      v14[0] = 68289282;
      v14[1] = 0;
      __int16 v15 = 2082;
      unint64_t v16 = "";
      __int16 v17 = 2114;
      uint64_t v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#luHistorical client not found - fetching dateIntervals\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)v14, 0x1Cu);
    }
  }
}

void sub_1007BBD00(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (objc_opt_class())
  {
    id v54 = sub_100103E24(a1, a2);
    if (objc_msgSend(objc_msgSend(a4, "objectForKeyedSubscript:", @"com.apple.developer.corelocation.wilderness-safety"), "BOOLValue"))
    {
      obuint64_t j = +[NSMutableArray array];
      id v12 = a3;
    }
    else
    {
      unsigned int v14 = [[objc_msgSend(a4, "objectForKeyedSubscript:", @"com.apple.locationd.transcript-session") boolValue];
      obuint64_t j = +[NSMutableArray array];
      id v12 = a3;
      if (!v14)
      {
        int v15 = 0;
        id v53 = 0;
        goto LABEL_11;
      }
    }
    id v53 = sub_1007AC460(a1, a5);
    int v15 = 1;
LABEL_11:
    id v16 = +[NSMutableArray array];
    uint64_t v51 = a1;
    __int16 v17 = sub_1007BE550(a1, (uint64_t)v54);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v18 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68290306;
      __int16 v67 = 2082;
      long long v68 = "";
      __int16 v69 = 2114;
      *(void *)long long v70 = a5;
      *(_WORD *)&v70[8] = 2114;
      *(void *)&v70[10] = v17;
      __int16 v71 = 2114;
      id v72 = [v12 startDate];
      __int16 v73 = 2114;
      id v74 = [v12 endDate];
      __int16 v75 = 2114;
      id v76 = v54;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationAttributionInfo #luHistorical calculateCheeseCoverage\", \"lookbackWindowStartDate\":%{public, location:escape_only}@, \"transcriptStartDate\":%{public, location:escape_only}@, \"interestStartDate\":%{public, location:escape_only}@, \"interestEndDate\":%{public, location:escape_only}@, \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x44u);
    }
    char v19 = v15 ^ 1;
    if (!v17) {
      char v19 = 1;
    }
    if (v19)
    {
      id v52 = 0;
      if (!v15)
      {
LABEL_35:
        uint64_t v61 = 0;
        BOOL v62 = &v61;
        uint64_t v63 = 0x2020000000;
        int v64 = 0;
        if (_os_feature_enabled_impl())
        {
          id v29 = *(void **)(v51 + 544);
          v60[0] = _NSConcreteStackBlock;
          v60[1] = 3221225472;
          v60[2] = sub_1007BE944;
          v60[3] = &unk_1022C9200;
          v60[6] = &v61;
          v60[7] = v51;
          v60[4] = v16;
          v60[5] = obj;
          sub_1007AC7C4(v29, (uint64_t)v54, (uint64_t)v60);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v30 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v31 = [obj count];
            uint64_t buf = 68289538;
            __int16 v67 = 2082;
            long long v68 = "";
            __int16 v69 = 1026;
            *(_DWORD *)long long v70 = v31;
            *(_WORD *)&v70[4] = 2114;
            *(void *)&v70[6] = v54;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationAttributionInfo finished iterating through swiss cheese archive\", \"resultCount\":%{public}d, \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x22u);
          }
        }
        while (1)
        {
          id v32 = [v16 count:v51];
          if ((unint64_t)v32 <= *((int *)v62 + 6)) {
            break;
          }
          [obj addObject:[v16 objectAtIndexedSubscript:x0]];
          ++*((_DWORD *)v62 + 6);
        }
        [objc_msgSend(v12, "startDate") timeIntervalSinceReferenceDate];
        double v34 = v33;
        [objc_msgSend(v12, "endDate") timeIntervalSinceReferenceDate];
        double v36 = v35;
        id v37 = (char *)[obj count];
        if (v37)
        {
          long long v38 = v37 - 1;
          do
          {
            [objc_msgSend(objc_msgSend(objc_msgSend(obj, "objectAtIndexedSubscript:", v38), "startDate"), "timeIntervalSinceReferenceDate"]
            double v40 = v39;
            [objc_msgSend(objc_msgSend(objc_msgSend(obj, "objectAtIndexedSubscript:", v38), "endDate"), "timeIntervalSinceReferenceDate"]
            double v42 = v41;
            unsigned __int8 v43 = [[obj objectAtIndexedSubscript:v38] intersectsDateInterval:v12];
            if (v40 < v34 || v42 > v36)
            {
              if (v43)
              {
                if (v40 < v34 || v42 <= v36 || v40 >= v36)
                {
                  if (v40 < v34 && v42 <= v36) {
                    [obj replaceObjectAtIndex:v38 withObject:[objc_alloc((Class)NSDateInterval) initWithStartDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v34) endDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v42)]];
                  }
                }
                else
                {
                  [obj replaceObjectAtIndex:v38 withObject:[objc_alloc((Class)NSDateInterval) initWithStartDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v40) endDate:+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", v36)]];
                }
              }
              else
              {
                [obj removeObjectAtIndex:v38];
              }
            }
            --v38;
          }
          while (v38 != (char *)-1);
        }
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        id v44 = [obj countByEnumeratingWithState:&v56 objects:v65 count:16];
        if (v44)
        {
          uint64_t v45 = *(void *)v57;
          do
          {
            for (uint64_t i = 0; i != v44; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v57 != v45) {
                objc_enumerationMutation(obj);
              }
              int v47 = *(void **)(*((void *)&v56 + 1) + 8 * i);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              std::string::size_type v48 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
              {
                id v49 = [v47 startDate];
                id v50 = [v47 endDate];
                uint64_t buf = 68289794;
                __int16 v67 = 2082;
                long long v68 = "";
                __int16 v69 = 2114;
                *(void *)long long v70 = v49;
                *(_WORD *)&v70[8] = 2114;
                *(void *)&v70[10] = v50;
                __int16 v71 = 2114;
                id v72 = v54;
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#LocationAttributionInfo #luHistorical cheeseCoverage calculated and includes this interval\", \"startDate\":%{public, location:escape_only}@, \"endDate\":%{public, location:escape_only}@, \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
              }
            }
            id v44 = [obj countByEnumeratingWithState:&v56 objects:v65 count:16];
          }
          while (v44);
        }
        (*(void (**)(uint64_t, id))(a6 + 16))(a6, obj);
        _Block_object_dispose(&v61, 8);
        return;
      }
    }
    else
    {
      id v52 = +[NSMutableArray array];
      [v52 addObject:[objc_alloc((Class)NSDateInterval) initWithStartDate:v17 endDate:[+[NSDate now](NSDate, "now")]]];
      if (!v15) {
        goto LABEL_35;
      }
    }
    int v20 = 0;
    int v21 = 0;
    while (1)
    {
      if ((unint64_t)objc_msgSend(v53, "count", v51) <= v20)
      {
        if ((unint64_t)[v52 count] <= v21) {
          goto LABEL_35;
        }
        unint64_t v22 = v21;
      }
      else
      {
        unint64_t v22 = v21;
      }
      id v23 = [v53 count];
      id v24 = [v52 count];
      unint64_t v25 = (unint64_t)v24;
      if ((unint64_t)v24 <= v22)
      {
        double v27 = 0.0;
        if ((unint64_t)v23 <= v20) {
          goto LABEL_34;
        }
      }
      else
      {
        [objc_msgSend(objc_msgSend(objc_msgSend(v52, "objectAtIndexedSubscript:", v22), "startDate"), "timeIntervalSinceReferenceDate"]
        double v27 = v26;
        if ((unint64_t)v23 <= v20) {
          goto LABEL_32;
        }
      }
      [objc_msgSend(objc_msgSend(objc_msgSend(v53, "objectAtIndexedSubscript:", v20), "startDate"), "timeIntervalSinceReferenceDate"]
      if (v28 > v27 && v25 > v22)
      {
LABEL_32:
        id v24 = [v16 addObject:[v52 objectAtIndexedSubscript:v22]];
        ++v21;
        goto LABEL_34;
      }
      id v24 = [v16 addObject:[v53 objectAtIndexedSubscript:v20++]];
LABEL_34:
      sub_1007BE7D8((uint64_t)v24, v16);
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v13 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t buf = 68289026;
    __int16 v67 = 2082;
    long long v68 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", (uint8_t *)&buf, 0x12u);
  }
}

void sub_1007BC59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_1007BC5FC(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc((Class)CLPLocationConsumptionScoreInfo) initWithData:a2];
  if (objc_msgSend(@"com.apple.locationd.all-location-clients-stop", "isEqualToString:", objc_msgSend(v3, "clientKey")))
  {
    double v4 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (v4 > 0.0 && v4 < *(double *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 0;
    goto LABEL_6;
  }
  if (([*(id *)(a1 + 32) isValidCKP] & 1) == 0)
  {
LABEL_11:
    uint64_t v7 = *(void *)(a1 + 40);
    [v3 startTime];
    double v9 = v8;
    [v3 stopTime];
    (*(void (**)(uint64_t, double, double))(v7 + 16))(v7, v9, v10);
    goto LABEL_19;
  }
  unsigned __int8 v5 = [objc_msgSend(*(id *)(a1 + 32), "clientKey") isEqualToString:[v3 clientKey]];
  unsigned int v6 = [v3 hasStartTime];
  if ((v5 & 1) == 0)
  {
    if (v6) {
      [v3 startTime];
    }
    else {
      [v3 stopTime];
    }
    uint64_t v12 = *(void *)(a1 + 56);
    goto LABEL_18;
  }
  if (v6 && [v3 hasStopTime]) {
    goto LABEL_11;
  }
  if ([v3 hasStartTime])
  {
    [v3 startTime];
    uint64_t v12 = *(void *)(a1 + 48);
LABEL_18:
    *(void *)(*(void *)(v12 + 8) + 24) = v11;
    goto LABEL_19;
  }
  if ([v3 hasStopTime])
  {
    double v13 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    if (v13 > 0.0)
    {
      [v3 stopTime];
      if (v13 < v14)
      {
        uint64_t v15 = *(void *)(a1 + 40);
        double v16 = *(double *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
        [v3 stopTime];
        (*(void (**)(uint64_t, double, double))(v15 + 16))(v15, v16, v17);
LABEL_6:
        *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
        goto LABEL_19;
      }
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v18 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
  {
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v22 = 68289538;
    int v23 = 0;
    __int16 v24 = 2082;
    unint64_t v25 = "";
    __int16 v26 = 2050;
    uint64_t v27 = v19;
    __int16 v28 = 2114;
    id v29 = v3;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Invalid ConsumptionScore interval\", \"startTime\":\"%{public}f\", \"scoreInfo\":%{public, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  int v20 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
    int v22 = 68289538;
    int v23 = 0;
    __int16 v24 = 2082;
    unint64_t v25 = "";
    __int16 v26 = 2050;
    uint64_t v27 = v21;
    __int16 v28 = 2114;
    id v29 = v3;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Invalid ConsumptionScore interval", "{\"msg%{public}.0s\":\"Invalid ConsumptionScore interval\", \"startTime\":\"%{public}f\", \"scoreInfo\":%{public, location:escape_only}@}", (uint8_t *)&v22, 0x26u);
  }
LABEL_19:
}

void sub_1007BC97C(uint64_t a1)
{
  sub_100134750(&__p, (char *)[@"com.apple.locationd.all-location-clients-stop" UTF8String]);
  p_p = &__p;
  id v2 = (double *)sub_100105304(a1, (unsigned __int8 *)&__p, (uint64_t)&unk_101D0B290, (long long **)&p_p);
  if (SBYTE3(v15) < 0) {
    operator delete(__p);
  }
  id v3 = *(double **)(a1 + 16);
  if (v3)
  {
    double v4 = v2[5] + 10.0;
    do
    {
      double v5 = v3[5];
      if (v5 > 0.0)
      {
        if (v5 <= v4)
        {
          *((_DWORD *)v3 + 12) += (int)(v4 - v5);
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          unsigned int v6 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            uint64_t v7 = *((void *)v3 + 5);
            std::string __p = (void *)68289538;
            __int16 v12 = 2082;
            double v13 = "";
            __int16 v14 = 2050;
            uint64_t v15 = v7;
            __int16 v16 = 2050;
            double v17 = v4;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Detected CFAbsoluteTime rollback when reading usage score\", \"PreviousTimestamp\":\"%{public}f\", \"Timestamp\":\"%{public}f\"}", (uint8_t *)&__p, 0x26u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          double v8 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            uint64_t v9 = *((void *)v3 + 5);
            std::string __p = (void *)68289538;
            __int16 v12 = 2082;
            double v13 = "";
            __int16 v14 = 2050;
            uint64_t v15 = v9;
            __int16 v16 = 2050;
            double v17 = v4;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Detected CFAbsoluteTime rollback when reading usage score", "{\"msg%{public}.0s\":\"Detected CFAbsoluteTime rollback when reading usage score\", \"PreviousTimestamp\":\"%{public}f\", \"Timestamp\":\"%{public}f\"}", (uint8_t *)&__p, 0x26u);
          }
        }
      }
      v3[5] = 0.0;
      id v3 = *(double **)v3;
    }
    while (v3);
  }
}

void sub_1007BCBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007BCC00(uint64_t a1, void *a2, uint64_t a3)
{
  if (objc_opt_class())
  {
    [a2 pruneSecondaryDataOlderThan:CFAbsoluteTimeGetCurrent() + -432000.0];
    double v5 = [[CLOSTransaction alloc] initWithDescription:"com.apple.locationd.reading-score-archive"];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unsigned int v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Updating the #reprompt location consumption score info from archive\"}", buf, 0x12u);
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_1007BCEB4;
    v10[3] = &unk_1022C9188;
    v10[4] = a3;
    [a2 iterateSecondaryData:[a2 mappedSecondaryData] forField:1 withHandler:v10];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Finished - Updating the #reprompt location consumption score info from archive\"}", buf, 0x12u);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v12 = 0;
      __int16 v13 = 2082;
      __int16 v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007BCEB4(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc((Class)CLPLocationConsumptionScoreInfo) initWithData:a2];
  sub_1007BCF18(*(void *)(a1 + 32), v3);
}

void sub_1007BCF18(uint64_t a1, void *a2)
{
  if (!objc_opt_class())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v5 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v16 = 2082;
    double v17 = "";
    unsigned int v6 = "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}";
    uint64_t v7 = v5;
    os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v7, v8, v6, buf, 0x12u);
    return;
  }
  if (objc_msgSend(@"com.apple.locationd.all-location-clients-stop", "isEqualToString:", objc_msgSend(a2, "clientKey")))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v16 = 2082;
      double v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Detected locationd startup; marking all historical clients as \"stopped\"\"}",
        buf,
        0x12u);
    }
    sub_1007BC97C(a1);
    return;
  }
  if (![a2 clientKey])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v13 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v16 = 2082;
    double v17 = "";
    unsigned int v6 = "{\"msg%{public}.0s\":\"Detected clientKey is empty\"}";
    uint64_t v7 = v13;
    os_log_type_t v8 = OS_LOG_TYPE_DEBUG;
    goto LABEL_26;
  }
  sub_100134750(buf, [objc_msgSend(objc_msgSend(a2, "clientKey"), "UTF8String") UTF8String]);
  __int16 v14 = buf;
  uint64_t v9 = sub_100105304(a1, buf, (uint64_t)&unk_101D0B290, (long long **)&v14);
  if (v18 < 0) {
    operator delete(*(void **)buf);
  }
  sub_100134750(buf, (char *)[@"com.apple.locationd.all-location-clients-stop" UTF8String]);
  __int16 v14 = buf;
  double v10 = sub_100105304(a1, buf, (uint64_t)&unk_101D0B290, (long long **)&v14);
  if (v18 < 0) {
    operator delete(*(void **)buf);
  }
  if ([a2 hasStartTime] && objc_msgSend(a2, "hasStopTime"))
  {
    v9[12] += 500;
    [a2 stopTime];
  }
  else if ([a2 hasStartTime])
  {
    [a2 startTime];
    *((void *)v9 + 5) = v12;
    [a2 startTime];
  }
  else
  {
    if (![a2 hasScore]) {
      return;
    }
    v9[12] += [a2 score];
    *((void *)v9 + 5) = 0;
    [a2 stopTime];
  }
  void v10[5] = v11;
}

void sub_1007BD278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007BD2A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (objc_opt_class())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unsigned int v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Registering pruning activity with check-in criteria for location consumption score info archive.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v11 = 0;
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::registerPruningActivityForLocationConsumptionScoreInfoArchive(CLHRequestArchive *, ConsumptionScoreMap &)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
    xpc_dictionary_set_string(v7, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_INTERVAL, 86400);
    xpc_dictionary_set_int64(v7, XPC_ACTIVITY_GRACE_PERIOD, 14400);
    xpc_dictionary_set_BOOL(v7, XPC_ACTIVITY_ALLOW_BATTERY, 1);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1007BD5E8;
    handler[3] = &unk_1022C6160;
    handler[4] = a2;
    handler[5] = a1;
    handler[6] = a3;
    xpc_activity_register("CLClientManager.loc-consumption-pruning", v7, handler);
    xpc_release(v7);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    os_log_type_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007BD5E8(void *a1, xpc_activity_t activity)
{
  uint64_t v3 = a1[5];
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    uint64_t v5 = *(void **)(v3 + 40);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_1007BD754;
    void v8[3] = &unk_1022C91B0;
    void v8[4] = a1[4];
    void v8[5] = v3;
    v8[6] = a1[6];
    [v5 async:v8];
  }
  else
  {
    xpc_activity_state_t v6 = state;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    xpc_object_t v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v10 = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2050;
      xpc_activity_state_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skip consumption score pruning activity\", \"Current State\":%{public}ld}", buf, 0x1Cu);
    }
  }
}

void sub_1007BD754(uint64_t a1)
{
}

void sub_1007BD764(uint64_t a1, void *a2, uint64_t a3)
{
  if (objc_opt_class())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    xpc_activity_state_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v48) = 2082;
      *(void *)((char *)&v48 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Pruning location consumption score info archive.\"}", buf, 0x12u);
    }
    xpc_object_t v7 = [[CLOSTransaction alloc] initWithDescription:"com.apple.locationd.pruning-score-archive"];
    sub_1007E4BDC((uint64_t)v44, a3);
    id v8 = [a2 pruneAndGetSecondaryDataOlderThan:CFAbsoluteTimeGetCurrent() + -259200.0];
    if ([v8 length])
    {
      *(void *)uint64_t buf = 0;
      *(void *)&long long v48 = buf;
      *((void *)&v48 + 1) = 0x5812000000;
      id v49 = sub_1007BE15C;
      memset(v51, 0, sizeof(v51));
      id v50 = sub_1007BE168;
      uint64_t v52 = 0;
      int v53 = 1065353216;
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472;
      v43[2] = sub_1007BE170;
      v43[3] = &unk_1022C91D8;
      v43[4] = buf;
      [a2 iterateSecondaryData:v8 forField:1 withHandler:v43];
      sub_1007BC97C(v48 + 48);
      for (uint64_t i = *(uint64_t **)(v48 + 64); i; uint64_t i = (uint64_t *)*i)
      {
        int v10 = i + 2;
        __int16 v11 = sub_100103284(v44, (unsigned __int8 *)i + 16);
        uint64_t v12 = v11;
        if (v11)
        {
          *((_DWORD *)v11 + 12) -= *((_DWORD *)i + 12);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v13 = qword_102419538;
          if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
            continue;
          }
          if (*((char *)i + 39) < 0) {
            int v10 = (void *)*v10;
          }
          int v14 = -*((_DWORD *)i + 12);
          int v15 = *((_DWORD *)v12 + 12);
          uint64_t v54 = 68289794;
          __int16 v55 = 2082;
          long long v56 = "";
          __int16 v57 = 2082;
          long long v58 = v10;
          __int16 v59 = 1026;
          int v60 = v14;
          __int16 v61 = 1026;
          int v62 = v15;
          __int16 v16 = v13;
          os_log_type_t v17 = OS_LOG_TYPE_DEBUG;
          char v18 = "{\"msg%{public}.0s\":\"Pruning LocationConsumptionUsageScore\", \"Client\":%{public, location:escape_onl"
                "y}s, \"ScoreAdjustment\":%{public}d, \"NewScore\":%{public}d}";
          uint32_t v19 = 40;
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v20 = qword_102419538;
          if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
            continue;
          }
          uint64_t v54 = 68289026;
          __int16 v55 = 2082;
          long long v56 = "";
          __int16 v16 = v20;
          os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
          char v18 = "{\"msg%{public}.0s\":\"#Warning Found a client in pruned data, that does not exist in memory.\"}";
          uint32_t v19 = 18;
        }
        _os_log_impl((void *)&_mh_execute_header, v16, v17, v18, (uint8_t *)&v54, v19);
      }
      _Block_object_dispose(buf, 8);
      sub_1002220F0((uint64_t)&v51[8]);
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v21 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Before rotation \"stopping\" the active clients", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v54) = 0;
      double v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::pruneAndRotateLocationConsumptionScoreArchiveAndUpdateTheStateAccordingly(CLHRequestArchive *, ConsumptionScoreMap &)", "%s\n", v35);
      if (v35 != (char *)buf) {
        free(v35);
      }
    }
    id v22 = objc_alloc_init((Class)NSMutableArray);
    for (uint64_t j = v45; j; uint64_t j = (uint64_t *)*j)
    {
      if (*((double *)j + 5) > 0.0)
      {
        __int16 v24 = j + 2;
        if (*((char *)j + 39) < 0) {
          __int16 v24 = (void *)*v24;
        }
        unint64_t v25 = +[NSString stringWithUTF8String:v24];
        if ([(NSString *)v25 isEqualToString:@"com.apple.locationd.all-location-clients-stop"])
        {
          sub_100138C88(a1, a2, v44, 0);
          [v22 addObject:[NSNull null]];
        }
        else
        {
          __int16 v26 = +[CLClientKeyPath clientKeyPathWithClientKey:v25];
          sub_100138C88(a1, a2, v44, v26);
          [v22 addObject:v26];
        }
      }
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v27 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Rotating location consumption score info archive.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v54) = 0;
      double v36 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::pruneAndRotateLocationConsumptionScoreArchiveAndUpdateTheStateAccordingly(CLHRequestArchive *, ConsumptionScoreMap &)", "%s\n", v36);
      if (v36 != (char *)buf) {
        free(v36);
      }
    }
    [a2 rotateSecondaryFile];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v28 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "After rotation \"resuming\" the \"stopped\" clients", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v54) = 0;
      id v37 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::pruneAndRotateLocationConsumptionScoreArchiveAndUpdateTheStateAccordingly(CLHRequestArchive *, ConsumptionScoreMap &)", "%s\n", v37);
      if (v37 != (char *)buf) {
        free(v37);
      }
    }
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    id v29 = [v22 countByEnumeratingWithState:&v39 objects:v46 count:16];
    if (v29)
    {
      uint64_t v30 = *(void *)v40;
      do
      {
        for (k = 0; k != v29; k = (char *)k + 1)
        {
          if (*(void *)v40 != v30) {
            objc_enumerationMutation(v22);
          }
          id v32 = *(void **)(*((void *)&v39 + 1) + 8 * (void)k);
          if (objc_msgSend(v32, "isEqual:", +[NSNull null](NSNull, "null"))) {
            double v33 = 0;
          }
          else {
            double v33 = v32;
          }
          sub_1007ADD2C(a1, a2, (uint64_t)v44, v33);
        }
        id v29 = [v22 countByEnumeratingWithState:&v39 objects:v46 count:16];
      }
      while (v29);
    }

    sub_1002220F0((uint64_t)v44);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v34 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      LOWORD(v48) = 2082;
      *(void *)((char *)&v48 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007BE0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
}

uint64_t sub_1007BE15C(uint64_t a1, uint64_t a2)
{
  return sub_1000E2908(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t sub_1007BE168(uint64_t a1)
{
  return sub_1002220F0(a1 + 48);
}

void sub_1007BE170(uint64_t a1, uint64_t a2)
{
  id v3 = [objc_alloc((Class)CLPLocationConsumptionScoreInfo) initWithData:a2];
  sub_1007BCF18(*(void *)(*(void *)(a1 + 32) + 8) + 48, v3);
}

void sub_1007BE1DC(uint64_t a1)
{
  if (objc_opt_class())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Resetting resetLocationAttributionIntervalArchive", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v12.__r_.__value_.__l.__data_) = 0;
      __int16 v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::resetLocationAttributionIntervalArchive()", "%s\n", v11);
      if (v11 != buf) {
        free(v11);
      }
    }

    id v3 = [CLHRequestArchive alloc];
    sub_10053B99C(0, &v12);
    double v4 = std::string::append(&v12, "locationAttributionInfo/");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v4->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t buf = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0) {
      xpc_activity_state_t v6 = buf;
    }
    else {
      xpc_activity_state_t v6 = *(unsigned char **)buf;
    }
    *(void *)(a1 + 544) = [(CLHRequestArchive *)v3 initWithDirectory:+[NSString stringWithUTF8String:v6] itemCountThresholdForAutoCleanUp:500];
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    [*(id *)(a1 + 544) setRotationInterval:-1.0];
    xpc_object_t v7 = (id *)(a1 + 544);
    sub_1007BD2A0(a1, *(void *)(a1 + 544), a1 + 504);
    double Current = CFAbsoluteTimeGetCurrent();
    id v9 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
    [v9 setClientKey:@"com.apple.locationd.all-location-clients-stop"];
    [v9 setStopTime:Current];
    [v9 setScore:0];
    [*v7 writeSecondaryObject:v9 toField:1];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLPLocationConsumptionScoreInfo doesn't exist in this platform.\"}", buf, 0x12u);
    }
  }
}

void sub_1007BE514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSDate *sub_1007BE550(uint64_t a1, uint64_t a2)
{
  id v3 = [[*(id *)(a1 + 136) dictionaryForKey:a2 atKeyPath:off_10241BC98 defaultValue:0];
  if (!v3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v7 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
      return 0;
    }
    int v13 = 68289282;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2114;
    uint64_t v18 = a2;
    id v8 = "{\"msg%{public}.0s\":\"#luHistorical TranscriptSession not found - fetching dateIntervals\", \"Client\":%{publi"
         "c, location:escape_only}@}";
    id v9 = v7;
    os_log_type_t v10 = OS_LOG_TYPE_DEBUG;
    goto LABEL_15;
  }
  id v4 = [v3 objectForKeyedSubscript:@"startDate"];
  if (!v4)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v11 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
      return 0;
    }
    int v13 = 68289282;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2114;
    uint64_t v18 = a2;
    id v8 = "{\"msg%{public}.0s\":\"#luHistorical transcriptStartDate not found\", \"Client\":%{public, location:escape_only}@}";
    id v9 = v11;
    os_log_type_t v10 = OS_LOG_TYPE_DEFAULT;
LABEL_15:
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v8, (uint8_t *)&v13, 0x1Cu);
    return 0;
  }
  [v4 doubleValue];
  long long v5 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  xpc_activity_state_t v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 68289538;
    int v14 = 0;
    __int16 v15 = 2082;
    __int16 v16 = "";
    __int16 v17 = 2114;
    uint64_t v18 = a2;
    __int16 v19 = 2114;
    uint64_t v20 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#luHistorical transcriptStartDate\", \"Client\":%{public, location:escape_only}@, \"startDate\":%{public, location:escape_only}@}", (uint8_t *)&v13, 0x26u);
  }
  return v5;
}

void sub_1007BE7D8(uint64_t a1, void *a2)
{
  id v3 = (char *)[a2 count];
  id v4 = v3 - 2;
  if ((unint64_t)v3 >= 2)
  {
    long long v5 = v3 - 1;
    id v6 = [a2 objectAtIndexedSubscript:v4];
    id v14 = [a2 objectAtIndexedSubscript:v5];
    [objc_msgSend(v6, "endDate") timeIntervalSinceReferenceDate];
    double v8 = v7;
    [objc_msgSend(v14, "startDate") timeIntervalSinceReferenceDate];
    if (v8 >= v9)
    {
      [objc_msgSend(v6, "startDate") timeIntervalSinceReferenceDate];
      os_log_type_t v10 = +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:");
      [objc_msgSend(v6, "endDate") timeIntervalSinceReferenceDate];
      double v12 = v11;
      [objc_msgSend(v14, "endDate") timeIntervalSinceReferenceDate];
      if (v12 < v13)
      {
        [objc_msgSend(v14, "endDate") timeIntervalSinceReferenceDate];
        [a2 replaceObjectAtIndex:v4 withObject:[objc_alloc((Class)NSDateInterval) initWithStartDate:v10 endDate:[NSDate dateWithTimeIntervalSinceReferenceDate:]]];
      }
      [a2 removeObjectAtIndex:v5];
    }
  }
}

void sub_1007BE944(uint64_t a1, double a2, double a3)
{
  if ((unint64_t)[*(id *)(a1 + 32) count] > *(int *)(*(void *)(*(void *)(a1 + 48) + 8)
                                                                          + 24)
    && (id v6 = objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:")) != 0
    && (id v7 = v6, objc_msgSend(objc_msgSend(v6, "startDate"), "timeIntervalSinceReferenceDate"), v8 <= a2))
  {
    id v9 = [*(id *)(a1 + 40) addObject:v7];
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  }
  else
  {
    id v9 = [[*(id *)(a1 + 40) addObject:[objc_alloc((Class)NSDateInterval) initWithStartDate:[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a2) endDate:[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", a3)]];
  }
  os_log_type_t v10 = *(void **)(a1 + 40);

  sub_1007BE7D8((uint64_t)v9, v10);
}

id sub_1007BEA40(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 136) primaryKeyPathForAuthLimitedKeyPath:a2];
}

id sub_1007BEA4C(uint64_t a1, void *a2)
{
  if ([*(id *)(a1 + 136) hasValueForKey:@"isHarvestableSystemService" atKeyPath:a2])
  {
    id v4 = *(void **)(a1 + 136);
    return [v4 BOOLForKey:@"isHarvestableSystemService" atKeyPath:a2 defaultValue:0];
  }
  else
  {
    CFStringRef v6 = (const __CFString *)[a2 bundlePath];
    if (!v6) {
      return 0;
    }
    BOOL v7 = sub_1000B7030(v6);
    [*(id *)(a1 + 136) setBool:v7 forKey:@"isHarvestableSystemService" atKeyPath:a2];
    return (id)v7;
  }
}

id sub_1007BEB00(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 136) dataForKey:@"ClientStorageToken" atKeyPath:a2 defaultValue:0];
}

void sub_1007BEB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  sub_100103240();
  if (!sub_100106424())
  {
    sub_100103240();
    if (!sub_10010145C()) {
      return;
    }
  }
  uint64_t v14 = a3 ? 0 : a6;
  __int16 v15 = sub_1007C4DF0(a1, (uint64_t *)a2, v14, 1);
  if (!v15) {
    return;
  }
  __int16 v16 = v15;
  if (a3)
  {
    int v34 = BYTE4(a5);
    uint64_t v35 = a2;
    uint64_t v36 = a5;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    __int16 v17 = [(CLCompanionSyncAuthObject *)v15 interestZones];
    id v18 = [(NSMutableArray *)v17 countByEnumeratingWithState:&v37 objects:v57 count:16];
    if (v18)
    {
      id v19 = v18;
      unsigned int v32 = a4;
      unsigned int v33 = a6;
      uint64_t v20 = *(void *)v38;
LABEL_10:
      uint64_t v21 = 0;
      while (1)
      {
        if (*(void *)v38 != v20) {
          objc_enumerationMutation(v17);
        }
        id v22 = *(CLCompanionSyncAuthObject **)(*((void *)&v37 + 1) + 8 * v21);
        if ([-[CLCompanionSyncAuthObject zoneIdentifier](v22, "zoneIdentifier") isEqualToString:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3)])break; {
        if (v19 == (id)++v21)
        }
        {
          id v19 = [(NSMutableArray *)v17 countByEnumeratingWithState:&v37 objects:v57 count:16];
          if (v19) {
            goto LABEL_10;
          }
          id v22 = 0;
          break;
        }
      }
      a4 = v32;
      a6 = v33;
    }
    else
    {
      id v22 = 0;
    }
    [(CLCompanionSyncAuthObject *)v22 setClearClient:a6];
    [(CLCompanionSyncAuthObject *)v22 setAuthMask:a4];
    a2 = v35;
    a5 = v36;
    int v23 = v34;
    if (!v34) {
      goto LABEL_24;
    }
    __int16 v24 = v22;
    goto LABEL_23;
  }
  [(CLCompanionSyncAuthObject *)v15 setAuthMask:a4];
  int v23 = BYTE4(a5);
  if (BYTE4(a5))
  {
    __int16 v24 = v16;
LABEL_23:
    [(CLCompanionSyncAuthObject *)v24 setCorrectiveCompensationMask:a5];
  }
LABEL_24:
  if (*((char *)a7 + 23) >= 0) {
    unint64_t v25 = a7;
  }
  else {
    unint64_t v25 = (uint64_t *)*a7;
  }
  [*(id *)(a1 + 1536) addObject:v16 withSyncSessionReason:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v25)];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v26 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v27 = a2;
    }
    else {
      uint64_t v27 = *(void *)a2;
    }
    if (v23) {
      int v28 = a5;
    }
    else {
      int v28 = 0;
    }
    *(_DWORD *)uint64_t buf = 136446978;
    uint64_t v50 = v27;
    __int16 v51 = 1026;
    int v52 = a4;
    __int16 v53 = 1026;
    int v54 = v28;
    __int16 v55 = 1026;
    int v56 = a6;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "#authsync addObject: %{public}s %{public}u %{public}u %{public}d ", buf, 0x1Eu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v29 = a2;
    }
    else {
      uint64_t v29 = *(void *)a2;
    }
    if (v23) {
      int v30 = a5;
    }
    else {
      int v30 = 0;
    }
    int v41 = 136446978;
    uint64_t v42 = v29;
    __int16 v43 = 1026;
    int v44 = a4;
    __int16 v45 = 1026;
    int v46 = v30;
    __int16 v47 = 1026;
    int v48 = a6;
    unsigned int v31 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::synchronizeAuthorizationChangeTypeAdd(const std::string &, const char *, uint32_t, std::optional<uint32_t>, BOOL, const std::string &)", "%s\n", v31);
    if (v31 != (char *)buf) {
      free(v31);
    }
  }
}

void sub_1007BEEE4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  [*(id *)(a1 + 32) silo];
  if (*(unsigned char *)(a1 + 1568)) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = *a3 == 1;
  }
  if (v7)
  {
    int v8 = *(unsigned __int8 *)(a4 + 4);
    *(unsigned char *)(a1 + 1568) = v8;
    if (v8)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        v10[0] = 68289026;
        v10[1] = 0;
        __int16 v11 = 2082;
        double v12 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#dic rehydration on device first unlock\"}", (uint8_t *)v10, 0x12u);
      }
      [*(id *)(*(void *)(a1 + 1560) + 16) unregister:*(void *)(*(void *)(a1 + 1560) + 8) forNotification:1];
      sub_1007BF010((void *)a1);
    }
  }
}

void sub_1007BF010(void *a1)
{
  std::string __p = 0;
  uint64_t v29 = 0;
  int v30 = 0;
  id v2 = (void *)a1[111];
  id v3 = a1 + 112;
  if (v2 != a1 + 112)
  {
    id v4 = 0;
    do
    {
      if (v4 >= v30)
      {
        uint64_t v5 = (v4 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v5 + 1) >> 61) {
          sub_1001D7FD4();
        }
        unint64_t v6 = (v30 - (unsigned char *)__p) >> 2;
        if (v6 <= v5 + 1) {
          unint64_t v6 = v5 + 1;
        }
        if ((unint64_t)(v30 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v7 = v6;
        }
        if (v7) {
          int v8 = (char *)sub_1000DA54C((uint64_t)&v30, v7);
        }
        else {
          int v8 = 0;
        }
        id v9 = &v8[8 * v5];
        *(void *)id v9 = v2[4];
        id v4 = v9 + 8;
        __int16 v11 = (char *)__p;
        os_log_type_t v10 = v29;
        if (v29 != __p)
        {
          do
          {
            uint64_t v12 = *((void *)v10 - 1);
            v10 -= 8;
            *((void *)v9 - 1) = v12;
            v9 -= 8;
          }
          while (v10 != v11);
          os_log_type_t v10 = (char *)__p;
        }
        std::string __p = v9;
        uint64_t v29 = v4;
        int v30 = &v8[8 * v7];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(void *)id v4 = v2[4];
        v4 += 8;
      }
      uint64_t v29 = v4;
      double v13 = (void *)v2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          double v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v2[2];
          BOOL v15 = *v14 == (void)v2;
          id v2 = v14;
        }
        while (!v15);
      }
      id v2 = v14;
    }
    while (v14 != v3);
    for (uint64_t i = (CLConnection **)__p; i != (CLConnection **)v4; ++i)
      sub_1001B469C((uint64_t)a1, *i);
  }
  __int16 v17 = (void *)a1[114];
  if (v17 != a1 + 115)
  {
    do
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v18 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = sub_10014D19C(v17[4]);
        uint64_t v20 = v17[4];
        *(_DWORD *)uint64_t buf = 68289538;
        int v32 = 0;
        __int16 v33 = 2082;
        int v34 = "";
        __int16 v35 = 2114;
        uint64_t v36 = v19;
        __int16 v37 = 2050;
        uint64_t v38 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#dic triggerRetirement due to rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      uint64_t v21 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v22 = sub_10014D19C(v17[4]);
        uint64_t v23 = v17[4];
        *(_DWORD *)uint64_t buf = 68289538;
        int v32 = 0;
        __int16 v33 = 2082;
        int v34 = "";
        __int16 v35 = 2114;
        uint64_t v36 = v22;
        __int16 v37 = 2050;
        uint64_t v38 = v23;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#dic triggerRetirement due to rehydration", "{\"msg%{public}.0s\":\"#dic triggerRetirement due to rehydration\", \"ClientKeyPath\":%{public, location:escape_only}@, \"this\":\"%{public}p\"}", buf, 0x26u);
      }
      sub_1011C2514(v17[4]);
      __int16 v24 = (void *)v17[1];
      if (v24)
      {
        do
        {
          unint64_t v25 = v24;
          __int16 v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          unint64_t v25 = (void *)v17[2];
          BOOL v15 = *v25 == (void)v17;
          __int16 v17 = v25;
        }
        while (!v15);
      }
      __int16 v17 = v25;
    }
    while (v25 != a1 + 115);
  }
  __int16 v26 = (void *)a1[17];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472;
  double v27[2] = sub_1007BFCF4;
  v27[3] = &unk_1022C8D28;
  v27[4] = a1;
  [v26 iterateAllAnchorKeyPathsWithBlock:v27];
  if (__p)
  {
    uint64_t v29 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1007BF3CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007BF400(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = sub_100103E24(a1, a2);
  id v7 = [[objc_msgSend(a4, "dictionaryForKey:defaultValue:", @"DIC", 0) objectForKeyedSubscript:-[NSNumber stringValue](+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3), "stringValue")];
  if (v7)
  {
    uint64_t v19 = v7;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    obuint64_t j = [v7 allKeys];
    id v8 = [obj countByEnumeratingWithState:&v20 objects:v31 count:16];
    if (v8)
    {
      uint64_t v18 = *(void *)v21;
      do
      {
        id v9 = 0;
        do
        {
          if (*(void *)v21 != v18) {
            objc_enumerationMutation(obj);
          }
          id v10 = [v19 objectForKeyedSubscript:*(void *)(*((void *)&v20 + 1) + 8 * (void)v9)];
          switch((int)a3)
          {
            case 1:
              operator new();
            case 2:
              operator new();
            case 3:
              if (objc_msgSend(objc_msgSend(v10, "objectForKey:", @"SessionActive"), "BOOLValue")) {
                operator new();
              }
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              uint64_t v14 = qword_102419538;
              if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_29;
              }
              std::string __p = (void *)68289538;
              __int16 v25 = 2082;
              __int16 v26 = "";
              __int16 v27 = 2114;
              id v28 = v6;
              __int16 v29 = 1026;
              int v30 = 3;
              uint64_t v12 = v14;
              double v13 = "{\"msg%{public}.0s\":\"#dic CLDaemonBackgroundActivitySession session is not active. Will skip on be"
                    "ing a butterfly\", \"Client\":%{public, location:escape_only}@, \"dicType\":%{public}d}";
              break;
            case 4:
              operator new();
            case 5:
              operator new();
            case 6:
              if (objc_msgSend(objc_msgSend(v10, "objectForKey:", @"SessionActive"), "BOOLValue")) {
                operator new();
              }
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              uint64_t v15 = qword_102419538;
              if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_29;
              }
              std::string __p = (void *)68289538;
              __int16 v25 = 2082;
              __int16 v26 = "";
              __int16 v27 = 2114;
              id v28 = v6;
              __int16 v29 = 1026;
              int v30 = 6;
              uint64_t v12 = v15;
              double v13 = "{\"msg%{public}.0s\":\"#dic CLDaemonServiceSession session is not active. Will skip on being a butte"
                    "rfly\", \"Client\":%{public, location:escape_only}@, \"dicType\":%{public}d}";
              break;
            default:
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              uint64_t v11 = qword_102419538;
              if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_29;
              }
              std::string __p = (void *)68289538;
              __int16 v25 = 2082;
              __int16 v26 = "";
              __int16 v27 = 2114;
              id v28 = v6;
              __int16 v29 = 1026;
              int v30 = a3;
              uint64_t v12 = v11;
              double v13 = "{\"msg%{public}.0s\":\"#Warning #dic rehydration, unrecognized dic type\", \"Client\":%{public, loca"
                    "tion:escape_only}@, \"dicType\":%{public}d}";
              break;
          }
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&__p, 0x22u);
LABEL_29:
          id v9 = (char *)v9 + 1;
        }
        while (v8 != v9);
        id v8 = [obj countByEnumeratingWithState:&v20 objects:v31 count:16];
      }
      while (v8);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      std::string __p = (void *)68289538;
      __int16 v25 = 2082;
      __int16 v26 = "";
      __int16 v27 = 2114;
      id v28 = v6;
      __int16 v29 = 1026;
      int v30 = a3;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"skip #dic rehydration, specified dic type does not exists\", \"Client\":%{public, location:escape_only}@, \"dicType\":%{public}d}", (uint8_t *)&__p, 0x22u);
    }
  }
}

void sub_1007BFC1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
}

id sub_1007BFCF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007BFD6C;
  v5[3] = &unk_1022C8D78;
  v5[4] = v2;
  return [v3 iterateIdentitiesRelatedToKeyPath:a2 withBlock:v5];
}

void sub_1007BFD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    int v11 = 68289282;
    int v12 = 0;
    __int16 v13 = 2082;
    uint64_t v14 = "";
    __int16 v15 = 2114;
    uint64_t v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#dic #rehydration started\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v11, 0x1Cu);
  }
  if ([*(id *)(v3 + 136) hasValueForKey:@"DIC" atKeyPath:a2])
  {
    id v5 = [*(id *)(v3 + 136) readonlyStoreAtKeyPath:a2];
    sub_1007BF400(v3, a2, 3, v5);
    sub_1007BF400(v3, a2, 1, v5);
    sub_1007BF400(v3, a2, 2, v5);
    sub_1007BF400(v3, a2, 4, v5);
    sub_1007BF400(v3, a2, 6, v5);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2114;
      uint64_t v16 = a2;
      id v7 = "{\"msg%{public}.0s\":\"#dic #rehydration completed\", \"Client\":%{public, location:escape_only}@}";
      id v8 = v6;
      os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v11, 0x1Cu);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      uint64_t v14 = "";
      __int16 v15 = 2114;
      uint64_t v16 = a2;
      id v7 = "{\"msg%{public}.0s\":\"skip #rehydration No #dic\", \"Client\":%{public, location:escape_only}@}";
      id v8 = v10;
      os_log_type_t v9 = OS_LOG_TYPE_DEBUG;
      goto LABEL_14;
    }
  }
}

void sub_1007C000C(uint64_t a1, void *a2, int a3, int a4, int a5, int a6, int a7)
{
  if ((a3 & 1) != 0 || (a4 & 1) != 0 || (a5 & 1) != 0 || a6)
  {
    sub_100134750(__p, [objc_msgSend(objc_msgSend(a2, "clientAnchor"), "UTF8String") UTF8String]);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v15 = __p;
      if (v58 < 0) {
        __int16 v15 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 68290818;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v60 = 2082;
      __int16 v61 = "";
      __int16 v62 = 2114;
      uint64_t v63 = (void **)a2;
      __int16 v64 = 2082;
      long long v65 = (const char *)v15;
      __int16 v66 = 1026;
      *(_DWORD *)__int16 v67 = a3;
      *(_WORD *)&v67[4] = 1026;
      *(_DWORD *)&v67[6] = a4;
      __int16 v68 = 1026;
      int v69 = a5;
      __int16 v70 = 1026;
      int v71 = a6;
      __int16 v72 = 1026;
      int v73 = a7;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"updating ClientServiceSessionInfo cache\", \"Client\":%{public, location:escape_only}@, \"anchor\":%{public, location:escape_only}s, \"adjustRefCountForPassiveServiceSession\":%{public}hhd, \"adjustRefCountForWhenInUseServiceSession\":%{public}hhd, \"adjustRefCountForAlwaysServiceSession\":%{public}hhd, \"adjustRefCountForOldSDKLinking\":%{public}hhd, \"coming\":%{public}hhd}", buf, 0x44u);
    }
    uint64_t v16 = (_DWORD *)sub_10012FFE0(a1 + 1112, (const void **)__p);
    __int16 v17 = (_DWORD *)(a1 + 1120);
    if (a7)
    {
      if (v17 == v16)
      {
        *(void *)uint64_t buf = __p;
        uint64_t v18 = sub_1007E4C54((uint64_t **)(a1 + 1112), (const void **)__p, (uint64_t)&unk_101D0B290, (long long **)buf);
        v18[7] = 0;
        v18[8] = 0;
      }
      uint64_t v19 = (_DWORD *)sub_10012FFE0(a1 + 1112, (const void **)__p);
      if (a3)
      {
        ++v19[14];
        if (!a4)
        {
LABEL_16:
          if (!a5) {
            goto LABEL_17;
          }
          goto LABEL_39;
        }
      }
      else if (!a4)
      {
        goto LABEL_16;
      }
      ++v19[15];
      if (!a5)
      {
LABEL_17:
        if (!a6)
        {
LABEL_41:
          id v24 = a2;
          __int16 v25 = *(void **)(a1 + 40);
          v56[0] = _NSConcreteStackBlock;
          v56[1] = 3221225472;
          v56[2] = sub_1007C0EE8;
          v56[3] = &unk_1022A56E0;
          v56[4] = v24;
          v56[5] = a1;
          [v25 async:v56];
          if (v58 < 0) {
            operator delete(__p[0]);
          }
          return;
        }
LABEL_40:
        ++v19[17];
        goto LABEL_41;
      }
LABEL_39:
      ++v19[16];
      if (!a6) {
        goto LABEL_41;
      }
      goto LABEL_40;
    }
    if (v17 == v16)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v26 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        __int16 v27 = __p;
        if (v58 < 0) {
          __int16 v27 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v60 = 2082;
        __int16 v61 = "";
        __int16 v62 = 2082;
        uint64_t v63 = v27;
        __int16 v64 = 2082;
        long long v65 = "assert";
        __int16 v66 = 2081;
        *(void *)__int16 v67 = "iter != fClientServiceSessionInfoMap.end()";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for SevriceSessionInfo - Client not found\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      id v28 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        __int16 v29 = __p;
        if (v58 < 0) {
          __int16 v29 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v60 = 2082;
        __int16 v61 = "";
        __int16 v62 = 2082;
        uint64_t v63 = v29;
        __int16 v64 = 2082;
        long long v65 = "assert";
        __int16 v66 = 2081;
        *(void *)__int16 v67 = "iter != fClientServiceSessionInfoMap.end()";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v28, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for SevriceSessionInfo - Client not found", "{\"msg%{public}.0s\":\"Decrementing refcount for SevriceSessionInfo - Client not found\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      int v30 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        unsigned int v31 = __p;
        if (v58 < 0) {
          unsigned int v31 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v60 = 2082;
        __int16 v61 = "";
        __int16 v62 = 2082;
        uint64_t v63 = v31;
        __int16 v64 = 2082;
        long long v65 = "assert";
        __int16 v66 = 2081;
        *(void *)__int16 v67 = "iter != fClientServiceSessionInfoMap.end()";
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for SevriceSessionInfo - Client not found\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      }
    }
    else
    {
      if (a3)
      {
        int v20 = v16[14];
        if (v20 <= 0)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          int v32 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            __int16 v33 = __p;
            if (v58 < 0) {
              __int16 v33 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2082;
            uint64_t v63 = v33;
            __int16 v64 = 2082;
            long long v65 = "assert";
            __int16 v66 = 2081;
            *(void *)__int16 v67 = "iter->second.passiveServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          int v34 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            __int16 v35 = __p;
            if (v58 < 0) {
              __int16 v35 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2082;
            uint64_t v63 = v35;
            __int16 v64 = 2082;
            long long v65 = "assert";
            __int16 v66 = 2081;
            *(void *)__int16 v67 = "iter->second.passiveServiceSessions > 0";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v34, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for Mosasaurus - refcount should be greater than 0", "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v36 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
          {
            __int16 v37 = __p;
            if (v58 < 0) {
              __int16 v37 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2082;
            uint64_t v63 = v37;
            __int16 v64 = 2082;
            long long v65 = "assert";
            __int16 v66 = 2081;
            *(void *)__int16 v67 = "iter->second.passiveServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          }
          goto LABEL_128;
        }
        v16[14] = v20 - 1;
      }
      if (a4)
      {
        int v21 = v16[15];
        if (v21 <= 0)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v38 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            long long v39 = __p;
            if (v58 < 0) {
              long long v39 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2082;
            uint64_t v63 = v39;
            __int16 v64 = 2082;
            long long v65 = "assert";
            __int16 v66 = 2081;
            *(void *)__int16 v67 = "iter->second.whenInUseServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          long long v40 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            int v41 = __p;
            if (v58 < 0) {
              int v41 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2082;
            uint64_t v63 = v41;
            __int16 v64 = 2082;
            long long v65 = "assert";
            __int16 v66 = 2081;
            *(void *)__int16 v67 = "iter->second.whenInUseServiceSessions > 0";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v40, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for Mosasaurus - refcount should be greater than 0", "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v42 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
          {
            __int16 v43 = __p;
            if (v58 < 0) {
              __int16 v43 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2082;
            uint64_t v63 = v43;
            __int16 v64 = 2082;
            long long v65 = "assert";
            __int16 v66 = 2081;
            *(void *)__int16 v67 = "iter->second.whenInUseServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for Mosasaurus - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          }
          goto LABEL_128;
        }
        v16[15] = v21 - 1;
      }
      if (a5)
      {
        int v22 = v16[16];
        if (v22 <= 0)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          int v44 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
          {
            __int16 v45 = __p;
            if (v58 < 0) {
              __int16 v45 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2082;
            uint64_t v63 = v45;
            __int16 v64 = 2082;
            long long v65 = "assert";
            __int16 v66 = 2081;
            *(void *)__int16 v67 = "iter->second.alwaysServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for MosaTuna - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          int v46 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            __int16 v47 = __p;
            if (v58 < 0) {
              __int16 v47 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2082;
            uint64_t v63 = v47;
            __int16 v64 = 2082;
            long long v65 = "assert";
            __int16 v66 = 2081;
            *(void *)__int16 v67 = "iter->second.alwaysServiceSessions > 0";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v46, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for MosaTuna - refcount should be greater than 0", "{\"msg%{public}.0s\":\"Decrementing refcount for MosaTuna - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          int v48 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
          {
            id v49 = __p;
            if (v58 < 0) {
              id v49 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 68289795;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v60 = 2082;
            __int16 v61 = "";
            __int16 v62 = 2082;
            uint64_t v63 = v49;
            __int16 v64 = 2082;
            long long v65 = "assert";
            __int16 v66 = 2081;
            *(void *)__int16 v67 = "iter->second.alwaysServiceSessions > 0";
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for MosaTuna - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
          }
          goto LABEL_128;
        }
        v16[16] = v22 - 1;
      }
      if (!a6)
      {
LABEL_32:
        if (!v16[14] && !v16[15] && !v16[16] && !v16[17]) {
          sub_100645C00((uint64_t **)(a1 + 1112), (uint64_t)v16);
        }
        goto LABEL_41;
      }
      int v23 = v16[17];
      if (v23 > 0)
      {
        v16[17] = v23 - 1;
        goto LABEL_32;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v50 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        __int16 v51 = __p;
        if (v58 < 0) {
          __int16 v51 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v60 = 2082;
        __int16 v61 = "";
        __int16 v62 = 2082;
        uint64_t v63 = v51;
        __int16 v64 = 2082;
        long long v65 = "assert";
        __int16 v66 = 2081;
        *(void *)__int16 v67 = "iter->second.serviceSessionsWithOldSDKLinking > 0";
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Decrementing refcount for OldSDKLinking - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      int v52 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        __int16 v53 = __p;
        if (v58 < 0) {
          __int16 v53 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v60 = 2082;
        __int16 v61 = "";
        __int16 v62 = 2082;
        uint64_t v63 = v53;
        __int16 v64 = 2082;
        long long v65 = "assert";
        __int16 v66 = 2081;
        *(void *)__int16 v67 = "iter->second.serviceSessionsWithOldSDKLinking > 0";
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v52, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Decrementing refcount for OldSDKLinking - refcount should be greater than 0", "{\"msg%{public}.0s\":\"Decrementing refcount for OldSDKLinking - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      int v54 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        __int16 v55 = __p;
        if (v58 < 0) {
          __int16 v55 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 68289795;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v60 = 2082;
        __int16 v61 = "";
        __int16 v62 = 2082;
        uint64_t v63 = v55;
        __int16 v64 = 2082;
        long long v65 = "assert";
        __int16 v66 = 2081;
        *(void *)__int16 v67 = "iter->second.serviceSessionsWithOldSDKLinking > 0";
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Decrementing refcount for OldSDKLinking - refcount should be greater than 0\", \"clientAnchor\":%{public, location:escape_only}s, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x30u);
      }
    }
LABEL_128:
    abort_report_np();
    __break(1u);
  }
}

void sub_1007C0EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C0EE8(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  sub_100134750(__p, "");
  sub_1001341F0(v2, v3, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1007C0F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C0F70(uint64_t a1, uint64_t a2, void *a3)
{
  if ([*(id *)(a1 + 136) hasValueForKey:@"SubIdentities" atKeyPath:a2])
  {
    if ([a3 objectForKeyedSubscript:@"RemoteUsage"])
    {
      id v4 = [a3 objectForKeyedSubscript:@"RemoteUsage"];
      id v5 = [v4 allKeys];
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      id v6 = [v5 countByEnumeratingWithState:&v32 objects:v36 count:16];
      if (v6)
      {
        uint64_t v7 = *(void *)v33;
        do
        {
          for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v33 != v7) {
              objc_enumerationMutation(v5);
            }
            uint64_t v9 = *(void *)(*((void *)&v32 + 1) + 8 * i);
            [v4 objectForKeyedSubscript:v9];
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              [objc_msgSend(a3, "objectForKeyedSubscript:", @"RemoteUsage") setObject:objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", v9), "objectAtIndexedSubscript:", 1) forKeyedSubscript:v9];
            }
          }
          id v6 = [v5 countByEnumeratingWithState:&v32 objects:v36 count:16];
        }
        while (v6);
      }
    }
    uint64_t v10 = 0;
    while (1)
    {
      long long v31 = 0uLL;
      sub_100101464(v10, (void *)&v31 + 1, (__CFString **)&v31);
      uint64_t v12 = *((void *)&v31 + 1);
      uint64_t v11 = v31;
      if (v31 != 0) {
        break;
      }
LABEL_20:
      if (++v10 == 21) {
        return;
      }
    }
    uint64_t v27 = 0;
    id v28 = &v27;
    uint64_t v29 = 0x2020000000;
    char v30 = 0;
    uint64_t v23 = 0;
    id v24 = &v23;
    uint64_t v25 = 0x2020000000;
    char v26 = 0;
    uint64_t v19 = 0;
    int v20 = (double *)&v19;
    uint64_t v21 = 0x2020000000;
    uint64_t v22 = 0x7FEFFFFFFFFFFFFFLL;
    uint64_t v15 = 0;
    uint64_t v16 = (double *)&v15;
    uint64_t v17 = 0x2020000000;
    unint64_t v18 = 0xBFF0000000000000;
    [*(id *)(a1 + 136) iterateIdentitiesRelatedToKeyPath:withBlock:];
    if (*((unsigned char *)v28 + 24))
    {
      __int16 v13 = +[NSNumber numberWithDouble:v20[3]];
    }
    else
    {
      if (!*((unsigned char *)v24 + 24))
      {
LABEL_19:
        _Block_object_dispose(&v15, 8);
        _Block_object_dispose(&v19, 8);
        _Block_object_dispose(&v23, 8);
        _Block_object_dispose(&v27, 8);
        goto LABEL_20;
      }
      __int16 v13 = +[NSNumber numberWithDouble:v16[3]];
      uint64_t v12 = v11;
    }
    [a3 setObject:v13 forKeyedSubscript:v12];
    goto LABEL_19;
  }
}

void sub_1007C1288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

void sub_1007C12CC(void *a1, void *a2)
{
  uint64_t v4 = a1[9];
  if (([a2 isEqual:a1[4]] & 1) == 0
    && +[CLAuthorizationDatabase keyPath:a2 sharesAuthWithKeyPath:a1[4]])
  {
    id v6 = [*(id *)(v4 + 136) readonlyStoreAtKeyPath:a2];
    [v6 doubleForKey:a1[10] defaultValue:-1.0];
    double v8 = v7;
    [v6 doubleForKey:a1[11] defaultValue:-1.0];
    if (v8 == -1.0)
    {
      if (v9 != -1.0)
      {
        *(unsigned char *)(*(void *)(a1[7] + 8) + 24) = 1;
        uint64_t v11 = *(void *)(a1[8] + 8);
        if (*(double *)(v11 + 24) < v9) {
          *(double *)(v11 + 24) = v9;
        }
      }
    }
    else
    {
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
      uint64_t v10 = *(void *)(a1[6] + 8);
      if (v8 < *(double *)(v10 + 24)) {
        *(double *)(v10 + 24) = v8;
      }
    }
  }
}

void sub_1007C13E0(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Running #AuthDatabaseMigration_7", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v8 = 0;
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_7()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = *(void **)(a1 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1007C16F0;
  v7[3] = &unk_1022C8D28;
  v7[4] = a1;
  [v3 iterateAllAnchorKeyPathsWithBlock:v7];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished #AuthDatabaseMigration_7", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v8 = 0;
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_7()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

id sub_1007C16F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007C1768;
  v5[3] = &unk_1022C8D78;
  v5[4] = v2;
  return [v3 iterateIdentitiesRelatedToKeyPath:a2 withBlock:v5];
}

id sub_1007C1768(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = [*(id *)(v3 + 136) intForKey:@"SupportedAuthorizationMask" atKeyPath:a2 defaultValue:0];
  if ((v4 & 6) == 4)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      uint64_t v36 = "";
      __int16 v37 = 2114;
      uint64_t v38 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration client's authorization mask contains Always but not WhenInUse\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    [*(id *)(v3 + 136) setInt:v4 | 2 forKey:@"SupportedAuthorizationMask" atKeyPath:a2];
  }
  unsigned int v6 = [*(id *)(v3 + 136) hasValueForKey:@"Authorized" atKeyPath:a2];
  unsigned __int8 v7 = [*(id *)(v3 + 136) hasValueForKey:@"Authorization" atKeyPath:a2];
  if (v6 && (v7 & 1) == 0)
  {
    if ([*(id *)(v3 + 136) BOOLForKey:@"Authorized" atKeyPath:a2 defaultValue:0])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        uint64_t v36 = "";
        __int16 v37 = 2114;
        uint64_t v38 = a2;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration AuthMigrate: Y => Always\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      unint64_t v9 = 4;
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v10 = qword_102419538;
      unint64_t v9 = 1;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        uint64_t v36 = "";
        __int16 v37 = 2114;
        uint64_t v38 = a2;
        unint64_t v9 = 1;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration AuthMigrate: N => Never\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    if (v4)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v11 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        uint64_t v36 = "";
        __int16 v37 = 2114;
        uint64_t v38 = a2;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration AuthMigrate: Authorization mask already available\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v12 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        uint64_t v36 = "";
        __int16 v37 = 2114;
        uint64_t v38 = a2;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration AuthMigrate: Imputing default supported authorization mask\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      [*(id *)(v3 + 136) setInt:7 forKey:@"SupportedAuthorizationMask" atKeyPath:a2];
    }
    if ((sub_1007C1F6C(v3, (uint64_t)a2, v9, 0, 0, 1, 1) & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        uint64_t v36 = "";
        __int16 v37 = 2114;
        uint64_t v38 = a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration Client missing for authorization update, but didn't we just create it?\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      uint64_t v14 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v35 = 2082;
        uint64_t v36 = "";
        __int16 v37 = 2114;
        uint64_t v38 = a2;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AuthDatabaseMigration Client missing for authorization update, but didn't we just create it?", "{\"msg%{public}.0s\":\"#AuthDatabaseMigration Client missing for authorization update, but didn't we just create it?\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
  }
  [*(id *)(v3 + 136) removeValueForKey:@"Authorized" atKeyPath:a2];
  if (([*(id *)(v3 + 136) hasValueForKey:@"RemoteUsage" atKeyPath:a2] & 1) == 0)
  {
    id v15 = +[NSMutableDictionary dictionary];
    uint64_t v16 = (uint64_t *)"\a";
    do
    {
      long long v33 = 0;
      *(void *)uint64_t buf = 0;
      sub_100101464(*v16, buf, &v33);
      long long v31 = 0;
      uint64_t v32 = 0;
      sub_100101464(v16[1], &v32, &v31);
      uint64_t v17 = *(void *)buf;
      [*(id *)(v3 + 136) doubleForKey:*(void *)buf atKeyPath:a2 defaultValue:-1.0];
      if (v18 != -1.0)
      {
        uint64_t v19 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
        [v15 setObject:v19 forKeyedSubscript:v32];
        [*(id *)(v3 + 136) removeValueForKey:v17 atKeyPath:a2];
      }
      int v20 = v33;
      [*(id *)(v3 + 136) doubleForKey:v33 atKeyPath:a2 defaultValue:-1.0];
      if (v21 != -1.0)
      {
        uint64_t v22 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
        [v15 setObject:v22 forKeyedSubscript:v31];
        [*(id *)(v3 + 136) removeValueForKey:v20 atKeyPath:a2];
      }
      v16 += 2;
    }
    while (v16 != qword_101D2DB80);
    if ([v15 count]) {
      [*(id *)(v3 + 136) setDictionary:v15 forKey:@"RemoteUsage" atKeyPath:a2];
    }
  }
  if ([a2 website])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v23 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(v3 + 136) readonlyStoreAtKeyPath:a2];
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v35 = 2082;
      uint64_t v36 = "";
      __int16 v37 = 2114;
      uint64_t v38 = a2;
      __int16 v39 = 2114;
      id v40 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration found website. Removing from database\", \"client\":%{public, location:escape_only}@, \"dictionary\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    [*(id *)(v3 + 136) removeDictionaryAtKeyPath:a2];
  }
  unsigned int v25 = [*(id *)(v3 + 136) hasValueForKey:@"Registered" atKeyPath:a2];
  unsigned __int8 v26 = [*(id *)(v3 + 136) hasValueForKey:@"Authorization" atKeyPath:a2];
  unsigned int v27 = [*(id *)(v3 + 136) hasValueForKey:@"SupportedAuthorizationMask" atKeyPath:a2];
  unsigned __int8 v28 = [*(id *)(v3 + 136) isKeyPathRegisteredSystemService:a2];
  uint64_t v29 = *(void **)(v3 + 136);
  if (v26 & 1) != 0 || (v25 & v27 & 1) != 0 || (v28)
  {
    [v29 removeValueForKey:@"SuppressShowingInSettings" atKeyPath:a2];
    return [*(id *)(v3 + 136) setBool:1 forKey:@"Registered" atKeyPath:a2];
  }
  else
  {
    [v29 setBool:1 forKey:@"SuppressShowingInSettings" atKeyPath:a2];
    return [*(id *)(v3 + 136) removeValueForKey:@"Registered" atKeyPath:a2];
  }
}

uint64_t sub_1007C1F6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  if (a5)
  {
    id v12 = sub_100103D58(a1, a2);
  }
  else
  {
    id v12 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
    uint64_t result = (uint64_t)[v12 isValidCKP];
    if (!result) {
      return result;
    }
  }
  if ([v12 zoneId])
  {
    if (([*(id *)(a1 + 136) dictionaryExistsAtKeyPath:v12] & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v14 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Zone not found - adding zone under client.\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      id v15 = qword_102419538;
      uint64_t result = os_signpost_enabled((os_log_t)qword_102419538);
      if (result)
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v12;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Zone not found - adding zone under client.", "{\"msg%{public}.0s\":\"Zone not found - adding zone under client.\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        return 0;
      }
      return result;
    }
  }
  else if ([v12 website] {
         && ([*(id *)(a1 + 136) dictionaryExistsAtKeyPath:v12] & 1) == 0)
  }
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v12;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"website not found - added website subIdentity under client.\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  signed int v17 = [[*(id *)(a1 + 136) intForKey:@"key" atKeyPath:@"keyPath" defaultValue:0];
  int v18 = [[*(id *)(a1 + 136) intForKey:@"key" atKeyPath:@"keyPath" defaultValue:0];
  if (v17 != a3) {
    sub_10009D93C(a1, v12, 0);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v19 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68291074;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v12;
    __int16 v51 = 1026;
    LODWORD(v52) = v17;
    WORD2(v52) = 2050;
    *(void *)((char *)&v52 + 6) = a3;
    HIWORD(v52) = 1026;
    int v53 = v18;
    __int16 v54 = 1026;
    int v55 = a4;
    __int16 v56 = 1026;
    int v57 = a7;
    __int16 v58 = 1026;
    int v59 = a6;
    __int16 v60 = 1026;
    BOOL v61 = v17 != a3;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"update client authorization mask\", \"Client\":%{public, location:escape_only}@, \"old\":%{public}d, \"new\":%{public}lu, \"oldCC\":%{public}d, \"newCC\":%{public}d, \"localAuthorizationChange\":%{public}d, \"mayIncreaseAuth\":%{public}hhd, \"authStateHasChanged\":%{public}hhd}", buf, 0x4Au);
  }
  BOOL v21 = (v18 == a4 || a4 == 0) && v17 == a3;
  if (!v21 && a7 && ![v12 website])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v22 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68290050;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v12;
      __int16 v51 = 1026;
      LODWORD(v52) = v17;
      WORD2(v52) = 1026;
      *(_DWORD *)((char *)&v52 + 6) = a3;
      WORD5(v52) = 1026;
      HIDWORD(v52) = a4;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync Calling on synchronizeAuthorizationChangeTypeAdd\", \"Client\":%{public, location:escape_only}@, \"currentAuth\":%{public}d, \"newAuth\":%{public}d, \"correctiveCompensation\":%{public}d}", buf, 0x2Eu);
    }
    uint64_t v23 = (char *)[[[v12 legacyClientKey] UTF8String];
    if (v23) {
      id v24 = v23;
    }
    else {
      id v24 = "";
    }
    sub_100134750(buf, v24);
    id v25 = [[objc_msgSend(v12, "zoneId") UTF8String];
    sub_100134750(__p, "AuthorizationChange");
    sub_1007BEB1C(a1, (uint64_t)buf, (uint64_t)v25, a3, a4 | (unint64_t)&_mh_execute_header, 0, (uint64_t *)__p);
    if (SHIBYTE(v48) < 0) {
      operator delete(*(void **)__p);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  if (![v12 zoneId] && !objc_msgSend(v12, "website"))
  {
    if (a3)
    {
      id v27 = [*(id *)(a1 + 136) intForKey:@"SupportedAuthorizationMask" atKeyPath:v12 defaultValue:1];
      if ((a3 & ~(uint64_t)(int)v27) != 0)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        unsigned __int8 v28 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 134349570;
          *(void *)&uint8_t buf[4] = a3;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&unsigned char buf[14] = v12;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&unsigned char buf[24] = v27;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#warning New authMask %{public}lu for client %{public}@ implicitly extends its supported mask (%{public}d) until next connection & slide", buf, 0x1Cu);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          *(_DWORD *)std::string __p = 134349570;
          *(void *)&__p[4] = a3;
          __int16 v46 = 2114;
          id v47 = v12;
          __int16 v48 = 1026;
          int v49 = (int)v27;
          int v44 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::updateStaticAuthorizationMaskForClientWithCompensation(CLClientKeyPath *, CLLocationDictionaryUtilitiesAuthorizationMask, CLClientCorrectiveCompensation, BOOL, BOOL, BOOL, BOOL)", "%s\n", v44);
          if (v44 != buf) {
            free(v44);
          }
        }
        id v27 = (id)(v27 | a3);
      }
      [*(id *)(a1 + 136) setInt:v27 forKey:@"SupportedAuthorizationMask" atKeyPath:v12];
      if (a3 != 2) {
        sub_1007DC2D0(a1, (uint64_t)v12, 1, a3 == 4);
      }
      goto LABEL_48;
    }
    sub_1007DC2D0(a1, (uint64_t)v12, 1, 0);
LABEL_66:
    unsigned int v29 = [*(id *)(a1 + 136) isKeyPathRegisteredSystemService:v12];
    unsigned int v30 = v29;
    if (v17)
    {
      if (v29)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        long long v31 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v12;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#ClearingAuthorization for System Service!\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        uint64_t v32 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v12;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v32, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#ClearingAuthorization for System Service!", "{\"msg%{public}.0s\":\"#ClearingAuthorization for System Service!\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        goto LABEL_84;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v36 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_84;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v12;
      __int16 v51 = 1026;
      LODWORD(v52) = v17;
      long long v34 = "{\"msg%{public}.0s\":\"#ClearingAuthorization updateStaticAuthorizationMask setting to not-determined\", \"c"
            "lient\":%{public, location:escape_only}@, \"oldAuth\":%{public}d}";
      __int16 v35 = v36;
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v33 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_84;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v12;
      __int16 v51 = 1026;
      LODWORD(v52) = v30;
      long long v34 = "{\"msg%{public}.0s\":\"#ClearingAuthorization updateStaticAuthorizationMask setting to not-determined, but i"
            "t's already set to not-determined.\", \"Client\":%{public, location:escape_only}@, \"SystemService\":%{public}hhd}";
      __int16 v35 = v33;
    }
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v34, buf, 0x22u);
LABEL_84:
    [*(id *)(a1 + 136) removeValueForKey:@"Authorization" atKeyPath:v12];
    a3 = 0;
    goto LABEL_85;
  }
  if (!a3) {
    goto LABEL_66;
  }
LABEL_48:
  if (v17 >= a3 || a6)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unsigned __int8 v26 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v12;
      __int16 v51 = 2050;
      *(void *)&long long v52 = a3;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"setting authorization value\", \"Client\":%{public, location:escape_only}@, \"newAuth\":%{public}lu}", buf, 0x26u);
    }
    [*(id *)(a1 + 136) setInt:a3 forKey:@"Authorization" atKeyPath:v12];
    a3 = (int)[*(id *)(a1 + 136) intForKey:@"Authorization" atKeyPath:v12 defaultValue:0];
  }
LABEL_85:
  if (v18 >= (int)a4) {
    int v37 = 1;
  }
  else {
    int v37 = a6;
  }
  if (a4 && v37) {
    [*(id *)(a1 + 136) setInt:a4 forKey:@"CorrectiveCompensationEnabled" atKeyPath:v12];
  }
  unsigned int v38 = [*(id *)(a1 + 136) intForKey:@"IncidentalUseMode" atKeyPath:v12 defaultValue:0];
  if (a3 != 2 && v38) {
    [*(id *)(a1 + 136) setInt:1 forKey:@"IncidentalUseMode" atKeyPath:v12];
  }
  if ([*(id *)(a1 + 136) BOOLForKey:@"IsAppClip" atKeyPath:v12 defaultValue:0])
  {
    if (a3 == 2)
    {
      TMGetKernelMonotonicClock();
      double v40 = v39;
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v41 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v12;
        __int16 v51 = 2050;
        *(double *)&long long v52 = v40;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting registration time for #appclip\", \"Client\":%{public, location:escape_only}@, \"registrationTime\":\"%{public}f\"}", buf, 0x26u);
      }
      [*(id *)(a1 + 136) setDouble:@"AuthorizationRegisterTime" forKey:v12 atKeyPath:v40];
      goto LABEL_106;
    }
    [*(id *)(a1 + 136) removeValueForKey:@"AuthorizationRegisterTime" atKeyPath:v12];
  }
  if ((a3 & 6) == 0)
  {
    [*(id *)(a1 + 136) removeValueForKey:@"ProvisionalMonitoring" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"ConsumptionPeriodBegin" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"NextConsumptionThresholdScore" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"NextNextConsumptionThresholdScore" atKeyPath:v12];
    uint64_t v42 = *(void **)(a1 + 136);
    if (a3 == 1)
    {
      [v42 removeValueForKey:@"TemporaryAuthorization" atKeyPath:v12];
      [*(id *)(a1 + 136) removeValueForKey:@"LocationButtonUseMode" atKeyPath:v12];
    }
    else
    {
      [v42 removeValueForKey:@"AuthorizationUpgradeAvailable" atKeyPath:v12];
    }
  }
LABEL_106:
  if (([*(id *)(a1 + 136) isKeyPathRegisteredSystemService:v12] & 1) == 0
    && ![v12 subIdentityId])
  {
    __int16 v43 = *(void **)(a1 + 136);
    if (a3 == 4)
    {
      if (([v43 hasValueForKey:@"ConsumptionPeriodBegin" atKeyPath:v12] & 1) == 0) {
        [*(id *)(a1 + 136) setDouble:@"ConsumptionPeriodBegin" forKey:v12 atKeyPath:CFAbsoluteTimeGetCurrent()];
      }
      if (([*(id *)(a1 + 136) hasValueForKey:@"NextConsumptionThresholdScore" atKeyPath:v12] & 1) == 0)[[*(id *)(a1 + 136) setInt:0 forKey:@"NextConsumptionThresholdScore" atKeyPath:v12]; {
      goto LABEL_115;
      }
    }
    [v43 removeValueForKey:@"ConsumptionPeriodBegin" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"NextConsumptionThresholdScore" atKeyPath:v12];
    [*(id *)(a1 + 136) removeValueForKey:@"NextNextConsumptionThresholdScore" atKeyPath:v12];
  }
  if (a3) {
LABEL_115:
  }
    [*(id *)(a1 + 136) removeValueForKey:@"AuthorizationPromptOptionTypeNegative" atKeyPath:v12];
  [*(id *)(a1 + 136) persist];
  sub_100134750(buf, "");
  sub_1001341F0(a1, v12, (uint64_t)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  return 1;
}

void sub_1007C2D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C2DDC(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Running #AuthDatabaseMigration_9", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v8 = 0;
    id v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_9()", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  uint64_t v3 = *(void **)(a1 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1007C30F4;
  v7[3] = &unk_1022C8D28;
  v7[4] = a1;
  [v3 iterateAllAnchorKeyPathsWithBlock:v7];
  sub_1007B09FC(a1);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  unsigned int v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished #AuthDatabaseMigration_9", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v8 = 0;
    unsigned int v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_9()", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

id sub_1007C30F4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if ([a2 executablePath])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v4 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
      return [*(id *)(v3 + 136) removeDictionaryAtKeyPath:a2 v12 *(_OWORD *)v13 *(_OWORD *)&v13[16]];
    }
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = a2;
    id v5 = "{\"msg%{public}.0s\":\"Removing executable client from authdb\", \"Client\":%{public, location:escape_only}@}";
    unsigned int v6 = buf;
    unsigned __int8 v7 = v4;
    uint32_t v8 = 28;
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v5, v6, v8);
    return [*(id *)(v3 + 136) removeDictionaryAtKeyPath:a2 v12 *(_OWORD *)v13 *(_OWORD *)&v13[16]];
  }
  id result = [a2 bundleId];
  if (result)
  {
    memset(buf, 0, 41);
    id result = [*(id *)(v3 + 136) expensivelyGetIdentifyingInformation:buf forClient:a2];
    if (result)
    {
      id v10 = [a2 bundleId];
      id result = [v10 isEqual:*(void *)buf];
      if ((result & 1) == 0)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v11 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
          return [*(id *)(v3 + 136) removeDictionaryAtKeyPath:a2 v12 *(_OWORD *)v13 *(_OWORD *)&v13[16]];
        }
        uint64_t v12 = 68289538;
        *(_WORD *)__int16 v13 = 2082;
        *(void *)&_OWORD v13[2] = "";
        *(_WORD *)&_OWORD v13[10] = 2114;
        *(void *)&void v13[12] = [a2 bundleId];
        *(_WORD *)&v13[20] = 2114;
        *(void *)&v13[22] = *(void *)buf;
        id v5 = "{\"msg%{public}.0s\":\"#Warning found alternative identity as top-level identity authdb. Removing client fr"
             "om authdb\", \"ExistingClientBundleId\":%{public, location:escape_only}@, \"CanonicalizedBundleId\":%{publi"
             "c, location:escape_only}@}";
        unsigned int v6 = (uint8_t *)&v12;
        unsigned __int8 v7 = v11;
        uint32_t v8 = 38;
        goto LABEL_6;
      }
    }
  }
  return result;
}

void sub_1007C32E8(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Running #AuthDatabaseMigration_8", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_8()", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  id v3 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", @"/System/Library/PrivateFrameworks/AssistantServices.framework", 112)];
  if ([v3 isValidCKP])
  {
    unsigned int v4 = [*(id *)(a1 + 136) intForKey:@"Authorization" atKeyPath:v3 defaultValue:0];
    unsigned int v5 = [*(id *)(a1 + 136) intForKey:@"CorrectiveCompensationEnabled" atKeyPath:v3 defaultValue:0];
    if (v4 == 2 && v5 == 0)
    {
      sub_1007C3724(a1, (uint64_t)v3, 0, @"Siri needs to be reset");
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      unsigned __int8 v7 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      uint32_t v8 = "{\"msg%{public}.0s\":\"#AuthDatabaseMigration_8 Siri authorization cleared\"}";
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      unsigned __int8 v7 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_21;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      int v13 = 0;
      __int16 v14 = 2082;
      id v15 = "";
      uint32_t v8 = "{\"msg%{public}.0s\":\"#AuthDatabaseMigration_8 Siri has a user-set authorization value; not clearing.\"}";
    }
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v8, buf, 0x12u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
LABEL_21:
    unint64_t v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Finished #AuthDatabaseMigration_8", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::migrateAuthDatabase_8()", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

id sub_1007C3724(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  id v7 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  id result = [v7 isValidCKP];
  if (result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unint64_t v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 68289794;
      v10[1] = 0;
      __int16 v11 = 2082;
      uint64_t v12 = "";
      __int16 v13 = 2114;
      id v14 = v7;
      __int16 v15 = 1026;
      int v16 = a3;
      __int16 v17 = 2114;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearingAuthorization and corrective compensation\", \"Client\":%{public, location:escape_only}@, \"forceSyncToPairedDevice\":%{public}hhd, \"Reason\":%{public, location:escape_only}@}", (uint8_t *)v10, 0x2Cu);
    }
    [*(id *)(a1 + 136) removeValueForKey:@"CorrectiveCompensationEnabled" atKeyPath:v7];
    return (id)sub_1007C1F6C(a1, (uint64_t)v7, 0, 0, 0, 1, 1);
  }
  return result;
}

void sub_1007C388C(uint64_t a1)
{
  v52[0] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/PrivateFrameworks/Weather.framework" anchorType:112];
  v53[0] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"com.apple.weather" anchorType:105];
  v52[1] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"com.apple.Shoebox" anchorType:105];
  v53[1] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/PrivateFrameworks/PassKitCore.framework" anchorType:112];
  v52[2] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"com.apple.Passbook" anchorType:105];
  v53[2] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/PrivateFrameworks/PassKitCore.framework" anchorType:112];
  v52[3] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/PrivateFrameworks/Parsec.framework" anchorType:112];
  v53[3] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/PrivateFrameworks/CoreParsec.framework" anchorType:112];
  uint64_t v2 = +[NSDictionary dictionaryWithObjects:v53 forKeys:v52 count:4];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id v3 = [(NSDictionary *)v2 countByEnumeratingWithState:&v35 objects:v51 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v36;
    do
    {
      unsigned int v5 = 0;
      do
      {
        if (*(void *)v36 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v35 + 1) + 8 * (void)v5);
        if ([*(id *)(a1 + 136) dictionaryExistsAtKeyPath:v6])
        {
          id v7 = [(NSDictionary *)v2 objectForKeyedSubscript:v6];
          id v8 = [*(id *)(a1 + 136) intForKey:@"Authorization" atKeyPath:v6 defaultValue:0xFFFFFFFFLL];
          if ([*(id *)(a1 + 136) migrateDictionaryAtKeyPath:v6 toKeyPath:v7 forceMigrationOnAuthCollision:0])
          {
            unsigned int v9 = sub_1007B4798(a1, (uint64_t)v7);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            id v10 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t buf = 68289794;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v43 = 2082;
              int v44 = "";
              __int16 v45 = 2114;
              id v46 = v7;
              __int16 v47 = 1026;
              int v48 = (int)v8;
              __int16 v49 = 1026;
              unsigned int v50 = v9;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration #authsync Calling on synchronizeAuthorizationChangeTypeAdd\", \"ToKey\":%{public, location:escape_only}@, \"FromAuth\":%{public}d, \"CorrectiveCompensation\":%{public}d}", buf, 0x28u);
            }
            __int16 v11 = (char *)[v7 legacyClientKey];
            if (v11) {
              uint64_t v12 = v11;
            }
            else {
              uint64_t v12 = "";
            }
            sub_100134750(buf, v12);
            sub_100134750(__p, "Migration-migrator");
            sub_1007BEB1C(a1, (uint64_t)buf, 0, (uint64_t)v8, v9 | (unint64_t)&_mh_execute_header, 0, (uint64_t *)__p);
            if (v34 < 0) {
              operator delete(__p[0]);
            }
            if (SBYTE3(v46) < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        unsigned int v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [(NSDictionary *)v2 countByEnumeratingWithState:&v35 objects:v51 count:16];
    }
    while (v3);
  }
  v41[0] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"com.apple.webapp" anchorType:105];
  v41[1] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"com.apple.AdSheet" anchorType:105];
  v41[2] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"com.apple.AdSheetPad" anchorType:105];
  v41[3] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"com.apple.AdSheetPhone" anchorType:105];
  int v41[4] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"com.apple.springboard" anchorType:105];
  void v41[5] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"com.apple.CarPlayApp" anchorType:105];
  v41[6] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/PrivateFrameworks/Assistant.framework" anchorType:112];
  v41[7] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/PrivateFrameworks/AOSNotification.framework" anchorType:112];
  v41[8] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/LocationBundles/LocationPerformance.framework" anchorType:112];
  v41[9] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/LocationBundles/LocationdInternal.framework" anchorType:112];
  v41[10] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/PrivateFrameworks/iAdCore.framework" anchorType:112];
  v41[11] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/Applications/AdSheet.app" anchorType:112];
  v41[12] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/Frameworks/Twitter.framework" anchorType:112];
  v41[13] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/Frameworks/Weibo.framework" anchorType:112];
  v41[14] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/Frameworks/Facebook.framework" anchorType:112];
  v41[15] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/SocialServices/Twitter.socialplugin" anchorType:112];
  v41[16] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/SocialServices/Weibo.socialplugin" anchorType:112];
  v41[17] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/SocialServices/Facebook.socialplugin" anchorType:112];
  v41[18] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/Frameworks/Social.framework/XPCServices/com.apple.twitter.xpc" anchorType:112];
  v41[19] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/Frameworks/Social.framework/XPCServices/com.apple.weibo.xpc" anchorType:112];
  v41[20] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/Frameworks/Social.framework/XPCServices/com.apple.facebook.xpc" anchorType:112];
  v41[21] = +[CLClientKeyPath clientKeyPathWithClientAnchor:@"/System/Library/PrivateFrameworks/CoreSuggestions.framework" anchorType:112];
  id v14 = +[NSArray arrayWithObjects:v41 count:22];
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id v15 = [(NSArray *)v14 countByEnumeratingWithState:&v29 objects:v40 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v30 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void *)(*((void *)&v29 + 1) + 8 * i);
        if ([*(id *)(a1 + 136) dictionaryExistsAtKeyPath:v18]) {
          [*(id *)(a1 + 136) removeDictionaryAtKeyPath:v18];
        }
      }
      id v15 = [(NSArray *)v14 countByEnumeratingWithState:&v29 objects:v40 count:16];
    }
    while (v15);
  }
  v39[0] = @"AttributionCount";
  v39[1] = @"AuthorizationPurposeKey";
  _OWORD v39[2] = @"AppSwitcherQuitAppTime";
  v39[3] = @"TrialPeriodBegin";
  v39[4] = @"TrialPeriodNeedsReprompt";
  v39[5] = @"ExistsInLSDatabase";
  uint64_t v19 = +[NSArray arrayWithObjects:v39 count:6];
  int v20 = *(void **)(a1 + 136);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  double v28[2] = sub_1007C4260;
  v28[3] = &unk_1022C8E48;
  v28[4] = v19;
  v28[5] = a1;
  [v20 iterateAllAnchorKeyPathsWithBlock:v28];
  uint64_t v21 = GEOGetDefaultInteger();
  id v22 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:@"/System/Library/LocationBundles/AppGenius.bundle" anchorType:112];
  if ([v22 isValidCKP])
  {
    BOOL v23 = v21 == 2;
    char v24 = [*(id *)(a1 + 136) intForKey:@"Authorization" atKeyPath:v22 defaultValue:0] == 1|| v23;
    if ((v24 & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v25 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v43 = 2082;
        int v44 = "";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Setting Improve Maps to Denied because Maps does not believe it is authorized.\"}", buf, 0x12u);
      }
      sub_1007C1F6C(a1, (uint64_t)v22, 1uLL, 0, 1, 1, 1);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unsigned __int8 v26 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v43 = 2082;
      int v44 = "";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning AppGenius is not registered during update-version migration; this may be accepta"
        "ble if we have never set up system services on this device before.\"}",
        buf,
        0x12u);
    }
  }
}

void sub_1007C4224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  _Unwind_Resume(a1);
}

id sub_1007C4260(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(v2 + 136);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1007C42E0;
  v5[3] = &unk_1022C8FD8;
  v5[4] = *(void *)(a1 + 32);
  void v5[5] = v2;
  return [v3 iterateIdentitiesRelatedToKeyPath:a2 withBlock:v5];
}

void sub_1007C42E0(uint64_t a1, void *a2)
{
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [v3 countByEnumeratingWithState:&v13 objects:v23 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v3);
        }
        [*(id *)(v4 + 136) removeValueForKey:*(void *)(*((void *)&v13 + 1) + 8 * i) atKeyPath:a2];
      }
      id v6 = [v3 countByEnumeratingWithState:&v13 objects:v23 count:16];
    }
    while (v6);
  }
  id v9 = [a2 bundlePath];
  if (v9)
  {
    id v10 = v9;
    if ([+[NSFileManager defaultManager] fileExistsAtPath:v9])
    {
      if ((objc_msgSend(v10, "isEqualToString:", objc_msgSend(v10, "stringByResolvingSymlinksInPath")) & 1) == 0)
      {
        [*(id *)(v4 + 136) removeDictionaryAtKeyPath:a2];
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        __int16 v11 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          int v18 = 0;
          __int16 v19 = 2082;
          int v20 = "";
          __int16 v21 = 2114;
          id v22 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration Clearing client with symlinks in its bundlePath\", \"BundlePath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v12 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        int v18 = 0;
        __int16 v19 = 2082;
        int v20 = "";
        __int16 v21 = 2114;
        id v22 = v10;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthDatabaseMigration #warning bundle path does not exist on disk;  clearing.\", \"Bun"
          "dlePath\":%{public, location:escape_only}@}",
          buf,
          0x1Cu);
      }
      [*(id *)(v4 + 136) removeDictionaryAtKeyPath:a2];
    }
  }
}

void sub_1007C455C(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Starting #AuthDatabaseMigration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    LOWORD(v20) = 0;
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::setupAndMigrateAuthDatabase(NSString *, BOOL)", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  uint64_t v7 = +[CLAuthorizationDatabase authorizationDatabaseWithFilename:a2 withDataProtectionClass:2];
  *(void *)(a1 + 136) = v7;
  [(CLAuthorizationDatabase *)v7 migrationVersionNumber];
  float v9 = v8;
  if (v8 < 7.0) {
    sub_1007C13E0(a1);
  }
  if (v9 < 8.1) {
    sub_1007C32E8(a1);
  }
  if (v9 < 9.0) {
    sub_1007C2DDC(a1);
  }
  if (v9 < 15.0) {
    int v10 = 1;
  }
  else {
    int v10 = a3;
  }
  if (v10 == 1) {
    sub_1007C388C(a1);
  }
  sub_100103240();
  sub_10073B340("kern.bootsessionuuid", buf);
  if (SBYTE3(v25) >= 0) {
    __int16 v11 = buf;
  }
  else {
    __int16 v11 = *(uint8_t **)buf;
  }
  uint64_t v12 = +[NSString stringWithUTF8String:v11];
  if (SBYTE3(v25) < 0) {
    operator delete(*(void **)buf);
  }
  CFTypeRef v20 = 0;
  uint64_t v13 = sub_1000A6958();
  sub_1004D01D8(v13, @"kLastBootSessionUUID", &v20);
  if (![(NSString *)v12 isEqualToString:v20])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    long long v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v22 = 2082;
      BOOL v23 = "";
      __int16 v24 = 2114;
      id v25 = v12;
      __int16 v26 = 2114;
      CFTypeRef v27 = v20;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"First locationd run for boot session\", \"bootSession\":%{public, location:escape_only}@, \"lastSession\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    uint64_t v15 = sub_1000A6958();
    sub_1004D3834(v15);
    uint64_t v16 = sub_1000A6958();
    (*(void (**)(uint64_t))(*(void *)v16 + 944))(v16);
    goto LABEL_30;
  }
  if (v10) {
LABEL_30:
  }
    [*(id *)(a1 + 136) performFullSystemServiceSetup];
  [*(id *)(a1 + 136) completeMigration];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v17 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Finished #AuthDatabaseMigration", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    LOWORD(v20) = 0;
    __int16 v19 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::setupAndMigrateAuthDatabase(NSString *, BOOL)", "%s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
}

void sub_1007C4A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007C4A4C()
{
  if (qword_10247E128 != -1) {
    dispatch_once(&qword_10247E128, &stru_1022C9248);
  }
  return qword_10247E120;
}

void sub_1007C4A90(id a1)
{
  qword_10247E120 = &off_1023972E8;
}

void *sub_1007C4AB8(void *a1, int a2)
{
  if (!a2) {
    return a1;
  }
  if (qword_10247E128 != -1) {
    dispatch_once(&qword_10247E128, &stru_1022C9248);
  }
  id v3 = [(id)qword_10247E120 objectForKey:a1];
  if (!v3) {
    return a1;
  }
  uint64_t v4 = v3;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 136446466;
    id v9 = [a1 UTF8String];
    __int16 v10 = 2082;
    id v11 = [v4 UTF8String];
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#authsync translating %{public}s to %{public}s", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    [a1 UTF8String];
    [v4 UTF8String];
    id v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "NSString *getTranslatedClientKey(NSString *, BOOL)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return v4;
}

id sub_1007C4CFC(uint64_t a1)
{
  if (qword_10247E138 != -1) {
    dispatch_once(&qword_10247E138, &stru_1022C9268);
  }
  id result = [(id)qword_10247E130 valueForKey:a1];
  if (!result) {
    return (id)a1;
  }
  return result;
}

void sub_1007C4D5C(id a1)
{
  v2[0] = @"com.apple.NanoMaps";
  v2[1] = @"com.apple.weather.watchapp";
  v3[0] = @"com.apple.Maps";
  v3[1] = @"com.apple.weather";
  qword_10247E130 = +[NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
  id v1 = (id)qword_10247E130;
}

CLCompanionSyncAuthObject *sub_1007C4DF0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  float v8 = objc_alloc_init(CLCompanionSyncAuthObject);
  if (*((char *)a2 + 23) >= 0) {
    id v9 = a2;
  }
  else {
    id v9 = (uint64_t *)*a2;
  }
  [(CLCompanionSyncAuthObject *)v8 setClientKey:+[NSString stringWithUTF8String:v9]];
  [(CLCompanionSyncAuthObject *)v8 setClearClient:a3];
  [(CLCompanionSyncAuthObject *)v8 setOperationType:a4];
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1]) {
      return v8;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (!*((unsigned char *)a2 + 23))
  {
    return v8;
  }
  id v10 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2))];
  if (![v10 isValidCKP]
    || ([*(id *)(a1 + 136) BOOLForKey:@"SuppressShowingInSettings" atKeyPath:v10 defaultValue:0] & 1) != 0)
  {
    return 0;
  }
  id v11 = [*(id *)(a1 + 136) intForKey:@"Authorization" atKeyPath:v10 defaultValue:0];
  if (v11) {
    [(CLCompanionSyncAuthObject *)v8 setAuthMask:v11];
  }
  id v12 = [*(id *)(a1 + 136) intForKey:@"CorrectiveCompensationEnabled" atKeyPath:v10 defaultValue:0xFFFFFFFFLL];
  if ((v12 & 0x80000000) == 0) {
    [(CLCompanionSyncAuthObject *)v8 setCorrectiveCompensationMask:v12];
  }
  uint64_t v13 = *(void **)(a1 + 136);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1007C4FB8;
  v15[3] = &unk_1022C8FD8;
  void v15[4] = v8;
  v15[5] = a1;
  [v13 iterateIdentitiesRelatedToKeyPath:v10 withBlock:v15];
  return v8;
}

id sub_1007C4FB8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  id result = [a2 subIdentityType];
  if (result == 122)
  {
    id v6 = objc_alloc_init(CLCompanionSyncInterestZone);
    -[CLCompanionSyncInterestZone setZoneIdentifier:](v6, "setZoneIdentifier:", [a2 zoneId]);
    id v7 = [*(id *)(v4 + 136) intForKey:@"Authorization" atKeyPath:a2 defaultValue:0];
    if (v7) {
      [(CLCompanionSyncInterestZone *)v6 setAuthMask:v7];
    }
    id v8 = [*(id *)(v4 + 136) intForKey:@"CorrectiveCompensationEnabled" atKeyPath:a2 defaultValue:0];
    if (v8) {
      [(CLCompanionSyncInterestZone *)v6 setCorrectiveCompensationMask:v8];
    }
    id v9 = [*(id *)(v4 + 136) intForKey:@"Type" atKeyPath:a2 defaultValue:0];
    if (v9) {
      [(CLCompanionSyncInterestZone *)v6 setZoneType:v9];
    }
    [*(id *)(v4 + 136) doubleForKey:@"Latitude" atKeyPath:a2 defaultValue:-1.0];
    if (v10 != -1.0) {
      -[CLCompanionSyncInterestZone setLatitude:](v6, "setLatitude:");
    }
    [*(id *)(v4 + 136) doubleForKey:@"Longitude" atKeyPath:a2 defaultValue:-1.0];
    if (v11 != -1.0) {
      -[CLCompanionSyncInterestZone setLongitude:](v6, "setLongitude:");
    }
    [*(id *)(v4 + 136) doubleForKey:@"Radius" atKeyPath:a2 defaultValue:-1.0];
    if (v12 != -1.0) {
      -[CLCompanionSyncInterestZone setRadius:](v6, "setRadius:");
    }
    id v13 = [*(id *)(v4 + 136) intForKey:@"ServiceMaskOperator" atKeyPath:a2 defaultValue:0xFFFFFFFFLL];
    if (v13 != -1) {
      [(CLCompanionSyncInterestZone *)v6 setServiceMaskOperator:v13];
    }
    id v14 = [*(id *)(v4 + 136) intForKey:@"Provenance" atKeyPath:a2 defaultValue:0xFFFFFFFFLL];
    if (v14 != -1) {
      [(CLCompanionSyncInterestZone *)v6 setProvenance:v14];
    }
    uint64_t v15 = *(void **)(a1 + 32);
    return [v15 addInterestZones:v6];
  }
  return result;
}

id sub_1007C51C0(uint64_t a1, void *a2, char a3, char a4, char a5)
{
  id v10 = objc_alloc_init((Class)NSMutableArray);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1007C5280;
  void v12[3] = &unk_1022C9290;
  char v13 = a5;
  char v14 = a4;
  char v15 = a3;
  v12[4] = v10;
  void v12[5] = a1;
  [a2 enumerateObjectsUsingBlock:v12];
  return v10;
}

void sub_1007C5280(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 48) && [a2 isEqualToString:@"RESET"])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      std::string __p = (void *)68289026;
      __int16 v16 = 2082;
      __int16 v17 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#authsync Ignoring RESET from ReunionSyncList during reunion sync\"}", (uint8_t *)&__p, 0x12u);
    }
    return;
  }
  if (([a2 isEqualToString:&stru_10234F018] & 1) == 0
    && ![a2 isEqualToString:@"TOGGLE"])
  {
    BOOL v9 = [[*(id *)(v4 + 136) intForKey:@"Authorization" atKeyPath:[[*(id *)(v4 + 136) registeredKeyPathForClientIdentifier:](CLClientKeyPath, "registeredKeyPathForClientIdentifier:", a2)] defaultValue:0] == 0;
    id v10 = [(char *)[sub_1007C4AB8(a2, *(unsigned __int8 *)(a1 + 50)) UTF8String]];
    if (v10) {
      double v11 = v10;
    }
    else {
      double v11 = "";
    }
    sub_100134750(&__p, v11);
    double v12 = sub_1007C4DF0(v4, (uint64_t *)&__p, v9, 2);
    char v13 = v12;
    if (v18 < 0)
    {
      operator delete(__p);
      if (v13) {
        goto LABEL_18;
      }
    }
    else if (v12)
    {
LABEL_18:
      [*(id *)(a1 + 32) addObject:v13];
      return;
    }
    char v14 = objc_alloc_init(CLCompanionSyncAuthObject);
    [(CLCompanionSyncAuthObject *)v14 setClientKey:a2];
    [(CLCompanionSyncAuthObject *)v14 setOperationType:3];
    [*(id *)(a1 + 32) addObject:v14];
    return;
  }
  if (!*(unsigned char *)(a1 + 49))
  {
    uint64_t v6 = sub_1001198FC();
    id v7 = objc_alloc_init(CLCompanionSyncAuthObject);
    [(CLCompanionSyncAuthObject *)v7 setClientKey:sub_1007C4AB8(a2, *(unsigned __int8 *)(a1 + 50))];
    [(CLCompanionSyncAuthObject *)v7 setAuthMask:v6];
    [(CLCompanionSyncAuthObject *)v7 setOperationType:1];
    id v8 = *(void **)(a1 + 32);
    [v8 addObject:v7];
  }
}

void sub_1007C5528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007C554C(void *a1, void *a2, int a3)
{
  char v16 = a3;
  if (a3) {
    sub_1007C5804((uint64_t)a1);
  }
  id v5 = +[NSMutableSet set];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v6 = [a2 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(a2);
        }
        BOOL v9 = *(void **)(*((void *)&v21 + 1) + 8 * i);
        id v10 = +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", sub_1007C4CFC((uint64_t)[v9 clientKey]));
        [v5 addObject:v10];
        [v5 addObject:sub_100103D58((uint64_t)a1, (uint64_t)v10)];
        sub_100134750(__p, (char *)[v9 clientKey]);
        LODWORD(v10) = [v9 authMask];
        unsigned int v11 = [v9 correctiveCompensationMask];
        char v12 = [v9 clearClient];
        unint64_t v13 = v3 & 0xFFFFFFFFFFFF0000 | [v9 suppressShowingInSettings];
        uint64_t v3 = v13 | 0x100;
        sub_1007C6370((uint64_t)a1, (uint64_t)__p, 0, v10, v11 | (unint64_t)&_mh_execute_header, v12, v13 | 0x100, 1u);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
        sub_100134750(__p, [objc_msgSend(objc_msgSend(v9, "clientKey"), "UTF8String") UTF8String]);
        sub_1007C6EA8(a1, (uint64_t)__p, [v9 interestZones]);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      id v6 = [a2 countByEnumeratingWithState:&v21 objects:v25 count:16];
    }
    while (v6);
  }
  if ((v16 & 1) == 0)
  {
    char v14 = (void *)a1[17];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    _OWORD v18[2] = sub_1007C73E0;
    v18[3] = &unk_1022C8E48;
    void v18[4] = v5;
    v18[5] = a1;
    [v14 iterateAllAnchorKeyPathsWithBlock:v18];
  }
  return sub_1007AA5C0((uint64_t)a1);
}

void sub_1007C57D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C5804(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1104))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v1 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Skipping Reset, already in progress.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v24.__r_.__value_.__l.__data_) = 0;
      uint64_t v2 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v2);
      if (v2 != buf) {
        free(v2);
      }
    }
  }
  else
  {
    sub_1007DA128();
    if ([*(id *)(a1 + 120) locationRestricted])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v4 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#warning location services settings are frozen by restrictions - resetting", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        LOWORD(v24.__r_.__value_.__l.__data_) = 0;
        long long v22 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v22);
        if (v22 != buf) {
          free(v22);
        }
      }
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "resetting and disconnecting all clients from daemon", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v24.__r_.__value_.__l.__data_) = 0;
      __int16 v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
    }
    sub_1007A53D4(a1);
    sub_1000DB264(a1 + 728, *(char **)(a1 + 736));
    *(void *)(a1 + 728) = a1 + 736;
    *(void *)(a1 + 744) = 0;
    *(void *)(a1 + 736) = 0;
    sub_1000DB264(a1 + 752, *(char **)(a1 + 760));
    *(void *)(a1 + 752) = a1 + 760;
    *(void *)(a1 + 768) = 0;
    *(void *)(a1 + 760) = 0;
    sub_1007AA540((id *)a1);
    [*(id *)(a1 + 136) performFullSystemServiceSetup];
    sub_1007AA5C0(a1);
    [*(id *)(a1 + 1088) removeAllObjects];
    [*(id *)(a1 + 1088) addObjectsFromArray:sub_1007DA1DC(a1)];
    [*(id *)(a1 + 128) setArray:*(void *)(a1 + 1088) forKey:@"ResetIdentifiers"];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "reset identifiers saved to settings", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v24.__r_.__value_.__l.__data_) = 0;
      char v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v20);
      if (v20 != buf) {
        free(v20);
      }
    }
    *(_DWORD *)uint64_t buf = 0;
    (*(void (**)(uint64_t, unsigned char *, void, uint64_t))(*(void *)a1 + 144))(a1, buf, 0, 0xFFFFFFFFLL);
    *(unsigned char *)(a1 + 1104) = 1;
    [*(id *)(a1 + 256) setNextFireDelay:65.0];
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CLAppResetChangedNotification, 0, 0, 0);
    sub_1007A6C10(a1);
    sub_100105FDC((unsigned char *)a1);
    v26[0] = &__kCFBooleanTrue;
    v25[0] = @"IsResetEvent";
    v25[1] = @"EventSource";
    id v8 = (void *)(a1 + 952);
    if (*(char *)(a1 + 975) < 0) {
      id v8 = (void *)*v8;
    }
    BOOL v9 = +[NSString stringWithUTF8String:v8];
    v25[2] = @"Enabled";
    v26[1] = v9;
    v26[2] = &__kCFBooleanFalse;
    id v10 = +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:3];
    if (qword_102419620 != -1) {
      dispatch_once(&qword_102419620, &stru_1022C97C8);
    }
    unsigned int v11 = qword_102419628;
    if (os_log_type_enabled((os_log_t)qword_102419628, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#resetClients #CoreAnalytics\", \"Bigswitch Analytics\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    AnalyticsSendEvent();
    sub_1007C9E78(a1);
    [*(id *)(a1 + 480) eraseAllData];
    sub_10022267C(a1 + 440);
    sub_10053B99C(0, &v24);
    char v12 = std::string::append(&v24, "locScoreInfoReport");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(void *)&uint8_t buf[16] = *((void *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t buf = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (buf[23] >= 0) {
      char v14 = buf;
    }
    else {
      char v14 = *(unsigned char **)buf;
    }
    char v15 = +[NSString stringWithUTF8String:v14];
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    v24.__r_.__value_.__r.__words[0] = 0;
    if (![+[NSFileManager defaultManager] removeItemAtPath:v15 error:&v24])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      char v16 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v24.__r_.__value_.__r.__words[0];
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Got error removing checkpoint file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    sub_1007D76D8((id *)a1);
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022C97E8);
    }
    __int16 v17 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Removed locscoreInfo, locScoreInfoReport and cleared consumption map.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022C97E8);
      }
      long long v21 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v21);
      if (v21 != buf) {
        free(v21);
      }
    }
    if (_os_feature_enabled_impl())
    {
      [*(id *)(a1 + 544) eraseAllData];
      sub_10022267C(a1 + 504);
      if (qword_102419520 != -1) {
        dispatch_once(&qword_102419520, &stru_1022C97E8);
      }
      char v18 = qword_102419528;
      if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Removed locationAttributionInterval and cleared consumption map for attribution.", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022C97E8);
        }
        long long v23 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::resetClients()", "%s\n", v23);
        if (v23 != buf) {
          free(v23);
        }
      }
      sub_1007BE1DC(a1);
    }
  }
}

void sub_1007C6334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C6370(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, char a6, __int16 a7, unsigned int a8)
{
  if (a8 - 1 < 2)
  {
    sub_100103240();
    BOOL v16 = sub_100106424();
    if (a8 == 2 && v16)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v17 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v67 = 2082;
        __int16 v68 = "";
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage on Companion received an update message\"}", buf, 0x12u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      uint64_t v18 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        *(_DWORD *)uint64_t buf = 68289026;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v67 = 2082;
        __int16 v68 = "";
        __int16 v19 = "#authsync applyAuthorizationSyncMessage on Companion received an update message";
        char v20 = "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage on Companion received an update message\"}";
        long long v21 = v18;
        uint32_t v22 = 18;
LABEL_18:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v19, v20, buf, v22);
        return;
      }
      return;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v25 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v26 = a2;
      }
      else {
        uint64_t v26 = *(void *)a2;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v67 = 2082;
      __int16 v68 = "";
      __int16 v69 = 2082;
      *(void *)__int16 v70 = v26;
      *(_WORD *)&v70[8] = 1026;
      *(_DWORD *)&v70[10] = a8;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage un-translated key\", \"clientKey\":%{public, location:escape_only}s, \"OperationType\":%{public}d}", buf, 0x22u);
    }
    if (!std::string::compare((const std::string *)a2, "")) {
      sub_1007C7870(a1, a4);
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v27 = a2;
    }
    else {
      uint64_t v27 = *(void *)a2;
    }
    id v28 = sub_1007C4CFC((uint64_t)+[NSString stringWithUTF8String:v27]);
    sub_100134750(v64, (char *)[v28 UTF8String]);
    uint64_t v59 = a1;
    uint64_t v29 = a3;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v30 = a7;
    int v31 = HIBYTE(a7);
    long long v32 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = v64;
      if (v65 < 0) {
        uint64_t v33 = (void **)v64[0];
      }
      if (BYTE4(a5)) {
        int v34 = a5;
      }
      else {
        int v34 = -1;
      }
      *(_DWORD *)uint64_t buf = 68290306;
      if (v31) {
        BOOL v35 = v30 == 0;
      }
      else {
        BOOL v35 = 0;
      }
      int v36 = !v35;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v67 = 2082;
      __int16 v68 = "";
      __int16 v69 = 2082;
      *(void *)__int16 v70 = v33;
      *(_WORD *)&v70[8] = 1026;
      *(_DWORD *)&v70[10] = a4;
      __int16 v71 = 1026;
      int v72 = v34;
      __int16 v73 = 1026;
      unsigned int v74 = a8;
      __int16 v75 = 1026;
      unsigned int v76 = v36;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage\", \"clientKey\":%{public, location:escape_only}s, \"auth\":%{public}d, \"corrective\":%{public}d, \"OperationType\":%{public}d, \"suppressShowingInSettings\":%{public}d}", buf, 0x34u);
    }
    long long v37 = +[CLClientKeyPath clientKeyPathWithLegacyClientKey:v28];
    if (a6)
    {
      id v38 = [*(id *)(v59 + 136) registeredKeyPathForClientIdentifier:v37];
      if (a8 == 2)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        double v39 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v67 = 2082;
          __int16 v68 = "";
          __int16 v69 = 2114;
          *(void *)__int16 v70 = v37;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync removing client; CLCompanionSyncAuthObject_CLSYChangeType_UPDATE\", \"clien"
            "t\":%{public, location:escape_only}@}",
            buf,
            0x1Cu);
        }
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        int v48 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v67 = 2082;
          __int16 v68 = "";
          __int16 v69 = 2114;
          *(void *)__int16 v70 = v37;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync removing client as it is received with clear field set\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        unsigned int v49 = [v38 isValidCKP] ^ 1;
        if (!v29) {
          LOBYTE(v49) = 1;
        }
        if ((v49 & 1) == 0) {
          id v38 = [v38 clientKeyPathWithReplacementSubIdentityId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v29) subIdentityType:122];
        }
      }
      sub_100134750(__p, "ClientRemoved");
      sub_1007A9D70(v59, v38, 1, (uint64_t *)__p);
      if (v63 < 0) {
        operator delete(__p[0]);
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      unsigned int v50 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v51 = v64;
        if (v65 < 0) {
          __int16 v51 = (void **)v64[0];
        }
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v67 = 2082;
        __int16 v68 = "";
        __int16 v69 = 2082;
        *(void *)__int16 v70 = v51;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync received with clear to delete the auth on companion\", \"clientKey\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      goto LABEL_109;
    }
    if (a4 || !v31 || !v30)
    {
      id v40 = [*(id *)(v59 + 136) registeredKeyPathForClientIdentifier:v37];
      if (([v40 isValidCKP] & 1) == 0) {
        id v40 = [*(id *)(v59 + 136) registerClient:v37 fromAuthSync:1];
      }
      sub_10009D93C(v59, v40, 0);
      sub_100103240();
      if (sub_10010145C())
      {
        unsigned __int8 v41 = [*(id *)(v59 + 136) BOOLForKey:@"SyncedAuthorizationDecisionOnGizmo" atKeyPath:v40 defaultValue:1];
        id v42 = [*(id *)(v59 + 136) intForKey:@"Authorization" atKeyPath:v40 defaultValue:0];
        uint64_t v43 = (uint64_t)v42;
        char v44 = v42 ? v41 : 1;
        if ((v44 & 1) == 0 && v42 != a4)
        {
          unsigned int v45 = sub_1007B4798(v59, (uint64_t)v40);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          id v46 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(a2 + 23) >= 0) {
              uint64_t v47 = a2;
            }
            else {
              uint64_t v47 = *(void *)a2;
            }
            *(_DWORD *)uint64_t buf = 68290306;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v67 = 2082;
            __int16 v68 = "";
            __int16 v69 = 1026;
            *(_DWORD *)__int16 v70 = a8;
            *(_WORD *)&v70[4] = 2082;
            *(void *)&v70[6] = v47;
            __int16 v71 = 1026;
            int v72 = v43;
            __int16 v73 = 1026;
            unsigned int v74 = a4;
            __int16 v75 = 1026;
            unsigned int v76 = v45;
            _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage change denied due to SyncedAuthorizationDecisionOnGizmo=false\", \"OperationType\":%{public}d, \"clientKey\":%{public, location:escape_only}s, \"oldAuth\":%{public}d, \"newAuth\":%{public}d, \"correctiveComp\":%{public}d}", buf, 0x34u);
          }
          sub_100134750(buf, "AuthorizationConflictResolutionDuringAdd");
          sub_1007BEB1C(v59, a2, v29, v43, v45 | (unint64_t)&_mh_execute_header, 0, (uint64_t *)buf);
LABEL_100:
          if ((v70[3] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          goto LABEL_109;
        }
      }
      sub_100103240();
      if (sub_100106424())
      {
        unsigned int v53 = [*(id *)(v59 + 136) intForKey:@"Authorization" atKeyPath:v40 defaultValue:0];
        unsigned int v54 = v53;
        if (v53)
        {
          if (v53 != a4)
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            int v55 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v56 = a2;
              }
              else {
                uint64_t v56 = *(void *)a2;
              }
              *(_DWORD *)uint64_t buf = 68290050;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v67 = 2082;
              __int16 v68 = "";
              __int16 v69 = 1026;
              *(_DWORD *)__int16 v70 = a8;
              *(_WORD *)&v70[4] = 2082;
              *(void *)&v70[6] = v56;
              __int16 v71 = 1026;
              int v72 = v54;
              __int16 v73 = 1026;
              unsigned int v74 = a4;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessage denied due to an auth conflict\", \"OperationType\":%{public}d, \"clientKey\":%{public, location:escape_only}s, \"oldAuth\":%{public}d, \"newAuth\":%{public}d}", buf, 0x2Eu);
            }
            sub_100134750(v60, "ClientRemoved-AuthConflictResolution");
            sub_1007A9D70(v59, v40, 1, (uint64_t *)v60);
            if (v61 < 0) {
              operator delete(v60[0]);
            }
            sub_100134750(buf, "");
            sub_1001341F0(v59, v40, (uint64_t)buf);
            goto LABEL_100;
          }
        }
      }
      if (a4 > 4) {
        unsigned int v57 = 2;
      }
      else {
        unsigned int v57 = dword_101D2E054[a4];
      }
      if (BYTE4(a5)) {
        uint64_t v58 = a5;
      }
      else {
        uint64_t v58 = 0;
      }
      sub_1007C7A1C(v59, (uint64_t)v40, v57, v58, v52, 1, 0);
    }
LABEL_109:
    if (v65 < 0) {
      operator delete(v64[0]);
    }
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  long long v23 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v67 = 2082;
    __int16 v68 = "";
    __int16 v69 = 1026;
    *(_DWORD *)__int16 v70 = a8;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"NotSuported #authSync applyAuthorizationSyncMessage applies syncMessage of operationTye Add or Update\", \"Received OperationType\":%{public}d}", buf, 0x18u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  uint64_t v24 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v67 = 2082;
    __int16 v68 = "";
    __int16 v69 = 1026;
    *(_DWORD *)__int16 v70 = a8;
    __int16 v19 = "NotSuported #authSync applyAuthorizationSyncMessage applies syncMessage of operationTye Add or Update";
    char v20 = "{\"msg%{public}.0s\":\"NotSuported #authSync applyAuthorizationSyncMessage applies syncMessage of operationTye"
          " Add or Update\", \"Received OperationType\":%{public}d}";
    long long v21 = v24;
    uint32_t v22 = 24;
    goto LABEL_18;
  }
}

void sub_1007C6E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007C6EA8(id result, uint64_t a2, void *a3)
{
  uint64_t v26 = (uint64_t)result;
  if (a3)
  {
    long long v21 = (void *)sub_1007C7EE8((std::string *)a2);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id result = [a3 countByEnumeratingWithState:&v27 objects:v40 count:16];
    id v24 = result;
    if (result)
    {
      unsigned int v25 = 0;
      uint64_t v23 = *(void *)v28;
      CFStringRef v20 = @"Provenance";
      do
      {
        id v5 = 0;
        do
        {
          if (*(void *)v28 != v23) {
            objc_enumerationMutation(a3);
          }
          id v6 = *(void **)(*((void *)&v27 + 1) + 8 * (void)v5);
          if (objc_msgSend(v6, "provenance", v20) == 1)
          {
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            uint64_t v7 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v8 = a2;
              }
              else {
                uint64_t v8 = *(void *)a2;
              }
              id v9 = [objc_msgSend(v6, "zoneIdentifier") UTF8String];
              *(_DWORD *)uint64_t buf = 68289538;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v34 = 2082;
              BOOL v35 = "";
              __int16 v36 = 2082;
              uint64_t v37 = v8;
              __int16 v38 = 2082;
              id v39 = v9;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #authsync ApplyStaticZone.\", \"Client\":%{public, location:escape_only}s, \"ZoneId\":%{public, location:escape_only}s}", buf, 0x26u);
            }
            v31[0] = @"Type";
            v32[0] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v6 zoneType]);
            v31[1] = @"Latitude";
            [v6 latitude];
            v32[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            _OWORD v31[2] = @"Longitude";
            [v6 longitude];
            v32[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            v31[3] = @"Radius";
            [v6 radius];
            v32[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            v31[4] = @"ServiceMaskOperator";
            v32[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v6 serviceMaskOperator]);
            v31[5] = v20;
            v32[5] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v6 provenance]);
            id v10 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:6];
            sub_100134750(buf, (char *)[v6 zoneIdentifier]);
            char v11 = sub_1007C8160(v26, a2, (std::string *)buf, v10, 2u, v21);
            if (SBYTE3(v37) < 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
            char v11 = 0;
          }
          if (([v6 hasAuthMask] & 1) != 0
            || [v6 hasCorrectiveCompensationMask])
          {
            if ([v6 hasCorrectiveCompensationMask])
            {
              unsigned int v12 = [v6 correctiveCompensationMask];
              unsigned __int8 v13 = v12;
              unsigned int v25 = v12 >> 8;
              char v14 = &_mh_execute_header;
            }
            else
            {
              char v14 = 0;
              unsigned __int8 v13 = 0;
            }
            id v15 = [v6 zoneIdentifier];
            if ((v11 & 1) == 0)
            {
              sub_100103240();
              if (sub_100106424()) {
                BOOL v16 = @"clpla_companion_";
              }
              else {
                BOOL v16 = @"clpla_gizmo_";
              }
              id v15 = [(__CFString *)v16 stringByAppendingString:v15];
            }
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            __int16 v17 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a2 + 23) >= 0) {
                uint64_t v18 = a2;
              }
              else {
                uint64_t v18 = *(void *)a2;
              }
              id v19 = [v15 UTF8String];
              *(_DWORD *)uint64_t buf = 68289538;
              *(_DWORD *)&uint8_t buf[4] = 0;
              __int16 v34 = 2082;
              BOOL v35 = "";
              __int16 v36 = 2082;
              uint64_t v37 = v18;
              __int16 v38 = 2082;
              id v39 = v19;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Applying auth for SyncedZone.\", \"Client\":%{public, location:escape_only}s, \"ZoneId\":%{public, location:escape_only}s}", buf, 0x26u);
            }
            v3 &= 0xFFFFFFFFFFFF0000;
            sub_1007C6370(v26, a2, [v15 UTF8String], [v6 authMask], [v14 | v13 | (v25 << 8)], [v6 clearClient], v3, 1u);
          }
          id v5 = (char *)v5 + 1;
        }
        while (v24 != v5);
        id result = [a3 countByEnumeratingWithState:&v27 objects:v40 count:16];
        id v24 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_1007C73BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C73E0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (([*(id *)(a1 + 32) containsObject:a2] & 1) == 0)
  {
    if ([a2 isAuthLimited])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v4 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        std::string __p = (void *)68289282;
        __int16 v11 = 2082;
        unsigned int v12 = "";
        __int16 v13 = 2114;
        char v14 = a2;
        id v5 = "{\"msg%{public}.0s\":\"#authsync applying fullSyncMessages; skip deletion of auth limited client\", \"clien"
             "t\":%{public, location:escape_only}@}";
        id v6 = v4;
        os_log_type_t v7 = OS_LOG_TYPE_INFO;
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v6, v7, v5, (uint8_t *)&__p, 0x1Cu);
      }
    }
    else if ([*(id *)(v3 + 136) isKeyPathRegisteredSystemService:a2])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v8 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        std::string __p = (void *)68289282;
        __int16 v11 = 2082;
        unsigned int v12 = "";
        __int16 v13 = 2114;
        char v14 = a2;
        id v5 = "{\"msg%{public}.0s\":\"#authsync applying fullSyncMessages; skip deletion of system service client\", \"cli"
             "ent\":%{public, location:escape_only}@}";
        id v6 = v8;
        os_log_type_t v7 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_12;
      }
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
      {
        std::string __p = (void *)68289282;
        __int16 v11 = 2082;
        unsigned int v12 = "";
        __int16 v13 = 2114;
        char v14 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#authsync applying fullSyncMessages; deleting client\", \"client\":%{public, location:escape_only}@}",
          (uint8_t *)&__p,
          0x1Cu);
      }
      sub_100134750(&__p, (char *)[objc_msgSend(objc_msgSend(a2, "legacyClientKey"), "UTF8String")]);
      sub_1007C7670(v3, (uint64_t *)&__p);
      if (SBYTE3(v14) < 0) {
        operator delete(__p);
      }
    }
  }
}

void sub_1007C764C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C7670(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v4 = a2;
  }
  else {
    uint64_t v4 = (uint64_t *)*a2;
  }
  id v5 = (char *)[sub_1007C4CFC((uint64_t)+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)) UTF8String];
  sub_100134750(v12, v5);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v7 = v12;
    if (v13 < 0) {
      os_log_type_t v7 = (void **)v12[0];
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v15 = 0;
    __int16 v16 = 2082;
    __int16 v17 = "";
    __int16 v18 = 2082;
    id v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#authsync applyAuthorizationSyncMessageTypeDelete\", \"clientKey\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = (uint64_t *)*a2;
  }
  id v9 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8))];
  sub_100134750(__p, "ClientRemoved");
  sub_1007A9D70(a1, v9, 0, (uint64_t *)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  sub_1007A6C10(a1);
  sub_100105FDC((unsigned char *)a1);
  if (v13 < 0) {
    operator delete(v12[0]);
  }
}

void sub_1007C7834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C7870(uint64_t a1, int a2)
{
  sub_1000C7F88(&__p);
  BOOL v5 = a2 == 1;
  sub_1000EA52C((uint64_t)__p, @"LocationServicesEnabledIn8.0", &v5);
  if (*(void *)v7) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v7);
  }
  sub_1000C7F88(&__p);
  sub_10051F604((uint64_t)__p);
  if (*(void *)v7) {
    sub_1000DB0A0(*(std::__shared_weak_count **)v7);
  }
  sub_100134750(&__p, "com.apple.locationd.authsync");
  sub_1007A564C(a1, (uint64_t *)&__p, 0);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    std::string __p = (void *)68289282;
    *(_WORD *)os_log_type_t v7 = 2082;
    *(void *)&_DWORD v7[2] = "";
    __int16 v8 = 1026;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"authsync: Updating location services\", \"newState\":%{public}d}", (uint8_t *)&__p, 0x18u);
  }
}

void sub_1007C79E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C7A1C(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  id v12 = sub_100103D58(a1, a2);
  [*(id *)(a1 + 224) setNextFireDelay:0.3];
  if ([*(id *)(a1 + 120) locationRestricted]) {
    BOOL v13 = a7 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (v13)
  {
    if (a3 > 4)
    {
      char v14 = "Never(because_invalid)";
      unint64_t v23 = 1;
    }
    else
    {
      unint64_t v23 = qword_101D2E068[a3];
      char v14 = off_1022C9BC0[a3];
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 138543874;
      *(void *)&uint8_t buf[4] = v12;
      __int16 v30 = 1026;
      unsigned int v31 = a3;
      __int16 v32 = 2082;
      uint64_t v33 = v14;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Setting client: %{public}@ authorization to %{public}d (%{public}s)", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      *(_DWORD *)std::string __p = 138543874;
      *(void *)&__p[4] = v12;
      __int16 v25 = 1026;
      unsigned int v26 = a3;
      __int16 v27 = 2082;
      long long v28 = v14;
      uint32_t v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::setClientAuthorization(CLClientKeyPath *, CLClientAuthorizationStatus, CLClientCorrectiveCompensation, const char *, BOOL, BOOL, BOOL)", "%s\n", v22);
      if (v22 != buf) {
        free(v22);
      }
    }
    if (*(unsigned char *)(a1 + 233))
    {
      __int16 v18 = (char *)[v12 legacyClientKey];
      if (v18) {
        id v19 = v18;
      }
      else {
        id v19 = "";
      }
      sub_100134750(buf, v19);
      CFStringRef v20 = [(char *)[v12 zoneId] UTF8String];
      if (v20) {
        long long v21 = v20;
      }
      else {
        long long v21 = "";
      }
      sub_100134750(__p, v21);
      sub_1007CD2FC(a1, (uint64_t)buf, (uint64_t)__p, 1, 0, 0, 3u, 1, *(double *)(a1 + 320), *(double *)(a1 + 328), 50.0, 1u, 0);
      if (SBYTE3(v28) < 0) {
        operator delete(*(void **)__p);
      }
      if (SBYTE3(v33) < 0) {
        operator delete(*(void **)buf);
      }
      *(unsigned char *)(a1 + 233) = 0;
      *(CLLocationCoordinate2D *)(a1 + 320) = kCLLocationCoordinate2DInvalid;
    }
    sub_1007C1F6C(a1, (uint64_t)v12, v23, a4, 1, a6, a7);
    sub_100105FDC((unsigned char *)a1);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v15 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 138543362;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "location services settings are frozen by restrictions - denying %{public}@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      *(_DWORD *)std::string __p = 138543362;
      *(void *)&__p[4] = v12;
      __int16 v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::setClientAuthorization(CLClientKeyPath *, CLClientAuthorizationStatus, CLClientCorrectiveCompensation, const char *, BOOL, BOOL, BOOL)", "%s\n", v16);
      if (v16 != buf) {
        free(v16);
      }
    }
  }
}

void sub_1007C7EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

CFTypeRef sub_1007C7EE8(std::string *a1)
{
  sub_10000FF54(a1, (uint64_t)v12);
  sub_1000A84C8((uint64_t)v12);
  if (v21 >= 0) {
    uint64_t v2 = (char *)&v20;
  }
  else {
    uint64_t v2 = (char *)v20;
  }
  sub_100134750(__p, v2);
  if (v11 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  CFURLRef v4 = (const __CFURL *)sub_1001BEA24(+[NSString stringWithUTF8String:v3]);
  if (v4) {
    BOOL v5 = CFBundleCreate(kCFAllocatorDefault, v4);
  }
  else {
    BOOL v5 = 0;
  }
  sub_100103240();
  sub_10010145C();
  if (v5) {
    CFTypeRef v6 = sub_1000296A4(v5);
  }
  else {
    CFTypeRef v6 = 0;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  os_log_type_t v7 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      __int16 v8 = a1;
    }
    else {
      __int16 v8 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    uint64_t buf = 68289794;
    __int16 v27 = 2082;
    long long v28 = "";
    __int16 v29 = 2082;
    __int16 v30 = v8;
    __int16 v31 = 2114;
    __int16 v32 = v5;
    __int16 v33 = 2114;
    CFTypeRef v34 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #authsync apply zone-sync info.plist zones\", \"ClientKey\":%{public, location:escape_only}s, \"effectiveBundle\":%{public, location:escape_only}@, \"Info.plist Zones\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x30u);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  if (v17 < 0) {
    operator delete(v16);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return v6;
}

void sub_1007C812C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t sub_1007C8160(uint64_t a1, uint64_t a2, std::string *__str, void *a4, unsigned int a5, void *a6)
{
  if (a5 - 3 <= 0xFFFFFFFD)
  {
    sub_101A6E370(a1, a2, __str);
    goto LABEL_108;
  }
  __int16 v8 = __str;
  memset(&v86, 0, sizeof(v86));
  memset(&v85, 0, sizeof(v85));
  if (a5 == 2)
  {
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string __str = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    char v11 = +[NSString stringWithUTF8String:__str];
    sub_100103240();
    if (sub_100106424()) {
      id v12 = @"clpla_companion_";
    }
    else {
      id v12 = @"clpla_gizmo_";
    }
    std::string::assign(&v86, (const std::string::value_type *)[-[__CFString stringByAppendingString:](v12, "stringByAppendingString:", v11) UTF8String]);
    std::string::operator=(&v85, v8);
  }
  else
  {
    std::string::operator=(&v86, __str);
    if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v13 = v8;
    }
    else {
      char v13 = (std::string *)v8->__r_.__value_.__r.__words[0];
    }
    char v14 = +[NSString stringWithUTF8String:v13];
    sub_100103240();
    if (sub_100106424()) {
      char v15 = @"clpla_companion_";
    }
    else {
      char v15 = @"clpla_gizmo_";
    }
    std::string::assign(&v85, (const std::string::value_type *)[-[__CFString stringByAppendingString:](v15, "stringByAppendingString:", v14) UTF8String]);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = *(void *)a2;
  }
  id v17 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16))];
  unsigned __int8 v18 = [v17 isValidCKP];
  if ((v18 & 1) == 0)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v19 = a2;
    }
    else {
      uint64_t v19 = *(void *)a2;
    }
    id v17 = [*(id *)(a1 + 136) registerClient:fromAuthSync:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v19)), 0];
  }
  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v20 = &v86;
  }
  else {
    CFStringRef v20 = (std::string *)v86.__r_.__value_.__r.__words[0];
  }
  id v21 = [v17 clientKeyPathWithReplacementSubIdentityId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20) subIdentityType:122];
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint32_t v22 = &v85;
  }
  else {
    uint32_t v22 = (std::string *)v85.__r_.__value_.__r.__words[0];
  }
  id v23 = [v17 clientKeyPathWithReplacementSubIdentityId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v22) subIdentityType:122];
  sub_100134750(__p, "ClientRemoved");
  sub_1007A9D70(a1, v21, 1, (uint64_t *)__p);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  unsigned int v24 = [[a4 objectForKeyedSubscript:@"ServiceMaskOperator"] intValue];
  id v25 = [[a4 objectForKeyedSubscript:@"Type"] intValue];
  [a4[@"Latitude"] doubleValue];
  double v27 = v26;
  [objc_msgSend(a4, "objectForKeyedSubscript:", @"Longitude") doubleValue];
  double v29 = v28;
  [objc_msgSend(a4, "objectForKeyedSubscript:", @"Radius") doubleValue];
  sub_1007CD2FC(a1, a2, (uint64_t)&v86, (uint64_t)v25, 0, v24, a5, 0, v27, v29, v30, 0, 0);
  if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v31 = &v85;
  }
  else {
    __int16 v31 = (std::string *)v85.__r_.__value_.__r.__words[0];
  }
  id v32 = [a6 objectForKeyedSubscript:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v31)];
  if (v32 && (sub_1007DFDEC(v32, a4) & 1) != 0)
  {
    std::string v78 = _NSConcreteStackBlock;
    uint64_t v79 = 3221225472;
    uint64_t v80 = sub_1007E00B4;
    unsigned int v81 = &unk_1022C96D0;
    uint64_t v82 = a1;
    if (v18 & 1) != 0 || ([*(id *)(a1 + 136) dictionaryExistsAtKeyPath:v23])
    {
      uint64_t v33 = sub_1007DFDEC([*(id *)(a1 + 136) readOnlyStoreAtKeyPath:v23], a4);
      if (v33)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        unsigned __int8 v41 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v42 = a2;
          }
          else {
            uint64_t v42 = *(void *)a2;
          }
          uint64_t v43 = &v86;
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v43 = (std::string *)v86.__r_.__value_.__r.__words[0];
          }
          char v44 = &v85;
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            char v44 = (std::string *)v85.__r_.__value_.__r.__words[0];
          }
          *(void *)uint64_t buf = 68290050;
          __int16 v88 = 2082;
          CFStringRef v89 = "";
          __int16 v90 = 2082;
          uint64_t v91 = v42;
          __int16 v92 = 2082;
          uint64_t v93 = v43;
          __int16 v94 = 2082;
          int v95 = v44;
          __int16 v96 = 1026;
          BOOL v97 = a5 == 2;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #reconcile Collapsing, existing entry identical. Using existing entry, deleting new entry\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdToWrite\":%{public, location:escape_only}s, \"zoneIdToReconcile\":%{public, location:escape_only}s, \"isSyncedZone\":%{public}hhd}", buf, 0x36u);
        }
        sub_100134750(&v72, "ClientRemoved");
        sub_1007A9D70(a1, v21, 1, (uint64_t *)&v72);
        if (SHIBYTE(v74) < 0) {
          operator delete(v72);
        }
        id v45 = v23;
        if (a5 == 2) {
          goto LABEL_99;
        }
        goto LABEL_85;
      }
      if (a5 == 2)
      {
        sub_100134750(&v75, "ClientRemoved");
        sub_1007A9D70(a1, v23, 1, (uint64_t *)&v75);
        if (SHIBYTE(v77) < 0) {
          operator delete(v75);
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        __int16 v51 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v52 = a2;
          }
          else {
            uint64_t v52 = *(void *)a2;
          }
          unsigned int v53 = &v86;
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unsigned int v53 = (std::string *)v86.__r_.__value_.__r.__words[0];
          }
          unsigned int v54 = &v85;
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unsigned int v54 = (std::string *)v85.__r_.__value_.__r.__words[0];
          }
          *(void *)uint64_t buf = 68290050;
          __int16 v88 = 2082;
          CFStringRef v89 = "";
          __int16 v90 = 2082;
          uint64_t v91 = v52;
          __int16 v92 = 2082;
          uint64_t v93 = v53;
          __int16 v94 = 2082;
          int v95 = v54;
          __int16 v96 = 1026;
          BOOL v97 = 1;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #reconcile existing entry for collapsing not identical. Delete existing entry\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdToWrite\":%{public, location:escape_only}s, \"zoneIdToReconcile\":%{public, location:escape_only}s, \"isSyncedZone\":%{public}hhd}", buf, 0x36u);
        }
        id v45 = v21;
        id v21 = v23;
LABEL_85:
        v80((uint64_t)&v78, v45, v21);
        goto LABEL_99;
      }
      sub_101A6E4E0(v33, v34, v35, v36, v37, v38, v39, v40, v68, v69, v70, (uint64_t)a6, (uint64_t)v72, v73, v74, (uint64_t)v75, v76, v77, (uint64_t)v78,
        v79,
        (uint64_t)v80,
        (uint64_t)v81,
        v82,
        (uint64_t)__p[0]);
      abort_report_np();
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v55 = qword_102419538;
      BOOL v56 = os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT);
      if (v56)
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v64 = a2;
        }
        else {
          uint64_t v64 = *(void *)a2;
        }
        char v65 = &v86;
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v65 = (std::string *)v86.__r_.__value_.__r.__words[0];
        }
        __int16 v66 = &v85;
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          __int16 v66 = (std::string *)v85.__r_.__value_.__r.__words[0];
        }
        *(void *)uint64_t buf = 68290050;
        __int16 v88 = 2082;
        CFStringRef v89 = "";
        __int16 v90 = 2082;
        uint64_t v91 = v64;
        __int16 v92 = 2082;
        uint64_t v93 = v65;
        __int16 v94 = 2082;
        int v95 = v66;
        __int16 v96 = 1026;
        BOOL v97 = a5 == 2;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#pla #reconcile existing entry for collapsing not found\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdToWrite\":%{public, location:escape_only}s, \"zoneIdToReconcile\":%{public, location:escape_only}s, \"isSyncedZone\":%{public}hhd}", buf, 0x36u);
      }
      if (a5 == 2)
      {
        v80((uint64_t)&v78, v21, v23);
        goto LABEL_99;
      }
      sub_101A6E638(v56, v57, v58, v59, v60, v61, v62, v63, v68, v69, v70, (uint64_t)a6, (uint64_t)v72, v73, v74, (uint64_t)v75, v76, v77, (uint64_t)v78,
        v79,
        (uint64_t)v80,
        (uint64_t)v81,
        v82,
        (uint64_t)__p[0]);
      abort_report_np();
    }
LABEL_108:
    __break(1u);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v46 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v47 = a2;
    }
    else {
      uint64_t v47 = *(void *)a2;
    }
    int v48 = &v86;
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v48 = (std::string *)v86.__r_.__value_.__r.__words[0];
    }
    unsigned int v49 = &v85;
    if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unsigned int v49 = (std::string *)v85.__r_.__value_.__r.__words[0];
    }
    *(void *)uint64_t buf = 68290050;
    __int16 v88 = 2082;
    CFStringRef v89 = "";
    __int16 v90 = 2082;
    uint64_t v91 = v47;
    __int16 v92 = 2082;
    uint64_t v93 = v48;
    __int16 v94 = 2082;
    int v95 = v49;
    __int16 v96 = 1026;
    BOOL v97 = a5 == 2;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#pla #reconcile registered zone not in zonesReconciliationLedger. No collapsing\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdToWrite\":%{public, location:escape_only}s, \"zoneIdToReconcile\":%{public, location:escape_only}s, \"isSyncedZone\":%{public}hhd}", buf, 0x36u);
  }
  if (a5 == 2)
  {
    uint64_t v50 = 0;
    goto LABEL_100;
  }
  sub_100134750(buf, "InfoPlistZoneRegistration");
  sub_1007C9DC8(a1, (uint64_t *)a2, (uint64_t *)buf);
  if (SBYTE3(v91) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_99:
  uint64_t v50 = 1;
LABEL_100:
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  return v50;
}

void sub_1007C8AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007C8B50(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  sub_100103240();
  if (sub_100106424())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#authsync getAllAuthSync start", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v15) = 0;
      id v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSArray *CLClientManager::getAllAuthSync()", "%s\n", v10);
      if (v10 != buf) {
        free(v10);
      }
    }
    sub_100134750(buf, "");
    CFURLRef v4 = sub_1007C4DF0(a1, (uint64_t *)buf, 0, 2);
    if (v22 < 0) {
      operator delete(*(void **)buf);
    }
    [(CLCompanionSyncAuthObject *)v4 setAuthMask:sub_1001198FC() == 1];
    [v2 addObject:v4];
    BOOL v5 = *(void **)(a1 + 136);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    _DWORD v14[2] = sub_1007C8F6C;
    void v14[3] = &unk_1022C8E48;
    void v14[4] = v2;
    v14[5] = a1;
    [v5 iterateAllAnchorKeyPathsWithBlock:v14];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    CFTypeRef v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      id v7 = [v2 count];
      id v8 = [[objc_msgSend(v2, "description") UTF8String];
      *(_DWORD *)uint64_t buf = 134349314;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v20 = 2082;
      id v21 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#authsync getAllAuthSync finish %{public}lu: %{public}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v11 = [v2 count];
      id v12 = [[objc_msgSend(v2, "description") UTF8String];
      int v15 = 134349314;
      id v16 = v11;
      __int16 v17 = 2082;
      id v18 = v12;
      char v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSArray *CLClientManager::getAllAuthSync()", "%s\n", v13);
      if (v13 != buf) {
        free(v13);
      }
    }
  }
  return v2;
}

void sub_1007C8F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007C8F6C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  CFURLRef v4 = (char *)[objc_msgSend(objc_msgSend(a2, "legacyClientKey"), "UTF8String") UTF8String];
  if (v4) {
    BOOL v5 = v4;
  }
  else {
    BOOL v5 = "";
  }
  sub_100134750(__p, v5);
  CFTypeRef v6 = sub_1007C4DF0(v3, (uint64_t *)__p, 0, 2);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v6) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_1007C8FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007C9010(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionary];
  if (_os_feature_enabled_impl())
  {
    CFTypeRef v25 = 0;
    uint64_t v3 = sub_1000A6958();
    if (sub_1004D01D8(v3, @"CLClientManager.AssertionDueToWatchApp", &v25))
    {
      CFURLRef v4 = (void *)v25;
      double Current = CFAbsoluteTimeGetCurrent();
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      obuint64_t j = [v4 allKeys];
      id v17 = [obj countByEnumeratingWithState:&v21 objects:v26 count:16];
      if (v17)
      {
        uint64_t v16 = *(void *)v22;
        do
        {
          for (uint64_t i = 0; i != v17; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v22 != v16) {
              objc_enumerationMutation(obj);
            }
            uint64_t v7 = *(void *)(*((void *)&v21 + 1) + 8 * i);
            id v8 = +[NSMutableDictionary dictionary];
            id v10 = (uint64_t *)qword_10247E088;
            uint64_t v9 = qword_10247E090;
            while (v10 != (uint64_t *)v9)
            {
              uint64_t v11 = *v10++;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              sub_100101464(v11, &v20, &v19);
              id v12 = v19;
              [v8 setObject:[v4 objectForKeyedSubscript:v7] forKey:v20];
              [v8 setObject:[NSNumber numberWithDouble:Current] forKey:v12];
            }
            [v2 setObject:v8 forKey:v7];
          }
          id v17 = [obj countByEnumeratingWithState:&v21 objects:v26 count:16];
        }
        while (v17);
      }
    }
  }
  else
  {
    char v13 = *(void **)(a1 + 136);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    _OWORD v18[2] = sub_1007C9258;
    v18[3] = &unk_1022C8E48;
    void v18[4] = v2;
    v18[5] = a1;
    [v13 iterateAllAnchorKeyPathsWithBlock:v18];
  }
  return v2;
}

void sub_1007C9258(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [a2 legacyClientKey];
  sub_100134750(__p, (char *)[v4 UTF8String]);
  BOOL v5 = sub_100106174(v3, (unsigned __int8 *)__p);
  BOOL v6 = v5;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (!v6) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  sub_100134750(__p, (char *)[v4 UTF8String]);
  id v7 = sub_1007C9344(v3, (uint64_t *)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if ([v7 count]) {
    [*(id *)(a1 + 32) setObject:v7 forKey:v4];
  }
}

void sub_1007C9324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007C9344(uint64_t a1, uint64_t *a2)
{
  if (*((char *)a2 + 23) >= 0) {
    id v4 = a2;
  }
  else {
    id v4 = (uint64_t *)*a2;
  }
  id v5 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4))];
  if ([v5 isValidCKP])
  {
    id v6 = +[NSMutableDictionary dictionary];
    for (uint64_t i = 0; i != 11; ++i)
    {
      unint64_t v8 = qword_101D2DB80[i];
      if (_os_feature_enabled_impl())
      {
        if (v8 > 0xA || ((1 << v8) & 0x430) == 0) {
          continue;
        }
      }
      id v17 = 0;
      *(void *)uint64_t buf = 0;
      sub_100101464(v8, buf, &v17);
      uint64_t v10 = *(void *)buf;
      [*(id *)(a1 + 136) doubleForKey:*(void *)buf atKeyPath:v5 defaultValue:-1.0];
      if (v11 != -1.0) {
        [v6 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:")(v10)] forKey:@"v10"];
      }
      id v12 = v17;
      [*(id *)(a1 + 136) doubleForKey:v17 atKeyPath:v5 defaultValue:-1.0];
      if (v13 != -1.0) {
        [v6 setObject:[+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:")(v12)] forKey:v12];
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    char v14 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        int v15 = a2;
      }
      else {
        int v15 = (uint64_t *)*a2;
      }
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v19 = 2082;
      uint64_t v20 = "";
      __int16 v21 = 2082;
      long long v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Couldn't get nvp\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    return 0;
  }
  return v6;
}

uint64_t sub_1007C95AC(uint64_t a1, uint64_t *a2, void *a3)
{
  id v6 = &qword_102419000;
  if (qword_102419530 != -1) {
LABEL_57:
  }
    dispatch_once(&qword_102419530, &stru_1022C9768);
  id v7 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      unint64_t v8 = a2;
    }
    else {
      unint64_t v8 = (uint64_t *)*a2;
    }
    *(_DWORD *)uint64_t buf = 68289282;
    int v45 = 0;
    __int16 v46 = 2082;
    uint64_t v47 = "";
    __int16 v48 = 2082;
    unsigned int v49 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Merging remote location usage\", \"client\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*((char *)a2 + 23) >= 0) {
    char v9 = a2;
  }
  else {
    char v9 = (uint64_t *)*a2;
  }
  unsigned __int8 v41 = +[NSString stringWithUTF8String:v9];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  for (uint64_t i = 0; i != 11; ++i)
  {
    unint64_t v12 = qword_101D2DB80[i];
    uint64_t result = _os_feature_enabled_impl();
    if (result)
    {
      if (v12 > 0xA || ((1 << v12) & 0x430) == 0) {
        continue;
      }
    }
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    sub_100101464(v12, &v43, &v42);
    unint64_t v15 = (unint64_t)[a3 objectForKeyedSubscript:v43];
    id v16 = [a3 objectForKeyedSubscript:v42];
    unint64_t v17 = (unint64_t)v16;
    if (v15) {
      BOOL v18 = v16 == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18)
    {
      if (v6[166] != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v19 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        [(id)v15 doubleValue];
        __int16 v21 = v20;
        [(id)v17 doubleValue];
        *(_DWORD *)uint64_t buf = 68289794;
        int v45 = 0;
        __int16 v46 = 2082;
        uint64_t v47 = "";
        __int16 v48 = 2050;
        unsigned int v49 = v21;
        __int16 v50 = 2050;
        uint64_t v51 = v22;
        __int16 v52 = 2050;
        unint64_t v53 = v12;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync #warning Didn't expect a start time and a stop time\", \"start time_s\":\"%{public}.09f\", \"stop time_s\":\"%{public}.09f\", \"service\":%{public}lu}", buf, 0x30u);
      }
      [(id)v17 doubleValue];
      double v24 = v23;
      [(id)v15 doubleValue];
      if (v24 <= v25) {
        unint64_t v17 = 0;
      }
      else {
        unint64_t v15 = 0;
      }
    }
    if (*((char *)a2 + 23) >= 0) {
      double v26 = a2;
    }
    else {
      double v26 = (uint64_t *)*a2;
    }
    double v27 = +[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:v26]);
    if (v15 | v17)
    {
      uint64_t v28 = v6[166];
      if (v15)
      {
        if (v28 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        double v29 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a2 + 23) >= 0) {
            double v30 = a2;
          }
          else {
            double v30 = (uint64_t *)*a2;
          }
          [(id)v15 doubleValue];
          *(_DWORD *)uint64_t buf = 68289794;
          int v45 = 0;
          __int16 v46 = 2082;
          uint64_t v47 = "";
          __int16 v48 = 2082;
          unsigned int v49 = v30;
          id v6 = &qword_102419000;
          __int16 v50 = 2050;
          uint64_t v51 = v31;
          __int16 v52 = 2050;
          unint64_t v53 = v12;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Starting remote location service\", \"client\":%{public, location:escape_only}s, \"start time_s\":\"%{public}.09f\", \"service\":%{public}lu}", buf, 0x30u);
        }
        if (v12 == 10) {
          sub_100102A58(a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithLegacyClientKey:v41], -1, 0, 0.0);
        }
        [(id)v15 doubleValue];
        uint64_t v33 = a1;
        uint64_t v34 = (uint64_t)v27;
        uint64_t v35 = v12;
        int v36 = 1;
      }
      else
      {
        if (!v17)
        {
          sub_101A6E790(v28 == -1);
          goto LABEL_57;
        }
        if (v28 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v38 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)a2 + 23) >= 0) {
            uint64_t v39 = a2;
          }
          else {
            uint64_t v39 = (uint64_t *)*a2;
          }
          [(id)v17 doubleValue];
          *(_DWORD *)uint64_t buf = 68289794;
          int v45 = 0;
          __int16 v46 = 2082;
          uint64_t v47 = "";
          __int16 v48 = 2082;
          unsigned int v49 = v39;
          id v6 = &qword_102419000;
          __int16 v50 = 2050;
          uint64_t v51 = v40;
          __int16 v52 = 2050;
          unint64_t v53 = v12;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync Stopping remote location service\", \"client\":%{public, location:escape_only}s, \"stop time_s\":\"%{public}.09f\", \"service\":%{public}lu}", buf, 0x30u);
        }
        [(id)v17 doubleValue];
        uint64_t v33 = a1;
        uint64_t v34 = (uint64_t)v27;
        uint64_t v35 = v12;
        int v36 = 0;
      }
      int v37 = 1;
    }
    else
    {
      uint64_t v33 = a1;
      uint64_t v34 = (uint64_t)v27;
      uint64_t v35 = v12;
      int v36 = 0;
      int v37 = 0;
      double v32 = Current;
    }
    uint64_t result = sub_1001005FC(v33, v34, v35, v36, v37, 1, v32);
  }
  return result;
}

id sub_1007C9AA0(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 136);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1007C9B14;
  unsigned __int8 v4[3] = &unk_1022C8E48;
  v4[4] = a2;
  void v4[5] = a1;
  return [v2 iterateAllAnchorKeyPathsWithBlock:v4];
}

void sub_1007C9B14(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:objc_msgSend(a2, "legacyClientKey")];
  if (v4) {
    id v5 = v4;
  }
  else {
    id v5 = &__NSDictionary0__struct;
  }
  id v6 = [(char *)[a2 legacyClientKey] UTF8String];
  if (v6) {
    id v7 = v6;
  }
  else {
    id v7 = "";
  }
  sub_100134750(__p, v7);
  sub_1007C95AC(v3, (uint64_t *)__p, v5);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1007C9BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1007C9BCC(uint64_t a1, void *a2)
{
  uint64_t v3 = 0;
  while (1)
  {
    unint64_t v4 = qword_101D2DB80[v3];
    if (_os_feature_enabled_impl())
    {
      if (v4 > 0xA || ((1 << v4) & 0x430) == 0) {
        goto LABEL_13;
      }
    }
    BOOL v18 = 0;
    uint64_t v19 = 0;
    sub_100101464(v4, &v19, &v18);
    id v6 = [a2 objectForKeyedSubscript:v19];
    id v7 = [a2 objectForKeyedSubscript:v18];
    if (v6 && v7 != 0) {
      break;
    }
    if (v6) {
      return 1;
    }
LABEL_13:
    if (++v3 == 11) {
      return 0;
    }
  }
  uint64_t v10 = v7;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  double v11 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    [v6 doubleValue];
    uint64_t v13 = v12;
    [v10 doubleValue];
    *(_DWORD *)uint64_t buf = 68289794;
    int v21 = 0;
    __int16 v22 = 2082;
    double v23 = "";
    __int16 v24 = 2050;
    uint64_t v25 = v13;
    __int16 v26 = 2050;
    uint64_t v27 = v14;
    __int16 v28 = 2050;
    unint64_t v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#usesync #warning Didn't expect a start time and a stop time\", \"start time_s\":\"%{public}.09f\", \"stop time_s\":\"%{public}.09f\", \"service\":%{public}lu}", buf, 0x30u);
  }
  [v10 doubleValue];
  double v16 = v15;
  [v6 doubleValue];
  return v16 <= v17;
}

id sub_1007C9DC8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  sub_100103240();
  if (sub_100106424() || (sub_100103240(), id result = (id)sub_10010145C(), result))
  {
    id result = sub_1007C4DF0(a1, a2, 0, 1);
    if (result)
    {
      id v7 = result;
      unint64_t v8 = *(void **)(a1 + 1536);
      if (*((char *)a3 + 23) >= 0) {
        char v9 = a3;
      }
      else {
        char v9 = (uint64_t *)*a3;
      }
      uint64_t v10 = +[NSString stringWithUTF8String:v9];
      return [v8 addObject:v7 withSyncSessionReason:v10];
    }
  }
  return result;
}

void sub_1007C9E78(uint64_t a1)
{
  sub_100103240();
  if (sub_100106424())
  {
    [*(id *)(a1 + 1536) sendNotification:0];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#authsync sending kNotificationReset to the watch", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::sendResetNotification()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
  }
}

void sub_1007CA01C(uint64_t a1)
{
  sub_100103240();
  if (sub_10010145C())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#authsync received kNotificationReset from the companion", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v3 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::receiveResetNotification()", "%s\n", v3);
      if (v3 != (char *)buf) {
        free(v3);
      }
    }
    sub_1007C5804(a1);
  }
}

void sub_1007CA258(id a1)
{
  qword_10247E140 = (uint64_t)[objc_alloc((Class)CLDispatchSilo) initWithIdentifier:@"CLClientManagerSilo"];
}

void sub_1007CA528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CA62C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CA740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CA854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CA968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CADD8(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v4 isValidCKP])
  {
LABEL_6:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    goto LABEL_8;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  id v5 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)double v16 = 2082;
    *(void *)&_OWORD v16[2] = "";
    *(_WORD *)&v16[10] = 2114;
    *(void *)&v16[12] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"appLaunchedByAppLifecycleManager called for unregistered app. Skipping.\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    goto LABEL_6;
  }
LABEL_8:
  id v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 68289283;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)double v16 = 2082;
    *(void *)&_OWORD v16[2] = "";
    *(_WORD *)&v16[10] = 2113;
    *(void *)&v16[12] = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"app launched by CLALM\", \"Client\":%{private, location:escape_only}@}", buf, 0x1Cu);
  }
  if (v4)
  {
    [v4 cppClientKey];
  }
  else
  {
    *(void *)uint64_t buf = 0;
    *(void *)double v16 = 0;
    *(void *)&_OWORD v16[8] = 0;
  }
  uint64_t v14 = buf;
  id v7 = sub_100105304(a1 + 440, buf, (uint64_t)&unk_101D0B290, (long long **)&v14);
  v7[12] += 500;
  if ((v16[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  id v9 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
  [v9 setClientKey:[v4 clientKey]];
  [v9 setStartTime:Current];
  [v9 setStopTime:Current];
  [*(id *)(a1 + 480) writeSecondaryObject:v9 toField:1];
  if (v4)
  {
    [v4 cppClientKey];
  }
  else
  {
    *(void *)uint64_t buf = 0;
    *(void *)double v16 = 0;
    *(void *)&_OWORD v16[8] = 0;
  }
  uint64_t v10 = sub_10012FFE0(a1 + 776, (const void **)buf);
  uint64_t v11 = a1 + 784;
  if ((v16[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v11 != v10)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v16 = 2082;
      *(void *)&_OWORD v16[2] = "";
      *(_WORD *)&v16[10] = 2114;
      *(void *)&v16[12] = v4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Faulting for logs explaining usage score increment\", \"ClientKey\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v13 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)double v16 = 2082;
      *(void *)&_OWORD v16[2] = "";
      *(_WORD *)&v16[10] = 2114;
      *(void *)&v16[12] = v4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Faulting for logs explaining usage score increment", "{\"msg%{public}.0s\":\"Faulting for logs explaining usage score increment\", \"ClientKey\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
}

void sub_1007CB1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007CB228(uint64_t a1)
{
  int v15 = 0;
  uint64_t v2 = sub_1000A6958();
  int v3 = sub_10006EF84(v2, "SystemServiceGeneration", &v15) ^ 1;
  if (v15 < 2) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  id v5 = *(void **)(a1 + 136);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _OWORD v13[2] = sub_1007DE898;
  v13[3] = &unk_1022C9578;
  v13[4] = a1;
  char v14 = v4;
  [v5 iterateAllAnchorKeyPathsWithBlock:v13];
  if (v4 == 1)
  {
    uint64_t v6 = sub_1000A6958();
    *(_DWORD *)uint64_t buf = 2;
    sub_1000EA838(v6, "SystemServiceGeneration", buf);
    uint64_t v7 = *(void *)sub_1000A6958();
    (*(void (**)(void))(v7 + 944))();
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "AuthMigrate: successfully resetted all SystemService authorization mask", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::performMigration()", "%s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
    [*(id *)(a1 + 136) persist];
  }
  sub_1007A6C10(a1);
  sub_100105FDC((unsigned char *)a1);
  [*(id *)(a1 + 1536) considerPerformingAForcedFullSync];
  uint64_t v9 = sub_1000A6958();
  sub_1004CF870(v9);
  uint64_t v10 = *(void *)sub_1000A6958();
  (*(void (**)(void))(v10 + 944))();
  return sub_1007A0220(*(void **)(a1 + 1016));
}

void sub_1007CB550(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 1104))
  {
    if ([*(id *)(a1 + 1088) containsObject:a2])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v4 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        id v5 = [a2 UTF8String];
        uint64_t v6 = *(void **)(a1 + 1088);
        *(_DWORD *)uint64_t buf = 68289794;
        *(_DWORD *)uint64_t v13 = 0;
        *(_WORD *)&v13[4] = 2082;
        *(void *)&v13[6] = "";
        __int16 v14 = 2082;
        id v15 = v5;
        __int16 v16 = 2114;
        double v17 = v6;
        __int16 v18 = 2050;
        uint64_t v19 = (int)[v6 count];
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"reset completion reporting\", \"Current Identifier\":%{public, location:escape_only}s, \"ResetIdentifiers Snapshot\":%{public, location:escape_only}@, \"Count\":%{public}ld}", buf, 0x30u);
      }
      [*(id *)(a1 + 1088) removeObject:a2];
      [*(id *)(a1 + 128) setArray:*(void *)(a1 + 1088) forKey:@"ResetIdentifiers"];
      if (![*(id *)(a1 + 1088) count])
      {
        if (qword_102419520 != -1) {
          dispatch_once(&qword_102419520, &stru_1022C97E8);
        }
        uint64_t v7 = qword_102419528;
        if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Completion reported back for all Reset registered clients", buf, 2u);
        }
        if (sub_10013D1A0(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022C97E8);
          }
          uint64_t v11 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::resetNotificationConsumedForIdentifier(NSString *)", "%s\n", v11);
          if (v11 != (char *)buf) {
            free(v11);
          }
        }
        *(unsigned char *)(a1 + 1104) = 0;
        [*(id *)(a1 + 256) setNextFireDelay:0.0];
      }
    }
    else
    {
      [*(id *)(a1 + 128) setArray:0 forKey:@"ResetIdentifiers"];
      [*(id *)(a1 + 128) setInt:0 forKey:@"ResetRetrialCount"];
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 138412290;
        *(void *)uint64_t v13 = a2;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Reset registration and completion reporting is un-balanced. Completion of Reset reported for unregistered identifier: %@", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v10 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::resetNotificationConsumedForIdentifier(NSString *)", "%s\n", v10);
        if (v10 != (char *)buf) {
          free(v10);
        }
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)uint64_t v13 = 0;
      *(_WORD *)&v13[4] = 2082;
      *(void *)&v13[6] = "";
      __int16 v14 = 2082;
      id v15 = [a2 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Skip completion reporting. No Reset in progress\", \"Identifier\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
}

void sub_1007CBB08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007CBB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 138412546;
    uint64_t v10 = a2;
    __int16 v11 = 1026;
    int v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Setting client:%@ background indicator to %{public}d", buf, 0x12u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::setClientBackgroundIndicator(CLClientKeyPath *, BOOL, const char *)", "%s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  return sub_1007DBE4C(a1, a2, a3, 1);
}

void sub_1007CBE64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CBED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CC0F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CC1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1007CC1FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = sub_100103D58(a1, a2);
  uint64_t v6 = *(void **)(a1 + 136);
  if (a3)
  {
    return [v6 setString:a3 forKey:@"Purpose" atKeyPath:v5];
  }
  else
  {
    return [v6 removeValueForKey:@"Purpose" atKeyPath:v5];
  }
}

void sub_1007CC2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007CC364(id *a1, void *a2)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id result = [a2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (result)
  {
    id v5 = result;
    uint64_t v6 = *(void *)v9;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(a2);
        }
        sub_1007A9BA8(a1, (uint64_t)+[CLClientKeyPath clientKeyPathWithLegacyClientKey:*(void *)(*((void *)&v8 + 1) + 8 * (void)v7)]);
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id result = [a2 countByEnumeratingWithState:&v8 objects:v12 count:16];
      id v5 = result;
    }
    while (result);
  }
  return result;
}

void *sub_1007CC4F8(uint64_t a1, uint64_t a2, int a3)
{
  id v4 = [*(id *)(a1 + 136) dictionary];
  if (v4)
  {
    id v5 = v4;
    if ((_os_feature_enabled_impl() & 1) == 0)
    {
      uint64_t v6 = objc_opt_new();
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id v7 = [v5 countByEnumeratingWithState:&v30 objects:v40 count:16];
      if (!v7) {
        return (void *)v6;
      }
      id v8 = v7;
      __int16 v24 = (void *)v6;
      int v25 = a3;
      uint64_t v9 = *(void *)v31;
LABEL_6:
      uint64_t v10 = 0;
      while (1)
      {
        if (*(void *)v31 != v9) {
          objc_enumerationMutation(v5);
        }
        long long v11 = *(void **)(*((void *)&v30 + 1) + 8 * v10);
        [v5 objectForKeyedSubscript:v11];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0
          || ([v11 isEqualToString:@"e:"] & 1) != 0
          || ([v11 isEqualToString:@"p:"] & 1) != 0
          || objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", @"AnchorKeyPath")|| objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", @"PrimaryKeyPath")|| objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", @"AuthLimitingKeyPath")|| !objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", @"Authorization")&& objc_msgSend(objc_msgSend(v5, "objectForKeyedSubscript:", v11), "objectForKeyedSubscript:", @"SuppressShowingInSettings"))
        {
          goto LABEL_15;
        }
        int v12 = +[CLClientKeyPath clientKeyPathWithClientKey:v11];
        id v13 = [v5 objectForKeyedSubscript:v11];
        __int16 v28 = v12;
        if ([*(id *)(a1 + 136) isKeyPathRegisteredSystemService:v12])
        {
          __int16 v14 = v13;
          if (sub_10010498C(v13) != 8
            && sub_100102004((const __CFString *)[(CLClientKeyPath *)v28 bundlePath])
            && (!v25 || sub_100EC70E8(v13)))
          {
            goto LABEL_29;
          }
        }
        else
        {
          __int16 v14 = v13;
          if (([v13 objectForKeyedSubscript:@"Authorization"]
             || [v13 objectForKeyedSubscript:@"SupportedAuthorizationMask"]
             || [v13 objectForKeyedSubscript:@"SubIdentities"])
            && (!v25 || sub_100EC70E8(v13)))
          {
LABEL_29:
            id v15 = [v14 cl_deepMutableCopy];
            __int16 v26 = v15;
            id v27 = [(NSString *)[(CLClientKeyPath *)v28 clientAnchor] copy];
            if (v27 && v15)
            {
              sub_1007C0F70(a1, (uint64_t)v28, v15);
              if ([v15 objectForKeyedSubscript:@"PlatformSpecificBundleId"]
                && [v15 objectForKeyedSubscript:@"BundleId"])
              {
                [v15 setObject:objc_msgSend(v15, "objectForKeyedSubscript:", @"PlatformSpecificBundleId") forKeyedSubscript:@"BundleId"];
              }
              if ([*(id *)(a1 + 136) BOOLForKey:@"Hidden" atKeyPath:v28 defaultValue:0])[v15 setObject:+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", sub_1007DA810(a1, (uint64_t)v28)) forKeyedSubscript:@"SupportedAuthorizationMask"]; {
              sub_100EC72FC(v15);
              }
              [v24 setObject:v15 forKeyedSubscript:v27];
            }
            else if (v15)
            {
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              __int16 v16 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)uint64_t buf = 68289283;
                *(_DWORD *)int v37 = 0;
                *(_WORD *)&v37[4] = 2082;
                *(void *)&v37[6] = "";
                __int16 v38 = 2113;
                uint64_t v39 = v11;
                _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Client CKP key is nil in CLClientManager::copyClients\", \"key\":%{private, location:escape_only}@}", buf, 0x1Cu);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022C9768);
                }
              }
              double v17 = qword_102419538;
              if (os_signpost_enabled((os_log_t)qword_102419538))
              {
                *(_DWORD *)uint64_t buf = 68289283;
                *(_DWORD *)int v37 = 0;
                *(_WORD *)&v37[4] = 2082;
                *(void *)&v37[6] = "";
                __int16 v38 = 2113;
                uint64_t v39 = v11;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Client CKP key is nil in CLClientManager::copyClients", "{\"msg%{public}.0s\":\"Client CKP key is nil in CLClientManager::copyClients\", \"key\":%{private, location:escape_only}@}", buf, 0x1Cu);
              }
            }
            else
            {
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              __int16 v18 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
              {
                uint64_t v19 = [(CLClientKeyPath *)v28 clientAnchor];
                *(_DWORD *)uint64_t buf = 138477827;
                *(void *)int v37 = v19;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Client record is nil in CLClientManager::copyClients for clientKey %{private}@", buf, 0xCu);
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_102419530 != -1) {
                  dispatch_once(&qword_102419530, &stru_1022C9768);
                }
                uint64_t v20 = [(CLClientKeyPath *)v28 clientAnchor];
                int v34 = 138477827;
                uint64_t v35 = v20;
                int v21 = (char *)_os_log_send_and_compose_impl();
                sub_1004BA5E4("Generic", 1, 0, 0, "CFDictionaryRef CLClientManager::copyClients(NSString *, BOOL)", "%s\n", v21);
                if (v21 != (char *)buf) {
                  free(v21);
                }
              }
            }
          }
        }
LABEL_15:
        if (v8 == (id)++v10)
        {
          id v22 = [v5 countByEnumeratingWithState:&v30 objects:v40 count:16];
          id v8 = v22;
          if (!v22) {
            return v24;
          }
          goto LABEL_6;
        }
      }
    }
  }
  return 0;
}

id sub_1007CCC50(uint64_t a1)
{
  uint64_t v2 = objc_opt_new();
  int v3 = *(void **)(a1 + 728);
  if (v3 != (void *)(a1 + 736))
  {
    do
    {
      id v4 = v3 + 4;
      if (*((char *)v3 + 55) < 0) {
        id v4 = (void *)*v4;
      }
      [v2 addObject:[-[CLClientKeyPath legacyClientKey](+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)), "legacyClientKey"]];
      id v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          id v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          int v3 = v6;
        }
        while (!v7);
      }
      int v3 = v6;
    }
    while (v6 != (void *)(a1 + 736));
  }

  return v2;
}

void sub_1007CCDF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1007CCE0C(uint64_t a1, std::string *this)
{
  uint64_t v2 = *(void *)(a1 + 768);
  if (v2)
  {
    std::string::operator=(this, (const std::string *)(*(void *)(a1 + 752) + 32));
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v5 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "retrieved empty non-system location client key", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        BOOL v7 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLClientManager::getNonSystemLocationClientKey(std::string &)", "%s\n", v7);
        if (v7 != (char *)buf) {
          free(v7);
        }
      }
    }
  }
  return v2 != 0;
}

void sub_1007CD0D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CD1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CD2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CD2FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, int a8, double a9, double a10, double a11, unsigned __int8 a12, uint64_t a13)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  double v23 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v24 = a2;
    }
    else {
      uint64_t v24 = *(void *)a2;
    }
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v25 = a3;
    }
    else {
      uint64_t v25 = *(void *)a3;
    }
    *(_DWORD *)uint64_t buf = 68291331;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v67 = 2082;
    uint8_t v68 = "";
    __int16 v69 = 2082;
    uint64_t v70 = v24;
    __int16 v71 = 2050;
    uint64_t v72 = a4;
    __int16 v73 = 2082;
    uint64_t v74 = v25;
    __int16 v75 = 2049;
    double v76 = a9;
    __int16 v77 = 2049;
    double v78 = a10;
    __int16 v79 = 2050;
    double v80 = a11;
    __int16 v81 = 2050;
    uint64_t v82 = a5;
    __int16 v83 = 2050;
    uint64_t v84 = a6;
    __int16 v85 = 2050;
    uint64_t v86 = a7;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Registration for InterestZone #pla\", \"clientKey\":%{public, location:escape_only}s, \"type\":%{public, location:CLClientInterestZoneType}lld, \"zoneIdentifier\":%{public, location:escape_only}s, \"lat\":\"%{private}7f\", \"lon\":\"%{private}7f\", \"radius\":\"%{public}.3f\", \"PhenolicLocation\":%{public, location:CLClientPhenolicLocation}lld, \"ServiceMaskOperator\":%{public, location:CLClientInterestZoneServiceMaskOperator}lld, \"ProvenanceType\":%{public, location:CLClientInterestZoneProvenanceType}lld}", buf, 0x6Cu);
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v26 = a2;
  }
  else {
    uint64_t v26 = *(void *)a2;
  }
  id v27 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v26))];
  if (([v27 isValidCKP] | a12))
  {
    if (([v27 isValidCKP] & 1) == 0)
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v28 = a2;
      }
      else {
        uint64_t v28 = *(void *)a2;
      }
      id v29 = [[*(id *)(a1 + 136) registerClient:fromAuthSync:[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v28))];
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v30 = a3;
      }
      else {
        uint64_t v30 = *(void *)a3;
      }
      id v27 = [[*(id *)(a1 + 136) registerSubIdentity:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30) withType:122 forAnchorKeyPath:v29];
    }
    if (a4 == 2)
    {
      [*(id *)(a1 + 136) setInt:a5 forKey:@"PhenolicLocation" atKeyPath:v27];
    }
    else
    {
      if (a4 != 1)
      {
        NSErrorUserInfoKey v60 = NSLocalizedDescriptionKey;
        CFStringRef v61 = @"AuthZone registration failed. Invalid ZoneType.";
        uint64_t v43 = +[NSDictionary dictionaryWithObjects:&v61 forKeys:&v60 count:1];
        (*(void (**)(uint64_t, NSError *))(a13 + 16))(a13, +[NSError errorWithDomain:kCLErrorDomainPrivate code:5 userInfo:v43]);
        return;
      }
      if (a11 >= 50.0)
      {
        if (a11 > 1000.0)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          char v44 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(a2 + 23) >= 0) {
              uint64_t v45 = a2;
            }
            else {
              uint64_t v45 = *(void *)a2;
            }
            if (*(char *)(a3 + 23) >= 0) {
              uint64_t v46 = a3;
            }
            else {
              uint64_t v46 = *(void *)a3;
            }
            *(_DWORD *)uint64_t buf = 68289794;
            *(_DWORD *)&uint8_t buf[4] = 0;
            __int16 v67 = 2082;
            uint8_t v68 = "";
            __int16 v69 = 2082;
            uint64_t v70 = v45;
            __int16 v71 = 2082;
            uint64_t v72 = v46;
            __int16 v73 = 2050;
            uint64_t v74 = 0x408F400000000000;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Zone radius too large. Updated to max threshold\", \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s, \"MaxRadiusThreshold\":\"%{public}.3f\"}", buf, 0x30u);
          }
          a11 = 1000.0;
        }
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        long long v31 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v32 = a2;
          }
          else {
            uint64_t v32 = *(void *)a2;
          }
          if (*(char *)(a3 + 23) >= 0) {
            uint64_t v33 = a3;
          }
          else {
            uint64_t v33 = *(void *)a3;
          }
          *(_DWORD *)uint64_t buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v67 = 2082;
          uint8_t v68 = "";
          __int16 v69 = 2082;
          uint64_t v70 = v32;
          __int16 v71 = 2082;
          uint64_t v72 = v33;
          __int16 v73 = 2050;
          uint64_t v74 = 0x4049000000000000;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Zone radius too small. Updated to min threshold\", \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s, \"MinRadiusThreshold\":\"%{public}.3f\"}", buf, 0x30u);
        }
        a11 = 50.0;
      }
      if (!sub_1000EF68C(a9, a10))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        __int16 v50 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
        {
          id v51 = [@"Registration : Invalid lat/lon." UTF8String];
          uint64_t v52 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
          uint64_t v53 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
          *(_DWORD *)uint64_t buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v67 = 2082;
          uint8_t v68 = "";
          __int16 v69 = 2082;
          uint64_t v70 = (uint64_t)v51;
          __int16 v71 = 2082;
          uint64_t v72 = v52;
          __int16 v73 = 2082;
          uint64_t v74 = v53;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        unsigned int v54 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          id v55 = [@"Registration : Invalid lat/lon." UTF8String];
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v56 = a2;
          }
          else {
            uint64_t v56 = *(void *)a2;
          }
          if (*(char *)(a3 + 23) >= 0) {
            uint64_t v57 = a3;
          }
          else {
            uint64_t v57 = *(void *)a3;
          }
          *(_DWORD *)uint64_t buf = 68289794;
          *(_DWORD *)&uint8_t buf[4] = 0;
          __int16 v67 = 2082;
          uint8_t v68 = "";
          __int16 v69 = 2082;
          uint64_t v70 = (uint64_t)v55;
          __int16 v71 = 2082;
          uint64_t v72 = v56;
          __int16 v73 = 2082;
          uint64_t v74 = v57;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AuthZone operation failed.", "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
        }
        if (a13)
        {
          NSErrorUserInfoKey v62 = NSLocalizedDescriptionKey;
          CFStringRef v63 = @"Registration : Invalid lat/lon.";
          uint64_t v58 = +[NSDictionary dictionaryWithObjects:&v63 forKeys:&v62 count:1];
          (*(void (**)(uint64_t, NSError *))(a13 + 16))(a13, +[NSError errorWithDomain:kCLErrorDomainPrivate code:5 userInfo:v58]);
        }
        return;
      }
      [*(id *)(a1 + 136) setDouble:@"Latitude" forKey:v27 atKeyPath:a9];
      [*(id *)(a1 + 136) setDouble:@"Longitude" forKey:v27 atKeyPath:a10];
      [*(id *)(a1 + 136) setDouble:@"Radius" forKey:v27 atKeyPath:a11];
    }
    [*(id *)(a1 + 136) setInt:a4 forKey:@"Type" atKeyPath:v27];
    [*(id *)(a1 + 136) setInt:a6 forKey:@"ServiceMaskOperator" atKeyPath:v27];
    [*(id *)(a1 + 136) setInt:a7 forKey:@"Provenance" atKeyPath:v27];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v47 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v48 = a2;
      }
      else {
        uint64_t v48 = *(void *)a2;
      }
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v49 = a3;
      }
      else {
        uint64_t v49 = *(void *)a3;
      }
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v67 = 2082;
      uint8_t v68 = "";
      __int16 v69 = 2082;
      uint64_t v70 = v48;
      __int16 v71 = 2082;
      uint64_t v72 = v49;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"InterestZone registered\", \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    if (a8
      && (sub_100134750(buf, "ZoneRegistration"), sub_1007C9DC8(a1, (uint64_t *)a2, (uint64_t *)buf), SBYTE3(v70) < 0))
    {
      operator delete(*(void **)buf);
      if (!a13) {
        return;
      }
    }
    else if (!a13)
    {
      return;
    }
    (*(void (**)(uint64_t, void))(a13 + 16))(a13, 0);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v34 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      id v35 = [@"Registration : Zone already exists and overriding is not allowed." UTF8String];
      uint64_t v36 = *(char *)(a2 + 23) >= 0 ? a2 : *(void *)a2;
      uint64_t v37 = *(char *)(a3 + 23) >= 0 ? a3 : *(void *)a3;
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v67 = 2082;
      uint8_t v68 = "";
      __int16 v69 = 2082;
      uint64_t v70 = (uint64_t)v35;
      __int16 v71 = 2082;
      uint64_t v72 = v36;
      __int16 v73 = 2082;
      uint64_t v74 = v37;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    __int16 v38 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      id v39 = [@"Registration : Zone already exists and overriding is not allowed." UTF8String];
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v40 = a2;
      }
      else {
        uint64_t v40 = *(void *)a2;
      }
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v41 = a3;
      }
      else {
        uint64_t v41 = *(void *)a3;
      }
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v67 = 2082;
      uint8_t v68 = "";
      __int16 v69 = 2082;
      uint64_t v70 = (uint64_t)v39;
      __int16 v71 = 2082;
      uint64_t v72 = v40;
      __int16 v73 = 2082;
      uint64_t v74 = v41;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AuthZone operation failed.", "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    if (a13)
    {
      NSErrorUserInfoKey v64 = NSLocalizedDescriptionKey;
      CFStringRef v65 = @"Registration : Zone already exists and overriding is not allowed.";
      uint64_t v42 = +[NSDictionary dictionaryWithObjects:&v65 forKeys:&v64 count:1];
      (*(void (**)(uint64_t, NSError *))(a13 + 16))(a13, +[NSError errorWithDomain:kCLErrorDomainPrivate code:5 userInfo:v42]);
    }
  }
}

void sub_1007CDDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CDEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CDFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CDFF0(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  uint64_t v10 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0) {
      long long v11 = a2;
    }
    else {
      long long v11 = *(char **)a2;
    }
    if (a3[23] >= 0) {
      int v12 = a3;
    }
    else {
      int v12 = *(char **)a3;
    }
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v30 = 2082;
    long long v31 = "";
    __int16 v32 = 2082;
    uint64_t v33 = v11;
    __int16 v34 = 2082;
    id v35 = v12;
    __int16 v36 = 1026;
    LODWORD(v37) = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"SetRelevanceForInterestZone\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdentifier\":%{public, location:escape_only}s, \"isRelevant\":%{public}hhd}", buf, 0x2Cu);
  }
  if (a2[23] >= 0) {
    id v13 = a2;
  }
  else {
    id v13 = *(char **)a2;
  }
  id v14 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13))];
  if ([v14 isValidCKP])
  {
    if (a3[23] >= 0) {
      id v15 = (uint64_t *)a3;
    }
    else {
      id v15 = *(uint64_t **)a3;
    }
    id v16 = [v14 clientKeyPathWithReplacementSubIdentityId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v15) subIdentityType:122];
    [*(id *)(a1 + 136) setBool:a4 forKey:@"Relevant" atKeyPath:v16];
    sub_100134750(buf, "");
    sub_1001341F0(a1, v16, (uint64_t)buf);
    if (SBYTE3(v33) < 0)
    {
      operator delete(*(void **)buf);
      if (!a5) {
        return;
      }
    }
    else if (!a5)
    {
      return;
    }
    uint64_t v26 = 0;
LABEL_44:
    (*(void (**)(uint64_t, NSError *))(a5 + 16))(a5, v26);
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  double v17 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
  {
    __int16 v18 = (char *)[@"setRelevance : Zone not found." UTF8String];
    uint64_t v19 = a2[23] >= 0 ? a2 : *(char **)a2;
    uint64_t v20 = a3[23] >= 0 ? (uint64_t *)a3 : *(uint64_t **)a3;
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v30 = 2082;
    long long v31 = "";
    __int16 v32 = 2082;
    uint64_t v33 = v18;
    __int16 v34 = 2082;
    id v35 = v19;
    __int16 v36 = 2082;
    uint64_t v37 = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  int v21 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    id v22 = (char *)[@"setRelevance : Zone not found." UTF8String];
    if (a2[23] >= 0) {
      double v23 = a2;
    }
    else {
      double v23 = *(char **)a2;
    }
    if (a3[23] >= 0) {
      uint64_t v24 = a3;
    }
    else {
      uint64_t v24 = *(char **)a3;
    }
    *(_DWORD *)uint64_t buf = 68289794;
    *(_DWORD *)&uint8_t buf[4] = 0;
    __int16 v30 = 2082;
    long long v31 = "";
    __int16 v32 = 2082;
    uint64_t v33 = v22;
    __int16 v34 = 2082;
    id v35 = v23;
    __int16 v36 = 2082;
    uint64_t v37 = (uint64_t *)v24;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AuthZone operation failed.", "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
  }
  if (a5)
  {
    NSErrorUserInfoKey v27 = NSLocalizedDescriptionKey;
    CFStringRef v28 = @"setRelevance : Zone not found.";
    uint64_t v25 = +[NSDictionary dictionaryWithObjects:&v28 forKeys:&v27 count:1];
    uint64_t v26 = +[NSError errorWithDomain:kCLErrorDomainPrivate code:5 userInfo:v25];
    goto LABEL_44;
  }
}

void sub_1007CE410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CE4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CE5A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CE5D8(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  id v8 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
  {
    if (a2[23] >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(char **)a2;
    }
    if (a3[23] >= 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = *(char **)a3;
    }
    *(_DWORD *)uint64_t buf = 68289538;
    int v34 = 0;
    __int16 v35 = 2082;
    __int16 v36 = "";
    __int16 v37 = 2082;
    __int16 v38 = v9;
    __int16 v39 = 2082;
    uint64_t v40 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Delete InterestZone\", \"clientKey\":%{public, location:escape_only}s, \"zoneIdentifier\":%{public, location:escape_only}s}", buf, 0x26u);
  }
  if (a2[23] >= 0) {
    long long v11 = a2;
  }
  else {
    long long v11 = *(char **)a2;
  }
  id v12 = [[*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:+[CLClientKeyPath clientKeyPathWithLegacyClientKey:](CLClientKeyPath, "clientKeyPathWithLegacyClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11))];
  if ([v12 isValidCKP])
  {
    if (a3[23] >= 0) {
      id v13 = (uint64_t *)a3;
    }
    else {
      id v13 = *(uint64_t **)a3;
    }
    id v14 = [v12 clientKeyPathWithReplacementSubIdentityId:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v13) subIdentityType:122];
    sub_100134750(__p, "ClientRemoved");
    sub_1007A9D70(a1, v14, 1, (uint64_t *)__p);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    id v15 = *(void **)(a1 + 352);
    if (a2[23] >= 0) {
      id v16 = a2;
    }
    else {
      id v16 = *(char **)a2;
    }
    double v17 = +[NSString stringWithUTF8String:v16];
    if (a3[23] >= 0) {
      __int16 v18 = (uint64_t *)a3;
    }
    else {
      __int16 v18 = *(uint64_t **)a3;
    }
    [v15 stopCircularZoneMonitoringForClient:v17 withZoneId:[NSString stringWithUTF8String:v18]];
    if (a4)
    {
      uint64_t v19 = 0;
LABEL_49:
      (*(void (**)(uint64_t, NSError *))(a4 + 16))(a4, v19);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      int v21 = (char *)[@"deleteZone : Zone not found." UTF8String];
      id v22 = a2[23] >= 0 ? a2 : *(char **)a2;
      double v23 = a3[23] >= 0 ? (uint64_t *)a3 : *(uint64_t **)a3;
      *(_DWORD *)uint64_t buf = 68289794;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2082;
      __int16 v38 = v21;
      __int16 v39 = 2082;
      uint64_t v40 = v22;
      __int16 v41 = 2082;
      uint64_t v42 = v23;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v24 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v25 = (char *)[@"deleteZone : Zone not found." UTF8String];
      if (a2[23] >= 0) {
        uint64_t v26 = a2;
      }
      else {
        uint64_t v26 = *(char **)a2;
      }
      if (a3[23] >= 0) {
        NSErrorUserInfoKey v27 = a3;
      }
      else {
        NSErrorUserInfoKey v27 = *(char **)a3;
      }
      *(_DWORD *)uint64_t buf = 68289794;
      int v34 = 0;
      __int16 v35 = 2082;
      __int16 v36 = "";
      __int16 v37 = 2082;
      __int16 v38 = v25;
      __int16 v39 = 2082;
      uint64_t v40 = v26;
      __int16 v41 = 2082;
      uint64_t v42 = (uint64_t *)v27;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v24, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "AuthZone operation failed.", "{\"msg%{public}.0s\":\"AuthZone operation failed.\", \"Error\":%{public, location:escape_only}s, \"ClientKey\":%{public, location:escape_only}s, \"ZoneIdentifier\":%{public, location:escape_only}s}", buf, 0x30u);
    }
    if (a4)
    {
      NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
      CFStringRef v32 = @"deleteZone : Zone not found.";
      CFStringRef v28 = +[NSDictionary dictionaryWithObjects:&v32 forKeys:&v31 count:1];
      uint64_t v19 = +[NSError errorWithDomain:kCLErrorDomainPrivate code:5 userInfo:v28];
      goto LABEL_49;
    }
  }
}

void sub_1007CEA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CEB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CEC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1007CEC70(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if (![v3 isValidCKP]) {
    return 0;
  }
  if (v3)
  {
    [v3 cppClientKey];
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v7 = 0;
  }
  BOOL v4 = a1 + 760 != sub_10012FFE0(a1 + 752, (const void **)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1007CED0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CEE00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100286A7C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CEEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007CEF0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if (([v5 isValidCKP] & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(void *)uint64_t buf = 68289026;
      __int16 v43 = 2082;
      char v44 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient: unknown client\"}", buf, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v18 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(void *)uint64_t buf = 68289026;
      __int16 v43 = 2082;
      char v44 = "";
      id v14 = "#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient: unknown client";
      id v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient: unknown client\"}";
      id v16 = v18;
      uint32_t v19 = 18;
LABEL_31:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v14, v15, buf, v19);
      return;
    }
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(void *)uint64_t buf = 68289282;
    __int16 v43 = 2082;
    char v44 = "";
    __int16 v45 = 2114;
    *(void *)uint64_t v46 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  id v41 = 0;
  if (!a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v20 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(void *)uint64_t buf = 68289282;
      __int16 v43 = 2082;
      char v44 = "";
      __int16 v45 = 2114;
      *(void *)uint64_t v46 = v5;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient may not take nil data\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v21 = qword_102419538;
    if (!os_signpost_enabled((os_log_t)qword_102419538)) {
      return;
    }
    *(void *)uint64_t buf = 68289282;
    __int16 v43 = 2082;
    char v44 = "";
    __int16 v45 = 2114;
    *(void *)uint64_t v46 = v5;
    id v14 = "#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient may not take nil data";
    id v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient may not take nil data\", \""
          "Client\":%{public, location:escape_only}@}";
    goto LABEL_29;
  }
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  id v9 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v7, v8, objc_opt_class(), 0), a3, &v41);
  if (!v41)
  {
    id v22 = v9;
    id v23 = [[objc_msgSend(v9, "objectsForKeys:notFoundMarker:", &off_102397B00, +[NSNull null](NSNull, "null")) count];
    if (v23 != [&off_102397B00 count])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v29 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        id v30 = [&off_102397B00 count];
        *(void *)uint64_t buf = 68289538;
        __int16 v43 = 2082;
        char v44 = "";
        __int16 v45 = 2050;
        *(void *)uint64_t v46 = v30;
        *(_WORD *)&v46[8] = 2050;
        uint64_t v47 = (uint64_t)v23;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth missing one or more keys from decoded dict\", \"target\":%{public}lu, \"found\":%{public}lu}", buf, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      uint64_t v28 = qword_102419538;
      if (!os_signpost_enabled((os_log_t)qword_102419538)) {
        return;
      }
      id v31 = [&off_102397B00 count];
      *(void *)uint64_t buf = 68289538;
      __int16 v43 = 2082;
      char v44 = "";
      __int16 v45 = 2050;
      *(void *)uint64_t v46 = v31;
      *(_WORD *)&v46[8] = 2050;
      uint64_t v47 = (uint64_t)v23;
      id v14 = "#TemporaryAuth missing one or more keys from decoded dict";
      id v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth missing one or more keys from decoded dict\", \"target\":%{public}lu, "
            "\"found\":%{public}lu}";
LABEL_50:
      id v16 = v28;
      uint32_t v19 = 38;
      goto LABEL_31;
    }
    if ([v22 valueForKey:@"TransientInfoPayloadTimestamp"])
    {
      [objc_msgSend(v22, "valueForKey:", @"TransientInfoPayloadTimestamp") doubleValue];
      double v25 = v24;
      double Current = CFAbsoluteTimeGetCurrent();
      if (vabdd_f64(Current, v25) <= 10.0)
      {
        int v33 = [[v22 valueForKey:@"TransientInfoPayloadHasWIU"] boolValue];
        int v34 = [[v22 valueForKey:@"TransientInfoPayloadHasPrecise"] boolValue];
        unsigned int v35 = [[v22 valueForKey:@"TransientInfoPayloadInUseness"] intValue];
        sub_1007AECF8(*(void **)(a1 + 136), (uint64_t)v5, 2, v34);
        sub_1007AECF8(*(void **)(a1 + 136), (uint64_t)v5, 1, v33);
        [*(id *)(a1 + 136) persist];
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        __int16 v36 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
        {
          *(void *)uint64_t buf = 68289794;
          __int16 v43 = 2082;
          char v44 = "";
          __int16 v45 = 1026;
          *(_DWORD *)uint64_t v46 = v34;
          *(_WORD *)&v46[4] = 1026;
          *(_DWORD *)&void v46[6] = v35;
          LOWORD(v47) = 1026;
          *(_DWORD *)((char *)&v47 + 2) = v33;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient\", \"hasPrecise\":%{public}hhd, \"inUseInt\":%{public}d, \"hasWIU\":%{public}hhd}", buf, 0x24u);
        }
        int v37 = sub_10151FBFC(v35);
        if (v37)
        {
          [v5 legacyClientKey];
          __int16 v38 = *(void **)(a1 + 376);
          if (v5) {
            [v5 cppClientKey];
          }
          else {
            memset(v40, 0, sizeof(v40));
          }
          sub_100134750(v39, "setTemporaryAuthorizationStatusInfoForClient");
          sub_100C63C34(v38, (uint64_t)v40, (uint64_t)v39, v37, 1, (uint64_t *)buf);
          sub_1007DE9BC();
        }
        if ((v33 | v34) == 1)
        {
          sub_100134750(buf, "");
          sub_1001341F0(a1, v5, (uint64_t)buf);
          if ((v46[3] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        return;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      NSErrorUserInfoKey v27 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(void *)uint64_t buf = 68289538;
        __int16 v43 = 2082;
        char v44 = "";
        __int16 v45 = 2050;
        *(void *)uint64_t v46 = (uint64_t)Current;
        *(_WORD *)&v46[8] = 2050;
        uint64_t v47 = (uint64_t)v25;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient stale info received\", \"tNow\":%{public}ld, \"sentTime\":%{public}ld}", buf, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      uint64_t v28 = qword_102419538;
      if (!os_signpost_enabled((os_log_t)qword_102419538)) {
        return;
      }
      *(void *)uint64_t buf = 68289538;
      __int16 v43 = 2082;
      char v44 = "";
      __int16 v45 = 2050;
      *(void *)uint64_t v46 = (uint64_t)Current;
      *(_WORD *)&v46[8] = 2050;
      uint64_t v47 = (uint64_t)v25;
      id v14 = "#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient stale info received";
      id v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient stale info received\", \""
            "tNow\":%{public}ld, \"sentTime\":%{public}ld}";
      goto LABEL_50;
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    CFStringRef v32 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(void *)uint64_t buf = 68289282;
      __int16 v43 = 2082;
      char v44 = "";
      __int16 v45 = 2114;
      *(void *)uint64_t v46 = v5;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient failed to find a timestamp in the packaged data. Ignoring the packet\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v21 = qword_102419538;
    if (!os_signpost_enabled((os_log_t)qword_102419538)) {
      return;
    }
    *(void *)uint64_t buf = 68289282;
    __int16 v43 = 2082;
    char v44 = "";
    __int16 v45 = 2114;
    *(void *)uint64_t v46 = v5;
    id v14 = "#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient failed to find a timestamp in the packaged data. I"
          "gnoring the packet";
    id v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient failed to find a timestamp "
          "in the packaged data. Ignoring the packet\", \"Client\":%{public, location:escape_only}@}";
LABEL_29:
    id v16 = v21;
    goto LABEL_30;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
  {
    id v11 = [[objc_msgSend(v41, "description") UTF8String];
    *(void *)uint64_t buf = 68289282;
    __int16 v43 = 2082;
    char v44 = "";
    __int16 v45 = 2082;
    *(void *)uint64_t v46 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth encountered error while decoding\", \"error\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  uint64_t v12 = qword_102419538;
  if (os_signpost_enabled((os_log_t)qword_102419538))
  {
    id v13 = [[objc_msgSend(v41, "description") UTF8String];
    *(void *)uint64_t buf = 68289282;
    __int16 v43 = 2082;
    char v44 = "";
    __int16 v45 = 2082;
    *(void *)uint64_t v46 = v13;
    id v14 = "#TemporaryAuth encountered error while decoding";
    id v15 = "{\"msg%{public}.0s\":\"#TemporaryAuth encountered error while decoding\", \"error\":%{public, location:escape_only}s}";
    id v16 = v12;
LABEL_30:
    uint32_t v19 = 28;
    goto LABEL_31;
  }
}

void sub_1007CFCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,char a52)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007CFE54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

NSData *sub_1007CFE68(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v3 isValidCKP])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      int v23 = 0;
      __int16 v24 = 2082;
      double v25 = "";
      __int16 v26 = 2114;
      uint64_t v27 = (uint64_t)v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    unsigned int v5 = [*(id *)(a1 + 136) intForKey:@"TemporaryAuthorization" atKeyPath:v3 defaultValue:0];
    int v21 = sub_10012276C(*(void *)(a1 + 376), v3);
    char v6 = v5;
    int v7 = v5 & 1;
    uint64_t v8 = sub_10151FBB0(&v21);
    double Current = CFAbsoluteTimeGetCurrent();
    v34[0] = @"TransientInfoPayloadTimestamp";
    v35[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
    v34[1] = @"TransientInfoPayloadInUseness";
    v35[1] = +[NSNumber numberWithInt:v8];
    std::string v34[2] = @"TransientInfoPayloadHasPrecise";
    v35[2] = +[NSNumber numberWithBool:((unint64_t)v5 >> 1) & 1];
    v34[3] = @"TransientInfoPayloadHasWIU";
    v35[3] = +[NSNumber numberWithBool:v5 & 1];
    uint64_t v10 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:4];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68290050;
      __int16 v24 = 2082;
      int v23 = 0;
      double v25 = "";
      __int16 v26 = 2050;
      uint64_t v27 = (uint64_t)Current;
      __int16 v28 = 1026;
      int v29 = v8;
      __int16 v30 = 1026;
      int v31 = v7;
      __int16 v32 = 1026;
      int v33 = (unint64_t)(v6 & 2) >> 1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient\", \"tNow\":%{public}ld, \"inUse\":%{public}d, \"hasTempWIU\":%{public}hhd, \"hasTempPrecise\":%{public}hhd}", buf, 0x2Eu);
    }
    id v20 = 0;
    uint64_t v12 = +[NSKeyedArchiver archivedDataWithRootObject:v10 requiringSecureCoding:1 error:&v20];
    if (v20)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v13 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        id v14 = [[objc_msgSend(v20, "description") UTF8String];
        *(_DWORD *)uint64_t buf = 68289282;
        int v23 = 0;
        __int16 v24 = 2082;
        double v25 = "";
        __int16 v26 = 2082;
        uint64_t v27 = (uint64_t)v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth encountered error while converting\", \"error\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      id v15 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        id v16 = [[objc_msgSend(v20, "description") UTF8String];
        *(_DWORD *)uint64_t buf = 68289282;
        int v23 = 0;
        __int16 v24 = 2082;
        double v25 = "";
        __int16 v26 = 2082;
        uint64_t v27 = (uint64_t)v16;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#TemporaryAuth encountered error while converting", "{\"msg%{public}.0s\":\"#TemporaryAuth encountered error while converting\", \"error\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v23 = 0;
      __int16 v24 = 2082;
      double v25 = "";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient: unknown client\"}", buf, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v18 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v23 = 0;
      __int16 v24 = 2082;
      double v25 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient: unknown client", "{\"msg%{public}.0s\":\"#TemporaryAuth retrieveTemporaryAuthorizationStatusInfoForClient: unknown client\"}", buf, 0x12u);
    }
    return 0;
  }
  return v12;
}

void sub_1007D0464(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_1007D0478(uint64_t a1, void *a2, double a3)
{
  id v6 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v6 isValidCKP])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v7 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      *(void *)id v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#appclip setting for bundle ID %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v14 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "double CLClientManager::setOrChangeAppClipAuthorizationTime(CLClientKeyPath *, double)", "%s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    [*(id *)(a1 + 136) doubleForKey:@"AuthorizationRegisterTime" atKeyPath:v6 defaultValue:-1.0];
    if (v8 == -1.0) {
      TMGetKernelMonotonicClock();
    }
    double v9 = v8;
    [*(id *)(a1 + 136) setDouble:@"AuthorizationRegisterTime" forKey:v6 atKeyPath:v8 + a3];
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t buf = 68289794;
      *(_DWORD *)id v16 = 0;
      *(_WORD *)&v16[4] = 2082;
      *(void *)&void v16[6] = "";
      __int16 v17 = 2114;
      id v18 = v6;
      __int16 v19 = 2050;
      double v20 = v9;
      __int16 v21 = 2050;
      double v22 = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#appclip setOrChangeAppClipAuthorizationTime\", \"Client\":%{public, location:escape_only}@, \"registrationTime\":\"%{public}f\", \"delta\":\"%{public}f\"}", buf, 0x30u);
    }
    [*(id *)(a1 + 136) persist];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)id v16 = 0;
      *(_WORD *)&v16[4] = 2082;
      *(void *)&void v16[6] = "";
      __int16 v17 = 2114;
      id v18 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#appclip no such client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v12 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)id v16 = 0;
      *(_WORD *)&v16[4] = 2082;
      *(void *)&void v16[6] = "";
      __int16 v17 = 2114;
      id v18 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#appclip no such client", "{\"msg%{public}.0s\":\"#appclip no such client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  return -1.0;
}

id sub_1007D08A8(uint64_t a1, double a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  BOOL v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 68289026;
    int v23 = 0;
    __int16 v24 = 2082;
    double v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#appclip looking for authorizations to clear\"}", buf, 0x12u);
  }
  id v5 = +[NSMutableArray array];
  id v6 = *(void **)(a1 + 136);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1007DAEFC;
  v21[3] = &unk_1022C9538;
  *(double *)&void v21[6] = a2;
  v21[4] = v5;
  v21[5] = a1;
  [v6 iterateAllAnchorKeyPathsWithBlock:v21];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v7 = [v5 countByEnumeratingWithState:&v17 objects:v28 count:16];
  if (v7)
  {
    uint64_t v9 = *(void *)v18;
    *(void *)&long long v8 = 68289282;
    long long v14 = v8;
    do
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v5);
        }
        id v11 = *(void **)(*((void *)&v17 + 1) + 8 * (void)v10);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v12 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t buf = v14;
          int v23 = 0;
          __int16 v24 = 2082;
          double v25 = "";
          __int16 v26 = 2114;
          uint64_t v27 = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#appclip removing client because it expired\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        sub_100134750(__p, "ClientRemoved");
        sub_1007A9D70(a1, v11, 1, (uint64_t *)__p);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v10 = (char *)v10 + 1;
      }
      while (v7 != v10);
      id v7 = [v5 countByEnumeratingWithState:&v17 objects:v28 count:16];
    }
    while (v7);
  }
  return [*(id *)(a1 + 136) persist:v14];
}

void sub_1007D0B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D0C48(uint64_t a1, void *a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  BOOL v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 68289794;
    v5[1] = 0;
    __int16 v6 = 2082;
    id v7 = "";
    __int16 v8 = 2082;
    id v9 = [[[objc_msgSend(objc_msgSend(objc_msgSend(a2, "descriptor"), "platterTargetBundleIdentifier")) UTF8String];
    __int16 v10 = 2082;
    id v11 = [[[a2 identifier] UTF8String];
    __int16 v12 = 1026;
    unsigned int v13 = [a2 state];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#liveActivity content update received\", \"bundleId\":%{public, location:escape_only}s, \"activityIdentifier\":%{public, location:escape_only}s, \"state\":%{public}d}", (uint8_t *)v5, 0x2Cu);
  }
  sub_100C63F78(*(void **)(a1 + 376), +[CLClientKeyPath clientKeyPathWithClientAnchor:anchorType:](CLClientKeyPath, "clientKeyPathWithClientAnchor:anchorType:", [objc_msgSend(objc_msgSend(a2, "descriptor"), "platterTargetBundleIdentifier")], 105), [objc_msgSend(a2, "state") == 0]);
}

uint64_t sub_1007D0E88(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  *(void *)a1 = off_1022C9A28;
  *(void *)(a1 + 8) = [[CLNotifierClientAdapter alloc] initWithClient:a1];
  *(void *)(a1 + 24) = a5;
  *(void *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0) {
    __int16 v12 = a3;
  }
  else {
    __int16 v12 = (uint64_t *)*a3;
  }
  id v13 = [objc_msgSend(a4, "vendor") proxyForService:[NSString stringWithUTF8String:v12]];
  *(void *)(a1 + 16) = v13;
  id v14 = v13;
  if (a2) {
    [*(id *)(a1 + 16) setDelegateEntityName:a2];
  }
  [*(id *)(a1 + 16) registerDelegate:*(void *)(a1 + 8) inSilo:[a4 silo]];
  return a1;
}

void sub_1007D0F6C()
{
}

void sub_1007D0FC4()
{
}

void sub_1007D1074()
{
}

void sub_1007D1098()
{
}

void *sub_1007D10E0(void *a1, uint64_t a2)
{
  *a1 = a2;
  *(_OWORD *)(a1 + 1) = xmmword_101D2DAE0;
  BOOL v4 = a1 + 1;
  id v5 = a1 + 2;
  a1[3] = 0;
  if (a2 == 1)
  {
    uint64_t v8 = sub_1000A6958();
    if ((sub_1000A699C(v8, "lastBluetoothImproveAccuracyNotification", v4) & 1) == 0) {
      *BOOL v4 = 0xBFF0000000000000;
    }
    sub_1000C7F88(buf);
    char v7 = sub_1000A699C(*(uint64_t *)buf, "BluetoothImproveAccuracyNotificationInterval", v5);
  }
  else
  {
    if (a2) {
      goto LABEL_13;
    }
    uint64_t v6 = sub_1000A6958();
    if ((sub_1000A699C(v6, "lastWifiImproveAccuracyNotification", v4) & 1) == 0) {
      *BOOL v4 = 0xBFF0000000000000;
    }
    sub_1000C7F88(buf);
    char v7 = sub_1000A699C(*(uint64_t *)buf, "WifiImproveAccuracyNotificationInterval", v5);
  }
  char v9 = v7;
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if ((v9 & 1) == 0) {
    *id v5 = 0x4122750000000000;
  }
LABEL_13:
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    id v11 = "Unknown";
    if (a2 == 1) {
      id v11 = "Bluetooth";
    }
    if (a2) {
      __int16 v12 = (char *)v11;
    }
    else {
      __int16 v12 = "Wifi";
    }
    sub_100134750(__p, v12);
    if (v28 >= 0) {
      id v13 = __p;
    }
    else {
      id v13 = *(unsigned char **)__p;
    }
    uint64_t v14 = *v4;
    uint64_t v15 = *v5;
    *(_DWORD *)uint64_t buf = 136315650;
    *(void *)&uint8_t buf[4] = v13;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v14;
    __int16 v31 = 2048;
    uint64_t v32 = v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "last improve accuracy notification for %s, %f, retry interval, %f", buf, 0x20u);
    if (SHIBYTE(v28) < 0) {
      operator delete(*(void **)__p);
    }
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    long long v17 = "Unknown";
    if (a2 == 1) {
      long long v17 = "Bluetooth";
    }
    if (a2) {
      long long v18 = (char *)v17;
    }
    else {
      long long v18 = "Wifi";
    }
    sub_100134750(v23, v18);
    if (v24 >= 0) {
      long long v19 = v23;
    }
    else {
      long long v19 = (void **)v23[0];
    }
    uint64_t v20 = *v4;
    uint64_t v21 = *v5;
    *(_DWORD *)std::string __p = 136315650;
    *(void *)&__p[4] = v19;
    __int16 v26 = 2048;
    uint64_t v27 = v20;
    __int16 v28 = 2048;
    uint64_t v29 = v21;
    double v22 = (char *)_os_log_send_and_compose_impl();
    if (v24 < 0) {
      operator delete(v23[0]);
    }
    sub_1004BA5E4("Generic", 1, 0, 2, "CLClientManager::ImproveAccuracyNotification::ImproveAccuracyNotification(CLClientManagerTechnology)", "%s\n", v22);
    if (v22 != buf) {
      free(v22);
    }
  }
  return a1;
}

void sub_1007D145C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_1000DB0A0(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D1480(void *a1)
{
  if (a1[3])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v2 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      id v3 = "Unknown";
      if (*a1 == 1) {
        id v3 = "Bluetooth";
      }
      if (*a1) {
        BOOL v4 = (char *)v3;
      }
      else {
        BOOL v4 = "Wifi";
      }
      sub_100134750(__p, v4);
      if (v18 >= 0) {
        id v5 = __p;
      }
      else {
        id v5 = (void **)__p[0];
      }
      *(_DWORD *)uint64_t buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "clear %s improve accuracy notification", buf, 0xCu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v8 = "Unknown";
      if (*a1 == 1) {
        uint64_t v8 = "Bluetooth";
      }
      if (*a1) {
        char v9 = (char *)v8;
      }
      else {
        char v9 = "Wifi";
      }
      sub_100134750(buf, v9);
      if (v14 >= 0) {
        __int16 v10 = buf;
      }
      else {
        __int16 v10 = *(unsigned char **)buf;
      }
      int v15 = 136315138;
      char v16 = v10;
      id v11 = (char *)_os_log_send_and_compose_impl();
      if (v14 < 0) {
        operator delete(*(void **)buf);
      }
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::ImproveAccuracyNotification::clear()", "%s\n", v11);
      if (v11 != (char *)__p) {
        free(v11);
      }
    }
    uint64_t v6 = a1[3];
    a1[3] = 0;
    char v7 = (__CFRunLoop *)sub_1001C2710();
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007D1884;
    block[3] = &unk_1022A3020;
    block[4] = v6;
    CFRunLoopPerformBlock(v7, kCFRunLoopCommonModes, block);
  }
}

void sub_1007D1754(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  uint64_t v2 = (__CFRunLoop *)sub_1001C2710();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007D17E0;
  block[3] = &unk_1022A3020;
  block[4] = v1;
  CFRunLoopPerformBlock(v2, kCFRunLoopCommonModes, block);
}

void sub_1007D17E0(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t sub_1007D17F0(double *a1, double a2)
{
  double v2 = *a1;
  a1[1] = a2;
  id v3 = a1 + 1;
  if (v2 == 0.0)
  {
    BOOL v4 = "lastWifiImproveAccuracyNotification";
  }
  else
  {
    if (*(void *)&v2 != 1) {
      goto LABEL_6;
    }
    BOOL v4 = "lastBluetoothImproveAccuracyNotification";
  }
  uint64_t v5 = sub_1000A6958();
  sub_10016332C(v5, v4, v3);
LABEL_6:
  uint64_t v6 = *(uint64_t (**)(void))(*(void *)sub_1000A6958() + 944);

  return v6();
}

void sub_1007D1884(uint64_t a1)
{
  double v2 = *(__CFUserNotification **)(a1 + 32);
  if (v2)
  {
    CFUserNotificationCancel(v2);
    id v3 = *(const void **)(a1 + 32);
    CFRelease(v3);
  }
}

void sub_1007D18D0(uint64_t a1, void *a2)
{
  BOOL v4 = (void *)sub_1007D44A4(a1, "CLClientManager", a2);
  *BOOL v4 = off_1022C9368;
  v4[14] = &off_1022C9450;
  *(void *)(a1 + 120) = -[CLClientManagerStateTracker initInSilo:withIdentifier:state:]([CLClientManagerStateTracker alloc], "initInSilo:withIdentifier:state:", [a2 silo], a1, &stru_1022C9488);
  id v5 = [objc_alloc((Class)CLSettingsMirror) initInUniverse:*(void *)(a1 + 32)];
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 128) = v5;
  *(void *)(a1 + 240) = 0x40F5180000000000;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_WORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(unsigned char *)(a1 + 280) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(CLLocationCoordinate2D *)(a1 + 320) = kCLLocationCoordinate2DInvalid;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 360) = objc_opt_new();
  *(void *)(a1 + 368) = 0;
  std::string __p = (void *)a1;
  sub_1007E511C(&__p, (void *)(a1 + 32), (void *)(a1 + 376));
  uint64_t v6 = objc_opt_new();
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = v6;
  id v7 = objc_alloc((Class)NSMapTable);
  uint64_t v8 = sub_101005C68();
  *(void *)(a1 + 416) = [v7 initWithKeyPointerFunctions:v8 valuePointerFunctions:sub_101005D1C() capacity:10];
  *(void *)(a1 + 432) = objc_alloc_init((Class)NSMutableDictionary);
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_DWORD *)(a1 + 472) = 1065353216;
  *(void *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 536) = 1065353216;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(unsigned char *)(a1 + 568) = 0;
  *(void *)(a1 + 592) = a1 + 600;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_DWORD *)(a1 + 648) = 1065353216;
  *(void *)(a1 + 656) = 0x403E000000000000;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(void *)(a1 + 680) = a1 + 688;
  *(void *)(a1 + 712) = 0;
  *(void *)(a1 + 720) = 0;
  *(void *)(a1 + 704) = a1 + 712;
  *(void *)(a1 + 736) = 0;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 728) = a1 + 736;
  *(void *)(a1 + 760) = 0;
  *(void *)(a1 + 768) = 0;
  *(void *)(a1 + 752) = a1 + 760;
  *(void *)(a1 + 784) = 0;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 776) = a1 + 784;
  *(unsigned char *)(a1 + 800) = sub_1004BE040();
  *(void *)(a1 + 832) = 0;
  *(void *)(a1 + 824) = 0;
  *(void *)(a1 + 816) = a1 + 824;
  *(void *)(a1 + 856) = 0;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 840) = a1 + 848;
  *(void *)(a1 + 880) = 0;
  *(void *)(a1 + 872) = 0;
  *(void *)(a1 + 864) = a1 + 872;
  *(void *)(a1 + 904) = 0;
  *(void *)(a1 + 896) = 0;
  *(void *)(a1 + 888) = a1 + 896;
  *(void *)(a1 + 928) = 0;
  *(void *)(a1 + 920) = 0;
  *(void *)(a1 + 912) = a1 + 920;
  *(void *)(a1 + 936) = 0;
  *(_DWORD *)(a1 + 944) = 2;
  *(void *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_DWORD *)(a1 + 1008) = 1065353216;
  char v9 = operator new(0x40uLL);
  v9[1] = 0;
  _DWORD v9[2] = 0;
  void *v9 = off_1022C9B30;
  void v9[3] = off_1022C8CF0;
  v9[4] = a1;
  v9[7] = 0;
  void v9[6] = 0;
  v9[5] = v9 + 6;
  *(void *)(a1 + 1016) = v9 + 3;
  *(void *)(a1 + 1024) = v9;
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1048) = 0;
  *(void *)(a1 + 1040) = 0;
  *(void *)(a1 + 1054) = 0;
  *(unsigned char *)(a1 + 1062) = sub_100EC2788();
  *(void *)(a1 + 1064) = 0;
  *(void *)(a1 + 1072) = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLClientAuthorizationCache"];
  *(void *)(a1 + 1080) = objc_alloc_init((Class)NSMutableDictionary);
  *(void *)(a1 + 1088) = objc_alloc_init((Class)NSMutableArray);
  *(void *)(a1 + 1096) = objc_alloc_init((Class)NSMutableArray);
  *(unsigned char *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1112) = a1 + 1120;
  *(unsigned char *)(a1 + 1136) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_DWORD *)(a1 + 1160) = 0xFFFF;
  *(void *)(a1 + 1172) = 0;
  *(void *)(a1 + 1164) = 0;
  __asm { FMOV            V2.2D, #-1.0 }
  *(_OWORD *)(a1 + 1180) = xmmword_101D1C320;
  *(_OWORD *)(a1 + 1196) = _Q2;
  *(_OWORD *)(a1 + 1212) = _Q2;
  *(_OWORD *)(a1 + 1228) = _Q2;
  *(_DWORD *)(a1 + 1244) = 0;
  *(void *)(a1 + 1248) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1272) = 0;
  *(void *)(a1 + 1256) = 0;
  *(void *)(a1 + 1264) = 0;
  *(void *)(a1 + 1276) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 1284) = 0x7FFFFFFF;
  *(void *)(a1 + 1304) = 0;
  *(void *)(a1 + 1288) = 0;
  *(void *)(a1 + 1296) = 0;
  *(unsigned char *)(a1 + 1312) = 0;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(void *)(a1 + 1352) = 0;
  *(_DWORD *)(a1 + 1360) = 1065353216;
  *(void *)(a1 + 1480) = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLStatusBarIconManager"];
  *(_OWORD *)(a1 + 1488) = 0u;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_DWORD *)(a1 + 1520) = 1065353216;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(void *)(a1 + 1544) = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLCapabilityMonitor" forClient:@"CLClientManager"];
  *(void *)(a1 + 1552) = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLWifiTilesManager" forClient:@"CLClientManager"];
  *(void *)(a1 + 1560) = 0;
  *(unsigned char *)(a1 + 1568) = 0;
  BOOL v42 = 0;
  uint64_t v15 = sub_1000A6958();
  sub_1000D29FC(v15, @"kAuthorizationDecisionsNeedsMigration", &v42);
  sub_10053B99C(0, (std::string *)&__p);
  if (v48[15] >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  long long v17 = [+[NSString stringWithUTF8String:p_p] stringByAppendingPathComponent:@"clients.plist"];
  if ((v48[15] & 0x80000000) != 0) {
    operator delete(__p);
  }
  sub_1007C455C(a1, (uint64_t)v17, v42);
  if (v42) {
    sub_1007CB228(a1);
  }
  sub_1007B3ED8(a1);
  *(_OWORD *)(a1 + 1460) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_1007D458C;
  v41[3] = &unk_1022C94A8;
  int v41[4] = a1;
  [*(id *)(a1 + 128) setSettingsChangeHandler:v41];
  *(unsigned char *)(a1 + 232) = [*(id *)(a1 + 128) BOOLForKey:@"CLCM.AllowPromptRecording" defaultValue:*(unsigned __int8 *)(a1 + 232)];
  id v18 = [*(id *)(a1 + 40) newTimer];
  *(void *)(a1 + 256) = v18;
  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472;
  v40[2] = sub_1007D45C4;
  v40[3] = &unk_1022A3020;
  v40[4] = a1;
  [v18 setHandler:v40];
  sub_10053B99C(0, (std::string *)&__p);
  if (v48[15] >= 0) {
    long long v19 = &__p;
  }
  else {
    long long v19 = __p;
  }
  uint64_t v20 = +[NSString stringWithUTF8String:v19];
  if ((v48[15] & 0x80000000) != 0) {
    operator delete(__p);
  }
  uint64_t v21 = [[CLHRequestArchive alloc] initWithDirectory:[(NSString *)v20 stringByAppendingPathComponent:+[NSString stringWithUTF8String:"locationUtilityEventArchive"]] itemCountThresholdForAutoCleanUp:300];
  *(void *)(a1 + 552) = v21;
  [(CLHRequestArchive *)v21 setRotationInterval:86400.0];
  CFAbsoluteTime v22 = CFAbsoluteTimeGetCurrent() + -432000.0;
  [*(id *)(a1 + 552) pruneSecondaryDataOlderThan:v22];
  *(void *)(a1 + 560) = [[sub_1007AC460(a1, (uint64_t)objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", v22)) lastObject];
  sub_100103240();
  int v23 = (void *)(a1 + 400);
  if (sub_1001037EC())
  {
    *int v23 = objc_alloc_init((Class)STLocationStatusDomainPublisher);
    *(void *)(a1 + 408) = objc_alloc_init((Class)STBackgroundActivitiesStatusDomainPublisher);
    *(void *)(a1 + 424) = 1;
  }
  else
  {
    *int v23 = 0;
    *(void *)(a1 + 408) = 0;
  }
  id v24 = [*(id *)(a1 + 128) arrayForKey:@"ResetIdentifiers" defaultValue:0];
  int v25 = [*(id *)(a1 + 128) intForKey:@"ResetRetrialCount" defaultValue:0];
  if ([v24 count])
  {
    if (v25 > 1)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v28 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "ResetRetrialCount exhausted.", (uint8_t *)&__p, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        LOWORD(v43) = 0;
        __int16 v39 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)", "%s\n", v39);
        if (v39 != (char *)&__p) {
          free(v39);
        }
      }
      [*(id *)(a1 + 128) setInt:0 forKey:@"ResetRetrialCount"];
      [*(id *)(a1 + 128) setArray:0 forKey:@"ResetIdentifiers"];
    }
    else
    {
      uint64_t v26 = (v25 + 1);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v27 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        std::string __p = (void *)68289538;
        *(_WORD *)uint64_t v48 = 2082;
        *(void *)&v48[2] = "";
        *(_WORD *)&v48[10] = 2050;
        *(void *)&v48[12] = (int)v26;
        *(_WORD *)&v48[20] = 2114;
        *(void *)&v48[22] = v24;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Incomplete Reset, trying again\", \"ResetRetrialCount\":%{public}ld, \"Pending ResetIdentifiers\":%{public, location:escape_only}@}", (uint8_t *)&__p, 0x26u);
      }
      [*(id *)(a1 + 128) setInt:v26 forKey:@"ResetRetrialCount"];
      [*(id *)(a1 + 256) setNextFireDelay:115.0];
    }
  }
  sub_1007A5F08(a1);
  uint64_t v29 = *(void **)(a1 + 136);
  std::string __p = _NSConcreteStackBlock;
  *(void *)uint64_t v48 = 3221225472;
  *(void *)&v48[8] = sub_1007A6DAC;
  *(void *)&v48[16] = &unk_1022C8D28;
  *(void *)&v48[24] = a1;
  [v29 iterateAllAnchorKeyPathsWithBlock:&__p];
  __int16 v30 = *(void **)(a1 + 136);
  std::string __p = _NSConcreteStackBlock;
  *(void *)uint64_t v48 = 3221225472;
  *(void *)&v48[8] = sub_1007D8B1C;
  *(void *)&v48[16] = &unk_1022C8D28;
  *(void *)&v48[24] = a1;
  [v30 iterateAllAnchorKeyPathsWithBlock:&__p];
  [*(id *)(a1 + 136) persist];
  sub_100103240();
  if (sub_100106424() || (sub_100103240(), sub_10010145C()))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v31 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      LOWORD(__p) = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "#authsync initializing sync store", (uint8_t *)&__p, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v43) = 0;
      __int16 v38 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)", "%s\n", v38);
      if (v38 != (char *)&__p) {
        free(v38);
      }
    }
    [*(id *)(a1 + 32) vendor] proxyForService:@"CLAuthSyncManager"];
    *(void *)(a1 + 1528) = [objc_msgSend(*(id *)(a1 + 32), "vendor") proxyForService:@"CLUsageSyncManager"];
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v32 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    sub_100103240();
    int v33 = sub_10010145C();
    sub_100103240();
    BOOL v34 = sub_100106424();
    LODWORD(__p) = 67240448;
    HIDWORD(__p) = v33;
    *(_WORD *)uint64_t v48 = 1026;
    *(_DWORD *)&v48[2] = v34;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#authsync isWatch: %{public}d, isCompanion: %{public}d", (uint8_t *)&__p, 0xEu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    sub_100103240();
    int v35 = sub_10010145C();
    sub_100103240();
    BOOL v36 = sub_100106424();
    int v43 = 67240448;
    int v44 = v35;
    __int16 v45 = 1026;
    BOOL v46 = v36;
    int v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)", "%s\n", v37);
    if (v37 != (char *)&__p) {
      free(v37);
    }
  }
  sub_101389C2C();
}

void sub_1007D3EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char **a13, void **a14, void **a15, char **a16, void **a17, void **a18, char **a19, char **a20,char **a21,char **a22,char **a23,uint64_t a24,void **a25,uint64_t a26,uint64_t *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v36 = *(void *)(v33 + 1560);
  *(void *)(v33 + 1560) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  sub_1002220F0(v33 + 1488);
  sub_1002220F0(v33 + 1328);
  sub_1000DB264(v33 + 1112, *a13);
  STACK[0x2C0] = a29;
  sub_1007E5320((void ***)&STACK[0x2C0]);
  int v37 = *(std::__shared_weak_count **)(v33 + 1024);
  if (v37) {
    sub_1000DB0A0(v37);
  }
  sub_1007E52E4(v33 + 976);
  if (*(char *)(v33 + 975) < 0) {
    operator delete(*a11);
  }
  sub_1000F5BB0(v33 + 912, *a14);
  sub_1000F5BB0(v33 + 888, *a15);
  sub_1000DB264(v33 + 864, *a16);
  sub_1000F5BB0(v33 + 840, *a17);
  sub_1000F5BB0(v33 + 816, *a18);
  sub_1000DB264(a33, *a19);
  sub_1000DB264(v33 + 752, *a20);
  sub_1000DB264(v33 + 728, *a21);
  sub_1000DB264(v33 + 704, *a22);
  sub_1000DB264(v33 + 680, *a23);
  sub_1002220F0(a24);
  sub_1007E5288(a26, *a25);
  sub_1002220F0(a28);
  sub_1002220F0(a12);
  __int16 v38 = *(std::__shared_weak_count **)(v33 + 384);
  if (v38) {
    sub_1000DB0A0(v38);
  }
  sub_1007DB360((uint64_t *)(v34 + 136), 0);
  uint64_t v39 = *a27;
  *a27 = 0;
  if (v39) {
    sub_10068D784((uint64_t)a27, v39);
  }
  uint64_t v40 = *(void *)(v33 + 216);
  *(void *)(v33 + 216) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = *(void *)(v33 + 208);
  *(void *)(v33 + 208) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *(void *)(v33 + 200);
  *(void *)(v33 + 200) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = *(void *)(v33 + 192);
  *(void *)(v33 + 192) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = *(void *)(v33 + 184);
  *(void *)(v33 + 184) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = *(void *)(v33 + 176);
  *(void *)(v33 + 176) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = *(void *)(v33 + 168);
  *(void *)(v33 + 168) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = *(void *)(v33 + 160);
  *(void *)(v33 + 160) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  uint64_t v48 = *(void *)(v33 + 152);
  *(void *)(v33 + 152) = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  sub_1007D86F8(v33);
  _Unwind_Resume(a1);
}

uint64_t sub_1007D44A4(uint64_t a1, char *a2, void *a3)
{
  *(void *)a1 = off_1022C9A50;
  sub_100134750((void *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = [a3 silo];
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 108) = 0;
  return a1;
}

void sub_1007D4534(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D4550(id a1, CLClientManagerStateTracker *a2)
{
  uint64_t v3 = sub_1001198CC();

  [(CLClientManagerStateTracker *)a2 setLocationServicesEnabledStatus:v3];
}

id sub_1007D458C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id result = [*(id *)(v1 + 128) BOOLForKey:@"CLCM.AllowPromptRecording" defaultValue:*(unsigned __int8 *)(v1 + 232)];
  *(unsigned char *)(v1 + 232) = (_BYTE)result;
  return result;
}

void sub_1007D45C4(uint64_t a1)
{
}

void sub_1007D45CC(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  double v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ResetTimer fired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    LOWORD(v26) = 0;
    id v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onResetTimer()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  id v3 = [*(id *)(a1 + 128) arrayForKey:@"ResetIdentifiers" defaultValue:0];
  BOOL v4 = v3;
  if (*(unsigned char *)(a1 + 1104))
  {
    *(unsigned char *)(a1 + 1104) = 0;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 138412290;
      uint64_t v29 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Reset registration and completion reporting is un-balanced. Completion not reported for clients: %@", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v26 = 138412290;
      uint64_t v27 = v4;
      long long v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::onResetTimer()", "%s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    [*(id *)(a1 + 128) setArray:0 forKey:@"ResetIdentifiers"];
LABEL_13:
    [*(id *)(a1 + 128) setInt:0 forKey:@"ResetRetrialCount"];
    return;
  }
  if (![v3 count])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    char v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Reset registration and completion reporting is balanced for all clients.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v26) = 0;
      long long v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onResetTimer()", "%s\n", v17);
      if (v17 != (char *)buf) {
        free(v17);
      }
    }
    goto LABEL_13;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#reset-retry completing pending reset.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    LOWORD(v26) = 0;
    uint64_t v20 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::onResetTimer()", "%s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
  id v7 = sub_1007DA1DC(a1);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v8 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v22;
    do
    {
      id v11 = 0;
      do
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v4);
        }
        __int16 v12 = *(void **)(*((void *)&v21 + 1) + 8 * (void)v11);
        if (([v7 containsObject:v12] & 1) == 0)
        {
          if (qword_102419520 != -1) {
            dispatch_once(&qword_102419520, &stru_1022C97E8);
          }
          id v13 = qword_102419528;
          if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t buf = 138412290;
            uint64_t v29 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#reset-retry - service with identifier: %@ never checked in to retry handling reset after crash", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419520 != -1) {
              dispatch_once(&qword_102419520, &stru_1022C97E8);
            }
            int v26 = 138412290;
            uint64_t v27 = v12;
            char v14 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::onResetTimer()", "%s\n", v14);
            if (v14 != (char *)buf) {
              free(v14);
            }
          }
        }
        id v11 = (char *)v11 + 1;
      }
      while (v9 != v11);
      id v15 = [v4 countByEnumeratingWithState:&v21 objects:v25 count:16];
      id v9 = v15;
    }
    while (v15);
  }
  sub_1007C5804(a1);
}

void sub_1007D4D5C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v10 = 1;
    id v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onDarwinNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    id v8 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v12 = 0;
      __int16 v13 = 2082;
      char v14 = "";
      __int16 v15 = 2082;
      char v16 = "activity";
      __int16 v17 = 2050;
      uint64_t v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onDarwinNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v10 = 0;
  }
  sub_1007DDCB0(a4, v6, a2);
  if (v10) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D4F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D4F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v8 = 1;
    id v5 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v5, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    uint64_t v6 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v10 = 0;
      __int16 v11 = 2082;
      int v12 = "";
      __int16 v13 = 2082;
      char v14 = "activity";
      __int16 v15 = 2050;
      uint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v8 = 0;
  }
  if (v8) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D50CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D50E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a2 + 32), "silo") assertOutside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v15 = 1;
    int v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onRestrictionsChangedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    __int16 v11 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v17 = 0;
      __int16 v18 = 2082;
      long long v19 = "";
      __int16 v20 = 2082;
      long long v21 = "activity";
      __int16 v22 = 2050;
      uint64_t v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onRestrictionsChangedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v15 = 0;
  }
  id v12 = [*(id *)(a2 + 32) silo];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  _OWORD v13[2] = sub_1007E2128;
  v13[3] = &unk_1022ACFE0;
  v13[4] = a2;
  void v13[5] = a1;
  v13[6] = a3;
  void v13[7] = a4;
  v13[8] = a5;
  [v12 sync:v13];
  if (v15) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D5304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D5324(uint64_t a1, int token)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t state64 = 0;
  notify_get_state(token, &state64);
  if (state64)
  {
    *(unsigned char *)(v2 + 1061) = 1;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#AuthPrompt screen locked", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_1007D5754(v2, 0, 0);
  }
  else
  {
    *(unsigned char *)(v2 + 1059) = 1;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Trial period #reprompt capacitor charged", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      id v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
    *(unsigned char *)(v2 + 1061) = 0;
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "#AuthPrompt screen unlocked", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      char v8 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
}

void sub_1007D5754(uint64_t a1, int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 272);
  if (v3)
  {
    id v7 = (uint64_t *)(a1 + 272);
    if (a3 && ([a3 isEqual:*(void *)(v3 + 8)] & 1) == 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v16 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(*v7 + 8);
        *(_DWORD *)uint64_t buf = 68289538;
        int v20 = 0;
        __int16 v21 = 2082;
        __int16 v22 = "";
        __int16 v23 = 2114;
        uint64_t v24 = v17;
        __int16 v25 = 2114;
        int v26 = a3;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt skip Teardown Inflight Prompt - actual and expected inflight client does not match\", \"ActualInflightClient\":%{public, location:escape_only}@, \"ExpectedInflightClient\":%{public, location:escape_only}@}", buf, 0x26u);
      }
    }
    else
    {
      CFStringRef v8 = @"TearDown SPI Invocation";
      if (a2 == 1) {
        CFStringRef v8 = @"Squatting threshold(15 min) expired";
      }
      if (a2) {
        id v9 = (__CFString *)v8;
      }
      else {
        id v9 = @"ScreenLock enabled";
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v10 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(*v7 + 8);
        id v12 = (void *)*(unsigned int *)*v7;
        *(_DWORD *)uint64_t buf = 68289794;
        int v20 = 0;
        __int16 v21 = 2082;
        __int16 v22 = "";
        __int16 v23 = 2114;
        uint64_t v24 = v11;
        __int16 v25 = 2050;
        int v26 = v12;
        __int16 v27 = 2082;
        id v28 = [(__CFString *)v9 UTF8String];
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Teardown Inflight Prompt\", \"Client\":%{public, location:escape_only}@, \"PromptType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"Teardown Reason\":%{public, location:escape_only}s}", buf, 0x30u);
      }
      __int16 v13 = (unsigned int *)*v7;
      uint64_t v14 = *(void *)(*v7 + 48);
      if (v14)
      {
        char v15 = (__CFRunLoop *)sub_1001C2710();
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1007DB358;
        block[3] = &unk_1022A3020;
        block[4] = v14;
        CFRunLoopPerformBlock(v15, kCFRunLoopCommonModes, block);
        __int16 v13 = (unsigned int *)*v7;
      }
      sub_1007B8A50(v13, (uint64_t)v9);
      sub_1007DB360(v7, 0);
      *(_DWORD *)(a1 + 312) = 0;
    }
  }
}

void sub_1007D59F4(uint64_t a1, int token)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t state64 = 0;
  uint64_t state = notify_get_state(token, &state64);
  uint64_t v4 = state64;
  *(unsigned char *)(v2 + 1060) = state64 != 0;
  if (v4 == 1)
  {
    if (!*(unsigned char *)(v2 + 488))
    {
      sub_1007BCC00(state, *(void **)(v2 + 480), v2 + 440);
      *(unsigned char *)(v2 + 488) = 1;
    }
    sub_1007D5A70(v2);
    *(unsigned char *)(v2 + 1059) = 0;
  }
}

void sub_1007D5A70(uint64_t a1)
{
  sub_100103240();
  if (sub_10010145C())
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Should never be executed in this context", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v72.__r_.__value_.__l.__data_) = 0;
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v6);
LABEL_10:
      if (v6 != buf) {
        free(v6);
      }
      return;
    }
    return;
  }
  if ([*(id *)(a1 + 120) locationRestricted])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v7 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)uint64_t buf = 68289026;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    CFStringRef v8 = "{\"msg%{public}.0s\":\"Dropping #provisional upgrade and #reprompt notification. Restrictions enabled\"}";
    id v9 = v7;
    uint32_t v10 = 18;
    goto LABEL_17;
  }
  if (*(void *)(a1 + 272))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
    {
      id v12 = *(unsigned int **)(a1 + 272);
      uint64_t v13 = *((void *)v12 + 1);
      std::string::size_type v14 = *v12;
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v13;
      __int16 v77 = 2050;
      std::string::size_type v78 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"We should not get springboard.homescreenunlocked events when we have inflight prompt authorization request\", \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    char v15 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v16 = *(unsigned int **)(a1 + 272);
      uint64_t v17 = *((void *)v16 + 1);
      std::string::size_type v18 = *v16;
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v17;
      __int16 v77 = 2050;
      std::string::size_type v78 = v18;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "We should not get springboard.homescreenunlocked events when we have inflight prompt authorization request", "{\"msg%{public}.0s\":\"We should not get springboard.homescreenunlocked events when we have inflight prompt authorization request\", \"inflightClient\":%{public, location:escape_only}@, \"inflightRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
    }
    return;
  }
  if (*(unsigned char *)(a1 + 280))
  {
    long long v19 = *(uint64_t **)(a1 + 264);
    if (v19)
    {
      if (*((char *)v19 + 23) < 0) {
        long long v19 = (uint64_t *)*v19;
      }
      int v20 = +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:v19]);
      __int16 v21 = sub_100068950(a1, (uint64_t)v20, &xmmword_101D82EB8);
      __int16 v22 = v21;
      if (!v21 || [(CLClientManagerAuthorizationContext *)v21 registrationResult] != 8)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v23 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v20;
        __int16 v77 = 1026;
        LODWORD(v78) = [(CLClientManagerAuthorizationContext *)v22 registrationResult];
        CFStringRef v8 = "{\"msg%{public}.0s\":\"Dropping #provisional authorization upgrade because target is no longer Provisionall"
             "y Always authorized\", \"Client\":%{public, location:escape_only}@, \"RegistrationResult\":%{public}d}";
        id v9 = v23;
        uint32_t v10 = 34;
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
        return;
      }
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v1 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v20;
        _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Creating #provisional authorization upgrade notification\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      if (!*(void *)(a1 + 272))
      {
        sub_100134750(__p, "");
        sub_1007E1DB0((uint64_t)v75, 8, (uint64_t)v20, 0, (long long *)__p);
        sub_1007A7700(a1, (uint64_t)v20, 0, (uint64_t)v75, 0);
        sub_1007E1E64((uint64_t)v75);
        if (v74 < 0) {
          operator delete(__p[0]);
        }
        return;
      }
      sub_101A6ED88();
    }
    else
    {
      sub_101A6EC18();
    }
    goto LABEL_153;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = &qword_102419000;
  uint64_t v24 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "#IncidentalPrompt presenting, transitioned to homescreen.", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    LOWORD(v72.__r_.__value_.__l.__data_) = 0;
    CFStringRef v63 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v63);
    if (v63 != buf) {
      free(v63);
    }
  }
  if (sub_1007AA6B8(a1, 0) || !*(unsigned char *)(a1 + 1059)) {
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v25 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "Trial period #reprompt capacitor fired", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    LOWORD(v72.__r_.__value_.__l.__data_) = 0;
    NSErrorUserInfoKey v64 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v64);
    if (v64 != buf) {
      free(v64);
    }
  }
  sub_10053B99C(0, &v72);
  int v26 = std::string::append(&v72, "locScoreInfoReport");
  long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v26->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t buf = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (buf[23] >= 0) {
    id v28 = buf;
  }
  else {
    id v28 = *(unsigned char **)buf;
  }
  uint64_t v29 = +[NSString stringWithUTF8String:v28];
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  if ([+[NSFileManager defaultManager] fileExistsAtPath:v29])
  {
    v72.__r_.__value_.__r.__words[0] = 0;
    __int16 v30 = [(NSDictionary *)[+[NSFileManager defaultManager] attributesOfItemAtPath:v29 error:&v72] fileModificationDate];
    if (v72.__r_.__value_.__r.__words[0])
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      __int16 v31 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v72.__r_.__value_.__r.__words[0];
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not get modification date of #reprompt file\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      uint64_t v32 = qword_102419538;
      if (!os_signpost_enabled((os_log_t)qword_102419538)) {
        goto LABEL_73;
      }
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v72.__r_.__value_.__r.__words[0];
      uint64_t v33 = "Could not get modification date of #reprompt file";
      uint64_t v34 = "{\"msg%{public}.0s\":\"Could not get modification date of #reprompt file\", \"Error\":%{public, location:escape_only}@}";
      goto LABEL_71;
    }
    if ([(NSDate *)v30 compare:[+[NSDate date] dateByAddingTimeInterval:-432000.0]] == NSOrderedAscending)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v54 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_73;
      }
      *(_DWORD *)uint64_t buf = 68289026;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      id v51 = "{\"msg%{public}.0s\":\"#reprompt data is over 5 days old.\"}";
      uint64_t v52 = v54;
      uint32_t v53 = 18;
    }
    else
    {
      uint64_t v41 = +[NSData dataWithContentsOfFile:v29 options:8 error:&v72];
      if (!v41 || v72.__r_.__value_.__r.__words[0])
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        id v55 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2113;
          *(void *)&buf[20] = v41;
          __int16 v77 = 2114;
          std::string::size_type v78 = v72.__r_.__value_.__r.__words[0];
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not read checkpointed #reprompt data\", \"Data\":%{private, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", buf, 0x26u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        uint64_t v56 = qword_102419538;
        if (!os_signpost_enabled((os_log_t)qword_102419538)) {
          goto LABEL_73;
        }
        *(_DWORD *)uint64_t buf = 68289539;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2113;
        *(void *)&buf[20] = v41;
        __int16 v77 = 2114;
        std::string::size_type v78 = v72.__r_.__value_.__r.__words[0];
        uint64_t v33 = "Could not read checkpointed #reprompt data";
        uint64_t v34 = "{\"msg%{public}.0s\":\"Could not read checkpointed #reprompt data\", \"Data\":%{private, location:escape_o"
              "nly}@, \"Error\":%{public, location:escape_only}@}";
        int v35 = v56;
        uint32_t v36 = 38;
        goto LABEL_72;
      }
      id v42 = [objc_alloc((Class)NSKeyedUnarchiver) initForReadingFromData:v41 error:&v72];
      if (!v42 || v72.__r_.__value_.__r.__words[0])
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v57 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)uint64_t buf = 68289282;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)&uint8_t buf[8] = 2082;
          *(void *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(void *)&buf[20] = v72.__r_.__value_.__r.__words[0];
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not configure unarchiver with checkpointed #reprompt data\", \"Error\":%{public, location:escape_only}@}", buf, 0x1Cu);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        uint64_t v32 = qword_102419538;
        if (!os_signpost_enabled((os_log_t)qword_102419538)) {
          goto LABEL_73;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v72.__r_.__value_.__r.__words[0];
        uint64_t v33 = "Could not configure unarchiver with checkpointed #reprompt data";
        uint64_t v34 = "{\"msg%{public}.0s\":\"Could not configure unarchiver with checkpointed #reprompt data\", \"Error\":%{publ"
              "ic, location:escape_only}@}";
LABEL_71:
        int v35 = v32;
        uint32_t v36 = 28;
LABEL_72:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v33, v34, buf, v36);
        goto LABEL_73;
      }
      uint64_t v66 = objc_opt_class();
      uint64_t v65 = objc_opt_class();
      uint64_t v43 = objc_opt_class();
      uint64_t v44 = objc_opt_class();
      uint64_t v45 = objc_opt_class();
      id v46 = [v42 decodeObjectOfClasses:+[NSSet setWithObjects:](NSSet, "setWithObjects:", v66, v65, v43, v44, v45, objc_opt_class(), 0) forKey:NSKeyedArchiveRootObjectKey];

      if (!v46)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v58 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_FAULT, "Could not unarchive checkpointed #reprompt data", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v71 = 0;
          uint64_t v59 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v59);
          if (v59 != buf) {
            free(v59);
          }
        }
        goto LABEL_73;
      }
      uint64_t v1 = [v46 objectForKeyedSubscript:@"ClientKey"];
      uint64_t v47 = +[CLClientKeyPath clientKeyPathWithClientKey:v1];
      uint64_t v48 = sub_100068950(a1, (uint64_t)v47, &xmmword_101D82EB8);
      uint64_t v3 = (char *)v48;
      if (v48 && ![(CLClientManagerAuthorizationContext *)v48 registrationResult])
      {
        if (*(unsigned char *)(a1 + 280))
        {
          sub_101A6EAA8();
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v3 = "";
        sub_100134750(v68, "");
        sub_1007E1DB0((uint64_t)v70, 6, (uint64_t)v47, 0, (long long *)v68);
        BOOL v60 = sub_1007A7700(a1, (uint64_t)v47, 0, (uint64_t)v70, (uint64_t)v46);
        sub_1007E1E64((uint64_t)v70);
        if (v69 < 0) {
          operator delete(v68[0]);
        }
        if (v60)
        {
          if (qword_102419530 == -1)
          {
LABEL_136:
            CFStringRef v61 = v2[167];
            if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT)) {
              return;
            }
            *(_DWORD *)uint64_t buf = 68289282;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)&uint8_t buf[8] = 2082;
            *(void *)&buf[10] = v3;
            *(_WORD *)&buf[18] = 2114;
            *(void *)&buf[20] = v1;
            CFStringRef v8 = "{\"msg%{public}.0s\":\"Creating trial period #reprompt notification\", \"ClientKey\":%{public, location:escape_only}@}";
            id v9 = v61;
            uint32_t v10 = 28;
            goto LABEL_17;
          }
LABEL_154:
          dispatch_once(&qword_102419530, &stru_1022C9768);
          goto LABEL_136;
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v62 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
        {
LABEL_73:
          [+[NSFileManager defaultManager] removeItemAtPath:v29 error:0];
          return;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v1;
        id v51 = "{\"msg%{public}.0s\":\"#Warning Could not post #reprompt\", \"ClientKey\":%{public, location:escape_only}@}";
        uint64_t v52 = v62;
        uint32_t v53 = 28;
      }
      else
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v49 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_73;
        }
        unsigned int v50 = [v3 transientAwareRegistrationResult];
        *(_DWORD *)uint64_t buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(void *)&buf[20] = v1;
        __int16 v77 = 1026;
        LODWORD(v78) = v50;
        id v51 = "{\"msg%{public}.0s\":\"Dropping checkpointed #reprompt data because target is no longer Always authorized\""
              ", \"ClientKey\":%{public, location:escape_only}@, \"RegistrationResult\":%{public}d}";
        uint64_t v52 = v49;
        uint32_t v53 = 34;
      }
    }
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v51, buf, v53);
    goto LABEL_73;
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v72.__r_.__value_.__r.__words[0] = 0x410FA40000000000;
  sub_1000C7F88(buf);
  sub_1000A699C(*(uint64_t *)buf, "ClientRepromptAlwaysNotificationInterval", &v72);
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v38 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)uint64_t buf = 68289282;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = v72.__r_.__value_.__r.__words[0];
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Commencing #reprompt iteration\", \"Interval\":\"%{public}f\"}", buf, 0x1Cu);
  }
  if (*(double *)&v72.__r_.__value_.__l.__data_ >= 0.0)
  {
    uint64_t v40 = *(void **)(a1 + 136);
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472;
    void v67[2] = sub_1007DB3C4;
    v67[3] = &unk_1022C9558;
    v67[4] = a1;
    *(CFAbsoluteTime *)&v67[5] = Current;
    v67[6] = v72.__r_.__value_.__r.__words[0];
    [v40 iterateAllAnchorKeyPathsWithBlock:v67];
    return;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v39 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Not iterating for #reprompt: disabled", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v71 = 0;
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::presentSecondaryAuthorizationPromptForEligibleClient()", "%s\n", v6);
    goto LABEL_10;
  }
}

void sub_1007D6E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1007D6F18(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    CFStringRef v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onDataProtectionManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      char v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onDataProtectionManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1007BEEE4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D70D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007D70F4(uint64_t a1)
{
  return sub_1007B09FC(*(void *)(a1 + 32));
}

uint64_t *sub_1007D70FC(uint64_t *a1, uint64_t a2)
{
  std::istream::sentry::sentry();
  if (!v20) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v4 = *(void *)(*a1 - 24);
  uint64_t v5 = *(uint64_t *)((char *)a1 + v4 + 24);
  if (v5 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = *(uint64_t *)((char *)a1 + v4 + 24);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + v4));
  uint64_t v7 = std::locale::use_facet(&v19, &std::ctype<char>::id);
  std::locale::~locale(&v19);
  uint64_t v8 = 0;
  id v9 = a1 + 5;
  if (v5 >= 1) {
    uint64_t v10 = v6;
  }
  else {
    uint64_t v10 = 0x7FFFFFFFFFFFFFF7;
  }
  while (1)
  {
    char v11 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    id v12 = (unsigned char *)v11[3];
    if (v12 == (unsigned char *)v11[4]) {
      break;
    }
    LOBYTE(v13) = *v12;
LABEL_14:
    if ((v13 & 0x80) == 0 && (*((_DWORD *)&v7[1].~facet + v13) & 0x4000) != 0)
    {
      int v16 = 0;
      goto LABEL_23;
    }
    std::string::push_back((std::string *)a2, v13);
    __int16 v14 = *(void **)((char *)v9 + *(void *)(*a1 - 24));
    uint64_t v15 = v14[3];
    if (v15 == v14[4]) {
      (*(void (**)(void *))(*v14 + 80))(v14);
    }
    else {
      void v14[3] = v15 + 1;
    }
    if (v10 == ++v8)
    {
      int v16 = 0;
      uint64_t v8 = 1;
      goto LABEL_23;
    }
  }
  int v13 = (*(uint64_t (**)(void *))(*v11 + 72))(v11);
  if (v13 != -1) {
    goto LABEL_14;
  }
  int v16 = 2;
LABEL_23:
  uint64_t v17 = *a1;
  *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 0;
  if (!v8) {
    v16 |= 4u;
  }
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(v17 - 24)), *(_DWORD *)((char *)a1 + *(void *)(v17 - 24) + 32) | v16);
  return a1;
}

void sub_1007D731C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  __cxa_begin_catch(a1);
  uint64_t v11 = *v9;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v9 + *(void *)(v11 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1007D72D8);
  }
  __cxa_rethrow();
}

void sub_1007D73B8(_Unwind_Exception *a1)
{
}

void sub_1007D73CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(const char **)(v1 + 264);
    if (v3)
    {
      if (v3[23] < 0) {
        uint64_t v3 = *(const char **)v3;
      }
    }
    else
    {
      uint64_t v3 = "nobody";
    }
    v5[0] = 68289282;
    v5[1] = 0;
    __int16 v6 = 2082;
    uint64_t v7 = "";
    __int16 v8 = 2082;
    id v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Ending #provisional intermediation reign guarantee due to staleness\", \"king\":%{public, location:escape_only}s}", (uint8_t *)v5, 0x1Cu);
  }
  uint64_t v4 = *(void *)(v1 + 288);
  if (v4)
  {
    (*(void (**)(uint64_t, void))(v4 + 16))(v4, 0);

    *(void *)(v1 + 288) = 0;
  }
}

void sub_1007D74F4(uint64_t a1)
{
  if (*(void *)(a1 + 336))
  {
    __int16 v6 = (_Unwind_Exception *)sub_101A6EEF8();
    _Block_object_dispose(&v9, 8);
    uint64_t v17 = v1;
    sub_1007E56A4(&v17);
    _Unwind_Resume(v6);
  }
  uint64_t v3 = *(void **)(a1 + 136);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _OWORD v16[2] = sub_1007D877C;
  float v16[3] = &unk_1022C8D28;
  v16[4] = a1;
  [v3 iterateAllAnchorKeyPathsWithBlock:v16];
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x4812000000;
  id v12 = sub_1007D8798;
  int v13 = sub_1007D87BC;
  __int16 v14 = "";
  memset(v15, 0, sizeof(v15));
  uint64_t v4 = *(void **)(a1 + 136);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1007D87E8;
  void v8[3] = &unk_1022C8E70;
  void v8[4] = &v9;
  void v8[5] = a1;
  [v4 iterateAllAnchorKeyPathsWithBlock:v8];
  if (v10[6] != v10[7])
  {
    id v5 = [*(id *)(a1 + 40) newTimer];
    *(void *)(a1 + 336) = v5;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1007D8AC0;
    v7[3] = &unk_1022BF788;
    v7[4] = &v9;
    void v7[5] = a1;
    [v5 setHandler:v7];
    [*(id *)(a1 + 336) setNextFireDelay:10.0];
  }
  _Block_object_dispose(&v9, 8);
  uint64_t v17 = (void **)v15;
  sub_1007E56A4(&v17);
}

id sub_1007D76D8(id *a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Resetting LocationConsumptionScoreInfoArchive", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    LOWORD(v12.__r_.__value_.__l.__data_) = 0;
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::reloadLocationConsumptionScoreInfoArchive()", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }

  uint64_t v3 = [CLHRequestArchive alloc];
  sub_10053B99C(0, &v12);
  uint64_t v4 = std::string::append(&v12, "locScoreInfo/");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v14 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t buf = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (v14 >= 0) {
    __int16 v6 = buf;
  }
  else {
    __int16 v6 = *(uint8_t **)buf;
  }
  a1[60] = [(CLHRequestArchive *)v3 initWithDirectory:+[NSString stringWithUTF8String:v6] itemCountThresholdForAutoCleanUp:150];
  if (SHIBYTE(v14) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  [a1[60] setRotationInterval:-1.0];
  uint64_t v7 = a1 + 60;
  sub_1007BD2A0((uint64_t)a1, (uint64_t)a1[60], (uint64_t)(a1 + 55));
  a1[62] = [objc_msgSend(objc_msgSend(a1[4], "vendor"), "proxyForService:forClient:", @"CLRoutineMonitor", @"CLClientManager")];
  double Current = CFAbsoluteTimeGetCurrent();
  id v9 = objc_alloc_init((Class)CLPLocationConsumptionScoreInfo);
  [v9 setClientKey:@"com.apple.locationd.all-location-clients-stop"];
  [v9 setStopTime:Current];
  [v9 setScore:0];
  return [*v7 writeSecondaryObject:v9 toField:1];
}

void sub_1007D79B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D79F0(uint64_t a1)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v2 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Registering coreanalytics activity", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v6 = 0;
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::registerAnalyticsCollectActivity()", "%s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  id v3 = [[[*(id *)(a1 + 32) vendor] proxyForService:@"CLClientManager"];
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1007DEC30;
  handler[3] = &unk_1022B9CD0;
  handler[4] = v3;
  xpc_activity_register("com.apple.locationd.CLClientManager.coreanalytics", XPC_ACTIVITY_CHECK_IN, handler);
}

unsigned char *sub_1007D7BFC(uint64_t a1)
{
  return sub_1007D7C04(*(void *)(a1 + 32));
}

unsigned char *sub_1007D7C04(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 136);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1007DC838;
  unsigned __int8 v4[3] = &unk_1022C9578;
  v4[4] = a1;
  char v5 = 1;
  [v2 iterateAllAnchorKeyPathsWithBlock:v4];
  sub_1007A6574(a1);
  sub_1007A69D4(a1);
  sub_1007D8B38(a1, 0);
  return sub_100105FDC((unsigned char *)a1);
}

void sub_1007D7CAC(uint64_t a1, CLConnection **a2, uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *a2;
  *a2 = 0;
  _DWORD v8[2] = _NSConcreteStackBlock;
  void v8[3] = 3221225472;
  void v8[4] = sub_1007D7D88;
  void v8[5] = &unk_1022B8660;
  void v8[6] = v4;
  void v8[7] = v5;
  CLConnection::setDisconnectionHandler();
  uint64_t v6 = *a3;
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  v8[0] = v6;
  v8[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000B0B44(v4, v5, (uint64_t)v8);
  if (v7) {
    sub_1000DB0A0(v7);
  }
}

void sub_1007D7D70(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1000DB0A0(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D7D88(uint64_t a1)
{
}

void sub_1007D7D94(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onDaemonStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onDaemonStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1007DDEC4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D7F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D7F70(uint64_t a1, _DWORD *a2, unsigned __int8 *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onWifiServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onWifiServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1007DDF20(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D812C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D814C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onBluetoothServiceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onBluetoothServiceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1007DE6D4(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D8308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007D8328(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4)
{
  CLProfilingIdentify();
  [objc_msgSend(*(id *)(a4 + 32), "silo") assertInside];
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
  {
    char v11 = 1;
    __int16 v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLClientManager::onStatusBarNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    id v9 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289538;
      int v13 = 0;
      __int16 v14 = 2082;
      uint64_t v15 = "";
      __int16 v16 = 2082;
      uint64_t v17 = "activity";
      __int16 v18 = 2050;
      uint64_t v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLClientManager::onStatusBarNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    char v11 = 0;
  }
  sub_1007DE0E0(a4, v7, a2, a3);
  if (v11) {
    os_activity_scope_leave(&state);
  }
}

void sub_1007D84E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11) {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007D8504(uint64_t a1)
{
  return sub_1007D08A8(*(void *)(a1 + 32), 14400.0);
}

void sub_1007D8514(id a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFStringRef v2 = (const __CFString *)CLAuthorizationStatusChangedNotification;

  CFNotificationCenterPostNotification(DarwinNotifyCenter, v2, 0, 0, 0);
}

id sub_1007D8554(uint64_t a1, uint64_t a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#liveActivity invoking update handler", buf, 2u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "CLClientManager::CLClientManager(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
  return [*(id *)(a1 + 32) handleLiveActivityUpdate:a2];
}

uint64_t sub_1007D86F8(uint64_t a1)
{
  *(void *)a1 = off_1022C9A50;
  [*(id *)(a1 + 48) invalidate];

  sub_1004459BC(a1 + 80, *(void **)(a1 + 88));
  sub_1007E53C4(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

id sub_1007D877C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 136) removeValueForKey:@"InUseLevel" atKeyPath:a2];
}

__n128 sub_1007D8798(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1007D87BC(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_1007E56A4(&v1);
}

void sub_1007D87E8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  [*(id *)(v4 + 136) doubleForKey:@"BackgroundLocationTimeStarted" atKeyPath:a2 defaultValue:0.0];
  double v6 = v5;
  [*(id *)(v4 + 136) doubleForKey:@"BackgroundLocationTimeStopped" atKeyPath:a2 defaultValue:0.0];
  if (v6 <= v7)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    char v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      uint64_t buf = 68289282;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2114;
      __int16 v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"No BackgroundLocation found. No crash-grace CLInUseAssertion\", \"clientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289282;
      __int16 v18 = 2082;
      uint64_t v19 = "";
      __int16 v20 = 2114;
      __int16 v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Ongoing background location, taking temporary crash-grace DUE CLInUseAssertion\", \"clientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
    id v9 = *(uint64_t **)(*(void *)(a1 + 32) + 8);
    uint64_t v10 = *(void **)(v4 + 376);
    if (a2)
    {
      [a2 cppClientKey];
    }
    else
    {
      v15[0] = 0;
      v15[1] = 0;
      uint64_t v16 = 0;
    }
    sub_100134750(&__p, "crash-grace-DUE");
    sub_100098B10(&__p, v10, (uint64_t)v15, 5, &buf);
    unint64_t v12 = v9[7];
    if (v12 >= v9[8])
    {
      uint64_t v13 = sub_1007E5728(v9 + 6, (long long *)&buf);
    }
    else
    {
      sub_100006280((_OWORD *)v9[7], (long long *)&buf);
      uint64_t v13 = v12 + 80;
      v9[7] = v12 + 80;
    }
    v9[7] = v13;
    sub_1001AB2CC((uint64_t)&buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
  }
}

void sub_1007D8A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

void sub_1007D8AC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(v2 + 48);
  for (uint64_t i = *(void *)(v2 + 56); i != v4; uint64_t i = sub_1001AB2CC(i - 80))
    ;
  *(void *)(v2 + 56) = v4;
  [*(id *)(v1 + 336) invalidate];

  *(void *)(v1 + 336) = 0;
}

id sub_1007D8B1C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 136) removeValueForKey:@"Hidden" atKeyPath:a2];
}

void sub_1007D8B38(uint64_t a1, int a2)
{
  unsigned int v4 = [*(id *)(a1 + 120) locationRestricted];
  uint64_t v5 = sub_1000EB1B0();
  int v6 = v5;
  BOOL v7 = sub_1007DC4D4(v5, a2);
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  __int16 v8 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 67109632;
    BOOL v25 = v6 != 0;
    __int16 v26 = 1024;
    BOOL v27 = v7;
    __int16 v28 = 1024;
    int v29 = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Location services available %d; parental controls enabled %d (refresh %d)",
      buf,
      0x14u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v18 = 67109632;
    BOOL v19 = v6 != 0;
    __int16 v20 = 1024;
    BOOL v21 = v7;
    __int16 v22 = 1024;
    int v23 = a2;
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::checkRestrictions(BOOL)", "%s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
  }
  if (v6) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 1;
  }
  [*(id *)(a1 + 120) setLocationRestricted:v9];
  if ([*(id *)(a1 + 120) locationRestricted])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#warning location is restricted; freezing client states",
        buf,
        2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v18) = 0;
LABEL_39:
      uint64_t v15 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::checkRestrictions(BOOL)", "%s\n", v15);
      if (v15 != (char *)buf) {
        free(v15);
      }
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    char v11 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "location is not restricted", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v18) = 0;
      goto LABEL_39;
    }
  }
  if (a2 && v4 != [*(id *)(a1 + 120) locationRestricted])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unint64_t v12 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Applying #restrictions change to all clients", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(v18) = 0;
      uint64_t v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::checkRestrictions(BOOL)", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v13 = *(void **)(a1 + 136);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _OWORD v17[2] = sub_1007DC7C0;
    float v17[3] = &unk_1022C8D28;
    void v17[4] = a1;
    [v13 iterateAllAnchorKeyPathsWithBlock:v17];
  }
}

uint64_t sub_1007D90E8(uint64_t a1)
{
  *(void *)a1 = off_1022C9368;
  *(void *)(a1 + 112) = &off_1022C9450;
  *(void *)(*(void *)(a1 + 1016) + 8) = 0;
  sub_100939FB8(*(void *)(a1 + 376));

  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1528) = 0;
  [*(id *)(a1 + 336) invalidate];

  *(void *)(a1 + 336) = 0;
  dispatch_source_cancel(*(dispatch_source_t *)(a1 + 672));

  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  [*(id *)(a1 + 344) invalidate];

  *(void *)(a1 + 344) = 0;
  [*(id *)(a1 + 352) invalidate];

  *(void *)(a1 + 352) = 0;
  [*(id *)(a1 + 256) invalidate];

  *(void *)(a1 + 256) = 0;
  [*(id *)(a1 + 224) invalidate];

  *(void *)(a1 + 224) = 0;
  [*(id *)(a1 + 408) invalidate];

  *(void *)(a1 + 408) = 0;
  [*(id *)(a1 + 400) invalidate];

  *(void *)(a1 + 400) = 0;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  uint64_t v2 = *(void **)(a1 + 576);
  id v3 = [v2 countByEnumeratingWithState:&v63 objects:v70 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v64;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v64 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v63 + 1) + 8 * i);
        [objc_msgSend(*(id *)(a1 + 576), "objectForKeyedSubscript:", v6) invalidate];

        [*(id *)(a1 + 576) setObject:0 forKeyedSubscript:v6];
      }
      id v3 = [v2 countByEnumeratingWithState:&v63 objects:v70 count:16];
    }
    while (v3);
  }
  BOOL v7 = *(void **)(a1 + 592);
  if (v7 != (void *)(a1 + 600))
  {
    do
    {
      sub_10017FD18(v7 + 7, 0);
      __int16 v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          __int16 v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          BOOL v7 = v9;
        }
        while (!v10);
      }
      BOOL v7 = v9;
    }
    while (v9 != (void *)(a1 + 600));
  }
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  char v11 = *(void **)(a1 + 392);
  id v12 = [v11 countByEnumeratingWithState:&v59 objects:v69 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v60;
    do
    {
      for (uint64_t j = 0; j != v12; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v60 != v13) {
          objc_enumerationMutation(v11);
        }
        dispatch_source_cancel(*(dispatch_source_t *)(*((void *)&v59 + 1) + 8 * (void)j));
      }
      id v12 = [v11 countByEnumeratingWithState:&v59 objects:v69 count:16];
    }
    while (v12);
  }

  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 416) = 0;
  [*(id *)(a1 + 368) invalidate];

  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 360) = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v15 = *(void **)(a1 + 432);
  id v16 = [v15 countByEnumeratingWithState:&v55 objects:v68 count:16];
  if (v16)
  {
    uint64_t v17 = *(void *)v56;
    do
    {
      for (k = 0; k != v16; k = (char *)k + 1)
      {
        if (*(void *)v56 != v17) {
          objc_enumerationMutation(v15);
        }
        [objc_msgSend(*(id *)(a1 + 432), "objectForKeyedSubscript:", *(void *)(*((void *)&v55 + 1) + 8 * (void)k)) end];
      }
      id v16 = [v15 countByEnumeratingWithState:&v55 objects:v68 count:16];
    }
    while (v16);
  }

  *(void *)(a1 + 432) = 0;
  [*(id *)(a1 + 296) invalidate];

  *(void *)(a1 + 296) = 0;
  if (*(void *)(a1 + 248))
  {
    sub_101A6F068(v19, v20, v21, v22, v23, v24, v25, v26, v51, v52, v53, v54, v55, *((uint64_t *)&v55 + 1), v56, *((uint64_t *)&v56 + 1), v57, *((uint64_t *)&v57 + 1), v58,
      *((uint64_t *)&v58 + 1),
      v59,
      *((uint64_t *)&v59 + 1),
      v60,
      *((uint64_t *)&v60 + 1));
    abort_report_np();
    __break(1u);
  }
  int v27 = *(_DWORD *)(a1 + 1064);
  if (v27) {
    notify_cancel(v27);
  }
  int v28 = *(_DWORD *)(a1 + 1068);
  if (v28) {
    notify_cancel(v28);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, @"com.apple.locationd/Restrictions", 0);
  uint64_t v30 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }

  *(void *)(a1 + 1144) = 0;
  *(void *)(a1 + 1152) = 0;
  sub_1007E5374(a1 + 1032, *(void **)(a1 + 1032));
  [*(id *)(a1 + 1544) stopMonitoringCapabilityChangeForClient:CLISP_ME_TOKEN];

  *(void *)(a1 + 1544) = 0;
  *(void *)(a1 + 1552) = 0;

  *(void *)(a1 + 1096) = 0;
  *(void *)(a1 + 1088) = 0;

  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1072) = 0;

  *(void *)(a1 + 1480) = 0;
  *(void *)(a1 + 120) = 0;

  *(void *)(a1 + 584) = 0;
  *(void *)(a1 + 480) = 0;

  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 544) = 0;

  *(void *)(a1 + 552) = 0;
  *(void *)(a1 + 560) = 0;
  [*(id *)(a1 + 144) invalidate];

  *(void *)(a1 + 144) = 0;
  [*(id *)(a1 + 136) persist];

  *(void *)(a1 + 136) = 0;
  uint64_t v37 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1560) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  sub_1002220F0(a1 + 1488);
  sub_1002220F0(a1 + 1328);
  sub_1000DB264(a1 + 1112, *(char **)(a1 + 1120));
  __int16 v67 = (void **)(a1 + 1032);
  sub_1007E5320(&v67);
  __int16 v38 = *(std::__shared_weak_count **)(a1 + 1024);
  if (v38) {
    sub_1000DB0A0(v38);
  }
  sub_1007E52E4(a1 + 976);
  if (*(char *)(a1 + 975) < 0) {
    operator delete(*(void **)(a1 + 952));
  }
  sub_1000F5BB0(a1 + 912, *(void **)(a1 + 920));
  sub_1000F5BB0(a1 + 888, *(void **)(a1 + 896));
  sub_1000DB264(a1 + 864, *(char **)(a1 + 872));
  sub_1000F5BB0(a1 + 840, *(void **)(a1 + 848));
  sub_1000F5BB0(a1 + 816, *(void **)(a1 + 824));
  sub_1000DB264(a1 + 776, *(char **)(a1 + 784));
  sub_1000DB264(a1 + 752, *(char **)(a1 + 760));
  sub_1000DB264(a1 + 728, *(char **)(a1 + 736));
  sub_1000DB264(a1 + 704, *(char **)(a1 + 712));
  sub_1000DB264(a1 + 680, *(char **)(a1 + 688));
  sub_1002220F0(a1 + 616);
  sub_1007E5288(a1 + 592, *(void **)(a1 + 600));
  sub_1002220F0(a1 + 504);
  sub_1002220F0(a1 + 440);
  uint64_t v39 = *(std::__shared_weak_count **)(a1 + 384);
  if (v39) {
    sub_1000DB0A0(v39);
  }
  sub_1007DB360((uint64_t *)(a1 + 272), 0);
  uint64_t v40 = *(void *)(a1 + 264);
  *(void *)(a1 + 264) = 0;
  if (v40) {
    sub_10068D784(a1 + 264, v40);
  }
  uint64_t v41 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  uint64_t v48 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v49 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  sub_1007D86F8(a1);
  return a1;
}

void sub_1007D9A98(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1001C7F8C(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1007D9AD4(uint64_t a1)
{
  return sub_1007D90E8(a1 - 112);
}

void sub_1007D9ADC(uint64_t a1)
{
  sub_1007D90E8(a1);

  operator delete();
}

void sub_1007D9B14(uint64_t a1)
{
  sub_1007D90E8(a1 - 112);

  operator delete();
}

CFStringRef sub_1007D9B50(__CFString *filePath)
{
  if (!filePath) {
    return 0;
  }
  CFURLRef v2 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, filePath, kCFURLPOSIXPathStyle, 1u);
  if (!v2) {
    return 0;
  }
  CFURLRef v3 = v2;
  CFBundleRef v4 = CFBundleCreate(kCFAllocatorDefault, v2);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = sub_1001BA55C();
    CFStringRef v7 = (const __CFString *)_kCFBundleDisplayNameKey;
    CFStringRef v8 = sub_100041DC4(v6, v5, _kCFBundleDisplayNameKey, 0);
    if (!v8)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000FECE0(v7, (uint64_t)__p);
        BOOL v10 = v24 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)uint64_t buf = 136446210;
        *(void *)&uint8_t buf[4] = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#warning could not get localized string '%{public}s'!", buf, 0xCu);
        if (v24 < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        sub_1000FECE0(v7, (uint64_t)buf);
        if (v20 >= 0) {
          uint64_t v15 = buf;
        }
        else {
          uint64_t v15 = *(unsigned char **)buf;
        }
        int v21 = 136446210;
        uint64_t v22 = v15;
        id v16 = (char *)_os_log_send_and_compose_impl();
        if (v20 < 0) {
          operator delete(*(void **)buf);
        }
        sub_1004BA5E4("Generic", 1, 0, 2, "CFStringRef _copyDisplayNameFromBundlePath(CFStringRef)", "%s\n", v16);
        if (v16 != __p) {
          free(v16);
        }
      }
      uint64_t v11 = sub_1001BA55C();
      CFStringRef v8 = sub_100041DC4(v11, v5, kCFBundleNameKey, 0);
      if (!v8)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        id v12 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          id v13 = [(__CFString *)filePath UTF8String];
          *(_DWORD *)std::string __p = 136446210;
          *(void *)&__p[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "could not get UN localized bundle name from bundle at '%{public}s'; soup cannot be given to them.",
            __p,
            0xCu);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          id v17 = [(__CFString *)filePath UTF8String];
          *(_DWORD *)uint64_t buf = 136446210;
          *(void *)&uint8_t buf[4] = v17;
          int v18 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "CFStringRef _copyDisplayNameFromBundlePath(CFStringRef)", "%s\n", v18);
          if (v18 != __p) {
            free(v18);
          }
        }
        CFStringRef v8 = 0;
      }
    }
    CFRelease(v5);
  }
  else
  {
    CFStringRef v8 = 0;
  }
  CFRelease(v3);
  return v8;
}

void sub_1007D9F7C(uint64_t a1)
{
  if (!*(void *)(a1 + 664)) {
    *(void *)(a1 + 664) = [[CLOSTransaction alloc] initWithDescription:"CLClientManager.unsubscribeGrace"];
  }
  CFURLRef v2 = *(NSObject **)(a1 + 672);
  if (v2)
  {
    dispatch_time_t v3 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 656) * 1000000000.0));
    uint64_t v4 = (unint64_t)(*(double *)(a1 + 656) * 0.5 * 1000000000.0);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, v4);
  }
  else
  {
    uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)[*(id *)(a1 + 40) queue]);
    *(void *)(a1 + 672) = v5;
    dispatch_time_t v6 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 656) * 1000000000.0));
    dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(*(double *)(a1 + 656) * 0.5 * 1000000000.0));
    CFStringRef v7 = *(NSObject **)(a1 + 672);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1007DA0FC;
    handler[3] = &unk_1022A3020;
    handler[4] = a1;
    dispatch_source_set_event_handler(v7, handler);
    dispatch_resume(*(dispatch_object_t *)(a1 + 672));
  }
}

void sub_1007DA0FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);

  *(void *)(v1 + 664) = 0;
}

void sub_1007DA128()
{
  uint64_t v0 = [[CLOSTransaction alloc] initWithDescription:"CLClientManager.privacyReset"];
  dispatch_time_t v1 = dispatch_time(0, 300000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007DA1D4;
  block[3] = &unk_10229FED8;
  block[4] = v0;
  dispatch_after(v1, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1007DA1D4(uint64_t a1)
{
}

id sub_1007DA1DC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v1 = a1 + 64;
  uint64_t v2 = v3;
  if (!v3) {
    goto LABEL_11;
  }
  uint64_t v4 = v1;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < 0;
    if (v5 >= 0) {
      CFStringRef v7 = (uint64_t *)v2;
    }
    else {
      CFStringRef v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 != v1 && *(int *)(v4 + 32) <= 0 && *(void *)(v4 + 56))
  {
    id v10 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v11 = *(void **)(v4 + 40);
    if (v11 != (void *)(v4 + 48))
    {
      do
      {
        if (*((char *)v11 + 63) < 0)
        {
          sub_1000DC48C(__p, (void *)v11[5], v11[6]);
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(v11 + 5);
          uint64_t v26 = v11[7];
        }
        if (SHIBYTE(v26) < 0)
        {
          if (!__p[1])
          {
LABEL_43:
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            id v17 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)uint64_t buf = 68289026;
              *(_DWORD *)uint64_t v30 = 0;
              *(_WORD *)&v30[4] = 2082;
              *(void *)&v30[6] = "";
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Found registered client for kNotificationReset with empty resetIdentifier\"}", buf, 0x12u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            int v18 = qword_102419538;
            if (os_signpost_enabled((os_log_t)qword_102419538))
            {
              *(_DWORD *)uint64_t buf = 68289026;
              *(_DWORD *)uint64_t v30 = 0;
              *(_WORD *)&v30[4] = 2082;
              *(void *)&v30[6] = "";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Found registered client for kNotificationReset with empty resetIdentifier", "{\"msg%{public}.0s\":\"Found registered client for kNotificationReset with empty resetIdentifier\"}", buf, 0x12u);
            }
            goto LABEL_54;
          }
          id v12 = (void **)__p[0];
        }
        else
        {
          if (!HIBYTE(v26)) {
            goto LABEL_43;
          }
          id v12 = __p;
        }
        if (objc_msgSend(&off_102397B18, "containsObject:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12)))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          id v13 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
          {
            if (v26 >= 0) {
              __int16 v14 = __p;
            }
            else {
              __int16 v14 = (void **)__p[0];
            }
            *(_DWORD *)uint64_t buf = 136315138;
            *(void *)uint64_t v30 = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "Skip un-tracked resetIdentifier: %s", buf, 0xCu);
          }
          if (sub_10013D1A0(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
            if (v26 >= 0) {
              uint64_t v15 = __p;
            }
            else {
              uint64_t v15 = (void **)__p[0];
            }
            int v27 = 136315138;
            int v28 = v15;
            id v16 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 2, "NSArray *CLClientManager::resetIdentifiersForRegisteredClients()", "%s\n", v16);
            if (v16 != (char *)buf) {
              free(v16);
            }
          }
        }
        else
        {
          if (v26 >= 0) {
            uint64_t v19 = __p;
          }
          else {
            uint64_t v19 = (void **)__p[0];
          }
          [v10 addObject:[NSString stringWithUTF8String:v19]];
        }
LABEL_54:
        if (SHIBYTE(v26) < 0) {
          operator delete(__p[0]);
        }
        char v20 = (void *)v11[1];
        if (v20)
        {
          do
          {
            int v21 = v20;
            char v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            int v21 = (void *)v11[2];
            BOOL v22 = *v21 == (void)v11;
            uint64_t v11 = v21;
          }
          while (!v22);
        }
        uint64_t v11 = v21;
      }
      while (v21 != (void *)(v4 + 48));
    }
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v23 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)uint64_t v30 = 0;
      *(_WORD *)&v30[4] = 2082;
      *(void *)&v30[6] = "";
      __int16 v31 = 2114;
      id v32 = v10;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"fetched reset-identifiers\", \"ResetIdentifiers\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    return [v10 allObjects];
  }
  else
  {
LABEL_11:
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    CFStringRef v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "No registered clients for kNotificationReset.", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      LOWORD(__p[0]) = 0;
      char v24 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "NSArray *CLClientManager::resetIdentifiersForRegisteredClients()", "%s\n", v24);
      if (v24 != (char *)buf) {
        free(v24);
      }
    }
    return 0;
  }
}

void sub_1007DA7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007DA810(uint64_t a1, uint64_t a2)
{
  signed int v4 = [*(id *)(a1 + 136) intForKey:@"SupportedAuthorizationMask" atKeyPath:a2 defaultValue:0];
  unsigned int v5 = [*(id *)(a1 + 136) BOOLForKey:@"Hidden" atKeyPath:a2 defaultValue:0];
  signed int v6 = v4 & 0xFFFFFFFB;
  if (!v5) {
    return v4;
  }
  return v6;
}

void sub_1007DA888(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id v5 = sub_100103D58(a1, a2);
  id v13 = 0;
  uint64_t v14 = 0;
  sub_100101464(a3, &v14, &v13);
  if (([*(id *)(a1 + 136) hasValueForKey:v14 atKeyPath:v5] & 1) == 0)
  {
    signed int v6 = v13;
    if (([*(id *)(a1 + 136) hasValueForKey:v13 atKeyPath:v5] & 1) == 0)
    {
      [*(id *)(a1 + 136) setDouble:v6 forKey:v5 atKeyPath:14406267.0];
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      CFStringRef v7 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        CFStringRef v8 = off_1022C8D98[a3];
        *(_DWORD *)uint64_t buf = 138412546;
        *(void *)&uint8_t buf[4] = v5;
        __int16 v20 = 2080;
        int v21 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Service: client, %@, type, %s, marked as used", buf, 0x16u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v11 = off_1022C8D98[a3];
        int v15 = 138412546;
        id v16 = v5;
        __int16 v17 = 2080;
        int v18 = v11;
        id v12 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::markClientServiceUsed(CLClientKeyPath *, CLClientServiceType)", "%s\n", v12);
        if (v12 != buf) {
          free(v12);
        }
      }
    }
  }
  if (!_os_feature_enabled_impl() || a3 <= 0xA && ((1 << a3) & 0x430) != 0)
  {
    uint64_t v9 = (char *)[[[v5 legacyClientKey] UTF8String];
    if (v9) {
      id v10 = v9;
    }
    else {
      id v10 = "";
    }
    sub_100134750(buf, v10);
    sub_100106098(a1, buf);
    if (v22 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_1007DAB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007DAB68(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 136);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1007DABDC;
  v3[3] = &unk_1022C8D28;
  void v3[4] = a1;
  return [v1 iterateAllAnchorKeyPathsWithBlock:v3];
}

uint64_t sub_1007DABDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  do
  {
    unint64_t v5 = qword_101D2DB80[v3];
    uint64_t result = _os_feature_enabled_impl();
    if (result)
    {
      if (v5 > 0xA || ((1 << v5) & 0x430) == 0) {
        break;
      }
    }
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t result = sub_1001005FC(v4, a2, v5, 0, 0, 1, Current);
    ++v3;
  }
  while (v3 != 11);
  return result;
}

id sub_1007DAC98(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  id result = [v3 isValidCKP];
  if (result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unint64_t v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      v9[0] = 68289282;
      v9[1] = 0;
      __int16 v10 = 2082;
      uint64_t v11 = "";
      __int16 v12 = 2114;
      id v13 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"clearing regions for client\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v9, 0x1Cu);
    }
    for (unsigned int i = 0; i != 4; ++i)
    {
      uint64_t v7 = sub_1007A69A8(i);
      double Current = CFAbsoluteTimeGetCurrent();
      id result = (id)sub_1001005FC(a1, (uint64_t)v3, v7, 0, 0, 0, Current);
    }
  }
  return result;
}

id sub_1007DADDC(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  id result = [v3 isValidCKP];
  if (result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unint64_t v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      v6[0] = 68289282;
      v6[1] = 0;
      __int16 v7 = 2082;
      CFStringRef v8 = "";
      __int16 v9 = 2114;
      id v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"clearing significant location change for client\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)v6, 0x1Cu);
    }
    return [*(id *)(a1 + 136) removeValueForKey:@"SignificantTimeStarted" atKeyPath:v3];
  }
  return result;
}

void sub_1007DAEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = TMGetRTCResetCount();
  [*(id *)(v4 + 136) doubleForKey:@"AuthorizationRegisterTime" atKeyPath:a2 defaultValue:-1.0];
  double v7 = v6;
  if ([*(id *)(v4 + 136) BOOLForKey:@"Authorization" atKeyPath:a2 defaultValue:0])
  {
    if (v7 == -1.0) {
      return;
    }
  }
  else
  {
    if ([*(id *)(v4 + 136) BOOLForKey:@"SupportedAuthorizationMask" atKeyPath:a2 defaultValue:0])BOOL v8 = v7 == -1.0; {
    else
    }
      BOOL v8 = 1;
    if (v8) {
      return;
    }
  }
  TMGetKernelMonotonicClock();
  double v10 = v9;
  if (v9 < v7)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v11 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO)) {
      goto LABEL_27;
    }
    uint64_t v20 = 68289794;
    *(_WORD *)int v21 = 2082;
    *(void *)&v21[2] = "";
    *(_WORD *)&v21[10] = 2114;
    *(void *)&v21[12] = a2;
    *(_WORD *)&v21[20] = 2050;
    *(double *)&v21[22] = v10;
    *(_WORD *)&v21[30] = 2050;
    double v22 = v7;
    __int16 v12 = "{\"msg%{public}.0s\":\"#warning #appclip entry has TMMonotonicClock registration time in the future??\", \"Cli"
          "ent\":%{public, location:escape_only}@, \"now\":\"%{public}f\", \"timeGivenAuth\":\"%{public}f\"}";
    id v13 = v11;
    os_log_type_t v14 = OS_LOG_TYPE_INFO;
    uint32_t v15 = 48;
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, (uint8_t *)&v20, v15);
LABEL_27:
    [*(id *)(a1 + 32) addObject:a2, v20, *(_OWORD *)v21, *(_OWORD *)&v21[16], *(void *)&v22, v23];
    return;
  }
  if (v5)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v16 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v20 = 68289282;
      *(_WORD *)int v21 = 2082;
      *(void *)&v21[2] = "";
      *(_WORD *)&v21[10] = 1026;
      *(_DWORD *)&v21[12] = v5;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#appclip detected RTC reset count > 1\", \"rtcResetCount\":%{public}u}", (uint8_t *)&v20, 0x18u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    __int16 v17 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v20 = 68289282;
      *(_WORD *)int v21 = 2082;
      *(void *)&v21[2] = "";
      *(_WORD *)&v21[10] = 1026;
      *(_DWORD *)&v21[12] = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#appclip detected RTC reset count > 1", "{\"msg%{public}.0s\":\"#appclip detected RTC reset count > 1\", \"rtcResetCount\":%{public}u}", (uint8_t *)&v20, 0x18u);
    }
    goto LABEL_27;
  }
  if (v9 - v7 > *(double *)(a1 + 48))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v18 = qword_102419538;
    if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
      goto LABEL_27;
    }
    uint64_t v20 = 68290050;
    *(_WORD *)int v21 = 2082;
    *(void *)&v21[2] = "";
    *(_WORD *)&v21[10] = 2114;
    *(void *)&v21[12] = a2;
    *(_WORD *)&v21[20] = 2050;
    *(double *)&v21[22] = v10;
    *(_WORD *)&v21[30] = 2050;
    double v22 = v7;
    LOWORD(v23) = 2050;
    *(double *)((char *)&v23 + 2) = v10 - v7;
    __int16 v12 = "{\"msg%{public}.0s\":\"#appclip client authorization has gone on long enough! PURGE!\", \"Client\":%{public, l"
          "ocation:escape_only}@, \"now\":\"%{public}f\", \"timeGivenAuth\":\"%{public}f\", \"delta\":\"%{public}f\"}";
    id v13 = v18;
    os_log_type_t v14 = OS_LOG_TYPE_DEBUG;
    uint32_t v15 = 58;
    goto LABEL_13;
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v19 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v20 = 68289794;
    *(_WORD *)int v21 = 2082;
    *(void *)&v21[2] = "";
    *(_WORD *)&v21[10] = 2114;
    *(void *)&v21[12] = a2;
    *(_WORD *)&v21[20] = 2050;
    *(double *)&v21[22] = v10;
    *(_WORD *)&v21[30] = 2050;
    double v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#appclip client is spared from the PURGE... for now\", \"Client\":%{public, location:escape_only}@, \"now\":\"%{public}f\", \"timeGivenAuth\":\"%{public}f\"}", (uint8_t *)&v20, 0x30u);
  }
}

uint64_t sub_1007DB358(uint64_t a1)
{
  return CFUserNotificationCancel(*(CFUserNotificationRef *)(a1 + 32));
}

uint64_t sub_1007DB360(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1007E1E64(result);
    operator delete();
  }
  return result;
}

double sub_1007DB3B0(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 272) + 64);
}

uint64_t sub_1007DB3BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1061);
}

void sub_1007DB3C4(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  unsigned int v7 = [*(id *)(v6 + 136) intForKey:@"Authorization" atKeyPath:a2 defaultValue:0];
  if (v7 == 4)
  {
    int v8 = [*(id *)(v6 + 136) intForKey:@"ConsumptionPeriodBegin" atKeyPath:a2 defaultValue:0];
    if (v8)
    {
      double v9 = (*(double *)(a1 + 40) - (double)v8) / *(double *)(a1 + 48);
      if (v9 < 1.0)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v10 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)uint64_t buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)uint64_t v26 = 2082;
          *(void *)&v26[2] = "";
          *(_WORD *)&v26[10] = 2114;
          *(void *)&v26[12] = a2;
          __int16 v27 = 2050;
          *(double *)int v28 = v9;
          uint64_t v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client with consumptionPeriodElapsed < 1.0\", \"Client\":%{"
                "public, location:escape_only}@, \"consumptionPeriodElapsed\":\"%{public}f\"}";
          __int16 v12 = v10;
          uint32_t v13 = 38;
LABEL_23:
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, v11, buf, v13);
          return;
        }
        return;
      }
      if (([*(id *)(v6 + 136) isKeyPathRegisteredSystemService:a2] & 1) != 0
        || sub_1007BEA4C(v6, a2))
      {
        [*(id *)(v6 + 136) setDouble:@"ConsumptionPeriodBegin" forKey:a2 atKeyPath:CFAbsoluteTimeGetCurrent() + 31536000.0];
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v16 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v26 = 2082;
        *(void *)&v26[2] = "";
        *(_WORD *)&v26[10] = 2114;
        *(void *)&v26[12] = a2;
        uint64_t v11 = "{\"msg%{public}.0s\":\"denying #reprompt for System Service\", \"Client\":%{public, location:escape_only}@}";
      }
      else
      {
        if (a2)
        {
          [a2 cppClientKey];
        }
        else
        {
          *(void *)uint64_t buf = 0;
          *(void *)uint64_t v26 = 0;
          *(void *)&v26[8] = 0;
        }
        char v24 = buf;
        int v17 = *((_DWORD *)sub_100105304(v6 + 440, buf, (uint64_t)&unk_101D0B290, (long long **)&v24) + 12);
        if ((v26[15] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v17)
        {
          int v18 = [*(id *)(v6 + 136) intForKey:@"ConsumptionCoolingRate" atKeyPath:a2 defaultValue:0];
          int v19 = [*(id *)(v6 + 136) intForKey:@"NextConsumptionThresholdScore" atKeyPath:a2 defaultValue:0x7FFFFFFFLL];
          if (*(double *)(a1 + 48) == 259200.0)
          {
            if (v18 > 2) {
              int v18 = 0;
            }
            double v20 = pow(dbl_101D2DC68[v18], v9) * (double)v17;
            if (v20 <= (double)v19)
            {
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
              uint64_t v21 = qword_102419538;
              if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)uint64_t buf = 68289794;
                *(_DWORD *)&uint8_t buf[4] = 0;
                *(_WORD *)uint64_t v26 = 2082;
                *(void *)&v26[2] = "";
                *(_WORD *)&v26[10] = 2114;
                *(void *)&v26[12] = a2;
                __int16 v27 = 1026;
                *(_DWORD *)int v28 = v19;
                *(_WORD *)&v28[4] = 1026;
                *(_DWORD *)&void v28[6] = (int)v20;
                uint64_t v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client, threshold not reached\", \"Client\":%{public,"
                      " location:escape_only}@, \"nextConsumptionThresholdScore\":%{public}d, \"exponentiatedScore\":%{public}d}";
                __int16 v12 = v21;
                uint32_t v13 = 40;
                goto LABEL_23;
              }
              return;
            }
          }
          else
          {
            double v20 = -1.0;
          }
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          double v22 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
          {
            uint64_t v23 = *(void *)(a1 + 48);
            *(_DWORD *)uint64_t buf = 68290818;
            *(_DWORD *)&uint8_t buf[4] = 0;
            *(_WORD *)uint64_t v26 = 2082;
            *(void *)&v26[2] = "";
            *(_WORD *)&v26[10] = 2114;
            *(void *)&v26[12] = a2;
            __int16 v27 = 2050;
            *(void *)int v28 = v23;
            *(_WORD *)&std::string::value_type v28[8] = 2050;
            double v29 = v9;
            __int16 v30 = 1026;
            int v31 = v17;
            __int16 v32 = 1026;
            int v33 = v18;
            __int16 v34 = 2050;
            double v35 = v20;
            __int16 v36 = 1026;
            int v37 = v19;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Getting #reprompt info for client\", \"clientKeyPath\":%{public, location:escape_only}@, \"effectiveTrialRepromptInterval\":\"%{public}f\", \"consumptionPeriodsElapsed\":\"%{public}f\", \"runningScore\":%{public}d, \"curCooling\":%{public}d, \"exponentiatedScore\":\"%{public}f\", \"exponentiatedScoreThreshold\":%{public}d}", buf, 0x4Cu);
          }
          [*(id *)(v6 + 136) setDouble:@"ConsumptionPeriodBegin" forKey:a2 atKeyPath:CFAbsoluteTimeGetCurrent()];
          [*(id *)(v6 + 136) setInt:(int)(float)((float)v17 + (float)v17) forKey:@"NextNextConsumptionThresholdScore" atKeyPath:a2];
          [*(id *)(v6 + 136) persist];
          sub_1007DBAD0(v6, (uint64_t)a2);
          *a3 = 1;
          return;
        }
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v16 = qword_102419538;
        if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
          return;
        }
        *(_DWORD *)uint64_t buf = 68289282;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)uint64_t v26 = 2082;
        *(void *)&v26[2] = "";
        *(_WORD *)&v26[10] = 2114;
        *(void *)&v26[12] = a2;
        uint64_t v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client with no consumption score\", \"Client\":%{public, loca"
              "tion:escape_only}@}";
      }
    }
    else
    {
      [*(id *)(v6 + 136) setDouble:@"ConsumptionPeriodBegin" forKey:a2 atKeyPath:CFAbsoluteTimeGetCurrent()];
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v16 = qword_102419538;
      if (!os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG)) {
        return;
      }
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)uint64_t v26 = 2082;
      *(void *)&v26[2] = "";
      *(_WORD *)&v26[10] = 2114;
      *(void *)&v26[12] = a2;
      uint64_t v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client without consumptionPeriodBegin\", \"Client\":%{public, l"
            "ocation:escape_only}@}";
    }
    __int16 v12 = v16;
    uint32_t v13 = 28;
    goto LABEL_23;
  }
  unsigned int v14 = v7;
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v15 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_WORD *)uint64_t v26 = 2082;
    *(void *)&v26[2] = "";
    *(_WORD *)&v26[10] = 2114;
    *(void *)&v26[12] = a2;
    __int16 v27 = 1026;
    *(_DWORD *)int v28 = v14;
    uint64_t v11 = "{\"msg%{public}.0s\":\"denying #reprompt for client without Always auth\", \"Client\":%{public, location:escap"
          "e_only}@, \"Auth\":%{public}d}";
    __int16 v12 = v15;
    uint32_t v13 = 34;
    goto LABEL_23;
  }
}

void sub_1007DBAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007DBAD0(uint64_t a1, uint64_t a2)
{
  id v5 = sub_100103E24(a1, a2);
  v13[0] = 0;
  v13[1] = v13;
  _OWORD v13[2] = 0x3052000000;
  v13[3] = sub_1001779D4;
  v13[4] = sub_100177370;
  unsigned int v14 = 0;
  unsigned int v14 = [[CLOSTransaction alloc] initWithDescription:"com.apple.locationd.reading-score-archive"];
  uint64_t v6 = +[NSMutableArray arrayWithCapacity:0];
  unsigned int v7 = *(void **)(a1 + 480);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1007DEF14;
  void v12[3] = &unk_1022C9638;
  v12[4] = v6;
  sub_1007AC7C4(v7, (uint64_t)v5, (uint64_t)v12);
  if (v6 && [(NSMutableArray *)v6 count])
  {
    double Current = CFAbsoluteTimeGetCurrent();
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t buf = 68289282;
      __int16 v16 = 2082;
      int v17 = "";
      __int16 v18 = 2114;
      id v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#reprompt preparePromptFromConsumptionScore\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    }
    uint64_t v10 = *(void **)(a1 + 496);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    int v11[2] = sub_1007DEF78;
    void v11[3] = &unk_1022C9660;
    v11[4] = v5;
    void v11[5] = v13;
    [v10 getStoredLocationsBetweenStartTime:v6 endTime:v11 apartFromEachOther:Current + -259200.0 lyingWithinTimeIntervals:Current withReply:300.0];
  }
  _Block_object_dispose(v13, 8);
}

void sub_1007DBD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1007DBD74(const void *a1, uint64_t a2)
{
  CFRetain(a1);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1007E2134;
  v5[3] = &unk_1022C9848;
  v5[4] = a1;
  void v5[5] = a2;
  return [(id)qword_10247E178 doAsync:v5];
}

void sub_1007DBDFC(uint64_t a1, CFTypeRef cf, double a3)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = *(const void **)(a1 + 48);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)(a1 + 48) = cf;
  *(double *)(a1 + 64) = a3;
}

uint64_t sub_1007DBE4C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    id v6 = sub_100103D58(a1, a2);
  }
  else
  {
    id v6 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
    uint64_t result = (uint64_t)[v6 isValidCKP];
    if (!result) {
      return result;
    }
  }
  unsigned int v8 = [*(id *)(a1 + 136) BOOLForKey:@"BackgroundIndicatorEnabled" atKeyPath:v6 defaultValue:0];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  double v9 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 68289794;
    v10[1] = 0;
    __int16 v11 = 2082;
    __int16 v12 = "";
    __int16 v13 = 2114;
    id v14 = v6;
    __int16 v15 = 1026;
    unsigned int v16 = v8;
    __int16 v17 = 2050;
    uint64_t v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"update client background indicator enabled\", \"Client\":%{public, location:escape_only}@, \"old\":%{public}d, \"new\":%{public}lu}", (uint8_t *)v10, 0x2Cu);
  }
  [*(id *)(a1 + 136) setBool:a3 forKey:@"BackgroundIndicatorEnabled" atKeyPath:v6];
  [*(id *)(a1 + 136) persist];
  sub_1007DD1F4(a1, (uint64_t)v6);
  return 1;
}

id sub_1007DBFE0(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  id result = [v3 isValidCKP];
  if (result) {
    return (id)(([*(id *)(a1 + 136) intForKey:@"Authorization" atKeyPath:v3 defaultValue:0] & 6) != 0);
  }
  return result;
}

void sub_1007DC03C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  id v6 = [*(id *)(a1 + 136) registeredKeyPathForClientIdentifier:a2];
  if ([v6 isValidCKP])
  {
    unsigned int v7 = *(void **)(a1 + 136);
    if (*((char *)a3 + 23) >= 0) {
      unsigned int v8 = a3;
    }
    else {
      unsigned int v8 = (uint64_t *)*a3;
    }
    double v9 = +[NSString stringWithUTF8String:v8];
    [v7 setString:v9 forKey:@"AuthorizationPurposeKey" atKeyPath:v6];
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2114;
      uint64_t v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"setClientAuthorizationPurposeKey for an app we don't have an entry for\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x1Cu);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    __int16 v11 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      int v12 = 68289282;
      int v13 = 0;
      __int16 v14 = 2082;
      __int16 v15 = "";
      __int16 v16 = 2114;
      uint64_t v17 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "setClientAuthorizationPurposeKey for an app we don't have an entry for", "{\"msg%{public}.0s\":\"setClientAuthorizationPurposeKey for an app we don't have an entry for\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v12, 0x1Cu);
    }
  }
}

id sub_1007DC25C(uint64_t a1, uint64_t a2)
{
  id v3 = sub_100103E24(a1, a2);
  id v4 = [*(id *)(a1 + 136) BOOLForKey:@"AuthorizationUpgradeAvailable" atKeyPath:v3 defaultValue:1];
  [*(id *)(a1 + 136) setBool:0 forKey:@"AuthorizationUpgradeAvailable" atKeyPath:v3];
  [*(id *)(a1 + 136) persist];
  return v4;
}

id sub_1007DC2D0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  id v7 = sub_100103E24(a1, a2);
  if ([v7 isAuthSharingSubIdentity]) {
    id v7 = [v7 anchorKeyPath];
  }
  unsigned int v8 = *(void **)(a1 + 136);
  if (!a3)
  {
    [v8 setBool:1 forKey:@"ProvisionalMonitoring" atKeyPath:v7];
    [*(id *)(a1 + 136) setDouble:@"ProvisionalMonitoringBegin" forKey:v7 atKeyPath:CFAbsoluteTimeGetCurrent()];
    return [*(id *)(a1 + 136) persist];
  }
  [v8 removeValueForKey:@"ProvisionalMonitoring" atKeyPath:v7];
  [*(id *)(a1 + 136) removeValueForKey:@"ProvisionalMonitoringBegin" atKeyPath:v7];
  [*(id *)(a1 + 136) setBool:0 forKey:@"AuthorizationUpgradeAvailable" atKeyPath:v7];
  double v9 = *(unsigned __int8 **)(a1 + 264);
  if (v9)
  {
    if (v7)
    {
      [v7 cppClientKey];
      LODWORD(v7) = HIBYTE(v28);
      uint64_t v10 = v27;
    }
    else
    {
      uint64_t v10 = 0;
      std::string __p = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
    }
    uint64_t v11 = v9[23];
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = v9[23];
    }
    else {
      uint64_t v12 = *((void *)v9 + 1);
    }
    if ((char)v7 >= 0) {
      uint64_t v10 = v7;
    }
    if (v12 != v10)
    {
      BOOL v21 = 0;
      if ((v7 & 0x80) == 0) {
        goto LABEL_31;
      }
      goto LABEL_34;
    }
    if ((char)v7 >= 0) {
      p_p = (unsigned __int8 *)&__p;
    }
    else {
      p_p = (unsigned __int8 *)__p;
    }
    if ((v11 & 0x80) != 0)
    {
      BOOL v21 = memcmp(*(const void **)v9, p_p, *((void *)v9 + 1)) == 0;
    }
    else
    {
      if (!v9[23])
      {
        BOOL v21 = 1;
        if ((v7 & 0x80) == 0)
        {
LABEL_31:
          if (!v21) {
            return [*(id *)(a1 + 136) persist];
          }
LABEL_35:
          double v22 = (uint64_t *)(a1 + 264);
          if (a4)
          {
            uint64_t v23 = *(void *)(a1 + 288);
            if (v23)
            {
              (*(void (**)(uint64_t, void))(v23 + 16))(v23, 0);

              *(void *)(a1 + 288) = 0;
            }
          }
          uint64_t v24 = *v22;
          *double v22 = 0;
          if (v24) {
            sub_10068D784(a1 + 264, v24);
          }
          *(unsigned char *)(a1 + 280) = 0;
          return [*(id *)(a1 + 136) persist];
        }
LABEL_34:
        operator delete(__p);
        if (!v21) {
          return [*(id *)(a1 + 136) persist];
        }
        goto LABEL_35;
      }
      uint64_t v14 = v11 - 1;
      do
      {
        int v16 = *v9++;
        int v15 = v16;
        int v18 = *p_p++;
        int v17 = v18;
        BOOL v20 = v14-- != 0;
        BOOL v21 = v15 == v17;
      }
      while (v15 == v17 && v20);
    }
    if ((v7 & 0x80) == 0) {
      goto LABEL_31;
    }
    goto LABEL_34;
  }
  return [*(id *)(a1 + 136) persist];
}

BOOL sub_1007DC4D4(uint64_t a1, int a2)
{
  strcpy(v16, "SBParentalControlsCapabilities");
  memset(&v14, 0, sizeof(v14));
  sub_10051F6A8((uint64_t)v13, @"com.apple.springboard", 1, @"mobile");
  BOOL v12 = 0;
  if (a2) {
    sub_10051F604((uint64_t)v13);
  }
  int v3 = sub_1000D2988((uint64_t)v13, "SBParentalControlsEnabled", &v12);
  if (v12) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v4 == 1 && (int v5 = sub_1004D5D9C((uint64_t)v13, v16), v12 = 0, v5 >= 1))
  {
    for (int i = 0; i < v5; ++i)
    {
      if (!sub_1004D1284((uint64_t)v13, v16, &v14))
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        id v7 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)uint64_t buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "NameValuePair::get failed despite our bounds checking", buf, 2u);
        }
        if (sub_10013D1A0(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v10 = (char *)_os_log_send_and_compose_impl();
          sub_1004BA5E4("Generic", 1, 0, 0, "BOOL CLClientManager::areParentalControlsEnabled(BOOL)", "%s\n", v10);
          if (v10 != (char *)buf) {
            free(v10);
          }
        }
      }
      int v8 = std::string::compare(&v14, "location");
      BOOL v9 = v8 == 0;
      BOOL v12 = v8 == 0;
      if (!v8) {
        break;
      }
    }
  }
  else
  {
    BOOL v9 = 0;
  }
  sub_10051F740(v13);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return v9;
}

void sub_1007DC788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1007DC7C0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_100134750(__p, "");
  sub_1001341F0(v3, a2, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1007DC81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007DC838(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  sub_1007A6298(v4, (uint64_t)a2, 10);
  sub_1007A6298(v4, (uint64_t)a2, 4);
  char v5 = [*(id *)(v4 + 392) objectForKeyedSubscript:a2];
  if (v5)
  {
    dispatch_source_cancel(v5);
    [*(id *)(v4 + 392) removeObjectForKey:a2];
  }
  sub_100138C88(v4, *(void **)(v4 + 480), (void *)(v4 + 440), a2);
  if (_os_feature_enabled_impl()) {
    sub_100138C88(v4, *(void **)(v4 + 544), (void *)(v4 + 504), a2);
  }
  int v6 = sub_1007A6298(v4, (uint64_t)a2, 5);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10247E158, memory_order_acquire) & 1) == 0)
  {
    int v25 = v6;
    int v26 = __cxa_guard_acquire(&qword_10247E158);
    int v6 = v25;
    if (v26)
    {
      BOOL v27 = objc_opt_class() && objc_opt_class() && objc_opt_class() && objc_opt_class() && objc_opt_class() != 0;
      byte_10247E150 = v27;
      __cxa_guard_release(&qword_10247E158);
      int v6 = v25;
    }
  }
  if (byte_10247E150) {
    int v7 = v6;
  }
  else {
    int v7 = 0;
  }
  if (v7 == 1 && *(unsigned char *)(a1 + 40))
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    int v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Resuming client\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (a2)
    {
      [a2 clientName];
    }
    else
    {
      uint64_t v54 = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      *(_OWORD *)uint8_t v51 = 0u;
      long long v48 = 0u;
      *(_OWORD *)uint64_t v49 = 0u;
      *(_OWORD *)uint64_t v46 = 0u;
      *(_OWORD *)uint64_t v47 = 0u;
      long long v45 = 0u;
      memset(buf, 0, sizeof(buf));
    }
    if ([a2 bundleId])
    {
      id v9 = [a2 bundleId];
      uint64_t v29 = 0;
      id v10 = +[RBSProcessHandle handleForPredicate:error:](RBSProcessHandle, "handleForPredicate:error:", +[RBSProcessPredicate predicateMatchingBundleIdentifier:v9], &v29);
      uint64_t v11 = v10;
      *(void *)uint64_t v39 = 0;
      *(void *)&long long v40 = v39;
      *((void *)&v40 + 1) = 0x3052000000;
      uint64_t v41 = sub_1001779D4;
      uint64_t v42 = sub_100177370;
      uint64_t v43 = 0;
      if (!v10 || ([v10 pid] & 0x80000000) != 0)
      {
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        int v18 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
        {
          id v19 = [a2 bundleId];
          *(_DWORD *)__int16 v30 = 68289538;
          int v31 = 0;
          __int16 v32 = 2082;
          int v33 = "";
          __int16 v34 = 2114;
          id v35 = v19;
          __int16 v36 = 2114;
          uint64_t v37 = v29;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Failed to get the process handle\", \"bundleID\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", v30, 0x26u);
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        BOOL v20 = qword_102419538;
        if (os_signpost_enabled((os_log_t)qword_102419538))
        {
          id v21 = [a2 bundleId];
          *(_DWORD *)__int16 v30 = 68289538;
          int v31 = 0;
          __int16 v32 = 2082;
          int v33 = "";
          __int16 v34 = 2114;
          id v35 = v21;
          __int16 v36 = 2114;
          uint64_t v37 = v29;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Warning Failed to get the process handle", "{\"msg%{public}.0s\":\"#Warning Failed to get the process handle\", \"bundleID\":%{public, location:escape_only}@, \"error\":%{public, location:escape_only}@}", v30, 0x26u);
        }
      }
      else
      {
        __int16 v38 = +[RBSDomainAttribute attributeWithDomain:@"com.apple.locationd" name:@"Location"];
        id v12 = [objc_alloc((Class)RBSAssertion) initWithExplanation:@"locationd-resume-on-crash" target:[RBSTarget targetWithPid:](RBSTarget, "targetWithPid:", objc_msgSend(v11, "pid")) attributes:[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v38, 1)];
        *(void *)(v40 + 40) = v12;
        if (!v12)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          int v13 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            id v14 = [v9 UTF8String];
            *(_DWORD *)__int16 v30 = 68289538;
            int v31 = 0;
            __int16 v32 = 2082;
            int v33 = "";
            __int16 v34 = 2082;
            id v35 = v14;
            __int16 v36 = 2114;
            uint64_t v37 = v29;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#warning Failed to resume: init failure\", \"client\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", v30, 0x26u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          int v15 = qword_102419538;
          if (os_signpost_enabled((os_log_t)qword_102419538))
          {
            id v16 = [v9 UTF8String];
            *(_DWORD *)__int16 v30 = 68289538;
            int v31 = 0;
            __int16 v32 = 2082;
            int v33 = "";
            __int16 v34 = 2082;
            id v35 = v16;
            __int16 v36 = 2114;
            uint64_t v37 = v29;
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#warning Failed to resume: init failure", "{\"msg%{public}.0s\":\"#warning Failed to resume: init failure\", \"client\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", v30, 0x26u);
          }
        }
        if ([*(id *)(v40 + 40) acquireWithError:&v29])
        {
          int v17 = *(void **)(v4 + 40);
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472;
          double v28[2] = sub_1007DD118;
          v28[3] = &unk_1022B6BE8;
          v28[4] = v39;
          [v17 afterInterval:v28 async:10.0];
        }
        else
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v23 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
          {
            id v24 = [v9 UTF8String];
            *(_DWORD *)__int16 v30 = 68289538;
            int v31 = 0;
            __int16 v32 = 2082;
            int v33 = "";
            __int16 v34 = 2082;
            id v35 = v24;
            __int16 v36 = 2114;
            uint64_t v37 = v29;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Failed to resume: assertion not acquired\", \"client\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", v30, 0x26u);
          }
        }
      }
      _Block_object_dispose(v39, 8);
    }
    else
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      double v22 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v39 = 68289026;
        *(_DWORD *)&v39[4] = 0;
        LOWORD(v40) = 2082;
        *(void *)((char *)&v40 + 2) = "";
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Non-app client is/was a background client?\"}", v39, 0x12u);
      }
    }
    if (SHIBYTE(v53) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v51[0]);
    }
    if (SHIBYTE(v50) < 0) {
      operator delete(v49[1]);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(v47[1]);
    }
    if (SHIBYTE(v47[0]) < 0) {
      operator delete(v46[0]);
    }
    if (SHIBYTE(v45) < 0) {
      operator delete(*(void **)&buf[24]);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_1007DD0AC(_Unwind_Exception *a1)
{
}

void sub_1007DD118(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = 0;
}

unsigned char *sub_1007DD164(uint64_t a1)
{
  return sub_100105FDC(*(unsigned char **)(a1 + 32));
}

void sub_1007DD16C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if ([*(id *)(v3 + 136) isKeyPathRegisteredSystemService:a2])
  {
    sub_100134750(__p, "");
    sub_1001341F0(v3, a2, (uint64_t)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1007DD1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007DD1F4(uint64_t a1, uint64_t a2)
{
  id v3 = sub_100103E24(a1, a2);
  char v4 = sub_1001B3AA0(a1, (uint64_t)v3);
  char v5 = *(void **)(a1 + 816);
  int v6 = (void *)(a1 + 824);
  if (v5 != v6)
  {
    char v7 = v4;
    do
    {
      if (objc_msgSend(sub_100138248(v5[5], 0), "isEqual:", v3)) {
        sub_1001BD808(v5[5], v7);
      }
      int v8 = (void *)v5[1];
      if (v8)
      {
        do
        {
          id v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          id v9 = (void *)v5[2];
          BOOL v10 = *v9 == (void)v5;
          char v5 = v9;
        }
        while (!v10);
      }
      char v5 = v9;
    }
    while (v9 != v6);
  }
}

NSDictionary *sub_1007DD2A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  [(NSDate *)[(NSDictionary *)[+[NSFileManager defaultManager] attributesOfItemAtPath:*(void *)(a1 + 32) error:&v8] fileModificationDate] timeIntervalSinceReferenceDate];
  double v4 = 0.0;
  if (v3 > 0.0)
  {
    double v5 = v3;
    [*(id *)(v2 + 40) currentLatchedAbsoluteTimestamp];
    double v4 = v6 - v5;
  }
  v9[0] = @"ClientKey";
  v10[0] = [*(id *)(a1 + 40) userlessClientKeyPath];
  v9[1] = @"KeepAsIs";
  v10[1] = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 76)];
  _DWORD v9[2] = @"RepromptAge";
  _DWORD v10[2] = +[NSNumber numberWithDouble:v4];
  void v9[3] = @"PriorCooling";
  v10[3] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 56)];
  v9[4] = @"PriorThreshold";
  v10[4] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 60)];
  v9[5] = @"NewCooling";
  void v10[5] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 64)];
  void v9[6] = @"NewThreshold";
  v10[6] = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 68)];
  v9[7] = @"CurrentUsage";
  v10[7] = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 72)];
  return +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:8];
}

id sub_1007DD438(uint64_t a1, void *a2)
{
  id result = [a2 subIdentityType];
  if (result == 122) {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  }
  return result;
}

void sub_1007DD47C(unsigned int *a1)
{
  if (*((void *)a1 + 5))
  {
    if (qword_102419520 != -1) {
      dispatch_once(&qword_102419520, &stru_1022C97E8);
    }
    uint64_t v2 = qword_102419528;
    if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *((void *)a1 + 1);
      uint64_t v4 = *a1;
      *(_DWORD *)uint64_t buf = 68289538;
      int v14 = 0;
      __int16 v15 = 2082;
      id v16 = "";
      __int16 v17 = 2114;
      uint64_t v18 = v3;
      __int16 v19 = 2050;
      uint64_t v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt AuthorizationRequest completion\", \"ClientKey\":%{public, location:escape_only}@, \"RequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
    }
    (*(void (**)(void))(*((void *)a1 + 5) + 16))();

    *((void *)a1 + 5) = 0;
    *a1 = 0;

    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 6);
    if (v5)
    {
      *((void *)a1 + 6) = 0;
      double v6 = (__CFRunLoop *)sub_1001C2710();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1007E2434;
      block[3] = &unk_1022A3020;
      block[4] = v5;
      CFRunLoopPerformBlock(v6, kCFRunLoopCommonModes, block);
    }
    id v9 = (void *)*((void *)a1 + 7);
    uint64_t v8 = a1 + 14;
    char v7 = v9;
    if (v9) {

    }
    *uint64_t v8 = 0;
    v8[1] = 0;
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v10 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v14 = 0;
      __int16 v15 = 2082;
      id v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Request was completed multiple times\"}", buf, 0x12u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    uint64_t v11 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      *(_DWORD *)uint64_t buf = 68289026;
      int v14 = 0;
      __int16 v15 = 2082;
      id v16 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Request was completed multiple times", "{\"msg%{public}.0s\":\"Request was completed multiple times\"}", buf, 0x12u);
    }
  }
}

void sub_1007DD758(uint64_t a1, const char *a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v3 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "";
    if (a2) {
      uint64_t v4 = a2;
    }
    *(_DWORD *)uint64_t buf = 136446210;
    id v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "open preferences with url, %{public}s", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v9 = "";
    if (a2) {
      id v9 = a2;
    }
    int v13 = 136446210;
    int v14 = v9;
    BOOL v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::openPreferences(const char *const)", "%s\n", v10);
    if (v10 != (char *)buf) {
      free(v10);
    }
  }
  uint64_t v5 = +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:a2]);
  if (v5)
  {
    double v6 = v5;
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007DDAF0;
    block[3] = &unk_10229FED8;
    block[4] = v6;
    dispatch_async(global_queue, block);
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v8 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uint64_t buf = 136446210;
      id v16 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Couldn't create Preferences URL, %{public}s", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v13 = 136446210;
      int v14 = a2;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::openPreferences(const char *const)", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
}

void sub_1007DDAF0(uint64_t a1)
{
  if ((objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "openSensitiveURL:withOptions:", *(void *)(a1 + 32), 0) & 1) == 0)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v3 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "could not launch Preferences", buf, 2u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::openPreferences(const char *const)_block_invoke", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
}

void sub_1007DDCB0(uint64_t a1, uint64_t a2, int *a3)
{
  if (*a3)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v4 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      int v5 = *a3;
      *(_DWORD *)uint64_t buf = 67240192;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unknown notification: %{public}d", buf, 8u);
    }
    if (sub_10013D1A0(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      double v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "void CLClientManager::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  else
  {
    sub_100134750(buf, "com.apple.locationd.darwin_notification");
    sub_1007A564C(a1, (uint64_t *)buf, 1);
    if (v9 < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_1007DDEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007DDEC4(uint64_t result, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  if (*a3 == 8)
  {
    uint64_t v4 = result;
    int v5 = *a4;
    *(unsigned char *)(result + 1056) = v5;
    if (!v5)
    {
      for (int i = *(double **)(result + 1032); i != *(double **)(v4 + 1040); i += 4)
      {
        double Current = CFAbsoluteTimeGetCurrent();
        id result = sub_1007D17F0(i, Current);
      }
    }
  }
  return result;
}

void sub_1007DDF20(uint64_t a1, uint64_t a2, _DWORD *a3, unsigned __int8 *a4)
{
  if (*a3 == 1)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *a4;
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 1026;
      int v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"wifi power state\", \"power\":%{public}d}", (uint8_t *)&v11, 0x18u);
    }
    int v8 = *a4;
    *(unsigned char *)(a1 + 1057) = v8 ^ 1;
    if (v8)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      char v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"wifi enabled\"}", (uint8_t *)&v11, 0x12u);
      }
      for (int i = *(void **)(a1 + 1032); i != *(void **)(a1 + 1040); i += 4)
      {
        if (!*i)
        {
          sub_1007D1480(i);
          return;
        }
      }
    }
  }
}

void sub_1007DE0E0(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4)
{
  sub_100103240();
  if (sub_1001037EC())
  {
    int v7 = *a3;
    if (*a3 == 2)
    {
      if (*a4 != 7) {
        sub_101A6F248();
      }
      uint64_t v8 = 8;
    }
    else if (v7 == 1)
    {
      if (*a4 != 4) {
        sub_101A6F21C();
      }
      uint64_t v8 = 4;
    }
    else
    {
      if (v7) {
        goto LABEL_15;
      }
      if (*a4 != 3) {
        sub_101A6F1F0();
      }
      uint64_t v8 = 2;
    }
    if (*((unsigned char *)a4 + 4)) {
      unint64_t v9 = *(void *)(a1 + 424) | v8;
    }
    else {
      unint64_t v9 = *(void *)(a1 + 424) & ~v8;
    }
    *(void *)(a1 + 424) = v9;
    BOOL v10 = *(void **)(a1 + 400);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1007DE57C;
    void v26[3] = &unk_1022C95E8;
    v26[4] = (v9 >> 2) & 2 | v9;
    v26[5] = v8;
    [v10 updateVolatileData:v26 completion:0];
  }
LABEL_15:
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    if (*a3 || *a4 != 3)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v16 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        uint64_t v17 = *a3;
        uint64_t v18 = *a4;
        uint64_t v41 = 68289538;
        __int16 v42 = 2082;
        *(void *)uint64_t v43 = "";
        *(_WORD *)&v43[8] = 2050;
        *(void *)&v43[10] = v17;
        __int16 v44 = 2050;
        uint64_t v45 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#sbim unsupported system system service notification for entity\", \"notification\":%{public, location:CLStatusBarIconManager_Type::Notification}lld, \"entityClass\":%{public, location:CLStatusBarIconManager_Type::EntityClass}lld}", (uint8_t *)&v41, 0x26u);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
      }
      __int16 v19 = qword_102419538;
      if (os_signpost_enabled((os_log_t)qword_102419538))
      {
        uint64_t v20 = *a3;
        uint64_t v21 = *a4;
        uint64_t v41 = 68289538;
        __int16 v42 = 2082;
        *(void *)uint64_t v43 = "";
        *(_WORD *)&v43[8] = 2050;
        *(void *)&v43[10] = v20;
        __int16 v44 = 2050;
        uint64_t v45 = v21;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#sbim unsupported system system service notification for entity", "{\"msg%{public}.0s\":\"#sbim unsupported system system service notification for entity\", \"notification\":%{public, location:CLStatusBarIconManager_Type::Notification}lld, \"entityClass\":%{public, location:CLStatusBarIconManager_Type::EntityClass}lld}", (uint8_t *)&v41, 0x26u);
      }
    }
    else
    {
      int v11 = *(unsigned __int8 *)(a1 + 1062);
      int v12 = *((unsigned __int8 *)a4 + 4);
      *(unsigned char *)(a1 + 1062) = v12;
      if (v11 != v12)
      {
        sub_1007E598C((uint64_t)&v41, a1 + 1488);
        memset(v24, 0, sizeof(v24));
        int v25 = 1065353216;
        memset(v22, 0, sizeof(v22));
        int v23 = 1065353216;
        __int16 v13 = *(const void ***)(a1 + 1504);
        uint64_t v33 = *(void *)&v43[6];
        int v31 = v13;
        __int16 v32 = 0;
        uint64_t v29 = 0;
        __int16 v30 = 0;
        uint64_t v28 = v24;
        sub_1007E5A04((unsigned __int8 *)&v33, &v32, &v31, &v30, (uint64_t *)&v28, (uint64_t)&v27, &buf);
        uint64_t v33 = *(void *)(a1 + 1504);
        int v31 = *(const void ***)&v43[6];
        __int16 v32 = 0;
        uint64_t v29 = 0;
        __int16 v30 = 0;
        uint64_t v28 = v22;
        sub_1007E5A04((unsigned __int8 *)&v33, &v32, &v31, &v30, (uint64_t *)&v28, (uint64_t)&v27, &buf);
        sub_1007DE5CC(a1, (uint64_t)v24);
        sub_1007DE650((id)a1, (uint64_t)v22);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        int v14 = qword_102419538;
        if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
        {
          int v15 = *(unsigned __int8 *)(a1 + 1062);
          uint64_t buf = (const void **)68289538;
          __int16 v35 = 2082;
          __int16 v36 = "";
          __int16 v37 = 1026;
          int v38 = v11;
          __int16 v39 = 1026;
          int v40 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim system service switch state changed\", \"from\":%{public}hhd, \"to\":%{public}hhd}", (uint8_t *)&buf, 0x1Eu);
        }
        sub_1002220F0((uint64_t)v22);
        sub_1002220F0((uint64_t)v24);
        sub_1002220F0((uint64_t)&v41);
      }
    }
  }
}

void sub_1007DE550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_1002220F0((uint64_t)&a9);
  sub_1002220F0((uint64_t)&a15);
  sub_1002220F0(v15 - 128);
  _Unwind_Resume(a1);
}

id sub_1007DE57C(uint64_t a1, void *a2, void *a3)
{
  [a2 setActiveDisplayModes:*(void *)(a1 + 32)];
  BOOL v5 = *(void *)(a1 + 40) == 2;

  return [a3 setUserInitiated:v5];
}

NSDictionary *sub_1007DE5CC(uint64_t a1, uint64_t a2)
{
  id result = +[NSDictionary dictionary];
  BOOL v5 = *(uint64_t **)(a2 + 16);
  if (v5)
  {
    double v6 = result;
    do
    {
      int v7 = v5 + 2;
      if (*((char *)v5 + 39) < 0) {
        int v7 = (void *)*v7;
      }
      id result = [(NSDictionary *)[*(id *)(a1 + 1528) client:didChangeUsageData:[+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v7) stringByAppendingString:v6]];
      BOOL v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return result;
}

id sub_1007DE650(id result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t)result;
    do
    {
      uint64_t v4 = (uint64_t)(v2 + 2);
      if (*((char *)v2 + 39) < 0) {
        uint64_t v4 = v2[2];
      }
      id result = [*(id *)(v3 + 1528) client:didChangeUsageData:[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4), sub_1007C9344(v3, v2 + 2)];
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  return result;
}

void sub_1007DE6D4(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  if (*a3 == 9)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    double v6 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
    {
      int v7 = *(unsigned __int8 *)(a4 + 113);
      int v11 = 68289282;
      int v12 = 0;
      __int16 v13 = 2082;
      int v14 = "";
      __int16 v15 = 1026;
      int v16 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"bluetooth power state\", \"power\":%{public}d}", (uint8_t *)&v11, 0x18u);
    }
    int v8 = *(unsigned __int8 *)(a4 + 113);
    *(unsigned char *)(a1 + 1058) = v8 ^ 1;
    if (v8)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      unint64_t v9 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
      {
        int v11 = 68289026;
        int v12 = 0;
        __int16 v13 = 2082;
        int v14 = "";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"bluetooth enabled\"}", (uint8_t *)&v11, 0x12u);
      }
      for (int i = *(void **)(a1 + 1032); i != *(void **)(a1 + 1040); i += 4)
      {
        if (*i == 1)
        {
          sub_1007D1480(i);
          return;
        }
      }
    }
  }
}

id sub_1007DE898(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(void **)(v4 + 136);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1007DE978;
  v7[3] = &unk_1022C8D78;
  v7[4] = v4;
  id result = [v5 iterateIdentitiesRelatedToKeyPath:a2 withBlock:v7];
  if (*(unsigned char *)(a1 + 40))
  {
    id result = [*(id *)(v4 + 136) isKeyPathRegisteredSystemService:a2];
    if (result)
    {
      id result = [*(id *)(v4 + 136) intForKey:@"Authorization" atKeyPath:a2 defaultValue:0];
      if (result == 4) {
        return [*(id *)(v4 + 136) removeValueForKey:@"Authorization" atKeyPath:a2];
      }
    }
  }
  return result;
}

id sub_1007DE978(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_1007DAC98(v3, a2);

  return sub_1007DADDC(v3, a2);
}

void sub_1007DE9BC()
{
}

void sub_1007DEA10()
{
}

id sub_1007DEA34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v3 = *(id *)(a1 + 32);
  id result = [*(id *)(v2 + 576) objectForKeyedSubscript:*(void *)(a1 + 40)];
  if (v3 == result)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)uint64_t buf = 68289282;
      *(_DWORD *)&uint8_t buf[4] = 0;
      __int16 v15 = 2082;
      int v16 = "";
      __int16 v17 = 2114;
      uint64_t v18 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth setTemporaryAuthorizationStatusInfoForClient releasing in use assertion\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    if (*(unsigned char *)(a1 + 64))
    {
      int v7 = (char *)[objc_msgSend(*(id *)(a1 + 40), "legacyClientKey") UTF8String];
      if (v7) {
        int v8 = v7;
      }
      else {
        int v8 = "";
      }
      sub_100134750(__p, v8);
      sub_1007AB2CC(v2, (uint64_t *)__p);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      [*(id *)(v2 + 584) removeObjectForKey:*(void *)(a1 + 48)];
      sub_1007AB170();
    }
    sub_100134750(buf, (char *)[*(id *)(a1 + 48) UTF8String]);
    sub_1007E5C20((uint64_t **)(v2 + 592), (const void **)buf);
    if (SBYTE3(v18) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v10 = *(void *)(a1 + 40);
    unint64_t v9 = (void *)(a1 + 40);
    [objc_msgSend(*(id *)(v2 + 576), "objectForKeyedSubscript:", v10) invalidate];
    int v11 = (id *)(v2 + 576);

    return [*v11 setObject:0 forKeyedSubscript:*v9];
  }
  return result;
}

void sub_1007DEBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007DEC30(uint64_t a1, xpc_activity_t activity)
{
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state)
  {
    if (state == 2)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v4 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "coreanalytics activity run", buf, 2u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::registerAnalyticsCollectActivity()_block_invoke", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
      }
      [*(id *)(a1 + 32) triggerAnalyticsCollect];
    }
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    BOOL v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "coreanalytics activity check-in", buf, 2u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      int v7 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLClientManager::registerAnalyticsCollectActivity()_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
}

id sub_1007DEF14(uint64_t a1, double a2, double a3)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = [[CLInterval alloc] initWithStart:a2 end:a3];

  return [v3 addObject:v4];
}

id sub_1007DEF78(uint64_t a1, void *a2, void *a3)
{
  unsigned int v6 = [a2 count];
  uint64_t v7 = [a3 count] + v6;
  v25[0] = @"ClientKey";
  v26[0] = [*(id *)(a1 + 32) clientKey];
  v25[1] = @"LocationCount";
  v26[1] = +[NSNumber numberWithInt:v7];
  v26[2] = a2;
  v25[2] = @"Locations";
  void v25[3] = @"Launches";
  void v26[3] = a3;
  uint64_t v21 = 0;
  int v8 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:4], 1, &v21);
  if (!v8 || v21)
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    unint64_t v9 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v10;
      __int16 v23 = 2114;
      uint64_t v24 = v21;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not archive checkpoint data\", \"Client\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", buf, 0x26u);
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
    }
    int v11 = qword_102419538;
    if (os_signpost_enabled((os_log_t)qword_102419538))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v12;
      __int16 v23 = 2114;
      uint64_t v24 = v21;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not archive checkpoint data", "{\"msg%{public}.0s\":\"Could not archive checkpoint data\", \"Client\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
    int v8 = 0;
  }
  sub_10053B99C(0, &__p);
  char v13 = std::string::append(&__p, "locScoreInfoReport");
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(void *)&uint8_t buf[16] = *((void *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)uint64_t buf = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (buf[23] >= 0) {
    __int16 v15 = buf;
  }
  else {
    __int16 v15 = *(unsigned char **)buf;
  }
  int v16 = +[NSString stringWithUTF8String:v15];
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (![(NSData *)v8 writeToFile:v16 options:805306369 error:&v21])
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    __int16 v17 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      *(_DWORD *)uint64_t buf = 68289538;
      *(_DWORD *)&uint8_t buf[4] = 0;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(void *)&buf[20] = v18;
      __int16 v23 = 2114;
      uint64_t v24 = v21;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Could not serialize reprompt checkpoint data\", \"Client\":%{public, location:escape_only}@, \"Error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
  }
  id result = *(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = 0;
  return result;
}

void sub_1007DF334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1007DF370(void *a1)
{
  if ([a1 objectForKeyedSubscript:@"Type"])
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if ([a1 objectForKeyedSubscript:@"ServiceMaskOperator"])
      {
        if (![a1 objectForKeyedSubscript:@"ServiceMaskOperator"]
          || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          long long v14 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)[@"ServiceMaskOperator" UTF8String];
            __int16 v31 = 2114;
            __int16 v32 = a1;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x26u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v15 = qword_102419538;
          BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
          if (result)
          {
            id v16 = [@"ServiceMaskOperator" UTF8String];
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)v16;
            __int16 v31 = 2114;
            __int16 v32 = a1;
            int v8 = "invalid zone config";
            unint64_t v9 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{p"
                 "ublic, location:escape_only}@}";
            uint64_t v12 = v15;
            goto LABEL_29;
          }
          return result;
        }
      }
      unsigned int v2 = [[a1 objectForKeyedSubscript:@"Type"] intValue];
      if (v2 == 2)
      {
        if (![a1 objectForKeyedSubscript:@"PhenolicLocation"]
          || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v21 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)[@"PhenolicLocation" UTF8String];
            __int16 v31 = 2114;
            __int16 v32 = a1;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x26u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v5 = qword_102419538;
          BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
          if (result)
          {
            id v22 = [@"PhenolicLocation" UTF8String];
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)v22;
            __int16 v31 = 2114;
            __int16 v32 = a1;
            int v8 = "invalid zone config";
            unint64_t v9 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{p"
                 "ublic, location:escape_only}@}";
            goto LABEL_28;
          }
          return result;
        }
      }
      else
      {
        unsigned int v3 = v2;
        if (v2 != 1)
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v17 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            int v25 = 68289282;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2050;
            unint64_t v30 = v3;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"value-type validation of Info.plist zone received un-recongnised zone type\", \"ZoneType\":%{public, location:CLClientInterestZoneType}lld}", (uint8_t *)&v25, 0x1Cu);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v18 = qword_102419538;
          BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
          if (result)
          {
            int v25 = 68289282;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2050;
            unint64_t v30 = v3;
            int v8 = "value-type validation of Info.plist zone received un-recongnised zone type";
            unint64_t v9 = "{\"msg%{public}.0s\":\"value-type validation of Info.plist zone received un-recongnised zone type\", \""
                 "ZoneType\":%{public, location:CLClientInterestZoneType}lld}";
            uint64_t v12 = v18;
            uint32_t v13 = 28;
            goto LABEL_30;
          }
          return result;
        }
        if (![a1 objectForKeyedSubscript:@"Latitude"]
          || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v19 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)[@"Latitude" UTF8String];
            __int16 v31 = 2114;
            __int16 v32 = a1;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x26u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v5 = qword_102419538;
          BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
          if (result)
          {
            id v20 = [@"Latitude" UTF8String];
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)v20;
            __int16 v31 = 2114;
            __int16 v32 = a1;
            int v8 = "invalid zone config";
            unint64_t v9 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{p"
                 "ublic, location:escape_only}@}";
            goto LABEL_28;
          }
          return result;
        }
        if (![a1 objectForKeyedSubscript:@"Longitude"]
          || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          __int16 v23 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)[@"Longitude" UTF8String];
            __int16 v31 = 2114;
            __int16 v32 = a1;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x26u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v5 = qword_102419538;
          BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
          if (result)
          {
            id v24 = [@"Longitude" UTF8String];
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)v24;
            __int16 v31 = 2114;
            __int16 v32 = a1;
            int v8 = "invalid zone config";
            unint64_t v9 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{p"
                 "ublic, location:escape_only}@}";
            goto LABEL_28;
          }
          return result;
        }
        if (![a1 objectForKeyedSubscript:@"Radius"]
          || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
        {
          if (qword_102419530 != -1) {
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
          uint64_t v4 = qword_102419538;
          if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
          {
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)[@"Radius" UTF8String];
            __int16 v31 = 2114;
            __int16 v32 = a1;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x26u);
            if (qword_102419530 != -1) {
              dispatch_once(&qword_102419530, &stru_1022C9768);
            }
          }
          uint64_t v5 = qword_102419538;
          BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
          if (result)
          {
            id v7 = [@"Radius" UTF8String];
            int v25 = 68289538;
            int v26 = 0;
            __int16 v27 = 2082;
            uint64_t v28 = "";
            __int16 v29 = 2082;
            unint64_t v30 = (unint64_t)v7;
            __int16 v31 = 2114;
            __int16 v32 = a1;
            int v8 = "invalid zone config";
            unint64_t v9 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{p"
                 "ublic, location:escape_only}@}";
LABEL_28:
            uint64_t v12 = v5;
LABEL_29:
            uint32_t v13 = 38;
LABEL_30:
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, (uint8_t *)&v25, v13);
            return 0;
          }
          return result;
        }
      }
      return 1;
    }
  }
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v10 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_ERROR))
  {
    int v25 = 68289538;
    int v26 = 0;
    __int16 v27 = 2082;
    uint64_t v28 = "";
    __int16 v29 = 2082;
    unint64_t v30 = (unint64_t)[@"Type" UTF8String];
    __int16 v31 = 2114;
    __int16 v32 = a1;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, location:escape_only}@}", (uint8_t *)&v25, 0x26u);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
  }
  uint64_t v5 = qword_102419538;
  BOOL result = os_signpost_enabled((os_log_t)qword_102419538);
  if (result)
  {
    id v11 = [@"Type" UTF8String];
    int v25 = 68289538;
    int v26 = 0;
    __int16 v27 = 2082;
    uint64_t v28 = "";
    __int16 v29 = 2082;
    unint64_t v30 = (unint64_t)v11;
    __int16 v31 = 2114;
    __int16 v32 = a1;
    int v8 = "invalid zone config";
    unint64_t v9 = "{\"msg%{public}.0s\":\"invalid zone config\", \"ForKey\":%{public, location:escape_only}s, \"Zone\":%{public, l"
         "ocation:escape_only}@}";
    goto LABEL_28;
  }
  return result;
}

uint64_t sub_1007DFDEC(void *a1, void *a2)
{
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  uint64_t v4 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)uint64_t buf = 68289538;
    int v22 = 0;
    __int16 v23 = 2082;
    id v24 = "";
    __int16 v25 = 2114;
    int v26 = a1;
    __int16 v27 = 2114;
    uint64_t v28 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"check #pla zones are identical\", \"Zone1\":%{public, location:escape_only}@, \"Zone2\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  __int16 v17 = sub_1007E0018;
  uint64_t v18 = &unk_1022C9688;
  __int16 v19 = a1;
  id v20 = a2;
  uint64_t v5 = (_UNKNOWN **)[a1 objectForKeyedSubscript:@"Type" _NSConcreteStackBlock 3221225472];
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = @"ServiceMaskOperator" != @"Type";
  }
  if (v6) {
    id v7 = v5;
  }
  else {
    id v7 = &off_102392AC8;
  }
  int v8 = (_UNKNOWN **)[v20 objectForKeyedSubscript:@"Type"];
  if (v8) {
    BOOL v9 = 1;
  }
  else {
    BOOL v9 = @"ServiceMaskOperator" != @"Type";
  }
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = &off_102392AC8;
  }
  unsigned int v11 = [v7 isEqual:v10];
  int v12 = (uint64_t)v17((uint64_t)&v16, @"Latitude");
  int v13 = (uint64_t)v17((uint64_t)&v16, @"Longitude");
  int v14 = (uint64_t)v17((uint64_t)&v16, @"Radius");
  return v11 & v12 & v13 & v14 & v17((uint64_t)&v16, @"ServiceMaskOperator");
}

id sub_1007E0018(uint64_t a1, __CFString *a2)
{
  uint64_t v4 = (_UNKNOWN **)[*(id *)(a1 + 32) objectForKeyedSubscript:a2];
  if (v4) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = @"ServiceMaskOperator" != a2;
  }
  if (v5) {
    BOOL v6 = v4;
  }
  else {
    BOOL v6 = &off_102392AC8;
  }
  id v7 = (_UNKNOWN **)[*(id *)(a1 + 40) objectForKeyedSubscript:a2];
  if (v7) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = @"ServiceMaskOperator" != a2;
  }
  if (v8) {
    BOOL v9 = v7;
  }
  else {
    BOOL v9 = &off_102392AC8;
  }

  return [v6 isEqual:v9];
}

void sub_1007E00B4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  [*(id *)(v5 + 136) migrateDictionaryAtKeyPath:a2 toKeyPath:a3 forceMigrationOnAuthCollision:1];
  sub_100134750(__p, "ClientRemoved");
  sub_1007A9D70(v5, a2, 1, (uint64_t *)__p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  [*(id *)(v5 + 136) setInt:1 forKey:@"Provenance" atKeyPath:a3];
  if (qword_102419530 != -1) {
    dispatch_once(&qword_102419530, &stru_1022C9768);
  }
  BOOL v6 = qword_102419538;
  if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
  {
    id v7 = [a2 legacyClientKey];
    id v8 = [a3 legacyClientKey];
    *(_DWORD *)uint64_t buf = 138412546;
    id v19 = v7;
    __int16 v20 = 2112;
    id v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#pla #reconcile SyncedInfoPlistZone:%@ collapsed to :%@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    id v9 = [a2 legacyClientKey];
    id v10 = [a3 legacyClientKey];
    int v14 = 138412546;
    id v15 = v9;
    __int16 v16 = 2112;
    id v17 = v10;
    unsigned int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "BOOL CLClientManager::registerAndReconcileInfoPlistZone(const std::string &, const std::string &, NSDictionary *, CLClientInterestZoneProvenanceType, NSDictionary *)_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_1007E0318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007E033C(uint64_t a1)
{
  return *(void *)(a1 + 408);
}

void sub_1007E0344()
{
}

void sub_1007E0400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1007E043C()
{
}

void sub_1007E04FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_1007E0538(uint64_t a1, uint64_t a2)
{
  v14[0] = a2;
  if (!*(unsigned char *)(a1 + 108))
  {
    uint64_t v4 = *(void *)(a1 + 88);
    if (!v4) {
      goto LABEL_12;
    }
    uint64_t v5 = a1 + 80;
    uint64_t v6 = a1 + 88;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < (int)a2;
      if (v7 >= (int)a2) {
        id v9 = (uint64_t *)v4;
      }
      else {
        id v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(void *)(v6 + 56))
      {
        *(_DWORD *)uint64_t buf = *(_DWORD *)(*(void *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)a1 + 112))(a1, a2, buf);
      }
      sub_10006DA64(v5, v14);
    }
    else
    {
LABEL_12:
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C9828);
      }
      id v10 = qword_102419588;
      if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
      {
        unsigned int v11 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          unsigned int v11 = (void *)*v11;
        }
        *(_DWORD *)uint64_t buf = 136446466;
        id v19 = v11;
        __int16 v20 = 1026;
        int v21 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419580 != -1) {
          dispatch_once(&qword_102419580, &stru_1022C9828);
        }
        int v12 = (void *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          int v12 = (void *)*v12;
        }
        v14[1] = 136446466;
        id v15 = v12;
        __int16 v16 = 1026;
        int v17 = a2;
        char v13 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::removeClient(int) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v13);
        if (v13 != (char *)buf) {
          free(v13);
        }
      }
    }
  }
}

uint64_t sub_1007E07C8(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = sub_1007E5C7C(a4);
  if (v7)
  {
    int v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(void *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    int v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_1007E087C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1007E08C4(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 112))(a1, a2, &v4);
}

uint64_t sub_1007E090C(uint64_t a1, int a2)
{
  int v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 120))(a1, &v3);
}

uint64_t sub_1007E0954(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241DB38, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = a1;
    int v3 = __cxa_guard_acquire(&qword_10241DB38);
    a1 = v4;
    if (v3)
    {
      qword_10241DB20 = 0;
      *(void *)algn_10241DB28 = 0;
      qword_10241DB30 = 0;
      __cxa_atexit((void (*)(void *))sub_10058C198, &qword_10241DB20, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241DB38);
      a1 = v4;
    }
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)a1 + 96);

  return v1();
}

BOOL sub_1007E0A30(uint64_t a1, int a2, int *a3, const std::string *a4)
{
  int v40 = a2;
  if (*(unsigned char *)(a1 + 108)) {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 88);
  if (v7)
  {
    uint64_t v10 = a1 + 88;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        char v13 = (uint64_t *)v7;
      }
      else {
        char v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      uint64_t v39 = v10;
      int v16 = *a3;
      uint64_t v19 = *(void *)(v10 + 48);
      uint64_t v18 = v10 + 48;
      uint64_t v17 = v19;
      if (!v19) {
        goto LABEL_31;
      }
      uint64_t v20 = v18;
      do
      {
        int v21 = *(_DWORD *)(v17 + 28);
        BOOL v22 = v21 < v16;
        if (v21 >= v16) {
          __int16 v23 = (uint64_t *)v17;
        }
        else {
          __int16 v23 = (uint64_t *)(v17 + 8);
        }
        if (!v22) {
          uint64_t v20 = v17;
        }
        uint64_t v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28)) {
LABEL_31:
      }
        uint64_t v20 = v18;
      uint64_t v24 = *(void *)(a1 + 64);
      if (!v24) {
        goto LABEL_42;
      }
      uint64_t v25 = a1 + 64;
      do
      {
        int v26 = *(_DWORD *)(v24 + 32);
        BOOL v27 = v26 < v16;
        if (v26 >= v16) {
          uint64_t v28 = (uint64_t *)v24;
        }
        else {
          uint64_t v28 = (uint64_t *)(v24 + 8);
        }
        if (!v27) {
          uint64_t v25 = v24;
        }
        uint64_t v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(void *)uint64_t v41 = v25;
        uint64_t v34 = *(void *)(v25 + 56);
        *(void *)uint64_t buf = &v40;
        __int16 v35 = sub_1000EAEE4((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v35 + 5), a4);
        memset(v48, 0, sizeof(v48));
        *(_OWORD *)uint64_t v46 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v45 = 0u;
        memset(buf, 0, sizeof(buf));
        long long v49 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        memset(v52, 0, 27);
        char v53 = 0;
        int v54 = 0;
        if (v20 == v18
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(void *)a1 + 128))(a1, a3, buf))
        {
          sub_1007E609C();
        }
        if (SHIBYTE(v52[2]) < 0) {
          operator delete(v52[0]);
        }
        if (SHIBYTE(v51) < 0) {
          operator delete(*((void **)&v50 + 1));
        }
        if (SBYTE7(v50) < 0) {
          operator delete((void *)v49);
        }
        if ((v48[15] & 0x80000000) != 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(v46[0]);
        }
        if (SHIBYTE(v45) < 0) {
          operator delete(*(void **)&buf[24]);
        }
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        if (v34) {
          goto LABEL_46;
        }
      }
      else
      {
LABEL_42:
        *(void *)uint64_t v41 = a1 + 64;
        char v29 = byte_10241DB40;
        int v38 = v16;
        *(void *)uint64_t buf = &v38;
        *((unsigned char *)sub_10078BC58((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf) + 80) = v29;
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        unint64_t v30 = sub_10078BC58((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        __int16 v31 = (std::__shared_weak_count *)v30[9];
        std::string::value_type v30[8] = 0;
        v30[9] = 0;
        if (v31) {
          sub_1000DB0A0(v31);
        }
        int v38 = *a3;
        *(void *)uint64_t buf = &v38;
        __int16 v32 = sub_10078BC58((uint64_t **)(a1 + 56), &v38, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        *(void *)uint64_t buf = &v40;
        uint64_t v33 = sub_1000EAEE4(v32 + 5, &v40, (uint64_t)&unk_101D0B290, (_DWORD **)buf);
        std::string::operator=((std::string *)(v33 + 5), a4);
      }
      (*(void (**)(uint64_t, int *))(*(void *)a1 + 168))(a1, a3);
LABEL_46:
      if (v20 == v18)
      {
        *(_DWORD *)uint64_t buf = *a3;
        sub_1000EDED4((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_102419580 != -1) {
    dispatch_once(&qword_102419580, &stru_1022C9828);
  }
  int v14 = qword_102419588;
  if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
  {
    id v15 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      id v15 = (void *)*v15;
    }
    *(_DWORD *)uint64_t buf = 136446466;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  BOOL result = sub_10013D1A0(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    __int16 v36 = (void *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      __int16 v36 = (void *)*v36;
    }
    *(_DWORD *)uint64_t v41 = 136446466;
    *(void *)&int v41[4] = v36;
    __int16 v42 = 1026;
    int v43 = v40;
    __int16 v37 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v37);
    if (v37 != (char *)buf) {
      free(v37);
    }
    return 0;
  }
  return result;
}

void sub_1007E0F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000064D0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1007E0FA4(uint64_t a1, int a2, int *a3)
{
  uint64_t v5 = *(void *)(a1 + 88);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = a1 + 88;
  do
  {
    int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      int v9 = (uint64_t *)v5;
    }
    else {
      int v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v16 = *(void *)(v6 + 48);
    uint64_t v14 = v6 + 48;
    uint64_t v15 = v16;
    if (!v16) {
      goto LABEL_29;
    }
    int v17 = *a3;
    uint64_t v18 = v14;
    do
    {
      int v19 = *(_DWORD *)(v15 + 28);
      BOOL v20 = v19 < v17;
      if (v19 >= v17) {
        int v21 = (uint64_t *)v15;
      }
      else {
        int v21 = (uint64_t *)(v15 + 8);
      }
      if (!v20) {
        uint64_t v18 = v15;
      }
      uint64_t v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28)) {
LABEL_29:
    }
      uint64_t v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    uint64_t v10 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
    {
      int v11 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        int v11 = (void *)*v11;
      }
      *(_DWORD *)uint64_t buf = 136446466;
      uint64_t v24 = v11;
      __int16 v25 = 1026;
      int v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    BOOL v12 = sub_10013D1A0(115, 0);
    BOOL result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C9828);
      }
      BOOL v22 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v22);
      if (v22 != (char *)buf) {
        free(v22);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_1007E1228(char *a1, int a2, int *a3)
{
  int v32 = a2;
  int v3 = a1[108];
  if (!a1[108])
  {
    uint64_t v6 = *((void *)a1 + 11);
    if (v6)
    {
      BOOL v8 = a1 + 88;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < a2;
        if (v9 >= a2) {
          int v11 = (uint64_t *)v6;
        }
        else {
          int v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          BOOL v8 = (char *)v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        uint64_t v14 = (char *)*((void *)v8 + 6);
        BOOL v12 = v8 + 48;
        char v13 = v14;
        if (v14)
        {
          int v15 = *a3;
          uint64_t v16 = v12;
          do
          {
            int v17 = *((_DWORD *)v13 + 7);
            BOOL v18 = v17 < v15;
            if (v17 >= v15) {
              int v19 = (char **)v13;
            }
            else {
              int v19 = (char **)(v13 + 8);
            }
            if (!v18) {
              uint64_t v16 = v13;
            }
            char v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_1000ED9F4((uint64_t)(v12 - 8), (int *)__p);
            uint64_t v20 = *((void *)a1 + 8);
            if (!v20) {
              goto LABEL_33;
            }
            int v21 = *a3;
            BOOL v22 = a1 + 64;
            do
            {
              int v23 = *(_DWORD *)(v20 + 32);
              BOOL v24 = v23 < v21;
              if (v23 >= v21) {
                __int16 v25 = (uint64_t *)v20;
              }
              else {
                __int16 v25 = (uint64_t *)(v20 + 8);
              }
              if (!v24) {
                BOOL v22 = (char *)v20;
              }
              uint64_t v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10006D9B8((uint64_t)(v22 + 40), &v32);
              if (!*((void *)v22 + 7)) {
                (*(void (**)(char *, int *))(*(void *)a1 + 176))(a1, a3);
              }
            }
            else
            {
LABEL_33:
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C9828);
              }
              int v26 = qword_102419588;
              if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_FAULT))
              {
                BOOL v27 = a1 + 8;
                if (a1[31] < 0) {
                  BOOL v27 = (void *)*v27;
                }
                (*(void (**)(void **__return_ptr, char *, int *))(*(void *)a1 + 160))(__p, a1, a3);
                if (v42 >= 0) {
                  uint64_t v28 = __p;
                }
                else {
                  uint64_t v28 = (void **)__p[0];
                }
                *(_DWORD *)uint64_t buf = 136446466;
                *(void *)&uint8_t buf[4] = v27;
                __int16 v34 = 2082;
                __int16 v35 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (sub_10013D1A0(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_102419580 != -1) {
                  dispatch_once(&qword_102419580, &stru_1022C9828);
                }
                char v29 = a1 + 8;
                if (a1[31] < 0) {
                  char v29 = (void *)*v29;
                }
                (*(void (**)(unsigned char *__return_ptr, char *, int *))(*(void *)a1 + 160))(buf, a1, a3);
                if (v36 >= 0) {
                  unint64_t v30 = buf;
                }
                else {
                  unint64_t v30 = *(unsigned char **)buf;
                }
                int v37 = 136446466;
                int v38 = v29;
                __int16 v39 = 2082;
                int v40 = v30;
                __int16 v31 = (char *)_os_log_send_and_compose_impl();
                if (v36 < 0) {
                  operator delete(*(void **)buf);
                }
                sub_1004BA5E4("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v31);
                if (v31 != (char *)__p) {
                  free(v31);
                }
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1007E15FC(uint64_t a1, int *a2, std::string *this)
{
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v3 = a1 + 64;
  uint64_t v4 = v5;
  if (!v5) {
    return 0;
  }
  int v7 = *a2;
  uint64_t v8 = v3;
  do
  {
    int v9 = *(_DWORD *)(v4 + 32);
    BOOL v10 = v9 < v7;
    if (v9 >= v7) {
      int v11 = (uint64_t *)v4;
    }
    else {
      int v11 = (uint64_t *)(v4 + 8);
    }
    if (!v10) {
      uint64_t v8 = v4;
    }
    uint64_t v4 = *v11;
  }
  while (*v11);
  if (v8 == v3) {
    return 0;
  }
  if (v7 < *(_DWORD *)(v8 + 32)) {
    return 0;
  }
  uint64_t v12 = *(void *)(v8 + 64);
  if (!v12) {
    return 0;
  }
  std::string::operator=(this, *(const std::string **)(v8 + 64));
  std::string::operator=(this + 1, (const std::string *)(v12 + 24));
  std::string::operator=(this + 2, (const std::string *)(v12 + 48));
  std::string::operator=(this + 3, (const std::string *)(v12 + 72));
  std::string::value_type v13 = *(unsigned char *)(v12 + 98);
  LOWORD(this[4].__r_.__value_.__l.__data_) = *(_WORD *)(v12 + 96);
  this[4].__r_.__value_.__s.__data_[2] = v13;
  std::string::operator=((std::string *)((char *)this + 104), (const std::string *)(v12 + 104));
  std::string::operator=((std::string *)((char *)this + 128), (const std::string *)(v12 + 128));
  std::string::operator=((std::string *)((char *)this + 152), (const std::string *)(v12 + 152));
  __int16 v14 = *(_WORD *)(v12 + 176);
  this[7].__r_.__value_.__s.__data_[10] = *(unsigned char *)(v12 + 178);
  LOWORD(this[7].__r_.__value_.__r.__words[1]) = v14;
  this[7].__r_.__value_.__r.__words[2] = *(void *)(v12 + 184);
  return 1;
}

uint64_t sub_1007E16EC(uint64_t a1, int *a2, uint64_t a3)
{
  sub_1007E4764(a3, &v10);
  int v9 = *a2;
  int v11 = &v9;
  uint64_t v5 = sub_10078BC58((uint64_t **)(a1 + 56), &v9, (uint64_t)&unk_101D0B290, &v11);
  long long v6 = v10;
  long long v10 = 0uLL;
  int v7 = (std::__shared_weak_count *)v5[9];
  *((_OWORD *)v5 + 4) = v6;
  if (v7)
  {
    sub_1000DB0A0(v7);
    if (*((void *)&v10 + 1)) {
      sub_1000DB0A0(*((std::__shared_weak_count **)&v10 + 1));
    }
  }
  return 1;
}

void sub_1007E1780(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1000DB0A0(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E1798(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 108))
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    unsigned int v2 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v3 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)uint64_t buf = 136315138;
      BOOL v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C9828);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::listClients() [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  else
  {
    if (qword_102419580 != -1) {
      dispatch_once(&qword_102419580, &stru_1022C9828);
    }
    uint64_t v5 = qword_102419588;
    if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
    {
      long long v6 = (void *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        long long v6 = (void *)*v6;
      }
      uint64_t v7 = *(void *)(a1 + 96);
      *(_DWORD *)uint64_t buf = 136315394;
      BOOL v22 = v6;
      __int16 v23 = 2048;
      v24[0] = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419580 != -1) {
        dispatch_once(&qword_102419580, &stru_1022C9828);
      }
      uint64_t v20 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::listClients() [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
    uint64_t v8 = *(void **)(a1 + 80);
    if (v8 != (void *)(a1 + 88))
    {
      do
      {
        int v9 = (void *)v8[5];
        if (v9 != v8 + 6)
        {
          do
          {
            if (qword_102419580 != -1) {
              dispatch_once(&qword_102419580, &stru_1022C9828);
            }
            long long v10 = qword_102419588;
            if (os_log_type_enabled((os_log_t)qword_102419588, OS_LOG_TYPE_DEBUG))
            {
              int v11 = (void *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0) {
                int v11 = *(void **)(a1 + 8);
              }
              int v12 = *((_DWORD *)v8 + 8);
              int v13 = *((_DWORD *)v9 + 7);
              *(_DWORD *)uint64_t buf = 136315650;
              BOOL v22 = v11;
              __int16 v23 = 1024;
              LODWORD(v24[0]) = v12;
              WORD2(v24[0]) = 1024;
              *(_DWORD *)((char *)v24 + 6) = v13;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_102419580 != -1) {
                dispatch_once(&qword_102419580, &stru_1022C9828);
              }
              int v17 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, CLClientManager_Type::RegInfo>::listClients() [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLClientManager_Type::RegInfo]", "%s\n", v17);
              if (v17 != (char *)buf) {
                free(v17);
              }
            }
            __int16 v14 = (void *)v9[1];
            if (v14)
            {
              do
              {
                int v15 = v14;
                __int16 v14 = (void *)*v14;
              }
              while (v14);
            }
            else
            {
              do
              {
                int v15 = (void *)v9[2];
                BOOL v16 = *v15 == (void)v9;
                int v9 = v15;
              }
              while (!v16);
            }
            int v9 = v15;
          }
          while (v15 != v8 + 6);
        }
        BOOL v18 = (void *)v8[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            BOOL v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v8[2];
            BOOL v16 = *v19 == (void)v8;
            uint64_t v8 = v19;
          }
          while (!v16);
        }
        uint64_t v8 = v19;
      }
      while (v19 != (void *)(a1 + 88));
    }
  }
}

void sub_1007E1D48(uint64_t a1)
{
  sub_1007E4FC8(a1);

  operator delete();
}

void sub_1007E1D80(id a1)
{
  qword_102419538 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

uint64_t sub_1007E1DB0(uint64_t a1, int a2, uint64_t a3, void *a4, long long *a5)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 4) = 0;
  *(void *)(a1 + 8) = a3;
  if (*((char *)a5 + 23) < 0)
  {
    sub_1000DC48C((unsigned char *)(a1 + 16), *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    *(void *)(a1 + 32) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 16) = v7;
  }
  id v8 = [a4 copy];
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (!v8) {
    *(void *)(a1 + 40) = [&stru_1022C97A8 copy];
  }
  id v9 = *(id *)(a1 + 8);
  return a1;
}

void sub_1007E1E44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007E1E64(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1007E1EA0(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    +[NSError errorWithDomain:kCLErrorDomain code:18 userInfo:0];
    sub_1007DD47C((unsigned int *)a1);
  }
}

void sub_1007E1F10(id a1)
{
  qword_102419628 = (uint64_t)os_log_create("com.apple.locationd.Utility", "LocationMetrics");
}

void sub_1007E1F40(id a1)
{
  qword_102419528 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1007E1F70(id a1)
{
  qword_10247E160 = (uint64_t)os_log_create("com.apple.greentea", "location");
}

id sub_1007E1FA0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) proxyForService:@"CLClientManager"];
  qword_10247E178 = (uint64_t)result;
  return result;
}

uint64_t sub_1007E1FD0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  sub_1007E2034(a1, a2);
  return a1;
}

void sub_1007E2018(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007E2034(uint64_t a1, uint64_t a2)
{
  sub_1007E1EA0(a1);
  int v4 = *(_DWORD *)a1;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)a2 = v4;
  LOBYTE(v4) = *(unsigned char *)(a1 + 4);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a2 + 4) = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v8;
  *(_OWORD *)(a2 + 16) = v7;
  *(void *)(a2 + 32) = v6;
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = v9;
  uint64_t v10 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v10;
  uint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v11;
  *(void *)&long long v7 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v7;
  return a1;
}

void sub_1007E20F8(id a1)
{
  qword_102419588 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1007E2128(uint64_t a1)
{
}

void sub_1007E2134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 272);
  if (v4 && *(void *)(v4 + 48) == *(void *)(a1 + 32))
  {
    sub_1007B4B04(a2, *(void *)(a1 + 40));
  }
  else
  {
    if (qword_102419530 != -1) {
      dispatch_once(&qword_102419530, &stru_1022C9768);
    }
    uint64_t v5 = qword_102419538;
    if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = *(_DWORD *)(a1 + 40) & 3;
      uint64_t v7 = *(void *)(a2 + 272);
      BOOL v8 = v7 != 0;
      uint64_t v9 = *(void *)(a1 + 32);
      if (v7) {
        uint64_t v7 = *(void *)(v7 + 48);
      }
      *(_DWORD *)uint64_t buf = 68290050;
      __int16 v17 = 2082;
      int v16 = 0;
      BOOL v18 = "";
      __int16 v19 = 1026;
      int v20 = v6;
      __int16 v21 = 1026;
      BOOL v22 = v8;
      __int16 v23 = 2114;
      uint64_t v24 = v9;
      __int16 v25 = 2114;
      uint64_t v26 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt #Thunk CFUserNotification\", \"ResponseFlag\":%{public}d, \"HasInflightAuthPromptRequest\":%{public}hhd, \"ThunkCFUN\":%{public, location:escape_only}@, \"InflightCFUN\":%{public, location:escape_only}@}", buf, 0x32u);
    }
    if ((~*(_DWORD *)(a1 + 40) & 3) != 0)
    {
      if (qword_102419530 != -1) {
        dispatch_once(&qword_102419530, &stru_1022C9768);
      }
      uint64_t v10 = qword_102419538;
      if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)uint64_t buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "#AuthPrompt #Thunk InflightAuthPromptRequest has unexpected state", buf, 2u);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419530 != -1) {
          dispatch_once(&qword_102419530, &stru_1022C9768);
        }
        __int16 v14 = 0;
        uint64_t v11 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void thunkDeliverCFUserNotificationUnified(CFUserNotificationRef, CFOptionFlags)_block_invoke", "%s\n", v11);
        if (v11 != (char *)buf) {
          free(v11);
        }
      }
    }
  }
  int v12 = (__CFRunLoop *)sub_1001C2710();
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007E242C;
  block[3] = &unk_1022A3020;
  block[4] = *(void *)(a1 + 32);
  CFRunLoopPerformBlock(v12, kCFRunLoopCommonModes, block);
}

void sub_1007E242C(uint64_t a1)
{
}

void sub_1007E2434(uint64_t a1)
{
}

uint64_t sub_1007E243C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      sub_10029A978(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_1007E24A4(_Unwind_Exception *a1)
{
  sub_1002220F0(v1);
  _Unwind_Resume(a1);
}

void sub_1007E24B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1007E24B8(a1, *a2);
    sub_1007E24B8(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      sub_1000DB0A0(v4);
    }
    operator delete(a2);
  }
}

uint64_t *sub_1007E2518(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000F0A30(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[5];
  if (v4) {
    sub_1000DB0A0(v4);
  }
  operator delete(a2);
  return v3;
}

id sub_1007E2558(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(*(void *)(a1 + 8) + 136) registeredKeyPathForClientIdentifier:a2];
  if (![v3 isValidCKP]) {
    return 0;
  }
  uint64_t v4 = *(void **)(*(void *)(a1 + 8) + 136);
  sub_100195734(__p);
  if (v9 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  id v6 = [v4 hasValueForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5) atKeyPath:v3];
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_1007E2608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E2624(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1007E267C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_1007E267C(uint64_t a1)
{
  sub_1007E26CC(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    unsigned int v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_1007E26CC(uint64_t a1)
{
  sub_1007E2708(a1, *(void **)(a1 + 16));
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1007E2708(int a1, void *__p)
{
  if (__p)
  {
    unsigned int v2 = __p;
    do
    {
      id v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
}

void sub_1007E2750(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    id v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1007E27AC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007E27CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9878;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1007E2820(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

id sub_1007E2848(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(*(void *)(a1 + 8) + 136) registeredKeyPathForClientIdentifier:a2];
  if (![v3 isValidCKP]) {
    return 0;
  }
  uint64_t v4 = *(void **)(*(void *)(a1 + 8) + 136);
  sub_100F5D0A0(__p);
  if (v9 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = (void **)__p[0];
  }
  id v6 = [v4 hasValueForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5) atKeyPath:v3];
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_1007E28F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E2914(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v5 = sub_100103E24((uint64_t)a1, a2);
  id v30 = v5;
  *a3 = 0;
  a3[1] = 0;
  if (v5)
  {
    [v5 cppClientKey];
  }
  else
  {
    *(void *)uint64_t buf = 0;
    *(void *)int v32 = 0;
    *(void *)&std::string::value_type v32[8] = 0;
  }
  v23[0] = (uint64_t *)buf;
  id v6 = sub_100024ABC((uint64_t)(a1 + 122), buf, (uint64_t)&unk_101D0B290, (long long **)v23) + 40;
  if ((v32[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(void *)uint64_t buf = &v29;
  uint64_t v7 = sub_100050E80((uint64_t)v6, (uint64_t *)&v29, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  BOOL v8 = (std::__shared_weak_count *)v7[4];
  if (v8)
  {
    char v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = (const void *)v7[3];
      if (v10)
      {
        if (!v11)
        {
          *a3 = 0;
          a3[1] = 0;
          if (qword_102419530 != -1) {
            goto LABEL_48;
          }
          while (1)
          {
            BOOL v18 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)int v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&unsigned char v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            __int16 v19 = qword_102419538;
            if (os_signpost_enabled((os_log_t)qword_102419538))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)int v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&unsigned char v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "dynamic_pointer_cast must never fail in this context", "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            int v20 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)int v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&unsigned char v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            }
            abort_report_np();
            __break(1u);
LABEL_48:
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        *a3 = v11;
        a3[1] = v9;
        goto LABEL_36;
      }
    }
  }
  else
  {
    char v9 = 0;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  int v12 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    *(void *)uint64_t buf = 68289538;
    *(_WORD *)int v32 = 2082;
    *(void *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(void *)&v32[12] = (unint64_t)"18CLPushSubscription" & 0x7FFFFFFFFFFFFFFFLL;
    *(_WORD *)&unsigned char v32[20] = 2114;
    *(void *)&v32[22] = v30;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating persistent subscription due to demand\", \"type\":%{public, location:escape_only}s, \"clientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  uint64_t v28 = sub_100122128((uint64_t)a1, (uint64_t)v30, &xmmword_101D82EB8);
  if (v30)
  {
    [v30 cppClientKey];
  }
  else
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
  }
  sub_100F5D0A0(__p);
  sub_1001A5B94((char *)buf, &v26, (long long *)__p, (uint64_t)v29);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  sub_1007E2F64(a1 + 4, (uint64_t *)&v28, (uint64_t *)&v30, (uint64_t)buf, v23);
  __int16 v14 = v23[0];
  int v13 = v23[1];
  *a3 = v23[0];
  a3[1] = v13;
  v23[0] = (uint64_t *)&v29;
  int v15 = sub_100050E80((uint64_t)v6, (uint64_t *)&v29, (uint64_t)&unk_101D0B290, v23);
  if (v13) {
    atomic_fetch_add_explicit(v13 + 2, 1uLL, memory_order_relaxed);
  }
  int v16 = (std::__shared_weak_count *)v15[4];
  void v15[3] = v14;
  void v15[4] = v13;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  __int16 v17 = (std::__shared_weak_count *)a1[128];
  uint64_t v21 = a1[127];
  BOOL v22 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1001962A8(v14, &v21);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v33 < 0) {
    operator delete(*(void **)&v32[16]);
  }
  if ((v32[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v9) {
LABEL_36:
  }
    sub_1000DB0A0(v9);
}

void sub_1007E2EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_1000DB0A0(v29);
  if (*(void *)(v28 + 8)) {
    sub_1000DB0A0(*(std::__shared_weak_count **)(v28 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_1007E2F64(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x118uLL);
  sub_1007E2FF8(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_10017FD68((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1007E2FE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1007E2FF8(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022C98C8;
  sub_1007E3110((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1007E3060(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007E3074(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C98C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007E3094(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C98C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1007E30E8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1007E3110(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    sub_1000DC48C(v11, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a6;
    uint64_t v12 = *(void *)(a6 + 16);
  }
  if (*(char *)(a6 + 47) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a6 + 24), *(void *)(a6 + 32));
  }
  else
  {
    long long __p = *(_OWORD *)(a6 + 24);
    uint64_t v14 = *(void *)(a6 + 40);
  }
  uint64_t v15 = *(void *)(a6 + 48);
  sub_100F5C6A4(a2, v8, v9, v10, v11);
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_1007E31F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E321C(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id v5 = sub_100103E24((uint64_t)a1, a2);
  id v30 = v5;
  *a3 = 0;
  a3[1] = 0;
  if (v5)
  {
    [v5 cppClientKey];
  }
  else
  {
    *(void *)uint64_t buf = 0;
    *(void *)int v32 = 0;
    *(void *)&std::string::value_type v32[8] = 0;
  }
  v23[0] = (uint64_t *)buf;
  id v6 = sub_100024ABC((uint64_t)(a1 + 122), buf, (uint64_t)&unk_101D0B290, (long long **)v23) + 40;
  if ((v32[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  *(void *)uint64_t buf = &v29;
  char v7 = sub_100050E80((uint64_t)v6, (uint64_t *)&v29, (uint64_t)&unk_101D0B290, (uint64_t **)buf);
  uint64_t v8 = (std::__shared_weak_count *)v7[4];
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = (const void *)v7[3];
      if (v10)
      {
        if (!v11)
        {
          *a3 = 0;
          a3[1] = 0;
          if (qword_102419530 != -1) {
            goto LABEL_48;
          }
          while (1)
          {
            BOOL v18 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_FAULT))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)int v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&unsigned char v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            __int16 v19 = qword_102419538;
            if (os_signpost_enabled((os_log_t)qword_102419538))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)int v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&unsigned char v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "dynamic_pointer_cast must never fail in this context", "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
              if (qword_102419530 != -1) {
                dispatch_once(&qword_102419530, &stru_1022C9768);
              }
            }
            int v20 = qword_102419538;
            if (os_log_type_enabled((os_log_t)qword_102419538, OS_LOG_TYPE_INFO))
            {
              *(void *)uint64_t buf = 68289539;
              *(_WORD *)int v32 = 2082;
              *(void *)&v32[2] = "";
              *(_WORD *)&v32[10] = 2082;
              *(void *)&v32[12] = "assert";
              *(_WORD *)&unsigned char v32[20] = 2081;
              *(void *)&v32[22] = "result";
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"dynamic_pointer_cast must never fail in this context\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
            }
            abort_report_np();
            __break(1u);
LABEL_48:
            dispatch_once(&qword_102419530, &stru_1022C9768);
          }
        }
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        *a3 = v11;
        a3[1] = v9;
        goto LABEL_36;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (qword_102419520 != -1) {
    dispatch_once(&qword_102419520, &stru_1022C97E8);
  }
  uint64_t v12 = qword_102419528;
  if (os_log_type_enabled((os_log_t)qword_102419528, OS_LOG_TYPE_INFO))
  {
    *(void *)uint64_t buf = 68289538;
    *(_WORD *)int v32 = 2082;
    *(void *)&v32[2] = "";
    *(_WORD *)&v32[10] = 2082;
    *(void *)&v32[12] = (unint64_t)"24CLTranscriptSubscription" & 0x7FFFFFFFFFFFFFFFLL;
    *(_WORD *)&unsigned char v32[20] = 2114;
    *(void *)&v32[22] = v30;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating persistent subscription due to demand\", \"type\":%{public, location:escape_only}s, \"clientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  uint64_t v28 = sub_100122128((uint64_t)a1, (uint64_t)v30, &xmmword_101D82EB8);
  if (v30)
  {
    [v30 cppClientKey];
  }
  else
  {
    long long v26 = 0uLL;
    uint64_t v27 = 0;
  }
  sub_100096DF8(__p);
  sub_1001A5B94((char *)buf, &v26, (long long *)__p, (uint64_t)v29);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  sub_1007E386C(a1 + 4, (uint64_t *)&v28, (uint64_t *)&v30, (uint64_t)buf, v23);
  uint64_t v14 = v23[0];
  int v13 = v23[1];
  *a3 = v23[0];
  a3[1] = v13;
  v23[0] = (uint64_t *)&v29;
  uint64_t v15 = sub_100050E80((uint64_t)v6, (uint64_t *)&v29, (uint64_t)&unk_101D0B290, v23);
  if (v13) {
    atomic_fetch_add_explicit(v13 + 2, 1uLL, memory_order_relaxed);
  }
  int v16 = (std::__shared_weak_count *)v15[4];
  void v15[3] = v14;
  void v15[4] = v13;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  __int16 v17 = (std::__shared_weak_count *)a1[128];
  uint64_t v21 = a1[127];
  BOOL v22 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1001962A8(v14, &v21);
  if (v22) {
    sub_1000DB0A0(v22);
  }
  if (v33 < 0) {
    operator delete(*(void **)&v32[16]);
  }
  if ((v32[15] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v9) {
LABEL_36:
  }
    sub_1000DB0A0(v9);
}

void sub_1007E37B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_1000DB0A0(v29);
  if (*(void *)(v28 + 8)) {
    sub_1000DB0A0(*(std::__shared_weak_count **)(v28 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_1007E386C(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0x190uLL);
  sub_1007E3900(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_10017FD68((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1007E38EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1007E3900(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022C9918;
  sub_1007E3A18((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1007E3968(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007E397C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007E399C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9918;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1007E39F0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1007E3A18(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    sub_1000DC48C(v11, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a6;
    uint64_t v12 = *(void *)(a6 + 16);
  }
  if (*(char *)(a6 + 47) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a6 + 24), *(void *)(a6 + 32));
  }
  else
  {
    long long __p = *(_OWORD *)(a6 + 24);
    uint64_t v14 = *(void *)(a6 + 40);
  }
  uint64_t v15 = *(void *)(a6 + 48);
  sub_100ED16E4(a2, v8, v9, v10, v11);
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_1007E3AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007E3B24(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(*(void *)(a1 + 8) + 136) registeredKeyPathForClientIdentifier:a2];
  if (![v3 isValidCKP]) {
    return 0;
  }
  uint64_t v4 = *(void **)(*(void *)(a1 + 8) + 136);
  sub_1010AB560(__p);
  if (v9 >= 0) {
    id v5 = __p;
  }
  else {
    id v5 = (void **)__p[0];
  }
  id v6 = [v4 hasValueForKey:+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5) atKeyPath:v3];
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_1007E3BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E3BF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E3C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E3C7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E3CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E3D08(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E3D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E3D94(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E3E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E3E20(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E3E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E3EAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E3F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E3F38(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E3FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E3FC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E4038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E4050(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E40C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E40DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E4150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E4168(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E41DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E41F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E4268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E4280(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E42F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E430C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E4380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_1007E4398(uint64_t **a1, const void **a2, uint64_t a3)
{
  id v5 = (void **)sub_1001070AC((uint64_t)a1, &v11, a2);
  id v6 = *v5;
  if (!*v5)
  {
    char v7 = (uint64_t **)v5;
    id v6 = operator new(0x40uLL);
    _DWORD v6[2] = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = *(void *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *((void *)v6 + 6) = v8;
    *((void *)v6 + 7) = v9;
    sub_1000EDF90(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_1007E442C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v4 = *a2;
  id v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 16))(v2, &v4);
  if (v5) {
    sub_1000DB0A0(v5);
  }
}

void sub_1007E44A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1000DB0A0(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E44B8(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_1007E4510(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_1007E4510(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      sub_1007E267C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_1007E4554(void *a1, uint64_t *a2)
{
  unint64_t v3 = *(void *)(*a2 + 8);
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v3;
    if (v3 >= *(void *)&v7) {
      unint64_t v10 = v3 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v7 - 1) & v3;
  }
  uint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (void *)*v11;
  if (*v11)
  {
    do
    {
      unint64_t v13 = v12[1];
      if (v13 == v3)
      {
        if (sub_1000E9B14(v12[2], *a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(void *)&v7) {
            v13 %= *(void *)&v7;
          }
        }
        else
        {
          v13 &= *(void *)&v7 - 1;
        }
        if (v13 != v10) {
          return 0;
        }
      }
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t sub_1007E4668(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10017FA3C(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  long long __p = 0;
  if (v3) {
    sub_1007E2750((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t sub_1007E46B4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  sub_1007E470C((uint64_t *)(a1 + 8), a3);
  uint64_t v5 = *(void *)(a3 + 32);
  *(void *)(a1 + 32) = *(void *)(a3 + 24);
  *(void *)(a1 + 40) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 40);
  return a1;
}

uint64_t *sub_1007E470C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10078A594(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1007E474C(_Unwind_Exception *a1)
{
  sub_10078A7B0(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1007E4764@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0xD8uLL);
  uint64_t result = sub_1007E47C0((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1007E47AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1007E47C0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1022C9968;
  sub_100089AE0((char *)(a1 + 24), (long long *)a2);
  *(void *)(a1 + 208) = *(void *)(a2 + 184);
  return a1;
}

void sub_1007E4814(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007E4828(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007E4848(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9968;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1007E489C(uint64_t a1)
{
  return sub_1000064D0(a1 + 24);
}

void sub_1007E48A8(id a1)
{
  qword_102418F98 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1007E48D8(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_10017FA3C(a1, a2, (uint64_t)&__p);
  unint64_t v3 = (void **)__p;
  long long __p = 0;
  if (v3) {
    sub_10022251C((uint64_t)&v6, v3);
  }
  return v2;
}

void sub_1007E4924(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  unint64_t v10 = operator new(0x200uLL);
  sub_1007E49B8(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;

  sub_10017FD68((uint64_t)a5, v10 + 4, (uint64_t)(v10 + 3));
}

void sub_1007E49A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1007E49B8(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022C99D8;
  sub_1007E4AD0((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1007E4A20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007E4A34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C99D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007E4A54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C99D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1007E4AA8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1007E4AD0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = *a5;
  if (*(char *)(a6 + 23) < 0)
  {
    sub_1000DC48C(v11, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a6;
    uint64_t v12 = *(void *)(a6 + 16);
  }
  if (*(char *)(a6 + 47) < 0)
  {
    sub_1000DC48C(&__p, *(void **)(a6 + 24), *(void *)(a6 + 32));
  }
  else
  {
    long long __p = *(_OWORD *)(a6 + 24);
    uint64_t v14 = *(void *)(a6 + 40);
  }
  uint64_t v15 = *(void *)(a6 + 48);
  sub_1010AB31C(a2, v8, v9, v10, v11);
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_1007E4BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007E4BDC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_1002221F0(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1007E4C3C(_Unwind_Exception *a1)
{
  sub_1002220F0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1007E4C54(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_1007E4CEC((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000EDF90(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

unsigned char *sub_1007E4CEC@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1007E4D78(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1001F7F34(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1007E4D94(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_1001070AC((uint64_t)a1, &v11, a2);
  char v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_1007E4E40((uint64_t)a1, a4, (uint64_t)v10);
    sub_1000EDF90(a1, v11, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    sub_1007E4ED4((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_1007E4E40@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_1000DC48C(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_1007E4EBC(_Unwind_Exception *a1)
{
  sub_1007E4ED4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1007E4ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1007E4F2C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1007E4F2C(uint64_t a1)
{
  sub_10017FD18((uint64_t *)(a1 + 24), 0);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_1007E4F80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_1001AB2CC(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1007E4FC8(uint64_t a1)
{
  *(void *)a1 = off_1022C9A28;
  uint64_t v2 = (id *)(a1 + 8);
  [*(id *)(a1 + 16) forget:*(void *)(a1 + 8)];

  [*v2 invalidate];
  *uint64_t v2 = 0;
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_1007E5038(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_1000064D0(result);
    operator delete();
  }
  return result;
}

void sub_1007E5080(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9B30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007E50A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9B30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1007E50F4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_1007E511C(void *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB8uLL);
  sub_1007E5198(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_10017FD68((uint64_t)a3, v6 + 3, (uint64_t)(v6 + 3));
}

void sub_1007E5184(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1007E5198(void *a1, void *a2, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1022C9B80;
  uint64_t v4 = a1 + 3;
  if (*a2) {
    uint64_t v5 = *a2 + 112;
  }
  else {
    uint64_t v5 = 0;
  }
  sub_100C63AE4(v4, v5, *a3);
  return a1;
}

void sub_1007E51F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1007E5208(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9B80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1007E5228(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1022C9B80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1007E527C(uint64_t a1)
{
  return sub_100C63C30(a1 + 24);
}

void sub_1007E5288(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1007E5288(a1, *a2);
    sub_1007E5288(a1, a2[1]);
    sub_1007E4F2C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1007E52E4(uint64_t a1)
{
  sub_1007E4510(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_1007E5320(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1007E5374((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1007E5374(uint64_t a1, void *a2)
{
  for (uint64_t i = *(void **)(a1 + 8); i != a2; sub_1007D1480(i))
    i -= 4;
  *(void *)(a1 + 8) = a2;
}

void sub_1007E53C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1007E53C4(a1, *a2);
    sub_1007E53C4(a1, a2[1]);
    sub_10078A4A0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1007E5420(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1007E5498((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1007E5498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v10;
      v9 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_1007E5524((uint64_t)v12);
  return a6;
}

uint64_t sub_1007E5524(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1007E555C((uint64_t *)a1);
  }
  return a1;
}

void *sub_1007E555C(uint64_t *a1)
{
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v15 = v3;
  uint64_t v16 = v2;
  uint64_t v17 = v3;
  uint64_t v18 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = (uint64_t *)a1[1];
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  uint64_t v10 = v7;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = v6;
  return sub_1007E55D4(v4, (uint64_t)v14, (uint64_t)v9);
}

void *sub_1007E55D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t result = *(void **)(a2 + 32); result != *(void **)(a3 + 32); *(void *)(a2 + 32) = result)
  {
    sub_1007D1480(result);
    uint64_t result = (void *)(*(void *)(a2 + 32) + 32);
  }
  return result;
}

uint64_t sub_1007E5628(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1007E5660(uint64_t a1, uint64_t a2)
{
  while (1)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (v4 == a2) {
      break;
    }
    *(void *)(a1 + 16) = v4 - 32;
    sub_1007D1480((void *)(v4 - 32));
  }
}

void sub_1007E56A4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_1001AB2CC(v4 - 80);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1007E5728(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    sub_1001D7FD4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100214C7C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  long long v14 = &v10[80 * v4];
  uint64_t v16 = &v10[80 * v9];
  sub_100006280(v14, a2);
  uint64_t v15 = v14 + 80;
  sub_1007E5830(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1007E593C((uint64_t)&v13);
  return v11;
}

void sub_1007E581C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1007E593C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1007E5830(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1007E58A8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1007E58A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 80;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = (_OWORD *)(v11 + v10);
    v10 -= 80;
    sub_100006280(v12, (long long *)(v10 + a3));
  }
  return a6;
}

uint64_t sub_1007E593C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    sub_1001AB2CC(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1007E598C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_100100330(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    sub_10029A978(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1007E59EC(_Unwind_Exception *a1)
{
  sub_1002220F0(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1007E5A04@<X0>(unsigned __int8 *result@<X0>, const void ***a2@<X1>, const void ***a3@<X2>, const void ***a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, const void ***a7@<X8>)
{
  unint64_t v9 = *(const void ***)result;
  uint64_t v10 = *a2;
  if (*(const void ***)result == *a2)
  {
LABEL_14:
    uint64_t v19 = *a5;
LABEL_15:
    uint64_t v20 = a5[1];
    goto LABEL_16;
  }
  uint64_t v13 = *a3;
  if (*a3 != *a4)
  {
    uint64_t v16 = result;
    while (!sub_100130070(a6, v9 + 2, v13 + 2))
    {
      uint64_t result = (unsigned __int8 *)sub_100130070(a6, *a3 + 2, (const void **)(*(void *)v16 + 16));
      uint64_t v18 = (unsigned __int8 *)a3;
      if ((result & 1) == 0)
      {
        uint64_t result = *(unsigned __int8 **)v16;
        uint64_t v17 = v16;
        uint64_t v18 = (unsigned __int8 *)a3;
        goto LABEL_8;
      }
LABEL_9:
      *(void *)uint64_t v18 = **(void **)v18;
      unint64_t v9 = *(const void ***)v16;
      uint64_t v10 = *a2;
      if (*(const void ***)v16 == *a2) {
        goto LABEL_14;
      }
      uint64_t v13 = *a3;
      if (*a3 == *a4) {
        goto LABEL_11;
      }
    }
    uint64_t result = sub_10029A978(*a5, (unsigned __int8 *)(*(void *)v16 + 16), *(void *)v16 + 16);
    a5[1] = (uint64_t)result;
    uint64_t v17 = (unsigned __int8 *)(a5 + 1);
    uint64_t v18 = v16;
LABEL_8:
    *(void *)uint64_t v17 = *(void *)result;
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v19 = *a5;
  if (v9 == v10) {
    goto LABEL_15;
  }
  do
  {
    uint64_t result = sub_10029A978(v19, (unsigned __int8 *)v9 + 16, (uint64_t)(v9 + 2));
    unint64_t v9 = (const void **)*v9;
  }
  while (v9 != v10);
  uint64_t v20 = *(void *)result;
  unint64_t v9 = v10;
LABEL_16:
  *a7 = v9;
  a7[1] = (const void **)v19;
  a7[2] = (const void **)v20;
  return result;
}

_OWORD *sub_1007E5B5C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_1001070AC((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    unint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    _DWORD v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    sub_1000EDF90(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_1007E4ED4((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t sub_1007E5C20(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)sub_10012FFE0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  unint64_t v4 = v3;
  sub_1000F0A30(a1, v3);
  sub_1007E4F2C((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

id sub_1007E5C7C(void *a1)
{
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 0;
  }

  return sub_1007E5CDC(a1);
}

id sub_1007E5CDC(void *a1)
{
  id v2 = [a1 binaryVersion];
  [a1 sizeOfType];
  if (v2)
  {
    if (getenv("_INTERSILO_UNIT_TEST"))
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C99A8);
      }
      uint64_t v3 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D2E005 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1)
      {
LABEL_20:
        uint64_t v6 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLClientManager_Type::RegInfo, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v6);
        if (v6 != (char *)buf) {
          free(v6);
        }
        return 0;
      }
    }
    else
    {
      if (qword_102418F90 != -1) {
        dispatch_once(&qword_102418F90, &stru_1022C99A8);
      }
      uint64_t v5 = qword_102418F98;
      if (os_log_type_enabled((os_log_t)qword_102418F98, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)uint64_t buf = 134218498;
        id v8 = v2;
        __int16 v9 = 2048;
        uint64_t v10 = 0;
        __int16 v11 = 2080;
        unint64_t v12 = 0x8000000101D2E005 & 0x7FFFFFFFFFFFFFFFLL;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
      }
      if (!sub_10013D1A0(115, 0)) {
        return 0;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102418F90 == -1) {
        goto LABEL_20;
      }
    }
    dispatch_once(&qword_102418F90, &stru_1022C99A8);
    goto LABEL_20;
  }

  return [a1 cppObjectPtr];
}

void sub_1007E609C()
{
}

void sub_1007E6154()
{
}

uint64_t sub_1007E6178(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    sub_1000064D0(result);
    operator delete();
  }
  return result;
}

BOOL sub_1007E61C0()
{
  uint64_t v1 = qword_102419538;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_1007E61E0()
{
  id v2 = *(NSObject **)(v0 + 1336);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

BOOL sub_1007E6240()
{
  id v2 = *(NSObject **)(v0 + 1336);
  return os_signpost_enabled(v2);
}

BOOL sub_1007E6280()
{
  uint64_t v1 = qword_102419538;
  return os_log_type_enabled(v1, OS_LOG_TYPE_FAULT);
}

BOOL sub_1007E62B4()
{
  id v2 = *(NSObject **)(v0 + 1336);
  return os_log_type_enabled(v2, OS_LOG_TYPE_INFO);
}

void sub_1007E62E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADF0, memory_order_acquire) & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_10241ADF0))
    {
      uint64_t v1 = 0x7FFFFFFF00000000;
      v0[2] = xmmword_101D2DB10;
      v0[3] = unk_101D2DB20;
      v0[4] = xmmword_101D2DB30;
      v0[0] = xmmword_101D2DAF0;
      v0[1] = unk_101D2DB00;
      sub_1003BFBA4((uint64_t)&unk_10241ADD8, (int *)v0, 11);
      __cxa_atexit((void (*)(void *))sub_1003BE998, &unk_10241ADD8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_10241ADF0);
    }
  }
}

void sub_1007E63C8(_Unwind_Exception *a1)
{
}

void sub_1007E63E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241AD20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241AD20))
  {
    qword_10241AD08 = 0;
    qword_10241AD10 = 0;
    qword_10241AD18 = 0;
    __cxa_atexit((void (*)(void *))sub_1003BE920, &qword_10241AD08, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241AD20);
  }
}

void sub_1007E6460()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_10241ADD0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_10241ADD0))
  {
    std::__shared_mutex_base::__shared_mutex_base(&stru_10241AD28);
    __cxa_atexit((void (*)(void *))sub_1003BE954, &stru_10241AD28, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_10241ADD0);
  }
}

void sub_1007E64F0(_Unwind_Exception *a1)
{
}

NSArray *sub_1007E6508()
{
  sub_100134750(v3, "com.apple.findmy.people");
  sub_100134750(&v4, "com.apple.findmy.devices");
  sub_100134750(v5, "com.apple.findmy.items");
  sub_1007E243C((uint64_t)qword_10247E060, (unsigned __int8 *)v3, 3);
  for (uint64_t i = 0; i != -9; i -= 3)
  {
    if (SHIBYTE(v5[i + 2]) < 0) {
      operator delete((void *)v5[i]);
    }
  }
  __cxa_atexit((void (*)(void *))sub_10079F334, qword_10247E060, (void *)&_mh_execute_header);
  qword_10247E090 = 0;
  unk_10247E098 = 0;
  qword_10247E088 = 0;
  uint64_t v1 = operator new(8uLL);
  qword_10247E088 = (uint64_t)v1;
  *uint64_t v1 = 10;
  qword_10247E090 = (uint64_t)(v1 + 1);
  unk_10247E098 = v1 + 1;
  __cxa_atexit((void (*)(void *))sub_10079F338, &qword_10247E088, (void *)&_mh_execute_header);
  v3[0] = @"LocationTimeStarted";
  v3[1] = @"SignificantTimeStarted";
  void v3[2] = @"RangeTimeStarted";
  CFStringRef v4 = @"BeaconRegionTimeStarted";
  uint64_t result = +[NSArray arrayWithObjects:v3 count:4];
  qword_10247E0A0 = (uint64_t)result;
  return result;
}

void sub_1007E66A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 71) < 0) {
      operator delete(*(void **)(v1 + v3 + 48));
    }
    v3 -= 24;
    if (v3 == -72) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_1007E6700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = off_1022C9BF8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_101D2E0D0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 121) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 175) = 0;
  *(_OWORD *)(a1 + 184) = xmmword_101D2E0E0;
  sub_10065AA18(a1 + 200, a3);
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  id v4 = objc_alloc_init((Class)MADownloadOptions);
  *(void *)(a1 + 232) = v4;
  [v4 setDiscretionary:0];
  [*(id *)(a1 + 232) setAllowsCellularAccess:1];
  [*(id *)(a1 + 232) setAllowsExpensiveAccess:1];
  [*(id *)(a1 + 232) setRequiresPowerPluggedIn:0];
  uint64_t v9 = 0;
  sub_1000C7F88(&v7);
  int v5 = sub_1004D0EA0(v7, "MADownloadTimeout", &v9);
  if (v8) {
    sub_1000DB0A0(v8);
  }
  if (v5) {
    [*(id *)(a1 + 232) setTimeoutIntervalForResource:v9];
  }
  [*(id *)(a1 + 48) vendor] proxyForService:@"CLAnalyticsLogger"];
  return a1;
}

void sub_1007E6858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  sub_10065AAB0(v12);
  if (*(char *)(v11 + 103) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v11 + 31) < 0) {
    operator delete(*v13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1007E68B0(uint64_t a1)
{
  *(void *)a1 = off_1022C9BF8;

  *(void *)(a1 + 232) = 0;
  [*(id *)(a1 + 144) invalidate];

  *(void *)(a1 + 144) = 0;
  [*(id *)(a1 + 152) invalidate];

  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 240) = 0;
  sub_10065AAB0((void *)(a1 + 200));
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_1007E6964(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = (unint64_t)[result state];
    if (v2 >= 7)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      uint64_t v3 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67240451;
        unsigned int v7 = [v1 state];
        __int16 v8 = 2113;
        id v9 = [v1 attributes];
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#CLMA,isAssetOnDisk,asset has unexpected state,%{public}d,attributes,%{private}@", buf, 0x12u);
      }
      BOOL v4 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v4)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C9D98);
        }
        [v1 state];
        [v1 attributes];
        int v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLMobileAsset::isAssetOnDisk(MAAsset *)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return 0;
      }
    }
    else
    {
      return (void *)((0x6Cu >> v2) & 1);
    }
  }
  return result;
}

void *sub_1007E6B80(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = (unint64_t)[result state];
    if (v2 >= 7)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      uint64_t v3 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t buf = 67240451;
        unsigned int v7 = [v1 state];
        __int16 v8 = 2113;
        id v9 = [v1 attributes];
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#CLMA,isAssetPreInstalled,asset has unexpected state,%{public}d,attributes,%{private}@", buf, 0x12u);
      }
      BOOL v4 = sub_10013D1A0(115, 0);
      uint64_t result = 0;
      if (v4)
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C9D98);
        }
        [v1 state];
        [v1 attributes];
        int v5 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLMobileAsset::isAssetPreInstalled(MAAsset *)", "%s\n", v5);
        if (v5 != (char *)buf) {
          free(v5);
        }
        return 0;
      }
    }
    else
    {
      return (void *)((0x60u >> v2) & 1);
    }
  }
  return result;
}

void *sub_1007E6D9C(void *result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = sub_1007E6964(result);
    if (result) {
      return (void *)(sub_1007E6B80(v1) ^ 1);
    }
  }
  return result;
}

uint64_t sub_1007E6DD8(uint64_t result, uint64_t a2, void *a3)
{
  if (result)
  {
    uint64_t result = [(uint64_t)[objc_msgSend((id)result, "attributes") objectForKey:a2];
    if (result)
    {
      BOOL v4 = (void *)result;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        return (uint64_t)[a3 isEqualToString:v4];
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          long long v22 = 0u;
          long long v23 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          uint64_t result = (uint64_t)[v4 countByEnumeratingWithState:&v20 objects:v28 count:16];
          if (result)
          {
            id v5 = (id)result;
            uint64_t v6 = *(void *)v21;
            do
            {
              for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v21 != v6) {
                  objc_enumerationMutation(v4);
                }
                uint64_t v8 = *(void *)(*((void *)&v20 + 1) + 8 * i);
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  if ([a3 isEqualToString:v8]) {
                    return 1;
                  }
                }
                else
                {
                  if (qword_102419600 != -1) {
                    dispatch_once(&qword_102419600, &stru_1022C9D98);
                  }
                  id v9 = qword_102419608;
                  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v10 = (objc_class *)objc_opt_class();
                    uint64_t v11 = [NSStringFromClass(v10) UTF8String];
                    *(_DWORD *)uint64_t buf = 136446210;
                    uint64_t v27 = v11;
                    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#CLMA,hasAttribute,unexpected attribute type in array,%{public}s", buf, 0xCu);
                  }
                  if (sub_10013D1A0(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_102419600 != -1) {
                      dispatch_once(&qword_102419600, &stru_1022C9D98);
                    }
                    unint64_t v12 = (objc_class *)objc_opt_class();
                    char v13 = [NSStringFromClass(v12) UTF8String];
                    int v24 = 136446210;
                    char v25 = v13;
                    uint64_t v14 = (char *)_os_log_send_and_compose_impl();
                    sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLMobileAsset::hasAttribute(MAAsset *, NSString *, NSString *)", "%s\n", v14);
                    if (v14 != (char *)buf) {
                      free(v14);
                    }
                  }
                }
              }
              id v5 = [v4 countByEnumeratingWithState:&v20 objects:v28 count:16];
              uint64_t result = 0;
            }
            while (v5);
          }
        }
        else
        {
          if (qword_102419600 != -1) {
            dispatch_once(&qword_102419600, &stru_1022C9D98);
          }
          uint64_t v15 = qword_102419608;
          if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
          {
            uint64_t v16 = (objc_class *)objc_opt_class();
            *(_DWORD *)uint64_t buf = 136446210;
            uint64_t v27 = [NSStringFromClass(v16) UTF8String];
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLMA,hasAttribute,unexpected attribute type,%{public}s", buf, 0xCu);
          }
          BOOL v17 = sub_10013D1A0(115, 0);
          uint64_t result = 0;
          if (v17)
          {
            bzero(buf, 0x65CuLL);
            if (qword_102419600 != -1) {
              dispatch_once(&qword_102419600, &stru_1022C9D98);
            }
            uint64_t v18 = (objc_class *)objc_opt_class();
            int v24 = 136446210;
            char v25 = [NSStringFromClass(v18) UTF8String];
            uint64_t v19 = (char *)_os_log_send_and_compose_impl();
            sub_1004BA5E4("Generic", 1, 0, 0, "static BOOL CLMobileAsset::hasAttribute(MAAsset *, NSString *, NSString *)", "%s\n", v19);
            if (v19 != (char *)buf) {
              free(v19);
            }
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1007E7290(void *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  id v1 = [a1 attributes];
  id v2 = [v1 objectForKey:ASAttributeContentVersion];
  if (!v2) {
    return 0xFFFFFFFFLL;
  }

  return (uint64_t)[v2 intValue];
}

uint64_t sub_1007E72D8(void *a1)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  id v1 = [a1 attributes];
  id v2 = [v1 objectForKey:ASAttributeCompatibilityVersion];
  if (!v2) {
    return 0xFFFFFFFFLL;
  }

  return (uint64_t)[v2 intValue];
}

void sub_1007E7320(long long *a1, void *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  void v3[2] = sub_1007E73F0;
  void v3[3] = &unk_1022C9C48;
  if (*((char *)a1 + 23) < 0)
  {
    sub_1000DC48C(&__p, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __p = *a1;
    uint64_t v5 = *((void *)a1 + 2);
  }
  [a2 enumerateKeysAndObjectsUsingBlock:v3];
  if (SHIBYTE(v5) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1007E73D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1007E73F0(uint64_t a1, void *a2, uint64_t a3)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v6 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      unsigned int v7 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        unsigned int v7 = (void *)*v7;
      }
      *(_DWORD *)uint64_t buf = 136446467;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&unsigned char buf[14] = [a2 UTF8String];
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%{public}s%{private}s dict", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      uint64_t v18 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v18 = (void *)*v18;
      }
      int v22 = 136446467;
      long long v23 = v18;
      __int16 v24 = 2081;
      id v25 = [a2 UTF8String];
      uint64_t v19 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMobileAsset::printDict(std::string, NSDictionary *)_block_invoke", "%s\n", v19);
      if (v19 != buf) {
        free(v19);
      }
    }
    if (*(char *)(a1 + 55) >= 0) {
      size_t v8 = *(unsigned __int8 *)(a1 + 55);
    }
    else {
      size_t v8 = *(void *)(a1 + 40);
    }
    id v9 = buf;
    sub_1001110E4((uint64_t)buf, v8 + 3);
    if (buf[23] < 0) {
      id v9 = *(unsigned char **)buf;
    }
    if (v8)
    {
      unint64_t v12 = *(char **)(a1 + 32);
      uint64_t v11 = (char *)(a1 + 32);
      uint64_t v10 = v12;
      if (v11[23] >= 0) {
        char v13 = v11;
      }
      else {
        char v13 = v10;
      }
      memmove(v9, v13, v8);
    }
    *(_DWORD *)&v9[v8] = 2105376;
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_1000DC48C(__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)buf;
      uint64_t v21 = *(void *)&buf[16];
    }
    sub_1007E7320(__p, a3);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v14 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v15 = (void *)*v15;
      }
      *(_DWORD *)uint64_t buf = 136446723;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&unsigned char buf[12] = 2081;
      *(void *)&unsigned char buf[14] = [a2 UTF8String];
      *(_WORD *)&unsigned char buf[22] = 2113;
      uint64_t v29 = a3;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%{public}s%{private}s = %{private}@", buf, 0x20u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      uint64_t v16 = (void *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0) {
        uint64_t v16 = (void *)*v16;
      }
      int v22 = 136446723;
      long long v23 = v16;
      __int16 v24 = 2081;
      id v25 = [a2 UTF8String];
      __int16 v26 = 2113;
      uint64_t v27 = a3;
      BOOL v17 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "static void CLMobileAsset::printDict(std::string, NSDictionary *)_block_invoke", "%s\n", v17);
      if (v17 != buf) {
        free(v17);
      }
    }
  }
}

void sub_1007E786C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007E78A8(uint64_t a1)
{
  sub_1000C7F88(buf);
  sub_1000D2988(*(uint64_t *)buf, "MACatalogDownloadOnStartup", (BOOL *)(a1 + 176));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  sub_1004D0B90(*(uint64_t *)buf, "MACatalogDownloadInterval", (void *)(a1 + 184));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  sub_1004D0B90(*(uint64_t *)buf, "MAAgressiveCatalogDownloadInterval", (void *)(a1 + 192));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  id v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 56) UTF8String];
    int v4 = *(unsigned __int8 *)(a1 + 176);
    uint64_t v5 = *(void *)(a1 + 184);
    uint64_t v6 = *(void *)(a1 + 192);
    *(_DWORD *)uint64_t buf = 136381443;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 1026;
    *(_DWORD *)&unsigned char buf[14] = v4;
    *(_WORD *)&buf[18] = 2050;
    *(void *)&buf[20] = v5;
    *(_WORD *)&unsigned char buf[28] = 2050;
    *(void *)&buf[30] = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog update check settings,downloadOnStatup,%{public}d,interval,%{public}lld,agressiveInterval,%{public}lld", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v22 = [*(id *)(a1 + 56) UTF8String];
    int v23 = *(unsigned __int8 *)(a1 + 176);
    uint64_t v24 = *(void *)(a1 + 184);
    uint64_t v25 = *(void *)(a1 + 192);
    *(_DWORD *)char v33 = 136381443;
    *(void *)&v33[4] = v22;
    *(_WORD *)&v33[12] = 1026;
    *(_DWORD *)&v33[14] = v23;
    *(_WORD *)&v33[18] = 2050;
    *(void *)&v33[20] = v24;
    *(_WORD *)&v33[28] = 2050;
    *(void *)&v33[30] = v25;
    __int16 v26 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::init()", "%s\n", v26);
    if (v26 != buf) {
      free(v26);
    }
  }
  sub_1000C7F88(buf);
  sub_1004D0B90(*(uint64_t *)buf, "MAFirstPurgeCheckDelay", (void *)(a1 + 32));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  sub_1000C7F88(buf);
  sub_1004D0B90(*(uint64_t *)buf, "MAPurgeCheckInterval", (void *)(a1 + 40));
  if (*(void *)&buf[8]) {
    sub_1000DB0A0(*(std::__shared_weak_count **)&buf[8]);
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  unsigned int v7 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 56) UTF8String];
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    *(_DWORD *)uint64_t buf = 136381187;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2050;
    *(void *)&unsigned char buf[14] = v9;
    *(_WORD *)&unsigned char buf[22] = 2050;
    *(void *)&unsigned char buf[24] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge check settings,delay,%{public}lld,interval,%{public}lld", buf, 0x20u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v27 = [*(id *)(a1 + 56) UTF8String];
    uint64_t v28 = *(void *)(a1 + 32);
    uint64_t v29 = *(void *)(a1 + 40);
    *(_DWORD *)char v33 = 136381187;
    *(void *)&v33[4] = v27;
    *(_WORD *)&v33[12] = 2050;
    *(void *)&v33[14] = v28;
    *(_WORD *)&v33[22] = 2050;
    *(void *)&v33[24] = v29;
    id v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::init()", "%s\n", v30);
    if (v30 != buf) {
      free(v30);
    }
  }
  sub_100134750(buf, "com.apple.locationd.MACatalogDownload.");
  uint64_t v11 = std::string::append((std::string *)buf, (const std::string::value_type *)[*(id *)(a1 + 56) UTF8String]);
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  *(void *)char v33 = v11->__r_.__value_.__l.__size_;
  *(void *)&v33[7] = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v14 = *(void *)v33;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 95) = *(void *)&v33[7];
  *(unsigned char *)(a1 + 103) = v13;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_1007E7F7C(a1);
  id v15 = [[objc_msgSend(*(id *)(a1 + 48), "silo") newTimer];
  *(void *)(a1 + 144) = v15;
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472;
  v32[2] = sub_1007E8B80;
  v32[3] = &unk_1022A3020;
  v32[4] = a1;
  [v15 setHandler:v32];
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 56))(a1, 1);
  if (*(unsigned char *)(a1 + 176)) {
    sub_1007E9598(a1);
  }
  else {
    sub_1007E9198(a1);
  }
  sub_100134750(buf, "com.apple.locationd.AssetPurge.");
  uint64_t v16 = std::string::append((std::string *)buf, (const std::string::value_type *)[*(id *)(a1 + 56) UTF8String]);
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
  *(void *)char v33 = v16->__r_.__value_.__l.__size_;
  *(void *)&v33[7] = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  uint64_t v19 = *(void *)v33;
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 23) = *(void *)&v33[7];
  *(unsigned char *)(a1 + 31) = v18;
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  sub_1007E9A08(a1);
  id v20 = [[objc_msgSend(*(id *)(a1 + 48), "silo") newTimer];
  *(void *)(a1 + 152) = v20;
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  _OWORD v31[2] = sub_1007E9D28;
  v31[3] = &unk_1022A3020;
  v31[4] = a1;
  [v20 setHandler:v31];
  return [*(id *)(a1 + 152) setNextFireDelay:600.0];
}

void sub_1007E7F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,std::__shared_weak_count *a28,int a29,__int16 a30,char a31,char a32)
{
  if (a28) {
    sub_1000DB0A0(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007E7F7C(uint64_t a1)
{
  uint64_t v2 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v2 + 936))(v2);
  sub_1000E9354(v38);
  uint64_t v3 = sub_1000A6958();
  int v4 = (void *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    int v4 = (void *)*v4;
  }
  if (sub_100186344(v3, (uint64_t)+[NSString stringWithUTF8String:v4], v38))
  {
    int v5 = sub_1000A6A10((uint64_t)v38, @"kLastAttemptedCatalogDownloadKey", (void *)(a1 + 104));
    if ((v5 & 1) == 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      uint64_t v6 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v7 = [*(id *)(a1 + 56) UTF8String];
        *(_DWORD *)uint64_t buf = 136380675;
        id v42 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last attempted catalog download", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C9D98);
        }
        id v24 = [*(id *)(a1 + 56) UTF8String];
        int v39 = 136380675;
        id v40 = v24;
        uint64_t v25 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v25);
        if (v25 != (char *)buf) {
          free(v25);
        }
      }
    }
    if (sub_1000A6A10((uint64_t)v38, @"kLastSuccessfulCatalogDownloadKey", (void *)(a1 + 112)))
    {
      int v8 = v5 ^ 1;
    }
    else
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      uint64_t v11 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v12 = [*(id *)(a1 + 56) UTF8String];
        *(_DWORD *)uint64_t buf = 136380675;
        id v42 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last successful catalog download", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C9D98);
        }
        id v26 = [*(id *)(a1 + 56) UTF8String];
        int v39 = 136380675;
        id v40 = v26;
        id v27 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v27);
        if (v27 != (char *)buf) {
          free(v27);
        }
      }
      int v8 = 1;
    }
    if ((sub_1000A6A10((uint64_t)v38, @"kLastAttemptedAssetDownloadKey", (void *)(a1 + 120)) & 1) == 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      char v13 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v14 = [*(id *)(a1 + 56) UTF8String];
        *(_DWORD *)uint64_t buf = 136380675;
        id v42 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last attempted asset download", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C9D98);
        }
        id v28 = [*(id *)(a1 + 56) UTF8String];
        int v39 = 136380675;
        id v40 = v28;
        uint64_t v29 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v29);
        if (v29 != (char *)buf) {
          free(v29);
        }
      }
      int v8 = 1;
    }
    if ((sub_1000A6A10((uint64_t)v38, @"kLastSuccessfulAssetDownloadKey", (void *)(a1 + 128)) & 1) == 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v15 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v16 = [*(id *)(a1 + 56) UTF8String];
        *(_DWORD *)uint64_t buf = 136380675;
        id v42 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last successful asset download", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C9D98);
        }
        id v30 = [*(id *)(a1 + 56) UTF8String];
        int v39 = 136380675;
        id v40 = v30;
        __int16 v31 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v31);
        if (v31 != (char *)buf) {
          free(v31);
        }
      }
      int v8 = 1;
    }
    if ((sub_1000A6A10((uint64_t)v38, @"kLastDownloadNotTriggeredKey", (void *)(a1 + 160)) & 1) == 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      std::string::size_type v17 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v18 = [*(id *)(a1 + 56) UTF8String];
        *(_DWORD *)uint64_t buf = 136380675;
        id v42 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last download not triggered AWD", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C9D98);
        }
        id v32 = [*(id *)(a1 + 56) UTF8String];
        int v39 = 136380675;
        id v40 = v32;
        char v33 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v33);
        if (v33 != (char *)buf) {
          free(v33);
        }
      }
      int v8 = 1;
    }
    if ((sub_1000A6A10((uint64_t)v38, @"kLastVersionReportingAwdKey", (void *)(a1 + 168)) & 1) == 0)
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      uint64_t v19 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
      {
        id v20 = [*(id *)(a1 + 56) UTF8String];
        *(_DWORD *)uint64_t buf = 136380675;
        id v42 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,cache did not contain time of last version reporting AWD", buf, 0xCu);
      }
      if (sub_10013D1A0(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C9D98);
        }
        id v34 = [*(id *)(a1 + 56) UTF8String];
        int v39 = 136380675;
        id v40 = v34;
        __int16 v35 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v35);
        if (v35 != (char *)buf) {
          free(v35);
        }
      }
      int v8 = 1;
    }
    sub_100134750(__p, "loaded");
    sub_1007EA1B8(a1, (uint64_t *)__p);
    if ((v37 & 0x80000000) == 0)
    {
      if (!v8) {
        return sub_10013F3C4(v38);
      }
      goto LABEL_56;
    }
    operator delete(__p[0]);
    if (v8) {
LABEL_56:
    }
      sub_1007EA04C((char *)a1);
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380675;
      id v42 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,no download stats available", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v22 = [*(id *)(a1 + 56) UTF8String];
      int v39 = 136380675;
      id v40 = v22;
      int v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::loadCachedDownloadStats()", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    sub_1007EA04C((char *)a1);
  }
  return sub_10013F3C4(v38);
}

void sub_1007E8AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

id sub_1007E8B80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  uint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(v1 + 56) UTF8String];
    *(_DWORD *)uint64_t buf = 136380675;
    id v19 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,agressive download check timer fired", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    [*(id *)(v1 + 56) UTF8String];
    id v15 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
  if (*(unsigned char *)(v1 + 136))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    int v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(v1 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380675;
      id v19 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,agressive download already scheduled", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      [*(id *)(v1 + 56) UTF8String];
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
LABEL_23:
    id v10 = *(void **)(v1 + 144);
    double v11 = 1.79769313e308;
    return [v10 setNextFireDelay:v11];
  }
  CFAbsoluteTime v7 = (double)*(uint64_t *)(v1 + 192);
  if (CFAbsoluteTimeGetCurrent() - *(double *)(v1 + 112) > v7)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    int v8 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [*(id *)(v1 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380675;
      id v19 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,time to switch to agressive downloads", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      [*(id *)(v1 + 56) UTF8String];
      id v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    sub_1007E9198(v1);
    goto LABEL_23;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  char v13 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = [*(id *)(v1 + 56) UTF8String];
    *(_DWORD *)uint64_t buf = 136380675;
    id v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,not time to switch to agressive downloads", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    [*(id *)(v1 + 56) UTF8String];
    std::string::size_type v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  id v10 = *(void **)(v1 + 144);
  double v11 = (double)(*(void *)(v1 + 184) / 2);
  return [v10 setNextFireDelay:v11];
}

id sub_1007E9198(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 184);
  if (v2 >= 0) {
    uint64_t v3 = *(void *)(a1 + 184);
  }
  else {
    uint64_t v3 = v2 + 1;
  }
  int64_t v4 = v3 >> 1;
  if (*(double *)(a1 + 104) == 0.0)
  {
    int64_t v7 = 0;
  }
  else
  {
    double v5 = *(double *)(a1 + 104) + (double)(3 * v2 / 4);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    int64_t v7 = (uint64_t)(v5 - Current) & ~((uint64_t)(v5 - Current) >> 63);
  }
  CFAbsoluteTime v8 = (double)*(uint64_t *)(a1 + 192);
  *(unsigned char *)(a1 + 136) = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 112) > v8;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v9, XPC_ACTIVITY_REPEATING, 0);
  xpc_dictionary_set_BOOL(v9, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v9, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  xpc_dictionary_set_string(v9, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION, XPC_ACTIVITY_NETWORK_TRANSFER_DIRECTION_DOWNLOAD);
  xpc_dictionary_set_BOOL(v9, XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY, *(unsigned char *)(a1 + 136) == 0);
  xpc_dictionary_set_string(v9, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
  xpc_dictionary_set_int64(v9, XPC_ACTIVITY_DELAY, v7);
  xpc_dictionary_set_int64(v9, XPC_ACTIVITY_GRACE_PERIOD, v4);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  id v10 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [*(id *)(a1 + 56) UTF8String];
    int v12 = *(unsigned __int8 *)(a1 + 136);
    *(_DWORD *)uint64_t buf = 136381443;
    id v29 = v11;
    __int16 v30 = 1026;
    int v31 = v12;
    __int16 v32 = 2050;
    int64_t v33 = v7;
    __int16 v34 = 2050;
    int64_t v35 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,registering catalog download activity,agressiveDownload,%{public}d,delay,%{public}lld,gracePeriod,%{public}lld", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v16 = [*(id *)(a1 + 56) UTF8String];
    int v17 = *(unsigned __int8 *)(a1 + 136);
    int v20 = 136381443;
    id v21 = v16;
    __int16 v22 = 1026;
    int v23 = v17;
    __int16 v24 = 2050;
    int64_t v25 = v7;
    __int16 v26 = 2050;
    int64_t v27 = v4;
    id v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::registerCatalogDownloadActivity()", "%s\n", v18);
    if (v18 != (char *)buf) {
      free(v18);
    }
  }
  char v13 = (const char *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    char v13 = *(const char **)v13;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1007EA43C;
  handler[3] = &unk_1022C9C78;
  handler[4] = a1;
  xpc_activity_register(v13, v9, handler);
  xpc_release(v9);
  double v14 = (double)(v7 + v4);
  if (*(unsigned char *)(a1 + 136)) {
    double v14 = 1.79769313e308;
  }
  return [*(id *)(a1 + 144) setNextFireDelay:v14];
}

void sub_1007E9598(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 177))
  {
    *(unsigned char *)(a1 + 177) = 1;
    uint64_t v18 = 0;
    id v19 = (CFAbsoluteTime *)&v18;
    uint64_t v20 = 0x14812000000;
    id v21 = sub_1001779E4;
    __int16 v22 = sub_10017737C;
    int v23 = "";
    unint64_t v25 = 0xBFF0000000000000;
    *(_OWORD *)__int16 v26 = 0u;
    long long v27 = 0u;
    int v28 = 0;
    uint64_t v29 = -1;
    int v30 = -2;
    uint64_t v31 = -1;
    uint64_t v32 = -1;
    int v33 = -1;
    __int16 v34 = 0;
    int64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v38 = -1;
    uint64_t v39 = -1;
    uint64_t v37 = 0;
    char v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = -1;
    uint64_t v45 = -1;
    char v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = -1;
    uint64_t v51 = -1;
    char v52 = 0;
    long long __p = 0;
    uint64_t v54 = 0;
    uint64_t v56 = -1;
    uint64_t v57 = -1;
    uint64_t v55 = 0;
    char v58 = 0;
    char v24 = 1;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v3 = v19;
    v19[7] = Current;
    std::string::assign((std::string *)(v3 + 8), "com.apple.locationd");
    int64_t v4 = v19;
    *((_DWORD *)v19 + 23) = *(_DWORD *)(a1 + 72);
    double v5 = v4[7];
    if (v5 > 0.0)
    {
      double v6 = *(double *)(a1 + 104);
      if (v6 > 0.0) {
        *((_DWORD *)v4 + 29) = llround((v5 - v6) / 86400.0);
      }
    }
    if (v5 > 0.0)
    {
      double v7 = *(double *)(a1 + 112);
      if (v7 > 0.0) {
        *((_DWORD *)v4 + 30) = llround((v5 - v7) / 86400.0);
      }
    }
    *((unsigned char *)v4 + 132) = *(unsigned char *)(a1 + 136);
    id v8 = [*(id *)(a1 + 232) description];
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    xpc_object_t v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 56) UTF8String];
      id v11 = [v8 UTF8String];
      *(_DWORD *)uint64_t buf = 136380931;
      id v64 = v10;
      __int16 v65 = 2081;
      id v66 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,starting catalog download with options,%{private}s", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v14 = [*(id *)(a1 + 56) UTF8String];
      id v15 = [v8 UTF8String];
      int v59 = 136380931;
      id v60 = v14;
      __int16 v61 = 2081;
      id v62 = v15;
      id v16 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadCatalog()", "%s\n", v16);
      if (v16 != (char *)buf) {
        free(v16);
      }
    }
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void *)(a1 + 232);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _OWORD v17[2] = sub_1007EA858;
    float v17[3] = &unk_1022C9CC8;
    void v17[4] = &v18;
    void v17[5] = a1;
    +[MAAsset startCatalogDownload:v12 options:v13 then:v17];
    *(CFAbsoluteTime *)(a1 + 104) = CFAbsoluteTimeGetCurrent();
    sub_1007EA04C((char *)a1);
    _Block_object_dispose(&v18, 8);
    if (SHIBYTE(v55) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v49) < 0) {
      operator delete(v47);
    }
    if (SHIBYTE(v43) < 0) {
      operator delete(v41);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(v35);
    }
    if (SBYTE7(v27) < 0) {
      operator delete(v26[0]);
    }
  }
}

void sub_1007E99D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  sub_1007EA7E4(v10 + 48);
  _Unwind_Resume(a1);
}

void sub_1007E9A08(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_INTERVAL, *(void *)(a1 + 40));
  xpc_dictionary_set_string(v2, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_DELAY, *(void *)(a1 + 32));
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_GRACE_PERIOD, *(void *)(a1 + 40) / 2);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  uint64_t v3 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 56) UTF8String];
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6 >= 0) {
      uint64_t v7 = *(void *)(a1 + 40);
    }
    else {
      uint64_t v7 = v6 + 1;
    }
    *(_DWORD *)uint64_t buf = 136381443;
    id v24 = v4;
    __int16 v25 = 2050;
    uint64_t v26 = v5;
    __int16 v27 = 2050;
    uint64_t v28 = v7 >> 1;
    __int16 v29 = 2050;
    uint64_t v30 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,registering asset purge activity,delay,%{public}lld,gracePeriod,%{public}lld,interval,%{public}lld", buf, 0x2Au);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v9 = [*(id *)(a1 + 56) UTF8String];
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    if (v11 >= 0) {
      uint64_t v12 = *(void *)(a1 + 40);
    }
    else {
      uint64_t v12 = v11 + 1;
    }
    int v15 = 136381443;
    id v16 = v9;
    __int16 v17 = 2050;
    uint64_t v18 = v10;
    __int16 v19 = 2050;
    uint64_t v20 = v12 >> 1;
    __int16 v21 = 2050;
    uint64_t v22 = v11;
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::registerAssetPurgeActivity()", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
  id v8 = (const char *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0) {
    id v8 = *(const char **)v8;
  }
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1007ED994;
  handler[3] = &unk_1022C9C78;
  handler[4] = a1;
  xpc_activity_register(v8, v2, handler);
  xpc_release(v2);
}

id sub_1007E9D28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  xpc_object_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(v1 + 56) UTF8String];
    *(_DWORD *)uint64_t buf = 136380675;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,periodic AWD timer fired", buf, 0xCu);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    [*(id *)(v1 + 56) UTF8String];
    uint64_t v5 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::init()_block_invoke", "%s\n", v5);
    if (v5 != (char *)buf) {
      free(v5);
    }
  }
  return sub_1007E9EF0(v1);
}

id sub_1007E9EF0(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  sub_1000C7F88(&v14);
  int v16 = 0;
  int v3 = sub_1004D0870(v14, "DownloadNotTriggeredPeriod", &v16);
  LODWORD(v4) = v16;
  double v5 = (double)v4;
  if (v15) {
    sub_1000DB0A0(v15);
  }
  double v6 = vabdd_f64(Current, *(double *)(a1 + 112));
  if (v3) {
    double v7 = v5;
  }
  else {
    double v7 = 604800.0;
  }
  if (v6 > v7 && vabdd_f64(Current, *(double *)(a1 + 160)) > v7)
  {
    sub_1007EE884(a1);
    *(CFAbsoluteTime *)(a1 + 160) = CFAbsoluteTimeGetCurrent();
    sub_1007EA04C((char *)a1);
  }
  sub_1000C7F88(&v14);
  int v16 = 0;
  int v8 = sub_1004D0870(v14, "VersionReportingPeriod", &v16);
  LODWORD(v9) = v16;
  double v10 = (double)v9;
  if (v15) {
    sub_1000DB0A0(v15);
  }
  double v11 = vabdd_f64(Current, *(double *)(a1 + 168));
  if (v8) {
    double v12 = v10;
  }
  else {
    double v12 = 604800.0;
  }
  if (v11 > v12)
  {
    sub_1007EF004(a1);
    *(CFAbsoluteTime *)(a1 + 168) = CFAbsoluteTimeGetCurrent();
    sub_1007EA04C((char *)a1);
  }
  return [*(id *)(a1 + 152) setNextFireDelay:86400.0];
}

void sub_1007EA030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_1000DB0A0(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007EA04C(char *a1)
{
  sub_1000E9354(v8);
  sub_100163398((uint64_t)v8, @"kLastAttemptedCatalogDownloadKey", a1 + 104);
  sub_100163398((uint64_t)v8, @"kLastSuccessfulCatalogDownloadKey", a1 + 112);
  sub_100163398((uint64_t)v8, @"kLastAttemptedAssetDownloadKey", a1 + 120);
  sub_100163398((uint64_t)v8, @"kLastSuccessfulAssetDownloadKey", a1 + 128);
  sub_100163398((uint64_t)v8, @"kLastDownloadNotTriggeredKey", a1 + 160);
  sub_100163398((uint64_t)v8, @"kLastVersionReportingAwdKey", a1 + 168);
  uint64_t v2 = sub_1000A6958();
  int v3 = a1 + 80;
  if (a1[103] < 0) {
    int v3 = (void *)*v3;
  }
  sub_1004D38E4(v2, (const __CFString *)+[NSString stringWithUTF8String:v3], (uint64_t)v8);
  uint64_t v4 = sub_1000A6958();
  (*(void (**)(uint64_t))(*(void *)v4 + 944))(v4);
  sub_100134750(__p, "wrote");
  sub_1007EA1B8((uint64_t)a1, (uint64_t *)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return sub_10013F3C4(v8);
}

void sub_1007EA18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10013F3C4(&a16);
  _Unwind_Resume(a1);
}

void sub_1007EA1B8(uint64_t a1, uint64_t *a2)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  uint64_t v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = [*(id *)(a1 + 56) UTF8String];
    double v6 = a2;
    if (*((char *)a2 + 23) < 0) {
      double v6 = (uint64_t *)*a2;
    }
    uint64_t v7 = *(void *)(a1 + 104);
    uint64_t v8 = *(void *)(a1 + 112);
    uint64_t v9 = *(void *)(a1 + 120);
    uint64_t v10 = *(void *)(a1 + 128);
    uint64_t v11 = *(void *)(a1 + 160);
    uint64_t v12 = *(void *)(a1 + 168);
    *(_DWORD *)uint64_t buf = 136382467;
    id v15 = v5;
    __int16 v16 = 2082;
    __int16 v17 = v6;
    __int16 v18 = 2050;
    uint64_t v19 = v7;
    __int16 v20 = 2050;
    uint64_t v21 = v8;
    __int16 v22 = 2050;
    uint64_t v23 = v9;
    __int16 v24 = 2050;
    uint64_t v25 = v10;
    __int16 v26 = 2050;
    uint64_t v27 = v11;
    __int16 v28 = 2050;
    uint64_t v29 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,%{public}s,catalog download stats cache,lastAttemptedCatalogDownload,%{public}.1f,lastSuccessfulCatalogDownload,%{public}.1f,lastAttemptedAssetDownload,%{public}.1f,lastSuccessfulAssetDownload,%{public}.1f,lastDownloadNotTriggeredAwd,%{public}.1f,lastVersionReportingAwd,%{public}.1f", buf, 0x52u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    [*(id *)(a1 + 56) UTF8String];
    uint64_t v13 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::printCachedDownloadStats(std::string)", "%s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

void sub_1007EA43C(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(v2 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380675;
      id v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog download activity handler triggered", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v10 = [*(id *)(v2 + 56) UTF8String];
      int v15 = 136380675;
      id v16 = v10;
      uint64_t v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::registerCatalogDownloadActivity()_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    double v6 = [objc_msgSend(*(id *)(v2 + 48), "silo") queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007EA7DC;
    block[3] = &unk_1022A3020;
    block[4] = v2;
    dispatch_async(v6, block);
  }
  else
  {
    int v7 = state;
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v8 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [*(id *)(v2 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380931;
      id v20 = v9;
      __int16 v21 = 1026;
      int v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog download activity handler triggered with unexpected state %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v12 = [*(id *)(v2 + 56) UTF8String];
      int v15 = 136380931;
      id v16 = v12;
      __int16 v17 = 1026;
      int v18 = v7;
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::registerCatalogDownloadActivity()_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_1007EA7DC(uint64_t a1)
{
}

uint64_t sub_1007EA7E4(uint64_t a1)
{
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  if (*(char *)(a1 + 207) < 0) {
    operator delete(*(void **)(a1 + 184));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1007EA858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  double v6 = [[*(id *)(v4 + 48) silo] queue];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1007EA908;
  v7[3] = &unk_1022C9CA0;
  v7[4] = *(void *)(a1 + 32);
  void v7[5] = v4;
  void v7[6] = a2;
  *(CFAbsoluteTime *)&v7[7] = Current;
  dispatch_async(v6, v7);
}

void sub_1007EA908(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  *(unsigned char *)(v2 + 177) = 0;
  uint64_t v3 = *(void *)(a1 + 48);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 108) = v3;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 112) = vcvtpd_s64_f64(*(double *)(a1 + 56)- *(double *)(*(void *)(*(void *)(a1 + 32) + 8)+ 56));
  if (v3)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(v2 + 56) UTF8String];
      uint64_t v6 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t buf = 136380931;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)uint64_t v51 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog download failed with error %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v31 = [*(id *)(v2 + 56) UTF8String];
      uint64_t v32 = *(void *)(a1 + 48);
      *(_DWORD *)uint64_t v42 = 136380931;
      *(void *)&v42[4] = v31;
      *(_WORD *)&v42[12] = 1026;
      *(_DWORD *)uint64_t v43 = v32;
      int v33 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadCatalog()_block_invoke", "%s\n", v33);
      if (v33 != buf) {
        free(v33);
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 88) = 2;
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    int v7 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [*(id *)(v2 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380675;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,catalog download succeeded", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v34 = [*(id *)(v2 + 56) UTF8String];
      *(_DWORD *)uint64_t v42 = 136380675;
      *(void *)&v42[4] = v34;
      int64_t v35 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadCatalog()_block_invoke", "%s\n", v35);
      if (v35 != buf) {
        free(v35);
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 88) = 1;
    *(CFAbsoluteTime *)(v2 + 112) = CFAbsoluteTimeGetCurrent();
    sub_1007EA04C((char *)v2);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 56))(v2, 2);
  }
  uint64_t v9 = *(void *)(a1 + 32);
  int v10 = *(_DWORD *)(*(void *)(v9 + 8) + 112);
  *(_DWORD *)uint64_t buf = 147;
  *(_DWORD *)&uint8_t buf[8] = v10;
  v56[0] = 0;
  int v11 = *(_DWORD *)(*(void *)(v9 + 8) + 116);
  v56[2] = 148;
  v56[4] = v11;
  unsigned char v56[10] = 0;
  int v12 = *(_DWORD *)(*(void *)(v9 + 8) + 120);
  v56[12] = 149;
  v56[14] = v12;
  v56[20] = 0;
  LOBYTE(v12) = *(unsigned char *)(*(void *)(v9 + 8) + 132);
  v56[22] = 150;
  char v57 = v12;
  int v58 = 7;
  int v13 = *(_DWORD *)(*(void *)(v9 + 8) + 108);
  int v59 = 151;
  int v60 = v13;
  int v61 = 0;
  LODWORD(v9) = *(_DWORD *)(*(void *)(v9 + 8) + 92);
  int v62 = 152;
  int v63 = v9;
  int v64 = 0;
  char v40 = 0;
  uint64_t v41 = 0;
  uint64_t v39 = 0;
  *(void *)uint64_t v42 = &v39;
  v42[8] = 0;
  uint64_t v39 = (char *)operator new(0xF0uLL);
  char v40 = v39;
  uint64_t v41 = v39 + 240;
  char v40 = (unsigned char *)sub_100682A48((uint64_t)&v41, (uint64_t)buf, (uint64_t)&v65, (uint64_t)v39);
  for (uint64_t i = 208; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  int v15 = *(void **)(v2 + 240);
  memset(v38, 0, sizeof(v38));
  sub_100682C20(v38, (uint64_t)v39, (uint64_t)v40, 0xCCCCCCCCCCCCCCCDLL * ((v40 - v39) >> 3));
  [v15 setMeasurements:sub_10067C03C(v38)];
  *(void *)uint64_t buf = v38;
  sub_100682B1C((void ***)buf);
  id v16 = *(void **)(v2 + 240);
  if (byte_10248A95F < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A948, *((unint64_t *)&xmmword_10248A948 + 1));
  }
  else
  {
    *(_OWORD *)long long __p = xmmword_10248A948;
    uint64_t v37 = unk_10248A958;
  }
  [v16 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v37) < 0) {
    operator delete(__p[0]);
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  __int16 v17 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8);
    int v19 = *(_DWORD *)(v18 + 116);
    int v20 = *(_DWORD *)(v18 + 120);
    int v21 = *(unsigned __int8 *)(v18 + 132);
    int v23 = *(_DWORD *)(v18 + 108);
    int v22 = *(_DWORD *)(v18 + 112);
    LODWORD(v18) = *(_DWORD *)(v18 + 92);
    *(_DWORD *)uint64_t buf = 67241472;
    *(_DWORD *)&uint8_t buf[4] = v22;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v19;
    *(_WORD *)uint64_t v51 = 1026;
    *(_DWORD *)&v51[2] = v20;
    __int16 v52 = 1026;
    int v53 = v21;
    __int16 v54 = 1026;
    int v55 = v23;
    LOWORD(v56[0]) = 1026;
    *(_DWORD *)((char *)v56 + 2) = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#CLMA,#careport,CatalogDownload,MACatalogDownloadDuration,%{public}d,MACatalogDownloadDaysSinceLastAttempt,%{public}d,MACatalogDownloadDaysSinceLastSuccess,%{public}d,MACatalogDownloadAggressiveCriteriaUsed,%{public}d,MACatalogDownloadResult,%{public}d,MACatalogDownloadAssetType,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v24 = *(void *)(*(void *)(a1 + 32) + 8);
    int v25 = *(_DWORD *)(v24 + 116);
    int v26 = *(_DWORD *)(v24 + 120);
    int v27 = *(unsigned __int8 *)(v24 + 132);
    int v29 = *(_DWORD *)(v24 + 108);
    int v28 = *(_DWORD *)(v24 + 112);
    LODWORD(v24) = *(_DWORD *)(v24 + 92);
    *(_DWORD *)uint64_t v42 = 67241472;
    *(_DWORD *)&v42[4] = v28;
    *(_WORD *)&v42[8] = 1026;
    *(_DWORD *)&v42[10] = v25;
    *(_WORD *)uint64_t v43 = 1026;
    *(_DWORD *)&v43[2] = v26;
    __int16 v44 = 1026;
    int v45 = v27;
    __int16 v46 = 1026;
    int v47 = v29;
    __int16 v48 = 1026;
    int v49 = v24;
    uint64_t v30 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadCatalog()_block_invoke", "%s\n", v30);
    if (v30 != buf) {
      free(v30);
    }
  }
  sub_1007E9198(v2);
  *(void *)uint64_t buf = &v39;
  sub_100682B1C((void ***)buf);
}

void sub_1007EB05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char *a30)
{
  a30 = &a21;
  sub_100682B1C((void ***)&a30);
  _Unwind_Resume(a1);
}

id sub_1007EB0E8(long long *a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  void v3[2] = sub_1007EF3D8;
  void v3[3] = &unk_1022C9DB8;
  if (*((char *)a1 + 23) < 0)
  {
    sub_1000DC48C(&__p, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __p = *a1;
    uint64_t v5 = *((void *)a1 + 2);
  }
  id v1 = [v3 copy];
  if (SHIBYTE(v5) < 0) {
    operator delete((void *)__p);
  }
  return v1;
}

void sub_1007EB1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1007EB1BC(uint64_t a1, unint64_t a2)
{
  int v2 = a2;
  if (a2 < 7) {
    return dword_101D2E100[a2];
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  uint64_t v4 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)uint64_t buf = 67240192;
    int v8 = v2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#CLMA,assetStatePrecedence,asset has unexpected state,%{public}d", buf, 8u);
  }
  BOOL v5 = sub_10013D1A0(115, 0);
  uint64_t result = 0;
  if (v5)
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "uint32_t CLMobileAsset::assetStatePrecedence(MAAssetState)", "%s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
    return 0;
  }
  return result;
}

id sub_1007EB38C(uint64_t a1, void *a2, unint64_t a3, _DWORD *a4)
{
  int v5 = a3;
  uint64_t v6 = a2;
  if (a3 > 9 || ((1 << a3) & 0x205) == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    __int16 v44 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v45 = [*(id *)(a1 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136381187;
      id v72 = v45;
      __int16 v73 = 1026;
      *(_DWORD *)char v74 = v5;
      *(_WORD *)&v74[4] = 2113;
      *(void *)&v74[6] = [v6 queryParams];
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset query failed with error %{public}d,queryParams,%{private}@", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v50 = [*(id *)(a1 + 56) UTF8String];
      int v64 = 136381187;
      id v65 = v50;
      __int16 v66 = 1026;
      *(_DWORD *)__int16 v67 = v5;
      *(_WORD *)&v67[4] = 2113;
      *(void *)&v67[6] = [v6 queryParams];
      uint64_t v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "MAAsset *CLMobileAsset::getLatestVersionFromQuery(MAAssetQuery *, MAQueryResult, QueryFailureReason &)", "%s\n", v51);
      if (v51 != (char *)buf) {
        free(v51);
      }
    }
    id v30 = 0;
    *a4 = 1;
    return v30;
  }
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  obuint64_t j = [a2 results];
  id v7 = [obj countByEnumeratingWithState:&v60 objects:v70 count:16];
  if (!v7) {
    goto LABEL_38;
  }
  id v8 = v7;
  __int16 v52 = v6;
  int v53 = a4;
  id v9 = 0;
  int v10 = -1;
  uint64_t v11 = *(void *)v61;
  uint64_t v57 = ASAttributeContentVersion;
  int v12 = -1;
  int v58 = -1;
  do
  {
    int v13 = 0;
    int v54 = v12;
    int v59 = v12 + 1;
    do
    {
      if (*(void *)v61 != v11) {
        objc_enumerationMutation(obj);
      }
      uint64_t v14 = *(void **)(*((void *)&v60 + 1) + 8 * (void)v13);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      int v15 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = [*(id *)(a1 + 56) UTF8String];
        id v17 = [v14 assetId];
        unsigned int v18 = [v14 state];
        id v19 = [v14 attributes];
        *(_DWORD *)uint64_t buf = 136381443;
        id v72 = v16;
        __int16 v73 = 2113;
        *(void *)char v74 = v17;
        *(_WORD *)&v74[8] = 1025;
        *(_DWORD *)&v74[10] = v18;
        __int16 v75 = 2113;
        id v76 = v19;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
      }
      if (sub_10013D1A0(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_102419600 != -1) {
          dispatch_once(&qword_102419600, &stru_1022C9D98);
        }
        id v22 = [*(id *)(a1 + 56) UTF8String];
        id v23 = [v14 assetId];
        unsigned int v24 = [v14 state];
        id v25 = [v14 attributes];
        int v64 = 136381443;
        id v65 = v22;
        __int16 v66 = 2113;
        *(void *)__int16 v67 = v23;
        *(_WORD *)&v67[8] = 1025;
        *(_DWORD *)&unsigned char v67[10] = v24;
        __int16 v68 = 2113;
        id v69 = v25;
        int v26 = (char *)_os_log_send_and_compose_impl();
        sub_1004BA5E4("Generic", 1, 0, 2, "MAAsset *CLMobileAsset::getLatestVersionFromQuery(MAAssetQuery *, MAQueryResult, QueryFailureReason &)", "%s\n", v26);
        if (v26 != (char *)buf) {
          free(v26);
        }
        if (!v14)
        {
LABEL_21:
          signed int v21 = -1;
          goto LABEL_22;
        }
      }
      else if (!v14)
      {
        goto LABEL_21;
      }
      id v20 = [[[v14 attributes] objectForKey:v57];
      if (!v20) {
        goto LABEL_21;
      }
      signed int v21 = [v20 intValue];
LABEL_22:
      if (v21 > v10
        || v21 == v10
        && (id v27 = [v14 state],
            uint64_t v28 = sub_1007EB1BC((uint64_t)v27, (unint64_t)v27),
            v28 > sub_1007EB1BC(v28, (unint64_t)v9)))
      {
        int v58 = v59 + v13;
        id v9 = [v14 state];
        int v10 = v21;
      }
      int v13 = (char *)v13 + 1;
    }
    while (v8 != v13);
    int v12 = v54 + v8;
    id v8 = [obj countByEnumeratingWithState:&v60 objects:v70 count:16];
  }
  while (v8);
  BOOL v29 = v10 == -1;
  uint64_t v6 = v52;
  a4 = v53;
  if (!v29)
  {
    *int v53 = 0;
    id v30 = [objc_msgSend(v52, "results") objectAtIndex:v58];
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v31 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v32 = [*(id *)(a1 + 56) UTF8String];
      id v33 = [v30 assetId];
      unsigned int v34 = [v30 state];
      id v35 = [v30 attributes];
      *(_DWORD *)uint64_t buf = 136381443;
      id v72 = v32;
      __int16 v73 = 2113;
      *(void *)char v74 = v33;
      *(_WORD *)&v74[8] = 1025;
      *(_DWORD *)&v74[10] = v34;
      __int16 v75 = 2113;
      id v76 = v35;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,found latest asset for query,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v36 = [*(id *)(a1 + 56) UTF8String];
      id v37 = [v30 assetId];
      unsigned int v38 = [v30 state];
      id v39 = [v30 attributes];
      int v64 = 136381443;
      id v65 = v36;
      __int16 v66 = 2113;
      *(void *)__int16 v67 = v37;
      *(_WORD *)&v67[8] = 1025;
      *(_DWORD *)&unsigned char v67[10] = v38;
      __int16 v68 = 2113;
      id v69 = v39;
      char v40 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "MAAsset *CLMobileAsset::getLatestVersionFromQuery(MAAssetQuery *, MAQueryResult, QueryFailureReason &)", "%s\n", v40);
      if (v40 != (char *)buf) {
        free(v40);
      }
    }
    return v30;
  }
LABEL_38:
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  uint64_t v41 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v42 = [*(id *)(a1 + 56) UTF8String];
    id v43 = [v6 queryParams];
    *(_DWORD *)uint64_t buf = 136380931;
    id v72 = v42;
    __int16 v73 = 2113;
    *(void *)char v74 = v43;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,failed to find a suitable asset in the query results,queryParams,%{private}@", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v47 = [*(id *)(a1 + 56) UTF8String];
    id v48 = [v6 queryParams];
    int v64 = 136380931;
    id v65 = v47;
    __int16 v66 = 2113;
    *(void *)__int16 v67 = v48;
    int v49 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "MAAsset *CLMobileAsset::getLatestVersionFromQuery(MAAssetQuery *, MAQueryResult, QueryFailureReason &)", "%s\n", v49);
    if (v49 != (char *)buf) {
      free(v49);
    }
  }
  id v30 = 0;
  *a4 = 2;
  return v30;
}

void sub_1007EBCD0(char *a1, void *a2)
{
  if (a2
    && (id v4 = [a2 attributes], (v5 = objc_msgSend(v4, "objectForKey:", ASAttributeContentVersion)) != 0))
  {
    unsigned int v6 = [v5 intValue];
  }
  else
  {
    unsigned int v6 = -1;
  }
  if (sub_1007E6964(a2))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v7 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [*((id *)a1 + 7) UTF8String];
      *(_DWORD *)uint64_t buf = 136381187;
      id v80 = v8;
      __int16 v81 = 1026;
      unsigned int v82 = v6;
      __int16 v83 = 2113;
      id v84 = [a2 attributes];
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset is already downloaded,version,%{public}d,attributes,%{private}@", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v22 = [*((id *)a1 + 7) UTF8String];
      *(_DWORD *)uint64_t v41 = 136381187;
      *(void *)&int v41[4] = v22;
      *(_WORD *)&unsigned char v41[12] = 1026;
      *(_DWORD *)&v41[14] = v6;
      *(_WORD *)&v41[18] = 2113;
      *(void *)&v41[20] = [a2 attributes];
      id v23 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)", "%s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    (*(void (**)(char *, void *))(*(void *)a1 + 72))(a1, a2);
  }
  else
  {
    *(void *)uint64_t v41 = 0;
    *(void *)&v41[8] = v41;
    *(void *)&v41[16] = 0x14812000000;
    *(void *)&v41[24] = sub_1001779E4;
    id v42 = sub_10017737C;
    id v43 = "";
    unint64_t v45 = 0xBFF0000000000000;
    long long v46 = 0u;
    long long v47 = 0u;
    uint64_t v49 = -1;
    int v48 = 0;
    int v50 = -2;
    uint64_t v51 = -1;
    uint64_t v52 = -1;
    int v53 = -1;
    __int16 v54 = 0;
    int v55 = 0;
    uint64_t v56 = 0;
    uint64_t v58 = -1;
    uint64_t v59 = -1;
    uint64_t v57 = 0;
    char v60 = 0;
    long long v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v64 = -1;
    uint64_t v65 = -1;
    char v66 = 0;
    __int16 v67 = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = -1;
    uint64_t v71 = -1;
    char v72 = 0;
    long long __p = 0;
    uint64_t v74 = 0;
    uint64_t v76 = -1;
    uint64_t v77 = -1;
    uint64_t v75 = 0;
    char v78 = 0;
    char v44 = 1;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    uint64_t v10 = *(void *)&v41[8];
    *(CFAbsoluteTime *)(*(void *)&v41[8] + 56) = Current;
    std::string::assign((std::string *)(v10 + 64), "com.apple.locationd");
    uint64_t v11 = *(void *)&v41[8];
    *(_DWORD *)(*(void *)&v41[8] + 92) = *((_DWORD *)a1 + 18);
    double v12 = *(double *)(v11 + 56);
    if (v12 > 0.0)
    {
      double v13 = *((double *)a1 + 15);
      if (v13 > 0.0) {
        *(_DWORD *)(v11 + 124) = llround((v12 - v13) / 86400.0);
      }
    }
    if (v12 > 0.0)
    {
      double v14 = *((double *)a1 + 16);
      if (v14 > 0.0) {
        *(_DWORD *)(v11 + 128) = llround((v12 - v14) / 86400.0);
      }
    }
    (*(void (**)(char *, void *, uint64_t))(*(void *)a1 + 32))(a1, a2, v11 + 48);
    v33[0] = -1;
    (*(void (**)(char *, void *, _DWORD *))(*(void *)a1 + 48))(a1, a2, v33);
    id v15 = [*((id *)a1 + 29) description];
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v16 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = [*((id *)a1 + 7) UTF8String];
      id v18 = [v15 UTF8String];
      id v19 = [a2 attributes];
      *(_DWORD *)uint64_t buf = 136381443;
      id v80 = v17;
      __int16 v81 = 1026;
      unsigned int v82 = v6;
      __int16 v83 = 2081;
      id v84 = v18;
      __int16 v85 = 2113;
      id v86 = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,preparing to download asset,version,%{public}d,options,%{private}s,attributes,%{private}@", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v24 = [*((id *)a1 + 7) UTF8String];
      id v25 = [v15 UTF8String];
      id v26 = [a2 attributes];
      v33[1] = 136381443;
      id v34 = v24;
      __int16 v35 = 1026;
      unsigned int v36 = v6;
      __int16 v37 = 2081;
      id v38 = v25;
      __int16 v39 = 2113;
      id v40 = v26;
      id v27 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)", "%s\n", v27);
      if (v27 != (char *)buf) {
        free(v27);
      }
    }
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    _OWORD v31[2] = sub_1007EC470;
    v31[3] = &unk_1022C9CF0;
    unsigned int v32 = v6;
    v31[4] = a2;
    void v31[5] = a1;
    [a2 attachProgressCallBack:v31];
    id v20 = a2;
    a1[178] = 1;
    uint64_t v21 = *((void *)a1 + 29);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472;
    double v28[2] = sub_1007EC6F0;
    v28[3] = &unk_1022C9D40;
    void v28[5] = v41;
    void v28[6] = a1;
    v28[4] = a2;
    unsigned int v29 = v6;
    int v30 = v33[0];
    [a2 startDownload:v21 then:v28];
    *((CFAbsoluteTime *)a1 + 15) = CFAbsoluteTimeGetCurrent();
    sub_1007EA04C(a1);
    _Block_object_dispose(v41, 8);
    if (SHIBYTE(v75) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v69) < 0) {
      operator delete(v67);
    }
    if (SHIBYTE(v63) < 0) {
      operator delete(v61);
    }
    if (SHIBYTE(v57) < 0) {
      operator delete(v55);
    }
    if (SBYTE7(v47) < 0) {
      operator delete((void *)v46);
    }
  }
}

void sub_1007EC42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
}

void sub_1007EC470(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  id v5 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    id v6 = [*(id *)(v4 + 56) UTF8String];
    int v7 = *(_DWORD *)(a1 + 48);
    id v8 = [a2 totalWritten];
    id v9 = [a2 totalExpected];
    id v10 = [*(id *)(a1 + 32) attributes];
    *(_DWORD *)uint64_t buf = 136381699;
    id v13 = v6;
    __int16 v14 = 1026;
    int v15 = v7;
    __int16 v16 = 2050;
    id v17 = v8;
    __int16 v18 = 2050;
    id v19 = v9;
    __int16 v20 = 2113;
    id v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#CLMA,%{private}s,download progress for asset,version,%{public}d,totalWritten,%{public}lld,totalExpected,%{public}lld,attributes,%{private}@", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    [*(id *)(v4 + 56) UTF8String];
    [a2 totalWritten];
    [a2 totalExpected];
    [*(id *)(a1 + 32) attributes];
    uint64_t v11 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)_block_invoke", "%s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
}

void sub_1007EC6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  id v6 = [[*(id *)(v4 + 48) silo] queue];
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1007EC7A4;
  void v8[3] = &unk_1022C9D18;
  uint64_t v10 = v4;
  uint64_t v11 = a2;
  long long v9 = *(_OWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 56);
  CFAbsoluteTime v12 = Current;
  uint64_t v13 = v7;
  dispatch_async(v6, v8);
}

void sub_1007EC7A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  *(unsigned char *)(v2 + 178) = 0;
  uint64_t v3 = *(void *)(a1 + 56);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 108) = v3;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 112) = vcvtpd_s64_f64(*(double *)(a1 + 64)- *(double *)(*(void *)(*(void *)(a1 + 40) + 8)+ 56));
  if (v3)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(v2 + 56) UTF8String];
      int v6 = *(_DWORD *)(a1 + 72);
      uint64_t v7 = *(void *)(a1 + 56);
      id v8 = [*(id *)(a1 + 32) attributes];
      *(_DWORD *)uint64_t buf = 136381443;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)__int16 v67 = v6;
      *(_WORD *)&v67[4] = 1025;
      *(_DWORD *)uint64_t v68 = v7;
      *(_WORD *)&v68[4] = 2113;
      *(void *)&v68[6] = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset download failed,version,%{public}d,result,%{private}d,attributes,%{private}@", buf, 0x22u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v42 = [*(id *)(v2 + 56) UTF8String];
      int v43 = *(_DWORD *)(a1 + 72);
      int v44 = *(_DWORD *)(a1 + 56);
      id v45 = [*(id *)(a1 + 32) attributes];
      int v62 = 136381443;
      *(void *)long long __p = v42;
      *(_WORD *)&__p[8] = 1026;
      *(_DWORD *)&__p[10] = v43;
      *(_WORD *)&__p[14] = 1025;
      *(_DWORD *)&__p[16] = v44;
      *(_WORD *)&__p[20] = 2113;
      *(void *)&__p[22] = v45;
      long long v46 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)_block_invoke", "%s\n", v46);
      if (v46 != buf) {
        free(v46);
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 88) = 4;
  }
  else
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    long long v9 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(v2 + 56) UTF8String];
      int v11 = *(_DWORD *)(a1 + 72);
      id v12 = [[[*(id *)(a1 + 32) getLocalUrl] absoluteString] UTF8String];
      id v13 = [*(id *)(a1 + 32) attributes];
      *(_DWORD *)uint64_t buf = 136381443;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 1026;
      *(_DWORD *)__int16 v67 = v11;
      *(_WORD *)&v67[4] = 2081;
      *(void *)uint64_t v68 = v12;
      *(_WORD *)&v68[8] = 2113;
      *(void *)&v68[10] = v13;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset download completed successfully,version,%{public}d,URL,%{private}s,attributes,%{private}@", buf, 0x26u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v47 = [*(id *)(v2 + 56) UTF8String];
      int v48 = *(_DWORD *)(a1 + 72);
      id v49 = [[[*(id *)(a1 + 32) getLocalUrl] absoluteString] UTF8String];
      id v50 = [*(id *)(a1 + 32) attributes];
      int v62 = 136381443;
      *(void *)long long __p = v47;
      *(_WORD *)&__p[8] = 1026;
      *(_DWORD *)&__p[10] = v48;
      *(_WORD *)&__p[14] = 2081;
      *(void *)&__p[16] = v49;
      *(_WORD *)&__p[24] = 2113;
      *(void *)&__p[26] = v50;
      uint64_t v51 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)_block_invoke", "%s\n", v51);
      if (v51 != buf) {
        free(v51);
      }
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 88) = 3;
    *(CFAbsoluteTime *)(v2 + 128) = CFAbsoluteTimeGetCurrent();
    sub_1007EA04C((char *)v2);
    if ([*(id *)(a1 + 32) refreshState]) {
      (*(void (**)(uint64_t, void))(*(void *)v2 + 72))(v2, *(void *)(a1 + 32));
    }
  }
  sub_1007ED19C(*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 104), *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 100), (uint64_t)v58);
  uint64_t v14 = *(void *)(a1 + 40);
  int v15 = *(_DWORD *)(*(void *)(v14 + 8) + 112);
  *(_DWORD *)uint64_t buf = 153;
  *(_DWORD *)&uint8_t buf[8] = v15;
  *(_DWORD *)&v68[12] = 0;
  int v16 = *(_DWORD *)(*(void *)(v14 + 8) + 124);
  LODWORD(v70) = 154;
  int v71 = v16;
  int v72 = 0;
  int v17 = *(_DWORD *)(*(void *)(v14 + 8) + 128);
  int v73 = 155;
  int v74 = v17;
  int v75 = 0;
  int v18 = *(_DWORD *)(*(void *)(v14 + 8) + 108);
  int v76 = 156;
  int v77 = v18;
  int v78 = 0;
  LOBYTE(v14) = *(unsigned char *)(*(void *)(v14 + 8) + 133);
  int v79 = 157;
  char v80 = v14;
  int v19 = *(_DWORD *)(a1 + 76);
  int v81 = 7;
  int v82 = 158;
  int v83 = v19;
  int v84 = 0;
  int v62 = 159;
  if (SHIBYTE(v59) < 0)
  {
    sub_1000DC48C(&__p[4], v58[0], (unint64_t)v58[1]);
    int v20 = v62;
  }
  else
  {
    *(_OWORD *)&__p[4] = *(_OWORD *)v58;
    *(void *)&__p[20] = v59;
    int v20 = 159;
  }
  int v85 = v20;
  long long v86 = *(_OWORD *)&__p[4];
  uint64_t v87 = *(void *)&__p[20];
  memset(&__p[4], 0, 24);
  int v88 = 6;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  int v55 = 0;
  char v60 = (void **)&v55;
  char v61 = 0;
  int v55 = (char *)operator new(0x118uLL);
  uint64_t v56 = v55;
  uint64_t v57 = v55 + 280;
  uint64_t v56 = (unsigned char *)sub_100682A48((uint64_t)&v57, (uint64_t)buf, (uint64_t)&v89, (uint64_t)v55);
  for (uint64_t i = 248; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  if ((__p[27] & 0x80000000) != 0) {
    operator delete(*(void **)&__p[4]);
  }
  id v22 = *(void **)(v2 + 240);
  memset(v54, 0, sizeof(v54));
  sub_100682C20(v54, (uint64_t)v55, (uint64_t)v56, 0xCCCCCCCCCCCCCCCDLL * ((v56 - v55) >> 3));
  [v22 setMeasurements:sub_10067C03C(v54)];
  *(void *)uint64_t buf = v54;
  sub_100682B1C((void ***)buf);
  id v23 = *(void **)(v2 + 240);
  if (byte_10248A977 < 0)
  {
    sub_1000DC48C(__dst, (void *)xmmword_10248A960, *((unint64_t *)&xmmword_10248A960 + 1));
  }
  else
  {
    *(_OWORD *)__dst = xmmword_10248A960;
    uint64_t v53 = unk_10248A970;
  }
  [v23 submitEvent:sub_1007EB0E8((long long *)__dst)];
  if (SHIBYTE(v53) < 0) {
    operator delete(__dst[0]);
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  id v24 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 8);
    int v26 = *(_DWORD *)(v25 + 124);
    int v27 = *(_DWORD *)(v25 + 128);
    int v29 = *(_DWORD *)(v25 + 108);
    int v28 = *(_DWORD *)(v25 + 112);
    int v30 = *(unsigned __int8 *)(v25 + 133);
    int v31 = *(_DWORD *)(a1 + 76);
    unsigned int v32 = v58;
    if (v59 < 0) {
      unsigned int v32 = (void **)v58[0];
    }
    *(_DWORD *)uint64_t buf = 67241730;
    *(_DWORD *)&uint8_t buf[4] = v28;
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v26;
    *(_WORD *)__int16 v67 = 1026;
    *(_DWORD *)&void v67[2] = v27;
    *(_WORD *)uint64_t v68 = 1026;
    *(_DWORD *)&long long v68[2] = v29;
    *(_WORD *)&v68[6] = 1026;
    *(_DWORD *)&v68[8] = v30;
    *(_WORD *)&v68[12] = 1026;
    *(_DWORD *)&v68[14] = v31;
    __int16 v69 = 2082;
    uint64_t v70 = v32;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#CLMA,#careport,AssetDownload,MAAssetDownloadDuration,%{public}d,MAAssetDownloadDaysSinceLastAttempt,%{public}d,MAAssetDownloadDaysSinceLastSuccess,%{public}d,MAAssetDownloadResult,%{public}d,MAAssetDownloadGenericAssetUsed,%{public}d,MAAssetDownloadAssetComponent,%{public}d,MAAssetDownloadAssetVersion,%{public}s", buf, 0x30u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v33 = *(void *)(*(void *)(a1 + 40) + 8);
    int v34 = *(_DWORD *)(v33 + 124);
    int v35 = *(_DWORD *)(v33 + 128);
    int v37 = *(_DWORD *)(v33 + 108);
    int v36 = *(_DWORD *)(v33 + 112);
    int v38 = *(unsigned __int8 *)(v33 + 133);
    int v39 = *(_DWORD *)(a1 + 76);
    id v40 = v58;
    if (v59 < 0) {
      id v40 = (void **)v58[0];
    }
    int v62 = 67241730;
    *(_DWORD *)long long __p = v36;
    *(_WORD *)&__p[4] = 1026;
    *(_DWORD *)&__p[6] = v34;
    *(_WORD *)&__p[10] = 1026;
    *(_DWORD *)&unsigned char __p[12] = v35;
    *(_WORD *)&__p[16] = 1026;
    *(_DWORD *)&__p[18] = v37;
    *(_WORD *)&__p[22] = 1026;
    *(_DWORD *)&__p[24] = v38;
    *(_WORD *)&__p[28] = 1026;
    *(_DWORD *)&__p[30] = v39;
    __int16 v64 = 2082;
    uint64_t v65 = v40;
    uint64_t v41 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::downloadAsset(MAAsset *)_block_invoke", "%s\n", v41);
    if (v41 != buf) {
      free(v41);
    }
  }

  *(void *)uint64_t buf = &v55;
  sub_100682B1C((void ***)buf);
  if (SHIBYTE(v59) < 0) {
    operator delete(v58[0]);
  }
}

void sub_1007ED0CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char *a40)
{
  a40 = &a20;
  sub_100682B1C((void ***)&a40);
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1007ED19C(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (((a2 | a1) & 0x80000000) == 0)
  {
    std::to_string(&v13, a1);
    id v5 = std::string::append(&v13, ".");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, a2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    long long v9 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
    std::string::size_type v10 = v9->__r_.__value_.__l.__size_;
    *(void *)a3 = v9->__r_.__value_.__r.__words[0];
    *(void *)(a3 + 8) = v10;
    *(void *)(a3 + 15) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v10) = *((unsigned char *)&v9->__r_.__value_.__s + 23);
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    int v11 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(unsigned char *)(a3 + 23) = v10;
    if (v11 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1007ED290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

id sub_1007ED2DC(uint64_t a1, void *a2)
{
  id result = sub_1007E6D9C(a2);
  if (result)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v5 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
    {
      id v6 = [*(id *)(a1 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380931;
      id v16 = v6;
      __int16 v17 = 2113;
      id v18 = [a2 attributes];
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#CLMA,%{private}s,purging asset,attributes,%{private}@", buf, 0x16u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v8 = [*(id *)(a1 + 56) UTF8String];
      int v11 = 136380931;
      id v12 = v8;
      __int16 v13 = 2113;
      id v14 = [a2 attributes];
      long long v9 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::purgeAsset(MAAsset *)", "%s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
    id v7 = a2;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    _DWORD v10[2] = sub_1007ED53C;
    v10[3] = &unk_1022C9D68;
    v10[4] = a2;
    void v10[5] = a1;
    return [a2 purge:v10];
  }
  return result;
}

void sub_1007ED53C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a2)
  {
    int v4 = a2;
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v5 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_ERROR))
    {
      id v6 = [*(id *)(v3 + 56) UTF8String];
      id v7 = [*(id *)(a1 + 32) assetId];
      unsigned int v8 = [*(id *)(a1 + 32) state];
      id v9 = [*(id *)(a1 + 32) attributes];
      *(_DWORD *)uint64_t buf = 136381699;
      id v17 = v6;
      __int16 v18 = 1026;
      *(_DWORD *)int v19 = v4;
      *(_WORD *)&void v19[4] = 2113;
      *(void *)&void v19[6] = v7;
      __int16 v20 = 1025;
      LODWORD(v21[0]) = v8;
      WORD2(v21[0]) = 2113;
      *(void *)((char *)v21 + 6) = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#CLMA,%{private}s,asset purge failed,error,%{public}d,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x2Cu);
    }
    if (!sub_10013D1A0(115, 0)) {
      goto LABEL_16;
    }
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    [*(id *)(v3 + 56) UTF8String];
    [*(id *)(a1 + 32) assetId];
    [*(id *)(a1 + 32) state];
    [*(id *)(a1 + 32) attributes];
    std::string::size_type v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 0, "void CLMobileAsset::purgeAsset(MAAsset *)_block_invoke", "%s\n", v10);
    if (v10 == (char *)buf) {
      goto LABEL_16;
    }
LABEL_20:
    free(v10);
    goto LABEL_16;
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  int v11 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEBUG))
  {
    id v12 = [*(id *)(v3 + 56) UTF8String];
    id v13 = [*(id *)(a1 + 32) assetId];
    unsigned int v14 = [*(id *)(a1 + 32) state];
    id v15 = [*(id *)(a1 + 32) attributes];
    *(_DWORD *)uint64_t buf = 136381443;
    id v17 = v12;
    __int16 v18 = 2113;
    *(void *)int v19 = v13;
    *(_WORD *)&v19[8] = 1025;
    *(_DWORD *)&v19[10] = v14;
    __int16 v20 = 2113;
    v21[0] = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "#CLMA,%{private}s,asset purge succeeded,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    [*(id *)(v3 + 56) UTF8String];
    [*(id *)(a1 + 32) assetId];
    [*(id *)(a1 + 32) state];
    [*(id *)(a1 + 32) attributes];
    std::string::size_type v10 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::purgeAsset(MAAsset *)_block_invoke", "%s\n", v10);
    if (v10 != (char *)buf) {
      goto LABEL_20;
    }
  }
LABEL_16:
}

void sub_1007ED994(uint64_t a1, xpc_activity_t activity)
{
  uint64_t v2 = *(void *)(a1 + 32);
  xpc_activity_state_t state = xpc_activity_get_state(activity);
  if (state == 2)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    int v4 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(v2 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380675;
      id v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge activity handler triggered", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v10 = [*(id *)(v2 + 56) UTF8String];
      int v15 = 136380675;
      id v16 = v10;
      int v11 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::registerAssetPurgeActivity()_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
    id v6 = [objc_msgSend(*(id *)(v2 + 48), "silo") queue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1007EDD34;
    block[3] = &unk_1022A3020;
    block[4] = v2;
    dispatch_async(v6, block);
  }
  else
  {
    int v7 = state;
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    unsigned int v8 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = [*(id *)(v2 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380931;
      id v20 = v9;
      __int16 v21 = 1026;
      int v22 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge activity handler triggered with unexpected state %{public}d", buf, 0x12u);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v12 = [*(id *)(v2 + 56) UTF8String];
      int v15 = 136380931;
      id v16 = v12;
      __int16 v17 = 1026;
      int v18 = v7;
      id v13 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::registerAssetPurgeActivity()_block_invoke", "%s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

void sub_1007EDD34(uint64_t a1)
{
}

void sub_1007EDD3C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 178))
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    uint64_t v2 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = [*(id *)(a1 + 56) UTF8String];
      *(_DWORD *)uint64_t buf = 136380675;
      id v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge aborted due to an asset download in progress", buf, 0xCu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v4 = [*(id *)(a1 + 56) UTF8String];
      int v8 = 136380675;
      id v9 = v4;
      id v5 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()", "%s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }
  }
  else
  {
    id v6 = [objc_alloc((Class)MAAssetQuery) initWithType:*(void *)(a1 + 64)];
    [v6 returnTypes:1];
    [v6 setDoNotBlockBeforeFirstUnlock:1];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    _DWORD v7[2] = sub_1007EDF84;
    v7[3] = &unk_1022C9D68;
    v7[4] = v6;
    void v7[5] = a1;
    [v6 queryMetaData:v7];
  }
}

void sub_1007EDF84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [objc_msgSend(*(id *)(v4 + 48), "silo") queue];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1007EE020;
  block[3] = &unk_1022C91B0;
  void block[5] = v4;
  block[6] = a2;
  block[4] = *(void *)(a1 + 32);
  dispatch_async(v5, block);
}

void sub_1007EE020(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  unint64_t v2 = *(void *)(a1 + 48);
  BOOL v4 = v2 > 9;
  uint64_t v5 = (1 << v2) & 0x205;
  if (v4 || v5 == 0)
  {
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    int v39 = qword_102419608;
    if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
    {
      id v40 = [*(id *)(v3 + 56) UTF8String];
      uint64_t v41 = *(void *)(a1 + 48);
      id v42 = [*(id *)(a1 + 32) queryParams];
      *(_DWORD *)uint64_t buf = 136381187;
      id v60 = v40;
      __int16 v61 = 1026;
      *(_DWORD *)int v62 = v41;
      *(_WORD *)&v62[4] = 2113;
      *(void *)&v62[6] = v42;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge query failed with error %{public}d,queryParams,%{private}@", buf, 0x1Cu);
    }
    if (sub_10013D1A0(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v43 = [*(id *)(v3 + 56) UTF8String];
      uint64_t v44 = *(void *)(a1 + 48);
      id v45 = [*(id *)(a1 + 32) queryParams];
      int v52 = 136381187;
      id v53 = v43;
      __int16 v54 = 1026;
      *(_DWORD *)int v55 = v44;
      *(_WORD *)&v55[4] = 2113;
      *(void *)&void v55[6] = v45;
      id v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf) {
        goto LABEL_56;
      }
    }
  }
  else
  {
    if (*(unsigned char *)(v3 + 178))
    {
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      int v7 = qword_102419608;
      if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = [*(id *)(v3 + 56) UTF8String];
        *(_DWORD *)uint64_t buf = 136380675;
        id v60 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,asset purge query aborted due to an asset download in progress", buf, 0xCu);
      }
      if (!sub_10013D1A0(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_102419600 != -1) {
        dispatch_once(&qword_102419600, &stru_1022C9D98);
      }
      id v9 = [*(id *)(v3 + 56) UTF8String];
      int v52 = 136380675;
      id v53 = v9;
      id v10 = (char *)_os_log_send_and_compose_impl();
      sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()_block_invoke", "%s\n", v10);
      if (v10 == (char *)buf) {
        return;
      }
LABEL_56:
      free(v10);
      return;
    }
    long long v50 = 0u;
    long long v51 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    obuint64_t j = [*(id *)(a1 + 32) results];
    id v11 = [obj countByEnumeratingWithState:&v48 objects:v58 count:16];
    if (v11)
    {
      id v12 = v11;
      id v13 = &qword_102419000;
      unsigned int v14 = &qword_102419000;
      uint64_t v15 = *(void *)v49;
      do
      {
        id v16 = 0;
        do
        {
          if (*(void *)v49 != v15) {
            objc_enumerationMutation(obj);
          }
          __int16 v17 = *(void **)(*((void *)&v48 + 1) + 8 * (void)v16);
          if ((*(unsigned int (**)(uint64_t, void *))(*(void *)v3 + 64))(v3, v17)
            && sub_1007E6D9C(v17))
          {
            if (v13[192] != -1) {
              dispatch_once(&qword_102419600, &stru_1022C9D98);
            }
            int v18 = v14[193];
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              id v19 = [*(id *)(v3 + 56) UTF8String];
              id v20 = [v17 assetId];
              unsigned int v21 = [v17 state];
              id v22 = [v17 attributes];
              *(_DWORD *)uint64_t buf = 136381443;
              id v60 = v19;
              __int16 v61 = 2113;
              *(void *)int v62 = v20;
              id v13 = &qword_102419000;
              *(_WORD *)&v62[8] = 1025;
              *(_DWORD *)&v62[10] = v21;
              unsigned int v14 = &qword_102419000;
              __int16 v63 = 2113;
              id v64 = v22;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,attempting to purge asset,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v13[192] != -1) {
                dispatch_once(&qword_102419600, &stru_1022C9D98);
              }
              id v33 = [*(id *)(v3 + 56) UTF8String];
              id v34 = [v17 assetId];
              unsigned int v35 = [v17 state];
              id v36 = [v17 attributes];
              int v52 = 136381443;
              id v53 = v33;
              __int16 v54 = 2113;
              *(void *)int v55 = v34;
              *(_WORD *)&v55[8] = 1025;
              *(_DWORD *)&v55[10] = v35;
              __int16 v56 = 2113;
              id v57 = v36;
              int v37 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()_block_invoke", "%s\n", v37);
              if (v37 != (char *)buf) {
                free(v37);
              }
              id v13 = &qword_102419000;
              unsigned int v14 = &qword_102419000;
            }
            sub_1007ED2DC(v3, v17);
          }
          else
          {
            if (v13[192] != -1) {
              dispatch_once(&qword_102419600, &stru_1022C9D98);
            }
            id v23 = v14[193];
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              id v24 = [*(id *)(v3 + 56) UTF8String];
              id v25 = [v17 assetId];
              unsigned int v26 = [v17 state];
              id v27 = [v17 attributes];
              *(_DWORD *)uint64_t buf = 136381443;
              id v60 = v24;
              id v13 = &qword_102419000;
              __int16 v61 = 2113;
              *(void *)int v62 = v25;
              unsigned int v14 = &qword_102419000;
              *(_WORD *)&v62[8] = 1025;
              *(_DWORD *)&v62[10] = v26;
              __int16 v63 = 2113;
              id v64 = v27;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,not purging asset,assetID,%{private}@,state,%{private}d,attributes,%{private}@", buf, 0x26u);
            }
            if (sub_10013D1A0(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v13[192] != -1) {
                dispatch_once(&qword_102419600, &stru_1022C9D98);
              }
              id v28 = [*(id *)(v3 + 56) UTF8String];
              id v29 = [v17 assetId];
              unsigned int v30 = [v17 state];
              id v31 = [v17 attributes];
              int v52 = 136381443;
              id v53 = v28;
              __int16 v54 = 2113;
              *(void *)int v55 = v29;
              *(_WORD *)&v55[8] = 1025;
              *(_DWORD *)&v55[10] = v30;
              __int16 v56 = 2113;
              id v57 = v31;
              unsigned int v32 = (char *)_os_log_send_and_compose_impl();
              sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::queryForAssetsToPurge()_block_invoke", "%s\n", v32);
              if (v32 != (char *)buf) {
                free(v32);
              }
              id v13 = &qword_102419000;
              unsigned int v14 = &qword_102419000;
            }
          }
          id v16 = (char *)v16 + 1;
        }
        while (v12 != v16);
        id v38 = [obj countByEnumeratingWithState:&v48 objects:v58 count:16];
        id v12 = v38;
      }
      while (v38);
    }
  }
}

void sub_1007EE884(uint64_t a1)
{
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  unint64_t v2 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 56) UTF8String];
    uint64_t v4 = *(void *)(a1 + 112);
    *(_DWORD *)uint64_t buf = 136380931;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 2050;
    uint64_t v71 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#CLMA,%{private}s,reporting catalog download not triggered event,lastSuccessfulCatalogDownload,%{public}.1f", buf, 0x16u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    id v15 = [*(id *)(a1 + 56) UTF8String];
    uint64_t v16 = *(void *)(a1 + 112);
    int v36 = 136380931;
    *(void *)int v37 = v15;
    *(_WORD *)&v37[8] = 2050;
    *(void *)&v37[10] = v16;
    __int16 v17 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::reportDownloadNotTriggeredAwd()", "%s\n", v17);
    if (v17 != buf) {
      free(v17);
    }
  }
  *(_OWORD *)&v37[12] = 0u;
  long long v38 = 0u;
  uint64_t v40 = -1;
  int v39 = 0;
  int v41 = -2;
  uint64_t v42 = -1;
  uint64_t v43 = -1;
  int v44 = -1;
  __int16 v45 = 0;
  long long v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = -1;
  uint64_t v50 = -1;
  char v51 = 0;
  int v52 = 0;
  uint64_t v53 = 0;
  uint64_t v55 = -1;
  uint64_t v56 = -1;
  uint64_t v54 = 0;
  char v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = -1;
  uint64_t v62 = -1;
  char v63 = 0;
  id v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v67 = -1;
  uint64_t v68 = -1;
  char v69 = 0;
  LOBYTE(v36) = 1;
  *(void *)&v37[4] = CFAbsoluteTimeGetCurrent();
  std::string::assign((std::string *)&v37[12], "com.apple.locationd");
  int v5 = *(_DWORD *)(a1 + 72);
  DWORD2(v38) = 5;
  HIDWORD(v38) = v5;
  if (*(double *)&v37[4] > 0.0)
  {
    double v6 = *(double *)(a1 + 104);
    if (v6 > 0.0) {
      HIDWORD(v42) = llround((*(double *)&v37[4] - v6) / 86400.0);
    }
  }
  if (*(double *)&v37[4] > 0.0)
  {
    double v7 = *(double *)(a1 + 112);
    if (v7 > 0.0) {
      LODWORD(v43) = llround((*(double *)&v37[4] - v7) / 86400.0);
    }
  }
  if (*(double *)&v37[4] > 0.0)
  {
    double v8 = *(double *)(a1 + 120);
    if (v8 > 0.0) {
      HIDWORD(v43) = llround((*(double *)&v37[4] - v8) / 86400.0);
    }
  }
  if (*(double *)&v37[4] <= 0.0 || (double v9 = *(double *)(a1 + 128), v9 <= 0.0))
  {
    unsigned int v10 = v44;
  }
  else
  {
    unsigned int v10 = llround((*(double *)&v37[4] - v9) / 86400.0);
    int v44 = v10;
  }
  LOBYTE(v45) = *(unsigned char *)(a1 + 136);
  *(_DWORD *)uint64_t buf = 162;
  *(_DWORD *)&uint8_t buf[8] = HIDWORD(v43);
  v75[0] = 0;
  v75[2] = 163;
  v75[4] = v10;
  v75[10] = 0;
  v75[12] = 164;
  v75[14] = HIDWORD(v42);
  v75[20] = 0;
  v75[22] = 165;
  v75[24] = v43;
  v75[30] = 0;
  v75[32] = 160;
  char v76 = v45;
  int v77 = 7;
  int v78 = 161;
  int v79 = v5;
  int v80 = 0;
  id v22 = 0;
  id v23 = 0;
  id v24 = 0;
  id v25 = (void **)&v22;
  LOBYTE(v26) = 0;
  id v22 = (char *)operator new(0xF0uLL);
  id v23 = v22;
  id v24 = v22 + 240;
  id v23 = (unsigned char *)sub_100682A48((uint64_t)&v24, (uint64_t)buf, (uint64_t)&v81, (uint64_t)v22);
  for (uint64_t i = 208; i != -32; i -= 40)
    sub_100118010((uint64_t)&buf[i]);
  id v12 = *(void **)(a1 + 240);
  memset(v21, 0, sizeof(v21));
  sub_100682C20(v21, (uint64_t)v22, (uint64_t)v23, 0xCCCCCCCCCCCCCCCDLL * ((v23 - v22) >> 3));
  [v12 setMeasurements:sub_10067C03C(v21)];
  *(void *)uint64_t buf = v21;
  sub_100682B1C((void ***)buf);
  id v13 = *(void **)(a1 + 240);
  if (byte_10248A98F < 0)
  {
    sub_1000DC48C(__p, (void *)xmmword_10248A978, *((unint64_t *)&xmmword_10248A978 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = xmmword_10248A978;
    uint64_t v20 = unk_10248A988;
  }
  [v13 submitEvent:sub_1007EB0E8((long long *)__p)];
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
  if (qword_102419600 != -1) {
    dispatch_once(&qword_102419600, &stru_1022C9D98);
  }
  unsigned int v14 = qword_102419608;
  if (os_log_type_enabled((os_log_t)qword_102419608, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t buf = 67241472;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v43);
    *(_WORD *)&uint8_t buf[8] = 1026;
    *(_DWORD *)&buf[10] = v44;
    LOWORD(v71) = 1026;
    *(_DWORD *)((char *)&v71 + 2) = HIDWORD(v42);
    HIWORD(v71) = 1026;
    int v72 = v43;
    __int16 v73 = 1026;
    int v74 = v45;
    LOWORD(v75[0]) = 1026;
    *(_DWORD *)((char *)v75 + 2) = HIDWORD(v38);
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#CLMA,#careport,DownloadNotTriggered,MADownloadNotTriggeredDaysSinceLastAssetDownloadAttempt,%{public}d,MADownloadNotTriggeredDaysSinceLastAssetDownloadSuccess,%{public}d,MADownloadNotTriggeredDaysSinceLastCatalogDownloadAttempt,%{public}d,MADownloadNotTriggeredDaysSinceLastCatalogDownloadSuccess,%{public}d,MADownloadNotTriggeredAggressiveCriteriaUsed,%{public}d,MADownloadNotTriggeredAssetType,%{public}d", buf, 0x26u);
  }
  if (sub_10013D1A0(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_102419600 != -1) {
      dispatch_once(&qword_102419600, &stru_1022C9D98);
    }
    LODWORD(v25) = 67241472;
    HIDWORD(v25) = HIDWORD(v43);
    __int16 v26 = 1026;
    int v27 = v44;
    __int16 v28 = 1026;
    int v29 = HIDWORD(v42);
    __int16 v30 = 1026;
    int v31 = v43;
    __int16 v32 = 1026;
    int v33 = v45;
    __int16 v34 = 1026;
    int v35 = HIDWORD(v38);
    int v18 = (char *)_os_log_send_and_compose_impl();
    sub_1004BA5E4("Generic", 1, 0, 2, "void CLMobileAsset::reportDownloadNotTriggeredAwd()", "%s\n", v18);
    if (v18 != buf) {
      free(v18);
    }
  }
  *(void *)uint64_t buf = &v22;
  sub_100682B1C((void ***)buf);
  if (SHIBYTE(v66) < 0) {
    operator delete(v64);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete(v58);
  }
  if (SHIBYTE(v54) < 0) {
    operator delete(v52);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(v46);
  }
  if (SBYTE7(v38) < 0) {
    operator delete(*(void **)&v37[12]);
  }
}